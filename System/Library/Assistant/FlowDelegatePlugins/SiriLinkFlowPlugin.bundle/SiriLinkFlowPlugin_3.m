uint64_t protocol witness for Flow.on(input:) in conformance WFConfirmInteractionFlow()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(void **)v0 + 184))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFConfirmInteractionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for Flow.execute() in conformance WFConfirmInteractionFlow(uint64_t a1)
{
  v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 192) + **(int **)(**(void **)v1 + 192));
  v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFConfirmInteractionFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 168))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t type metadata accessor for WFConfirmInteractionFlow()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for WorkflowConfirmInteractionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B912CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorkflowConfirmInteractionError()
{
  return &type metadata for WorkflowConfirmInteractionError;
}

void *type metadata accessor for WFConfirmInteractionFlow.State()
{
  return &unk_2909F8;
}

uint64_t lazy protocol witness table accessor for type WFConfirmInteractionFlow and conformance WFConfirmInteractionFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_41()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v1 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_11_38()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_16_27()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_24_24()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_27_26()
{
  return swift_task_dealloc();
}

uint64_t static FlowStrategyUtils.makeIntentFromParse(parse:currentIntent:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v2);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v2);
  if (v8 == enum case for Parse.NLv3IntentOnly(_:))
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
    return 0;
  }
  if (v8 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    if (v8 != enum case for Parse.directInvocation(_:))
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.voiceCommands);
      v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_0, v12, v13, "Unknown parse in FlowStrategyUtils.makeIntentFromParse", v14, 2u);
        swift_slowDealloc();
      }
    }
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
  uint64_t v9 = Parse.ServerConversion.siriKitIntent.getter();
  swift_release();
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_28();
  (*(void (**)(char *))(v10 + 8))(v7);
  return v9;
}

uint64_t static FlowStrategyUtils.makeConfirmationStateFromInput(input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v3 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v5 = v4;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v48 - v10;
  uint64_t v12 = type metadata accessor for SiriKitConfirmationState();
  OUTLINED_FUNCTION_0_2();
  uint64_t v14 = v13;
  uint64_t v16 = __chkstk_darwin(v15);
  v51 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  v20 = (char *)&v48 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v48 - v21;
  uint64_t v54 = a1;
  Input.parse.getter();
  static VoiceCommandConfirmationUtils.getSiriKitConfirmationState(parse:)((uint64_t)v22);
  uint64_t v55 = v5;
  v50 = *(void (**)(char *, uint64_t))(v5 + 8);
  v50(v11, v3);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 104);
  unsigned int v56 = enum case for SiriKitConfirmationState.unset(_:);
  v52 = v23;
  uint64_t v53 = v14 + 104;
  ((void (*)(char *))v23)(v20);
  lazy protocol witness table accessor for type SiriKitConfirmationState and conformance SiriKitConfirmationState();
  LOBYTE(v11) = dispatch thunk of static Equatable.== infix(_:_:)();
  v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v20, v12);
  if ((v11 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v57, v22, v12);
  }
  v49 = v24;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
  v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = v26;
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_0, v27, v28, "Waiting for a confirmation response but there is no confirmation state in the input. Checking for server side resolution.", v29, 2u);
    swift_slowDealloc();
  }

  Input.parse.getter();
  uint64_t v30 = v55;
  if ((*(unsigned int (**)(char *, uint64_t))(v55 + 88))(v9, v3) != enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    uint64_t v46 = OUTLINED_FUNCTION_1_40();
    v47(v46);
    v50(v9, v3);
    uint64_t v43 = v57;
    uint64_t v44 = v56;
    return v52(v43, v44, v12);
  }
  (*(void (**)(char *, uint64_t))(v30 + 96))(v9, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_28();
  (*(void (**)(char *))(v31 + 8))(v9);
  v32 = v51;
  Parse.ServerConversion.confirmationState.getter();
  int v33 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v32, v12);
  v34 = (uint64_t (*)(char *, uint64_t))v49;
  v49(v32, v12);
  uint64_t v35 = v56;
  if (v33 == v56)
  {
    v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    uint64_t v39 = v57;
    if (v38)
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_0, v36, v37, "Could not find the current a server side intent confirmation. Treating input as not understood.", v40, 2u);
      swift_slowDealloc();
    }

    swift_release();
    uint64_t v41 = OUTLINED_FUNCTION_1_40();
    v42(v41);
    uint64_t v43 = v39;
    uint64_t v44 = v35;
    return v52(v43, v44, v12);
  }
  Parse.ServerConversion.confirmationState.getter();
  swift_release();
  return v34(v22, v12);
}

unint64_t lazy protocol witness table accessor for type SiriKitConfirmationState and conformance SiriKitConfirmationState()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriKitConfirmationState and conformance SiriKitConfirmationState;
  if (!lazy protocol witness table cache variable for type SiriKitConfirmationState and conformance SiriKitConfirmationState)
  {
    type metadata accessor for SiriKitConfirmationState();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitConfirmationState and conformance SiriKitConfirmationState);
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowStrategyUtils()
{
  return &type metadata for FlowStrategyUtils;
}

uint64_t OUTLINED_FUNCTION_1_40()
{
  return v0;
}

uint64_t static InputCompletionConverter.toUserData(state:)(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v11 = v6;
  if (a3 > 1u)
  {
    uint64_t v10 = &type metadata for String;
    uint64_t v8 = 0x6C65636E6163;
    unint64_t v9 = 0xE600000000000000;
  }
  else
  {
    OUTLINED_FUNCTION_2_50(v6);
    uint64_t v10 = &type metadata for String;
    uint64_t v8 = 1954047348;
    unint64_t v9 = 0xE400000000000000;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v8);
    uint64_t v10 = &type metadata for String;
    uint64_t v8 = a1;
    unint64_t v9 = a2;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v8);
  return v11;
}

uint64_t static InputCompletionConverter.toInputCompletionState(userData:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x6574617473, 0xE500000000000000);
  if ((v3 & 1) == 0) {
    return 0;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v54);
  if ((OUTLINED_FUNCTION_0_41() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = v51;
  BOOL v5 = v46 == 1701736292 && v51 == 0xE400000000000000;
  if (!v5 && (OUTLINED_FUNCTION_4_42() & 1) == 0)
  {
    BOOL v24 = v46 == 0x6C65636E6163 && v51 == 0xE600000000000000;
    if (v24 || (OUTLINED_FUNCTION_4_42() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v46 == 0x497375636F666E75 && v51 == 0xEF786F427475706ELL)
    {
      uint64_t v28 = swift_bridgeObjectRelease();
    }
    else
    {
      char v27 = OUTLINED_FUNCTION_4_42();
      uint64_t v28 = swift_bridgeObjectRelease();
      if ((v27 & 1) == 0) {
        return 0;
      }
    }
    OUTLINED_FUNCTION_3_41(v28, v29, v30, v31, v32, v33, v34, v35, v46, v51, v54);
    if (v55)
    {
      if ((OUTLINED_FUNCTION_0_41() & 1) == 0) {
        return 0;
      }
      OUTLINED_FUNCTION_5_38();
      if (v5 && v4 == 0xE400000000000000)
      {
        uint64_t v38 = swift_bridgeObjectRelease();
      }
      else
      {
        char v37 = OUTLINED_FUNCTION_4_42();
        uint64_t v38 = swift_bridgeObjectRelease();
        if ((v37 & 1) == 0) {
          return 0;
        }
      }
      OUTLINED_FUNCTION_1_41(v38, v39, v40, v41, v42, v43, v44, v45, v49, v53, v54);
      if (v55)
      {
        if (OUTLINED_FUNCTION_0_41()) {
          return v50;
        }
        return 0;
      }
    }
LABEL_46:
    outlined destroy of Any?((uint64_t)&v54);
    return 0;
  }
  uint64_t v6 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_41(v6, v7, v8, v9, v10, v11, v12, v13, v46, v51, v54);
  if (!v55) {
    goto LABEL_46;
  }
  if (OUTLINED_FUNCTION_0_41())
  {
    OUTLINED_FUNCTION_5_38();
    if (v5 && v4 == 0xE400000000000000)
    {
      uint64_t v16 = swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = OUTLINED_FUNCTION_4_42();
      uint64_t v16 = swift_bridgeObjectRelease();
      if ((v15 & 1) == 0) {
        return 0;
      }
    }
    OUTLINED_FUNCTION_1_41(v16, v17, v18, v19, v20, v21, v22, v23, v47, v52, v54);
    if (v55)
    {
      if (OUTLINED_FUNCTION_0_41()) {
        return v48;
      }
      return 0;
    }
    goto LABEL_46;
  }
  return 0;
}

ValueMetadata *type metadata accessor for InputCompletionConverter()
{
  return &type metadata for InputCompletionConverter;
}

uint64_t OUTLINED_FUNCTION_0_41()
{
  return swift_dynamicCast();
}

double OUTLINED_FUNCTION_1_41(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
  return specialized Dictionary.subscript.getter(0x7475706E69, 0xE500000000000000, v11, &a11);
}

uint64_t OUTLINED_FUNCTION_2_50(uint64_t a1, ...)
{
  va_start(va, a1);
  return specialized Dictionary.subscript.setter((uint64_t)va);
}

double OUTLINED_FUNCTION_3_41(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
  return specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, v11, &a11);
}

uint64_t OUTLINED_FUNCTION_4_42()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.__allocating_init(appPolicyHandler:bundleId:)(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  outlined init with take of AceServiceInvokerAsync(a1, v6 + 16);
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 64) = a3;
  return v6;
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.bundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.init(appPolicyHandler:bundleId:)(long long *a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of AceServiceInvokerAsync(a1, v3 + 16);
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  return v3;
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse()()
{
  OUTLINED_FUNCTION_9_0();
  v0[12] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v0[13] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for TemplatingResult();
  v0[14] = v2;
  v0[15] = *(void *)(v2 - 8);
  v0[16] = swift_task_alloc();
  return _swift_task_switch(VoiceCommandsScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  static Device.current.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = VoiceCommandsScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  uint64_t v2 = *(void *)(v0 + 128);
  return static ResponseTemplates.appDisabledByScreenTime()(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  *(void *)(v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = VoiceCommandsScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  }
  else {
    uint64_t v2 = VoiceCommandsScreentimeCheckFlowStrategy.makeAppRestrictedByScreentimeResponse();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  BOOL v5 = *(uint64_t **)(v0 + 96);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  uint64_t v6 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v6);
  uint64_t v7 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 72) = 0u;
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  v5[3] = v7;
  v5[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v0 + 56, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;

  return _swift_unexpectedError(*(void *)(v0 + 144), "SiriLinkFlowPlugin/VoiceCommandScreentimeCheckFlowStrategy.swift", 64, 1, 25);
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VoiceCommandsScreentimeCheckFlowStrategy.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance VoiceCommandsScreentimeCheckFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 104) + **(int **)(**(void **)v1 + 104));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for ScreentimeCheckFlowStrategyAsync.makeAppRestrictedByScreentimeResponse() in conformance WFScreentimeCheckFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for ScreentimeCheckFlowStrategyAsync.isAppAllowedByScreentime() in conformance VoiceCommandsScreentimeCheckFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))() & 1;
}

uint64_t type metadata accessor for VoiceCommandsScreentimeCheckFlowStrategy()
{
  return self;
}

uint64_t OutputGenerationManifest.init(dialogPhase:responseViewId:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DialogPhase();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t RunLinkActionCATs.actionConfirmation(customDialog:verb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_38_2();
  v0[8] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_212170;
  OUTLINED_FUNCTION_1_14(v3);
  outlined init with copy of AppDisplayInfo?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_13_37(v4);
  if (v5)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 48));
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v6();
  }
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[4];
  *(void *)(v3 + 80) = 1651664246;
  *(void *)(v3 + 88) = 0xE400000000000000;
  outlined init with copy of AppDisplayInfo?(v8, v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v5)
  {
    outlined destroy of AutoShortcutInvocation?(v7, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 120) = v2;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 96));
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v9();
  }
  uint64_t v10 = OUTLINED_FUNCTION_59();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_32_12(v10);
  *uint64_t v11 = v12;
  v11[1] = RunLinkActionCATs.actionConfirmation(customDialog:verb:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  OUTLINED_FUNCTION_23_1();
  return v17(v13, v14, v15, v16, v17, v18, v19, v20);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunLinkActionCATs.actionConfirmationHeader(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_37_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_36_15(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_59();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_18_21(v8);
  *uint64_t v9 = v10;
  v9[1] = RunLinkActionCATs.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  OUTLINED_FUNCTION_23_1();
  return v15(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunLinkActionCATs.actionPerformed(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_37_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_36_15(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_59();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_18_21(v8);
  *uint64_t v9 = v10;
  v9[1] = RunLinkActionCATs.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  OUTLINED_FUNCTION_23_1();
  return v15(v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t RunLinkActionCATs.confirmationButtonLabel(confirmationVerb:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void (*v6)(void);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v11)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_37_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_36_15(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  *(void *)(v2 + 32) = 0xD000000000000010;
  *(void *)(v2 + 40) = 0x80000000002272D0;
  OUTLINED_FUNCTION_25_5(v2, v3, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v4);
  if (v5)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v6();
  }
  uint64_t v11 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:)
                          + async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_18_21(v7);
  *uint64_t v8 = v9;
  v8[1] = RunLinkActionCATs.actionConfirmationHeader(customDialog:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  return v11();
}

uint64_t RunLinkActionCATs.continueInApp(customDialog:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_47_2(v1, v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v3);
  *(void *)(v0 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_37_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v1 = OUTLINED_FUNCTION_50_0();
  uint64_t v2 = OUTLINED_FUNCTION_36_15(v1);
  *(_OWORD *)(v2 + 16) = xmmword_212160;
  uint64_t v3 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v0, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_59();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_18_21(v8);
  *uint64_t v9 = v10;
  v9[1] = RunLinkActionCATs.continueInApp(customDialog:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  OUTLINED_FUNCTION_23_1();
  return v15(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunLinkActionCATs.errorDialog(customDialog:nonOptionalParameterIsNil:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  *(unsigned char *)(v1 + 72) = v3;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v1 + 40) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(void);
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_37_17();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  char v3 = OUTLINED_FUNCTION_38_2();
  uint64_t v4 = OUTLINED_FUNCTION_36_15(v3);
  *(_OWORD *)(v4 + 16) = xmmword_212170;
  uint64_t v5 = OUTLINED_FUNCTION_1_14(v4);
  OUTLINED_FUNCTION_25_5(v5, v6, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v7 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_61_0(v7);
  if (v8)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v9();
  }
  uint64_t v10 = *(unsigned char *)(v0 + 72);
  *(void *)(v2 + 80) = 0xD000000000000019;
  *(void *)(v2 + 88) = 0x80000000002272F0;
  *(void *)(v2 + 120) = &type metadata for Bool;
  *(unsigned char *)(v2 + 96) = v10;
  uint64_t v11 = OUTLINED_FUNCTION_59();
  uint64_t v12 = (void *)OUTLINED_FUNCTION_18_21(v11);
  NSObject *v12 = v13;
  v12[1] = RunLinkActionCATs.continueInApp(customDialog:);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  OUTLINED_FUNCTION_23_1();
  return v18(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t RunLinkActionCATs.needsDisambiguation(customDialog:items:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[6];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = OUTLINED_FUNCTION_38_2();
  v0[7] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_212170;
  uint64_t v3 = OUTLINED_FUNCTION_1_14(v2);
  OUTLINED_FUNCTION_25_5(v3, v4, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v1, 1, v5) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[6], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_30_3();
  }
  else
  {
    OUTLINED_FUNCTION_28_4();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_10_15();
    v6();
  }
  uint64_t v7 = v0[4];
  *(void *)(v2 + 80) = 0x736D657469;
  *(void *)(v2 + 88) = 0xE500000000000000;
  if (v7)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  }
  else
  {
    uint64_t v8 = 0;
    *(void *)(v2 + 104) = 0;
    *(void *)(v2 + 112) = 0;
  }
  *(void *)(v2 + 96) = v7;
  *(void *)(v2 + 120) = v8;
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[8] = v9;
  *uint64_t v9 = v0;
  v9[1] = RunLinkActionCATs.needsDisambiguation(customDialog:items:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  OUTLINED_FUNCTION_23_1();
  return v14(v10, v11, v12, v13, v14, v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunLinkActionCATs.needsValue(customDialog:parameterName:isSearchAction:isDeleteAction:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v0 + 89) = v1;
  *(unsigned char *)(v0 + 88) = v2;
  OUTLINED_FUNCTION_39_3(v3, v4, v5);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  char v1 = *(void *)(v0 + 56);
  char v2 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 64) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_214D20;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  OUTLINED_FUNCTION_1_14(v3);
  outlined init with copy of AppDisplayInfo?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_13_37(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_18_28();
  *(void *)(v3 + 80) = v9;
  *(void *)(v3 + 88) = 0xED0000656D614E72;
  outlined init with copy of AppDisplayInfo?(v8, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 120) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v10();
  }
  uint64_t v11 = *(unsigned char *)(v0 + 89);
  uint64_t v12 = *(unsigned char *)(v0 + 88);
  strcpy((char *)(v3 + 128), "isSearchAction");
  *(unsigned char *)(v3 + 143) = -18;
  *(unsigned char *)(v3 + 144) = v12;
  *(void *)(v3 + 168) = &type metadata for Bool;
  strcpy((char *)(v3 + 176), "isDeleteAction");
  *(unsigned char *)(v3 + 191) = -18;
  *(void *)(v3 + 216) = &type metadata for Bool;
  *(unsigned char *)(v3 + 192) = v11;
  uint64_t v13 = OUTLINED_FUNCTION_59();
  uint64_t v14 = (void *)OUTLINED_FUNCTION_32_12(v13);
  uint8_t *v14 = v15;
  v14[1] = RunLinkActionCATs.actionConfirmation(customDialog:verb:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  OUTLINED_FUNCTION_23_1();
  return v20(v16, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t RunLinkActionCATs.parameterConfirmation(customDialog:parameterValue:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_39_3(v1, v2, v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_13_0();
  *(void *)(v0 + 56) = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = OUTLINED_FUNCTION_38_2();
  v0[8] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_212170;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  OUTLINED_FUNCTION_1_14(v3);
  outlined init with copy of AppDisplayInfo?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_13_37(v5);
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 72) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v7();
  }
  uint64_t v8 = OUTLINED_FUNCTION_18_28();
  *(void *)(v3 + 80) = v9;
  *(void *)(v3 + 88) = 0xEE0065756C615672;
  outlined init with copy of AppDisplayInfo?(v8, v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_21_17();
  if (v6)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    *(void *)(v3 + 120) = v2;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_1_7();
    v10();
  }
  uint64_t v11 = OUTLINED_FUNCTION_59();
  uint64_t v12 = (void *)OUTLINED_FUNCTION_32_12(v11);
  NSObject *v12 = v13;
  v12[1] = RunLinkActionCATs.parameterConfirmation(customDialog:parameterValue:);
  OUTLINED_FUNCTION_36_2();
  OUTLINED_FUNCTION_19_6();
  OUTLINED_FUNCTION_11_31();
  OUTLINED_FUNCTION_23_1();
  return v18(v14, v15, v16, v17, v18, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t RunLinkActionCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return RunLinkActionCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t RunLinkActionCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v11;
}

uint64_t type metadata accessor for RunLinkActionCATs()
{
  uint64_t result = type metadata singleton initialization cache for RunLinkActionCATs;
  if (!type metadata singleton initialization cache for RunLinkActionCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RunLinkActionCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for RunLinkActionCATs()
{
  return type metadata accessor for RunLinkActionCATs();
}

uint64_t OUTLINED_FUNCTION_13_37(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_18_28()
{
  return *(void *)(v0 + 32);
}

void *PartialMatcher.match(term:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v29)(void *__return_ptr, void, void);
  Swift::Bool IsNativeType;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  void *result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  void (**v73)(char *, uint64_t);
  char *v74;
  char *v75;
  void (**v76)(char *, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(void *__return_ptr, void, void);
  void (*v82)(char *, unint64_t, uint64_t);
  void (**v83)(char *, unint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  void (**v89)(char *, uint64_t);
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Swift::Int after;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  long long v101;
  char v102;
  char v103;
  uint64_t v104;
  id v105;
  char v106[8];
  long long v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  char v111[8];

  uint64_t v5 = *v3;
  uint64_t v6 = *v3;
  v90 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_12_1();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v5 + 80);
  OUTLINED_FUNCTION_12_1();
  uint64_t v14 = v13;
  uint64_t v16 = __chkstk_darwin(v15);
  v72 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v64 - v19;
  v65 = v21;
  __chkstk_darwin(v18);
  v79 = (char *)&v64 - v22;
  v84 = String.sanitized.getter();
  uint64_t v24 = v23;
  uint64_t v25 = Array.init()();
  v96 = v25;
  swift_bridgeObjectRetain();
  Swift::Int v26 = Array.startIndex.getter();
  after = v26;
  uint64_t v27 = Array.endIndex.getter();
  v66 = v6;
  if (v26 != v27)
  {
    v85 = v24;
    uint64_t v28 = *(void *)(v6 + 88);
    uint64_t v29 = *(void (**)(void *__return_ptr, void, void))(v28 + 8);
    v80 = v28 + 8;
    v83 = (void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v76 = (void (**)(char *, char *, uint64_t))(v14 + 32);
    v75 = &v98;
    v74 = &v99;
    v89 = (void (**)(char *, uint64_t))(v8 + 8);
    v69 = &v102;
    v68 = &v103;
    v73 = (void (**)(char *, uint64_t))(v14 + 8);
    v67 = v12;
    v78 = a3;
    v77 = v14;
    v70 = v20;
    v71 = v28;
    v81 = v29;
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v31 = a3
            + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
            + *(void *)(v14 + 72) * v26;
        uint64_t v32 = v79;
        v82 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
        v82(v79, v31, v12);
      }
      else
      {
        uint64_t result = (void *)_ArrayBuffer._getElementSlowPath(_:)();
        if (v65 != 8)
        {
          __break(1u);
          return result;
        }
        v93 = (uint64_t)result;
        uint64_t v32 = v79;
        v82 = *v83;
        v82(v79, (unint64_t)&v93, v12);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRetain();
      Array.formIndex(after:)(&after);
      swift_bridgeObjectRelease();
      uint64_t v33 = v12;
      uint64_t v34 = v20;
      (*v76)(v20, v32, v33);
      v29(&v97, v33, v28);
      outlined init with take of String?((uint64_t)v75, (uint64_t)v111, &demangling cache variable for type metadata for String?);
      outlined release of String?((uint64_t)v111);
      outlined init with take of String?((uint64_t)v74, (uint64_t)&v110, &demangling cache variable for type metadata for INImage?);
      outlined release of INImage?(&v110);
      v109 = v100;
      outlined release of [String]((uint64_t)&v109);
      uint64_t v35 = String.lowercased()();
      OUTLINED_FUNCTION_2_51(v35._countAndFlagsBits, (uint64_t)v35._object);
      static CharacterSet.punctuationCharacters.getter();
      lazy protocol witness table accessor for type String and conformance String();
      v36 = StringProtocol.components(separatedBy:)();
      v88 = *v89;
      v88(v11, v90);
      swift_bridgeObjectRelease();
      v93 = v36;
      char v37 = v28;
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      uint64_t v39 = lazy protocol witness table accessor for type [String] and conformance [A]();
      v87 = v38;
      v86 = v39;
      uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v42 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93 = v40;
      v94 = v42;
      OUTLINED_FUNCTION_3_42();
      v92 = v85;
      LOBYTE(v36) = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v36)
      {
        uint64_t v43 = OUTLINED_FUNCTION_0_42();
        v44(v43);
        type metadata accessor for Array();
        Array.append(_:)();
        uint64_t v28 = v37;
        uint64_t v29 = v81;
        a3 = v78;
      }
      else
      {
        v81(&v101, v33, v37);
        uint64_t v45 = v104;
        v108 = v104;
        v107 = v101;
        swift_bridgeObjectRetain();
        outlined release of String?((uint64_t)&v107);
        outlined init with take of String?((uint64_t)v69, (uint64_t)v106, &demangling cache variable for type metadata for String?);
        outlined release of String?((uint64_t)v106);
        outlined init with take of String?((uint64_t)v68, (uint64_t)&v105, &demangling cache variable for type metadata for INImage?);
        outlined release of INImage?(&v105);
        outlined release of [String]((uint64_t)&v108);
        uint64_t v46 = *(void *)(v45 + 16);
        if (v46)
        {
          v91 = _swiftEmptyArrayStorage;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v47 = v45 + 40;
          do
          {
            uint64_t v48 = String.lowercased()();
            OUTLINED_FUNCTION_2_51(v48._countAndFlagsBits, (uint64_t)v48._object);
            swift_bridgeObjectRetain();
            static CharacterSet.punctuationCharacters.getter();
            uint64_t v49 = StringProtocol.components(separatedBy:)();
            v88(v11, v90);
            swift_bridgeObjectRelease();
            v93 = v49;
            uint64_t v50 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v52 = v51;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v53 = v91;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v53 = v91;
            }
            long long v54 = v53[2];
            if (v54 >= v53[3] >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v53 = v91;
            }
            v47 += 16;
            v53[2] = v54 + 1;
            uint64_t v55 = &v53[2 * v54];
            v55[4] = v50;
            v55[5] = v52;
            --v46;
          }
          while (v46);
          outlined release of [String]((uint64_t)&v108);
          uint64_t v33 = v67;
          a3 = v78;
          unsigned int v56 = v85;
        }
        else
        {
          outlined release of [String]((uint64_t)&v108);
          uint64_t v53 = _swiftEmptyArrayStorage;
          unsigned int v56 = v85;
          a3 = v78;
        }
        uint64_t v57 = v53[2];
        uint64_t v34 = v70;
        if (v57)
        {
          swift_bridgeObjectRetain();
          v58 = v53 + 5;
          while (1)
          {
            v59 = *v58;
            v93 = *(v58 - 1);
            v94 = v59;
            OUTLINED_FUNCTION_3_42();
            v92 = v56;
            if (StringProtocol.contains<A>(_:)()) {
              break;
            }
            v58 += 2;
            --v57;
            unsigned int v56 = v85;
            if (!v57)
            {
              swift_bridgeObjectRelease();
              goto LABEL_22;
            }
          }
          swift_bridgeObjectRelease_n();
          v60 = OUTLINED_FUNCTION_0_42();
          v61(v60);
          type metadata accessor for Array();
          Array.append(_:)();
        }
        else
        {
LABEL_22:
          swift_bridgeObjectRelease();
        }
        uint64_t v28 = v71;
        uint64_t v29 = v81;
      }
      uint64_t v20 = v34;
      (*v73)(v34, v33);
      Swift::Int v26 = after;
      v62 = Array.endIndex.getter();
      uint64_t v12 = v33;
      uint64_t v14 = v77;
      if (v26 == v62)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v25 = v96;
        goto LABEL_29;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_29:
  v93 = v25;
  type metadata accessor for Array();
  swift_getWitnessTable();
  if ((Collection.isEmpty.getter() & 1) == 0) {
    return CustomIntentDisambiguationItemContainer.init(items:)((Swift::OpaquePointer)v25).items._rawValue;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for StringMatching.match(term:in:) in conformance PartialMatcher<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t type metadata accessor for PartialMatcher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OUTLINED_FUNCTION_0_42()
{
  return *(void *)(v0 - 464);
}

uint64_t OUTLINED_FUNCTION_2_51(uint64_t result, uint64_t a2)
{
  *(void *)(v2 - 296) = result;
  *(void *)(v2 - 288) = a2;
  return result;
}

void OUTLINED_FUNCTION_3_42()
{
  *(void *)(v0 - 312) = *(void *)(v0 - 368);
}

uint64_t App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(v5, a1, v9, v10);
  if (v11)
  {
    if (a3 == 2)
    {
      App.appIdentifier.getter();
      if (v12)
      {
        lazy protocol witness table accessor for type String and conformance String();
        lazy protocol witness table accessor for type String and conformance String();
        BidirectionalCollection<>.starts<A>(with:)();
        swift_bridgeObjectRelease();
      }
    }
    AppDisplayInfo.init(displayName:isFirstParty:)();
    uint64_t v15 = type metadata accessor for AppDisplayInfo();
    return __swift_storeEnumTagSinglePayload(a4, 0, 1, v15);
  }
  else
  {
    uint64_t v13 = type metadata accessor for AppDisplayInfo();
    return __swift_storeEnumTagSinglePayload(a4, 1, 1, v13);
  }
}

uint64_t App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(a2, v6);

  return specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(a1, (uint64_t)v8, a3, v3, v6, v7);
}

uint64_t specialized App.toAppDisplayName(_:appInfoResolving:isFirstParty:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[3] = a5;
  v19[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a2, a5);
  App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(a1, v19, a3, (uint64_t)v13);
  uint64_t v15 = type metadata accessor for AppDisplayInfo();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15) == 1)
  {
    outlined destroy of AppDisplayInfo?((uint64_t)v13);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = AppDisplayInfo.displayName.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  return v16;
}

uint64_t WorkflowRunnerCATs.inputDate(device:inputType:message:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v4 = v2[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)swift_allocObject();
  v2[9] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v5[3].n128_u64[1] = 0;
    v5[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_1_42(v6);
  outlined init with copy of AppDisplayInfo?(v7, v3, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_18_7(v8);
  if (v9)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v5[7].n128_u64[1] = v0;
    __swift_allocate_boxed_opaque_existential_1(v1);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_19_14();
    v10();
    swift_retain();
  }
  uint64_t v11 = OUTLINED_FUNCTION_2_52();
  outlined init with copy of AppDisplayInfo?(v11, v3, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v3, 1, v0) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v2[7], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v5[10].n128_u64[1] = v0;
    __swift_allocate_boxed_opaque_existential_1(v1);
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v12 + 32))();
  }
  uint64_t v13 = (void *)OUTLINED_FUNCTION_17_2();
  v2[10] = v13;
  *uint64_t v13 = v2;
  v13[1] = WorkflowRunnerCATs.inputDate(device:inputType:message:);
  OUTLINED_FUNCTION_5_39();
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t WorkflowRunnerCATs.inputText(device:inputType:message:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[5] = v2;
  v1[6] = v0;
  v1[3] = v3;
  v1[4] = v4;
  v1[2] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v6);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v4 = v2[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v5 = (__n128 *)swift_allocObject();
  v2[9] = v5;
  uint64_t v6 = OUTLINED_FUNCTION_1_2(v5, (__n128)xmmword_2138B0);
  if (v4)
  {
    uint64_t v6 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    v5[3].n128_u64[1] = 0;
    v5[4].n128_u64[0] = 0;
  }
  OUTLINED_FUNCTION_1_42(v6);
  outlined init with copy of AppDisplayInfo?(v7, v3, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_18_7(v8);
  if (v9)
  {
    swift_retain();
    outlined destroy of AutoShortcutInvocation?(v3, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v5[7].n128_u64[1] = v0;
    __swift_allocate_boxed_opaque_existential_1(v1);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_19_14();
    v10();
    swift_retain();
  }
  uint64_t v11 = OUTLINED_FUNCTION_2_52();
  outlined init with copy of AppDisplayInfo?(v11, v3, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload(v3, 1, v0) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v2[7], &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_9_2();
  }
  else
  {
    v5[10].n128_u64[1] = v0;
    __swift_allocate_boxed_opaque_existential_1(v1);
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v12 + 32))();
  }
  uint64_t v13 = (void *)OUTLINED_FUNCTION_17_2();
  v2[10] = v13;
  *uint64_t v13 = v2;
  v13[1] = WorkflowRunnerCATs.inputText(device:inputType:message:);
  OUTLINED_FUNCTION_5_39();
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v10();
  }
}

uint64_t WorkflowRunnerCATs.showAlert(message:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, unint64_t, unint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v3 = swift_allocObject();
  v0[6] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_212160;
  uint64_t v4 = (uint64_t *)(v3 + 48);
  *(void *)(v3 + 32) = 0x6567617373656DLL;
  *(void *)(v3 + 40) = 0xE700000000000000;
  outlined init with copy of AppDisplayInfo?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v5 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v1, 1, v5) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[5], &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(void *)(v3 + 72) = v5;
    __swift_allocate_boxed_opaque_existential_1(v4);
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v6 + 32))();
  }
  uint64_t v10 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:)
                                                                                     + async function pointer to dispatch thunk of CATWrapper.execute(catId:parameters:));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = RunLinkActionCATs.continueInApp(customDialog:);
  uint64_t v8 = v0[2];
  return v10(v8, 0xD000000000000018, 0x8000000000224E10, v3);
}

uint64_t WorkflowRunnerCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return WorkflowRunnerCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t WorkflowRunnerCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v11 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of AutoShortcutInvocation?(a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v11;
}

uint64_t type metadata accessor for WorkflowRunnerCATs()
{
  uint64_t result = type metadata singleton initialization cache for WorkflowRunnerCATs;
  if (!type metadata singleton initialization cache for WorkflowRunnerCATs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for WorkflowRunnerCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for WorkflowRunnerCATs()
{
  return type metadata accessor for WorkflowRunnerCATs();
}

uint64_t OUTLINED_FUNCTION_1_42(uint64_t result)
{
  v2[6] = v1;
  v2[9] = result;
  v2[10] = 0x7079547475706E69;
  v2[11] = 0xE900000000000065;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_52()
{
  uint64_t result = *(void *)(v0 + 40);
  *(void *)(v1 + 128) = 0x6567617373656DLL;
  *(void *)(v1 + 136) = 0xE700000000000000;
  return result;
}

void *CustomIntentPlatformSpecificSnippets.smartPromptTypeName.unsafeMutableAddressor()
{
  return &static CustomIntentPlatformSpecificSnippets.smartPromptTypeName;
}

void *static CustomIntentPlatformSpecificSnippets.buildIntentsSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:device:)(uint64_t a1, void *a2, void *a3, char a4, uint64_t a5, void *a6)
{
  OUTLINED_FUNCTION_4_43(a6);
  char v11 = dispatch thunk of DeviceState.isCarPlay.getter();
  outlined init with copy of DeviceState((uint64_t)a6, (uint64_t)v19);
  if (v11)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
LABEL_4:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_211C70;
    id v14 = static CustomIntentPlatformSpecificSnippets.getEmptySnippet(app:)();
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_4_43(v19);
  char v12 = dispatch thunk of DeviceState.isHomePod.getter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  if (v12) {
    goto LABEL_4;
  }
  OUTLINED_FUNCTION_4_43(a6);
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_211C70;
    id v14 = static CustomIntentPlatformSpecificSnippets.buildWatchSnippet(app:intent:intentResponse:)(a1, a2);
  }
  else
  {
    id v16 = [a2 _metadata];
    if (v16)
    {
      uint64_t v17 = v16;
      unsigned int v18 = [v16 showsWhenRun];

      if (!v18) {
        return _swiftEmptyArrayStorage;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_211C70;
    id v14 = static CustomIntentPlatformSpecificSnippets.buildIntentSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:)(a1, (uint64_t)a2, a3, a4 & 1);
  }
LABEL_5:
  *(void *)(v13 + 32) = v14;
  specialized Array._endMutation()();
  return (void *)v13;
}

void static CustomIntentPlatformSpecificSnippets.attachConfirmationButtons(snippet:yes:no:device:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  self;
  uint64_t v16 = swift_dynamicCastObjCClass();
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    id v33 = a1;
    uint64_t v18 = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v17, (SEL *)&selRef_templateItems, &demangling cache variable for type metadata for SASTTemplateItem);
    uint64_t v19 = _swiftEmptyArrayStorage;
    if (v18) {
      uint64_t v19 = (void *)v18;
    }
    uint64_t v34 = (uint64_t)v19;
    static CustomIntentPlatformSpecificSnippets.makeWatchButton(model:)(a2, a3, a4);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (v34 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                   + (v34 & 0xFFFFFFFFFFFFFF8)) >> 1)
      OUTLINED_FUNCTION_1_32();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    static CustomIntentPlatformSpecificSnippets.makeWatchButton(model:)(a5, a6, a7);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (v34 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                   + (v34 & 0xFFFFFFFFFFFFFF8)) >> 1)
      OUTLINED_FUNCTION_1_32();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v34, v17);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a8, a8[3]);
    if (dispatch thunk of DeviceState.isCarPlay.getter())
    {
      uint64_t v20 = OUTLINED_FUNCTION_2_53();
      id v26 = static CustomIntentPlatformSpecificSnippets.getCarplayConfirmationOptions(yes:no:)(v20, v21, v22, v23, v24, v25);
    }
    else
    {
      uint64_t v27 = OUTLINED_FUNCTION_2_53();
      id v26 = static CustomIntentPlatformSpecificSnippets.getIOSConfirmationOptions(yes:no:)(v27, v28, v29, v30, v31, v32);
    }
    [a1 setConfirmationOptions:v26];
  }
}

id static CustomIntentPlatformSpecificSnippets.buildConfirmationSnippet(app:yes:no:device:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v8 = a8;
  __swift_project_boxed_opaque_existential_1(a8, a8[3]);
  if (dispatch thunk of DeviceState.isCarPlay.getter()) {
    id v15 = OUTLINED_FUNCTION_0_43();
  }
  else {
    id v15 = OUTLINED_FUNCTION_1_43();
  }
  uint64_t v31 = v15;
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    id v16 = [objc_allocWithZone((Class)SASTItemGroup) init];
    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      id v16 = v16;
      uint64_t v19 = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v18, (SEL *)&selRef_templateItems, &demangling cache variable for type metadata for SASTTemplateItem);
      uint64_t v20 = _swiftEmptyArrayStorage;
      if (v19) {
        uint64_t v20 = (void *)v19;
      }
      uint64_t v32 = (uint64_t)v20;
      static CustomIntentPlatformSpecificSnippets.makeWatchButton(model:)(a2, a3, a4);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                     + (v32 & 0xFFFFFFFFFFFFFF8)) >> 1)
        OUTLINED_FUNCTION_6_42();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      static CustomIntentPlatformSpecificSnippets.makeWatchButton(model:)(a5, a6, a7);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                     + (v32 & 0xFFFFFFFFFFFFFF8)) >> 1)
        OUTLINED_FUNCTION_6_42();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v32, v18);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v8, v8[3]);
      if (dispatch thunk of DeviceState.isCarPlay.getter()) {
        id v23 = OUTLINED_FUNCTION_0_43();
      }
      else {
        id v23 = OUTLINED_FUNCTION_1_43();
      }
      uint64_t v29 = v23;
      OUTLINED_FUNCTION_3_43((uint64_t)v23, "setConfirmationOptions:");
    }
  }
  else
  {
    id v16 = [objc_allocWithZone((Class)SAUIConfirmationView) init];
    uint64_t v21 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v31, (SEL *)&selRef_confirmText);
    if (v22)
    {
      String._bridgeToObjectiveC()();
      uint64_t v21 = OUTLINED_FUNCTION_90_1();
    }
    else
    {
      uint64_t v8 = 0;
    }
    OUTLINED_FUNCTION_3_43(v21, "setConfirmText:");

    uint64_t v24 = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v31, (SEL *)&selRef_confirmCommands, &demangling cache variable for type metadata for SAClientBoundCommand);
    if (v24)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
      Array._bridgeToObjectiveC()();
      uint64_t v24 = OUTLINED_FUNCTION_90_1();
    }
    else
    {
      uint64_t v8 = 0;
    }
    OUTLINED_FUNCTION_3_43(v24, "setConfirmCommands:");

    uint64_t v25 = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v31, (SEL *)&selRef_denyText);
    if (v26)
    {
      String._bridgeToObjectiveC()();
      uint64_t v25 = OUTLINED_FUNCTION_90_1();
    }
    else
    {
      uint64_t v8 = 0;
    }
    OUTLINED_FUNCTION_3_43(v25, "setDenyText:");

    uint64_t v27 = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v31, (SEL *)&selRef_denyCommands, &demangling cache variable for type metadata for SAClientBoundCommand);
    if (v27)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
      Array._bridgeToObjectiveC()();
      uint64_t v27 = OUTLINED_FUNCTION_90_1();
    }
    else
    {
      uint64_t v8 = 0;
    }
    OUTLINED_FUNCTION_3_43(v27, "setDenyCommands:");

    if (outlined bridged method (pb) of @objc SAUIConfirmationOptions.allConfirmationOptions.getter(v31))
    {
      type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption);
      v28.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v28.super.isa = 0;
    }
    [v16 setAllConfirmationOptions:v28.super.isa];
  }
  return v16;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVGG_So018SASTColumnDataListM0Cs5NeverOTg506_sSi18fgh8Plugin30jklm6VSo018nop34H0CIgyno_Si6offset_AC7elementtAEs5Q239OIegnrzr_TR04_s18abc8Plugin36ef152PlatformSpecificSnippetsO46cardSectionsFromDetailedSelectionItemsForWatch33_58FF03AD48A84F3555BA630F3429BD7ALL014disambiguationO014deviceIsLockedSaySo22ijkh12CGSayAA0eF18gH21VG_SbtFZAISi_ALtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v9 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of CustomIntentDisambiguationItem(v4, (uint64_t)v6);
      memcpy(v8, v6, 0x51uLL);
      unint64_t v7 = v3;
      closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItemsForWatch(disambiguationItems:deviceIsLocked:)(v3, (uint64_t)v8);
      outlined destroy of (offset: Int, element: CustomIntentDisambiguationItem)((uint64_t)&v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 88;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v9;
}

void *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVGG_So13SFCardSectionCs5NeverOTg506_sSi18fgh8Plugin30jklm5VSo13no32CIgyno_Si6offset_AC7elementtAEs5P11OIegnrzr_TRSiAjNIgyno_Tf1cn_n(uint64_t a1, void (*a2)(uint64_t, unsigned char *))
{
  char v11 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 32;
    do
    {
      outlined init with copy of CustomIntentDisambiguationItem(v6, (uint64_t)v8);
      memcpy(v10, v8, 0x51uLL);
      uint64_t v9 = v5;
      a2(v5, v10);
      outlined destroy of (offset: Int, element: CustomIntentDisambiguationItem)((uint64_t)&v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v6 += 88;
      ++v5;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v11;
}

void *CustomIntentPlatformSpecificSnippets.sensitiveSmartPromptName.unsafeMutableAddressor()
{
  return &static CustomIntentPlatformSpecificSnippets.sensitiveSmartPromptName;
}

id static CustomIntentPlatformSpecificSnippets.makeDialogFromUtteranceView(utteranceViews:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_16;
  }
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0);
  if ((a1 & 0xC000000000000001) != 0) {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v3 = *(id *)(a1 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  id v5 = [objc_allocWithZone((Class)SADialog) init];
  outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v4, (SEL *)&selRef_dialogIdentifier);
  if (v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v7 = 0;
  }
  [v5 setDialogIdentifier:v7];

  [v5 setSpokenOnly:1];
  id v8 = [objc_allocWithZone((Class)SADialogText) init];
  outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v4, (SEL *)&selRef_text);
  if (v9)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  [v8 setText:v10];

  id v11 = v4;
  outlined bridged method (ob) of @objc SAAceView.speakableText.getter(v11);
  if (v12)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v13 = 0;
  }
  [v8 setSpeakableTextOverride:v13];

  [v5 setContent:v8];
  objc_msgSend(v5, "setCanUseServerTTS:", objc_msgSend(v11, "canUseServerTTS"));

  return v5;
}

unint64_t static CustomIntentPlatformSpecificSnippets.smartPromptTypeName.getter()
{
  return 0xD000000000000051;
}

unint64_t static CustomIntentPlatformSpecificSnippets.sensitiveSmartPromptName.getter()
{
  return 0xD00000000000005ALL;
}

id static CustomIntentPlatformSpecificSnippets.getEmptySnippet(app:)()
{
  id v0 = [objc_allocWithZone((Class)SAIntentGroupSnippet) init];
  App.appIdentifier.getter();
  if (v1)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v2 = 0;
  }
  [v0 setAppId:v2];

  return v0;
}

id static CustomIntentPlatformSpecificSnippets.buildWatchSnippet(app:intent:intentResponse:)(uint64_t a1, void *a2)
{
  id v3 = [objc_allocWithZone((Class)SASTItemGroup) init];
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  uint64_t v4 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
  id v5 = [objc_allocWithZone((Class)SASTCommandTemplateAction) init];
  id v6 = [objc_allocWithZone((Class)SASTApplicationBannerItem) init];
  id v7 = [objc_allocWithZone((Class)SAUIDecoratedText) init];
  id v8 = [objc_allocWithZone((Class)SASTLineDetailItem) init];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_211C70;
  *(void *)(v9 + 32) = v4;
  uint64_t v21 = v9;
  specialized Array._endMutation()();
  id v10 = v4;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v21, v5);
  App.appIdentifier.getter();
  if (v11)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  objc_msgSend(v6, "setBundleId:", v12, v21);

  [v6 setAction:v5];
  id v13 = v6;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v14 = [a2 _codableDescription];
  id v15 = [v14 localizedTitle];

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(v16, v18, v7);
  [v8 setTitle:v7];
  id v19 = v8;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter((uint64_t)_swiftEmptyArrayStorage, v3);

  return v3;
}

void *static CustomIntentPlatformSpecificSnippets.buildIntentSnippet(app:intent:intentResponse:isForConfirmation:vcShortcut:)(uint64_t a1, uint64_t a2, id a3, char a4)
{
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  id v6 = (id)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
  id v7 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

  id v8 = (void *)static CasinoFactory.makePlaceholderCardSection()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  long long v20 = xmmword_211C70;
  *(_OWORD *)(v9 + 16) = xmmword_211C70;
  *(void *)(v9 + 32) = v7;
  uint64_t v21 = v9;
  specialized Array._endMutation()();
  id v10 = v7;
  outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v21, v8);
  if (a3 && (id v11 = a3, v12 = (uint64_t)[v11 _code], v12 <= 99))
  {
    if ((v12 & 0x8000000000000000) == 0 || (a4 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if ((a4 & 1) == 0) {
      goto LABEL_10;
    }
    id v11 = a3;
  }
  id v13 = objc_msgSend(v11, "backingStore", 1, 3);
  a3 = [objc_allocWithZone((Class)INIntentResponse) initWithBackingStore:v13];

  if (a3) {
    [a3 _setCode:8];
  }
LABEL_10:
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for SACardSnippet);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = v20;
  *(void *)(v14 + 32) = v8;
  specialized Array._endMutation()();
  id v15 = a3;
  id v16 = v8;
  uint64_t v17 = (void *)static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
  swift_bridgeObjectRelease();

  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v20;
  *(void *)(v18 + 32) = v6;
  uint64_t v22 = v18;
  specialized Array._endMutation()();
  outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(v22, v17);

  return v17;
}

id static CustomIntentPlatformSpecificSnippets.makeWatchButton(model:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = [objc_allocWithZone((Class)SASTButtonItem) init];
  id v7 = [objc_allocWithZone((Class)SAUIDecoratedText) init];
  id v8 = [objc_allocWithZone((Class)SASTCommandTemplateAction) init];
  outlined bridged method (mbgnn) of @objc SAUIDecoratedText.text.setter(a1, a2, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_211C70;
  *(void *)(v9 + 32) = a3;
  uint64_t v12 = v9;
  specialized Array._endMutation()();
  id v10 = a3;
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v12, v8);
  [v6 setDecoratedLabel:v7];
  [v6 setCentered:1];
  [v6 setAction:v8];

  return v6;
}

id static CustomIntentPlatformSpecificSnippets.getCarplayConfirmationOptions(yes:no:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v12 = [objc_allocWithZone((Class)SAUIConfirmationOptions) init];
  id v13 = [objc_allocWithZone((Class)SAUIConfirmationOption) init];
  id v14 = [objc_allocWithZone((Class)SAUIConfirmationOption) init];
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter(a1, a2, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_211C70;
  *(void *)(v15 + 32) = a3;
  uint64_t v29 = v15;
  specialized Array._endMutation()();
  id v16 = a3;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.commands.setter(v29, v13);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationOption.label.setter(a4, a5, v14);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_211C70;
  *(void *)(v17 + 32) = a6;
  uint64_t v30 = v17;
  specialized Array._endMutation()();
  id v18 = a6;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOption.commands.setter(v30, v14);
  outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v13);
  if (v19)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v20 = 0;
  }
  objc_msgSend(v12, "setConfirmText:", v20, 1, 3);

  if (outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(v13))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v21.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v21.super.isa = 0;
  }
  [v12 setConfirmCommands:v21.super.isa];

  outlined bridged method (pb) of @objc SAUIConfirmationOption.label.getter(v14);
  if (v22)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v23 = 0;
  }
  [v12 setDenyText:v23];

  if (outlined bridged method (pb) of @objc SAUIConfirmationOption.commands.getter(v14))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    v24.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v24.super.isa = 0;
  }
  [v12 setDenyCommands:v24.super.isa];

  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_212180;
  *(void *)(v25 + 32) = v13;
  *(void *)(v25 + 40) = v14;
  uint64_t v31 = v25;
  specialized Array._endMutation()();
  id v26 = v13;
  id v27 = v14;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.allConfirmationOptions.setter(v31, v12);
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.cancelTrigger.setter(2037278020, 0xE400000000000000, v12);

  return v12;
}

id static CustomIntentPlatformSpecificSnippets.getIOSConfirmationOptions(yes:no:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v12 = [objc_allocWithZone((Class)SAUIConfirmationOptions) init];
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter(a1, a2, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_211C70;
  *(void *)(v13 + 32) = a3;
  uint64_t v18 = v13;
  specialized Array._endMutation()();
  id v14 = a3;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.confirmCommands.setter(v18, v12);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter(a4, a5, v12);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_211C70;
  *(void *)(v15 + 32) = a6;
  uint64_t v19 = v15;
  specialized Array._endMutation()();
  id v16 = a6;
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.denyCommands.setter(v19, v12);
  outlined bridged method (mbnn) of @objc SAUIConfirmationOptions.cancelTrigger.setter(2037278020, 0xE400000000000000, v12);
  return v12;
}

id static CustomIntentPlatformSpecificSnippets.makeDisambiguationSnippet(intent:app:disambiguationItems:parameterName:isSilentMode:canUseServerTTS:utteranceView:vcShortcut:device:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, void *a8, uint64_t a9, void *a10)
{
  __swift_project_boxed_opaque_existential_1(a10, a10[3]);
  char v15 = dispatch thunk of DeviceState.isWatch.getter();
  __swift_project_boxed_opaque_existential_1(a10, a10[3]);
  char v16 = dispatch thunk of DeviceState.isLockedWithPasscode.getter();
  if (v15)
  {
    uint64_t v17 = swift_bridgeObjectRetain();
    unint64_t v18 = (unint64_t)_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVGG_So018SASTColumnDataListM0Cs5NeverOTg506_sSi18fgh8Plugin30jklm6VSo018nop34H0CIgyno_Si6offset_AC7elementtAEs5Q239OIegnrzr_TR04_s18abc8Plugin36ef152PlatformSpecificSnippetsO46cardSectionsFromDetailedSelectionItemsForWatch33_58FF03AD48A84F3555BA630F3429BD7ALL014disambiguationO014deviceIsLockedSaySo22ijkh12CGSayAA0eF18gH21VG_SbtFZAISi_ALtXEfU_Tf3nnnpf_nTf1cn_n(v17);
    swift_bridgeObjectRelease();
    id v19 = [objc_allocWithZone((Class)SASTItemGroup) init];
    swift_bridgeObjectRetain();
    if (v18 >> 62)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      uint64_t v20 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      uint64_t v20 = v18;
    }
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(v20, v19);
    [v19 setCanUseServerTTS:a7 & 1];
  }
  else
  {
    static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)(a1, a2, a3, a4, a5, v16 & 1, a6 & 1, (uint64_t)a10, a8);
    uint64_t v22 = v21;
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for SACardSnippet);
    NSString v23 = (void *)static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
    swift_bridgeObjectRelease();
    outlined bridged method (mbnn) of @objc SACardSnippet.referencedCommands.setter(v22, v23);
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    id v19 = v23;
    Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    OUTLINED_FUNCTION_3_43((uint64_t)isa, "setListenAfterSpeaking:");

    [v19 setCanUseServerTTS:a7 & 1];
  }
  return v19;
}

unint64_t static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v11 = type metadata accessor for ImageSize();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  char v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = (unint64_t)_swiftEmptyArrayStorage;
  NSArray v24 = _swiftEmptyArrayStorage;
  if (a9)
  {
    v22[0] = a5;
    v22[1] = a8;
    id v16 = a9;
    outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v16, (SEL *)&selRef_text);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v15, enum case for ImageSize.original(_:), v11);
    uint64_t v17 = (void *)static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    id v18 = v17;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                   + (v23 & 0xFFFFFFFFFFFFFF8)) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  __chkstk_darwin(v13);
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay18SiriLinkFlowPlugin30CustomIntentDisambiguationItemVGG_So13SFCardSectionCs5NeverOTg506_sSi18fgh8Plugin30jklm5VSo13no32CIgyno_Si6offset_AC7elementtAEs5P11OIegnrzr_TRSiAjNIgyno_Tf1cn_n(v19, (void (*)(uint64_t, unsigned char *))partial apply for closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:));
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)((uint64_t)v20);
  return v23;
}

id static CustomIntentPlatformSpecificSnippets.makeCommandsForDisambiguationItem(intent:rawItem:app:parameterName:title:deviceState:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v11 = static SLFDisambiguationItemConverter.toDirectInvocationPayload(intent:chosenItem:parameterName:)(a1, a2, a4, a5);
  if (v11)
  {
    uint64_t v12 = v11;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "CustomIntentPlatformSpecificSnippet.makeCommandsForDisambiguationItem constructed payload", v16, 2u);
      swift_slowDealloc();
    }

    uint64_t v17 = App.appIdentifier.getter();
    id v19 = static OutputUtils.makeRSKECommandFromDirectInvocation(payload:appId:deviceState:)((uint64_t)v12, v17, v18, a8);
    id v20 = [self wrapCommandInStartLocalRequest:v19];

    swift_bridgeObjectRelease();
    return v20;
  }
  else
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.voiceCommands);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "CustomIntentPlatformSpecificSnippet.makeCommandsForDisambiguationItem unable to construct payload", v25, 2u);
      swift_slowDealloc();
    }

    id v26 = [objc_allocWithZone((Class)SAStartRequest) init];
    outlined bridged method (mbgnn) of @objc SAStartRequest.utterance.setter(a6, a7, v26);
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    outlined bridged method (mbnn) of @objc SAStartRequest.origin.setter(v27, v28, v26);
    id v29 = [objc_allocWithZone((Class)SASendCommands) init];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_211C70;
    *(void *)(v30 + 32) = v26;
    uint64_t v31 = v30;
    specialized Array._endMutation()();
    outlined bridged method (mbnn) of @objc SASendCommands.commands.setter(v31, v29);
    return v29;
  }
}

uint64_t closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItemsForWatch(disambiguationItems:deviceIsLocked:)(unint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)SAUIDecoratedText) init];
  uint64_t v5 = specialized DisambiguationItemProtocol.toDisplayString()();
  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter(v5, v6, v4);
  id v7 = [objc_allocWithZone((Class)SASTCommandTemplateAction) init];
  uint64_t result = outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(v4, (SEL *)&selRef_text);
  if (v9)
  {
    uint64_t v10 = static OutputUtils.machineUtteranceForDisambiguationItemIndex(index:fallbackString:)(a1);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_212160;
    *(void *)(inited + 32) = v10;
    *(void *)(inited + 40) = v12;
    id v14 = static OutputUtils.makeSendCommandsFromUtterance(utterances:)(inited);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_211C70;
    *(void *)(v15 + 32) = v14;
    uint64_t v20 = v15;
    specialized Array._endMutation()();
    swift_unknownObjectRetain();
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v20, v7);
    id v16 = [objc_allocWithZone((Class)SASTColumnDataListItem) init];
    [v16 setTitle:v4];
    [v16 setAction:v7];
    uint64_t v17 = *(void **)(a2 + 32);
    if (v17)
    {
      id v18 = v17;
      id v19 = static OutputUtils.buildNanoImage(from:)(v18);
      [v16 setImageResource:v19];
    }
    swift_unknownObjectRelease();
    return (uint64_t)v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)(unint64_t a1, uint64_t *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7, void *a8, void *a9)
{
  unint64_t v35 = a7;
  v36 = a8;
  id v33 = a5;
  uint64_t v34 = a6;
  uint64_t v37 = a4;
  uint64_t v32 = a3;
  uint64_t v11 = type metadata accessor for ImageSize();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  type metadata accessor for CATSpeakableString();
  static CATSpeakableString.stripTTSHint(print:)(v16, v15, v17, v18, v19, v20, v21, v22, v16, (uint64_t)v32, v33);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for ImageSize.original(_:), v11);
  unint64_t v23 = (void *)static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v37 + 16) > a1)
  {
    id v25 = static CustomIntentPlatformSpecificSnippets.makeCommandsForDisambiguationItem(intent:rawItem:app:parameterName:title:deviceState:)(v32, v37 + 88 * a1 + 32, (uint64_t)v33, v34, v35, v31, v15, v36);
    id v26 = (void *)static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_211C70;
    *(void *)(v27 + 32) = v26;
    uint64_t v38 = v27;
    specialized Array._endMutation()();
    uint64_t v28 = v38;
    id v29 = v26;
    outlined bridged method (mbnn) of @objc SFCardSection.commands.setter(v28, v23);
    id v30 = v25;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)((char *)&dword_10
                                                                                + (*a9 & 0xFFFFFFFFFFFFFF8)));
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    return (uint64_t)v23;
  }
  __break(1u);
  return result;
}

void outlined bridged method (mbnn) of @objc SASTItemGroup.templateItems.setter(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setTemplateItems:isa];
}

uint64_t outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(a1, (SEL *)&selRef_templateItems, &demangling cache variable for type metadata for SASTTemplateItem);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmText.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(a1, (SEL *)&selRef_confirmText);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.confirmCommands.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(a1, (SEL *)&selRef_confirmCommands, &demangling cache variable for type metadata for SAClientBoundCommand);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyText.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(a1, (SEL *)&selRef_denyText);
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.denyCommands.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(a1, (SEL *)&selRef_denyCommands, &demangling cache variable for type metadata for SAClientBoundCommand);
}

uint64_t outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(void *a1, SEL *a2, uint64_t *a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t outlined bridged method (pb) of @objc SAUIConfirmationOptions.allConfirmationOptions.getter(void *a1)
{
  id v1 = [a1 allConfirmationOptions];
  if (!v1) {
    return 0;
  }
  NSString v2 = v1;
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc SAUIAssistantUtteranceView.text.getter(void *a1)
{
  return outlined bridged method (pb) of @objc SAUISnippetDisplayConfigurationResponse.dynamicTypeSize.getter(a1, (SEL *)&selRef_text);
}

uint64_t outlined bridged method (ob) of @objc SAAceView.speakableText.getter(void *a1)
{
  id v2 = [a1 speakableText];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void destroy for CustomIntentButton(uint64_t a1)
{
  swift_bridgeObjectRelease();
  id v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for CustomIntentButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for CustomIntentButton(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CustomIntentButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentButton(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomIntentButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentButton()
{
  return &type metadata for CustomIntentButton;
}

ValueMetadata *type metadata accessor for CustomIntentPlatformSpecificSnippets()
{
  return &type metadata for CustomIntentPlatformSpecificSnippets;
}

uint64_t outlined destroy of (offset: Int, element: CustomIntentDisambiguationItem)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CustomIntentDisambiguationItem));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)(unint64_t a1, uint64_t *a2)
{
  return closure #1 in static CustomIntentPlatformSpecificSnippets.cardSectionsFromDetailedSelectionItems(intent:app:disambiguationItems:parameterName:deviceIsLocked:isSilentMode:deviceState:utteranceView:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void **)(v2 + 56), *(void **)(v2 + 64));
}

id OUTLINED_FUNCTION_0_43()
{
  return static CustomIntentPlatformSpecificSnippets.getCarplayConfirmationOptions(yes:no:)(v5, v4, v3, v2, v1, v0);
}

id OUTLINED_FUNCTION_1_43()
{
  return static CustomIntentPlatformSpecificSnippets.getIOSConfirmationOptions(yes:no:)(v5, v4, v3, v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_2_53()
{
  return v0;
}

id OUTLINED_FUNCTION_3_43(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_4_43(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_6_42()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

NSMeasurement __swiftcall ParsedMeasurement.toNSMeasurement(defaultUnit:)(NSUnit defaultUnit)
{
  symbol = defaultUnit._symbol;
  if (v2) {
    Class isa = v1;
  }
  else {
    Class isa = defaultUnit.super.isa;
  }
  id v5 = objc_allocWithZone((Class)NSMeasurement);

  uint64_t v6 = (objc_class *)[v5 initWithDoubleValue:isa unit:*(double *)&symbol];
  result._doubleValue = v8;
  result._unit = v7;
  result.super.Class isa = v6;
  return result;
}

uint64_t ParsedMeasurement.toMeasurement(unitType:parameterMetadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  if ((a4 & 1) == 0)
  {
    LNActionParameterMetadata.measurementDefaultUnitSymbol.getter();
    if (!v8)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.voiceCommands);
      id v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl(&dword_0, v25, v26, "Could not create valid measurement due to missing unit symbol.", v27, 2u);
        swift_slowDealloc();
      }

      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
      uint64_t v13 = a5;
      uint64_t v14 = 1;
      goto LABEL_16;
    }
    NSString v9 = String._bridgeToObjectiveC()();
    (id)LNMeasurementUnitTypeToUnit();
    swift_bridgeObjectRelease();

    type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSUnit);
LABEL_6:
    Measurement.init(value:unit:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
    uint64_t v13 = a5;
    uint64_t v14 = 0;
LABEL_16:
    return __swift_storeEnumTagSinglePayload(v13, v14, 1, v12);
  }
  id v11 = a3;
  if (LNMeasurementUnitTypeOfUnit() == a1)
  {
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSUnit);
    goto LABEL_6;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
  id v16 = v11;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315394;
    LNMeasurementUnitTypeOfUnit();
    type metadata accessor for LNMeasurementUnitType(0);
    uint64_t v20 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of ParsedMeasurement(a2, a3, 1);
    OUTLINED_FUNCTION_0_44();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v22 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v17, v18, "Measurement unit type %s does not match requested %s.", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    OUTLINED_FUNCTION_0_44();
  }
  else
  {
    outlined consume of ParsedMeasurement(a2, a3, 1);
    OUTLINED_FUNCTION_0_44();
  }
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnit>);
  return __swift_storeEnumTagSinglePayload(a5, 1, 1, v29);
}

BOOL static ParsedMeasurement.__derived_enum_equals(_:_:)(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, char a6)
{
  if (a3)
  {
    if ((a6 & 1) != 0 && *(double *)&a1 == *(double *)&a4)
    {
      type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSObject);
      outlined copy of ParsedMeasurement(a1, a2, 1);
      outlined copy of ParsedMeasurement(a4, a5, 1);
      char v11 = static NSObject.== infix(_:_:)();
      outlined consume of ParsedMeasurement(a4, a5, 1);
      outlined consume of ParsedMeasurement(a1, a2, 1);
      return v11 & 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return (a6 & 1) == 0 && *(double *)&a1 == *(double *)&a4;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ParsedMeasurement(uint64_t a1, uint64_t a2)
{
  return static ParsedMeasurement.__derived_enum_equals(_:_:)(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void **)(a2 + 8), *(unsigned char *)(a2 + 16));
}

void destroy for ParsedMeasurement(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ParsedMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ParsedMeasurement(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ParsedMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ParsedMeasurement(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  id v7 = *(void **)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ParsedMeasurement(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ParsedMeasurement(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ParsedMeasurement(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParsedMeasurement(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParsedMeasurement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)NSMeasurement result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ParsedMeasurement(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ParsedMeasurement()
{
  return &type metadata for ParsedMeasurement;
}

void OUTLINED_FUNCTION_0_44()
{
  outlined consume of ParsedMeasurement(v0, v1, 1);
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.__allocating_init(deviceState:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  CustomIntentUnsupportedValueFlowStrategy.init(deviceState:)(a1);
  return v2;
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.init(deviceState:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CATOption();
  __chkstk_darwin(v4 - 8);
  outlined init with copy of DeviceState(a1, v1 + 16);
  outlined init with copy of DeviceState(a1, (uint64_t)v13);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static WFDialogState.shared;
  type metadata accessor for RunCustomIntentCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v6 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v7 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v8 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v9 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for AppNameResolver();
  uint64_t v10 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v11 = swift_allocObject();
  *(void *)(v2 + 56) = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(v13, v5, 0, 1, v6, v7, v8, v9, v10, v11);
  return v2;
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[8] = v1;
  uint64_t v2 = type metadata accessor for ParameterIdentifier();
  v0[9] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v0[10] = v3;
  v0[11] = OUTLINED_FUNCTION_25();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  v0[12] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v0[13] = v5;
  v0[14] = swift_task_alloc();
  v0[15] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void (*v16)(void);
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t (*v26)(id);
  os_log_type_t type;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *log;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v34 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = *(void (**)(void))(v1 + 16);
  OUTLINED_FUNCTION_12_41();
  v3();
  OUTLINED_FUNCTION_12_41();
  v3();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v29 = *(void *)(v0 + 88);
    uint64_t v30 = *(void *)(v0 + 80);
    uint64_t v31 = *(void *)(v0 + 72);
    uint64_t v6 = swift_slowAlloc();
    id v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    log = v4;
    uint64_t v7 = (void *)ParameterResolutionRecord.intent.getter();
    uint64_t v8 = [v7 typeName];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    type = v5;
    uint64_t v11 = v10;

    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51_5();
    v12();
    *(_WORD *)(v6 + 12) = 2080;
    ParameterResolutionRecord.parameter.getter();
    uint64_t v13 = ParameterIdentifier.name.getter();
    uint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51_5();
    v16();
    _os_log_impl(&dword_0, log, type, "CustomIntentUnsupportedValueFlowStrategy removing parameter value for %s:%s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v17 = *(void (**)(void))(*(void *)(v0 + 104) + 8);
    OUTLINED_FUNCTION_51_5();
    v17();
    OUTLINED_FUNCTION_51_5();
    v17();
  }
  os_log_type_t v18 = *(void *)(v0 + 88);
  uint64_t v19 = *(void *)(v0 + 72);
  uint64_t v20 = *(void *)(v0 + 80);
  unint64_t v21 = (void *)ParameterResolutionRecord.intent.getter();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v22 = ParameterIdentifier.name.getter();
  uint64_t v24 = v23;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  id v25 = static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(v21, v22, v24, v0 + 16, 0, 1);
  outlined destroy of URL?(v0 + 16, &demangling cache variable for type metadata for Any?);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v26 = *(uint64_t (**)(id))(v0 + 8);
  return v26(v25);
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = type metadata accessor for DialogPhase();
  v1[5] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[6] = v5;
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v1[9] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[10] = v7;
  v1[11] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for ParameterIdentifier();
  v1[12] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[13] = v9;
  v1[14] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[15] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[16] = v11;
  v1[17] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v18 = 0;
    _os_log_impl(&dword_0, v16, v17, "CustomIntentUnsupportedValueFlowStrategy: Starting unsupported slot value", v18, 2u);
    swift_slowDealloc();
  }
  uint64_t v20 = v14[16];
  uint64_t v19 = v14[17];
  uint64_t v21 = v14[15];

  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v19, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v21);
  char v22 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  if (v22)
  {
    type metadata accessor for WFDialogState();
    v14[18] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
    ParameterResolutionRecord.app.getter();
    uint64_t v23 = App.appIdentifier.getter();
    unint64_t v25 = v24;
    swift_release();
    HIDWORD(a11) = static WFDialogState.isAppFirstRun(appId:)(v23, v25);
    swift_bridgeObjectRelease();
    v14[19] = ParameterResolutionRecord.app.getter();
    ParameterResolutionRecord.parameter.getter();
    ParameterIdentifier.name.getter();
    v14[20] = v26;
    uint64_t v27 = OUTLINED_FUNCTION_9_41();
    v28(v27);
    v14[21] = ParameterResolutionRecord.result.getter();
    v14[22] = ParameterResolutionRecord.intent.getter();
    OUTLINED_FUNCTION_12_26();
    uint64_t v43 = *(void *)(v29 + 304) + **(int **)(v29 + 304);
    uint64_t v44 = v29 + 304;
    uint64_t v30 = (void *)swift_task_alloc();
    v14[23] = v30;
    *uint64_t v30 = v14;
    v30[1] = CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_3();
    return v38(v31, v32, v33, v34, v35, v36, v37, v38, v43, v44, a11, a12, a13, a14);
  }
  else
  {
    uint64_t v41 = (void *)swift_task_alloc();
    v14[29] = v41;
    *uint64_t v41 = v14;
    v41[1] = CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_3();
    return CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput_rfv1(resolveRecord:)();
  }
}

{
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (*v21)(void);
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, char *, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = (void *)v14[25];
  uint64_t v16 = v14[7];
  os_log_type_t v17 = v14[8];
  uint64_t v19 = v14[5];
  os_log_type_t v18 = v14[6];
  static DialogPhase.clarification.getter();
  uint64_t v20 = [v15 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v17, v19);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  OUTLINED_FUNCTION_51_5();
  v21();
  char v22 = (void *)ParameterResolutionRecord.intent.getter();
  INIntent.isRestricted()();

  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v14[26] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_211C70;
  *(void *)(v23 + 32) = v15;
  uint64_t v36 = v23;
  specialized Array._endMutation()();
  v14[27] = v36;
  uint64_t v35 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  unint64_t v24 = v15;
  unint64_t v25 = (void *)swift_task_alloc();
  v14[28] = v25;
  *unint64_t v25 = v14;
  v25[1] = CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:);
  OUTLINED_FUNCTION_3();
  return v29(v26, v27, v28, v29, v30, v31, v32, v33, v35, v15, v36, a12, a13, a14);
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v2;
  *(void *)(v5 + 192) = v1;
  swift_task_dealloc();
  uint64_t v7 = *(void **)(v4 + 176);
  uint64_t v8 = *(void **)(v4 + 168);
  if (v1)
  {

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_release();

    swift_bridgeObjectRelease();
    *(void *)(v5 + 200) = a1;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput_rfv1(resolveRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[8] = v2;
  v1[9] = v0;
  v1[7] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[10] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for ParameterIdentifier();
  v1[11] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[12] = v5;
  v1[13] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v1[14] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[15] = v7;
  v1[16] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 168);
  uint64_t v4 = *(void **)(v2 + 160);
  if (v0)
  {

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_release();

    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput_rfv1(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  type metadata accessor for WFDialogState();
  v14[17] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  ParameterResolutionRecord.app.getter();
  uint64_t v15 = App.appIdentifier.getter();
  unint64_t v17 = v16;
  swift_release();
  HIDWORD(a11) = static WFDialogState.isAppFirstRun(appId:)(v15, v17);
  swift_bridgeObjectRelease();
  v14[18] = ParameterResolutionRecord.app.getter();
  ParameterResolutionRecord.parameter.getter();
  ParameterIdentifier.name.getter();
  v14[19] = v18;
  uint64_t v19 = OUTLINED_FUNCTION_9_41();
  v20(v19);
  v14[20] = ParameterResolutionRecord.result.getter();
  v14[21] = ParameterResolutionRecord.intent.getter();
  OUTLINED_FUNCTION_12_26();
  uint64_t v34 = *(void *)(v21 + 312) + **(int **)(v21 + 312);
  uint64_t v35 = v21 + 312;
  char v22 = (void *)swift_task_alloc();
  v14[22] = v22;
  void *v22 = v14;
  v22[1] = CustomIntentUnsupportedValueFlowStrategy.makeUnsupportedValueOutput_rfv1(resolveRecord:);
  OUTLINED_FUNCTION_3();
  return v31(v23, v24, v25, v26, v27, v28, v29, v30, v34, v35, a11, a12, a13, a14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = *(void *)(v14 + 128);
  unint64_t v16 = *(void *)(v14 + 120);
  uint64_t v32 = *(void *)(v14 + 112);
  uint64_t v33 = *(void *)(v14 + 104);
  uint64_t v18 = *(void *)(v14 + 72);
  unint64_t v17 = *(void *)(v14 + 80);
  uint64_t v19 = *(uint64_t **)(v14 + 56);
  uint64_t v20 = (void *)ParameterResolutionRecord.intent.getter();
  INIntent.isRestricted()();

  __swift_project_boxed_opaque_existential_1((void *)(v18 + 16), *(void *)(v18 + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v21 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v17, 1, 1, v21);
  char v22 = type metadata accessor for AceOutput();
  *(_OWORD *)(v14 + 32) = 0u;
  *(void *)(v14 + 48) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  void v19[3] = v22;
  v19[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v19);
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v14 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v17, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_3();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, v14 + 16, v32, v33, a12, a13, a14);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance CustomIntentUnsupportedValueFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 112)
                                                + **(int **)(**(void **)v2 + 112));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance CustomIntentHandleIntentFlowStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance CustomIntentUnsupportedValueFlowStrategy(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 104) + **(int **)(**(void **)v1 + 104));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance CustomIntentUnsupportedValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentUnsupportedValueFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for Flow.execute() in conformance ListShortcutsFlow;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t type metadata accessor for CustomIntentUnsupportedValueFlowStrategy()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_9_41()
{
  return v0;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin09ShortcutsE18DisambiguationItemVG_So7LNValueCs5NeverOTg504_s18def20Plugin09Shortcutsb14i75C8StrategyC05parseF8Response5input14paginatedItems0a3KitC00F6ResultVySaySo7k26CGGAG5InputV_AG22Paginatedj9ContainerZ70AA0ebfR0VGtYaKFAkScfu_33_63fe0d9d8b7f1126a2967f5d884e7691AsKTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  NSMeasurement result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (void **)(a1 + 80);
    do
    {
      uint64_t v5 = *v4;
      v4 += 7;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *ShortcutsLinkDisambiguationFlowStrategy.__allocating_init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long *a8)
{
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v16 = *(void *)(a5 + 24);
  uint64_t v15 = *(void *)(a5 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a5, v16);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_20_0();
  uint64_t v20 = v19 - v18;
  (*(void (**)(uint64_t))(v21 + 16))(v19 - v18);
  char v22 = specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)(a1, a2, a3, a4, v20, a6, a7, a8, v14, v16, v15);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v22;
}

void *ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long *a8)
{
  uint64_t v17 = *(void *)(a5 + 24);
  uint64_t v16 = *(void *)(a5 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a5, v17);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_2_27();
  (*(void (**)(uint64_t))(v19 + 16))(v8);
  uint64_t v20 = specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)(a1, a2, a3, a4, v8, a6, a7, a8, v9, v17, v16);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v20;
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for Parse.DirectInvocation();
  OUTLINED_FUNCTION_12_1();
  uint64_t v51 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_0();
  uint64_t v9 = v8 - v7;
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v54 = v11;
  uint64_t v55 = v10;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v52 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v53 = (char *)&v47 - v14;
  uint64_t v15 = type metadata accessor for Input();
  OUTLINED_FUNCTION_12_1();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_20_0();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v23 = OUTLINED_FUNCTION_16(v22);
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_2_27();
  uint64_t v24 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v24);
  uint64_t v25 = (void *)OUTLINED_FUNCTION_16_2();
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = v2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5();
  swift_release();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  uint64_t v56 = a1;
  v27(v21, a1, v15);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  uint64_t v30 = v15;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v50 = v4;
    uint64_t v58 = v32;
    uint64_t v48 = v30;
    uint64_t v49 = v9;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v33 = Input.description.getter();
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v58);
    uint64_t v9 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v48);
    _os_log_impl(&dword_0, v28, v29, "#ShortcutsLinkDisambiguationFlowStrategy actionForInput: %s", v31, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v50;
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v15);
  }

  Input.parse.getter();
  char v35 = static VoiceCommandConfirmationUtils.getVoiceCommandConfirmation(parse:)();
  uint64_t v37 = v54;
  uint64_t v36 = v55;
  uint64_t v38 = *(void (**)(uint64_t))(v54 + 8);
  uint64_t v39 = OUTLINED_FUNCTION_25_19();
  v38(v39);
  switch(v35)
  {
    case 2:
      swift_bridgeObjectRelease();
      return static ActionForInput.ignore()();
    case 3:
      goto LABEL_8;
    default:
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v40) {
        return static ActionForInput.ignore()();
      }
LABEL_8:
      uint64_t v41 = v52;
      Input.parse.getter();
      int v42 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v41, v36);
      if (v42 == enum case for Parse.NLv3IntentOnly(_:)) {
        goto LABEL_9;
      }
      if (v42 != enum case for Parse.directInvocation(_:))
      {
        if (v42 != enum case for Parse.uso(_:))
        {
          static ActionForInput.ignore()();
          goto LABEL_10;
        }
LABEL_9:
        static ActionForInput.handle()();
LABEL_10:
        uint64_t v43 = OUTLINED_FUNCTION_25_19();
        return ((uint64_t (*)(uint64_t))v38)(v43);
      }
      (*(void (**)(char *, uint64_t))(v37 + 96))(v41, v36);
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v9, v41, v4);
      if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000043 && v45 == 0x8000000000226000)
      {
        swift_bridgeObjectRelease();
LABEL_20:
        static ActionForInput.handle()();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v9, v4);
      }
      char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v46) {
        goto LABEL_20;
      }
      static ActionForInput.ignore()();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v9, v4);
  }
}

uint64_t closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  return _swift_task_switch(closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:), 0, 0);
}

uint64_t closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)()
{
  OUTLINED_FUNCTION_21_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v1[13] = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v0, "#ShortcutsLinkDisambiguationFlowStrategy submitting empty output to clear screen and prevent double-taps", v5, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v6 = v1[12];

  outlined init with copy of DeviceState(v6 + 168, (uint64_t)(v1 + 2));
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v7);
  static OutputUtils.makeTemporaryOutput()(v1 + 7);
  uint64_t v9 = (void *)swift_task_alloc();
  v1[14] = v9;
  *uint64_t v9 = v1;
  v9[1] = closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v1 + 7, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  os_log_type_t v4 = v2 + 56;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v7 + 120) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + 16);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v3))
  {
    os_log_type_t v4 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl(&dword_0, v2, v0, "#ShortcutsLinkDisambiguationFlowStrategy failed to submit empty output to clear screen", v4, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  swift_errorRelease();

  OUTLINED_FUNCTION_18_0();
  return v5();
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.parseDisambiguationResponse(input:paginatedItems:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[18] = v2;
  v1[19] = v0;
  v1[16] = v3;
  v1[17] = v4;
  uint64_t v5 = type metadata accessor for USOParse();
  v1[20] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[21] = v6;
  v1[22] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for Parse.DirectInvocation();
  v1[23] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[24] = v8;
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for NLIntent();
  v1[27] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[28] = v10;
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for Parse();
  v1[30] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[31] = v12;
  v1[32] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v13, v14, v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[19];
  uint64_t v2 = v1 + 40;
  uint64_t v3 = v1 + 120;
  uint64_t v4 = [*(id *)(v1 + 160) systemProtocols];
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v0[33] = v5;

  uint64_t v6 = (void *)swift_task_alloc();
  v0[34] = v6;
  *uint64_t v6 = v0;
  v6[1] = ShortcutsLinkDisambiguationFlowStrategy.parseDisambiguationResponse(input:paginatedItems:);
  return static SharedAudioStartingIntentSetup.setup(deviceState:aceServiceInvoker:systemProtocols:)(v2, v3, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v63 = v0;
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 240);
  Input.parse.getter();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for Parse.NLv3IntentOnly(_:))
  {
    uint64_t v5 = *(void *)(v0 + 256);
    uint64_t v6 = *(void *)(v0 + 232);
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v9 = OUTLINED_FUNCTION_27_27();
    v10(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v5, v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ShortcutsLinkDisambiguationItem>);
    PaginatedItemContainer.items.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputToDisambiguationItemsConverter<ShortcutsLinkDisambiguationItem>);
    OUTLINED_FUNCTION_16_2();
    uint64_t v11 = OUTLINED_FUNCTION_26_24();
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*v11 + 152))(v6);
    swift_release();
    uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin09ShortcutsE18DisambiguationItemVG_So7LNValueCs5NeverOTg504_s18def20Plugin09Shortcutsb14i75C8StrategyC05parseF8Response5input14paginatedItems0a3KitC00F6ResultVySaySo7k26CGGAG5InputV_AG22Paginatedj9ContainerZ70AA0ebfR0VGtYaKFAkScfu_33_63fe0d9d8b7f1126a2967f5d884e7691AsKTf3nnnpk_nTf1cn_nTm(v12);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 120) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
    static DisambiguationResult.chosenItem(_:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  if (v4 == enum case for Parse.directInvocation(_:))
  {
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v17 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 192);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 248) + 96))(v14, *(void *)(v0 + 240));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v15, v14, v17);
    uint64_t v18 = Parse.DirectInvocation.userData.getter();
    if (v18)
    {
      specialized Dictionary.subscript.getter(0x65756C6176, 0xE500000000000000, v18, (_OWORD *)(v0 + 16));
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 40))
      {
        if (swift_dynamicCast())
        {
          uint64_t v20 = *(void *)(v0 + 48);
          uint64_t v19 = *(void *)(v0 + 56);
          type metadata accessor for NSError(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
          type metadata accessor for NSError(0, &lazy cache variable for type metadata for LNValue);
          uint64_t v21 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
          uint64_t v54 = (void *)v21;
          if (v21)
          {
            uint64_t v55 = *(void *)(v0 + 208);
            uint64_t v56 = *(void *)(v0 + 184);
            uint64_t v57 = *(void *)(v0 + 192);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            uint64_t v58 = OUTLINED_FUNCTION_16_2();
            *(_OWORD *)(v58 + 16) = xmmword_211C70;
            *(void *)(v58 + 32) = v54;
            v62 = v58;
            specialized Array._endMutation()();
            *(void *)(v0 + 104) = v62;
            v59 = v54;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
            static DisambiguationResult.chosenItem(_:)();
            outlined consume of Data._Representation(v20, v19);

            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
            goto LABEL_26;
          }
          outlined consume of Data._Representation(v20, v19);
        }
        goto LABEL_18;
      }
    }
    else
    {
      *(_OWORD *)(v0 + 16) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    outlined destroy of URL?(v0 + 16, &demangling cache variable for type metadata for Any?);
LABEL_18:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v38 = *(void *)(v0 + 200);
    uint64_t v37 = *(void *)(v0 + 208);
    char v40 = *(void *)(v0 + 184);
    uint64_t v39 = *(void *)(v0 + 192);
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.voiceCommands);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v37, v40);
    int v42 = Logger.logObject.getter();
    uint64_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315138;
      if (!Parse.DirectInvocation.userData.getter()) {
        Dictionary.init(dictionaryLiteral:)();
      }
      uint64_t v45 = *(void *)(v0 + 192);
      v60 = *(void *)(v0 + 184);
      v61 = *(void *)(v0 + 200);
      char v46 = Dictionary.description.getter();
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v49(v61, v60);
      _os_log_impl(&dword_0, v42, v43, "#ShortcutsLinkDisambiguationFlowStrategy could not get value from direct invocation. %s", v44, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 192) + 8);
      v49(*(void *)(v0 + 200), *(void *)(v0 + 184));
    }

    uint64_t v50 = *(void *)(v0 + 208);
    uint64_t v51 = *(void *)(v0 + 184);
    *(void *)(v0 + 80) = _swiftEmptyArrayStorage;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
    static DisambiguationResult.chosenItem(_:)();
    v49(v50, v51);
    goto LABEL_26;
  }
  if (v4 == enum case for Parse.uso(_:))
  {
    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v24 = *(void *)(v0 + 168);
    uint64_t v23 = *(void *)(v0 + 176);
    uint64_t v25 = *(void *)(v0 + 160);
    uint64_t v26 = OUTLINED_FUNCTION_27_27();
    v27(v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v22, v25);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ShortcutsLinkDisambiguationItem>);
    PaginatedItemContainer.items.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputToDisambiguationItemsConverter<ShortcutsLinkDisambiguationItem>);
    OUTLINED_FUNCTION_16_2();
    uint64_t v28 = OUTLINED_FUNCTION_26_24();
    os_log_type_t v29 = (*(uint64_t (**)(uint64_t))(*v28 + 136))(v23);
    swift_release();
    uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18SiriLinkFlowPlugin09ShortcutsE18DisambiguationItemVG_So7LNValueCs5NeverOTg504_s18def20Plugin09Shortcutsb14i75C8StrategyC05parseF8Response5input14paginatedItems0a3KitC00F6ResultVySaySo7k26CGGAG5InputV_AG22Paginatedj9ContainerZ70AA0ebfR0VGtYaKFAkScfu_33_63fe0d9d8b7f1126a2967f5d884e7691AsKTf3nnnpk_nTf1cn_nTm(v29);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 64) = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
    static DisambiguationResult.chosenItem(_:)();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    goto LABEL_10;
  }
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.voiceCommands);
  uint64_t v32 = Logger.logObject.getter();
  uint64_t v33 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v33))
  {
    unint64_t v34 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)unint64_t v34 = 0;
    _os_log_impl(&dword_0, v32, (os_log_type_t)v3, "#ShortcutsLinkDisambiguationFlowStrategy unexpected input type", v34, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNValue]);
  static DisambiguationResult.chosenItem(_:)();
  char v35 = OUTLINED_FUNCTION_30();
  v36(v35);
LABEL_26:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v52();
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[8] = v2;
  v1[9] = v0;
  v1[7] = v3;
  v1[10] = *v0;
  uint64_t v4 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v4);
  v1[11] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_21_0();
  type metadata accessor for RunLinkActionCATsSimple();
  static CATOption.defaultMode.getter();
  v0[12] = CATWrapperSimple.__allocating_init(options:globals:)();
  uint64_t v1 = type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v2 = ResponseFactory.init()();
  v0[5] = v1;
  v0[6] = &protocol witness table for ResponseFactory;
  v0[2] = v2;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[13] = v3;
  *uint64_t v3 = v4;
  v3[1] = ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:);
  return static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v3 + 16);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[38] = v2;
  v1[39] = v0;
  v1[36] = v3;
  v1[37] = v4;
  v1[34] = v5;
  v1[35] = v6;
  v1[32] = v7;
  v1[33] = v8;
  v1[31] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16(v10);
  v1[40] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for SpeakableString();
  v1[41] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[42] = v12;
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[45] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v1[46] = v14;
  v1[47] = OUTLINED_FUNCTION_25();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v15);
  v1[48] = OUTLINED_FUNCTION_25();
  uint64_t v16 = type metadata accessor for DialogPhase();
  OUTLINED_FUNCTION_16(v16);
  v1[49] = OUTLINED_FUNCTION_25();
  uint64_t v17 = type metadata accessor for OutputGenerationManifest();
  v1[50] = v17;
  OUTLINED_FUNCTION_1_0(v17);
  v1[51] = v18;
  v1[52] = OUTLINED_FUNCTION_25();
  uint64_t v19 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v19);
  v1[53] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v20, v21, v22);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)OUTLINED_FUNCTION_33();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, v3, "#ShortcutsLinkDisambiguationFlowStrategy make prompt for disambiguation item", v4, 2u);
    OUTLINED_FUNCTION_7_0();
  }

  v0[54] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ShortcutsLinkDisambiguationItem>);
  v0[55] = PaginatedItemContainer.items.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[56] = v5;
  *uint64_t v5 = v0;
  v5[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:);
  return Array<A>.toDisambiguationItemModels()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  void *v4 = v3;
  *(void *)(v6 + 456) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *inited;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  void (**v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 296);
  outlined init with copy of DeviceState(*(void *)(v0 + 264), v0 + 144);
  type metadata accessor for RunLinkActionCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  static CATOption.defaultMode.getter();
  uint64_t v4 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v5 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  static CATOption.defaultMode.getter();
  uint64_t v6 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t inited = (void *)swift_initStackObject();
  *(void *)(v0 + 464) = inited;
  *(void *)(v0 + 472) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)((long long *)(v0 + 144), v3, v2, v4, v5, v6, inited);
  type metadata accessor for ShortcutsLinkNLContextProvider();
  *(void *)(v0 + 480) = swift_initStackObject();
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    NSMeasurement result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
    NSMeasurement result = swift_bridgeObjectRetain();
  }
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v10 = 0;
    uint64_t v11 = v1 & 0xC000000000000001;
    int v42 = *(void *)(v0 + 336);
    uint64_t v12 = (void (**)(char *, char *, uint64_t))(v42 + 32);
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if (v11) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v15 = *(void *)(v0 + 320);
      uint64_t v14 = *(void *)(v0 + 328);
      String.toSpeakableString.getter();
      __swift_storeEnumTagSinglePayload(v15, 0, 1, v14);
      swift_release();
      if (__swift_getEnumTagSinglePayload(v15, 1, v14) == 1)
      {
        outlined destroy of URL?(*(void *)(v0 + 320), &demangling cache variable for type metadata for SpeakableString?);
      }
      else
      {
        uint64_t v16 = v8;
        uint64_t v18 = *(char **)(v0 + 344);
        uint64_t v17 = *(char **)(v0 + 352);
        uint64_t v19 = *(void *)(v0 + 328);
        uint64_t v20 = *v12;
        (*v12)(v17, *(char **)(v0 + 320), v19);
        v20(v18, v17, v19);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, (uint64_t)v13);
        }
        uint64_t v22 = *((void *)v13 + 2);
        uint64_t v21 = *((void *)v13 + 3);
        if (v22 >= v21 >> 1) {
          uint64_t v13 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, (uint64_t)v13);
        }
        uint64_t v23 = *(char **)(v0 + 344);
        uint64_t v24 = *(void *)(v0 + 328);
        *((void *)v13 + 2) = v22 + 1;
        v20(&v13[((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(void *)(v42 + 72) * v22], v23, v24);
        uint64_t v8 = v16;
      }
      ++v10;
    }
    while (v8 != v10);
  }
  else
  {
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  }
  *(void *)(v0 + 488) = v13;
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v26 = *(void *)(v0 + 368);
  uint64_t v27 = *(void *)(v0 + 376);
  uint64_t v28 = *(void *)(v0 + 360);
  swift_bridgeObjectRelease();
  static DialogPhase.clarification.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  static TemplatingResult.getListenAfterSpeakingDisabled()();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  os_log_type_t v29 = PaginatedItemContainer.items.getter();
  ShortcutsLinkNLContextProvider.makeContextForDisambiguation(disambiguationItems:)(v29);
  swift_bridgeObjectRelease();
  uint64_t v30 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v25, 0, 1, v30);
  OutputGenerationManifest.nlContextUpdate.setter();
  (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v27, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v28);
  uint64_t v31 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
  if (v31)
  {
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v32;
    void *v32 = v0;
    v32[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:);
    return LinkActionDialogTemplating.makeNeedsDisambiguationTitle(customPrompt:items:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 544) = v33;
    *uint64_t v33 = v34;
    v33[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:);
    char v35 = *(void *)(v0 + 416);
    uint64_t v36 = *(void *)(v0 + 280);
    uint64_t v37 = *(void *)(v0 + 288);
    uint64_t v38 = *(void *)(v0 + 264);
    uint64_t v39 = *(void *)(v0 + 272);
    char v40 = *(void *)(v0 + 248);
    uint64_t v41 = *(void *)(v0 + 256);
    return static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:)(v40, v41, v38, v39, v36, v37, (uint64_t)v13, v35);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  *(void *)(v2 + 504) = v6;
  *(void *)(v2 + 512) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t *v0;
  void *v1;
  void *v2;
  id v3;
  Swift::String_optional v4;
  uint64_t countAndFlagsBits;
  void *object;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = v0 + 30;
  uint64_t v2 = (void *)v0[63];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = DialogExecutionResult.firstDialogFullPrint()();
    countAndFlagsBits = v4.value._countAndFlagsBits;
    object = v4.value._object;

    *uint64_t v1 = _swiftEmptyArrayStorage;
    uint64_t v7 = v3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                   + (*v1 & 0xFFFFFFFFFFFFFF8)) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v8 = [v7 catId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    OutputGenerationManifest.responseViewId.setter();
  }
  else
  {
    uint64_t v7 = 0;
    object = 0;
    countAndFlagsBits = 0;
    *uint64_t v1 = _swiftEmptyArrayStorage;
  }
  v0[65] = (uint64_t)v7;
  uint64_t v9 = v0[57];
  uint64_t v10 = (void *)v0[38];
  uint64_t v11 = v10[3];
  uint64_t v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v0[26] = type metadata accessor for WorkflowDataModels(0);
  v0[27] = lazy protocol witness table accessor for type WorkflowDataModels and conformance WorkflowDataModels();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 23);
  uint64_t *boxed_opaque_existential_1 = countAndFlagsBits;
  boxed_opaque_existential_1[1] = (uint64_t)object;
  boxed_opaque_existential_1[2] = v9;
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = v0[30];
  v0[66] = v14;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[67] = (uint64_t)v15;
  *uint64_t v15 = v16;
  v15[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:deviceState:appBundleId:dialog:runLinkActionCatWrapperSimple:responseFactory:);
  uint64_t v17 = v0[52];
  uint64_t v18 = v0[31];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v18, v0 + 23, v14, v17, v11, v12);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 184;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = *(void **)(v0 + 520);
  swift_release();
  swift_release();

  uint64_t v2 = OUTLINED_FUNCTION_30();
  v3(v2);
  OUTLINED_FUNCTION_16_28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 552) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_21_0();
  swift_release();
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_23_28();
  v1(v0);
  OUTLINED_FUNCTION_16_28();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_10_39();
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_24_25();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_10_39();
  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_24_25();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[34] = a7;
  v8[35] = a8;
  v8[32] = a5;
  v8[33] = a6;
  v8[30] = a3;
  v8[31] = a4;
  v8[28] = a1;
  v8[29] = a2;
  uint64_t v9 = type metadata accessor for OutputGenerationManifest();
  v8[36] = v9;
  v8[37] = *(void *)(v9 - 8);
  v8[38] = swift_task_alloc();
  type metadata accessor for CATOption();
  v8[39] = swift_task_alloc();
  return _swift_task_switch(static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:), 0, 0);
}

uint64_t static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:)()
{
  outlined init with copy of DeviceState(*(void *)(v0 + 240), v0 + 184);
  type metadata accessor for RunLinkActionCATs();
  OUTLINED_FUNCTION_19_12();
  uint64_t v1 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATsSimple();
  OUTLINED_FUNCTION_19_12();
  uint64_t v2 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_19_12();
  uint64_t v3 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_19_12();
  uint64_t v4 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunLinkActionCATPatternsExecutor(0);
  OUTLINED_FUNCTION_19_12();
  uint64_t v5 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for LinkActionDialogTemplating();
  uint64_t inited = (void *)swift_initStackObject();
  *(void *)(v0 + 320) = inited;
  *(void *)(v0 + 328) = specialized LinkActionDialogTemplating.init(deviceState:runLinkActionCatWrapper:runLinkActionCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:linkActionPatterns:)((long long *)(v0 + 184), v1, v2, v3, v4, v5, inited);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v7;
  *uint64_t v7 = v0;
  v7[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:);
  return LinkActionDialogTemplating.makeNeedsDisambiguationTitle_preRFv2(customPrompt:items:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  v5[43] = v9;
  v5[44] = v0;
  swift_task_dealloc();
  if (!v0) {
    v5[45] = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[43];
  uint64_t v4 = v0[31];
  uint64_t v3 = v0[32];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ShortcutsLinkDisambiguationItem>);
  uint64_t v5 = PaginatedItemContainer.items.getter();
  uint64_t v6 = Array<A>.toDisambiguationVisualItems()(v5);
  v0[46] = v6;
  swift_bridgeObjectRelease();
  v0[18] = v4;
  v0[19] = v3;
  v0[20] = v1;
  v0[21] = v2;
  v0[22] = v6;
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[47] = v7;
  *uint64_t v7 = v0;
  v7[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:);
  return LinkActionDialogTemplating.makeParameterValueDisambiguationPattern_preRFv2(customPrompt:items:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  void *v4 = v5;
  v3[48] = v6;
  v3[49] = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    v3[50] = v10;
    *uint64_t v10 = v5;
    v10[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:);
    return DisambiguationVisual.data.getter();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v10 = v9;
  v7[51] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7[52] = v3;
    v7[53] = v5;
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = (void *)v0[48];
  uint64_t v3 = v0[37];
  uint64_t v2 = v0[38];
  uint64_t v5 = v0[35];
  uint64_t v4 = v0[36];
  outlined bridged method (mbnn) of @objc PatternExecutionResult.visual.setter(v0[53], v0[52], v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = [v1 patternId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OutputGenerationManifest.responseViewId.setter();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[54] = ResponseFactory.init()();
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:)
                                                          + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(patternExecutionResult:outputGenerationManifest:));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[55] = v7;
  *uint64_t v7 = v8;
  v7[1] = static ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation_preRFv2(paginatedItems:deviceState:appBundleId:dialog:disambiguationItemTitles:manifest:);
  uint64_t v9 = v0[48];
  uint64_t v10 = v0[38];
  uint64_t v11 = v0[28];
  return v13(v11, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 448) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 296);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_14_0();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();

  swift_release();
  uint64_t v1 = OUTLINED_FUNCTION_23_28();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 120);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 168);
  return v0;
}

uint64_t ShortcutsLinkDisambiguationFlowStrategy.__deallocating_deinit()
{
  ShortcutsLinkDisambiguationFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.paginationStyle() in conformance ShortcutsLinkDisambiguationFlowStrategy()
{
  return ShortcutsLinkDisambiguationFlowStrategy.paginationStyle()();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.parseDisambiguationResponse(input:paginatedItems:) in conformance ShortcutsLinkDisambiguationFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ShortcutsLinkDisambiguationFlowStrategy.parseDisambiguationResponse(input:paginatedItems:)();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:) in conformance ShortcutsLinkDisambiguationFlowStrategy()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ShortcutsLinkDisambiguationFlowStrategy.makePromptForDisambiguation(paginatedItems:)();
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:) in conformance ShortcutsLinkDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:) in conformance ShortcutsLinkDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse() in conformance ShortcutsLinkDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return PromptForDisambiguationFlowStrategyAsync.makeFlowCancelledResponse()(a1, v7, a3);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:) in conformance ShortcutsLinkDisambiguationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return PromptForDisambiguationFlowStrategyAsync.makeErrorResponse(_:)(a1, a2, v9, a4);
}

uint64_t protocol witness for PromptForDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription.getter in conformance ShortcutsLinkDisambiguationFlowStrategy()
{
  return PromptForDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription.getter(*v0);
}

void *specialized ShortcutsLinkDisambiguationFlowStrategy.init(appBundleId:actionMetadata:dialog:metadataProvider:deviceState:serviceInvoker:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7, long long *a8, void *a9, uint64_t a10, uint64_t a11)
{
  a9[13] = a10;
  a9[14] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a9 + 10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(boxed_opaque_existential_1, a5, a10);
  a9[3] = a1;
  a9[4] = a2;
  a9[20] = a3;
  a9[2] = a4;
  outlined init with take of AceServiceInvokerAsync(a6, (uint64_t)(a9 + 5));
  outlined init with take of AceServiceInvokerAsync(a7, (uint64_t)(a9 + 15));
  outlined init with take of AceServiceInvokerAsync(a8, (uint64_t)(a9 + 21));
  return a9;
}

uint64_t sub_1C6670()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t partial apply for closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)()
{
  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v8;
  v7[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return closure #1 in ShortcutsLinkDisambiguationFlowStrategy.actionForInput(_:)(v3, v4, v5, v6);
}

uint64_t type metadata accessor for ShortcutsLinkDisambiguationFlowStrategy()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_10_39()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_16_28()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_23_28()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_25()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_19()
{
  return v0;
}

void *OUTLINED_FUNCTION_26_24()
{
  return specialized InputToDisambiguationItemsConverter.init(disambiguationItems:page:)(v0, 0);
}

uint64_t OUTLINED_FUNCTION_27_27()
{
  return v0;
}

id static SLFConfirmationItemConverter.toDirectInvocationCommand(confirmation:appBundleId:deviceState:)(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    if (a1 == 1)
    {
      unint64_t v5 = 0xE200000000000000;
      uint64_t v6 = 28526;
    }
    else
    {
      unint64_t v5 = 0xE600000000000000;
      uint64_t v6 = 0x6C65636E6163;
    }
  }
  else
  {
    unint64_t v5 = 0xE300000000000000;
    uint64_t v6 = 7562617;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_212160;
  strcpy((char *)(inited + 32), "confirmation");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v5;
  uint64_t v8 = (void *)Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for SKIDirectInvocationPayload();
  id v9 = SKIDirectInvocationPayload.__allocating_init(identifier:)();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(v11, v9);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  uint64_t v12 = (void *)DeviceState.asInvocationContext.getter();
  [v12 setInputOrigin:SAInputOriginDialogButtonTapValue];
  uint64_t v13 = self;
  id v14 = [v13 runSiriKitExecutorCommandWithContext:v12 payload:v9];
  id v15 = [objc_allocWithZone((Class)SAIntentGroupSiriKitAppSelectionState) init];
  id v16 = [objc_allocWithZone((Class)SASyncAppIdentifyingInfo) init];
  NSString v17 = String._bridgeToObjectiveC()();
  [v16 setBundleId:v17];

  [v15 setRequestedApp:v16];
  [v14 setAppSelectionState:v15];

  id v18 = [v13 wrapCommandInStartLocalRequest:v14];
  return v18;
}

uint64_t static SLFConfirmationItemConverter.toVoiceCommandConfirmation(userData:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 3;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x616D7269666E6F63, 0xEC0000006E6F6974);
  if ((v3 & 1) == 0) {
    return 3;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v11);
  if ((swift_dynamicCast() & 1) == 0) {
    return 3;
  }
  BOOL v4 = v9 == 7562617 && v10 == 0xE300000000000000;
  if (v4 || (OUTLINED_FUNCTION_10_34() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = v9 == 28526 && v10 == 0xE200000000000000;
    if (v6 || (OUTLINED_FUNCTION_10_34() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (v9 == 0x6C65636E6163 && v10 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = OUTLINED_FUNCTION_10_34();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

ValueMetadata *type metadata accessor for SLFConfirmationItemConverter()
{
  return &type metadata for SLFConfirmationItemConverter;
}

SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional __swiftcall RunLinkActionCATPatternsIdentifiers.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunLinkActionCATPatternsIdentifiers.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return (SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional)9;
  }
  else {
    return (SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional)v3;
  }
}

unint64_t RunLinkActionCATPatternsIdentifiers.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000020;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 2:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000024;
      break;
    case 4:
      unint64_t result = 0xD000000000000022;
      break;
    case 5:
      unint64_t result = 0xD000000000000025;
      break;
    case 6:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000023;
      break;
    case 8:
      unint64_t result = 0xD00000000000002ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunLinkActionCATPatternsIdentifiers(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunLinkActionCATPatternsIdentifiers()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLinkActionCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunLinkActionCATPatternsIdentifiers(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RunLinkActionCATPatternsIdentifiers@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::RunLinkActionCATPatternsIdentifiers_optional *a2@<X8>)
{
  result.value = RunLinkActionCATPatternsIdentifiers.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RunLinkActionCATPatternsIdentifiers@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = RunLinkActionCATPatternsIdentifiers.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t RunLinkActionActionPerformedUseSonicStatusParameters.customDialog.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_34_16();
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v0, v1, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t RunLinkActionActionConfirmationParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionActionConfirmationParameters(0);
  return OUTLINED_FUNCTION_39_15(v0);
}

uint64_t type metadata accessor for RunLinkActionActionConfirmationParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionActionConfirmationParameters);
}

uint64_t RunLinkActionActionConfirmationParameters.verb.getter@<X0>(uint64_t a1@<X8>)
{
  return RunLinkActionActionConfirmationParameters.verb.getter(type metadata accessor for RunLinkActionActionConfirmationParameters, a1);
}

uint64_t RunLinkActionActionConfirmationParameters.verb.setter()
{
  return RunLinkActionActionConfirmationParameters.verb.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t vars8;

  Swift::String v2 = OUTLINED_FUNCTION_2_34();
  unint64_t v4 = v1 + *(int *)(v3(v2) + 24);

  return outlined assign with take of SpeakableString?(v0, v4);
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *RunLinkActionActionConfirmationParameters.verb.modify())(Swift::OpaquePointer items)
{
  uint64_t v0 = OUTLINED_FUNCTION_2_34();
  type metadata accessor for RunLinkActionActionConfirmationParameters(v0);
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t RunLinkActionActionConfirmationParameters.asKeyValuePairs()()
{
  return RunLinkActionActionConfirmationParameters.asKeyValuePairs()(type metadata accessor for RunLinkActionActionConfirmationParameters, 1651664246, 0xE400000000000000);
}

uint64_t RunLinkActionActionConfirmationParameters.init(customDialog:executeSashGroupOnWatch:verb:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return RunLinkActionActionConfirmationParameters.init(customDialog:executeSashGroupOnWatch:verb:)(a1, a2, a3, type metadata accessor for RunLinkActionActionConfirmationParameters, a4);
}

uint64_t RunLinkActionActionPerformedParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionActionPerformedParameters(0);
  return OUTLINED_FUNCTION_39_15(v0);
}

uint64_t type metadata accessor for RunLinkActionActionPerformedParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionActionPerformedParameters);
}

uint64_t RunLinkActionActionPerformedParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_8_35(a1, a2, type metadata accessor for RunLinkActionActionPerformedParameters);
}

uint64_t RunLinkActionActionPerformedParameters.init(customDialog:executeSashGroupOnWatch:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RunLinkActionActionPerformedParameters.init(customDialog:executeSashGroupOnWatch:)(a1, type metadata accessor for RunLinkActionActionPerformedParameters, a2);
}

uint64_t RunLinkActionActionPerformedUseSonicStatusParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionActionPerformedUseSonicStatusParameters(0);
  return OUTLINED_FUNCTION_39_15(v0);
}

uint64_t type metadata accessor for RunLinkActionActionPerformedUseSonicStatusParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionActionPerformedUseSonicStatusParameters);
}

uint64_t RunLinkActionActionPerformedUseSonicStatusParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_8_35(a1, a2, type metadata accessor for RunLinkActionActionPerformedUseSonicStatusParameters);
}

uint64_t RunLinkActionActionPerformedParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v8 = OUTLINED_FUNCTION_16(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_20_0();
  uint64_t v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_212170;
  uint64_t v13 = (uint64_t *)(v12 + 48);
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v3, v11, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v14 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v11, 1, v14) == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v11, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
  }
  else
  {
    *(void *)(v12 + 72) = v14;
    __swift_allocate_boxed_opaque_existential_1(v13);
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v15 + 32))();
  }
  OUTLINED_FUNCTION_71_8();
  *(void *)(v12 + 80) = v16;
  *(void *)(v12 + 88) = 0x800000000022A4F0;
  char v17 = *(unsigned char *)(v3 + *(int *)(a3(0) + 20));
  *(void *)(v12 + 120) = &type metadata for Bool;
  *(unsigned char *)(v12 + 96) = v17;
  return v12;
}

uint64_t RunLinkActionActionPerformedUseSonicStatusParameters.init(customDialog:executeSashGroupOnWatch:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RunLinkActionActionPerformedParameters.init(customDialog:executeSashGroupOnWatch:)(a1, type metadata accessor for RunLinkActionActionPerformedUseSonicStatusParameters, a2);
}

uint64_t RunLinkActionActionPerformedParameters.init(customDialog:executeSashGroupOnWatch:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  OUTLINED_FUNCTION_54_7(a1, a3);
  uint64_t result = a2(0);
  *(unsigned char *)(v4 + *(int *)(result + 20)) = v3;
  return result;
}

uint64_t RunLinkActionAutoShortcutAppEnabledParameters.device.getter()
{
  type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(0);

  return swift_retain();
}

uint64_t type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionAutoShortcutAppEnabledParameters);
}

uint64_t RunLinkActionAutoShortcutAppEnabledParameters.device.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(0) + 20);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *RunLinkActionAutoShortcutAppEnabledParameters.device.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t RunLinkActionAutoShortcutAppEnabledParameters.executeSashGroupOnWatch.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(0) + 24));
}

uint64_t RunLinkActionAutoShortcutAppEnabledParameters.wasAlreadyEnabled.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(0) + 28));
}

__n128 *RunLinkActionAutoShortcutAppEnabledParameters.asKeyValuePairs()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_25_8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v5 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_23_29(v5, (__n128)xmmword_214D20);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_42_18(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    v5[4].n128_u64[1] = (unint64_t)&demangling cache variable for type metadata for SpeakableString?;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)v2);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_47_13();
    v8();
  }
  v5[5].n128_u64[0] = 0x656369766564;
  v5[5].n128_u64[1] = 0xE600000000000000;
  uint64_t v9 = (int *)type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(0);
  unint64_t v10 = *(void *)(v0 + v9[5]);
  if (v10)
  {
    uint64_t v11 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    uint64_t v11 = 0;
    v5[6].n128_u64[1] = 0;
    v5[7].n128_u64[0] = 0;
  }
  v5[6].n128_u64[0] = v10;
  v5[7].n128_u64[1] = v11;
  v5[8].n128_u64[0] = 0xD000000000000017;
  v5[8].n128_u64[1] = 0x800000000022A4F0;
  v5[9].n128_u8[0] = *(unsigned char *)(v0 + v9[6]);
  v5[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[11].n128_u64[0] = 0xD000000000000011;
  v5[11].n128_u64[1] = 0x80000000002292F0;
  unsigned __int8 v12 = *(unsigned char *)(v0 + v9[7]);
  v5[13].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[12].n128_u8[0] = v12;
  swift_retain();
  return v5;
}

int *RunLinkActionAutoShortcutAppEnabledParameters.init(appName:device:executeSashGroupOnWatch:wasAlreadyEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  outlined init with take of SpeakableString?(a1, a5);
  uint64_t result = (int *)type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(0);
  *(void *)(a5 + result[5]) = a2;
  *(unsigned char *)(a5 + result[6]) = a3;
  *(unsigned char *)(a5 + result[7]) = a4;
  return result;
}

uint64_t RunLinkActionAutoShortcutFirstRunParameters.executeSashGroupOnWatch.getter()
{
  uint64_t RunParameters = type metadata accessor for RunLinkActionAutoShortcutFirstRunParameters(0);
  return OUTLINED_FUNCTION_39_15(RunParameters);
}

uint64_t type metadata accessor for RunLinkActionAutoShortcutFirstRunParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionAutoShortcutFirstRunParameters);
}

uint64_t RunLinkActionAutoShortcutFirstRunParameters.asKeyValuePairs()()
{
  return RunLinkActionActionPerformedParameters.asKeyValuePairs()(7368801, 0xE300000000000000, type metadata accessor for RunLinkActionAutoShortcutFirstRunParameters);
}

uint64_t RunLinkActionAutoShortcutFirstRunParameters.init(app:executeSashGroupOnWatch:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RunLinkActionActionPerformedParameters.init(customDialog:executeSashGroupOnWatch:)(a1, type metadata accessor for RunLinkActionAutoShortcutFirstRunParameters, a2);
}

uint64_t RunLinkActionConfirmChangeEnablementParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(0);
  return OUTLINED_FUNCTION_39_15(v0);
}

uint64_t type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionConfirmChangeEnablementParameters);
}

uint64_t RunLinkActionConfirmChangeEnablementParameters.isEnabling.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(0)
                                     + 24));
}

__n128 *RunLinkActionConfirmChangeEnablementParameters.asKeyValuePairs()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_25_8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  unint64_t v5 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_23_29(v5, (__n128)xmmword_2138B0);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_42_18(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    v5[4].n128_u64[1] = (unint64_t)&demangling cache variable for type metadata for SpeakableString?;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)v2);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_47_13();
    v8();
  }
  OUTLINED_FUNCTION_71_8();
  uint64_t v10 = OUTLINED_FUNCTION_70_7(v9);
  uint64_t v11 = type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(v10);
  v5[6].n128_u8[0] = *(unsigned char *)(v0 + *(int *)(v11 + 20));
  v5[7].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[8].n128_u64[0] = 0x696C62616E457369;
  v5[8].n128_u64[1] = 0xEA0000000000676ELL;
  unsigned __int8 v12 = *(unsigned char *)(v0 + *(int *)(v11 + 24));
  v5[10].n128_u64[1] = (unint64_t)&type metadata for Bool;
  v5[9].n128_u8[0] = v12;
  return v5;
}

uint64_t RunLinkActionConfirmChangeEnablementParameters.init(appName:executeSashGroupOnWatch:isEnabling:)@<X0>(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  OUTLINED_FUNCTION_54_7(a1, a3);
  uint64_t result = type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(0);
  *(unsigned char *)(v4 + *(int *)(result + 20)) = v3;
  *(unsigned char *)(v4 + *(int *)(result + 24)) = a2;
  return result;
}

uint64_t RunLinkActionContinueInAppParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionContinueInAppParameters(0);
  return OUTLINED_FUNCTION_39_15(v0);
}

uint64_t type metadata accessor for RunLinkActionContinueInAppParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionContinueInAppParameters);
}

uint64_t RunLinkActionContinueInAppParameters.asKeyValuePairs()(uint64_t a1, uint64_t a2)
{
  return OUTLINED_FUNCTION_8_35(a1, a2, type metadata accessor for RunLinkActionContinueInAppParameters);
}

uint64_t RunLinkActionContinueInAppParameters.init(customDialog:executeSashGroupOnWatch:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RunLinkActionActionPerformedParameters.init(customDialog:executeSashGroupOnWatch:)(a1, type metadata accessor for RunLinkActionContinueInAppParameters, a2);
}

uint64_t RunLinkActionParameterConfirmationParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionParameterConfirmationParameters(0);
  return OUTLINED_FUNCTION_39_15(v0);
}

uint64_t type metadata accessor for RunLinkActionParameterConfirmationParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionParameterConfirmationParameters);
}

uint64_t RunLinkActionParameterConfirmationParameters.parameterValue.getter@<X0>(uint64_t a1@<X8>)
{
  return RunLinkActionActionConfirmationParameters.verb.getter(type metadata accessor for RunLinkActionParameterConfirmationParameters, a1);
}

uint64_t RunLinkActionActionConfirmationParameters.verb.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v2 + *(int *)(v4 + 24), a2, &demangling cache variable for type metadata for SpeakableString?);
}

uint64_t RunLinkActionParameterConfirmationParameters.parameterValue.setter()
{
  return RunLinkActionActionConfirmationParameters.verb.setter();
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *RunLinkActionParameterConfirmationParameters.parameterValue.modify())(Swift::OpaquePointer items)
{
  uint64_t v0 = OUTLINED_FUNCTION_2_34();
  type metadata accessor for RunLinkActionParameterConfirmationParameters(v0);
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t RunLinkActionParameterConfirmationParameters.asKeyValuePairs()()
{
  return RunLinkActionActionConfirmationParameters.asKeyValuePairs()(type metadata accessor for RunLinkActionParameterConfirmationParameters, 0x6574656D61726170, 0xEE0065756C615672);
}

uint64_t RunLinkActionActionConfirmationParameters.asKeyValuePairs()(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  unsigned __int8 v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v23 - v13;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2138B0;
  uint64_t v16 = (uint64_t *)(v15 + 48);
  OUTLINED_FUNCTION_1_14(v15);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v7, (uint64_t)v14, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v17 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v17) == 1)
  {
    outlined destroy of AutoShortcutInvocation?((uint64_t)v14, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)uint64_t v16 = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
  }
  else
  {
    *(void *)(v15 + 72) = v17;
    __swift_allocate_boxed_opaque_existential_1(v16);
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v18 + 32))();
  }
  OUTLINED_FUNCTION_71_8();
  *(void *)(v15 + 80) = v19;
  *(void *)(v15 + 88) = 0x800000000022A4F0;
  uint64_t v20 = a1(0);
  *(unsigned char *)(v15 + 96) = *(unsigned char *)(v7 + *(int *)(v20 + 20));
  *(void *)(v15 + 120) = &type metadata for Bool;
  *(void *)(v15 + 128) = a2;
  *(void *)(v15 + 136) = a3;
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v7 + *(int *)(v20 + 24), (uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v17) == 1)
  {
    outlined destroy of AutoShortcutInvocation?((uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v15 + 144) = 0u;
    *(_OWORD *)(v15 + 160) = 0u;
  }
  else
  {
    *(void *)(v15 + 168) = v17;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v15 + 144));
    OUTLINED_FUNCTION_40();
    (*(void (**)(void))(v21 + 32))();
  }
  return v15;
}

uint64_t RunLinkActionParameterConfirmationParameters.init(customDialog:executeSashGroupOnWatch:parameterValue:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return RunLinkActionActionConfirmationParameters.init(customDialog:executeSashGroupOnWatch:verb:)(a1, a2, a3, type metadata accessor for RunLinkActionParameterConfirmationParameters, a4);
}

uint64_t RunLinkActionActionConfirmationParameters.init(customDialog:executeSashGroupOnWatch:verb:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  outlined init with take of SpeakableString?(a1, a5);
  uint64_t v9 = a4(0);
  *(unsigned char *)(a5 + *(int *)(v9 + 20)) = a2;
  uint64_t v10 = a5 + *(int *)(v9 + 24);

  return outlined init with take of SpeakableString?(a3, v10);
}

uint64_t RunLinkActionParameterValueDisambiguationParameters.executeSashGroupOnWatch.getter()
{
  uint64_t v0 = type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(0);
  return OUTLINED_FUNCTION_39_15(v0);
}

uint64_t type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionParameterValueDisambiguationParameters);
}

uint64_t RunLinkActionParameterValueDisambiguationParameters.items.getter()
{
  type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(0);

  return swift_bridgeObjectRetain();
}

uint64_t RunLinkActionParameterValueDisambiguationParameters.asKeyValuePairs()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  uint64_t v3 = OUTLINED_FUNCTION_16(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_25_8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2138B0;
  unint64_t v5 = (uint64_t *)(v4 + 48);
  OUTLINED_FUNCTION_1_14(v4);
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v0, v1, &demangling cache variable for type metadata for SpeakableString?);
  uint64_t v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_42_18(v6);
  if (v7)
  {
    outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)unint64_t v5 = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
  }
  else
  {
    *(void *)(v4 + 72) = &demangling cache variable for type metadata for SpeakableString?;
    __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_47_13();
    v8();
  }
  OUTLINED_FUNCTION_71_8();
  uint64_t v10 = OUTLINED_FUNCTION_70_7(v9);
  uint64_t v11 = type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(v10);
  *(unsigned char *)(v4 + 96) = *(unsigned char *)(v0 + *(int *)(v11 + 20));
  *(void *)(v4 + 120) = &type metadata for Bool;
  *(void *)(v4 + 128) = 0x736D657469;
  *(void *)(v4 + 136) = 0xE500000000000000;
  uint64_t v12 = *(void *)(v0 + *(int *)(v11 + 24));
  *(void *)(v4 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SpeakableString]);
  *(void *)(v4 + 144) = v12;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t RunLinkActionParameterValueDisambiguationParameters.init(customDialog:executeSashGroupOnWatch:items:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  OUTLINED_FUNCTION_54_7(a1, a3);
  uint64_t result = type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(0);
  *(unsigned char *)(v4 + *(int *)(result + 20)) = v3;
  *(void *)(v4 + *(int *)(result + 24)) = a2;
  return result;
}

uint64_t RunLinkActionCATPatternsExecutor.actionConfirmation(executeSashGroupOnWatch:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_15_30(v1, v2, v3);
  uint64_t v5 = type metadata accessor for RunLinkActionActionConfirmationParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(unint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_27_3();
  uint64_t v11 = v1;
  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = OUTLINED_FUNCTION_66_7();
  uint64_t v3 = OUTLINED_FUNCTION_19_25(v2);
  v0(v3);
  uint64_t v4 = RunLinkActionActionConfirmationParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_58_6(v4);
  uint64_t v5 = OUTLINED_FUNCTION_17_2();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_68_1(v5);
  *uint64_t v6 = v7;
  v6[1] = RunLinkActionCATPatternsExecutor.actionConfirmation(executeSashGroupOnWatch:_:);
  OUTLINED_FUNCTION_20_10();
  uint64_t v8 = OUTLINED_FUNCTION_37_19(32);
  return v9(v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_20_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v0();
}

uint64_t RunLinkActionCATPatternsExecutor.actionPerformed(executeSashGroupOnWatch:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_15_30(v1, v2, v3);
  uint64_t v5 = type metadata accessor for RunLinkActionActionPerformedParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  char v1 = OUTLINED_FUNCTION_28_21();
  uint64_t v2 = OUTLINED_FUNCTION_6_43(v1);
  uint64_t v3 = v0(v2);
  uint64_t v5 = RunLinkActionActionPerformedParameters.asKeyValuePairs()(v3, v4);
  OUTLINED_FUNCTION_58_6(v5);
  uint64_t v6 = OUTLINED_FUNCTION_59();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_68_1(v6);
  *uint64_t v7 = v8;
  v7[1] = RunLinkActionCATPatternsExecutor.actionPerformed(executeSashGroupOnWatch:_:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_44_15(29);
  OUTLINED_FUNCTION_23_1();
  return v12(v9, v10, v11, v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_20_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v0();
}

uint64_t outlined destroy of RunLinkActionActionConfirmationParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_2_34();
  v2(v1);
  OUTLINED_FUNCTION_40();
  (*(void (**)(uint64_t))(v3 + 8))(v0);
  return v0;
}

uint64_t RunLinkActionCATPatternsExecutor.actionPerformedUseSonicStatus(executeSashGroupOnWatch:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_15_30(v1, v2, v3);
  uint64_t v5 = type metadata accessor for RunLinkActionActionPerformedUseSonicStatusParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  char v1 = OUTLINED_FUNCTION_28_21();
  uint64_t v2 = OUTLINED_FUNCTION_6_43(v1);
  uint64_t v3 = v0(v2);
  uint64_t v5 = RunLinkActionActionPerformedUseSonicStatusParameters.asKeyValuePairs()(v3, v4);
  OUTLINED_FUNCTION_58_6(v5);
  uint64_t v6 = OUTLINED_FUNCTION_59();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_68_1(v6);
  *uint64_t v7 = v8;
  v7[1] = RunLinkActionCATPatternsExecutor.actionPerformedUseSonicStatus(executeSashGroupOnWatch:_:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_44_15(43);
  OUTLINED_FUNCTION_23_1();
  return v12(v9, v10, v11, v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_20_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v0();
}

uint64_t RunLinkActionCATPatternsExecutor.autoShortcutAppEnabled(executeSashGroupOnWatch:wasAlreadyEnabled:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v5 = OUTLINED_FUNCTION_59_9(v1, v2, v3, v4);
  uint64_t v6 = type metadata accessor for RunLinkActionAutoShortcutAppEnabledParameters(v5);
  *(void *)(v0 + 40) = v6;
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  int *v1;
  void (*v2)(uint64_t);
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(unint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_27_3();
  uint64_t v14 = v5;
  OUTLINED_FUNCTION_21_0();
  uint64_t v6 = OUTLINED_FUNCTION_51_12();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v6);
  *(void *)(v0 + v1[5]) = 0;
  *(unsigned char *)(v0 + v1[6]) = v4;
  *(unsigned char *)(v0 + v1[7]) = v3;
  v2(v0);
  uint64_t v7 = RunLinkActionAutoShortcutAppEnabledParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_58_6((uint64_t)v7);
  uint64_t v8 = OUTLINED_FUNCTION_17_2();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_68_1(v8);
  *uint64_t v9 = v10;
  v9[1] = RunLinkActionCATPatternsExecutor.autoShortcutAppEnabled(executeSashGroupOnWatch:wasAlreadyEnabled:_:);
  OUTLINED_FUNCTION_20_10();
  uint64_t v11 = OUTLINED_FUNCTION_37_19(36);
  return v12(v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_20_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v0();
}

uint64_t RunLinkActionCATPatternsExecutor.autoShortcutFirstRun(executeSashGroupOnWatch:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_15_30(v1, v2, v3);
  uint64_t RunParameters = type metadata accessor for RunLinkActionAutoShortcutFirstRunParameters(v4);
  *(void *)(v0 + 40) = RunParameters;
  OUTLINED_FUNCTION_16(RunParameters);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t Run;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  char v1 = OUTLINED_FUNCTION_28_21();
  uint64_t v2 = OUTLINED_FUNCTION_6_43(v1);
  v0(v2);
  Run = RunLinkActionAutoShortcutFirstRunParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_58_6(Run);
  uint64_t v4 = OUTLINED_FUNCTION_59();
  uint64_t v5 = (void *)OUTLINED_FUNCTION_68_1(v4);
  *uint64_t v5 = v6;
  v5[1] = RunLinkActionCATPatternsExecutor.autoShortcutFirstRun(executeSashGroupOnWatch:_:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_44_15(34);
  OUTLINED_FUNCTION_23_1();
  return v10(v7, v8, v9, v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_20_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v0();
}

uint64_t RunLinkActionCATPatternsExecutor.confirmChangeEnablement(executeSashGroupOnWatch:isEnabling:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v5 = OUTLINED_FUNCTION_59_9(v1, v2, v3, v4);
  uint64_t v6 = type metadata accessor for RunLinkActionConfirmChangeEnablementParameters(v5);
  *(void *)(v0 + 40) = v6;
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(unint64_t);
  uint64_t v14;

  OUTLINED_FUNCTION_27_3();
  uint64_t v14 = v5;
  OUTLINED_FUNCTION_21_0();
  uint64_t v6 = OUTLINED_FUNCTION_51_12();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v6);
  *(unsigned char *)(v0 + *(int *)(v1 + 20)) = v4;
  *(unsigned char *)(v0 + *(int *)(v1 + 24)) = v3;
  v2(v0);
  uint64_t v7 = RunLinkActionConfirmChangeEnablementParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_58_6((uint64_t)v7);
  uint64_t v8 = OUTLINED_FUNCTION_17_2();
  uint64_t v9 = (void *)OUTLINED_FUNCTION_68_1(v8);
  *uint64_t v9 = v10;
  v9[1] = RunLinkActionCATPatternsExecutor.confirmChangeEnablement(executeSashGroupOnWatch:isEnabling:_:);
  OUTLINED_FUNCTION_20_10();
  uint64_t v11 = OUTLINED_FUNCTION_37_19(37);
  return v12(v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_20_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v0();
}

uint64_t RunLinkActionCATPatternsExecutor.continueInApp(executeSashGroupOnWatch:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_15_30(v1, v2, v3);
  uint64_t v5 = type metadata accessor for RunLinkActionContinueInAppParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  char v1 = OUTLINED_FUNCTION_28_21();
  uint64_t v2 = OUTLINED_FUNCTION_6_43(v1);
  uint64_t v3 = v0(v2);
  uint64_t v5 = RunLinkActionContinueInAppParameters.asKeyValuePairs()(v3, v4);
  OUTLINED_FUNCTION_58_6(v5);
  uint64_t v6 = OUTLINED_FUNCTION_59();
  uint64_t v7 = (void *)OUTLINED_FUNCTION_68_1(v6);
  *uint64_t v7 = v8;
  v7[1] = RunLinkActionCATPatternsExecutor.continueInApp(executeSashGroupOnWatch:_:);
  OUTLINED_FUNCTION_20_10();
  OUTLINED_FUNCTION_44_15(27);
  OUTLINED_FUNCTION_23_1();
  return v12(v9, v10, v11, v12, v13, v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_20_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v0();
}

uint64_t RunLinkActionCATPatternsExecutor.parameterConfirmation(executeSashGroupOnWatch:_:)()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_15_30(v1, v2, v3);
  uint64_t v5 = type metadata accessor for RunLinkActionParameterConfirmationParameters(v4);
  *(void *)(v0 + 40) = v5;
  OUTLINED_FUNCTION_16(v5);
  *(void *)(v0 + 48) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(unint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_27_3();
  uint64_t v11 = v1;
  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = OUTLINED_FUNCTION_66_7();
  uint64_t v3 = OUTLINED_FUNCTION_19_25(v2);
  v0(v3);
  uint64_t v4 = RunLinkActionParameterConfirmationParameters.asKeyValuePairs()();
  OUTLINED_FUNCTION_58_6(v4);
  uint64_t v5 = OUTLINED_FUNCTION_17_2();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_68_1(v5);
  *uint64_t v6 = v7;
  v6[1] = RunLinkActionCATPatternsExecutor.parameterConfirmation(executeSashGroupOnWatch:_:);
  OUTLINED_FUNCTION_20_10();
  uint64_t v8 = OUTLINED_FUNCTION_37_19(35);
  return v9(v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 80) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v0 = OUTLINED_FUNCTION_20_31();
  return v1(v0);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61_2();
  return v0();
}

uint64_t RunLinkActionCATPatternsExecutor.parameterValueDisambiguation(executeSashGroupOnWatch:items:_:)()
{
  OUTLINED_FUNCTION_9_0();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v0;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(unsigned char *)(v1 + 96) = v5;
  uint64_t v6 = type metadata accessor for RunLinkActionParameterValueDisambiguationParameters(0);
  *(void *)(v1 + 48) = v6;
  OUTLINED_FUNCTION_16(v6);
  *(void *)(v1 + 56) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t (*v10)(unint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_27_3();
  uint64_t v12 = v1;
  OUTLINED_FUNCTION_21_0();
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = *(void (**)(uint64_t))(v0 + 24);
  char v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(unsigned char *)(v0 + 96);
  uint64_t v7 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v2, 1, 1, v7);
  *(unsigned char *)(v2 + *(int *)(v3 + 20)) = v6;
  *(void *)(v2 + *(int *)(v3 + 24)) = v5;
  swift_bridgeObjectRetain();
  v4(v2);
  *(void *)(v0 + 64) = RunLinkActionParameterValueDisambiguationParameters.asKeyValuePairs()();
  uint64_t v8 = (void *)OUTLINED_FUNCTION_17_2();
  *(void *)(v0 + 72) = v8;
  *uint64_t v8 = v0;
  v8[1] = RunLinkActionCATPatternsExecutor.parameterValueDisambiguation(executeSashGroupOnWatch:items:_:);
  OUTLINED_FUNCTION_20_10();
  uint64_t v9 = OUTLINED_FUNCTION_37_19(42);
  return v10(v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  char v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 88) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_23_1();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 88);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();
  outlined destroy of RunLinkActionActionConfirmationParameters();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RunLinkActionCATPatternsExecutor.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  return RunLinkActionCATPatternsExecutor.init(templateDir:options:globals:)(a1, a2);
}

uint64_t RunLinkActionCATPatternsExecutor.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_2_34();
  uint64_t v4 = type metadata accessor for CATOption();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_20_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  uint64_t v10 = OUTLINED_FUNCTION_16(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_0();
  _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v2, v12 - v11, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  uint64_t v13 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of AutoShortcutInvocation?(v2, (uint64_t *)&demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_36_3();
  v4();
  return a2;
}

unint64_t lazy protocol witness table accessor for type RunLinkActionCATPatternsIdentifiers and conformance RunLinkActionCATPatternsIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type RunLinkActionCATPatternsIdentifiers and conformance RunLinkActionCATPatternsIdentifiers;
  if (!lazy protocol witness table cache variable for type RunLinkActionCATPatternsIdentifiers and conformance RunLinkActionCATPatternsIdentifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLinkActionCATPatternsIdentifiers and conformance RunLinkActionCATPatternsIdentifiers);
  }
  return result;
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**v3
                                                                      + class metadata base offset for RunLinkActionCATPatternsExecutor)
                                                          + **(int **)(**v3
                                                                     + class metadata base offset for RunLinkActionCATPatternsExecutor));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.actionPerformed(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 8);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.actionPerformedUseSonicStatus(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 16);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.autoShortcutAppEnabled(executeSashGroupOnWatch:wasAlreadyEnabled:_:) in conformance RunLinkActionCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v4 + 24);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor;
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.autoShortcutFirstRun(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 32);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance CustomIntentRCHFlowStrategy;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.confirmChangeEnablement(executeSashGroupOnWatch:isEnabling:_:) in conformance RunLinkActionCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v4 + 40);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor;
  return v13(a1, a2, a3, a4);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.continueInApp(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 48);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.parameterConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v3 + 56);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor;
  return v11(a1, a2, a3);
}

uint64_t protocol witness for RunLinkActionCATPatternsExecuting.parameterValueDisambiguation(executeSashGroupOnWatch:items:_:) in conformance RunLinkActionCATPatternsExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(int **)(class metadata base offset for RunLinkActionCATPatternsExecutor + **v4 + 64);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for RunLinkActionCATPatternsExecuting.actionConfirmation(executeSashGroupOnWatch:_:) in conformance RunLinkActionCATPatternsExecutor;
  return v13(a1, a2, a3, a4);
}

unsigned char *storeEnumTagSinglePayload for RunLinkActionCATPatternsIdentifiers(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CAA08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RunLinkActionCATPatternsIdentifiers()
{
  return &type metadata for RunLinkActionCATPatternsIdentifiers;
}

uint64_t getEnumTagSinglePayload for RunLinkActionActionConfirmationParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionActionConfirmationParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t getEnumTagSinglePayload for RunLinkActionActionPerformedParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_0);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionActionPerformedParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_0);
}

uint64_t getEnumTagSinglePayload for RunLinkActionActionPerformedUseSonicStatusParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_1);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionActionPerformedUseSonicStatusParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_1);
}

uint64_t *initializeBufferWithCopyOfBuffer for RunLinkActionAutoShortcutAppEnabledParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for RunLinkActionAutoShortcutAppEnabledParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }

  return swift_release();
}

char *initializeWithCopy for RunLinkActionAutoShortcutAppEnabledParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v8] = a2[v8];
  a1[a3[7]] = a2[a3[7]];
  swift_retain();
  return a1;
}

char *assignWithCopy for RunLinkActionAutoShortcutAppEnabledParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *initializeWithTake for RunLinkActionAutoShortcutAppEnabledParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v8] = a2[v8];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *assignWithTake for RunLinkActionAutoShortcutAppEnabledParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  uint64_t v11 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  a1[v11] = a2[v11];
  return a1;
}

uint64_t getEnumTagSinglePayload for RunLinkActionAutoShortcutAppEnabledParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CB1CC);
}

uint64_t sub_1CB1CC()
{
  OUTLINED_FUNCTION_55_9();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_0_37();
  if (*(_DWORD *)(v1 + 84) == v0)
  {
    uint64_t v2 = OUTLINED_FUNCTION_60_7();
    return __swift_getEnumTagSinglePayload(v2, v3, v4);
  }
  else
  {
    OUTLINED_FUNCTION_68_6();
    int v7 = v6 - 1;
    if (v7 < 0) {
      int v7 = -1;
    }
    return (v7 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for RunLinkActionAutoShortcutAppEnabledParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CB264);
}

void sub_1CB264()
{
  OUTLINED_FUNCTION_46_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_0_37();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_43_10();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 20)) = v0;
  }
}

void type metadata completion function for RunLinkActionAutoShortcutAppEnabledParameters()
{
  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for RunLinkActionAutoShortcutFirstRunParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_2);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionAutoShortcutFirstRunParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_2);
}

uint64_t *initializeBufferWithCopyOfBuffer for RunLinkActionConfirmChangeEnablementParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  }
  return a1;
}

void *initializeWithCopy for RunLinkActionConfirmChangeEnablementParameters(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  return a1;
}

void *assignWithCopy for RunLinkActionConfirmChangeEnablementParameters(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *initializeWithTake for RunLinkActionConfirmChangeEnablementParameters(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  return a1;
}

void *assignWithTake for RunLinkActionConfirmChangeEnablementParameters(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RunLinkActionConfirmChangeEnablementParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_3);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionConfirmChangeEnablementParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_3);
}

void type metadata completion function for RunLinkActionConfirmChangeEnablementParameters()
{
}

{
  uint64_t v0;
  unint64_t v1;

  type metadata accessor for SpeakableString?();
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_13_38(v0);
    OUTLINED_FUNCTION_67_9();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for RunLinkActionActionPerformedParameters(uint64_t a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_0_37();
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_52_11(*a2);
  }
  else
  {
    uint64_t v6 = v4;
    type metadata accessor for SpeakableString();
    if (OUTLINED_FUNCTION_33_20())
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v8 = OUTLINED_FUNCTION_16(v7);
      OUTLINED_FUNCTION_58_11(v8, v10, *(void *)(v9 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_36_3();
      v11();
      OUTLINED_FUNCTION_21_27();
    }
    *(unsigned char *)(a1 + *(int *)(v6 + 20)) = *((unsigned char *)a2 + *(int *)(v6 + 20));
  }
  return a1;
}

uint64_t destroy for RunLinkActionActionPerformedParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString();
  uint64_t result = __swift_getEnumTagSinglePayload(a1, 1, v2);
  if (!result)
  {
    OUTLINED_FUNCTION_40();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    return v5(a1, v2);
  }
  return result;
}

uint64_t initializeWithCopy for RunLinkActionActionPerformedParameters()
{
  OUTLINED_FUNCTION_29_23();
  if (OUTLINED_FUNCTION_33_20())
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v1 = OUTLINED_FUNCTION_16(v0);
    OUTLINED_FUNCTION_58_11(v1, v3, *(void *)(v2 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_36_3();
    v4();
    OUTLINED_FUNCTION_21_27();
  }
  return OUTLINED_FUNCTION_27_28();
}

uint64_t assignWithCopy for RunLinkActionActionPerformedParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_29_23();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v1);
  int v3 = OUTLINED_FUNCTION_33_20();
  if (!EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_0_37();
    if (!v5)
    {
      uint64_t v13 = OUTLINED_FUNCTION_69_8();
      v14(v13);
      return OUTLINED_FUNCTION_27_28();
    }
    uint64_t v6 = OUTLINED_FUNCTION_63_6();
    v7(v6);
    goto LABEL_6;
  }
  if (v3)
  {
LABEL_6:
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v9 = OUTLINED_FUNCTION_16(v8);
    OUTLINED_FUNCTION_58_11(v9, v11, *(void *)(v10 + 64));
    return OUTLINED_FUNCTION_27_28();
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_36_3();
  v4();
  OUTLINED_FUNCTION_21_27();
  return OUTLINED_FUNCTION_27_28();
}

uint64_t initializeWithTake for RunLinkActionActionPerformedParameters()
{
  OUTLINED_FUNCTION_29_23();
  if (OUTLINED_FUNCTION_33_20())
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v1 = OUTLINED_FUNCTION_16(v0);
    OUTLINED_FUNCTION_58_11(v1, v3, *(void *)(v2 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_40();
    uint64_t v4 = OUTLINED_FUNCTION_57_6();
    v5(v4);
    OUTLINED_FUNCTION_21_27();
  }
  return OUTLINED_FUNCTION_27_28();
}

uint64_t assignWithTake for RunLinkActionActionPerformedParameters()
{
  uint64_t v1 = OUTLINED_FUNCTION_29_23();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v1);
  int v3 = OUTLINED_FUNCTION_33_20();
  if (!EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_0_37();
    if (!v6)
    {
      uint64_t v14 = OUTLINED_FUNCTION_69_8();
      v15(v14);
      return OUTLINED_FUNCTION_27_28();
    }
    uint64_t v7 = OUTLINED_FUNCTION_63_6();
    v8(v7);
    goto LABEL_6;
  }
  if (v3)
  {
LABEL_6:
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v10 = OUTLINED_FUNCTION_16(v9);
    OUTLINED_FUNCTION_58_11(v10, v12, *(void *)(v11 + 64));
    return OUTLINED_FUNCTION_27_28();
  }
  OUTLINED_FUNCTION_40();
  uint64_t v4 = OUTLINED_FUNCTION_57_6();
  v5(v4);
  OUTLINED_FUNCTION_21_27();
  return OUTLINED_FUNCTION_27_28();
}

uint64_t getEnumTagSinglePayload for RunLinkActionContinueInAppParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_4);
}

uint64_t storeEnumTagSinglePayload for RunLinkActionContinueInAppParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_4);
}

void type metadata completion function for RunLinkActionActionPerformedParameters()
{
  type metadata accessor for SpeakableString?();
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_13_38(v0);
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for RunLinkActionActionConfirmationParameters(uint64_t a1, uint64_t *a2)
{
  OUTLINED_FUNCTION_0_37();
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_52_11(*a2);
  }
  else
  {
    uint64_t v6 = v4;
    type metadata accessor for SpeakableString();
    if (OUTLINED_FUNCTION_12_42())
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v8 = OUTLINED_FUNCTION_16(v7);
      OUTLINED_FUNCTION_56_7(v8, v10, *(void *)(v9 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_16_29();
      v11();
      OUTLINED_FUNCTION_4_38(a1);
    }
    uint64_t v12 = *(int *)(v6 + 24);
    *(unsigned char *)(a1 + *(int *)(v6 + 20)) = *((unsigned char *)a2 + *(int *)(v6 + 20));
    uint64_t v13 = a1 + v12;
    if (OUTLINED_FUNCTION_12_42())
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      uint64_t v15 = OUTLINED_FUNCTION_16(v14);
      OUTLINED_FUNCTION_29_21(v15, v17, *(void *)(v16 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_16_29();
      v18();
      OUTLINED_FUNCTION_4_38(v13);
    }
  }
  return a1;
}

uint64_t destroy for RunLinkActionActionConfirmationParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4))
  {
    OUTLINED_FUNCTION_40();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t result = __swift_getEnumTagSinglePayload(v6, 1, v4);
  if (!result)
  {
    OUTLINED_FUNCTION_40();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v9(v6, v4);
  }
  return result;
}

uint64_t initializeWithCopy for RunLinkActionActionConfirmationParameters()
{
  OUTLINED_FUNCTION_30_21();
  if (OUTLINED_FUNCTION_12_42())
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v4 = OUTLINED_FUNCTION_16(v3);
    OUTLINED_FUNCTION_56_7(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_16_29();
    v7();
    OUTLINED_FUNCTION_4_38(v0);
  }
  uint64_t v8 = *(int *)(v2 + 24);
  *(unsigned char *)(v0 + *(int *)(v2 + 20)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
  uint64_t v9 = v0 + v8;
  if (OUTLINED_FUNCTION_12_42())
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v11 = OUTLINED_FUNCTION_16(v10);
    OUTLINED_FUNCTION_29_21(v11, v13, *(void *)(v12 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_16_29();
    v14();
    OUTLINED_FUNCTION_4_38(v9);
  }
  return v0;
}

uint64_t assignWithCopy for RunLinkActionActionConfirmationParameters()
{
  uint64_t v3 = OUTLINED_FUNCTION_30_21();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v3);
  int v5 = OUTLINED_FUNCTION_12_42();
  if (EnumTagSinglePayload)
  {
    if (!v5)
    {
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_16_29();
      v6();
      OUTLINED_FUNCTION_4_38(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_0_37();
  if (v7)
  {
    uint64_t v8 = OUTLINED_FUNCTION_64_6();
    v9(v8);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v11 = OUTLINED_FUNCTION_16(v10);
    OUTLINED_FUNCTION_56_7(v11, v13, *(void *)(v12 + 64));
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_61_7();
  v26();
LABEL_7:
  *(unsigned char *)(v0 + *(int *)(v2 + 20)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
  uint64_t v14 = v0 + *(int *)(v2 + 24);
  int v15 = __swift_getEnumTagSinglePayload(v14, 1, v3);
  int v16 = OUTLINED_FUNCTION_12_42();
  if (!v15)
  {
    OUTLINED_FUNCTION_0_37();
    if (!v18)
    {
      OUTLINED_FUNCTION_61_7();
      v27();
      return v0;
    }
    uint64_t v19 = OUTLINED_FUNCTION_34_15();
    v20(v19);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v22 = OUTLINED_FUNCTION_16(v21);
    OUTLINED_FUNCTION_29_21(v22, v24, *(void *)(v23 + 64));
    return v0;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_16_29();
  v17();
  OUTLINED_FUNCTION_4_38(v14);
  return v0;
}

uint64_t initializeWithTake for RunLinkActionActionConfirmationParameters()
{
  OUTLINED_FUNCTION_30_21();
  if (OUTLINED_FUNCTION_12_42())
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v4 = OUTLINED_FUNCTION_16(v3);
    OUTLINED_FUNCTION_56_7(v4, v6, *(void *)(v5 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_26_25();
    v7();
    OUTLINED_FUNCTION_4_38(v0);
  }
  uint64_t v8 = *(int *)(v2 + 24);
  *(unsigned char *)(v0 + *(int *)(v2 + 20)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
  uint64_t v9 = v0 + v8;
  if (OUTLINED_FUNCTION_12_42())
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v11 = OUTLINED_FUNCTION_16(v10);
    OUTLINED_FUNCTION_29_21(v11, v13, *(void *)(v12 + 64));
  }
  else
  {
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_26_25();
    v14();
    OUTLINED_FUNCTION_4_38(v9);
  }
  return v0;
}

uint64_t assignWithTake for RunLinkActionActionConfirmationParameters()
{
  uint64_t v3 = OUTLINED_FUNCTION_30_21();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v0, 1, v3);
  int v5 = OUTLINED_FUNCTION_12_42();
  if (EnumTagSinglePayload)
  {
    if (!v5)
    {
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_26_25();
      v6();
      OUTLINED_FUNCTION_4_38(v0);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_0_37();
  if (v7)
  {
    uint64_t v8 = OUTLINED_FUNCTION_64_6();
    v9(v8);
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v11 = OUTLINED_FUNCTION_16(v10);
    OUTLINED_FUNCTION_56_7(v11, v13, *(void *)(v12 + 64));
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_62_8();
  v27();
LABEL_7:
  uint64_t v14 = *(int *)(v2 + 24);
  *(unsigned char *)(v0 + *(int *)(v2 + 20)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
  uint64_t v15 = v0 + v14;
  int v16 = __swift_getEnumTagSinglePayload(v0 + v14, 1, v3);
  int v17 = OUTLINED_FUNCTION_12_42();
  if (!v16)
  {
    OUTLINED_FUNCTION_0_37();
    if (!v19)
    {
      OUTLINED_FUNCTION_62_8();
      v28();
      return v0;
    }
    uint64_t v20 = OUTLINED_FUNCTION_34_15();
    v21(v20);
    goto LABEL_12;
  }
  if (v17)
  {
LABEL_12:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    uint64_t v23 = OUTLINED_FUNCTION_16(v22);
    OUTLINED_FUNCTION_29_21(v23, v25, *(void *)(v24 + 64));
    return v0;
  }
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_26_25();
  v18();
  OUTLINED_FUNCTION_4_38(v15);
  return v0;
}

uint64_t getEnumTagSinglePayload for RunLinkActionParameterConfirmationParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CC560);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0()
{
  OUTLINED_FUNCTION_55_9();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_0_37();
  if (*(_DWORD *)(v3 + 84) == v1)
  {
    uint64_t v4 = OUTLINED_FUNCTION_60_7();
    return __swift_getEnumTagSinglePayload(v4, v5, v6);
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 20));
    if (v8 >= 2) {
      return ((v8 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for RunLinkActionParameterConfirmationParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CC60C);
}

void __swift_store_extra_inhabitant_indexTm_0()
{
  OUTLINED_FUNCTION_46_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_0_37();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_43_10();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v0 + 1;
  }
}

void type metadata completion function for RunLinkActionActionConfirmationParameters()
{
  type metadata accessor for SpeakableString?();
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_13_38(v0);
    OUTLINED_FUNCTION_67_9();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for RunLinkActionParameterValueDisambiguationParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for RunLinkActionParameterValueDisambiguationParameters(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpeakableString();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for RunLinkActionParameterValueDisambiguationParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for RunLinkActionParameterValueDisambiguationParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for RunLinkActionParameterValueDisambiguationParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  return a1;
}

char *assignWithTake for RunLinkActionParameterValueDisambiguationParameters(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SpeakableString();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  int v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RunLinkActionParameterValueDisambiguationParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CCD78);
}

uint64_t sub_1CCD78()
{
  OUTLINED_FUNCTION_55_9();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_0_37();
  if (*(_DWORD *)(v1 + 84) == v0)
  {
    uint64_t v2 = OUTLINED_FUNCTION_60_7();
    return __swift_getEnumTagSinglePayload(v2, v3, v4);
  }
  else
  {
    OUTLINED_FUNCTION_68_6();
    return (v6 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for RunLinkActionParameterValueDisambiguationParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CCE04);
}

void sub_1CCE04()
{
  OUTLINED_FUNCTION_46_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_0_37();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_43_10();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 24)) = (v0 - 1);
  }
}

void type metadata completion function for RunLinkActionParameterValueDisambiguationParameters()
{
}

uint64_t type metadata accessor for RunLinkActionCATPatternsExecutor(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for RunLinkActionCATPatternsExecutor);
}

uint64_t type metadata completion function for RunLinkActionCATPatternsExecutor()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for RunLinkActionCATPatternsExecutor()
{
  return type metadata accessor for RunLinkActionCATPatternsExecutor(0);
}

uint64_t OUTLINED_FUNCTION_2_54(uint64_t a1)
{
  return outlined assign with take of SpeakableString?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_6_43(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v3;
  return v1;
}

uint64_t OUTLINED_FUNCTION_8_35(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return RunLinkActionActionPerformedParameters.asKeyValuePairs()(0x69446D6F74737563, 0xEC000000676F6C61, a3);
}

uint64_t OUTLINED_FUNCTION_12_42()
{
  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_13_38(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_19_25(uint64_t a1)
{
  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  __swift_storeEnumTagSinglePayload(v1 + *(int *)(v2 + 24), 1, 1, a1);
  *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v3;
  return v1;
}

uint64_t OUTLINED_FUNCTION_21_27()
{
  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_23_29(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x656D614E707061;
  a1[2].n128_u64[1] = 0xE700000000000000;
  return _s16SiriDialogEngine15SpeakableStringVSgWOcTm_0(v2, v3, v4);
}

uint64_t OUTLINED_FUNCTION_27_28()
{
  *(unsigned char *)(v0 + *(int *)(v2 + 20)) = *(unsigned char *)(v1 + *(int *)(v2 + 20));
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_21()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_29_23()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_30_21()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_33_20()
{
  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_34_16()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_37_19(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_39_15(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 20));
}

uint64_t OUTLINED_FUNCTION_42_18(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_43_10()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_44_15(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_51_12()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_52_11(uint64_t a1)
{
  *uint64_t v1 = a1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_54_7@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of SpeakableString?(a1, a2);
}

void *OUTLINED_FUNCTION_56_7(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_57_6()
{
  return v0;
}

void *OUTLINED_FUNCTION_58_11(uint64_t a1, uint64_t a2, size_t a3)
{
  return memcpy(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_59_9(char a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 16) = a3;
  *(unsigned char *)(v5 + 89) = a2;
  *(unsigned char *)(v5 + 88) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_60_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_63_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_64_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_66_7()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_67_9()
{
  return swift_initStructMetadata();
}

uint64_t OUTLINED_FUNCTION_69_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_70_7@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = (v1 - 32) | 0x8000000000000000;
  return 0;
}

uint64_t WorkflowDataModels.EnableTCCModel.asSnippetPluginModel()@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  OUTLINED_FUNCTION_61_8();
  swift_storeEnumTagMultiPayload();
  long long v3 = *v1;
  long long v6 = v1[1];
  long long v7 = v3;
  _sSSSgWObTm_1((uint64_t)(v1 + 2), (uint64_t)v5, &demangling cache variable for type metadata for String?);
  outlined retain of String?((uint64_t)&v7);
  outlined retain of String?((uint64_t)&v6);
  return outlined retain of String?((uint64_t)v5);
}

uint64_t type metadata accessor for WorkflowDataModels(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels);
}

uint64_t static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:)()
{
  OUTLINED_FUNCTION_9_0();
  *(unsigned char *)(v0 + 216) = v22;
  *(void *)(v0 + 96) = v21;
  *(_OWORD *)(v0 + 64) = v19;
  *(_OWORD *)(v0 + 80) = v20;
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v4;
  *(void *)(v0 + 16) = v5;
  *(void *)(v0 + 24) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  OUTLINED_FUNCTION_16(v7);
  *(void *)(v0 + 104) = swift_task_alloc();
  *(void *)(v0 + 112) = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_16(v8);
  *(void *)(v0 + 120) = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for CodableINInteraction();
  *(void *)(v0 + 128) = v9;
  OUTLINED_FUNCTION_1_0(v9);
  *(void *)(v0 + 136) = v10;
  *(void *)(v0 + 144) = OUTLINED_FUNCTION_25();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  *(void *)(v0 + 152) = v11;
  OUTLINED_FUNCTION_1_0(v11);
  *(void *)(v0 + 160) = v12;
  *(void *)(v0 + 168) = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  *(void *)(v0 + 176) = v13;
  OUTLINED_FUNCTION_16(v13);
  *(void *)(v0 + 184) = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  Class isa;
  id v15;
  objc_class *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  INIntentResponse_optional v20;

  if (OUTLINED_FUNCTION_129_1(*(void **)(v0 + 56)))
  {
    uint64_t v1 = *(uint64_t **)(v0 + 16);
    uint64_t v2 = [*(id *)(v0 + 32) _title];
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    v1[3] = (uint64_t)&type metadata for WorkflowDataModels.WatchModel;
    v1[4] = (uint64_t)&protocol witness table for WorkflowDataModels.WatchModel;
    uint64_t v6 = swift_allocObject();
    *uint64_t v1 = v6;
    *(void *)(v6 + 16) = v3;
    *(void *)(v6 + 24) = v5;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v7();
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 32);
    uint64_t v9 = *(void **)(v0 + 40);
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
    uint64_t v11 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
    *(void *)(v0 + 192) = v11;
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for INInteraction);
    uint64_t v12 = v10;
    uint64_t v13 = v9;
    v20.value.super.Class isa = (Class)v9;
    Class isa = INInteraction.__allocating_init(intent:response:)((INIntent)v12, v20).super.isa;
    *(void *)(v0 + 200) = isa;
    uint64_t v15 = v11;
    CodableAceObject.init(wrappedValue:)();
    uint64_t v16 = isa;
    CodableINInteraction.init(wrappedValue:)();
    int v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v17;
    *int v17 = v0;
    v17[1] = static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:);
    uint64_t v18 = *(void *)(v0 + 120);
    return INImage.convertToVisualProperty()(v18);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v0, v1, v2);
}

void static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:)()
{
  uint64_t v2 = *(int **)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v29 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 160) + 32))(v1, *(void *)(v0 + 168), *(void *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v1 + v2[5], v3, v4);
  _sSSSgWObTm_1(v6, v1 + v2[6], &demangling cache variable for type metadata for VisualProperty?);
  uint64_t v10 = (void *)(v1 + v2[7]);
  *uint64_t v10 = v9;
  v10[1] = v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v11);
  uint64_t v13 = *(void **)(v0 + 192);
  uint64_t v12 = *(void **)(v0 + 200);
  if (v29)
  {
    uint64_t v15 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v16 = *(void **)(v0 + 48);
    type metadata accessor for NSError(0, &lazy cache variable for type metadata for SAStartLocalRequest);
    swift_bridgeObjectRetain();
    id v17 = v16;
    CodableAceObject.init(wrappedValue:)();

    outlined destroy of SiriWorkflowRunnerEvent?(v14, &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    __swift_storeEnumTagSinglePayload(v15, 0, 1, v11);
    _sSSSgWObTm_1(v15, v14, &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v18 = *(void *)(v0 + 184);
  uint64_t v19 = *(void *)(v0 + 112);
  char v20 = *(unsigned char *)(v0 + 216);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v21 = *(void *)(v0 + 96);
  uint64_t v23 = *(uint64_t **)(v0 + 16);
  uint64_t v24 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  v23[3] = (uint64_t)v24;
  v23[4] = (uint64_t)&protocol witness table for WorkflowDataModels.CustomIntentHandledModel;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
  outlined init with take of WorkflowDataModels.CustomIntentModel(v18, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  uint64_t v26 = (uint64_t *)((char *)boxed_opaque_existential_1 + v24[5]);
  *uint64_t v26 = v22;
  v26[1] = v21;
  _sSSSgWObTm_1(v19, (uint64_t)boxed_opaque_existential_1 + v24[6], &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  *((unsigned char *)boxed_opaque_existential_1 + v24[7]) = v20;
  swift_bridgeObjectRetain();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_28_0();
  __asm { BRAA            X1, X16 }
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentModel);
}

INInteraction __swiftcall INInteraction.__allocating_init(intent:response:)(INIntent intent, INIntentResponse_optional response)
{
  Class isa = response.value.super.isa;
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithIntent:intent.super.isa response:response.value.super.isa];

  return (INInteraction)v4;
}

uint64_t WorkflowDataModels.ConfirmActionModel.init(appBundleId:appDisplayName:confirmLabel:noLabel:archivedViewData:isDestructive:prompt:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  *(unsigned char *)(a9 + 80) = a12;
  *(void *)(a9 + 88) = a13;
  *(void *)(a9 + 96) = a14;
  return result;
}

uint64_t WorkflowDataModels.ConfirmActionModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_101_1(a1);
  memcpy(v2, v3, 0x68uLL);
  OUTLINED_FUNCTION_61_8();
  swift_storeEnumTagMultiPayload();

  return outlined retain of WorkflowDataModels.ConfirmActionModel(v1);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.__allocating_init(title:subtitle:thumbnail:invocationCommand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17 = swift_allocObject();
  WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

uint64_t WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()(a1, a2, a3, a4);
}

{
  uint64_t vars8;

  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  type metadata accessor for WorkflowDataModels(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.init(openAppButtonLabel:appPunchOut:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_6();
  uint64_t v5 = OUTLINED_FUNCTION_132_1();

  return v6(v5, a3);
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()()
{
  return WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_132_1();
  outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(v0, v2, v1);
  type metadata accessor for WorkflowDataModels(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t WorkflowDataModels.LinkActionModel.asSnippetPluginModel()@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.LinkActionModel.asSnippetPluginModel()((uint64_t (*)(_OWORD *))outlined retain of WorkflowDataModels.LinkActionModel, a1);
}

uint64_t static WorkflowDataModels.modelForShowAlert(deviceState:shortcutName:confirmLabel:cancelLabel:title:message:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, __n128 a9, unint64_t a10)
{
  OUTLINED_FUNCTION_128_2(a1, a2, a3, a4, a5, a6, a7, a8, a10, a9);
  OUTLINED_FUNCTION_10_0();
  return OUTLINED_FUNCTION_135(v10, v11, v12);
}

uint64_t static WorkflowDataModels.modelForShowAlert(deviceState:shortcutName:confirmLabel:cancelLabel:title:message:)()
{
  if (OUTLINED_FUNCTION_129_1(*(void **)(v0 + 24)))
  {
    uint64_t v2 = *(void *)(v0 + 64);
    uint64_t v1 = *(void *)(v0 + 72);
    long long v12 = *(_OWORD *)(v0 + 32);
    long long v14 = *(_OWORD *)(v0 + 48);
    uint64_t v3 = *(uint64_t **)(v0 + 16);
    v3[3] = (uint64_t)&type metadata for WorkflowDataModels.WatchModel;
    v3[4] = (uint64_t)&protocol witness table for WorkflowDataModels.WatchModel;
    uint64_t v4 = swift_allocObject();
    *uint64_t v3 = v4;
    *(_OWORD *)(v4 + 16) = v12;
    *(_OWORD *)(v4 + 32) = v14;
    *(void *)(v4 + 48) = v2;
    *(void *)(v4 + 56) = v1;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 80);
    long long v13 = *(_OWORD *)(v0 + 48);
    long long v15 = *(_OWORD *)(v0 + 64);
    uint64_t v9 = *(uint64_t **)(v0 + 16);
    v9[3] = (uint64_t)&type metadata for WorkflowDataModels.ShowAlertModel;
    v9[4] = (uint64_t)&protocol witness table for WorkflowDataModels.ShowAlertModel;
    uint64_t v10 = swift_allocObject();
    *uint64_t v9 = v10;
    *(_OWORD *)(v10 + 16) = v13;
    *(_OWORD *)(v10 + 32) = v15;
    *(void *)(v10 + 48) = v8;
    *(void *)(v10 + 56) = v6;
    *(void *)(v10 + 64) = v7;
    *(void *)(v10 + 72) = v5;
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v16();
}

uint64_t static WorkflowDataModels.getThumbnail(imageData:)()
{
  uint64_t v3 = type metadata accessor for ImageElement.ImageStyle();
  OUTLINED_FUNCTION_0_2();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_17_16();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageElement.AspectRatio?);
  uint64_t v8 = OUTLINED_FUNCTION_16(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_38_18();
  uint64_t v20 = type metadata accessor for ImageElement();
  OUTLINED_FUNCTION_0_2();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_11_37();
  uint64_t v12 = type metadata accessor for ImageElement.AspectRatio();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v12);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v0, enum case for ImageElement.ImageStyle.default(_:), v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  uint64_t v13 = type metadata accessor for _ProtoIdiom();
  OUTLINED_FUNCTION_0_2();
  uint64_t v15 = v14;
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_212160;
  (*(void (**)(unint64_t, void, uint64_t))(v15 + 104))(v17 + v16, enum case for _ProtoIdiom.default(_:), v13);
  specialized Set.init(_nonEmptyArrayLiteral:)(v17);
  static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_51_5();
  v18();
  outlined destroy of SiriWorkflowRunnerEvent?(v1, &demangling cache variable for type metadata for ImageElement.AspectRatio?);
  ImageElement.convertToVisualProperty()();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v2, v20);
}

void __swiftcall WorkflowDataModels.AutoShortcutFirstRunModel.init(viewModel:confirmLabel:cancelLabel:)(SiriLinkFlowPlugin::WorkflowDataModels::AutoShortcutFirstRunModel *__return_ptr retstr, SiriLinkFlowPlugin::AutoShortcutAppPhrasesViewModel *viewModel, Swift::String confirmLabel, Swift::String cancelLabel)
{
  long long v4 = *(_OWORD *)&viewModel->bundleId._object;
  object = viewModel->prompt._object;
  retstr->viewModel.shortcutPhrases._rawValue = viewModel->shortcutPhrases._rawValue;
  *(_OWORD *)&retstr->viewModel.maxPhrases = *(_OWORD *)&viewModel->maxPhrases;
  *(_OWORD *)&retstr->viewModel.bundleId._object = v4;
  retstr->viewModel.prompt._object = object;
  Swift::String_optional footnoteLabel = viewModel->footnoteLabel;
  retstr->viewModel.moreShortcutsLabel = viewModel->moreShortcutsLabel;
  retstr->viewModel.Swift::String_optional footnoteLabel = footnoteLabel;
  retstr->confirmLabel = confirmLabel;
  retstr->cancelLabel = cancelLabel;
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_101_1(a1);
  memcpy(v2, v3, 0x70uLL);
  OUTLINED_FUNCTION_61_8();
  swift_storeEnumTagMultiPayload();

  return outlined retain of WorkflowDataModels.AutoShortcutFirstRunModel(v1);
}

uint64_t static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, unint64_t a10)
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_128_2(v11, v12, v13, v14, v15, v16, v17, v18, a10, a9);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_16(v19);
  v10[14] = OUTLINED_FUNCTION_25();
  uint64_t v20 = type metadata accessor for CodableINInteraction();
  v10[15] = v20;
  OUTLINED_FUNCTION_1_0(v20);
  v10[16] = v21;
  v10[17] = OUTLINED_FUNCTION_25();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  v10[18] = v22;
  OUTLINED_FUNCTION_1_0(v22);
  v10[19] = v23;
  v10[20] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return OUTLINED_FUNCTION_135(v24, v25, v26);
}

uint64_t static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)()
{
  uint64_t v1 = *(void **)(v0 + 48);
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  uint64_t v2 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
  *(void *)(v0 + 168) = v2;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v5 = *(void *)(v0 + 64);
    uint64_t v7 = *(uint64_t **)(v0 + 16);
    id v8 = [*(id *)(v0 + 32) _title];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    v7[3] = (uint64_t)&type metadata for WorkflowDataModels.WatchModel;
    v7[4] = (uint64_t)&protocol witness table for WorkflowDataModels.WatchModel;
    uint64_t v12 = swift_allocObject();
    *uint64_t v7 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    *(void *)(v12 + 16) = v9;
    *(void *)(v12 + 24) = v11;
    *(void *)(v12 + 32) = v6;
    *(void *)(v12 + 40) = v5;
    *(void *)(v12 + 48) = v4;
    *(void *)(v12 + 56) = v3;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_28_0();
    __asm { BRAA            X1, X16 }
  }
  unint64_t v16 = *(void **)(v0 + 32);
  unint64_t v15 = *(void **)(v0 + 40);
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for INInteraction);
  id v17 = v15;
  id v18 = v16;
  v26.value.super.Class isa = (Class)v15;
  Class isa = INInteraction.__allocating_init(intent:response:)((INIntent)v18, v26).super.isa;
  *(void *)(v0 + 176) = isa;
  id v20 = v2;
  CodableAceObject.init(wrappedValue:)();
  uint64_t v21 = isa;
  CodableINInteraction.init(wrappedValue:)();
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v22;
  void *v22 = v0;
  v22[1] = static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:);
  OUTLINED_FUNCTION_28_0();
  return INImage.convertToVisualProperty()(v23);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v0, v1, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  int *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 128);
  id v18 = *(void *)(v0 + 120);
  uint64_t v19 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v23 = *(void *)(v0 + 72);
  id v8 = *(void *)(v0 + 64);
  id v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v9 = *(uint64_t **)(v0 + 16);

  uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  v9[3] = v10;
  v9[4] = (uint64_t)&protocol witness table for WorkflowDataModels.CustomIntentConfirmationModel;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v2, v4);
  uint64_t v12 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))((char *)boxed_opaque_existential_1 + v12[5], v19, v18);
  _sSSSgWObTm_1(v20, (uint64_t)boxed_opaque_existential_1 + v12[6], &demangling cache variable for type metadata for VisualProperty?);
  unint64_t v13 = (uint64_t *)((char *)boxed_opaque_existential_1 + v12[7]);
  *unint64_t v13 = v22;
  v13[1] = v6;
  uint64_t v14 = (uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v10 + 20));
  char *v14 = v21;
  v14[1] = v8;
  unint64_t v15 = (uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v10 + 24));
  *unint64_t v15 = v23;
  v15[1] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v16();
}

__n128 WorkflowDataModels.LinkConfirmationModel.init(linkModel:confirmLabel:cancelLabel:isDestructive:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a7 = *(void *)a1;
  *(void *)(a7 + 8) = v7;
  long long v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a7 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a7 + 32) = v8;
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a7 + 48) = result;
  *(void *)(a7 + 64) = a2;
  *(void *)(a7 + 72) = a3;
  *(void *)(a7 + 80) = a4;
  *(void *)(a7 + 88) = a5;
  *(unsigned char *)(a7 + 96) = a6;
  return result;
}

uint64_t WorkflowDataModels.LinkConfirmationModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_101_1(a1);
  memcpy(v2, v3, 0x61uLL);
  OUTLINED_FUNCTION_61_8();
  swift_storeEnumTagMultiPayload();

  return outlined retain of WorkflowDataModels.LinkConfirmationModel(v1);
}

uint64_t AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()@<X0>(void *a1@<X8>)
{
  return AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()((uint64_t (*)(const void *))outlined retain of AutoShortcutAppPhrasesViewModel, a1);
}

void *WorkflowDataModels.bundleName.unsafeMutableAddressor()
{
  return &static WorkflowDataModels.bundleName;
}

unint64_t static WorkflowDataModels.bundleName.getter()
{
  return 0xD000000000000010;
}

uint64_t WorkflowDataModels.DisambiguationItemModel.title.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.ShowAlertModel.asSnippetPluginModel()@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.LinkActionModel.asSnippetPluginModel()((uint64_t (*)(_OWORD *))outlined retain of WorkflowDataModels.ShowAlertModel, a1);
}

uint64_t WorkflowDataModels.LinkActionModel.asSnippetPluginModel()@<X0>(uint64_t (*a1)(_OWORD *)@<X1>, _OWORD *a2@<X8>)
{
  long long v3 = v2[1];
  *a2 = *v2;
  a2[1] = v3;
  long long v4 = v2[3];
  a2[2] = v2[2];
  a2[3] = v4;
  type metadata accessor for WorkflowDataModels(0);
  swift_storeEnumTagMultiPayload();

  return a1(v2);
}

uint64_t WorkflowDataModels.ShowAlertModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.ShowAlertModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x4C6D7269666E6F63;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x614C6C65636E6163;
      break;
    case 2:
      uint64_t result = 0x656C746974;
      break;
    case 3:
      uint64_t result = 0x6567617373656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.ShowAlertModel.CodingKeys()
{
  return WorkflowDataModels.ShowAlertModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.ShowAlertModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.ShowAlertModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ShowAlertModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ShowAlertModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.ShowAlertModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_27_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ShowAlertModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  OUTLINED_FUNCTION_22_15();
  if (!v0)
  {
    OUTLINED_FUNCTION_22_15();
    OUTLINED_FUNCTION_50_12();
    OUTLINED_FUNCTION_22_15();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_36();
  v3(v2);
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_15_21();
}

void WorkflowDataModels.ShowAlertModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  OUTLINED_FUNCTION_82_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ShowAlertModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_24_20();
  OUTLINED_FUNCTION_60_8();
  lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();
  OUTLINED_FUNCTION_115();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v0);
  }
  else
  {
    OUTLINED_FUNCTION_127_2();
    uint64_t v5 = OUTLINED_FUNCTION_94_0();
    uint64_t v7 = v6;
    uint64_t v17 = v5;
    swift_bridgeObjectRetain();
    uint64_t v8 = OUTLINED_FUNCTION_94_0();
    uint64_t v18 = v9;
    uint64_t v16 = v8;
    OUTLINED_FUNCTION_57_7();
    swift_bridgeObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v10;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_94_0();
    OUTLINED_FUNCTION_109_0();
    uint64_t v13 = v11;
    OUTLINED_FUNCTION_81();
    v12();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_59_10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v17;
    v2[1] = v7;
    v2[2] = v16;
    v2[3] = v18;
    v2[4] = v14;
    v2[5] = v15;
    v2[6] = v13;
    v2[7] = v3;
  }
  OUTLINED_FUNCTION_65_8();
  OUTLINED_FUNCTION_10_40();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.ShowAlertModel@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.ShowAlertModel.asSnippetPluginModel()(a1);
}

double protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.ShowAlertModel@<D0>(_OWORD *a1@<X8>)
{
  WorkflowDataModels.ShowAlertModel.init(from:)();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
    a1[3] = v7;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.ShowAlertModel()
{
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.openAppButtonLabel.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.DisambiguationItemModel.subtitle.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.EnableTCCModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x74706D6F7270 && a2 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t WorkflowDataModels.EnableTCCModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x4C6D7269666E6F63;
  }
  if (a1 == 1) {
    return 0x614C6C65636E6163;
  }
  return 0x74706D6F7270;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.EnableTCCModel.CodingKeys()
{
  return WorkflowDataModels.EnableTCCModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.EnableTCCModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.EnableTCCModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.EnableTCCModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.EnableTCCModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.EnableTCCModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_27_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.EnableTCCModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  OUTLINED_FUNCTION_22_15();
  if (!v0)
  {
    OUTLINED_FUNCTION_22_15();
    OUTLINED_FUNCTION_50_12();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_36();
  v3(v2);
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_15_21();
}

void WorkflowDataModels.EnableTCCModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v3 = v2;
  long long v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.EnableTCCModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_18();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  }
  else
  {
    OUTLINED_FUNCTION_127_2();
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v9 = v8;
    uint64_t v17 = v7;
    swift_bridgeObjectRetain();
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v12 = v11;
    uint64_t v16 = v10;
    OUTLINED_FUNCTION_57_7();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_109_0();
    uint64_t v14 = v13;
    OUTLINED_FUNCTION_81();
    v15();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_59_10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *long long v5 = v17;
    v5[1] = v9;
    v5[2] = v16;
    v5[3] = v12;
    v5[4] = v14;
    v5[5] = v1;
  }
  OUTLINED_FUNCTION_62_9();
  OUTLINED_FUNCTION_10_40();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.EnableTCCModel@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.EnableTCCModel.asSnippetPluginModel()(a1);
}

double protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.EnableTCCModel@<D0>(_OWORD *a1@<X8>)
{
  WorkflowDataModels.EnableTCCModel.init(from:)();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.EnableTCCModel()
{
}

uint64_t WorkflowDataModels.WatchModel.viewType.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_141_1();
  outlined copy of WatchViewType(v0, v1);
  return OUTLINED_FUNCTION_141_1();
}

uint64_t WorkflowDataModels.WatchModel.confirmLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t WorkflowDataModels.WatchModel.cancelLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomIntentStateAttachment.pageSize.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t WorkflowDataModels.WatchModel.asSnippetPluginModel()@<X0>(void *a1@<X8>)
{
  return AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()((uint64_t (*)(const void *))outlined retain of WorkflowDataModels.WatchModel, a1);
}

uint64_t AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()@<X0>(uint64_t (*a1)(const void *)@<X1>, void *a2@<X8>)
{
  memcpy(a2, v2, 0x50uLL);
  type metadata accessor for WorkflowDataModels(0);
  swift_storeEnumTagMultiPayload();

  return a1(v2);
}

uint64_t WorkflowDataModels.WatchModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74756374726F6873 && a2 == 0xEC000000656D614ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6570795477656976 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.WatchModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x74756374726F6873;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6570795477656976;
      break;
    case 2:
      uint64_t result = 0x4C6D7269666E6F63;
      break;
    case 3:
      uint64_t result = 0x614C6C65636E6163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.WatchModel.CodingKeys()
{
  return WorkflowDataModels.WatchModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.WatchModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.WatchModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.WatchModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.WatchModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.WatchModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_27_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.WatchModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  LOBYTE(v5) = 0;
  OUTLINED_FUNCTION_50_12();
  if (!v0)
  {
    outlined init with take of Any((_OWORD *)(v1 + 16), &v6);
    outlined init with take of Any(&v6, &v5);
    lazy protocol witness table accessor for type WatchViewType and conformance WatchViewType();
    OUTLINED_FUNCTION_54_8();
    LOBYTE(v5) = 2;
    OUTLINED_FUNCTION_50_12();
    LOBYTE(v5) = 3;
    OUTLINED_FUNCTION_50_12();
  }
  uint64_t v3 = OUTLINED_FUNCTION_8_36();
  v4(v3);
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_15_21();
}

void WorkflowDataModels.WatchModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  OUTLINED_FUNCTION_82_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.WatchModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_24_20();
  OUTLINED_FUNCTION_60_8();
  lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();
  OUTLINED_FUNCTION_115();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v16) = 0;
    uint64_t v5 = OUTLINED_FUNCTION_142_1();
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type WatchViewType and conformance WatchViewType();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v14 = v5;
    outlined copy of WatchViewType(v16, v17);
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v10 = v9;
    uint64_t v13 = v8;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_142_1();
    OUTLINED_FUNCTION_109_0();
    uint64_t v15 = v11;
    OUTLINED_FUNCTION_81();
    v12();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined copy of WatchViewType(v16, v17);
    OUTLINED_FUNCTION_136_2();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_136_2();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v14;
    v2[1] = v7;
    v2[2] = v16;
    v2[3] = v17;
    v2[4] = v18;
    v2[5] = v19;
    v2[6] = v13;
    v2[7] = v10;
    v2[8] = v15;
    v2[9] = v3;
  }
  OUTLINED_FUNCTION_65_8();
  OUTLINED_FUNCTION_10_40();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.WatchModel@<X0>(void *a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return WorkflowDataModels.WatchModel.asSnippetPluginModel()(a1);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.WatchModel(void *a1@<X8>)
{
  WorkflowDataModels.WatchModel.init(from:)();
  if (!v1) {
    memcpy(a1, v3, 0x50uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.WatchModel()
{
  memcpy(v1, v0, sizeof(v1));
  WorkflowDataModels.WatchModel.encode(to:)();
}

uint64_t WorkflowDataModels.CustomIntentModel.appPunchOut.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_6();
  uint64_t v0 = OUTLINED_FUNCTION_19();

  return v1(v0);
}

uint64_t WorkflowDataModels.CustomIntentModel.interaction.getter()
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  type metadata accessor for CodableINInteraction();
  OUTLINED_FUNCTION_6();
  uint64_t v0 = OUTLINED_FUNCTION_19();

  return v1(v0);
}

uint64_t WorkflowDataModels.CustomIntentModel.image.getter@<X0>(uint64_t a1@<X8>)
{
  return WorkflowDataModels.CustomIntentModel.image.getter(type metadata accessor for WorkflowDataModels.CustomIntentModel, &demangling cache variable for type metadata for VisualProperty?, a1);
}

uint64_t WorkflowDataModels.CustomIntentModel.title.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.CustomIntentModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074754FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7463617265746E69 && a2 == 0xEB000000006E6F69;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6567616D69 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.CustomIntentModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x68636E7550707061;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7463617265746E69;
      break;
    case 2:
      uint64_t result = 0x6567616D69;
      break;
    case 3:
      uint64_t result = 0x656C746974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_27_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
  OUTLINED_FUNCTION_54_8();
  if (!v0)
  {
    type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    OUTLINED_FUNCTION_68_7();
    type metadata accessor for CodableINInteraction();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type CodableINInteraction and conformance CodableINInteraction);
    OUTLINED_FUNCTION_144_0();
    OUTLINED_FUNCTION_54_8();
    OUTLINED_FUNCTION_57_7();
    type metadata accessor for VisualProperty();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    OUTLINED_FUNCTION_145_0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_22_15();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_36();
  v3(v2);
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_15_21();
}

uint64_t WorkflowDataModels.CustomIntentModel.init(appPunchOut:interaction:image:title:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OUTLINED_FUNCTION_88_4();
  uint64_t v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_20_8();
  v10();
  uint64_t v11 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  type metadata accessor for CodableINInteraction();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_20_8();
  v12();
  uint64_t result = _sSSSgWObTm_1(v6, v9 + *(int *)(v11 + 24), &demangling cache variable for type metadata for VisualProperty?);
  uint64_t v14 = (void *)(v9 + *(int *)(v11 + 28));
  void *v14 = v5;
  v14[1] = a5;
  return result;
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentHandledModel);
}

void WorkflowDataModels.CustomIntentModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v4 = v3;
  uint64_t v24 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  uint64_t v7 = OUTLINED_FUNCTION_16(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_50_1();
  uint64_t v25 = v8;
  uint64_t v28 = type metadata accessor for CodableINInteraction();
  OUTLINED_FUNCTION_0_2();
  uint64_t v26 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_18();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v27 = v12;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_66_8(v14, v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v15);
  uint64_t v16 = (int *)OUTLINED_FUNCTION_67_10();
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_27_6();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();
  OUTLINED_FUNCTION_147_1();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  }
  else
  {
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v1, v29, v11);
    OUTLINED_FUNCTION_68_7();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type CodableINInteraction and conformance CodableINInteraction);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v1 + v16[5], v2, v28);
    type metadata accessor for VisualProperty();
    OUTLINED_FUNCTION_57_7();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    _sSSSgWObTm_1(v25, v1 + v16[6], &demangling cache variable for type metadata for VisualProperty?);
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = v19;
    OUTLINED_FUNCTION_66();
    v21();
    uint64_t v22 = (uint64_t *)(v1 + v16[7]);
    uint64_t *v22 = v18;
    v22[1] = v20;
    outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(v1, v24, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
    outlined destroy of WorkflowDataModels.CustomIntentModel(v1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  }
  OUTLINED_FUNCTION_62_9();
  OUTLINED_FUNCTION_10_40();
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.CustomIntentModel()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentModel()
{
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.intentModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(v1, a1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter((void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.cancelLabel.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.asSnippetPluginModel()()
{
  return WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()();
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6F4D746E65746E69 && a2 == 0xEB000000006C6564;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6F4D746E65746E69;
  }
  if (a1 == 1) {
    return 0x4C6D7269666E6F63;
  }
  return 0x614C6C65636E6163;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentConfirmationModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_27_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
  OUTLINED_FUNCTION_54_8();
  if (!v0)
  {
    type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
    OUTLINED_FUNCTION_22_15();
    OUTLINED_FUNCTION_22_15();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_36();
  v3(v2);
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_15_21();
}

void WorkflowDataModels.CustomIntentConfirmationModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  BOOL v3 = v2;
  uint64_t v22 = v4;
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_50_1();
  uint64_t v23 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v7);
  uint64_t v8 = OUTLINED_FUNCTION_11_37();
  uint64_t v9 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(v8);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_3_23();
  OUTLINED_FUNCTION_122_0(v3);
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  }
  else
  {
    uint64_t v11 = v1;
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of WorkflowDataModels.CustomIntentModel(v23, v1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
    OUTLINED_FUNCTION_125_2();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v9;
    uint64_t v14 = (uint64_t *)(v11 + *(int *)(v9 + 20));
    uint64_t *v14 = v12;
    v14[1] = v15;
    OUTLINED_FUNCTION_57_7();
    uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v18 = v17;
    uint64_t v19 = OUTLINED_FUNCTION_117_2();
    v20(v19);
    uint64_t v21 = (uint64_t *)(v11 + *(int *)(v13 + 24));
    *uint64_t v21 = v16;
    v21[1] = v18;
    outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(v11, v22, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
    outlined destroy of WorkflowDataModels.CustomIntentModel(v11, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
  }
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_10_40();
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.init(intentModel:confirmLabel:cancelLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OUTLINED_FUNCTION_131_1();
  outlined init with take of WorkflowDataModels.CustomIntentModel(v8, v9, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  uint64_t result = OUTLINED_FUNCTION_133_1(v10);
  uint64_t v13 = (void *)(v6 + v12);
  *uint64_t v13 = v5;
  v13[1] = a5;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.CustomIntentConfirmationModel()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentConfirmationModel()
{
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.doneButtonLabel.getter()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter((void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter(void (*a1)(void))
{
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.doneButtonCommand.getter@<X0>(uint64_t a1@<X8>)
{
  return WorkflowDataModels.CustomIntentModel.image.getter(type metadata accessor for WorkflowDataModels.CustomIntentHandledModel, &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?, a1);
}

uint64_t WorkflowDataModels.CustomIntentModel.image.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1(0);
  return outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v3 + *(int *)(v6 + 24), a3, a2);
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.shouldShowDoneButton.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0) + 28));
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.asSnippetPluginModel()()
{
  return WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()();
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F4D746E65746E69 && a2 == 0xEB000000006C6564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x74747542656E6F64 && a2 == 0xEF6C6562614C6E6FLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x800000000022AC50 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000014 && a2 == 0x800000000022AC70)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 3;
      }
      else {
        return 4;
      }
    }
  }
}

unint64_t WorkflowDataModels.CustomIntentHandledModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6F4D746E65746E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x74747542656E6F64;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentHandledModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentHandledModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentHandledModel.encode(to:)()
{
  OUTLINED_FUNCTION_9_42();
  OUTLINED_FUNCTION_27_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentHandledModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
  OUTLINED_FUNCTION_54_8();
  if (!v0)
  {
    type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
    OUTLINED_FUNCTION_22_15();
    OUTLINED_FUNCTION_57_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAStartLocalRequest> and conformance CodableAceObject<A>);
    OUTLINED_FUNCTION_145_0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  OUTLINED_FUNCTION_81();
  v2();
  OUTLINED_FUNCTION_10_40();
}

void WorkflowDataModels.CustomIntentHandledModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v4 = v3;
  uint64_t v19 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  uint64_t v7 = OUTLINED_FUNCTION_16(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_67_10();
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_66_8(v9, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentHandledModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v10);
  uint64_t v11 = OUTLINED_FUNCTION_38_18();
  uint64_t v12 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(v11);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_3_23();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  }
  else
  {
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of WorkflowDataModels.CustomIntentModel(v21, v2, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
    OUTLINED_FUNCTION_125_2();
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = (uint64_t *)(v2 + v12[5]);
    *uint64_t v15 = v14;
    v15[1] = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    OUTLINED_FUNCTION_57_7();
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAStartLocalRequest> and conformance CodableAceObject<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    _sSSSgWObTm_1(v1, v2 + v12[6], &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    char v17 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_81();
    v18();
    *(unsigned char *)(v2 + v12[7]) = v17 & 1;
    outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(v2, v20, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
    outlined destroy of WorkflowDataModels.CustomIntentModel(v2, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
  }
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_10_40();
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.init(intentModel:doneButtonLabel:doneButtonCommand:shouldShowDoneButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  OUTLINED_FUNCTION_131_1();
  outlined init with take of WorkflowDataModels.CustomIntentModel(v8, v9, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  OUTLINED_FUNCTION_133_1(v10);
  uint64_t result = _sSSSgWObTm_1(v5, v6 + v11, &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  *(unsigned char *)(v6 + *(int *)(v10 + 28)) = a5;
  return result;
}

uint64_t sub_1D1FF4()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t outlined retain of WorkflowDataModels.ConfirmActionModel(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v3 = *(void *)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.CustomIntentHandledModel()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentHandledModel()
{
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.appPunchOut.getter()
{
  type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_6();
  uint64_t v0 = OUTLINED_FUNCTION_19();

  return v1(v0);
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000000022AC90
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x68636E7550707061 && a2 == 0xEB0000000074754FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x68636E7550707061;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentErrorModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentErrorModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentErrorModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_27_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentErrorModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  OUTLINED_FUNCTION_22_15();
  if (!v0)
  {
    type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
    OUTLINED_FUNCTION_68_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
    OUTLINED_FUNCTION_144_0();
    OUTLINED_FUNCTION_54_8();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_36();
  v3(v2);
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_15_21();
}

void WorkflowDataModels.CustomIntentErrorModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v4 = v3;
  uint64_t v16 = v5;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v15 = v6;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_23_23();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentErrorModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v8);
  uint64_t v9 = OUTLINED_FUNCTION_11_37();
  uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(v9);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_3_23();
  OUTLINED_FUNCTION_60_8();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v4);
  }
  else
  {
    OUTLINED_FUNCTION_127_2();
    *uint64_t v1 = KeyedDecodingContainer.decode(_:forKey:)();
    v1[1] = v12;
    OUTLINED_FUNCTION_68_7();
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v13 = OUTLINED_FUNCTION_104_1();
    v14(v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))((char *)v1 + *(int *)(v10 + 20), v2, v17);
    outlined init with copy of WorkflowDataModels.CustomIntentErrorModel((uint64_t)v1, v16, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
    __swift_destroy_boxed_opaque_existential_1Tm(v4);
    outlined destroy of WorkflowDataModels.CustomIntentModel((uint64_t)v1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
  }
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_10_40();
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.CustomIntentErrorModel()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentErrorModel()
{
}

uint64_t WorkflowDataModels.ConfirmActionModel.archivedViewData.getter()
{
  outlined copy of Data?(*(void *)(v0 + 64), *(void *)(v0 + 72));
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.ConfirmActionModel.isDestructive.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t WorkflowDataModels.ConfirmActionModel.prompt.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.ConfirmActionModel.archivedViewModel.getter@<X0>(void *a1@<X8>)
{
  uint64_t v7 = &demangling cache variable for type metadata for Data?;
  _sSSSgWObTm_1((uint64_t)(v1 + 8), (uint64_t)v10, &demangling cache variable for type metadata for Data?);
  _sSSSgWObTm_1((uint64_t)v10, (uint64_t)&v11, &demangling cache variable for type metadata for Data?);
  unint64_t v8 = v12;
  if (v12 >> 60 == 15)
  {
    OUTLINED_FUNCTION_71_9();
  }
  else
  {
    uint64_t v3 = v11;
    uint64_t v4 = *v1;
    uint64_t v2 = v1[1];
    uint64_t v5 = v1[2];
    uint64_t v7 = (uint64_t *)v1[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t result = outlined retain of Data?((uint64_t)v10);
  *a1 = v3;
  a1[1] = v8;
  a1[2] = v4;
  a1[3] = v2;
  a1[4] = v5;
  a1[5] = v7;
  return result;
}

uint64_t WorkflowDataModels.ConfirmActionModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C646E7542707061 && a2 == 0xEB00000000644965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C70736944707061 && a2 == 0xEE00656D614E7961;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6C6562614C6F6ELL && a2 == 0xE700000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000010 && a2 == 0x800000000022ACB0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x7572747365447369 && a2 == 0xED00006576697463;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0x74706D6F7270 && a2 == 0xE600000000000000)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v11) {
              return 6;
            }
            else {
              return 7;
            }
          }
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.ConfirmActionModel.CodingKeys.init(intValue:)()
{
  return 7;
}

unint64_t WorkflowDataModels.ConfirmActionModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6C646E7542707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C70736944707061;
      break;
    case 2:
      unint64_t result = 0x4C6D7269666E6F63;
      break;
    case 3:
      unint64_t result = 0x6C6562614C6F6ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x7572747365447369;
      break;
    case 6:
      unint64_t result = 0x74706D6F7270;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys()
{
  return WorkflowDataModels.ConfirmActionModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.ConfirmActionModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = WorkflowDataModels.ConfirmActionModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.ConfirmActionModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_76_9();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ConfirmActionModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  char v5 = 0;
  OUTLINED_FUNCTION_30_22();
  if (!v0)
  {
    char v5 = 1;
    OUTLINED_FUNCTION_30_22();
    char v5 = 2;
    OUTLINED_FUNCTION_30_22();
    char v5 = 3;
    OUTLINED_FUNCTION_30_22();
    _sSSSgWObTm_1(v1 + 64, (uint64_t)v6, &demangling cache variable for type metadata for Data?);
    _sSSSgWObTm_1((uint64_t)v6, (uint64_t)&v5, &demangling cache variable for type metadata for Data?);
    lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_103_1();
    char v5 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_34_17(6);
  }
  uint64_t v3 = OUTLINED_FUNCTION_8_36();
  v4(v3);
  OUTLINED_FUNCTION_15_21();
}

void WorkflowDataModels.ConfirmActionModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ConfirmActionModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_23_23();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_41_17();
    uint64_t v12 = v11;
    swift_bridgeObjectRetain();
    uint64_t v13 = OUTLINED_FUNCTION_41_17();
    OUTLINED_FUNCTION_92_3(v13);
    uint64_t v28 = v10;
    uint64_t v25 = OUTLINED_FUNCTION_41_17();
    LOBYTE(v29) = 3;
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    uint64_t v16 = OUTLINED_FUNCTION_41_17();
    uint64_t v18 = v17;
    uint64_t v23 = v16;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v24 = v18;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined copy of Data?(v29, v30);
    OUTLINED_FUNCTION_149_0();
    char v31 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_149_0();
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v20;
    uint64_t v22 = v19;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v29, v30);
    swift_bridgeObjectRetain();
    outlined consume of Data?(v29, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v29, v30);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v5 = v27;
    *(void *)(v5 + 8) = v12;
    *(void *)(v5 + 16) = v26;
    *(void *)(v5 + 24) = v28;
    *(void *)(v5 + 32) = v25;
    *(void *)(v5 + 40) = v15;
    *(void *)(v5 + 48) = v23;
    *(void *)(v5 + 56) = v24;
    *(void *)(v5 + 64) = v29;
    *(void *)(v5 + 72) = v30;
    *(unsigned char *)(v5 + 80) = v31 & 1;
    *(void *)(v5 + 88) = v22;
    *(void *)(v5 + 96) = v21;
  }
  OUTLINED_FUNCTION_10_40();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.ConfirmActionModel@<X0>(uint64_t a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  return WorkflowDataModels.ConfirmActionModel.asSnippetPluginModel()(a1);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.ConfirmActionModel(void *a1@<X8>)
{
  WorkflowDataModels.ConfirmActionModel.init(from:)();
  if (!v1) {
    memcpy(a1, __src, 0x68uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.ConfirmActionModel()
{
  memcpy(__dst, v0, sizeof(__dst));
  WorkflowDataModels.ConfirmActionModel.encode(to:)();
}

uint64_t WorkflowDataModels.DisambiguateItemsModel.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x736D657469;
  }
  else {
    return 0x74706D6F7270;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys()
{
  return WorkflowDataModels.DisambiguateItemsModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.DisambiguateItemsModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.DisambiguateItemsModel.encode(to:)()
{
}

{
  uint64_t v0;
  void (*v1)(void);
  void (*v2)(void);
  void *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(void);

  OUTLINED_FUNCTION_9_42();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_27_6();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  v2();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v0)
  {
    OUTLINED_FUNCTION_68_7();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
    lazy protocol witness table accessor for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  OUTLINED_FUNCTION_10_27();
  v7();
  OUTLINED_FUNCTION_62_9();
  OUTLINED_FUNCTION_10_40();
}

void WorkflowDataModels.DisambiguateItemsModel.init(from:)()
{
}

{
  uint64_t v0;
  void (*v1)(void);
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(void);

  OUTLINED_FUNCTION_9_42();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_51_13();
  v2();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v4);
  }
  else
  {
    OUTLINED_FUNCTION_127_2();
    OUTLINED_FUNCTION_83_3();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
    OUTLINED_FUNCTION_68_7();
    lazy protocol witness table accessor for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_37_11();
    v7();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_59_10();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_65_8();
  OUTLINED_FUNCTION_10_40();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.DisambiguateItemsModel@<X0>(void *a1@<X8>)
{
  return WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()(*v1, v1[1], v1[2], a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel((uint64_t (*)(void))WorkflowDataModels.DisambiguateItemsModel.init(from:), a1);
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.DisambiguateItemsModel()
{
}

uint64_t WorkflowDataModels.DisambiguateSmartPromptItemsModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()(a1, a2, a3, a4);
}

uint64_t WorkflowDataModels.DisambiguateItemsModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
  if (v2 || (OUTLINED_FUNCTION_10_34() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = OUTLINED_FUNCTION_10_34();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.DisambiguateSmartPromptItemsModel.encode(to:)()
{
}

void WorkflowDataModels.DisambiguateSmartPromptItemsModel.init(from:)()
{
}

uint64_t WorkflowDataModels.InvocationCommand.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000018 && a2 == 0x800000000022ACD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000000022ACF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7165527472617473 && a2 == 0xEC00000074736575)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t WorkflowDataModels.InvocationCommand.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0xD000000000000018;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD00000000000001ALL;
    }
    else {
      return 0x7165527472617473;
    }
  }
  return result;
}

uint64_t WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (OUTLINED_FUNCTION_10_34() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = OUTLINED_FUNCTION_10_34();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x64616F6C796170;
  }
  else {
    return 25705;
  }
}

uint64_t WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x636E617265747475 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.stringValue.getter()
{
  return 0x636E617265747475;
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel@<X0>(void *a1@<X8>)
{
  return WorkflowDataModels.DisambiguateSmartPromptItemsModel.asSnippetPluginModel()(*v1, v1[1], v1[2], a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel((uint64_t (*)(void))WorkflowDataModels.DisambiguateSmartPromptItemsModel.init(from:), a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.InvocationCommand.CodingKeys()
{
  return WorkflowDataModels.InvocationCommand.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.InvocationCommand.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.InvocationCommand.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys()
{
  return WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys(uint64_t a1)
{
  unint64_t started = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();

  return CodingKey.description.getter(a1, started);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys(uint64_t a1)
{
  unint64_t started = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();

  return CodingKey.debugDescription.getter(a1, started);
}

void WorkflowDataModels.InvocationCommand.encode(to:)()
{
  OUTLINED_FUNCTION_9_42();
  char v18 = v2;
  char v4 = v3;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.StartRequestCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v15 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_20_18();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v17 = v7;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_23_23();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_2_27();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_27_6();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v18)
  {
    if (v18 == 1)
    {
      lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();
      OUTLINED_FUNCTION_93_0();
      uint64_t v10 = v17;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
        lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
        OUTLINED_FUNCTION_146_0();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      uint64_t v11 = OUTLINED_FUNCTION_126_1();
    }
    else
    {
      lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();
      OUTLINED_FUNCTION_93_0();
      uint64_t v10 = v16;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      uint64_t v11 = v1;
    }
    v12(v11, v10);
  }
  else
  {
    lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();
    OUTLINED_FUNCTION_93_0();
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B]);
      OUTLINED_FUNCTION_146_0();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    OUTLINED_FUNCTION_10_27();
    v13();
  }
  OUTLINED_FUNCTION_66();
  v14();
  OUTLINED_FUNCTION_62_9();
  OUTLINED_FUNCTION_10_40();
}

void WorkflowDataModels.InvocationCommand.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  char v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.StartRequestCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_50_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_27_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_56();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_20_18();
  uint64_t v28 = (uint64_t)v3;
  OUTLINED_FUNCTION_122_0(v3);
  lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    uint64_t v29 = v1;
    uint64_t v11 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12
      && (int v13 = *(unsigned __int8 *)(v11 + 32),
          specialized ArraySlice.subscript.getter(1, v12, v11, v11 + 32, 0, (2 * v12) | 1),
          uint64_t v15 = v14,
          unint64_t v17 = v16,
          swift_bridgeObjectRelease(),
          v15 == v17 >> 1))
    {
      if (v13)
      {
        if (v13 == 1)
        {
          lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();
          OUTLINED_FUNCTION_97_1();
          KeyedDecodingContainer.decode(_:forKey:)();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
          lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
          OUTLINED_FUNCTION_73_5();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v23 = OUTLINED_FUNCTION_98_1();
          v24(v23);
        }
        else
        {
          lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          KeyedDecodingContainer.decode(_:forKey:)();
          OUTLINED_FUNCTION_137_1();
          v22();
        }
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_51_5();
        v25();
      }
      else
      {
        lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();
        OUTLINED_FUNCTION_97_1();
        KeyedDecodingContainer.decode(_:forKey:)();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
        lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B]);
        OUTLINED_FUNCTION_73_5();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        OUTLINED_FUNCTION_51_5();
        v26();
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_66();
        v27();
      }
    }
    else
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v19 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v19 = &type metadata for WorkflowDataModels.InvocationCommand;
      KeyedDecodingContainer.codingPath.getter();
      OUTLINED_FUNCTION_100_2();
      OUTLINED_FUNCTION_40();
      uint64_t v20 = OUTLINED_FUNCTION_124_2();
      v21(v20);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v29, v7);
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v28);
  OUTLINED_FUNCTION_10_40();
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.InvocationCommand(uint64_t a1@<X8>)
{
  WorkflowDataModels.InvocationCommand.init(from:)();
  if (!v1)
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v6;
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.InvocationCommand()
{
}

uint64_t WorkflowDataModels.DisambiguationItemModel.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v1 + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail, a1, &demangling cache variable for type metadata for VisualProperty?);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.invocationCommand.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_140();
  outlined copy of WorkflowDataModels.InvocationCommand(v0, v1, v2, v3);
  return OUTLINED_FUNCTION_140();
}

void *WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  _sSSSgWObTm_1(a5, (uint64_t)v9 + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail, &demangling cache variable for type metadata for VisualProperty?);
  int v13 = (char *)v9
      + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand;
  *(void *)int v13 = a6;
  *((void *)v13 + 1) = a7;
  *((void *)v13 + 2) = a8;
  v13[24] = a9;
  return v9;
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentErrorModel);
}

uint64_t outlined retain of WorkflowDataModels.LinkActionModel(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v2, v3);
  return a1;
}

uint64_t sub_1D4D94()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x656C746974627573 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x69616E626D756874 && a2 == 0xE90000000000006CLL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000011 && a2 == 0x800000000022AC30)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v8) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

unint64_t WorkflowDataModels.DisambiguationItemModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x656C746974;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C746974627573;
      break;
    case 2:
      unint64_t result = 0x69616E626D756874;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys()
{
  return WorkflowDataModels.DisambiguationItemModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.DisambiguationItemModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of SiriWorkflowRunnerEvent?(v0 + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail, &demangling cache variable for type metadata for VisualProperty?);
  outlined consume of WorkflowDataModels.InvocationCommand(*(void *)(v0 + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand), *(void *)(v0+ OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand+ 8), *(void *)(v0+ OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand+ 16), *(unsigned char *)(v0+ OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand+ 24));
  return v0;
}

uint64_t WorkflowDataModels.DisambiguationItemModel.__deallocating_deinit()
{
  WorkflowDataModels.DisambiguationItemModel.deinit();

  return swift_deallocClassInstance();
}

void WorkflowDataModels.DisambiguationItemModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_76_9();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.DisambiguationItemModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  OUTLINED_FUNCTION_30_22();
  if (!v0)
  {
    OUTLINED_FUNCTION_34_17(1);
    type metadata accessor for VisualProperty();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_36();
  v3(v2);
  OUTLINED_FUNCTION_15_21();
}

uint64_t WorkflowDataModels.DisambiguationItemModel.__allocating_init(from:)()
{
  uint64_t v0 = swift_allocObject();
  WorkflowDataModels.DisambiguationItemModel.init(from:)();
  return v0;
}

void WorkflowDataModels.DisambiguationItemModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  unint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  uint64_t v7 = OUTLINED_FUNCTION_16(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_17_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.DisambiguationItemModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_3_23();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v3[2] = KeyedDecodingContainer.decode(_:forKey:)();
    v3[3] = v9;
    v3[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v3[5] = v10;
    type metadata accessor for VisualProperty();
    LOBYTE(v14) = 2;
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    _sSSSgWObTm_1(v2, (uint64_t)v3 + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail, &demangling cache variable for type metadata for VisualProperty?);
    lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand();
    OUTLINED_FUNCTION_121_0();
    uint64_t v11 = OUTLINED_FUNCTION_16_30();
    v12(v11);
    int v13 = (char *)v3
        + OBJC_IVAR____TtCO18SiriLinkFlowPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand;
    *(_OWORD *)int v13 = v14;
    *((void *)v13 + 2) = v15;
    v13[24] = v16;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  OUTLINED_FUNCTION_62_9();
  OUTLINED_FUNCTION_10_40();
}

uint64_t protocol witness for Identifiable.id.getter in conformance WorkflowDataModels.DisambiguationItemModel@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguationItemModel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 128))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.DisambiguationItemModel()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t WorkflowDataModels.LinkActionModel.archivedViewData.getter()
{
  outlined copy of Data?(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.LinkActionModel.archivedViewModel.getter@<X0>(void *a1@<X8>)
{
  uint64_t v7 = &demangling cache variable for type metadata for Data?;
  _sSSSgWObTm_1((uint64_t)(v1 + 6), (uint64_t)v10, &demangling cache variable for type metadata for Data?);
  _sSSSgWObTm_1((uint64_t)v10, (uint64_t)&v11, &demangling cache variable for type metadata for Data?);
  unint64_t v8 = v12;
  if (v12 >> 60 == 15)
  {
    OUTLINED_FUNCTION_71_9();
  }
  else
  {
    uint64_t v3 = v11;
    uint64_t v4 = *v1;
    uint64_t v2 = v1[1];
    uint64_t v5 = v1[2];
    uint64_t v7 = (uint64_t *)v1[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t result = outlined retain of Data?((uint64_t)v10);
  *a1 = v3;
  a1[1] = v8;
  a1[2] = v4;
  a1[3] = v2;
  a1[4] = v5;
  a1[5] = v7;
  return result;
}

uint64_t WorkflowDataModels.LinkActionModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C646E7542707061 && a2 == 0xEB00000000644965;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C70736944707061 && a2 == 0xEE00656D614E7961;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000010 && a2 == 0x800000000022ACB0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v8) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.LinkActionModel.CodingKeys.init(intValue:)()
{
  return 4;
}

unint64_t WorkflowDataModels.LinkActionModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6C646E7542707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C70736944707061;
      break;
    case 2:
      unint64_t result = 0x74706D6F7270;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys()
{
  return VoiceCommandsParityError.hashValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys()
{
  return WorkflowDataModels.LinkActionModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.LinkActionModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.LinkActionModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WorkflowDataModels.LinkActionModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = WorkflowDataModels.LinkActionModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.LinkActionModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_76_9();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkActionModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  char v5 = 0;
  OUTLINED_FUNCTION_30_22();
  if (!v0)
  {
    OUTLINED_FUNCTION_34_17(1);
    OUTLINED_FUNCTION_34_17(2);
    _sSSSgWObTm_1(v1 + 48, (uint64_t)v6, &demangling cache variable for type metadata for Data?);
    _sSSSgWObTm_1((uint64_t)v6, (uint64_t)&v5, &demangling cache variable for type metadata for Data?);
    lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_103_1();
  }
  uint64_t v3 = OUTLINED_FUNCTION_8_36();
  v4(v3);
  OUTLINED_FUNCTION_15_21();
}

void WorkflowDataModels.LinkActionModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  OUTLINED_FUNCTION_82_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkActionModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_23_23();
  OUTLINED_FUNCTION_60_8();
  lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v0);
  }
  else
  {
    OUTLINED_FUNCTION_148_0();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v14) = 1;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_148_0();
    uint64_t v4 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v13 = v5;
    OUTLINED_FUNCTION_92_3(v4);
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type Data and conformance Data();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_37_11();
    v8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v14, v15);
    *uint64_t v2 = v12;
    v2[1] = v11;
    v2[2] = v10;
    v2[3] = v13;
    v2[4] = v9;
    v2[5] = v7;
    v2[6] = v14;
    v2[7] = v15;
  }
  OUTLINED_FUNCTION_65_8();
  OUTLINED_FUNCTION_10_40();
}

double protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.LinkActionModel@<D0>(_OWORD *a1@<X8>)
{
  WorkflowDataModels.LinkActionModel.init(from:)();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
    a1[3] = v7;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.LinkActionModel()
{
}

uint64_t WorkflowDataModels.LinkConfirmationModel.linkModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WorkflowDataModels.LinkActionModel(v1, a1);
}

uint64_t WorkflowDataModels.LinkConfirmationModel.isDestructive.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t WorkflowDataModels.LinkConfirmationModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65646F4D6B6E696CLL && a2 == 0xE90000000000006CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x7572747365447369 && a2 == 0xED00006576697463)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.LinkConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x65646F4D6B6E696CLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x4C6D7269666E6F63;
      break;
    case 2:
      uint64_t result = 0x614C6C65636E6163;
      break;
    case 3:
      uint64_t result = 0x7572747365447369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys()
{
  return WorkflowDataModels.LinkConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.LinkConfirmationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.LinkConfirmationModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_27_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
  OUTLINED_FUNCTION_54_8();
  if (!v0)
  {
    OUTLINED_FUNCTION_22_15();
    OUTLINED_FUNCTION_22_15();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_36();
  v3(v2);
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_15_21();
}

void WorkflowDataModels.LinkConfirmationModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_3_23();
  OUTLINED_FUNCTION_122_0(v2);
  lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v22, v23);
    OUTLINED_FUNCTION_83_3();
    uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v7;
    if (v17)
    {
      OUTLINED_FUNCTION_37_11();
      v8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v22, v23);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v22, v23);
    }
    else
    {
      uint64_t v14 = v6;
      swift_bridgeObjectRetain();
      uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_83_3();
      char v11 = KeyedDecodingContainer.decode(_:forKey:)();
      OUTLINED_FUNCTION_37_11();
      v12();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data?(v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v22, v23);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v4 = v16;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = v18;
      *(void *)(v4 + 24) = v19;
      *(void *)(v4 + 32) = v20;
      *(void *)(v4 + 40) = v21;
      *(void *)(v4 + 48) = v22;
      *(void *)(v4 + 56) = v23;
      *(void *)(v4 + 64) = v14;
      *(void *)(v4 + 72) = v15;
      *(void *)(v4 + 80) = v13;
      *(void *)(v4 + 88) = v10;
      *(unsigned char *)(v4 + 96) = v11 & 1;
    }
  }
  OUTLINED_FUNCTION_65_8();
  OUTLINED_FUNCTION_10_40();
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.LinkConfirmationModel(void *a1@<X8>)
{
  WorkflowDataModels.LinkConfirmationModel.init(from:)();
  if (!v1) {
    memcpy(a1, __src, 0x61uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.LinkConfirmationModel()
{
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.viewModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AutoShortcutAppPhrasesViewModel(v1, a1);
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.cancelLabel.getter()
{
  return OUTLINED_FUNCTION_19();
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65646F4D77656976 && a2 == 0xE90000000000006CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x65646F4D77656976;
  }
  if (a1 == 1) {
    return 0x4C6D7269666E6F63;
  }
  return 0x614C6C65636E6163;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys()
{
  return WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys(uint64_t a1)
{
  unint64_t Run = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();

  return CodingKey.description.getter(a1, Run);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys(uint64_t a1)
{
  unint64_t Run = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, Run);
}

void WorkflowDataModels.AutoShortcutFirstRunModel.encode(to:)()
{
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_27_29();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_1_27();
  lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();
  OUTLINED_FUNCTION_12_43();
  memcpy(v5, v1, sizeof(v5));
  lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
  OUTLINED_FUNCTION_54_8();
  if (!v0)
  {
    LOBYTE(v5[0]) = 1;
    OUTLINED_FUNCTION_22_15();
    LOBYTE(v5[0]) = 2;
    OUTLINED_FUNCTION_22_15();
  }
  uint64_t v3 = OUTLINED_FUNCTION_8_36();
  v4(v3);
  OUTLINED_FUNCTION_53_7();
  OUTLINED_FUNCTION_15_21();
}

void WorkflowDataModels.AutoShortcutFirstRunModel.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_51_13();
  lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v3);
  }
  else
  {
    lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v8;
    uint64_t v12 = v7;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_109_0();
    uint64_t v11 = v9;
    OUTLINED_FUNCTION_81();
    v10();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_59_10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v5 = v14;
    v5[1] = v15;
    v5[2] = v16;
    v5[3] = v17;
    v5[4] = v18;
    v5[5] = v19;
    v5[6] = v20;
    v5[7] = v21;
    v5[8] = v22;
    v5[9] = v23;
    void v5[10] = v12;
    v5[11] = v13;
    v5[12] = v11;
    v5[13] = v1;
  }
  OUTLINED_FUNCTION_65_8();
  OUTLINED_FUNCTION_10_40();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.AutoShortcutFirstRunModel@<X0>(uint64_t a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return WorkflowDataModels.AutoShortcutFirstRunModel.asSnippetPluginModel()(a1);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.AutoShortcutFirstRunModel(void *a1@<X8>)
{
  WorkflowDataModels.AutoShortcutFirstRunModel.init(from:)();
  if (!v1) {
    memcpy(a1, v3, 0x70uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.AutoShortcutFirstRunModel()
{
}

uint64_t static WorkflowDataModels.getThumbnail(shortcutName:defaultAppIdentifier:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[7] = v1;
  v0[8] = v2;
  v0[5] = v3;
  v0[6] = v4;
  v0[4] = v5;
  uint64_t v6 = type metadata accessor for ImageElement.ImageStyle();
  v0[9] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v0[10] = v7;
  v0[11] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for ImageElement();
  v0[12] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v0[13] = v9;
  v0[14] = OUTLINED_FUNCTION_25();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INShortcut?);
  OUTLINED_FUNCTION_16(v10);
  v0[15] = swift_task_alloc();
  v0[16] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  void (*v11)(uint64_t);
  void (*v12)(void);
  uint64_t v14;

  if (!v0[6])
  {
    OUTLINED_FUNCTION_55_10();
    uint64_t v6 = OUTLINED_FUNCTION_74_4();
    v7(v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
    type metadata accessor for _ProtoIdiom();
    OUTLINED_FUNCTION_0_2();
    uint64_t v8 = OUTLINED_FUNCTION_72_9();
    *(_OWORD *)(v8 + 16) = xmmword_212160;
    OUTLINED_FUNCTION_138_2();
    v9();
    specialized Set.init(_nonEmptyArrayLiteral:)(v8);
    OUTLINED_FUNCTION_95_2();
    swift_bridgeObjectRelease();
    uint64_t v10 = OUTLINED_FUNCTION_80_6();
    v11(v10);
    ImageElement.convertToVisualProperty()();
    OUTLINED_FUNCTION_51_5();
    v12();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_2();
    __asm { BRAA            X1, X16 }
  }
  type metadata accessor for VoiceShortcutClientWrapper();
  v0[17] = swift_initStackObject();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[18] = v1;
  *uint64_t v1 = v0;
  v1[1] = static WorkflowDataModels.getThumbnail(shortcutName:defaultAppIdentifier:);
  OUTLINED_FUNCTION_18_2();
  return VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  *(void *)(v1 + 152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v2, v3, v4);
}

void static WorkflowDataModels.getThumbnail(shortcutName:defaultAppIdentifier:)()
{
  uint64_t v2 = *(void (***)(void))(v1 + 152);
  if (v2)
  {
    id v3 = [*(id *)(v1 + 152) shortcut];
    if (v3)
    {
      uint64_t v4 = v3;
      static INShortcut._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v0 = 0;
    }
    else
    {
      uint64_t v0 = &dword_0 + 1;
    }
    uint64_t v6 = *(void *)(v1 + 120);
    uint64_t v5 = *(void *)(v1 + 128);
    uint64_t v7 = type metadata accessor for INShortcut();
    __swift_storeEnumTagSinglePayload(v6, (uint64_t)v0, 1, v7);
    _sSSSgWObTm_1(v6, v5, &demangling cache variable for type metadata for INShortcut?);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v5, 1, v7);
    uint64_t v9 = *(void *)(v1 + 128);
    if (EnumTagSinglePayload == 1)
    {

      outlined destroy of SiriWorkflowRunnerEvent?(v9, &demangling cache variable for type metadata for INShortcut?);
    }
    else
    {
      uint64_t v0 = (void *)INShortcut.intent.getter();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_66();
      v10();
      if (v0)
      {
        id v11 = [v0 _keyImage];

        uint64_t v12 = outlined bridged method (ob) of @objc INImage._imageData.getter(v11);
        if (v13 >> 60 != 15)
        {
          uint64_t v22 = v12;
          unint64_t v23 = v13;
          static WorkflowDataModels.getThumbnail(imageData:)();
          outlined consume of Data?(v22, v23);

LABEL_11:
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          OUTLINED_FUNCTION_18_2();
          __asm { BRAA            X1, X16 }
        }
      }
    }
  }
  OUTLINED_FUNCTION_55_10();
  uint64_t v14 = OUTLINED_FUNCTION_74_4();
  v15(v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  type metadata accessor for _ProtoIdiom();
  OUTLINED_FUNCTION_0_2();
  uint64_t v16 = OUTLINED_FUNCTION_72_9();
  *(_OWORD *)(v16 + 16) = xmmword_212160;
  OUTLINED_FUNCTION_138_2();
  v17();
  specialized Set.init(_nonEmptyArrayLiteral:)(v16);
  OUTLINED_FUNCTION_95_2();
  swift_bridgeObjectRelease();
  uint64_t v18 = OUTLINED_FUNCTION_80_6();
  v19(v18);
  ImageElement.convertToVisualProperty()();
  ((void (**)(void *))v2)[1](v0);
  goto LABEL_11;
}

uint64_t WorkflowDataModels.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x72656C41776F6873 && a2 == 0xED00007765695674;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4354656C62616E65 && a2 == 0xED00007765695643;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD00000000000001CLL && a2 == 0x800000000022AD10 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x800000000022AD30 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (a1 == 0xD000000000000017 && a2 == 0x800000000022AD50 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x800000000022AD70 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      BOOL v7 = a1 == 0x6569566863746177 && a2 == 0xE900000000000077;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else if (a1 == 0xD000000000000015 && a2 == 0x800000000022AD90 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      else if (a1 == 0xD000000000000020 && a2 == 0x800000000022ADB0 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 8;
      }
      else
      {
        BOOL v8 = a1 == 0x697463416B6E696CLL && a2 == 0xEE00776569566E6FLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 9;
        }
        else if (a1 == 0xD000000000000014 && a2 == 0x800000000022ADE0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 10;
        }
        else if (a1 == 0xD00000000000001ELL && a2 == 0x800000000022AE00 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 11;
        }
        else if (a1 == 0xD000000000000018 && a2 == 0x800000000022AE20)
        {
          swift_bridgeObjectRelease();
          return 12;
        }
        else
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v9) {
            return 12;
          }
          else {
            return 13;
          }
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.CodingKeys.init(intValue:)()
{
  return 13;
}

unint64_t WorkflowDataModels.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x72656C41776F6873;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4354656C62616E65;
      break;
    case 2:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 3:
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x6569566863746177;
      break;
    case 8:
      unint64_t result = 0xD000000000000020;
      break;
    case 9:
      unint64_t result = 0x697463416B6E696CLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 12:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys(uint64_t a1)
{
  unint64_t RunViewCoding = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();

  return CodingKey.description.getter(a1, RunViewCoding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys(uint64_t a1)
{
  unint64_t RunViewCoding = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, RunViewCoding);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CodingKeys()
{
  return WorkflowDataModels.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WorkflowDataModels.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = WorkflowDataModels.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ConfirmActionViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ConfirmActionViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.EnableTCCViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.EnableTCCViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkActionViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkActionViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkConfirmationViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkConfirmationViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ShowAlertViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ShowAlertViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.WatchViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.WatchViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.encode(to:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v168 = v1;
  uint64_t v170 = v0;
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  unint64_t v165 = v7;
  unint64_t v166 = v6;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_50_1();
  unint64_t v164 = v8;
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  unint64_t v162 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_23_30((uint64_t)v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v159 = v12;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_23_30((uint64_t)v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkActionViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v156 = v15;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_23_30((uint64_t)v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v153 = v18;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_23_30((uint64_t)v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.DisambiguateItemsViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v151 = v21;
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v23);
  uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.WatchViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v149 = v24;
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v26);
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ConfirmActionViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v147 = v27;
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v29);
  uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentHandledViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v145 = v30;
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_50_1();
  uint64_t v33 = OUTLINED_FUNCTION_53_4(v32);
  uint64_t v142 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(v33);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v35);
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentErrorViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v141 = v36;
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_50_1();
  uint64_t v39 = OUTLINED_FUNCTION_53_4(v38);
  uint64_t v138 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(v39);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v41);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v137 = v42;
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_50_1();
  uint64_t v45 = OUTLINED_FUNCTION_53_4(v44);
  v135[3] = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(v45);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v46);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v47);
  v135[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.EnableTCCViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  v135[2] = v48;
  __chkstk_darwin(v49);
  OUTLINED_FUNCTION_27_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ShowAlertViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  v135[1] = v50;
  __chkstk_darwin(v51);
  uint64_t v52 = OUTLINED_FUNCTION_38_18();
  type metadata accessor for WorkflowDataModels(v52);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v53);
  OUTLINED_FUNCTION_17_16();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v169 = v54;
  __chkstk_darwin(v55);
  OUTLINED_FUNCTION_24_20();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();
  uint64_t v167 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(v170, v2, (void (*)(void))type metadata accessor for WorkflowDataModels);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      unint64_t v63 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v65 = *(void *)(v2 + 16);
      unint64_t v64 = *(void *)(v2 + 24);
      uint64_t v66 = *(void *)(v2 + 32);
      unint64_t v67 = *(void *)(v2 + 40);
      LOBYTE(v171) = 1;
      lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();
      OUTLINED_FUNCTION_85_6();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v171 = v170;
      unint64_t v172 = v63;
      unint64_t v173 = v65;
      unint64_t v174 = v64;
      uint64_t v175 = v66;
      unint64_t v176 = v67;
      lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel();
      OUTLINED_FUNCTION_33_21();
      OUTLINED_FUNCTION_66();
      v68();
      OUTLINED_FUNCTION_86_5();
      OUTLINED_FUNCTION_66();
      v69();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 2u:
      uint64_t v70 = v136;
      outlined init with take of WorkflowDataModels.CustomIntentModel(v2, v136, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
      LOBYTE(v171) = 2;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();
      OUTLINED_FUNCTION_31_20();
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel and conformance WorkflowDataModels.CustomIntentConfirmationModel);
      OUTLINED_FUNCTION_81_5();
      OUTLINED_FUNCTION_66();
      v71();
      v72 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel;
      goto LABEL_7;
    case 3u:
      uint64_t v70 = v140;
      outlined init with take of WorkflowDataModels.CustomIntentModel(v2, v140, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
      LOBYTE(v171) = 3;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();
      OUTLINED_FUNCTION_31_20();
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel and conformance WorkflowDataModels.CustomIntentErrorModel);
      OUTLINED_FUNCTION_81_5();
      OUTLINED_FUNCTION_66();
      v73();
      v72 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel;
      goto LABEL_7;
    case 4u:
      uint64_t v70 = v144;
      outlined init with take of WorkflowDataModels.CustomIntentModel(v2, v144, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
      LOBYTE(v171) = 4;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();
      OUTLINED_FUNCTION_31_20();
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel and conformance WorkflowDataModels.CustomIntentHandledModel);
      OUTLINED_FUNCTION_81_5();
      OUTLINED_FUNCTION_66();
      v74();
      v72 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel;
LABEL_7:
      outlined destroy of WorkflowDataModels.CustomIntentModel(v70, (void (*)(void))v72);
      OUTLINED_FUNCTION_66();
      v75();
      goto LABEL_20;
    case 5u:
      uint64_t v76 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v77 = *(void *)(v2 + 24);
      unint64_t v166 = *(void *)(v2 + 16);
      unint64_t v164 = *(void *)(v2 + 32);
      unint64_t v162 = *(void *)(v2 + 40);
      unint64_t v78 = *(void *)(v2 + 56);
      uint64_t v163 = *(void *)(v2 + 48);
      uint64_t v79 = *(void *)(v2 + 64);
      unint64_t v80 = *(void *)(v2 + 72);
      LODWORD(v161) = *(unsigned __int8 *)(v2 + 80);
      uint64_t v81 = *(void *)(v2 + 88);
      uint64_t v82 = *(void *)(v2 + 96);
      uint64_t v160 = v81;
      LOBYTE(v171) = 5;
      lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v83 = v170;
      uint64_t v170 = v76;
      uint64_t v171 = v83;
      unint64_t v172 = v76;
      unint64_t v173 = v166;
      unint64_t v165 = v77;
      unint64_t v174 = v77;
      uint64_t v175 = v164;
      unint64_t v176 = v162;
      uint64_t v177 = v163;
      unint64_t v178 = v78;
      unint64_t v164 = v78;
      uint64_t v179 = v79;
      uint64_t v180 = v80;
      unint64_t v166 = v80;
      LOBYTE(v181) = v161;
      uint64_t v182 = v160;
      uint64_t v183 = v82;
      lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel();
      OUTLINED_FUNCTION_33_21();
      OUTLINED_FUNCTION_66();
      v84();
      OUTLINED_FUNCTION_126_1();
      OUTLINED_FUNCTION_66();
      v85();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v79, v166);
      goto LABEL_19;
    case 6u:
      unint64_t v86 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      uint64_t v87 = *(void *)(v2 + 16);
      unint64_t v88 = *(void *)(v2 + 24);
      unint64_t v89 = *(void *)(v2 + 40);
      uint64_t v163 = *(void *)(v2 + 32);
      unint64_t v90 = *(void *)(v2 + 56);
      unint64_t v162 = *(void *)(v2 + 48);
      uint64_t v91 = *(void *)(v2 + 72);
      OUTLINED_FUNCTION_116_1(*(void *)(v2 + 64));
      LOBYTE(v171) = 6;
      lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();
      OUTLINED_FUNCTION_64_7();
      uint64_t v171 = v170;
      unint64_t v172 = v86;
      unint64_t v164 = v86;
      uint64_t v170 = v87;
      unint64_t v173 = v87;
      unint64_t v174 = v88;
      unint64_t v166 = v88;
      uint64_t v175 = v163;
      unint64_t v176 = v89;
      unint64_t v165 = v89;
      uint64_t v177 = v162;
      unint64_t v178 = v90;
      uint64_t v179 = v161;
      uint64_t v180 = v91;
      lazy protocol witness table accessor for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel();
      OUTLINED_FUNCTION_33_21();
      OUTLINED_FUNCTION_66();
      v92();
      OUTLINED_FUNCTION_66();
      v93();
      swift_bridgeObjectRelease();
      outlined consume of WatchViewType(v170, v166);
      goto LABEL_13;
    case 7u:
      uint64_t v95 = *(void *)v2;
      unint64_t v94 = *(void *)(v2 + 8);
      unint64_t v96 = *(void *)(v2 + 16);
      LOBYTE(v171) = 7;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();
      OUTLINED_FUNCTION_46_16();
      uint64_t v171 = v95;
      unint64_t v172 = v94;
      unint64_t v173 = v96;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel();
      OUTLINED_FUNCTION_120_1();
      goto LABEL_12;
    case 8u:
      uint64_t v98 = *(void *)v2;
      unint64_t v97 = *(void *)(v2 + 8);
      unint64_t v99 = *(void *)(v2 + 16);
      LOBYTE(v171) = 8;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();
      OUTLINED_FUNCTION_46_16();
      uint64_t v171 = v98;
      unint64_t v172 = v97;
      unint64_t v173 = v99;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel();
      OUTLINED_FUNCTION_120_1();
LABEL_12:
      OUTLINED_FUNCTION_66();
      v100();
      OUTLINED_FUNCTION_66();
      v101();
      goto LABEL_13;
    case 9u:
      uint64_t v102 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v103 = *(void *)(v2 + 16);
      uint64_t v104 = *(void *)(v2 + 32);
      unint64_t v165 = *(void *)(v2 + 24);
      unint64_t v166 = v103;
      unint64_t v106 = *(void *)(v2 + 40);
      uint64_t v105 = *(void *)(v2 + 48);
      unint64_t v107 = *(void *)(v2 + 56);
      LOBYTE(v171) = 9;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();
      OUTLINED_FUNCTION_85_6();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v108 = v170;
      uint64_t v170 = v102;
      uint64_t v171 = v108;
      unint64_t v172 = v102;
      unint64_t v173 = v166;
      unint64_t v174 = v165;
      uint64_t v175 = v104;
      unint64_t v176 = v106;
      uint64_t v177 = v105;
      unint64_t v178 = v107;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_66();
      v109();
      OUTLINED_FUNCTION_66();
      v110();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v105, v107);
      goto LABEL_20;
    case 0xAu:
      unint64_t v111 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v112 = *(void *)(v2 + 24);
      unint64_t v166 = *(void *)(v2 + 16);
      unint64_t v113 = *(void *)(v2 + 40);
      uint64_t v163 = *(void *)(v2 + 32);
      uint64_t v114 = *(void *)(v2 + 48);
      unint64_t v162 = *(void *)(v2 + 56);
      uint64_t v115 = *(void *)(v2 + 72);
      uint64_t v160 = *(void *)(v2 + 64);
      uint64_t v116 = *(void *)(v2 + 88);
      uint64_t v157 = *(void *)(v2 + 80);
      LODWORD(v156) = *(unsigned __int8 *)(v2 + 96);
      LOBYTE(v171) = 10;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();
      OUTLINED_FUNCTION_64_7();
      uint64_t v171 = v170;
      unint64_t v172 = v111;
      unint64_t v164 = v111;
      unint64_t v165 = v112;
      unint64_t v173 = v166;
      unint64_t v174 = v112;
      uint64_t v175 = v163;
      unint64_t v176 = v113;
      unint64_t v166 = v113;
      uint64_t v170 = v114;
      uint64_t v177 = v114;
      unint64_t v117 = v162;
      unint64_t v178 = v162;
      uint64_t v179 = v160;
      uint64_t v180 = v115;
      uint64_t v181 = v157;
      uint64_t v182 = v116;
      LOBYTE(v183) = v156;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel();
      OUTLINED_FUNCTION_33_21();
      OUTLINED_FUNCTION_66();
      v118();
      OUTLINED_FUNCTION_66();
      v119();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v170, v117);
      goto LABEL_13;
    case 0xBu:
      uint64_t v121 = *(void *)v2;
      unint64_t v120 = *(void *)(v2 + 8);
      unint64_t v122 = *(void *)(v2 + 24);
      unint64_t v165 = *(void *)(v2 + 16);
      unint64_t v166 = v120;
      unint64_t v123 = *(void *)(v2 + 40);
      unint64_t v164 = *(void *)(v2 + 32);
      unint64_t v124 = *(void *)(v2 + 56);
      OUTLINED_FUNCTION_116_1(*(void *)(v2 + 48));
      uint64_t v125 = *(void *)(v2 + 72);
      uint64_t v159 = *(void *)(v2 + 64);
      LOBYTE(v171) = 11;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();
      OUTLINED_FUNCTION_46_16();
      uint64_t v170 = v121;
      uint64_t v171 = v121;
      unint64_t v172 = v166;
      unint64_t v173 = v165;
      unint64_t v174 = v122;
      uint64_t v175 = v164;
      unint64_t v166 = v123;
      unint64_t v176 = v123;
      uint64_t v177 = v161;
      unint64_t v178 = v124;
      uint64_t v179 = v159;
      uint64_t v180 = v125;
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_33_21();
      OUTLINED_FUNCTION_66();
      v126();
      OUTLINED_FUNCTION_66();
      v127();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    case 0xCu:
      uint64_t v128 = *(void *)v2;
      unint64_t v162 = *(void *)(v2 + 8);
      unint64_t v129 = *(void *)(v2 + 24);
      OUTLINED_FUNCTION_116_1(*(void *)(v2 + 16));
      uint64_t v160 = *(void *)(v2 + 32);
      unint64_t v158 = *(void *)(v2 + 40);
      unint64_t v130 = *(void *)(v2 + 56);
      uint64_t v159 = *(void *)(v2 + 48);
      uint64_t v157 = *(void *)(v2 + 64);
      uint64_t v170 = *(void *)(v2 + 72);
      uint64_t v131 = *(void *)(v2 + 88);
      uint64_t v156 = *(void *)(v2 + 80);
      uint64_t v132 = *(void *)(v2 + 104);
      uint64_t v155 = *(void *)(v2 + 96);
      LOBYTE(v171) = 12;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();
      OUTLINED_FUNCTION_85_6();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v163 = v128;
      uint64_t v171 = v128;
      unint64_t v172 = v162;
      unint64_t v173 = v161;
      unint64_t v162 = v129;
      unint64_t v174 = v129;
      uint64_t v175 = v160;
      unint64_t v176 = v158;
      uint64_t v177 = v159;
      unint64_t v178 = v130;
      uint64_t v179 = v157;
      uint64_t v180 = v170;
      uint64_t v181 = v156;
      uint64_t v182 = v131;
      uint64_t v161 = v131;
      uint64_t v183 = v155;
      uint64_t v184 = v132;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_86_5();
      OUTLINED_FUNCTION_66();
      v133();
      OUTLINED_FUNCTION_66();
      v134();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    default:
      unint64_t v56 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v57 = *(void *)(v2 + 16);
      unint64_t v58 = *(void *)(v2 + 24);
      unint64_t v59 = *(void *)(v2 + 40);
      unint64_t v165 = *(void *)(v2 + 32);
      unint64_t v166 = v57;
      unint64_t v60 = *(void *)(v2 + 56);
      unint64_t v164 = *(void *)(v2 + 48);
      LOBYTE(v171) = 0;
      lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v171 = v170;
      unint64_t v172 = v56;
      unint64_t v173 = v166;
      unint64_t v174 = v58;
      uint64_t v175 = v165;
      unint64_t v176 = v59;
      uint64_t v177 = v164;
      unint64_t v178 = v60;
      lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_66();
      v61();
      OUTLINED_FUNCTION_66();
      v62();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_13:
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
LABEL_20:
      OUTLINED_FUNCTION_10_40();
      return;
  }
}

void WorkflowDataModels.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_116_1(v4);
  uint64_t v209 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v211 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_23_30((uint64_t)&v170 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v195 = v8;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v10);
  uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v194 = v11;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_23_30((uint64_t)&v170 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkActionViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v193 = v14;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v16);
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v192 = v17;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v19);
  uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.DisambiguateItemsViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v191 = v20;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_23_30((uint64_t)&v170 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v203 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.WatchViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v190 = v23;
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v25);
  uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ConfirmActionViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v189 = v26;
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v28);
  uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentHandledViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v188 = v29;
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_50_1();
  uint64_t v217 = v31;
  uint64_t v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentErrorViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v187 = v32;
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_50_1();
  uint64_t v216 = v34;
  uint64_t v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v186 = v35;
  __chkstk_darwin(v36);
  OUTLINED_FUNCTION_23_30((uint64_t)&v170 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.EnableTCCViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v185 = v38;
  __chkstk_darwin(v39);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v40);
  uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ShowAlertViewCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v184 = v41;
  __chkstk_darwin(v42);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_23_30(v43);
  uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v213 = v44;
  __chkstk_darwin(v45);
  OUTLINED_FUNCTION_27_6();
  uint64_t v212 = type metadata accessor for WorkflowDataModels(0);
  OUTLINED_FUNCTION_6();
  __chkstk_darwin(v46);
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v47);
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v48);
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v49);
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v50);
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v51);
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v52);
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v53);
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_21_12();
  __chkstk_darwin(v54);
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_21_12();
  uint64_t v56 = __chkstk_darwin(v55);
  unint64_t v58 = (char *)&v170 - v57;
  uint64_t v59 = __chkstk_darwin(v56);
  v61 = (char *)&v170 - v60;
  uint64_t v62 = __chkstk_darwin(v59);
  unint64_t v64 = (char *)&v170 - v63;
  uint64_t v65 = __chkstk_darwin(v62);
  unint64_t v67 = (__n128 *)((char *)&v170 - v66);
  __chkstk_darwin(v65);
  v69 = (char *)&v170 - v68;
  uint64_t v70 = v3[3];
  v218 = v3;
  __swift_project_boxed_opaque_existential_1(v3, v70);
  lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();
  uint64_t v214 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0) {
    goto LABEL_7;
  }
  unint64_t v172 = v67;
  unint64_t v173 = v64;
  unint64_t v174 = v61;
  uint64_t v175 = v58;
  uint64_t v224 = (uint64_t)v69;
  uint64_t v71 = v214;
  uint64_t v72 = v215;
  uint64_t v73 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v74 = *(void *)(v73 + 16);
  uint64_t v75 = v71;
  if (!v74
    || (uint64_t v171 = 0,
        uint64_t v76 = *(unsigned __int8 *)(v73 + 32),
        uint64_t v77 = specialized ArraySlice.subscript.getter(1, v74, v73, v73 + 32, 0, (2 * v74) | 1),
        uint64_t v79 = v78,
        unint64_t v81 = v80,
        swift_bridgeObjectRelease(),
        uint64_t v82 = v77,
        v79 != v81 >> 1))
  {
    uint64_t v84 = v213;
    uint64_t v85 = v212;
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v87 = v86;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v87 = v85;
    KeyedDecodingContainer.codingPath.getter();
    OUTLINED_FUNCTION_100_2();
    OUTLINED_FUNCTION_40();
    uint64_t v88 = OUTLINED_FUNCTION_124_2();
    v89(v88);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v75, v72);
LABEL_7:
    uint64_t v76 = (uint64_t)v218;
    goto LABEL_8;
  }
  uint64_t v83 = v171;
  switch(v76)
  {
    case 1:
      v219[0].n128_u8[0] = 1;
      lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (!v83)
      {
        OUTLINED_FUNCTION_66();
        v139();
        swift_unknownObjectRelease();
        uint64_t v140 = OUTLINED_FUNCTION_4_44();
        v141(v140);
        uint64_t v142 = (uint64_t)v173;
        OUTLINED_FUNCTION_107_1(v219[1].n128_u64[0], v219[0]);
        OUTLINED_FUNCTION_25_20();
        swift_storeEnumTagMultiPayload();
        uint64_t v143 = v142;
        uint64_t v160 = v224;
        outlined init with take of WorkflowDataModels.CustomIntentModel(v143, v224, (void (*)(void))type metadata accessor for WorkflowDataModels);
        goto LABEL_30;
      }
      OUTLINED_FUNCTION_66();
      v90();
      swift_unknownObjectRelease();
      uint64_t v91 = OUTLINED_FUNCTION_4_44();
      v92(v91);
      break;
    case 2:
      v219[0].n128_u8[0] = 2;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel and conformance WorkflowDataModels.CustomIntentConfirmationModel);
      uint64_t v93 = (uint64_t)v174;
      OUTLINED_FUNCTION_121_0();
      OUTLINED_FUNCTION_66();
      v144();
      swift_unknownObjectRelease();
      uint64_t v145 = OUTLINED_FUNCTION_99_0();
      v146(v145);
      swift_storeEnumTagMultiPayload();
      uint64_t v147 = v93;
      goto LABEL_29;
    case 3:
      v219[0].n128_u8[0] = 3;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel and conformance WorkflowDataModels.CustomIntentErrorModel);
      uint64_t v132 = (uint64_t)v175;
      OUTLINED_FUNCTION_121_0();
      OUTLINED_FUNCTION_39_16();
      OUTLINED_FUNCTION_66();
      v157();
      swift_unknownObjectRelease();
      uint64_t v158 = OUTLINED_FUNCTION_4_44();
      v159(v158);
      swift_storeEnumTagMultiPayload();
      uint64_t v160 = v224;
      outlined init with take of WorkflowDataModels.CustomIntentModel(v132, v224, (void (*)(void))type metadata accessor for WorkflowDataModels);
      uint64_t v76 = (uint64_t)v218;
      goto LABEL_30;
    case 4:
      v219[0].n128_u8[0] = 4;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      uint64_t v216 = v82;
      type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel and conformance WorkflowDataModels.CustomIntentHandledModel);
      uint64_t v94 = v196;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_39_16();
      if (v83)
      {
        OUTLINED_FUNCTION_66();
        v95();
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_66();
      v148();
      swift_unknownObjectRelease();
      uint64_t v149 = OUTLINED_FUNCTION_4_44();
      v150(v149);
      swift_storeEnumTagMultiPayload();
      uint64_t v147 = v94;
      goto LABEL_29;
    case 5:
      v219[0].n128_u8[0] = 5;
      lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_39_16();
      OUTLINED_FUNCTION_66();
      v96();
      swift_unknownObjectRelease();
      uint64_t v97 = OUTLINED_FUNCTION_4_44();
      v98(v97);
      __n128 v99 = v219[1];
      __n128 v100 = v219[2];
      __n128 v101 = v220;
      unsigned __int8 v102 = v222[0];
      uint64_t v136 = v176;
      *unint64_t v176 = v219[0];
      v136[1] = v99;
      v136[2] = v100;
      v136[3] = v101;
      v136[4] = v221;
      v136[5].n128_u8[0] = v102;
      *(__n128 *)((char *)v136 + 88) = *(__n128 *)&v222[8];
      OUTLINED_FUNCTION_25_20();
      goto LABEL_28;
    case 6:
      v219[0].n128_u8[0] = 6;
      lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_39_16();
      OUTLINED_FUNCTION_66();
      v103();
      swift_unknownObjectRelease();
      uint64_t v104 = OUTLINED_FUNCTION_4_44();
      v105(v104);
      __n128 v106 = v219[1];
      uint64_t v136 = v177;
      *uint64_t v177 = v219[0];
      v136[1] = v106;
      __n128 v107 = v220;
      v136[2] = v219[2];
      v136[3] = v107;
      v136[4] = v221;
      OUTLINED_FUNCTION_25_20();
      goto LABEL_28;
    case 7:
      v219[0].n128_u8[0] = 7;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_39_16();
      OUTLINED_FUNCTION_66();
      v108();
      swift_unknownObjectRelease();
      uint64_t v109 = OUTLINED_FUNCTION_4_44();
      v110(v109);
      unint64_t v111 = v219[1].n128_u64[0];
      uint64_t v136 = v178;
      *unint64_t v178 = v219[0];
      v136[1].n128_u64[0] = v111;
      OUTLINED_FUNCTION_25_20();
      goto LABEL_28;
    case 8:
      v219[0].n128_u8[0] = 8;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_39_16();
      OUTLINED_FUNCTION_66();
      v112();
      swift_unknownObjectRelease();
      uint64_t v113 = OUTLINED_FUNCTION_4_44();
      v114(v113);
      unint64_t v115 = v219[1].n128_u64[0];
      uint64_t v136 = v179;
      *uint64_t v179 = v219[0];
      v136[1].n128_u64[0] = v115;
      OUTLINED_FUNCTION_25_20();
      goto LABEL_28;
    case 9:
      v219[0].n128_u8[0] = 9;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_39_16();
      OUTLINED_FUNCTION_66();
      v116();
      swift_unknownObjectRelease();
      uint64_t v117 = OUTLINED_FUNCTION_4_44();
      v118(v117);
      unint64_t v119 = v219[0].n128_u64[1];
      uint64_t v136 = v180;
      v180->n128_u64[0] = v219[0].n128_u64[0];
      v136->n128_u64[1] = v119;
      __n128 v120 = v219[2];
      v136[1] = v219[1];
      v136[2] = v120;
      v136[3] = v220;
      OUTLINED_FUNCTION_25_20();
      goto LABEL_28;
    case 10:
      v219[0].n128_u8[0] = 10;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_39_16();
      OUTLINED_FUNCTION_66();
      v121();
      swift_unknownObjectRelease();
      uint64_t v122 = OUTLINED_FUNCTION_4_44();
      v123(v122);
      unint64_t v124 = v219[0].n128_u64[1];
      unint64_t v125 = *(void *)v222;
      unint64_t v126 = *(void *)&v222[8];
      unsigned __int8 v127 = v222[16];
      uint64_t v136 = v181;
      v181->n128_u64[0] = v219[0].n128_u64[0];
      v136->n128_u64[1] = v124;
      __n128 v128 = v219[2];
      v136[1] = v219[1];
      v136[2] = v128;
      __n128 v129 = v221;
      v136[3] = v220;
      v136[4] = v129;
      v136[5].n128_u64[0] = v125;
      v136[5].n128_u64[1] = v126;
      v136[6].n128_u8[0] = v127;
      OUTLINED_FUNCTION_25_20();
      goto LABEL_28;
    case 11:
      v219[0].n128_u8[0] = 11;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_39_16();
      OUTLINED_FUNCTION_66();
      v151();
      swift_unknownObjectRelease();
      uint64_t v152 = OUTLINED_FUNCTION_4_44();
      v153(v152);
      __n128 v154 = *(__n128 *)((char *)&v219[1] + 8);
      unint64_t v155 = v219[2].n128_u64[1];
      uint64_t v136 = v182;
      v182->n128_u64[0] = v219[0].n128_u64[0];
      *(__n128 *)((char *)v136 + 8) = *(__n128 *)((char *)v219 + 8);
      *(__n128 *)((char *)v136 + 24) = v154;
      v136[2].n128_u64[1] = v155;
      __n128 v156 = v221;
      v136[3] = v220;
      v136[4] = v156;
      OUTLINED_FUNCTION_25_20();
      goto LABEL_28;
    case 12:
      v219[0].n128_u8[0] = 12;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_39_16();
      if (v83)
      {
        OUTLINED_FUNCTION_10_27();
        v133();
LABEL_22:
        swift_unknownObjectRelease();
        uint64_t v130 = OUTLINED_FUNCTION_4_44();
        v131(v130);
      }
      else
      {
        OUTLINED_FUNCTION_10_27();
        v161();
        swift_unknownObjectRelease();
        uint64_t v162 = OUTLINED_FUNCTION_4_44();
        v163(v162);
        __n128 v164 = *(__n128 *)((char *)&v219[1] + 8);
        unint64_t v165 = v219[2].n128_u64[1];
        unint64_t v166 = *(void *)&v222[16];
        unint64_t v167 = v223;
        uint64_t v136 = v183;
        v183->n128_u64[0] = v219[0].n128_u64[0];
        *(__n128 *)((char *)v136 + 8) = *(__n128 *)((char *)v219 + 8);
        *(__n128 *)((char *)v136 + 24) = v164;
        v136[2].n128_u64[1] = v165;
        __n128 v169 = v221;
        __n128 v168 = *(__n128 *)v222;
        v136[3] = v220;
        v136[4] = v169;
        v136[5] = v168;
        v136[6].n128_u64[0] = v166;
        v136[6].n128_u64[1] = v167;
        OUTLINED_FUNCTION_25_20();
LABEL_28:
        swift_storeEnumTagMultiPayload();
        uint64_t v147 = (uint64_t)v136;
LABEL_29:
        uint64_t v160 = v224;
        outlined init with take of WorkflowDataModels.CustomIntentModel(v147, v224, (void (*)(void))type metadata accessor for WorkflowDataModels);
LABEL_30:
        outlined init with take of WorkflowDataModels.CustomIntentModel(v160, v210, (void (*)(void))type metadata accessor for WorkflowDataModels);
      }
      break;
    default:
      v219[0].n128_u8[0] = 0;
      lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();
      OUTLINED_FUNCTION_11_39();
      OUTLINED_FUNCTION_35_18();
      lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel();
      OUTLINED_FUNCTION_121_0();
      OUTLINED_FUNCTION_66();
      v134();
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_66();
      v135();
      uint64_t v136 = v172;
      OUTLINED_FUNCTION_107_1(v219[1].n128_u64[0], v219[0]);
      v136[3].n128_u64[0] = v137;
      v136[3].n128_u64[1] = v138;
      OUTLINED_FUNCTION_25_20();
      goto LABEL_28;
  }
LABEL_8:
  __swift_destroy_boxed_opaque_existential_1Tm(v76);
  OUTLINED_FUNCTION_62_9();
  OUTLINED_FUNCTION_10_40();
}

uint64_t protocol witness for SnippetPluginModel.snippetHidden(for:idiom:) in conformance WorkflowDataModels()
{
  return SnippetPluginModel.snippetHidden(for:idiom:)();
}

uint64_t WatchViewType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x616D7269666E6F63 && a2 == 0xEC0000006E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64656C646E6168 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t WatchViewType.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x64656C646E6168;
  }
  else {
    return 0x616D7269666E6F63;
  }
}

uint64_t WatchViewType.ConfirmationCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t WatchViewType.ConfirmationCodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t WatchViewType.HandledCodingKeys.init(stringValue:)()
{
  return 1;
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels()
{
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance AutoShortcutAppPhrasesViewModel@<X0>(void *a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WatchViewType.CodingKeys()
{
  return WorkflowDialogTemplatingError.hashValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WatchViewType.CodingKeys()
{
  return WatchViewType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchViewType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WatchViewType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchViewType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchViewType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WatchViewType.ConfirmationCodingKeys()
{
  return WatchViewType.ConfirmationCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchViewType.ConfirmationCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WatchViewType.ConfirmationCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchViewType.ConfirmationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchViewType.ConfirmationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchViewType.HandledCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = WatchViewType.HandledCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchViewType.HandledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchViewType.HandledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WatchViewType.encode(to:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v11 = v1;
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchViewType.HandledCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_23_23();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchViewType.ConfirmationCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_56();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchViewType.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_3_23();
  OUTLINED_FUNCTION_122_0(v3);
  lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v11)
  {
    lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v0) {
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    OUTLINED_FUNCTION_86_5();
    OUTLINED_FUNCTION_66();
    v7();
    OUTLINED_FUNCTION_51_5();
    v8();
  }
  else
  {
    lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    OUTLINED_FUNCTION_126_1();
    OUTLINED_FUNCTION_66();
    v9();
    OUTLINED_FUNCTION_51_5();
    v10();
  }
  OUTLINED_FUNCTION_10_40();
}

void WatchViewType.init(from:)()
{
  OUTLINED_FUNCTION_9_42();
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchViewType.HandledCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_2_27();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchViewType.ConfirmationCodingKeys>);
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_27_6();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchViewType.CodingKeys>);
  OUTLINED_FUNCTION_0_2();
  uint64_t v22 = v7;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_56();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();
  OUTLINED_FUNCTION_147_1();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0) {
    goto LABEL_7;
  }
  uint64_t v21 = (uint64_t)v3;
  uint64_t v9 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10
    || (char v11 = *(unsigned char *)(v9 + 32),
        specialized ArraySlice.subscript.getter(1, v10, v9, v9 + 32, 0, (2 * v10) | 1),
        uint64_t v13 = v12,
        unint64_t v15 = v14,
        swift_bridgeObjectRelease(),
        v13 != v15 >> 1))
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v17 = &type metadata for WatchViewType;
    KeyedDecodingContainer.codingPath.getter();
    OUTLINED_FUNCTION_100_2();
    OUTLINED_FUNCTION_40();
    (*(void (**)(void *))(v18 + 104))(v17);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1, v6);
    uint64_t v3 = (void *)v21;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
    goto LABEL_8;
  }
  if (v11)
  {
    lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();
    OUTLINED_FUNCTION_108_1();
    OUTLINED_FUNCTION_86_5();
    OUTLINED_FUNCTION_66();
  }
  else
  {
    lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();
    OUTLINED_FUNCTION_108_1();
    KeyedDecodingContainer.decode(_:forKey:)();
    KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_10_27();
  }
  v19();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_37_11();
  v20();
  __swift_destroy_boxed_opaque_existential_1Tm(v21);
LABEL_8:
  OUTLINED_FUNCTION_119_2();
  OUTLINED_FUNCTION_10_40();
}

void protocol witness for Decodable.init(from:) in conformance WatchViewType(void *a1@<X8>)
{
  WatchViewType.init(from:)();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
}

void protocol witness for Encodable.encode(to:) in conformance WatchViewType()
{
}

uint64_t outlined retain of WorkflowDataModels.AutoShortcutFirstRunModel(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentConfirmationModel);
}

uint64_t outlined retain of WorkflowDataModels.LinkConfirmationModel(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of AutoShortcutAppPhrasesViewModel(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of WorkflowDataModels.ShowAlertModel(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }
  return result;
}

uint64_t outlined copy of WatchViewType(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of WorkflowDataModels.WatchModel(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  outlined copy of WatchViewType(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchViewType and conformance WatchViewType()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType;
  if (!lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType;
  if (!lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType);
  }
  return result;
}

uint64_t outlined consume of WatchViewType(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_87_4(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_6_6();
  v5(v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of WorkflowDataModels.CustomIntentModel(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_66();
  v3();
  return a1;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_87_4(a1);
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for WorkflowDataModels.DisambiguationItemModel(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.DisambiguationItemModel);
}

unint64_t lazy protocol witness table accessor for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A](uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_87_4(a1);
  if (!result)
  {
    OUTLINED_FUNCTION_88_4();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction(v2);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }
  return result;
}

uint64_t outlined copy of WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result = a2;
  if (a4 < 2u)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (a4 == 2)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result = a2;
  if (a4 < 2u)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (a4 == 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of WorkflowDataModels.LinkActionModel(void *a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel);
  }
  return result;
}

uint64_t outlined init with copy of AutoShortcutAppPhrasesViewModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }
  return result;
}

uint64_t _sSSSgWObTm_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_20_8();
  v4();
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel);
  }
  return result;
}

uint64_t outlined init with take of WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_20_8();
  v4();
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys);
  }
  return result;
}

unint64_t base witness table accessor for Decodable in WorkflowDataModels.CustomIntentConfirmationModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel and conformance WorkflowDataModels.CustomIntentConfirmationModel);
}

unint64_t base witness table accessor for Encodable in WorkflowDataModels.CustomIntentConfirmationModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel and conformance WorkflowDataModels.CustomIntentConfirmationModel);
}

unint64_t base witness table accessor for Decodable in WorkflowDataModels.CustomIntentHandledModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel and conformance WorkflowDataModels.CustomIntentHandledModel);
}

unint64_t base witness table accessor for Encodable in WorkflowDataModels.CustomIntentHandledModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel and conformance WorkflowDataModels.CustomIntentHandledModel);
}

unint64_t base witness table accessor for Decodable in WorkflowDataModels.CustomIntentErrorModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel and conformance WorkflowDataModels.CustomIntentErrorModel);
}

unint64_t base witness table accessor for Encodable in WorkflowDataModels.CustomIntentErrorModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel and conformance WorkflowDataModels.CustomIntentErrorModel);
}

void *associated type witness table accessor for Identifiable.ID : Hashable in WorkflowDataModels.DisambiguationItemModel()
{
  return &protocol witness table for ObjectIdentifier;
}

unint64_t base witness table accessor for Decodable in WorkflowDataModels()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels);
}

unint64_t base witness table accessor for Encodable in WorkflowDataModels()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels);
}

uint64_t initializeBufferWithCopyOfBuffer for WorkflowDataModels(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v12 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v12;
        uint64_t v13 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v13;
        uint64_t v14 = a2[4];
        uint64_t v15 = a2[5];
        *(void *)(a1 + 32) = v14;
        *(void *)(a1 + 40) = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        uint64_t v17 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v18 = v17[5];
        uint64_t v19 = a1 + v18;
        uint64_t v20 = (uint64_t)a2 + v18;
        uint64_t v21 = type metadata accessor for CodableINInteraction();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
        uint64_t v22 = v17[6];
        uint64_t v23 = (void *)(a1 + v22);
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
          __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
        }
        uint64_t v77 = v17[7];
        uint64_t v78 = (void *)(a1 + v77);
        uint64_t v79 = (uint64_t *)((char *)a2 + v77);
        uint64_t v80 = v79[1];
        *uint64_t v78 = *v79;
        v78[1] = v80;
        uint64_t v81 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
        uint64_t v82 = *(int *)(v81 + 20);
        uint64_t v83 = (void *)(a1 + v82);
        uint64_t v84 = (uint64_t *)((char *)a2 + v82);
        uint64_t v85 = v84[1];
        *uint64_t v83 = *v84;
        v83[1] = v85;
        uint64_t v86 = *(int *)(v81 + 24);
        uint64_t v87 = (void *)(a1 + v86);
        uint64_t v88 = (uint64_t *)((char *)a2 + v86);
        uint64_t v89 = v88[1];
        *uint64_t v87 = *v88;
        v87[1] = v89;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v27 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v27;
        uint64_t v28 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
        uint64_t v29 = a1 + v28;
        uint64_t v30 = (uint64_t)a2 + v28;
        swift_bridgeObjectRetain();
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
        break;
      case 4u:
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
        uint64_t v33 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v34 = v33[5];
        uint64_t v35 = a1 + v34;
        uint64_t v36 = (uint64_t)a2 + v34;
        uint64_t v37 = type metadata accessor for CodableINInteraction();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
        uint64_t v38 = v33[6];
        uint64_t v39 = (void *)(a1 + v38);
        uint64_t v40 = (char *)a2 + v38;
        uint64_t v41 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v41))
        {
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v39, v40, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
          __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v41);
        }
        uint64_t v90 = v33[7];
        uint64_t v91 = (void *)(a1 + v90);
        v92 = (uint64_t *)((char *)a2 + v90);
        uint64_t v93 = v92[1];
        *uint64_t v91 = *v92;
        v91[1] = v93;
        uint64_t v94 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
        uint64_t v95 = v94[5];
        unint64_t v96 = (void *)(a1 + v95);
        uint64_t v97 = (uint64_t *)((char *)a2 + v95);
        uint64_t v98 = v97[1];
        *unint64_t v96 = *v97;
        v96[1] = v98;
        uint64_t v99 = v94[6];
        __n128 v100 = (void *)(a1 + v99);
        __n128 v101 = (char *)a2 + v99;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v101, 1, v102))
        {
          uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
          memcpy(v100, v101, *(void *)(*(void *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v102 - 8) + 16))(v100, v101, v102);
          __swift_storeEnumTagSinglePayload((uint64_t)v100, 0, 1, v102);
        }
        *(unsigned char *)(a1 + v94[7]) = *((unsigned char *)a2 + v94[7]);
        break;
      case 5u:
        uint64_t v43 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v43;
        uint64_t v44 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v44;
        uint64_t v45 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v45;
        uint64_t v46 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v46;
        uint64_t v47 = a2 + 8;
        unint64_t v48 = a2[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v48 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v47;
        }
        else
        {
          uint64_t v71 = *v47;
          outlined copy of Data._Representation(*v47, v48);
          *(void *)(a1 + 64) = v71;
          *(void *)(a1 + 72) = v48;
        }
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        uint64_t v72 = a2[12];
        *(void *)(a1 + 88) = a2[11];
        *(void *)(a1 + 96) = v72;
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v49 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v49;
        uint64_t v50 = a2[3];
        swift_bridgeObjectRetain();
        if (v50)
        {
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v50;
          uint64_t v51 = a2[5];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = v51;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v104 = *((_OWORD *)a2 + 2);
          *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
          *(_OWORD *)(a1 + 32) = v104;
        }
        uint64_t v105 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v105;
        uint64_t v106 = a2[8];
        uint64_t v107 = a2[9];
        *(void *)(a1 + 64) = v106;
        *(void *)(a1 + 72) = v107;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 7u:
      case 8u:
        uint64_t v52 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v52;
        *(void *)(a1 + 16) = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 9u:
        uint64_t v53 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v53;
        uint64_t v54 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v54;
        uint64_t v55 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v55;
        uint64_t v56 = a2 + 6;
        unint64_t v57 = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v57 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v56;
        }
        else
        {
          uint64_t v73 = *v56;
          outlined copy of Data._Representation(*v56, v57);
          *(void *)(a1 + 48) = v73;
          *(void *)(a1 + 56) = v57;
        }
        break;
      case 0xAu:
        uint64_t v58 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v58;
        uint64_t v59 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v59;
        uint64_t v60 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v60;
        v61 = a2 + 6;
        unint64_t v62 = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v62 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v61;
        }
        else
        {
          uint64_t v74 = *v61;
          outlined copy of Data._Representation(*v61, v62);
          *(void *)(a1 + 48) = v74;
          *(void *)(a1 + 56) = v62;
        }
        uint64_t v75 = a2[9];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = v75;
        uint64_t v76 = a2[11];
        *(void *)(a1 + 80) = a2[10];
        *(void *)(a1 + 88) = v76;
        *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 0xBu:
        *(void *)a1 = *a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        uint64_t v63 = a2[4];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = v63;
        uint64_t v64 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v64;
        uint64_t v65 = a2[8];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = v65;
        *(void *)(a1 + 72) = a2[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 0xCu:
        *(void *)a1 = *a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        uint64_t v66 = a2[4];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = v66;
        uint64_t v67 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v67;
        uint64_t v68 = a2[8];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = v68;
        uint64_t v69 = a2[10];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = v69;
        uint64_t v70 = a2[12];
        *(void *)(a1 + 88) = a2[11];
        *(void *)(a1 + 96) = v70;
        *(void *)(a1 + 104) = a2[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v6;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v8;
        uint64_t v9 = a2[6];
        uint64_t v10 = a2[7];
        *(void *)(a1 + 48) = v9;
        *(void *)(a1 + 56) = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels(void *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_29;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_29;
    case 2:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(void *, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      uint64_t v4 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      int v5 = (char *)a1 + *(int *)(v4 + 20);
      uint64_t v6 = type metadata accessor for CodableINInteraction();
      (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      uint64_t v7 = (uint64_t)a1 + *(int *)(v4 + 24);
      uint64_t v8 = type metadata accessor for VisualProperty();
      if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      }
      swift_bridgeObjectRelease();
      type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
      swift_bridgeObjectRelease();
      goto LABEL_29;
    case 3:
      swift_bridgeObjectRelease();
      uint64_t v9 = (char *)a1 + *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
      uint64_t v12 = v10;
      uint64_t v13 = (uint64_t)v9;
      goto LABEL_13;
    case 4:
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(void *, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
      uint64_t v15 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v16 = (char *)a1 + *(int *)(v15 + 20);
      uint64_t v17 = type metadata accessor for CodableINInteraction();
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
      uint64_t v18 = (uint64_t)a1 + *(int *)(v15 + 24);
      uint64_t v19 = type metadata accessor for VisualProperty();
      if (!__swift_getEnumTagSinglePayload(v18, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
      swift_bridgeObjectRelease();
      uint64_t v21 = (uint64_t)a1 + *(int *)(v20 + 24);
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
      uint64_t result = __swift_getEnumTagSinglePayload(v21, 1, v22);
      if (result) {
        return result;
      }
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
      uint64_t v13 = v21;
      uint64_t v12 = v22;
LABEL_13:
      return v11(v13, v12);
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v23 = a1[9];
      if (v23 >> 60 != 15) {
        outlined consume of Data._Representation(a1[8], v23);
      }
      goto LABEL_29;
    case 6:
      swift_bridgeObjectRelease();
      if (!a1[3]) {
        goto LABEL_2;
      }
      goto LABEL_27;
    case 7:
    case 8:
      goto LABEL_2;
    case 9:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v24 = a1[7];
      if (v24 >> 60 != 15)
      {
        uint64_t v26 = a1[6];
        return outlined consume of Data._Representation(v26, v24);
      }
      return result;
    case 10:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v25 = a1[7];
      if (v25 >> 60 != 15) {
        outlined consume of Data._Representation(a1[6], v25);
      }
      goto LABEL_2;
    case 11:
      swift_bridgeObjectRelease();
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      goto LABEL_29;
    case 12:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_29:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for WorkflowDataModels(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v9;
      uint64_t v10 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v10;
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t v12 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 2u:
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
      uint64_t v14 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = type metadata accessor for CodableINInteraction();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      uint64_t v19 = v14[6];
      uint64_t v20 = (void *)(a1 + v19);
      uint64_t v21 = (const void *)(a2 + v19);
      uint64_t v22 = type metadata accessor for VisualProperty();
      if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
        __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
      }
      uint64_t v74 = v14[7];
      uint64_t v75 = (void *)(a1 + v74);
      uint64_t v76 = (void *)(a2 + v74);
      uint64_t v77 = v76[1];
      *uint64_t v75 = *v76;
      v75[1] = v77;
      uint64_t v78 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
      uint64_t v79 = *(int *)(v78 + 20);
      uint64_t v80 = (void *)(a1 + v79);
      uint64_t v81 = (void *)(a2 + v79);
      uint64_t v82 = v81[1];
      *uint64_t v80 = *v81;
      v80[1] = v82;
      uint64_t v83 = *(int *)(v78 + 24);
      uint64_t v84 = (void *)(a1 + v83);
      uint64_t v85 = (void *)(a2 + v83);
      uint64_t v86 = v85[1];
      *uint64_t v84 = *v85;
      v84[1] = v86;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v24 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v24;
      uint64_t v25 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      swift_bridgeObjectRetain();
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      break;
    case 4u:
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
      uint64_t v30 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v31 = v30[5];
      uint64_t v32 = a1 + v31;
      uint64_t v33 = a2 + v31;
      uint64_t v34 = type metadata accessor for CodableINInteraction();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
      uint64_t v35 = v30[6];
      uint64_t v36 = (void *)(a1 + v35);
      uint64_t v37 = (const void *)(a2 + v35);
      uint64_t v38 = type metadata accessor for VisualProperty();
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
        memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
        __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      }
      uint64_t v87 = v30[7];
      uint64_t v88 = (void *)(a1 + v87);
      uint64_t v89 = (void *)(a2 + v87);
      uint64_t v90 = v89[1];
      *uint64_t v88 = *v89;
      v88[1] = v90;
      uint64_t v91 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
      uint64_t v92 = v91[5];
      uint64_t v93 = (void *)(a1 + v92);
      uint64_t v94 = (void *)(a2 + v92);
      uint64_t v95 = v94[1];
      *uint64_t v93 = *v94;
      v93[1] = v95;
      uint64_t v96 = v91[6];
      uint64_t v97 = (void *)(a1 + v96);
      uint64_t v98 = (const void *)(a2 + v96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
      if (__swift_getEnumTagSinglePayload((uint64_t)v98, 1, v99))
      {
        uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
        memcpy(v97, v98, *(void *)(*(void *)(v100 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v99 - 8) + 16))(v97, v98, v99);
        __swift_storeEnumTagSinglePayload((uint64_t)v97, 0, 1, v99);
      }
      *(unsigned char *)(a1 + v91[7]) = *(unsigned char *)(a2 + v91[7]);
      break;
    case 5u:
      uint64_t v40 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v40;
      uint64_t v41 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v41;
      uint64_t v42 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v42;
      uint64_t v43 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v43;
      uint64_t v44 = (uint64_t *)(a2 + 64);
      unint64_t v45 = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v45 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)v44;
      }
      else
      {
        uint64_t v68 = *v44;
        outlined copy of Data._Representation(*v44, v45);
        *(void *)(a1 + 64) = v68;
        *(void *)(a1 + 72) = v45;
      }
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      uint64_t v69 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v69;
      swift_bridgeObjectRetain();
      break;
    case 6u:
      uint64_t v46 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v46;
      uint64_t v47 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      if (v47)
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v47;
        uint64_t v48 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v48;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v101 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = v101;
      }
      uint64_t v102 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v102;
      uint64_t v103 = *(void *)(a2 + 64);
      uint64_t v104 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v103;
      *(void *)(a1 + 72) = v104;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 7u:
    case 8u:
      uint64_t v49 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v49;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 9u:
      uint64_t v50 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v50;
      uint64_t v51 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v51;
      uint64_t v52 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v52;
      uint64_t v53 = (uint64_t *)(a2 + 48);
      unint64_t v54 = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v54 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)v53;
      }
      else
      {
        uint64_t v70 = *v53;
        outlined copy of Data._Representation(*v53, v54);
        *(void *)(a1 + 48) = v70;
        *(void *)(a1 + 56) = v54;
      }
      break;
    case 0xAu:
      uint64_t v55 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v55;
      uint64_t v56 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v56;
      uint64_t v57 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v57;
      uint64_t v58 = (uint64_t *)(a2 + 48);
      unint64_t v59 = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v59 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)v58;
      }
      else
      {
        uint64_t v71 = *v58;
        outlined copy of Data._Representation(*v58, v59);
        *(void *)(a1 + 48) = v71;
        *(void *)(a1 + 56) = v59;
      }
      uint64_t v72 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v72;
      uint64_t v73 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v73;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 0xBu:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v60 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v60;
      uint64_t v61 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v61;
      uint64_t v62 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v62;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 0xCu:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v63 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v63;
      uint64_t v64 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v64;
      uint64_t v65 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v65;
      uint64_t v66 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v66;
      uint64_t v67 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v67;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v6;
      uint64_t v7 = *(void *)(a2 + 48);
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of WorkflowDataModels.CustomIntentModel(a1, (void (*)(void))type metadata accessor for WorkflowDataModels);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        uint64_t v5 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v6 = v5[5];
        uint64_t v7 = a1 + v6;
        uint64_t v8 = a2 + v6;
        uint64_t v9 = type metadata accessor for CodableINInteraction();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
        uint64_t v10 = v5[6];
        uint64_t v11 = (void *)(a1 + v10);
        uint64_t v12 = (const void *)(a2 + v10);
        uint64_t v13 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
        {
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
          __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
        }
        uint64_t v40 = v5[7];
        uint64_t v41 = (void *)(a1 + v40);
        uint64_t v42 = (void *)(a2 + v40);
        *uint64_t v41 = *v42;
        v41[1] = v42[1];
        uint64_t v43 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
        uint64_t v44 = *(int *)(v43 + 20);
        unint64_t v45 = (void *)(a1 + v44);
        uint64_t v46 = (void *)(a2 + v44);
        *unint64_t v45 = *v46;
        v45[1] = v46[1];
        uint64_t v47 = *(int *)(v43 + 24);
        uint64_t v48 = (void *)(a1 + v47);
        uint64_t v49 = (void *)(a2 + v47);
        *uint64_t v48 = *v49;
        v48[1] = v49[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v15 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = a2 + v15;
        swift_bridgeObjectRetain();
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        break;
      case 4u:
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        uint64_t v20 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v21 = v20[5];
        uint64_t v22 = a1 + v21;
        uint64_t v23 = a2 + v21;
        uint64_t v24 = type metadata accessor for CodableINInteraction();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
        uint64_t v25 = v20[6];
        uint64_t v26 = (void *)(a1 + v25);
        uint64_t v27 = (const void *)(a2 + v25);
        uint64_t v28 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28))
        {
          uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
          __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
        }
        uint64_t v50 = v20[7];
        uint64_t v51 = (void *)(a1 + v50);
        uint64_t v52 = (void *)(a2 + v50);
        void *v51 = *v52;
        v51[1] = v52[1];
        uint64_t v53 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
        uint64_t v54 = v53[5];
        uint64_t v55 = (void *)(a1 + v54);
        uint64_t v56 = (void *)(a2 + v54);
        *uint64_t v55 = *v56;
        v55[1] = v56[1];
        uint64_t v57 = v53[6];
        uint64_t v58 = (void *)(a1 + v57);
        unint64_t v59 = (const void *)(a2 + v57);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v60))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
          memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
          __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v60);
        }
        *(unsigned char *)(a1 + v53[7]) = *(unsigned char *)(a2 + v53[7]);
        break;
      case 5u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        uint64_t v30 = (uint64_t *)(a2 + 64);
        unint64_t v31 = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v30;
        }
        else
        {
          uint64_t v37 = *v30;
          outlined copy of Data._Representation(*v30, v31);
          *(void *)(a1 + 64) = v37;
          *(void *)(a1 + 72) = v31;
        }
        *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        swift_bridgeObjectRetain();
        break;
      case 6u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v32 = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        if (v32)
        {
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v62 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 32) = v62;
        }
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 7u:
      case 8u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 9u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v33 = (uint64_t *)(a2 + 48);
        unint64_t v34 = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v34 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v33;
        }
        else
        {
          uint64_t v38 = *v33;
          outlined copy of Data._Representation(*v33, v34);
          *(void *)(a1 + 48) = v38;
          *(void *)(a1 + 56) = v34;
        }
        break;
      case 0xAu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v35 = (uint64_t *)(a2 + 48);
        unint64_t v36 = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v36 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v35;
        }
        else
        {
          uint64_t v39 = *v35;
          outlined copy of Data._Representation(*v35, v36);
          *(void *)(a1 + 48) = v39;
          *(void *)(a1 + 56) = v36;
        }
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 0xBu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 0xCu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for WorkflowDataModels(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v18 - 8) + 32))(a1, a2, v18);
      uint64_t v19 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v20 = v19[5];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for CodableINInteraction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      uint64_t v24 = v19[6];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for VisualProperty();
      if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
        memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
        __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
      }
      *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
      unint64_t v34 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
      *(_OWORD *)((char *)a1 + v34[5]) = *(_OWORD *)((char *)a2 + v34[5]);
      uint64_t v35 = v34[6];
      unint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
        memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
        __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      }
      *((unsigned char *)a1 + v34[7]) = *((unsigned char *)a2 + v34[7]);
      goto LABEL_17;
    case 3:
      *a1 = *a2;
      uint64_t v29 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
      uint64_t v30 = (char *)a1 + v29;
      unint64_t v31 = (char *)a2 + v29;
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
LABEL_17:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 2:
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v9 = v8[5];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for CodableINInteraction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      uint64_t v13 = v8[6];
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for VisualProperty();
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
        memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      }
      *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
      uint64_t v33 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
      *(_OWORD *)((char *)a1 + *(int *)(v33 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v33 + 20));
      *(_OWORD *)((char *)a1 + *(int *)(v33 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v33 + 24));
      goto LABEL_17;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for WorkflowDataModels(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of WorkflowDataModels.CustomIntentModel((uint64_t)a1, (void (*)(void))type metadata accessor for WorkflowDataModels);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 4:
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v18 - 8) + 32))(a1, a2, v18);
        uint64_t v19 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v20 = v19[5];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = type metadata accessor for CodableINInteraction();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
        uint64_t v24 = v19[6];
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
          __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
        }
        *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
        uint64_t v33 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
        *(_OWORD *)((char *)a1 + v33[5]) = *(_OWORD *)((char *)a2 + v33[5]);
        uint64_t v34 = v33[6];
        uint64_t v35 = (char *)a1 + v34;
        unint64_t v36 = (char *)a2 + v34;
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37))
        {
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
          memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
          __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v37);
        }
        *((unsigned char *)a1 + v33[7]) = *((unsigned char *)a2 + v33[7]);
        goto LABEL_18;
      case 3:
        *a1 = *a2;
        uint64_t v29 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
        uint64_t v30 = (char *)a1 + v29;
        unint64_t v31 = (char *)a2 + v29;
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
LABEL_18:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 2:
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        uint64_t v8 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v9 = v8[5];
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = type metadata accessor for CodableINInteraction();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
        uint64_t v13 = v8[6];
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
          __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
        }
        *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
        uint64_t v39 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
        *(_OWORD *)((char *)a1 + *(int *)(v39 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v39 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v39 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v39 + 24));
        goto LABEL_18;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for WorkflowDataModels()
{
  uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for WorkflowDataModels.ShowAlertModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WorkflowDataModels.ShowAlertModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WorkflowDataModels.ShowAlertModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for WorkflowDataModels.ShowAlertModel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for WorkflowDataModels.ShowAlertModel()
{
}

void type metadata accessor for WorkflowDataModels.EnableTCCModel()
{
}

uint64_t destroy for WorkflowDataModels.WatchModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WorkflowDataModels.WatchModel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  if (v5)
  {
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v7;
  }
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v9 = a2[8];
  uint64_t v10 = a2[9];
  a1[8] = v9;
  a1[9] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WorkflowDataModels.WatchModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 2;
  uint64_t v5 = a2 + 2;
  uint64_t v6 = a2[3];
  if (a1[3])
  {
    if (v6)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of SiriWorkflowRunnerEvent?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for (String, String));
      long long v7 = *((_OWORD *)a2 + 2);
      _OWORD *v4 = *v5;
      *((_OWORD *)a1 + 2) = v7;
    }
  }
  else if (v6)
  {
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 2);
    _OWORD *v4 = *v5;
    *((_OWORD *)a1 + 2) = v8;
  }
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for WorkflowDataModels.WatchModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5)
  {
    outlined destroy of SiriWorkflowRunnerEvent?(a1 + 16, &demangling cache variable for type metadata for (String, String));
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.WatchModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.WatchModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for WorkflowDataModels.WatchModel()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for WorkflowDataModels.CustomIntentModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CodableINInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for VisualProperty();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
    }
    uint64_t v18 = a3[7];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14);
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14);
  if (!EnumTagSinglePayload)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
LABEL_7:
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  void *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14);
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14);
  if (!EnumTagSinglePayload)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
LABEL_7:
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  void *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E110C);
}

uint64_t sub_1E110C(uint64_t a1, uint64_t a2, int *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2_25();
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = OUTLINED_FUNCTION_132_1();
  }
  else
  {
    type metadata accessor for CodableINInteraction();
    OUTLINED_FUNCTION_2_25();
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v8 = v9;
      uint64_t v11 = a3[5];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      OUTLINED_FUNCTION_2_25();
      if (*(_DWORD *)(v13 + 84) != a2) {
        return OUTLINED_FUNCTION_40_17(*(void *)(a1 + a3[7] + 8));
      }
      uint64_t v8 = v12;
      uint64_t v11 = a3[6];
    }
    uint64_t v7 = a1 + v11;
  }

  return __swift_getEnumTagSinglePayload(v7, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E11F4);
}

void sub_1E11F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2_25();
  if (*(_DWORD *)(v6 + 84) == a3
    || (type metadata accessor for CodableINInteraction(), OUTLINED_FUNCTION_2_25(), *(_DWORD *)(v7 + 84) == a3)
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?),
        OUTLINED_FUNCTION_2_25(),
        *(_DWORD *)(v8 + 84) == a3))
  {
    OUTLINED_FUNCTION_134_0();
    __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
  }
  else
  {
    OUTLINED_FUNCTION_78_5(*(int *)(a4 + 28));
  }
}

void type metadata completion function for WorkflowDataModels.CustomIntentModel()
{
  type metadata accessor for CodableAceObject<SAIntentGroupLaunchAppWithIntent>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CodableINInteraction();
    if (v1 <= 0x3F)
    {
      type metadata accessor for VisualProperty?();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for CodableAceObject<SAIntentGroupLaunchAppWithIntent>()
{
  if (!lazy cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>)
  {
    type metadata accessor for NSError(255, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
    unint64_t v0 = type metadata accessor for CodableAceObject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    }
  }
}

void type metadata accessor for VisualProperty?()
{
  if (!lazy cache variable for type metadata for VisualProperty?)
  {
    type metadata accessor for VisualProperty();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VisualProperty?);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CodableINInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = v8[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for VisualProperty();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    uint64_t v19 = v8[7];
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    void *v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = *(int *)(a3 + 20);
    uint64_t v24 = *(int *)(a3 + 24);
    uint64_t v25 = (uint64_t *)((char *)a1 + v23);
    uint64_t v26 = (uint64_t *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = (uint64_t *)((char *)a1 + v24);
    uint64_t v29 = (uint64_t *)((char *)a2 + v24);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v4 = a1 + *(int *)(v3 + 20);
  uint64_t v5 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(v3 + 24);
  uint64_t v7 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  uint64_t v17 = v7[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = *(int *)(a3 + 24);
  uint64_t v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = (void *)(a1 + v22);
  uint64_t v27 = (void *)(a2 + v22);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (!EnumTagSinglePayload)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
LABEL_7:
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = *(int *)(a3 + 24);
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  void *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  uint64_t v17 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  return a1;
}

uint64_t assignWithTake for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (!EnumTagSinglePayload)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
LABEL_7:
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(a3 + 24);
  unint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *unint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E2044);
}

uint64_t sub_1E2044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_2_25();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return OUTLINED_FUNCTION_40_17(*(void *)(a1 + *(int *)(a3 + 20) + 8));
  }

  return __swift_getEnumTagSinglePayload(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E20DC);
}

void sub_1E20DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_2_25();
  if (*(_DWORD *)(v6 + 84) == a3)
  {
    OUTLINED_FUNCTION_134_0();
    __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
  }
  else
  {
    OUTLINED_FUNCTION_78_5(*(int *)(a4 + 20));
  }
}

uint64_t type metadata completion function for WorkflowDataModels.CustomIntentConfirmationModel()
{
  uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for WorkflowDataModels.CustomIntentHandledModel(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CodableINInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = v8[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for VisualProperty();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    uint64_t v19 = v8[7];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    void *v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = a3[5];
    uint64_t v24 = a3[6];
    uint64_t v25 = (void *)((char *)a1 + v23);
    uint64_t v26 = (void *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = (char *)a1 + v24;
    uint64_t v29 = (char *)a2 + v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
      memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
      __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
    }
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v6 = a1 + *(int *)(v5 + 20);
  uint64_t v7 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + *(int *)(v5 + 24);
  uint64_t v9 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(a2 + 24);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  uint64_t result = __swift_getEnumTagSinglePayload(v10, 1, v11);
  if (!result)
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    return v13(v10, v11);
  }
  return result;
}

uint64_t initializeWithCopy for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  uint64_t v17 = v7[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[5];
  uint64_t v22 = a3[6];
  uint64_t v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = (void *)(a1 + v22);
  uint64_t v27 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
  }
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v18 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[5];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[6];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v29);
  int v31 = __swift_getEnumTagSinglePayload((uint64_t)v28, 1, v29);
  if (!v30)
  {
    uint64_t v32 = *(void *)(v29 - 8);
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 24))(v27, v28, v29);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v27, v29);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v29);
LABEL_13:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  uint64_t v17 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
  }
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v18 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[5];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[6];
  int v31 = (void *)(a1 + v30);
  uint64_t v32 = (const void *)(a2 + v30);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  int v34 = __swift_getEnumTagSinglePayload((uint64_t)v31, 1, v33);
  int v35 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v33);
  if (!v34)
  {
    uint64_t v36 = *(void *)(v33 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 40))(v31, v32, v33);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v31, v33);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v31, v32, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v33);
LABEL_13:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E31FC);
}

uint64_t sub_1E31FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_2_25();
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = OUTLINED_FUNCTION_132_1();
  }
  else
  {
    if (a2 == 0x7FFFFFFF) {
      return OUTLINED_FUNCTION_40_17(*(void *)(a1 + *(int *)(a3 + 20) + 8));
    }
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    uint64_t v7 = a1 + *(int *)(a3 + 24);
  }

  return __swift_getEnumTagSinglePayload(v7, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E32B8);
}

void sub_1E32B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_2_25();
  if (*(_DWORD *)(v6 + 84) != a3)
  {
    if (a3 == 0x7FFFFFFF)
    {
      OUTLINED_FUNCTION_78_5(*(int *)(a4 + 20));
      return;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  }
  OUTLINED_FUNCTION_134_0();

  __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
}

void type metadata completion function for WorkflowDataModels.CustomIntentHandledModel()
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CodableAceObject<SAStartLocalRequest>?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CodableAceObject<SAStartLocalRequest>?()
{
  if (!lazy cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for WorkflowDataModels.CustomIntentErrorModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_bridgeObjectRetain();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for WorkflowDataModels.CustomIntentErrorModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  swift_bridgeObjectRetain();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

void *assignWithCopy for WorkflowDataModels.CustomIntentErrorModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for WorkflowDataModels.CustomIntentErrorModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for WorkflowDataModels.CustomIntentErrorModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1E382C);
}

uint64_t sub_1E382C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_40_17(*(void *)(a1 + 8));
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  uint64_t v8 = a1 + *(int *)(a3 + 20);

  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1E38C0);
}

uint64_t sub_1E38C0(uint64_t result, int a2, int a3)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    OUTLINED_FUNCTION_134_0();
    return __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
  return result;
}

void type metadata completion function for WorkflowDataModels.CustomIntentErrorModel()
{
  type metadata accessor for CodableAceObject<SAIntentGroupLaunchAppWithIntent>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for WorkflowDataModels.ConfirmActionModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(a1 + 64), v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WorkflowDataModels.ConfirmActionModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = (uint64_t *)(a2 + 64);
  unint64_t v9 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    outlined copy of Data._Representation(*v8, v9);
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v9;
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.ConfirmActionModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 64);
  unint64_t v5 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, *(void *)(a2 + 72));
      uint64_t v8 = *(void *)(a1 + 64);
      unint64_t v9 = *(void *)(a1 + 72);
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = v5;
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_8;
    }
    outlined destroy of Data(a1 + 64);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, *(void *)(a2 + 72));
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v5;
LABEL_8:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for WorkflowDataModels.ConfirmActionModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)(a2 + 64);
  unint64_t v9 = *(void *)(a1 + 72);
  if (v9 >> 60 != 15)
  {
    unint64_t v10 = *(void *)(a2 + 72);
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *v8;
      *(void *)(a1 + 72) = v10;
      outlined consume of Data._Representation(v11, v9);
      goto LABEL_6;
    }
    outlined destroy of Data(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v8;
LABEL_6:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for WorkflowDataModels.ConfirmActionModel()
{
}

void type metadata accessor for WorkflowDataModels.DisambiguateItemsModel()
{
}

uint64_t destroy for WorkflowDataModels.DisambiguateItemsModel()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for WorkflowDataModels.DisambiguateItemsModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.DisambiguateItemsModel(void *a1, void *a2)
{
  OUTLINED_FUNCTION_143_0(a1, a2);
  *(void *)(v3 + 8) = *(void *)(v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v3 + 16) = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t assignWithTake for WorkflowDataModels.DisambiguateItemsModel(void *a1, void *a2)
{
  OUTLINED_FUNCTION_143_0(a1, a2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v2 + 8);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.DisambiguateItemsModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.DisambiguateItemsModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for WorkflowDataModels.DisambiguateSmartPromptItemsModel()
{
}

uint64_t destroy for WorkflowDataModels.InvocationCommand(uint64_t a1)
{
  return outlined consume of WorkflowDataModels.InvocationCommand(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of WorkflowDataModels.InvocationCommand(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of WorkflowDataModels.InvocationCommand(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of WorkflowDataModels.InvocationCommand(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of WorkflowDataModels.InvocationCommand(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.InvocationCommand(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.InvocationCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for WorkflowDataModels.InvocationCommand(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for WorkflowDataModels.InvocationCommand(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

void type metadata accessor for WorkflowDataModels.InvocationCommand()
{
}

uint64_t ObjC metadata update function for WorkflowDataModels.DisambiguationItemModel()
{
  return type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
}

void type metadata completion function for WorkflowDataModels.DisambiguationItemModel()
{
  type metadata accessor for VisualProperty?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t destroy for WorkflowDataModels.LinkActionModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    return outlined consume of Data._Representation(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for WorkflowDataModels.LinkActionModel(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a2 + 6;
  unint64_t v7 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    outlined copy of Data._Representation(*v6, v7);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v7;
  }
  return a1;
}

void *assignWithCopy for WorkflowDataModels.LinkActionModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 6;
  unint64_t v5 = a2[7];
  if (a1[7] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      uint64_t v8 = a1[6];
      unint64_t v9 = a1[7];
      a1[6] = v7;
      a1[7] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[6] = v6;
  a1[7] = v5;
  return a1;
}

void *assignWithTake for WorkflowDataModels.LinkActionModel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2 + 6;
  unint64_t v8 = a1[7];
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = a2[7];
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = a1[6];
      a1[6] = *v7;
      a1[7] = v9;
      outlined consume of Data._Representation(v10, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
  }
  *((_OWORD *)a1 + 3) = *(_OWORD *)v7;
  return a1;
}

void type metadata accessor for WorkflowDataModels.LinkActionModel()
{
}

uint64_t destroy for WorkflowDataModels.LinkConfirmationModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(a1 + 48), v2);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WorkflowDataModels.LinkConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = (uint64_t *)(a2 + 48);
  unint64_t v8 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
  }
  else
  {
    uint64_t v9 = *v7;
    outlined copy of Data._Representation(*v7, v8);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v8;
  }
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.LinkConfirmationModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 48);
  unint64_t v5 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, *(void *)(a2 + 56));
      uint64_t v8 = *(void *)(a1 + 48);
      unint64_t v9 = *(void *)(a1 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v5;
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_8;
    }
    outlined destroy of Data(a1 + 48);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, *(void *)(a2 + 56));
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v5;
LABEL_8:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

void *__swift_memcpy97_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x61uLL);
}

uint64_t assignWithTake for WorkflowDataModels.LinkConfirmationModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(a2 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = *(void *)(a2 + 56);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = *v7;
      *(void *)(a1 + 56) = v9;
      outlined consume of Data._Representation(v10, v8);
      goto LABEL_6;
    }
    outlined destroy of Data(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.LinkConfirmationModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 97))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.LinkConfirmationModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for WorkflowDataModels.LinkConfirmationModel()
{
}

uint64_t destroy for WorkflowDataModels.AutoShortcutFirstRunModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WorkflowDataModels.AutoShortcutFirstRunModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WorkflowDataModels.AutoShortcutFirstRunModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t assignWithTake for WorkflowDataModels.AutoShortcutFirstRunModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.AutoShortcutFirstRunModel(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.AutoShortcutFirstRunModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for WorkflowDataModels.AutoShortcutFirstRunModel()
{
}

unint64_t destroy for WatchViewType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for WatchViewType(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for WatchViewType(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for WatchViewType(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WatchViewType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WatchViewType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for WatchViewType(void *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

void type metadata accessor for WatchViewType()
{
}

void *type metadata accessor for WatchViewType.CodingKeys()
{
  return &unk_291560;
}

void *type metadata accessor for WatchViewType.ConfirmationCodingKeys()
{
  return &unk_2915F0;
}

void *type metadata accessor for WatchViewType.HandledCodingKeys()
{
  return &unk_291610;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF4)
  {
    if (a2 + 12 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 12) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 13;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v5 = v6 - 13;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E5060);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.CodingKeys()
{
  return &unk_2916A0;
}

void *type metadata accessor for WorkflowDataModels.ShowAlertViewCodingKeys()
{
  return &unk_291730;
}

void *type metadata accessor for WorkflowDataModels.EnableTCCViewCodingKeys()
{
  return &unk_2917C0;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentConfirmationViewCodingKeys()
{
  return &unk_291850;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentErrorViewCodingKeys()
{
  return &unk_2918E0;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentHandledViewCodingKeys()
{
  return &unk_291970;
}

void *type metadata accessor for WorkflowDataModels.ConfirmActionViewCodingKeys()
{
  return &unk_291A00;
}

void *type metadata accessor for WorkflowDataModels.WatchViewCodingKeys()
{
  return &unk_291A90;
}

void *type metadata accessor for WorkflowDataModels.DisambiguateItemsViewCodingKeys()
{
  return &unk_291B20;
}

void *type metadata accessor for WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys()
{
  return &unk_291BB0;
}

void *type metadata accessor for WorkflowDataModels.LinkActionViewCodingKeys()
{
  return &unk_291C40;
}

void *type metadata accessor for WorkflowDataModels.LinkConfirmationViewCodingKeys()
{
  return &unk_291CD0;
}

void *type metadata accessor for WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys()
{
  return &unk_291D60;
}

void *type metadata accessor for WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys()
{
  return &unk_291DF0;
}

void *type metadata accessor for WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys()
{
  return &unk_291E80;
}

void *type metadata accessor for WorkflowDataModels.LinkConfirmationModel.CodingKeys()
{
  return &unk_291F10;
}

void *type metadata accessor for WorkflowDataModels.LinkActionModel.CodingKeys()
{
  return &unk_291FA0;
}

void *type metadata accessor for WorkflowDataModels.DisambiguationItemModel.CodingKeys()
{
  return &unk_292030;
}

void *type metadata accessor for WorkflowDataModels.InvocationCommand.CodingKeys()
{
  return &unk_2920C0;
}

void *type metadata accessor for WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys()
{
  return &unk_292150;
}

void *type metadata accessor for WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys()
{
  return &unk_2921E0;
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.ShowAlertViewCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1E5280);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.InvocationCommand.StartRequestCodingKeys()
{
  return &unk_292270;
}

void *type metadata accessor for WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys()
{
  return &unk_292300;
}

void *type metadata accessor for WorkflowDataModels.DisambiguateItemsModel.CodingKeys()
{
  return &unk_292390;
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.ConfirmActionModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E53A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.ConfirmActionModel.CodingKeys()
{
  return &unk_292420;
}

unsigned char *storeEnumTagSinglePayload for WatchViewType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_126_0((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_136_0((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E5498);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_124_0((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_125_0(result, a2 + 1);
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentErrorModel.CodingKeys()
{
  return &unk_2924B0;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentHandledModel.CodingKeys()
{
  return &unk_292540;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys()
{
  return &unk_2925D0;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentModel.CodingKeys()
{
  return &unk_292660;
}

void *type metadata accessor for WorkflowDataModels.WatchModel.CodingKeys()
{
  return &unk_2926F0;
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_126_0((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_136_0((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E55CCLL);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_124_0((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_125_0(result, a2 + 2);
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.EnableTCCModel.CodingKeys()
{
  return &unk_292780;
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.LinkConfirmationModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_126_0((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_136_0((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E56C0);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_124_0((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_125_0(result, a2 + 3);
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.ShowAlertModel.CodingKeys()
{
  return &unk_292810;
}

uint64_t OUTLINED_FUNCTION_4_44()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_36()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_39()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_12_43()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_16_30()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_22()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_23_30(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_25_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_30_22()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_31_20()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_33_21()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_34_17@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_38_18()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_40_17@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_41_17()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_46_16()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_50_12()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

void *OUTLINED_FUNCTION_51_13()
{
  uint64_t v2 = v0[3];
  return __swift_project_boxed_opaque_existential_1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_54_8()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_57_7()
{
  *(unsigned char *)(v0 - 67) = 2;
}

uint64_t OUTLINED_FUNCTION_59_10()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0);
  return swift_bridgeObjectRelease();
}

void *OUTLINED_FUNCTION_60_8()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_61_8()
{
  type metadata accessor for WorkflowDataModels(0);
  return v0;
}

uint64_t OUTLINED_FUNCTION_64_7()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void OUTLINED_FUNCTION_66_8(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_67_10()
{
  return type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
}

void OUTLINED_FUNCTION_68_7()
{
  *(unsigned char *)(v0 - 66) = 1;
}

uint64_t OUTLINED_FUNCTION_69_9()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_72_9()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_73_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_74_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_75_7@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t OUTLINED_FUNCTION_77_7()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_78_5(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1 + 8) = (v1 - 1);
}

uint64_t OUTLINED_FUNCTION_79_7()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_80_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_81_5()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_86_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_87_4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_89_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_92_3(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  *(void *)(v2 - 120) = v1;
  *(unsigned char *)(v2 - 96) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_93_0()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_94_0()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_95_2()
{
  return static ImageElement.appIcon(_:imageStyle:idioms:)();
}

uint64_t OUTLINED_FUNCTION_96_3()
{
  return *(void *)(v0 - 152);
}

uint64_t OUTLINED_FUNCTION_97_1()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_98_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_99_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_100_2()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t OUTLINED_FUNCTION_101_1@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_103_1()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_104_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_106_1()
{
  return swift_bridgeObjectRetain();
}

__n128 OUTLINED_FUNCTION_107_1@<Q0>(unint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *uint64_t v3 = a2;
  v3[1].n128_u64[0] = a1;
  v3[1].n128_u64[1] = v2;
  __n128 result = *(__n128 *)(v4 - 176);
  v3[2] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_108_1()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void OUTLINED_FUNCTION_116_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - 280) = a1;
}

uint64_t OUTLINED_FUNCTION_117_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_118_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_120_1()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_121_0()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void *OUTLINED_FUNCTION_122_0(void *a1)
{
  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_123_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_124_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_125_2()
{
  *(unsigned char *)(v0 - 66) = 1;
  return v0 - 66;
}

uint64_t OUTLINED_FUNCTION_126_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_127_2()
{
  *(unsigned char *)(v0 - 65) = 0;
  return v0 - 65;
}

unint64_t OUTLINED_FUNCTION_128_2@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, unint64_t a9@<X8>, __n128 a10@<Q0>)
{
  v11[6].n128_u64[0] = a9;
  v11[6].n128_u64[1] = v10;
  v11[5] = a10;
  v11[4].n128_u64[0] = a7;
  v11[4].n128_u64[1] = a8;
  v11[3].n128_u64[0] = a5;
  v11[3].n128_u64[1] = a6;
  v11[2].n128_u64[0] = a3;
  v11[2].n128_u64[1] = a4;
  v11[1].n128_u64[0] = result;
  v11[1].n128_u64[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_129_1(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t OUTLINED_FUNCTION_132_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_133_1(uint64_t result)
{
  uint64_t v4 = (void *)(v3 + *(int *)(result + 20));
  void *v4 = v2;
  v4[1] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_135(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_task_switch(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_136_2()
{
  return outlined consume of WatchViewType(v0, v1);
}

uint64_t OUTLINED_FUNCTION_140()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_141_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_142_1()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

void *OUTLINED_FUNCTION_143_0(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_144_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_145_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_146_0()
{
  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_148_0()
{
  return v0 - 96;
}

uint64_t OUTLINED_FUNCTION_149_0()
{
  return v0 - 96;
}

#error "1E8244: call analysis failed (funcsize=54)"

void CustomIntentContinueInAppResponseGenerator.processAutomaticPunchOut(app:intent:intentResponse:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v5 = OUTLINED_FUNCTION_16(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_25_8();
  uint64_t v6 = type metadata accessor for ActivityType();
  OUTLINED_FUNCTION_12_1();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SAIntentGroupLaunchAppWithIntent();
  uint64_t v12 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
  [v12 setDoNotDismissSiri:1];
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, enum case for ActivityType.completed(_:), v6);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v0 + 160))(v11, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    int v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v17 = 0;
    _os_log_impl(&dword_0, v15, v16, "Directly launching the app without a dialog", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_211C70;
  *(void *)(v19 + 32) = v12;
  *(void *)&long long v21 = v19;
  specialized Array._endMutation()();
  if (v13)
  {
    *((void *)&v22 + 1) = type metadata accessor for DefaultFlowActivity();
    unint64_t v23 = lazy protocol witness table accessor for type DefaultFlowActivity and conformance DefaultFlowActivity();
    *(void *)&long long v21 = v13;
  }
  else
  {
    unint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
  }
  id v20 = v12;
  swift_retain();
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)();

  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of AutoShortcutInvocation?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  outlined destroy of AutoShortcutInvocation?((uint64_t)&v21, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_27_1();
}

uint64_t CustomIntentContinueInAppResponseGenerator.processContinueInAppResponse(app:intent:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[9] = v2;
  v1[10] = v0;
  v1[7] = v3;
  v1[8] = v4;
  uint64_t v5 = type metadata accessor for DialogPhase();
  v1[11] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[12] = v6;
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OutputGenerationManifest();
  v1[15] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[16] = v8;
  v1[17] = OUTLINED_FUNCTION_25();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_16(v9);
  v1[18] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[19] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[20] = v11;
  v1[21] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v12, v13, v14);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v15;
  void *v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;

  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[19];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v3);
  uint64_t v4 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    uint64_t v5 = v0[18];
    uint64_t v6 = (void *)v0[10];
    uint64_t v7 = (void *)v6[12];
    uint64_t v8 = (uint64_t)(v6 + 2);
    uint64_t v9 = v6[5];
    uint64_t v10 = v6[6];
    __swift_project_boxed_opaque_existential_1(v6 + 2, v9);
    uint64_t v11 = DeviceState.asSiriKitDeviceState()(v9, v10);
    v0[22] = v11;
    v0[5] = &type metadata for AppInfoResolver;
    v0[6] = &protocol witness table for AppInfoResolver;
    App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v8, v0 + 2, 2, v5);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    int v17 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*v7
                                                               + class metadata base offset for ContinueInAppCATWrapperSimple)
                                                   + **(int **)(*v7
                                                              + class metadata base offset for ContinueInAppCATWrapperSimple));
    uint64_t v12 = (void *)swift_task_alloc();
    v0[23] = v12;
    void *v12 = v0;
    v12[1] = CustomIntentContinueInAppResponseGenerator.processContinueInAppResponse(app:intent:);
    uint64_t v13 = v0[18];
    return v17(v11, v13);
  }
  else
  {
    uint64_t v15 = (uint64_t *)v0[7];
    v15[3] = type metadata accessor for AceOutput();
    v15[4] = (uint64_t)&protocol witness table for AceOutput;
    __swift_allocate_boxed_opaque_existential_1(v15);
    uint64_t v16 = (void *)swift_task_alloc();
    v0[28] = v16;
    *uint64_t v16 = v0;
    v16[1] = CustomIntentContinueInAppResponseGenerator.processContinueInAppResponse(app:intent:);
    return CustomIntentContinueInAppResponseGenerator.processContinueInAppResponse_preRFv2(app:intent:)();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 192) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v4 + 144);
  if (!v0) {
    *(void *)(v5 + 200) = v3;
  }
  outlined destroy of AutoShortcutInvocation?(v7, &demangling cache variable for type metadata for AppDisplayInfo?);
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = (void *)v0[10];
  int v17 = v0[9];
  static DialogPhase.completion.getter();
  uint64_t v7 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3, v5);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t))(*v6 + 168))(v17);
  OutputGenerationManifest.canUseServerTTS.setter();
  uint64_t v8 = v6 + 13;
  uint64_t v9 = v6[16];
  uint64_t v10 = v6[17];
  __swift_project_boxed_opaque_existential_1(v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_211C70;
  *(void *)(v11 + 32) = v1;
  uint64_t v18 = v11;
  specialized Array._endMutation()();
  v0[26] = v18;
  uint64_t v12 = v1;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[27] = v13;
  *uint64_t v13 = v0;
  v13[1] = CustomIntentContinueInAppResponseGenerator.processContinueInAppResponse(app:intent:);
  uint64_t v14 = v0[17];
  uint64_t v15 = v0[7];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(dialog:outputGenerationManifest:)(v15, v18, v14, v9, v10);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v3 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v6, v7, v8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v9();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  __swift_deallocate_boxed_opaque_existential_1(*(void *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentContinueInAppResponseGenerator.processContinueInAppResponse_preRFv2(app:intent:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[24] = v2;
  v1[25] = v0;
  v1[22] = v3;
  v1[23] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v5);
  v1[26] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for ActivityType();
  v1[27] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[28] = v7;
  v1[29] = OUTLINED_FUNCTION_25();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_16(v8);
  v1[30] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for TemplatingResult();
  v1[31] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[32] = v10;
  v1[33] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[25] + 16;
  v0[5] = &type metadata for AppInfoResolver;
  v0[6] = &protocol witness table for AppInfoResolver;
  App.toAppDisplayInfo(_:appInfoResolving:isFirstParty:)(v2, v0 + 2, 2, v1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  outlined init with copy of DeviceState(v2, (uint64_t)(v0 + 7));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[34] = v3;
  *uint64_t v3 = v0;
  v3[1] = CustomIntentContinueInAppResponseGenerator.processContinueInAppResponse_preRFv2(app:intent:);
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[30];
  return static ResponseTemplates.continueInApp(appDisplayInfo:deviceState:)(v4, v5, v0 + 7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2 + 56;
  uint64_t v5 = *(void *)(v4 + 240);
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 280) = v0;
  swift_task_dealloc();
  outlined destroy of AutoShortcutInvocation?(v3, &demangling cache variable for type metadata for DeviceState?);
  outlined destroy of AutoShortcutInvocation?(v5, &demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v4 = *(void **)(v0 + 200);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ActivityType.failed(_:), v3);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*v4 + 160))(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  outlined init with copy of DeviceState((uint64_t)(v4 + 2), v0 + 96);
  __swift_project_boxed_opaque_existential_1(v4 + 2, v4[5]);
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  (*(void (**)(uint64_t))(*v4 + 168))(v5);
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v15, 1, 1, v7);
  if (v6)
  {
    *(void *)(v0 + 160) = type metadata accessor for DefaultFlowActivity();
    *(void *)(v0 + 168) = lazy protocol witness table accessor for type DefaultFlowActivity and conformance DefaultFlowActivity();
    *(void *)(v0 + 136) = v6;
    uint64_t v8 = v0 + 136;
  }
  else
  {
    uint64_t v8 = v0 + 136;
    *(void *)(v0 + 168) = 0;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
  }
  uint64_t v9 = *(void *)(v0 + 256);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 248);
  uint64_t v12 = *(void *)(v0 + 208);
  swift_retain();
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_release();
  outlined destroy of AutoShortcutInvocation?(v12, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  outlined destroy of AutoShortcutInvocation?(v8, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v13();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

#error "1E9780: call analysis failed (funcsize=49)"

void *ContinueInAppCATWrapperSimple.continueInAppCatID.unsafeMutableAddressor()
{
  return &static ContinueInAppCATWrapperSimple.continueInAppCatID;
}

unint64_t static ContinueInAppCATWrapperSimple.continueInAppCatID.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t ContinueInAppCATWrapperSimple.continueInApp(device:appDisplayInfo:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppDisplayInfo?);
  OUTLINED_FUNCTION_16(v4);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t (*v23)(unint64_t, unint64_t, uint64_t);
  uint64_t v24;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  uint64_t v2 = swift_allocObject();
  v0[7] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_2138B0;
  *(void *)(v2 + 32) = 0x656369766564;
  *(void *)(v2 + 40) = 0xE600000000000000;
  uint64_t v3 = 0;
  if (v1)
  {
    uint64_t v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
  }
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  *(void *)(v2 + 48) = v1;
  uint64_t v6 = (void *)(v2 + 96);
  *(void *)(v2 + 72) = v3;
  *(void *)(v2 + 80) = 0x5074737269467369;
  *(void *)(v2 + 88) = 0xEF70704179747261;
  outlined init with copy of AppDisplayInfo?(v5, v4, &demangling cache variable for type metadata for AppDisplayInfo?);
  uint64_t v7 = type metadata accessor for AppDisplayInfo();
  LODWORD(v4) = __swift_getEnumTagSinglePayload(v4, 1, v7);
  swift_retain();
  uint64_t v8 = v0[6];
  if (v4 == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[6], &demangling cache variable for type metadata for AppDisplayInfo?);
    uint64_t v9 = 0;
    *(void *)(v2 + 104) = 0;
    *(void *)(v2 + 112) = 0;
    *uint64_t v6 = 0;
  }
  else
  {
    uint64_t v10 = AppDisplayInfo.isFirstParty.getter();
    OUTLINED_FUNCTION_40();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v7);
    *(unsigned char *)uint64_t v6 = v10 & 1;
    uint64_t v9 = &type metadata for Bool;
  }
  uint64_t v12 = v0[5];
  uint64_t v13 = v0[3];
  *(void *)(v2 + 120) = v9;
  *(void *)(v2 + 128) = 0x656D614E707061;
  *(void *)(v2 + 136) = 0xE700000000000000;
  outlined init with copy of AppDisplayInfo?(v13, v12, &demangling cache variable for type metadata for AppDisplayInfo?);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v12, 1, v7);
  uint64_t v15 = v0[5];
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of AutoShortcutInvocation?(v0[5], &demangling cache variable for type metadata for AppDisplayInfo?);
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v18 = 0;
    *(void *)(v2 + 160) = 0;
  }
  else
  {
    uint64_t v16 = AppDisplayInfo.displayName.getter();
    int v17 = v19;
    OUTLINED_FUNCTION_40();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v15, v7);
    uint64_t v18 = &type metadata for String;
  }
  *(void *)(v2 + 144) = v16;
  *(void *)(v2 + 152) = v17;
  *(void *)(v2 + 168) = v18;
  unint64_t v23 = (uint64_t (*)(unint64_t, unint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:)
                                                                            + async function pointer to dispatch thunk of CATWrapperSimple.execute(catId:parameters:));
  long long v21 = (void *)swift_task_alloc();
  v0[8] = v21;
  *long long v21 = v0;
  v21[1] = ContinueInAppCATWrapperSimple.continueInApp(device:appDisplayInfo:);
  return v23(0xD00000000000001DLL, 0x800000000022AE40, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  *(void *)(v5 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(uint64_t))(v6 + 8);
    return v11(v3);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t ContinueInAppCATWrapperSimple.init(deviceState:)(uint64_t a1)
{
  outlined init with copy of AppDisplayInfo?(a1, (uint64_t)v5, &demangling cache variable for type metadata for DeviceState?);
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v3 = v2;
  outlined destroy of AutoShortcutInvocation?(a1, &demangling cache variable for type metadata for DeviceState?);
  return v3;
}

void specialized CustomIntentContinueInAppResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25)
{
  OUTLINED_FUNCTION_36();
  uint64_t v44 = v26;
  uint64_t v45 = v27;
  uint64_t v42 = v28;
  uint64_t v43 = v29;
  uint64_t v31 = v30;
  uint64_t v41 = v32;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  OUTLINED_FUNCTION_12_1();
  uint64_t v38 = v37;
  __chkstk_darwin(v39);
  OUTLINED_FUNCTION_41_9();
  outlined init with copy of DeviceState(v40, (uint64_t)v46);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v25, a22, a24);
  specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(v36, v34, v41, v46, v42, v43, v44, v45, a21, v25, a23, a24, a25);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(a22, a24);
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
  OUTLINED_FUNCTION_27_1();
}

unint64_t lazy protocol witness table accessor for type DefaultFlowActivity and conformance DefaultFlowActivity()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity;
  if (!lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity)
  {
    type metadata accessor for DefaultFlowActivity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity);
  }
  return result;
}

uint64_t type metadata accessor for CustomIntentContinueInAppResponseGenerator()
{
  return self;
}

uint64_t type metadata accessor for ContinueInAppCATWrapperSimple()
{
  uint64_t result = type metadata singleton initialization cache for ContinueInAppCATWrapperSimple;
  if (!type metadata singleton initialization cache for ContinueInAppCATWrapperSimple) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ContinueInAppCATWrapperSimple()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ContinueInAppCATWrapperSimple()
{
  return type metadata accessor for ContinueInAppCATWrapperSimple();
}

void OUTLINED_FUNCTION_8_37(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25)
{
  uint64_t v31 = *(void *)(v29 - 112);
  uint64_t v32 = *(void *)(v29 - 104);
  uint64_t v33 = *(void *)(v29 - 96);
  uint64_t v34 = *(void *)(v29 - 88);
  specialized CustomIntentContinueInAppResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(v28, v27, v26, v25, v31, v32, v33, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25);
}

uint64_t AppNameResolver.resolveAppName(app:)()
{
  uint64_t v1 = (void *)static SAAppInfoFactory.createAppInfo(app:)();
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();

  return v2;
}

uint64_t AppNameResolver.resolveAppNameWithAppInfo(appInfo:)(void *a1)
{
  if (!a1 || (uint64_t result = outlined bridged method (pb) of @objc SAAppInfo.displayAppName.getter(a1), !v2))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t protocol witness for AppNameResolving.resolveAppName(app:) in conformance AppNameResolver()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t type metadata accessor for AppNameResolver()
{
  return self;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * v7);
        swift_retain();
      }
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      if (SiriKitParameterMetadata.parameterName.getter() == a2 && v10 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_16:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v8;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v12) {
        goto LABEL_16;
      }
      swift_release();
      ++v7;
      if (v9 == v6) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void CustomIntentNeedsConfirmationFlowStrategy.__allocating_init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_26();
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = *(void *)(a21 + 24);
  uint64_t v24 = *(void *)(a21 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a21, v23);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v25);
  uint64_t v27 = OUTLINED_FUNCTION_6_44(v26, v37);
  uint64_t v29 = v28(v27);
  OUTLINED_FUNCTION_14_25(v29, v30, v31, v32, v33, v34, v35, v36, v21, v22, v23, v24);
  __swift_destroy_boxed_opaque_existential_1Tm(a21);
  OUTLINED_FUNCTION_27_1();
}

void CustomIntentNeedsConfirmationFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OUTLINED_FUNCTION_36();
  v39[2] = v22;
  v39[3] = v23;
  v39[1] = v24;
  OUTLINED_FUNCTION_19_26();
  uint64_t v25 = *(void *)(a21 + 24);
  uint64_t v26 = *(void *)(a21 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a21, v25);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)v39 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = (*(uint64_t (**)(char *))(v30 + 16))(v29);
  OUTLINED_FUNCTION_14_25(v31, v32, v33, v34, v35, v36, v37, v38, (uint64_t)v29, v21, v25, v26);
  __swift_destroy_boxed_opaque_existential_1Tm(a21);
  OUTLINED_FUNCTION_27_1();
}

void CustomIntentNeedsConfirmIntentResponseGenerator.__allocating_init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_36();
  uint64_t v41 = v27;
  uint64_t v42 = v28;
  uint64_t v38 = v29;
  uint64_t v40 = v30;
  OUTLINED_FUNCTION_19_26();
  uint64_t v31 = (void *)swift_allocObject();
  uint64_t v32 = *(void *)(a22 + 24);
  uint64_t v33 = *(void *)(a22 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(a22, v32);
  OUTLINED_FUNCTION_12_1();
  __chkstk_darwin(v34);
  uint64_t v36 = OUTLINED_FUNCTION_6_44(v35, v38);
  v37(v36);
  specialized CustomIntentNeedsConfirmIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(v26, v25, v24, v23, v39, v40, v41, v42, a21, v22, v31, v32, v33);
  __swift_destroy_boxed_opaque_existential_1Tm(a22);
  OUTLINED_FUNCTION_27_1();
}

void CustomIntentNeedsConfirmationFlowStrategy.actionForInput(_:resolveRecord:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v19 = v0;
  uint64_t v20 = v2;
  uint64_t v3 = type metadata accessor for ParameterIdentifier();
  OUTLINED_FUNCTION_12_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v7 = OUTLINED_FUNCTION_23_31();
  OUTLINED_FUNCTION_12_1();
  uint64_t v9 = v8;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v18 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  ParameterResolutionRecord.parameter.getter();
  ParameterIdentifier.name.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  CustomIntentNeedsConfirmationFlowStrategy.makeConfirmationStateFromInput(input:parameterName:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = v19 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_confirmationState;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v16, v15, v7);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, v16, v7);
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v13, v7);
  if (v17 == enum case for SiriKitConfirmationState.unset(_:))
  {
    static ActionForInput.ignore()();
  }
  else if (v17 == enum case for SiriKitConfirmationState.cancelled(_:))
  {
    static ActionForInput.cancel()();
  }
  else
  {
    static ActionForInput.handle()();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v7);
  }
  OUTLINED_FUNCTION_27_1();
}

uint64_t CustomIntentNeedsConfirmationFlowStrategy.parseConfirmationResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[19] = v2;
  v1[20] = v0;
  v1[18] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v1[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SiriKitConfirmationState();
  v1[22] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[23] = v5;
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ParameterIdentifier();
  v1[26] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[27] = v7;
  v1[28] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t *v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  uint64_t v66 = v0;
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  uint64_t v5 = (void *)ParameterResolutionRecord.intent.getter();
  ParameterResolutionRecord.parameter.getter();
  ParameterIdentifier.name.getter();
  uint64_t v63 = v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
  uint64_t v8 = v5;
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v60 = v0 + 136;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    uint64_t v61 = v0 + 80;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v12 = INIntent.debugDescriptionLite.getter();
    *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_0, v9, v10, "Intent prior to confirmation: %s", v11, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
  }
  uint64_t v14 = *(void *)(v0 + 200);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 184);
  int v17 = *(void *)(v0 + 160)
      + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_confirmationState;
  swift_beginAccess();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v18(v14, v17, v15);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v14, v15);
  if (v19 == enum case for SiriKitConfirmationState.unset(_:)
    || v19 == enum case for SiriKitConfirmationState.cancelled(_:))
  {
    uint64_t v28 = *(void *)(v0 + 192);
    uint64_t v29 = *(void *)(v0 + 176);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_23();
    uint64_t v30 = v65;
    *(void *)(v0 + 120) = v64;
    *(void *)(v0 + 128) = v30;
    v31._countAndFlagsBits = OUTLINED_FUNCTION_11_40();
    String.append(_:)(v31);
    v18(v28, v17, v29);
    _print_unlocked<A, B>(_:_:)();
    OUTLINED_FUNCTION_20_3();
    v32();
    OUTLINED_FUNCTION_28_22((uint64_t)" but this should have already been handled in actionForInput");
    type metadata accessor for CommandFailure();
    swift_allocObject();
    uint64_t v33 = OUTLINED_FUNCTION_13_39();
    lazy protocol witness table accessor for type CommandFailure and conformance CommandFailure(&lazy protocol witness table cache variable for type CommandFailure and conformance CommandFailure, (void (*)(uint64_t))&type metadata accessor for CommandFailure);
    OUTLINED_FUNCTION_29_25();
    *uint64_t v34 = v33;
    swift_willThrow();
  }
  else
  {
    if (v19 == enum case for SiriKitConfirmationState.confirmed(_:))
    {
      uint64_t v35 = (void *)ParameterResolutionRecord.result.getter();
      uint64_t v36 = [v35 itemToConfirm];

      _bridgeAnyObjectToAny(_:)();
      uint64_t v37 = swift_unknownObjectRelease();
      OUTLINED_FUNCTION_18_29(v37, v38, v39, v40, v41, v42, v43, v44, v60, v61, v4, v63);
      swift_bridgeObjectRelease();
      outlined destroy of Any?(v0 + 16, &demangling cache variable for type metadata for Any?);
      uint64_t v45 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_16:
      uint64_t v46 = *(void *)(v0 + 168);
      uint64_t v47 = *v45;
      uint64_t v48 = type metadata accessor for ConfirmationResponse();
      OUTLINED_FUNCTION_6();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 104))(v46, v47, v48);
      __swift_storeEnumTagSinglePayload(v46, 0, 1, v48);
      type metadata accessor for INIntent();
      NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_12_0();
      goto LABEL_19;
    }
    if (v19 == enum case for SiriKitConfirmationState.rejected(_:))
    {
      *(_OWORD *)(v0 + 48) = 0u;
      *(_OWORD *)(v0 + 64) = 0u;
      OUTLINED_FUNCTION_18_29(v19, v20, v21, v22, v23, v24, v25, v26, v60, v61, v4, v63);
      outlined destroy of Any?(v0 + 48, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease();
      uint64_t v45 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
      goto LABEL_16;
    }
    uint64_t v51 = *(void *)(v0 + 192);
    long long v62 = *(void *)(v0 + 200);
    uint64_t v53 = *(void *)(v0 + 176);
    uint64_t v52 = *(void *)(v0 + 184);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_23();
    uint64_t v54 = v65;
    *(void *)(v0 + 104) = v64;
    *(void *)(v0 + 112) = v54;
    v55._countAndFlagsBits = OUTLINED_FUNCTION_11_40();
    String.append(_:)(v55);
    v18(v51, v17, v53);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v56(v51, v53);
    OUTLINED_FUNCTION_28_22((uint64_t)" but this should have already been handled in actionForInput");
    type metadata accessor for CommandFailure();
    swift_allocObject();
    uint64_t v57 = OUTLINED_FUNCTION_13_39();
    lazy protocol witness table accessor for type CommandFailure and conformance CommandFailure(&lazy protocol witness table cache variable for type CommandFailure and conformance CommandFailure, (void (*)(uint64_t))&type metadata accessor for CommandFailure);
    OUTLINED_FUNCTION_29_25();
    *uint64_t v58 = v57;
    swift_willThrow();

    v56(v62, v53);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
LABEL_19:
  return v50();
}

uint64_t CustomIntentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a3;
  v4[4] = v3;
  v4[2] = a1;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t CustomIntentNeedsConfirmationFlowStrategy.makePromptForConfirmation(itemToConfirm:resolveRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[5] = v1;
  *uint64_t v1 = v2;
  v1[1] = ShortcutsUnlockDeviceStrategy.makePromptForDeviceUnlock();
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:)(v3, v4);
}

void CustomIntentNeedsConfirmationFlowStrategy.makeConfirmationStateFromInput(input:parameterName:)()
{
  OUTLINED_FUNCTION_36();
  uint64_t v49 = v1;
  uint64_t v50 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for Parse();
  OUTLINED_FUNCTION_12_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v11 = OUTLINED_FUNCTION_23_31();
  OUTLINED_FUNCTION_12_1();
  uint64_t v13 = v12;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v51 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v46 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v46 - v20;
  uint64_t v54 = v4;
  static FlowStrategyUtils.makeConfirmationStateFromInput(input:)(v4, (uint64_t)&v46 - v20);
  uint64_t v22 = enum case for SiriKitConfirmationState.unset(_:);
  uint64_t v52 = *(void (**)(char *))(v13 + 104);
  uint64_t v53 = v13 + 104;
  v52(v19);
  lazy protocol witness table accessor for type CommandFailure and conformance CommandFailure((unint64_t *)&lazy protocol witness table cache variable for type SiriKitConfirmationState and conformance SiriKitConfirmationState, (void (*)(uint64_t))&type metadata accessor for SiriKitConfirmationState);
  LOBYTE(v4) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v55 = *(void (**)(void))(v13 + 8);
  uint64_t v56 = v13 + 8;
  ((void (*)(char *, uint64_t))v55)(v19, v11);
  if (v4)
  {
    uint64_t v47 = v6;
    uint64_t v48 = v21;
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v46 = __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_0, v24, v25, "Waiting for a confirmation response but there is no confirmation state in the input. Checking for server side resolution.", v26, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    Input.parse.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v9 + 88))(v0, v7) != enum case for Parse.NLv3IntentPlusServerConversion(_:))
    {
      ((void (*)(char *, uint64_t))v55)(v48, v11);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0, v7);
      goto LABEL_15;
    }
    (*(void (**)(uint64_t, uint64_t))(v9 + 96))(v0, v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    type metadata accessor for NLIntent();
    OUTLINED_FUNCTION_6();
    (*(void (**)(uint64_t))(v27 + 8))(v0);
    uint64_t v28 = v51;
    Parse.ServerConversion.confirmationState.getter();
    int v29 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v28, v11);
    uint64_t v30 = v55;
    OUTLINED_FUNCTION_20_3();
    v30();
    if (v29 == v22)
    {
      unint64_t v31 = Parse.ServerConversion.parameterMetadata.getter();
      uint64_t v32 = v50;
      swift_bridgeObjectRetain();
      uint64_t v33 = specialized Sequence.first(where:)(v31, v49, v32);
      swift_bridgeObjectRelease();
      if (v33)
      {
        char v34 = SiriKitParameterMetadata.shouldResolve.getter();
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.debug.getter();
        BOOL v37 = os_log_type_enabled(v35, v36);
        if (v34)
        {
          if (v37)
          {
            uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_33();
            *(_WORD *)uint64_t v38 = 0;
            _os_log_impl(&dword_0, v35, v36, "Received parameter metadata for the expected parameter from the server and it is marked shouldResolve. Treating as rejected", v38, 2u);
            OUTLINED_FUNCTION_7_0();
          }

          swift_release();
          swift_release();
          OUTLINED_FUNCTION_20_3();
          v30();
          uint64_t v39 = (unsigned int *)&enum case for SiriKitConfirmationState.rejected(_:);
        }
        else
        {
          if (v37)
          {
            uint64_t v45 = (uint8_t *)OUTLINED_FUNCTION_33();
            *(_WORD *)uint64_t v45 = 0;
            _os_log_impl(&dword_0, v35, v36, "Received parameter metadata for the expected parameter from the server and shouldResolve is false. Treating as confirmed", v45, 2u);
            OUTLINED_FUNCTION_7_0();
          }

          swift_release();
          swift_release();
          OUTLINED_FUNCTION_20_3();
          v30();
          uint64_t v39 = (unsigned int *)&enum case for SiriKitConfirmationState.confirmed(_:);
        }
        uint64_t v41 = *v39;
        uint64_t v40 = v47;
        goto LABEL_24;
      }
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)OUTLINED_FUNCTION_33();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_0, v42, v43, "Could not find the current parameter in the parameter metadata sent from the server. Treating input as not understood.", v44, 2u);
        OUTLINED_FUNCTION_7_0();
      }

      swift_release();
      OUTLINED_FUNCTION_20_3();
      v30();
LABEL_15:
      uint64_t v40 = v47;
      uint64_t v41 = v22;
LABEL_24:
      ((void (*)(uint64_t, uint64_t, uint64_t))v52)(v40, v41, v11);
      goto LABEL_25;
    }
    Parse.ServerConversion.confirmationState.getter();
    swift_release();
    OUTLINED_FUNCTION_20_3();
    v30();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v6, v21, v11);
  }
LABEL_25:
  OUTLINED_FUNCTION_27_1();
}

uint64_t CustomIntentNeedsConfirmationFlowStrategy.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_confirmationState;
  type metadata accessor for SiriKitConfirmationState();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_deviceState);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CustomIntentNeedsConfirmationFlowStrategy.__deallocating_deinit()
{
  CustomIntentNeedsConfirmationFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.authenticationPolicy.getter in conformance CustomIntentNeedsConfirmationFlowStrategy()
{
  return NeedsConfirmationFlowStrategyAsync.authenticationPolicy.getter();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance CustomIntentNeedsConfirmationFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.parseConfirmationResponse(input:resolveRecord:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 152)
                                                          + **(int **)(**(void **)v3 + 152));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance CustomIntentRCHFlowStrategy;
  return NeedsConfirmationFlowStrategyAsync.shouldRequestUnlockForConfirmation(itemToConfirm:resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForConfirmation(itemToConfirm:resolveRecord:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 160)
                                                          + **(int **)(**(void **)v3 + 160));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnEmptyParse(itemToConfirm:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  uint64_t v11 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  *uint64_t v10 = v5;
  v10[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return NeedsConfirmationFlowStrategyAsync.makeRepromptOnLowConfidence(itemToConfirm:resolveRecord:)(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return NeedsConfirmationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return NeedsConfirmationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  void *v12 = v6;
  v12[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return NeedsConfirmationFlowStrategyAsync.makeConfirmationRejectedResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  void *v12 = v6;
  v12[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance CustomIntentNeedsConfirmationFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
  void *v14 = v7;
  v14[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

uint64_t CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DialogPhase();
  v3[28] = v4;
  v3[29] = *(void *)(v4 - 8);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v3[32] = v5;
  v3[33] = *(void *)(v5 - 8);
  v3[34] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v3[35] = v6;
  v3[36] = *(void *)(v6 - 8);
  v3[37] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  v3[38] = v7;
  v3[39] = *(void *)(v7 - 8);
  v3[40] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ParameterIdentifier();
  v3[41] = v8;
  v3[42] = *(void *)(v8 - 8);
  v3[43] = swift_task_alloc();
  return _swift_task_switch(CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:), 0, 0);
}

uint64_t CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:)()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v24 = *(void *)(v0 + 328);
  uint64_t v30 = *(void *)(v0 + 296);
  uint64_t v26 = *(void *)(v0 + 288);
  uint64_t v27 = *(void *)(v0 + 280);
  uint64_t v25 = *(void *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  uint64_t v3 = ParameterResolutionRecord.app.getter();
  *(void *)(v0 + 352) = v3;
  uint64_t v4 = ParameterResolutionRecord.intent.getter();
  *(void *)(v0 + 360) = v4;
  ParameterResolutionRecord.parameter.getter();
  uint64_t v5 = ParameterIdentifier.name.getter();
  uint64_t v7 = v6;
  *(void *)(v0 + 368) = v5;
  *(void *)(v0 + 376) = v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v24);
  uint64_t v8 = ParameterResolutionRecord.result.getter();
  *(void *)(v0 + 384) = v8;
  type metadata accessor for WFDialogState();
  uint64_t v9 = App.appIdentifier.getter();
  uint64_t v10 = v5;
  uint64_t v11 = (void *)v4;
  char v13 = static WFDialogState.isAppFirstRun(appId:)(v9, v12) & 1;
  *(unsigned char *)(v0 + 552) = v13;
  swift_bridgeObjectRelease();
  outlined init with copy of DeviceState(v25 + 16, v0 + 72);
  type metadata accessor for CustomIntentNLContextProvider();
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 392) = inited;
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 72), inited + 16);
  CustomIntentNLContextProvider.makeNeedsConfirmationContextFor(intent:parameter:resolutionResult:)(v11);
  *(unsigned char *)(v0 + 553) = INIntent.isRestricted()();
  (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))(v30, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v27);
  char v15 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v30, v27);
  if (v15)
  {
    uint64_t v16 = *(void *)(*(void *)(v0 + 208) + 56);
    *(void *)(v0 + 400) = v16;
    Swift::String v17 = INIntent.verb()();
    *(void *)(v0 + 408) = v17._object;
    uint64_t v28 = (uint64_t (*)(uint64_t, void *))(*(void *)(*(void *)v16 + 152)
                                                  + **(int **)(*(void *)v16 + 152));
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v18;
    *uint64_t v18 = v0;
    v18[1] = CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:);
    return v28(v17._countAndFlagsBits, v17._object);
  }
  else
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 536) = v20;
    void *v20 = v21;
    v20[1] = CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:);
    uint64_t v22 = *(void *)(v0 + 320);
    uint64_t v23 = *(void *)(v0 + 192);
    return CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation_preRFv2(app:intent:parameterName:resolutionResult:shouldShowAppAttribtuion:context:isTTSEnabled:)(v23, v3, (uint64_t)v11, v10, v7, v8, v13, v22);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = (void *)*v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  *uint64_t v7 = *v1;
  v6[53] = v8;
  v6[54] = v9;
  v6[55] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v6[56] = v3;
    v6[57] = v5;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;

  OUTLINED_FUNCTION_21_0();
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_4_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  void *v4 = *v1;
  *(void *)(v3 + 488) = v0;
  swift_task_dealloc();
  uint64_t v6 = *(void **)(v2 + 472);
  if (v0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v7, v8, v9);
  }
  else
  {
    uint64_t v10 = *(void *)(v3 + 400);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v10 + 288)
                                                                                       + **(int **)(*(void *)v10
                                                                                                  + 288));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v3 + 496) = v11;
    *uint64_t v11 = v5;
    v11[1] = CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:);
    unint64_t v12 = *(unsigned __int8 *)(v3 + 552);
    char v13 = *(void *)(v3 + 376);
    uint64_t v14 = *(void *)(v3 + 384);
    uint64_t v16 = *(void *)(v3 + 360);
    char v15 = *(void *)(v3 + 368);
    Swift::String v17 = *(void *)(v3 + 352);
    return v19(v17, v15, v13, v14, v16, v12);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_13_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 504) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v0) {
    *(void *)(v5 + 512) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = (void *)v0[64];
  uint64_t v24 = v1;
  uint64_t v2 = v0[39];
  uint64_t v21 = v0[38];
  uint64_t v22 = v0[40];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[31];
  uint64_t v5 = v0[29];
  uint64_t v20 = v0[28];
  uint64_t v6 = v0[27];
  uint64_t v23 = (void *)v0[26];
  static DialogPhase.confirmation.getter();
  uint64_t v7 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v4, v20);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v20);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v22, v21);
  __swift_storeEnumTagSinglePayload(v6, 0, 1, v21);
  OutputGenerationManifest.nlContextUpdate.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  uint64_t v8 = v23[16];
  uint64_t v9 = v23[17];
  __swift_project_boxed_opaque_existential_1(v23 + 13, v8);
  uint64_t v10 = v0[17];
  uint64_t v11 = v0[18];
  __swift_project_boxed_opaque_existential_1(v0 + 14, v10);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[22] = type metadata accessor for WorkflowDataModels(0);
  v0[23] = lazy protocol witness table accessor for type CommandFailure and conformance CommandFailure((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
  __swift_allocate_boxed_opaque_existential_1(v0 + 19);
  v12(v10, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  char v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_211C70;
  *(void *)(v13 + 32) = v24;
  uint64_t v25 = v13;
  specialized Array._endMutation()();
  v0[65] = v25;
  uint64_t v14 = v24;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[66] = v15;
  *char v15 = v16;
  v15[1] = CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:);
  Swift::String v17 = v0[34];
  uint64_t v18 = v0[24];
  return dispatch thunk of ResponseGenerating.makeResponseOutput(resultModel:dialog:outputGenerationManifest:)(v18, v0 + 19, v25, v17, v8, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v2 = v1;
  uint64_t v3 = v1 + 152;
  uint64_t v4 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = (void *)v0[48];
  uint64_t v3 = (void *)v0[45];
  uint64_t v4 = v0[39];
  uint64_t v11 = v0[40];
  uint64_t v5 = v0[38];
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[32];
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v5);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 14));
  OUTLINED_FUNCTION_24_26();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v9();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 544) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_16_31();

  swift_release();
  uint64_t v2 = OUTLINED_FUNCTION_23_16();
  v3(v2);
  OUTLINED_FUNCTION_24_26();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v4();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_16_31();

  swift_release();
  uint64_t v2 = OUTLINED_FUNCTION_23_16();
  v3(v2);
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_16_31();

  swift_release();
  uint64_t v2 = OUTLINED_FUNCTION_23_16();
  v3(v2);
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v4();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[48];
  uint64_t v2 = (void *)v0[45];
  uint64_t v4 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v5 = v0[38];
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v6();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  OUTLINED_FUNCTION_21_0();
  uint64_t v1 = (void *)v0[48];
  uint64_t v2 = (void *)v0[45];
  uint64_t v4 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v5 = v0[38];
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 14));
  OUTLINED_FUNCTION_3_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v6();
}

uint64_t CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  OUTLINED_FUNCTION_13_1();
  uint64_t v10 = (void *)v9[45];
  uint64_t v11 = v9[26];
  id v12 = [v10 _title];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v9[58] = v14;
  v9[59] = [v10 _keyImage];
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v9[60] = v16;
  *uint64_t v16 = v17;
  v16[1] = CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation(resolveRecord:);
  uint64_t v19 = v9[56];
  uint64_t v18 = v9[57];
  uint64_t v20 = v9[53];
  uint64_t v21 = v9[44];
  uint64_t v22 = v9[45];
  return static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)((uint64_t)(v9 + 14), v21, v22, 0, v11 + 16, v18, v20, v19, v15, a9);
}

uint64_t CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation_preRFv2(app:intent:parameterName:resolutionResult:shouldShowAppAttribtuion:context:isTTSEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(unsigned char *)(v9 + 297) = v16;
  *(void *)(v9 + 152) = a8;
  *(void *)(v9 + 160) = v8;
  *(unsigned char *)(v9 + 296) = a7;
  *(void *)(v9 + 136) = a5;
  *(void *)(v9 + 144) = a6;
  *(void *)(v9 + 120) = a3;
  *(void *)(v9 + 128) = a4;
  *(void *)(v9 + 104) = a1;
  *(void *)(v9 + 112) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v9 + 168) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for TemplatingResult();
  *(void *)(v9 + 176) = v12;
  *(void *)(v9 + 184) = *(void *)(v12 - 8);
  *(void *)(v9 + 192) = swift_task_alloc();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v9 + 200) = v13;
  *uint64_t v13 = v9;
  v13[1] = CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation_preRFv2(app:intent:parameterName:resolutionResult:shouldShowAppAttribtuion:context:isTTSEnabled:);
  return CustomIntentResponseGenerator.makeYesAndNoButton_preRFv2(intent:app:)(v9 + 16, a3, a2);
}

uint64_t CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation_preRFv2(app:intent:parameterName:resolutionResult:shouldShowAppAttribtuion:context:isTTSEnabled:)()
{
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  uint64_t *v4 = v3;
  uint64_t v5 = *v1;
  uint64_t *v4 = *v1;
  *(void *)(v3 + 208) = *(void *)(v6 + 16);
  *(_OWORD *)(v3 + 216) = *(_OWORD *)(v3 + 24);
  *(void *)(v3 + 232) = *(void *)(v6 + 40);
  *(_OWORD *)(v3 + 240) = *(_OWORD *)(v3 + 48);
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v9, v10, v11);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)(v0[20] + 64) + 136)
                                                                                              + **(int **)(**(void **)(v0[20] + 64) + 136));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[32] = v1;
  *uint64_t v1 = v0;
  v1[1] = CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation_preRFv2(app:intent:parameterName:resolutionResult:shouldShowAppAttribtuion:context:isTTSEnabled:);
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[28];
  uint64_t v5 = v0[29];
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[27];
  uint64_t v8 = v0[14];
  return v10(v8, v6, v7, v4, v5, v2, v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 264) = v4;
  *(void *)(v2 + 272) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  OUTLINED_FUNCTION_13_1();
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(*(void *)(v0 + 160) + 56);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  }
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v2 + 296)
                                                                                              + **(int **)(*(void *)v2 + 296));
  uint64_t v4 = (v3 == 0) & *(unsigned char *)(v0 + 296);
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 280) = v5;
  *uint64_t v5 = v6;
  v5[1] = CustomIntentNeedsConfirmIntentResponseGenerator.makePromptForConfirmation_preRFv2(app:intent:parameterName:resolutionResult:shouldShowAppAttribtuion:context:isTTSEnabled:);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 128);
  uint64_t v12 = *(void *)(v0 + 112);
  return v14(v7, v12, v10, v8, v9, v11, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  uint64_t *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(void);
  void *v11;
  void *v12;
  uint64_t v13;

  uint64_t v11 = *(void **)(v0 + 248);
  uint64_t v12 = *(void **)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(uint64_t **)(v0 + 104);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 160) + 16), *(void *)(*(void *)(v0 + 160) + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v2, v4);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v4);
  uint64_t v6 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 80) = 0u;
  *(void *)(v0 + 96) = 0;
  *(_OWORD *)(v0 + 64) = 0u;
  v3[3] = v6;
  v3[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v3);
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?(v0 + 64, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_20_3();
  v8(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v9();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 224);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 224);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

uint64_t specialized CustomIntentNeedsConfirmationFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v32 = a3;
  uint64_t v31 = a12;
  uint64_t v15 = *(void *)(a11 - 8);
  uint64_t v16 = __chkstk_darwin(a1);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v30 - v19;
  (*(void (**)(char *))(v15 + 32))((char *)&v30 - v19);
  uint64_t v21 = (uint64_t *)(a10
                  + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_voiceCommandName);
  *uint64_t v21 = a1;
  v21[1] = a2;
  outlined init with copy of DeviceState(a4, a10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_deviceState);
  uint64_t v22 = a10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_confirmationState;
  uint64_t v23 = enum case for SiriKitConfirmationState.unset(_:);
  uint64_t v24 = type metadata accessor for SiriKitConfirmationState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v22, v23, v24);
  outlined init with copy of DeviceState(a4, (uint64_t)v40);
  type metadata accessor for ContinueInAppCATWrapperSimple();
  memset(v38, 0, sizeof(v38));
  uint64_t v39 = 0;
  swift_allocObject();
  outlined init with copy of DeviceState?((uint64_t)v38, (uint64_t)v37);
  swift_bridgeObjectRetain();
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v26 = v25;
  outlined destroy of Any?((uint64_t)v38, &demangling cache variable for type metadata for DeviceState?);
  type metadata accessor for CustomIntentNeedsConfirmIntentResponseGenerator();
  uint64_t v27 = (void *)swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, a11);
  uint64_t v28 = specialized CustomIntentNeedsConfirmIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, v32, (uint64_t)v40, v33, v34, v35, v36, v26, (uint64_t)v18, v27, a11, v31);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, a11);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(a10 + OBJC_IVAR____TtC18SiriLinkFlowPlugin41CustomIntentNeedsConfirmationFlowStrategy_responseGenerator) = v28;
  return a10;
}

uint64_t base witness table accessor for ParameterResolutionHandlingAsync in CustomIntentNeedsConfirmationFlowStrategy()
{
  return lazy protocol witness table accessor for type CommandFailure and conformance CommandFailure(&lazy protocol witness table cache variable for type CustomIntentNeedsConfirmationFlowStrategy and conformance CustomIntentNeedsConfirmationFlowStrategy, (void (*)(uint64_t))type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy);
}

uint64_t type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy()
{
  uint64_t result = type metadata singleton initialization cache for CustomIntentNeedsConfirmationFlowStrategy;
  if (!type metadata singleton initialization cache for CustomIntentNeedsConfirmationFlowStrategy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ObjC metadata update function for CustomIntentNeedsConfirmationFlowStrategy()
{
  return type metadata accessor for CustomIntentNeedsConfirmationFlowStrategy();
}

uint64_t type metadata completion function for CustomIntentNeedsConfirmationFlowStrategy()
{
  uint64_t result = type metadata accessor for SiriKitConfirmationState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CustomIntentNeedsConfirmIntentResponseGenerator()
{
  return self;
}

void *specialized CustomIntentNeedsConfirmIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v22 = a3;
  uint64_t v16 = *(void *)(a12 - 8);
  __chkstk_darwin(a1);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DeviceState(v19, (uint64_t)v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a10, a12);
  uint64_t v20 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, v22, v27, v23, v24, v25, v26, a9, (uint64_t)v18, a11, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a10, a12);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v20;
}

uint64_t lazy protocol witness table accessor for type CommandFailure and conformance CommandFailure(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_44()
{
  return swift_task_dealloc();
}

char *OUTLINED_FUNCTION_6_44@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_11_40()
{
  return 0x6465766965636552;
}

uint64_t OUTLINED_FUNCTION_13_39()
{
  return CommandFailure.init(errorCode:reason:errorDomain:underlyingError:)(-1, v1, v0, 0, 0, 0);
}

uint64_t OUTLINED_FUNCTION_14_25(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = *(void *)(v17 - 104);
  uint64_t v20 = *(void *)(v17 - 96);
  uint64_t v21 = *(void *)(v17 - 88);
  return specialized CustomIntentNeedsConfirmationFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:responseFactory:)(v16, v15, v14, v13, v12, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t OUTLINED_FUNCTION_16_31()
{
  return swift_release();
}

id OUTLINED_FUNCTION_18_29(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  return static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(v14, v13, a12, v12, 0, 1);
}

uint64_t OUTLINED_FUNCTION_23_31()
{
  return type metadata accessor for SiriKitConfirmationState();
}

uint64_t OUTLINED_FUNCTION_24_26()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_28_22(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD00000000000003CLL;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_29_25()
{
  return swift_allocError();
}

void OUTLINED_FUNCTION_30_23()
{
  _StringGuts.grow(_:)(77);
}

uint64_t EmptyOutputAndCloseFlow.__allocating_init(shouldClose:aceServiceInvoker:applicationSessionID:)(char a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  EmptyOutputAndCloseFlow.init(shouldClose:aceServiceInvoker:applicationSessionID:)(a1, a2, a3, a4);
  return v8;
}

uint64_t EmptyOutputAndCloseFlow.init(shouldClose:aceServiceInvoker:applicationSessionID:)(char a1, long long *a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 16) = a1;
  outlined init with take of AceServiceInvokerAsync(a2, v4 + 24);
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 72) = a4;
  return v4;
}

uint64_t EmptyOutputAndCloseFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

unint64_t lazy protocol witness table accessor for type EmptyOutputAndCloseFlow and conformance EmptyOutputAndCloseFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyOutputAndCloseFlow and conformance EmptyOutputAndCloseFlow;
  if (!lazy protocol witness table cache variable for type EmptyOutputAndCloseFlow and conformance EmptyOutputAndCloseFlow)
  {
    type metadata accessor for EmptyOutputAndCloseFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyOutputAndCloseFlow and conformance EmptyOutputAndCloseFlow);
  }
  return result;
}

uint64_t type metadata accessor for EmptyOutputAndCloseFlow()
{
  return self;
}

uint64_t EmptyOutputAndCloseFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(EmptyOutputAndCloseFlow.execute(), 0, 0);
}

uint64_t EmptyOutputAndCloseFlow.execute()()
{
  id v1 = static OutputUtils.makeEmptySnippet(correspondingSessionID:)(*(void *)(v0[3] + 64), *(void *)(v0[3] + 72));
  v0[4] = v1;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  v0[5] = __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v5, v6, "Submitting empty output");
    swift_slowDealloc();
  }
  uint64_t v7 = (void *)v0[3];

  uint64_t v8 = v7 + 3;
  uint64_t v9 = v7[6];
  uint64_t v10 = v7[7];
  __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[6] = v11;
  unint64_t v12 = type metadata accessor for SABaseCommand();
  *uint64_t v11 = v0;
  v11[1] = EmptyOutputAndCloseFlow.execute();
  return AceServiceInvokerAsync.submit<A>(_:)(v1, v9, v12, v10);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  if (*(unsigned char *)(v0[3] + 16) == 1)
  {
    id v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      unint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v3 = 0;
      _os_log_impl(&dword_0, v1, v2, "Dismissing Siri for Empty Output", v3, 2u);
      swift_slowDealloc();
    }
    os_log_type_t v4 = v0[3];

    __swift_project_boxed_opaque_existential_1((void *)(v4 + 24), *(void *)(v4 + 48));
    uint64_t v5 = [objc_allocWithZone((Class)SAUICloseAssistant) init];
    AceServiceInvokerAsync.submitAndForget(_:)();
  }
  uint64_t v6 = (void *)v0[4];
  static ExecuteResponse.complete()();

  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  id v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_42_0(&dword_0, v3, v4, "Error submitting empty dialog");
    swift_slowDealloc();
  }
  swift_errorRelease();

  uint64_t v5 = *(void **)(v0 + 32);
  static ExecuteResponse.complete()();

  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t EmptyOutputAndCloseFlow.execute()(void *a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = *v2;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v7 = EmptyOutputAndCloseFlow.execute();
  }
  else
  {

    uint64_t v7 = EmptyOutputAndCloseFlow.execute();
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t EmptyOutputAndCloseFlow.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EmptyOutputAndCloseFlow.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance EmptyOutputAndCloseFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance EmptyOutputAndCloseFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance EmptyOutputAndCloseFlow(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v1;
  OUTLINED_FUNCTION_4_0();
  void *v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(a1);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance EmptyOutputAndCloseFlow()
{
  return EmptyOutputAndCloseFlow.execute(completion:)();
}

uint64_t protocol witness for Flow.execute() in conformance EmptyOutputAndCloseFlow(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance EmptyOutputAndCloseFlow;
  return EmptyOutputAndCloseFlow.execute()(a1);
}

uint64_t protocol witness for Flow.execute() in conformance EmptyOutputAndCloseFlow()
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t VoiceCommandsNLIntent.init(intent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_6();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);

  return v6(a2, a1, v4);
}

uint64_t VoiceCommandsNLIntent.voiceCommandVerb.getter()
{
  return VoiceCommandsNLIntent.voiceCommandVerb.getter();
}

{
  char v0;
  unsigned __int8 v2;

  OUTLINED_FUNCTION_5_40();
  if (!v0) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_18_30();
  return v2;
}

uint64_t VoiceCommandsNLIntent.voiceCommandPagination.getter()
{
  return VoiceCommandsNLIntent.voiceCommandVerb.getter();
}

uint64_t VoiceCommandsNLIntent.voiceCommandDateTime.getter()
{
  return VoiceCommandsNLIntent.voiceCommandDateTime.getter(&one-time initialization token for voiceCommandDateTimeNode, &static VoiceCommandsNLIntent.voiceCommandDateTimeNode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&IntentNodeTraversable.value<A>(forNode:));
}

uint64_t VoiceCommandsNLIntent.voiceCommandName.getter()
{
  return VoiceCommandsNLIntent.voiceCommandName.getter();
}

{
  char v0;
  uint64_t v2;

  OUTLINED_FUNCTION_5_40();
  if (!v0) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_18_30();
  return v2;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandConfirmation.rawValue.getter(char a1)
{
  if (!a1) {
    return 7562617;
  }
  if (a1 == 1) {
    return 28526;
  }
  return 0x6C65636E6163;
}

uint64_t VoiceCommandsNLIntent.voiceCommandText.getter()
{
  return VoiceCommandsNLIntent.voiceCommandName.getter();
}

uint64_t VoiceCommandsNLIntent.voiceCommandScalar.getter()
{
  return VoiceCommandsNLIntent.voiceCommandDateTime.getter(&one-time initialization token for voiceCommandScalarNode, &static VoiceCommandsNLIntent.voiceCommandScalarNode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&IntentNodeTraversable.value<A>(forNode:));
}

uint64_t VoiceCommandsNLIntent.VoiceCommandReference.rawValue.getter(char a1)
{
  uint64_t result = 0x7473726966;
  switch(a1)
  {
    case 1:
      return OUTLINED_FUNCTION_8_38();
    case 2:
      return 0x6472696874;
    case 3:
      uint64_t v3 = 1920298854;
      return v3 & 0xFFFF0000FFFFFFFFLL | 0x687400000000;
    case 4:
      uint64_t v4 = 1952868710;
      return v4 & 0xFFFF0000FFFFFFFFLL | 0x6800000000;
    case 5:
      uint64_t v4 = 1954048371;
      return v4 & 0xFFFF0000FFFFFFFFLL | 0x6800000000;
    case 6:
      uint64_t v5 = 0x746E65766573;
      return v5 & 0xFFFFFFFFFFFFLL | 0x68000000000000;
    case 7:
      uint64_t v3 = 1751607653;
      return v3 & 0xFFFF0000FFFFFFFFLL | 0x687400000000;
    case 8:
      return 0x68746E696ELL;
    case 9:
      uint64_t v4 = 1953391988;
      return v4 & 0xFFFF0000FFFFFFFFLL | 0x6800000000;
    case 10:
      return 0x68746E6576656C65;
    case 11:
      uint64_t v5 = 0x74666C657774;
      return v5 & 0xFFFFFFFFFFFFLL | 0x68000000000000;
    case 12:
      unsigned int v6 = 1919510644;
      goto LABEL_24;
    case 13:
      unsigned int v6 = 1920298854;
      goto LABEL_24;
    case 14:
      unsigned int v7 = 1952868710;
      return v7 | 0x746E656500000000;
    case 15:
      unsigned int v7 = 1954048371;
      return v7 | 0x746E656500000000;
    case 16:
      return 0x6565746E65766573;
    case 17:
      unsigned int v6 = 1751607653;
      goto LABEL_24;
    case 18:
      unsigned int v6 = 1701734766;
LABEL_24:
      uint64_t result = v6 | 0x6E65657400000000;
      break;
    case 19:
      uint64_t result = 0x746569746E657774;
      break;
    case 20:
    case 23:
    case 24:
      uint64_t result = 0x662079746E657774;
      break;
    case 21:
      uint64_t result = 0x732079746E657774;
      break;
    case 22:
      uint64_t result = 0x742079746E657774;
      break;
    case 25:
      uint64_t result = 1953718636;
      break;
    case 26:
      uint64_t result = 0x656C6464696DLL;
      break;
    case 27:
      uint64_t result = 1954047342;
      break;
    case 28:
      uint64_t result = 0x73756F6976657270;
      break;
    case 29:
      uint64_t result = 0x6F54646E6F636573;
      break;
    case 30:
      uint64_t result = 0x4C6F546472696874;
      break;
    case 31:
      uint64_t result = 6647407;
      break;
    case 32:
      uint64_t result = 2037277037;
      break;
    case 33:
      uint64_t result = 6645876;
      break;
    case 34:
      uint64_t result = 0x6573656874;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t VoiceCommandsNLIntent.voiceCommandConfirmation.getter()
{
  return VoiceCommandsNLIntent.voiceCommandVerb.getter();
}

uint64_t VoiceCommandsNLIntent.voiceCommandUnit.getter()
{
  return VoiceCommandsNLIntent.voiceCommandVerb.getter();
}

uint64_t VoiceCommandsNLIntent.voiceCommandCurrencyUnit.getter()
{
  return VoiceCommandsNLIntent.voiceCommandVerb.getter();
}

BOOL VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.isAmbiguous.getter(unsigned __int8 a1)
{
  return a1 < 0xBu;
}

unint64_t VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
    case 10:
      return OUTLINED_FUNCTION_0_11();
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return 0x756F756769626D61;
    case 11:
      return 6579553;
    case 12:
      return 7105633;
    case 13:
      return 7565921;
    case 14:
      return 6583649;
    case 15:
      return 6578786;
    case 16:
      return 6580322;
    case 17:
      return 6711650;
    case 18:
      return 6451042;
    case 19:
      return 7107170;
    case 20:
      unsigned __int16 v3 = 29538;
      return v3 | 0x640000u;
    case 21:
      return 7240034;
    case 22:
      unsigned __int16 v3 = 24931;
      return v3 | 0x640000u;
    case 23:
      unsigned __int16 v4 = 25699;
      return v4 | 0x660000u;
    case 24:
      return 6711395;
    case 25:
      return 7367779;
    case 26:
      return 7958115;
    case 27:
      return 7368547;
    case 28:
      return 6517347;
    case 29:
      uint64_t v5 = 7041897;
      return v5 + 1786;
    case 30:
      return 7039844;
    case 31:
      return 7368548;
    case 32:
      return 6584932;
    case 33:
      return 7366501;
    case 34:
      unsigned __int16 v6 = 30053;
      return v6 | 0x720000u;
    case 35:
      return 6580838;
    case 36:
      unsigned __int16 v7 = 25191;
      goto LABEL_77;
    case 37:
      return 6581096;
    case 38:
      unsigned __int16 v4 = 30056;
      return v4 | 0x660000u;
    case 39:
      return 7496809;
    case 40:
      return 7564393;
    case 41:
      return 7499369;
    case 42:
      unsigned __int16 v8 = 29545;
      return v8 | 0x6B0000u;
    case 43:
      return 6582122;
    case 44:
      return 7958634;
    case 45:
      uint64_t v5 = 7496049;
      return v5 + 1786;
    case 46:
      uint64_t v9 = 2312;
      uint64_t v10 = 6710371;
      goto LABEL_74;
    case 47:
      return 7828075;
    case 48:
      uint64_t v9 = 1033;
      unsigned __int16 v11 = 29538;
      goto LABEL_73;
    case 49:
      unsigned __int16 v12 = 31339;
      goto LABEL_86;
    case 50:
      unsigned __int16 v8 = 24940;
      return v8 | 0x6B0000u;
    case 51:
      return 7365228;
    case 52:
      return 7498604;
    case 53:
      return 6578541;
    case 54:
      return 7368557;
    case 55:
      return 7501165;
    case 56:
      unsigned __int16 v13 = 30829;
      return v13 | 0x6E0000u;
    case 57:
      return 7502189;
    case 58:
      uint64_t v9 = 3586;
      uint64_t v10 = 7037292;
      goto LABEL_74;
    case 59:
      return 7499886;
    case 60:
      return 6584942;
    case 61:
      unsigned __int16 v13 = 25968;
      return v13 | 0x6E0000u;
    case 62:
      return 7038832;
    case 63:
      return 7366768;
    case 64:
      return 7498608;
    case 65:
      return 7236720;
    case 66:
      unsigned __int16 v6 = 24945;
      return v6 | 0x720000u;
    case 67:
      uint64_t v9 = 2562;
      uint64_t v10 = 7234928;
      goto LABEL_74;
    case 68:
      return 6452594;
    case 69:
      return 6715250;
    case 70:
      return 7496051;
    case 71:
      return 6578803;
    case 72:
      uint64_t v9 = 514;
      uint64_t v10 = 7496049;
      goto LABEL_74;
    case 73:
      return 7038323;
    case 74:
      uint64_t v9 = 1552;
      unsigned __int16 v11 = 24931;
LABEL_73:
      uint64_t v10 = v11 | 0x640000u;
LABEL_74:
      unint64_t result = v10 | v9;
      break;
    case 75:
      unsigned __int16 v7 = 31091;
LABEL_77:
      unint64_t result = v7 | 0x700000u;
      break;
    case 76:
      unint64_t result = 6449268;
      break;
    case 77:
      unint64_t result = 7959156;
      break;
    case 78:
      unint64_t result = 6583412;
      break;
    case 79:
      unint64_t result = 6584180;
      break;
    case 80:
      unint64_t result = 6840693;
      break;
    case 81:
      unint64_t result = 6583157;
      break;
    case 82:
      unint64_t result = 6581878;
      break;
    case 83:
      unsigned __int16 v12 = 25208;
LABEL_86:
      unint64_t result = v12 | 0x740000u;
      break;
    case 84:
      unint64_t result = 1752458616;
      break;
    case 85:
      unint64_t result = 1668574328;
      break;
    case 86:
      unint64_t result = 7496058;
      break;
    case 87:
      unint64_t result = 0x73656C696DLL;
      break;
    case 88:
      unint64_t result = 0x73746E696F70;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t VoiceCommandsNLIntent.voiceCommandContact.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  uint64_t v2 = OUTLINED_FUNCTION_16(v1);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_27_6();
  uint64_t v3 = type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_0_2();
  uint64_t v5 = v4;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unsigned __int16 v11 = (char *)&v17 - v10;
  if (one-time initialization token for voiceCommandContactNode != -1) {
    swift_once();
  }
  uint64_t v12 = static VoiceCommandsNLIntent.voiceCommandContactNode;
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  if (__swift_getEnumTagSinglePayload(v0, 1, v3) == 1)
  {
    outlined destroy of NonTerminalIntentNode?(v0, &demangling cache variable for type metadata for NonTerminalIntentNode?);
    return 0;
  }
  else
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    v14(v11, v0, v3);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v11, v3);
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    swift_retain();
    v15(v11, v3);
    type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactIntentNode(0);
    uint64_t v13 = swift_allocObject();
    v14((char *)(v13+ OBJC_IVAR____TtCV18SiriLinkFlowPlugin21VoiceCommandsNLIntent29VoiceCommandContactIntentNode_intentNode), (uint64_t)v9, v3);
    *(void *)(v13
              + OBJC_IVAR____TtCV18SiriLinkFlowPlugin21VoiceCommandsNLIntent29VoiceCommandContactIntentNode_ontologyNode) = v12;
  }
  return v13;
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandUnit_optional __swiftcall VoiceCommandsNLIntent.VoiceCommandUnit.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_97();
  if (v1 >= 0x58) {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandUnit_optional)88;
  }
  else {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandUnit_optional)v1;
  }
}

uint64_t VoiceCommandsNLIntent.VoiceCommandUnit.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 1953391971;
      goto LABEL_18;
    case 2:
      uint64_t v4 = 1633903972;
      goto LABEL_24;
    case 3:
      uint64_t v4 = 1768121700;
      goto LABEL_24;
    case 4:
      return 0x6D6F68746166;
    case 5:
      return 1953460070;
    case 6:
      return 0x676E6F6C727566;
    case 7:
      uint64_t v5 = 1952671080;
      goto LABEL_15;
    case 8:
      return 1751346793;
    case 9:
      uint64_t v4 = 1869375851;
      goto LABEL_24;
    case 10:
      return 0x657920746867696CLL;
    case 11:
      uint64_t v4 = 1634166125;
      goto LABEL_24;
    case 12:
      return 0x726574656DLL;
    case 13:
      uint64_t v5 = 1919117677;
LABEL_15:
      unint64_t v6 = v5 & 0xFFFF0000FFFFFFFFLL | 0x6D6F00000000;
      return v6 & 0xFFFFFFFFFFFFLL | 0x7465000000000000;
    case 14:
      return 1701603693;
    case 15:
      uint64_t v3 = 1819044205;
LABEL_18:
      unint64_t v6 = v3 & 0xFFFF0000FFFFFFFFLL | 0x6D6900000000;
      return v6 & 0xFFFFFFFFFFFFLL | 0x7465000000000000;
    case 16:
      uint64_t v4 = 1869504878;
      goto LABEL_24;
    case 17:
      uint64_t v7 = 0x63697475616ELL;
      return v7 & 0xFFFFFFFFFFFFLL | 0x6C61000000000000;
    case 18:
      return 0x636573726170;
    case 19:
      uint64_t v4 = 1868786032;
LABEL_24:
      unint64_t v8 = v4 & 0xFFFF0000FFFFFFFFLL | 0x656D00000000;
      return v8 & 0xFFFFFFFFFFFFLL | 0x6574000000000000;
    case 20:
      return 0xD000000000000011;
    case 21:
      return 1685217657;
    case 22:
      unsigned int v9 = 1869375851;
      return v9 | 0x6D61726700000000;
    case 23:
      return 1835102823;
    case 24:
      unsigned int v9 = 1768121700;
      return v9 | 0x6D61726700000000;
    case 25:
      uint64_t v10 = 1953391971;
      goto LABEL_32;
    case 26:
      uint64_t v10 = 1819044205;
LABEL_32:
      unint64_t v11 = v10 & 0xFFFF0000FFFFFFFFLL | 0x676900000000;
      return v11 & 0xFFFFFFFFFFFFLL | 0x6172000000000000;
    case 27:
      unint64_t v11 = 0x676F7263696DLL;
      return v11 & 0xFFFFFFFFFFFFLL | 0x6172000000000000;
    case 28:
      unsigned int v9 = 1869504878;
      return v9 | 0x6D61726700000000;
    case 29:
      unsigned int v9 = 1868786032;
      return v9 | 0x6D61726700000000;
    case 30:
      uint64_t v12 = 1668183407;
      return v12 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
    case 31:
      return 0x646E756F70;
    case 32:
      uint64_t v12 = 1852798067;
      return v12 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
    case 33:
      return 0x742063697274656DLL;
    case 34:
      return 0x6F742074726F6873;
    case 35:
      uint64_t v13 = 1634885987;
      return v13 & 0xFFFF0000FFFFFFFFLL | 0x7400000000;
    case 36:
      return 0x6E756F20796F7274;
    case 37:
      return 1735748723;
    case 38:
      return 0x6E69766C656BLL;
    case 39:
      return 0x737569736C6563;
    case 40:
      return 0x65686E6572686166;
    case 41:
      uint64_t v14 = 1634166125;
      goto LABEL_53;
    case 42:
      uint64_t v14 = 1869375851;
      goto LABEL_53;
    case 43:
      return 0x726574696CLL;
    case 44:
      uint64_t v14 = 1768121700;
LABEL_53:
      unint64_t v8 = v14 & 0xFFFF0000FFFFFFFFLL | 0x696C00000000;
      return v8 & 0xFFFFFFFFFFFFLL | 0x6574000000000000;
    case 45:
      unsigned int v15 = 1953391971;
      return v15 | 0x74696C6900000000;
    case 46:
      unsigned int v15 = 1819044205;
      return v15 | 0x74696C6900000000;
    case 47:
      return 0x696B206369627563;
    case 48:
      return 0x656D206369627563;
    case 49:
      return 0x6564206369627563;
    case 50:
    case 51:
    case 64:
    case 65:
      return OUTLINED_FUNCTION_0_11();
    case 52:
      return 0x6E69206369627563;
    case 53:
      return 0x6F66206369627563;
    case 54:
      return 0x6179206369627563;
    case 55:
      return 0x696D206369627563;
    case 56:
      return 0x6F6F662065726361;
    case 57:
      return 0x6C6568737562;
    case 58:
      return 0x6E6F6F7073616574;
    case 59:
      return 0x6F7073656C626174;
    case 60:
    case 67:
      return 0x696C2065636E756FLL;
    case 61:
      return 7370083;
    case 62:
      return 1953393008;
    case 63:
      uint64_t v13 = 1918989681;
      return v13 & 0xFFFF0000FFFFFFFFLL | 0x7400000000;
    case 66:
      return 0xD000000000000012;
    case 68:
      return 0x6B7520746E6970;
    case 69:
      uint64_t v7 = 0x697265706D69;
      return v7 & 0xFFFFFFFFFFFFLL | 0x6C61000000000000;
    case 70:
      return 0x75206E6F6C6C6167;
    case 71:
      return 0x754363697274656DLL;
    case 72:
      return 0xD000000000000011;
    case 73:
      return 0xD000000000000013;
    case 74:
      return 0x65702073656C696DLL;
    case 75:
      return 0x73746F6E6BLL;
    case 76:
      return 0x6C756F6A6F6C696BLL;
    case 77:
      uint64_t v12 = 1819635562;
      return v12 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
    case 78:
      return 0x6F6C61636F6C696BLL;
    case 79:
      return 0x6569726F6C6163;
    case 80:
      return 0x747461776F6C696BLL;
    case 81:
      uint64_t v16 = 0x73696C6C696DLL;
      return v16 & 0xFFFFFFFFFFFFLL | 0x6365000000000000;
    case 82:
      uint64_t v16 = 0x736F7263696DLL;
      return v16 & 0xFFFFFFFFFFFFLL | 0x6365000000000000;
    case 83:
      unsigned int v17 = 1869504878;
      goto LABEL_98;
    case 84:
      unsigned int v17 = 1868786032;
LABEL_98:
      uint64_t result = v17 | 0x6F63657300000000;
      break;
    case 85:
      uint64_t result = OUTLINED_FUNCTION_8_38();
      break;
    case 86:
      uint64_t result = 0x6574756E696DLL;
      break;
    case 87:
      uint64_t result = 1920298856;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t VoiceCommandsNLIntent.voiceCommandReference.getter()
{
  return VoiceCommandsNLIntent.voiceCommandVerb.getter();
}

uint64_t one-time initialization function for voiceCommandVerbNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.Verb>, 16, 0x800000000022B2C0, &static VoiceCommandsNLIntent.voiceCommandVerbNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandVerbNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandVerbNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandVerbNode;
}

uint64_t type metadata accessor for VoiceCommandsNLIntent(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for VoiceCommandsNLIntent);
}

uint64_t static VoiceCommandsNLIntent.voiceCommandVerbNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

{
  char v0;
  uint64_t vars8;

  OUTLINED_FUNCTION_5_40();
  if (!v0) {
    swift_once();
  }

  return swift_retain();
}

uint64_t one-time initialization function for voiceCommandConfirmationNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandConfirmation>, 24, 0x8000000000227F10, &static VoiceCommandsNLIntent.voiceCommandConfirmationNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandConfirmationNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandConfirmationNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandConfirmationNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandConfirmationNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandNameNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 16, 0x8000000000225C00, &static VoiceCommandsNLIntent.voiceCommandNameNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandNameNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandNameNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandNameNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandNameNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandNounNode(uint64_t a1)
{
  return one-time initialization function for voiceCommandVerbNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandNoun>, 0xD000000000000010, 0x800000000022B280, &static VoiceCommandsNLIntent.voiceCommandNounNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandNounNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandNounNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandNounNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandNounNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandCategoryNode(uint64_t a1)
{
  return one-time initialization function for voiceCommandVerbNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0xD000000000000014, 0x8000000000227EF0, &static VoiceCommandsNLIntent.voiceCommandCategoryNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandCategoryNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandCategoryNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandCategoryNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandCategoryNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandDateTimeNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<TerminalElement.DateTimeValue>, 20, 0x8000000000227FB0, &static VoiceCommandsNLIntent.voiceCommandDateTimeNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandDateTimeNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandDateTimeNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandDateTimeNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandDateTimeNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandLocationValueNode(uint64_t a1)
{
  return one-time initialization function for voiceCommandVerbNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0xD000000000000019, 0x800000000022B260, &static VoiceCommandsNLIntent.voiceCommandLocationValueNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandLocationValueNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandLocationValueNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandLocationValueNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandLocationValueNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandLocationIdNode(uint64_t a1)
{
  return one-time initialization function for voiceCommandVerbNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0xD000000000000016, 0x800000000022B240, &static VoiceCommandsNLIntent.voiceCommandLocationIdNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandLocationIdNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandLocationIdNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandLocationIdNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandLocationIdNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandLocationNode()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_212170;
  if (one-time initialization token for voiceCommandLocationValueNode != -1) {
    swift_once();
  }
  uint64_t v1 = static VoiceCommandsNLIntent.voiceCommandLocationValueNode;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 64) = v3;
  *(void *)(v0 + 32) = v1;
  uint64_t v4 = one-time initialization token for voiceCommandLocationIdNode;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static VoiceCommandsNLIntent.voiceCommandLocationIdNode;
  *(void *)(v0 + 96) = v2;
  *(void *)(v0 + 104) = v3;
  *(void *)(v0 + 72) = v5;
  type metadata accessor for NonTerminalOntologyNode();
  swift_allocObject();
  swift_retain();
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
  static VoiceCommandsNLIntent.voiceCommandLocationNode = result;
  return result;
}

uint64_t *VoiceCommandsNLIntent.voiceCommandLocationNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandLocationNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandLocationNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandLocationNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandReferenceNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandReference>, 21, 0x8000000000227F30, &static VoiceCommandsNLIntent.voiceCommandReferenceNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandReferenceNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandReferenceNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandReferenceNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandReferenceNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandIdNode(uint64_t a1)
{
  return one-time initialization function for voiceCommandVerbNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x6D6F436563696F76, 0xEE006449646E616DLL, &static VoiceCommandsNLIntent.voiceCommandIdNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandIdNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandIdNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandIdNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandIdNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandPaginationNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandPagination>, 22, 0x800000000022B2A0, &static VoiceCommandsNLIntent.voiceCommandPaginationNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandPaginationNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandPaginationNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandPaginationNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandPaginationNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandTextNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 16, 0x8000000000227F50, &static VoiceCommandsNLIntent.voiceCommandTextNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandTextNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandTextNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandTextNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandTextNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandScalarNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>>, 18, 0x8000000000227F70, &static VoiceCommandsNLIntent.voiceCommandScalarNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandScalarNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandScalarNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandScalarNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandScalarNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandUnitNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandUnit>, 16, 0x8000000000227F90, &static VoiceCommandsNLIntent.voiceCommandUnitNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandUnitNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandUnitNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandUnitNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandUnitNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandCurrencyUnitNode(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_45(a1, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandCurrencyUnit>, 16, 0x8000000000227F90, &static VoiceCommandsNLIntent.voiceCommandCurrencyUnitNode);
}

uint64_t *VoiceCommandsNLIntent.voiceCommandCurrencyUnitNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandCurrencyUnitNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandCurrencyUnitNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandCurrencyUnitNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandContactNode()
{
  type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactOntologyNode(0);
  swift_allocObject();
  uint64_t result = VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.init(name:multicardinal:)();
  static VoiceCommandsNLIntent.voiceCommandContactNode = result;
  return result;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.__allocating_init(name:multicardinal:)()
{
  return VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.init(name:multicardinal:)();
}

uint64_t *VoiceCommandsNLIntent.voiceCommandContactNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandContactNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandContactNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandContactNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandsDomainNode()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2133E0;
  if (one-time initialization token for voiceCommandVerbNode != -1) {
    swift_once();
  }
  uint64_t v1 = static VoiceCommandsNLIntent.voiceCommandVerbNode;
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.Verb>);
  *(void *)(v0 + 64) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceCommandsNLIntent.Verb> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.Verb>);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = one-time initialization token for voiceCommandConfirmationNode;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = static VoiceCommandsNLIntent.voiceCommandConfirmationNode;
  *(void *)(v0 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandConfirmation>);
  *(void *)(v0 + 104) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandConfirmation> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandConfirmation>);
  *(void *)(v0 + 72) = v3;
  uint64_t v4 = one-time initialization token for voiceCommandNameNode;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static VoiceCommandsNLIntent.voiceCommandNameNode;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 136) = v6;
  uint64_t v7 = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(void *)(v0 + 144) = v7;
  *(void *)(v0 + 112) = v5;
  uint64_t v8 = one-time initialization token for voiceCommandNounNode;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = static VoiceCommandsNLIntent.voiceCommandNounNode;
  *(void *)(v0 + 176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandNoun>);
  *(void *)(v0 + 184) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandNoun> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandNoun>);
  *(void *)(v0 + 152) = v9;
  uint64_t v10 = one-time initialization token for voiceCommandCategoryNode;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = static VoiceCommandsNLIntent.voiceCommandCategoryNode;
  *(void *)(v0 + 216) = v6;
  *(void *)(v0 + 224) = v7;
  *(void *)(v0 + 192) = v11;
  uint64_t v12 = one-time initialization token for voiceCommandDateTimeNode;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = static VoiceCommandsNLIntent.voiceCommandDateTimeNode;
  *(void *)(v0 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<TerminalElement.DateTimeValue>);
  *(void *)(v0 + 264) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<TerminalElement.DateTimeValue> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<TerminalElement.DateTimeValue>);
  *(void *)(v0 + 232) = v13;
  uint64_t v14 = one-time initialization token for voiceCommandLocationNode;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = static VoiceCommandsNLIntent.voiceCommandLocationNode;
  *(void *)(v0 + 296) = type metadata accessor for NonTerminalOntologyNode();
  *(void *)(v0 + 304) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 272) = v15;
  uint64_t v16 = one-time initialization token for voiceCommandReferenceNode;
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = static VoiceCommandsNLIntent.voiceCommandReferenceNode;
  *(void *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandReference>);
  *(void *)(v0 + 344) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandReference> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandReference>);
  *(void *)(v0 + 312) = v17;
  uint64_t v18 = one-time initialization token for voiceCommandIdNode;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = static VoiceCommandsNLIntent.voiceCommandIdNode;
  *(void *)(v0 + 376) = v6;
  *(void *)(v0 + 384) = v7;
  *(void *)(v0 + 352) = v19;
  uint64_t v20 = one-time initialization token for voiceCommandPaginationNode;
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v21 = static VoiceCommandsNLIntent.voiceCommandPaginationNode;
  *(void *)(v0 + 416) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandPagination>);
  *(void *)(v0 + 424) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandPagination> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandPagination>);
  *(void *)(v0 + 392) = v21;
  uint64_t v22 = one-time initialization token for voiceCommandTextNode;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v23 = static VoiceCommandsNLIntent.voiceCommandTextNode;
  *(void *)(v0 + 456) = v6;
  *(void *)(v0 + 464) = v7;
  *(void *)(v0 + 432) = v23;
  uint64_t v24 = one-time initialization token for voiceCommandScalarNode;
  swift_retain();
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v25 = static VoiceCommandsNLIntent.voiceCommandScalarNode;
  *(void *)(v0 + 496) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>>);
  *(void *)(v0 + 504) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<Scalar<Double, VoiceCommandsNLIntent.VoiceCommandScalarUnit>>);
  *(void *)(v0 + 472) = v25;
  uint64_t v26 = one-time initialization token for voiceCommandUnitNode;
  swift_retain();
  if (v26 != -1) {
    swift_once();
  }
  uint64_t v27 = static VoiceCommandsNLIntent.voiceCommandUnitNode;
  *(void *)(v0 + 536) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandUnit>);
  *(void *)(v0 + 544) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandUnit> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandUnit>);
  *(void *)(v0 + 512) = v27;
  uint64_t v28 = one-time initialization token for voiceCommandCurrencyUnitNode;
  swift_retain();
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v29 = static VoiceCommandsNLIntent.voiceCommandCurrencyUnitNode;
  *(void *)(v0 + 576) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandCurrencyUnit>);
  *(void *)(v0 + 584) = lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandCurrencyUnit> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<VoiceCommandsNLIntent.VoiceCommandCurrencyUnit>);
  *(void *)(v0 + 552) = v29;
  uint64_t v30 = one-time initialization token for voiceCommandContactNode;
  swift_retain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = static VoiceCommandsNLIntent.voiceCommandContactNode;
  *(void *)(v0 + 616) = type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactOntologyNode(0);
  *(void *)(v0 + 624) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 592) = v31;
  type metadata accessor for DomainOntologyNode();
  swift_allocObject();
  swift_retain();
  uint64_t result = DomainOntologyNode.init(name:childNodes:isInEventTree:)();
  static VoiceCommandsNLIntent.voiceCommandsDomainNode = result;
  return result;
}

uint64_t *VoiceCommandsNLIntent.voiceCommandsDomainNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandsDomainNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.voiceCommandsDomainNode;
}

uint64_t static VoiceCommandsNLIntent.voiceCommandsDomainNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t VoiceCommandsNLIntent.intent.getter()
{
  type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_6();
  uint64_t v0 = OUTLINED_FUNCTION_19();

  return v1(v0);
}

uint64_t VoiceCommandsNLIntent.domainOntologyNode.getter()
{
  if (one-time initialization token for voiceCommandsDomainNode != -1) {
    swift_once();
  }

  return swift_retain();
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::Verb_optional __swiftcall VoiceCommandsNLIntent.Verb.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VoiceCommandsNLIntent.Verb.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v2 >= 7) {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::Verb_optional)7;
  }
  else {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::Verb_optional)v2;
  }
}

_UNKNOWN **static VoiceCommandsNLIntent.Verb.allCases.getter()
{
  return &outlined read-only object #0 of static VoiceCommandsNLIntent.Verb.allCases.getter;
}

unint64_t VoiceCommandsNLIntent.Verb.rawValue.getter(char a1)
{
  unint64_t result = 0x796669646F6DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C65636E6163;
      break;
    case 2:
      unint64_t result = 7239026;
      break;
    case 3:
      unint64_t result = 1684957542;
      break;
    case 4:
      uint64_t v3 = 1634038371;
      goto LABEL_7;
    case 5:
      uint64_t v3 = 1701602660;
LABEL_7:
      unint64_t result = v3 & 0xFFFF0000FFFFFFFFLL | 0x657400000000;
      break;
    case 6:
      unint64_t result = 7827304;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceCommandsNLIntent.Verb(char *a1)
{
  return specialized == infix<A>(_:_:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoiceCommandsNLIntent.Verb()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoiceCommandsNLIntent.Verb()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoiceCommandsNLIntent.Verb(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::Verb_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoiceCommandsNLIntent.Verb@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::VoiceCommandsNLIntent::Verb_optional *a2@<X8>)
{
  result.value = VoiceCommandsNLIntent.Verb.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoiceCommandsNLIntent.Verb()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  unint64_t result = VoiceCommandsNLIntent.Verb.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceCommandsNLIntent.Verb(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VoiceCommandsNLIntent.Verb.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.Verb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.Verb(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb);
}

void VoiceCommandsNLIntent.VoiceCommandScalarUnit.hashValue.getter()
{
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit);
}

void VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit.hashValue.getter()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit()
{
}

_UNKNOWN **static VoiceCommandsNLIntent.VoiceCommandUnit.allCases.getter()
{
  return &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandUnit.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceCommandsNLIntent.VoiceCommandUnit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoiceCommandsNLIntent.VoiceCommandUnit()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoiceCommandsNLIntent.VoiceCommandUnit(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoiceCommandsNLIntent.VoiceCommandUnit(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandUnit_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoiceCommandsNLIntent.VoiceCommandUnit@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandUnit_optional *a2@<X8>)
{
  result.value = VoiceCommandsNLIntent.VoiceCommandUnit.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoiceCommandsNLIntent.VoiceCommandUnit()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = VoiceCommandsNLIntent.VoiceCommandUnit.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceCommandsNLIntent.VoiceCommandUnit(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandUnit.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.Verb(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit);
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandCurrencyUnit_optional __swiftcall VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_97();
  if (v1 >= 0x59) {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandCurrencyUnit_optional)89;
  }
  else {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandCurrencyUnit_optional)v1;
  }
}

_UNKNOWN **static VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.allCases.getter()
{
  return &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandCurrencyUnit_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandCurrencyUnit_optional *a2@<X8>)
{
  result.value = VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  unint64_t result = VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.Verb(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit);
}

BOOL VoiceCommandsNLIntent.VoiceCommandNoun.init(rawValue:)()
{
  OUTLINED_FUNCTION_86_1();
  v2._object = v0;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VoiceCommandsNLIntent.VoiceCommandNoun.init(rawValue:), v2);
  OUTLINED_FUNCTION_97();
  return v1 != 0;
}

_UNKNOWN **static VoiceCommandsNLIntent.VoiceCommandNoun.allCases.getter()
{
  return &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandNoun.allCases.getter;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandNoun.rawValue.getter()
{
  return 0x74756374726F6873;
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance VoiceCommandsNLIntent.VoiceCommandNoun@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = VoiceCommandsNLIntent.VoiceCommandNoun.init(rawValue:)();
  *a1 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance VoiceCommandsNLIntent.VoiceCommandNoun(void *a1@<X8>)
{
  *a1 = 0x74756374726F6873;
  a1[1] = 0xE800000000000000;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceCommandsNLIntent.VoiceCommandNoun(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandNoun.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandNoun(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.Verb(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun);
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandReference_optional __swiftcall VoiceCommandsNLIntent.VoiceCommandReference.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_97();
  if (v1 >= 0x23) {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandReference_optional)35;
  }
  else {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandReference_optional)v1;
  }
}

_UNKNOWN **static VoiceCommandsNLIntent.VoiceCommandReference.allCases.getter()
{
  return &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandReference.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceCommandsNLIntent.VoiceCommandReference(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoiceCommandsNLIntent.VoiceCommandReference()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoiceCommandsNLIntent.VoiceCommandReference(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoiceCommandsNLIntent.VoiceCommandReference(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandReference_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoiceCommandsNLIntent.VoiceCommandReference@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandReference_optional *a2@<X8>)
{
  result.value = VoiceCommandsNLIntent.VoiceCommandReference.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoiceCommandsNLIntent.VoiceCommandReference()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = VoiceCommandsNLIntent.VoiceCommandReference.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceCommandsNLIntent.VoiceCommandReference(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandReference.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.Verb(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference);
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandConfirmation_optional __swiftcall VoiceCommandsNLIntent.VoiceCommandConfirmation.init(rawValue:)(Swift::String rawValue)
{
  OUTLINED_FUNCTION_86_1();
  v3._object = v1;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of VoiceCommandsNLIntent.VoiceCommandConfirmation.init(rawValue:), v3);
  OUTLINED_FUNCTION_97();
  if (v2 >= 3) {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandConfirmation_optional)3;
  }
  else {
    return (SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandConfirmation_optional)v2;
  }
}

_UNKNOWN **static VoiceCommandsNLIntent.VoiceCommandConfirmation.allCases.getter()
{
  return &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandConfirmation.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VoiceCommandsNLIntent.VoiceCommandConfirmation(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoiceCommandsNLIntent.VoiceCommandConfirmation()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VoiceCommandsNLIntent.VoiceCommandConfirmation(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoiceCommandsNLIntent.VoiceCommandConfirmation()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandConfirmation_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VoiceCommandsNLIntent.VoiceCommandConfirmation@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::VoiceCommandsNLIntent::VoiceCommandConfirmation_optional *a2@<X8>)
{
  result.value = VoiceCommandsNLIntent.VoiceCommandConfirmation.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance VoiceCommandsNLIntent.VoiceCommandConfirmation()
{
  char v1 = OUTLINED_FUNCTION_49_1();
  uint64_t result = VoiceCommandsNLIntent.VoiceCommandConfirmation.rawValue.getter(v1);
  *uint64_t v0 = result;
  v0[1] = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceCommandsNLIntent.VoiceCommandConfirmation(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandConfirmation.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandConfirmation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.Verb(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.Verb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v10 = a4();
  uint64_t v11 = a5();
  uint64_t v12 = a6();

  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v10, v11, v12);
}

_UNKNOWN **static VoiceCommandsNLIntent.VoiceCommandPagination.allCases.getter()
{
  return &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandPagination.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VoiceCommandsNLIntent.VoiceCommandPagination(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static VoiceCommandsNLIntent.VoiceCommandPagination.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandPagination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination, (uint64_t (*)(void))lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination);
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v8 = a4();
  uint64_t v9 = a5();

  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)(a1, a2, v8, v9);
}

uint64_t VoiceCommandsNLIntent.voiceCommandVerbNode.getter()
{
  return VoiceCommandsNLIntent.voiceCommandDateTime.getter(&one-time initialization token for voiceCommandVerbNode, &static VoiceCommandsNLIntent.voiceCommandVerbNode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&IntentNodeTraversable.intentNode<A>(forOntologyNode:));
}

uint64_t VoiceCommandsNLIntent.voiceCommandDateTime.getter(void *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v4 = *a2;
  uint64_t v5 = type metadata accessor for VoiceCommandsNLIntent(0);
  uint64_t v6 = _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);

  return a3(v4, v5, v6);
}

uint64_t VoiceCommandsNLIntent.voiceCommandNoun.getter()
{
  if (one-time initialization token for voiceCommandNounNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
  OUTLINED_FUNCTION_18_30();
  return v1;
}

uint64_t VoiceCommandsNLIntent.voiceCommandCategory.getter()
{
  return VoiceCommandsNLIntent.voiceCommandName.getter();
}

uint64_t VoiceCommandsNLIntent.voiceCommandLocationValue.getter()
{
  return VoiceCommandsNLIntent.voiceCommandName.getter();
}

uint64_t VoiceCommandsNLIntent.voiceCommandLocationId.getter()
{
  return VoiceCommandsNLIntent.voiceCommandName.getter();
}

uint64_t VoiceCommandsNLIntent.voiceCommandId.getter()
{
  return VoiceCommandsNLIntent.voiceCommandName.getter();
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.__allocating_init(intentNode:ontologyNode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_allocObject();
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_19_27();
  v5(v4);
  *(void *)(v3
            + OBJC_IVAR____TtCV18SiriLinkFlowPlugin21VoiceCommandsNLIntent29VoiceCommandContactIntentNode_ontologyNode) = a2;
  return v3;
}

uint64_t type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactIntentNode(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for VoiceCommandsNLIntent.VoiceCommandContactIntentNode);
}

uint64_t one-time initialization function for personNode()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_212160;
  uint64_t v1 = type metadata accessor for PersonOntologyNode();
  swift_allocObject();
  uint64_t v2 = PersonOntologyNode.init(name:multicardinal:)();
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 32) = v2;
  type metadata accessor for NonTerminalOntologyNode();
  swift_allocObject();
  uint64_t result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
  static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.personNode = result;
  return result;
}

uint64_t *VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.personNode.unsafeMutableAddressor()
{
  if (one-time initialization token for personNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.personNode;
}

uint64_t static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.personNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandContactIdNode(uint64_t a1)
{
  return one-time initialization function for voiceCommandVerbNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0xD000000000000015, 0x800000000022B220, &static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactIdNode);
}

uint64_t *VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactIdNode.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandContactIdNode != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactIdNode;
}

uint64_t static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactIdNode.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandContactName(uint64_t a1)
{
  return one-time initialization function for voiceCommandVerbNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0xD000000000000017, 0x800000000022B200, &static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactName);
}

uint64_t *VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactName.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandContactName != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactName;
}

uint64_t static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactName.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t one-time initialization function for voiceCommandContactReference(uint64_t a1)
{
  return one-time initialization function for voiceCommandVerbNode(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0xD00000000000001CLL, 0x800000000022B1E0, &static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactReference);
}

uint64_t one-time initialization function for voiceCommandVerbNode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  swift_allocObject();
  uint64_t result = TerminalOntologyNode.init(name:multicardinal:)();
  *a5 = result;
  return result;
}

uint64_t *VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactReference.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommandContactReference != -1) {
    swift_once();
  }
  return &static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactReference;
}

uint64_t static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.voiceCommandContactReference.getter()
{
  return static VoiceCommandsNLIntent.voiceCommandVerbNode.getter();
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.init(name:multicardinal:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_212160;
  if (one-time initialization token for personNode != -1) {
    swift_once();
  }
  uint64_t v1 = static VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.personNode;
  *(void *)(v0 + 56) = type metadata accessor for NonTerminalOntologyNode();
  *(void *)(v0 + 64) = &protocol witness table for NonTerminalOntologyNode;
  *(void *)(v0 + 32) = v1;
  swift_retain();

  return NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
}

void VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.init(name:multicardinal:childNodes:)()
{
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactOntologyNode.__deallocating_deinit()
{
  NonTerminalOntologyNode.deinit();

  return swift_deallocClassInstance();
}

uint64_t key path setter for VoiceCommandsNLIntent.VoiceCommandContactIntentNode.intentNode : VoiceCommandsNLIntent.VoiceCommandContactIntentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NonTerminalIntentNode();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 104))(v6);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.intentNode.getter()
{
  OUTLINED_FUNCTION_12_44(OBJC_IVAR____TtCV18SiriLinkFlowPlugin21VoiceCommandsNLIntent29VoiceCommandContactIntentNode_intentNode);
  swift_beginAccess();
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_6();
  uint64_t v0 = OUTLINED_FUNCTION_19();
  return v1(v0);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.intentNode.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_12_44(OBJC_IVAR____TtCV18SiriLinkFlowPlugin21VoiceCommandsNLIntent29VoiceCommandContactIntentNode_intentNode);
  swift_beginAccess();
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(v1, a1);
  return swift_endAccess();
}

uint64_t (*VoiceCommandsNLIntent.VoiceCommandContactIntentNode.intentNode.modify())()
{
  return static LocaleUtils.intentBundleCache.modify;
}

uint64_t key path setter for VoiceCommandsNLIntent.VoiceCommandContactIntentNode.ontologyNode : VoiceCommandsNLIntent.VoiceCommandContactIntentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.ontologyNode.getter()
{
  return swift_retain();
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.ontologyNode.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_12_44(OBJC_IVAR____TtCV18SiriLinkFlowPlugin21VoiceCommandsNLIntent29VoiceCommandContactIntentNode_ontologyNode);
  swift_beginAccess();
  *uint64_t v1 = a1;
  return swift_release();
}

uint64_t (*VoiceCommandsNLIntent.VoiceCommandContactIntentNode.ontologyNode.modify())()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.ontologyNode.modify;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.init(intentNode:ontologyNode:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_6();
  uint64_t v4 = OUTLINED_FUNCTION_19_27();
  v5(v4);
  *(void *)(v2
            + OBJC_IVAR____TtCV18SiriLinkFlowPlugin21VoiceCommandsNLIntent29VoiceCommandContactIntentNode_ontologyNode) = a2;
  return v2;
}

uint64_t static VoiceCommandsNLIntent.VoiceCommandContactIntentNode.from(intentNode:ontologyNode:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_0_2();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_27_6();
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v3, a1);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 144);
  swift_retain();
  return v8(v3, a2);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.person.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  uint64_t v4 = OUTLINED_FUNCTION_16(v3);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_20_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_0_2();
  uint64_t v10 = v9;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v20 - v15;
  uint64_t v21 = v1;
  if (one-time initialization token for personNode != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactIntentNode(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2(&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandContactIntentNode and conformance VoiceCommandsNLIntent.VoiceCommandContactIntentNode, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactIntentNode);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  if (__swift_getEnumTagSinglePayload(v7, 1, v8) == 1)
  {
    outlined destroy of NonTerminalIntentNode?(v7, &demangling cache variable for type metadata for NonTerminalIntentNode?);
    uint64_t v17 = 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v16, v7, v8);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v16, v8);
    type metadata accessor for PersonOntologyNode();
    swift_allocObject();
    PersonOntologyNode.init(name:multicardinal:)();
    PersonIntentNode.init(intentNode:ontologyNode:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v8);
    uint64_t v17 = 0;
  }
  uint64_t v18 = type metadata accessor for PersonIntentNode();
  return __swift_storeEnumTagSinglePayload(a1, v17, 1, v18);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.contactId.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.contactId.getter(&one-time initialization token for voiceCommandContactIdNode);
}

uint64_t _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.contactName.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.contactId.getter(&one-time initialization token for voiceCommandContactName);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.contactReference.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.contactId.getter(&one-time initialization token for voiceCommandContactReference);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.contactId.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactIntentNode(0);
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2(&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandContactIntentNode and conformance VoiceCommandsNLIntent.VoiceCommandContactIntentNode, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactIntentNode);
  OUTLINED_FUNCTION_18_30();
  return v2;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.firstName.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.firstName.getter((void (*)(uint64_t, void *))&PersonIntentNodeContaining.firstName.getter);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.middleName.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.firstName.getter((void (*)(uint64_t, void *))&PersonIntentNodeContaining.middleName.getter);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.firstName.getter(void (*a1)(uint64_t, void *))
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  uint64_t v3 = OUTLINED_FUNCTION_16(v2);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_20_0();
  uint64_t v6 = v5 - v4;
  VoiceCommandsNLIntent.VoiceCommandContactIntentNode.person.getter(v5 - v4);
  uint64_t v7 = type metadata accessor for PersonIntentNode();
  if (__swift_getEnumTagSinglePayload(v6, 1, v7) == 1)
  {
    outlined destroy of NonTerminalIntentNode?(v6, &demangling cache variable for type metadata for PersonIntentNode?);
  }
  else
  {
    a1(v7, &protocol witness table for PersonIntentNode);
    OUTLINED_FUNCTION_16_32();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return OUTLINED_FUNCTION_19();
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.lastName.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.firstName.getter((void (*)(uint64_t, void *))&PersonIntentNodeContaining.lastName.getter);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.fullName.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.firstName.getter((void (*)(uint64_t, void *))&PersonIntentNodeContaining.fullName.getter);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.namePrefix.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.namePrefix.getter(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?, (void (*)(uint64_t, void *))&PersonIntentNodeContaining.namePrefix.getter, (uint64_t (*)(void))&type metadata accessor for PersonOntologyNode.PersonNamePrefix, (void (*)(void))&PersonOntologyNode.PersonNamePrefix.rawValue.getter);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.nickName.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.firstName.getter((void (*)(uint64_t, void *))&PersonIntentNodeContaining.nickName.getter);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.nameSuffix.getter()
{
  return VoiceCommandsNLIntent.VoiceCommandContactIntentNode.namePrefix.getter(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?, (void (*)(uint64_t, void *))&PersonIntentNodeContaining.namePostfix.getter, (uint64_t (*)(void))&type metadata accessor for PersonOntologyNode.PersonNamePostfix, (void (*)(void))&PersonOntologyNode.PersonNamePostfix.rawValue.getter);
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.namePrefix.getter(uint64_t *a1, void (*a2)(uint64_t, void *), uint64_t (*a3)(void), void (*a4)(void))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  uint64_t v9 = OUTLINED_FUNCTION_16(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_20_0();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v14 = OUTLINED_FUNCTION_16(v13);
  __chkstk_darwin(v14);
  OUTLINED_FUNCTION_20_0();
  uint64_t v17 = v16 - v15;
  VoiceCommandsNLIntent.VoiceCommandContactIntentNode.person.getter(v12);
  uint64_t v18 = type metadata accessor for PersonIntentNode();
  if (__swift_getEnumTagSinglePayload(v12, 1, v18) == 1)
  {
    uint64_t v19 = &demangling cache variable for type metadata for PersonIntentNode?;
    uint64_t v20 = v12;
  }
  else
  {
    a2(v18, &protocol witness table for PersonIntentNode);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v12, v18);
    uint64_t v21 = a3(0);
    if (__swift_getEnumTagSinglePayload(v17, 1, v21) != 1)
    {
      a4();
      OUTLINED_FUNCTION_16_32();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v17, v21);
      return OUTLINED_FUNCTION_19();
    }
    uint64_t v20 = v17;
    uint64_t v19 = a1;
  }
  outlined destroy of NonTerminalIntentNode?(v20, v19);
  return OUTLINED_FUNCTION_19();
}

uint64_t outlined destroy of NonTerminalIntentNode?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_6();
  uint64_t v3 = OUTLINED_FUNCTION_15_31();
  v4(v3);
  return a1;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.deinit()
{
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_6();
  uint64_t v1 = OUTLINED_FUNCTION_15_31();
  v2(v1);
  swift_release();
  return v0;
}

uint64_t VoiceCommandsNLIntent.VoiceCommandContactIntentNode.__deallocating_deinit()
{
  type metadata accessor for NonTerminalIntentNode();
  OUTLINED_FUNCTION_6();
  uint64_t v0 = OUTLINED_FUNCTION_15_31();
  v1(v0);
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.Verb and conformance VoiceCommandsNLIntent.Verb);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceCommandsNLIntent.Verb()
{
  return lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type [VoiceCommandsNLIntent.Verb] and conformance [A], &demangling cache variable for type metadata for [VoiceCommandsNLIntent.Verb]);
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandScalarUnit);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceCommandsNLIntent.VoiceCommandScalarUnit()
{
  return lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type [VoiceCommandsNLIntent.VoiceCommandScalarUnit] and conformance [A], &demangling cache variable for type metadata for [VoiceCommandsNLIntent.VoiceCommandScalarUnit]);
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandUnit and conformance VoiceCommandsNLIntent.VoiceCommandUnit);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceCommandsNLIntent.VoiceCommandUnit()
{
  return lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type [VoiceCommandsNLIntent.VoiceCommandUnit] and conformance [A], &demangling cache variable for type metadata for [VoiceCommandsNLIntent.VoiceCommandUnit]);
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit()
{
  return lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type [VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit] and conformance [A], &demangling cache variable for type metadata for [VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit]);
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandCurrencyUnit and conformance VoiceCommandsNLIntent.VoiceCommandCurrencyUnit);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceCommandsNLIntent.VoiceCommandCurrencyUnit()
{
  return lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type [VoiceCommandsNLIntent.VoiceCommandCurrencyUnit] and conformance [A], &demangling cache variable for type metadata for [VoiceCommandsNLIntent.VoiceCommandCurrencyUnit]);
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandNoun and conformance VoiceCommandsNLIntent.VoiceCommandNoun);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceCommandsNLIntent.VoiceCommandNoun()
{
  return lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type [VoiceCommandsNLIntent.VoiceCommandNoun] and conformance [A], &demangling cache variable for type metadata for [VoiceCommandsNLIntent.VoiceCommandNoun]);
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandReference and conformance VoiceCommandsNLIntent.VoiceCommandReference);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceCommandsNLIntent.VoiceCommandReference()
{
  return lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type [VoiceCommandsNLIntent.VoiceCommandReference] and conformance [A], &demangling cache variable for type metadata for [VoiceCommandsNLIntent.VoiceCommandReference]);
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandConfirmation and conformance VoiceCommandsNLIntent.VoiceCommandConfirmation);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceCommandsNLIntent.VoiceCommandConfirmation()
{
  return lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type [VoiceCommandsNLIntent.VoiceCommandConfirmation] and conformance [A], &demangling cache variable for type metadata for [VoiceCommandsNLIntent.VoiceCommandConfirmation]);
}

unint64_t lazy protocol witness table accessor for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination()
{
  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination;
  if (!lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandPagination and conformance VoiceCommandsNLIntent.VoiceCommandPagination);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VoiceCommandsNLIntent.VoiceCommandPagination()
{
  return lazy protocol witness table accessor for type ReactiveFlow<SendMailPlan> and conformance ReactiveFlow<A>(&lazy protocol witness table cache variable for type [VoiceCommandsNLIntent.VoiceCommandPagination] and conformance [A], &demangling cache variable for type metadata for [VoiceCommandsNLIntent.VoiceCommandPagination]);
}

uint64_t base witness table accessor for IntentNodeTraversable in VoiceCommandsNLIntent.VoiceCommandContactIntentNode()
{
  return _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2(&lazy protocol witness table cache variable for type VoiceCommandsNLIntent.VoiceCommandContactIntentNode and conformance VoiceCommandsNLIntent.VoiceCommandContactIntentNode, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactIntentNode);
}

uint64_t protocol witness for NonTerminalIntentNodeWrapper.intentNode.getter in conformance VoiceCommandsNLIntent.VoiceCommandContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for NonTerminalIntentNodeWrapper.ontologyNode.getter in conformance VoiceCommandsNLIntent.VoiceCommandContactIntentNode()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for static NonTerminalIntentNodeWrapper.from(intentNode:ontologyNode:) in conformance VoiceCommandsNLIntent.VoiceCommandContactIntentNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = static VoiceCommandsNLIntent.VoiceCommandContactIntentNode.from(intentNode:ontologyNode:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance VoiceCommandsNLIntent.VoiceCommandContactIntentNode(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return NonTerminalIntentNodeWrapper.traversableIntentNode.getter(a1, WitnessTable);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance VoiceCommandsNLIntent.VoiceCommandContactIntentNode(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return NonTerminalIntentNodeWrapper.traversableOntologyNode.getter(a1, WitnessTable);
}

uint64_t base witness table accessor for IntentNodeTraversable in VoiceCommandsNLIntent()
{
  return _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
}

uint64_t base witness table accessor for CustomStringConvertible in VoiceCommandsNLIntent()
{
  return _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2(&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);
}

uint64_t protocol witness for NLIntentWrapper.intent.getter in conformance VoiceCommandsNLIntent@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NLIntent();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t protocol witness for NLIntentWrapper.domainOntologyNode.getter in conformance VoiceCommandsNLIntent()
{
  return VoiceCommandsNLIntent.domainOntologyNode.getter();
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance VoiceCommandsNLIntent(uint64_t a1)
{
  uint64_t v2 = _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2(&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);

  return NLIntentWrapper.traversableIntentNode.getter(a1, v2);
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance VoiceCommandsNLIntent(uint64_t a1)
{
  uint64_t v2 = _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2(&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);

  return NLIntentWrapper.traversableOntologyNode.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance VoiceCommandsNLIntent()
{
  _s18SiriLinkFlowPlugin21VoiceCommandsNLIntentVAC0A8Ontology21IntentNodeTraversableAAWlTm_2(&lazy protocol witness table cache variable for type VoiceCommandsNLIntent and conformance VoiceCommandsNLIntent, (void (*)(uint64_t))type metadata accessor for VoiceCommandsNLIntent);

  return NLIntentWrapper.description.getter();
}

uint64_t sub_1F4AEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))();
}

uint64_t sub_1F4B34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for VoiceCommandsNLIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for VoiceCommandsNLIntent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NLIntent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for VoiceCommandsNLIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for VoiceCommandsNLIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for VoiceCommandsNLIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for VoiceCommandsNLIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceCommandsNLIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1F4DF8);
}

uint64_t sub_1F4DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent();

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for VoiceCommandsNLIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1F4E54);
}

uint64_t sub_1F4E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NLIntent();

  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata completion function for VoiceCommandsNLIntent()
{
  uint64_t result = type metadata accessor for NLIntent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VoiceCommandsNLIntent.Verb(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1F4FF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void type metadata accessor for VoiceCommandsNLIntent.Verb()
{
}

void type metadata accessor for VoiceCommandsNLIntent.VoiceCommandScalarUnit()
{
}

uint64_t getEnumTagSinglePayload for VoiceCommandsNLIntent.VoiceCommandUnit(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xA9)
  {
    if (a2 + 87 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 87) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 88;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x58;
  int v5 = v6 - 88;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for VoiceCommandsNLIntent.VoiceCommandUnit(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 87 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 87) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xA9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xA8)
  {
    unsigned int v6 = ((a2 - 169) >> 8) + 1;
    *uint64_t result = a2 + 87;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1F518CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 87;
        break;
    }
  }
  return result;
}

void type metadata accessor for VoiceCommandsNLIntent.VoiceCommandUnit()
{
}

void type metadata accessor for VoiceCommandsNLIntent.VoiceCommandCurrencyScalarUnit()
{
}

uint64_t getEnumTagSinglePayload for VoiceCommandsNLIntent.VoiceCommandCurrencyUnit(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xA8)
  {
    if (a2 + 88 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 88) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 89;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x59;
  int v5 = v6 - 89;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for VoiceCommandsNLIntent.VoiceCommandCurrencyUnit(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 88 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 88) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xA8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xA7)
  {
    unsigned int v6 = ((a2 - 168) >> 8) + 1;
    *uint64_t result = a2 + 88;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1F5320);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 88;
        break;
    }
  }
  return result;
}

void type metadata accessor for VoiceCommandsNLIntent.VoiceCommandCurrencyUnit()
{
}

unsigned char *storeEnumTagSinglePayload for VoiceCommandsNLIntent.VoiceCommandNoun(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1F53F0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for VoiceCommandsNLIntent.VoiceCommandNoun()
{
}

uint64_t getEnumTagSinglePayload for VoiceCommandsNLIntent.VoiceCommandReference(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDE)
  {
    if (a2 + 34 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 34) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 35;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v5 = v6 - 35;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for VoiceCommandsNLIntent.VoiceCommandReference(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 34 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 34) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDD)
  {
    unsigned int v6 = ((a2 - 222) >> 8) + 1;
    *uint64_t result = a2 + 34;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1F5578);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 34;
        break;
    }
  }
  return result;
}

void type metadata accessor for VoiceCommandsNLIntent.VoiceCommandReference()
{
}

void type metadata accessor for VoiceCommandsNLIntent.VoiceCommandConfirmation()
{
}

unsigned char *storeEnumTagSinglePayload for VoiceCommandsNLIntent.VoiceCommandConfirmation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1F5688);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for VoiceCommandsNLIntent.VoiceCommandPagination()
{
}

uint64_t type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactOntologyNode(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for VoiceCommandsNLIntent.VoiceCommandContactOntologyNode);
}

uint64_t type metadata completion function for VoiceCommandsNLIntent.VoiceCommandContactOntologyNode()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for VoiceCommandsNLIntent.VoiceCommandContactOntologyNode()
{
  return type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactOntologyNode(0);
}

uint64_t ObjC metadata update function for VoiceCommandsNLIntent.VoiceCommandContactIntentNode()
{
  return type metadata accessor for VoiceCommandsNLIntent.VoiceCommandContactIntentNode(0);
}

uint64_t type metadata completion function for VoiceCommandsNLIntent.VoiceCommandContactIntentNode()
{
  uint64_t result = type metadata accessor for NonTerminalIntentNode();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_45(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return one-time initialization function for voiceCommandVerbNode(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4, a5);
}

uint64_t OUTLINED_FUNCTION_8_38()
{
  return 0x646E6F636573;
}

uint64_t OUTLINED_FUNCTION_12_44@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_13_40()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_15_31()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_30()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_19_27()
{
  return v0;
}

uint64_t CustomIntentStateAttachment.init(customIntent:isConfirming:appBundleId:parameterName:selectionItems:customIntentResponse:pageSize:pageIndex:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, char a13)
{
  *(void *)a9 = result;
  *(unsigned char *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(unsigned char *)(a9 + 72) = a11 & 1;
  *(void *)(a9 + 80) = a12;
  *(unsigned char *)(a9 + 88) = a13 & 1;
  return result;
}

id CustomIntentStateAttachment.asAttachment()()
{
  CustomIntentStateAttachment.asDictionary()();
  id v0 = objc_allocWithZone((Class)SABaseAceObject);
  uint64_t v1 = swift_bridgeObjectRetain();
  id result = @nonobjc SABaseAceObject.init(dictionary:)(v1);
  if (result)
  {
    id v3 = result;
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CustomIntentStateAttachment.isConfirming.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomIntentStateAttachment.isConfirming.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t CustomIntentStateAttachment.parameterName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t CustomIntentStateAttachment.selectionItems.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CustomIntentStateAttachment.selectionItems.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

void CustomIntentStateAttachment.customIntentResponse.setter(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomIntentStateAttachment.customIntentResponse.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t CustomIntentStateAttachment.pageSize.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t CustomIntentStateAttachment.pageSize.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t CustomIntentStateAttachment.pageIndex.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t CustomIntentStateAttachment.pageIndex.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 80) = result;
  *(unsigned char *)(v2 + 88) = a2 & 1;
  return result;
}

SiriLinkFlowPlugin::CustomIntentDisambiguationItemContainer (__swiftcall *CustomIntentStateAttachment.pageIndex.modify())(Swift::OpaquePointer items)
{
  return CustomIntentDisambiguationItemContainer.init(items:);
}

uint64_t CustomIntentStateAttachment.asDictionary()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_213920;
  *(void *)(inited + 32) = 0x70756F726724;
  *(void *)(inited + 40) = 0xE600000000000000;
  OUTLINED_FUNCTION_78_2();
  v3[6] = v5;
  v3[7] = v4;
  v3[9] = &type metadata for String;
  v3[10] = 0x7373616C6324;
  v3[11] = 0xE600000000000000;
  v3[12] = 0xD00000000000001ALL;
  v3[13] = 0x800000000022B310;
  v3[15] = &type metadata for String;
  v3[16] = 0x656D614E65707974;
  v3[17] = 0xE800000000000000;
  id v55 = *(id *)v1;
  id v6 = [*(id *)v1 typeName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(inited + 144) = v7;
  *(void *)(inited + 152) = v9;
  *(void *)(inited + 168) = &type metadata for String;
  strcpy((char *)(inited + 176), "integrationApp");
  *(unsigned char *)(inited + 191) = -18;
  uint64_t v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_2138B0;
  *(void *)(v10 + 32) = 0x70756F726724;
  *(void *)(v10 + 40) = 0xE600000000000000;
  *(void *)(v10 + 48) = 0xD000000000000014;
  *(void *)(v10 + 56) = 0x800000000022B330;
  *(void *)(v10 + 72) = &type metadata for String;
  *(void *)(v10 + 80) = 0x7373616C6324;
  *(void *)(v10 + 88) = 0xE600000000000000;
  *(void *)(v10 + 96) = 0x6F666E49707041;
  *(void *)(v10 + 104) = 0xE700000000000000;
  *(void *)(v10 + 120) = &type metadata for String;
  *(void *)(v10 + 128) = 0xD000000000000012;
  OUTLINED_FUNCTION_78_2();
  *(void *)(v11 + 136) = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_214D20;
  *(void *)(v13 + 32) = 0x70756F726724;
  *(void *)(v13 + 40) = 0xE600000000000000;
  OUTLINED_FUNCTION_78_2();
  v14[6] = 0xD000000000000012;
  v14[7] = v15;
  v14[8] = 0x7373616C6324;
  v14[9] = 0xE600000000000000;
  OUTLINED_FUNCTION_78_2();
  v16[10] = 0xD000000000000012;
  v16[11] = v17;
  v16[12] = 30244;
  v16[13] = 0xE200000000000000;
  v16[14] = 808333361;
  v16[15] = 0xE400000000000000;
  v16[16] = 0x6449656C646E7562;
  v16[17] = 0xE800000000000000;
  uint64_t v18 = *(void *)(v1 + 24);
  *(void *)(v13 + 144) = *(void *)(v1 + 16);
  *(void *)(v13 + 152) = v18;
  swift_bridgeObjectRetain();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v10 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  *(void *)(v10 + 144) = v19;
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(void *)(inited + 192) = v20;
  *(void *)(inited + 216) = v21;
  *(void *)(inited + 224) = 0x696D7269666E6F63;
  *(void *)(inited + 232) = 0xEA0000000000676ELL;
  char v22 = *(unsigned char *)(v1 + 8);
  *(void *)(inited + 264) = &type metadata for Bool;
  *(unsigned char *)(inited + 240) = v22;
  unint64_t v59 = (void *)Dictionary.init(dictionaryLiteral:)();
  if (*(void *)(v1 + 40))
  {
    LOBYTE(v57.value._countAndFlagsBits) = *(void *)(v1 + 32);
    uint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v31 = OUTLINED_FUNCTION_1_44(v23, v24, v25, v26, v27, v28, v29, v30, v53, (uint64_t)v55, v57.value._countAndFlagsBits);
    specialized Dictionary.subscript.setter((uint64_t)v31);
    Swift::String v32 = CustomIntentStateAttachment.parameterType()();
    v57.value._object = v32._object;
    uint64_t v39 = OUTLINED_FUNCTION_1_44(v32._countAndFlagsBits, (uint64_t)v32._object, v33, v34, v35, v36, v37, v38, v54, (uint64_t)v56, v32._countAndFlagsBits);
    specialized Dictionary.subscript.setter((uint64_t)v39);
    uint64_t v58 = &type metadata for Bool;
    LOBYTE(v57.value._countAndFlagsBits) = CustomIntentStateAttachment.isMulticardinal()();
    specialized Dictionary.subscript.setter((uint64_t)&v57);
  }
  if (one-time initialization token for setCachedLanguage != -1) {
    swift_once();
  }
  id v40 = [v55 _JSONDictionaryRepresentation];
  uint64_t v41 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  specialized _dictionaryUpCast<A, B, C, D>(_:)(v41);
  v43._rawValue = v42;
  swift_bridgeObjectRelease();
  Swift::String_optional v44 = CustomIntentStateAttachment.dictionaryAsString(hash:)(v43);
  swift_bridgeObjectRelease();
  if (v44.value._object)
  {
    uint64_t v58 = &type metadata for String;
    Swift::String_optional v57 = v44;
    specialized Dictionary.subscript.setter((uint64_t)&v57);
  }
  Swift::String_optional v45 = CustomIntentStateAttachment.intentDefinitionAsJsonString()();
  if (v45.value._object)
  {
    uint64_t v58 = &type metadata for String;
    Swift::String_optional v57 = v45;
    OUTLINED_FUNCTION_0_46(v45.value._countAndFlagsBits, (uint64_t)v45.value._object);
  }
  Swift::String_optional v46 = CustomIntentStateAttachment.intentResponseAsJsonString()();
  if (v46.value._object)
  {
    uint64_t v58 = &type metadata for String;
    Swift::String_optional v57 = v46;
    OUTLINED_FUNCTION_0_46(v46.value._countAndFlagsBits, (uint64_t)v46.value._object);
  }
  Swift::String_optional v47 = CustomIntentStateAttachment.selectionItemsAsJsonString()();
  if (v47.value._object)
  {
    uint64_t v58 = &type metadata for String;
    Swift::String_optional v57 = v47;
    OUTLINED_FUNCTION_0_46(v47.value._countAndFlagsBits, (uint64_t)v47.value._object);
  }
  if ((*(unsigned char *)(v1 + 72) & 1) == 0 && (*(unsigned char *)(v1 + 88) & 1) == 0)
  {
    uint64_t v48 = *(void *)(v1 + 64);
    uint64_t v49 = *(void *)(v1 + 80);
    uint64_t v58 = &type metadata for Int;
    v57.value._countAndFlagsBits = v48;
    specialized Dictionary.subscript.setter((uint64_t)&v57);
    uint64_t v58 = &type metadata for Int;
    v57.value._countAndFlagsBits = v49;
    specialized Dictionary.subscript.setter((uint64_t)&v57);
  }
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v59);
  uint64_t v51 = v50;
  swift_bridgeObjectRelease();
  return v51;
}

Swift::String __swiftcall CustomIntentStateAttachment.parameterType()()
{
  id v1 = [*v0 _codableDescription];
  swift_bridgeObjectRetain();
  uint64_t v2 = OUTLINED_FUNCTION_19();
  id v4 = outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)(v2, v3, v1);

  if (v4)
  {
    if ([v4 valueType]
      || (uint64_t v15 = outlined bridged method (pb) of @objc INCodableDescription.dictionaryRepresentation()(v4)) == 0)
    {
      uint64_t v5 = static CustomTypeReference.fromSlotValueType(valueType:)((uint64_t)[v4 valueType]);
      uint64_t v7 = v6;
      uint64_t v9 = v8;
      uint64_t v26 = v5;
      uint64_t v27 = v10;
      swift_bridgeObjectRetain();
      v11._countAndFlagsBits = 46;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      swift_bridgeObjectRetain();
      v12._countAndFlagsBits = v7;
      v12._object = v9;
      String.append(_:)(v12);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = static CustomTypeReference.buildFromAttributeHash(attributeHash:)(v15);
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      char v22 = v21;
      swift_bridgeObjectRelease();
      uint64_t v26 = v16;
      uint64_t v27 = v18;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = 46;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      swift_bridgeObjectRetain();
      v24._countAndFlagsBits = v20;
      v24._object = v22;
      String.append(_:)(v24);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v26;
    uint64_t v14 = v27;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = (void *)0xE000000000000000;
  }
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

Swift::Bool __swiftcall CustomIntentStateAttachment.isMulticardinal()()
{
  id v1 = [*(id *)v0 _codableDescription];
  uint64_t v2 = *(void *)(v0 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = v2;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  id v5 = outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)(v3, v4, v1);

  if (!v5) {
    return 0;
  }
  id v6 = [v5 modifier];

  return v6 == 0;
}

Swift::String_optional __swiftcall CustomIntentStateAttachment.intentAsJsonString()()
{
  id v1 = *v0;
  if (one-time initialization token for setCachedLanguage != -1) {
    swift_once();
  }
  id v2 = [v1 _JSONDictionaryRepresentation];
  uint64_t v3 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  specialized _dictionaryUpCast<A, B, C, D>(_:)(v3);
  v5._rawValue = v4;
  swift_bridgeObjectRelease();
  Swift::String_optional v6 = CustomIntentStateAttachment.dictionaryAsString(hash:)(v5);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;
  object = v6.value._object;
  result.value._object = object;
  result.value._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

Swift::String_optional __swiftcall CustomIntentStateAttachment.intentDefinitionAsJsonString()()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v1 - 8);
  OUTLINED_FUNCTION_2_27();
  id v2 = [*v0 _codableDescription];
  INCodableDescription.asCustomIntentDescription()();

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomIntentDefinition?);
  lazy protocol witness table accessor for type CustomIntentDefinition? and conformance <A> A?();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  String.init(data:encoding:)();
  outlined consume of Data._Representation(v3, v5);
  uint64_t v6 = OUTLINED_FUNCTION_19();
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall CustomIntentStateAttachment.intentResponseAsJsonString()()
{
  uint64_t v1 = *(void **)(v0 + 56);
  if (v1)
  {
    id v2 = objc_allocWithZone((Class)INJSONEncoder);
    id v3 = v1;
    id v4 = [v2 init];
    id v5 = v3;
    id v6 = [v5 _codableDescription];
    id v7 = [v4 encodeObject:v5 withCodableDescription:v6];

    if (v7)
    {
      uint64_t v8 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
      v10._rawValue = v9;
      swift_bridgeObjectRelease();
      CustomIntentStateAttachment.dictionaryAsString(hash:)(v10);

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  uint64_t v11 = OUTLINED_FUNCTION_31_7();
  result.value._object = v12;
  result.value._uint64_t countAndFlagsBits = v11;
  return result;
}

Swift::String_optional __swiftcall CustomIntentStateAttachment.selectionItemsAsJsonString()()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v1 - 8);
  id v2 = [*(id *)v0 _codableDescription];
  if (*(void *)(v0 + 40))
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  id v5 = outlined bridged method (mbnn) of @objc INCodableDescription.attribute(byName:)(v3, v4, v2);

  if (!v5)
  {
LABEL_25:
    outlined init with take of [[AnyHashable : Any]]?(v0 + 48, (uint64_t)&v35);
    outlined init with take of [[AnyHashable : Any]]?((uint64_t)&v35, (uint64_t)v34);
    if (v34[0])
    {
      uint64_t v17 = self;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      uint64_t v31 = 0;
      id v19 = [v17 dataWithJSONObject:isa options:0 error:&v31];

      id v20 = (id)v31;
      if (v19)
      {
        uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        static String.Encoding.utf8.getter();
        String.init(data:encoding:)();
        outlined consume of Data._Representation(v21, v23);
      }
      else
      {
        Swift::String v24 = v20;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
    }
    goto LABEL_31;
  }
  if ([v5 valueType] != (char *)&stru_20.vmsize + 1
    || (outlined init with take of [[AnyHashable : Any]]?(v0 + 48, (uint64_t)v37),
        outlined init with take of [[AnyHashable : Any]]?((uint64_t)v37, (uint64_t)&v38),
        (uint64_t v6 = v38) == 0))
  {

    goto LABEL_25;
  }
  uint64_t v7 = *(void *)(v38 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    goto LABEL_30;
  }
  id v30 = v5;
  uint64_t v33 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v9 = (uint64_t *)(v6 + 32);
  do
  {
    uint64_t v10 = *v9;
    uint64_t v31 = 0x616C756261636F76;
    unint64_t v32 = 0xEF65756C61567972;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(void *)(v10 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34), (v12 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v35);
    }
    else
    {
      long long v35 = 0u;
      long long v36 = 0u;
    }
    outlined destroy of AnyHashable((uint64_t)v34);
    if (*((void *)&v36 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v14 = v31;
        unint64_t v13 = v32;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v35);
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = 0;
    unint64_t v13 = 0xE000000000000000;
LABEL_18:
    uint64_t v8 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v8 = v33;
    }
    unint64_t v15 = v8[2];
    if (v15 >= v8[3] >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v8 = v33;
    }
    v8[2] = v15 + 1;
    uint64_t v16 = &v8[2 * v15];
    v16[4] = v14;
    v16[5] = v13;
    ++v9;
    --v7;
  }
  while (v7);
  id v5 = v30;
LABEL_30:
  v34[0] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  v34[0] = 91;
  v34[1] = 0xE100000000000000;
  v25._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_31_7();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 93;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);

LABEL_31:
  uint64_t v27 = OUTLINED_FUNCTION_19();
  result.value._object = v28;
  result.value._uint64_t countAndFlagsBits = v27;
  return result;
}

id CustomIntentStateAttachment.asAceSerializable(hash:)()
{
  id v0 = objc_allocWithZone((Class)SABaseAceObject);
  uint64_t v1 = swift_bridgeObjectRetain();
  id result = @nonobjc SABaseAceObject.init(dictionary:)(v1);
  if (!result) {
    __break(1u);
  }
  return result;
}

Swift::String_optional __swiftcall CustomIntentStateAttachment.dictionaryAsString(hash:)(Swift::OpaquePointer hash)
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v1 - 8);
  OUTLINED_FUNCTION_2_27();
  id v2 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v12 = 0;
  id v4 = [v2 dataWithJSONObject:isa options:2 error:&v12];

  id v5 = v12;
  if (v4)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    static String.Encoding.utf8.getter();
    OUTLINED_FUNCTION_31_7();
    String.init(data:encoding:)();
    uint64_t v6 = OUTLINED_FUNCTION_31_7();
    outlined consume of Data._Representation(v6, v7);
  }
  else
  {
    uint64_t v8 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  uint64_t v9 = OUTLINED_FUNCTION_19();
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomIntentDefinition? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CustomIntentDefinition?);
    lazy protocol witness table accessor for type CustomIntentDefinition and conformance CustomIntentDefinition();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomIntentDefinition and conformance CustomIntentDefinition()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentDefinition and conformance CustomIntentDefinition;
  if (!lazy protocol witness table cache variable for type CustomIntentDefinition and conformance CustomIntentDefinition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentDefinition and conformance CustomIntentDefinition);
  }
  return result;
}

uint64_t outlined init with take of [[AnyHashable : Any]]?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AnyHashable : Any]]?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for CustomIntentStateAttachment(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v2 = *(void **)(a1 + 56);
}

uint64_t initializeWithCopy for CustomIntentStateAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  id v8 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v6;
  return a1;
}

uint64_t assignWithCopy for CustomIntentStateAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 56);
  id v8 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v8;
  id v9 = v8;

  uint64_t v10 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v11;
  return a1;
}

void *__swift_memcpy89_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x59uLL);
}

uint64_t assignWithTake for CustomIntentStateAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentStateAttachment(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 89))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomIntentStateAttachment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomIntentStateAttachment()
{
  return &type metadata for CustomIntentStateAttachment;
}

uint64_t OUTLINED_FUNCTION_0_46(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return specialized Dictionary.subscript.setter((uint64_t)va);
}

char *OUTLINED_FUNCTION_1_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return &a11;
}

uint64_t Signposter.voiceCommands.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSSignposter();

  return __swift_project_value_buffer(v0, (uint64_t)static Signposter.voiceCommands);
}

char **Signposter.Name.fetchActionForAutoShortcutPhrase.unsafeMutableAddressor()
{
  return &static Signposter.Name.fetchActionForAutoShortcutPhrase;
}

char **Signposter.Name.fetchAutoShortcuts.unsafeMutableAddressor()
{
  return &static Signposter.Name.fetchAutoShortcuts;
}

char **Signposter.Name.inputUtilsGetDateComponents.unsafeMutableAddressor()
{
  return &static Signposter.Name.inputUtilsGetDateComponents;
}

char **Signposter.Name.inputUtilsGetPerson.unsafeMutableAddressor()
{
  return &static Signposter.Name.inputUtilsGetPerson;
}

char **Signposter.Name.linkRCHFlowNeedsValue.unsafeMutableAddressor()
{
  return &static Signposter.Name.linkRCHFlowNeedsValue;
}

char **Signposter.Name.linkRCHFlowNeedsActionConfirmation.unsafeMutableAddressor()
{
  return &static Signposter.Name.linkRCHFlowNeedsActionConfirmation;
}

char **Signposter.Name.linkRCHFlowNeedsConfirmation.unsafeMutableAddressor()
{
  return &static Signposter.Name.linkRCHFlowNeedsConfirmation;
}

char **Signposter.Name.linkRCHFlowNeedsDisambiguation.unsafeMutableAddressor()
{
  return &static Signposter.Name.linkRCHFlowNeedsDisambiguation;
}

char **Signposter.Name.linkFetchActionMetadata.unsafeMutableAddressor()
{
  return &static Signposter.Name.linkFetchActionMetadata;
}

uint64_t static Signposter.voiceCommands.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OSSignposter();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Signposter.voiceCommands);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void static Signposter.Name.fetchActionForAutoShortcutPhrase.getter()
{
}

void static Signposter.Name.fetchAutoShortcuts.getter()
{
}

void static Signposter.Name.linkFetchActionMetadata.getter()
{
}

void static Signposter.Name.linkRCHFlowNeedsActionConfirmation.getter()
{
}

void static Signposter.Name.linkRCHFlowNeedsConfirmation.getter()
{
}

void static Signposter.Name.linkRCHFlowNeedsDisambiguation.getter()
{
}

void static Signposter.Name.linkRCHFlowNeedsValue.getter()
{
}

void static Signposter.Name.inputUtilsGetPerson.getter()
{
}

void static Signposter.Name.inputUtilsGetDateComponents.getter()
{
}

ValueMetadata *type metadata accessor for Signposter()
{
  return &type metadata for Signposter;
}

ValueMetadata *type metadata accessor for Signposter.Name()
{
  return &type metadata for Signposter.Name;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return OUTLINED_FUNCTION_41_18();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_6_45();
}

{
  return OUTLINED_FUNCTION_6_45();
}

{
  char v0;

  OUTLINED_FUNCTION_1_45();
  if (v0) {
    OUTLINED_FUNCTION_28_13();
  }
  else {
    OUTLINED_FUNCTION_29_26();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_3_45();
}

{
  return OUTLINED_FUNCTION_6_45();
}

{
  return OUTLINED_FUNCTION_13_41();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_39_17();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  char v0;

  OUTLINED_FUNCTION_1_45();
  if (!v0) {
    OUTLINED_FUNCTION_2_55();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  char v0;

  OUTLINED_FUNCTION_1_45();
  if (v0) {
    OUTLINED_FUNCTION_28_13();
  }
  else {
    OUTLINED_FUNCTION_2_55();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_39_17();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_9_43();
  OUTLINED_FUNCTION_44_16();
  switch(v0)
  {
    case 1:
      OUTLINED_FUNCTION_22_30();
      break;
    case 2:
      OUTLINED_FUNCTION_30_24();
      break;
    case 3:
      OUTLINED_FUNCTION_18_31();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_13_41();
}

{
  return OUTLINED_FUNCTION_3_45();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_3_45();
}

{
  return specialized RawRepresentable<>.hashValue.getter();
}

{
  char v0;

  OUTLINED_FUNCTION_1_45();
  if (v0) {
    OUTLINED_FUNCTION_47_7();
  }
  else {
    OUTLINED_FUNCTION_33_22();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_9_43();
  OUTLINED_FUNCTION_40_18();
  switch(v0)
  {
    case 1:
      OUTLINED_FUNCTION_16_33();
      break;
    case 2:
      OUTLINED_FUNCTION_24_27();
      break;
    case 3:
      OUTLINED_FUNCTION_19_28();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  char v0;

  OUTLINED_FUNCTION_1_45();
  if (!v0) {
    OUTLINED_FUNCTION_31_21();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  char v0;

  OUTLINED_FUNCTION_1_45();
  if (!v0) {
    OUTLINED_FUNCTION_16_33();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_51_14();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_51_14();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_3_45();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_6_45();
}

{
  return OUTLINED_FUNCTION_13_41();
}

{
  return OUTLINED_FUNCTION_3_45();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_52_13();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_6_45();
}

{
  return OUTLINED_FUNCTION_3_45();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_9_43();
  OUTLINED_FUNCTION_32_24();
  switch(v0)
  {
    case 1:
      OUTLINED_FUNCTION_2_55();
      break;
    case 2:
      OUTLINED_FUNCTION_20_32();
      break;
    case 3:
      OUTLINED_FUNCTION_23_32();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_13_41();
}

{
  return OUTLINED_FUNCTION_13_41();
}

{
  return OUTLINED_FUNCTION_13_41();
}

{
  return OUTLINED_FUNCTION_26_26();
}

{
  char v0;

  OUTLINED_FUNCTION_1_45();
  if (!v0) {
    OUTLINED_FUNCTION_2_55();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_52_13();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_26_26();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_26_26();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_9_43();
  OUTLINED_FUNCTION_42_19();
  switch(v0)
  {
    case 1:
      OUTLINED_FUNCTION_47_14();
      break;
    case 2:
      OUTLINED_FUNCTION_35_19();
      break;
    case 3:
      OUTLINED_FUNCTION_46_17();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_1_45();
  OUTLINED_FUNCTION_39_17();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_41_18();
}

{
  OUTLINED_FUNCTION_9_43();
  String.hash(into:)();
  return Hasher._finalize()();
}

{
  char v0;

  OUTLINED_FUNCTION_1_45();
  if (v0) {
    OUTLINED_FUNCTION_47_7();
  }
  else {
    OUTLINED_FUNCTION_45_13();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(uint64_t a1)
{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))SuggestionsCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))RunLinkActionCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))RunVoiceCommandCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AutoShortcutCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))RunCustomIntentCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))AutoShortcutCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))WorkflowRunnerCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))WorkflowRunnerCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))WorkflowRunnerCATsSimple.InputDateDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))RunLinkActionCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))VoiceCommandsNLIntent.Verb.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))VoiceCommandsNLIntent.VoiceCommandUnit.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))VoiceCommandsNLIntent.VoiceCommandReference.rawValue.getter);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1)
{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ListShortcutsCATsSimple.Properties.rawValue.getter);
}

{
  OUTLINED_FUNCTION_9_43();
  if (!a1) {
    OUTLINED_FUNCTION_34_18();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))InstallShortcutCATsSimple.Properties.rawValue.getter);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1, void (*a2)(uint64_t))
{
  uint64_t v3 = a1 & 1;
  OUTLINED_FUNCTION_9_43();
  a2(v3);
  OUTLINED_FUNCTION_21_28();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(uint64_t a1, void (*a2)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  if (a2) {
    OUTLINED_FUNCTION_50_13();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_22_30();
      break;
    case 2:
      OUTLINED_FUNCTION_30_24();
      break;
    case 3:
      OUTLINED_FUNCTION_18_31();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (a2) {
    OUTLINED_FUNCTION_47_7();
  }
  else {
    OUTLINED_FUNCTION_33_22();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (!a2) {
    OUTLINED_FUNCTION_2_55();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (!a2) {
    OUTLINED_FUNCTION_34_18();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_2_55();
      break;
    case 2:
      OUTLINED_FUNCTION_20_32();
      break;
    case 3:
      OUTLINED_FUNCTION_23_32();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (a2) {
    OUTLINED_FUNCTION_50_13();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (!a2) {
    OUTLINED_FUNCTION_16_33();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_16_33();
      break;
    case 2:
      OUTLINED_FUNCTION_24_27();
      break;
    case 3:
      OUTLINED_FUNCTION_19_28();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (!a2) {
    OUTLINED_FUNCTION_31_21();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (a2) {
    OUTLINED_FUNCTION_47_7();
  }
  else {
    OUTLINED_FUNCTION_45_13();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (a2) {
    OUTLINED_FUNCTION_28_13();
  }
  else {
    OUTLINED_FUNCTION_2_55();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (a2) {
    OUTLINED_FUNCTION_28_13();
  }
  else {
    OUTLINED_FUNCTION_29_26();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (!a2) {
    OUTLINED_FUNCTION_2_55();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  OUTLINED_FUNCTION_49_12();
  return String.hash(into:)();
}

{
  return OUTLINED_FUNCTION_14_26();
}

{
  return String.hash(into:)();
}

{
  return OUTLINED_FUNCTION_4_45();
}

{
  return OUTLINED_FUNCTION_4_45();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_7_43();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_14_26();
}

{
  return OUTLINED_FUNCTION_27_30();
}

{
  return OUTLINED_FUNCTION_14_26();
}

{
  return OUTLINED_FUNCTION_27_30();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_4_45();
}

{
  return OUTLINED_FUNCTION_14_26();
}

{
  return OUTLINED_FUNCTION_14_26();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_4_45();
}

{
  return OUTLINED_FUNCTION_7_43();
}

{
  return OUTLINED_FUNCTION_7_43();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_25_21();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_27_30();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t vars8;

  OUTLINED_FUNCTION_25_21();
  switch(v0)
  {
    case 1:
      OUTLINED_FUNCTION_47_14();
      break;
    case 2:
      OUTLINED_FUNCTION_35_19();
      break;
    case 3:
      OUTLINED_FUNCTION_46_17();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t vars8;

  OUTLINED_FUNCTION_25_21();
  switch(v0)
  {
    case 3:
      OUTLINED_FUNCTION_35_19();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_7_43();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_7_43();
}

{
  return OUTLINED_FUNCTION_4_45();
}

{
  return OUTLINED_FUNCTION_4_45();
}

{
  return OUTLINED_FUNCTION_14_26();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_36_18();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  return OUTLINED_FUNCTION_36_18();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))RunVoiceCommandCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))RunCustomIntentCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))AutoShortcutCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))VoiceCommandsNLIntent.VoiceCommandReference.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))VoiceCommandsNLIntent.VoiceCommandUnit.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))SuggestionsCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))AutoShortcutCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))RunLinkActionCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))RunLinkActionCATsSimple.Properties.rawValue.getter);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  a3(a2);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  OUTLINED_FUNCTION_17_23();
  if (!v0) {
    OUTLINED_FUNCTION_2_55();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_8_39();
}

{
  char v0;

  OUTLINED_FUNCTION_17_23();
  if (v0) {
    OUTLINED_FUNCTION_28_13();
  }
  else {
    OUTLINED_FUNCTION_29_26();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_5_41();
}

{
  char v0;

  OUTLINED_FUNCTION_17_23();
  if (v0) {
    OUTLINED_FUNCTION_28_13();
  }
  else {
    OUTLINED_FUNCTION_2_55();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_39_17();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_39_17();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_15_32();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_37_20();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_37_20();
}

{
  char v0;

  OUTLINED_FUNCTION_17_23();
  if (v0) {
    OUTLINED_FUNCTION_47_7();
  }
  else {
    OUTLINED_FUNCTION_45_13();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_15_32();
}

{
  return OUTLINED_FUNCTION_5_41();
}

{
  char v0;

  OUTLINED_FUNCTION_17_23();
  if (!v0) {
    OUTLINED_FUNCTION_31_21();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_5_41();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_48_11();
  OUTLINED_FUNCTION_40_18();
  switch(v0)
  {
    case 1:
      OUTLINED_FUNCTION_16_33();
      break;
    case 2:
      OUTLINED_FUNCTION_24_27();
      break;
    case 3:
      OUTLINED_FUNCTION_19_28();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_8_39();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_51_14();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_8_39();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_51_14();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  char v0;

  OUTLINED_FUNCTION_17_23();
  if (!v0) {
    OUTLINED_FUNCTION_16_33();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_8_39();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_48_11();
  OUTLINED_FUNCTION_42_19();
  switch(v0)
  {
    case 1:
      OUTLINED_FUNCTION_47_14();
      break;
    case 2:
      OUTLINED_FUNCTION_35_19();
      break;
    case 3:
      OUTLINED_FUNCTION_46_17();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_39_17();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_28_23();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_48_11();
  OUTLINED_FUNCTION_32_24();
  switch(v0)
  {
    case 1:
      OUTLINED_FUNCTION_2_55();
      break;
    case 2:
      OUTLINED_FUNCTION_20_32();
      break;
    case 3:
      OUTLINED_FUNCTION_23_32();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_52_13();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_52_13();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_8_39();
}

{
  return OUTLINED_FUNCTION_5_41();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_15_32();
}

{
  return OUTLINED_FUNCTION_15_32();
}

{
  return OUTLINED_FUNCTION_5_41();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_28_23();
}

{
  char v0;

  OUTLINED_FUNCTION_17_23();
  if (!v0) {
    OUTLINED_FUNCTION_2_55();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_28_23();
}

{
  return OUTLINED_FUNCTION_15_32();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  char v0;

  OUTLINED_FUNCTION_17_23();
  if (v0) {
    OUTLINED_FUNCTION_47_7();
  }
  else {
    OUTLINED_FUNCTION_33_22();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return OUTLINED_FUNCTION_5_41();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_48_11();
  OUTLINED_FUNCTION_44_16();
  switch(v0)
  {
    case 1:
      OUTLINED_FUNCTION_22_30();
      break;
    case 2:
      OUTLINED_FUNCTION_30_24();
      break;
    case 3:
      OUTLINED_FUNCTION_18_31();
      break;
    default:
      break;
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  return OUTLINED_FUNCTION_15_32();
}

{
  OUTLINED_FUNCTION_49_12();
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

{
  OUTLINED_FUNCTION_17_23();
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))RunLinkActionCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))RunLinkActionCATPatternsIdentifiers.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))AutoShortcutCATs.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))SuggestionsCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))VoiceCommandsNLIntent.VoiceCommandUnit.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))VoiceCommandsNLIntent.VoiceCommandReference.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))VoiceCommandsNLIntent.VoiceCommandCurrencyUnit.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))VoiceCommandsNLIntent.Verb.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))AutoShortcutCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))WorkflowRunnerCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))WorkflowRunnerCATsSimple.InputDateDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))RunCustomIntentCATsSimple.DisambiguateSlotValueWithCustomTextDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))RunCustomIntentCATsSimple.IntentConfirmationPromptWithTemplateDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))RunCustomIntentCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))RunVoiceCommandCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))RunVoiceCommandCATsSimple.IntentConfirmationPromptDialogIds.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))WorkflowRunnerCATPatternsIdentifiers.rawValue.getter);
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))ListShortcutsCATsSimple.Properties.rawValue.getter);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))InstallShortcutCATsSimple.Properties.rawValue.getter);
}

{
  Hasher.init(_seed:)();
  if (!a2) {
    OUTLINED_FUNCTION_34_18();
  }
  OUTLINED_FUNCTION_0_48();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4 = a2 & 1;
  Hasher.init(_seed:)();
  a3(v4);
  OUTLINED_FUNCTION_21_28();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

SiriLinkFlowPlugin::AskForInputType_optional __swiftcall AskForInputType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AskForInputType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (SiriLinkFlowPlugin::AskForInputType_optional)3;
  }
  else {
    return (SiriLinkFlowPlugin::AskForInputType_optional)v3;
  }
}

uint64_t AskForInputType.rawValue.getter(char a1)
{
  if (!a1) {
    return 1954047348;
  }
  OUTLINED_FUNCTION_28_13();
  if (v1) {
    return 0x7265626D756ELL;
  }
  else {
    return 7107189;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AskForInputType(char *a1)
{
  return specialized == infix<A>(_:_:)(*a1);
}

unint64_t lazy protocol witness table accessor for type AskForInputType and conformance AskForInputType()
{
  unint64_t result = lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType;
  if (!lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType;
  if (!lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AskForInputType()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AskForInputType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AskForInputType()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriLinkFlowPlugin::AskForInputType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AskForInputType@<W0>(Swift::String *a1@<X0>, SiriLinkFlowPlugin::AskForInputType_optional *a2@<X8>)
{
  result.value = AskForInputType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AskForInputType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AskForInputType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AskForInputType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AskForInputType()
{
  return RawRepresentable<>.encode(to:)();
}

unsigned char *storeEnumTagSinglePayload for AskForInputType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1FB874);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AskForInputType()
{
  return &type metadata for AskForInputType;
}

uint64_t OUTLINED_FUNCTION_0_48()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_1_45()
{
  return Hasher.init(_seed:)();
}

Swift::Int OUTLINED_FUNCTION_3_45()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t OUTLINED_FUNCTION_4_45()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_5_41()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

Swift::Int OUTLINED_FUNCTION_6_45()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t OUTLINED_FUNCTION_7_43()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_8_39()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t OUTLINED_FUNCTION_9_43()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_10_41()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_11_41()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

Swift::Int OUTLINED_FUNCTION_12_45()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int OUTLINED_FUNCTION_13_41()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t OUTLINED_FUNCTION_14_26()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_15_32()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t OUTLINED_FUNCTION_17_23()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_21_28()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_26_26()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t OUTLINED_FUNCTION_27_30()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_28_23()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t OUTLINED_FUNCTION_36_18()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_37_20()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

Swift::Int OUTLINED_FUNCTION_41_18()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t OUTLINED_FUNCTION_48_11()
{
  return Hasher.init(_seed:)();
}

uint64_t CustomIntentNeedsValueFlowStrategy.__allocating_init(deviceState:catWrapper:catWrapperSimple:)(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  CustomIntentNeedsValueFlowStrategy.init(deviceState:catWrapper:catWrapperSimple:)(a1, a2, a3);
  return v6;
}

void *CustomIntentNeedsValueFlowStrategy.init(deviceState:catWrapper:catWrapperSimple:)(long long *a1, uint64_t a2, uint64_t a3)
{
  v3[2] = 0;
  outlined init with take of AceServiceInvokerAsync(a1, (uint64_t)(v3 + 3));
  v3[8] = a2;
  v3[9] = a3;
  return v3;
}

void CustomIntentNeedsValueFlowStrategy.actionForInput(_:resolveRecord:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  type metadata accessor for ParameterIdentifier();
  OUTLINED_FUNCTION_0_2();
  uint64_t v58 = v5;
  uint64_t v59 = v4;
  __chkstk_darwin(v4);
  Swift::String_optional v57 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v12 = (char *)&v56 - v11;
  uint64_t v13 = type metadata accessor for SiriKitConfirmationState();
  OUTLINED_FUNCTION_0_2();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static FlowStrategyUtils.makeConfirmationStateFromInput(input:)(a1, (uint64_t)v18);
  int v19 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v18, v13);
  int v20 = enum case for SiriKitConfirmationState.cancelled(_:);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
  if (v19 == v20)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.voiceCommands);
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_45(&dword_0, v24, v25, "User cancelled the prompt");
      OUTLINED_FUNCTION_7_0();
    }

    static ActionForInput.cancel()();
  }
  else
  {
    Input.parse.getter();
    uint64_t v26 = OUTLINED_FUNCTION_16_34();
    int v28 = v27(v26);
    if (v28 == enum case for Parse.NLv3IntentOnly(_:))
    {
      uint64_t v29 = OUTLINED_FUNCTION_16_34();
      v30(v29);
    }
    else
    {
      if (v28 != enum case for Parse.NLv3IntentPlusServerConversion(_:))
      {
        if (v28 == enum case for Parse.uso(_:) && (SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) != 0) {
          static ActionForInput.handle()();
        }
        else {
          static ActionForInput.ignore()();
        }
        OUTLINED_FUNCTION_53_1();
        v50();
        return;
      }
      uint64_t v31 = OUTLINED_FUNCTION_16_34();
      v32(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
      swift_release();
      type metadata accessor for NLIntent();
      OUTLINED_FUNCTION_28();
      (*(void (**)(char *))(v33 + 8))(v12);
    }
    Input.parse.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
    uint64_t v34 = (void *)ParameterResolutionRecord.intent.getter();
    uint64_t v35 = static FlowStrategyUtils.makeIntentFromParse(parse:currentIntent:)((uint64_t)v10);

    OUTLINED_FUNCTION_53_1();
    v36();
    uint64_t v37 = v60;
    uint64_t v38 = *(void **)(v60 + 16);
    *(void *)(v60 + 16) = v35;

    uint64_t v39 = *(void **)(v37 + 16);
    if (v39)
    {
      id v40 = v39;
      uint64_t v41 = v57;
      ParameterResolutionRecord.parameter.getter();
      uint64_t v42 = ParameterIdentifier.name.getter();
      Swift::String_optional v44 = v43;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v41, v59);
      static INIntentParameterHelper.extractParameterValue(_:_:)(v40, v42, v44, &v64);
      if (v65)
      {
        swift_bridgeObjectRelease();
        outlined destroy of SpeakableString?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
        static ActionForInput.handle()();
      }
      else
      {
        outlined destroy of SpeakableString?((uint64_t)&v64, &demangling cache variable for type metadata for Any?);
        if (one-time initialization token for voiceCommands != -1) {
          swift_once();
        }
        uint64_t v51 = type metadata accessor for Logger();
        __swift_project_value_buffer(v51, (uint64_t)static Logger.voiceCommands);
        swift_bridgeObjectRetain();
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v64 = OUTLINED_FUNCTION_22_3();
          *(_DWORD *)uint64_t v54 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, (unint64_t)v44, (uint64_t *)&v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_0, v52, v53, "Updated intent still contains a nil value for %s. Assuming that the user did not answer the prompt and ignoring the input", v54, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        id v55 = *(void **)(v60 + 16);
        *(void *)(v60 + 16) = 0;

        static ActionForInput.ignore()();
      }
    }
    else
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.voiceCommands);
      Swift::String_optional v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        *(_WORD *)OUTLINED_FUNCTION_33() = 0;
        OUTLINED_FUNCTION_45(&dword_0, v48, v49, "CustomIntentNeedsValueFlowStrategy was not able to update intent from parse");
        OUTLINED_FUNCTION_7_0();
      }

      static ActionForInput.ignore()();
    }
  }
}

uint64_t CustomIntentNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[51] = v2;
  v1[52] = v0;
  v1[49] = v3;
  v1[50] = v4;
  uint64_t v5 = type metadata accessor for Locale();
  v1[53] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[54] = v6;
  v1[55] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for USOParse();
  v1[56] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[57] = v8;
  v1[58] = OUTLINED_FUNCTION_25();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  v1[59] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[60] = v10;
  v1[61] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for Parse();
  v1[62] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[63] = v12;
  v1[64] = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for ParameterIdentifier();
  v1[65] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v1[66] = v14;
  v1[67] = OUTLINED_FUNCTION_25();
  uint64_t v15 = type metadata accessor for Input();
  v1[68] = v15;
  OUTLINED_FUNCTION_1_0(v15);
  v1[69] = v16;
  v1[70] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v17, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  void *v24;
  _OWORD *v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  _WORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(void);
  NSObject *v94;
  os_log_type_t v95;
  _WORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t);
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t type;
  os_log_type_t typea;
  uint64_t v106;
  void *v107;
  NSObject *log;
  _OWORD v109[2];
  uint64_t v110;
  uint64_t v111;

  v110 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  char v1 = *(void *)(v0 + 560);
  uint64_t v2 = *(void *)(v0 + 552);
  uint64_t v3 = *(void *)(v0 + 544);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 568) = __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(void *)&v109[0] = OUTLINED_FUNCTION_22_3();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = Input.description.getter();
    *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_53_1();
    v11();
    _os_log_impl(&dword_0, v6, v7, "CustomIntentNeedsValueFlowStrategy on input: %s", v8, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 552) + 8))(*(void *)(v0 + 560), *(void *)(v0 + 544));
  }

  uint64_t v12 = *(void *)(v0 + 536);
  uint64_t v13 = *(void *)(v0 + 528);
  uint64_t v14 = *(void *)(v0 + 520);
  uint64_t v15 = *(void *)(v0 + 504);
  uint64_t v16 = *(void *)(v0 + 512);
  uint64_t v17 = *(void *)(v0 + 496);
  ParameterResolutionRecord.parameter.getter();
  type = ParameterIdentifier.name.getter();
  *(void *)(v0 + 576) = type;
  uint64_t v107 = v18;
  *(void *)(v0 + 584) = v18;
  uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v103(v12, v14);
  Input.parse.getter();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 88))(v16, v17);
  if (v19 == enum case for Parse.NLv3IntentOnly(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 504) + 8))(*(void *)(v0 + 512), *(void *)(v0 + 496));
LABEL_10:
    uint64_t v24 = *(void **)(*(void *)(v0 + 416) + 16);
    if (v24)
    {
      uint64_t v25 = (_OWORD *)(v0 + 304);
      uint64_t v26 = v24;
      uint64_t v27 = Logger.logObject.getter();
      int v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_26_10();
        *(void *)&v109[0] = OUTLINED_FUNCTION_22_3();
        *(_DWORD *)uint64_t v29 = 136315138;
        id v30 = INIntent.debugDescriptionLite.getter();
        *(void *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_0, v27, v28, "IntentFromParse: %s", v29, 0xCu);
        OUTLINED_FUNCTION_21_29();
        OUTLINED_FUNCTION_7_0();
        uint64_t v25 = (_OWORD *)(v0 + 304);
        OUTLINED_FUNCTION_7_0();
      }
      else
      {
      }
      static INIntentParameterHelper.extractParameterValue(_:_:)(v26, type, v107, v25);
      if (*(void *)(v0 + 328))
      {
        os_log_type_t v53 = v0 + 176;
        uint64_t v54 = v0 + 272;
        outlined init with take of Any(v25, (_OWORD *)(v0 + 272));
        outlined init with copy of Any(v0 + 272, v0 + 240);
        id v55 = static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(v26, type, (unint64_t)v107, v0 + 240, 0, 1);
        swift_bridgeObjectRelease();
        outlined destroy of SpeakableString?(v0 + 240, &demangling cache variable for type metadata for Any?);
        uint64_t v56 = v55;
        Swift::String_optional v57 = Logger.logObject.getter();
        uint64_t v58 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = (uint8_t *)OUTLINED_FUNCTION_26_10();
          *(void *)&v109[0] = OUTLINED_FUNCTION_22_3();
          *(_DWORD *)uint64_t v59 = 136315138;
          uint64_t v60 = INIntent.debugDescriptionLite.getter();
          *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)v109);
          os_log_type_t v53 = v0 + 176;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_0, v57, v58, "Applying value to intent was successful. Transitioning to complete. Updated intent: %s", v59, 0xCu);
          OUTLINED_FUNCTION_21_29();
          OUTLINED_FUNCTION_7_0();
          uint64_t v54 = v0 + 272;
          OUTLINED_FUNCTION_7_0();
        }
        else
        {
        }
        uint64_t v79 = *(void *)(v0 + 392);
        outlined init with copy of Any(v54, v53);
        type metadata accessor for INIntent();
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();

        __swift_destroy_boxed_opaque_existential_1Tm(v54);
      }
      else
      {
        uint64_t v62 = (uint64_t)v25;
        uint64_t v63 = v26;
        uint64_t v65 = *(void *)(v0 + 480);
        long long v64 = *(void *)(v0 + 488);
        uint64_t v66 = *(void *)(v0 + 472);
        uint64_t v67 = *(void *)(v0 + 408);
        swift_bridgeObjectRelease();
        outlined destroy of SpeakableString?(v62, &demangling cache variable for type metadata for Any?);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v64, v67, v66);
        uint64_t v68 = v63;
        uint64_t v69 = Logger.logObject.getter();
        uint64_t v70 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v71 = *(void *)(v0 + 536);
          uint64_t v102 = *(void *)(v0 + 520);
          long long v101 = *(void *)(v0 + 488);
          uint64_t v106 = *(void *)(v0 + 480);
          log = v69;
          uint64_t v72 = *(void *)(v0 + 472);
          uint64_t v73 = swift_slowAlloc();
          *(void *)&v109[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v73 = 136315394;
          typea = v70;
          uint64_t v74 = INIntent.debugDescriptionLite.getter();
          *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          *(_WORD *)(v73 + 12) = 2080;
          ParameterResolutionRecord.parameter.getter();
          uint64_t v76 = ParameterIdentifier.name.getter();
          uint64_t v78 = v77;
          v103(v71, v102);
          *(void *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, (uint64_t *)v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v101, v72);
          uint64_t v69 = log;
          _os_log_impl(&dword_0, log, typea, "Unable to extract parameter value. Intent: %s, parameterName: %s", (uint8_t *)v73, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_0();
          OUTLINED_FUNCTION_7_0();
        }
        else
        {
          uint64_t v91 = *(void *)(v0 + 480);
          uint64_t v90 = *(void *)(v0 + 488);
          uint64_t v92 = *(void *)(v0 + 472);

          (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
        }

        uint64_t v79 = *(void *)(v0 + 392);
        type metadata accessor for INIntent();
        memset(v109, 0, sizeof(v109));
        IntentPromptAnswer.init(answeredValue:updatedIntent:)();
      }
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
      uint64_t v38 = v79;
      uint64_t v39 = 0;
      goto LABEL_36;
    }
    swift_bridgeObjectRelease();
    unint64_t v32 = Logger.logObject.getter();
    uint64_t v33 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v33))
    {
      uint64_t v34 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v34);
      OUTLINED_FUNCTION_7_35(&dword_0, v32, v35, "Delegate was not able to update intent from parse");
      OUTLINED_FUNCTION_7_0();
    }
    long long v36 = *(void *)(v0 + 392);

    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
    uint64_t v38 = v36;
LABEL_16:
    uint64_t v39 = 1;
LABEL_36:
    __swift_storeEnumTagSinglePayload(v38, v39, 1, v37);
LABEL_37:
    OUTLINED_FUNCTION_15_33();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    return v93();
  }
  if (v19 == enum case for Parse.NLv3IntentPlusServerConversion(_:))
  {
    int v20 = *(void *)(v0 + 512);
    uint64_t v21 = OUTLINED_FUNCTION_33_23();
    v22(v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    type metadata accessor for NLIntent();
    OUTLINED_FUNCTION_28();
    (*(void (**)(uint64_t))(v23 + 8))(v20);
    goto LABEL_10;
  }
  if (v19 != enum case for Parse.uso(_:))
  {
    swift_bridgeObjectRelease();
    uint64_t v80 = Logger.logObject.getter();
    uint64_t v81 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v81))
    {
      uint64_t v82 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v82);
      OUTLINED_FUNCTION_7_35(&dword_0, v80, v83, "Unknown parse type received in CustomIntentNeedsValueFlowStrategy");
      OUTLINED_FUNCTION_7_0();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
    uint64_t v84 = OUTLINED_FUNCTION_28_24();
    __swift_storeEnumTagSinglePayload(v84, v85, v86, v87);
    uint64_t v88 = OUTLINED_FUNCTION_30();
    v89(v88);
    goto LABEL_37;
  }
  id v40 = *(void *)(v0 + 512);
  uint64_t v42 = *(void *)(v0 + 456);
  uint64_t v41 = *(void *)(v0 + 464);
  Swift::OpaquePointer v43 = *(void *)(v0 + 448);
  Swift::String_optional v44 = OUTLINED_FUNCTION_33_23();
  v45(v44);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v41, v40, v43);
  if ((SiriLinkFlowFeatureFlags.isEnabled.getter(0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v94 = Logger.logObject.getter();
    uint64_t v95 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_5_3(v95))
    {
      uint64_t v96 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v96);
      OUTLINED_FUNCTION_7_35(&dword_0, v94, v97, "NLv4 follow-ups feature flag is disabled.");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v98 = *(void *)(v0 + 392);

    uint64_t v99 = OUTLINED_FUNCTION_30();
    v100(v99);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
    uint64_t v38 = v98;
    goto LABEL_16;
  }
  Swift::String_optional v46 = *(void *)(v0 + 416);
  os_log_type_t v47 = ParameterResolutionRecord.intent.getter();
  *(void *)(v0 + 592) = v47;
  __swift_project_boxed_opaque_existential_1((void *)(v46 + 24), *(void *)(v46 + 48));
  dispatch thunk of DeviceState.siriLocale.getter();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 600) = v48;
  *uint64_t v48 = v49;
  v48[1] = CustomIntentNeedsValueFlowStrategy.parseValueResponse(input:resolveRecord:);
  uint64_t v50 = *(void *)(v0 + 464);
  uint64_t v51 = *(void *)(v0 + 440);
  return static INIntentParameterHelper.extractParameterValue(previousIntent:usoParse:parameterName:locale:)(v0 + 48, v47, v50, type, (uint64_t)v107, v51);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_0_0();
  uint64_t v2 = v1[55];
  uint64_t v3 = v1[54];
  uint64_t v4 = v1[53];
  uint64_t v5 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  uint64_t v37 = v0;
  if (*(void *)(v0 + 72))
  {
    char v1 = v0 + 16;
    uint64_t v2 = v0 + 112;
    outlined init with take of Any((_OWORD *)(v0 + 48), (_OWORD *)(v0 + 16));
    outlined init with copy of Any(v0 + 16, v0 + 80);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(void *)&v36[0] = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v5 = 136315138;
      outlined init with copy of Any(v0 + 80, v0 + 208);
      uint64_t v6 = String.init<A>(describing:)();
      *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, (uint64_t *)v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
      _os_log_impl(&dword_0, v3, v4, "resolvedValue: %s", v5, 0xCu);
      uint64_t v2 = v0 + 112;
      swift_arrayDestroy();
      char v1 = v0 + 16;
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
    }

    uint64_t v19 = *(void **)(v0 + 592);
    int v20 = *(void *)(v0 + 584);
    uint64_t v21 = *(void *)(v0 + 576);
    outlined init with copy of Any(v1, v2);
    unint64_t v22 = static INIntentParameterHelper.applyParameterValue(_:_:_:applyValueStrategy:)(v19, v21, v20, v2, 0, 1);
    swift_bridgeObjectRelease();
    outlined destroy of SpeakableString?(v2, &demangling cache variable for type metadata for Any?);
    os_log_type_t v23 = v22;
    uint64_t v24 = Logger.logObject.getter();
    uint64_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_26_10();
      *(void *)&v36[0] = OUTLINED_FUNCTION_22_3();
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v27 = INIntent.debugDescriptionLite.getter();
      *(void *)(v0 + 360) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_0, v24, v25, "Applying value to intent was successful. Transitioning to complete. Updated intent: updatedIntent: %s", v26, 0xCu);
      OUTLINED_FUNCTION_21_29();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
    }
    uint64_t v29 = *(void **)(v0 + 592);
    uint64_t v31 = *(void *)(v0 + 456);
    id v30 = *(void *)(v0 + 464);
    unint64_t v32 = *(void *)(v0 + 448);
    uint64_t v33 = *(void *)(v0 + 392);
    outlined init with copy of Any(v1, v0 + 144);
    type metadata accessor for INIntent();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();

    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
    uint64_t v18 = v33;
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined destroy of SpeakableString?(v0 + 48, &demangling cache variable for type metadata for Any?);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_15_2(v10);
      OUTLINED_FUNCTION_7_35(&dword_0, v8, v11, "Could not extract parameter value from USO parse and apply it to INIntent");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v12 = *(void **)(v0 + 592);
    uint64_t v13 = *(void *)(v0 + 464);
    uint64_t v14 = *(void *)(v0 + 448);
    uint64_t v15 = *(void *)(v0 + 456);
    uint64_t v16 = *(void *)(v0 + 392);

    memset(v36, 0, sizeof(v36));
    ParameterResolutionRecord.intent.getter();
    type metadata accessor for INIntent();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<INIntent>);
    uint64_t v18 = v16;
  }
  __swift_storeEnumTagSinglePayload(v18, 0, 1, v17);
  OUTLINED_FUNCTION_15_33();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v34();
}

uint64_t CustomIntentNeedsValueFlowStrategy.makePromptForValue(resolveRecord:)()
{
  OUTLINED_FUNCTION_9_0();
  v1[13] = v2;
  v1[14] = v0;
  v1[12] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v1[15] = OUTLINED_FUNCTION_25();
  uint64_t v4 = type metadata accessor for DialogPhase();
  v1[16] = v4;
  OUTLINED_FUNCTION_1_0(v4);
  v1[17] = v5;
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OutputGenerationManifest();
  v1[20] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v1[21] = v7;
  v1[22] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[23] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v1[24] = v9;
  v1[25] = OUTLINED_FUNCTION_25();
  uint64_t v10 = type metadata accessor for NLContextUpdate();
  v1[26] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v1[27] = v11;
  v1[28] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for ParameterIdentifier();
  v1[29] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v1[30] = v13;
  v1[31] = OUTLINED_FUNCTION_25();
  type metadata accessor for CATOption();
  v1[32] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  char v1 = *(void *)(v0 + 112);
  type metadata accessor for WFDialogState();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<INIntent>);
  ParameterResolutionRecord.app.getter();
  uint64_t v2 = App.appIdentifier.getter();
  uint64_t v4 = v3;
  swift_release();
  *(unsigned char *)(v0 + 392) = static WFDialogState.isAppFirstRun(appId:)(v2, v4) & 1;
  swift_bridgeObjectRelease();
  uint64_t v24 = v1 + 24;
  outlined init with copy of DeviceState(v1 + 24, v0 + 16);
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v7 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v25 = *(void *)(v0 + 232);
  uint64_t v10 = static WFDialogState.shared;
  type metadata accessor for RunVoiceCommandCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v11 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  static CATOption.defaultMode.getter();
  uint64_t v12 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for AppNameResolver();
  uint64_t v13 = swift_allocObject();
  type metadata accessor for CustomIntentsDialogTemplating();
  uint64_t v14 = swift_allocObject();
  *(void *)(v0 + 264) = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)((long long *)(v0 + 16), v10, 0, 1, v6, v5, v11, v12, v13, v14);
  outlined init with copy of DeviceState(v24, v0 + 56);
  type metadata accessor for CustomIntentNLContextProvider();
  uint64_t v15 = swift_allocObject();
  *(void *)(v0 + 272) = v15;
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 56), v15 + 16);
  *(void *)(v0 + 280) = ParameterResolutionRecord.app.getter();
  ParameterResolutionRecord.parameter.getter();
  uint64_t v16 = ParameterIdentifier.name.getter();
  uint64_t v18 = v17;
  *(void *)(v0 + 288) = v16;
  *(void *)(v0 + 296) = v17;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v25);
  uint64_t v19 = ParameterResolutionRecord.intent.getter();
  *(void *)(v0 + 304) = v19;
  *(unsigned char *)(v0 + 393) = INIntent.isRestricted()();
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v0 + 312) = v20;
  void *v20 = v21;
  v20[1] = CustomIntentNeedsValueFlowStrategy.makePromptForValue(resolveRecord:);
  unint64_t v22 = *(void *)(v0 + 224);
  return CustomIntentNLContextProvider.makeNeedsValueContextFor(intent:parameter:)(v22, v19, v16, v18);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 320) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;

  char v1 = (unsigned __int8 *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for RFFeatureFlags.ResponseFramework._SMART(_:), v4);
  uint64_t v5 = RFFeatureFlags.ResponseFramework.isEnabled.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v5)
  {
    os_log_type_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 264)
                                                                                          + 176)
                                                                              + **(int **)(**(void **)(v0 + 264)
                                                                                         + 176));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v6;
    *uint64_t v6 = v0;
    v6[1] = CustomIntentNeedsValueFlowStrategy.makePromptForValue(resolveRecord:);
    uint64_t v7 = *(void *)(v0 + 296);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 288);
    uint64_t v11 = *v1;
    return v23(v10, v9, v7, v8, v11);
  }
  else
  {
    uint64_t v13 = *(unsigned char *)(v0 + 393);
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v0 + 376) = v14;
    void *v14 = v15;
    v14[1] = CustomIntentNeedsValueFlowStrategy.makePromptForValue(resolveRecord:);
    uint64_t v16 = *(void *)(v0 + 296);
    uint64_t v17 = *(void *)(v0 + 304);
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v19 = *(void *)(v0 + 288);
    int v20 = *(void *)(v0 + 264);
    uint64_t v21 = *v1;
    unint64_t v22 = *(void *)(v0 + 96);
    return CustomIntentNeedsValueFlowStrategy.makePromptForValue_preRFv2(dialogTemplating:app:parameterName:intent:shouldShowAppAttribution:isTTSEnabled:context:)(v22, v20, v18, v19, v16, v17, v21, (v13 & 1) == 0);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void (*v8)(void);
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  char v1 = (void *)v0[43];
  uint64_t v2 = v0[27];
  uint64_t v18 = v0[28];
  uint64_t v17 = v0[26];
  uint64_t v4 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v6 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v16 = v0[15];
  static DialogPhase.clarification.getter();
  uint64_t v7 = [v1 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  OUTLINED_FUNCTION_53_1();
  v8();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v16, v18, v17);
  __swift_storeEnumTagSinglePayload(v16, 0, 1, v17);
  OutputGenerationManifest.nlContextUpdate.setter();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[44] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_211C70;
  *(void *)(v9 + 32) = v1;
  int v20 = v9;
  specialized Array._endMutation()();
  v0[45] = v20;
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
                                                          + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:));
  uint64_t v10 = v1;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[46] = v11;
  *uint64_t v11 = v12;
  v11[1] = CustomIntentNeedsValueFlowStrategy.makePromptForValue(resolveRecord:);
  uint64_t v13 = v0[22];
  uint64_t v14 = v0[12];
  return v19(v14, v20, v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  char v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  char v1 = (void *)v0[43];
  uint64_t v2 = (void *)v0[38];
  uint64_t v3 = v0[27];
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  swift_release();

  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = v0[28];
  OUTLINED_FUNCTION_27_31();
  (*(void (**)(uint64_t))(v3 + 8))(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 384) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t CustomIntentNeedsValueFlowStrategy.makePromptForValue(resolveRecord:)(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 336) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1) {
    *(void *)(v5 + 344) = a1;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t CustomIntentNeedsValueFlowStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void **)(v10 + 304);
  swift_release();

  swift_release();
  swift_release();
  uint64_t v12 = *(void *)(v10 + 224);
  OUTLINED_FUNCTION_27_31();
  (*(void (**)(uint64_t))(v13 + 8))(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_14_1();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  uint64_t v11 = *(void **)(v10 + 304);
  swift_release();

  swift_release();
  swift_release();
  OUTLINED_FUNCTION_7_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

{
  void *v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_22_31();

  swift_release();
  swift_release();
  uint64_t v11 = OUTLINED_FUNCTION_34_13();
  v12(v11);
  OUTLINED_FUNCTION_7_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

{
  void *v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_22_31();

  swift_release();
  swift_release();
  uint64_t v11 = OUTLINED_FUNCTION_34_13();
  v12(v11);
  OUTLINED_FUNCTION_7_44();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_14_1();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
}

uint64_t CustomIntentNeedsValueFlowStrategy.makePromptForValue_preRFv2(dialogTemplating:app:parameterName:intent:shouldShowAppAttribution:isTTSEnabled:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 64) = v26;
  *(void *)(v9 + 72) = v8;
  *(unsigned char *)(v9 + 152) = a8;
  *(void *)(v9 + 56) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(void *)(v9 + 80) = OUTLINED_FUNCTION_25();
  uint64_t v16 = type metadata accessor for AceOutput();
  *(void *)(v9 + 88) = v16;
  OUTLINED_FUNCTION_1_0(v16);
  *(void *)(v9 + 96) = v17;
  *(void *)(v9 + 104) = OUTLINED_FUNCTION_25();
  uint64_t v18 = type metadata accessor for TemplatingResult();
  *(void *)(v9 + 112) = v18;
  OUTLINED_FUNCTION_1_0(v18);
  *(void *)(v9 + 120) = v19;
  uint64_t v20 = OUTLINED_FUNCTION_25();
  *(void *)(v9 + 128) = v20;
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)a2 + 184)
                                                                                     + **(int **)(*(void *)a2 + 184));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  *(void *)(v9 + 136) = v21;
  *uint64_t v21 = v22;
  v21[1] = CustomIntentNeedsValueFlowStrategy.makePromptForValue_preRFv2(dialogTemplating:app:parameterName:intent:shouldShowAppAttribution:isTTSEnabled:context:);
  return v24(v20, a3, a4, a5, a6, a7);
}

uint64_t CustomIntentNeedsValueFlowStrategy.makePromptForValue_preRFv2(dialogTemplating:app:parameterName:intent:shouldShowAppAttribution:isTTSEnabled:context:)()
{
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 144) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = *(void *)(v0 + 80);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 72) + 24), *(void *)(*(void *)(v0 + 72) + 48));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(1);
  type metadata accessor for NLContextUpdate();
  uint64_t v2 = OUTLINED_FUNCTION_28_24();
  uint64_t v21 = v3;
  __swift_storeEnumTagSinglePayload(v2, v4, v5, v3);
  *(_OWORD *)(v0 + 16) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of SpeakableString?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of SpeakableString?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v6 = AceOutput.commands.getter();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0);
  if ((v6 & 0xC000000000000001) != 0) {
    uint64_t v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    uint64_t v7 = *(id *)(v6 + 32);
  }
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = v8;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v19 = *(void *)(v0 + 112);
  uint64_t v20 = *(void *)(v0 + 128);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v18 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 88);
  uint64_t v14 = *(uint64_t **)(v0 + 56);
  uint64_t v15 = *(void *)(v0 + 64);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v12, v15, v21);
  __swift_storeEnumTagSinglePayload(v12, 0, 1, v21);
  v14[3] = v13;
  v14[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(v14);
  AceOutput.init(commands:flowActivity:nlContextUpdate:)();

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v18, v13);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v20, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return v16();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t CustomIntentNeedsValueFlowStrategy.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_release();
  swift_release();
  return v0;
}

uint64_t CustomIntentNeedsValueFlowStrategy.__deallocating_deinit()
{
  CustomIntentNeedsValueFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance CustomIntentNeedsValueFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance CustomIntentNeedsValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 152)
                                                          + **(int **)(**(void **)v3 + 152));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance CustomIntentNeedsValueFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 160)
                                                + **(int **)(**(void **)v2 + 160));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance CustomIntentNeedsValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentNeedsValueFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance CustomIntentNeedsValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentNeedsValueFlowStrategy();
  *uint64_t v8 = v4;
  v8[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)(a1, a2, v9, a4);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance CustomIntentNeedsValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  uint64_t v13 = type metadata accessor for CustomIntentNeedsValueFlowStrategy();
  void *v12 = v6;
  v12[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)(a1, a2, a3, a4, v13, a6);
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance CustomIntentNeedsValueFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  uint64_t v15 = type metadata accessor for CustomIntentNeedsValueFlowStrategy();
  void *v14 = v7;
  v14[1] = CustomIntentRCHFlowStrategy.makeErrorResponse(error:app:intent:);
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)(a1, a2, a3, a4, a5, v15, a7);
}

unint64_t lazy protocol witness table accessor for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy;
  if (!lazy protocol witness table cache variable for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy)
  {
    type metadata accessor for CustomIntentNeedsValueFlowStrategy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomIntentNeedsValueFlowStrategy and conformance CustomIntentNeedsValueFlowStrategy);
  }
  return result;
}

uint64_t type metadata accessor for CustomIntentNeedsValueFlowStrategy()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_7_44()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_15_33()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_16_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_29()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_22_31()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_28_24()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_33_23()
{
  return v0;
}

uint64_t CustomIntentConfirmIntentFlowStrategy.__allocating_init(voiceCommandName:siriEnvironment:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  CustomIntentConfirmIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)(a1, a2, a3, a4);
  return v8;
}

uint64_t CustomIntentConfirmIntentFlowStrategy.init(voiceCommandName:siriEnvironment:deviceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = type metadata accessor for CATOption();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = v4 + OBJC_IVAR____TtC18SiriLinkFlowPlugin37CustomIntentConfirmIntentFlowStrategy_confirmationState;
  uint64_t v10 = enum case for SiriKitConfirmationState.unset(_:);
  type metadata accessor for SiriKitConfirmationState();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t, uint64_t))(v11 + 104))(v9, v10);
  outlined init with copy of DeviceState(a4, v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin37CustomIntentConfirmIntentFlowStrategy_deviceState);
  outlined init with copy of DeviceState(a4, (uint64_t)v27);
  type metadata accessor for RunCustomIntentCATs();
  OUTLINED_FUNCTION_9_26();
  uint64_t v12 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATsSimple();
  OUTLINED_FUNCTION_9_26();
  uint64_t v13 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_9_26();
  uint64_t v14 = CATWrapper.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_9_26();
  uint64_t v15 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for ContinueInAppCATWrapperSimple();
  memset(v25, 0, sizeof(v25));
  uint64_t v26 = 0;
  swift_allocObject();
  outlined init with copy of DeviceState?((uint64_t)v25, (uint64_t)v24);
  SiriKitFlowCATWrapperSimple.init(deviceState:)();
  uint64_t v17 = v16;
  outlined destroy of DeviceState?((uint64_t)v25);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  uint64_t v18 = ResponseFactory.init()();
  type metadata accessor for CustomIntentConfirmIntentResponseGenerator();
  uint64_t v19 = (void *)swift_allocObject();
  outlined init with copy of DeviceState((uint64_t)v27, (uint64_t)v25);
  swift_retain();
  uint64_t v20 = specialized CustomIntentResponseGenerator.init(voiceCommandName:siriEnvironment:deviceState:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:continueInAppCATWrapperSimple:responseFactory:)(a1, a2, a3, v25, v12, v13, v14, v15, v17, v18, v19);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  *(void *)(v5 + OBJC_IVAR____TtC18SiriLinkFlowPlugin37CustomIntentConfirmIntentFlowStrategy_responseGenerator) = v20;
  return v5;
}

uint64_t CustomIntentConfirmIntentFlowStrategy.actionForInput(_:confirmParameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SiriKitConfirmationState();
  OUTLINED_FUNCTION_0_2();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  Swift::String_optional v46 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v44 = (uint64_t)&v39 - v12;
  uint64_t v13 = type metadata accessor for Input();
  OUTLINED_FUNCTION_0_2();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v45 = a1;
  v20(v18, a1, v13);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v42 = v6;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v41 = v8;
    v48[0] = v25;
    uint64_t v40 = v2;
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v43 = a2;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (void (*)(uint64_t))&type metadata accessor for Input);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v48);
    uint64_t v3 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = OUTLINED_FUNCTION_14_27();
    v29(v28);
    _os_log_impl(&dword_0, v21, v22, "#CustomIntentConfirmIntentFlowStrategy actionForInput: %s", v24, 0xCu);
    swift_arrayDestroy();
    uint64_t v8 = v41;
    swift_slowDealloc();
    uint64_t v6 = v42;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v30 = OUTLINED_FUNCTION_14_27();
    v31(v30);
  }

  uint64_t v32 = v44;
  static FlowStrategyUtils.makeConfirmationStateFromInput(input:)(v45, v44);
  uint64_t v33 = v3 + OBJC_IVAR____TtC18SiriLinkFlowPlugin37CustomIntentConfirmIntentFlowStrategy_confirmationState;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v33, v32, v6);
  swift_endAccess();
  uint64_t v34 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v46, v33, v6);
  int v35 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v34, v6);
  if (v35 == enum case for SiriKitConfirmationState.unset(_:)) {
    return static ActionForInput.ignore()();
  }
  int v37 = v35;
  if (v35 == enum case for SiriKitConfirmationState.cancelled(_:)) {
    return static ActionForInput.cancel()();
  }
  if (v35 == enum case for SiriKitConfirmationState.confirmed(_:)) {
    return static ActionForInput.handle()();
  }
  int v38 = enum case for SiriKitConfirmationState.rejected(_:);
  uint64_t result = static ActionForInput.handle()();
  if (v37 != v38) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v34, v6);
  }
  return result;
}

uint64_t CustomIntentConfirmIntentFlowStrategy.parseConfirmationResponse(input:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v4[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SiriKitConfirmationState();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t CustomIntentConfirmIntentFlowStrategy.parseConfirmationResponse(input:confirmParameters:)()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7] + OBJC_IVAR____TtC18SiriLinkFlowPlugin37CustomIntentConfirmIntentFlowStrategy_confirmationState;
  swift_beginAccess();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v5(v1, v4, v3);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v6 == enum case for SiriKitConfirmationState.confirmed(_:))
  {
    uint64_t v7 = (unsigned int *)&enum case for ConfirmationResponse.confirmed(_:);
LABEL_5:
    uint64_t v8 = v0[8];
    uint64_t v9 = *v7;
    uint64_t v10 = type metadata accessor for ConfirmationResponse();
    OUTLINED_FUNCTION_6();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload(v8, 0, 1, v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
    IntentResolutionRecord.intent.getter();
    type metadata accessor for INIntent();
    ConfirmIntentAnswer.init(confirmationResponse:intent:)();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_0();
    goto LABEL_7;
  }
  if (v6 == enum case for SiriKitConfirmationState.rejected(_:))
  {
    uint64_t v7 = (unsigned int *)&enum case for ConfirmationResponse.rejected(_:);
    goto LABEL_5;
  }
  uint64_t v14 = v0[10];
  uint64_t v13 = v0[11];
  uint64_t v15 = v0[9];
  type metadata accessor for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(0);
  _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_3(&lazy protocol witness table cache variable for type CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors and conformance CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors, (void (*)(uint64_t))type metadata accessor for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors);
  swift_allocError();
  v5(v16, v4, v15);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
LABEL_7:
  return v12();
}

uint64_t CustomIntentConfirmIntentFlowStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentConfirmIntentFlowStrategy.makePromptForConfirmation(confirmParameters:));
}

uint64_t CustomIntentConfirmIntentFlowStrategy.makePromptForConfirmation(confirmParameters:)()
{
  OUTLINED_FUNCTION_21_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v0 = IntentResolutionRecord.app.getter();
  uint64_t v1 = OUTLINED_FUNCTION_8_20(v0);
  uint64_t v2 = OUTLINED_FUNCTION_8_40(v1);
  OUTLINED_FUNCTION_4_46(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_14_6(v3);
  void *v4 = v5;
  v4[1] = CustomIntentConfirmIntentFlowStrategy.makePromptForConfirmation(confirmParameters:);
  uint64_t v6 = OUTLINED_FUNCTION_5_19();
  return v7(v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    OUTLINED_FUNCTION_15_34();

    swift_release();
    OUTLINED_FUNCTION_12_0();
    return v11();
  }
}

uint64_t CustomIntentConfirmIntentFlowStrategy.makeConfirmationRejectedResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentConfirmIntentFlowStrategy.makeConfirmationRejectedResponse(confirmParameters:));
}

uint64_t CustomIntentConfirmIntentFlowStrategy.makeConfirmationRejectedResponse(confirmParameters:)()
{
  OUTLINED_FUNCTION_21_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v0 = IntentResolutionRecord.app.getter();
  uint64_t v1 = OUTLINED_FUNCTION_8_20(v0);
  uint64_t v2 = OUTLINED_FUNCTION_8_40(v1);
  OUTLINED_FUNCTION_4_46(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_14_6(v3);
  void *v4 = v5;
  v4[1] = CustomIntentConfirmIntentFlowStrategy.makePromptForConfirmation(confirmParameters:);
  uint64_t v6 = OUTLINED_FUNCTION_5_19();
  return v7(v6);
}

uint64_t CustomIntentConfirmIntentFlowStrategy.makeFlowCancelledResponse(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentConfirmIntentFlowStrategy.makeFlowCancelledResponse(confirmParameters:));
}

uint64_t CustomIntentConfirmIntentFlowStrategy.makeFlowCancelledResponse(confirmParameters:)()
{
  OUTLINED_FUNCTION_21_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v0 = IntentResolutionRecord.app.getter();
  uint64_t v1 = OUTLINED_FUNCTION_8_20(v0);
  uint64_t v2 = OUTLINED_FUNCTION_8_40(v1);
  OUTLINED_FUNCTION_4_46(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_14_6(v3);
  void *v4 = v5;
  v4[1] = CustomIntentConfirmIntentFlowStrategy.makeFlowCancelledResponse(confirmParameters:);
  uint64_t v6 = OUTLINED_FUNCTION_5_19();
  return v7(v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  uint64_t v6 = *v2;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  *(void *)(v4 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
  else
  {
    OUTLINED_FUNCTION_15_34();

    swift_release();
    OUTLINED_FUNCTION_12_0();
    return v11();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 48);

  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t CustomIntentConfirmIntentFlowStrategy.makeErrorResponse(error:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a3;
  v4[4] = v3;
  v4[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)CustomIntentConfirmIntentFlowStrategy.makeErrorResponse(error:confirmParameters:));
}

uint64_t CustomIntentConfirmIntentFlowStrategy.makeErrorResponse(error:confirmParameters:)()
{
  OUTLINED_FUNCTION_21_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<INIntent, INIntentResponse>);
  uint64_t v0 = IntentResolutionRecord.app.getter();
  uint64_t v1 = OUTLINED_FUNCTION_8_20(v0);
  uint64_t v2 = OUTLINED_FUNCTION_8_40(v1);
  OUTLINED_FUNCTION_4_46(v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)OUTLINED_FUNCTION_14_6(v3);
  void *v4 = v5;
  v4[1] = CustomIntentConfirmIntentFlowStrategy.makePromptForConfirmation(confirmParameters:);
  uint64_t v6 = OUTLINED_FUNCTION_5_19();
  return v7(v6);
}

uint64_t CustomIntentConfirmIntentFlowStrategy.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin37CustomIntentConfirmIntentFlowStrategy_confirmationState;
  type metadata accessor for SiriKitConfirmationState();
  OUTLINED_FUNCTION_6();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC18SiriLinkFlowPlugin37CustomIntentConfirmIntentFlowStrategy_deviceState);
  swift_release();
  return v0;
}

uint64_t CustomIntentConfirmIntentFlowStrategy.__deallocating_deinit()
{
  CustomIntentConfirmIntentFlowStrategy.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.actionForInput(_:confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 144)
                                                          + **(int **)(**(void **)v3 + 144));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makePromptForConfirmation(confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 152)
                                                + **(int **)(**(void **)v2 + 152));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentConfirmIntentFlowStrategy(0);
  *uint64_t v8 = v4;
  v8[1] = protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy;
  return ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:)(a1, a2, v9, a4);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  uint64_t v9 = type metadata accessor for CustomIntentConfirmIntentFlowStrategy(0);
  *uint64_t v8 = v4;
  v8[1] = protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy;
  return ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:)(a1, a2, v9, a4);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 160)
                                                + **(int **)(**(void **)v2 + 160));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy;
  return v8(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)v2 + 168)
                                                + **(int **)(**(void **)v2 + 168));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for Flow.execute() in conformance EmptyOutputAndCloseFlow;
  return v8(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v3 + 176)
                                                          + **(int **)(**(void **)v3 + 176));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance CustomIntentConfirmIntentFlowStrategy;
  return v10(a1, a2, a3);
}

uint64_t type metadata accessor for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors);
}

uint64_t _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ObjC metadata update function for CustomIntentConfirmIntentFlowStrategy()
{
  return type metadata accessor for CustomIntentConfirmIntentFlowStrategy(0);
}

uint64_t type metadata accessor for CustomIntentConfirmIntentFlowStrategy(uint64_t a1)
{
  return type metadata accessor for EnableTCCCATWrapperSimple(a1, (uint64_t *)&type metadata singleton initialization cache for CustomIntentConfirmIntentFlowStrategy);
}

uint64_t type metadata completion function for CustomIntentConfirmIntentFlowStrategy()
{
  uint64_t result = type metadata accessor for SiriKitConfirmationState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for SiriKitConfirmationState();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t destroy for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriKitConfirmationState();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriKitConfirmationState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriKitConfirmationState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriKitConfirmationState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriKitConfirmationState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriKitConfirmationState();

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SiriKitConfirmationState();

  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v6);
}

uint64_t type metadata completion function for CustomIntentConfirmIntentFlowStrategy.ConfirmIntentErrors(uint64_t a1)
{
  uint64_t result = type metadata accessor for SiriKitConfirmationState();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_46(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_40(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  return IntentResolutionRecord.intentResponse.getter();
}

uint64_t OUTLINED_FUNCTION_14_27()
{
  return v0;
}

void OUTLINED_FUNCTION_15_34()
{
  uint64_t v2 = *(void **)(v0 + 56);
}

uint64_t AutoShortcutFirstRunWatchVisual.data.getter()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = type metadata accessor for Response();
  v0[2] = v1;
  OUTLINED_FUNCTION_1_0(v1);
  v0[3] = v2;
  v0[4] = OUTLINED_FUNCTION_25();
  unint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *unint64_t v3 = v0;
  v3[1] = AutoShortcutAppEnabledVisual.data.getter;
  return AutoShortcutFirstRunWatchVisual.response.getter();
}

uint64_t AutoShortcutFirstRunWatchVisual.response.getter()
{
  OUTLINED_FUNCTION_9_0();
  v1[58] = v2;
  v1[59] = v0;
  type metadata accessor for Separators();
  v1[60] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for ComponentWrapper();
  v1[61] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[62] = v4;
  v1[63] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for BinaryButton();
  v1[64] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[65] = v6;
  v1[66] = OUTLINED_FUNCTION_25();
  uint64_t v7 = type metadata accessor for Button.LabelStyle();
  v1[67] = v7;
  OUTLINED_FUNCTION_1_0(v7);
  v1[68] = v8;
  v1[69] = OUTLINED_FUNCTION_25();
  uint64_t v9 = type metadata accessor for _ProtoButton.FormAction();
  v1[70] = v9;
  OUTLINED_FUNCTION_1_0(v9);
  v1[71] = v10;
  v1[72] = OUTLINED_FUNCTION_25();
  uint64_t v11 = type metadata accessor for ButtonRole();
  v1[73] = v11;
  OUTLINED_FUNCTION_1_0(v11);
  v1[74] = v12;
  v1[75] = OUTLINED_FUNCTION_25();
  uint64_t v13 = type metadata accessor for Button();
  v1[76] = v13;
  OUTLINED_FUNCTION_1_0(v13);
  v1[77] = v14;
  v1[78] = swift_task_alloc();
  v1[79] = swift_task_alloc();
  unsigned char v1[80] = swift_task_alloc();
  v1[81] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Command();
  v1[82] = v15;
  OUTLINED_FUNCTION_1_0(v15);
  v1[83] = v16;
  v1[84] = swift_task_alloc();
  v1[85] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for CustomCanvas();
  v1[86] = v17;
  OUTLINED_FUNCTION_1_0(v17);
  v1[87] = v18;
  v1[88] = OUTLINED_FUNCTION_25();
  return _swift_task_switch(AutoShortcutFirstRunWatchVisual.response.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *inited;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t);
  void (*v21)(uint64_t);
  __n128 *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t, uint64_t);
  uint64_t (*v38)(void);
  unsigned int v40;
  void (*v41)(uint64_t *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  uint64_t v1 = *(uint64_t **)(v0 + 472);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = one-time initialization token for encoder;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 != -1) {
    swift_once();
  }
  *(void *)(v0 + 224) = v2;
  *(void *)(v0 + 232) = 3;
  *(void *)(v0 + 240) = v3;
  *(void *)(v0 + 248) = v4;
  *(void *)(v0 + 256) = v5;
  *(void *)(v0 + 264) = v6;
  *(void *)(v0 + 272) = v7;
  *(void *)(v0 + 280) = v8;
  *(void *)(v0 + 288) = 0;
  *(void *)(v0 + 296) = 0;
  *(unsigned char *)(v0 + 304) = 2;
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  id v55 = *(void *)(v0 + 704);
  Swift::String_optional v57 = *(void *)(v0 + 696);
  uint64_t v56 = *(void *)(v0 + 688);
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v48 = *(void *)(v0 + 672);
  uint64_t v11 = *(void *)(v0 + 664);
  uint64_t v12 = *(void *)(v0 + 656);
  uint64_t v47 = *(void *)(v0 + 648);
  uint64_t v50 = *(void *)(v0 + 640);
  uint64_t v52 = *(void *)(v0 + 632);
  os_log_type_t v53 = *(void *)(v0 + 624);
  uint64_t v58 = *(void *)(v0 + 616);
  uint64_t v51 = *(void *)(v0 + 608);
  uint64_t v60 = *(void *)(v0 + 552);
  uint64_t v59 = *(void *)(v0 + 544);
  uint64_t v42 = *(void *)(v0 + 536);
  uint64_t v49 = *(void *)(v0 + 528);
  uint64_t v43 = *(void *)(v0 + 512);
  uint64_t v44 = *(void *)(v0 + 520);
  uint64_t v45 = *(void *)(v0 + 488);
  Swift::String_optional v46 = *(void *)(v0 + 496);
  uint64_t v13 = *(void *)(v0 + 472);
  uint64_t v54 = *(void *)(v0 + 504);
  CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_2_12(inited, (__n128)xmmword_212160);
  *(void *)(v0 + 432) = v15;
  *(void *)(v0 + 440) = 0xEC0000006E6F6974;
  AnyHashable.init<A>(_:)();
  inited[6].n128_u64[0] = (unint64_t)&type metadata for String;
  inited[4].n128_u64[1] = 7562617;
  inited[5].n128_u64[0] = 0xE300000000000000;
  Dictionary.init(dictionaryLiteral:)();
  static Command.directInvocation(identifier:payload:isNavigation:)();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 336) = v12;
  *(void *)(v0 + 344) = &protocol witness table for Command;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 312));
  uint64_t v41 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
  v41(boxed_opaque_existential_1, v10, v12);
  OUTLINED_FUNCTION_5_32(*(void *)(v13 + 8));
  OUTLINED_FUNCTION_3_12();
  v18(v17);
  OUTLINED_FUNCTION_3_12();
  v20(v19);
  uint64_t v40 = enum case for Button.LabelStyle.automatic(_:);
  uint64_t v21 = *(void (**)(uint64_t))(v59 + 104);
  v21(v60);
  swift_bridgeObjectRetain();
  Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)();
  os_log_type_t v22 = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_2_12(v22, (__n128)xmmword_212160);
  *(void *)(v0 + 448) = v23;
  *(void *)(v0 + 456) = 0xEC0000006E6F6974;
  AnyHashable.init<A>(_:)();
  v22[6].n128_u64[0] = (unint64_t)&type metadata for String;
  v22[4].n128_u64[1] = 28526;
  v22[5].n128_u64[0] = 0xE200000000000000;
  Dictionary.init(dictionaryLiteral:)();
  static Command.directInvocation(identifier:payload:isNavigation:)();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 376) = v12;
  *(void *)(v0 + 384) = &protocol witness table for Command;
  uint64_t v24 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 352));
  v41(v24, v48, v12);
  OUTLINED_FUNCTION_5_32(*(void *)(v13 + 24));
  OUTLINED_FUNCTION_3_12();
  v27(v25, v26);
  ((void (*)(uint64_t, void, uint64_t))v21)(v60, v40, v42);
  OUTLINED_FUNCTION_3_12();
  v30(v28, v29);
  swift_bridgeObjectRetain();
  Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
  v31(v52, v47, v51);
  v31(v53, v50, v51);
  BinaryButton.init(primaryButton:secondaryButton:componentName:linkIdentifier:)();
  *(void *)(v0 + 416) = v43;
  *(void *)(v0 + 424) = &protocol witness table for BinaryButton;
  uint64_t v32 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 392));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v44 + 16))(v32, v49, v43);
  static Separators.none.getter();
  ComponentWrapper.init(_:separators:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SectionConvertible>);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_212170;
  *(void *)(v33 + 56) = v56;
  *(void *)(v33 + 64) = &protocol witness table for CustomCanvas;
  uint64_t v34 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v33 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v57 + 16))(v34, v55, v56);
  *(void *)(v33 + 96) = v45;
  *(void *)(v33 + 104) = &protocol witness table for ComponentWrapper;
  int v35 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v33 + 72));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 16))(v35, v54, v45);
  Response.init(_:backgrounds:ornaments:hideRedactedElements:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v54, v45);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v49, v43);
  long long v36 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v36(v50, v51);
  int v37 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v37(v48, v12);
  v36(v47, v51);
  v37(v10, v12);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

ValueMetadata *type metadata accessor for AutoShortcutFirstRunWatchVisual()
{
  return &type metadata for AutoShortcutFirstRunWatchVisual;
}

uint64_t RouteDialogRequestResponseFlow.__allocating_init(shortcutName:dialogRequest:deviceState:outputPublisher:locationProvider:dateTimeResolver:)(uint64_t a1, uint64_t a2, void *a3, void *a4, long long *a5, long long *a6, long long *a7)
{
  uint64_t v14 = swift_allocObject();
  RouteDialogRequestResponseFlow.init(shortcutName:dialogRequest:deviceState:outputPublisher:locationProvider:dateTimeResolver:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t RouteDialogRequestResponseFlow.exitValue.getter()
{
  uint64_t v1 = *(void **)(v0 + 216);
  unsigned int v2 = *(unsigned __int8 *)(v0 + 224);
  if (v2 >> 6 > 1)
  {
    lazy protocol witness table accessor for type RouteDialogRequestError and conformance RouteDialogRequestError();
    uint64_t v3 = swift_allocError();
    unsigned char *v4 = 0;
  }
  else
  {
    uint64_t v3 = (uint64_t)v1;
  }
  outlined copy of RouteDialogRequestResponseFlow.State(v1, v2);
  return v3;
}

uint64_t RouteDialogRequestResponseFlow.init(shortcutName:dialogRequest:deviceState:outputPublisher:locationProvider:dateTimeResolver:)(uint64_t a1, uint64_t a2, void *a3, void *a4, long long *a5, long long *a6, long long *a7)
{
  uint64_t v8 = v7;
  uint64_t v13 = type metadata accessor for CATOption();
  __chkstk_darwin(v13 - 8);
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  outlined init with copy of DeviceState((uint64_t)a4, v8 + 32);
  *(void *)(v8 + 72) = a3;
  outlined init with copy of DeviceState((uint64_t)a4, (uint64_t)v29);
  uint64_t v14 = one-time initialization token for shared;
  id v25 = a3;
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v24 = OUTLINED_FUNCTION_44_14();
  type metadata accessor for WorkflowRunnerCATsSimple();
  OUTLINED_FUNCTION_36_5();
  uint64_t v16 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunCustomIntentCATs();
  OUTLINED_FUNCTION_36_5();
  uint64_t v17 = OUTLINED_FUNCTION_44_14();
  type metadata accessor for RunCustomIntentCATsSimple();
  OUTLINED_FUNCTION_36_5();
  uint64_t v18 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for RunVoiceCommandCATs();
  OUTLINED_FUNCTION_36_5();
  uint64_t v19 = OUTLINED_FUNCTION_44_14();
  type metadata accessor for RunVoiceCommandCATsSimple();
  OUTLINED_FUNCTION_36_5();
  uint64_t v20 = CATWrapperSimple.__allocating_init(options:globals:)();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  OUTLINED_FUNCTION_36_5();
  uint64_t v21 = OUTLINED_FUNCTION_44_14();
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  *(void *)(v8 + 80) = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v29, v15, v24, v16, v17, v18, v19, v20, v21);
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v22 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(a4);

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a4);
  *(void *)(v8 + 88) = v22;
  outlined init with take of AceServiceInvokerAsync(a5, v8 + 96);
  outlined init with take of AceServiceInvokerAsync(a6, v8 + 136);
  outlined init with take of AceServiceInvokerAsync(a7, v8 + 176);
  *(void *)(v8 + 216) = 0;
  *(unsigned char *)(v8 + 224) = 0x80;
  return v8;
}

unint64_t lazy protocol witness table accessor for type RouteDialogRequestError and conformance RouteDialogRequestError()
{
  unint64_t result = lazy protocol witness table cache variable for type RouteDialogRequestError and conformance RouteDialogRequestError;
  if (!lazy protocol witness table cache variable for type RouteDialogRequestError and conformance RouteDialogRequestError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RouteDialogRequestError and conformance RouteDialogRequestError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RouteDialogRequestError and conformance RouteDialogRequestError;
  if (!lazy protocol witness table cache variable for type RouteDialogRequestError and conformance RouteDialogRequestError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RouteDialogRequestError and conformance RouteDialogRequestError);
  }
  return result;
}

id outlined copy of RouteDialogRequestResponseFlow.State(id result, unsigned __int8 a2)
{
  if (a2 >> 6 == 1) {
    return (id)swift_errorRetain();
  }
  if (!(a2 >> 6)) {
    return outlined copy of DialogResponse(result, a2 & 1);
  }
  return result;
}

id outlined copy of DialogResponse(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

uint64_t RouteDialogRequestResponseFlow.execute(completion:)()
{
  type metadata accessor for RouteDialogRequestResponseFlow();
  lazy protocol witness table accessor for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow(&lazy protocol witness table cache variable for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow, v0, (void (*)(uint64_t))type metadata accessor for RouteDialogRequestResponseFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t type metadata accessor for RouteDialogRequestResponseFlow()
{
  return self;
}

uint64_t RouteDialogRequestResponseFlow.execute()(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RouteDialogRequestResponseFlow.execute());
}

uint64_t RouteDialogRequestResponseFlow.execute()()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[8];
  unsigned int v2 = *(unsigned __int8 *)(v1 + 224);
  if (!(v2 >> 6))
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v11 = (void *)OUTLINED_FUNCTION_26_1(v10, (uint64_t)static Logger.voiceCommands);
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_5_3(v12))
    {
      *(_WORD *)OUTLINED_FUNCTION_33() = 0;
      OUTLINED_FUNCTION_23_0(&dword_0, v13, v14, "#RouteDialogRequestResponseFlow completed");
      OUTLINED_FUNCTION_7_0();
    }

    static ExecuteResponse.complete()();
    goto LABEL_17;
  }
  if (v2 >> 6 == 1)
  {
    uint64_t v3 = *(void **)(v1 + 216);
    swift_errorRetain();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_getErrorValue();
      uint64_t v8 = Error.localizedDescription.getter();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of RouteDialogRequestResponseFlow.State(v3, v2);
      outlined consume of RouteDialogRequestResponseFlow.State(v3, v2);
      _os_log_impl(&dword_0, v5, v6, "#RouteDialogRequestResponseFlow in error state: %s", v7, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      outlined consume of RouteDialogRequestResponseFlow.State(v3, v2);
      outlined consume of RouteDialogRequestResponseFlow.State(v3, v2);
    }

    static ExecuteResponse.complete()();
    outlined consume of RouteDialogRequestResponseFlow.State(v3, v2);
LABEL_17:
    OUTLINED_FUNCTION_18_0();
    return v19();
  }
  uint64_t v15 = *(void *)(v1 + 72);
  uint64_t v16 = (void *)swift_task_alloc();
  v0[9] = v16;
  *uint64_t v16 = v0;
  v16[1] = RouteDialogRequestResponseFlow.execute();
  uint64_t v17 = v0[7];
  return RouteDialogRequestResponseFlow.handleDialogRequest(dialogRequest:)(v17, v15);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *unsigned int v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

void outlined consume of RouteDialogRequestResponseFlow.State(void *a1, unsigned __int8 a2)
{
  if (a2 >> 6 == 1)
  {
    swift_errorRelease();
  }
  else if (!(a2 >> 6))
  {
    outlined consume of DialogResponse(a1, a2 & 1);
  }
}

uint64_t RouteDialogRequestResponseFlow.handleDialogRequest(dialogRequest:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RouteDialogRequestResponseFlow.handleDialogRequest(dialogRequest:));
}

uint64_t RouteDialogRequestResponseFlow.handleDialogRequest(dialogRequest:)()
{
  self;
  if (OUTLINED_FUNCTION_22_13())
  {
    OUTLINED_FUNCTION_6_46();
    OUTLINED_FUNCTION_7_45();
    RouteDialogRequestResponseFlow.handleShowAlertRequest(request:)();
    goto LABEL_5;
  }
  self;
  if (OUTLINED_FUNCTION_22_13())
  {
    OUTLINED_FUNCTION_6_46();
    OUTLINED_FUNCTION_7_45();
    RouteDialogRequestResponseFlow.handleConfirmInteraction(request:)();
    goto LABEL_5;
  }
  self;
  if (!OUTLINED_FUNCTION_22_13())
  {
    self;
    if (OUTLINED_FUNCTION_22_13())
    {
      OUTLINED_FUNCTION_6_46();
      OUTLINED_FUNCTION_7_45();
      RouteDialogRequestResponseFlow.handleChooseFromList(request:)();
    }
    else
    {
      self;
      if (OUTLINED_FUNCTION_22_13())
      {
        OUTLINED_FUNCTION_6_46();
        OUTLINED_FUNCTION_7_45();
        RouteDialogRequestResponseFlow.handleInputDate(request:)();
      }
      else
      {
        self;
        if (!OUTLINED_FUNCTION_22_13())
        {
          if (one-time initialization token for voiceCommands != -1) {
            swift_once();
          }
          uint64_t v7 = type metadata accessor for Logger();
          uint64_t v8 = (void *)OUTLINED_FUNCTION_26_1(v7, (uint64_t)static Logger.voiceCommands);
          os_log_type_t v9 = static os_log_type_t.debug.getter();
          if (OUTLINED_FUNCTION_5_3(v9))
          {
            *(_WORD *)OUTLINED_FUNCTION_33() = 0;
            OUTLINED_FUNCTION_23_0(&dword_0, v10, v11, "#RouteDialogRequestResponseFlow Cannot convert WFDialogRequest to known types");
            OUTLINED_FUNCTION_7_0();
          }
          uint64_t v12 = *(void *)(v0 + 32);

          lazy protocol witness table accessor for type RouteDialogRequestError and conformance RouteDialogRequestError();
          uint64_t v13 = swift_allocError();
          unsigned char *v14 = 1;
          uint64_t v15 = *(void **)(v12 + 216);
          *(void *)(v12 + 216) = v13;
          LOBYTE(v14) = *(unsigned char *)(v12 + 224);
          *(unsigned char *)(v12 + 224) = 64;
          outlined consume of RouteDialogRequestResponseFlow.State(v15, v14);
          static ExecuteResponse.complete()();
          goto LABEL_6;
        }
        OUTLINED_FUNCTION_6_46();
        OUTLINED_FUNCTION_7_45();
        RouteDialogRequestResponseFlow.handleInputText(request:)();
      }
    }
LABEL_5:

LABEL_6:
    OUTLINED_FUNCTION_18_0();
    return v2();
  }
  id v4 = *(id *)(v0 + 24);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v5;
  *uint64_t v5 = v0;
  v5[1] = RouteDialogRequestResponseFlow.handleDialogRequest(dialogRequest:);
  uint64_t v6 = *(void *)(v0 + 16);
  return RouteDialogRequestResponseFlow.handleHandleInteraction(request:)(v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(RouteDialogRequestResponseFlow.handleDialogRequest(dialogRequest:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t RouteDialogRequestResponseFlow.handleShowAlertRequest(request:)()
{
  OUTLINED_FUNCTION_5_42();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_28_7(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_52_4(v5);
    OUTLINED_FUNCTION_44_13(&dword_0, v6, v7, "#RouteDialogRequestResponseFlow Handling WFShowAlertDialogRequest");
    OUTLINED_FUNCTION_7_0();
  }

  __swift_project_boxed_opaque_existential_1(v0 + 4, v0[7]);
  char v8 = dispatch thunk of DeviceState.isWatch.getter();
  if (v8) {
    uint64_t v9 = 0xD000000000000019;
  }
  else {
    uint64_t v9 = 0xD000000000000013;
  }
  if (v8) {
    uint64_t v10 = 0x80000000002257C0;
  }
  else {
    uint64_t v10 = 0x8000000000225330;
  }
  uint64_t v11 = v0[2];
  uint64_t v12 = v0[3];
  outlined init with copy of DeviceState((uint64_t)(v0 + 4), (uint64_t)v14);
  type metadata accessor for WFShowAlertFlow();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v14[0] = WFShowAlertFlow.init(shortcutName:request:appBundleId:dialogTemplating:deviceState:)(v11, v12, v1, v9, v10, 0, v14);
  lazy protocol witness table accessor for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow(&lazy protocol witness table cache variable for type WFShowAlertFlow and conformance WFShowAlertFlow, 255, (void (*)(uint64_t))type metadata accessor for WFShowAlertFlow);
  OUTLINED_FUNCTION_17_24();
  OUTLINED_FUNCTION_3_46();
  swift_release();
  return swift_release();
}

uint64_t RouteDialogRequestResponseFlow.handleConfirmInteraction(request:)()
{
  OUTLINED_FUNCTION_5_42();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = (void *)OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_28_7(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_52_4(v5);
    OUTLINED_FUNCTION_44_13(&dword_0, v6, v7, "#RouteDialogRequestResponseFlow Handling WFConfirmInteractionDialogRequest");
    OUTLINED_FUNCTION_7_0();
  }

  outlined init with copy of DeviceState(v0 + 32, (uint64_t)v16);
  type metadata accessor for WFConfirmInteractionFlow();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v8 = v1;
  uint64_t v9 = OUTLINED_FUNCTION_21_30();
  v16[0] = WFConfirmInteractionFlow.init(shortcutName:request:appBundleId:deviceState:)(v9, v10, v11, v12, v13, v14);
  lazy protocol witness table accessor for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow(&lazy protocol witness table cache variable for type WFConfirmInteractionFlow and conformance WFConfirmInteractionFlow, 255, (void (*)(uint64_t))type metadata accessor for WFConfirmInteractionFlow);
  OUTLINED_FUNCTION_17_24();
  OUTLINED_FUNCTION_3_46();
  swift_release();
  return swift_release();
}

uint64_t RouteDialogRequestResponseFlow.handleHandleInteraction(request:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_2_3((uint64_t)RouteDialogRequestResponseFlow.handleHandleInteraction(request:));
}

uint64_t RouteDialogRequestResponseFlow.handleHandleInteraction(request:)()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)OUTLINED_FUNCTION_26_1(v1, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_5_3(v3))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_23_0(&dword_0, v4, v5, "#RouteDialogRequestResponseFlow Handling WFHandleInteractionDialogRequest");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v6 = *(void *)(v0 + 24);

  id v7 = [objc_allocWithZone((Class)WFHandleInteractionDialogResponse) initWithInteractionResponseCode:0];
  id v8 = *(void **)(v6 + 216);
  *(void *)(v6 + 216) = v7;
  unsigned __int8 v9 = *(unsigned char *)(v6 + 224);
  *(unsigned char *)(v6 + 224) = 0;
  id v10 = v7;
  outlined consume of RouteDialogRequestResponseFlow.State(v8, v9);
  static ExecuteResponse.complete()();

  OUTLINED_FUNCTION_18_0();
  return v11();
}

uint64_t RouteDialogRequestResponseFlow.handleChooseFromList(request:)()
{
  OUTLINED_FUNCTION_5_42();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  os_log_type_t v3 = (void *)OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_28_7(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_52_4(v5);
    OUTLINED_FUNCTION_44_13(&dword_0, v6, v7, "#RouteDialogRequestResponseFlow Handling WFChooseFromListDialogRequest");
    OUTLINED_FUNCTION_7_0();
  }

  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v9 = *(void *)(v0 + 24);
  outlined init with copy of DeviceState(v0 + 32, (uint64_t)v11);
  type metadata accessor for WFChooseFromListFlow();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v11[0] = WFChooseFromListFlow.init(shortcutName:request:deviceState:)(v8, v9, v1, (uint64_t)v11);
  lazy protocol witness table accessor for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow(&lazy protocol witness table cache variable for type WFChooseFromListFlow and conformance WFChooseFromListFlow, 255, (void (*)(uint64_t))type metadata accessor for WFChooseFromListFlow);
  OUTLINED_FUNCTION_17_24();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  return swift_release();
}

uint64_t RouteDialogRequestResponseFlow.handleInputDate(request:)()
{
  OUTLINED_FUNCTION_5_42();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  os_log_type_t v3 = (void *)OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_28_7(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_52_4(v5);
    OUTLINED_FUNCTION_44_13(&dword_0, v6, v7, "#RouteDialogRequestResponseFlow Handling WFInputDateDialogRequest");
    OUTLINED_FUNCTION_7_0();
  }

  outlined init with copy of DeviceState(v0 + 32, (uint64_t)v12);
  outlined init with copy of DeviceState(v0 + 96, (uint64_t)v11);
  outlined init with copy of DeviceState(v0 + 136, (uint64_t)v10);
  outlined init with copy of DeviceState(v0 + 176, (uint64_t)v9);
  type metadata accessor for WFInputDateFlow(0);
  swift_allocObject();
  v12[0] = WFInputDateFlow.init(request:deviceState:outputPublisher:locationProvider:dateTimeResolver:)(v1, v12, (uint64_t)v11, v10, v9);
  lazy protocol witness table accessor for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow(&lazy protocol witness table cache variable for type WFInputDateFlow and conformance WFInputDateFlow, 255, (void (*)(uint64_t))type metadata accessor for WFInputDateFlow);
  OUTLINED_FUNCTION_17_24();
  OUTLINED_FUNCTION_3_46();
  swift_release();
  return swift_release();
}

uint64_t RouteDialogRequestResponseFlow.handleInputText(request:)()
{
  OUTLINED_FUNCTION_5_42();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  os_log_type_t v3 = (void *)OUTLINED_FUNCTION_26_1(v2, (uint64_t)static Logger.voiceCommands);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_28_7(v4))
  {
    uint64_t v5 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_52_4(v5);
    OUTLINED_FUNCTION_44_13(&dword_0, v6, v7, "#RouteDialogRequestResponseFlow Handling WFInputTextDialogRequest");
    OUTLINED_FUNCTION_7_0();
  }

  outlined init with copy of DeviceState(v0 + 32, (uint64_t)v12);
  outlined init with copy of DeviceState(v0 + 96, (uint64_t)&v11);
  type metadata accessor for WFInputTextFlow();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v8 = v1;
  OUTLINED_FUNCTION_21_30();
  WFInputTextFlow.init(shortcutName:request:appBundleId:dialogTemplating:deviceState:outputPublisher:)();
  v12[0] = v9;
  lazy protocol witness table accessor for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow(&lazy protocol witness table cache variable for type WFInputTextFlow and conformance WFInputTextFlow, 255, (void (*)(uint64_t))type metadata accessor for WFInputTextFlow);
  OUTLINED_FUNCTION_17_24();
  OUTLINED_FUNCTION_3_46();
  swift_release();
  return swift_release();
}

void closure #1 in RouteDialogRequestResponseFlow.handleShowAlertRequest(request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  os_log_type_t v4 = *(void **)(a2 + 216);
  *(void *)(a2 + 216) = *(void *)a1;
  unsigned __int8 v5 = *(unsigned char *)(a2 + 224);
  *(unsigned char *)(a2 + 224) = v3;
  outlined copy of DialogResponse(v2, v3);

  outlined consume of RouteDialogRequestResponseFlow.State(v4, v5);
}

uint64_t RouteDialogRequestResponseFlow.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
  outlined consume of RouteDialogRequestResponseFlow.State(*(void **)(v0 + 216), *(unsigned char *)(v0 + 224));
  return v0;
}

uint64_t RouteDialogRequestResponseFlow.__deallocating_deinit()
{
  RouteDialogRequestResponseFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance RouteDialogRequestResponseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))() & 1;
}

uint64_t protocol witness for Flow.execute(completion:) in conformance RouteDialogRequestResponseFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for Flow.execute() in conformance RouteDialogRequestResponseFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 208) + **(int **)(**(void **)v1 + 208));
  os_log_type_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance RouteDialogRequestResponseFlow@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 176))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DialogResponse(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of DialogResponse(*(void **)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for DialogResponse(uint64_t a1)
{
}

uint64_t assignWithCopy for DialogResponse(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of DialogResponse(*(void **)a2, v4);
  unsigned __int8 v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of DialogResponse(v5, v6);
  return a1;
}

uint64_t assignWithTake for DialogResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  unsigned __int8 v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of DialogResponse(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogResponse(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DialogResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for DialogResponse(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for DialogResponse(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DialogResponse()
{
  return &type metadata for DialogResponse;
}

unsigned char *storeEnumTagSinglePayload for RouteDialogRequestError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x203D04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RouteDialogRequestError()
{
  return &type metadata for RouteDialogRequestError;
}

uint64_t initializeBufferWithCopyOfBuffer for RouteDialogRequestResponseFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of RouteDialogRequestResponseFlow.State(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for RouteDialogRequestResponseFlow.State(uint64_t a1)
{
}

uint64_t assignWithCopy for RouteDialogRequestResponseFlow.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of RouteDialogRequestResponseFlow.State(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of RouteDialogRequestResponseFlow.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for RouteDialogRequestResponseFlow.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of RouteDialogRequestResponseFlow.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RouteDialogRequestResponseFlow.State(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7E && *(unsigned char *)(a1 + 9))
    {
      unsigned int v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      unsigned int v2 = ((*(unsigned __int8 *)(a1 + 8) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 8) >> 1) & 0x1F))) ^ 0x7F;
      if (v2 >= 0x7D) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for RouteDialogRequestResponseFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(unsigned char *)(result + 8) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for RouteDialogRequestResponseFlow.State(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for RouteDialogRequestResponseFlow.State(uint64_t result)
{
  *(unsigned char *)(result + 8) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for RouteDialogRequestResponseFlow.State(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(unsigned char *)(result + 8) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(void *)uint64_t result = a2 - 2;
    char v2 = 0x80;
  }
  *(unsigned char *)(result + 8) = v2;
  return result;
}

void *type metadata accessor for RouteDialogRequestResponseFlow.State()
{
  return &unk_293150;
}

void partial apply for closure #1 in RouteDialogRequestResponseFlow.handleInputText(request:)(uint64_t a1)
{
  closure #1 in RouteDialogRequestResponseFlow.handleShowAlertRequest(request:)(a1, v1);
}

uint64_t lazy protocol witness table accessor for type RouteDialogRequestResponseFlow and conformance RouteDialogRequestResponseFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_46()
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)();
}

id OUTLINED_FUNCTION_6_46()
{
  char v2 = *(void **)(v0 + 24);
  return v2;
}

uint64_t OUTLINED_FUNCTION_7_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_24()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_21_30()
{
  return v0;
}

id static OutputUtils.makeRequestFromDirectInvocation(payload:appId:deviceState:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v4 = static OutputUtils.makeRSKECommandFromDirectInvocation(payload:appId:deviceState:)(a1, a2, a3, a4);
  id v5 = [self wrapCommandInStartLocalRequest:v4];

  return v5;
}

uint64_t static OutputUtils.makeTemporaryOutput()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [objc_allocWithZone((Class)SAUIAddViews) init];
  id v6 = [objc_allocWithZone((Class)SAAceView) init];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_211C70;
  *(void *)(v7 + 32) = v6;
  *(void *)&v15[0] = v7;
  specialized Array._endMutation()();
  uint64_t v8 = *(void *)&v15[0];
  id v9 = v6;
  outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(v8, v5);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v10, v11, v5, (SEL *)&selRef_setDialogPhase_);
  [v5 setTemporary:1];
  uint64_t v12 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v12);
  uint64_t v13 = type metadata accessor for AceOutput();
  memset(v15, 0, sizeof(v15));
  uint64_t v16 = 0;
  a1[3] = v13;
  a1[4] = (uint64_t)&protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1(a1);
  static AceOutputHelper.makeAceOutput(addViews:nlContextUpdate:additionalCommands:flowActivity:)();

  outlined destroy of URL?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return outlined destroy of URL?((uint64_t)v4, &demangling cache variable for type metadata for NLContextUpdate?);
}

id static OutputUtils.makeEmptySnippet(correspondingSessionID:)(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)SAUIAssistantUtteranceView) init];
  if (a2)
  {
    uint64_t v4 = OUTLINED_FUNCTION_30_0();
    outlined bridged method (mbgnn) of @objc SAAceView.correspondingSessionID.setter(v4, v5, v3);
  }
  id v6 = [objc_allocWithZone((Class)SAUIAddViews) init];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_211C70;
  *(void *)(v7 + 32) = v3;
  specialized Array._endMutation()();
  id v8 = v3;
  uint64_t v9 = OUTLINED_FUNCTION_30_0();
  outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(v9, v10);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v11, v12, v6, (SEL *)&selRef_setDialogPhase_);

  return v6;
}

uint64_t static OutputUtils.shouldReadItemsInDisambiguationList(siriEnvironment:)()
{
  uint64_t v0 = type metadata accessor for ResponseMode();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v9 - v3;
  SiriEnvironment.currentRequest.getter();
  CurrentRequest.responseMode.getter();
  static ResponseMode.voiceOnly.getter();
  char v5 = static ResponseMode.== infix(_:_:)();
  id v6 = *(void (**)(void))(v1 + 8);
  OUTLINED_FUNCTION_37_15();
  v6();
  OUTLINED_FUNCTION_37_15();
  v6();
  if (v5)
  {
    swift_release();
    char v7 = 1;
  }
  else
  {
    CurrentRequest.responseMode.getter();
    static ResponseMode.voiceForward.getter();
    char v7 = static ResponseMode.== infix(_:_:)();
    swift_release();
    OUTLINED_FUNCTION_37_15();
    v6();
    ((void (*)(char *, uint64_t))v6)(v4, v0);
  }
  return v7 & 1;
}

id static OutputUtils.makeRSKECommandFromDirectInvocation(payload:appId:deviceState:)(uint64_t a1, uint64_t a2, NSString a3, void *a4)
{
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  id v6 = (void *)DeviceState.asInvocationContext.getter();
  [v6 setInputOrigin:SAInputOriginDialogButtonTapValue];
  id v7 = [self runSiriKitExecutorCommandWithContext:v6 payload:a1];
  id v8 = [objc_allocWithZone((Class)SAIntentGroupSiriKitAppSelectionState) init];
  id v9 = [objc_allocWithZone((Class)SASyncAppIdentifyingInfo) init];
  if (a3) {
    a3 = String._bridgeToObjectiveC()();
  }
  [v9 setBundleId:a3];

  [v8 setRequestedApp:v9];
  [v7 setAppSelectionState:v8];

  return v7;
}

id static OutputUtils.buildNanoImage(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [objc_allocWithZone((Class)SAUINanoImageResource) init];
  uint64_t v6 = outlined bridged method (pb) of @objc INImage._imageData.getter(a1);
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    id v10 = v5;
    outlined bridged method (mbgnn) of @objc SAUIImageResource.imageData.setter(v8, v9, v10);

    outlined consume of Data?(v8, v9);
  }
  outlined bridged method (pb) of @objc INImage._identifier.getter(a1);
  if (v11)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v12, v13, v5, (SEL *)&selRef_setImageDownloadType_);
    id v14 = v5;
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = type metadata accessor for URL();
    uint64_t v17 = 0;
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v15) != 1)
    {
      URL._bridgeToObjectiveC()(v16);
      uint64_t v17 = v18;
      (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v4, v15);
    }
    [v14 setResourceUrl:v17];
  }
  OUTLINED_FUNCTION_2_56();
  if (v19 <= 0.0 || (OUTLINED_FUNCTION_2_56(), v20 <= 0.0))
  {
    [v5 setPixelWidth:30.0];
    [v5 setPixelHeight:30.0];
  }
  else
  {
    id v21 = v5;
    OUTLINED_FUNCTION_2_56();
    objc_msgSend(v21, "setPixelWidth:");

    id v22 = v21;
    OUTLINED_FUNCTION_2_56();
    [v22 setPixelHeight:v23];
  }
  [v5 setBackgroundNeeded:0];
  return v5;
}

uint64_t static OutputUtils.machineUtteranceForDisambiguationItemIndex(index:fallbackString:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
  if (one-time initialization token for NUMBERICREFERENCENODEVALUES != -1) {
    swift_once();
  }
  if (*(void *)(static InputUtils.NUMBERICREFERENCENODEVALUES + 16) <= a1)
  {
LABEL_6:
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for MachineUtteranceBuilder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    MachineUtteranceBuilder.init()();
    dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
    swift_release();
    swift_bridgeObjectRelease();
    dispatch thunk of MachineUtteranceBuilder.build()();
    swift_release();
  }
  return OUTLINED_FUNCTION_30_0();
}

id static OutputUtils.makeSendCommandsFromUtterance(utterances:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      id v6 = objc_allocWithZone((Class)SAStartRequest);
      swift_bridgeObjectRetain();
      id v7 = [v6 init];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      outlined bridged method (mbnn) of @objc SABaseAceObject.aceId.setter(v8, v9, v7, (SEL *)&selRef_setOrigin_);
      outlined bridged method (mbgnn) of @objc SAStartRequest.utterance.setter(v4, v5, v7);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 2;
      --v1;
    }
    while (v1);
  }
  id v10 = [objc_allocWithZone((Class)SASendCommands) init];
  swift_bridgeObjectRetain();
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAServerBoundCommand);
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = OUTLINED_FUNCTION_30_0();
  outlined bridged method (mbnn) of @objc SASendCommands.commands.setter(v11, v12);
  return v10;
}

BOOL static OutputUtils.isHomePod(deviceState:originDevice:)(void *a1, uint64_t a2, unsigned __int8 a3)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unsigned __int8 v5 = dispatch thunk of DeviceState.isHomePod.getter();
  if ((v5 | a3)) {
    return v5;
  }
  else {
    return a2 == 4;
  }
}

void outlined bridged method (mbnn) of @objc SAUIAddViews.views.setter(uint64_t a1, void *a2)
{
  type metadata accessor for SAAceView();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setViews:isa];
}

void outlined bridged method (mbnn) of @objc SAUIAddViews.dialogPhase.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

void outlined bridged method (mbgnn) of @objc SAAceView.correspondingSessionID.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setCorrespondingSessionID:v4];
}

uint64_t outlined bridged method (pb) of @objc INImage._identifier.getter(void *a1)
{
  id v1 = [a1 _identifier];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbgnn) of @objc SAUIImageResource.imageData.setter(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setImageData:isa];
}

void outlined bridged method (mbgnn) of @objc SAStartRequest.utterance.setter(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setUtterance:v4];
}

void outlined bridged method (mbnn) of @objc SAStartRequest.origin.setter(uint64_t a1, uint64_t a2, void *a3)
{
}

void outlined bridged method (mbnn) of @objc SASendCommands.commands.setter(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAServerBoundCommand);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setCommands:isa];
}

ValueMetadata *type metadata accessor for OutputUtils()
{
  return &type metadata for OutputUtils;
}

id OUTLINED_FUNCTION_2_56()
{
  uint64_t v3 = *(const char **)(v1 + 4088);
  return [v0 v3];
}

uint64_t WFOpenInteractionFlow.__allocating_init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t WFOpenInteractionFlow.exitValue.getter()
{
  unint64_t v1 = *(void *)(v0 + 208);
  if (!(v1 >> 62)) {
    return *(void *)(v0 + 208) & 1 | 0x4000000000000000;
  }
  if (v1 >> 62 == 1)
  {
    uint64_t v2 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    swift_errorRetain();
  }
  else
  {
    uint64_t v2 = 0x8000000000000000;
    if (v1 == 0x8000000000000000)
    {
      lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError();
      uint64_t v2 = OUTLINED_FUNCTION_9_6();
      *uint64_t v3 = 3;
    }
  }
  return v2;
}

void *WFOpenInteractionFlow.init(interaction:runner:deviceState:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:aceServiceInvoker:outputPublisher:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v7;
  uint64_t v15 = type metadata accessor for CATOption();
  uint64_t v16 = OUTLINED_FUNCTION_16(v15);
  __chkstk_darwin(v16);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.voiceCommands);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    double v20 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v20);
    _os_log_impl(&dword_0, v18, v19, "#WFOpenInteractionFlow initiated", v8, 2u);
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v33 = a7;

  long long v9[2] = a1;
  outlined init with copy of DeviceState(a2, (uint64_t)(v9 + 21));
  outlined init with copy of DeviceState((uint64_t)a3, (uint64_t)(v9 + 6));
  uint64_t v31 = a2;
  outlined init with copy of DeviceState(a6, (uint64_t)(v9 + 16));
  outlined init with copy of DeviceState(a7, (uint64_t)(v9 + 11));
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  id v32 = a1;
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  type metadata accessor for ViewFactory();
  OUTLINED_FUNCTION_35_2();
  v9[3] = ViewFactory.init(ttsEnabled:)();
  outlined init with copy of DeviceState((uint64_t)a3, (uint64_t)v36);
  uint64_t v21 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  uint64_t v22 = a4;
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v23 = static WFDialogState.shared;
  type metadata accessor for WorkflowRunnerCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  uint64_t v24 = OUTLINED_FUNCTION_46_18();
  type metadata accessor for WorkflowRunnerCATsSimple();
  OUTLINED_FUNCTION_42();
  uint64_t v25 = OUTLINED_FUNCTION_60_9();
  type metadata accessor for RunCustomIntentCATs();
  OUTLINED_FUNCTION_42();
  uint64_t v26 = OUTLINED_FUNCTION_46_18();
  type metadata accessor for RunCustomIntentCATsSimple();
  OUTLINED_FUNCTION_42();
  uint64_t v27 = OUTLINED_FUNCTION_60_9();
  type metadata accessor for WorkflowRunnerCATPatternsExecutor(0);
  OUTLINED_FUNCTION_42();
  uint64_t v28 = OUTLINED_FUNCTION_46_18();
  type metadata accessor for WorkflowDialogTemplating();
  swift_allocObject();
  v9[4] = WorkflowDialogTemplating.init(deviceState:dialogState:workflowCatWrapper:workflowCatWrapperSimple:runCustomCatWrapper:runCustomCatWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:catPatternsExecutor:)((uint64_t)v36, v23, v24, v25, v26, v27, v22, a5, v28);
  type metadata accessor for WorkflowSnippetProvider();
  uint64_t v29 = static WorkflowSnippetProvider.getSnippetProvider(deviceState:)(a3);

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v33);
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  __swift_destroy_boxed_opaque_existential_1Tm(v31);
  v9[5] = v29;
  v9[26] = 0x8000000000000000;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a3);
  return v9;
}

unint64_t lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError()
{
  unint64_t result = lazy protocol witness table cache variable for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError;
  if (!lazy protocol witness table cache variable for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError;
  if (!lazy protocol witness table cache variable for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError);
  }
  return result;
}

uint64_t WFOpenInteractionFlow.execute()()
{
  OUTLINED_FUNCTION_9_0();
  v1[30] = v2;
  v1[31] = v0;
  uint64_t v3 = type metadata accessor for CATOption();
  OUTLINED_FUNCTION_16(v3);
  v1[32] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  os_log_type_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned char *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  uint8_t *v34;
  void *v35;
  uint64_t v36;
  void *v38;
  os_log_type_t v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint8_t *v56;
  void *v57;
  uint64_t v58;
  long long *v59;
  void *v60;
  long long v61;
  uint64_t v62;

  uint64_t v62 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  unint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_23_0(&dword_0, v4, v5, "#WFOpenInteractionFlow execute");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v6 = *(void *)(v0 + 248);

  id v7 = *(void **)(v6 + 16);
  uint64_t v8 = [v7 intent];
  *(void *)(v0 + 264) = v8;
  outlined bridged method (pb) of @objc _INPBIntentMetadata.launchId.getter(v8);
  if (!v9)
  {
    double v20 = (void *)Logger.logObject.getter();
    uint64_t v21 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v21))
    {
      uint64_t v22 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v22);
      OUTLINED_FUNCTION_42_0(&dword_0, v23, v24, "#WFOpenInteractionFlow do not have app bundle id");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v25 = *(void *)(v0 + 248);

    lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError();
    uint64_t v26 = OUTLINED_FUNCTION_9_6();
    void *v27 = 0;
    uint64_t v28 = v26 | 0x4000000000000000;
    uint64_t v29 = *(void *)(v25 + 208);
    *(void *)(v25 + 208) = v28;
    outlined consume of WFOpenInteractionFlow.State(v29);
    static ExecuteResponse.complete()();

LABEL_27:
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_23_7();
    __asm { BRAA            X1, X16 }
  }
  id v10 = *(void *)(v0 + 248);
  type metadata accessor for App();
  *(void *)(v0 + 272) = App.__allocating_init(appIdentifier:)();
  uint64_t v11 = [v7 intentResponse];
  *(void *)(v0 + 280) = v11;
  uint64_t v12 = v10 + 48;
  OUTLINED_FUNCTION_68_8();
  if ((dispatch thunk of DeviceState.isLockedWithPasscode.getter() & 1) != 0 && (OUTLINED_FUNCTION_48_12() & 1) == 0)
  {
    uint64_t v59 = (long long *)(v0 + 176);
    int v38 = (void *)Logger.logObject.getter();
    uint64_t v39 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v39))
    {
      uint64_t v40 = (_WORD *)OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_28_2(v40);
      OUTLINED_FUNCTION_42_0(&dword_0, v41, v42, "#WFOpenInteractionFlow unlock device");
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v60 = v11;

    static Device.current.getter();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v43 = *(void *)(v0 + 248);
    uint64_t v44 = static WFDialogState.shared;
    type metadata accessor for RunCustomIntentCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    uint64_t v45 = OUTLINED_FUNCTION_46_18();
    type metadata accessor for RunCustomIntentCATsSimple();
    OUTLINED_FUNCTION_42();
    Swift::String_optional v46 = OUTLINED_FUNCTION_60_9();
    type metadata accessor for RunVoiceCommandCATs();
    OUTLINED_FUNCTION_42();
    uint64_t v47 = OUTLINED_FUNCTION_46_18();
    type metadata accessor for RunVoiceCommandCATsSimple();
    OUTLINED_FUNCTION_42();
    uint64_t v48 = OUTLINED_FUNCTION_60_9();
    type metadata accessor for AppNameResolver();
    uint64_t v49 = swift_allocObject();
    type metadata accessor for CustomIntentsDialogTemplating();
    uint64_t v50 = swift_allocObject();
    uint64_t v51 = specialized CustomIntentsDialogTemplating.init(deviceState:dialogState:originDevice:catWrapper:catWrapperSimple:runVoiceCommandsCatWrapper:runVoiceCommandsCatWrapperSimple:appNameResolving:)(&v61, v44, 0, 1, v45, v46, v47, v48, v49, v50);
    outlined init with copy of DeviceState(v12, (uint64_t)v59);
    type metadata accessor for ShortcutsUnlockDeviceStrategy();
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v51;
    outlined init with take of AceServiceInvokerAsync(v59, v52 + 24);
    *(void *)(v0 + 232) = ShortcutsUnlockDeviceStrategy.makeShortcutsUnlockDeviceFlow()();
    os_log_type_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = partial apply for implicit closure #3 in implicit closure #2 in WFOpenInteractionFlow.execute();
    *(void *)(v53 + 24) = v43;
    type metadata accessor for GuardFlow();
    swift_retain();
    static ExecuteResponse.ongoing<A>(next:childCompletion:)();
    swift_release();
    swift_release();

    swift_release();
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_68_8();
  if (dispatch thunk of DeviceState.isHomePod.getter())
  {
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "#WFOpenInteractionFlow handoff", v15, 2u);
      OUTLINED_FUNCTION_7_0();
    }
    uint64_t v16 = *(void *)(v0 + 248);

    outlined init with copy of DeviceState(v16 + 168, v0 + 16);
    outlined init with copy of DeviceState(v12, v0 + 56);
    type metadata accessor for CustomIntentHandoffToCompanionFlowStrategy();
    uint64_t v17 = swift_allocObject();
    outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 16), v17 + 56);
    outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 56), v17 + 16);
    outlined init with copy of DeviceState(v12, v0 + 96);
    outlined init with copy of DeviceState(v16 + 88, v0 + 136);
    *(void *)(v0 + 224) = v17;
    type metadata accessor for HandoffSessionToCompanionFlowAsync();
    OUTLINED_FUNCTION_35_2();
    lazy protocol witness table accessor for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy(&lazy protocol witness table cache variable for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy, 255, (void (*)(uint64_t))type metadata accessor for CustomIntentHandoffToCompanionFlowStrategy);
    swift_retain();
    uint64_t v18 = HandoffSessionToCompanionFlowAsync.init<A>(strategy:deviceState:outputPublisher:)();
    os_log_type_t v19 = *(void *)(v16 + 208);
    *(void *)(v16 + 208) = 0x8000000000000001;
    outlined consume of WFOpenInteractionFlow.State(v19);
    *(void *)(v0 + 216) = v18;
    static ExecuteResponse.complete<A>(next:)();
    swift_release();
    swift_release();

LABEL_26:
    swift_release();
    goto LABEL_27;
  }
  uint64_t v30 = OUTLINED_FUNCTION_48_12();
  uint64_t v31 = Logger.logObject.getter();
  id v32 = static os_log_type_t.debug.getter();
  uint64_t v33 = os_log_type_enabled(v31, v32);
  if (v30)
  {
    if (v33)
    {
      uint64_t v34 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_0, v31, v32, "#WFOpenInteractionFlow launch app in Carplay", v34, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    int v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v35;
    *int v35 = v0;
    v35[1] = WFOpenInteractionFlow.execute();
    OUTLINED_FUNCTION_42_20();
    OUTLINED_FUNCTION_23_7();
    return WFOpenInteractionFlow.makeUnlockForCarplay(intent:intentResponse:app:)();
  }
  else
  {
    if (v33)
    {
      uint64_t v56 = (uint8_t *)OUTLINED_FUNCTION_33();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl(&dword_0, v31, v32, "#WFOpenInteractionFlow automatic punch out", v56, 2u);
      OUTLINED_FUNCTION_7_0();
    }

    Swift::String_optional v57 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v57;
    *Swift::String_optional v57 = v0;
    v57[1] = WFOpenInteractionFlow.execute();
    OUTLINED_FUNCTION_42_20();
    OUTLINED_FUNCTION_23_7();
    return WFOpenInteractionFlow.submitLaunchAppPunchout(intent:intentResponse:app:)();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  unint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  unint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void **)(v0 + 264);
  static ExecuteResponse.complete()();

  swift_release();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  unint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

unint64_t implicit closure #3 in implicit closure #2 in WFOpenInteractionFlow.execute()(char a1)
{
  return WFOpenInteractionFlow.onUnlockFinished(exitValue:)(a1 & 1);
}

unint64_t WFOpenInteractionFlow.onUnlockFinished(exitValue:)(char a1)
{
  if (a1)
  {
    lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError();
    uint64_t v3 = OUTLINED_FUNCTION_9_6();
    unsigned char *v4 = 6;
    uint64_t v5 = v3 | 0x4000000000000000;
    unint64_t v2 = *(void *)(v1 + 208);
    *(void *)(v1 + 208) = v5;
  }
  else
  {
    unint64_t v2 = *(void *)(v1 + 208);
    *(void *)(v1 + 208) = 0;
  }

  return outlined consume of WFOpenInteractionFlow.State(v2);
}

uint64_t WFOpenInteractionFlow.makeUnlockForCarplay(intent:intentResponse:app:)()
{
  OUTLINED_FUNCTION_13_1();
  v1[14] = v2;
  v1[15] = v0;
  v1[16] = *v0;
  uint64_t v3 = type metadata accessor for SubmitCommandError();
  v1[17] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[18] = v4;
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v1[23] = v5;
  *uint64_t v5 = v1;
  v5[1] = WFOpenInteractionFlow.makeUnlockForCarplay(intent:intentResponse:app:);
  uint64_t v6 = OUTLINED_FUNCTION_53_8();
  return WFOpenInteractionFlow.makeLaunchAppCommand(intent:intentResponse:app:)(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 192) = v4;
  *(void *)(v2 + 200) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = (void *)v0[15];
  uint64_t v3 = v1[19];
  uint64_t v2 = v1[20];
  __swift_project_boxed_opaque_existential_1(v1 + 16, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[26] = v4;
  uint64_t v5 = type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  unsigned char *v4 = v0;
  v4[1] = WFOpenInteractionFlow.makeUnlockForCarplay(intent:intentResponse:app:);
  uint64_t v6 = v0[24];
  return AceServiceInvokerAsync.submit<A>(_:)(v6, v3, v5, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_9_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v5 = v4;
  uint64_t v6 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v7 = v6;
  *(void *)(v8 + 216) = v0;
  swift_task_dealloc();
  if (!v0) {

  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 120);

  uint64_t v2 = *(void *)(v1 + 208);
  *(void *)(v1 + 208) = 1;
  outlined consume of WFOpenInteractionFlow.State(v2);
  OUTLINED_FUNCTION_40_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 240) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned char *v7;
  void (*v8)(void);
  uint64_t (*v9)(void);
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    *(_WORD *)OUTLINED_FUNCTION_33() = 0;
    OUTLINED_FUNCTION_23_0(&dword_0, v4, v5, "#WFOpenInteractionFlow makeUnlockForCarplay error code 1305");
    OUTLINED_FUNCTION_7_0();
  }
  uint64_t v6 = *(void **)(v0 + 224);

  lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError();
  OUTLINED_FUNCTION_9_6();
  *uint64_t v7 = 5;

  OUTLINED_FUNCTION_50_5();
  v8();
  OUTLINED_FUNCTION_35_20();
  swift_errorRelease();
  OUTLINED_FUNCTION_40_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v9();
}

{
  void *v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  int v7;
  void **v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  unsigned char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;

  uint64_t v48 = v0;
  uint64_t v2 = (void (*)(uint64_t))v0[25];
  OUTLINED_FUNCTION_32_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((OUTLINED_FUNCTION_49_13() & 1) == 0)
  {
    swift_errorRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      OUTLINED_FUNCTION_15_29();
      uint64_t v47 = OUTLINED_FUNCTION_13_42();
      OUTLINED_FUNCTION_28_25(4.8149e-34);
      uint64_t v18 = Error.localizedDescription.getter();
      double v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v47);
      OUTLINED_FUNCTION_58_12(v20);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      OUTLINED_FUNCTION_62_10(&dword_0, v21, v22, "#WFOpenInteractionFlow makeUnlockForCarplay unknown error: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError();
    uint64_t v24 = OUTLINED_FUNCTION_9_6();
    OUTLINED_FUNCTION_67_11(v24, v25);
    OUTLINED_FUNCTION_35_20();
LABEL_21:
    OUTLINED_FUNCTION_40_19();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_18_2();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_50_14();
  uint64_t v3 = OUTLINED_FUNCTION_23_33();
  v2(v3);
  uint64_t v4 = OUTLINED_FUNCTION_22_32();
  v1(v4);
  uint64_t v5 = OUTLINED_FUNCTION_47_15();
  uint64_t v7 = v6(v5);
  uint64_t v8 = (void **)v0[20];
  if (v7 != enum case for SubmitCommandError.failedResponse(_:))
  {
    OUTLINED_FUNCTION_50_5();
    v23();
LABEL_15:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v26 = OUTLINED_FUNCTION_55_11();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
    uint64_t v27 = OUTLINED_FUNCTION_29_27();
    v1(v27);
    uint64_t v28 = Logger.logObject.getter();
    uint64_t v29 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_19_29(v29))
    {
      swift_slowAlloc();
      uint64_t v47 = OUTLINED_FUNCTION_13_42();
      OUTLINED_FUNCTION_54_9(4.8149e-34);
      lazy protocol witness table accessor for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (void (*)(uint64_t))&type metadata accessor for SubmitCommandError);
      uint64_t v30 = Error.localizedDescription.getter();
      id v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v47);
      OUTLINED_FUNCTION_37_21(v32);
      swift_bridgeObjectRelease();
      uint64_t v33 = OUTLINED_FUNCTION_46_11();
      v34(v33);
      OUTLINED_FUNCTION_42_9(&dword_0, v35, v36, "#WFOpenInteractionFlow makeUnlockForCarplay generic error: %s");
      OUTLINED_FUNCTION_56_8();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      int v37 = OUTLINED_FUNCTION_32_1();
      v38(v37);
    }

    uint64_t v39 = v0[15];
    lazy protocol witness table accessor for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (void (*)(uint64_t))&type metadata accessor for SubmitCommandError);
    uint64_t v40 = OUTLINED_FUNCTION_9_6();
    uint64_t v42 = OUTLINED_FUNCTION_25_22(v40, v41);
    v43(v42);
    uint64_t v44 = *(void *)(v39 + 208);
    *(void *)(v39 + 208) = v28 | 0x4000000000000000;
    outlined consume of WFOpenInteractionFlow.State(v44);
    swift_errorRelease();
    goto LABEL_21;
  }
  uint64_t v9 = OUTLINED_FUNCTION_33_23();
  v10(v9);
  uint64_t v11 = *v8;
  v0[28] = v11;
  if ([v11 errorCode] != &stru_518.sectname[1])
  {

    goto LABEL_15;
  }
  OUTLINED_FUNCTION_57_8();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[29] = v12;
  void *v12 = v0;
  v12[1] = WFOpenInteractionFlow.makeUnlockForCarplay(intent:intentResponse:app:);
  OUTLINED_FUNCTION_31_22();
  OUTLINED_FUNCTION_18_2();
  return static WFOpenInteractionFlow.publishContinueInApp(app:deviceState:dialogTemplating:outputPublisher:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  int v7;
  void **v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  unsigned char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v48 = v0;

  uint64_t v2 = *(void (**)(uint64_t))(v0 + 216);
  OUTLINED_FUNCTION_32_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((OUTLINED_FUNCTION_49_13() & 1) == 0)
  {
    swift_errorRelease();
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.voiceCommands);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      OUTLINED_FUNCTION_15_29();
      uint64_t v47 = OUTLINED_FUNCTION_13_42();
      OUTLINED_FUNCTION_28_25(4.8149e-34);
      uint64_t v18 = Error.localizedDescription.getter();
      double v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v47);
      OUTLINED_FUNCTION_58_12(v20);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      OUTLINED_FUNCTION_62_10(&dword_0, v21, v22, "#WFOpenInteractionFlow makeUnlockForCarplay unknown error: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError();
    uint64_t v24 = OUTLINED_FUNCTION_9_6();
    OUTLINED_FUNCTION_67_11(v24, v25);
    OUTLINED_FUNCTION_35_20();
LABEL_21:
    OUTLINED_FUNCTION_40_19();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_18_2();
    __asm { BRAA            X1, X16 }
  }
  OUTLINED_FUNCTION_50_14();
  uint64_t v3 = OUTLINED_FUNCTION_23_33();
  v2(v3);
  uint64_t v4 = OUTLINED_FUNCTION_22_32();
  v1(v4);
  uint64_t v5 = OUTLINED_FUNCTION_47_15();
  uint64_t v7 = v6(v5);
  uint64_t v8 = *(void ***)(v0 + 160);
  if (v7 != enum case for SubmitCommandError.failedResponse(_:))
  {
    OUTLINED_FUNCTION_50_5();
    v23();
LABEL_15:
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v26 = OUTLINED_FUNCTION_55_11();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.voiceCommands);
    uint64_t v27 = OUTLINED_FUNCTION_29_27();
    v1(v27);
    uint64_t v28 = Logger.logObject.getter();
    uint64_t v29 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_19_29(v29))
    {
      swift_slowAlloc();
      uint64_t v47 = OUTLINED_FUNCTION_13_42();
      OUTLINED_FUNCTION_54_9(4.8149e-34);
      lazy protocol witness table accessor for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (void (*)(uint64_t))&type metadata accessor for SubmitCommandError);
      uint64_t v30 = Error.localizedDescription.getter();
      id v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v47);
      OUTLINED_FUNCTION_37_21(v32);
      swift_bridgeObjectRelease();
      uint64_t v33 = OUTLINED_FUNCTION_46_11();
      v34(v33);
      OUTLINED_FUNCTION_42_9(&dword_0, v35, v36, "#WFOpenInteractionFlow makeUnlockForCarplay generic error: %s");
      OUTLINED_FUNCTION_56_8();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_7_0();
    }
    else
    {
      int v37 = OUTLINED_FUNCTION_32_1();
      v38(v37);
    }

    uint64_t v39 = *(void *)(v0 + 120);
    lazy protocol witness table accessor for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy(&lazy protocol witness table cache variable for type SubmitCommandError and conformance SubmitCommandError, 255, (void (*)(uint64_t))&type metadata accessor for SubmitCommandError);
    uint64_t v40 = OUTLINED_FUNCTION_9_6();
    uint64_t v42 = OUTLINED_FUNCTION_25_22(v40, v41);
    v43(v42);
    uint64_t v44 = *(void *)(v39 + 208);
    *(void *)(v39 + 208) = v28 | 0x4000000000000000;
    outlined consume of WFOpenInteractionFlow.State(v44);
    swift_errorRelease();
    goto LABEL_21;
  }
  uint64_t v9 = OUTLINED_FUNCTION_33_23();
  v10(v9);
  uint64_t v11 = *v8;
  *(void *)(v0 + 224) = v11;
  if ([v11 errorCode] != &stru_518.sectname[1])
  {

    goto LABEL_15;
  }
  OUTLINED_FUNCTION_57_8();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v12;
  void *v12 = v0;
  v12[1] = WFOpenInteractionFlow.makeUnlockForCarplay(intent:intentResponse:app:);
  OUTLINED_FUNCTION_31_22();
  OUTLINED_FUNCTION_18_2();
  return static WFOpenInteractionFlow.publishContinueInApp(app:deviceState:dialogTemplating:outputPublisher:)();
}

uint64_t WFOpenInteractionFlow.makeUnlockForCarplay(intent:intentResponse:app:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;

  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    a10 = v22 + 104;
    uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_15_29();
    a11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315138;
    swift_getErrorValue();
    uint64_t v29 = Error.localizedDescription.getter();
    *(void *)(v22 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v26, v27, "#WFOpenInteractionFlow makeUnlockForCarplay submit error: %s", v28, 0xCu);
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError();
  uint64_t v31 = OUTLINED_FUNCTION_9_6();
  unsigned char *v32 = 2;
  swift_errorRelease();
  uint64_t v33 = *(void *)(v22 + 120);
  OUTLINED_FUNCTION_50_5();
  v34();
  unint64_t v35 = *(void *)(v33 + 208);
  *(void *)(v33 + 208) = v31 | 0x4000000000000000;
  outlined consume of WFOpenInteractionFlow.State(v35);
  swift_errorRelease();
  OUTLINED_FUNCTION_40_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v37(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14);
}

uint64_t static WFOpenInteractionFlow.publishContinueInApp(app:deviceState:dialogTemplating:outputPublisher:)()
{
  OUTLINED_FUNCTION_9_0();
  v0[24] = v1;
  v0[25] = v2;
  v0[22] = v3;
  v0[23] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v5);
  v0[26] = OUTLINED_FUNCTION_25();
  uint64_t v6 = type metadata accessor for TemplatingResult();
  v0[27] = v6;
  OUTLINED_FUNCTION_1_0(v6);
  v0[28] = v7;
  v0[29] = OUTLINED_FUNCTION_25();
  uint64_t v8 = type metadata accessor for DialogPhase();
  v0[30] = v8;
  OUTLINED_FUNCTION_1_0(v8);
  v0[31] = v9;
  v0[32] = swift_task_alloc();
  v0[33] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for OutputGenerationManifest();
  v0[34] = v10;
  OUTLINED_FUNCTION_1_0(v10);
  v0[35] = v11;
  v0[36] = OUTLINED_FUNCTION_25();
  uint64_t v12 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v0[37] = v12;
  OUTLINED_FUNCTION_1_0(v12);
  v0[38] = v13;
  v0[39] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v14, v15, v16);
}

{
  char v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  uint64_t v2 = (uint64_t *)v1[24];
  uint64_t v3 = OUTLINED_FUNCTION_47_10();
  v4(v3);
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v5 = OUTLINED_FUNCTION_48_8();
  v6(v5);
  uint64_t v7 = *v2;
  if (v0)
  {
    uint64_t v15 = (uint64_t (*)(uint64_t))(*(void *)(v7 + 240) + **(int **)(v7 + 240));
    uint64_t v8 = (void *)swift_task_alloc();
    v1[40] = v8;
    *uint64_t v8 = v1;
    v8[1] = static WFOpenInteractionFlow.publishContinueInApp(app:deviceState:dialogTemplating:outputPublisher:);
    uint64_t v9 = v1[22];
    return v15(v9);
  }
  else
  {
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v7 + 248) + **(int **)(v7 + 248));
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    v1[46] = v11;
    *uint64_t v11 = v12;
    v11[1] = static WFOpenInteractionFlow.publishContinueInApp(app:deviceState:dialogTemplating:outputPublisher:);
    uint64_t v13 = v1[29];
    uint64_t v14 = v1[22];
    return v16(v13, v14);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 328) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 336) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  OUTLINED_FUNCTION_13_1();
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 272);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 136), v0 + 16);
  uint64_t v4 = *(void **)(v0 + 200);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v7;
  *uint64_t v7 = v0;
  v7[1] = static WFOpenInteractionFlow.publishContinueInApp(app:deviceState:dialogTemplating:outputPublisher:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 16, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 376) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v12 = *(void *)(v0 + 216);
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 184), *(void *)(*(void *)(v0 + 184) + 24));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  uint64_t v4 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  uint64_t v5 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(void *)(v0 + 80) = v5;
  *(void *)(v0 + 88) = &protocol witness table for AceOutput;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 56));
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of URL?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v12);
  outlined init with take of AceServiceInvokerAsync((long long *)(v0 + 56), v0 + 16);
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 200), *(void *)(*(void *)(v0 + 200) + 24));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v6;
  *uint64_t v6 = v0;
  v6[1] = static WFOpenInteractionFlow.publishContinueInApp(app:deviceState:dialogTemplating:outputPublisher:);
  OUTLINED_FUNCTION_3();
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_16_35();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_16_35();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_13_1();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  OUTLINED_FUNCTION_16_35();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t static WFOpenInteractionFlow.publishContinueInApp(app:deviceState:dialogTemplating:outputPublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = v14;
  unint64_t v35 = v14 + 17;
  uint64_t v16 = (void *)v14[42];
  uint64_t v18 = v14[32];
  uint64_t v17 = v14[33];
  uint64_t v19 = v14[31];
  uint64_t v20 = v15[30];
  static DialogPhase.error.getter();
  id v21 = [v16 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v17, v20);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v20);
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v15[43] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v22 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v22 + 16) = xmmword_211C70;
  *(void *)(v22 + 32) = v16;
  uint64_t v36 = v22;
  specialized Array._endMutation()();
  v15[44] = v36;
  uint64_t v34 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  id v23 = v16;
  uint64_t v24 = (void *)swift_task_alloc();
  v15[45] = v24;
  *uint64_t v24 = v15;
  v24[1] = static WFOpenInteractionFlow.publishContinueInApp(app:deviceState:dialogTemplating:outputPublisher:);
  OUTLINED_FUNCTION_3();
  return v28(v25, v26, v27, v28, v29, v30, v31, v32, v34, v35, v36, a12, a13, a14);
}

uint64_t WFOpenInteractionFlow.makeLaunchAppCommand(intent:intentResponse:app:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t WFOpenInteractionFlow.makeLaunchAppCommand(intent:intentResponse:app:)()
{
  OUTLINED_FUNCTION_14_0();
  type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  *(void *)(v0 + 48) = static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = WFOpenInteractionFlow.makeLaunchAppCommand(intent:intentResponse:app:);
  return WFOpenInteractionFlow.makeErrorCallback()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 72) = v3;
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_14_0();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v3 + 16) = xmmword_211C70;
  *(void *)(v3 + 32) = v1;
  uint64_t v7 = v3;
  specialized Array._endMutation()();
  outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.callbacks.setter(v7, v2);
  OUTLINED_FUNCTION_15_3();
  uint64_t v5 = *(void *)(v0 + 48);
  return v4(v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OUTLINED_FUNCTION_9_0();

  OUTLINED_FUNCTION_18_0();
  return v1();
}

uint64_t WFOpenInteractionFlow.makeErrorCallbackCommands()()
{
  OUTLINED_FUNCTION_9_0();
  v1[14] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AceOutput?);
  OUTLINED_FUNCTION_16(v2);
  v1[15] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for AceOutput();
  v1[16] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[17] = v4;
  v1[18] = OUTLINED_FUNCTION_25();
  uint64_t v5 = type metadata accessor for RFFeatureFlags.ResponseFramework();
  v1[19] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[20] = v6;
  v1[21] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_14_0();
  uint64_t v2 = OUTLINED_FUNCTION_47_10();
  v3(v2);
  RFFeatureFlags.ResponseFramework.isEnabled.getter();
  uint64_t v4 = OUTLINED_FUNCTION_48_8();
  v5(v4);
  if (v0)
  {
    swift_task_alloc();
    OUTLINED_FUNCTION_22_0();
    *(void *)(v1 + 176) = v6;
    *uint64_t v6 = v7;
    v6[1] = WFOpenInteractionFlow.makeErrorCallbackCommands();
    return WFOpenInteractionFlow.makeErrorCallbackOutput_RFv2()();
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v1 + 192) = v9;
    *uint64_t v9 = v1;
    v9[1] = WFOpenInteractionFlow.makeErrorCallbackCommands();
    return WFOpenInteractionFlow.makeErrorCallbackViews_preRFv2()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  os_log_type_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t (*v36)(uint64_t);
  os_log_type_t type;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;

  uint64_t v42 = v0;
  uint64_t v1 = v0 + 2;
  outlined init with copy of DeviceState((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output);
  if (swift_dynamicCast())
  {
    uint64_t v2 = v0[17];
    uint64_t v3 = v0[18];
    uint64_t v5 = v0[15];
    uint64_t v4 = v0[16];
    __swift_storeEnumTagSinglePayload(v5, 0, 1, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v5, v4);
    uint64_t v6 = AceOutput.commands.getter();
    uint64_t v7 = v6;
    uint64_t v41 = (uint64_t)_swiftEmptyArrayStorage;
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain();
      if (v8)
      {
LABEL_4:
        if (v8 < 1)
        {
          __break(1u);
          goto LABEL_37;
        }
        for (i = 0; i != v8; ++i)
        {
          if ((v7 & 0xC000000000000001) != 0) {
            uint64_t v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t v10 = *(id *)(v7 + 8 * i + 32);
          }
          uint64_t v11 = v10;
          v0[12] = &OBJC_PROTOCOL___SAClientBoundCommand;
          if (swift_dynamicCastObjCProtocolConditional())
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((char *)&dword_10 + (v41 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                           + (v41 & 0xFFFFFFFFFFFFFF8)) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v1 = v0 + 2;
        uint64_t v8 = v41;
LABEL_23:
        if ((unint64_t)v8 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v22) {
            goto LABEL_25;
          }
        }
        else if (*(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8)))
        {
LABEL_25:
          uint64_t v19 = v0[17];
          uint64_t v20 = v0[18];
          id v21 = v0[16];
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
          goto LABEL_31;
        }
        if (one-time initialization token for voiceCommands == -1)
        {
LABEL_28:
          id v23 = type metadata accessor for Logger();
          __swift_project_value_buffer(v23, (uint64_t)static Logger.voiceCommands);
          swift_bridgeObjectRetain();
          uint64_t v24 = Logger.logObject.getter();
          uint64_t v25 = static os_log_type_t.error.getter();
          uint64_t v26 = os_log_type_enabled(v24, v25);
          uint64_t v27 = v0[17];
          uint64_t v28 = v0[16];
          if (v26)
          {
            uint64_t v39 = v0[18];
            uint64_t v29 = (uint8_t *)swift_slowAlloc();
            uint64_t v41 = swift_slowAlloc();
            *(_DWORD *)uint64_t v29 = 136315138;
            type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
            type = v25;
            swift_bridgeObjectRetain();
            uint64_t v30 = Array.description.getter();
            uint64_t v40 = (uint64_t)v1;
            uint64_t v32 = v31;
            swift_bridgeObjectRelease();
            v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_0, v24, type, "no error-callback clientCmds; outputCmds=%s", v29, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_7_0();
            OUTLINED_FUNCTION_7_0();

            (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v39, v28);
            uint64_t v33 = v40;
LABEL_32:
            __swift_destroy_boxed_opaque_existential_1Tm(v33);
            goto LABEL_33;
          }

          swift_bridgeObjectRelease_n();
          uint64_t v34 = OUTLINED_FUNCTION_30_0();
          v35(v34);
LABEL_31:
          uint64_t v33 = (uint64_t)v1;
          goto LABEL_32;
        }
LABEL_37:
        swift_once();
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  uint64_t v12 = v0[15];
  __swift_storeEnumTagSinglePayload(v12, 1, 1, v0[16]);
  outlined destroy of URL?(v12, &demangling cache variable for type metadata for AceOutput?);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.voiceCommands);
  uint64_t v14 = (void *)Logger.logObject.getter();
  uint64_t v15 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_32(v15))
  {
    uint64_t v16 = (_WORD *)OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_28_2(v16);
    OUTLINED_FUNCTION_7_0();
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  uint64_t v8 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_33:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  return v36(v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  void *v4 = *v1;
  *(void *)(v3 + 200) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v6();
  }
  else
  {
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v8, v9, v10);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  if (*(void *)(v0 + 200) >> 62)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = OUTLINED_FUNCTION_39_0();
  return v2(v1);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WFOpenInteractionFlow.makeErrorCallbackOutput_RFv2()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for DialogPhase();
  v1[4] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[5] = v4;
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OutputGenerationManifest();
  v1[8] = v5;
  OUTLINED_FUNCTION_1_0(v5);
  v1[9] = v6;
  v1[10] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v3)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = (uint64_t (*)(void))(*(void *)(**(void **)(*(void *)(v0 + 24) + 32) + 256)
                         + **(int **)(**(void **)(*(void *)(v0 + 24) + 32) + 256));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = WFOpenInteractionFlow.makeErrorCallbackOutput_RFv2();
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_18_0();
    return v9();
  }
  else
  {
    *(void *)(v5 + 96) = v3;
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_13_1();

  uint64_t v1 = OUTLINED_FUNCTION_30_0();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t WFOpenInteractionFlow.makeErrorCallbackOutput_RFv2()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  OUTLINED_FUNCTION_11_0();
  OUTLINED_FUNCTION_26();
  uint64_t v15 = (void *)v14[12];
  uint64_t v17 = v14[6];
  uint64_t v16 = v14[7];
  uint64_t v18 = v14[4];
  uint64_t v19 = v14[5];
  static DialogPhase.error.getter();
  id v20 = [v15 catId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v16, v18);
  OutputGenerationManifest.init(dialogPhase:_:)();
  OutputGenerationManifest.responseViewId.setter();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_35_2();
  v14[13] = ResponseFactory.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v21 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v21 + 16) = xmmword_211C70;
  *(void *)(v21 + 32) = v15;
  uint64_t v35 = v21;
  specialized Array._endMutation()();
  v14[14] = v35;
  uint64_t v34 = (char *)&async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:)
      + async function pointer to dispatch thunk of ResponseFactory.makeResponseOutput(dialog:outputGenerationManifest:);
  id v22 = v15;
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v14[15] = v23;
  *id v23 = v24;
  v23[1] = WFOpenInteractionFlow.makeErrorCallbackOutput_RFv2();
  OUTLINED_FUNCTION_3();
  return v28(v25, v26, v27, v28, v29, v30, v31, v32, a9, v34, v35, a12, a13, a14);
}

uint64_t WFOpenInteractionFlow.makeErrorCallbackViews_preRFv2()()
{
  OUTLINED_FUNCTION_9_0();
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for TemplatingResult();
  v1[3] = v2;
  OUTLINED_FUNCTION_1_0(v2);
  v1[4] = v3;
  v1[5] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v4, v5, v6);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_14_0();
  uint64_t v5 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)(v0[2] + 32) + 264)
                                       + **(int **)(**(void **)(v0[2] + 32) + 264));
  swift_task_alloc();
  OUTLINED_FUNCTION_22_0();
  v0[6] = v1;
  *uint64_t v1 = v2;
  v1[1] = WFOpenInteractionFlow.makeErrorCallbackViews_preRFv2();
  uint64_t v3 = v0[5];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(0);
  if ((unint64_t)dispatch thunk of ViewFactory.makeUtteranceViews(template:listenAfterSpeaking:canUseServerTTS:)() >> 62)
  {
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSError(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  }
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  swift_bridgeObjectRelease();
  uint64_t v4 = dispatch thunk of ViewFactory.makeErrorView(aceViews:)();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v5 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v5 + 16) = xmmword_211C70;
  *(void *)(v5 + 32) = v4;
  specialized Array._endMutation()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v6 = OUTLINED_FUNCTION_39_0();
  return v7(v6);
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_9_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v0();
}

uint64_t WFOpenInteractionFlow.submitLaunchAppPunchout(intent:intentResponse:app:)()
{
  OUTLINED_FUNCTION_14_0();
  v1[17] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_16(v2);
  v1[18] = OUTLINED_FUNCTION_25();
  uint64_t v3 = type metadata accessor for AceOutput();
  v1[19] = v3;
  OUTLINED_FUNCTION_1_0(v3);
  v1[20] = v4;
  v1[21] = OUTLINED_FUNCTION_25();
  uint64_t v5 = (void *)swift_task_alloc();
  v1[22] = v5;
  *uint64_t v5 = v1;
  v5[1] = WFOpenInteractionFlow.submitLaunchAppPunchout(intent:intentResponse:app:);
  uint64_t v6 = OUTLINED_FUNCTION_53_8();
  return WFOpenInteractionFlow.makeLaunchAppCommand(intent:intentResponse:app:)(v6, v7, v8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_5_0();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 184) = v4;
  *(void *)(v2 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v5, v6, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  void *v13;
  uint64_t v15;

  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v6 = *(void **)(v0 + 136);
  [v1 setDoNotDismissSiri:1];
  uint64_t v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v8 = OUTLINED_FUNCTION_16_2();
  *(_OWORD *)(v8 + 16) = xmmword_211C70;
  *(void *)(v8 + 32) = v1;
  specialized Array._endMutation()();
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v9 = v1;
  static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of URL?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v10 = v6[14];
  uint64_t v11 = v6[15];
  __swift_project_boxed_opaque_existential_1(v6 + 11, v10);
  *(void *)(v0 + 80) = v4;
  *(void *)(v0 + 88) = &protocol witness table for AceOutput;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(boxed_opaque_existential_1, v2, v4);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v13;
  *uint64_t v13 = v0;
  v13[1] = WFOpenInteractionFlow.submitLaunchAppPunchout(intent:intentResponse:app:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)(v0 + 56, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_5_0();
  void *v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 208) = v0;
  swift_task_dealloc();
  if (!v0) {
    __swift_destroy_boxed_opaque_existential_1Tm(v3 + 56);
  }
  OUTLINED_FUNCTION_10_0();
  return _swift_task_switch(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  unint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  OUTLINED_FUNCTION_14_0();

  uint64_t v1 = OUTLINED_FUNCTION_30_0();
  v2(v1);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v3 + 208);
  *(void *)(v3 + 208) = 1;
  outlined consume of WFOpenInteractionFlow.State(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  return v5();
}

uint64_t WFOpenInteractionFlow.submitLaunchAppPunchout(intent:intentResponse:app:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v26 = (void *)Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_19_29(v27))
  {
    a10 = v22 + 128;
    OUTLINED_FUNCTION_15_29();
    a11 = OUTLINED_FUNCTION_13_42();
    OUTLINED_FUNCTION_27_32(4.8149e-34);
    uint64_t v28 = Error.localizedDescription.getter();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &a11);
    OUTLINED_FUNCTION_43_11(v30);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_42_9(&dword_0, v31, v32, "#WFOpenInteractionFlow submitLaunchAppPunchout unknown error: %s");
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError();
  uint64_t v33 = OUTLINED_FUNCTION_9_6();
  OUTLINED_FUNCTION_66_9(v33, v34);
  OUTLINED_FUNCTION_34_19();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14);
}

{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  os_log_type_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned char *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_11_0();
  a21 = v23;
  a22 = v24;
  OUTLINED_FUNCTION_26();
  a20 = v22;
  uint64_t v26 = *(void *)(v22 + 160);
  uint64_t v25 = *(void *)(v22 + 168);
  os_log_type_t v27 = *(void *)(v22 + 152);

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  __swift_destroy_boxed_opaque_existential_1Tm(v22 + 56);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v29 = (void *)Logger.logObject.getter();
  uint64_t v30 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_19_29(v30))
  {
    a10 = v22 + 128;
    OUTLINED_FUNCTION_15_29();
    a11 = OUTLINED_FUNCTION_13_42();
    OUTLINED_FUNCTION_27_32(4.8149e-34);
    uint64_t v31 = Error.localizedDescription.getter();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &a11);
    OUTLINED_FUNCTION_43_11(v33);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_42_9(&dword_0, v34, v35, "#WFOpenInteractionFlow submitLaunchAppPunchout unknown error: %s");
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  lazy protocol witness table accessor for type WFOpenInteractionFlowError and conformance WFOpenInteractionFlowError();
  uint64_t v36 = OUTLINED_FUNCTION_9_6();
  OUTLINED_FUNCTION_66_9(v36, v37);
  OUTLINED_FUNCTION_34_19();
  swift_task_dealloc();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_3();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, a9, a10, a11, a12, a13, a14);
}

uint64_t WFOpenInteractionFlow.makeErrorCallback()()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = WFOpenInteractionFlow.makeErrorCallback();
  return WFOpenInteractionFlow.makeErrorCallbackCommands()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_0();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_5_0();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_4_0();
  *uint64_t v8 = v7;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
    return v9();
  }
  else
  {
    *(void *)(v5 + 24) = v3;
    OUTLINED_FUNCTION_10_0();
    return _swift_task_switch(v11, v12, v13);
  }
}

{
  id v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(id);
  uint64_t v5;

  OUTLINED_FUNCTION_9_0();
  uint64_t v0 = [objc_allocWithZone((Class)SAResultCallback) init];
  [v0 setCode:SAResultCallbackAnyErrorCodeValue];
  uint64_t v1 = OUTLINED_FUNCTION_30_0();
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(v1, v2);
  OUTLINED_FUNCTION_15_3();
  return v3(v0);
}

uint64_t WFOpenInteractionFlow.execute(completion:)()
{
  type metadata accessor for WFOpenInteractionFlow();
  lazy protocol witness table accessor for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy(&lazy protocol witness table cache variable for type WFOpenInteractionFlow and conformance WFOpenInteractionFlow, v0, (void (*)(uint64_t))type metadata accessor for WFOpenInteractionFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t WFOpenInteractionFlow.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 48);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 88);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 168);
  outlined consume of WFOpenInteractionFlow.State(*(void *)(v0 + 208));
  return v0;
}

uint64_t WFOpenInteractionFlow.__deallocating_deinit()
{
  WFOpenInteractionFlow.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Flow.on(input:) in conformance WFOpenInteractionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance WFOpenInteractionFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for Flow.onAsync(input:) in conformance WFOpenInteractionFlow;
  return Flow.onAsync(input:)(a1, a2, a3);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance WFOpenInteractionFlow()
{
  OUTLINED_FUNCTION_9_0();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_4_0();
  void *v4 = v3;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_3();
  return v5(v2);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance WFOpenInteractionFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 272))();
}

uint64_t protocol witness for Flow.execute() in conformance WFOpenInteractionFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 200) + **(int **)(**(void **)v1 + 200));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance CustomIntentRCHFlowStrategy;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance WFOpenInteractionFlow@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 176))();
  *a1 = result;
  return result;
}

void outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.callbacks.setter(uint64_t a1, void *a2)
{
  type metadata accessor for NSError(0, &lazy cache variable for type metadata for SAResultCallback);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setCallbacks:isa];
}

unint64_t outlined consume of WFOpenInteractionFlow.State(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t partial apply for implicit closure #3 in implicit closure #2 in WFOpenInteractionFlow.execute()(char a1)
{
  return implicit closure #3 in implicit closure #2 in WFOpenInteractionFlow.execute()(a1 & 1);
}

uint64_t sub_20A560()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for WFOpenInteractionFlow()
{
  return self;
}

unint64_t *initializeBufferWithCopyOfBuffer for WFOpenInteractionResponse(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of WFOpenInteractionResponse(*a2);
  *a1 = v3;
  return a1;
}

unint64_t outlined copy of WFOpenInteractionResponse(unint64_t result)
{
  if (!(result >> 62)) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t destroy for WFOpenInteractionResponse(unint64_t *a1)
{
  return outlined consume of WFOpenInteractionResponse(*a1);
}

unint64_t *assignWithCopy for WFOpenInteractionResponse(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of WFOpenInteractionResponse(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of WFOpenInteractionResponse(v4);
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for WFOpenInteractionResponse(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of WFOpenInteractionResponse(v3);
  return a1;
}

ValueMetadata *type metadata accessor for WFOpenInteractionResponse()
{
  return &type metadata for WFOpenInteractionResponse;
}

unsigned char *storeEnumTagSinglePayload for WFOpenInteractionFlowError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x20A7BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WFOpenInteractionFlowError()
{
  return &type metadata for WFOpenInteractionFlowError;
}

unint64_t *initializeBufferWithCopyOfBuffer for WFOpenInteractionFlow.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of WFOpenInteractionFlow.State(*a2);
  *a1 = v3;
  return a1;
}

unint64_t outlined copy of WFOpenInteractionFlow.State(unint64_t result)
{
  if (result >> 62 == 1) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t destroy for WFOpenInteractionFlow.State(unint64_t *a1)
{
  return outlined consume of WFOpenInteractionFlow.State(*a1);
}

unint64_t *assignWithCopy for WFOpenInteractionFlow.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of WFOpenInteractionFlow.State(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of WFOpenInteractionFlow.State(v4);
  return a1;
}

unint64_t *assignWithTake for WFOpenInteractionFlow.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of WFOpenInteractionFlow.State(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for WFOpenInteractionResponse(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x3E && *(unsigned char *)(a1 + 8))
    {
      unsigned int v2 = *(_DWORD *)a1 + 61;
    }
    else
    {
      unsigned int v2 = (((*(void *)a1 >> 58) >> 4) | (4
                                                        * ((*(void *)a1 >> 58) & 0xC | (*(void *)a1 >> 1) & 3))) ^ 0x3F;
      if (v2 >= 0x3D) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for WFOpenInteractionResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(void *)uint64_t result = a2 - 62;
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0xF | (16 * (-a2 & 0x3F));
      *(void *)uint64_t result = ((v3 << 58) | (2 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for WFOpenInteractionFlow.State(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return ((*a1 >> 2) & 0xFFFFFFFE | *a1 & 1) + 2;
  }
}

void *destructiveProjectEnumData for WFOpenInteractionFlow.State(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for WFOpenInteractionResponse(unint64_t *result, uint64_t a2)
{
  if (a2 < 2) {
    unint64_t v2 = *result & 0xFFFFFFFFFFFFFF9 | (a2 << 62);
  }
  else {
    unint64_t v2 = (4 * (a2 - 2)) & 0x3FFFFFFF8 | ((int)a2 - 2) & 1 | 0x8000000000000000;
  }
  *uint64_t result = v2;
  return result;
}

void *type metadata accessor for WFOpenInteractionFlow.State()
{
  return &unk_293348;
}

uint64_t lazy protocol witness table accessor for type CustomIntentHandoffToCompanionFlowStrategy and conformance CustomIntentHandoffToCompanionFlowStrategy(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_13_42()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_16_35()
{
  return swift_task_dealloc();
}

BOOL OUTLINED_FUNCTION_19_29(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_22_32()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_33()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_22(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_27_32(float a1)
{
  *uint64_t v1 = a1;
  return swift_getErrorValue();
}

uint64_t OUTLINED_FUNCTION_28_25(float a1)
{
  *uint64_t v1 = a1;
  return swift_getErrorValue();
}

uint64_t OUTLINED_FUNCTION_29_27()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_31_22()
{
  return *(void *)(v0 + 112);
}

uint64_t OUTLINED_FUNCTION_32_25()
{
  *(void *)(v1 + 96) = v0;
  return swift_errorRetain();
}

uint64_t OUTLINED_FUNCTION_34_19()
{
  uint64_t v2 = *(void *)(v1 + 136);
  unint64_t v3 = *(void *)(v2 + 208);
  *(void *)(v2 + 208) = v0 | 0x4000000000000000;
  outlined consume of WFOpenInteractionFlow.State(v3);
  return swift_task_dealloc();
}

unint64_t OUTLINED_FUNCTION_35_20()
{
  unint64_t v3 = *(void *)(v0 + 208);
  *(void *)(v0 + 208) = v1 | 0x4000000000000000;
  return outlined consume of WFOpenInteractionFlow.State(v3);
}

uint64_t OUTLINED_FUNCTION_37_21(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_40_19()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_42_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_43_11(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_46_18()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_47_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_12()
{
  __swift_project_boxed_opaque_existential_1(v0, *(void *)(v1 + 72));
  return dispatch thunk of DeviceState.isCarPlay.getter();
}

uint64_t OUTLINED_FUNCTION_49_13()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_50_14()
{
  return swift_errorRelease();
}

uint64_t OUTLINED_FUNCTION_53_8()
{
  return v0;
}

void OUTLINED_FUNCTION_54_9(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t OUTLINED_FUNCTION_55_11()
{
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_56_8()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_58_12(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_60_9()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

void OUTLINED_FUNCTION_62_10(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_66_9(uint64_t a1, unsigned char *a2)
{
  *a2 = 4;
  return swift_errorRelease();
}

uint64_t OUTLINED_FUNCTION_67_11(uint64_t a1, unsigned char *a2)
{
  *a2 = 4;
  return swift_errorRelease();
}

uint64_t OUTLINED_FUNCTION_68_8()
{
  uint64_t v2 = *(void *)(v1 + 72);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

uint64_t UsoTaskBuilder.asUsoGraph()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for Logger();
  v10[4] = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_211C70;
  *(void *)(v7 + 32) = v0;
  v10[11] = v7;
  specialized Array._endMutation()();
  swift_retain();
  UsoBuilderOptions.init(longhandDefinedValues:)();
  uint64_t v8 = type metadata accessor for UsoBuilderOptions();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
  swift_bridgeObjectRelease();
  outlined destroy of URL?((uint64_t)v6, &demangling cache variable for type metadata for UsoBuilderOptions?);
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  return swift_release();
}

void *CanvasConstants.siriLinkUIPluginBundleName.unsafeMutableAddressor()
{
  return &static CanvasConstants.siriLinkUIPluginBundleName;
}

void *CanvasConstants.siriLinkUIPluginViewId.unsafeMutableAddressor()
{
  return &static CanvasConstants.siriLinkUIPluginViewId;
}

unint64_t static CanvasConstants.siriLinkUIPluginViewId.getter()
{
  return 0xD000000000000014;
}

ValueMetadata *type metadata accessor for CanvasConstants()
{
  return &type metadata for CanvasConstants;
}

uint64_t LNActionParameterMetadata.measurementDefaultUnitSymbol.getter()
{
  id v1 = [v0 typeSpecificMetadata];
  type metadata accessor for LNValueTypeSpecificMetadataKey(0);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey();
  uint64_t v2 = OUTLINED_FUNCTION_0_49();

  id v3 = LNValueTypeSpecificMetadataKeyMeasurementDefaultUnitSymbol;
  specialized Dictionary.subscript.getter((uint64_t)v3, v2, &v6);

  swift_bridgeObjectRelease();
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v5;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v6);
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey()
{
  unint64_t result = lazy protocol witness table cache variable for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey;
  if (!lazy protocol witness table cache variable for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey)
  {
    type metadata accessor for LNValueTypeSpecificMetadataKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey);
  }
  return result;
}

uint64_t LNActionParameterMetadata.measurementUnitType.getter()
{
  id v1 = [v0 typeSpecificMetadata];
  type metadata accessor for LNValueTypeSpecificMetadataKey(0);
  lazy protocol witness table accessor for type LNValueTypeSpecificMetadataKey and conformance LNValueTypeSpecificMetadataKey();
  uint64_t v2 = OUTLINED_FUNCTION_0_49();

  id v3 = LNValueTypeSpecificMetadataKeyMeasurementUnitType;
  specialized Dictionary.subscript.getter((uint64_t)v3, v2, &v6);

  swift_bridgeObjectRelease();
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v5;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v6);
  }
  return 0;
}

uint64_t OUTLINED_FUNCTION_0_49()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

NSMeasurement __swiftcall Measurement._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)Measurement._bridgeToObjectiveC()();
  result._doubleValue = v2;
  result._unit = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t Measurement.init(value:unit:)()
{
  return Measurement.init(value:unit:)();
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return CharacterSet.init(charactersIn:)();
}

uint64_t static CharacterSet.punctuationCharacters.getter()
{
  return static CharacterSet.punctuationCharacters.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t static DateComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)()
{
  return PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)PersonNameComponents._bridgeToObjectiveC()();
  result._private = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return type metadata accessor for PersonNameComponents();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return URL.init(fileURLWithPath:isDirectory:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.host.getter()
{
  return URL.host.getter();
}

uint64_t URL.scheme.getter()
{
  return URL.scheme.getter();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.init(identifier:)()
{
  return Locale.init(identifier:)();
}

uint64_t Locale.identifier.getter()
{
  return Locale.identifier.getter();
}

uint64_t Locale.LanguageCode.identifier.getter()
{
  return Locale.LanguageCode.identifier.getter();
}

uint64_t type metadata accessor for Locale.LanguageCode()
{
  return type metadata accessor for Locale.LanguageCode();
}

uint64_t Locale.usesMetricSystem.getter()
{
  return Locale.usesMetricSystem.getter();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t Locale.Currency.identifier.getter()
{
  return Locale.Currency.identifier.getter();
}

uint64_t type metadata accessor for Locale.Currency()
{
  return type metadata accessor for Locale.Currency();
}

uint64_t Locale.Language.languageCode.getter()
{
  return Locale.Language.languageCode.getter();
}

uint64_t type metadata accessor for Locale.Language()
{
  return type metadata accessor for Locale.Language();
}

uint64_t Locale.currency.getter()
{
  return Locale.currency.getter();
}

uint64_t Locale.language.getter()
{
  return Locale.language.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t Calendar.init(identifier:)()
{
  return Calendar.init(identifier:)();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t static TimeZone.current.getter()
{
  return static TimeZone.current.getter();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t type metadata accessor for ButtonRole()
{
  return type metadata accessor for ButtonRole();
}

uint64_t Separators.init(top:bottom:)()
{
  return Separators.init(top:bottom:)();
}

uint64_t static Separators.none.getter()
{
  return static Separators.none.getter();
}

uint64_t type metadata accessor for Separators()
{
  return type metadata accessor for Separators();
}

uint64_t type metadata accessor for _ProtoIdiom()
{
  return type metadata accessor for _ProtoIdiom();
}

uint64_t BinaryButton.init(primaryButton:secondaryButton:componentName:linkIdentifier:)()
{
  return BinaryButton.init(primaryButton:secondaryButton:componentName:linkIdentifier:)();
}

uint64_t type metadata accessor for BinaryButton()
{
  return type metadata accessor for BinaryButton();
}

uint64_t CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)()
{
  return CustomCanvas.init(bundleName:viewId:viewData:componentName:safeForLogging:requestsKeyWindow:hideConversationKeyline:)();
}

uint64_t type metadata accessor for CustomCanvas()
{
  return type metadata accessor for CustomCanvas();
}

uint64_t ImageElement.asVisualElement()()
{
  return ImageElement.asVisualElement()();
}

uint64_t type metadata accessor for ImageElement.ImageStyle()
{
  return type metadata accessor for ImageElement.ImageStyle();
}

uint64_t type metadata accessor for ImageElement.Background()
{
  return type metadata accessor for ImageElement.Background();
}

uint64_t ImageElement.AspectRatio.init(width:height:)()
{
  return ImageElement.AspectRatio.init(width:height:)();
}

uint64_t type metadata accessor for ImageElement.AspectRatio()
{
  return type metadata accessor for ImageElement.AspectRatio();
}

uint64_t type metadata accessor for ImageElement.RenderingMode()
{
  return type metadata accessor for ImageElement.RenderingMode();
}

uint64_t static ImageElement.symbol(_:darkModeName:tintColor:renderingMode:imageStyle:background:idioms:punchesThroughBackground:)()
{
  return static ImageElement.symbol(_:darkModeName:tintColor:renderingMode:imageStyle:background:idioms:punchesThroughBackground:)();
}

uint64_t static ImageElement.appIcon(_:imageStyle:idioms:)()
{
  return static ImageElement.appIcon(_:imageStyle:idioms:)();
}

uint64_t static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)()
{
  return static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)();
}

uint64_t type metadata accessor for ImageElement()
{
  return type metadata accessor for ImageElement();
}

uint64_t type metadata accessor for _ProtoButton.FormAction()
{
  return type metadata accessor for _ProtoButton.FormAction();
}

uint64_t type metadata accessor for VisualElement()
{
  return type metadata accessor for VisualElement();
}

uint64_t type metadata accessor for RFFeatureFlags.ResponseFramework()
{
  return type metadata accessor for RFFeatureFlags.ResponseFramework();
}

uint64_t type metadata accessor for SeparatorStyle()
{
  return type metadata accessor for SeparatorStyle();
}

uint64_t SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)()
{
  return SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)();
}

uint64_t type metadata accessor for SimpleItemRich()
{
  return type metadata accessor for SimpleItemRich();
}

uint64_t type metadata accessor for VisualProperty()
{
  return type metadata accessor for VisualProperty();
}

uint64_t VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)()
{
  return VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)();
}

uint64_t ProtobufBuilder.serializedData()()
{
  return ProtobufBuilder.serializedData()();
}

uint64_t CodableAceObject.init(wrappedValue:)()
{
  return CodableAceObject.init(wrappedValue:)();
}

uint64_t type metadata accessor for CodableAceObject()
{
  return type metadata accessor for CodableAceObject();
}

uint64_t type metadata accessor for ComponentWrapper()
{
  return type metadata accessor for ComponentWrapper();
}

uint64_t ComponentWrapper.init(_:separators:)()
{
  return ComponentWrapper.init(_:separators:)();
}

uint64_t CodableINInteraction.init(wrappedValue:)()
{
  return CodableINInteraction.init(wrappedValue:)();
}

uint64_t type metadata accessor for CodableINInteraction()
{
  return type metadata accessor for CodableINInteraction();
}

uint64_t VisualPropertyConvertible<>.asVisualProperty()()
{
  return VisualPropertyConvertible<>.asVisualProperty()();
}

uint64_t type metadata accessor for Color()
{
  return type metadata accessor for Color();
}

uint64_t type metadata accessor for Button.LabelStyle()
{
  return type metadata accessor for Button.LabelStyle();
}

uint64_t Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)()
{
  return Button.init(action:label:thumbnail:formAction:labelStyle:buttonRole:componentName:linkIdentifier:)();
}

uint64_t type metadata accessor for Button()
{
  return type metadata accessor for Button();
}

uint64_t static Command.directInvocation(identifier:payload:isNavigation:)()
{
  return static Command.directInvocation(identifier:payload:isNavigation:)();
}

uint64_t type metadata accessor for Command()
{
  return type metadata accessor for Command();
}

uint64_t type metadata accessor for Response()
{
  return type metadata accessor for Response();
}

uint64_t Response.init(_:backgrounds:ornaments:hideRedactedElements:)()
{
  return Response.init(_:backgrounds:ornaments:hideRedactedElements:)();
}

uint64_t ActivityDescriptor.id.getter()
{
  return ActivityDescriptor.id.getter();
}

uint64_t type metadata accessor for ActivityDescriptor()
{
  return type metadata accessor for ActivityDescriptor();
}

uint64_t type metadata accessor for ActivityAttributesType()
{
  return type metadata accessor for ActivityAttributesType();
}

uint64_t dispatch thunk of ActivityCenter.descriptors(matching:)()
{
  return dispatch thunk of ActivityCenter.descriptors(matching:)();
}

uint64_t static ActivityCenter.shared.getter()
{
  return static ActivityCenter.shared.getter();
}

uint64_t type metadata accessor for ActivityCenter()
{
  return type metadata accessor for ActivityCenter();
}

uint64_t ActivityPredicate.init(attributesType:owner:)()
{
  return ActivityPredicate.init(attributesType:owner:)();
}

uint64_t type metadata accessor for ActivityPredicate()
{
  return type metadata accessor for ActivityPredicate();
}

uint64_t ProcessDescriptor.init(identifier:)()
{
  return ProcessDescriptor.init(identifier:)();
}

uint64_t type metadata accessor for ProcessDescriptor()
{
  return type metadata accessor for ProcessDescriptor();
}

uint64_t static CommonGuardFlowUtils.makeGuardFlow(withGuards:)()
{
  return static CommonGuardFlowUtils.makeGuardFlow(withGuards:)();
}

uint64_t SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)()
{
  return SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
}

uint64_t type metadata accessor for SimpleOutputFlowAsync()
{
  return type metadata accessor for SimpleOutputFlowAsync();
}

uint64_t type metadata accessor for AppResolutionFlowResult()
{
  return type metadata accessor for AppResolutionFlowResult();
}

uint64_t PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)()
{
  return PromptForValueFlowAsync.init<A>(strategy:outputPublisher:)();
}

uint64_t ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)()
{
  return ExecuteOnRemoteFlow.init(inputToExecute:device:outputPublisher:)();
}

uint64_t type metadata accessor for ExecuteOnRemoteFlow()
{
  return type metadata accessor for ExecuteOnRemoteFlow();
}

uint64_t ScreentimeCheckFlow.init(strategy:outputPublisher:)()
{
  return ScreentimeCheckFlow.init(strategy:outputPublisher:)();
}

uint64_t type metadata accessor for ScreentimeCheckFlow()
{
  return type metadata accessor for ScreentimeCheckFlow();
}

uint64_t UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)()
{
  return UserIdentityCheckFlowStrategy.init(allowsAnonymousUser:allowsUserInteraction:handoffConfiguration:requireSpeechProfile:)();
}

uint64_t UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)()
{
  return UserIdentityCheckFlowStrategy.HandoffConfiguration.init(companionCompatiblityCheck:handoffStrategy:)();
}

uint64_t type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration()
{
  return type metadata accessor for UserIdentityCheckFlowStrategy.HandoffConfiguration();
}

uint64_t type metadata accessor for UserIdentityCheckFlowStrategy()
{
  return type metadata accessor for UserIdentityCheckFlowStrategy();
}

uint64_t PaginatedConversationFlowSource.init<A>(items:delegate:)()
{
  return PaginatedConversationFlowSource.init<A>(items:delegate:)();
}

uint64_t type metadata accessor for PaginatedConversationFlowSource()
{
  return type metadata accessor for PaginatedConversationFlowSource();
}

uint64_t PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)()
{
  return PromptForConfirmationFlowAsync.init<A>(itemToConfirm:strategy:outputPublisher:)();
}

uint64_t type metadata accessor for AnyVoiceCommandsParityFlow()
{
  return type metadata accessor for AnyVoiceCommandsParityFlow();
}

uint64_t PromptForDisambiguationFlowAsync.init<A>(items:strategy:outputPublisher:)()
{
  return PromptForDisambiguationFlowAsync.init<A>(items:strategy:outputPublisher:)();
}

uint64_t HandoffSessionToCompanionFlowAsync.init<A>(strategy:deviceState:outputPublisher:)()
{
  return HandoffSessionToCompanionFlowAsync.init<A>(strategy:deviceState:outputPublisher:)();
}

uint64_t type metadata accessor for HandoffSessionToCompanionFlowAsync()
{
  return type metadata accessor for HandoffSessionToCompanionFlowAsync();
}

uint64_t static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)()
{
  return static CompanionCompatibilityCheckFlowStrategy.require(_:redirectToServerOnFailure:)();
}

uint64_t type metadata accessor for CompanionCompatibilityCheckFlowStrategy()
{
  return type metadata accessor for CompanionCompatibilityCheckFlowStrategy();
}

uint64_t dispatch thunk of ContinueReadingConfirmationFlowStrategy.makeFlow(outputPublisher:)()
{
  return dispatch thunk of ContinueReadingConfirmationFlowStrategy.makeFlow(outputPublisher:)();
}

uint64_t ContinueReadingConfirmationFlowStrategy.ContinueReadingActionGroupReturning.init(yesGroup:noGroup:cancelGroup:)()
{
  return ContinueReadingConfirmationFlowStrategy.ContinueReadingActionGroupReturning.init(yesGroup:noGroup:cancelGroup:)();
}

uint64_t type metadata accessor for ContinueReadingConfirmationFlowStrategy.ContinueReadingActionGroupReturning()
{
  return type metadata accessor for ContinueReadingConfirmationFlowStrategy.ContinueReadingActionGroupReturning();
}

uint64_t ContinueReadingConfirmationFlowStrategy.__allocating_init(outputProducer:confirmationResponseParser:)()
{
  return ContinueReadingConfirmationFlowStrategy.__allocating_init(outputProducer:confirmationResponseParser:)();
}

uint64_t type metadata accessor for ContinueReadingConfirmationFlowStrategy()
{
  return type metadata accessor for ContinueReadingConfirmationFlowStrategy();
}

uint64_t type metadata accessor for AnyFlow()
{
  return type metadata accessor for AnyFlow();
}

uint64_t AnyFlowAndActionGroupReturning.init<A, B>(flow:groupReturning:)()
{
  return AnyFlowAndActionGroupReturning.init<A, B>(flow:groupReturning:)();
}

uint64_t type metadata accessor for AnyFlowAndActionGroupReturning()
{
  return type metadata accessor for AnyFlowAndActionGroupReturning();
}

uint64_t static AppFlowFactory.makeFixedAppResolutionFlow<A>(app:)()
{
  return static AppFlowFactory.makeFixedAppResolutionFlow<A>(app:)();
}

uint64_t type metadata accessor for GuardFlow()
{
  return type metadata accessor for GuardFlow();
}

uint64_t GuardFlowResult.description.getter()
{
  return GuardFlowResult.description.getter();
}

uint64_t static GuardFlowResult.== infix(_:_:)()
{
  return static GuardFlowResult.== infix(_:_:)();
}

uint64_t ActingFlow.toAnyFlow()()
{
  return ActingFlow.toAnyFlow()();
}

uint64_t ActingFlow.onCompletion(_:)()
{
  return ActingFlow.onCompletion(_:)();
}

uint64_t static CommonFlowGuard.ensuringUserIdentity(using:)()
{
  return static CommonFlowGuard.ensuringUserIdentity(using:)();
}

uint64_t static CommonFlowGuard.disallowInSharingMode.getter()
{
  return static CommonFlowGuard.disallowInSharingMode.getter();
}

uint64_t static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)()
{
  return static CommonFlowGuard.ensuringDeviceIsAuthenticated(using:)();
}

uint64_t static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)()
{
  return static CommonFlowGuard.ensuringUserHasSupportedCompanion(using:)();
}

uint64_t static CommonFlowGuard.ensuringAppIsPermittedByScreentime(using:)()
{
  return static CommonFlowGuard.ensuringAppIsPermittedByScreentime(using:)();
}

uint64_t static CommonFlowGuard.ensuringPersonalRequestsAreEnabledWhenApplicable.getter()
{
  return static CommonFlowGuard.ensuringPersonalRequestsAreEnabledWhenApplicable.getter();
}

uint64_t type metadata accessor for CommonFlowGuard()
{
  return type metadata accessor for CommonFlowGuard();
}

uint64_t DefaultFlowActivity.init(activityName:activityType:activityStartTime:)()
{
  return DefaultFlowActivity.init(activityName:activityType:activityStartTime:)();
}

uint64_t DefaultFlowActivity.init(from:)()
{
  return DefaultFlowActivity.init(from:)();
}

uint64_t type metadata accessor for DefaultFlowActivity()
{
  return type metadata accessor for DefaultFlowActivity();
}

uint64_t DefaultFlowActivity.deinit()
{
  return DefaultFlowActivity.deinit();
}

uint64_t ReadingFlow.init(source:)()
{
  return ReadingFlow.init(source:)();
}

uint64_t type metadata accessor for ReadingFlow()
{
  return type metadata accessor for ReadingFlow();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithAutomaticPunchOutProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithHandoffToCompanionProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithHandoffToCompanionProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeNeedsConfirmationFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeRequestTCCAcceptanceFlow<A, B>(strategy:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)()
{
  return static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)()
{
  return static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
}

uint64_t RCHChildFlowProducersAsync.needsValueFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.handleIntentFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.continueInAppFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.needsConfirmationFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter()
{
  return RCHChildFlowProducersAsync.requestTCCAcceptanceFlowProducer.setter();
}

uint64_t RCHChildFlowProducersAsync.init()()
{
  return RCHChildFlowProducersAsync.init()();
}

uint64_t RCHChildFlowFactory.init(producers:)()
{
  return RCHChildFlowFactory.init(producers:)();
}

uint64_t ReactiveFlow.init(plan:)()
{
  return ReactiveFlow.init(plan:)();
}

uint64_t dispatch thunk of Flow.exitValue.getter()
{
  return dispatch thunk of Flow.exitValue.getter();
}

uint64_t Flow.eraseToAnyFlow()()
{
  return Flow.eraseToAnyFlow()();
}

uint64_t Flow.eraseToAnyValueFlow()()
{
  return Flow.eraseToAnyValueFlow()();
}

uint64_t Flow.toActingFlow()()
{
  return Flow.toActingFlow()();
}

uint64_t Flow.deferToExecuteAsync(_:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t Flow.guarded<A>(by:)()
{
  return Flow.guarded<A>(by:)();
}

uint64_t type metadata accessor for FlowTransition()
{
  return type metadata accessor for FlowTransition();
}

uint64_t static FlowSearchResult.noFlow.getter()
{
  return static FlowSearchResult.noFlow.getter();
}

uint64_t static FlowSearchResult.flow<A>(_:)()
{
  return static FlowSearchResult.flow<A>(_:)();
}

uint64_t static FlowSearchResult.flow(_:)()
{
  return static FlowSearchResult.flow(_:)();
}

uint64_t type metadata accessor for FlowSearchResult()
{
  return type metadata accessor for FlowSearchResult();
}

uint64_t dispatch thunk of FlowTaskProvider.creationTime.getter()
{
  return dispatch thunk of FlowTaskProvider.creationTime.getter();
}

uint64_t dispatch thunk of FlowTaskProvider.id.getter()
{
  return dispatch thunk of FlowTaskProvider.id.getter();
}

uint64_t type metadata accessor for FlowUnhandledReason()
{
  return type metadata accessor for FlowUnhandledReason();
}

Swift::Void __swiftcall FlowPlugin.warmup(refId:)(Swift::String refId)
{
}

Swift::Void __swiftcall FlowPlugin.warmup()()
{
}

uint64_t static FlowLocator.findFlow(forInvocation:)()
{
  return static FlowLocator.findFlow(forInvocation:)();
}

uint64_t SiriLocationAccessGuardFlow.__allocating_init(needsPreciseLocation:strategy:)()
{
  return SiriLocationAccessGuardFlow.__allocating_init(needsPreciseLocation:strategy:)();
}

uint64_t dispatch thunk of SiriLocationAccessGuardFlow.failureReason.getter()
{
  return dispatch thunk of SiriLocationAccessGuardFlow.failureReason.getter();
}

uint64_t type metadata accessor for SiriLocationAccessGuardFlow()
{
  return type metadata accessor for SiriLocationAccessGuardFlow();
}

uint64_t static SiriKitEventSender.current.getter()
{
  return static SiriKitEventSender.current.getter();
}

uint64_t dispatch thunk of SiriKitEventSending.send(_:)()
{
  return dispatch thunk of SiriKitEventSending.send(_:)();
}

uint64_t dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)()
{
  return dispatch thunk of static SiriKitAceViewBuilder.makeBuilder(deviceState:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.addSnippet(snippet:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.withUtteranceViews(utteranceViews:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.build()()
{
  return dispatch thunk of SiriKitAceViewBuilder.build()();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.addButton(button:)()
{
  return dispatch thunk of SiriKitAceViewBuilder.addButton(button:)();
}

uint64_t type metadata accessor for SiriKitAceViewBuilder()
{
  return type metadata accessor for SiriKitAceViewBuilder();
}

uint64_t type metadata accessor for SiriKitConfirmationState()
{
  return type metadata accessor for SiriKitConfirmationState();
}

uint64_t SiriKitParameterMetadata.init(parameterName:shouldResolve:confirmationStates:)()
{
  return SiriKitParameterMetadata.init(parameterName:shouldResolve:confirmationStates:)();
}

uint64_t SiriKitParameterMetadata.parameterName.getter()
{
  return SiriKitParameterMetadata.parameterName.getter();
}

uint64_t SiriKitParameterMetadata.shouldResolve.getter()
{
  return SiriKitParameterMetadata.shouldResolve.getter();
}

uint64_t type metadata accessor for SiriKitParameterMetadata()
{
  return type metadata accessor for SiriKitParameterMetadata();
}

uint64_t SiriKitEvent.__allocating_init(taskType:domainPerfContext:_:)()
{
  return SiriKitEvent.__allocating_init(taskType:domainPerfContext:_:)();
}

uint64_t type metadata accessor for SiriKitEvent()
{
  return type metadata accessor for SiriKitEvent();
}

uint64_t static SiriKitLifecycle._logCrashToEventBus(_:)()
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)();
}

uint64_t static AceService.currentAsync.getter()
{
  return static AceService.currentAsync.getter();
}

uint64_t dispatch thunk of DeviceState.isEyesFree.getter()
{
  return dispatch thunk of DeviceState.isEyesFree.getter();
}

uint64_t dispatch thunk of DeviceState.isSidekick.getter()
{
  return dispatch thunk of DeviceState.isSidekick.getter();
}

uint64_t dispatch thunk of DeviceState.isXRDevice.getter()
{
  return dispatch thunk of DeviceState.isXRDevice.getter();
}

uint64_t dispatch thunk of DeviceState.siriLocale.getter()
{
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t dispatch thunk of DeviceState.interactionType.getter()
{
  return dispatch thunk of DeviceState.interactionType.getter();
}

uint64_t dispatch thunk of DeviceState.isLockedWithPasscode.getter()
{
  return dispatch thunk of DeviceState.isLockedWithPasscode.getter();
}

uint64_t dispatch thunk of DeviceState.isTextToSpeechEnabled.getter()
{
  return dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
}

uint64_t dispatch thunk of DeviceState.sessionHandOffContinuityID.getter()
{
  return dispatch thunk of DeviceState.sessionHandOffContinuityID.getter();
}

uint64_t dispatch thunk of DeviceState.isMac.getter()
{
  return dispatch thunk of DeviceState.isMac.getter();
}

uint64_t dispatch thunk of DeviceState.isPad.getter()
{
  return dispatch thunk of DeviceState.isPad.getter();
}

uint64_t dispatch thunk of DeviceState.isPod.getter()
{
  return dispatch thunk of DeviceState.isPod.getter();
}

uint64_t dispatch thunk of DeviceState.isPhone.getter()
{
  return dispatch thunk of DeviceState.isPhone.getter();
}

uint64_t dispatch thunk of DeviceState.isWatch.getter()
{
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t dispatch thunk of DeviceState.isAppleTV.getter()
{
  return dispatch thunk of DeviceState.isAppleTV.getter();
}

uint64_t dispatch thunk of DeviceState.isCarPlay.getter()
{
  return dispatch thunk of DeviceState.isCarPlay.getter();
}

uint64_t dispatch thunk of DeviceState.isHomePod.getter()
{
  return dispatch thunk of DeviceState.isHomePod.getter();
}

uint64_t DeviceState.asInvocationContext.getter()
{
  return DeviceState.asInvocationContext.getter();
}

uint64_t DeviceState.isVox.getter()
{
  return DeviceState.isVox.getter();
}

uint64_t static DialogPhase.completion.getter()
{
  return static DialogPhase.completion.getter();
}

uint64_t static DialogPhase.confirmation.getter()
{
  return static DialogPhase.confirmation.getter();
}

uint64_t static DialogPhase.clarification.getter()
{
  return static DialogPhase.clarification.getter();
}

uint64_t static DialogPhase.error.getter()
{
  return static DialogPhase.error.getter();
}

uint64_t static DialogPhase.summary.getter()
{
  return static DialogPhase.summary.getter();
}

uint64_t static DialogPhase.canceled.getter()
{
  return static DialogPhase.canceled.getter();
}

uint64_t static DialogPhase.confirmed.getter()
{
  return static DialogPhase.confirmed.getter();
}

uint64_t type metadata accessor for DialogPhase()
{
  return type metadata accessor for DialogPhase();
}

uint64_t DisplayHint.init(idValue:displayValue:)()
{
  return DisplayHint.init(idValue:displayValue:)();
}

uint64_t type metadata accessor for DisplayHint()
{
  return type metadata accessor for DisplayHint();
}

uint64_t static EmptyOutput.instance.getter()
{
  return static EmptyOutput.instance.getter();
}

uint64_t type metadata accessor for EmptyOutput()
{
  return type metadata accessor for EmptyOutput();
}

uint64_t dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)()
{
  return dispatch thunk of ViewFactory.makeSummaryView(templateResult:snippets:listenAfterSpeaking:canUseServerTTS:)();
}

uint64_t dispatch thunk of ViewFactory.makeErrorView(aceViews:)()
{
  return dispatch thunk of ViewFactory.makeErrorView(aceViews:)();
}

uint64_t ViewFactory.init(ttsEnabled:)()
{
  return ViewFactory.init(ttsEnabled:)();
}

uint64_t dispatch thunk of ViewFactory.makeUtteranceViews(template:listenAfterSpeaking:canUseServerTTS:)()
{
  return dispatch thunk of ViewFactory.makeUtteranceViews(template:listenAfterSpeaking:canUseServerTTS:)();
}

uint64_t type metadata accessor for ViewFactory()
{
  return type metadata accessor for ViewFactory();
}

uint64_t ActivityType.rawValue.getter()
{
  return ActivityType.rawValue.getter();
}

uint64_t type metadata accessor for ActivityType()
{
  return type metadata accessor for ActivityType();
}

uint64_t static DialogHelper.globals.getter()
{
  return static DialogHelper.globals.getter();
}

uint64_t OutputAction.init(publisher:nextAction:producer:)()
{
  return OutputAction.init(publisher:nextAction:producer:)();
}

uint64_t type metadata accessor for OutputAction()
{
  return type metadata accessor for OutputAction();
}

uint64_t static CasinoFactory.makeRowCardSection(possibleTitle:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:shouldUseDefaultImageSize:)()
{
  return static CasinoFactory.makeRowCardSection(possibleTitle:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:shouldUseDefaultImageSize:)();
}

uint64_t static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)()
{
  return static CasinoFactory.makeRowCardSection(possibleTitle:imageSize:possibleLeadingSubtitle:possibleTrailingSubtitle:possibleImage:possibleMonogramLetters:possibleContactIdentifiers:possibleImageUri:maxLines:shouldCropToCircle:)();
}

uint64_t static CasinoFactory.makePlaceholderCardSection()()
{
  return static CasinoFactory.makePlaceholderCardSection()();
}

uint64_t static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)()
{
  return static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
}

uint64_t static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)()
{
  return static CasinoFactory.makeSendCommandsFromMachineUtterances(machineUtterances:)();
}

uint64_t PaginatedItem.item.getter()
{
  return PaginatedItem.item.getter();
}

uint64_t type metadata accessor for RCHFlowResult()
{
  return type metadata accessor for RCHFlowResult();
}

uint64_t SemanticValue.init(string:label:)()
{
  return SemanticValue.init(string:label:)();
}

uint64_t type metadata accessor for SemanticValue()
{
  return type metadata accessor for SemanticValue();
}

uint64_t static ActionForInput.cancel()()
{
  return static ActionForInput.cancel()();
}

uint64_t static ActionForInput.handle()()
{
  return static ActionForInput.handle()();
}

uint64_t static ActionForInput.ignore()()
{
  return static ActionForInput.ignore()();
}

uint64_t CommandFailure.underlyingError.getter()
{
  return CommandFailure.underlyingError.getter();
}

uint64_t CommandFailure.init(errorCode:reason:)()
{
  return CommandFailure.init(errorCode:reason:)();
}

uint64_t CommandFailure.errorCode.getter()
{
  return CommandFailure.errorCode.getter();
}

uint64_t type metadata accessor for CommandFailure()
{
  return type metadata accessor for CommandFailure();
}

uint64_t type metadata accessor for PrescribedTool()
{
  return type metadata accessor for PrescribedTool();
}

uint64_t RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)()
{
  return RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)();
}

uint64_t RCHFlowFactory.init(strategy:childFlowFactory:)()
{
  return RCHFlowFactory.init(strategy:childFlowFactory:)();
}

uint64_t TemplatingText.init(text:speakableTextOverride:)()
{
  return TemplatingText.init(text:speakableTextOverride:)();
}

uint64_t TemplatingText.text.getter()
{
  return TemplatingText.text.getter();
}

uint64_t type metadata accessor for TemplatingText()
{
  return type metadata accessor for TemplatingText();
}

uint64_t static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeSummaryViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeConfirmedViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)()
{
  return static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:requestEndBehavior:)();
}

uint64_t static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)()
{
  return static AceOutputHelper.makeCancellationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:canUseServerTTS:flowActivity:)();
}

uint64_t static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeAceOutput(allAddViews:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeAceOutput(addViews:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeAceOutput(addViews:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t static ExecuteResponse.replan<A>(next:childCompletion:)()
{
  return static ExecuteResponse.replan<A>(next:childCompletion:)();
}

uint64_t static ExecuteResponse.ongoing(requireInput:)()
{
  return static ExecuteResponse.ongoing(requireInput:)();
}

uint64_t static ExecuteResponse.ongoing<A>(next:childCompletion:)()
{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)();
}

{
  return static ExecuteResponse.ongoing<A>(next:childCompletion:)();
}

uint64_t static ExecuteResponse.ongoing(next:childCompletion:)()
{
  return static ExecuteResponse.ongoing(next:childCompletion:)();
}

uint64_t static ExecuteResponse.ongoing(next:)()
{
  return static ExecuteResponse.ongoing(next:)();
}

uint64_t static ExecuteResponse.complete<A>(next:childCompletion:)()
{
  return static ExecuteResponse.complete<A>(next:childCompletion:)();
}

uint64_t static ExecuteResponse.complete<A>(next:)()
{
  return static ExecuteResponse.complete<A>(next:)();
}

uint64_t static ExecuteResponse.complete(next:)()
{
  return static ExecuteResponse.complete(next:)();
}

uint64_t static ExecuteResponse.complete()()
{
  return static ExecuteResponse.complete()();
}

uint64_t static ExecuteResponse.unhandled(reason:isComplete:)()
{
  return static ExecuteResponse.unhandled(reason:isComplete:)();
}

uint64_t HandoffResponse.init(output:companionNotificationText:runSiriKitExecutorCommand:)()
{
  return HandoffResponse.init(output:companionNotificationText:runSiriKitExecutorCommand:)();
}

uint64_t NLContextUpdate.displayHints.setter()
{
  return NLContextUpdate.displayHints.setter();
}

uint64_t NLContextUpdate.systemDialogActs.setter()
{
  return NLContextUpdate.systemDialogActs.setter();
}

uint64_t NLContextUpdate.currentDomainName.setter()
{
  return NLContextUpdate.currentDomainName.setter();
}

uint64_t NLContextUpdate.nluSystemDialogActs.getter()
{
  return NLContextUpdate.nluSystemDialogActs.getter();
}

uint64_t NLContextUpdate.nluSystemDialogActs.setter()
{
  return NLContextUpdate.nluSystemDialogActs.setter();
}

uint64_t NLContextUpdate.weightedPromptStrict.setter()
{
  return NLContextUpdate.weightedPromptStrict.setter();
}

uint64_t NLContextUpdate.weightedPromptAbortValues.setter()
{
  return NLContextUpdate.weightedPromptAbortValues.setter();
}

uint64_t NLContextUpdate.dictationPromptAbortValues.setter()
{
  return NLContextUpdate.dictationPromptAbortValues.setter();
}

uint64_t NLContextUpdate.dictationPromptTargetNodes.setter()
{
  return NLContextUpdate.dictationPromptTargetNodes.setter();
}

uint64_t NLContextUpdate.weightedPromptTargetDomain.setter()
{
  return NLContextUpdate.weightedPromptTargetDomain.setter();
}

uint64_t NLContextUpdate.dictationPromptTargetDomain.setter()
{
  return NLContextUpdate.dictationPromptTargetDomain.setter();
}

uint64_t NLContextUpdate.conversationStateAttachments.setter()
{
  return NLContextUpdate.conversationStateAttachments.setter();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.setter()
{
  return NLContextUpdate.weightedPromptResponseOptions.setter();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.modify()
{
  return NLContextUpdate.weightedPromptResponseTargets.modify();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.setter()
{
  return NLContextUpdate.weightedPromptResponseTargets.setter();
}

uint64_t NLContextUpdate.nlInput.setter()
{
  return NLContextUpdate.nlInput.setter();
}

uint64_t NLContextUpdate.init()()
{
  return NLContextUpdate.init()();
}

uint64_t type metadata accessor for NLContextUpdate()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t static PaginationStyle.noPagination()()
{
  return static PaginationStyle.noPagination()();
}

uint64_t static PaginationStyle.pageSize(_:)()
{
  return static PaginationStyle.pageSize(_:)();
}

uint64_t ResponseFactory.init()()
{
  return ResponseFactory.init()();
}

uint64_t type metadata accessor for ResponseFactory()
{
  return type metadata accessor for ResponseFactory();
}

uint64_t static SAAppInfoFactory.createAppInfo(app:)()
{
  return static SAAppInfoFactory.createAppInfo(app:)();
}

uint64_t TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)()
{
  return TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
}

Swift::Bool __swiftcall TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(Swift::Bool defaultBehavior)
{
  return TemplatingResult.shouldListenAfterSpeaking(defaultBehavior:)(defaultBehavior);
}

uint64_t TemplatingResult.print.getter()
{
  return TemplatingResult.print.getter();
}

uint64_t TemplatingResult.sections.getter()
{
  return TemplatingResult.sections.getter();
}

uint64_t type metadata accessor for TemplatingResult()
{
  return type metadata accessor for TemplatingResult();
}

uint64_t static PaginationRequest.previousPage()()
{
  return static PaginationRequest.previousPage()();
}

uint64_t static PaginationRequest.nextPage()()
{
  return static PaginationRequest.nextPage()();
}

uint64_t type metadata accessor for PaginationRequest()
{
  return type metadata accessor for PaginationRequest();
}

uint64_t dispatch thunk of PeerInfoProviding.getIdsIdentifier()()
{
  return dispatch thunk of PeerInfoProviding.getIdsIdentifier()();
}

uint64_t dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()()
{
  return dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()();
}

uint64_t dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()()
{
  return dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()();
}

uint64_t dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()()
{
  return dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()();
}

uint64_t dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()()
{
  return dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()();
}

uint64_t StaticActionGroup.init(actions:transition:debugDescription:)()
{
  return StaticActionGroup.init(actions:transition:debugDescription:)();
}

uint64_t type metadata accessor for StaticActionGroup()
{
  return type metadata accessor for StaticActionGroup();
}

uint64_t TemplatingSection.init(id:content:caption:spokenOnly:)()
{
  return TemplatingSection.init(id:content:caption:spokenOnly:)();
}

uint64_t TemplatingSection.content.getter()
{
  return TemplatingSection.content.getter();
}

uint64_t type metadata accessor for TemplatingSection()
{
  return type metadata accessor for TemplatingSection();
}

uint64_t IntentPromptAnswer.init(answeredValue:updatedIntent:)()
{
  return IntentPromptAnswer.init(answeredValue:updatedIntent:)();
}

uint64_t type metadata accessor for SubmitCommandError()
{
  return type metadata accessor for SubmitCommandError();
}

uint64_t ConfirmIntentAnswer.init(confirmationResponse:intent:)()
{
  return ConfirmIntentAnswer.init(confirmationResponse:intent:)();
}

uint64_t ParameterIdentifier.name.getter()
{
  return ParameterIdentifier.name.getter();
}

uint64_t type metadata accessor for ParameterIdentifier()
{
  return type metadata accessor for ParameterIdentifier();
}

uint64_t type metadata accessor for ConfirmationResponse()
{
  return type metadata accessor for ConfirmationResponse();
}

uint64_t static DisambiguationResult.chosenItem(_:)()
{
  return static DisambiguationResult.chosenItem(_:)();
}

uint64_t static DisambiguationResult.paginate(_:)()
{
  return static DisambiguationResult.paginate(_:)();
}

uint64_t type metadata accessor for ActionGroupTransition()
{
  return type metadata accessor for ActionGroupTransition();
}

uint64_t type metadata accessor for BehaviorAfterSpeaking()
{
  return type metadata accessor for BehaviorAfterSpeaking();
}

uint64_t dispatch thunk of AceServiceInvokerAsync.peerInfo()()
{
  return dispatch thunk of AceServiceInvokerAsync.peerInfo()();
}

uint64_t AceServiceInvokerAsync.submitAndForget(_:)()
{
  return AceServiceInvokerAsync.submitAndForget(_:)();
}

uint64_t dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)()
{
  return dispatch thunk of AppInformationResolver.getLocalizedAppDisplayName(inLocale:)();
}

uint64_t AppInformationResolver.init(app:)()
{
  return AppInformationResolver.init(app:)();
}

uint64_t type metadata accessor for AppInformationResolver()
{
  return type metadata accessor for AppInformationResolver();
}

uint64_t IntentResolutionRecord.intentResponse.getter()
{
  return IntentResolutionRecord.intentResponse.getter();
}

uint64_t IntentResolutionRecord.app.getter()
{
  return IntentResolutionRecord.app.getter();
}

uint64_t IntentResolutionRecord.intent.getter()
{
  return IntentResolutionRecord.intent.getter();
}

uint64_t static OutputPublisherFactory.makeOutputPublisher()()
{
  return static OutputPublisherFactory.makeOutputPublisher()();
}

uint64_t static OutputPublisherFactory.makeOutputPublisherAsync()()
{
  return static OutputPublisherFactory.makeOutputPublisherAsync()();
}

Swift::Int __swiftcall PaginatedItemContainer.getCurrentPageIndex()()
{
  return PaginatedItemContainer.getCurrentPageIndex()();
}

uint64_t PaginatedItemContainer.page.getter()
{
  return PaginatedItemContainer.page.getter();
}

uint64_t PaginatedItemContainer.items.getter()
{
  return PaginatedItemContainer.items.getter();
}

uint64_t PaginatedItemContainer.pageSize.getter()
{
  return PaginatedItemContainer.pageSize.getter();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)()
{
  return dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.build()()
{
  return dispatch thunk of MachineUtteranceBuilder.build()();
}

uint64_t MachineUtteranceBuilder.init()()
{
  return MachineUtteranceBuilder.init()();
}

uint64_t type metadata accessor for MachineUtteranceBuilder()
{
  return type metadata accessor for MachineUtteranceBuilder();
}

uint64_t NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)()
{
  return NeedsConfirmationAnswer.init(answeredValue:updatedIntent:)();
}

uint64_t OutputGenerationManifest.init(dialogPhase:_:)()
{
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t OutputGenerationManifest.responseViewId.setter()
{
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t OutputGenerationManifest.canUseServerTTS.setter()
{
  return OutputGenerationManifest.canUseServerTTS.setter();
}

uint64_t OutputGenerationManifest.nlContextUpdate.setter()
{
  return OutputGenerationManifest.nlContextUpdate.setter();
}

uint64_t OutputGenerationManifest.listenAfterSpeaking.setter()
{
  return OutputGenerationManifest.listenAfterSpeaking.setter();
}

uint64_t OutputGenerationManifest.applicationSessionID.setter()
{
  return OutputGenerationManifest.applicationSessionID.setter();
}

uint64_t type metadata accessor for OutputGenerationManifest()
{
  return type metadata accessor for OutputGenerationManifest();
}

uint64_t ParameterResolutionRecord.app.getter()
{
  return ParameterResolutionRecord.app.getter();
}

uint64_t ParameterResolutionRecord.intent.getter()
{
  return ParameterResolutionRecord.intent.getter();
}

uint64_t ParameterResolutionRecord.result.getter()
{
  return ParameterResolutionRecord.result.getter();
}

uint64_t ParameterResolutionRecord.parameter.getter()
{
  return ParameterResolutionRecord.parameter.getter();
}

uint64_t type metadata accessor for ConfirmIntentResponseError()
{
  return type metadata accessor for ConfirmIntentResponseError();
}

uint64_t type metadata accessor for LocationAccessFailureReason()
{
  return type metadata accessor for LocationAccessFailureReason();
}

uint64_t type metadata accessor for CompanionDeviceInfoRequirement()
{
  return type metadata accessor for CompanionDeviceInfoRequirement();
}

uint64_t type metadata accessor for ExecuteOnRemoteDeviceSpecification()
{
  return type metadata accessor for ExecuteOnRemoteDeviceSpecification();
}

uint64_t SimpleConfirmationResponseProvider.confirmationResponse.getter()
{
  return SimpleConfirmationResponseProvider.confirmationResponse.getter();
}

uint64_t type metadata accessor for SimpleConfirmationResponseProvider()
{
  return type metadata accessor for SimpleConfirmationResponseProvider();
}

uint64_t SimpleConfirmationResponseProvider.init(_:)()
{
  return SimpleConfirmationResponseProvider.init(_:)();
}

uint64_t Page.remainingPages.getter()
{
  return Page.remainingPages.getter();
}

uint64_t Page.itemCount.getter()
{
  return Page.itemCount.getter();
}

uint64_t type metadata accessor for Page()
{
  return type metadata accessor for Page();
}

uint64_t Input.description.getter()
{
  return Input.description.getter();
}

uint64_t Input.parse.getter()
{
  return Input.parse.getter();
}

uint64_t type metadata accessor for Input()
{
  return type metadata accessor for Input();
}

uint64_t Parse.DirectInvocation.init(identifier:userData:)()
{
  return Parse.DirectInvocation.init(identifier:userData:)();
}

uint64_t Parse.DirectInvocation.identifier.getter()
{
  return Parse.DirectInvocation.identifier.getter();
}

uint64_t Parse.DirectInvocation.userData.getter()
{
  return Parse.DirectInvocation.userData.getter();
}

uint64_t type metadata accessor for Parse.DirectInvocation()
{
  return type metadata accessor for Parse.DirectInvocation();
}

uint64_t Parse.ServerConversion.siriKitIntent.getter()
{
  return Parse.ServerConversion.siriKitIntent.getter();
}

uint64_t Parse.ServerConversion.confirmationState.getter()
{
  return Parse.ServerConversion.confirmationState.getter();
}

uint64_t Parse.ServerConversion.parameterMetadata.getter()
{
  return Parse.ServerConversion.parameterMetadata.getter();
}

uint64_t type metadata accessor for Parse()
{
  return type metadata accessor for Parse();
}

uint64_t static Device.current.getter()
{
  return static Device.current.getter();
}

uint64_t USOParse.groupIndex.getter()
{
  return USOParse.groupIndex.getter();
}

uint64_t USOParse.debugDescription.getter()
{
  return USOParse.debugDescription.getter();
}

uint64_t USOParse.parserIdentifier.getter()
{
  return USOParse.parserIdentifier.getter();
}

uint64_t USOParse.userParse.getter()
{
  return USOParse.userParse.getter();
}

uint64_t type metadata accessor for USOParse()
{
  return type metadata accessor for USOParse();
}

uint64_t AceOutput.init(commands:flowActivity:nlContextUpdate:)()
{
  return AceOutput.init(commands:flowActivity:nlContextUpdate:)();
}

uint64_t AceOutput.init(commands:flowActivity:)()
{
  return AceOutput.init(commands:flowActivity:)();
}

uint64_t AceOutput.commands.getter()
{
  return AceOutput.commands.getter();
}

uint64_t type metadata accessor for AceOutput()
{
  return type metadata accessor for AceOutput();
}

uint64_t type metadata accessor for ImageSize()
{
  return type metadata accessor for ImageSize();
}

uint64_t LinkParse.usoParse.getter()
{
  return LinkParse.usoParse.getter();
}

uint64_t type metadata accessor for LinkParse()
{
  return type metadata accessor for LinkParse();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier()
{
  return type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
}

uint64_t Siri_Nlu_External_UsoGraph.identifiers.getter()
{
  return Siri_Nlu_External_UsoGraph.identifiers.getter();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return type metadata accessor for Siri_Nlu_External_UsoGraph();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return Siri_Nlu_External_UserParse.userDialogActs.getter();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return type metadata accessor for Siri_Nlu_External_UserParse();
}

uint64_t Siri_Nlu_External_SystemOffered.offeredAct.setter()
{
  return Siri_Nlu_External_SystemOffered.offeredAct.setter();
}

uint64_t Siri_Nlu_External_SystemOffered.init()()
{
  return Siri_Nlu_External_SystemOffered.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemOffered()
{
  return type metadata accessor for Siri_Nlu_External_SystemOffered();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasAccepted.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasRejected.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasRejected.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.setter()
{
  return Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
}

uint64_t Siri_Nlu_External_UserDialogAct.wantedToProceed.setter()
{
  return Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return Siri_Nlu_External_UserDialogAct.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct();
}

uint64_t Siri_Nlu_External_SystemPrompted.target.setter()
{
  return Siri_Nlu_External_SystemPrompted.target.setter();
}

uint64_t Siri_Nlu_External_SystemPrompted.init()()
{
  return Siri_Nlu_External_SystemPrompted.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemPrompted()
{
  return type metadata accessor for Siri_Nlu_External_SystemPrompted();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return Siri_Nlu_External_UserStatedTask.task.getter();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.setter()
{
  return Siri_Nlu_External_UserStatedTask.task.setter();
}

uint64_t Siri_Nlu_External_UserStatedTask.init()()
{
  return Siri_Nlu_External_UserStatedTask.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return type metadata accessor for Siri_Nlu_External_UserStatedTask();
}

uint64_t Siri_Nlu_External_SystemDialogAct.gaveOptions.setter()
{
  return Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
}

uint64_t Siri_Nlu_External_SystemDialogAct.offered.setter()
{
  return Siri_Nlu_External_SystemDialogAct.offered.setter();
}

uint64_t Siri_Nlu_External_SystemDialogAct.prompted.setter()
{
  return Siri_Nlu_External_SystemDialogAct.prompted.setter();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init()()
{
  return Siri_Nlu_External_SystemDialogAct.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemDialogAct()
{
  return type metadata accessor for Siri_Nlu_External_SystemDialogAct();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.choices.setter()
{
  return Siri_Nlu_External_SystemGaveOptions.choices.setter();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.init()()
{
  return Siri_Nlu_External_SystemGaveOptions.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemGaveOptions()
{
  return type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.reference.setter()
{
  return Siri_Nlu_External_UserWantedToProceed.reference.setter();
}

uint64_t Siri_Nlu_External_UserWantedToProceed.init()()
{
  return Siri_Nlu_External_UserWantedToProceed.init()();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserWantedToProceed()
{
  return type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.value.getter()
{
  return Siri_Nlu_External_UsoEntityIdentifier.value.getter();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.namespace.getter()
{
  return Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier()
{
  return type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
}

uint64_t static SiriNLUTypesPrintUtils.printableProtoObject(object:)()
{
  return static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
}

uint64_t type metadata accessor for SiriNLUTypesPrintUtils()
{
  return type metadata accessor for SiriNLUTypesPrintUtils();
}

uint64_t static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)()
{
  return static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
}

uint64_t static ConversionUtils.toLegacyPreferredUserDialogAct(from:)()
{
  return static ConversionUtils.toLegacyPreferredUserDialogAct(from:)();
}

uint64_t static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)()
{
  return static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
}

uint64_t NonTerminalOntologyNode.init(name:multicardinal:childNodes:)()
{
  return NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
}

uint64_t type metadata accessor for NonTerminalOntologyNode()
{
  return type metadata accessor for NonTerminalOntologyNode();
}

uint64_t NonTerminalOntologyNode.deinit()
{
  return NonTerminalOntologyNode.deinit();
}

uint64_t dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

uint64_t dispatch thunk of UsoEntity_common_AppEntity.name.getter()
{
  return dispatch thunk of UsoEntity_common_AppEntity.name.getter();
}

uint64_t dispatch thunk of UsoEntity_common_AppEntity.type.getter()
{
  return dispatch thunk of UsoEntity_common_AppEntity.type.getter();
}

uint64_t dispatch thunk of UsoEntity_common_AppEntityType.name.getter()
{
  return dispatch thunk of UsoEntity_common_AppEntityType.name.getter();
}

uint64_t UsoEntityBuilder_common_AppEntity.init()()
{
  return UsoEntityBuilder_common_AppEntity.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_AppEntity()
{
  return type metadata accessor for UsoEntityBuilder_common_AppEntity();
}

uint64_t DomainOntologyNode.init(name:childNodes:isInEventTree:)()
{
  return DomainOntologyNode.init(name:childNodes:isInEventTree:)();
}

uint64_t type metadata accessor for DomainOntologyNode()
{
  return type metadata accessor for DomainOntologyNode();
}

uint64_t PersonOntologyNode.init(name:multicardinal:)()
{
  return PersonOntologyNode.init(name:multicardinal:)();
}

uint64_t type metadata accessor for PersonOntologyNode()
{
  return type metadata accessor for PersonOntologyNode();
}

uint64_t TerminalOntologyNode.init(name:multicardinal:)()
{
  return TerminalOntologyNode.init(name:multicardinal:)();
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph()
{
  return type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph();
}

uint64_t dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)()
{
  return dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
}

uint64_t CodeGenBase.entity.getter()
{
  return CodeGenBase.entity.getter();
}

uint64_t UsoIdentifier.groupIndex.getter()
{
  return UsoIdentifier.groupIndex.getter();
}

uint64_t UsoIdentifier.appBundleId.getter()
{
  return UsoIdentifier.appBundleId.getter();
}

uint64_t UsoIdentifier.init(value:appBundleId:namespace:)()
{
  return UsoIdentifier.init(value:appBundleId:namespace:)();
}

uint64_t UsoIdentifier.value.getter()
{
  return UsoIdentifier.value.getter();
}

uint64_t UsoIdentifier.namespace.getter()
{
  return UsoIdentifier.namespace.getter();
}

uint64_t type metadata accessor for UsoIdentifier()
{
  return type metadata accessor for UsoIdentifier();
}

uint64_t static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)()
{
  return static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
}

uint64_t NLIntentWrapper.description.getter()
{
  return NLIntentWrapper.description.getter();
}

uint64_t TerminalElement.DateTimeValue.toDateTime()()
{
  return TerminalElement.DateTimeValue.toDateTime()();
}

uint64_t type metadata accessor for TerminalElement.DateTimeValue()
{
  return type metadata accessor for TerminalElement.DateTimeValue();
}

uint64_t static UsoGraphBuilder.buildGraph(taskBuilders:)()
{
  return static UsoGraphBuilder.buildGraph(taskBuilders:)();
}

uint64_t static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)()
{
  return static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)();
}

uint64_t dispatch thunk of CodeGenListEntry.entry.getter()
{
  return dispatch thunk of CodeGenListEntry.entry.getter();
}

uint64_t PersonIntentNode.init(intentNode:ontologyNode:)()
{
  return PersonIntentNode.init(intentNode:ontologyNode:)();
}

uint64_t type metadata accessor for PersonIntentNode()
{
  return type metadata accessor for PersonIntentNode();
}

uint64_t dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)()
{
  return dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter()
{
  return dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter()
{
  return dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)()
{
  return dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
}

uint64_t UsoBuilderOptions.init(longhandDefinedValues:)()
{
  return UsoBuilderOptions.init(longhandDefinedValues:)();
}

uint64_t type metadata accessor for UsoBuilderOptions()
{
  return type metadata accessor for UsoBuilderOptions();
}

uint64_t UsoOpenTaskBuilder.init(baseEntityString:verbString:)()
{
  return UsoOpenTaskBuilder.init(baseEntityString:verbString:)();
}

uint64_t dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)()
{
  return dispatch thunk of UsoOpenTaskBuilder.setArgumentBuilders(argumentName:builders:)();
}

uint64_t type metadata accessor for UsoOpenTaskBuilder()
{
  return type metadata accessor for UsoOpenTaskBuilder();
}

uint64_t dispatch thunk of UsoEntity_common_Uri.value.getter()
{
  return dispatch thunk of UsoEntity_common_Uri.value.getter();
}

uint64_t type metadata accessor for UsoEntity_common_Uri()
{
  return type metadata accessor for UsoEntity_common_Uri();
}

uint64_t IntentNodeTraversable.intentNode(forOntologyNode:)()
{
  return IntentNodeTraversable.intentNode(forOntologyNode:)();
}

uint64_t IntentNodeTraversable.value<A>(forNode:)()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t type metadata accessor for NonTerminalIntentNode()
{
  return type metadata accessor for NonTerminalIntentNode();
}

uint64_t dispatch thunk of UsoEntity_common_Number.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_Number.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_Number.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_Number.DefinedValues();
}

uint64_t UsoEntity_common_Person.toContactQuery()()
{
  return UsoEntity_common_Person.toContactQuery()();
}

uint64_t type metadata accessor for UsoEntity_common_Person()
{
  return type metadata accessor for UsoEntity_common_Person();
}

uint64_t dispatch thunk of UsoEntity_common_Decimal.canonicalString.getter()
{
  return dispatch thunk of UsoEntity_common_Decimal.canonicalString.getter();
}

uint64_t type metadata accessor for UsoEntity_common_Decimal()
{
  return type metadata accessor for UsoEntity_common_Decimal();
}

uint64_t dispatch thunk of UsoEntity_common_Integer.integerValue.getter()
{
  return dispatch thunk of UsoEntity_common_Integer.integerValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_Integer()
{
  return type metadata accessor for UsoEntity_common_Integer();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return static UsoTask_CodegenConverter.convert(task:)();
}

uint64_t static UsoBuilderConversionUtils.convertEntityToGraph(entity:)()
{
  return static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
}

uint64_t UsoEntity_common_DateTime.toDateTime(recurrencePattern:)()
{
  return UsoEntity_common_DateTime.toDateTime(recurrencePattern:)();
}

uint64_t dispatch thunk of UsoEntity_common_TimeUnit.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_TimeUnit.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_TimeUnit.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_TimeUnit.DefinedValues();
}

uint64_t UsoPrimitiveStringBuilder.init(value:)()
{
  return UsoPrimitiveStringBuilder.init(value:)();
}

uint64_t type metadata accessor for UsoPrimitiveStringBuilder()
{
  return type metadata accessor for UsoPrimitiveStringBuilder();
}

uint64_t static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)()
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
}

uint64_t UsoEntityBuilder_common_Uri.init()()
{
  return UsoEntityBuilder_common_Uri.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Uri()
{
  return type metadata accessor for UsoEntityBuilder_common_Uri();
}

uint64_t type metadata accessor for UsoTask_noVerb_uso_NoEntity()
{
  return type metadata accessor for UsoTask_noVerb_uso_NoEntity();
}

uint64_t type metadata accessor for UsoTask_repeat_uso_NoEntity()
{
  return type metadata accessor for UsoTask_repeat_uso_NoEntity();
}

uint64_t dispatch thunk of UsoEntity_common_Measurement.components.getter()
{
  return dispatch thunk of UsoEntity_common_Measurement.components.getter();
}

uint64_t dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_ListPosition.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommand.name.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommand.name.getter();
}

uint64_t type metadata accessor for UsoTask_enable_common_Setting()
{
  return type metadata accessor for UsoTask_enable_common_Setting();
}

uint64_t type metadata accessor for UsoTask_toggle_common_Setting()
{
  return type metadata accessor for UsoTask_toggle_common_Setting();
}

uint64_t UsoEntityBuilder_common_Person.init()()
{
  return UsoEntityBuilder_common_Person.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Person()
{
  return type metadata accessor for UsoEntityBuilder_common_Person();
}

uint64_t dispatch thunk of UsoEntity_common_MixedFraction.wholeValue.getter()
{
  return dispatch thunk of UsoEntity_common_MixedFraction.wholeValue.getter();
}

uint64_t dispatch thunk of UsoEntity_common_MixedFraction.numeratorValue.getter()
{
  return dispatch thunk of UsoEntity_common_MixedFraction.numeratorValue.getter();
}

uint64_t dispatch thunk of UsoEntity_common_MixedFraction.denominatorValue.getter()
{
  return dispatch thunk of UsoEntity_common_MixedFraction.denominatorValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_MixedFraction()
{
  return type metadata accessor for UsoEntity_common_MixedFraction();
}

uint64_t type metadata accessor for UsoTask_disable_common_Setting()
{
  return type metadata accessor for UsoTask_disable_common_Setting();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_Integer.setIntegerValue(value:)();
}

uint64_t UsoEntityBuilder_common_Integer.init()()
{
  return UsoEntityBuilder_common_Integer.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Integer()
{
  return type metadata accessor for UsoEntityBuilder_common_Integer();
}

uint64_t dispatch thunk of UsoEntity_common_CurrencyAmount.amount.getter()
{
  return dispatch thunk of UsoEntity_common_CurrencyAmount.amount.getter();
}

uint64_t dispatch thunk of UsoEntity_common_CurrencyAmount.currency.getter()
{
  return dispatch thunk of UsoEntity_common_CurrencyAmount.currency.getter();
}

uint64_t dispatch thunk of UsoEntity_common_GeographicArea.name.getter()
{
  return dispatch thunk of UsoEntity_common_GeographicArea.name.getter();
}

uint64_t type metadata accessor for UsoTask_run_common_VoiceCommand()
{
  return type metadata accessor for UsoTask_run_common_VoiceCommand();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Currency.name.getter()
{
  return dispatch thunk of UsoEntityBuilder_common_Currency.name.getter();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Currency.setName(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_Currency.setName(value:)();
}

uint64_t UsoEntityBuilder_common_Currency.init()()
{
  return UsoEntityBuilder_common_Currency.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Currency()
{
  return type metadata accessor for UsoEntityBuilder_common_Currency();
}

uint64_t dispatch thunk of UsoEntity_common_MeasurementUnit.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_MeasurementUnit.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_MeasurementUnit.DefinedValues();
}

uint64_t dispatch thunk of UsoEntity_common_TemperatureUnit.definedValue.getter()
{
  return dispatch thunk of UsoEntity_common_TemperatureUnit.definedValue.getter();
}

uint64_t type metadata accessor for UsoEntity_common_TemperatureUnit.DefinedValues()
{
  return type metadata accessor for UsoEntity_common_TemperatureUnit.DefinedValues();
}

uint64_t type metadata accessor for UsoTask_skipForward_uso_NoEntity()
{
  return type metadata accessor for UsoTask_skipForward_uso_NoEntity();
}

uint64_t dispatch thunk of UsoEntity_common_MultipliedNumber.multiplier.getter()
{
  return dispatch thunk of UsoEntity_common_MultipliedNumber.multiplier.getter();
}

uint64_t dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter()
{
  return dispatch thunk of UsoEntity_common_MultipliedNumber.value.getter();
}

uint64_t type metadata accessor for UsoEntity_common_MultipliedNumber()
{
  return type metadata accessor for UsoEntity_common_MultipliedNumber();
}

uint64_t type metadata accessor for UsoTask_skipBackward_uso_NoEntity()
{
  return type metadata accessor for UsoTask_skipBackward_uso_NoEntity();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
}

uint64_t dispatch thunk of UsoEntity_common_DurationComponent.unit.getter()
{
  return dispatch thunk of UsoEntity_common_DurationComponent.unit.getter();
}

uint64_t dispatch thunk of UsoEntity_common_DurationComponent.value.getter()
{
  return dispatch thunk of UsoEntity_common_DurationComponent.value.getter();
}

uint64_t type metadata accessor for UsoEntity_common_DurationComponent()
{
  return type metadata accessor for UsoEntity_common_DurationComponent();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Measurement.addComponents(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_Measurement.addComponents(value:)();
}

uint64_t UsoEntityBuilder_common_Measurement.init()()
{
  return UsoEntityBuilder_common_Measurement.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Measurement()
{
  return type metadata accessor for UsoEntityBuilder_common_Measurement();
}

uint64_t type metadata accessor for UsoTask_execute_common_VoiceCommand()
{
  return type metadata accessor for UsoTask_execute_common_VoiceCommand();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommand.setName(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_VoiceCommand.setName(value:)();
}

uint64_t UsoEntityBuilder_common_VoiceCommand.init()()
{
  return UsoEntityBuilder_common_VoiceCommand.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_VoiceCommand()
{
  return type metadata accessor for UsoEntityBuilder_common_VoiceCommand();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommandPayload.appEntity.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommandPayload.appEntity.getter();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommandPayload.measurement.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommandPayload.measurement.getter();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommandPayload.stringValue.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommandPayload.stringValue.getter();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommandPayload.contactAddress.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommandPayload.contactAddress.getter();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommandPayload.geographicArea.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommandPayload.geographicArea.getter();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommandPayload.agent.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommandPayload.agent.getter();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommandPayload.number.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommandPayload.number.getter();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommandPayload.currency.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommandPayload.currency.getter();
}

uint64_t dispatch thunk of UsoEntity_common_VoiceCommandPayload.dateTime.getter()
{
  return dispatch thunk of UsoEntity_common_VoiceCommandPayload.dateTime.getter();
}

uint64_t dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter()
{
  return dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter();
}

uint64_t dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter()
{
  return dispatch thunk of UsoEntity_common_MeasurementComponent.value.getter();
}

uint64_t dispatch thunk of UsoEntity_common_TemperatureComponent.unit.getter()
{
  return dispatch thunk of UsoEntity_common_TemperatureComponent.unit.getter();
}

uint64_t dispatch thunk of UsoEntity_common_TemperatureComponent.value.getter()
{
  return dispatch thunk of UsoEntity_common_TemperatureComponent.value.getter();
}

uint64_t type metadata accessor for UsoEntity_common_TemperatureComponent()
{
  return type metadata accessor for UsoEntity_common_TemperatureComponent();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setCurrency(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setCurrency(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setAmount(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_CurrencyAmount.setAmount(value:)();
}

uint64_t UsoEntityBuilder_common_CurrencyAmount.init()()
{
  return UsoEntityBuilder_common_CurrencyAmount.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_CurrencyAmount()
{
  return type metadata accessor for UsoEntityBuilder_common_CurrencyAmount();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementUnit.name.getter()
{
  return dispatch thunk of UsoEntityBuilder_common_MeasurementUnit.name.getter();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementUnit.setName(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_MeasurementUnit.setName(value:)();
}

uint64_t UsoEntityBuilder_common_MeasurementUnit.init()()
{
  return UsoEntityBuilder_common_MeasurementUnit.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MeasurementUnit()
{
  return type metadata accessor for UsoEntityBuilder_common_MeasurementUnit();
}

uint64_t UsoTaskBuilder_execute_common_VoiceCommand.init()()
{
  return UsoTaskBuilder_execute_common_VoiceCommand.init()();
}

uint64_t type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand()
{
  return type metadata accessor for UsoTaskBuilder_execute_common_VoiceCommand();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAppEntity(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAppEntity(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setCurrency(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setCurrency(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setMeasurement(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setMeasurement(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setStringValue(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setContactAddress(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setContactAddress(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAgent(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_VoiceCommandPayload.setAgent(value:)();
}

uint64_t UsoEntityBuilder_common_VoiceCommandPayload.init()()
{
  return UsoEntityBuilder_common_VoiceCommandPayload.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload()
{
  return type metadata accessor for UsoEntityBuilder_common_VoiceCommandPayload();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setUnit(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setUnit(value:)();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setValue(value:)()
{
  return dispatch thunk of UsoEntityBuilder_common_MeasurementComponent.setValue(value:)();
}

uint64_t UsoEntityBuilder_common_MeasurementComponent.init()()
{
  return UsoEntityBuilder_common_MeasurementComponent.init()();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MeasurementComponent()
{
  return type metadata accessor for UsoEntityBuilder_common_MeasurementComponent();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.payload.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.reference.getter()
{
  return dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.reference.getter();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setReference(value:)()
{
  return dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setReference(value:)();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)()
{
  return dispatch thunk of Uso_VerbTemplateBuilder_ReferenceVoiceCommandPayload.setPayload(value:)();
}

uint64_t Graph.protobufGraphSiriNl(vocabManager:)()
{
  return Graph.protobufGraphSiriNl(vocabManager:)();
}

uint64_t Scalar.value.getter()
{
  return Scalar.value.getter();
}

uint64_t UsoTask.verbString.getter()
{
  return UsoTask.verbString.getter();
}

uint64_t UsoTask.baseEntityAsString.getter()
{
  return UsoTask.baseEntityAsString.getter();
}

uint64_t UsoTask.arguments.getter()
{
  return UsoTask.arguments.getter();
}

uint64_t type metadata accessor for UsoTask()
{
  return type metadata accessor for UsoTask();
}

uint64_t type metadata accessor for NLIntent()
{
  return type metadata accessor for NLIntent();
}

uint64_t dispatch thunk of UsoValue.getAsPrimitiveValueString()()
{
  return dispatch thunk of UsoValue.getAsPrimitiveValueString()();
}

uint64_t dispatch thunk of UsoValue.getAsEntity()()
{
  return dispatch thunk of UsoValue.getAsEntity()();
}

uint64_t UsoEntity.attributes.getter()
{
  return UsoEntity.attributes.getter();
}

uint64_t ContactQuery.familyName.setter()
{
  return ContactQuery.familyName.setter();
}

uint64_t ContactQuery.middleName.setter()
{
  return ContactQuery.middleName.setter();
}

uint64_t ContactQuery.namePrefix.setter()
{
  return ContactQuery.namePrefix.setter();
}

uint64_t ContactQuery.nameSuffix.setter()
{
  return ContactQuery.nameSuffix.setter();
}

uint64_t ContactQuery.nickname.setter()
{
  return ContactQuery.nickname.setter();
}

uint64_t ContactQuery.givenName.setter()
{
  return ContactQuery.givenName.setter();
}

uint64_t ContactQuery.init()()
{
  return ContactQuery.init()();
}

uint64_t type metadata accessor for ContactQuery()
{
  return type metadata accessor for ContactQuery();
}

uint64_t type metadata accessor for LocationName()
{
  return type metadata accessor for LocationName();
}

uint64_t ContactHandle.value.getter()
{
  return ContactHandle.value.getter();
}

uint64_t type metadata accessor for ContactHandle()
{
  return type metadata accessor for ContactHandle();
}

uint64_t type metadata accessor for ContinentName()
{
  return type metadata accessor for ContinentName();
}

uint64_t type metadata accessor for StreetAddress()
{
  return type metadata accessor for StreetAddress();
}

uint64_t dispatch thunk of ContactResolver.makeRecommendations(queries:config:)()
{
  return dispatch thunk of ContactResolver.makeRecommendations(queries:config:)();
}

uint64_t ContactResolver.init()()
{
  return ContactResolver.init()();
}

uint64_t type metadata accessor for ContactResolver()
{
  return type metadata accessor for ContactResolver();
}

uint64_t type metadata accessor for RecommenderType()
{
  return type metadata accessor for RecommenderType();
}

uint64_t type metadata accessor for AddressReference()
{
  return type metadata accessor for AddressReference();
}

uint64_t DateTimeResolver.makeRecommendation(value:context:spec:)()
{
  return DateTimeResolver.makeRecommendation(value:context:spec:)();
}

uint64_t DateTimeResolver.init()()
{
  return DateTimeResolver.init()();
}

uint64_t type metadata accessor for DateTimeResolver()
{
  return type metadata accessor for DateTimeResolver();
}

uint64_t LocationResolver.makeRecommendation(value:context:spec:)()
{
  return LocationResolver.makeRecommendation(value:context:spec:)();
}

uint64_t LocationResolver.init()()
{
  return LocationResolver.init()();
}

uint64_t type metadata accessor for LocationResolver()
{
  return type metadata accessor for LocationResolver();
}

uint64_t ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:includeResolutionSignals:)()
{
  return ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:includeResolutionSignals:)();
}

uint64_t type metadata accessor for ContactResolverConfig()
{
  return type metadata accessor for ContactResolverConfig();
}

uint64_t static ContactResolverDomain.all.getter()
{
  return static ContactResolverDomain.all.getter();
}

uint64_t type metadata accessor for ContactResolverDomain()
{
  return type metadata accessor for ContactResolverDomain();
}

uint64_t type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy()
{
  return type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy();
}

uint64_t type metadata accessor for DateTimeResolutionSpec.ExpandToType()
{
  return type metadata accessor for DateTimeResolutionSpec.ExpandToType();
}

uint64_t DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)()
{
  return DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)();
}

uint64_t type metadata accessor for DateTimeResolutionSpec()
{
  return type metadata accessor for DateTimeResolutionSpec();
}

uint64_t LocationResolutionSpec.init()()
{
  return LocationResolutionSpec.init()();
}

uint64_t type metadata accessor for LocationResolutionSpec()
{
  return type metadata accessor for LocationResolutionSpec();
}

uint64_t type metadata accessor for SearchSuggestedContacts()
{
  return type metadata accessor for SearchSuggestedContacts();
}

uint64_t type metadata accessor for DateTimeResolutionContext.Hemisphere()
{
  return type metadata accessor for DateTimeResolutionContext.Hemisphere();
}

uint64_t DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)()
{
  return DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)();
}

uint64_t type metadata accessor for DateTimeResolutionContext()
{
  return type metadata accessor for DateTimeResolutionContext();
}

uint64_t LocationResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:latitude:longitude:)()
{
  return LocationResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:latitude:longitude:)();
}

uint64_t type metadata accessor for LocationResolutionContext()
{
  return type metadata accessor for LocationResolutionContext();
}

uint64_t type metadata accessor for ContactHandleTypePreference()
{
  return type metadata accessor for ContactHandleTypePreference();
}

uint64_t type metadata accessor for City()
{
  return type metadata accessor for City();
}

uint64_t type metadata accessor for Place()
{
  return type metadata accessor for Place();
}

uint64_t type metadata accessor for State()
{
  return type metadata accessor for State();
}

uint64_t type metadata accessor for County()
{
  return type metadata accessor for County();
}

uint64_t type metadata accessor for Radius()
{
  return type metadata accessor for Radius();
}

uint64_t Contact.familyName.getter()
{
  return Contact.familyName.getter();
}

uint64_t Contact.middleName.getter()
{
  return Contact.middleName.getter();
}

uint64_t Contact.namePrefix.getter()
{
  return Contact.namePrefix.getter();
}

uint64_t Contact.nameSuffix.getter()
{
  return Contact.nameSuffix.getter();
}

uint64_t Contact.id.getter()
{
  return Contact.id.getter();
}

uint64_t Contact.handles.getter()
{
  return Contact.handles.getter();
}

uint64_t Contact.nickname.getter()
{
  return Contact.nickname.getter();
}

uint64_t Contact.givenName.getter()
{
  return Contact.givenName.getter();
}

uint64_t type metadata accessor for Contact()
{
  return type metadata accessor for Contact();
}

uint64_t type metadata accessor for Country()
{
  return type metadata accessor for Country();
}

uint64_t type metadata accessor for Zipcode()
{
  return type metadata accessor for Zipcode();
}

uint64_t type metadata accessor for Centroid()
{
  return type metadata accessor for Centroid();
}

uint64_t type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange()
{
  return type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange();
}

uint64_t dispatch thunk of DateTime.dateComponents.getter()
{
  return dispatch thunk of DateTime.dateComponents.getter();
}

uint64_t type metadata accessor for DateTime()
{
  return type metadata accessor for DateTime();
}

uint64_t type metadata accessor for Landmark()
{
  return type metadata accessor for Landmark();
}

uint64_t Location.locationLabel.getter()
{
  return Location.locationLabel.getter();
}

CLPlacemark_optional __swiftcall Location.toCLPlacemark()()
{
  uint64_t v0 = (objc_class *)Location.toCLPlacemark()();
  result.value._internal = v1;
  result.value.super.Class isa = v0;
  result.is_nil = v2;
  return result;
}

uint64_t Location.init(radius:country:zipcode:state:city:centroid:place:timezone:proximity:landmark:streetAddress:continentName:addressReference:locationName:locationLabel:county:locationAccuracy:)()
{
  return Location.init(radius:country:zipcode:state:city:centroid:place:timezone:proximity:landmark:streetAddress:continentName:addressReference:locationName:locationLabel:county:locationAccuracy:)();
}

uint64_t type metadata accessor for Location()
{
  return type metadata accessor for Location();
}

uint64_t type metadata accessor for Proximity()
{
  return type metadata accessor for Proximity();
}

uint64_t SiriEnvironment.flowTask.getter()
{
  return SiriEnvironment.flowTask.getter();
}

uint64_t SiriEnvironment.currentRequest.getter()
{
  return SiriEnvironment.currentRequest.getter();
}

uint64_t static SiriEnvironment.default.getter()
{
  return static SiriEnvironment.default.getter();
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return type metadata accessor for SiriEnvironment();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.modify()
{
  return SiriEnvironmentLocating<>.siriEnvironment.modify();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.getter()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.setter()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

uint64_t Transformer.init(transform:)()
{
  return Transformer.init(transform:)();
}

uint64_t Transformer.transform.getter()
{
  return Transformer.transform.getter();
}

uint64_t ResponseMode.description.getter()
{
  return ResponseMode.description.getter();
}

uint64_t static ResponseMode.displayOnly.getter()
{
  return static ResponseMode.displayOnly.getter();
}

uint64_t static ResponseMode.voiceForward.getter()
{
  return static ResponseMode.voiceForward.getter();
}

uint64_t static ResponseMode.displayForward.getter()
{
  return static ResponseMode.displayForward.getter();
}

uint64_t static ResponseMode.== infix(_:_:)()
{
  return static ResponseMode.== infix(_:_:)();
}

uint64_t static ResponseMode.voiceOnly.getter()
{
  return static ResponseMode.voiceOnly.getter();
}

uint64_t type metadata accessor for ResponseMode()
{
  return type metadata accessor for ResponseMode();
}

uint64_t type metadata accessor for InteractionType()
{
  return type metadata accessor for InteractionType();
}

uint64_t type metadata accessor for TransformationError()
{
  return type metadata accessor for TransformationError();
}

uint64_t CATGlobals.__allocating_init(device:)()
{
  return CATGlobals.__allocating_init(device:)();
}

uint64_t type metadata accessor for CATGlobals()
{
  return type metadata accessor for CATGlobals();
}

uint64_t CATWrapper.init(templateDir:options:globals:)()
{
  return CATWrapper.init(templateDir:options:globals:)();
}

uint64_t CATWrapper.__allocating_init(options:globals:)()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t CATWrapper.deinit()
{
  return CATWrapper.deinit();
}

uint64_t dispatch thunk of SirikitApp.Builder.withLocalizedAppNames(_:)()
{
  return dispatch thunk of SirikitApp.Builder.withLocalizedAppNames(_:)();
}

uint64_t dispatch thunk of SirikitApp.Builder.withAppId(_:)()
{
  return dispatch thunk of SirikitApp.Builder.withAppId(_:)();
}

uint64_t SirikitApp.Builder.init()()
{
  return SirikitApp.Builder.init()();
}

uint64_t type metadata accessor for SirikitApp.Builder()
{
  return type metadata accessor for SirikitApp.Builder();
}

uint64_t dispatch thunk of SirikitApp.__allocating_init(builder:)()
{
  return dispatch thunk of SirikitApp.__allocating_init(builder:)();
}

uint64_t SpeakableString.init(print:speak:)()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t SpeakableString.print.getter()
{
  return SpeakableString.print.getter();
}

uint64_t SpeakableString.speak.getter()
{
  return SpeakableString.speak.getter();
}

uint64_t type metadata accessor for SpeakableString()
{
  return type metadata accessor for SpeakableString();
}

uint64_t CATWrapperSimple.init(templateDir:options:globals:)()
{
  return CATWrapperSimple.init(templateDir:options:globals:)();
}

uint64_t CATWrapperSimple.init(useResponseMode:options:)()
{
  return CATWrapperSimple.init(useResponseMode:options:)();
}

uint64_t CATWrapperSimple.__allocating_init(options:globals:)()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t CATWrapperSimple.deinit()
{
  return CATWrapperSimple.deinit();
}

uint64_t SirikitDeviceState.__allocating_init(from:)()
{
  return SirikitDeviceState.__allocating_init(from:)();
}

uint64_t type metadata accessor for SirikitDeviceState()
{
  return type metadata accessor for SirikitDeviceState();
}

uint64_t dispatch thunk of LabelExecutionResult.subscript.getter()
{
  return dispatch thunk of LabelExecutionResult.subscript.getter();
}

uint64_t dispatch thunk of SirikitLocalizedAppName.Builder.withAppName(_:)()
{
  return dispatch thunk of SirikitLocalizedAppName.Builder.withAppName(_:)();
}

uint64_t dispatch thunk of SirikitLocalizedAppName.Builder.withLocale(_:)()
{
  return dispatch thunk of SirikitLocalizedAppName.Builder.withLocale(_:)();
}

uint64_t dispatch thunk of SirikitLocalizedAppName.Builder.build()()
{
  return dispatch thunk of SirikitLocalizedAppName.Builder.build()();
}

uint64_t SirikitLocalizedAppName.Builder.init()()
{
  return SirikitLocalizedAppName.Builder.init()();
}

uint64_t type metadata accessor for SirikitLocalizedAppName.Builder()
{
  return type metadata accessor for SirikitLocalizedAppName.Builder();
}

uint64_t static CATOption.defaultMode.getter()
{
  return static CATOption.defaultMode.getter();
}

uint64_t type metadata accessor for CATOption()
{
  return type metadata accessor for CATOption();
}

uint64_t SendMailPlan.init()()
{
  return SendMailPlan.init()();
}

uint64_t type metadata accessor for SendMailPlan()
{
  return type metadata accessor for SendMailPlan();
}

uint64_t type metadata accessor for SendMailResult()
{
  return type metadata accessor for SendMailResult();
}

uint64_t App.__allocating_init(appIdentifier:)()
{
  return App.__allocating_init(appIdentifier:)();
}

uint64_t App.appIdentifier.getter()
{
  return App.appIdentifier.getter();
}

uint64_t type metadata accessor for App()
{
  return type metadata accessor for App();
}

uint64_t AppDisplayInfo.init(displayName:isFirstParty:)()
{
  return AppDisplayInfo.init(displayName:isFirstParty:)();
}

uint64_t AppDisplayInfo.displayName.getter()
{
  return AppDisplayInfo.displayName.getter();
}

uint64_t AppDisplayInfo.isFirstParty.getter()
{
  return AppDisplayInfo.isFirstParty.getter();
}

uint64_t type metadata accessor for AppDisplayInfo()
{
  return type metadata accessor for AppDisplayInfo();
}

uint64_t CurrentRequest.executionRequestId.getter()
{
  return CurrentRequest.executionRequestId.getter();
}

uint64_t CurrentRequest.responseMode.getter()
{
  return CurrentRequest.responseMode.getter();
}

uint64_t CurrentRequest.resultCandidateId.getter()
{
  return CurrentRequest.resultCandidateId.getter();
}

uint64_t Google_Protobuf_StringValue.value.getter()
{
  return Google_Protobuf_StringValue.value.getter();
}

uint64_t type metadata accessor for Google_Protobuf_StringValue()
{
  return type metadata accessor for Google_Protobuf_StringValue();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t OSSignposter.init(subsystem:category:)()
{
  return OSSignposter.init(subsystem:category:)();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t static INShortcut._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static INShortcut._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t INShortcut.intent.getter()
{
  return INShortcut.intent.getter();
}

uint64_t type metadata accessor for INShortcut()
{
  return type metadata accessor for INShortcut();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.background.getter()
{
  return static DispatchQoS.background.getter();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t Array.init()()
{
  return Array.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return BidirectionalCollection<>.starts<A>(with:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = String.uppercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.toSpeakableString.getter()
{
  return String.toSpeakableString.getter();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.Index.init<A>(utf16Offset:in:)()
{
  return String.Index.init<A>(utf16Offset:in:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t Sequence.sorted(by:)()
{
  return Sequence.sorted(by:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.startIndex.getter()
{
  return Array.startIndex.getter();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return static Array._adoptStorage(_:count:)();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

uint64_t Array.endIndex.getter()
{
  return Array.endIndex.getter();
}

Swift::Void __swiftcall Array.formIndex(after:)(Swift::Int *after)
{
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t Array.subscript.getter()
{
  return Array.subscript.getter();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return TaskGroup.makeAsyncIterator()();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return type metadata accessor for AsyncStream.Continuation();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t type metadata accessor for AsyncStream.Iterator()
{
  return type metadata accessor for AsyncStream.Iterator();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

uint64_t AsyncThrowingStream.Continuation.onTermination.setter()
{
  return AsyncThrowingStream.Continuation.onTermination.setter();
}

uint64_t AsyncThrowingStream.Continuation.yield(_:)()
{
  return AsyncThrowingStream.Continuation.yield(_:)();
}

uint64_t AsyncThrowingStream.Continuation.finish(throwing:)()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation()
{
  return type metadata accessor for AsyncThrowingStream.Continuation();
}

uint64_t AsyncThrowingStream.makeAsyncIterator()()
{
  return AsyncThrowingStream.makeAsyncIterator()();
}

uint64_t AsyncThrowingStream.init<>(_:bufferingPolicy:_:)()
{
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t Double.description.getter()
{
  return Double.description.getter();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t Collection.isEmpty.getter()
{
  return Collection.isEmpty.getter();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t NLTokenizer.tokens(for:)()
{
  return NLTokenizer.tokens(for:)();
}

uint64_t NSDimension.init(forLocale:)()
{
  return NSDimension.init(forLocale:)();
}

uint64_t SISchemaUUID.asUUID()()
{
  return SISchemaUUID.asUUID()();
}

uint64_t static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)()
{
  return static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:)();
}

uint64_t static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)()
{
  return static SACardSnippet.makeFromCardSectionsWithIntentData(cardSections:intent:intentResponse:shouldGenerateAceId:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return static OS_dispatch_queue.Attributes.concurrent.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.sync<A>(flags:execute:)()
{
  return OS_dispatch_queue.sync<A>(flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static USOSerializedGraph.fromProto(protoGraph:)()
{
  return static USOSerializedGraph.fromProto(protoGraph:)();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t NSMeasurementFormatter.string<A>(from:)()
{
  return NSMeasurementFormatter.string<A>(from:)();
}

uint64_t static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)()
{
  return static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

Swift::String __swiftcall Substring.lowercased()()
{
  uint64_t v0 = Substring.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.init(_:)()
{
  return Substring.init(_:)();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return StringProtocol.components(separatedBy:)();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return _HashTable.occupiedBucket(after:)();
}

uint64_t _expectEnd<A>(of:is:)()
{
  return _expectEnd<A>(of:is:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t Identifiable<>.id.getter()
{
  return Identifiable<>.id.getter();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return _ArrayProtocol.filter(_:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t static ContinuousClock.now.getter()
{
  return static ContinuousClock.now.getter();
}

uint64_t ContinuousClock.Instant.duration(to:)()
{
  return ContinuousClock.Instant.duration(to:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t dispatch thunk of Error._code.getter()
{
  return dispatch thunk of Error._code.getter();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t Duration.components.getter()
{
  return Duration.components.getter();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AFDeviceSupportsSAE()
{
  return _AFDeviceSupportsSAE();
}

uint64_t AFSystemRootDirectory()
{
  return _AFSystemRootDirectory();
}

uint64_t FLOWSchemaFLOWEventMetadataReadFrom()
{
  return _FLOWSchemaFLOWEventMetadataReadFrom();
}

uint64_t INCRouteAudioToAirplayOutputDevices()
{
  return _INCRouteAudioToAirplayOutputDevices();
}

uint64_t INIntentCreate()
{
  return _INIntentCreate();
}

uint64_t INIntentResponseCreate()
{
  return _INIntentResponseCreate();
}

uint64_t LNMeasurementUnitTypeOfUnit()
{
  return _LNMeasurementUnitTypeOfUnit();
}

uint64_t LNMeasurementUnitTypeToUnit()
{
  return _LNMeasurementUnitTypeToUnit();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteFloatField()
{
  return _PBDataWriterWriteFloatField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

uint64_t SISchemaUUIDReadFrom()
{
  return _SISchemaUUIDReadFrom();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return __swift_stdlib_strtod_clocale();
}

long double fmod(long double __x, long double __y)
{
  return _fmod(__x, __y);
}

void free(void *a1)
{
}

long double log10(long double __x)
{
  return _log10(__x);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_asyncLet_begin()
{
  return _swift_asyncLet_begin();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_resume()
{
  return _swift_continuation_resume();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_deletedMethodError()
{
  return _swift_deletedMethodError();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastMetatype()
{
  return _swift_dynamicCastMetatype();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return _swift_dynamicCastUnknownClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout()
{
  return _swift_getTupleTypeLayout();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeLayout3()
{
  return _swift_getTupleTypeLayout3();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return _swift_initEnumMetadataSingleCase();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isClassType()
{
  return _swift_isClassType();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _[a1 action];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParameters:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_clockSeconds(void *a1, const char *a2, ...)
{
  return _[a1 clockSeconds];
}

id objc_msgSend_contextId(void *a1, const char *a2, ...)
{
  return _[a1 contextId];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_ended(void *a1, const char *a2, ...)
{
  return _[a1 ended];
}

id objc_msgSend_errorDescription(void *a1, const char *a2, ...)
{
  return _[a1 errorDescription];
}

id objc_msgSend_eventMetadata(void *a1, const char *a2, ...)
{
  return _[a1 eventMetadata];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isSuccess(void *a1, const char *a2, ...)
{
  return _[a1 isSuccess];
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidJSONObject:");
}

id objc_msgSend_linkActionCompletion(void *a1, const char *a2, ...)
{
  return _[a1 linkActionCompletion];
}

id objc_msgSend_linkActionConversion(void *a1, const char *a2, ...)
{
  return _[a1 linkActionConversion];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_outcome(void *a1, const char *a2, ...)
{
  return _[a1 outcome];
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return _[a1 parameters];
}

id objc_msgSend_presentationStyle(void *a1, const char *a2, ...)
{
  return _[a1 presentationStyle];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_setAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAction:");
}

id objc_msgSend_setClockSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClockSeconds:");
}

id objc_msgSend_setContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextId:");
}

id objc_msgSend_setEnded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnded:");
}

id objc_msgSend_setErrorDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorDescription:");
}

id objc_msgSend_setEventMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventMetadata:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIsSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSuccess:");
}

id objc_msgSend_setLinkActionCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLinkActionCompletion:");
}

id objc_msgSend_setLinkActionConversion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLinkActionConversion:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOutcome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutcome:");
}

id objc_msgSend_setPresentationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentationStyle:");
}

id objc_msgSend_setShortcutName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShortcutName:");
}

id objc_msgSend_setStartedOrChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartedOrChanged:");
}

id objc_msgSend_setTargetBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetBundle:");
}

id objc_msgSend_setWfRunnerEventName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWfRunnerEventName:");
}

id objc_msgSend_shortcutName(void *a1, const char *a2, ...)
{
  return _[a1 shortcutName];
}

id objc_msgSend_startedOrChanged(void *a1, const char *a2, ...)
{
  return _[a1 startedOrChanged];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_targetBundle(void *a1, const char *a2, ...)
{
  return _[a1 targetBundle];
}

id objc_msgSend_wfRunnerEventName(void *a1, const char *a2, ...)
{
  return _[a1 wfRunnerEventName];
}

id objc_msgSend_whichContextevent(void *a1, const char *a2, ...)
{
  return _[a1 whichContextevent];
}

id objc_msgSend_whichEvent_Type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whichEvent_Type");
}

id objc_msgSend_willProduceDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willProduceDictionaryRepresentation:");
}