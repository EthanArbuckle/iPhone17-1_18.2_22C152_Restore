void *sub_1D0C3FC20(unint64_t a1)
{
  if (a1 >> 61) {
    sub_1D0C6AC2C();
  }
  return operator new(8 * a1);
}

uint64_t sub_1D0C3FC58(uint64_t a1, char *__s1, int a3, unsigned char *a4)
{
  *a4 = 0;
  if (__s1)
  {
    if (!strcmp(__s1, "0") || !strcmp(__s1, "false"))
    {
      char v9 = 0;
    }
    else if (!strcmp(__s1, "1"))
    {
      char v9 = 1;
    }
    else
    {
      int v8 = strcmp(__s1, "true");
      char v9 = 1;
      if (v8) {
        goto LABEL_11;
      }
    }
    *a4 = 1;
  }
  else
  {
    char v9 = 1;
  }
LABEL_11:
  if (*(_DWORD *)(a1 + 8) == a3) {
    **(unsigned char **)(a1 + 16) = v9;
  }
  return 0;
}

void sub_1D0C3FD20(void *a1, int a2, int a3)
{
  v6 = (char *)operator new(0xC0uLL, (std::align_val_t)0x40uLL, MEMORY[0x1E4FBA2D0]);
  if (v6)
  {
    v7 = v6;
    *(void *)v6 = 850045863;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *((void *)v6 + 7) = 0;
    *((void *)v6 + 8) = v6 + 64;
    *((void *)v6 + 9) = v6 + 64;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_DWORD *)v6 + 28) = 0;
    *((_DWORD *)v6 + 36) = a2;
    v6[148] = 0;
    *((void *)v6 + 17) = dispatch_get_global_queue(a3, 0);
    v7[16] = dispatch_group_create();
    int v8 = a1;
    uint64_t v9 = (uint64_t)v7;
  }
  else
  {
    int v8 = a1;
    uint64_t v9 = 0;
  }
  sub_1D0C6457C(v8, v9);
}

void sub_1D0C3FDE0()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  keys[0] = *(void **)MEMORY[0x1E4F45600];
  values = (void *)*MEMORY[0x1E4F1CFC8];
  CFDictionaryRef v1 = CFDictionaryCreate(v0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  VTRegisterVideoDecoderWithInfo();
  if (v1) {
    CFRelease(v1);
  }
}

void sub_1D0C3FEAC(uint64_t a1)
{
  CFPreferencesAppSynchronize(@"com.apple.VideoProcessing");
  CFStringRef v1 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFArrayRef v3 = CFPreferencesCopyKeyList(@"com.apple.VideoProcessing", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (!v3)
  {
    if (dword_1EB671A40 >= 7)
    {
      fwrite("No preferences set\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(31, "No preferences set\n");
    }
    return;
  }
  CFArrayRef v4 = v3;
  CFIndex Count = CFArrayGetCount(v3);
  if (Count < 1) {
    goto LABEL_30;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  CFStringRef v8 = 0;
  do
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, v7);
    if (v8) {
      CFRelease(v8);
    }
    CFStringRef v10 = (const __CFString *)CFPreferencesCopyValue(ValueAtIndex, @"com.apple.VideoProcessing", v1, v2);
    CFStringRef v8 = v10;
    if (!ValueAtIndex || !v10) {
      goto LABEL_27;
    }
    CStringPtr = CFStringGetCStringPtr(ValueAtIndex, 0x8000100u);
    CFTypeID v12 = CFGetTypeID(v8);
    if (v12 != CFStringGetTypeID())
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Got some other type than CFString for %s, ignoring\n", CStringPtr);
        syslog(27, "Got some other type than CFString for %s, ignoring\n");
      }
      goto LABEL_27;
    }
    v13 = (char *)CFStringGetCStringPtr(v8, 0x8000100u);
    if (!CStringPtr || (v14 = v13) == 0)
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Preference couldn't be easily converted to C string, ignoring\n", 0x3EuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Preference couldn't be easily converted to C string, ignoring\n");
      }
      goto LABEL_27;
    }
    __int16 v21 = 0;
    char v15 = *CStringPtr;
    unint64_t v16 = 0xCBF29CE484222325;
    if (*CStringPtr)
    {
      v17 = (unsigned __int8 *)(CStringPtr + 1);
      do
      {
        unint64_t v16 = 0x100000001B3 * (v16 ^ v15);
        int v18 = *v17++;
        char v15 = v18;
      }
      while (v18);
    }
    unint64_t v19 = v16 <= 1 ? 1 : v16;
    if (sub_1D0C637CC(a1, v19, CStringPtr, v13, 0xFFFFFFFFLL, (uint64_t)&v21 + 1, &v21)) {
      break;
    }
    if ((_BYTE)v21)
    {
      if (dword_1EB671A40 >= 4)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Read preference (%s, %s)\n", CStringPtr, v14);
        syslog(28, "Read preference (%s, %s)\n");
      }
    }
    else if (dword_1EB671A40 >= 7)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Ignoring preference (%s, %s)\n", CStringPtr, v14);
      syslog(31, "Ignoring preference (%s, %s)\n");
    }
LABEL_27:
    ++v7;
  }
  while (v7 != v6);
  if (v8) {
    CFRelease(v8);
  }
LABEL_30:
  CFRelease(v4);
}

uint64_t sub_1D0C401A0(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, void *a4)
{
  valuePtr[2] = *(const void **)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CVPixelBufferPoolRef poolOut = 0;
  CFTypeRef v28 = 0;
  uint64_t v7 = *(void *)a1;
  int v8 = *(_DWORD *)(*(void *)a1 + 204);
  int v9 = *(_DWORD *)(*(void *)a1 + 208);
  unsigned int v10 = *(unsigned __int8 *)(*(void *)a1 + 2096);
  if (v10 <= *(unsigned __int8 *)(*(void *)a1 + 2098)) {
    unsigned int v10 = *(unsigned __int8 *)(*(void *)a1 + 2098);
  }
  unsigned int v11 = *(unsigned __int8 *)(v7 + 201);
  if (v10 <= 0xA) {
    uint64_t v12 = v10 > 8;
  }
  else {
    uint64_t v12 = (v10 > 8) + 1;
  }
  uint64_t v13 = *(unsigned __int8 *)(v7 + 1991);
  v14 = &a800l800l010l01[24 * v11 + 8 * v12];
  int v15 = *(_DWORD *)&v14[4 * v13];
  if (!theDict)
  {
    sub_1D0C430F0(*(_DWORD *)(*(void *)a1 + 204), v9, 71, *(_DWORD *)&v14[4 * v13], (__CFDictionary **)&cf);
    CFTypeRef v22 = cf;
LABEL_15:
    CFTypeRef v28 = v22;
    CFTypeRef cf = 0;
    CFDictionaryRef v25 = (const __CFDictionary *)v22;
    goto LABEL_16;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24D70]);
  if (Value)
  {
    CFNumberRef v18 = Value;
    CFTypeID v19 = CFGetTypeID(Value);
    if (v19 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr[0]) = 0;
      CFNumberGetValue(v18, kCFNumberSInt32Type, valuePtr);
      int v20 = sub_1D0C50E9C(v15);
      int v21 = (int)valuePtr[0];
      if (v20 == sub_1D0C50E9C((int)valuePtr[0])) {
        int v15 = v21;
      }
    }
  }
  sub_1D0C430F0(v8, v9, 71, v15, (__CFDictionary **)&cf);
  CFTypeRef v22 = cf;
  valuePtr[0] = cf;
  valuePtr[1] = theDict;
  CFArrayRef v23 = CFArrayCreate(0, valuePtr, 2, 0);
  if (!v23) {
    goto LABEL_15;
  }
  CFArrayRef v24 = v23;
  CVPixelBufferCreateResolvedAttributesDictionary(0, v23, (CFDictionaryRef *)&v28);
  CFRelease(v24);
  CFDictionaryRef v25 = (const __CFDictionary *)v28;
  if (!v28) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v26 = CVPixelBufferPoolCreate(0, 0, v25, &poolOut);
  if (!v26) {
    uint64_t v26 = sub_1D0C41AC0(a1, a2, poolOut, a4);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v28) {
    CFRelease(v28);
  }
  CVPixelBufferPoolRelease(poolOut);
  return v26;
}

void sub_1D0C403B0(__CFDictionary *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v3 = Mutable;
    CFDictionaryAddValue(a1, (const void *)*MEMORY[0x1E4F24D20], Mutable);
    CFRelease(v3);
  }
}

uint64_t sub_1D0C4042C(unsigned __int8 *a1)
{
  uint64_t v2 = *((void *)a1 + 269);
  uint64_t v3 = *a1;
  CFArrayRef v4 = (uint64_t *)(v2 + 1536);
  v5 = (uint64_t *)(v2 + 16 * v3);
  if (v3 > 0xF) {
    v5 = v4;
  }
  uint64_t v7 = *v5;
  CFIndex v6 = (std::__shared_weak_count *)v5[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v7)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "No VPS found for ID %d\n", *a1);
      syslog(27, "No VPS found for ID %d\n", *a1);
    }
    goto LABEL_23;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a1[1];
  uint64_t v10 = v7 + 203;
  unsigned int v11 = a1 + 226;
  do
  {
    unsigned int v12 = *(unsigned __int8 *)(v10 + v8);
    if (v11[v8] > v12)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "sps_max_dec_pic_buffering[%d] (%d) out of range [0, %d]\n", v8, v11[v8], v12);
        syslog(27, "sps_max_dec_pic_buffering[%d] (%d) out of range [0, %d]\n", v8, v11[v8], *(unsigned __int8 *)(v10 + v8));
      }
      goto LABEL_23;
    }
    ++v8;
  }
  while (v9 + 1 != v8);
  if (*(unsigned char *)(v7 + 280) && !a1[2008])
  {
    *((_DWORD *)a1 + 503) = *(_DWORD *)(v7 + 284);
    *((_DWORD *)a1 + 504) = *(_DWORD *)(v7 + 288);
    a1[2020] = *(unsigned char *)(v7 + 292);
  }
  if (v9 >= 7)
  {
    if (dword_1EB671A40 < 3) {
      goto LABEL_23;
    }
    uint64_t v14 = 6;
    int v15 = "sps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n";
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "sps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n", v9, 0, 6);
    uint64_t v16 = 0;
    uint64_t v17 = a1[1];
    goto LABEL_22;
  }
  uint64_t v13 = *(unsigned __int8 *)(v7 + 200);
  if (v9 > v13)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "sps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n", v9, 0, v13);
      syslog(27, "sps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n");
    }
    goto LABEL_23;
  }
  unint64_t v20 = a1[201];
  if (v20 >= 4)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "chroma_format_idc_ of %lld is out of range (%lld, %lld)\n", v20, 0, 3);
      syslog(27, "chroma_format_idc_ of %lld is out of range (%lld, %lld)\n");
    }
  }
  else
  {
    uint64_t v21 = *((int *)a1 + 51);
    if ((int)v21 <= 0)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "pic_width_in_luma_samples_ of %lld is out of range (%lld, %lld)\n", v21, 1, 0x7FFFFFFFLL);
        syslog(27, "pic_width_in_luma_samples_ of %lld is out of range (%lld, %lld)\n");
      }
    }
    else
    {
      uint64_t v22 = *((int *)a1 + 52);
      if ((int)v22 <= 0)
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "pic_height_in_luma_samples_ of %lld is out of range (%lld, %lld)\n", v22, 1, 0x7FFFFFFFLL);
          syslog(27, "pic_height_in_luma_samples_ of %lld is out of range (%lld, %lld)\n");
        }
      }
      else
      {
        if ((unint64_t)((int)v22 * (uint64_t)(int)v21) >> 31)
        {
          if (dword_1EB671A40 < 3) {
            goto LABEL_23;
          }
          CFArrayRef v24 = (FILE *)*MEMORY[0x1E4F143C8];
          CFDictionaryRef v25 = "static_cast<size_t>(pic_width_in_luma_samples_)*pic_height_in_luma_samples_ <= INT32_MAX failed!\n";
          uint64_t v26 = "static_cast<size_t>(pic_width_in_luma_samples_)*pic_height_in_luma_samples_ <= INT32_MAX failed!\n";
          size_t v27 = 97;
          goto LABEL_41;
        }
        uint64_t v23 = a1[2112];
        if (((v22 | v21) & ~(-1 << v23)) != 0)
        {
          if (dword_1EB671A40 < 3) {
            goto LABEL_23;
          }
          CFArrayRef v24 = (FILE *)*MEMORY[0x1E4F143C8];
          CFDictionaryRef v25 = "width_remainder == 0 && height_remainder == 0 failed!\n";
          uint64_t v26 = "width_remainder == 0 && height_remainder == 0 failed!\n";
          size_t v27 = 54;
          goto LABEL_41;
        }
        if (a1[212])
        {
          CFTypeRef v28 = (unsigned __int8 *)&unk_1D0DAEF50 + 2 * v20;
          int v29 = *v28;
          uint64_t v30 = *((unsigned __int16 *)a1 + 107);
          unsigned int v31 = v21 / v29;
          uint64_t v32 = *((unsigned __int16 *)a1 + 108);
          if (v30 > (int)(v31 + ~v32))
          {
            if (dword_1EB671A40 < 3) {
              goto LABEL_23;
            }
            int v15 = "conf_win_left_offset_ of %lld is out of range (%lld, %lld)\n";
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "conf_win_left_offset_ of %lld is out of range (%lld, %lld)\n", v30, 0, ~v32 + v31);
            uint64_t v16 = 0;
            uint64_t v17 = *((unsigned __int16 *)a1 + 107);
            int v33 = *((_DWORD *)a1 + 51) / v29;
            uint64_t v34 = *((unsigned __int16 *)a1 + 108);
LABEL_49:
            uint64_t v14 = ~v34 + v33;
LABEL_22:
            syslog(27, v15, v17, v16, v14);
            goto LABEL_23;
          }
          int v35 = v28[1];
          uint64_t v36 = *((unsigned __int16 *)a1 + 109);
          unsigned int v37 = v22 / v35;
          uint64_t v38 = *((unsigned __int16 *)a1 + 110);
          if (v36 > (int)(v37 + ~v38))
          {
            if (dword_1EB671A40 < 3) {
              goto LABEL_23;
            }
            int v15 = "conf_win_top_offset_ of %lld is out of range (%lld, %lld)\n";
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "conf_win_top_offset_ of %lld is out of range (%lld, %lld)\n", v36, 0, ~v38 + v37);
            uint64_t v16 = 0;
            uint64_t v17 = *((unsigned __int16 *)a1 + 109);
            int v33 = *((_DWORD *)a1 + 52) / v35;
            uint64_t v34 = *((unsigned __int16 *)a1 + 110);
            goto LABEL_49;
          }
        }
        unint64_t v39 = a1[222];
        if (v39 >= 7)
        {
          if (dword_1EB671A40 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "bit_depth_luma_minus8_ of %lld is out of range (%lld, %lld)\n", v39, 0, 6);
            syslog(27, "bit_depth_luma_minus8_ of %lld is out of range (%lld, %lld)\n");
          }
        }
        else
        {
          unint64_t v40 = a1[223];
          if (v40 >= 7)
          {
            if (dword_1EB671A40 >= 3)
            {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "bit_depth_chroma_minus8_ of %lld is out of range (%lld, %lld)\n", v40, 0, 6);
              syslog(27, "bit_depth_chroma_minus8_ of %lld is out of range (%lld, %lld)\n");
            }
          }
          else
          {
            unint64_t v41 = a1[224];
            if (v41 <= 0xC)
            {
              uint64_t v42 = 0;
              uint64_t v43 = 0;
              uint64_t v44 = v9 + 1;
              do
              {
                uint64_t v45 = a1[v43 + 233];
                uint64_t v46 = a1[v43 + 226];
                if (v45 > v46)
                {
                  if (dword_1EB671A40 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "sps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n", v45, 0, v46);
                    syslog(27, "sps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_23;
                }
                uint64_t v47 = *(unsigned int *)&a1[4 * v43 + 240];
                if (v47 >= 0xFFFFFFFE)
                {
                  if (dword_1EB671A40 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "sps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n", v47, 0, 4294967293);
                    syslog(27, "sps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_23;
                }
                if (v43)
                {
                  v48 = &a1[(v43 - 1)];
                  unsigned int v49 = v48[226];
                  unsigned int v50 = v48[233];
                }
                else
                {
                  unsigned int v49 = 0;
                  unsigned int v50 = 0;
                }
                uint64_t v51 = *(unsigned __int8 *)(v7 + v43 + 203);
                if (v46 < v49 || v46 > v51)
                {
                  if (dword_1EB671A40 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "sps_max_dec_pic_buffering_minus1_[idx] of %lld is out of range (%lld, %lld)\n", v46, v49, v51);
                    syslog(27, "sps_max_dec_pic_buffering_minus1_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_23;
                }
                uint64_t v52 = *(unsigned __int8 *)(v7 + v43 + 210);
                if (v45 < v50 || v45 > v52)
                {
                  if (dword_1EB671A40 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "sps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n", v45, v50, v52);
                    syslog(27, "sps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_23;
                }
                uint64_t v53 = *(unsigned int *)(v7 + 220 + 4 * v43);
                if ((int)v53 - 1 < (v47 - 1))
                {
                  if (dword_1EB671A40 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "sps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n", v47, 1, v53);
                    syslog(27, "sps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_23;
                }
                ++v43;
                v42 += 4;
              }
              while (v44 != v43);
              if (a1[320])
              {
                uint64_t v54 = *((unsigned int *)a1 + 81);
                if (v54)
                {
                  int v55 = 16 << v41;
                  uint64_t v56 = (16 << v41) - 1;
                  v57 = (unsigned __int16 *)(a1 + 328);
                  while (1)
                  {
                    uint64_t v58 = *v57;
                    if (v58 > v56) {
                      break;
                    }
                    ++v57;
                    if (!--v54) {
                      goto LABEL_70;
                    }
                  }
                  if (dword_1EB671A40 >= 3)
                  {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "lt_ref_pic_poc_lsb_sps_[idx] of %lld is out of range (%lld, %lld)\n", v58, 0, v55 - 1);
                    syslog(27, "lt_ref_pic_poc_lsb_sps_[idx] of %lld is out of range (%lld, %lld)\n");
                  }
                  goto LABEL_23;
                }
              }
LABEL_70:
              if ((v23 - 3) >= 4u)
              {
                if (dword_1EB671A40 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2MinCbSize_ of %lld is out of range (%lld, %lld)\n", v23, 3, 6);
                  syslog(27, "log2MinCbSize_ of %lld is out of range (%lld, %lld)\n");
                }
                goto LABEL_23;
              }
              uint64_t v59 = a1[2113];
              if ((v59 - 3) >= 4u)
              {
                if (dword_1EB671A40 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2CtbSize_ of %lld is out of range (%lld, %lld)\n", v59, 3, 6);
                  syslog(27, "log2CtbSize_ of %lld is out of range (%lld, %lld)\n");
                }
                goto LABEL_23;
              }
              uint64_t v60 = a1[2115];
              if (v59 >= 5) {
                uint64_t v61 = 5;
              }
              else {
                uint64_t v61 = a1[2113];
              }
              if (v60 > v61 || v60 <= 1)
              {
                if (dword_1EB671A40 < 3) {
                  goto LABEL_23;
                }
                uint64_t v16 = 2;
                int v15 = "log2MaxTrafoSize_ of %lld is out of range (%lld, %lld)\n";
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2MaxTrafoSize_ of %lld is out of range (%lld, %lld)\n", v60, 2, v61);
                uint64_t v17 = a1[2115];
                if (a1[2113] >= 5u) {
                  uint64_t v14 = 5;
                }
                else {
                  uint64_t v14 = a1[2113];
                }
                goto LABEL_22;
              }
              uint64_t v62 = a1[2114];
              if (v62 > v60 || v62 <= 1)
              {
                if (dword_1EB671A40 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2MinTrafoSize_ of %lld is out of range (%lld, %lld)\n", v62, 2, v60);
                  syslog(27, "log2MinTrafoSize_ of %lld is out of range (%lld, %lld)\n");
                }
                goto LABEL_23;
              }
              if (!a1[278]) {
                goto LABEL_89;
              }
              if (v23 >= 5) {
                uint64_t v63 = 5;
              }
              else {
                uint64_t v63 = a1[2112];
              }
              if (a1[279] >= a1[2096])
              {
                if (dword_1EB671A40 < 3) {
                  goto LABEL_23;
                }
                CFArrayRef v24 = (FILE *)*MEMORY[0x1E4F143C8];
                CFDictionaryRef v25 = "pcm.pcm_sample_bit_depth_luma_minus1_ + 1 <= bitDepth_y_ failed!\n";
                uint64_t v26 = "pcm.pcm_sample_bit_depth_luma_minus1_ + 1 <= bitDepth_y_ failed!\n";
                size_t v27 = 65;
              }
              else
              {
                if (a1[280] < a1[2098])
                {
                  uint64_t v64 = a1[286];
                  if (v64 > v61 || v64 < v63)
                  {
                    if (dword_1EB671A40 >= 3)
                    {
                      fprintf((FILE *)*MEMORY[0x1E4F143C8], "pcm.log2MinIPCMCUSize_ of %lld is out of range (%lld, %lld)\n", v64, v63, v61);
                      syslog(27, "pcm.log2MinIPCMCUSize_ of %lld is out of range (%lld, %lld)\n");
                    }
                    goto LABEL_23;
                  }
                  uint64_t v65 = a1[287];
                  if (v65 > v61 || v65 < v63)
                  {
                    if (dword_1EB671A40 >= 3)
                    {
                      fprintf((FILE *)*MEMORY[0x1E4F143C8], "pcm.log2MaxIPCMCUSize_ of %lld is out of range (%lld, %lld)\n", v65, v63, v61);
                      syslog(27, "pcm.log2MaxIPCMCUSize_ of %lld is out of range (%lld, %lld)\n");
                    }
                    goto LABEL_23;
                  }
LABEL_89:
                  if (!a1[405] && !a1[409])
                  {
                    uint64_t v18 = 0;
                    if (v6) {
                      goto LABEL_24;
                    }
                    return v18;
                  }
                  if (dword_1EB671A40 < 3) {
                    goto LABEL_23;
                  }
                  CFArrayRef v24 = (FILE *)*MEMORY[0x1E4F143C8];
                  CFDictionaryRef v25 = "Range Extension feature not supported\n";
                  uint64_t v26 = "Range Extension feature not supported\n";
                  size_t v27 = 38;
                  goto LABEL_41;
                }
                if (dword_1EB671A40 < 3) {
                  goto LABEL_23;
                }
                CFArrayRef v24 = (FILE *)*MEMORY[0x1E4F143C8];
                CFDictionaryRef v25 = "pcm.pcm_sample_bit_depth_chroma_minus1_ + 1 <= bitDepth_c_ failed!\n";
                uint64_t v26 = "pcm.pcm_sample_bit_depth_chroma_minus1_ + 1 <= bitDepth_c_ failed!\n";
                size_t v27 = 67;
              }
LABEL_41:
              fwrite(v26, v27, 1uLL, v24);
              syslog(27, v25);
              goto LABEL_23;
            }
            if (dword_1EB671A40 >= 3)
            {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2_max_pic_order_cnt_lsb_minus4_ of %lld is out of range (%lld, %lld)\n", v41, 0, 12);
              syslog(27, "log2_max_pic_order_cnt_lsb_minus4_ of %lld is out of range (%lld, %lld)\n");
            }
          }
        }
      }
    }
  }
LABEL_23:
  uint64_t v18 = 4294954387;
  if (v6) {
LABEL_24:
  }
    sub_1D0C4C984(v6);
  return v18;
}

void sub_1D0C40F68(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1D0C4C984(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0C40F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((int)a4 < 65)
  {
    if ((int)a4 < 1)
    {
      *(unsigned char *)(a1 + 163) = 0;
    }
    else
    {
      int v9 = sub_1D0C51880(a2, 1);
      *(unsigned char *)(a1 + 163) = v9 != 0;
      if (v9)
      {
        if (*(_DWORD *)(a3 + 288) == a4) {
          int v10 = sub_1D0C4C8F0(a2);
        }
        else {
          int v10 = 0;
        }
        *(_DWORD *)(a1 + 164) = v10;
        *(unsigned char *)(a1 + 168) = sub_1D0C51880(a2, 1) != 0;
        *(_WORD *)(a1 + 170) = sub_1D0C5108C(a2);
        int v18 = ~*(_DWORD *)(a1 + 164) + a4;
        if (v18 < 0 || v18 >= (int)a4)
        {
          if (dword_1EB671A40 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "delta_idx_minus1_ (%d) must be between 0-%d\n", *(_DWORD *)(a1 + 164), a4 - 1);
            syslog(27, "delta_idx_minus1_ (%d) must be between 0-%d\n");
          }
          return 4294954387;
        }
        uint64_t v19 = *(void *)(a3 + 296);
        *(_DWORD *)(a1 + 172) = 0;
        unsigned int v20 = -1;
        do
        {
          ++v20;
          int v21 = sub_1D0C51880(a2, 1);
          *(_WORD *)(a1 + 172) |= (v21 != 0) << v20;
          if (!v21) {
            *(_WORD *)(a1 + 174) |= (sub_1D0C51880(a2, 1) != 0) << v20;
          }
        }
        while (v20 < *(unsigned __int8 *)(v19 + 248 * v18 + 162));
        uint64_t v17 = v19 + 248 * v18;
LABEL_29:
        sub_1D0C64A10(a1, v17);
        if (*(unsigned char *)(a1 + 163)) {
          return 0;
        }
        uint64_t v23 = *(unsigned __int8 *)(a1 + 176);
        if (*(unsigned char *)(a1 + 176))
        {
          CFArrayRef v24 = (unsigned __int16 *)(a1 + 178);
          while (((__int16)*v24 & 0x80000000) == 0)
          {
            ++v24;
            if (!--v23) {
              goto LABEL_38;
            }
          }
          if (dword_1EB671A40 <= 2) {
            return 4294954387;
          }
          v5 = "delta_poc_s0_minus1_[i] of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "delta_poc_s0_minus1_[i] of %lld is out of range (%lld, %lld)\n");
        }
        else
        {
LABEL_38:
          uint64_t v25 = *(unsigned __int8 *)(a1 + 177);
          if (!*(unsigned char *)(a1 + 177)) {
            return 0;
          }
          CFArrayRef v24 = (unsigned __int16 *)(a1 + 210);
          uint64_t result = 0;
          while (((__int16)*v24 & 0x80000000) == 0)
          {
            ++v24;
            if (!--v25) {
              return result;
            }
          }
          if (dword_1EB671A40 < 3) {
            return 4294954387;
          }
          v5 = "delta_poc_s1_minus1_[i] of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "delta_poc_s1_minus1_[i] of %lld is out of range (%lld, %lld)\n");
        }
        uint64_t v27 = 0;
        uint64_t v28 = 0x7FFFLL;
        uint64_t v26 = *v24;
        goto LABEL_4;
      }
    }
    *(unsigned char *)(a1 + 176) = sub_1D0C4C8F0(a2);
    unsigned __int8 v11 = sub_1D0C4C8F0(a2);
    int v12 = v11;
    *(unsigned char *)(a1 + 177) = v11;
    unsigned int v13 = *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(a3 + 1) + 226);
    int v14 = *(unsigned __int8 *)(a1 + 176);
    if (v14 + v11 > v13)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Number of ref pics exceeds limit: %d + %d > %d\n", v14, v11, v13);
        syslog(27, "Number of ref pics exceeds limit: %d + %d > %d\n");
      }
      return 4294954387;
    }
    *(_WORD *)(a1 + 242) = 0;
    if (v14)
    {
      unint64_t v15 = 0;
      do
      {
        *(_WORD *)(a1 + 178 + 2 * v15) = sub_1D0C5108C(a2);
        *(_WORD *)(a1 + 242) |= (sub_1D0C51880(a2, 1) != 0) << v15++;
      }
      while (v15 < *(unsigned __int8 *)(a1 + 176));
      int v12 = *(unsigned __int8 *)(a1 + 177);
    }
    *(_WORD *)(a1 + 244) = 0;
    if (v12)
    {
      unint64_t v16 = 0;
      do
      {
        *(_WORD *)(a1 + 210 + 2 * v16) = sub_1D0C5108C(a2);
        *(_WORD *)(a1 + 244) |= (sub_1D0C51880(a2, 1) != 0) << v16++;
      }
      while (v16 < *(unsigned __int8 *)(a1 + 177));
    }
    uint64_t v17 = 0;
    goto LABEL_29;
  }
  if (dword_1EB671A40 >= 3)
  {
    v5 = "idx %d > kMaxID %d\n";
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "idx %d > kMaxID %d\n", a4, 64);
    uint64_t v26 = a4;
    uint64_t v27 = 64;
LABEL_4:
    syslog(27, v5, v26, v27, v28);
  }
  return 4294954387;
}

uint64_t sub_1D0C41350(uint64_t a1, char *__s1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!__s1)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 32) = 0;
    return result;
  }
  *(unsigned char *)(a1 + 32) = 1;
  size_t v4 = strnlen(__s1, 0x63uLL) + 1;
  *(void *)(a1 + 24) = v4;
  if (v4 >= 0x64)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Negotiation detail string too long (%lu > %u)\n!", v4, 100);
LABEL_9:
      syslog(27, "Negotiation detail string too long (%lu > %u)\n!", *(void *)(a1 + 24), 100);
      return 4294954386;
    }
    return 4294954386;
  }
  MEMORY[0x1D25EFFB0](a1, __s1);
  size_t v6 = *(void *)(a1 + 24);
  if (v6 >= 0x65)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Negotiation detail string too long (%lu > %u)\n!", *(void *)(a1 + 24), 100);
      goto LABEL_9;
    }
    return 4294954386;
  }
  __lasts = 0;
  uint64_t v7 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v7 = *(const char **)a1;
  }
  uint64_t v8 = strncpy(__dst, v7, v6);
  int v9 = strtok_r(v8, ";", &__lasts);
  if (v9)
  {
    int v10 = v9;
    unint64_t v11 = 0;
    int v12 = __str;
    do
    {
      size_t v13 = strlen(v10);
      if (v13 > 0x13) {
        return 4294954387;
      }
      unint64_t v14 = v11 + 1;
      memcpy(v12, v10, v13 + 1);
      unint64_t v15 = strtok_r(0, ";", &__lasts);
      if (!v15) {
        break;
      }
      int v10 = v15;
      v12 += 20;
    }
    while (v11++ < 0x63);
    uint64_t v17 = __str;
    do
    {
      int v18 = strtok_r(v17, ":", &__lasts);
      if (v18)
      {
        uint64_t v19 = v18;
        if (!strcmp(v18, "LF"))
        {
          *(unsigned char *)(a1 + 40) = 1;
        }
        else
        {
          unsigned int v20 = strtok_r(0, ":", &__lasts);
          if (v20)
          {
            unsigned int v21 = atoi(v20);
            if (v21 <= 0x63)
            {
              __int16 v22 = v21;
              if (!strcmp(v19, "RVRA1"))
              {
                *(unsigned char *)(a1 + 34) = v22;
              }
              else if (!strcmp(v19, "QS"))
              {
                *(unsigned char *)(a1 + 35) = v22;
              }
              else if (!strcmp(v19, "CR"))
              {
                *(unsigned char *)(a1 + 38) = v22;
              }
              else if (!strcmp(v19, "CH"))
              {
                *(_WORD *)(a1 + 36) = v22;
              }
              else if (!strcmp(v19, "CF"))
              {
                *(unsigned char *)(a1 + 39) = v22;
              }
              else if (dword_1EB671A40 >= 3)
              {
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unknown negotiation string option: %s\n", v19);
                syslog(27, "Unknown negotiation string option: %s\n", v19);
              }
            }
          }
        }
      }
      v17 += 20;
      --v14;
    }
    while (v14);
  }
  BOOL v23 = *(unsigned __int8 *)(a1 + 34) != 255
     || *(unsigned __int8 *)(a1 + 35) != 255
     || *(__int16 *)(a1 + 36) != -1
     || *(unsigned __int8 *)(a1 + 38) != 255
     || *(unsigned __int8 *)(a1 + 39) != 255;
  uint64_t result = 0;
  *(unsigned char *)(a1 + 33) = v23;
  return result;
}

void sub_1D0C416BC(__CFDictionary *a1)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  CFNumberRef v2 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v2)
  {
    CFNumberRef v3 = v2;
    values[0] = v2;
    CFArrayRef v4 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E4F1D510]);
    if (v4)
    {
      CFArrayRef v5 = v4;
      CFDictionaryAddValue(a1, (const void *)*MEMORY[0x1E4F24CB0], v4);
      CFRelease(v5);
    }
    CFRelease(v3);
  }
}

uint64_t sub_1D0C41780(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  size_t v6 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v6);
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if (v7)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Session was invalidated");
    }
    uint64_t v8 = 4294954393;
  }
  else
  {
    *(void *)(DerivedStorage + 8) = a2;
    uint64_t v8 = sub_1D0C424A8(DerivedStorage, a3);
    if (v8)
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Invalid/unsupported format\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Invalid/unsupported format\n");
      }
    }
    else
    {
      uint64_t v9 = *(void *)(DerivedStorage + 32);
      *(_DWORD *)(v9 + 192) = *(unsigned __int8 *)(*(void *)(DerivedStorage + 24) + 29) + 1;
      sub_1D0C65A8C(v9, (uint64_t)sub_1D0C618EC, DerivedStorage);
      uint64_t v8 = 0;
    }
  }
  std::mutex::unlock(v6);
  return v8;
}

void sub_1D0C418AC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_1D0C418C4(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t), uint64_t a5, int a6)
{
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = a3;
  a4(a1, a2);
  uint64_t result = operator new(0x48uLL, MEMORY[0x1E4FBA2D0]);
  if (result)
  {
    int v12 = result;
    *uint64_t result = &unk_1F26F1320;
    result[2] = a2;
    result[3] = a3;
    result[4] = 0;
    result[5] = 0;
    result[6] = 0;
    result[7] = a1;
    result[8] = a4;
    *((_DWORD *)result + 2) = a6;
    int v13 = *(_DWORD *)(a1 + 32);
    if (v13 <= a6) {
      int v13 = a6;
    }
    *(_DWORD *)(a1 + 32) = v13;
    uint64_t result = sub_1D0C630E8((uint64_t **)(a1 + 8), a2, &v14);
    result[6] = v12;
  }
  return result;
}

uint64_t sub_1D0C41984(unsigned __int8 *a1, __CFDictionary *a2)
{
  uint64_t v3 = a1[1991];
  unsigned int v4 = a1[201];
  unsigned int v5 = a1[2096];
  if (v5 <= a1[2098]) {
    unsigned int v5 = a1[2098];
  }
  if (v5 <= 8) {
    uint64_t v6 = v5 > 0xA;
  }
  else {
    uint64_t v6 = (v5 > 0xA) + 1;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v8 = Mutable;
    if (!v4)
    {
      int valuePtr = *(_DWORD *)&a800l800l010l01[8 * v6 + 4 * v3];
      CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (!v9) {
        goto LABEL_13;
      }
      CFNumberRef v10 = v9;
      CFArrayAppendValue(v8, v9);
      CFRelease(v10);
      unsigned int v4 = 1;
    }
    int v16 = *(_DWORD *)&a800l800l010l01[24 * v4 + 8 * v6 + 4 * v3];
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v16);
    if (v11)
    {
      CFNumberRef v12 = v11;
      CFArrayAppendValue(v8, v11);
      CFRelease(v12);
      CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F24D70], v8);
      uint64_t v13 = 0;
LABEL_14:
      CFRelease(v8);
      return v13;
    }
LABEL_13:
    uint64_t v13 = 4294954392;
    goto LABEL_14;
  }
  return 4294954392;
}

uint64_t sub_1D0C41AC0(uint64_t a1, uint64_t a2, __CVPixelBufferPool *a3, void *a4)
{
  uint64_t v6 = (char *)operator new(0xC0uLL, MEMORY[0x1E4FBA2D0]);
  if (v6)
  {
    unsigned __int8 v7 = v6;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 8) = 0u;
    *((void *)v6 + 7) = 850045863;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((void *)v6 + 14) = 0;
    *((void *)v6 + 15) = a3;
    *(void *)uint64_t v6 = &unk_1F26F1070;
    *((_DWORD *)v6 + 44) = 0;
    *((void *)v6 + 23) = sub_1D0D4AB88;
    *((void *)v6 + 16) = sub_1D0D27D80;
    *((void *)v6 + 18) = sub_1D0D27D38;
    *((void *)v6 + 20) = sub_1D0D27CF4;
    *((void *)v6 + 21) = sub_1D0D27BC4;
    *((void *)v6 + 17) = sub_1D0D4A208;
    *((void *)v6 + 19) = sub_1D0D4A164;
    CVPixelBufferPoolRetain(a3);
    uint64_t v8 = operator new(0x48uLL, MEMORY[0x1E4FBA2D0]);
    if (v8)
    {
      v8[1] = 0;
      v8[2] = 0;
      *((_WORD *)v8 + 12) = 0;
      *uint64_t v8 = &unk_1F26F1390;
      v8[6] = v7;
      operator new();
    }
    *a4 = 0;
    (*(void (**)(char *))(*(void *)v7 + 8))(v7);
  }
  return 4294954392;
}

void sub_1D0C41F5C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *CFStringRef v1 = &unk_1F26F0FB8;
  unsigned int v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_1D0C4C984(v4);
  }
  MEMORY[0x1D25F0210](v1, MEMORY[0x1E4FBA2D0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C41FDC(int a1)
{
  switch(a1)
  {
    case 0:
      CFStringRef v1 = (uint64_t *)MEMORY[0x1E4F24A38];
      goto LABEL_9;
    case 1:
      CFStringRef v1 = (uint64_t *)MEMORY[0x1E4F24A28];
      goto LABEL_9;
    case 2:
      CFStringRef v1 = (uint64_t *)MEMORY[0x1E4F24A48];
      goto LABEL_9;
    case 3:
      CFStringRef v1 = (uint64_t *)MEMORY[0x1E4F24A40];
      goto LABEL_9;
    case 4:
      CFStringRef v1 = (uint64_t *)MEMORY[0x1E4F24A20];
      goto LABEL_9;
    case 5:
      CFStringRef v1 = (uint64_t *)MEMORY[0x1E4F24A18];
LABEL_9:
      uint64_t result = *v1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1D0C4205C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a1 + 4) = 0;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 6) = 33685509;
  *(unsigned char *)(a1 + 10) = 2;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v6 = (BOOL *)(a1 + 88);
  *(void *)(a1 + 11) = 0;
  *(void *)(a1 + 17) = 0;
  *(void *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (sub_1D0C51880(a2, 1))
  {
    int v7 = sub_1D0C51880(a2, 8);
    if (v7 == 255)
    {
      *(_WORD *)a1 = sub_1D0C51880(a2, 16);
      *(_WORD *)(a1 + 2) = sub_1D0C51880(a2, 16);
    }
    else
    {
      int v8 = v7;
      if (v7 > 16)
      {
        if (dword_1EB671A40 >= 4)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Reserved aspect_ratio_idc %d\n", v7);
          syslog(28, "Reserved aspect_ratio_idc %d\n", v8);
        }
      }
      else
      {
        CFNumberRef v9 = (unsigned __int8 *)&unk_1D0D7FB22 + 2 * v7;
        *(_WORD *)a1 = *v9;
        *(_WORD *)(a1 + 2) = v9[1];
      }
    }
  }
  int v10 = sub_1D0C51880(a2, 1);
  *(unsigned char *)(a1 + 4) = v10 != 0;
  if (v10) {
    *(unsigned char *)(a1 + 5) = sub_1D0C51880(a2, 1) != 0;
  }
  if (sub_1D0C51880(a2, 1))
  {
    *(unsigned char *)(a1 + 6) = sub_1D0C51880(a2, 3);
    *(unsigned char *)(a1 + 7) = sub_1D0C51880(a2, 1) != 0;
    if (sub_1D0C51880(a2, 1))
    {
      *(unsigned char *)(a1 + 8) = sub_1D0C51880(a2, 8);
      *(unsigned char *)(a1 + 9) = sub_1D0C51880(a2, 8);
      *(unsigned char *)(a1 + 10) = sub_1D0C51880(a2, 8);
    }
  }
  if (sub_1D0C51880(a2, 1))
  {
    *(unsigned char *)(a1 + 11) = sub_1D0C4C8F0(a2);
    *(unsigned char *)(a1 + 12) = sub_1D0C4C8F0(a2);
  }
  *(unsigned char *)(a1 + 13) = sub_1D0C51880(a2, 1) != 0;
  *(unsigned char *)(a1 + 14) = sub_1D0C51880(a2, 1) != 0;
  *(unsigned char *)(a1 + 15) = sub_1D0C51880(a2, 1) != 0;
  if (sub_1D0C51880(a2, 1))
  {
    *(_WORD *)(a1 + 16) = sub_1D0C4C8F0(a2);
    *(_WORD *)(a1 + 18) = sub_1D0C4C8F0(a2);
    *(_WORD *)(a1 + 20) = sub_1D0C4C8F0(a2);
    *(_WORD *)(a1 + 22) = sub_1D0C4C8F0(a2);
  }
  int v11 = sub_1D0C51880(a2, 1);
  *(unsigned char *)(a1 + 24) = v11 != 0;
  if (!v11) {
    goto LABEL_24;
  }
  int v12 = sub_1D0C51880(a2, 16);
  *(_DWORD *)(a1 + 28) = sub_1D0C51880(a2, 16) + (v12 << 16);
  int v13 = sub_1D0C51880(a2, 16);
  *(_DWORD *)(a1 + 32) = sub_1D0C51880(a2, 16) + (v13 << 16);
  int v14 = sub_1D0C51880(a2, 1);
  *(unsigned char *)(a1 + 36) = v14 != 0;
  if (v14) {
    *(_DWORD *)(a1 + 40) = sub_1D0C5108C(a2);
  }
  int v15 = sub_1D0C51880(a2, 1);
  *(unsigned char *)(a1 + 44) = v15 != 0;
  if (v15 && (uint64_t v16 = sub_1D0CE841C(a1 + 48, a2, 1, *(unsigned __int8 *)(a3 + 1) + 1), v16))
  {
    uint64_t v17 = v16;
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Error parsing VUI HRD\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Error parsing VUI HRD\n");
    }
  }
  else
  {
LABEL_24:
    int v18 = sub_1D0C51880(a2, 1);
    BOOL *v6 = v18 != 0;
    if (v18)
    {
      *(unsigned char *)(a1 + 89) = sub_1D0C51880(a2, 1) != 0;
      *(unsigned char *)(a1 + 90) = sub_1D0C51880(a2, 1) != 0;
      *(unsigned char *)(a1 + 91) = sub_1D0C51880(a2, 1) != 0;
      *(_DWORD *)(a1 + 92) = sub_1D0C4C8F0(a2);
      *(_DWORD *)(a1 + 96) = sub_1D0C4C8F0(a2);
      *(_DWORD *)(a1 + 100) = sub_1D0C4C8F0(a2);
      *(_DWORD *)(a1 + 104) = sub_1D0C4C8F0(a2);
      uint64_t v17 = 0;
      *(_DWORD *)(a1 + 108) = sub_1D0C4C8F0(a2);
    }
    else
    {
      return 0;
    }
  }
  return v17;
}

uint64_t sub_1D0C424A8(uint64_t a1, CMFormatDescriptionRef desc)
{
  CFPropertyListRef Extension = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension) {
    return 4294954387;
  }
  unsigned int v4 = Extension;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v4)) {
    return 4294954387;
  }
  if (!*(void *)(a1 + 32))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("No decoder, session was invalidated?\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "No decoder, session was invalidated?\n");
    }
    return 4294954393;
  }
  FigFormatDescriptionRelease();
  *(void *)(a1 + 16) = FigFormatDescriptionRetain();
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)v4, @"hvcC");
  if (!Value)
  {
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)v4, @"ftvH");
    if (!Value) {
      return 4294954387;
    }
  }
  CFTypeID v7 = CFArrayGetTypeID();
  if (v7 == CFGetTypeID(Value) && (CFNumberRef Value = CFArrayGetValueAtIndex((CFArrayRef)Value, 0)) == 0
    || (CFTypeID v8 = CFDataGetTypeID(), v8 != CFGetTypeID(Value))
    || CFDataGetLength((CFDataRef)Value) > 3000)
  {
    uint64_t v9 = 4294954387;
    goto LABEL_11;
  }
  __p[0] = 0;
  __p[1] = 0;
  CMVideoDimensions v43 = 0;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  unint64_t v46 = 0;
  BytePtr = (unsigned int *)CFDataGetBytePtr((CFDataRef)Value);
  CFIndex Length = CFDataGetLength((CFDataRef)Value);
  uint64_t v9 = sub_1D0C4CAD0((uint64_t)__p, BytePtr, Length);
  if (!v9)
  {
    uint64_t v9 = sub_1D0C42E68(*(void *)(a1 + 24), (uint64_t)__p);
    if (!v9)
    {
      if (*(unsigned char *)(*(void *)(a1 + 24) + 30))
      {
        int v18 = 0;
        unsigned int v19 = v46;
        unsigned int v20 = HIDWORD(v46);
        unint64_t v21 = 0x1EB671000uLL;
        __int16 v22 = v44;
        unint64_t v23 = v45;
        CFArrayRef v24 = (FILE **)MEMORY[0x1E4F143C8];
        while (1)
        {
          unint64_t v25 = (int)v20 + 1;
          HIDWORD(v46) = v25 & 7;
          uint64_t v26 = (unsigned int *)((char *)v22 + (v25 >> 3));
          uint64_t v44 = v26;
          if ((unint64_t)v26 >= v23)
          {
            if ((unint64_t)v26 > v23) {
              uint64_t v26 = (unsigned int *)v23;
            }
          }
          else
          {
            unsigned int v19 = bswap32(*v26);
          }
          unsigned int v27 = v19 << (v25 & 7);
          unint64_t v28 = (v25 & 7) + 1;
          char v29 = v28 & 7;
          LODWORD(v46) = v27;
          HIDWORD(v46) = v28 & 7;
          uint64_t v30 = (unsigned int *)((char *)v26 + (v28 >> 3));
          uint64_t v44 = v30;
          if ((unint64_t)v30 >= v23)
          {
            if ((unint64_t)v30 > v23) {
              uint64_t v30 = (unsigned int *)v23;
            }
            unsigned int v31 = v27;
          }
          else
          {
            unsigned int v31 = bswap32(*v30);
          }
          unsigned int v32 = v31 << v29;
          LODWORD(v46) = v31 << v29;
          if ((v27 & 0x80000000) != 0 && *(int *)(v21 + 2624) >= 3)
          {
            fwrite("Invalid value for reserved bit\n", 0x1FuLL, 1uLL, *v24);
            syslog(27, "Invalid value for reserved bit\n");
          }
          unint64_t v33 = (v28 & 7) + 6;
          unsigned int v20 = v33 & 7;
          HIDWORD(v46) = v20;
          uint64_t v34 = (unsigned int *)((char *)v30 + (v33 >> 3));
          uint64_t v44 = v34;
          if ((unint64_t)v34 >= v23)
          {
            if ((unint64_t)v34 > v23) {
              uint64_t v34 = (unsigned int *)v23;
            }
          }
          else
          {
            unsigned int v32 = bswap32(*v34);
          }
          unsigned int v35 = v32 << v20;
          LODWORD(v46) = v32 << v20;
          HIDWORD(v46) = v20;
          __int16 v22 = (unsigned int *)((char *)v34 + 2);
          uint64_t v44 = (unsigned int *)((char *)v34 + 2);
          if ((unint64_t)v34 + 2 >= v23)
          {
            if ((unint64_t)v34 + 2 > v23)
            {
              uint64_t v44 = (unsigned int *)v23;
              __int16 v22 = (unsigned int *)v23;
            }
            unsigned int v36 = v32 << v20;
          }
          else
          {
            unsigned int v36 = bswap32(*v22);
          }
          unsigned int v19 = v36 << v20;
          LODWORD(v46) = v19;
          if (v35 >= 0x10000) {
            break;
          }
LABEL_67:
          uint64_t v9 = 0;
          if (++v18 >= *(unsigned __int8 *)(*(void *)(a1 + 24) + 30)) {
            goto LABEL_21;
          }
        }
        unint64_t v37 = v21;
        unsigned int v38 = HIWORD(v35);
        while (1)
        {
          unint64_t v39 = (unsigned int *)((char *)v22 + 2);
          if ((unint64_t)v22 + 2 >= v23)
          {
            if ((unint64_t)v22 + 2 > v23) {
              unint64_t v39 = (unsigned int *)v23;
            }
            unsigned int v40 = v19;
          }
          else
          {
            unsigned int v40 = bswap32(*v39);
          }
          unint64_t v41 = HIWORD(v19);
          if (v23 - (unint64_t)v39 < v41) {
            break;
          }
          if (*(void *)(a1 + 32))
          {
            sub_1D0C46C7C((uint64_t)v47);
            uint64_t v9 = sub_1D0C46D20((uint64_t)v47, (unsigned __int8 *)v39, v41);
            if (v9) {
              goto LABEL_21;
            }
            uint64_t v9 = sub_1D0C42964(*(char **)(a1 + 32), (uint64_t)v47);
            if (v9) {
              goto LABEL_21;
            }
          }
          __int16 v22 = (unsigned int *)((char *)v39 + v41);
          if ((unint64_t)v39 + v41 >= v23)
          {
            unsigned int v19 = v40 << v20;
            if ((unint64_t)v39 + v41 > v23) {
              __int16 v22 = (unsigned int *)v23;
            }
          }
          else
          {
            unsigned int v19 = bswap32(*v22);
          }
          if (!--v38)
          {
            unint64_t v46 = __PAIR64__(v20, v19);
            uint64_t v44 = v22;
            unint64_t v21 = v37;
            CFArrayRef v24 = (FILE **)MEMORY[0x1E4F143C8];
            goto LABEL_67;
          }
        }
        uint64_t v9 = 4294954387;
      }
      else
      {
        uint64_t v9 = 0;
      }
    }
  }
LABEL_21:
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v9)
  {
LABEL_11:
    if (dword_1EB671A40 >= 3)
    {
      int v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = "ProcessHvcC failed\n";
      int v12 = "ProcessHvcC failed\n";
      size_t v13 = 19;
LABEL_13:
      fwrite(v12, v13, 1uLL, v10);
      syslog(27, v11);
      return v9;
    }
    return v9;
  }
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a1 + 16));
  *(_OWORD *)__p = *(_OWORD *)a1;
  CMVideoDimensions v43 = Dimensions;
  uint64_t v9 = sub_1D0C65AFC(*(void *)(a1 + 32), (long long *)__p);
  if (v9 && dword_1EB671A40 >= 3)
  {
    int v10 = (FILE *)*MEMORY[0x1E4F143C8];
    int v11 = "RegisterSession() failed\n";
    int v12 = "RegisterSession() failed\n";
    size_t v13 = 25;
    goto LABEL_13;
  }
  return v9;
}

void sub_1D0C42940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0C42964(char *__s1, uint64_t a2)
{
  unsigned int v4 = (FILE *)*((void *)__s1 + 26);
  if (v4 && __s1[200] && !__s1[240])
  {
    unsigned int v5 = __s1;
    if (__s1[23] < 0) {
      unsigned int v5 = *(const char **)__s1;
    }
    size_t v6 = *((void *)__s1 + 3);
    if (strncmp(v5, "FLS;", 4uLL))
    {
      fwrite("FLS;", 1uLL, 4uLL, v4);
      unsigned int v4 = (FILE *)*((void *)__s1 + 26);
    }
    fwrite(v5, 1uLL, v6, v4);
    __s1[240] = 1;
  }
  if (*(unsigned char *)(a2 + 17))
  {
    if (dword_1EB671A40 >= 6)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Discarding NALU from layer %d\n", *(unsigned __int8 *)(a2 + 17));
      syslog(30, "Discarding NALU from layer %d\n");
    }
    return 0;
  }
  if (*(unsigned __int8 *)(a2 + 16) - 32 > 2)
  {
    if (dword_1EB671A40 >= 4)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Discarding NALU of unknown type %d\n", *(unsigned __int8 *)(a2 + 16));
      syslog(28, "Discarding NALU of unknown type %d\n");
    }
    return 0;
  }
  uint64_t v7 = sub_1D0C46FBC((uint64_t)__s1, a2);
  if (v7)
  {
    uint64_t v8 = v7;
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Dump NALU type %d with error %d", *(unsigned __int8 *)(a2 + 16), v7);
      syslog(27, "Dump NALU type %d with error %d", *(unsigned __int8 *)(a2 + 16), v8);
    }
    return v8;
  }
  int v10 = __s1[306];
  return sub_1D0C47924((uint64_t)(__s1 + 368), a2, v10);
}

uint64_t sub_1D0C42B54(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = 0;
  *(unsigned char *)a1 = a3;
  *(unsigned char *)(a1 + 1) = a4;
  *(_OWORD *)(a1 + 2) = 0u;
  *(_OWORD *)(a1 + 18) = 0u;
  *(unsigned char *)(a1 + 34) = 0;
  *(void *)(a1 + 1600) = 0;
  uint64_t v6 = 40;
  do
  {
    unint64_t v7 = 0;
    if (v5) {
      size_t v8 = 65;
    }
    else {
      size_t v8 = 17;
    }
    uint64_t v9 = v6;
    do
    {
      if (v5) {
        int v10 = (char *)&unk_1D0D7FAA0 + ((v7 > 2) | ((unint64_t)(v7 > 2) << 6));
      }
      else {
        int v10 = (char *)&unk_1D0D7FA8F;
      }
      memcpy((void *)(a1 + v9), v10, v8);
      ++v7;
      v9 += 65;
    }
    while (v7 != 6);
    ++v5;
    v6 += 390;
  }
  while (v5 != 4);
  *(unsigned char *)(a1 + 1608) = 0;
  *(_DWORD *)(a1 + 1636) = 0;
  *(void *)(a1 + 1618) = 0;
  *(void *)(a1 + 1626) = 0;
  *(void *)(a1 + 1610) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1737) = 0u;
  *(_WORD *)(a1 + 1760) = 0;
  *(void *)(a1 + 1768) = a2;
  return a1;
}

uint64_t sub_1D0C42C78(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = 0;
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(void *)(a1 + 172) = 0;
  *(void *)(a1 + 188) = 0;
  *(void *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 11) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_WORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 214) = 0u;
  *(unsigned char *)(a1 + 200) = a3;
  *(_WORD *)(a1 + 201) = 0;
  *(void *)(a1 + 204) = 0;
  *(unsigned char *)(a1 + 212) = 0;
  *(_OWORD *)(a1 + 230) = 0u;
  *(_OWORD *)(a1 + 246) = 0u;
  *(_OWORD *)(a1 + 262) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  uint64_t v5 = 416;
  *(void *)(a1 + 402) = 0;
  *(void *)(a1 + 1976) = 0;
  *(_WORD *)(a1 + 168) = 0;
  do
  {
    unint64_t v6 = 0;
    if (v4) {
      size_t v7 = 65;
    }
    else {
      size_t v7 = 17;
    }
    uint64_t v8 = v5;
    do
    {
      if (v4) {
        uint64_t v9 = (char *)&unk_1D0D7FAA0 + ((v6 > 2) | ((unint64_t)(v6 > 2) << 6));
      }
      else {
        uint64_t v9 = (char *)&unk_1D0D7FA8F;
      }
      memcpy((void *)(a1 + v8), v9, v7);
      ++v6;
      v8 += 65;
    }
    while (v6 != 6);
    ++v4;
    v5 += 390;
  }
  while (v4 != 4);
  *(void *)(a1 + 2064) = 0;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2037) = 0;
  *(_DWORD *)(a1 + 1984) = 0;
  *(_WORD *)(a1 + 1988) = 0;
  *(_DWORD *)(a1 + 1990) = 33685509;
  *(unsigned char *)(a1 + 1994) = 2;
  *(_DWORD *)(a1 + 2024) = 0;
  *(unsigned char *)(a1 + 2028) = 0;
  *(void *)(a1 + 1995) = 0;
  *(void *)(a1 + 2001) = 0;
  *(unsigned char *)(a1 + 2020) = 0;
  *(void *)(a1 + 2012) = 0;
  *(_WORD *)(a1 + 2116) = 0;
  *(void *)(a1 + 2108) = 0;
  *(_WORD *)(a1 + 2128) = 0;
  *(void *)(a1 + 2120) = 0;
  *(_OWORD *)(a1 + 2132) = 0u;
  *(void *)(a1 + 2088) = 0;
  *(_DWORD *)(a1 + 2096) = 0;
  *(void *)(a1 + 2072) = 0;
  *(void *)(a1 + 2080) = 0;
  *(_WORD *)(a1 + 2148) = 1;
  *(void *)(a1 + 2152) = a2;
  return a1;
}

uint64_t sub_1D0C42E68(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = sub_1D0C51880(a2, 8);
  *(unsigned char *)(a1 + 1) = sub_1D0C51880(a2, 2);
  *(unsigned char *)(a1 + 2) = sub_1D0C51880(a2, 1) != 0;
  *(unsigned char *)(a1 + 3) = sub_1D0C51880(a2, 5);
  int v4 = sub_1D0C51880(a2, 16);
  *(_DWORD *)(a1 + 4) = sub_1D0C51880(a2, 16) + (v4 << 16);
  int v5 = sub_1D0C51880(a2, 16);
  uint64_t v6 = sub_1D0C51880(a2, 16) + (v5 << 16);
  *(void *)(a1 + 8) = sub_1D0C51880(a2, 16) | (unint64_t)(v6 << 16);
  *(unsigned char *)(a1 + 16) = sub_1D0C51880(a2, 8);
  int v7 = sub_1D0C51880(a2, 4);
  *(_WORD *)(a1 + 18) = sub_1D0C51880(a2, 12);
  int v8 = sub_1D0C51880(a2, 6);
  *(unsigned char *)(a1 + 20) = sub_1D0C51880(a2, 2);
  int v9 = sub_1D0C51880(a2, 6);
  *(unsigned char *)(a1 + 21) = sub_1D0C51880(a2, 2);
  int v10 = sub_1D0C51880(a2, 5);
  *(unsigned char *)(a1 + 22) = sub_1D0C51880(a2, 3);
  int v11 = sub_1D0C51880(a2, 5);
  *(unsigned char *)(a1 + 23) = sub_1D0C51880(a2, 3);
  *(_WORD *)(a1 + 24) = sub_1D0C51880(a2, 16);
  *(unsigned char *)(a1 + 26) = sub_1D0C51880(a2, 2);
  *(unsigned char *)(a1 + 27) = sub_1D0C51880(a2, 3);
  *(unsigned char *)(a1 + 28) = sub_1D0C51880(a2, 1) != 0;
  *(unsigned char *)(a1 + 29) = sub_1D0C51880(a2, 2);
  *(unsigned char *)(a1 + 30) = sub_1D0C51880(a2, 8);
  if (*(unsigned char *)a1 != 1) {
    return 4294954394;
  }
  unsigned int v12 = *(unsigned __int8 *)(a1 + 29);
  uint64_t result = 4294954394;
  if (v12 <= 3 && v12 != 2)
  {
    uint64_t result = 0;
    BOOL v17 = v11 == 31 && v10 == 31 && v9 == 63 && v8 == 63 && v7 == 15;
    if (!v17 && dword_1EB671A40 >= 3)
    {
      fwrite("Invalid value for a reserved hvcC field\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Invalid value for a reserved hvcC field\n");
      return 0;
    }
  }
  return result;
}

void sub_1D0C430F0(int a1, int a2, int a3, int a4, __CFDictionary **a5)
{
  *a5 = 0;
  sub_1D0C65DAC();
  uint64_t v10 = qword_1EB671A28;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    LODWORD(valuePtr) = a1;
    CFNumberRef v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v12)
    {
      CFNumberRef v13 = v12;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24E10], v12);
      CFRelease(v13);
    }
    LODWORD(valuePtr) = a2;
    CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v14)
    {
      CFNumberRef v15 = v14;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D08], v14);
      CFRelease(v15);
    }
    if (a4)
    {
      LODWORD(valuePtr) = a4;
      CFNumberRef v16 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v16)
      {
        CFNumberRef v17 = v16;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], v16);
        CFRelease(v17);
      }
    }
    uint64_t valuePtr = v10;
    CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v18)
    {
      CFNumberRef v19 = v18;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24C98], v18);
      CFRelease(v19);
    }
    uint64_t valuePtr = v10;
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v20)
    {
      CFNumberRef v21 = v20;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D78], v20);
      CFRelease(v21);
    }
    if (a3)
    {
      unsigned int v22 = ((v10 + 2 * a3 - 1) & -(int)v10) + a1;
      int v23 = a3;
      if (v22 >= 0x400)
      {
        int v23 = a3;
        if ((v22 & 0x3FF) == 0)
        {
          if (v10 >= 0) {
            unint64_t v24 = v10;
          }
          else {
            unint64_t v24 = v10 + 1;
          }
          int v23 = (v24 >> 1) + a3;
        }
      }
      LODWORD(valuePtr) = v23;
      CFNumberRef v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v25)
      {
        CFNumberRef v26 = v25;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24CE0], v25);
        CFRelease(v26);
      }
      LODWORD(valuePtr) = a3;
      CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v27)
      {
        CFNumberRef v28 = v27;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24CF0], v27);
        CFRelease(v28);
      }
      LODWORD(valuePtr) = v23;
      CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v29)
      {
        CFNumberRef v30 = v29;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24CE8], v29);
        CFRelease(v30);
      }
      LODWORD(valuePtr) = a3;
      CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v31)
      {
        CFNumberRef v32 = v31;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24CD0], v31);
        CFRelease(v32);
      }
    }
    sub_1D0C403B0(Mutable);
    sub_1D0C416BC(Mutable);
  }
  *a5 = Mutable;
}

uint64_t sub_1D0C433E8(uint64_t a1, void *a2)
{
  MEMORY[0x1D25EFDD0](&unk_1EB671A30, sub_1D0C66A34);
  if (!qword_1EB671A68) {
    return 4294954392;
  }
  if (!a2) {
    return 0;
  }
  CFTypeRef v3 = CFRetain((CFTypeRef)qword_1EB671A68);
  uint64_t result = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_1D0C43454(unsigned __int8 **a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = sub_1D0C4042C(*a1);
  uint64_t v7 = v6;
  unint64_t v8 = 0x1EB671000uLL;
  if (v6) {
    BOOL v9 = dword_1EB671A40 < 3;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    fwrite("Couldn't activate SPS (unsupported?)\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Couldn't activate SPS (unsupported?)\n");
    return v7;
  }
  if (v6) {
    return v7;
  }
  uint64_t v10 = *a2;
  unint64_t v11 = 0x1EB671000uLL;
  uint64_t v103 = *a2;
  if (!*a2)
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_45;
  }
  CFNumberRef v12 = *a1;
  if ((*a1)[2098] == 8)
  {
    if (v12[2096] == 8) {
      unsigned int v13 = 1;
    }
    else {
      unsigned int v13 = 2;
    }
  }
  else
  {
    unsigned int v13 = 2;
  }
  int v16 = *((_DWORD *)v12 + 534);
  int v17 = *((_DWORD *)v12 + 52);
  int v18 = *((_DWORD *)v12 + 51) - v16;
  int v19 = *((_DWORD *)v12 + 536);
  int v20 = v16 + 71;
  sub_1D0C65DAC();
  uint64_t v21 = qword_1EB671A28;
  unint64_t v22 = (v21 + (uint64_t)(int)((v18 + v20 + 71) * v13) - 1) & -(uint64_t)v21;
  if (v22 >= 0x400 && (v22 & 0x3FF) == 0) {
    v20 += qword_1EB671A28 / v13;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int v24 = v17 - v19;
    LODWORD(valuePtr) = v18;
    CFNumberRef v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v25)
    {
      CFNumberRef v26 = v25;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24E10], v25);
      CFRelease(v26);
    }
    LODWORD(valuePtr) = v24;
    CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v27)
    {
      CFNumberRef v28 = v27;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D08], v27);
      CFRelease(v28);
    }
    uint64_t valuePtr = v21;
    CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v29)
    {
      CFNumberRef v30 = v29;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24C98], v29);
      CFRelease(v30);
    }
    uint64_t valuePtr = v21;
    CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v31)
    {
      CFNumberRef v32 = v31;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D78], v31);
      CFRelease(v32);
    }
    unint64_t v11 = 0x1EB671000;
    if (sub_1D0C41984(*a1, Mutable))
    {
      CFRelease(Mutable);
      CFMutableArrayRef Mutable = 0;
      uint64_t v10 = v103;
      goto LABEL_44;
    }
    LODWORD(valuePtr) = 71;
    CFNumberRef v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v33)
    {
      CFNumberRef v34 = v33;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24CE0], v33);
      CFRelease(v34);
    }
    if (v20)
    {
      LODWORD(valuePtr) = v20;
      CFNumberRef v35 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v35)
      {
        CFNumberRef v36 = v35;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24CE8], v35);
        CFRelease(v36);
      }
    }
    LODWORD(valuePtr) = 71;
    CFNumberRef v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v37)
    {
      CFNumberRef v38 = v37;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24CF0], v37);
      CFRelease(v38);
    }
    if (v19 != -71)
    {
      LODWORD(valuePtr) = v19 + 71;
      CFNumberRef v39 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v39)
      {
        CFNumberRef v40 = v39;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24CD0], v39);
        CFRelease(v40);
      }
    }
    sub_1D0C403B0(Mutable);
    sub_1D0C416BC(Mutable);
  }
  uint64_t v10 = v103;
  unint64_t v11 = 0x1EB671000uLL;
LABEL_44:
  uint64_t v7 = VTDecoderSessionSetPixelBufferAttributes();
  if (v7) {
    goto LABEL_112;
  }
LABEL_45:
  if (a2[1])
  {
    sub_1D0C65DAC();
    unint64_t v41 = *a1;
    uint64_t v42 = a3;
    char v43 = (*a1)[2096] > 8u || v41[2098] > 8u;
    unint64_t v44 = v41[2117] << v43;
    if (*(void *)(v11 + 2600) >= v44) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = *(void *)(v11 + 2600);
    }
    int v47 = *((_DWORD *)v41 + 51);
    int v46 = *((_DWORD *)v41 + 52);
    v48 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    unsigned int v49 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableDictionaryRef v50 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v51 = CFDictionaryCreateMutable(0, 0, v48, v49);
    uint64_t v52 = v51;
    CFMutableDictionaryRef v53 = v50;
    if (v50 && v51)
    {
      unsigned int v54 = (v47 + 15) & 0xFFFFFFF0;
      unsigned int v55 = (v46 + 15) & 0xFFFFFFF0;
      int v56 = *((_DWORD *)a2 + 4);
      BOOL v57 = __OFSUB__(v54, v56);
      int v58 = v54 - v56;
      uint64_t v59 = v45;
      uint64_t v60 = v50;
      a3 = v42;
      unint64_t v8 = 0x1EB671000;
      if (!((v58 < 0) ^ v57 | (v58 == 0)))
      {
        LODWORD(valuePtr) = v58;
        CFNumberRef v61 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v61)
        {
          CFNumberRef v62 = v61;
          CFDictionaryAddValue(v60, (const void *)*MEMORY[0x1E4F24CE8], v61);
          CFRelease(v62);
        }
      }
      int v63 = *((_DWORD *)a2 + 5);
      BOOL v57 = __OFSUB__(v55, v63);
      int v64 = v55 - v63;
      if (!((v64 < 0) ^ v57 | (v64 == 0)))
      {
        LODWORD(valuePtr) = v64;
        CFNumberRef v65 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v65)
        {
          CFNumberRef v66 = v65;
          CFDictionaryAddValue(v60, (const void *)*MEMORY[0x1E4F24CD0], v65);
          CFRelease(v66);
        }
      }
      uint64_t valuePtr = v59;
      CFNumberRef v67 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      if (v67)
      {
        CFNumberRef v68 = v67;
        CFDictionaryAddValue(v60, (const void *)*MEMORY[0x1E4F24C98], v67);
        CFRelease(v68);
      }
      uint64_t valuePtr = v59;
      CFNumberRef v69 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      if (v69)
      {
        CFNumberRef v70 = v69;
        CFDictionaryAddValue(v60, (const void *)*MEMORY[0x1E4F24D78], v69);
        CFRelease(v70);
      }
      uint64_t v7 = sub_1D0C41984(*a1, v60);
      if (!v7)
      {
        LODWORD(valuePtr) = 0xFFFFFFF;
        CFNumberRef v71 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v71)
        {
          CFNumberRef v72 = v71;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F454F8], v71);
          CFRelease(v72);
        }
        LODWORD(valuePtr) = 0xFFFFFFF;
        CFNumberRef v73 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v73)
        {
          CFNumberRef v74 = v73;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F45500], v73);
          CFRelease(v74);
        }
        LODWORD(valuePtr) = 1;
        CFNumberRef v75 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v75)
        {
          CFNumberRef v76 = v75;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F45518], v75);
          CFRelease(v76);
        }
        LODWORD(valuePtr) = 1;
        CFNumberRef v77 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v77)
        {
          CFNumberRef v78 = v77;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F45520], v77);
          CFRelease(v78);
        }
        LODWORD(valuePtr) = 1;
        CFNumberRef v79 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v79)
        {
          CFNumberRef v80 = v79;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F45538], v79);
          CFRelease(v80);
        }
        LODWORD(valuePtr) = 1;
        CFNumberRef v81 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v81)
        {
          CFNumberRef v82 = v81;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F45530], v81);
          CFRelease(v82);
        }
        LODWORD(valuePtr) = 0x7FFFFFFF;
        CFNumberRef v83 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v83)
        {
          CFNumberRef v84 = v83;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F454F0], v83);
          CFRelease(v84);
        }
        LODWORD(valuePtr) = 0x7FFFFFFF;
        CFNumberRef v85 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v85)
        {
          CFNumberRef v86 = v85;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F454E0], v85);
          CFRelease(v86);
        }
        uint64_t valuePtr = 0x7FFFFFFFFFFFFFFFLL;
        CFNumberRef v87 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
        if (v87)
        {
          CFNumberRef v88 = v87;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F454E8], v87);
          CFRelease(v88);
        }
        uint64_t valuePtr = v59;
        CFNumberRef v89 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
        if (v89)
        {
          CFNumberRef v90 = v89;
          CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F45528], v89);
          CFRelease(v90);
        }
        CFDictionaryAddValue(v52, (const void *)*MEMORY[0x1E4F454D8], (const void *)*MEMORY[0x1E4F1CFC8]);
        uint64_t v7 = VTTileDecoderSessionSetTileDecodeRequirements();
      }
    }
    else
    {
      uint64_t v7 = 4294954392;
      uint64_t v60 = v50;
      a3 = v42;
      unint64_t v8 = 0x1EB671000uLL;
      if (!v53) {
        goto LABEL_88;
      }
    }
    CFRelease(v60);
LABEL_88:
    if (v52) {
      CFRelease(v52);
    }
    uint64_t v10 = v103;
    if (v7) {
      goto LABEL_112;
    }
  }
  if (!v10) {
    goto LABEL_105;
  }
  PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool();
  if (!PixelBufferPool)
  {
    if (*(int *)(v8 + 2624) >= 3)
    {
      fwrite("Unable to get CVPixelBufferPool from VideoToolbox\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Unable to get CVPixelBufferPool from VideoToolbox\n");
    }
    uint64_t v7 = 4294954392;
    goto LABEL_112;
  }
  v92 = PixelBufferPool;
  CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(PixelBufferPool);
  CFNumberRef Value = CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E4F24D70]);
  LODWORD(valuePtr) = 0;
  CFTypeID v95 = CFGetTypeID(Value);
  if (v95 == CFArrayGetTypeID()) {
    CFNumberRef Value = CFArrayGetValueAtIndex((CFArrayRef)Value, 0);
  }
  CFTypeID v96 = CFGetTypeID(Value);
  if (v96 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr)) {
    goto LABEL_105;
  }
  unsigned int v97 = (*a1)[2096];
  if (v97 <= (*a1)[2098]) {
    unsigned int v97 = (*a1)[2098];
  }
  uint64_t v98 = v97 <= 0xA ? v97 > 8 : (v97 > 8) + 1;
  int v99 = *(_DWORD *)&a800l800l010l01[24 * (*a1)[201] + 8 * v98 + 4 * (*a1)[1991]];
  int v100 = sub_1D0C50E9C(valuePtr);
  if (v100 != sub_1D0C50E9C(v99))
  {
LABEL_105:
    uint64_t v101 = sub_1D0C401A0((uint64_t)a1, 0, 0, a3);
    if (!v101)
    {
      char v102 = 0;
      goto LABEL_108;
    }
LABEL_106:
    uint64_t v7 = v101;
    goto LABEL_112;
  }
  uint64_t v101 = sub_1D0C41AC0((uint64_t)a1, 0, v92, a3);
  if (v101) {
    goto LABEL_106;
  }
  char v102 = 1;
LABEL_108:
  uint64_t v7 = 0;
  *(unsigned char *)(*a3 + 64) = v102;
LABEL_112:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

uint64_t sub_1D0C43E30(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, __CVBuffer *a6, uint64_t a7, char a8, _DWORD *a9)
{
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v20 = 0;
  CFNumberRef v15 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v15);
  unsigned __int8 v16 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if (v16)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Session was invalidated");
    }
    uint64_t v18 = 4294954393;
  }
  else
  {
    if (CVPixelBufferGetWidth(a6) >= (int)a7 && CVPixelBufferGetHeight(a6) >= a7 >> 32)
    {
      int v17 = malloc_type_calloc(1uLL, 0x30uLL, 0x1020040089D864DuLL);
      v17[3] = a2;
      v17[4] = CVPixelBufferRetain(a6);
      v17[5] = a7;
      sub_1D0C44010(DerivedStorage, (uint64_t)v17, a3, a8, a9, &v20);
    }
    else
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Offset is outside the buffer we got\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Offset is outside the buffer we got\n");
      }
      int v17 = 0;
    }
    if (!v20)
    {
      sub_1D0C61B88((uint64_t)v17);
      VTTileDecoderSessionEmitDecodedTile();
    }
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v15);
  return v18;
}

void sub_1D0C43FF4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C44010(uint64_t a1, uint64_t a2, CMSampleBufferRef sbuf, char a4, _DWORD *a5, unsigned char *a6)
{
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  if (DataBuffer)
  {
    size_t totalLengthOut = 0;
    size_t lengthAtOffsetOut = 0;
    v28[8] = 0;
    *(void *)CFNumberRef v28 = a4 & 1;
    *(_DWORD *)(a2 + 8) = a4 & 1;
    if (*(void *)(a1 + 32))
    {
      unsigned int v13 = DataBuffer;
      uint64_t DataPointer = CMBlockBufferGetDataPointer(DataBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, (char **)&v28[1]);
      if (DataPointer) {
        return DataPointer;
      }
      CFBooleanRef v15 = (const __CFBoolean *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2B8], 0);
      if (v15)
      {
        CFBooleanRef v16 = v15;
        CFTypeID v17 = CFGetTypeID(v15);
        if (v17 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(v16)) {
            *(unsigned char *)(*(void *)(a1 + 32) + 203) = 1;
          }
        }
      }
      FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
      if (CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)(a1 + 16), FormatDescription)
        || (uint64_t v27 = sub_1D0C424A8(a1, FormatDescription), !v27))
      {
        if (lengthAtOffsetOut >= totalLengthOut)
        {
          CFRetain(v13);
          *(void *)(a2 + 16) = v13;
        }
        else
        {
          uint64_t DataPointer = CMBlockBufferCreateContiguous(0, v13, 0, 0, 0, totalLengthOut, 2u, (CMBlockBufferRef *)(a2 + 16));
          if (DataPointer) {
            return DataPointer;
          }
          uint64_t DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a2 + 16), 0, &lengthAtOffsetOut, &totalLengthOut, (char **)&v28[1]);
          if (DataPointer) {
            return DataPointer;
          }
          if (lengthAtOffsetOut < totalLengthOut) {
            return 4294954392;
          }
        }
        *a6 = 1;
        int v20 = *(_DWORD *)(a1 + 1044);
        uint64_t v21 = *(void *)(a1 + 32);
        if (v20 != -1)
        {
          *(unsigned char *)(v21 + 48) = v20;
          *(void *)(v21 + 56) = *(void *)(a1 + 1048);
        }
        uint64_t v22 = sub_1D0C44304(v21, *(unsigned __int16 **)&v28[1], totalLengthOut, a2, *(void *)(a2 + 32), *(void *)(a2 + 40), v28);
        if (v22)
        {
          uint64_t DataPointer = v22;
          if (dword_1EB671A40 >= 3)
          {
            int v23 = (FILE *)*MEMORY[0x1E4F143C8];
            int v24 = "Error decoding picture\n";
            CFNumberRef v25 = "Error decoding picture\n";
            size_t v26 = 23;
LABEL_30:
            fwrite(v25, v26, 1uLL, v23);
            syslog(27, v24);
          }
        }
        else
        {
          uint64_t DataPointer = 0;
          if (v28[0]) {
            *a5 = 1;
          }
        }
      }
      else
      {
        uint64_t DataPointer = v27;
        if (dword_1EB671A40 >= 3)
        {
          int v23 = (FILE *)*MEMORY[0x1E4F143C8];
          int v24 = "Invalid/unsupported format\n";
          CFNumberRef v25 = "Invalid/unsupported format\n";
          size_t v26 = 27;
          goto LABEL_30;
        }
      }
    }
    else
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("No decoder, session was invalidated?\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "No decoder, session was invalidated?\n");
      }
      return 4294954393;
    }
  }
  else
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("No data buffer in sample buffer!\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "No data buffer in sample buffer!\n");
    }
    return 4294954394;
  }
  return DataPointer;
}

uint64_t sub_1D0C44304(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v341 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 200)) {
    sub_1D0C3FEAC(a1 + 248);
  }
  if (!*(void *)(a1 + 224)) {
    sub_1D0C3FD20(v336, *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 324));
  }
  if (*(void *)(a1 + 1960) != *(void *)(a1 + 1952)) {
    goto LABEL_5;
  }
  if ((*(unsigned char *)(a1 + 308) & 2) != 0)
  {
    int v204 = *(_DWORD *)(a1 + 316);
    *(_DWORD *)(a1 + 2392) = v204;
    int v205 = *(_DWORD *)(a1 + 312);
    if (v204 < v205) {
      int v205 = v204;
    }
    if (v204 <= 1) {
      int v12 = 1;
    }
    else {
      int v12 = v205;
    }
  }
  else
  {
    int v12 = 1;
    *(_DWORD *)(a1 + 2392) = 1;
  }
  *(_DWORD *)(a1 + 2392) = v12;
  dispatch_semaphore_t v206 = dispatch_semaphore_create(v12);
  *(void *)(a1 + 2400) = v206;
  if (!v206) {
    goto LABEL_10;
  }
  unint64_t v207 = *(int *)(a1 + 2392);
  v208 = *(uint64_t **)(a1 + 1960);
  v209 = *(uint64_t **)(a1 + 1952);
  unint64_t v210 = v208 - v209;
  if (v207 > v210)
  {
    unint64_t v211 = v207 - v210;
    uint64_t v212 = *(void *)(a1 + 1968);
    if (v207 - v210 > (v212 - (uint64_t)v208) >> 3)
    {
      if ((v207 & 0x80000000) != 0) {
        sub_1D0C8D71C();
      }
      uint64_t v213 = v212 - (void)v209;
      if (v213 >> 2 > v207) {
        unint64_t v207 = v213 >> 2;
      }
      if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v214 = v207;
      }
      if (v214 >> 61) {
        sub_1D0C6AC2C();
      }
      v215 = (char *)operator new(8 * v214);
      v216 = &v215[8 * v210];
      v217 = &v215[8 * v214];
      bzero(v216, 8 * v211);
      v218 = &v216[8 * v211];
      while (v208 != v209)
      {
        uint64_t v219 = *--v208;
        uint64_t *v208 = 0;
        *((void *)v216 - 1) = v219;
        v216 -= 8;
      }
      long long v222 = *(_OWORD *)(a1 + 1952);
      *(void *)(a1 + 1952) = v216;
      *(void *)(a1 + 1960) = v218;
      *(void *)(a1 + 1968) = v217;
      v223 = (uint64_t *)*((void *)&v222 + 1);
      v224 = (uint64_t *)v222;
      while (v223 != v224)
        sub_1D0C4703C(--v223, 0);
      if (v224) {
        operator delete(v224);
      }
      v221 = *(uint64_t **)(a1 + 1960);
      goto LABEL_436;
    }
    bzero(*(void **)(a1 + 1960), 8 * v211);
    v221 = &v208[v211];
    goto LABEL_428;
  }
  if (v207 < v210)
  {
    v221 = &v209[v207];
    while (v208 != v221)
      sub_1D0C4703C(--v208, 0);
LABEL_428:
    *(void *)(a1 + 1960) = v221;
    goto LABEL_436;
  }
  v221 = *(uint64_t **)(a1 + 1960);
LABEL_436:
  for (i = *(uint64_t **)(a1 + 1952); i != v221; ++i)
  {
    v226 = (char *)operator new(0xD80uLL, (std::align_val_t)0x40uLL);
    *((_WORD *)v226 + 272) = 0;
    v226[546] = 1;
    *(_OWORD *)(v226 + 552) = 0u;
    *(_OWORD *)(v226 + 568) = 0u;
    *(_OWORD *)(v226 + 584) = 0u;
    *(_OWORD *)(v226 + 600) = 0u;
    *(_OWORD *)(v226 + 616) = 0u;
    *(_OWORD *)(v226 + 632) = 0u;
    *(_OWORD *)(v226 + 648) = 0u;
    *(_OWORD *)(v226 + 664) = 0u;
    *(_OWORD *)(v226 + 680) = 0u;
    *(_OWORD *)(v226 + 696) = 0u;
    *(_OWORD *)(v226 + 712) = 0u;
    *(_OWORD *)(v226 + 728) = 0u;
    *(_OWORD *)(v226 + 744) = 0u;
    *(_OWORD *)(v226 + 760) = 0u;
    *(_OWORD *)(v226 + 776) = 0u;
    *(_OWORD *)(v226 + 792) = 0u;
    *(_OWORD *)(v226 + 808) = 0u;
    *(_OWORD *)(v226 + 824) = 0u;
    *(_OWORD *)(v226 + 840) = 0u;
    *(_OWORD *)(v226 + 856) = 0u;
    *(_OWORD *)(v226 + 872) = 0u;
    *(_OWORD *)(v226 + 888) = 0u;
    *(_OWORD *)(v226 + 904) = 0u;
    *(_OWORD *)(v226 + 920) = 0u;
    *(_OWORD *)(v226 + 936) = 0u;
    *((void *)v226 + 166) = 0;
    *((_WORD *)v226 + 646) = 256;
    *((void *)v226 + 160) = 0;
    *((void *)v226 + 159) = 0;
    *((_OWORD *)v226 + 81) = 0u;
    *((_OWORD *)v226 + 82) = 0u;
    *((void *)v226 + 217) = 0;
    *((void *)v226 + 219) = 0;
    *((void *)v226 + 218) = 0;
    *((void *)v226 + 241) = 850045863;
    *((_OWORD *)v226 + 121) = 0u;
    *((_OWORD *)v226 + 122) = 0u;
    *((_OWORD *)v226 + 123) = 0u;
    *((void *)v226 + 248) = 0;
    *((void *)v226 + 249) = 1018212795;
    *((void *)v226 + 254) = 0;
    *((_OWORD *)v226 + 126) = 0u;
    *((_OWORD *)v226 + 125) = 0u;
    *((_DWORD *)v226 + 481) = 0;
    bzero(v226 + 2160, 0x500uLL);
    *((_OWORD *)v226 + 131) = 0u;
    *((_OWORD *)v226 + 130) = 0u;
    *((_OWORD *)v226 + 129) = 0u;
    *(_OWORD *)(v226 + 2120) = 0u;
    *(_OWORD *)(v226 + 2136) = 0u;
    atomic_store(0, (unsigned __int8 *)v226 + 3440);
    *((void *)v226 + 257) = a1;
    *((void *)v226 + 431) = dispatch_get_global_queue(*(int *)(a1 + 324), 0);
    sub_1D0C4703C(i, (uint64_t)v226);
  }
LABEL_5:
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 2400), 0xFFFFFFFFFFFFFFFFLL);
  for (j = *(unsigned int ***)(a1 + 1952); ; ++j)
  {
    if (j == *(unsigned int ***)(a1 + 1960))
    {
      *(unsigned char *)(a1 + 200) = 0;
      *(unsigned char *)(a1 + 203) = 0;
LABEL_10:
      if (dword_1EB671A40 >= 3)
      {
        fwrite("!! Didn't decode frame !!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "!! Didn't decode frame !!\n");
      }
      v336[0] = 0;
      v336[1] = 0;
      sub_1D0C614DC(a1, a4, 4294954385, (uint64_t *)v336);
      if (v336[1]) {
        sub_1D0C4C984((std::__shared_weak_count *)v336[1]);
      }
      return 4294954385;
    }
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)*j + 3440);
    if ((v10 & 1) == 0) {
      break;
    }
  }
  unsigned int v13 = *j;
  uint64_t v14 = *((void *)*j + 257);
  sub_1D0C46C7C((uint64_t)&v323);
  if ((*(unsigned char *)(v14 + 308) & 2) == 0 || *(unsigned __int8 *)(*((void *)v13 + 257) + 34) != 255) {
    *a7 = 0;
  }
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)v13 + 3440);
  if (v15)
  {
    uint64_t v220 = *((void *)v13 + 257);
    v336[0] = 0;
    v336[1] = 0;
    sub_1D0C614DC(v220, a4, 4294954385, (uint64_t *)v336);
    if (v336[1]) {
      sub_1D0C4C984((std::__shared_weak_count *)v336[1]);
    }
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Attempting to decode a second frame on the same FrameDec!!\n", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Attempting to decode a second frame on the same FrameDec!!\n");
    }
    uint64_t v11 = 4294954385;
    goto LABEL_452;
  }
  atomic_store(1u, (unsigned __int8 *)v13 + 3440);
  if (a2) {
    unint64_t v16 = (unint64_t)a2 + a3;
  }
  else {
    unint64_t v16 = 0;
  }
  *(void *)unsigned int v13 = a4;
  v13[528] = 0;
  uint64_t v17 = *((void *)v13 + 257);
  *((_WORD *)v13 + 1024) = *(_WORD *)(v17 + 201);
  *(unsigned char *)(v17 + 201) = 0;
  while (2)
  {
    uint64_t v18 = *(unsigned int *)(v17 + 192);
    if ((v18 - 1) < 2 || v18 == 4)
    {
      int v20 = (char *)a2 + v18;
      if ((unint64_t)a2 + v18 + 2 >= v16) {
        goto LABEL_440;
      }
      LODWORD(v21) = 0;
      do
      {
        unsigned int v22 = *(unsigned __int8 *)a2;
        a2 = (unsigned __int16 *)((char *)a2 + 1);
        uint64_t v21 = v22 | (v21 << 8);
        --v18;
      }
      while (v18);
      if (v21 < 2 || (uint64_t)(v16 - (void)v20) < v21) {
        goto LABEL_474;
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v323 + 16))(&v323, v20, v21);
      a2 = (unsigned __int16 *)&v20[v21];
      if (v11) {
        break;
      }
      goto LABEL_39;
    }
    if (v18)
    {
      if (dword_1EB671A40 < 3) {
        goto LABEL_450;
      }
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid naluSizeLength %u - must be 1, 2, 4!\n", v18);
      syslog(27, "Invalid naluSizeLength %u - must be 1, 2, 4!\n", v18);
LABEL_474:
      uint64_t v11 = 4294954387;
      goto LABEL_475;
    }
    CFNumberRef v25 = (unsigned __int8 *)(a2 + 1);
    if ((unint64_t)(a2 + 1) >= v16) {
      goto LABEL_440;
    }
    unsigned __int16 v26 = __rev16(*a2);
    while (1)
    {
      int v27 = *v25 | (v26 << 8);
      if (v27 == 1) {
        break;
      }
      ++v25;
      unsigned __int16 v26 = v27;
      if ((unint64_t)v25 >= v16) {
        goto LABEL_440;
      }
    }
    CFNumberRef v28 = v25 + 1;
    a2 = sub_1D0D7DCCC((uint64_t)(v25 + 1), v16);
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *, int64_t))(v323 + 16))(&v323, v28, (char *)a2 - (char *)v28);
    if (!v11)
    {
LABEL_39:
      if (v326)
      {
        if (dword_1EB671A40 >= 6)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Ignoring NALU from layer %d\n", v326);
          syslog(30, "Ignoring NALU from layer %d\n", v326);
        }
        goto LABEL_46;
      }
      int v24 = v325;
      if (v325 <= 0x15u && ((1 << v325) & 0x3F03FF) != 0)
      {
        uint64_t v11 = sub_1D0C4A50C((uint64_t)v13, (uint64_t)&v323, a5, a6);
        if (v11) {
          goto LABEL_451;
        }
        uint64_t v11 = sub_1D0C46FBC(*((void *)v13 + 257), (uint64_t)&v323);
        if (v11)
        {
          if (dword_1EB671A40 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Dump Slice NALU: error %d", v11);
            syslog(27, "Dump Slice NALU: error %d", v11);
          }
          goto LABEL_451;
        }
LABEL_46:
        uint64_t v17 = *((void *)v13 + 257);
        continue;
      }
      switch(v325)
      {
        case ' ':
        case '!':
        case '""':
          uint64_t v11 = sub_1D0C42964(*((char **)v13 + 257), (uint64_t)&v323);
          if (v11) {
            goto LABEL_451;
          }
          goto LABEL_382;
        case '#':
        case '&':
          goto LABEL_383;
        case '$':
        case '%':
          *(unsigned char *)(*((void *)v13 + 257) + 201) = 1;
          goto LABEL_382;
        case '\'':
        case '(':
          uint64_t v29 = v324;
          if (*(unsigned __int8 *)(v324 + 2) == 255) {
            int v30 = -1;
          }
          else {
            int v30 = *(unsigned __int8 *)(v324 + 2);
          }
          if (v30 <= 131)
          {
            if (v30)
            {
              if (v30 != 1)
              {
                if (v30 != 5) {
                  goto LABEL_95;
                }
                if (v327 <= 0x5B)
                {
                  *(void *)&long long __p = 0;
                  v335 = 0;
                  unint64_t v31 = off_1EB671A70(v336, v324, v327);
                  if (!sub_1D0D64D24(&v337, (uint64_t)v336, v31, &__p, (uint64_t *)&v335)
                    && v337 == 5
                    && (unint64_t)v335 >= 0x10
                    && (unint64_t)v335 <= 0x3D)
                  {
                    uint64_t v91 = 0;
                    while (*((unsigned __int8 *)&xmmword_1D0DAE620 + v91) == *(unsigned __int8 *)(__p + v91))
                    {
                      if (++v91 == 16)
                      {
                        v92 = v335 - 4;
                        if (v335 != (unsigned int *)16)
                        {
                          v93 = 0;
                          uint64_t v94 = __p + 16;
                          do
                          {
                            *((unsigned char *)v93 + (void)&v337 + 4) = byte_1D0DAE630[v93 & 7] ^ *((unsigned char *)v93 + v94);
                            v93 = (unsigned int *)((char *)v93 + 1);
                          }
                          while (v92 != v93);
                        }
                        *((unsigned char *)&v337 + (void)v92 + 4) = 0;
                        if (*(unsigned char *)(*((void *)v13 + 257) + 306))
                        {
                          if (dword_1EB671A40 >= 6)
                          {
                            CFTypeID v95 = (FILE *)*MEMORY[0x1E4F143C8];
                            fwrite("=========== SEI User Data ===========\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                            if (dword_1EB671A40 >= 6) {
                              fprintf(v95, "  message: %s\n");
                            }
                          }
                        }
                        goto LABEL_381;
                      }
                    }
                  }
                }
                if (dword_1EB671A40 >= 6)
                {
                  fwrite("Ignoring user data SEI of unknown type\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                  syslog(30, "Ignoring user data SEI of unknown type\n");
                }
                goto LABEL_381;
              }
              BYTE12(__p) = 0;
              *(void *)((char *)&__p + 4) = 0;
              uint64_t v329 = -1;
              uint64_t v330 = -1;
              LOBYTE(v331) = 0;
              HIDWORD(v331) = -1;
              uint64_t v43 = *((void *)v13 + 257);
              v337 = 0;
              long long v338 = 0uLL;
              long long v340 = 0uLL;
              *((void *)&v339 + 1) = 0;
              if (v327 <= 0x51)
              {
                unint64_t v60 = off_1EB671A70(v336, v324, v327);
                unint64_t v334 = 0;
                v335 = 0;
                int v45 = sub_1D0D64D24(&__p, (uint64_t)v336, v60, &v335, (uint64_t *)&v334);
                if (!v45)
                {
                  int v45 = -12909;
                  if (__p == 1)
                  {
                    if (v334)
                    {
                      int v45 = sub_1D0C4CAD0((uint64_t)&v337, v335, v334);
                      if (!v45)
                      {
                        CFNumberRef v61 = *(unsigned char **)(v43 + 624);
                        if (v61)
                        {
                          if (!v61[398] || !v61[2028]) {
                            goto LABEL_370;
                          }
                          if (v61[1999])
                          {
                            unint64_t v62 = SHIDWORD(v340) + 4;
                            int v63 = (unsigned int *)(*((void *)&v339 + 1) + (v62 >> 3));
                            if ((unint64_t)v63 >= (unint64_t)v340)
                            {
                              if ((unint64_t)v63 > (unint64_t)v340) {
                                int v63 = (unsigned int *)v340;
                              }
                              unsigned int v64 = DWORD2(v340);
                            }
                            else
                            {
                              unsigned int v64 = bswap32(*v63);
                            }
                            unsigned int v118 = v64 << (v62 & 7);
                            DWORD1(__p) = DWORD2(v340) >> 28;
                            unint64_t v119 = (v62 & 7) + 2;
                            v120 = (unsigned int *)((char *)v63 + (v119 >> 3));
                            if ((unint64_t)v120 >= (unint64_t)v340)
                            {
                              if ((unint64_t)v120 > (unint64_t)v340) {
                                v120 = (unsigned int *)v340;
                              }
                              unsigned int v121 = v118;
                            }
                            else
                            {
                              unsigned int v121 = bswap32(*v120);
                            }
                            int v122 = v121 << (v119 & 7);
                            DWORD2(__p) = v118 >> 30;
                            unint64_t v123 = (v119 & 7) + 1;
                            DWORD2(v340) = v122;
                            HIDWORD(v340) = v123 & 7;
                            v124 = (unsigned int *)((char *)v120 + (v123 >> 3));
                            *((void *)&v339 + 1) = v124;
                            if ((unint64_t)v124 >= (unint64_t)v340)
                            {
                              if ((unint64_t)v124 > (unint64_t)v340) {
                                *((void *)&v339 + 1) = v340;
                              }
                              unsigned int v125 = v122;
                            }
                            else
                            {
                              unsigned int v125 = bswap32(*v124);
                            }
                            DWORD2(v340) = v125 << (v123 & 7);
                            BYTE12(__p) = v122 < 0;
                          }
                          if (!v61[2032] && !v61[2033]) {
                            goto LABEL_370;
                          }
                          uint64_t v126 = v61[2043];
                          unint64_t v127 = v126 + SHIDWORD(v340) + 1;
                          v128 = (unsigned int *)(*((void *)&v339 + 1) + (v127 >> 3));
                          if ((unint64_t)v128 >= (unint64_t)v340)
                          {
                            if ((unint64_t)v128 > (unint64_t)v340) {
                              v128 = (unsigned int *)v340;
                            }
                            unsigned int v129 = DWORD2(v340);
                          }
                          else
                          {
                            unsigned int v129 = bswap32(*v128);
                          }
                          unsigned int v130 = v129 << (v127 & 7);
                          LODWORD(v329) = DWORD2(v340) >> ~(_BYTE)v126;
                          uint64_t v131 = v61[2044];
                          unint64_t v132 = v131 + (v127 & 7) + 1;
                          v133 = (unsigned int *)((char *)v128 + (v132 >> 3));
                          if ((unint64_t)v133 >= (unint64_t)v340)
                          {
                            if ((unint64_t)v133 > (unint64_t)v340) {
                              v133 = (unsigned int *)v340;
                            }
                            unsigned int v134 = v130;
                          }
                          else
                          {
                            unsigned int v134 = bswap32(*v133);
                          }
                          unsigned int v135 = v134 << (v132 & 7);
                          DWORD2(v340) = v135;
                          HIDWORD(v329) = v130 >> ~(_BYTE)v131;
                          if (!v61[2034]) {
                            goto LABEL_370;
                          }
                          uint64_t v136 = v61[2038];
                          unint64_t v137 = v136 + (v132 & 7) + 1;
                          HIDWORD(v340) = v137 & 7;
                          v138 = (unsigned int *)((char *)v133 + (v137 >> 3));
                          *((void *)&v339 + 1) = v138;
                          if ((unint64_t)v138 >= (unint64_t)v340)
                          {
                            if ((unint64_t)v138 > (unint64_t)v340) {
                              *((void *)&v339 + 1) = v340;
                            }
                            unsigned int v139 = v135;
                          }
                          else
                          {
                            unsigned int v139 = bswap32(*v138);
                          }
                          DWORD2(v340) = v139 << (v137 & 7);
                          LODWORD(v330) = v135 >> ~(_BYTE)v136;
                          if (!v61[2037]) {
                            goto LABEL_370;
                          }
                          int v313 = sub_1D0C4C8F0((uint64_t)&v337);
                          HIDWORD(v330) = v313;
                          int v140 = DWORD2(v340);
                          unint64_t v141 = SHIDWORD(v340) + 1;
                          HIDWORD(v340) = v141 & 7;
                          v142 = (unsigned int *)(*((void *)&v339 + 1) + (v141 >> 3));
                          *((void *)&v339 + 1) = v142;
                          if ((unint64_t)v142 >= (unint64_t)v340)
                          {
                            unsigned int v143 = DWORD2(v340);
                            if ((unint64_t)v142 > (unint64_t)v340)
                            {
                              *((void *)&v339 + 1) = v340;
                              v142 = (unsigned int *)v340;
                              unsigned int v143 = DWORD2(v340);
                            }
                          }
                          else
                          {
                            unsigned int v143 = bswap32(*v142);
                          }
                          unsigned int v189 = v143 << (v141 & 7);
                          DWORD2(v340) = v189;
                          LOBYTE(v331) = v140 < 0;
                          if (v140 < 0)
                          {
                            uint64_t v190 = v61[2042];
                            unint64_t v191 = v190 + (v141 & 7) + 1;
                            HIDWORD(v340) = v191 & 7;
                            v192 = (unsigned int *)((char *)v142 + (v191 >> 3));
                            *((void *)&v339 + 1) = v192;
                            if ((unint64_t)v192 >= (unint64_t)v340)
                            {
                              if ((unint64_t)v192 > (unint64_t)v340) {
                                *((void *)&v339 + 1) = v340;
                              }
                              unsigned int v193 = v189;
                            }
                            else
                            {
                              unsigned int v193 = bswap32(*v192);
                            }
                            DWORD2(v340) = v193 << (v191 & 7);
                            HIDWORD(v331) = v189 >> ~(_BYTE)v190;
                          }
                          if ((v313 & 0x80000000) == 0)
                          {
                            int v194 = 0;
                            do
                            {
                              sub_1D0C4C8F0((uint64_t)&v337);
                              if ((v140 & 0x80000000) == 0 && v194 < v313)
                              {
                                unsigned int v195 = DWORD2(v340);
                                unint64_t v196 = v61[2036] + (uint64_t)SHIDWORD(v340) + 1;
                                char v197 = v196 & 7;
                                HIDWORD(v340) = v196 & 7;
                                v198 = (unsigned int *)(*((void *)&v339 + 1) + (v196 >> 3));
                                *((void *)&v339 + 1) = v198;
                                if ((unint64_t)v198 >= (unint64_t)v340)
                                {
                                  if ((unint64_t)v198 > (unint64_t)v340) {
                                    *((void *)&v339 + 1) = v340;
                                  }
                                }
                                else
                                {
                                  unsigned int v195 = bswap32(*v198);
                                }
                                DWORD2(v340) = v195 << v197;
                              }
                              int v45 = 0;
                              ++v194;
                            }
                            while (v313 + 1 != v194);
                          }
                          else
                          {
LABEL_370:
                            int v45 = 0;
                          }
                        }
                        else
                        {
                          if (dword_1EB671A40 >= 4)
                          {
                            fwrite("Our pic timing SEI parsing assumes active SPS is ID 0, but that wasn't found\n", 0x4DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                            syslog(28, "Our pic timing SEI parsing assumes active SPS is ID 0, but that wasn't found\n");
                          }
                          int v45 = -12909;
                        }
                      }
                    }
                  }
                }
                unint64_t v44 = v337;
              }
              else
              {
                unint64_t v44 = 0;
                int v45 = -12909;
              }
              if (v44) {
                operator delete(v44);
              }
              if (!v45)
              {
                if (*(unsigned char *)(*((void *)v13 + 257) + 306))
                {
                  if (dword_1EB671A40 >= 6)
                  {
                    v203 = (FILE *)*MEMORY[0x1E4F143C8];
                    fwrite("=========== SEI Pic Timing ===========\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                    if (dword_1EB671A40 >= 6)
                    {
                      fprintf(v203, "    %-42s : %lld\n", "pic_struct", SDWORD1(__p));
                      if (dword_1EB671A40 >= 6)
                      {
                        fprintf(v203, "    %-42s : %lld\n", "source_scan_type", SDWORD2(__p));
                        if (dword_1EB671A40 >= 6)
                        {
                          fprintf(v203, "    %-42s : %lld\n", "duplicate_flag", BYTE12(__p));
                          if (dword_1EB671A40 >= 6)
                          {
                            fprintf(v203, "    %-42s : %lld\n", "au_cpb_removal_delay_minus1", (int)v329);
                            if (dword_1EB671A40 >= 6)
                            {
                              fprintf(v203, "    %-42s : %lld\n", "pic_dpb_output_delay", SHIDWORD(v329));
                              if (dword_1EB671A40 >= 6)
                              {
                                fprintf(v203, "    %-42s : %lld\n", "pic_dpb_output_du_delay", (int)v330);
                                if (dword_1EB671A40 >= 6)
                                {
                                  fprintf(v203, "    %-42s : %lld\n", "num_decoding_units_minus1", SHIDWORD(v330));
                                  if (dword_1EB671A40 >= 6)
                                  {
                                    fprintf(v203, "    %-42s : %lld\n", "du_common_cpb_removal_delay_flag", v331);
                                    if (dword_1EB671A40 >= 6) {
                                      fprintf(v203, "    %-42s : %lld\n");
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_381;
              }
              goto LABEL_375;
            }
            WORD2(v336[0]) = -1;
            *(void **)((char *)v336 + 6) = 0;
            *(void **)((char *)&v336[1] + 4) = 0;
            memset((char *)&v336[2] + 4, 255, 0x400uLL);
            uint64_t v36 = *((void *)v13 + 257);
            long long __p = 0uLL;
            uint64_t v329 = 0;
            v332 = 0;
            unint64_t v333 = 0;
            v331 = 0;
            if (v327 > 0x51)
            {
              CFNumberRef v37 = 0;
              int v38 = -12909;
              goto LABEL_106;
            }
            unint64_t v49 = off_1EB671A70(&v337, v324, v327);
            unint64_t v334 = 0;
            v335 = 0;
            int v38 = sub_1D0D64D24(v336, (uint64_t)&v337, v49, &v335, (uint64_t *)&v334);
            if (!v38)
            {
              int v38 = -12909;
              if (!LODWORD(v336[0]))
              {
                if (v334)
                {
                  int v38 = sub_1D0C4CAD0((uint64_t)&__p, v335, v334);
                  if (!v38)
                  {
                    int v82 = sub_1D0C4C8F0((uint64_t)&__p);
                    WORD2(v336[0]) = v82;
                    if ((v82 << 16) <= 0xF0000) {
                      CFNumberRef v83 = (uint64_t *)(v36 + 16 * (__int16)v82 + 624);
                    }
                    else {
                      CFNumberRef v83 = (uint64_t *)(v36 + 1920);
                    }
                    uint64_t v84 = *v83;
                    if (v84)
                    {
                      if (*(unsigned char *)(v84 + 398) && *(unsigned char *)(v84 + 2028))
                      {
                        int v85 = *(unsigned __int8 *)(v84 + 2034);
                        if (*(unsigned char *)(v84 + 2034))
                        {
                          unsigned int v86 = BYTE6(v336[0]);
                          int v87 = v333;
                          unsigned int v88 = HIDWORD(v333);
                          CFNumberRef v90 = v331;
                          CFNumberRef v89 = v332;
                        }
                        else
                        {
                          unsigned int v115 = v333;
                          unint64_t v116 = SHIDWORD(v333) + 1;
                          CFNumberRef v89 = v332;
                          CFNumberRef v90 = (unsigned int *)((char *)v331 + (v116 >> 3));
                          if (v90 >= v332)
                          {
                            if (v90 > v332) {
                              CFNumberRef v90 = v332;
                            }
                            unsigned int v117 = v333;
                          }
                          else
                          {
                            unsigned int v117 = bswap32(*v90);
                          }
                          unsigned int v88 = v116 & 7;
                          int v87 = v117 << (v116 & 7);
                          LODWORD(v333) = v87;
                          unsigned int v86 = v115 >> 31;
                          BYTE6(v336[0]) = v86;
                        }
                        if (v86)
                        {
                          uint64_t v144 = *(unsigned __int8 *)(v84 + 2043);
                          unint64_t v145 = v144 + (int)v88 + 1;
                          HIDWORD(v333) = v145 & 7;
                          v146 = (unsigned int *)((char *)v90 + (v145 >> 3));
                          v331 = v146;
                          if (v146 >= v89)
                          {
                            if (v146 > v89) {
                              v146 = v89;
                            }
                            unsigned int v147 = v87;
                          }
                          else
                          {
                            unsigned int v147 = bswap32(*v146);
                          }
                          unsigned int v148 = v87 >> ~(_BYTE)v144;
                          unsigned int v149 = v147 << (v145 & 7);
                          HIDWORD(v336[1]) = v148;
                          uint64_t v150 = *(unsigned __int8 *)(v84 + 2038);
                          unint64_t v151 = v150 + (v145 & 7) + 1;
                          unsigned int v88 = v151 & 7;
                          unint64_t v333 = __PAIR64__(v88, v149);
                          CFNumberRef v90 = (unsigned int *)((char *)v146 + (v151 >> 3));
                          v331 = v90;
                          if (v90 >= v89)
                          {
                            if (v90 > v89) {
                              CFNumberRef v90 = v89;
                            }
                            unsigned int v152 = v149;
                          }
                          else
                          {
                            unsigned int v152 = bswap32(*v90);
                          }
                          unsigned int v153 = v149 >> ~(_BYTE)v150;
                          int v87 = v152 << v88;
                          LODWORD(v333) = v152 << v88;
                          LODWORD(v336[2]) = v153;
                        }
                        unint64_t v154 = (int)v88 + 1;
                        HIDWORD(v333) = v154 & 7;
                        v155 = (unsigned int *)((char *)v90 + (v154 >> 3));
                        v331 = v155;
                        if (v155 >= v89)
                        {
                          if (v155 > v89) {
                            v155 = v89;
                          }
                          unsigned int v156 = v87;
                        }
                        else
                        {
                          unsigned int v156 = bswap32(*v155);
                        }
                        unsigned int v157 = v156 << (v154 & 7);
                        HIBYTE(v336[0]) = v87 < 0;
                        uint64_t v158 = *(unsigned __int8 *)(v84 + 2043);
                        unint64_t v159 = v158 + (v154 & 7) + 1;
                        unsigned int v160 = v159 & 7;
                        unint64_t v333 = __PAIR64__(v160, v157);
                        v161 = (unsigned int *)((char *)v155 + (v159 >> 3));
                        v331 = v161;
                        if (v161 >= v89)
                        {
                          if (v161 > v89) {
                            v161 = v89;
                          }
                          unsigned int v162 = v157;
                        }
                        else
                        {
                          unsigned int v162 = bswap32(*v161);
                        }
                        uint64_t v163 = 0;
                        unsigned int v164 = v162 << v160;
                        LODWORD(v333) = v162 << v160;
                        LODWORD(v336[1]) = v157 >> ~(_BYTE)v158;
                        int v165 = v85 | v86;
                        char v166 = 1;
                        while (1)
                        {
                          char v167 = v166;
                          if ((v166 & 1) == 0) {
                            break;
                          }
                          if (*(unsigned char *)(v84 + 2032)) {
                            goto LABEL_322;
                          }
LABEL_346:
                          char v166 = 0;
                          int v38 = 0;
                          uint64_t v163 = 1;
                          if ((v167 & 1) == 0) {
                            goto LABEL_105;
                          }
                        }
                        if (!*(unsigned char *)(v84 + 2033)) {
                          goto LABEL_348;
                        }
LABEL_322:
                        uint64_t v168 = *(unsigned __int8 *)(v84 + 2042);
                        uint64_t v169 = v168 + 1;
                        char v170 = 31 - v168;
                        uint64_t v171 = *(unsigned __int16 *)(*(void *)(v84 + 2048) + 6) + 1;
                        v172 = (_DWORD *)v336 + v163;
                        do
                        {
                          unint64_t v173 = v169 + v160;
                          HIDWORD(v333) = v173 & 7;
                          v174 = (unsigned int *)((char *)v161 + (v173 >> 3));
                          v331 = v174;
                          if (v174 >= v89)
                          {
                            if (v174 > v89) {
                              v174 = v89;
                            }
                            unsigned int v175 = v164;
                          }
                          else
                          {
                            unsigned int v175 = bswap32(*v174);
                          }
                          unsigned int v176 = v164 >> v170;
                          unsigned int v177 = v175 << (v173 & 7);
                          v172[5] = v176;
                          unint64_t v178 = (v173 & 7) + v169;
                          unsigned int v160 = v178 & 7;
                          unint64_t v333 = __PAIR64__(v160, v177);
                          v161 = (unsigned int *)((char *)v174 + (v178 >> 3));
                          v331 = v161;
                          if (v161 >= v89)
                          {
                            if (v161 > v89)
                            {
                              v331 = v89;
                              v161 = v89;
                            }
                            unsigned int v179 = v177;
                          }
                          else
                          {
                            unsigned int v179 = bswap32(*v161);
                          }
                          unsigned int v180 = v177 >> v170;
                          unsigned int v164 = v179 << v160;
                          LODWORD(v333) = v179 << v160;
                          v172[69] = v180;
                          if (v165)
                          {
                            unint64_t v181 = (v178 & 7) + v169;
                            HIDWORD(v333) = v181 & 7;
                            v182 = (unsigned int *)((char *)v161 + (v181 >> 3));
                            v331 = v182;
                            if (v182 >= v89)
                            {
                              if (v182 > v89) {
                                v182 = v89;
                              }
                              unsigned int v183 = v164;
                            }
                            else
                            {
                              unsigned int v183 = bswap32(*v182);
                            }
                            unsigned int v184 = v164 >> v170;
                            unsigned int v185 = v183 << (v181 & 7);
                            v172[133] = v184;
                            unint64_t v186 = (v181 & 7) + v169;
                            unsigned int v160 = v186 & 7;
                            unint64_t v333 = __PAIR64__(v160, v185);
                            v161 = (unsigned int *)((char *)v182 + (v186 >> 3));
                            v331 = v161;
                            if (v161 >= v89)
                            {
                              if (v161 > v89)
                              {
                                v331 = v89;
                                v161 = v89;
                              }
                              unsigned int v187 = v185;
                            }
                            else
                            {
                              unsigned int v187 = bswap32(*v161);
                            }
                            unsigned int v188 = v185 >> v170;
                            unsigned int v164 = v187 << v160;
                            LODWORD(v333) = v187 << v160;
                            v172[197] = v188;
                          }
                          v172 += 2;
                          --v171;
                        }
                        while (v171);
                        goto LABEL_346;
                      }
LABEL_348:
                      int v38 = 0;
                    }
                    else
                    {
                      if (dword_1EB671A40 >= 3)
                      {
                        fwrite("Buffering period SEI refers to nonexistant SPS\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                        syslog(27, "Buffering period SEI refers to nonexistant SPS\n");
                      }
                      int v38 = -12909;
                    }
                  }
                }
              }
            }
LABEL_105:
            CFNumberRef v37 = (void *)__p;
LABEL_106:
            if (v37) {
              operator delete(v37);
            }
            if (!v38)
            {
              if (*(unsigned char *)(*((void *)v13 + 257) + 306))
              {
                CFMutableDictionaryRef v50 = (FILE *)*MEMORY[0x1E4F143C8];
                if (dword_1EB671A40 >= 6)
                {
                  fwrite("=========== SEI Buffering Period ===========\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                  if (dword_1EB671A40 >= 6)
                  {
                    fprintf(v50, "    %-42s : %lld\n", "bp_sps_id", SWORD2(v336[0]));
                    if (dword_1EB671A40 >= 6)
                    {
                      fprintf(v50, "    %-42s : %lld\n", "irap_cpb_params_present_flag", BYTE6(v336[0]));
                      if (dword_1EB671A40 >= 6)
                      {
                        fprintf(v50, "    %-42s : %lld\n", "concatenation_flag", HIBYTE(v336[0]));
                        if (dword_1EB671A40 >= 6)
                        {
                          fprintf(v50, "    %-42s : %lld\n", "au_cpb_removal_delay_delta_minus1", SLODWORD(v336[1]));
                          if (dword_1EB671A40 >= 6)
                          {
                            fprintf(v50, "    %-42s : %lld\n", "cpb_delay_offset", SHIDWORD(v336[1]));
                            if (dword_1EB671A40 >= 6) {
                              fprintf(v50, "    %-42s : %lld\n", "dpb_delay_offset", SLODWORD(v336[2]));
                            }
                          }
                        }
                      }
                    }
                  }
                }
                uint64_t v51 = 0;
                char v52 = 1;
                do
                {
                  uint64_t v53 = 0;
                  char v54 = v52;
                  unsigned int v55 = (char *)v336 + 4 * v51;
                  do
                  {
                    int v56 = &v55[v53];
                    if ((*(_DWORD *)&v55[v53 + 20] & 0x80000000) == 0)
                    {
                      uint64_t v57 = *((int *)v56 + 69);
                      if ((v57 & 0x80000000) == 0 && dword_1EB671A40 >= 6)
                      {
                        fprintf(v50, "    %-42s : %lld\n", "initial_cpb_removal_delay", *(unsigned int *)&v55[v53 + 20]);
                        if (dword_1EB671A40 >= 6) {
                          fprintf(v50, "    %-42s : %lld\n", "initial_cpb_removal_delay_offset", v57);
                        }
                      }
                    }
                    uint64_t v58 = *((unsigned int *)v56 + 133);
                    if ((v58 & 0x80000000) == 0)
                    {
                      uint64_t v59 = *(int *)&v55[v53 + 788];
                      if ((v59 & 0x80000000) == 0 && dword_1EB671A40 >= 6)
                      {
                        fprintf(v50, "    %-42s : %lld\n", "initial_alt_cpb_removal_delay", v58);
                        if (dword_1EB671A40 >= 6) {
                          fprintf(v50, "    %-42s : %lld\n", "initial_alt_cpb_removal_delay_offset", v59);
                        }
                      }
                    }
                    v53 += 8;
                  }
                  while (v53 != 256);
                  char v52 = 0;
                  uint64_t v51 = 1;
                }
                while ((v54 & 1) != 0);
              }
              goto LABEL_381;
            }
            goto LABEL_375;
          }
          if (v30 == 144)
          {
            v337 = 0;
            *(void *)&long long __p = 0;
            if (v327 <= 0xD)
            {
              unint64_t v39 = off_1EB671A70(v336, v324, v327);
              if (!sub_1D0D64D24(&v335, (uint64_t)v336, v39, &v337, (uint64_t *)&__p)
                && v335 == 144
                && (unint64_t)__p >= 4)
              {
                if (*(unsigned char *)(*((void *)v13 + 257) + 306))
                {
                  if (dword_1EB671A40 >= 6)
                  {
                    unsigned int v40 = *v337;
                    unint64_t v41 = (FILE *)*MEMORY[0x1E4F143C8];
                    fwrite("=========== SEI Content Light Level ===========\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                    if (dword_1EB671A40 >= 6)
                    {
                      fprintf(v41, "  %-44s : %lld\n", "max_content_light_level", bswap32(v40) >> 16);
                      if (dword_1EB671A40 >= 6) {
                        fprintf(v41, "  %-44s : %lld\n");
                      }
                    }
                  }
                }
                goto LABEL_381;
              }
            }
            goto LABEL_375;
          }
          if (v30 != 137)
          {
            if (v30 == 132)
            {
              if (!*(unsigned char *)(*((void *)v13 + 257) + 304)) {
                goto LABEL_381;
              }
              if (!*((void *)v13 + 265))
              {
                if (dword_1EB671A40 < 3) {
                  goto LABEL_381;
                }
                fwrite("MD5 SEI before frame\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                syslog(27, "MD5 SEI before frame\n");
                goto LABEL_375;
              }
              if (v327 <= 0x51)
              {
                *(void *)&long long __p = 0;
                v335 = 0;
                unint64_t v32 = off_1EB671A70(v336, v324, v327);
                if (!sub_1D0D64D24(&v337, (uint64_t)v336, v32, &__p, (uint64_t *)&v335)
                  && v337 == 132)
                {
                  if (v335)
                  {
                    uint64_t v33 = *(unsigned __int8 *)__p;
                    if (v33 <= 2)
                    {
                      size_t v34 = byte_1D0DAE638[v33];
                      HIDWORD(v337) = *(unsigned __int8 *)__p;
                      long long v338 = 0u;
                      long long v339 = 0u;
                      long long v340 = 0u;
                      if (v335 == (unsigned int *)(v34 + 1))
                      {
                        CFNumberRef v35 = (const void *)(__p + 1);
                      }
                      else
                      {
                        if (v335 != (unsigned int *)(3 * v34 + 1)) {
                          goto LABEL_375;
                        }
                        CFNumberRef v35 = (const void *)(__p + 1);
                        size_t v34 = (3 * v34);
                      }
                      memcpy(&v338, v35, v34);
                      if (*(unsigned char *)(*((void *)v13 + 257) + 306)) {
                        sub_1D0D64EAC((uint64_t)&v337, (FILE *)*MEMORY[0x1E4F143C8]);
                      }
                      if (!v33)
                      {
                        uint64_t v112 = *((void *)v13 + 265);
                        if (*(unsigned char *)(v112 + 548) && dword_1EB671A40 >= 4)
                        {
                          fwrite("Got multiple MD5 SEI for one frame\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                          syslog(28, "Got multiple MD5 SEI for one frame\n");
                          uint64_t v112 = *((void *)v13 + 265);
                        }
                        v113 = (_OWORD *)(v112 + 549);
                        long long v114 = v339;
                        _OWORD *v113 = v338;
                        v113[1] = v114;
                        v113[2] = v340;
                        *(unsigned char *)(*((void *)v13 + 265) + 548) = 1;
                      }
                      goto LABEL_381;
                    }
                  }
                }
              }
LABEL_375:
              if (dword_1EB671A40 >= 4)
              {
                int v199 = *(unsigned __int8 *)(v324 + 2);
                if (v199 == 255) {
                  int v199 = -1;
                }
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "Ignoring SEI of type %d (parse fail)\n", v199);
                int v200 = *(unsigned __int8 *)(v324 + 2);
                if (v200 == 255) {
                  int v200 = -1;
                }
                syslog(28, "Ignoring SEI of type %d (parse fail)\n", v200);
              }
LABEL_381:
              uint64_t v11 = sub_1D0C46FBC(*((void *)v13 + 257), (uint64_t)&v323);
              if (v11)
              {
                if (dword_1EB671A40 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Dump SEI NALU: error %d", v11);
                  syslog(27, "Dump SEI NALU: error %d", v11);
                }
                goto LABEL_451;
              }
LABEL_382:
              int v24 = v325;
LABEL_383:
              if (v24 == 35)
              {
                if (*(unsigned char *)(*((void *)v13 + 257) + 306))
                {
                  if (dword_1EB671A40 >= 6)
                  {
                    unsigned int v201 = *(unsigned __int8 *)(v324 + 2);
                    v202 = (FILE *)*MEMORY[0x1E4F143C8];
                    fwrite("=========== Access Unit Delimiter ===========\n", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                    if (dword_1EB671A40 >= 6) {
                      fprintf(v202, "  pic_type : %d\n", v201 >> 5);
                    }
                  }
                }
              }
              goto LABEL_46;
            }
LABEL_95:
            if (!*(unsigned char *)(*((void *)v13 + 257) + 306)) {
              goto LABEL_381;
            }
            if (v325 == 39)
            {
              uint64_t v42 = "=========== SEI Prefix ===========\n";
              if (dword_1EB671A40 <= 5) {
                goto LABEL_381;
              }
            }
            else
            {
              int v65 = dword_1EB671A40;
              if (v325 != 40 || (uint64_t v42 = "=========== SEI Suffix ===========\n", dword_1EB671A40 < 6))
              {
LABEL_147:
                if (v65 >= 6) {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "  %-44s : %d\n");
                }
                goto LABEL_381;
              }
            }
            fwrite(v42, 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            int v65 = dword_1EB671A40;
            goto LABEL_147;
          }
          long long __p = 0uLL;
          uint64_t v329 = 0;
          unint64_t v334 = 0;
          v335 = 0;
          memset(v336, 0, 24);
          memset(&v336[4], 0, 24);
          if (v327)
          {
            sub_1D0C4CCE0((unint64_t *)&__p, v327);
            int v46 = (void *)__p;
            size_t v47 = v327;
            if (v327 > *((void *)&__p + 1) - (void)__p)
            {
              int v48 = -12909;
              goto LABEL_221;
            }
            uint64_t v29 = v324;
          }
          else
          {
            int v46 = 0;
            size_t v47 = 0;
          }
          unint64_t v66 = off_1EB671A70(v46, v29, v47);
          int v67 = sub_1D0D64D24(&v337, (uint64_t)v46, v66, &v335, (uint64_t *)&v334);
          if (v67)
          {
            int v48 = v67;
          }
          else
          {
            int v48 = -12909;
            if (v337 == 137 && v334 >= 0x18)
            {
              int v48 = sub_1D0C4CAD0((uint64_t)v336, v335, v334);
              if (!v48)
              {
                uint64_t v68 = 0;
                unsigned int v69 = v336[6];
                int v70 = HIDWORD(v336[6]);
                CFNumberRef v72 = v336[4];
                CFNumberRef v71 = v336[5];
                int v73 = BYTE4(v336[6]) & 7;
                do
                {
                  HIDWORD(v336[6]) = v73;
                  CFNumberRef v74 = (_DWORD *)((char *)v72 + ((unint64_t)(v70 + 16) >> 3));
                  v336[4] = v74;
                  if (v74 >= v71)
                  {
                    if (v74 > v71) {
                      CFNumberRef v74 = v71;
                    }
                    unsigned int v75 = v69;
                  }
                  else
                  {
                    unsigned int v75 = bswap32(*v74);
                  }
                  unsigned int v76 = HIWORD(v69);
                  unsigned int v77 = v75 << v73;
                  *(_WORD *)((char *)&v337 + v68 + 4) = v76;
                  LODWORD(v336[6]) = v75 << v73;
                  HIDWORD(v336[6]) = v73;
                  CFNumberRef v72 = (_DWORD *)((char *)v74 + 2);
                  v336[4] = v72;
                  if (v72 >= v71)
                  {
                    if (v72 > v71)
                    {
                      v336[4] = v71;
                      CFNumberRef v72 = v71;
                    }
                    unsigned int v78 = v75 << v73;
                  }
                  else
                  {
                    unsigned int v78 = bswap32(*v72);
                  }
                  unsigned int v79 = HIWORD(v77);
                  unsigned int v69 = v78 << v73;
                  LODWORD(v336[6]) = v78 << v73;
                  *(_WORD *)((char *)&v338 + v68 + 2) = v79;
                  v68 += 2;
                  int v70 = v73;
                }
                while (v68 != 6);
                HIDWORD(v336[6]) = v73;
                CFNumberRef v80 = (_DWORD *)((char *)v72 + 2);
                v336[4] = v80;
                if (v80 >= v71)
                {
                  if (v80 > v71) {
                    CFNumberRef v80 = v71;
                  }
                  unsigned int v81 = v69;
                }
                else
                {
                  unsigned int v81 = bswap32(*v80);
                }
                unsigned int v96 = v81 << v73;
                WORD4(v338) = HIWORD(v69);
                v336[6] = (void *)__PAIR64__(v73, v96);
                unsigned int v97 = (_DWORD *)((char *)v80 + 2);
                v336[4] = (char *)v80 + 2;
                if ((_DWORD *)((char *)v80 + 2) >= v71)
                {
                  if ((_DWORD *)((char *)v80 + 2) > v71) {
                    unsigned int v97 = v71;
                  }
                  unsigned int v98 = v96;
                }
                else
                {
                  unsigned int v98 = bswap32(*v97);
                }
                unsigned int v99 = HIWORD(v96);
                unsigned int v100 = v98 << v73;
                WORD5(v338) = v99;
                LODWORD(v336[6]) = v98 << v73;
                HIDWORD(v336[6]) = v73;
                uint64_t v101 = (unsigned int *)((char *)v97 + 2);
                v336[4] = (char *)v97 + 2;
                if ((unsigned int *)((char *)v97 + 2) >= v71)
                {
                  if ((unsigned int *)((char *)v97 + 2) > v71) {
                    uint64_t v101 = v71;
                  }
                  unsigned int v102 = v100;
                }
                else
                {
                  unsigned int v102 = bswap32(*v101);
                }
                unsigned int v103 = v102 << v73;
                v336[6] = (void *)__PAIR64__(v73, v103);
                v104 = (unsigned int *)((char *)v101 + 2);
                v336[4] = v104;
                if (v104 >= v71)
                {
                  if (v104 > v71) {
                    v104 = v71;
                  }
                  unsigned int v105 = v103;
                }
                else
                {
                  unsigned int v105 = bswap32(*v104);
                }
                HIDWORD(v338) = v100 & 0xFFFF0000 | HIWORD(v103);
                LODWORD(v336[6]) = v105 << v73;
                HIDWORD(v336[6]) = v73;
                v106 = (_DWORD *)((char *)v104 + 2);
                v336[4] = (char *)v104 + 2;
                if ((_DWORD *)((char *)v104 + 2) >= v71)
                {
                  if ((_DWORD *)((char *)v104 + 2) > v71) {
                    v106 = v71;
                  }
                  unsigned int v107 = v105 << v73;
                }
                else
                {
                  unsigned int v107 = bswap32(*v106);
                }
                unsigned int v108 = v107 << v73;
                v336[6] = (void *)__PAIR64__(v73, v108);
                if ((unsigned int *)((char *)v106 + 2) > v71) {
                  v336[4] = v71;
                }
                int v48 = 0;
                LODWORD(v339) = (v105 << v73) & 0xFFFF0000 | HIWORD(v108);
              }
            }
          }
LABEL_221:
          if (v336[0]) {
            operator delete(v336[0]);
          }
          if (v46)
          {
            *((void *)&__p + 1) = v46;
            operator delete(v46);
          }
          if (!v48)
          {
            if (*(unsigned char *)(*((void *)v13 + 257) + 306))
            {
              v109 = (FILE *)*MEMORY[0x1E4F143C8];
              int v110 = dword_1EB671A40;
              if (dword_1EB671A40 > 5)
              {
                fwrite("=========== SEI Mastering Display Colour Volume ===========\n", 0x3CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                int v110 = dword_1EB671A40;
              }
              for (uint64_t k = 0; k != 6; k += 2)
              {
                if (v110 >= 6)
                {
                  fprintf(v109, "  %-44s : %lld\n", "display_primaries_x", *(unsigned __int16 *)((char *)&v337 + k + 4));
                  int v110 = dword_1EB671A40;
                  if (dword_1EB671A40 >= 6)
                  {
                    fprintf(v109, "  %-44s : %lld\n", "display_primaries_y", *(unsigned __int16 *)((char *)&v338 + k + 2));
                    int v110 = dword_1EB671A40;
                  }
                }
              }
              if (v110 > 5)
              {
                fprintf(v109, "  %-44s : %lld\n", "white_point_x", WORD4(v338));
                if (dword_1EB671A40 >= 6)
                {
                  fprintf(v109, "  %-44s : %lld\n", "white_point_y", WORD5(v338));
                  if (dword_1EB671A40 >= 6)
                  {
                    fprintf(v109, "  %-44s : %lld\n", "max_display_mastering_luminance", HIDWORD(v338));
                    if (dword_1EB671A40 >= 6) {
                      fprintf(v109, "  %-44s : %lld\n");
                    }
                  }
                }
              }
            }
            goto LABEL_381;
          }
          goto LABEL_375;
        default:
          if (dword_1EB671A40 >= 4)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Discarding NALU of type %d\n", v325);
            syslog(28, "Discarding NALU of type %d\n", v325);
          }
          goto LABEL_382;
      }
    }
    break;
  }
  if (v11 != -26526)
  {
LABEL_475:
    if (dword_1EB671A40 >= 3)
    {
      fwrite("PullNALU failed to get a valid NALU\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "PullNALU failed to get a valid NALU\n");
    }
LABEL_451:
    sub_1D0C6119C((uint64_t)v13, v11);
    goto LABEL_452;
  }
LABEL_440:
  uint64_t v227 = *((void *)v13 + 265);
  if (!v227 || (uint64_t v228 = v13[528], !v228))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("No frame allocated or no slices found!\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "No frame allocated or no slices found!\n");
    }
LABEL_450:
    uint64_t v11 = 4294954387;
    goto LABEL_451;
  }
  if ((int)v228 < 1)
  {
    char v234 = 1;
    goto LABEL_481;
  }
  unsigned __int8 v229 = 0;
  BOOL v230 = v228 != 1;
  v231 = (uint64_t *)*((void *)v13 + 258);
  do
  {
    uint64_t v232 = *v231++;
    *(unsigned char *)(v232 + 1600) = v230;
    v229 |= *(unsigned char *)(v232 + 58) != 2;
    --v228;
  }
  while (v228);
  if (((a5 != 0) & v229) != 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Got inter slice but tile API only supports intra for now!\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Got inter slice but tile API only supports intra for now!\n");
    }
    goto LABEL_450;
  }
  char v234 = v229 ^ 1;
  if (((v229 ^ 1) & 1) == 0)
  {
    unint64_t v235 = *(void *)(v227 + 848) * (*(void *)(v227 + 840) + 7);
    uint64_t v236 = *(void *)(v227 + 864);
    uint64_t v237 = *(void *)(v227 + 856);
    unint64_t v238 = 0xAAAAAAAAAAAAAAABLL * ((v236 - v237) >> 2);
    unint64_t v239 = v235 - v238;
    if (v235 <= v238)
    {
      if (v235 >= v238) {
        goto LABEL_481;
      }
      uint64_t v251 = v237 + 12 * v235;
    }
    else
    {
      uint64_t v240 = *(void *)(v227 + 872);
      if (0xAAAAAAAAAAAAAAABLL * ((v240 - v236) >> 2) < v239)
      {
        if (v235 > 0x1555555555555555) {
          sub_1D0C8D71C();
        }
        unint64_t v241 = 0xAAAAAAAAAAAAAAABLL * ((v240 - v237) >> 2);
        if (2 * v241 > v235) {
          unint64_t v235 = 2 * v241;
        }
        if (v241 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v242 = 0x1555555555555555;
        }
        else {
          unint64_t v242 = v235;
        }
        if (v242 > 0x1555555555555555) {
          sub_1D0C6AC2C();
        }
        v243 = (char *)operator new(12 * v242);
        v244 = &v243[12 * v238];
        v245 = &v243[12 * v242];
        bzero(v244, 12 * ((12 * v239 - 12) / 0xC) + 12);
        v246 = &v244[12 * ((12 * v239 - 12) / 0xC) + 12];
        v247 = *(_DWORD **)(v227 + 864);
        v248 = *(_DWORD **)(v227 + 856);
        if (v247 != v248)
        {
          do
          {
            uint64_t v249 = *(void *)(v247 - 3);
            v247 -= 3;
            int v250 = v247[2];
            *(void *)(v244 - 12) = v249;
            v244 -= 12;
            *((_DWORD *)v244 + 2) = v250;
          }
          while (v247 != v248);
          v247 = *(_DWORD **)(v227 + 856);
        }
        *(void *)(v227 + 856) = v244;
        *(void *)(v227 + 864) = v246;
        *(void *)(v227 + 872) = v245;
        if (v247) {
          operator delete(v247);
        }
        goto LABEL_481;
      }
      bzero(*(void **)(v227 + 864), 12 * ((12 * v239 - 12) / 0xC) + 12);
      uint64_t v251 = v236 + 12 * ((12 * v239 - 12) / 0xC) + 12;
    }
    *(void *)(v227 + 864) = v251;
  }
LABEL_481:
  *(unsigned char *)(v227 + 712) = v234 & 1;
  uint64_t v252 = *((void *)v13 + 257);
  if (*(unsigned char *)(v252 + 33))
  {
    uint64_t v253 = *(void *)(*((void *)v13 + 258) + 8 * (int)v13[528] - 8);
    uint64_t v254 = *(void *)(v253 + 1632);
    uint64_t v255 = *(void *)(v253 + 1648);
    unint64_t v256 = ~v254 + v255;
    unsigned int v257 = *(unsigned __int8 *)(v254 + v256);
    *(_DWORD *)(v252 + 48) = -1;
    v258 = (unsigned char *)(v252 + 48);
    *(unsigned char *)(v252 + 52) = -1;
    *(unsigned char *)(v252 + 100) = 0;
    *(_OWORD *)(v252 + 104) = 0u;
    *(_OWORD *)(v252 + 120) = 0u;
    *(_OWORD *)(v252 + 136) = 0u;
    *(_OWORD *)(v252 + 152) = 0u;
    int v259 = *(unsigned __int8 *)(v252 + 34);
    if (v259 != 255 && ((v257 >> v259) & 1) != 0) {
      unsigned char *v258 = v259;
    }
    int v260 = *(unsigned __int8 *)(v252 + 38);
    if (v260 != 255 && ((v257 >> v260) & 1) != 0) {
      *(unsigned char *)(v252 + 51) = v260;
    }
    int v261 = *(unsigned __int16 *)(v252 + 36);
    if (v261 != 0xFFFF && ((v257 >> v261) & 1) != 0) {
      *(unsigned char *)(v252 + 50) = v261;
    }
    int v262 = *(unsigned __int8 *)(v252 + 35);
    if (v262 != 255 && ((v257 >> v262) & 1) != 0) {
      *(unsigned char *)(v252 + 49) = v262;
    }
    int v263 = *(unsigned __int8 *)(v252 + 39);
    if (v263 != 255) {
      *(unsigned char *)(v252 + 52) = v263;
    }
    if ((v257 & 0x80) != 0)
    {
      unint64_t v256 = v256 != 0;
      uint64_t v264 = v255 - v254;
      while (1)
      {
        uint64_t v265 = v264 - 1;
        if ((unint64_t)(v264 - 1) < 2) {
          break;
        }
        int v266 = *(char *)(v254 - 2 + v264--);
        if ((v266 & 0x80000000) == 0)
        {
          unint64_t v256 = v265 - 1;
          break;
        }
      }
    }
    sub_1D0D3A7D0((char *)(v252 + 48));
    unint64_t v267 = *(unsigned int *)(v252 + 164);
    BOOL v268 = v256 >= v267;
    unint64_t v269 = v256 - v267;
    if (v269 == 0 || !v268)
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("No RBSP after control data extraction", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "No RBSP after control data extraction");
      }
      goto LABEL_450;
    }
    uint64_t v270 = v254 + v269;
    uint64_t v271 = (char)*v258;
    if (v271 != -1)
    {
      uint64_t v272 = *(unsigned int *)(v252 + 4 * v271 + 136);
      *(_DWORD *)(v252 + 56) = 8 * *(unsigned __int8 *)(v270 + v272);
      *(_DWORD *)(v252 + 60) = 8 * *(unsigned __int8 *)(v270 + (v272 + 1));
    }
    uint64_t v273 = *(char *)(v252 + 51);
    if (v273 != -1)
    {
      uint64_t v274 = *(unsigned int *)(v252 + 4 * v273 + 136);
      *(_DWORD *)(v252 + 68) = 16 * *(unsigned __int8 *)(v270 + v274);
      *(_DWORD *)(v252 + 72) = 16 * *(unsigned __int8 *)(v270 + (v274 + 1));
      *(_DWORD *)(v252 + 76) = 16 * *(char *)(v270 + (v274 + 2));
      *(_DWORD *)(v252 + 80) = 16 * *(char *)(v270 + (v274 + 3));
    }
    uint64_t v275 = *(char *)(v252 + 50);
    if (v275 != -1)
    {
      uint64_t v276 = *(unsigned int *)(v252 + 4 * v275 + 136);
      __int16 v277 = *(unsigned __int8 *)(v270 + v276);
      *(_WORD *)(v252 + 64) = v277 << 8;
      *(_WORD *)(v252 + 64) = *(unsigned __int8 *)(v270 + (v276 + 1)) | (unsigned __int16)(v277 << 8);
    }
    int v278 = *(unsigned __int8 *)(v252 + 52);
    if (v278 != 255) {
      *(unsigned char *)(v252 + 100) = (v257 >> v278) & 1;
    }
  }
  int v279 = *a7;
  uint64_t v280 = *((void *)v13 + 257);
  v281 = (uint64_t *)*((void *)v13 + 258);
  uint64_t v282 = *v281;
  uint64_t v283 = v13[528];
  if ((int)v283 < 1)
  {
LABEL_514:
    if ((*(unsigned char *)(v280 + 308) & 4) == 0) {
      goto LABEL_517;
    }
    uint64_t v284 = *(void *)(v282 + 32);
    if (!*(unsigned char *)(v284 + 21) || *(unsigned char *)(v284 + 20)) {
      goto LABEL_517;
    }
    uint64_t v305 = *(void *)(v282 + 16);
    int v306 = *(_DWORD *)(v305 + 2120);
    if (v306 >= 0) {
      int v307 = *(_DWORD *)(v305 + 2120);
    }
    else {
      int v307 = v306 + 1;
    }
    int v308 = v307 >> 1;
    int v309 = *(_DWORD *)(v305 + 2124);
    if (v308 < v309) {
      int v309 = v308;
    }
    int v310 = *(_DWORD *)(v280 + 320);
    if (v310) {
      int v311 = *(_DWORD *)(v280 + 320);
    }
    else {
      int v311 = v309;
    }
    int v312 = v306 / 15;
    if (v312 < v309) {
      int v309 = v312;
    }
    if (!*a7) {
      int v309 = v311;
    }
    if (v310) {
      int v309 = v311;
    }
    if (*(_DWORD *)(v280 + 312) < v309) {
      int v309 = *(_DWORD *)(v280 + 312);
    }
    if (v309 <= 1) {
      unsigned int v285 = 1;
    }
    else {
      unsigned int v285 = v309;
    }
  }
  else
  {
    while (!*(unsigned char *)(*v281 + 56))
    {
      ++v281;
      if (!--v283) {
        goto LABEL_514;
      }
    }
LABEL_517:
    unsigned int v285 = 1;
  }
  uint64_t v286 = *((void *)v13 + 262);
  uint64_t v287 = *((void *)v13 + 261);
  unint64_t v288 = 0x3A4C0A237C32B16DLL * ((v286 - v287) >> 6);
  unint64_t v289 = v285 - v288;
  if (v285 <= v288)
  {
    if (v285 < v288) {
      *((void *)v13 + 262) = v287 + 6464 * v285;
    }
  }
  else
  {
    uint64_t v320 = *((void *)v13 + 257);
    uint64_t v322 = v282;
    uint64_t v290 = *((void *)v13 + 263);
    if (0x3A4C0A237C32B16DLL * ((v290 - v286) >> 6) >= v289)
    {
      uint64_t v302 = v286 + 6464 * v289;
      uint64_t v303 = 6464 * v285 - ((v286 - v287) >> 6 << 6);
      do
      {
        bzero((void *)(v286 + 64), 0x1800uLL);
        *(void *)(v286 + 6416) = 0;
        *(_WORD *)(v286 + 6424) = 0;
        v286 += 6464;
        v303 -= 6464;
      }
      while (v303);
      *((void *)v13 + 262) = v302;
      uint64_t v280 = v320;
      uint64_t v282 = v322;
    }
    else
    {
      unint64_t v291 = 0x3A4C0A237C32B16DLL * ((v290 - v287) >> 6);
      uint64_t v292 = 2 * v291;
      if (2 * v291 <= v285) {
        uint64_t v292 = v285;
      }
      if (v291 >= 0x511BE1958B67ELL) {
        unint64_t v293 = 0xA237C32B16CFDLL;
      }
      else {
        unint64_t v293 = v292;
      }
      if (v293 > 0xA237C32B16CFDLL) {
        sub_1D0C6AC2C();
      }
      v294 = (char *)operator new(6464 * v293, (std::align_val_t)0x40uLL);
      int v318 = v279;
      v295 = &v294[6464 * v288];
      v316 = &v294[6464 * v285];
      uint64_t v296 = 6464 * v285 - 6464 * v288;
      v297 = v295;
      do
      {
        bzero(v297 + 64, 0x1800uLL);
        *((void *)v297 + 802) = 0;
        *((_WORD *)v297 + 3212) = 0;
        v297 += 6464;
        v296 -= 6464;
      }
      while (v296);
      v298 = &v294[6464 * v293];
      v299 = (char *)*((void *)v13 + 262);
      v300 = (char *)*((void *)v13 + 261);
      if (v299 == v300)
      {
        v301 = v316;
      }
      else
      {
        v301 = v316;
        do
        {
          v299 -= 6464;
          v295 -= 6464;
          memcpy(v295, v299, 0x191CuLL);
        }
        while (v299 != v300);
        v299 = (char *)*((void *)v13 + 261);
      }
      *((void *)v13 + 261) = v295;
      *((void *)v13 + 262) = v301;
      *((void *)v13 + 263) = v298;
      int v279 = v318;
      uint64_t v280 = v320;
      uint64_t v282 = v322;
      if (v299) {
        MEMORY[0x1D25F0220](v299, 64);
      }
    }
  }
  char v304 = *((unsigned char *)v13 + 2051);
  if (v304)
  {
    if (v285 > 1 || *(unsigned char *)(v280 + 358))
    {
      if (*(unsigned char *)(*(void *)(v282 + 32) + 19)) {
        char v304 = 0;
      }
      else {
        char v304 = *(unsigned char *)(*(void *)(v282 + 16) + 283) == 0;
      }
      goto LABEL_548;
    }
    *((unsigned char *)v13 + 2052) = 0;
  }
  else
  {
LABEL_548:
    *((unsigned char *)v13 + 2052) = v304;
    if (v285 >= 2) {
      sub_1D0C9153C(v13 + 432, *(void *)(**((void **)v13 + 258) + 16));
    }
  }
  if (v279)
  {
    dispatch_async_f(*((dispatch_queue_t *)v13 + 431), v13, (dispatch_function_t)sub_1D0D59C58);
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = sub_1D0C52140((uint64_t)v13);
  }
LABEL_452:
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 203) = 0;
  return v11;
}

void sub_1D0C46C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  uint64_t v42 = *(void **)(v40 - 184);
  if (v42) {
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0C46C7C(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F1438;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 64;
  *(unsigned char *)(a1 + 18) = -1;
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1EB671A80, memory_order_acquire) != -1)
  {
    int v5 = &v3;
    int v4 = &v5;
    std::__call_once(qword_1EB671A80, &v4, (void (__cdecl *)(void *))sub_1D0C8DBF0);
  }
  return a1;
}

uint64_t sub_1D0C46D20(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 16) = 64;
  if (a3 <= 1)
  {
    if (dword_1EB671A40 >= 3)
    {
      uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
      int v4 = "NALU too small\n";
      int v5 = "NALU too small\n";
      size_t v6 = 15;
LABEL_21:
      fwrite(v5, v6, 1uLL, v3);
      syslog(27, v4);
      return 4294954387;
    }
    return 4294954387;
  }
  if ((char)*a2 < 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
      int v4 = "forbidden_zero_bit is 1\n";
      int v5 = "forbidden_zero_bit is 1\n";
      size_t v6 = 24;
      goto LABEL_21;
    }
    return 4294954387;
  }
  unsigned __int8 v8 = *a2;
  unsigned int v9 = *a2 >> 1;
  *(unsigned char *)(a1 + 16) = v9;
  if (a3 <= 2 && (v8 & 0xFC) != 0x48)
  {
    if (dword_1EB671A40 < 3) {
      return 4294954387;
    }
    unsigned __int8 v10 = "NALU (type %d) has no RBSP!\n";
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "NALU (type %d) has no RBSP!\n");
    goto LABEL_9;
  }
  *(unsigned char *)(a1 + 17) = (a2[1] >> 3) & 0xDF | (32 * (*a2 & 1));
  if ((a2[1] & 7) == 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      uint64_t v3 = (FILE *)*MEMORY[0x1E4F143C8];
      int v4 = "nuh_temporal_id_plus1 == 0\n";
      int v5 = "nuh_temporal_id_plus1 == 0\n";
      size_t v6 = 27;
      goto LABEL_21;
    }
    return 4294954387;
  }
  uint64_t result = 0;
  int v13 = (a2[1] & 7) - 1;
  *(unsigned char *)(a1 + 18) = v13;
  if (v9 > 0x25) {
    return result;
  }
  if (((1 << v9) & 0x3003F0000) != 0) {
    goto LABEL_16;
  }
  if (((1 << v9) & 0x3C) != 0)
  {
    if (!v13)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      unsigned __int8 v10 = "Temporal ID must be non-zero for NALU type %d\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Temporal ID must be non-zero for NALU type %d\n");
LABEL_9:
      uint64_t v11 = *(unsigned __int8 *)(a1 + 16);
LABEL_10:
      syslog(27, v10, v11, v14);
      return 4294954387;
    }
    return 0;
  }
  if (((1 << v9) & 0x3000000000) != 0)
  {
    if (a3 >= 3 && dword_1EB671A40 >= 4)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "End of sequence/bitstream NALU (%d) shouldn't have RBSP data (%ld bytes)!\n", v9, a3 - 2);
      syslog(28, "End of sequence/bitstream NALU (%d) shouldn't have RBSP data (%ld bytes)!\n", *(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 24) - 2);
      LOBYTE(v13) = *(unsigned char *)(a1 + 18);
    }
LABEL_16:
    if ((_BYTE)v13)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      unsigned __int8 v10 = "Temporal ID (%d) must be zero for NALU type %d\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Temporal ID (%d) must be zero for NALU type %d\n", v13, *(unsigned __int8 *)(a1 + 16));
      uint64_t v11 = *(unsigned __int8 *)(a1 + 18);
      uint64_t v14 = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_10;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1D0C46FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(FILE **)(a1 + 208);
  if (!v2) {
    return 0;
  }
  int v4 = *(const void **)(a2 + 8);
  size_t v5 = *(void *)(a2 + 24);
  if (fwrite(&unk_1D0D7FEB7, 1uLL, 3uLL, v2) == 3 && fwrite(v4, 1uLL, v5, *(FILE **)(a1 + 208)) == v5) {
    return 0;
  }
  else {
    return *__error();
  }
}

uint64_t *sub_1D0C4703C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 3440));
    if ((v3 & 1) != 0 && dword_1EB671A40 >= 3)
    {
      fwrite("Deallocating a non-idle FrameDec!!\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Deallocating a non-idle FrameDec!!\n");
    }
    uint64_t v4 = 3432;
    while (1)
    {
      size_t v5 = *(std::__shared_weak_count **)(v2 + v4);
      if (v5) {
        sub_1D0C4C984(v5);
      }
      v4 -= 16;
      if (v4 == 3176)
      {
        while (1)
        {
          size_t v6 = *(std::__shared_weak_count **)(v2 + v4);
          if (v6) {
            sub_1D0C4C984(v6);
          }
          v4 -= 16;
          if (v4 == 2920)
          {
            while (1)
            {
              uint64_t v7 = *(std::__shared_weak_count **)(v2 + v4);
              if (v7) {
                sub_1D0C4C984(v7);
              }
              v4 -= 16;
              if (v4 == 2664)
              {
                while (1)
                {
                  unsigned __int8 v8 = *(std::__shared_weak_count **)(v2 + v4);
                  if (v8) {
                    sub_1D0C4C984(v8);
                  }
                  v4 -= 16;
                  if (v4 == 2408)
                  {
                    while (1)
                    {
                      unsigned int v9 = *(std::__shared_weak_count **)(v2 + v4);
                      if (v9) {
                        sub_1D0C4C984(v9);
                      }
                      v4 -= 16;
                      if (v4 == 2152)
                      {
                        unsigned __int8 v10 = *(std::__shared_weak_count **)(v2 + 2128);
                        if (v10) {
                          sub_1D0C4C984(v10);
                        }
                        uint64_t v11 = *(void *)(v2 + 2088);
                        if (v11)
                        {
                          *(void *)(v2 + 2096) = v11;
                          MEMORY[0x1D25F0220]();
                        }
                        int v12 = *(void **)(v2 + 2064);
                        if (v12)
                        {
                          int v13 = *(void **)(v2 + 2072);
                          uint64_t v14 = *(void **)(v2 + 2064);
                          if (v13 != v12)
                          {
                            do
                            {
                              uint64_t v16 = *--v13;
                              uint64_t v15 = v16;
                              void *v13 = 0;
                              if (v16) {
                                (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
                              }
                            }
                            while (v13 != v12);
                            uint64_t v14 = *(void **)(v2 + 2064);
                          }
                          *(void *)(v2 + 2072) = v12;
                          operator delete(v14);
                        }
                        sub_1D0C9148C(v2 + 1728);
                        uint64_t v17 = *(void **)(v2 + 1328);
                        *(void *)(v2 + 1328) = 0;
                        if (v17) {
                          free(v17);
                        }
                        JUMPOUT(0x1D25F0220);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D0C471F4(uint64_t a1, char a2)
{
  *(_DWORD *)(a1 + 4240) = 6;
  *(void *)(a1 + 88) = sub_1D0D26728;
  *(void *)(a1 + 96) = sub_1D0D266E0;
  *(void *)(a1 + 104) = sub_1D0D26678;
  *(void *)(a1 + 112) = sub_1D0D4B190;
  *(void *)(a1 + 120) = sub_1D0C66384;
  *(void *)(a1 + 128) = sub_1D0C665B8;
  *(void *)(a1 + 136) = sub_1D0C666EC;
  sub_1D0C472BC(4u, 6, (_WORD *)(a1 + 144));
  sub_1D0C472BC(8u, *(_DWORD *)(a1 + 4240), (_WORD *)(a1 + 2192));
  *(unsigned char *)(a1 + 4244) = a2;
  return 0;
}

uint64_t sub_1D0C472BC(unsigned int a1, char a2, _WORD *a3)
{
  unsigned __int8 v3 = a3;
  uint64_t v4 = 0;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 >> 1;
  uint64_t v6 = (v5 - 1);
  double v65 = (double)(int)(16 * a1 - 2) * 0.5;
  uint64_t v59 = ((16 * a1 - 2) >> 1) + 1;
  int v7 = 1 << a2;
  uint64_t v8 = a1;
  size_t v61 = 16 * a1;
  if ((int)(16 * a1) <= 2) {
    int v9 = 2;
  }
  else {
    int v9 = 16 * a1;
  }
  uint64_t v10 = (v9 - 1);
  double v11 = (double)v7;
  uint64_t v12 = a1 + 1 - 1;
  int v13 = a3 + 8;
  uint64_t v60 = a1 - 1;
  uint64_t v58 = a1 - 1;
  do
  {
    int v63 = v13;
    uint64_t v64 = v4;
    double v14 = (double)dword_1D0DAE224[v4] * 0.125;
    bzero(v66, v61);
    uint64_t v15 = 0;
    do
    {
      double v16 = ((double)(int)v15 - v65) * 3.14159265;
      if (v16 == 0.0)
      {
        double v18 = 1.0;
      }
      else
      {
        long double v17 = sin(v14 * (v16 * 0.0625));
        double v18 = (v17 / v16 * 16.0 / v14 + v17 / v16 * 16.0 / v14) * (sin(v14 * (v16 * 0.0625 * 0.5)) / v16 * 16.0 / v14);
      }
      *(double *)&v66[++v15] = v18;
    }
    while (v10 != v15);
    v66[v59] = 0x3FF0000000000000;
    double v19 = 0.0;
    uint64_t v20 = 16;
    uint64_t v21 = v58;
    do
    {
      double v19 = v19 + *(double *)&v66[v20];
      v20 += 16;
      --v21;
    }
    while (v21);
    uint64_t v22 = 16;
    int v23 = v3;
    uint64_t v24 = v58;
    CFNumberRef v25 = &a3[128 * v64];
    do
    {
      double v26 = *(double *)&v66[v22] * v11 / v19;
      if (v26 <= 0.0) {
        double v27 = -0.5;
      }
      else {
        double v27 = 0.5;
      }
      *v23++ = (int)(v26 + v27);
      v22 += 16;
      --v24;
    }
    while (v24);
    uint64_t v28 = 0;
    __int16 v29 = 0;
    v25[v60] = 0;
    do
      v29 += v3[v28++];
    while (v8 != v28);
    v25[v6] += v7 - v29;
    int v30 = v63;
    uint64_t v31 = 120;
    for (unint64_t i = 1; i != 16; ++i)
    {
      double v33 = 0.0;
      uint64_t v34 = v31;
      uint64_t v35 = v12;
      do
      {
        double v33 = v33 + *(double *)((char *)v66 + v34);
        v34 += 128;
        --v35;
      }
      while (v35);
      uint64_t v36 = v66;
      CFNumberRef v37 = v30;
      uint64_t v38 = v12;
      do
      {
        double v39 = *(double *)&v36[v31] * v11 / v33;
        if (v39 <= 0.0) {
          double v40 = -0.5;
        }
        else {
          double v40 = 0.5;
        }
        *v37++ = (int)(v39 + v40);
        v36 += 128;
        --v38;
      }
      while (v38);
      uint64_t v41 = 0;
      int v42 = 0;
      do
      {
        if (v42 <= (__int16)v30[v41]) {
          int v42 = (__int16)v30[v41];
        }
        ++v41;
      }
      while (v8 != v41);
      if (v42 <= 100)
      {
        uint64_t v52 = 0;
        int v49 = 0;
        do
          v49 += (__int16)v30[v52++];
        while (v8 != v52);
        if (i == 8)
        {
          BOOL v46 = __OFSUB__(v7, v49);
          int v53 = v7 - v49;
          if (v53 < 0 != v46) {
            int v54 = v53 + 1;
          }
          else {
            int v54 = v53;
          }
          int v49 = v54 >> 1;
          v25[v5 + 64] += v54 >> 1;
          uint64_t v51 = &v25[v6 + 64];
        }
        else
        {
          LOWORD(v49) = v7 - v49;
          if (i <= 7) {
            uint64_t v51 = &v25[8 * i + v60];
          }
          else {
            uint64_t v51 = &v25[8 * i];
          }
        }
      }
      else
      {
        uint64_t v43 = 0;
        do
        {
          v30[v43] = (int)(100.0 / (double)v42 * (double)(__int16)v30[v43]);
          ++v43;
        }
        while (v12 != v43);
        uint64_t v44 = 0;
        int v45 = 0;
        do
          v45 += (__int16)v30[v44++];
        while (v8 != v44);
        BOOL v46 = __OFSUB__(v7, v45);
        int v47 = v7 - v45;
        if (v47 < 0 != v46) {
          int v48 = v47 + 1;
        }
        else {
          int v48 = v47;
        }
        int v49 = v48 >> 1;
        CFMutableDictionaryRef v50 = &v25[8 * i];
        v50[v5] += v48 >> 1;
        uint64_t v51 = &v50[v6];
      }
      uint64_t v55 = 0;
      __int16 v56 = 0;
      uint64_t result = (unsigned __int16)*v51;
      *uint64_t v51 = result + v49;
      do
        v56 += v30[v55++];
      while (v8 != v55);
      v25[8 * i + v6] += v7 - v56;
      v31 -= 8;
      v30 += 8;
    }
    uint64_t v4 = v64 + 1;
    v3 += 128;
    int v13 = v63 + 128;
  }
  while (v64 != 7);
  return result;
}

uint64_t sub_1D0C476EC(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = 0; i != 4; ++i)
  {
    unint64_t v5 = 0;
    if (i) {
      uint64_t v6 = byte_1D0DAEFE0;
    }
    else {
      uint64_t v6 = byte_1D0DAEFB8;
    }
    if (i) {
      uint64_t v7 = 64;
    }
    else {
      uint64_t v7 = 16;
    }
    if (i == 3) {
      int v8 = 3;
    }
    else {
      int v8 = 1;
    }
    int v30 = v8;
    uint64_t v31 = v6;
    uint64_t v29 = *v6 + 1;
    do
    {
      int v9 = v5 - 3;
      if (v5 < 3) {
        int v9 = v5;
      }
      if (i == 3 && v9)
      {
        uint64_t v10 = a1 + 65 * v5;
        double v11 = (void *)(v10 + 1170);
        uint64_t v12 = (const void *)(v10 + 780);
LABEL_28:
        memcpy(v11, v12, v7 | 1);
        goto LABEL_29;
      }
      if (!sub_1D0C51880(a2, 1))
      {
        int v15 = sub_1D0C4C8F0(a2);
        int v16 = v15 * v30;
        uint64_t v17 = 4294954394;
        if (v15 * v30 < 0 || (uint64_t)v5 < v16) {
          return v17;
        }
        double v18 = (char *)&unk_1D0D7FAA0 + ((v5 > 2) | ((unint64_t)(v5 > 2) << 6));
        if (!i) {
          double v18 = (char *)&unk_1D0D7FA8F;
        }
        uint64_t v19 = a1 + 390 * i + 65 * ((int)v5 - v16);
        if (v15) {
          uint64_t v12 = (const void *)v19;
        }
        else {
          uint64_t v12 = v18;
        }
        double v11 = (void *)(a1 + 390 * i + 65 * v5);
        goto LABEL_28;
      }
      if (i <= 1)
      {
        unsigned int v14 = 8;
      }
      else
      {
        int v13 = sub_1D0C4C8F0(a2);
        unsigned int v14 = (-((v13 + 1) & 1) ^ ((v13 + 1) >> 1)) + ((v13 + 1) & 1) + 8;
        *(unsigned char *)(a1 + 390 * i + 65 * v5) = (-((v13 + 1) & 1) ^ ((v13 + 1) >> 1)) + ((v13 + 1) & 1) + 8;
      }
      uint64_t v20 = v31;
      uint64_t v21 = v7;
      do
      {
        int v22 = sub_1D0C4C8F0(a2);
        int v23 = (v22 + 1) & 1;
        unsigned int v24 = v14 + v23 + (-v23 ^ ((v22 + 1) >> 1)) + 256;
        unsigned int v25 = (v14 + v23 + (-(char)v23 ^ ((v22 + 1) >> 1)));
        int v26 = -v24;
        if (v26 >= 0) {
          unsigned int v14 = -v26;
        }
        else {
          unsigned int v14 = v25;
        }
        unsigned int v27 = *v20++;
        *(unsigned char *)(v27 + 65 * v5 + a1 + 390 * i + 1) = v14;
        --v21;
      }
      while (v21);
      if (i < 2) {
        *(unsigned char *)(a1 + 390 * i + 65 * v5) = *(unsigned char *)(a1 + 390 * i + 65 * v5 + v29);
      }
LABEL_29:
      ++v5;
    }
    while (v5 != 6);
  }
  return 0;
}

uint64_t sub_1D0C47924(uint64_t a1, uint64_t a2, int a3)
{
  memset(__p, 0, 24);
  v474 = 0;
  v475 = 0;
  unint64_t v476 = 0;
  uint64_t v6 = sub_1D0C4CB60((unint64_t *)__p, a2);
  if (v6) {
    goto LABEL_161;
  }
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v7)
  {
    case '""':
      int v9 = (char *)operator new(0x708uLL);
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)int v9 = &unk_1F26F16D0;
      double v11 = (unsigned __int8 *)(v9 + 24);
      sub_1D0C42B54((uint64_t)(v9 + 24), a1, 0, 0);
      if (v9[1785])
      {
        if (dword_1EB671A40 >= 3)
        {
          fwrite("This PPS has already been parsed, a new one must be allocated instead\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "This PPS has already been parsed, a new one must be allocated instead\n");
        }
        goto LABEL_15;
      }
      v9[1785] = 1;
      v9[24] = sub_1D0C4C8F0((uint64_t)__p);
      v9[25] = sub_1D0C4C8F0((uint64_t)__p);
      unint64_t v17 = SHIDWORD(v476) + 1;
      HIDWORD(v476) = v17 & 7;
      double v18 = v475;
      uint64_t v19 = (unsigned int *)((char *)v474 + (v17 >> 3));
      v474 = v19;
      if (v19 >= v475)
      {
        if (v19 > v475) {
          uint64_t v19 = v475;
        }
        unsigned int v20 = v476;
      }
      else
      {
        unsigned int v20 = bswap32(*v19);
      }
      int v40 = v20 << (v17 & 7);
      v9[26] = (v476 & 0x80000000) != 0;
      unint64_t v41 = (v17 & 7) + 1;
      LODWORD(v476) = v40;
      HIDWORD(v476) = v41 & 7;
      int v42 = (unsigned int *)((char *)v19 + (v41 >> 3));
      v474 = v42;
      if (v42 >= v18)
      {
        if (v42 > v18) {
          int v42 = v18;
        }
        unsigned int v43 = v40;
      }
      else
      {
        unsigned int v43 = bswap32(*v42);
      }
      unsigned int v44 = v43 << (v41 & 7);
      v9[27] = v40 < 0;
      unint64_t v45 = (v41 & 7) + 3;
      char v46 = v45 & 7;
      LODWORD(v476) = v44;
      HIDWORD(v476) = v45 & 7;
      int v47 = (unsigned int *)((char *)v42 + (v45 >> 3));
      v474 = v47;
      if (v47 >= v18)
      {
        if (v47 > v18) {
          int v47 = v18;
        }
        unsigned int v48 = v44;
      }
      else
      {
        unsigned int v48 = bswap32(*v47);
      }
      unsigned int v49 = v44 >> 29;
      int v50 = v48 << v46;
      v9[28] = v49;
      unint64_t v51 = (v45 & 7) + 1;
      LODWORD(v476) = v48 << v46;
      HIDWORD(v476) = v51 & 7;
      uint64_t v52 = (unsigned int *)((char *)v47 + (v51 >> 3));
      v474 = v52;
      if (v52 >= v18)
      {
        if (v52 > v18) {
          uint64_t v52 = v18;
        }
        unsigned int v53 = v50;
      }
      else
      {
        unsigned int v53 = bswap32(*v52);
      }
      int v54 = v53 << (v51 & 7);
      v9[29] = v50 < 0;
      unint64_t v55 = (v51 & 7) + 1;
      LODWORD(v476) = v54;
      HIDWORD(v476) = v55 & 7;
      __int16 v56 = (unsigned int *)((char *)v52 + (v55 >> 3));
      v474 = v56;
      if (v56 >= v18)
      {
        if (v56 > v18) {
          v474 = v18;
        }
        unsigned int v57 = v54;
      }
      else
      {
        unsigned int v57 = bswap32(*v56);
      }
      LODWORD(v476) = v57 << (v55 & 7);
      v9[30] = v54 < 0;
      v9[31] = sub_1D0C4C8F0((uint64_t)__p);
      v9[32] = sub_1D0C4C8F0((uint64_t)__p);
      int v58 = sub_1D0C4C8F0((uint64_t)__p);
      v9[33] = (-((v58 + 1) & 1) ^ ((v58 + 1) >> 1)) + ((v58 + 1) & 1);
      unint64_t v59 = SHIDWORD(v476) + 1;
      HIDWORD(v476) = v59 & 7;
      uint64_t v60 = v475;
      size_t v61 = (unsigned int *)((char *)v474 + (v59 >> 3));
      v474 = v61;
      if (v61 >= v475)
      {
        if (v61 > v475) {
          size_t v61 = v475;
        }
        unsigned int v62 = v476;
      }
      else
      {
        unsigned int v62 = bswap32(*v61);
      }
      int v63 = v62 << (v59 & 7);
      v9[34] = (v476 & 0x80000000) != 0;
      unint64_t v64 = (v59 & 7) + 1;
      LODWORD(v476) = v63;
      HIDWORD(v476) = v64 & 7;
      double v65 = (unsigned int *)((char *)v61 + (v64 >> 3));
      v474 = v65;
      if (v65 >= v60)
      {
        if (v65 > v60) {
          double v65 = v60;
        }
        unsigned int v66 = v63;
      }
      else
      {
        unsigned int v66 = bswap32(*v65);
      }
      int v67 = v66 << (v64 & 7);
      v9[35] = v63 < 0;
      unint64_t v68 = (v64 & 7) + 1;
      LODWORD(v476) = v67;
      HIDWORD(v476) = v68 & 7;
      unsigned int v69 = (unsigned int *)((char *)v65 + (v68 >> 3));
      v474 = v69;
      BOOL v70 = v69 > v60;
      if (v69 >= v60)
      {
        unsigned int v71 = v67;
        if (v70)
        {
          v474 = v60;
          unsigned int v71 = v67;
        }
      }
      else
      {
        unsigned int v71 = bswap32(*v69);
      }
      LODWORD(v476) = v71 << (v68 & 7);
      v9[36] = v67 < 0;
      if (v67 < 0) {
        char v72 = sub_1D0C4C8F0((uint64_t)__p);
      }
      else {
        char v72 = 0;
      }
      v9[37] = v72;
      int v90 = sub_1D0C4C8F0((uint64_t)__p);
      v9[38] = (-((v90 + 1) & 1) ^ ((v90 + 1) >> 1)) + ((v90 + 1) & 1);
      int v91 = sub_1D0C4C8F0((uint64_t)__p);
      v9[39] = (-((v91 + 1) & 1) ^ ((v91 + 1) >> 1)) + ((v91 + 1) & 1);
      unint64_t v92 = SHIDWORD(v476) + 1;
      HIDWORD(v476) = v92 & 7;
      v93 = v475;
      uint64_t v94 = (unsigned int *)((char *)v474 + (v92 >> 3));
      v474 = v94;
      if (v94 >= v475)
      {
        if (v94 > v475) {
          uint64_t v94 = v475;
        }
        unsigned int v95 = v476;
      }
      else
      {
        unsigned int v95 = bswap32(*v94);
      }
      int v96 = v95 << (v92 & 7);
      v9[40] = (v476 & 0x80000000) != 0;
      unint64_t v97 = (v92 & 7) + 1;
      LODWORD(v476) = v96;
      HIDWORD(v476) = v97 & 7;
      unsigned int v98 = (unsigned int *)((char *)v94 + (v97 >> 3));
      v474 = v98;
      if (v98 >= v93)
      {
        if (v98 > v93) {
          unsigned int v98 = v93;
        }
        unsigned int v99 = v96;
      }
      else
      {
        unsigned int v99 = bswap32(*v98);
      }
      int v100 = v99 << (v97 & 7);
      v9[41] = v96 < 0;
      unint64_t v101 = (v97 & 7) + 1;
      LODWORD(v476) = v100;
      HIDWORD(v476) = v101 & 7;
      unsigned int v102 = (unsigned int *)((char *)v98 + (v101 >> 3));
      v474 = v102;
      if (v102 >= v93)
      {
        if (v102 > v93) {
          unsigned int v102 = v93;
        }
        unsigned int v103 = v100;
      }
      else
      {
        unsigned int v103 = bswap32(*v102);
      }
      int v104 = v103 << (v101 & 7);
      v9[42] = v100 < 0;
      unint64_t v105 = (v101 & 7) + 1;
      LODWORD(v476) = v104;
      HIDWORD(v476) = v105 & 7;
      v106 = (unsigned int *)((char *)v102 + (v105 >> 3));
      v474 = v106;
      if (v106 >= v93)
      {
        if (v106 > v93) {
          v106 = v93;
        }
        unsigned int v107 = v104;
      }
      else
      {
        unsigned int v107 = bswap32(*v106);
      }
      int v108 = v107 << (v105 & 7);
      v9[43] = v104 < 0;
      unint64_t v109 = (v105 & 7) + 1;
      LODWORD(v476) = v108;
      HIDWORD(v476) = v109 & 7;
      int v110 = (unsigned int *)((char *)v106 + (v109 >> 3));
      v474 = v110;
      if (v110 >= v93)
      {
        if (v110 > v93) {
          int v110 = v93;
        }
        unsigned int v111 = v108;
      }
      else
      {
        unsigned int v111 = bswap32(*v110);
      }
      int v112 = v111 << (v109 & 7);
      v9[44] = v108 < 0;
      unint64_t v113 = (v109 & 7) + 1;
      unsigned int v114 = v113 & 7;
      unint64_t v476 = __PAIR64__(v114, v112);
      unsigned int v115 = (unsigned int *)((char *)v110 + (v113 >> 3));
      v474 = v115;
      if (v115 >= v93)
      {
        if (v115 > v93)
        {
          v474 = v93;
          unsigned int v115 = v93;
        }
        unsigned int v116 = v112;
      }
      else
      {
        unsigned int v116 = bswap32(*v115);
      }
      int v117 = v116 << v114;
      LODWORD(v476) = v117;
      v9[45] = v112 < 0;
      v9[1776] = v108 < 0;
      if ((v108 & 0x80000000) == 0)
      {
        LOBYTE(v118) = 1;
        goto LABEL_136;
      }
      unsigned __int16 v123 = sub_1D0C4C8F0((uint64_t)__p);
      *((_WORD *)v9 + 23) = v123;
      v124 = (unsigned __int16 *)(v9 + 46);
      unsigned __int16 v125 = sub_1D0C4C8F0((uint64_t)__p);
      *((_WORD *)v9 + 24) = v125;
      uint64_t v126 = v9 + 48;
      int v127 = v476;
      unint64_t v128 = SHIDWORD(v476) + 1;
      char v129 = v128 & 7;
      HIDWORD(v476) = v128 & 7;
      unsigned int v130 = (unsigned int *)((char *)v474 + (v128 >> 3));
      v474 = v130;
      if (v130 >= v475)
      {
        if (v130 > v475) {
          v474 = v475;
        }
        unsigned int v131 = v476;
      }
      else
      {
        unsigned int v131 = bswap32(*v130);
      }
      LODWORD(v476) = v131 << v129;
      v9[50] = v127 < 0;
      if (v123 < 0x14u)
      {
        if (v125 < 0x16u)
        {
          sub_1D0C8E930((char **)v9 + 209, v123 + 1);
          sub_1D0C8E930((char **)v9 + 212, *((unsigned __int16 *)v9 + 24) + 1);
          if (!v9[50])
          {
            if (*v124)
            {
              unint64_t v195 = 0;
              uint64_t v196 = *((void *)v9 + 209);
              do
                *(_WORD *)(v196 + 2 * v195++) = sub_1D0C4C8F0((uint64_t)__p);
              while (v195 < *v124);
            }
            if (*v126)
            {
              unint64_t v197 = 0;
              uint64_t v198 = *((void *)v9 + 212);
              do
                *(_WORD *)(v198 + 2 * v197++) = sub_1D0C4C8F0((uint64_t)__p);
              while (v197 < (unsigned __int16)*v126);
            }
          }
          unsigned int v199 = v476;
          unint64_t v200 = SHIDWORD(v476) + 1;
          unsigned int v114 = v200 & 7;
          HIDWORD(v476) = v114;
          v93 = v475;
          unsigned int v115 = (unsigned int *)((char *)v474 + (v200 >> 3));
          v474 = v115;
          if (v115 >= v475)
          {
            if (v115 > v475) {
              unsigned int v115 = v475;
            }
            unsigned int v201 = v476;
          }
          else
          {
            unsigned int v201 = bswap32(*v115);
          }
          int v117 = v201 << v114;
          LODWORD(v476) = v117;
          unsigned int v118 = v199 >> 31;
LABEL_136:
          v9[51] = v118;
          unsigned int v119 = v114 + 1;
          int v120 = v119 & 7;
          HIDWORD(v476) = v120;
          unsigned int v121 = (unsigned int *)((char *)v115 + (v119 >> 3));
          v474 = v121;
          if (v121 >= v93)
          {
            if (v121 > v93) {
              unsigned int v121 = v93;
            }
            unsigned int v122 = v117;
          }
          else
          {
            unsigned int v122 = bswap32(*v121);
          }
          int v132 = v122 << v120;
          v9[52] = v117 < 0;
          uint64_t v133 = (v120 + 1) >> 3;
          int v134 = (v120 + 1) & 7;
          unint64_t v476 = __PAIR64__(v134, v132);
          unsigned int v135 = (unsigned int *)((char *)v121 + v133);
          v474 = (unsigned int *)((char *)v121 + v133);
          if ((unsigned int *)((char *)v121 + v133) >= v93)
          {
            if ((unsigned int *)((char *)v121 + v133) > v93) {
              unsigned int v135 = v93;
            }
            unsigned int v136 = v132;
          }
          else
          {
            unsigned int v136 = bswap32(*v135);
          }
          int v137 = v136 << v134;
          LODWORD(v476) = v137;
          v9[53] = v132 < 0;
          if (v132 < 0)
          {
            unsigned int v138 = v134 + 1;
            uint64_t v139 = v138 >> 3;
            int v140 = v138 & 7;
            HIDWORD(v476) = v140;
            unint64_t v141 = (unsigned int *)((char *)v135 + v139);
            v474 = v141;
            if (v141 >= v93)
            {
              if (v141 > v93) {
                unint64_t v141 = v93;
              }
              unsigned int v142 = v137;
            }
            else
            {
              unsigned int v142 = bswap32(*v141);
            }
            int v152 = v142 << v140;
            v9[54] = v137 < 0;
            unsigned int v153 = v140 + 1;
            int v134 = ((_BYTE)v140 + 1) & 7;
            unint64_t v476 = __PAIR64__(v134, v152);
            unsigned int v135 = (unsigned int *)((char *)v141 + (v153 >> 3));
            v474 = v135;
            if (v135 >= v93)
            {
              unsigned int v154 = v152;
              if (v135 > v93)
              {
                v474 = v93;
                unsigned int v135 = v93;
                unsigned int v154 = v152;
              }
            }
            else
            {
              unsigned int v154 = bswap32(*v135);
            }
            int v137 = v154 << v134;
            LODWORD(v476) = v137;
            v9[55] = v152 < 0;
            if (v152 < 0)
            {
              LOBYTE(v157) = 0;
              v9[56] = 0;
            }
            else
            {
              int v155 = sub_1D0C4C8F0((uint64_t)__p);
              v9[56] = (-((v155 + 1) & 1) ^ ((v155 + 1) >> 1)) + ((v155 + 1) & 1);
              int v156 = sub_1D0C4C8F0((uint64_t)__p);
              unsigned int v157 = (-((v156 + 1) & 1) ^ ((v156 + 1) >> 1)) + ((v156 + 1) & 1);
              int v137 = v476;
              int v134 = HIDWORD(v476);
              unsigned int v135 = v474;
              v93 = v475;
            }
            v9[57] = v157;
          }
          unint64_t v158 = v134 + 1;
          int v159 = v158 & 7;
          HIDWORD(v476) = v159;
          unsigned int v160 = (unsigned int *)((char *)v135 + (v158 >> 3));
          v474 = v160;
          if (v160 >= v93)
          {
            unsigned int v161 = v137;
            if (v160 > v93)
            {
              v474 = v93;
              unsigned int v160 = v93;
              unsigned int v161 = v137;
            }
          }
          else
          {
            unsigned int v161 = bswap32(*v160);
          }
          int v162 = v161 << v159;
          LODWORD(v476) = v162;
          v9[58] = v137 < 0;
          if (v137 < 0)
          {
            sub_1D0C476EC((uint64_t)(v9 + 64), (uint64_t)__p);
            int v162 = v476;
            int v159 = HIDWORD(v476);
            unsigned int v160 = v474;
            v93 = v475;
          }
          unint64_t v163 = v159 + 1;
          char v164 = v163 & 7;
          HIDWORD(v476) = v163 & 7;
          int v165 = (unsigned int *)((char *)v160 + (v163 >> 3));
          v474 = v165;
          BOOL v166 = v165 > v93;
          if (v165 >= v93)
          {
            unsigned int v167 = v162;
            if (v166)
            {
              v474 = v93;
              unsigned int v167 = v162;
            }
          }
          else
          {
            unsigned int v167 = bswap32(*v165);
          }
          LODWORD(v476) = v167 << v164;
          v9[1632] = v162 < 0;
          *((_WORD *)v9 + 817) = sub_1D0C4C8F0((uint64_t)__p);
          unint64_t v168 = SHIDWORD(v476) + 1;
          HIDWORD(v476) = v168 & 7;
          uint64_t v169 = v475;
          char v170 = (unsigned int *)((char *)v474 + (v168 >> 3));
          v474 = v170;
          if (v170 >= v475)
          {
            if (v170 > v475) {
              char v170 = v475;
            }
            unsigned int v171 = v476;
          }
          else
          {
            unsigned int v171 = bswap32(*v170);
          }
          int v172 = v171 << (v168 & 7);
          v9[1636] = (v476 & 0x80000000) != 0;
          unint64_t v173 = (v168 & 7) + 1;
          unsigned int v174 = v173 & 7;
          unint64_t v476 = __PAIR64__(v174, v172);
          unsigned int v175 = (unsigned int *)((char *)v170 + (v173 >> 3));
          v474 = v175;
          if (v175 >= v169)
          {
            unsigned int v176 = v172;
            if (v175 > v169)
            {
              v474 = v169;
              unsigned int v175 = v169;
              unsigned int v176 = v172;
            }
          }
          else
          {
            unsigned int v176 = bswap32(*v175);
          }
          int v177 = v176 << v174;
          LODWORD(v476) = v177;
          v9[1637] = v172 < 0;
          if (v172 < 0)
          {
            unint64_t v180 = (v173 & 7) + 1;
            HIDWORD(v476) = v180 & 7;
            unint64_t v181 = (unsigned int *)((char *)v175 + (v180 >> 3));
            v474 = v181;
            if (v181 >= v169)
            {
              if (v181 > v169) {
                unint64_t v181 = v169;
              }
              unsigned int v182 = v177;
            }
            else
            {
              unsigned int v182 = bswap32(*v181);
            }
            unsigned int v183 = v182 << (v180 & 7);
            unsigned int v179 = v177 >> 31;
            v9[1638] = v177 < 0;
            unint64_t v184 = (v180 & 7) + 7;
            unsigned int v174 = v184 & 7;
            unint64_t v476 = __PAIR64__(v174, v183);
            unsigned int v175 = (unsigned int *)((char *)v181 + (v184 >> 3));
            v474 = v175;
            if (v175 >= v169)
            {
              if (v175 > v169)
              {
                v474 = v169;
                unsigned int v175 = v169;
              }
              unsigned int v185 = v183;
            }
            else
            {
              unsigned int v185 = bswap32(*v175);
            }
            int v177 = v185 << v174;
            LODWORD(v476) = v177;
            BOOL v178 = (v183 & 0xFE000000) != 0;
          }
          else
          {
            BOOL v178 = 0;
            unsigned int v179 = v9[1638];
          }
          if (v179)
          {
            if (v9[35])
            {
              v9[1639] = sub_1D0C4C8F0((uint64_t)__p);
              int v177 = v476;
              unsigned int v174 = HIDWORD(v476);
              unsigned int v175 = v474;
              uint64_t v169 = v475;
            }
            unint64_t v186 = (int)v174 + 1;
            HIDWORD(v476) = v186 & 7;
            unsigned int v187 = (unsigned int *)((char *)v175 + (v186 >> 3));
            v474 = v187;
            if (v187 >= v169)
            {
              if (v187 > v169) {
                unsigned int v187 = v169;
              }
              unsigned int v188 = v177;
            }
            else
            {
              unsigned int v188 = bswap32(*v187);
            }
            int v189 = v188 << (v186 & 7);
            v9[1640] = v177 < 0;
            unint64_t v190 = (v186 & 7) + 1;
            LODWORD(v476) = v189;
            HIDWORD(v476) = v190 & 7;
            unint64_t v191 = (unsigned int *)((char *)v187 + (v190 >> 3));
            v474 = v191;
            BOOL v192 = v191 > v169;
            if (v191 >= v169)
            {
              unsigned int v193 = v189;
              if (v192)
              {
                v474 = v169;
                unsigned int v193 = v189;
              }
            }
            else
            {
              unsigned int v193 = bswap32(*v191);
            }
            LODWORD(v476) = v193 << (v190 & 7);
            v9[1641] = v189 < 0;
            if (v189 < 0)
            {
              v9[1642] = sub_1D0C4C8F0((uint64_t)__p);
              unsigned __int8 v194 = sub_1D0C4C8F0((uint64_t)__p);
              v9[1643] = v194;
              if (v194 > 5u)
              {
                if (dword_1EB671A40 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid chroma_qp_offset_list_len_minus1 = %d\n", v194);
                  syslog(27, "Invalid chroma_qp_offset_list_len_minus1 = %d\n", v9[1643]);
                }
                goto LABEL_291;
              }
              uint64_t v223 = v194 + 1;
              v224 = v9 + 1650;
              do
              {
                int v225 = sub_1D0C4C8F0((uint64_t)__p);
                *(v224 - 6) = (-((v225 + 1) & 1) ^ ((v225 + 1) >> 1)) + ((v225 + 1) & 1);
                int v226 = sub_1D0C4C8F0((uint64_t)__p);
                *v224++ = (-((v226 + 1) & 1) ^ ((v226 + 1) >> 1)) + ((v226 + 1) & 1);
                --v223;
              }
              while (v223);
            }
            v9[1656] = sub_1D0C4C8F0((uint64_t)__p);
            v9[1657] = sub_1D0C4C8F0((uint64_t)__p);
          }
          if (!v178) {
            goto LABEL_280;
          }
          if (dword_1EB671A40 >= 4)
          {
            fwrite("Ignoring PPS extension\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(28, "Ignoring PPS extension\n");
          }
          uint64_t v6 = sub_1D0C979F4((uint64_t)__p);
          if (!v6)
          {
LABEL_280:
            unsigned int v227 = v9[24];
            uint64_t v6 = 4294954387;
            if (v227 <= 0x3F && v9[25] < 0x10u)
            {
              if (a3)
              {
                sub_1D0CBE3CC((uint64_t)v11, (FILE *)*MEMORY[0x1E4F143C8]);
                unsigned int v227 = *v11;
              }
              uint64_t v228 = a1 + 16 * v227;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
              *(void *)(v228 + 512) = v11;
              unsigned __int8 v229 = *(std::__shared_weak_count **)(v228 + 520);
              *(void *)(v228 + 520) = v9;
              if (v229) {
LABEL_284:
              }
                sub_1D0C4C984(v229);
LABEL_285:
              BOOL v230 = (std::__shared_weak_count *)v9;
LABEL_286:
              sub_1D0C4C984(v230);
LABEL_287:
              uint64_t v6 = 0;
              goto LABEL_161;
            }
          }
LABEL_16:
          uint64_t v12 = (std::__shared_weak_count *)v9;
LABEL_160:
          sub_1D0C4C984(v12);
          goto LABEL_161;
        }
        if (dword_1EB671A40 < 3) {
          goto LABEL_291;
        }
        uint64_t v145 = 21;
        v146 = "num_tile_rows_minus1 (%d) out of range [0, %d]\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_tile_rows_minus1 (%d) out of range [0, %d]\n", v125, 21);
        v124 = (unsigned __int16 *)(v9 + 48);
      }
      else
      {
        if (dword_1EB671A40 < 3) {
          goto LABEL_291;
        }
        uint64_t v145 = 19;
        v146 = "num_tile_columns_minus1 (%d) out of range [0, %d]\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_tile_columns_minus1 (%d) out of range [0, %d]\n", v123, 19);
      }
      syslog(27, v146, *v124, v145);
      goto LABEL_291;
    case '!':
      int v9 = (char *)operator new(0x888uLL);
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)int v9 = &unk_1F26F1708;
      uint64_t v10 = (unsigned __int8 *)(v9 + 24);
      sub_1D0C42C78((uint64_t)(v9 + 24), a1, 0);
      if (v9[2173])
      {
        if (dword_1EB671A40 >= 3)
        {
          fwrite("This SPS has already been parsed, a new one must be allocated instead\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "This SPS has already been parsed, a new one must be allocated instead\n");
        }
LABEL_15:
        uint64_t v6 = 4294954385;
        goto LABEL_16;
      }
      v9[2173] = 1;
      unint64_t v13 = SHIDWORD(v476) + 4;
      HIDWORD(v476) = v13 & 7;
      unsigned int v14 = v475;
      int v15 = (unsigned int *)((char *)v474 + (v13 >> 3));
      v474 = v15;
      if (v15 >= v475)
      {
        if (v15 > v475) {
          int v15 = v475;
        }
        unsigned int v16 = v476;
      }
      else
      {
        unsigned int v16 = bswap32(*v15);
      }
      unsigned int v25 = v16 << (v13 & 7);
      *uint64_t v10 = v476 >> 28;
      unint64_t v26 = (v13 & 7) + 3;
      LODWORD(v476) = v25;
      HIDWORD(v476) = v26 & 7;
      unsigned int v27 = (unsigned int *)((char *)v15 + (v26 >> 3));
      v474 = v27;
      if (v27 >= v14)
      {
        if (v27 > v14) {
          unsigned int v27 = v14;
        }
        unsigned int v28 = v25;
      }
      else
      {
        unsigned int v28 = bswap32(*v27);
      }
      int v29 = v25 >> 29;
      v9[25] = v25 >> 29;
      unint64_t v30 = (v26 & 7) + 1;
      LODWORD(v476) = v28 << (v26 & 7);
      HIDWORD(v476) = v30 & 7;
      uint64_t v31 = (unsigned int *)((char *)v27 + (v30 >> 3));
      v474 = v31;
      if (v31 >= v14)
      {
        if (v31 > v14) {
          v474 = v14;
        }
        unsigned int v32 = v28 << (v26 & 7);
      }
      else
      {
        unsigned int v32 = bswap32(*v31);
      }
      LODWORD(v476) = v32 << (v30 & 7);
      v9[26] = ((v28 << (v26 & 7)) & 0x80000000) != 0;
      uint64_t v6 = sub_1D0C51120((uint64_t)(v9 + 28), v29, (uint64_t)__p);
      if (v6) {
        goto LABEL_16;
      }
      v9[224] = sub_1D0C4C8F0((uint64_t)__p);
      char v33 = sub_1D0C4C8F0((uint64_t)__p);
      v9[225] = v33;
      if (v33 == 3)
      {
        int v34 = v476;
        unint64_t v35 = SHIDWORD(v476) + 1;
        char v36 = v35 & 7;
        HIDWORD(v476) = v35 & 7;
        CFNumberRef v37 = (unsigned int *)((char *)v474 + (v35 >> 3));
        v474 = v37;
        BOOL v38 = v37 > v475;
        if (v37 >= v475)
        {
          unsigned int v39 = v476;
          if (v38)
          {
            v474 = v475;
            unsigned int v39 = v476;
          }
        }
        else
        {
          unsigned int v39 = bswap32(*v37);
        }
        LODWORD(v476) = v39 << v36;
        v9[226] = v34 < 0;
        if (v34 < 0)
        {
          if (dword_1EB671A40 >= 3)
          {
            fwrite("separate_colour_plane_flag_ not supported\n", 0x2AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(27, "separate_colour_plane_flag_ not supported\n");
          }
          uint64_t v6 = 4294954386;
          goto LABEL_16;
        }
      }
      else
      {
        v9[226] = 0;
      }
      int v202 = sub_1D0C5108C((uint64_t)__p);
      *((_DWORD *)v9 + 57) = v202;
      int v203 = sub_1D0C5108C((uint64_t)__p);
      *((_DWORD *)v9 + 58) = v203;
      if (v202 > 268435454 || v203 >= 0xFFFFFFF)
      {
        if (dword_1EB671A40 >= 3)
        {
          unint64_t v210 = (FILE *)*MEMORY[0x1E4F143C8];
          unint64_t v211 = "width/height are larger than we support\n";
          uint64_t v212 = "width/height are larger than we support\n";
          size_t v213 = 40;
LABEL_290:
          fwrite(v212, v213, 1uLL, v210);
          syslog(27, v211);
        }
      }
      else
      {
        if (v202 >= 1 && v203 > 0)
        {
          int v204 = v476;
          unint64_t v205 = SHIDWORD(v476) + 1;
          char v206 = v205 & 7;
          HIDWORD(v476) = v205 & 7;
          unint64_t v207 = (unsigned int *)((char *)v474 + (v205 >> 3));
          v474 = v207;
          BOOL v208 = v207 > v475;
          if (v207 >= v475)
          {
            unsigned int v209 = v476;
            if (v208)
            {
              v474 = v475;
              unsigned int v209 = v476;
            }
          }
          else
          {
            unsigned int v209 = bswap32(*v207);
          }
          LODWORD(v476) = v209 << v206;
          v9[236] = v204 < 0;
          if (v204 < 0)
          {
            *((_WORD *)v9 + 119) = sub_1D0C5108C((uint64_t)__p);
            *((_WORD *)v9 + 120) = sub_1D0C5108C((uint64_t)__p);
            *((_WORD *)v9 + 121) = sub_1D0C5108C((uint64_t)__p);
            *((_WORD *)v9 + 122) = sub_1D0C5108C((uint64_t)__p);
          }
          v9[246] = sub_1D0C4C8F0((uint64_t)__p);
          v9[247] = sub_1D0C4C8F0((uint64_t)__p);
          unsigned __int8 v250 = sub_1D0C4C8F0((uint64_t)__p);
          v9[248] = v250;
          if (v250 >= 0xDu)
          {
            if (dword_1EB671A40 >= 3)
            {
              uint64_t v251 = 12;
              uint64_t v252 = "log2_max_pic_order_cnt_lsb_minus4 (%d) > %d\n";
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2_max_pic_order_cnt_lsb_minus4 (%d) > %d\n", v250, 12);
              uint64_t v253 = v9[248];
LABEL_327:
              syslog(27, v252, v253, v251);
            }
            goto LABEL_291;
          }
          int v254 = v476;
          unint64_t v255 = SHIDWORD(v476) + 1;
          char v256 = v255 & 7;
          HIDWORD(v476) = v255 & 7;
          unsigned int v257 = (unsigned int *)((char *)v474 + (v255 >> 3));
          v474 = v257;
          BOOL v258 = v257 > v475;
          if (v257 >= v475)
          {
            unsigned int v259 = v476;
            if (v258)
            {
              v474 = v475;
              unsigned int v259 = v476;
            }
          }
          else
          {
            unsigned int v259 = bswap32(*v257);
          }
          unint64_t v269 = 0;
          LODWORD(v476) = v259 << v256;
          v9[249] = v254 < 0;
          *((_WORD *)v9 + 1076) = 0;
          do
          {
            if (!v269 || v254 < 0)
            {
              v9[v269 + 250] = sub_1D0C4C8F0((uint64_t)__p);
              v9[v269 + 257] = sub_1D0C4C8F0((uint64_t)__p);
              int v271 = sub_1D0C5108C((uint64_t)__p);
            }
            else
            {
              uint64_t v270 = &v9[v269];
              v270[250] = v9[250];
              v270[257] = v9[257];
              int v271 = *((_DWORD *)v9 + 66);
            }
            *(_DWORD *)&v9[4 * v269 + 264] = v271;
            unsigned int v272 = v9[v269 + 250];
            if (v272 > 0xF) {
              goto LABEL_291;
            }
            if (v9[2152] > v272) {
              LOBYTE(v272) = v9[2152];
            }
            v9[2152] = v272;
            unsigned int v273 = v9[v269 + 257];
            if (v9[2153] > v273) {
              LOBYTE(v273) = v9[2153];
            }
            v9[2153] = v273;
            BOOL v217 = v269++ >= v9[25];
          }
          while (!v217);
          v9[292] = sub_1D0C4C8F0((uint64_t)__p);
          v9[293] = sub_1D0C4C8F0((uint64_t)__p);
          v9[294] = sub_1D0C4C8F0((uint64_t)__p);
          v9[295] = sub_1D0C4C8F0((uint64_t)__p);
          v9[296] = sub_1D0C4C8F0((uint64_t)__p);
          v9[297] = sub_1D0C4C8F0((uint64_t)__p);
          int v274 = v476;
          unint64_t v275 = SHIDWORD(v476) + 1;
          int v276 = v275 & 7;
          HIDWORD(v476) = v276;
          __int16 v277 = v475;
          int v278 = (unsigned int *)((char *)v474 + (v275 >> 3));
          v474 = v278;
          if (v278 >= v475)
          {
            if (v278 > v475) {
              int v278 = v475;
            }
            unsigned int v279 = v476;
          }
          else
          {
            unsigned int v279 = bswap32(*v278);
          }
          int v286 = v279 << v276;
          LODWORD(v476) = v286;
          v9[298] = v274 < 0;
          if (v274 < 0)
          {
            unint64_t v287 = (v275 & 7) + 1;
            int v276 = v287 & 7;
            HIDWORD(v476) = v276;
            int v278 = (unsigned int *)((char *)v278 + (v287 >> 3));
            v474 = v278;
            if (v278 >= v277)
            {
              unsigned int v288 = v286;
              if (v278 > v277)
              {
                v474 = v277;
                int v278 = v277;
                unsigned int v288 = v286;
              }
            }
            else
            {
              unsigned int v288 = bswap32(*v278);
            }
            int v298 = v288 << v276;
            LODWORD(v476) = v298;
            v9[299] = v286 < 0;
            if (v286 < 0)
            {
              uint64_t v6 = sub_1D0C476EC((uint64_t)(v9 + 440), (uint64_t)__p);
              if (v6) {
                goto LABEL_16;
              }
              int v286 = v476;
              int v276 = HIDWORD(v476);
              int v278 = v474;
              __int16 v277 = v475;
            }
            else
            {
              int v286 = v298;
            }
          }
          unint64_t v299 = v276 + 1;
          HIDWORD(v476) = v299 & 7;
          v300 = (unsigned int *)((char *)v278 + (v299 >> 3));
          v474 = v300;
          if (v300 >= v277)
          {
            if (v300 > v277) {
              v300 = v277;
            }
            unsigned int v301 = v286;
          }
          else
          {
            unsigned int v301 = bswap32(*v300);
          }
          int v302 = v301 << (v299 & 7);
          v9[300] = v286 < 0;
          unint64_t v303 = (v299 & 7) + 1;
          LODWORD(v476) = v302;
          HIDWORD(v476) = v303 & 7;
          char v304 = (unsigned int *)((char *)v300 + (v303 >> 3));
          v474 = v304;
          if (v304 >= v277)
          {
            if (v304 > v277) {
              char v304 = v277;
            }
            unsigned int v305 = v302;
          }
          else
          {
            unsigned int v305 = bswap32(*v304);
          }
          int v306 = v305 << (v303 & 7);
          v9[301] = v302 < 0;
          unint64_t v307 = (v303 & 7) + 1;
          LODWORD(v476) = v306;
          HIDWORD(v476) = v307 & 7;
          int v308 = (unsigned int *)((char *)v304 + (v307 >> 3));
          v474 = v308;
          if (v308 >= v277)
          {
            unsigned int v309 = v305 << (v303 & 7);
            if (v308 > v277)
            {
              v474 = v277;
              int v308 = v277;
              unsigned int v309 = v306;
            }
          }
          else
          {
            unsigned int v309 = bswap32(*v308);
          }
          unsigned int v310 = v309 << (v307 & 7);
          LODWORD(v476) = v310;
          v9[302] = v306 < 0;
          if (v306 < 0)
          {
            unint64_t v312 = (v307 & 7) + 4;
            HIDWORD(v476) = v312 & 7;
            int v313 = (unsigned int *)((char *)v308 + (v312 >> 3));
            v474 = v313;
            if (v313 >= v277)
            {
              if (v313 > v277) {
                int v313 = v277;
              }
              unsigned int v314 = v310;
            }
            else
            {
              unsigned int v314 = bswap32(*v313);
            }
            v9[303] = v310 >> 28;
            unint64_t v315 = (v312 & 7) + 4;
            LODWORD(v476) = v314 << (v312 & 7);
            HIDWORD(v476) = v315 & 7;
            v316 = (unsigned int *)((char *)v313 + (v315 >> 3));
            v474 = v316;
            if (v316 >= v277)
            {
              if (v316 > v277) {
                v474 = v277;
              }
              unsigned int v317 = v314 << (v312 & 7);
            }
            else
            {
              unsigned int v317 = bswap32(*v316);
            }
            LODWORD(v476) = v317 << (v315 & 7);
            v9[304] = v314 << (v312 & 7) >> 28;
            v9[305] = sub_1D0C4C8F0((uint64_t)__p);
            v9[306] = sub_1D0C4C8F0((uint64_t)__p);
            unsigned int v318 = v476;
            unint64_t v319 = SHIDWORD(v476) + 1;
            char v320 = v319 & 7;
            HIDWORD(v476) = v319 & 7;
            v321 = (unsigned int *)((char *)v474 + (v319 >> 3));
            v474 = v321;
            if (v321 >= v475)
            {
              if (v321 > v475) {
                v474 = v475;
              }
              unsigned int v322 = v476;
            }
            else
            {
              unsigned int v322 = bswap32(*v321);
            }
            LODWORD(v476) = v322 << v320;
            unsigned int v311 = v318 >> 31;
          }
          else
          {
            LOBYTE(v311) = 0;
          }
          v9[307] = v311;
          unsigned int v323 = sub_1D0C4C8F0((uint64_t)__p);
          *((_DWORD *)v9 + 78) = v323;
          if (v323 >= 0x41)
          {
            if (dword_1EB671A40 < 3) {
              goto LABEL_291;
            }
            uint64_t v251 = 64;
            uint64_t v252 = "num_short_term_ref_pic_sets (%d) out of range [0, %d]\n";
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_short_term_ref_pic_sets (%d) out of range [0, %d]\n", v323, 64);
            uint64_t v253 = *((unsigned int *)v9 + 78);
            goto LABEL_327;
          }
          sub_1D0C63C90((void **)v9 + 40, v323);
          if (*((_DWORD *)v9 + 78))
          {
            uint64_t v324 = 0;
            unint64_t v325 = 0;
            do
            {
              uint64_t v6 = sub_1D0C40F84(*((void *)v9 + 40) + v324, (uint64_t)__p, (uint64_t)v10, v325);
              if (v6) {
                goto LABEL_16;
              }
              ++v325;
              v324 += 248;
            }
            while (v325 < *((unsigned int *)v9 + 78));
          }
          int v326 = v476;
          unint64_t v327 = SHIDWORD(v476) + 1;
          unsigned int v328 = v327 & 7;
          HIDWORD(v476) = v328;
          unint64_t v329 = (unint64_t)v475;
          uint64_t v330 = (unsigned int *)((char *)v474 + (v327 >> 3));
          v474 = v330;
          if (v330 >= v475)
          {
            unsigned int v331 = v476;
            if (v330 > v475)
            {
              v474 = v475;
              uint64_t v330 = v475;
              unsigned int v331 = v476;
            }
          }
          else
          {
            unsigned int v331 = bswap32(*v330);
          }
          int v332 = v331 << v328;
          LODWORD(v476) = v332;
          v9[344] = v326 < 0;
          if (v326 < 0)
          {
            unsigned int v350 = sub_1D0C4C8F0((uint64_t)__p);
            *((_DWORD *)v9 + 87) = v350;
            if (v350 >= 0x21)
            {
              if (dword_1EB671A40 < 3) {
                goto LABEL_291;
              }
              uint64_t v251 = 32;
              uint64_t v252 = "num_long_term_ref_pics_sps_ (%d) out of range [0, %d]\n";
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_long_term_ref_pics_sps_ (%d) out of range [0, %d]\n", v350, 32);
              uint64_t v253 = *((unsigned int *)v9 + 87);
              goto LABEL_327;
            }
            *((_DWORD *)v9 + 104) = 0;
            int v332 = v476;
            unsigned int v328 = HIDWORD(v476);
            uint64_t v330 = v474;
            unint64_t v329 = (unint64_t)v475;
            if (v350)
            {
              int v357 = 0;
              uint64_t v358 = 0;
              uint64_t v359 = v9[248];
              uint64_t v360 = v359 + 4;
              char v361 = 28 - v359;
              uint64_t v362 = v350;
              do
              {
                unint64_t v363 = v360 + (int)v328;
                HIDWORD(v476) = v363 & 7;
                v364 = (unsigned int *)((char *)v330 + (v363 >> 3));
                v474 = v364;
                if ((unint64_t)v364 >= v329)
                {
                  if ((unint64_t)v364 > v329) {
                    v364 = (unsigned int *)v329;
                  }
                  unsigned int v365 = v332;
                }
                else
                {
                  unsigned int v365 = bswap32(*v364);
                }
                unsigned int v366 = v365 << (v363 & 7);
                *(_WORD *)&v9[2 * v358 + 352] = v332 >> v361;
                unint64_t v367 = (v363 & 7) + 1;
                unsigned int v328 = v367 & 7;
                unint64_t v476 = __PAIR64__(v328, v366);
                uint64_t v330 = (unsigned int *)((char *)v364 + (v367 >> 3));
                v474 = v330;
                if ((unint64_t)v330 >= v329)
                {
                  if ((unint64_t)v330 > v329)
                  {
                    v474 = (unsigned int *)v329;
                    uint64_t v330 = (unsigned int *)v329;
                  }
                  unsigned int v368 = v366;
                }
                else
                {
                  unsigned int v368 = bswap32(*v330);
                }
                int v332 = v368 << v328;
                LODWORD(v476) = v332;
                v357 |= v366 >> 31 << v358;
                *((_DWORD *)v9 + 104) = v357;
                ++v358;
              }
              while (v362 != v358);
            }
          }
          unint64_t v333 = (int)v328 + 1;
          HIDWORD(v476) = v333 & 7;
          unint64_t v334 = (unsigned int *)((char *)v330 + (v333 >> 3));
          v474 = v334;
          if ((unint64_t)v334 >= v329)
          {
            if ((unint64_t)v334 > v329) {
              unint64_t v334 = (unsigned int *)v329;
            }
            unsigned int v335 = v332;
          }
          else
          {
            unsigned int v335 = bswap32(*v334);
          }
          int v336 = v335 << (v333 & 7);
          v9[420] = v332 < 0;
          unint64_t v337 = (v333 & 7) + 1;
          LODWORD(v476) = v336;
          HIDWORD(v476) = v337 & 7;
          long long v338 = (unsigned int *)((char *)v334 + (v337 >> 3));
          v474 = v338;
          if ((unint64_t)v338 >= v329)
          {
            if ((unint64_t)v338 > v329) {
              long long v338 = (unsigned int *)v329;
            }
            unsigned int v339 = v336;
          }
          else
          {
            unsigned int v339 = bswap32(*v338);
          }
          int v340 = v339 << (v337 & 7);
          v9[421] = v336 < 0;
          unint64_t v341 = (v337 & 7) + 1;
          unsigned int v342 = v341 & 7;
          unint64_t v476 = __PAIR64__(v342, v340);
          v343 = (unsigned int *)((char *)v338 + (v341 >> 3));
          v474 = v343;
          if ((unint64_t)v343 >= v329)
          {
            unsigned int v344 = v340;
            if ((unint64_t)v343 > v329)
            {
              v474 = (unsigned int *)v329;
              v343 = (unsigned int *)v329;
              unsigned int v344 = v340;
            }
          }
          else
          {
            unsigned int v344 = bswap32(*v343);
          }
          int v345 = v344 << v342;
          LODWORD(v476) = v345;
          v9[422] = v340 < 0;
          if (v340 < 0)
          {
            uint64_t v6 = sub_1D0C4205C((uint64_t)(v9 + 2008), (uint64_t)__p, (uint64_t)v10);
            if (v6) {
              goto LABEL_16;
            }
            int v345 = v476;
            unsigned int v342 = HIDWORD(v476);
            v343 = v474;
            unint64_t v329 = (unint64_t)v475;
          }
          unint64_t v346 = (int)v342 + 1;
          unsigned int v347 = v346 & 7;
          HIDWORD(v476) = v347;
          v348 = (unsigned int *)((char *)v343 + (v346 >> 3));
          v474 = v348;
          if ((unint64_t)v348 >= v329)
          {
            unsigned int v349 = v345;
            if ((unint64_t)v348 > v329)
            {
              v474 = (unsigned int *)v329;
              v348 = (unsigned int *)v329;
              unsigned int v349 = v345;
            }
          }
          else
          {
            unsigned int v349 = bswap32(*v348);
          }
          int v351 = v349 << v347;
          LODWORD(v476) = v351;
          v9[423] = v345 < 0;
          if (v345 < 0)
          {
            unint64_t v354 = (v346 & 7) + 1;
            HIDWORD(v476) = v354 & 7;
            v355 = (unsigned int *)((char *)v348 + (v354 >> 3));
            v474 = v355;
            if ((unint64_t)v355 >= v329)
            {
              if ((unint64_t)v355 > v329) {
                v355 = (unsigned int *)v329;
              }
              unsigned int v356 = v351;
            }
            else
            {
              unsigned int v356 = bswap32(*v355);
            }
            unsigned int v369 = v356 << (v354 & 7);
            unsigned int v353 = v351 >> 31;
            v9[424] = v351 < 0;
            unint64_t v370 = (v354 & 7) + 7;
            unsigned int v347 = v370 & 7;
            unint64_t v476 = __PAIR64__(v347, v369);
            v348 = (unsigned int *)((char *)v355 + (v370 >> 3));
            v474 = v348;
            if ((unint64_t)v348 >= v329)
            {
              if ((unint64_t)v348 > v329)
              {
                v474 = (unsigned int *)v329;
                v348 = (unsigned int *)v329;
              }
              unsigned int v371 = v369;
            }
            else
            {
              unsigned int v371 = bswap32(*v348);
            }
            int v351 = v371 << v347;
            LODWORD(v476) = v351;
            BOOL v352 = (v369 & 0xFE000000) != 0;
          }
          else
          {
            BOOL v352 = 0;
            unsigned int v353 = v9[424];
          }
          if (v353)
          {
            unsigned int v372 = v347 + 1;
            int v373 = v372 & 7;
            HIDWORD(v476) = v373;
            v374 = (unsigned int *)((char *)v348 + (v372 >> 3));
            v474 = v374;
            if ((unint64_t)v374 >= v329)
            {
              if ((unint64_t)v374 > v329) {
                v374 = (unsigned int *)v329;
              }
              unsigned int v375 = v351;
            }
            else
            {
              unsigned int v375 = bswap32(*v374);
            }
            int v376 = v375 << v373;
            v9[425] = v351 < 0;
            uint64_t v377 = (v373 + 1) >> 3;
            int v378 = (v373 + 1) & 7;
            unint64_t v476 = __PAIR64__(v378, v376);
            v379 = (unsigned int *)((char *)v374 + v377);
            v474 = (unsigned int *)((char *)v374 + v377);
            if ((unint64_t)v374 + v377 >= v329)
            {
              if ((unint64_t)v374 + v377 > v329) {
                v379 = (unsigned int *)v329;
              }
              unsigned int v380 = v376;
            }
            else
            {
              unsigned int v380 = bswap32(*v379);
            }
            int v381 = v380 << v378;
            v9[426] = v376 < 0;
            unsigned int v382 = v378 + 1;
            int v383 = ((_BYTE)v378 + 1) & 7;
            unint64_t v476 = __PAIR64__(v383, v381);
            v384 = (unsigned int *)((char *)v379 + (v382 >> 3));
            v474 = v384;
            if ((unint64_t)v384 >= v329)
            {
              if ((unint64_t)v384 > v329) {
                v384 = (unsigned int *)v329;
              }
              unsigned int v385 = v381;
            }
            else
            {
              unsigned int v385 = bswap32(*v384);
            }
            int v386 = v385 << v383;
            v9[427] = v381 < 0;
            unsigned int v387 = v383 + 1;
            int v388 = ((_BYTE)v383 + 1) & 7;
            unint64_t v476 = __PAIR64__(v388, v386);
            v389 = (unsigned int *)((char *)v384 + (v387 >> 3));
            v474 = v389;
            if ((unint64_t)v389 >= v329)
            {
              if ((unint64_t)v389 > v329) {
                v389 = (unsigned int *)v329;
              }
              unsigned int v390 = v386;
            }
            else
            {
              unsigned int v390 = bswap32(*v389);
            }
            int v391 = v390 << v388;
            v9[428] = v386 < 0;
            unsigned int v392 = v388 + 1;
            int v393 = ((_BYTE)v388 + 1) & 7;
            unint64_t v476 = __PAIR64__(v393, v391);
            v394 = (unsigned int *)((char *)v389 + (v392 >> 3));
            v474 = v394;
            if ((unint64_t)v394 >= v329)
            {
              if ((unint64_t)v394 > v329) {
                v394 = (unsigned int *)v329;
              }
              unsigned int v395 = v391;
            }
            else
            {
              unsigned int v395 = bswap32(*v394);
            }
            int v396 = v395 << v393;
            v9[429] = v391 < 0;
            unsigned int v397 = v393 + 1;
            int v398 = ((_BYTE)v393 + 1) & 7;
            unint64_t v476 = __PAIR64__(v398, v396);
            v399 = (unsigned int *)((char *)v394 + (v397 >> 3));
            v474 = v399;
            if ((unint64_t)v399 >= v329)
            {
              if ((unint64_t)v399 > v329) {
                v399 = (unsigned int *)v329;
              }
              unsigned int v400 = v396;
            }
            else
            {
              unsigned int v400 = bswap32(*v399);
            }
            int v401 = v400 << v398;
            v9[430] = v396 < 0;
            unsigned int v402 = v398 + 1;
            int v403 = ((_BYTE)v398 + 1) & 7;
            unint64_t v476 = __PAIR64__(v403, v401);
            v404 = (unsigned int *)((char *)v399 + (v402 >> 3));
            v474 = v404;
            if ((unint64_t)v404 >= v329)
            {
              if ((unint64_t)v404 > v329) {
                v404 = (unsigned int *)v329;
              }
              unsigned int v405 = v401;
            }
            else
            {
              unsigned int v405 = bswap32(*v404);
            }
            int v406 = v405 << v403;
            v9[431] = v401 < 0;
            unsigned int v407 = v403 + 1;
            int v408 = ((_BYTE)v403 + 1) & 7;
            unint64_t v476 = __PAIR64__(v408, v406);
            v409 = (unsigned int *)((char *)v404 + (v407 >> 3));
            v474 = v409;
            if ((unint64_t)v409 >= v329)
            {
              if ((unint64_t)v409 > v329) {
                v409 = (unsigned int *)v329;
              }
              unsigned int v410 = v406;
            }
            else
            {
              unsigned int v410 = bswap32(*v409);
            }
            int v411 = v410 << v408;
            v9[432] = v406 < 0;
            uint64_t v412 = (v408 + 1) >> 3;
            int v413 = (v408 + 1) & 7;
            unint64_t v476 = __PAIR64__(v413, v411);
            v348 = (unsigned int *)((char *)v409 + v412);
            v474 = (unsigned int *)((char *)v409 + v412);
            if ((unint64_t)v409 + v412 >= v329)
            {
              if ((unint64_t)v409 + v412 > v329)
              {
                v474 = (unsigned int *)v329;
                v348 = (unsigned int *)v329;
              }
              unsigned int v414 = v411;
            }
            else
            {
              unsigned int v414 = bswap32(*v348);
            }
            LODWORD(v476) = v414 << v413;
            v9[433] = v411 < 0;
          }
          if (v352)
          {
            if (dword_1EB671A40 >= 4)
            {
              fwrite("Ignoring SPS extension\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              syslog(28, "Ignoring SPS extension\n");
            }
            uint64_t v6 = sub_1D0C979F4((uint64_t)__p);
            if (v6) {
              goto LABEL_16;
            }
            v348 = v474;
            unint64_t v329 = (unint64_t)v475;
          }
          v474 = (unsigned int *)((char *)v348 + 1);
          HIDWORD(v476) = 0;
          if ((unint64_t)v348 + 1 > v329) {
            v474 = (unsigned int *)v329;
          }
          unsigned int v415 = v9[246];
          if (v415 > 8 || (unsigned int v416 = v9[247], v416 >= 9))
          {
            if (dword_1EB671A40 < 3) {
              goto LABEL_291;
            }
            unint64_t v210 = (FILE *)*MEMORY[0x1E4F143C8];
            unint64_t v211 = "Invalid bitdepth\n";
            uint64_t v212 = "Invalid bitdepth\n";
            size_t v213 = 17;
            goto LABEL_290;
          }
          unsigned int v417 = v9[292];
          if (v417 > 3 || (unsigned int v418 = v9[293], v418 >= 4))
          {
            if (dword_1EB671A40 < 3) {
              goto LABEL_291;
            }
            unint64_t v210 = (FILE *)*MEMORY[0x1E4F143C8];
            unint64_t v211 = "Invalid min/max CTB size\n";
            uint64_t v212 = "Invalid min/max CTB size\n";
            size_t v213 = 25;
            goto LABEL_290;
          }
          uint64_t v419 = v9[225];
          if (v419 >= 4)
          {
            if (dword_1EB671A40 < 3) {
              goto LABEL_291;
            }
            unint64_t v210 = (FILE *)*MEMORY[0x1E4F143C8];
            unint64_t v211 = "Invalid chroma format\n";
            uint64_t v212 = "Invalid chroma format\n";
            size_t v213 = 22;
            goto LABEL_290;
          }
          v9[2120] = v415 + 8;
          v9[2121] = 6 * v415;
          v9[2122] = v416 + 8;
          v9[2123] = 6 * v416;
          if (v9[431])
          {
            int v420 = 1 << (v415 + 7);
            char v421 = v416 + 7;
            LOBYTE(v415) = 0;
            LOBYTE(v416) = 0;
          }
          else
          {
            char v421 = 7;
            LOWORD(v420) = 128;
          }
          v9[2124] = v415;
          v9[2125] = v416;
          *((_WORD *)v9 + 1063) = v420;
          *((_WORD *)v9 + 1064) = 1 << v421;
          *((_DWORD *)v9 + 533) = 16 << v9[248];
          char v422 = v417 + 3;
          v9[2136] = v422;
          char v423 = v418 + v422;
          v9[2137] = v418 + v422;
          unsigned __int8 v424 = v9[294] + 2;
          v9[2138] = v424;
          v9[2139] = v9[295] + v424;
          char v425 = v424;
          if (v424 <= 3u) {
            char v425 = 3;
          }
          unsigned __int8 v426 = v425 - 1;
          if ((v419 - 1) < 2) {
            unsigned __int8 v424 = v426;
          }
          v9[2140] = v424;
          v9[2141] = 1 << v423;
          int v427 = (1 << v423) - 1;
          unsigned int v428 = *((_DWORD *)v9 + 57);
          unsigned int v429 = *((_DWORD *)v9 + 58);
          *((_DWORD *)v9 + 536) = (int)(v427 + v428) >> v423;
          *((_DWORD *)v9 + 537) = (int)(v427 + v429) >> v423;
          if (v9[226]) {
            char v430 = 0;
          }
          else {
            char v430 = v419;
          }
          v9[2172] = v430;
          if (v9[236])
          {
            v431 = (unsigned __int8 *)&unk_1D0DAEF50 + 2 * v419;
            int v432 = *v431;
            int v433 = v431[1];
            int v434 = *((unsigned __int16 *)v9 + 119) * v432;
            *((_DWORD *)v9 + 539) = v434;
            int v435 = *((unsigned __int16 *)v9 + 120) * v432;
            *((_DWORD *)v9 + 540) = v435;
            int v436 = *((unsigned __int16 *)v9 + 121) * v433;
            *((_DWORD *)v9 + 541) = v436;
            int v437 = *((unsigned __int16 *)v9 + 122) * v433;
            *((_DWORD *)v9 + 542) = v437;
            uint64_t v6 = 4294954387;
            if (v435 + v434 > v428 || v437 + v436 > v429) {
              goto LABEL_16;
            }
          }
          else
          {
            *(_OWORD *)(v9 + 2156) = 0u;
          }
          if (v9[302])
          {
            v9[308] = v9[303] + 1;
            v9[309] = v9[304] + 1;
            char v438 = v9[305] + 3;
            v9[310] = v438;
            v9[311] = v9[306] + v438;
          }
          if (*v10 > 0xFu || v9[224] > 0xFu) {
            goto LABEL_291;
          }
          unint64_t v439 = (int)v429 * (uint64_t)(int)v428;
          unsigned int v440 = v9[180];
          unsigned __int8 v441 = v440 - 7;
          if ((v440 - 7) >= 0xFAu)
          {
            uint64_t v444 = v9[187];
            if (v444 <= byte_1D0D809F8[v440 - 1]) {
              unsigned int v445 = dword_1D0D808D8[3 * v9[180] - 3 + v444];
            }
            else {
              unsigned int v445 = 0x7FFFFFFF;
            }
            if (v439 <= v445 || dword_1EB671A40 <= 3) {
              goto LABEL_601;
            }
            v442 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v443 = v9[187];
            if ((v440 - 7) >= 0xFAu && v443 <= byte_1D0D809F8[v440 - 1])
            {
              int v447 = dword_1D0D808D8[3 * v9[180] - 3 + v443];
LABEL_596:
              fprintf(v442, "%dx%d exceeds maximum picture size for level %d.%d of %d\n", v428, v429, v440, v443, v447);
              int v448 = v9[180];
              uint64_t v449 = v9[187];
              if ((v448 - 7) >= 0xFFFFFFFA && v449 <= byte_1D0D809F8[v448 - 1]) {
                int v450 = dword_1D0D808D8[3 * v9[180] - 3 + v449];
              }
              else {
                int v450 = 0x7FFFFFFF;
              }
              syslog(28, "%dx%d exceeds maximum picture size for level %d.%d of %d\n", *((_DWORD *)v9 + 57), *((_DWORD *)v9 + 58), v448, v9[187], v450);
              unsigned int v428 = *((_DWORD *)v9 + 57);
              unsigned int v440 = v9[180];
              unsigned __int8 v441 = v440 - 7;
LABEL_601:
              BOOL v446 = v441 < 0xFAu;
              if (v441 >= 0xFAu)
              {
                uint64_t v451 = v9[187];
                if (v451 <= byte_1D0D809F8[v440 - 1])
                {
                  unsigned int v452 = word_1D0D80920[3 * v440 - 3 + v451];
LABEL_604:
                  if (v428 <= v452)
                  {
                    unsigned int v453 = *((_DWORD *)v9 + 58);
                    if (v446 || (uint64_t v454 = v9[187], v454 > byte_1D0D809F8[v440 - 1])) {
                      unsigned int v455 = 0x7FFFFFFF;
                    }
                    else {
                      unsigned int v455 = word_1D0D80920[3 * v440 - 3 + v454];
                    }
                    if (v453 <= v455 || dword_1EB671A40 <= 3) {
                      goto LABEL_623;
                    }
                  }
                  else
                  {
                    unsigned int v453 = *((_DWORD *)v9 + 58);
                    if (dword_1EB671A40 < 4)
                    {
LABEL_623:
                      if ((unint64_t)((int)v453 * (uint64_t)(int)v428) >> 31)
                      {
                        if (dword_1EB671A40 < 3) {
                          goto LABEL_291;
                        }
                        unint64_t v210 = (FILE *)*MEMORY[0x1E4F143C8];
                        unint64_t v211 = "We don't support more than INT32_MAX pixels\n";
                        uint64_t v212 = "We don't support more than INT32_MAX pixels\n";
                        size_t v213 = 44;
                        goto LABEL_290;
                      }
                      if (a3) {
                        sub_1D0D7C4A8(v10, (FILE *)*MEMORY[0x1E4F143C8]);
                      }
                      for (uint64_t i = 0; i != 1024; i += 16)
                      {
                        v462 = *(long long **)(a1 + i + 512);
                        if (v462
                          && *((unsigned char *)v462 + 1760)
                          && *((unsigned __int8 *)v462 + 1) == v9[224])
                        {
                          v463 = (char *)operator new(0x708uLL);
                          *(_OWORD *)(v463 + 8) = 0u;
                          *(void *)v463 = &unk_1F26F16D0;
                          long long v464 = *v462;
                          long long v465 = v462[1];
                          *(_DWORD *)(v463 + 55) = *(_DWORD *)((char *)v462 + 31);
                          *(_OWORD *)(v463 + 40) = v465;
                          *(_OWORD *)(v463 + 24) = v464;
                          *((void *)v463 + 203) = 0;
                          memcpy(v463 + 64, (char *)v462 + 40, 0x618uLL);
                          int v466 = *((_DWORD *)v462 + 410);
                          long long v467 = *(long long *)((char *)v462 + 1624);
                          *((_OWORD *)v463 + 102) = *(long long *)((char *)v462 + 1608);
                          *((_OWORD *)v463 + 103) = v467;
                          *((_DWORD *)v463 + 416) = v466;
                          *((_OWORD *)v463 + 105) = 0u;
                          *((void *)v463 + 209) = 0;
                          sub_1D0C8D5E0((void *)v463 + 209, *((const void **)v462 + 206), *((void *)v462 + 207), (uint64_t)(*((void *)v462 + 207) - *((void *)v462 + 206)) >> 1);
                          *((void *)v463 + 214) = 0;
                          *((_OWORD *)v463 + 106) = 0u;
                          sub_1D0C8D5E0((void *)v463 + 212, *((const void **)v462 + 209), *((void *)v462 + 210), (uint64_t)(*((void *)v462 + 210) - *((void *)v462 + 209)) >> 1);
                          *((void *)v463 + 217) = 0;
                          *(_OWORD *)(v463 + 1720) = 0u;
                          sub_1D0C8D674((void *)v463 + 215, *((const void **)v462 + 212), *((void *)v462 + 213), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v462 + 213) - *((void *)v462 + 212)) >> 2));
                          *((void *)v463 + 220) = 0;
                          *((_OWORD *)v463 + 109) = 0u;
                          sub_1D0C8D674((void *)v463 + 218, *((const void **)v462 + 215), *((void *)v462 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v462 + 216) - *((void *)v462 + 215)) >> 2));
                          uint64_t v468 = *((void *)v462 + 218);
                          v463[1776] = *((unsigned char *)v462 + 1752);
                          *((void *)v463 + 221) = v468;
                          *(_OWORD *)(v463 + 1784) = v462[110];
                          v463[1784] = 0;
                          atomic_fetch_add_explicit((atomic_ullong *volatile)v463 + 1, 1uLL, memory_order_relaxed);
                          *(void *)(a1 + i + 512) = v463 + 24;
                          v469 = *(std::__shared_weak_count **)(a1 + i + 520);
                          *(void *)(a1 + i + 520) = v463;
                          if (v469) {
                            sub_1D0C4C984(v469);
                          }
                          sub_1D0C4C984((std::__shared_weak_count *)v463);
                        }
                      }
                      uint64_t v470 = a1 + 16 * v9[224];
                      atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
                      unsigned __int8 v229 = *(std::__shared_weak_count **)(v470 + 264);
                      *(void *)(v470 + 256) = v10;
                      *(void *)(v470 + 264) = v9;
                      if (v229) {
                        goto LABEL_284;
                      }
                      goto LABEL_285;
                    }
                  }
                  uint64_t v456 = v9[187];
                  if (v446 || v456 > byte_1D0D809F8[v440 - 1]) {
                    int v457 = 0x7FFFFFFF;
                  }
                  else {
                    int v457 = word_1D0D80920[3 * v440 - 3 + v456];
                  }
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%dx%d exceeds maximum dimension size for level %d.%d of %d\n", v428, v453, v440, v9[187], v457);
                  int v458 = v9[180];
                  uint64_t v459 = v9[187];
                  if ((v458 - 7) >= 0xFFFFFFFA && v459 <= byte_1D0D809F8[v458 - 1]) {
                    int v460 = word_1D0D80920[3 * v9[180] - 3 + v459];
                  }
                  else {
                    int v460 = 0x7FFFFFFF;
                  }
                  syslog(28, "%dx%d exceeds maximum dimension size for level %d.%d of %d\n", *((_DWORD *)v9 + 57), *((_DWORD *)v9 + 58), v458, v9[187], v460);
                  unsigned int v428 = *((_DWORD *)v9 + 57);
                  unsigned int v453 = *((_DWORD *)v9 + 58);
                  goto LABEL_623;
                }
              }
LABEL_603:
              unsigned int v452 = 0x7FFFFFFF;
              goto LABEL_604;
            }
          }
          else
          {
            if (!(v439 >> 31) || dword_1EB671A40 <= 3)
            {
              BOOL v446 = (v440 - 7) < 0xFAu;
              goto LABEL_603;
            }
            v442 = (FILE *)*MEMORY[0x1E4F143C8];
            LODWORD(v443) = v9[187];
          }
          int v447 = 0x7FFFFFFF;
          goto LABEL_596;
        }
        if (dword_1EB671A40 >= 3)
        {
          unint64_t v210 = (FILE *)*MEMORY[0x1E4F143C8];
          unint64_t v211 = "width/height cannot be zero\n";
          uint64_t v212 = "width/height cannot be zero\n";
          size_t v213 = 28;
          goto LABEL_290;
        }
      }
LABEL_291:
      uint64_t v6 = 4294954387;
      goto LABEL_16;
    case ' ':
      sub_1D0C643E0(&v471);
      uint64_t v8 = v471;
      if (*(unsigned char *)(v471 + 432))
      {
        if (dword_1EB671A40 >= 3)
        {
          fwrite("This VPS has already been parsed, a new one must be allocated instead\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "This VPS has already been parsed, a new one must be allocated instead\n");
        }
        uint64_t v6 = 4294954385;
        goto LABEL_159;
      }
      *(unsigned char *)(v471 + 432) = 1;
      unint64_t v21 = SHIDWORD(v476) + 4;
      HIDWORD(v476) = v21 & 7;
      unint64_t v22 = (unint64_t)v475;
      int v23 = (unsigned int *)((char *)v474 + (v21 >> 3));
      v474 = v23;
      if (v23 >= v475)
      {
        if (v23 > v475) {
          int v23 = v475;
        }
        unsigned int v24 = v476;
      }
      else
      {
        unsigned int v24 = bswap32(*v23);
      }
      unsigned int v73 = v24 << (v21 & 7);
      *(unsigned char *)(v8 + 196) = v476 >> 28;
      unint64_t v74 = (v21 & 7) + 2;
      LODWORD(v476) = v73;
      HIDWORD(v476) = v74 & 7;
      unsigned int v75 = (unsigned int *)((char *)v23 + (v74 >> 3));
      v474 = v75;
      if ((unint64_t)v75 >= v22)
      {
        if ((unint64_t)v75 > v22) {
          unsigned int v75 = (unsigned int *)v22;
        }
      }
      else
      {
        unsigned int v73 = bswap32(*v75);
      }
      unsigned int v76 = v73 << (v74 & 7);
      unint64_t v77 = (v74 & 7) + 6;
      LODWORD(v476) = v76;
      HIDWORD(v476) = v77 & 7;
      unsigned int v78 = (unsigned int *)((char *)v75 + (v77 >> 3));
      v474 = v78;
      if ((unint64_t)v78 >= v22)
      {
        if ((unint64_t)v78 > v22) {
          unsigned int v78 = (unsigned int *)v22;
        }
      }
      else
      {
        unsigned int v76 = bswap32(*v78);
      }
      unsigned int v79 = v76 << (v77 & 7);
      unint64_t v80 = (v77 & 7) + 3;
      char v81 = v80 & 7;
      LODWORD(v476) = v79;
      HIDWORD(v476) = v80 & 7;
      int v82 = (unsigned int *)((char *)v78 + (v80 >> 3));
      v474 = v82;
      if ((unint64_t)v82 >= v22)
      {
        if ((unint64_t)v82 > v22) {
          int v82 = (unsigned int *)v22;
        }
        unsigned int v83 = v79;
      }
      else
      {
        unsigned int v83 = bswap32(*v82);
      }
      int v84 = v79 >> 29;
      int v85 = v83 << v81;
      LODWORD(v476) = v83 << v81;
      *(unsigned char *)(v8 + 200) = v84;
      if (v84 != 7)
      {
        unint64_t v86 = (v80 & 7) + 1;
        unsigned int v87 = v86 & 7;
        HIDWORD(v476) = v87;
        unsigned int v88 = (unsigned int *)((char *)v82 + (v86 >> 3));
        v474 = v88;
        if ((unint64_t)v88 >= v22)
        {
          if ((unint64_t)v88 > v22) {
            unsigned int v88 = (unsigned int *)v22;
          }
          unsigned int v89 = v85;
        }
        else
        {
          unsigned int v89 = bswap32(*v88);
        }
        unsigned int v143 = v89 << v87;
        *(unsigned char *)(v8 + 201) = v85 < 0;
        unint64_t v476 = __PAIR64__(v87, v143);
        v474 = (unsigned int *)((char *)v88 + 2);
        if ((unint64_t)v88 + 2 >= v22)
        {
          if ((unint64_t)v88 + 2 > v22) {
            v474 = (unsigned int *)v22;
          }
        }
        else
        {
          unsigned int v143 = bswap32(*(unsigned int *)((char *)v88 + 2));
        }
        LODWORD(v476) = v143 << v87;
        uint64_t v6 = sub_1D0C51120(v8, v84, (uint64_t)__p);
        if (v6)
        {
LABEL_159:
          uint64_t v12 = v472;
          if (!v472) {
            goto LABEL_161;
          }
          goto LABEL_160;
        }
        int v147 = v476;
        unint64_t v148 = SHIDWORD(v476) + 1;
        char v149 = v148 & 7;
        HIDWORD(v476) = v148 & 7;
        uint64_t v150 = (unsigned int *)((char *)v474 + (v148 >> 3));
        v474 = v150;
        if (v150 >= v475)
        {
          if (v150 > v475) {
            v474 = v475;
          }
          unsigned int v151 = v476;
        }
        else
        {
          unsigned int v151 = bswap32(*v150);
        }
        unint64_t v214 = 0;
        LODWORD(v476) = v151 << v149;
        *(unsigned char *)(v8 + 202) = v147 < 0;
        while (1)
        {
          if (!v214 || *(unsigned char *)(v8 + 202))
          {
            *(unsigned char *)(v8 + v214 + 203) = sub_1D0C4C8F0((uint64_t)__p);
            *(unsigned char *)(v8 + v214 + 210) = sub_1D0C4C8F0((uint64_t)__p);
            int v216 = sub_1D0C5108C((uint64_t)__p);
          }
          else
          {
            unint64_t v215 = v8 + v214;
            *(unsigned char *)(v215 + 203) = *(unsigned char *)(v8 + 203);
            *(unsigned char *)(v215 + 210) = *(unsigned char *)(v8 + 210);
            int v216 = *(_DWORD *)(v8 + 220);
          }
          *(_DWORD *)(v8 + 4 * v214 + 220) = v216;
          if (*(unsigned __int8 *)(v8 + v214 + 203) > 0xFu) {
            break;
          }
          BOOL v217 = v214++ >= *(unsigned __int8 *)(v8 + 200);
          if (v217)
          {
            unsigned int v218 = v476;
            unint64_t v219 = SHIDWORD(v476) + 6;
            char v220 = v219 & 7;
            HIDWORD(v476) = v219 & 7;
            v221 = (unsigned int *)((char *)v474 + (v219 >> 3));
            v474 = v221;
            if (v221 >= v475)
            {
              if (v221 > v475) {
                v474 = v475;
              }
              unsigned int v222 = v476;
            }
            else
            {
              unsigned int v222 = bswap32(*v221);
            }
            LODWORD(v476) = v222 << v220;
            *(unsigned char *)(v8 + 248) = v218 >> 26;
            unsigned __int16 v231 = sub_1D0C4C8F0((uint64_t)__p);
            int v232 = v231;
            *(_WORD *)(v8 + 250) = v231;
            if (v231 >= 0x400u)
            {
              if (dword_1EB671A40 >= 3)
              {
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "vps_num_layer_sets_minus1_ (%d) out of range [0, %d]\n", v231, 1023);
                syslog(27, "vps_num_layer_sets_minus1_ (%d) out of range [0, %d]\n", *(unsigned __int16 *)(v8 + 250), 1023);
              }
              break;
            }
            if (v231)
            {
              sub_1D0CE8BEC((char **)(v8 + 256), v231 + 1);
              int v232 = *(unsigned __int16 *)(v8 + 250);
            }
            int v234 = v476;
            int v233 = HIDWORD(v476);
            uint64_t v236 = v474;
            unint64_t v235 = v475;
            if (v232)
            {
              uint64_t v237 = *(void *)(v8 + 256);
              uint64_t v238 = *(unsigned __int8 *)(v8 + 248) + 1;
              uint64_t v239 = 1;
              do
              {
                uint64_t v240 = 0;
                uint64_t v241 = 0;
                *(void *)(v237 + 8 * v239) = 0;
                do
                {
                  unsigned int v242 = v234;
                  unint64_t v243 = v233 + 1;
                  int v233 = v243 & 7;
                  HIDWORD(v476) = v233;
                  uint64_t v236 = (unsigned int *)((char *)v236 + (v243 >> 3));
                  v474 = v236;
                  if (v236 >= v235)
                  {
                    unsigned int v244 = v242;
                    if (v236 > v235)
                    {
                      v474 = v235;
                      uint64_t v236 = v235;
                      unsigned int v244 = v242;
                    }
                  }
                  else
                  {
                    unsigned int v244 = bswap32(*v236);
                  }
                  int v234 = v244 << v233;
                  LODWORD(v476) = v234;
                  v240 |= (unint64_t)(v242 >> 31) << v241;
                  *(void *)(v237 + 8 * v239) = v240;
                  ++v241;
                }
                while (v238 != v241);
              }
              while (v239++ != v232);
            }
            unint64_t v246 = v233 + 1;
            HIDWORD(v476) = v246 & 7;
            v247 = (unsigned int *)((char *)v236 + (v246 >> 3));
            v474 = v247;
            BOOL v248 = v247 > v235;
            if (v247 >= v235)
            {
              unsigned int v249 = v234;
              if (v248)
              {
                v474 = v235;
                unsigned int v249 = v234;
              }
            }
            else
            {
              unsigned int v249 = bswap32(*v247);
            }
            LODWORD(v476) = v249 << (v246 & 7);
            *(unsigned char *)(v8 + 280) = v234 < 0;
            if (v234 < 0)
            {
              *(_DWORD *)(v8 + 284) = sub_1D0C4CA68((uint64_t)__p, 32);
              *(_DWORD *)(v8 + 288) = sub_1D0C4CA68((uint64_t)__p, 32);
              int v280 = v476;
              unint64_t v281 = SHIDWORD(v476) + 1;
              char v282 = v281 & 7;
              HIDWORD(v476) = v281 & 7;
              uint64_t v283 = (unsigned int *)((char *)v474 + (v281 >> 3));
              v474 = v283;
              BOOL v284 = v283 > v475;
              if (v283 >= v475)
              {
                unsigned int v285 = v476;
                if (v284)
                {
                  v474 = v475;
                  unsigned int v285 = v476;
                }
              }
              else
              {
                unsigned int v285 = bswap32(*v283);
              }
              LODWORD(v476) = v285 << v282;
              *(unsigned char *)(v8 + 292) = v280 < 0;
              if (v280 < 0) {
                *(_DWORD *)(v8 + 296) = sub_1D0C5108C((uint64_t)__p);
              }
              unsigned __int16 v289 = sub_1D0C4C8F0((uint64_t)__p);
              *(_WORD *)(v8 + 300) = v289;
              if (v289)
              {
                sub_1D0CE8D08((char **)(v8 + 408), v289);
                if (*(_WORD *)(v8 + 300))
                {
                  uint64_t v290 = 0;
                  unint64_t v291 = 0;
                  do
                  {
                    sub_1D0C4C8F0((uint64_t)__p);
                    if (v291)
                    {
                      unsigned int v292 = v476;
                      unint64_t v293 = SHIDWORD(v476) + 1;
                      char v294 = v293 & 7;
                      HIDWORD(v476) = v293 & 7;
                      v295 = (unsigned int *)((char *)v474 + (v293 >> 3));
                      v474 = v295;
                      if (v295 >= v475)
                      {
                        if (v295 > v475) {
                          v474 = v475;
                        }
                        unsigned int v296 = v476;
                      }
                      else
                      {
                        unsigned int v296 = bswap32(*v295);
                      }
                      LODWORD(v476) = v296 << v294;
                      int v297 = v292 >> 31;
                    }
                    else
                    {
                      int v297 = 1;
                    }
                    uint64_t v6 = sub_1D0CE841C(*(void *)(v8 + 408) + v290, (uint64_t)__p, v297, *(unsigned __int8 *)(v8 + 200) + 1);
                    if (v6) {
                      goto LABEL_159;
                    }
                    ++v291;
                    v290 += 40;
                  }
                  while (v291 < *(unsigned __int16 *)(v8 + 300));
                }
              }
            }
            int v260 = v476;
            unint64_t v261 = SHIDWORD(v476) + 1;
            char v262 = v261 & 7;
            HIDWORD(v476) = v261 & 7;
            unint64_t v263 = (unint64_t)v475;
            uint64_t v264 = (unsigned int *)((char *)v474 + (v261 >> 3));
            v474 = v264;
            if (v264 >= v475)
            {
              unsigned int v265 = v476;
              if (v264 > v475)
              {
                v474 = v475;
                uint64_t v264 = v475;
                unsigned int v265 = v476;
              }
            }
            else
            {
              unsigned int v265 = bswap32(*v264);
            }
            LODWORD(v476) = v265 << v262;
            *(unsigned char *)(v8 + 302) = v260 < 0;
            if (v260 < 0)
            {
              if (dword_1EB671A40 >= 4)
              {
                fwrite("Ignoring VPS extension\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                syslog(28, "Ignoring VPS extension\n");
              }
              uint64_t v6 = sub_1D0C979F4((uint64_t)__p);
              if (v6) {
                goto LABEL_159;
              }
              uint64_t v264 = v474;
              unint64_t v263 = (unint64_t)v475;
            }
            v474 = (unsigned int *)((char *)v264 + 1);
            HIDWORD(v476) = 0;
            if ((unint64_t)v264 + 1 > v263) {
              v474 = (unsigned int *)v263;
            }
            if ((sub_1D0C64CF4(v8) & 1) == 0) {
              break;
            }
            if (a3) {
              sub_1D0CE8F34(v8, (FILE *)*MEMORY[0x1E4F143C8]);
            }
            int v266 = (uint64_t *)(a1 + 16 * *(unsigned __int8 *)(v8 + 196));
            unint64_t v267 = v472;
            if (v472) {
              atomic_fetch_add_explicit(&v472->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            BOOL v268 = (std::__shared_weak_count *)v266[1];
            *int v266 = v8;
            v266[1] = (uint64_t)v267;
            if (v268) {
              sub_1D0C4C984(v268);
            }
            if (v267)
            {
              BOOL v230 = v267;
              goto LABEL_286;
            }
            goto LABEL_287;
          }
        }
      }
      uint64_t v6 = 4294954387;
      goto LABEL_159;
  }
  if (dword_1EB671A40 >= 3)
  {
    fwrite("Passed NALU that isn't a parameter set!\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Passed NALU that isn't a parameter set!\n");
  }
  uint64_t v6 = 4294954385;
LABEL_161:
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_1D0C4A428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  p_shared_weak_owners = &v17[67].__shared_weak_owners_;
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v17[71].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v17[72].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  unsigned int v24 = (std::__shared_weak_count_vtbl *)*v20;
  if (*v20)
  {
    v17[71].__vftable = v24;
    operator delete(v24);
  }
  unsigned int v25 = (std::__shared_weak_count_vtbl *)*v19;
  if (*v19)
  {
    v17[70].__vftable = v25;
    operator delete(v25);
  }
  uint64_t v26 = *p_shared_weak_owners;
  uint64_t *p_shared_weak_owners = 0;
  if (v26) {
    MEMORY[0x1D25F01F0](v26, 0x1000C8052888210);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v27);
  sub_1D0C4C984(v18);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C4A50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *(int *)(a1 + 2112);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 2064);
    uint64_t v9 = *(void *)(v8 + 8 * ((int)v7 - 1));
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void *)(a1 + 2064);
  }
  if (v7 >= (*(void *)(a1 + 2072) - v8) >> 3) {
    operator new();
  }
  uint64_t v10 = *(void *)(v8 + 8 * *(int *)(a1 + 2112));
  uint64_t v11 = *(void *)(a1 + 2056);
  int v12 = *(unsigned __int8 *)(a1 + 2048);
  if (v11)
  {
    *(void *)(v10 + 1576) = v11;
    *(void *)(v10 + 1568) = v11 + 48;
    uint64_t v14 = *(void *)(v11 + 168);
    uint64_t v13 = *(void *)(v11 + 176);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v10 + 1584) = v14;
    int v15 = *(std::__shared_weak_count **)(v10 + 1592);
    *(void *)(v10 + 1592) = v13;
    if (v15) {
      sub_1D0C4C984(v15);
    }
    *(void *)(v10 + 2344) = v11 + 248;
  }
  int v16 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v17 = v16 - 19;
  *(unsigned char *)(v10 + 632) = (v16 - 19) < 2;
  int v18 = v16 & 0xF8;
  *(unsigned char *)(v10 + 633) = v18 == 16;
  *(unsigned char *)(v10 + 634) = (v16 & 0xFE) == 6;
  *(unsigned char *)(v10 + 635) = (v16 & 0xFE) == 8;
  *(unsigned char *)(v10 + 636) = (v16 & 0xF1) == 0;
  *(unsigned char *)(v10 + 637) = v16 == 21;
  BOOL v19 = (v16 - 16) < 3;
  if (v17 < 2) {
    BOOL v19 = 1;
  }
  if (v12) {
    BOOL v19 = 1;
  }
  *(unsigned char *)(v10 + 638) = v19;
  if (v11 && v18 == 16 && *(unsigned char *)(v11 + 203)) {
    *(unsigned char *)(v10 + 638) = 1;
  }
  *(unsigned char *)(v10 + 659) = 1;
  uint64_t result = sub_1D0C4CB60((unint64_t *)(v10 + 1608), a2);
  if (result) {
    return result;
  }
  uint64_t v21 = *(void *)(a1 + 2056);
  *(void *)(v10 + 2336) = v9;
  *(void *)(v10 + 2280) = a1;
  *(unsigned char *)(v10 + 2332) = 0;
  int v22 = sub_1D0C51880(v10 + 1608, 1);
  if (v22)
  {
    *(_WORD *)(v10 + 48) = 1;
    *(unsigned char *)(v10 + 50) = 0;
    *(_DWORD *)(v10 + 52) = 0;
    *(unsigned char *)(v10 + 56) = 0;
    *(_WORD *)(v10 + 58) = 258;
    *(unsigned char *)(v10 + 60) = 0;
    *(_DWORD *)(v10 + 64) = 0;
    *(unsigned char *)(v10 + 68) = 0;
    *(_DWORD *)(v10 + 320) = 0;
    *(void *)(v10 + 512) = 0;
    *(void *)(v10 + 552) = 0;
    *(void *)(v10 + 559) = 0;
    *(unsigned char *)(v10 + 567) = 1;
    *(_DWORD *)(v10 + 568) = 0;
    *(unsigned char *)(v10 + 572) = 0;
    *(_WORD *)(v10 + 600) = 0;
    *(_OWORD *)(v10 + 520) = xmmword_1D0D7F1F0;
    *(_OWORD *)(v10 + 536) = xmmword_1D0D7F1F0;
    *(unsigned char *)(v10 + 1600) = 0;
    *(_DWORD *)(v10 + 2256) = 0;
  }
  *(unsigned char *)(v10 + 48) = v22 != 0;
  char v23 = *(unsigned char *)(v10 + 633);
  if (v23) {
    char v23 = sub_1D0C51880(v10 + 1608, 1) != 0;
  }
  *(unsigned char *)(v10 + 49) = v23;
  unsigned __int8 v24 = sub_1D0C4C8F0(v10 + 1608);
  *(unsigned char *)(v10 + 50) = v24;
  if (*(unsigned char *)(v10 + 48) != (v9 == 0))
  {
    if (dword_1EB671A40 < 3) {
      return 4294954387;
    }
    unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
    CFNumberRef v37 = "first_slice_in_pic_flag mismatch\n";
LABEL_50:
    int v40 = v37;
    size_t v41 = 33;
    goto LABEL_51;
  }
  if (*(unsigned char *)(v10 + 48))
  {
    unsigned int v25 = (uint64_t *)(v21 + 16 * v24 + 880);
    if ((v24 & 0xC0) != 0) {
      unsigned int v25 = (uint64_t *)(v21 + 1936);
    }
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v28 = *(std::__shared_weak_count **)(v10 + 40);
    *(void *)(v10 + 32) = v27;
    *(void *)(v10 + 40) = v26;
    if (v28)
    {
      sub_1D0C4C984(v28);
      uint64_t v27 = *(void *)(v10 + 32);
    }
    if (!v27)
    {
      if (dword_1EB671A40 >= 3)
      {
        CFNumberRef v37 = "No PPS found for ID %d\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "No PPS found for ID %d\n", *(unsigned __int8 *)(v10 + 50));
        uint64_t v38 = *(unsigned __int8 *)(v10 + 50);
        goto LABEL_104;
      }
      return 4294954387;
    }
    if (*(unsigned char *)(v27 + 1760))
    {
LABEL_35:
      uint64_t v29 = *(unsigned __int8 *)(v27 + 1);
      unint64_t v30 = (uint64_t *)(v21 + 16 * v29 + 624);
      if (v29 > 0xF) {
        unint64_t v30 = (uint64_t *)(v21 + 1920);
      }
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      char v33 = *(std::__shared_weak_count **)(v10 + 24);
      *(void *)(v10 + 16) = v31;
      *(void *)(v10 + 24) = v32;
      if (v33)
      {
        sub_1D0C4C984(v33);
        uint64_t v31 = *(void *)(v10 + 16);
      }
      if (!v31)
      {
        if (dword_1EB671A40 >= 3)
        {
          CFNumberRef v37 = "No SPS found for ID %d\n";
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "No SPS found for ID %d\n", *(unsigned __int8 *)(*(void *)(v10 + 32) + 1));
          uint64_t v38 = *(unsigned __int8 *)(*(void *)(v10 + 32) + 1);
          goto LABEL_104;
        }
        return 4294954387;
      }
      int v34 = 0;
      *(unsigned char *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 52) = 0;
      goto LABEL_43;
    }
    uint64_t v56 = *(void *)(v27 + 1768);
    uint64_t v57 = *(unsigned __int8 *)(v27 + 1);
    int v58 = (unsigned __int8 **)(v56 + 1552);
    unint64_t v59 = (unsigned __int8 **)(v56 + 16 * v57 + 256);
    if (v57 > 0xF) {
      unint64_t v59 = v58;
    }
    if (!*v59)
    {
      if (dword_1EB671A40 >= 3)
      {
        CFNumberRef v37 = "No SPS found for ID %d\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "No SPS found for ID %d\n", *(unsigned __int8 *)(v27 + 1));
        uint64_t v38 = *(unsigned __int8 *)(v27 + 1);
        goto LABEL_104;
      }
      return 4294954387;
    }
    unsigned int v249 = v59;
    uint64_t result = sub_1D0C4042C(*v59);
    if (result) {
      return result;
    }
    uint64_t v60 = v249;
    size_t v61 = *v249;
    int v62 = *((_DWORD *)*v249 + 530);
    *(_DWORD *)(v27 + 1744) = v62;
    int v63 = *((_DWORD *)v61 + 531);
    *(_DWORD *)(v27 + 1748) = v63;
    if (*(unsigned char *)(v27 + 1752))
    {
      if (*(unsigned char *)(v27 + 26))
      {
        LODWORD(v64) = *(unsigned __int16 *)(v27 + 22);
        if (*(_WORD *)(v27 + 22))
        {
          int v65 = 0;
          unint64_t v66 = 0;
          uint64_t v67 = *(void *)(v27 + 1648);
          do
          {
            int v68 = v64 + 1;
            int v69 = v65 / v68;
            v65 += v62;
            *(_WORD *)(v67 + 2 * v66) = ~(_WORD)v69 + v65 / v68;
            unint64_t v64 = *(unsigned __int16 *)(v27 + 22);
            ++v66;
          }
          while (v66 < v64);
        }
        LODWORD(v70) = *(unsigned __int16 *)(v27 + 24);
        if (*(_WORD *)(v27 + 24))
        {
          int v71 = 0;
          unint64_t v72 = 0;
          uint64_t v73 = *(void *)(v27 + 1672);
          do
          {
            int v74 = v70 + 1;
            int v75 = v71 / v74;
            v71 += v63;
            *(_WORD *)(v73 + 2 * v72) = ~(_WORD)v75 + v71 / v74;
            unint64_t v70 = *(unsigned __int16 *)(v27 + 24);
            ++v72;
          }
          while (v72 < v70);
        }
      }
      if (*(_WORD *)(v27 + 22))
      {
        unsigned int v76 = *(unsigned __int16 **)(v27 + 1648);
        uint64_t v77 = *(unsigned __int16 *)(v27 + 22);
        int v78 = v62;
        do
        {
          int v79 = *v76++;
          v78 += ~v79;
          --v77;
        }
        while (v77);
      }
      else
      {
        int v78 = v62;
      }
      uint64_t v91 = *(unsigned __int16 *)(v27 + 24);
      if (*(_WORD *)(v27 + 24))
      {
        unint64_t v92 = *(unsigned __int16 **)(v27 + 1672);
        do
        {
          int v93 = *v92++;
          v63 += ~v93;
          --v91;
        }
        while (v91);
      }
      BOOL v94 = __OFSUB__(v78, 1);
      int v95 = v78 - 1;
      if (v95 < 0 != v94 || (v94 = __OFSUB__(v63, 1), int v96 = v63 - 1, (v96 < 0) ^ v94))
      {
        if (dword_1EB671A40 < 3) {
          return 4294954387;
        }
        unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
        CFNumberRef v37 = "Invalid tile widths\n";
        int v40 = "Invalid tile widths\n";
        size_t v41 = 20;
        goto LABEL_51;
      }
      *(_WORD *)(*(void *)(v27 + 1648) + 2 * *(unsigned __int16 *)(v27 + 22)) = v95;
      *(_WORD *)(*(void *)(v27 + 1672) + 2 * *(unsigned __int16 *)(v27 + 24)) = v96;
      sub_1D0C9740C(v27 + 1696, v62);
      sub_1D0C9740C(v27 + 1720, *(int *)(v27 + 1748));
      int v97 = *(unsigned __int16 *)(v27 + 24);
      uint64_t result = sub_1D0C97590(*(_DWORD *)(v27 + 1744), *(unsigned __int16 *)(v27 + 22) + 1, *(void *)(v27 + 1648), *(void *)(v27 + 1696));
      if (result) {
        return result;
      }
      uint64_t result = sub_1D0C97590(*(_DWORD *)(v27 + 1748), v97 + 1, *(void *)(v27 + 1672), *(void *)(v27 + 1720));
      if (result) {
        return result;
      }
      uint64_t v60 = v249;
      size_t v61 = *v249;
    }
    if (!*(unsigned char *)(v27 + 34))
    {
      memcpy((void *)(v27 + 40), v61 + 416, 0x618uLL);
      size_t v61 = *v60;
    }
    int v98 = v61[2113];
    uint64_t v99 = *(unsigned __int8 *)(v27 + 13);
    *(_DWORD *)(v27 + 1636) = v98 - v99;
    uint64_t v100 = *(unsigned __int8 *)(v27 + 1618);
    *(_DWORD *)(v27 + 1640) = v98 - v100;
    uint64_t v101 = *(void *)(v27 + 1768);
    uint64_t v102 = *(unsigned __int8 *)(v27 + 1);
    uint64_t v103 = v101 + 1552;
    uint64_t v104 = v101 + 16 * v102 + 256;
    if (v102 <= 0xF) {
      uint64_t v105 = v104;
    }
    else {
      uint64_t v105 = v103;
    }
    uint64_t v106 = *(void *)v105;
    if (!*(void *)v105)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
      CFNumberRef v37 = "sps failed!\n";
      int v40 = "sps failed!\n";
      size_t v41 = 12;
      goto LABEL_51;
    }
    unint64_t v107 = *(unsigned __int8 *)(v27 + 7);
    if (v107 >= 0xF)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      CFNumberRef v37 = "num_ref_idx_l0_default_active_minus1_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_ref_idx_l0_default_active_minus1_ of %lld is out of range (%lld, %lld)\n", v107, 0, 14);
      uint64_t v38 = *(unsigned __int8 *)(v27 + 7);
    }
    else
    {
      unint64_t v108 = *(unsigned __int8 *)(v27 + 8);
      if (v108 < 0xF)
      {
        uint64_t v109 = *(char *)(v27 + 9);
        uint64_t v110 = -26 - *(unsigned __int8 *)(v106 + 2097);
        if (v109 > 25 || v110 > v109)
        {
          if (dword_1EB671A40 < 3) {
            return 4294954387;
          }
          CFNumberRef v37 = "init_qp_minus26_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "init_qp_minus26_ of %lld is out of range (%lld, %lld)\n", v109, v110, 25);
          uint64_t v38 = *(char *)(v27 + 9);
          uint64_t v184 = -26 - *(unsigned __int8 *)(*(void *)v105 + 2097);
          uint64_t v248 = 25;
          goto LABEL_340;
        }
        uint64_t v111 = *(unsigned __int8 *)(v106 + 269);
        if (v99 > v111)
        {
          if (dword_1EB671A40 < 3) {
            return 4294954387;
          }
          CFNumberRef v37 = "diff_cu_qp_delta_depth_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "diff_cu_qp_delta_depth_ of %lld is out of range (%lld, %lld)\n", v99, 0, v111);
          uint64_t v38 = *(unsigned __int8 *)(v27 + 13);
          goto LABEL_157;
        }
        uint64_t v189 = *(char *)(v27 + 14);
        if ((v189 + 12) >= 0x19u)
        {
          if (dword_1EB671A40 < 3) {
            return 4294954387;
          }
          uint64_t v199 = 12;
          uint64_t v166 = -12;
          CFNumberRef v37 = "pps_cb_qp_offset_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "pps_cb_qp_offset_ of %lld is out of range (%lld, %lld)\n", v189, -12, 12);
          uint64_t v38 = *(char *)(v27 + 14);
        }
        else
        {
          uint64_t v190 = *(char *)(v27 + 15);
          if ((v190 + 12) >= 0x19u)
          {
            if (dword_1EB671A40 < 3) {
              return 4294954387;
            }
            uint64_t v199 = 12;
            uint64_t v166 = -12;
            CFNumberRef v37 = "pps_cr_qp_offset_ of %lld is out of range (%lld, %lld)\n";
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "pps_cr_qp_offset_ of %lld is out of range (%lld, %lld)\n", v190, -12, 12);
            uint64_t v38 = *(char *)(v27 + 15);
          }
          else
          {
            if (*(unsigned char *)(v27 + 20))
            {
              uint64_t v191 = *(unsigned __int16 *)(v27 + 22);
              uint64_t v192 = *(int *)(v106 + 2120) - 1;
              if (v191 > v192)
              {
                if (dword_1EB671A40 < 3) {
                  return 4294954387;
                }
                CFNumberRef v37 = "num_tile_columns_minus1_ of %lld is out of range (%lld, %lld)\n";
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_tile_columns_minus1_ of %lld is out of range (%lld, %lld)\n", v191, 0, v192);
                uint64_t v38 = *(unsigned __int16 *)(v27 + 22);
                uint64_t v193 = *(int *)(*(void *)v105 + 2120);
                goto LABEL_427;
              }
              uint64_t v224 = *(unsigned __int16 *)(v27 + 24);
              uint64_t v225 = *(int *)(v106 + 2124) - 1;
              if (v224 > v225)
              {
                if (dword_1EB671A40 < 3) {
                  return 4294954387;
                }
                CFNumberRef v37 = "num_tile_rows_minus1_ of %lld is out of range (%lld, %lld)\n";
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_tile_rows_minus1_ of %lld is out of range (%lld, %lld)\n", v224, 0, v225);
                uint64_t v38 = *(unsigned __int16 *)(v27 + 24);
                uint64_t v193 = *(int *)(*(void *)v105 + 2124);
LABEL_427:
                uint64_t v112 = v193 - 1;
                goto LABEL_158;
              }
            }
            if (!*(unsigned char *)(v27 + 29) || *(unsigned char *)(v27 + 31))
            {
LABEL_430:
              uint64_t v226 = *(unsigned __int16 *)(v27 + 1610);
              uint64_t v227 = *(unsigned __int8 *)(v106 + 2113) - 2;
              if (v227 < v226)
              {
                if (dword_1EB671A40 < 3) {
                  return 4294954387;
                }
                CFNumberRef v37 = "log2_parallel_merge_level_minus2_ of %lld is out of range (%lld, %lld)\n";
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2_parallel_merge_level_minus2_ of %lld is out of range (%lld, %lld)\n", v226, 0, v227);
                uint64_t v38 = *(unsigned __int16 *)(v27 + 1610);
                uint64_t v228 = *(unsigned __int8 *)(*(void *)v105 + 2113);
                goto LABEL_433;
              }
              if (*(unsigned char *)(v27 + 20) && *(unsigned char *)(v27 + 21))
              {
                if (dword_1EB671A40 < 3) {
                  return 4294954387;
                }
                unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
                CFNumberRef v37 = "Both tiles and wavefront enabled!\n";
                int v40 = "Both tiles and wavefront enabled!\n";
                size_t v41 = 34;
                goto LABEL_51;
              }
              if (*(unsigned char *)(v27 + 1614))
              {
                uint64_t v229 = *(unsigned __int8 *)(v27 + 1615);
                uint64_t v230 = *(unsigned __int8 *)(v106 + 2115) - 2;
                if (v230 < v229)
                {
                  if (dword_1EB671A40 < 3) {
                    return 4294954387;
                  }
                  CFNumberRef v37 = "rext.log2_max_transform_skip_block_size_minus2_ of %lld is out of range (%lld, %lld)\n";
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "rext.log2_max_transform_skip_block_size_minus2_ of %lld is out of range (%lld, %lld)\n", v229, 0, v230);
                  uint64_t v38 = *(unsigned __int8 *)(v27 + 1615);
                  uint64_t v228 = *(unsigned __int8 *)(*(void *)v105 + 2115);
LABEL_433:
                  uint64_t v112 = v228 - 2;
                  goto LABEL_158;
                }
                if (v100 > v111)
                {
                  if (dword_1EB671A40 < 3) {
                    return 4294954387;
                  }
                  CFNumberRef v37 = "rext.diff_cu_chroma_qp_offset_depth_ of %lld is out of range (%lld, %lld)\n";
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "rext.diff_cu_chroma_qp_offset_depth_ of %lld is out of range (%lld, %lld)\n", v100, 0, v111);
                  uint64_t v38 = *(unsigned __int8 *)(v27 + 1618);
LABEL_157:
                  uint64_t v112 = *(unsigned __int8 *)(*(void *)v105 + 269);
LABEL_158:
                  uint64_t v248 = v112;
LABEL_282:
                  uint64_t v247 = 0;
                  goto LABEL_104;
                }
                unint64_t v237 = *(unsigned __int8 *)(v27 + 1632);
                unsigned int v238 = *(unsigned __int8 *)(v106 + 2096);
                if (v238 <= 0xA) {
                  unsigned int v238 = 10;
                }
                unint64_t v239 = v238 - 10;
                if (v237 > v239)
                {
                  if (dword_1EB671A40 < 3) {
                    return 4294954387;
                  }
                  uint64_t v240 = "rext.log2_sao_offset_scale_luma_ of %lld is out of range (%lld, %lld)\n";
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "rext.log2_sao_offset_scale_luma_ of %lld is out of range (%lld, %lld)\n", v237, 0, v239);
                  uint64_t v241 = *(unsigned __int8 *)(v27 + 1632);
                  int v242 = *(unsigned __int8 *)(*(void *)v105 + 2096);
LABEL_495:
                  if (v242 <= 10) {
                    int v242 = 10;
                  }
                  syslog(27, v240, v241, 0, (v242 - 10));
                  return 4294954387;
                }
                unint64_t v243 = *(unsigned __int8 *)(v27 + 1633);
                unsigned int v244 = *(unsigned __int8 *)(v106 + 2098);
                if (v244 <= 0xA) {
                  unsigned int v244 = 10;
                }
                unint64_t v245 = v244 - 10;
                if (v243 > v245)
                {
                  if (dword_1EB671A40 < 3) {
                    return 4294954387;
                  }
                  uint64_t v240 = "rext.log2_sao_offset_scale_chroma_ of %lld is out of range (%lld, %lld)\n";
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "rext.log2_sao_offset_scale_chroma_ of %lld is out of range (%lld, %lld)\n", v243, 0, v245);
                  uint64_t v241 = *(unsigned __int8 *)(v27 + 1633);
                  int v242 = *(unsigned __int8 *)(*(void *)v105 + 2098);
                  goto LABEL_495;
                }
              }
              if (*(unsigned char *)(v27 + 1616))
              {
                if (*(unsigned char *)(v106 + 2148) != 3)
                {
                  if (dword_1EB671A40 < 3) {
                    return 4294954387;
                  }
                  unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
                  CFNumberRef v37 = "cross_component_prediction only defined for 444\n";
                  int v40 = "cross_component_prediction only defined for 444\n";
                  size_t v41 = 48;
                  goto LABEL_51;
                }
                if (*(unsigned __int8 *)(v106 + 2096) >= 0xCu && dword_1EB671A40 >= 4)
                {
                  fwrite("Our CCP can diverge from spec if IDCT output exceeds 16bits, possible at 12-bit luma\n", 0x55uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                  syslog(28, "Our CCP can diverge from spec if IDCT output exceeds 16bits, possible at 12-bit luma\n");
                }
              }
              *(unsigned char *)(v27 + 1760) = 1;
              uint64_t v27 = *(void *)(v10 + 32);
              goto LABEL_35;
            }
            uint64_t v231 = *(char *)(v27 + 32);
            if ((v231 + 6) >= 0xDu)
            {
              if (dword_1EB671A40 < 3) {
                return 4294954387;
              }
              uint64_t v199 = 6;
              uint64_t v166 = -6;
              CFNumberRef v37 = "pps_beta_offset_div2_ of %lld is out of range (%lld, %lld)\n";
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "pps_beta_offset_div2_ of %lld is out of range (%lld, %lld)\n", v231, -6, 6);
              uint64_t v38 = *(char *)(v27 + 32);
            }
            else
            {
              uint64_t v232 = *(char *)(v27 + 33);
              if ((v232 + 6) < 0xDu) {
                goto LABEL_430;
              }
              if (dword_1EB671A40 < 3) {
                return 4294954387;
              }
              uint64_t v199 = 6;
              uint64_t v166 = -6;
              CFNumberRef v37 = "pps_tc_offset_div2_ of %lld is out of range (%lld, %lld)\n";
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "pps_tc_offset_div2_ of %lld is out of range (%lld, %lld)\n", v232, -6, 6);
              uint64_t v38 = *(char *)(v27 + 33);
            }
          }
        }
        uint64_t v248 = v199;
LABEL_397:
        uint64_t v247 = v166;
        goto LABEL_104;
      }
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      CFNumberRef v37 = "num_ref_idx_l1_default_active_minus1_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_ref_idx_l1_default_active_minus1_ of %lld is out of range (%lld, %lld)\n", v108, 0, 14);
      uint64_t v38 = *(unsigned __int8 *)(v27 + 8);
    }
    uint64_t v248 = 14;
    goto LABEL_282;
  }
  uint64_t v42 = *(void *)(v10 + 2336);
  if (!v42)
  {
    if (dword_1EB671A40 < 3) {
      return 4294954387;
    }
    unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
    CFNumberRef v37 = "No previous slice found but first_slice_in_pic_flag_ not set!\n";
    int v40 = "No previous slice found but first_slice_in_pic_flag_ not set!\n";
    size_t v41 = 62;
LABEL_51:
    fwrite(v40, v41, 1uLL, v39);
LABEL_105:
    syslog(27, v37, v246, v247, v248);
    return 4294954387;
  }
  uint64_t v44 = *(void *)(v42 + 32);
  uint64_t v43 = *(void *)(v42 + 40);
  if (v43) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v45 = *(std::__shared_weak_count **)(v10 + 40);
  *(void *)(v10 + 32) = v44;
  *(void *)(v10 + 40) = v43;
  if (v45) {
    sub_1D0C4C984(v45);
  }
  uint64_t v46 = *(void *)(v10 + 2336);
  uint64_t v48 = *(void *)(v46 + 16);
  uint64_t v47 = *(void *)(v46 + 24);
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v49 = *(std::__shared_weak_count **)(v10 + 24);
  *(void *)(v10 + 16) = v48;
  *(void *)(v10 + 24) = v47;
  if (v49) {
    sub_1D0C4C984(v49);
  }
  int v50 = *(unsigned __int8 **)(v10 + 32);
  if (!v50 || (uint64_t v51 = *(void *)(v10 + 16)) == 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Missing SPS or PPS for secondary slice\n", 0x27uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Missing SPS or PPS for secondary slice\n");
    }
    return 4294954385;
  }
  if (*v50 != *(unsigned __int8 *)(v10 + 50) || *(unsigned __int8 *)(v51 + 200) != v50[1])
  {
    if (dword_1EB671A40 < 3) {
      return 4294954387;
    }
    unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
    CFNumberRef v37 = "Secondary slice points to different SPS/PPS\n";
    int v40 = "Secondary slice points to different SPS/PPS\n";
    size_t v41 = 44;
    goto LABEL_51;
  }
  int v52 = v50[2];
  if (v52)
  {
    LOBYTE(v52) = sub_1D0C51880(v10 + 1608, 1) != 0;
    uint64_t v51 = *(void *)(v10 + 16);
  }
  *(unsigned char *)(v10 + 56) = v52;
  signed int v53 = *(_DWORD *)(v51 + 2124) * *(_DWORD *)(v51 + 2120);
  if (v53 <= 1)
  {
    if (dword_1EB671A40 < 3) {
      return 4294954387;
    }
    unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
    CFNumberRef v37 = "got secondary slice but only one CTB in entire picture!\n";
    int v40 = "got secondary slice but only one CTB in entire picture!\n";
    size_t v41 = 56;
    goto LABEL_51;
  }
  unsigned int v54 = __clz(v53) ^ 0x1F;
  if ((v53 & (v53 - 1)) != 0) {
    int v55 = v54 + 1;
  }
  else {
    int v55 = v54;
  }
  int v34 = sub_1D0C4CA68(v10 + 1608, v55);
  *(_DWORD *)(v10 + 52) = v34;
  if (!*(unsigned char *)(v10 + 56))
  {
LABEL_43:
    *(_DWORD *)(v10 + 648) = v34;
    *(unsigned char *)(v10 + 1385) = 0;
    uint64_t v35 = *(void *)(v10 + 32);
    if (*(unsigned char *)(v35 + 4)) {
      *(unsigned char *)(v10 + 57) = sub_1D0C51880(v10 + 1608, *(unsigned __int8 *)(v35 + 4));
    }
    unsigned __int8 v36 = sub_1D0C4C8F0(v10 + 1608);
    *(unsigned char *)(v10 + 58) = v36;
    if (v36 >= 3u)
    {
      if (dword_1EB671A40 >= 3)
      {
        CFNumberRef v37 = "Invalid slice type %d\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid slice type %d\n", v36);
        uint64_t v38 = *(unsigned __int8 *)(v10 + 58);
LABEL_104:
        uint64_t v246 = v38;
        goto LABEL_105;
      }
      return 4294954387;
    }
    if (*(unsigned char *)(*(void *)(v10 + 32) + 3)) {
      BOOL v80 = sub_1D0C51880(v10 + 1608, 1) != 0;
    }
    else {
      BOOL v80 = 1;
    }
    *(unsigned char *)(v10 + 59) = v80;
    if (*(unsigned char *)(*(void *)(v10 + 16) + 202)) {
      *(unsigned char *)(v10 + 60) = sub_1D0C51880(v10 + 1608, 2);
    }
    if (*(unsigned char *)(v10 + 632))
    {
      if (*(unsigned char *)(v10 + 58) == 2) {
        goto LABEL_113;
      }
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
      CFNumberRef v37 = "IDR nalu must have only I slices\n";
      goto LABEL_50;
    }
    *(_DWORD *)(v10 + 64) = sub_1D0C51880(v10 + 1608, *(unsigned __int8 *)(*(void *)(v10 + 16) + 224) + 4);
    int v86 = sub_1D0C51880(v10 + 1608, 1);
    *(unsigned char *)(v10 + 68) = v86 != 0;
    if (v86)
    {
      uint64_t v87 = *(void *)(v10 + 16);
      unsigned int v88 = *(_DWORD *)(v87 + 288);
      if (v88)
      {
        unsigned int v89 = __clz(v88) ^ 0x1F;
        if ((v88 & (v88 - 1)) != 0) {
          ++v89;
        }
        if (v89)
        {
          unsigned int v90 = sub_1D0C51880(v10 + 1608, v89);
          uint64_t v87 = *(void *)(v10 + 16);
          unsigned int v88 = *(_DWORD *)(v87 + 288);
        }
        else
        {
          unsigned int v90 = 0;
        }
        *(_DWORD *)(v10 + 320) = v90;
        if (v90 < v88)
        {
LABEL_175:
          if (*(unsigned char *)(v87 + 320))
          {
            uint64_t result = sub_1D0D7C1F4((unsigned int *)(v10 + 324), v87, v10 + 1608);
            if (result) {
              return result;
            }
            uint64_t v87 = *(void *)(v10 + 16);
          }
          else
          {
            *(void *)(v10 + 324) = 0;
            *(_DWORD *)(v10 + 508) = 0;
          }
          char v118 = *(unsigned char *)(v87 + 396);
          if (v118) {
            char v118 = sub_1D0C51880(v10 + 1608, 1) != 0;
          }
          *(unsigned char *)(v10 + 514) = v118;
LABEL_113:
          *(_WORD *)(v10 + 512) = 0;
          if (*(unsigned char *)(*(void *)(v10 + 16) + 277))
          {
            *(unsigned char *)(v10 + 512) = sub_1D0C51880(v10 + 1608, 1) != 0;
            if (*(unsigned char *)(*(void *)(v10 + 16) + 201)) {
              *(unsigned char *)(v10 + 513) = sub_1D0C51880(v10 + 1608, 1) != 0;
            }
          }
          *(_WORD *)(v10 + 516) = 0;
          if (*(unsigned __int8 *)(v10 + 58) > 1u) {
            goto LABEL_229;
          }
          int v81 = sub_1D0C51880(v10 + 1608, 1);
          *(unsigned char *)(v10 + 515) = v81 != 0;
          if (v81)
          {
            unsigned __int8 v83 = sub_1D0C4C8F0(v10 + 1608);
            *(unsigned char *)(v10 + 516) = v83 + 1;
            if (v83 >= 0xFu)
            {
              if (dword_1EB671A40 < 3) {
                return 4294954387;
              }
              CFNumberRef v37 = "num_ref_idx_l0_active_minus1_ (%d) out of range [0, 14]\n";
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_ref_idx_l0_active_minus1_ (%d) out of range [0, 14]\n", (char)(v83 + 1) - 1);
              int v85 = *(char *)(v10 + 516);
LABEL_170:
              uint64_t v38 = (v85 - 1);
              goto LABEL_104;
            }
            if (!*(unsigned char *)(v10 + 58))
            {
              unsigned __int8 v84 = sub_1D0C4C8F0(v10 + 1608);
              *(unsigned char *)(v10 + 517) = v84 + 1;
              if (v84 >= 0xFu)
              {
                if (dword_1EB671A40 < 3) {
                  return 4294954387;
                }
                CFNumberRef v37 = "num_ref_idx_l1_active_minus1_ (%d) out of range [0, 14]\n";
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_ref_idx_l1_active_minus1_ (%d) out of range [0, 14]\n", (char)(v84 + 1) - 1);
                int v85 = *(char *)(v10 + 517);
                goto LABEL_170;
              }
            }
          }
          else
          {
            uint64_t v113 = *(void *)(v10 + 32);
            *(unsigned char *)(v10 + 516) = *(unsigned char *)(v113 + 7) + 1;
            if (!*(unsigned char *)(v10 + 58)) {
              *(unsigned char *)(v10 + 517) = *(unsigned char *)(v113 + 8) + 1;
            }
          }
          if (*(unsigned char *)(v10 + 68)) {
            uint64_t v114 = *(void *)(*(void *)(v10 + 16) + 296) + 248 * *(int *)(v10 + 320);
          }
          else {
            uint64_t v114 = v10 + 72;
          }
          uint64_t v119 = *(unsigned __int8 *)(v114 + 160);
          if (*(unsigned char *)(v114 + 160))
          {
            LODWORD(v120) = 0;
            unsigned int v121 = (unsigned __int8 *)(v114 + 2);
            do
            {
              int v122 = *v121;
              v121 += 4;
              uint64_t v120 = (v120 + v122);
              --v119;
            }
            while (v119);
          }
          else
          {
            uint64_t v120 = 0;
          }
          uint64_t v123 = *(unsigned __int8 *)(v114 + 161);
          if (*(unsigned char *)(v114 + 161))
          {
            v124 = (unsigned __int8 *)(v114 + 66);
            do
            {
              int v125 = *v124;
              v124 += 4;
              uint64_t v120 = (v120 + v125);
              --v123;
            }
            while (v123);
          }
          int v126 = *(_DWORD *)(v10 + 328) + *(_DWORD *)(v10 + 324);
          int v127 = v126 - 1;
          if (v126 >= 1)
          {
            unsigned int v128 = (v126 + 3) & 0xFFFFFFFC;
            v82.i32[0] = v127;
            int32x4_t v129 = (int32x4_t)v120;
            int32x4_t v130 = (int32x4_t)xmmword_1D0D7F240;
            uint32x4_t v131 = (uint32x4_t)vdupq_n_s32(*(unsigned __int16 *)(v10 + 508));
            v132.i64[0] = 0xFF000000FFLL;
            v132.i64[1] = 0xFF000000FFLL;
            v133.i64[0] = 0x100000001;
            v133.i64[1] = 0x100000001;
            v134.i64[0] = 0x400000004;
            v134.i64[1] = 0x400000004;
            do
            {
              int8x16_t v135 = (int8x16_t)v129;
              uint32x4_t v136 = (uint32x4_t)v130;
              int32x4_t v129 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v131, (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)v130, v132))), v133), v129);
              int32x4_t v130 = vaddq_s32(v130, v134);
              v128 -= 4;
            }
            while (v128);
            uint64_t v120 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v136, (uint32x4_t)vdupq_lane_s32(v82, 0)), v135, (int8x16_t)v129));
          }
          unsigned int v137 = *(unsigned __int8 *)(*(void *)(v10 + 16) + *(unsigned __int8 *)(*(void *)(v10 + 16) + 1) + 226);
          if (v120 > v137)
          {
            if (dword_1EB671A40 >= 3)
            {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "numPocTotalCurr (%d) out of range [0, %d]\n", v120, v137);
              syslog(27, "numPocTotalCurr (%d) out of range [0, %d]\n");
            }
            return 4294954387;
          }
          if (*(unsigned char *)(*(void *)(v10 + 32) + 1608)) {
            BOOL v138 = v120 >= 2;
          }
          else {
            BOOL v138 = 0;
          }
          if (!v138)
          {
            *(_WORD *)(v10 + 518) = 0;
            goto LABEL_205;
          }
          unsigned int v139 = __clz(v120) ^ 0x1F;
          if ((v120 & (v120 - 1)) != 0) {
            int v140 = v139 + 1;
          }
          else {
            int v140 = v139;
          }
          int v141 = sub_1D0C51880(v10 + 1608, 1);
          *(unsigned char *)(v10 + 518) = v141 != 0;
          if (v141 && *(char *)(v10 + 516) >= 1)
          {
            uint64_t v142 = 0;
            uint64_t v143 = v10 + 520;
            while (1)
            {
              unsigned __int8 v144 = sub_1D0C51880(v10 + 1608, v140);
              *(unsigned char *)(v143 + v142) = v144;
              if (v144 >= v120) {
                break;
              }
              if (++v142 >= *(char *)(v10 + 516)) {
                goto LABEL_215;
              }
            }
            if (dword_1EB671A40 < 3) {
              return 4294954387;
            }
            unsigned __int8 v194 = "list_entry_l0_[%d] (%d) out of range [0, %d]\n";
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "list_entry_l0_[%d] (%d) out of range [0, %d]\n");
          }
          else
          {
LABEL_215:
            if (*(unsigned char *)(v10 + 58))
            {
              *(unsigned char *)(v10 + 519) = 0;
              goto LABEL_217;
            }
            int v187 = sub_1D0C51880(v10 + 1608, 1);
            *(unsigned char *)(v10 + 519) = v187 != 0;
            if (!v187 || *(char *)(v10 + 517) < 1)
            {
LABEL_205:
              if (!*(unsigned char *)(v10 + 58)) {
                *(unsigned char *)(v10 + 552) = sub_1D0C51880(v10 + 1608, 1) != 0;
              }
LABEL_217:
              char v145 = *(unsigned char *)(*(void *)(v10 + 32) + 6);
              if (v145) {
                char v145 = sub_1D0C51880(v10 + 1608, 1) != 0;
              }
              *(unsigned char *)(v10 + 553) = v145;
              *(_WORD *)(v10 + 554) = 1;
              if (!*(unsigned char *)(v10 + 514)) {
                goto LABEL_224;
              }
              if (*(unsigned char *)(v10 + 58)
                || (int v146 = sub_1D0C51880(v10 + 1608, 1), *(unsigned char *)(v10 + 554) = v146 != 0, v146))
              {
                if (*(char *)(v10 + 516) <= 1)
                {
LABEL_224:
                  uint64_t v147 = *(void *)(v10 + 32);
                  if ((!*(unsigned char *)(v147 + 17) || *(unsigned char *)(v10 + 58) != 1)
                    && (!*(unsigned char *)(v147 + 18) || *(unsigned char *)(v10 + 58)))
                  {
LABEL_228:
                    *(unsigned char *)(v10 + 558) = sub_1D0C4C8F0(v10 + 1608);
LABEL_229:
                    int v148 = sub_1D0C4C8F0(v10 + 1608);
                    *(unsigned char *)(v10 + 559) = (-((v148 + 1) & 1) ^ ((v148 + 1) >> 1)) + ((v148 + 1) & 1);
                    uint64_t v149 = *(void *)(v10 + 32);
                    *(unsigned char *)(v10 + 564) = *(unsigned char *)(v149 + 31);
                    *(unsigned char *)(v10 + 567) = *(unsigned char *)(v149 + 28);
                    *(_WORD *)(v10 + 565) = *(_WORD *)(v149 + 32);
                    *(_WORD *)(v10 + 560) = 0;
                    *(unsigned char *)(v10 + 562) = 0;
                    if (*(unsigned char *)(v149 + 16))
                    {
                      int v150 = sub_1D0C4C8F0(v10 + 1608);
                      *(unsigned char *)(v10 + 560) = (-((v150 + 1) & 1) ^ ((v150 + 1) >> 1)) + ((v150 + 1) & 1);
                      int v151 = sub_1D0C4C8F0(v10 + 1608);
                      *(unsigned char *)(v10 + 561) = (-((v151 + 1) & 1) ^ ((v151 + 1) >> 1)) + ((v151 + 1) & 1);
                      uint64_t v149 = *(void *)(v10 + 32);
                    }
                    if (*(unsigned char *)(v149 + 1617))
                    {
                      *(unsigned char *)(v10 + 562) = sub_1D0C51880(v10 + 1608, 1) != 0;
                      uint64_t v149 = *(void *)(v10 + 32);
                    }
                    if (*(unsigned char *)(v149 + 29))
                    {
                      if (*(unsigned char *)(v149 + 30))
                      {
                        int v152 = sub_1D0C51880(v10 + 1608, 1);
                        *(unsigned char *)(v10 + 563) = v152 != 0;
                        if (v152)
                        {
                          int v153 = sub_1D0C51880(v10 + 1608, 1);
                          *(unsigned char *)(v10 + 564) = v153 != 0;
                          if (!v153)
                          {
                            int v154 = sub_1D0C4C8F0(v10 + 1608);
                            *(unsigned char *)(v10 + 565) = (-((v154 + 1) & 1) ^ ((v154 + 1) >> 1))
                                                  + ((v154 + 1) & 1);
                            int v155 = sub_1D0C4C8F0(v10 + 1608);
                            *(unsigned char *)(v10 + 566) = (-((v155 + 1) & 1) ^ ((v155 + 1) >> 1))
                                                  + ((v155 + 1) & 1);
                          }
                        }
                      }
                      else
                      {
                        *(unsigned char *)(v10 + 563) = 0;
                      }
                    }
                    if (*(unsigned char *)(*(void *)(v10 + 32) + 28)
                      && (*(unsigned char *)(v10 + 512) || *(unsigned char *)(v10 + 513) || !*(unsigned char *)(v10 + 564)))
                    {
                      *(unsigned char *)(v10 + 567) = sub_1D0C51880(v10 + 1608, 1) != 0;
                    }
                    goto LABEL_243;
                  }
                  unsigned __int8 v165 = sub_1D0C4C8F0(v10 + 1608);
                  *(unsigned char *)(v10 + 556) = v165;
                  if (v165 >= 8u)
                  {
                    if (dword_1EB671A40 < 3) {
                      return 4294954387;
                    }
                    uint64_t v166 = 7;
                    CFNumberRef v37 = "luma_log2_weight_denom %u > kMaxWeightDenominator %u\n";
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "luma_log2_weight_denom %u > kMaxWeightDenominator %u\n", v165, 7);
                    uint64_t v38 = *(unsigned __int8 *)(v10 + 556);
                    goto LABEL_397;
                  }
                  *(unsigned char *)(v10 + 557) = 0;
                  if (*(unsigned char *)(*(void *)(v10 + 16) + 201))
                  {
                    int v185 = sub_1D0C4C8F0(v10 + 1608);
                    unsigned int v186 = (-((v185 + 1) & 1) ^ ((v185 + 1) >> 1)) + ((v185 + 1) & 1);
                    *(unsigned char *)(v10 + 557) = (-((v185 + 1) & 1) ^ ((v185 + 1) >> 1)) + ((v185 + 1) & 1);
                    unsigned __int8 v165 = *(unsigned char *)(v10 + 556);
                  }
                  else
                  {
                    LOBYTE(v186) = 0;
                  }
                  unsigned __int8 v195 = v186 + v165;
                  *(unsigned char *)(v10 + 662) = v186 + v165;
                  if ((v186 + v165) < 8u)
                  {
                    uint64_t v196 = *(void *)(v10 + 16);
                    int v197 = 14 - *(unsigned __int8 *)(v196 + 2096);
                    if (v197 <= 2) {
                      int v197 = 2;
                    }
                    *(_DWORD *)(v10 + 664) = v197 + v165;
                    int v198 = 14 - *(unsigned __int8 *)(v196 + 2098);
                    if (v198 <= 2) {
                      int v198 = 2;
                    }
                    *(_DWORD *)(v10 + 668) = v198 + v195;
                    uint64_t result = sub_1D0CC35E4(v10, 0);
                    if (result) {
                      return result;
                    }
                    if (!*(unsigned char *)(v10 + 58))
                    {
                      uint64_t result = sub_1D0CC35E4(v10, 1u);
                      if (result) {
                        return result;
                      }
                    }
                    goto LABEL_228;
                  }
                  if (dword_1EB671A40 < 3) {
                    return 4294954387;
                  }
                  CFNumberRef v37 = "chromaLog2WeightDenom %d not in [0, %u] (chroma delta %d)\n";
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "chromaLog2WeightDenom %d not in [0, %u] (chroma delta %d)\n", (v186 + v165), (char)v186, 7);
                  uint64_t v38 = *(unsigned __int8 *)(v10 + 662);
                  uint64_t v184 = *(char *)(v10 + 557);
                  uint64_t v248 = 7;
LABEL_340:
                  uint64_t v247 = v184;
                  goto LABEL_104;
                }
              }
              else if (*(char *)(v10 + 517) < 2)
              {
                goto LABEL_224;
              }
              *(unsigned char *)(v10 + 555) = sub_1D0C4C8F0(v10 + 1608);
              goto LABEL_224;
            }
            uint64_t v142 = 0;
            uint64_t v143 = v10 + 536;
            while (1)
            {
              unsigned __int8 v188 = sub_1D0C51880(v10 + 1608, v140);
              *(unsigned char *)(v143 + v142) = v188;
              if (v188 >= v120) {
                break;
              }
              if (++v142 >= *(char *)(v10 + 517)) {
                goto LABEL_205;
              }
            }
            if (dword_1EB671A40 < 3) {
              return 4294954387;
            }
            unsigned __int8 v194 = "list_entry_l1_[%d] (%d) out of range [0, %d]\n";
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "list_entry_l1_[%d] (%d) out of range [0, %d]\n");
          }
          syslog(27, v194, v142, *(unsigned __int8 *)(v143 + v142), v120);
          return 4294954387;
        }
      }
      else
      {
        unsigned int v90 = 0;
        *(_DWORD *)(v10 + 320) = 0;
      }
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      unsigned int v115 = "short_term_ref_pic_set_idx (%u) >= sps_->num_short_term_ref_pic_sets (%u)!\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "short_term_ref_pic_set_idx (%u) >= sps_->num_short_term_ref_pic_sets (%u)!\n", v90, v88);
      uint64_t v116 = *(unsigned int *)(v10 + 320);
      uint64_t v117 = *(unsigned int *)(*(void *)(v10 + 16) + 288);
LABEL_250:
      syslog(27, v115, v116, v117);
      return 4294954387;
    }
    uint64_t result = sub_1D0C40F84(v10 + 72, v10 + 1608, *(void *)(v10 + 16), *(unsigned int *)(*(void *)(v10 + 16) + 288));
    if (result) {
      return result;
    }
    uint64_t v87 = *(void *)(v10 + 16);
    goto LABEL_175;
  }
LABEL_243:
  uint64_t v156 = *(void *)(v10 + 32);
  if (*(unsigned char *)(v156 + 20) || *(unsigned char *)(v156 + 21))
  {
    int v157 = sub_1D0C4C8F0(v10 + 1608);
    *(_DWORD *)(v10 + 568) = v157;
    if (v157 < 1)
    {
      if (v157 < 0)
      {
        if (dword_1EB671A40 < 3) {
          return 4294954387;
        }
        unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
        CFNumberRef v37 = "Invalid number of substreams!\n";
        int v40 = "Invalid number of substreams!\n";
        size_t v41 = 30;
        goto LABEL_51;
      }
    }
    else
    {
      if (*(unsigned char *)(*(void *)(v10 + 32) + 21))
      {
        int v158 = *(_DWORD *)(*(void *)(v10 + 16) + 2124);
        if (v157 > v158)
        {
          if (dword_1EB671A40 < 3) {
            return 4294954387;
          }
          unsigned int v115 = "num_entry_point_offsets %d > sps_->picHeightInCtbsY %d!\n";
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "num_entry_point_offsets %d > sps_->picHeightInCtbsY %d!\n", v157, v158);
          uint64_t v116 = *(unsigned int *)(v10 + 568);
          uint64_t v117 = *(unsigned int *)(*(void *)(v10 + 16) + 2124);
          goto LABEL_250;
        }
      }
      unsigned __int8 v159 = sub_1D0C4C8F0(v10 + 1608);
      *(unsigned char *)(v10 + 572) = v159;
      if (v159 >= 0x20u)
      {
        if (dword_1EB671A40 < 3) {
          return 4294954387;
        }
        CFNumberRef v37 = "offset_len_minus1 %d > 31!\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "offset_len_minus1 %d > 31!\n", v159);
        uint64_t v38 = *(unsigned __int8 *)(v10 + 572);
        goto LABEL_104;
      }
      sub_1D0C60FFC((char **)(v10 + 576), *(int *)(v10 + 568));
      if (*(int *)(v10 + 568) >= 1)
      {
        uint64_t v160 = 0;
        do
          *(_DWORD *)(*(void *)(v10 + 576) + 4 * v160++) = sub_1D0C4CA68(v10 + 1608, *(unsigned __int8 *)(v10 + 572) + 1);
        while (v160 < *(int *)(v10 + 568));
      }
    }
  }
  else
  {
    *(_DWORD *)(v10 + 568) = 0;
  }
  if (*(unsigned char *)(*(void *)(v10 + 32) + 1612))
  {
    unsigned __int16 v161 = sub_1D0C4C8F0(v10 + 1608);
    *(_WORD *)(v10 + 600) = v161;
    if (v161 >= 0x101u)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      CFNumberRef v37 = "slice_segment_header_extension_length %d > 256!\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "slice_segment_header_extension_length %d > 256!\n", v161);
      uint64_t v38 = *(unsigned __int16 *)(v10 + 600);
      goto LABEL_104;
    }
    sub_1D0CC39B0((unint64_t *)(v10 + 608), v161);
    if (*(_WORD *)(v10 + 600))
    {
      unint64_t v162 = 0;
      do
        *(unsigned char *)(*(void *)(v10 + 608) + v162++) = sub_1D0C51880(v10 + 1608, 8);
      while (v162 < *(unsigned __int16 *)(v10 + 600));
    }
  }
  unint64_t v163 = *(void *)(v10 + 1640) + 1;
  *(void *)(v10 + 1640) = v163;
  *(_DWORD *)(v10 + 1660) = 0;
  unint64_t v164 = *(void *)(v10 + 1648);
  if (v163 > v164) {
    *(void *)(v10 + 1640) = v164;
  }
  uint64_t result = sub_1D0C4CE88(v10);
  if (!result)
  {
    if (*(unsigned char *)(*(void *)(v10 + 2344) + 58)) {
      sub_1D0C96494(v10, (FILE *)*MEMORY[0x1E4F143C8]);
    }
    if (v7)
    {
LABEL_275:
      if (*(int *)(a1 + 2136) <= 0 && *(unsigned char *)(v10 + 58) == 2
        || (uint64_t result = sub_1D0C94390(v10, (_DWORD *)(a1 + 2136), *(void *)(a1 + 2120)), !result))
      {
        uint64_t result = 0;
        ++*(_DWORD *)(a1 + 2112);
      }
      return result;
    }
    if (!*(unsigned char *)(v10 + 48)) {
      return 4294954387;
    }
    uint64_t v167 = *(void *)(a1 + 2056);
    int v168 = *(unsigned __int8 *)(a2 + 18);
    int v169 = *(unsigned __int8 *)(v10 + 633);
    if (*(unsigned char *)(v10 + 633)) {
      *(unsigned char *)(v167 + 202) = *(unsigned char *)(v10 + 638);
    }
    *(unsigned char *)(v167 + 2584) = 0;
    uint64_t v171 = v10 + 16;
    uint64_t v170 = *(void *)(v10 + 16);
    int v172 = *(unsigned __int8 *)(v170 + 2129);
    int v173 = *(unsigned __int8 *)(v170 + 2128);
    *(_DWORD *)(v167 + 2368) = v168;
    *(_DWORD *)(v167 + 2372) = v172;
    *(_DWORD *)(v167 + 2376) = v173;
    int v174 = *(unsigned __int8 *)(v10 + 632);
    if (*(unsigned char *)(v10 + 632)) {
      int v175 = 0;
    }
    else {
      int v175 = *(_DWORD *)(v167 + 2384);
    }
    if (*(unsigned char *)(v10 + 632)) {
      int v176 = 0;
    }
    else {
      int v176 = *(_DWORD *)(v167 + 2388);
    }
    int v177 = *(_DWORD *)(v10 + 64);
    if (v177 < v175
      && ((int v178 = *(_DWORD *)(v170 + 2108), v178 >= 0) ? (v179 = *(_DWORD *)(v170 + 2108)) : (v179 = v178 + 1),
          v175 - v177 >= v179 >> 1))
    {
      v176 += v178;
    }
    else
    {
      BOOL v94 = __OFSUB__(v177, v175);
      int v180 = v177 - v175;
      if (!((v180 < 0) ^ v94 | (v180 == 0)))
      {
        int v181 = *(_DWORD *)(v170 + 2108);
        if (v181 >= 0) {
          int v182 = *(_DWORD *)(v170 + 2108);
        }
        else {
          int v182 = v181 + 1;
        }
        if (v180 <= v182 >> 1) {
          int v183 = 0;
        }
        else {
          int v183 = *(_DWORD *)(v170 + 2108);
        }
        v176 -= v183;
      }
    }
    *(_DWORD *)(v10 + 644) = v176;
    if (v169 && *(unsigned char *)(v10 + 638))
    {
      int v176 = 0;
      *(_DWORD *)(v10 + 644) = 0;
    }
    *(_DWORD *)(v10 + 640) = v176 + v177;
    if (!v168 && !*(unsigned char *)(v10 + 634) && !*(unsigned char *)(v10 + 635) && !*(unsigned char *)(v10 + 636))
    {
      *(_DWORD *)(v167 + 2384) = v177;
      *(_DWORD *)(v167 + 2388) = v176;
    }
    if (!v174)
    {
      if (*(unsigned char *)(v10 + 68)) {
        int v202 = (unsigned char *)(*(void *)(v170 + 296) + 248 * *(int *)(v10 + 320));
      }
      else {
        int v202 = (unsigned char *)(v10 + 72);
      }
      uint64_t result = sub_1D0C9906C((_DWORD *)(a1 + 2136), v167 + 1976, v10 + 16, v202, v10 + 324, v176 + v177);
      if (result) {
        return result;
      }
      sub_1D0C9A2F0(v167 + 1976, (_DWORD *)(a1 + 2136));
      if (*(unsigned char *)(v10 + 58) != 2 && !*(_DWORD *)(a1 + 2136))
      {
        if (dword_1EB671A40 < 3) {
          return 4294954387;
        }
        unsigned int v39 = (FILE *)*MEMORY[0x1E4F143C8];
        CFNumberRef v37 = "P or B slice must have reference frames!\n";
        int v40 = "P or B slice must have reference frames!\n";
        size_t v41 = 41;
        goto LABEL_51;
      }
    }
    if (*(void *)(v167 + 2544) && *(unsigned char *)(v10 + 58) != 2)
    {
      if (dword_1EB671A40 >= 3)
      {
        size_t v213 = (FILE *)*MEMORY[0x1E4F143C8];
        unint64_t v214 = "P or B slice not supported in tile decoder!\n";
        unint64_t v215 = "P or B slice not supported in tile decoder!\n";
        size_t v216 = 44;
        goto LABEL_389;
      }
      return 4294954386;
    }
    uint64_t v250 = v167 + 1976;
    sub_1D0C4C9F8(v167 + 1976);
    if (*(unsigned char *)(v10 + 633) && *(unsigned char *)(v10 + 638))
    {
      if (!*(unsigned char *)(v10 + 637) && !*(unsigned char *)(v10 + 49)) {
        sub_1D0C4F230(v167);
      }
      for (uint64_t i = 0; i != 272; i += 16)
      {
        unsigned int v201 = *(std::__shared_weak_count **)(v167 + i + 2016);
        *(_OWORD *)(v167 + i + 2008) = 0u;
        if (v201) {
          sub_1D0C4C984(v201);
        }
      }
    }
    else
    {
      sub_1D0C4F424(v167, 0);
    }
    int v204 = (void *)(v167 + 184);
    uint64_t v203 = *(void *)(v167 + 184);
    if (!v203)
    {
LABEL_412:
      uint64_t result = sub_1D0C43454((unsigned __int8 **)(v10 + 16), (uint64_t *)(v167 + 2536), (void *)(v167 + 184));
      if (result) {
        return result;
      }
      uint64_t v203 = *v204;
LABEL_414:
      char v220 = (unsigned int **)(a1 + 2120);
      if (*(unsigned __int8 *)(v167 + 34) != 255) {
        *(unsigned char *)(v203 + 25) = 1;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v203 + 32))(v203, *(unsigned int *)(v10 + 640), a3, a4, a1 + 2120);
      if (!result)
      {
        if (!*(unsigned char *)(*(void *)v171 + 201)) {
          sub_1D0C8E058(*v220);
        }
        *(unsigned char *)(*(void *)(a1 + 2120) + 43) = *(unsigned char *)(v10 + 59) ^ 1;
        sub_1D0C4DE34(v250, *(void *)(a1 + 2120), *(void *)(a1 + 2128));
        uint64_t v221 = 0;
        uint64_t v222 = 2008;
        while (1)
        {
          uint64_t v223 = *(void *)(v167 + v222);
          if (v223)
          {
            if (*(_DWORD *)(v223 + 1024) == *(_DWORD *)(v10 + 640)) {
              break;
            }
          }
          ++v221;
          v222 += 16;
          if (v221 == 17) {
            goto LABEL_448;
          }
        }
        if ((v221 & 0x80000000) == 0) {
          *(unsigned char *)(v167 + v221 + 2280) = 1;
        }
LABEL_448:
        sub_1D0C4F424(v167, 1);
        if (*(unsigned char *)(v167 + 357))
        {
          std::mutex::lock((std::mutex *)(v167 + 2472));
          if (!*((unsigned char *)*v220 + 42))
          {
            sub_1D0C4F598((void *)(v167 + 2424), (long long *)(a1 + 2120));
            *((unsigned char *)*v220 + 42) = 1;
          }
          std::mutex::unlock((std::mutex *)(v167 + 2472));
        }
        if (*(void *)(v167 + 2544)
          || !*(unsigned char *)(*(void *)v171 + *(unsigned __int8 *)(*(void *)v171 + 1) + 226))
        {
          uint64_t v233 = 0;
          uint64_t v234 = v167 + 2008;
          while (!*(void *)v234 || *(_DWORD *)(*(void *)v234 + 1024) != *(_DWORD *)(v10 + 640))
          {
            ++v233;
            v234 += 16;
            if (v233 == 17) {
              goto LABEL_462;
            }
          }
          if ((v233 & 0x80000000) == 0) {
            *(unsigned char *)(v167 + v233 + 2280) = 0;
          }
LABEL_462:
          sub_1D0C4C9F8(v250);
        }
        if (!*(unsigned char *)(v167 + 2584))
        {
          unint64_t v235 = *(std::__shared_weak_count **)(v167 + 2568);
          *(_OWORD *)(v167 + 2560) = 0u;
          if (v235) {
            sub_1D0C4C984(v235);
          }
        }
        goto LABEL_275;
      }
      return result;
    }
    uint64_t v205 = *(void *)(v167 + 2544);
    if (v205) {
      int v206 = 3;
    }
    else {
      int v206 = 6;
    }
    uint64_t v207 = *(void *)v171;
    uint64_t v208 = *(void *)(v203 + 8);
    if (*(unsigned __int8 *)(*(void *)v171 + 2096) == *(unsigned __int8 *)(v208 + 2096)
      && *(unsigned __int8 *)(v207 + 2098) == *(unsigned __int8 *)(v208 + 2098)
      && *(unsigned __int8 *)(v207 + 201) == *(unsigned __int8 *)(v208 + 201)
      && *(unsigned __int8 *)(v207 + 1991) == *(unsigned __int8 *)(v208 + 1991))
    {
      if ((*(unsigned char *)(v207 + *(unsigned __int8 *)(v207 + 1) + 226) != 0) == (*(unsigned char *)(v208
                                                                                       + *(unsigned __int8 *)(v208 + 1)
                                                                                       + 226) != 0))
      {
        if (*(_DWORD *)(v207 + 204) == *(_DWORD *)(v208 + 204)
          && *(_DWORD *)(v207 + 208) == *(_DWORD *)(v208 + 208)
          && *(unsigned __int8 *)(v207 + 2113) == *(unsigned __int8 *)(v208 + 2113)
          && *(unsigned __int16 *)(v207 + 220) == *(unsigned __int16 *)(v208 + 220)
          && *(unsigned __int16 *)(v207 + 218) == *(unsigned __int16 *)(v208 + 218)
          && *(unsigned __int16 *)(v207 + 214) == *(unsigned __int16 *)(v208 + 214)
          && *(unsigned __int16 *)(v207 + 216) == *(unsigned __int16 *)(v208 + 216))
        {
          BOOL v236 = *(unsigned __int8 *)(v207 + 1992) == *(unsigned __int8 *)(v208 + 1992)
              && *(unsigned __int8 *)(v207 + 1994) == *(unsigned __int8 *)(v208 + 1994)
              && *(unsigned __int8 *)(v207 + 1993) == *(unsigned __int8 *)(v208 + 1993)
              && *(unsigned __int8 *)(v207 + 1995) == *(unsigned __int8 *)(v208 + 1995)
              && *(unsigned __int8 *)(v207 + 1996) == *(unsigned __int8 *)(v208 + 1996);
          if (v236 || v206 > dword_1EB671A40)
          {
            if (v236) {
              goto LABEL_414;
            }
            goto LABEL_384;
          }
          unsigned int v209 = (FILE *)*MEMORY[0x1E4F143C8];
          unint64_t v210 = "SPS change resulted in different colorspace\n";
          unint64_t v211 = "SPS change resulted in different colorspace\n";
          size_t v212 = 44;
        }
        else
        {
          if (v206 > dword_1EB671A40)
          {
LABEL_384:
            if (v205)
            {
              if (dword_1EB671A40 >= 3)
              {
                size_t v213 = (FILE *)*MEMORY[0x1E4F143C8];
                unint64_t v214 = "SPS has signficantly changed during tile decode\n";
                unint64_t v215 = "SPS has signficantly changed during tile decode\n";
                size_t v216 = 48;
LABEL_389:
                fwrite(v215, v216, 1uLL, v213);
                syslog(27, v214);
                return 4294954386;
              }
              return 4294954386;
            }
            sub_1D0C4F230(v167);
            for (uint64_t j = 0; j != 272; j += 16)
            {
              unsigned int v218 = *(std::__shared_weak_count **)(v167 + j + 2016);
              *(_OWORD *)(v167 + j + 2008) = 0u;
              if (v218) {
                sub_1D0C4C984(v218);
              }
            }
            sub_1D0C6183C((void *)(a1 + 2136));
            if (*v204) {
              (*(void (**)(void))(*(void *)*v204 + 8))(*v204);
            }
            *(void *)(v167 + 184) = 0;
            unint64_t v219 = *(std::__shared_weak_count **)(v167 + 2568);
            *(_OWORD *)(v167 + 2560) = 0u;
            if (v219)
            {
              sub_1D0C4C984(v219);
              uint64_t v203 = *v204;
              if (*v204) {
                goto LABEL_414;
              }
            }
            goto LABEL_412;
          }
          unsigned int v209 = (FILE *)*MEMORY[0x1E4F143C8];
          unint64_t v210 = "SPS change resulted in different buffer size\n";
          unint64_t v211 = "SPS change resulted in different buffer size\n";
          size_t v212 = 45;
        }
      }
      else
      {
        if (v206 > dword_1EB671A40) {
          goto LABEL_384;
        }
        unsigned int v209 = (FILE *)*MEMORY[0x1E4F143C8];
        unint64_t v210 = "SPS change resulted in different profile!\n";
        unint64_t v211 = "SPS change resulted in different profile!\n";
        size_t v212 = 42;
      }
    }
    else
    {
      if (v206 > dword_1EB671A40) {
        goto LABEL_384;
      }
      unsigned int v209 = (FILE *)*MEMORY[0x1E4F143C8];
      unint64_t v210 = "New SPS changed pixel format\n";
      unint64_t v211 = "New SPS changed pixel format\n";
      size_t v212 = 29;
    }
    fwrite(v211, v212, 1uLL, v209);
    syslog(v206 | 0x18, v210);
    uint64_t v205 = *(void *)(v167 + 2544);
    goto LABEL_384;
  }
  return result;
}

void sub_1D0C4C8AC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C4C8F0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 48);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = __clz(v1);
  if (v2 >= 0xC) {
    unsigned int v2 = 12;
  }
  unsigned int v3 = v1 << (v2 + 1) >> -(char)v2;
  if (!v2) {
    unsigned int v3 = 0;
  }
  unint64_t v4 = *(int *)(a1 + 52) + (unint64_t)((2 * v2) | 1);
  unint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (unsigned int *)(*(void *)(a1 + 32) + (v4 >> 3));
  int v7 = v4 & 7;
  *(_DWORD *)(a1 + 52) = v7;
  *(void *)(a1 + 32) = v6;
  if ((unint64_t)v6 >= v5)
  {
    if ((unint64_t)v6 > v5) {
      *(void *)(a1 + 32) = v5;
    }
  }
  else
  {
    unsigned int v1 = bswap32(*v6);
  }
  *(_DWORD *)(a1 + 48) = v1 << v7;
  return v3 + ~(-1 << v2);
}

void sub_1D0C4C984(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_1D0C4C9F8(uint64_t a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = (void *)(a1 + 32);
  uint64_t v3 = a1 + 304;
  do
  {
    if (*v2 && !*(unsigned char *)(v3 + v1) && *(unsigned char *)(*v2 + 43))
    {
      unint64_t v4 = (std::__shared_weak_count *)v2[1];
      *unsigned int v2 = 0;
      v2[1] = 0;
      if (v4) {
        sub_1D0C4C984(v4);
      }
    }
    ++v1;
    v2 += 2;
  }
  while (v1 != 17);
}

uint64_t sub_1D0C4CA68(uint64_t a1, int a2)
{
  if (a2 > 25)
  {
    int v4 = sub_1D0C51880(a1, a2 - 16);
    return sub_1D0C51880(a1, 16) + (v4 << 16);
  }
  else
  {
    return sub_1D0C51880(a1, a2);
  }
}

uint64_t sub_1D0C4CAD0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    uint64_t result = 0;
    *(void *)(a1 + 24) = a2;
    *(void *)(a1 + 32) = a2;
    *(void *)(a1 + 40) = (char *)a2 + a3;
    *(void *)(a1 + 48) = bswap32(*a2);
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("NULL buffer\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "NULL buffer\n");
    }
    return 4294954387;
  }
  return result;
}

uint64_t sub_1D0C4CB60(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *a1;
  unint64_t v7 = a1[1] - v5;
  if (v4 + 4 <= v7)
  {
    if (v4 + 4 < v7) {
      a1[1] = v5 + v4 + 4;
    }
  }
  else
  {
    sub_1D0C4CCE0(a1, v4 + 4 - v7);
    unint64_t v5 = *a1;
    uint64_t v4 = *(void *)(a2 + 24);
  }
  uint64_t v8 = off_1EB671A70(v5, *(void *)(a2 + 8), v4);
  uint64_t v9 = (unsigned int *)*a1;
  return sub_1D0C4CAD0((uint64_t)a1, v9, v8);
}

uint64_t sub_1D0C4CBE8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 0x12)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 2;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 2;
    do
    {
      int8x16_t v5 = *(int8x16_t *)(a2 + v4);
      *(int8x16_t *)(a1 + v3) = v5;
      int64x2_t v6 = (int64x2_t)vceqzq_s8(v5);
      if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0])
      {
        do
        {
          unint64_t v7 = v4;
          uint64_t v8 = v3++;
          ++v4;
        }
        while (*(unsigned char *)(a2 + v7));
        if (v7 + 2 < a3)
        {
          int v9 = *(unsigned __int8 *)(a2 + v4);
          if ((*(unsigned __int8 *)(a2 + v7 + 2) | (v9 << 8)) == 3)
          {
            *(unsigned char *)(a1 + v3) = v9;
            unint64_t v4 = v7 + 3;
            uint64_t v3 = v8 + 2;
          }
        }
      }
      else
      {
        v4 += 16;
        v3 += 16;
      }
    }
    while (v4 + 15 < a3);
  }
  while (v4 < a3)
  {
    int v10 = *(unsigned __int8 *)(a2 + v4);
    if (v4 + 2 < a3
      && ((v10 << 16) | (*(unsigned __int8 *)(a2 + v4 + 1) << 8) | *(unsigned __int8 *)(a2 + v4 + 2)) == 3)
    {
      *(unsigned char *)(a1 + v3++) = v10;
      LOBYTE(v10) = *(unsigned char *)(v4 + a2 + 1);
      v4 += 2;
    }
    *(unsigned char *)(a1 + v3++) = v10;
    ++v4;
  }
  return v3;
}

void sub_1D0C4CCE0(unint64_t *a1, size_t a2)
{
  int8x16_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_1D0C8D71C();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    int v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      int8x16_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_1D0C4CE18(uint64_t a1)
{
  (*(void (**)(void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), *(void *)(a1 + 24));
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    sub_1D0C4C984(v2);
  }
}

uint64_t sub_1D0C4CE88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2336);
  if (*(unsigned char *)(a1 + 56))
  {
    *(_DWORD *)(a1 + 648) = *(_DWORD *)(v2 + 648);
    *(unsigned char *)(a1 + 1385) = *(unsigned char *)(v2 + 1385);
    *(_DWORD *)(a1 + 57) = *(_DWORD *)(v2 + 57);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(v2 + 64);
    int v3 = *(unsigned __int8 *)(v2 + 68);
    *(unsigned char *)(a1 + 68) = v3;
    if (v3)
    {
      *(_DWORD *)(a1 + 320) = *(_DWORD *)(v2 + 320);
    }
    else
    {
      long long v4 = *(_OWORD *)(v2 + 72);
      long long v5 = *(_OWORD *)(v2 + 88);
      long long v6 = *(_OWORD *)(v2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(v2 + 120);
      *(_OWORD *)(a1 + 104) = v6;
      *(_OWORD *)(a1 + 88) = v5;
      *(_OWORD *)(a1 + 72) = v4;
      long long v7 = *(_OWORD *)(v2 + 136);
      long long v8 = *(_OWORD *)(v2 + 152);
      long long v9 = *(_OWORD *)(v2 + 168);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(v2 + 184);
      *(_OWORD *)(a1 + 168) = v9;
      *(_OWORD *)(a1 + 152) = v8;
      *(_OWORD *)(a1 + 136) = v7;
      long long v10 = *(_OWORD *)(v2 + 200);
      long long v11 = *(_OWORD *)(v2 + 216);
      long long v12 = *(_OWORD *)(v2 + 232);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(v2 + 248);
      *(_OWORD *)(a1 + 232) = v12;
      *(_OWORD *)(a1 + 216) = v11;
      *(_OWORD *)(a1 + 200) = v10;
      long long v13 = *(_OWORD *)(v2 + 264);
      long long v14 = *(_OWORD *)(v2 + 280);
      long long v15 = *(_OWORD *)(v2 + 296);
      *(void *)(a1 + 310) = *(void *)(v2 + 310);
      *(_OWORD *)(a1 + 280) = v14;
      *(_OWORD *)(a1 + 296) = v15;
      *(_OWORD *)(a1 + 264) = v13;
    }
    if (*(unsigned char *)(*(void *)(a1 + 16) + 320))
    {
      long long v16 = *(_OWORD *)(v2 + 324);
      long long v17 = *(_OWORD *)(v2 + 340);
      long long v18 = *(_OWORD *)(v2 + 372);
      *(_OWORD *)(a1 + 356) = *(_OWORD *)(v2 + 356);
      *(_OWORD *)(a1 + 372) = v18;
      *(_OWORD *)(a1 + 324) = v16;
      *(_OWORD *)(a1 + 340) = v17;
      long long v19 = *(_OWORD *)(v2 + 388);
      long long v20 = *(_OWORD *)(v2 + 404);
      long long v21 = *(_OWORD *)(v2 + 436);
      *(_OWORD *)(a1 + 420) = *(_OWORD *)(v2 + 420);
      *(_OWORD *)(a1 + 436) = v21;
      *(_OWORD *)(a1 + 388) = v19;
      *(_OWORD *)(a1 + 404) = v20;
      long long v22 = *(_OWORD *)(v2 + 452);
      long long v23 = *(_OWORD *)(v2 + 468);
      long long v24 = *(_OWORD *)(v2 + 484);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(v2 + 496);
      *(_OWORD *)(a1 + 468) = v23;
      *(_OWORD *)(a1 + 484) = v24;
      *(_OWORD *)(a1 + 452) = v22;
    }
    else
    {
      *(void *)(a1 + 324) = 0;
      *(_DWORD *)(a1 + 508) = 0;
    }
    *(_WORD *)(a1 + 513) = *(_WORD *)(v2 + 513);
    *(unsigned char *)(a1 + 512) = *(unsigned char *)(v2 + 512);
    *(_WORD *)(a1 + 516) = *(_WORD *)(v2 + 516);
    *(unsigned char *)(a1 + 515) = *(unsigned char *)(v2 + 515);
    *(_WORD *)(a1 + 518) = *(_WORD *)(v2 + 518);
    long long v25 = *(_OWORD *)(v2 + 536);
    *(_OWORD *)(a1 + 520) = *(_OWORD *)(v2 + 520);
    *(_OWORD *)(a1 + 536) = v25;
    *(_DWORD *)(a1 + 552) = *(_DWORD *)(v2 + 552);
    *(_WORD *)(a1 + 556) = *(_WORD *)(v2 + 556);
    *(unsigned char *)(a1 + 662) = *(unsigned char *)(v2 + 662);
    *(void *)(a1 + 664) = *(void *)(v2 + 664);
    memcpy((void *)(a1 + 672), (const void *)(v2 + 672), 0x200uLL);
    *(void *)(a1 + 558) = *(void *)(v2 + 558);
    *(_WORD *)(a1 + 566) = *(_WORD *)(v2 + 566);
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    *(void *)(a1 + 640) = *(void *)(v2 + 640);
    *(_DWORD *)(a1 + 2256) = *(_DWORD *)(v2 + 2256);
    long long v26 = *(_OWORD *)(v2 + 2224);
    *(_OWORD *)(a1 + 2240) = *(_OWORD *)(v2 + 2240);
    *(_OWORD *)(a1 + 2224) = v26;
  }
  *(unsigned char *)(a1 + 652) = 5 - *(unsigned char *)(a1 + 558);
  *(unsigned char *)(a1 + 660) = 2 * *(unsigned char *)(a1 + 565);
  *(unsigned char *)(a1 + 661) = 2 * *(unsigned char *)(a1 + 566);
  sub_1D0C4DD58(a1);
  int v27 = *(_DWORD *)(a1 + 52);
  uint64_t v28 = *(void *)(a1 + 16);
  int v29 = *(_DWORD *)(v28 + 2120);
  int v30 = *(_DWORD *)(v28 + 2124);
  if (v27 < 0 || v27 >= v30 * v29)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "slice_segment_address_ of %lld is out of range (%lld, %lld)\n", v27, 0, v30 * (uint64_t)v29 - 1);
      syslog(27, "slice_segment_address_ of %lld is out of range (%lld, %lld)\n");
    }
    return 4294954387;
  }
  if (*(unsigned char *)(a1 + 56)) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(v28 + 202))
  {
    unint64_t v33 = *(unsigned __int8 *)(a1 + 60);
    if (v33 >= 3)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      uint64_t v41 = 2;
      unsigned __int8 v36 = "colour_plane_id_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "colour_plane_id_ of %lld is out of range (%lld, %lld)\n", v33, 0, 2);
      uint64_t v37 = *(unsigned __int8 *)(a1 + 60);
LABEL_82:
      uint64_t v61 = v41;
      goto LABEL_83;
    }
  }
  if (!*(unsigned char *)(a1 + 632))
  {
    int v42 = *(_DWORD *)(a1 + 64);
    int v43 = *(_DWORD *)(v28 + 2108);
    if (v42 < 0 || v42 >= v43)
    {
      if (dword_1EB671A40 >= 3)
      {
        unsigned __int8 v36 = "slice_pic_order_cnt_lsb_ of %lld is out of range (%lld, %lld)\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "slice_pic_order_cnt_lsb_ of %lld is out of range (%lld, %lld)\n", v42, 0, v43 - 1);
        uint64_t v37 = *(int *)(a1 + 64);
        uint64_t v38 = *(int *)(*(void *)(a1 + 16) + 2108);
        goto LABEL_62;
      }
      return 4294954387;
    }
    if (*(unsigned char *)(a1 + 68))
    {
      uint64_t v44 = *(int *)(a1 + 320);
      uint64_t v45 = *(unsigned int *)(v28 + 288);
      if ((v44 & 0x80000000) != 0 || v44 > (v45 - 1))
      {
        if (dword_1EB671A40 >= 3)
        {
          unsigned __int8 v36 = "short_term_ref_pic_set_idx_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "short_term_ref_pic_set_idx_ of %lld is out of range (%lld, %lld)\n", v44, 0, v45 - 1);
          uint64_t v37 = *(int *)(a1 + 320);
          uint64_t v38 = *(unsigned int *)(*(void *)(a1 + 16) + 288);
          goto LABEL_62;
        }
        return 4294954387;
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 58) <= 1u)
  {
    if (*(unsigned char *)(a1 + 514))
    {
      uint64_t v34 = *(unsigned __int8 *)(a1 + 555);
      if (*(unsigned char *)(a1 + 554))
      {
        uint64_t v35 = *(char *)(a1 + 516);
        if (v35 <= v34)
        {
          if (dword_1EB671A40 >= 3)
          {
            unsigned __int8 v36 = "collocated_ref_idx_ of %lld is out of range (%lld, %lld)\n";
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "collocated_ref_idx_ of %lld is out of range (%lld, %lld)\n", v34, 0, v35 - 1);
            uint64_t v37 = *(unsigned __int8 *)(a1 + 555);
            uint64_t v38 = *(char *)(a1 + 516);
LABEL_62:
            uint64_t v61 = v38 - 1;
LABEL_83:
            uint64_t v60 = 0;
            goto LABEL_84;
          }
          return 4294954387;
        }
      }
      else
      {
        uint64_t v46 = *(char *)(a1 + 517);
        if (v46 <= v34)
        {
          if (dword_1EB671A40 < 3) {
            return 4294954387;
          }
          unsigned __int8 v36 = "collocated_ref_idx_ of %lld is out of range (%lld, %lld)\n";
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "collocated_ref_idx_ of %lld is out of range (%lld, %lld)\n", v34, 0, v46 - 1);
          uint64_t v37 = *(unsigned __int8 *)(a1 + 555);
          uint64_t v38 = *(char *)(a1 + 517);
          goto LABEL_62;
        }
      }
    }
    unint64_t v47 = *(unsigned __int8 *)(a1 + 558);
    if (v47 >= 5)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      uint64_t v41 = 4;
      unsigned __int8 v36 = "five_minus_max_num_merge_cand_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "five_minus_max_num_merge_cand_ of %lld is out of range (%lld, %lld)\n", v47, 0, 4);
      uint64_t v37 = *(unsigned __int8 *)(a1 + 558);
      goto LABEL_82;
    }
  }
  uint64_t v48 = *(char **)(a1 + 32);
  uint64_t v49 = v48[9] + (uint64_t)*(char *)(a1 + 559) + 26;
  uint64_t v50 = -(uint64_t)*(unsigned __int8 *)(v28 + 2097);
  if (v49 > 51 || v49 < v50)
  {
    if (dword_1EB671A40 >= 3)
    {
      unsigned __int8 v36 = "26+pps_->init_qp_minus26_+slice_qp_delta_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "26+pps_->init_qp_minus26_+slice_qp_delta_ of %lld is out of range (%lld, %lld)\n", v49, v50, 51);
      uint64_t v37 = *(char *)(*(void *)(a1 + 32) + 9) + (uint64_t)*(char *)(a1 + 559) + 26;
      uint64_t v60 = -(uint64_t)*(unsigned __int8 *)(*(void *)(a1 + 16) + 2097);
      uint64_t v61 = 51;
LABEL_84:
      syslog(27, v36, v37, v60, v61);
      return 4294954387;
    }
    return 4294954387;
  }
  if (!v48[16]) {
    goto LABEL_75;
  }
  uint64_t v52 = *(char *)(a1 + 560) + (uint64_t)v48[14];
  if ((unint64_t)(v52 + 12) >= 0x19)
  {
    if (dword_1EB671A40 < 3) {
      return 4294954387;
    }
    uint64_t v56 = 12;
    uint64_t v57 = -12;
    unsigned __int8 v36 = "pps_->pps_cb_qp_offset_+slice_cb_qp_offset_ of %lld is out of range (%lld, %lld)\n";
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "pps_->pps_cb_qp_offset_+slice_cb_qp_offset_ of %lld is out of range (%lld, %lld)\n", v52, -12, 12);
    uint64_t v58 = *(char *)(*(void *)(a1 + 32) + 14);
    uint64_t v59 = *(char *)(a1 + 560);
    goto LABEL_95;
  }
  uint64_t v53 = *(char *)(a1 + 561) + (uint64_t)v48[15];
  if ((unint64_t)(v53 + 12) >= 0x19)
  {
    if (dword_1EB671A40 < 3) {
      return 4294954387;
    }
    uint64_t v56 = 12;
    uint64_t v57 = -12;
    unsigned __int8 v36 = "pps_->pps_cr_qp_offset_+slice_cr_qp_offset_ of %lld is out of range (%lld, %lld)\n";
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "pps_->pps_cr_qp_offset_+slice_cr_qp_offset_ of %lld is out of range (%lld, %lld)\n", v53, -12, 12);
    uint64_t v58 = *(char *)(*(void *)(a1 + 32) + 15);
    uint64_t v59 = *(char *)(a1 + 561);
LABEL_95:
    uint64_t v37 = v59 + v58;
    goto LABEL_96;
  }
LABEL_75:
  if (v48[29])
  {
    uint64_t v54 = *(char *)(a1 + 565);
    if ((v54 + 6) >= 0xDu)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      uint64_t v56 = 6;
      uint64_t v57 = -6;
      unsigned __int8 v36 = "slice_beta_offset_div2_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "slice_beta_offset_div2_ of %lld is out of range (%lld, %lld)\n", v54, -6, 6);
      uint64_t v37 = *(char *)(a1 + 565);
      goto LABEL_96;
    }
    uint64_t v55 = *(char *)(a1 + 566);
    if ((v55 + 6) >= 0xDu)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954387;
      }
      uint64_t v56 = 6;
      uint64_t v57 = -6;
      unsigned __int8 v36 = "slice_tc_offset_div2_ of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "slice_tc_offset_div2_ of %lld is out of range (%lld, %lld)\n", v55, -6, 6);
      uint64_t v37 = *(char *)(a1 + 566);
LABEL_96:
      uint64_t v60 = v57;
      uint64_t v61 = v56;
      goto LABEL_84;
    }
  }
LABEL_14:
  uint64_t v31 = *(void *)(a1 + 2280);
  if (v31)
  {
    if (*(unsigned char *)(a1 + 635) && *(unsigned char *)(v31 + 2049)) {
      *(unsigned char *)(a1 + 59) = 0;
    }
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t result = sub_1D0C4EC9C(v31 + 8, a1);
      if (result) {
        return result;
      }
      uint64_t result = sub_1D0C4D700((void (**)(__int32 *, uint64_t, int32x4_t *, int, int))(*(void *)(a1 + 2280) + 552), a1);
      if (result) {
        return result;
      }
      uint64_t result = sub_1D0C50C50((void *)(*(void *)(a1 + 2280) + 952), *(unsigned __int8 *)(*(void *)(a1 + 16) + 2096), *(unsigned __int8 *)(*(void *)(a1 + 16) + 2098), 1);
      if (result) {
        return result;
      }
      uint64_t result = sub_1D0C4DABC(*(void *)(a1 + 2280) + 1128, a1);
      if (result) {
        return result;
      }
      uint64_t result = sub_1D0C4E62C(*(void *)(a1 + 2280) + 1264, a1);
      if (result) {
        return result;
      }
      uint64_t v31 = *(void *)(a1 + 2280);
      *(_WORD *)(v31 + 2050) = 0;
    }
    else if (*(unsigned __int8 *)(v2 + 565) != *(unsigned __int8 *)(a1 + 565) {
           || *(unsigned __int8 *)(v2 + 566) != *(unsigned __int8 *)(a1 + 566))
    }
    {
      *(void *)(v31 + 1176) = *(void *)(v31 + 1184);
    }
    if (*(unsigned char *)(a1 + 512) || *(unsigned char *)(a1 + 513)) {
      *(unsigned char *)(v31 + 2050) = 1;
    }
    if (!*(unsigned char *)(a1 + 564)) {
      *(unsigned char *)(v31 + 2051) = 1;
    }
  }
  uint64_t v39 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v39 + 17) && *(unsigned char *)(a1 + 58) == 1)
  {
    BOOL v40 = 1;
  }
  else if (*(unsigned char *)(v39 + 18))
  {
    BOOL v40 = *(unsigned char *)(a1 + 58) == 0;
  }
  else
  {
    BOOL v40 = 0;
  }
  uint64_t result = 0;
  *(void *)(a1 + 2288) = *(&off_1F26F1D48[4 * *(unsigned __int8 *)(*(void *)(a1 + 16) + 2148)] + 2 * v40);
  *(void *)(a1 + 2296) = 0;
  return result;
}

uint64_t sub_1D0C4D700(void (**a1)(__int32 *a1, uint64_t a2, int32x4_t *a3, int a4, int a5), uint64_t a2)
{
  long long v4 = *(unsigned __int8 **)(a2 + 16);
  unsigned int v5 = v4[2096];
  if (v5 == 8)
  {
    unsigned int v6 = v4[2098];
    if (v6 == 8)
    {
      uint64_t result = 0;
      a1[24] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9CBE4;
      a1[25] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9CBB8;
      a1[30] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9B818;
      a1[46] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9B7A8;
      a1[47] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9B73C;
      a1[48] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9C990;
      a1[39] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D67900;
      a1[40] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D67890;
      a1[41] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D67840;
      a1[42] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D677F8;
      a1[8] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D675F4;
      a1[9] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D67434;
      a1[10] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D671E8;
      a1[11] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D66E4C;
      a1[12] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65FF4;
      a1[1] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C57D84;
      *a1 = sub_1D0D65EF8;
      a1[2] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C5A0E8;
      a1[4] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C5BF08;
      a1[6] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C5FA94;
      a1[20] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65EE4;
      a1[22] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65ED0;
      a1[23] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65EAC;
      a1[31] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65E50;
      a1[32] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65D1C;
      a1[33] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65C18;
      a1[34] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65B24;
      a1[28] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9CBE4;
      a1[29] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9CBB8;
      a1[38] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9CDC4;
      a1[49] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C9C990;
      a1[43] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D70A88;
      a1[44] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D70A3C;
      a1[45] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D70A00;
      a1[13] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D70928;
      a1[14] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D708B8;
      a1[15] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D70848;
      a1[16] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C586BC;
      a1[17] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C5BA0C;
      a1[18] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C5FCE0;
      a1[19] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D70264;
      a1[21] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65EE4;
      a1[26] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65ED0;
      a1[27] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D65EAC;
      a1[35] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0C5882C;
      a1[36] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D7013C;
      a1[37] = (void (*)(__int32 *, uint64_t, int32x4_t *, int, int))sub_1D0D70014;
      return result;
    }
  }
  else
  {
    if (v5 > 0xC) {
      goto LABEL_8;
    }
    unsigned int v6 = v4[2098];
  }
  if (v6 <= 0xC)
  {
    ((void (*)(void (**)(__int32 *, uint64_t, int32x4_t *, int, int)))off_1F26F1DE8[4 * v4[222]])(a1);
    ((void (*)(void (**)(__int32 *, uint64_t, int32x4_t *, int, int)))off_1F26F1DE8[4 * *(unsigned __int8 *)(*(void *)(a2 + 16) + 223) + 2])(a1);
    return 0;
  }
LABEL_8:
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Luma/Chroma bitdepth %d/%d not supported\n", v5, v4[2098]);
    syslog(27, "Luma/Chroma bitdepth %d/%d not supported\n", *(unsigned __int8 *)(*(void *)(a2 + 16) + 2096), *(unsigned __int8 *)(*(void *)(a2 + 16) + 2098));
  }
  return 4294954386;
}

uint64_t sub_1D0C4DABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  uint64_t v3 = v2[201];
  *(unsigned char *)(a1 + 128) = v3;
  unsigned int v4 = v2[2096];
  if (v4 <= 0xC && (unsigned int v5 = v2[2098], v5 < 0xD))
  {
    BOOL v10 = v4 > 8 || v5 > 8;
    (*(&off_1F26F1C28[4 * v3] + 2 * v10))();
    if (v10)
    {
      ((void (*)(uint64_t))off_1F26F1CA8[4 * *(unsigned __int8 *)(*(void *)(a2 + 16) + 222)])(a1);
      ((void (*)(uint64_t))off_1F26F1CA8[4 * *(unsigned __int8 *)(*(void *)(a2 + 16) + 223) + 2])(a1);
    }
    else
    {
      *(void *)(a1 + 80) = sub_1D0C5D6E8;
      *(void *)(a1 + 72) = sub_1D0C5D208;
      unsigned int v11 = *(unsigned __int8 *)(a1 + 128);
      long long v12 = sub_1D0D5ED70;
      if (v11 >= 2) {
        long long v13 = sub_1D0D5EC2C;
      }
      else {
        long long v13 = sub_1D0C5DB18;
      }
      long long v14 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1D0C5DCD8;
      if (v11 == 2) {
        long long v14 = sub_1D0D5E730;
      }
      if (v11 < 3) {
        long long v12 = sub_1D0C5DC50;
      }
      *(void *)(a1 + 88) = v13;
      *(void *)(a1 + 96) = v12;
      if (v11 == 3) {
        long long v15 = sub_1D0D5E200;
      }
      else {
        long long v15 = v14;
      }
      *(void *)(a1 + 48) = v15;
      *(void *)(a1 + 104) = sub_1D0D5DA18;
      *(void *)(a1 + 112) = sub_1D0D5D288;
    }
    uint64_t result = 0;
    *(void *)(a1 + 120) = 0;
  }
  else
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Unsupported bit depth\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Unsupported bit depth\n");
    }
    return 4294954386;
  }
  return result;
}

void *sub_1D0C4DC94(void *result, uint64_t a2)
{
  uint64_t v2 = sub_1D0CD46CC;
  uint64_t v3 = sub_1D0CD52B8;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    uint64_t v2 = sub_1D0CD46CC;
    uint64_t v3 = sub_1D0CD52B8;
    if (!*(unsigned char *)(*(void *)(a2 + 16) + 283))
    {
      uint64_t v2 = sub_1D0CD4E1C;
      uint64_t v3 = sub_1D0C5CD38;
    }
  }
  *uint64_t result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1D0CD43B4;
  result[5] = 0;
  result[8] = sub_1D0CCB318;
  result[6] = sub_1D0CD2374;
  result[7] = sub_1D0CD2374;
  return result;
}

uint64_t sub_1D0C4DD58(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  int v2 = *(unsigned __int8 *)(v1 + 2097);
  uint64_t v3 = *(char **)(result + 32);
  int v4 = v3[9] + *(char *)(result + 559) + 26;
  if (v4 >= 51) {
    int v5 = 51;
  }
  else {
    int v5 = v3[9] + *(char *)(result + 559) + 26;
  }
  if (v4 <= -v2) {
    int v6 = -v2;
  }
  else {
    int v6 = v5;
  }
  *(unsigned char *)(result + 653) = v6;
  int v7 = *(char *)(result + 560);
  int v8 = v6 + v3[14] + v7;
  int v9 = *(unsigned __int8 *)(v1 + 2099);
  if (v8 >= 57) {
    int v10 = 57;
  }
  else {
    int v10 = v6 + v3[14] + v7;
  }
  if (v8 <= -v9) {
    int v11 = -v9;
  }
  else {
    int v11 = v10;
  }
  if (v11 >= 30) {
    LOBYTE(v11) = byte_1D0DAE600[v11 - 30];
  }
  *(unsigned char *)(result + 654) = v11;
  char v12 = *(unsigned char *)(result + 561);
  int v13 = v6 + v3[15] + v12;
  int v14 = *(unsigned __int8 *)(v1 + 2099);
  if (v13 >= 57) {
    int v15 = 57;
  }
  else {
    int v15 = v13;
  }
  if (v13 <= -v14) {
    int v16 = -v14;
  }
  else {
    int v16 = v15;
  }
  if (v16 >= 30) {
    LOBYTE(v16) = byte_1D0DAE600[v16 - 30];
  }
  *(unsigned char *)(result + 655) = v16;
  *(unsigned char *)(result + 656) = 0;
  *(unsigned char *)(result + 657) = v3[14] + v7;
  *(unsigned char *)(result + 658) = v3[15] + v12;
  return result;
}

std::__shared_weak_count *sub_1D0C4DE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  for (uint64_t i = (void *)(a1 + 32); *i; i += 2)
  {
    if (++v3 == 17)
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("DPB overflow!\n", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "DPB overflow!\n");
      }
      return (std::__shared_weak_count *)4294954387;
    }
  }
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  void *i = a2;
  uint64_t v6 = a1 + 16 * v3;
  uint64_t result = *(std::__shared_weak_count **)(v6 + 40);
  *(void *)(v6 + 40) = a3;
  if (result)
  {
    sub_1D0C4C984(result);
    return 0;
  }
  return result;
}

uint64_t sub_1D0C4DEE4(uint64_t a1, int a2, CVPixelBufferRef pixelBuffer, int64_t a4)
{
  uint64_t v87 = 0;
  uint64_t v7 = *(void *)(a1 + 48);
  int v8 = *(unsigned __int8 *)(a1 + 25);
  if (pixelBuffer)
  {
    BOOL v10 = v8 != 0;
    int Width = CVPixelBufferGetWidth(pixelBuffer);
    int Height = CVPixelBufferGetHeight(pixelBuffer);
    uint64_t result = sub_1D0C4FCA8(v7, a1, 0, v10, &v87, pixelBuffer, a4, Width - (int)a4, Height - HIDWORD(a4));
  }
  else
  {
    uint64_t result = sub_1D0C4FCA8(v7, a1, 0, v8 != 0, &v87, 0, a4, 0, 0);
  }
  if (result) {
    return result;
  }
  uint64_t v14 = v87;
  *(_DWORD *)(v87 + 1024) = a2;
  *(unsigned char *)(v14 + 1173) = *(unsigned char *)(a1 + 64);
  int v15 = *(unsigned __int8 *)(a1 + 24);
  char v16 = *(_DWORD *)(v14 + 1028);
  int v17 = ~(-1 << v16);
  unsigned int v18 = (*(_DWORD *)(v14 + 520) + v17) >> v16;
  *(_DWORD *)(v14 + 992) = v18;
  unsigned int v19 = (*(_DWORD *)(v14 + 524) + v17) >> v16;
  *(_DWORD *)(v14 + 996) = v19;
  uint64_t v20 = ((v18 << v16) + 7) >> 3;
  *(void *)(v14 + 752) = v20;
  uint64_t v21 = ((v19 << v16) + 7) >> 3;
  *(void *)(v14 + 760) = v21;
  uint64_t v22 = (v20 + 7) & 0x3FFFFFF8;
  *(void *)(v14 + 768) = v22;
  uint64_t v23 = v21 + 3;
  if (v15)
  {
    *(void *)(v14 + 800) = 0;
    sub_1D0C8F4F4((char **)(v14 + 808), ((v21 + 7) & 0x3FFFFFF8 | 2u) * (unint64_t)v22);
    *(void *)(v14 + 800) = *(void *)(v14 + 808) + 2 * *(void *)(v14 + 768);
    goto LABEL_24;
  }
  unint64_t v24 = v23 * (unint64_t)v22 + 8;
  uint64_t v25 = *(void *)(v14 + 784);
  uint64_t v26 = *(void *)(v14 + 776);
  unint64_t v27 = (v25 - v26) >> 1;
  if (v24 <= v27)
  {
    if (v24 >= v27) {
      goto LABEL_24;
    }
    uint64_t v39 = v26 + 2 * v24;
    goto LABEL_23;
  }
  unint64_t v28 = v24 - v27;
  uint64_t v29 = *(void *)(v14 + 792);
  if (v24 - v27 <= (v29 - v25) >> 1)
  {
    bzero(*(void **)(v14 + 784), 2 * v28);
    uint64_t v39 = v25 + 2 * v28;
LABEL_23:
    *(void *)(v14 + 784) = v39;
    goto LABEL_24;
  }
  unint64_t v30 = v29 - v26;
  if (v30 > v24) {
    unint64_t v24 = v30;
  }
  if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v31 = v24;
  }
  if (v31 < 0) {
    goto LABEL_79;
  }
  uint64_t v32 = (char *)operator new(2 * v31);
  unint64_t v33 = &v32[2 * v27];
  uint64_t v34 = &v32[2 * v31];
  bzero(v33, 2 * v28);
  uint64_t v35 = &v33[2 * v28];
  unsigned __int8 v36 = *(char **)(v14 + 784);
  uint64_t v37 = *(char **)(v14 + 776);
  if (v36 != v37)
  {
    do
    {
      __int16 v38 = *((_WORD *)v36 - 1);
      v36 -= 2;
      *((_WORD *)v33 - 1) = v38;
      v33 -= 2;
    }
    while (v36 != v37);
    unsigned __int8 v36 = *(char **)(v14 + 776);
  }
  *(void *)(v14 + 776) = v33;
  *(void *)(v14 + 784) = v35;
  *(void *)(v14 + 792) = v34;
  if (v36) {
    operator delete(v36);
  }
LABEL_24:
  uint64_t v40 = 2 * *(void *)(v14 + 752);
  *(void *)(v14 + 832) = v40;
  uint64_t v41 = 2 * *(void *)(v14 + 760);
  *(void *)(v14 + 840) = v41;
  uint64_t v42 = v40 + 7;
  *(void *)(v14 + 848) = v42;
  unint64_t v43 = v41 + 7;
  if (v15)
  {
    sub_1D0C8F60C((char **)(v14 + 880), v43 * v42);
    unint64_t v44 = *(void *)(v14 + 848) * v43;
    uint64_t v45 = *(void *)(v14 + 912);
    uint64_t v46 = *(void *)(v14 + 904);
    unint64_t v47 = (v45 - v46) >> 2;
    if (v44 <= v47)
    {
      if (v44 >= v47)
      {
LABEL_47:
        *(unsigned char *)(v14 + 712) = 0;
        goto LABEL_48;
      }
      uint64_t v61 = v46 + 4 * v44;
    }
    else
    {
      unint64_t v48 = v44 - v47;
      uint64_t v49 = *(void *)(v14 + 920);
      if (v44 - v47 > (v49 - v45) >> 2)
      {
        if (v44 >> 62) {
          sub_1D0C8D71C();
        }
        uint64_t v50 = v49 - v46;
        if (v50 >> 1 > v44) {
          unint64_t v44 = v50 >> 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v44;
        }
        if (v51 >> 62) {
          goto LABEL_79;
        }
        uint64_t v52 = (char *)operator new(4 * v51);
        uint64_t v53 = &v52[4 * v47];
        uint64_t v54 = &v52[4 * v51];
        bzero(v53, 4 * v48);
        uint64_t v55 = &v53[4 * v48];
        uint64_t v56 = *(char **)(v14 + 912);
        uint64_t v57 = *(char **)(v14 + 904);
        if (v56 != v57)
        {
          do
          {
            int v58 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v53 - 1) = v58;
            v53 -= 4;
          }
          while (v56 != v57);
          uint64_t v56 = *(char **)(v14 + 904);
        }
        *(void *)(v14 + 904) = v53;
        *(void *)(v14 + 912) = v55;
        *(void *)(v14 + 920) = v54;
        if (v56) {
          operator delete(v56);
        }
        goto LABEL_47;
      }
      bzero(*(void **)(v14 + 912), 4 * v48);
      uint64_t v61 = v45 + 4 * v48;
    }
    *(void *)(v14 + 912) = v61;
    goto LABEL_47;
  }
  uint64_t v59 = *(void *)(v14 + 688);
  unint64_t v60 = *(void *)(v14 + 696) - v59;
  if (v43 <= v60)
  {
    if (v43 < v60) {
      *(void *)(v14 + 696) = v59 + v43;
    }
  }
  else
  {
    sub_1D0C4CCE0((unint64_t *)(v14 + 688), v43 - v60);
  }
LABEL_48:
  int64x2_t v62 = *(int64x2_t *)(v14 + 752);
  int64x2_t v63 = vaddq_s64(vaddq_s64(v62, v62), vdupq_n_s64(0x10uLL));
  *(int64x2_t *)(v14 + 928) = v63;
  unint64_t v64 = v63.i64[0] * v23 + 31;
  uint64_t v65 = *(void *)(v14 + 944);
  unint64_t v66 = *(void *)(v14 + 952) - v65;
  if (v64 <= v66)
  {
    uint64_t v68 = v63.i64[1];
    uint64_t v67 = v62.i64[0];
    if (v64 < v66) {
      *(void *)(v14 + 952) = v65 + v64;
    }
  }
  else
  {
    sub_1D0C4CCE0((unint64_t *)(v14 + 944), v64 - v66);
    uint64_t v67 = *(void *)(v14 + 752);
    uint64_t v68 = *(void *)(v14 + 936);
  }
  unint64_t v69 = (v67 + 8) * v68 + 31;
  uint64_t v70 = *(void *)(v14 + 968);
  unint64_t v71 = *(void *)(v14 + 976) - v70;
  if (v69 <= v71)
  {
    if (v69 < v71) {
      *(void *)(v14 + 976) = v70 + v69;
    }
  }
  else
  {
    sub_1D0C4CCE0((unint64_t *)(v14 + 968), v69 - v71);
  }
  unint64_t v72 = (*(_DWORD *)(v14 + 996) * *(_DWORD *)(v14 + 992));
  uint64_t v73 = *(char **)(v14 + 1008);
  int v74 = *(unsigned char **)(v14 + 1000);
  unint64_t v75 = (v73 - v74) >> 4;
  if (v72 > v75)
  {
    unint64_t v76 = v72 - v75;
    uint64_t v77 = *(void *)(v14 + 1016);
    if (v72 - v75 > (v77 - (uint64_t)v73) >> 4)
    {
      uint64_t v78 = v77 - (void)v74;
      if (v78 >> 3 > v72) {
        unint64_t v72 = v78 >> 3;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v72;
      }
      if (!(v79 >> 60))
      {
        BOOL v80 = (char *)operator new(16 * v79);
        int v81 = &v80[16 * v75];
        int32x2_t v82 = &v80[16 * v79];
        bzero(v81, 16 * v76);
        unsigned __int8 v83 = &v81[16 * v76];
        if (v73 != v74)
        {
          do
          {
            *((_OWORD *)v81 - 1) = *((_OWORD *)v73 - 1);
            v81 -= 16;
            v73 -= 16;
          }
          while (v73 != v74);
          uint64_t v73 = *(char **)(v14 + 1000);
        }
        *(void *)(v14 + 1000) = v81;
        *(void *)(v14 + 1008) = v83;
        *(void *)(v14 + 1016) = v82;
        if (v73) {
          operator delete(v73);
        }
        goto LABEL_73;
      }
LABEL_79:
      sub_1D0C6AC2C();
    }
    bzero(*(void **)(v14 + 1008), 16 * v76);
    unsigned __int8 v84 = &v73[16 * v76];
    goto LABEL_72;
  }
  if (v72 < v75)
  {
    unsigned __int8 v84 = &v74[16 * v72];
LABEL_72:
    *(void *)(v14 + 1008) = v84;
  }
LABEL_73:
  sub_1D0C4E594(v14, v15 != 0);
  if (!v15 || (uint64_t result = sub_1D0D078F4(v14 + 48, 1 << *(_DWORD *)(v14 + 1028)), !result))
  {
    atomic_store(0x80000000, (unsigned int *)(v14 + 1032));
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 1104));
    uint64_t v85 = *(void *)(a1 + 56);
    if (v85) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1D0C4E4C8(&v86, v14);
  }
  return result;
}

void sub_1D0C4E4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1D0C4C984(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0C4E4C8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D0C4E548(void *a1)
{
  __cxa_begin_catch(a1);
  (*(void (**)(void, uint64_t))(*(void *)*v2 + 24))(*v2, v1);
  __cxa_rethrow();
}

void sub_1D0C4E580(_Unwind_Exception *a1)
{
}

void sub_1D0C4E594(uint64_t a1, int a2)
{
  bzero(*(void **)(a1 + 944), *(void *)(a1 + 928) * *(void *)(a1 + 760));
  bzero(*(void **)(a1 + 968), *(void *)(a1 + 936) * *(void *)(a1 + 752));
  if (a2)
  {
    bzero(*(void **)(a1 + 800), 2 * *(void *)(a1 + 760) * *(void *)(a1 + 768));
    int v4 = *(void **)(a1 + 880);
    size_t v5 = 16 * *(void *)(a1 + 840) * *(void *)(a1 + 848);
    bzero(v4, v5);
  }
}

uint64_t sub_1D0C4E62C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  int v4 = *(unsigned __int8 *)(v3 + 2117);
  *(_DWORD *)(a1 + 8) = *(unsigned __int8 *)(v3 + 2113);
  *(_DWORD *)(a1 + 12) = v4;
  *(void *)(a1 + 16) = *(void *)(v3 + 2120);
  *(void *)a1 = 0;
  uint64_t v5 = sub_1D0C4E7C4(a1, a2);
  if (!v5) {
    sub_1D0C4E680(a1);
  }
  return v5;
}

void sub_1D0C4E680(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16) << *(_DWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  char v3 = *(unsigned char *)(a1 + 28);
  unint64_t v4 = ((v2 << v3) + 31) & 0xFFFFFFFFFFFFFFE0;
  if (*(unsigned char *)(a1 + 29) == 3) {
    ++v3;
  }
  signed int v5 = ((v2 << v3) + 31) & 0xFFFFFFE0;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * (v5 + (int)v4) + 64, 0x55B6168FuLL))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, (struct type_info *)&unk_1F26F0F80, MEMORY[0x1E4FBA2C0]);
  }
  uint64_t v6 = 2 * v4;
  uint64_t v7 = (char *)memptr;
  int v8 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = memptr;
  if (v8)
  {
    free(v8);
    uint64_t v7 = *(char **)(a1 + 64);
  }
  int v9 = v7 + 32;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = &v9[(int)v4];
  *(void *)(a1 + 48) = &v9[v6];
  *(void *)(a1 + 56) = &v9[v6 + v5];
  if ((v9 & 0x1F) != 0 && dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "UNALIGNED! %p %p\n", v9, &v9[(int)v4]);
    syslog(27, "UNALIGNED! %p %p\n", *(const void **)(a1 + 32), *(const void **)(a1 + 40));
  }
}

uint64_t sub_1D0C4E7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(v4 + 2096);
  BOOL v6 = v5 > 8 || *(unsigned __int8 *)(v4 + 2098) > 8u;
  *(unsigned char *)(a1 + 28) = v6;
  uint64_t v7 = *(char *)(v4 + 201);
  *(unsigned char *)(a1 + 29) = v7;
  if (v5 >= 10) {
    LOBYTE(v5) = 10;
  }
  *(unsigned char *)(a1 + 30) = ~(-1 << (v5 - 5));
  unsigned __int8 v8 = *(unsigned char *)(*(void *)(a2 + 16) + 2098);
  if (v8 >= 0xAu) {
    unsigned __int8 v8 = 10;
  }
  *(unsigned char *)(a1 + 31) = ~(-1 << (v8 - 5));
  ((void (*)(uint64_t, uint64_t))*(&off_1F26F1A80 + 4 * v7 + 2 * v6))(a1, a2);
  int v9 = *(unsigned __int8 **)(a2 + 16);
  unsigned int v10 = v9[2096];
  if (v10 == 8)
  {
    unsigned int v11 = v9[2098];
    if (v11 == 8)
    {
      uint64_t result = 0;
      *(void *)(a1 + 432) = nullsub_25;
      *(void *)(a1 + 72) = sub_1D0C7721C;
      *(void *)(a1 + 80) = sub_1D0C77164;
      *(void *)(a1 + 88) = sub_1D0C77010;
      *(void *)(a1 + 96) = sub_1D0C76ED0;
      *(void *)(a1 + 104) = sub_1D0C76E98;
      *(void *)(a1 + 112) = sub_1D0C76DFC;
      *(void *)(a1 + 120) = sub_1D0C76D44;
      *(void *)(a1 + 128) = sub_1D0C76BF0;
      *(void *)(a1 + 136) = sub_1D0C76AB0;
      *(void *)(a1 + 144) = sub_1D0C76A78;
      *(void *)(a1 + 152) = sub_1D0C76994;
      *(void *)(a1 + 160) = sub_1D0C768B4;
      *(void *)(a1 + 168) = sub_1D0C7671C;
      *(void *)(a1 + 176) = sub_1D0C76594;
      *(void *)(a1 + 184) = sub_1D0C7654C;
      *(void *)(a1 + 192) = sub_1D0C76400;
      *(void *)(a1 + 200) = sub_1D0C762B0;
      *(void *)(a1 + 208) = sub_1D0C7608C;
      *(void *)(a1 + 216) = sub_1D0C75E88;
      *(void *)(a1 + 224) = sub_1D0C75E20;
      *(void *)(a1 + 264) = sub_1D0D30A20;
      *(void *)(a1 + 440) = nullsub_25;
      *(void *)(a1 + 232) = sub_1D0C77F20;
      *(void *)(a1 + 240) = sub_1D0C77E58;
      *(void *)(a1 + 248) = sub_1D0C77CFC;
      *(void *)(a1 + 256) = sub_1D0C77BB4;
      *(void *)(a1 + 272) = sub_1D0C6617C;
      *(void *)(a1 + 280) = sub_1D0C660B4;
      *(void *)(a1 + 288) = sub_1D0C65F58;
      *(void *)(a1 + 296) = sub_1D0C65E10;
      *(void *)(a1 + 312) = sub_1D0C77AC0;
      *(void *)(a1 + 320) = sub_1D0C779D0;
      *(void *)(a1 + 328) = sub_1D0C77830;
      *(void *)(a1 + 336) = sub_1D0C776A0;
      *(void *)(a1 + 352) = sub_1D0C66228;
      *(void *)(a1 + 360) = sub_1D0C61BD8;
      *(void *)(a1 + 368) = sub_1D0C620FC;
      *(void *)(a1 + 376) = sub_1D0C61EF0;
      *(void *)(a1 + 304) = sub_1D0C62328;
      *(void *)(a1 + 344) = sub_1D0C77610;
      *(void *)(a1 + 384) = sub_1D0C5F164;
      *(void *)(a1 + 392) = sub_1D0C77560;
      *(void *)(a1 + 400) = sub_1D0C774A0;
      *(void *)(a1 + 408) = sub_1D0C773E0;
      *(void *)(a1 + 416) = sub_1D0C77320;
      *(void *)(a1 + 424) = sub_1D0C772B8;
      return result;
    }
  }
  else
  {
    if (v10 > 0xC) {
      goto LABEL_15;
    }
    unsigned int v11 = v9[2098];
  }
  if (v11 <= 0xC)
  {
    ((void (*)(uint64_t))*(&off_1F26F1B00 + 4 * v9[222]))(a1);
    ((void (*)(uint64_t))*(&off_1F26F1B00 + 4 * *(unsigned __int8 *)(*(void *)(a2 + 16) + 223) + 2))(a1);
    return 0;
  }
LABEL_15:
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Luma/Chroma bitdepth %d/%d not supported\n", v10, v9[2098]);
    syslog(27, "Luma/Chroma bitdepth %d/%d not supported\n", *(unsigned __int8 *)(*(void *)(a2 + 16) + 2096), *(unsigned __int8 *)(*(void *)(a2 + 16) + 2098));
  }
  return 4294954386;
}

uint64_t sub_1D0C4EC44(uint64_t result, uint64_t a2)
{
  int v2 = sub_1D0D369D0;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    int v2 = sub_1D0C5E3B8;
    if (*(unsigned char *)(*(void *)(a2 + 16) + 283)) {
      int v2 = sub_1D0D369D0;
    }
  }
  *(void *)(result + 448) = v2;
  *(void *)(result + 456) = 0;
  return result;
}

uint64_t sub_1D0C4EC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 **)(a2 + 16);
  *(unsigned char *)(a1 + 536) = v4[406];
  int v5 = v4[397];
  *(unsigned char *)(a1 + 537) = v5;
  *(unsigned char *)(a1 + 538) = v4[2148];
  unsigned int v6 = v4[2096];
  if (v6 == 8)
  {
    unsigned int v7 = v4[2098];
    if (v7 == 8)
    {
      uint64_t result = 0;
      *(void *)a1 = sub_1D0C57014;
      *(void *)(a1 + 16) = sub_1D0CA5D90;
      *(void *)(a1 + 200) = sub_1D0CA5D74;
      *(void *)(a1 + 208) = sub_1D0CA5D58;
      *(void *)(a1 + 216) = sub_1D0CA5D38;
      *(void *)(a1 + 224) = sub_1D0CA5D18;
      *(void *)(a1 + 232) = sub_1D0CA5CF0;
      *(void *)(a1 + 120) = sub_1D0CA5CC8;
      *(void *)(a1 + 128) = sub_1D0CA5CA0;
      *(void *)(a1 + 136) = sub_1D0CA5C78;
      *(void *)(a1 + 144) = sub_1D0CA5C54;
      *(void *)(a1 + 152) = sub_1D0CA5C2C;
      *(void *)(a1 + 520) = sub_1D0CA5B8C;
      *(void *)(a1 + 32) = sub_1D0C5AA1C;
      *(void *)(a1 + 40) = sub_1D0C5AAB4;
      BOOL v9 = v5 == 0;
      unsigned int v10 = sub_1D0CD945C;
      if (v9) {
        unsigned int v10 = sub_1D0C5F8FC;
      }
      *(void *)(a1 + 48) = v10;
      *(void *)(a1 + 280) = sub_1D0C59A8C;
      *(void *)(a1 + 288) = sub_1D0C5B8B0;
      *(void *)(a1 + 296) = sub_1D0C5B49C;
      *(void *)(a1 + 304) = sub_1D0C60528;
      *(void *)(a1 + 312) = sub_1D0CD8C7C;
      *(void *)(a1 + 160) = sub_1D0C59FCC;
      *(void *)(a1 + 168) = sub_1D0C5AC5C;
      *(void *)(a1 + 176) = sub_1D0C5F238;
      *(void *)(a1 + 184) = sub_1D0C65D8C;
      *(void *)(a1 + 192) = sub_1D0CD8C54;
      *(void *)(a1 + 80) = sub_1D0C5A09C;
      *(void *)(a1 + 88) = sub_1D0C5ABE0;
      *(void *)(a1 + 96) = sub_1D0C5CC48;
      *(void *)(a1 + 104) = sub_1D0C65CC0;
      *(void *)(a1 + 112) = sub_1D0CD8B5C;
      *(void *)(a1 + 320) = sub_1D0C5A59C;
      *(void *)(a1 + 328) = sub_1D0C5C140;
      *(void *)(a1 + 336) = sub_1D0C5EFCC;
      *(void *)(a1 + 344) = sub_1D0C61E94;
      *(void *)(a1 + 352) = sub_1D0CD8AD4;
      *(void *)(a1 + 240) = sub_1D0C57EF4;
      *(void *)(a1 + 248) = sub_1D0C5A968;
      *(void *)(a1 + 256) = sub_1D0C5C1FC;
      *(void *)(a1 + 264) = sub_1D0C51CBC;
      *(void *)(a1 + 272) = sub_1D0CD840C;
      *(void *)(a1 + 8) = sub_1D0C58364;
      int v11 = *(unsigned __int8 *)(a1 + 538);
      char v12 = sub_1D0CA55F4;
      if (v11 == 2) {
        char v12 = sub_1D0CA5888;
      }
      if (v11 == 3) {
        char v12 = sub_1D0CA52D0;
      }
      *(void *)(a1 + 24) = v12;
      *(void *)(a1 + 56) = sub_1D0CA5228;
      *(void *)(a1 + 64) = sub_1D0CA5180;
      *(void *)(a1 + 72) = sub_1D0CA50D8;
      *(void *)(a1 + 528) = sub_1D0CA4FCC;
      *(void *)(a1 + 360) = sub_1D0C5A4E4;
      *(void *)(a1 + 368) = sub_1D0C5C8B4;
      *(void *)(a1 + 376) = sub_1D0C60288;
      *(void *)(a1 + 384) = sub_1D0CD9D64;
      *(void *)(a1 + 392) = sub_1D0C5A604;
      *(void *)(a1 + 400) = sub_1D0C5CC2C;
      *(void *)(a1 + 408) = sub_1D0C61E08;
      *(void *)(a1 + 416) = sub_1D0CD9D3C;
      *(void *)(a1 + 424) = sub_1D0C5A4B4;
      *(void *)(a1 + 432) = sub_1D0C5CB84;
      *(void *)(a1 + 440) = sub_1D0C61D38;
      *(void *)(a1 + 448) = sub_1D0CD9C4C;
      *(void *)(a1 + 456) = sub_1D0C5AB9C;
      *(void *)(a1 + 464) = sub_1D0C5CBE4;
      *(void *)(a1 + 472) = sub_1D0C61E28;
      *(void *)(a1 + 480) = sub_1D0CD9BAC;
      *(void *)(a1 + 488) = sub_1D0C599DC;
      *(void *)(a1 + 496) = sub_1D0C524CC;
      *(void *)(a1 + 504) = sub_1D0C518D8;
      *(void *)(a1 + 512) = sub_1D0CD951C;
      return result;
    }
    goto LABEL_12;
  }
  if (v6 <= 0xC)
  {
    unsigned int v7 = v4[2098];
LABEL_12:
    if (v7 <= 0xC)
    {
      ((void (*)(uint64_t))*(&off_1F26F19E0 + 4 * v4[222]))(a1);
      ((void (*)(uint64_t))*(&off_1F26F19E0 + 4 * *(unsigned __int8 *)(*(void *)(a2 + 16) + 223) + 2))(a1);
      return 0;
    }
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Luma/Chroma bitdepth %d/%d not supported\n", v4[2096], v4[2098]);
    syslog(27, "Luma/Chroma bitdepth %d/%d not supported\n", *(unsigned __int8 *)(*(void *)(a2 + 16) + 2096), *(unsigned __int8 *)(*(void *)(a2 + 16) + 2098));
  }
  return 4294954386;
}

void sub_1D0C4F230(uint64_t a1)
{
  int v2 = (std::mutex *)(a1 + 2472);
  std::mutex::lock((std::mutex *)(a1 + 2472));
  char v3 = sub_1D0C4F354(a1 + 1976);
  uint64_t v5 = *v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  *(void *)&long long v8 = *v3;
  *((void *)&v8 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    do
    {
      if (!*(unsigned char *)(v5 + 42))
      {
        sub_1D0C4F598((void *)(a1 + 2424), &v8);
        *(unsigned char *)(v5 + 42) = 1;
      }
      *(unsigned char *)(v5 + 43) = 1;
      unsigned int v6 = sub_1D0C4F354(a1 + 1976);
      uint64_t v5 = *v6;
      unsigned int v7 = (std::__shared_weak_count *)v6[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v8 = v5;
      *((void *)&v8 + 1) = v7;
      if (v4) {
        sub_1D0C4C984(v4);
      }
      uint64_t v4 = v7;
    }
    while (v5);
  }
  else
  {
    unsigned int v7 = v4;
  }
  sub_1D0C6161C(a1);
  if (v7) {
    sub_1D0C4C984(v7);
  }
  std::mutex::unlock(v2);
}

void sub_1D0C4F328(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1D0C4C984(v2);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D0C4F354(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB671A58, memory_order_acquire) & 1) == 0)
  {
    uint64_t v6 = a1;
    int v5 = __cxa_guard_acquire(&qword_1EB671A58);
    a1 = v6;
    if (v5)
    {
      __cxa_atexit((void (*)(void *))sub_1D0C99904, &qword_1EA643368, &dword_1D0C3F000);
      __cxa_guard_release(&qword_1EB671A58);
      a1 = v6;
    }
  }
  uint64_t v1 = &qword_1EA643368;
  for (uint64_t i = 32; i != 304; i += 16)
  {
    uint64_t v3 = *(void *)(a1 + i);
    if (v3 && !*(unsigned char *)(v3 + 43) && (!*v1 || *(_DWORD *)(v3 + 1024) < *(_DWORD *)(*v1 + 1024))) {
      uint64_t v1 = (uint64_t *)(a1 + i);
    }
  }
  return v1;
}

void sub_1D0C4F424(uint64_t a1, int a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 2472);
  std::mutex::lock((std::mutex *)(a1 + 2472));
  uint64_t v5 = 0;
  int v6 = 0;
  for (int i = 0; ; int i = 0)
  {
    do
    {
      uint64_t v8 = *(void *)(a1 + 16 * v5 + 2008);
      if (v8)
      {
        if (*(unsigned char *)(v8 + 43))
        {
          int v9 = *(unsigned char *)(a1 + v5 + 2280) != 0;
        }
        else
        {
          ++i;
          int v9 = 1;
        }
        v6 += v9;
      }
      ++v5;
    }
    while (v5 != 17);
    if (!i) {
      break;
    }
    int v10 = *(_DWORD *)(a1 + 2372);
    if ((a2 & 1) != 0 || i > v10)
    {
      if (i > v10) {
        int v11 = 1;
      }
      else {
        int v11 = a2 ^ 1;
      }
      if (v11 != 1) {
        break;
      }
    }
    else if (v6 <= *(_DWORD *)(a1 + 2376))
    {
      break;
    }
    char v12 = sub_1D0C4F354(a1 + 1976);
    uint64_t v14 = *v12;
    int v13 = (std::__shared_weak_count *)v12[1];
    *(void *)&long long v15 = *v12;
    *((void *)&v15 + 1) = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!*(unsigned char *)(v14 + 42))
    {
      sub_1D0C4F598((void *)(a1 + 2424), &v15);
      *(unsigned char *)(v14 + 42) = 1;
    }
    *(unsigned char *)(v14 + 43) = 1;
    if (v13) {
      sub_1D0C4C984(v13);
    }
    uint64_t v5 = 0;
    int v6 = 0;
  }
  std::mutex::unlock(v4);
}

void sub_1D0C4F578(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1D0C4C984(v2);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1D0C4F598(void *a1, long long *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 32 * (v4 - v5) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x100)
    {
      a1[4] = v9 - 256;
      uint64_t v13 = *(void *)v5;
      int v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          unint64_t v43 = (char *)sub_1D0C3FC20(v42);
          uint64_t v45 = &v43[8 * (v42 >> 2)];
          uint64_t v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            uint64_t v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)uint64_t v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          unint64_t v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          uint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            uint64_t v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            uint64_t v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = v8 + a1[4];
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    uint64_t v25 = (char *)a1[3];
    uint64_t v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      unint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          uint64_t v54 = (char *)sub_1D0C3FC20(v52);
          uint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v56 = (uint64_t *)a1[1];
          uint64_t v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            uint64_t v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            unint64_t v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)unint64_t v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          int64x2_t v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        int64x2_t v63 = (char *)a1[1];
        unint64_t v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v64[-*a1] >> 2;
            }
            uint64_t v99 = (char *)sub_1D0C3FC20(v98);
            uint64_t v101 = &v99[8 * (v98 >> 2)];
            uint64_t v102 = (uint64_t *)a1[1];
            unint64_t v64 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              unint64_t v64 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              uint64_t v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)uint64_t v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            unint64_t v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v64;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              unint64_t v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            unint64_t v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              int64x2_t v63 = (char *)a1[1];
            }
            unint64_t v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)unint64_t v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    uint64_t v31 = (char *)sub_1D0C3FC20(v30);
    uint64_t v33 = v32;
    uint64_t v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v111 = v35;
    unsigned __int8 v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v111;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      unint64_t v76 = (char *)sub_1D0C3FC20(v75);
      uint64_t v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v108 = v37;
      long long v111 = v39;
      operator delete(v31);
      long long v37 = v108;
    }
    long long v39 = v111;
LABEL_56:
    *(void *)uint64_t v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      unint64_t v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        int v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          uint64_t v87 = (char *)sub_1D0C3FC20(v86);
          BOOL v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          unsigned int v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            unsigned int v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            unint64_t v92 = v80;
            int v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)unint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v109 = v37;
            long long v113 = v39;
            operator delete(v79);
            long long v37 = v109;
            long long v39 = v113;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          BOOL v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            int v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v37 + 1);
            uint64_t v112 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v110;
            *(void *)&long long v39 = v112;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        BOOL v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    int v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  long long v97 = *a2;
  *(_OWORD *)(*(void *)&v5[(v10 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v10) = *a2;
  if (*((void *)&v97 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = a1[5];
  }
  a1[5] = v8 + 1;
}

void sub_1D0C4FB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void sub_1D0C4FB34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v4 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  sub_1D0C4FBB4(a2);
  sub_1D0C4FC20((void *)(a1 + 8), &v5);
  std::mutex::unlock(v4);
}

void sub_1D0C4FBA0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_1D0C4FBB4(uint64_t a1)
{
  int v2 = *(__CVBuffer **)(a1 + 1176);
  if (v2)
  {
    CVPixelBufferUnlockBaseAddress(v2, *(unsigned int *)(a1 + 1184));
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 1176));
    *(void *)(a1 + 1176) = 0;
  }
  uint64_t v3 = *(__CVBuffer **)(a1 + 1192);
  if (v3)
  {
    CVPixelBufferUnlockBaseAddress(v3, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 1192));
    *(void *)(a1 + 1192) = 0;
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

void sub_1D0C4FC20(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1D0C63EF0(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t sub_1D0C4FCA8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5, __CVBuffer *a6, int64_t a7, unsigned int a8, int a9)
{
  unint64_t v10 = a5;
  CVPixelBufferRef v90 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  *a5 = 0;
  uint64_t v88 = (std::mutex *)(a1 + 56);
  if (a6)
  {
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(*(CVPixelBufferPoolRef *)(a1 + 120));
    if (a3) {
      goto LABEL_3;
    }
    LODWORD(valuePtr) = 0;
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E4F24D70]);
    CFArrayRef ValueAtIndex = Value;
    if (Value
      && ((CFTypeID v18 = CFGetTypeID(Value), v18 != CFArrayGetTypeID())
       || CFArrayGetCount(ValueAtIndex) < 1
       || (CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0)) != 0)
      && (CFTypeID v19 = CFGetTypeID(ValueAtIndex), v19 == CFNumberGetTypeID())
      && CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr))
    {
      int v20 = valuePtr;
      BOOL v21 = v20 == CVPixelBufferGetPixelFormatType(a6);
    }
    else
    {
      BOOL v21 = 0;
    }
    uint64_t v22 = *(void *)(a2 + 8);
    uint64_t v23 = *(int *)(v22 + 204);
    uint64_t v24 = *(int *)(v22 + 208);
    size_t extraRowsOnBottom = 0;
    extraColumnsOnRight[0] = 0;
    CVPixelBufferGetExtendedPixels(a6, 0, extraColumnsOnRight, 0, &extraRowsOnBottom);
    size_t Width = CVPixelBufferGetWidth(a6);
    size_t v26 = extraColumnsOnRight[0];
    size_t Height = CVPixelBufferGetHeight(a6);
    size_t v28 = v23 + (int)a7;
    size_t v29 = v24 + (a7 >> 32);
    size_t v30 = v26 + Width;
    size_t v31 = extraRowsOnBottom + Height;
    if (v28 > v30 || v29 > v31)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Pixel buffer needs to be at least %zux%zu, but got %zux%zu\n", v28, v29, v30, v31);
        syslog(27, "Pixel buffer needs to be at least %zux%zu, but got %zux%zu\n", v28, v29, v30, v31);
      }
    }
    else if (v21)
    {
      CVPixelBufferRef pixelBufferOut = CVPixelBufferRetain(a6);
      unint64_t v14 = HIDWORD(a7);
      int v87 = a7;
      if (pixelBufferOut) {
        goto LABEL_26;
      }
      goto LABEL_6;
    }
LABEL_3:
    unint64_t v14 = 0;
    int v87 = 0;
    if (pixelBufferOut) {
      goto LABEL_26;
    }
    goto LABEL_6;
  }
  int v87 = 0;
  unint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = CVPixelBufferPoolCreatePixelBuffer(0, *(CVPixelBufferPoolRef *)(a1 + 120), &pixelBufferOut);
  if (v15) {
    goto LABEL_29;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, CVPixelBufferRef))(*(void *)a2 + 40))(a2, pixelBufferOut);
  if (v15) {
    goto LABEL_29;
  }
LABEL_26:
  if (a4)
  {
    uint64_t v15 = CVPixelBufferPoolCreatePixelBuffer(0, *(CVPixelBufferPoolRef *)(a1 + 120), &v90);
    if (v15
      || (uint64_t v15 = (*(uint64_t (**)(uint64_t, CVPixelBufferRef))(*(void *)a2 + 40))(a2, v90), v15))
    {
LABEL_29:
      int v33 = 0;
LABEL_138:
      uint64_t v73 = *v10;
      if (!*v10) {
        goto LABEL_146;
      }
      uint64_t v74 = *(void *)(a1 + 24);
      uint64_t v75 = *(void *)(a1 + 16);
      if (v74 == v75) {
        uint64_t v76 = 0;
      }
      else {
        uint64_t v76 = ((v74 - v75) << 6) - 1;
      }
      uint64_t v77 = *(void *)(a1 + 48);
      unint64_t v78 = v77 + *(void *)(a1 + 40);
      if (v76 == v78)
      {
        sub_1D0C63EF0((void *)(a1 + 8));
        uint64_t v75 = *(void *)(a1 + 16);
        uint64_t v77 = *(void *)(a1 + 48);
        unint64_t v78 = *(void *)(a1 + 40) + v77;
      }
      *(void *)(*(void *)(v75 + ((v78 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v78 & 0x1FF)) = v73;
      *(void *)(a1 + 48) = v77 + 1;
      goto LABEL_145;
    }
  }
  std::mutex::lock(v88);
  if (*(void *)(a1 + 48))
  {
    uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 16) + ((*(void *)(a1 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (*(void *)(a1 + 40) & 0x1FFLL));
    *unint64_t v10 = v34;
    *(void *)(v34 + 992) = 0;
    *(unsigned char *)(v34 + 40) = 0;
    *(_WORD *)(v34 + 42) = 0;
    *(unsigned char *)(v34 + 44) = 0;
    *(_DWORD *)(v34 + 1024) = 0;
    *(_DWORD *)(v34 + 36) = 0;
    *(unsigned char *)(v34 + 548) = 0;
    *(unsigned char *)(v34 + 597) = 0;
    *(unsigned char *)(v34 + 1172) = 0;
    *(_OWORD *)(v34 + 648) = 0u;
    *(unsigned char *)(v34 + 748) = 0;
    *(void *)(v34 + 752) = 0;
    *(_OWORD *)(v34 + 760) = 0u;
    *(void *)(v34 + 832) = 0;
    *(_OWORD *)(v34 + 840) = 0u;
    *(_OWORD *)(v34 + 928) = 0u;
    *(void *)(v34 + 672) = -1;
    *(void *)(v34 + 664) = -1;
    *(unsigned char *)(v34 + 680) = 0;
    *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_1D0D7F1E0);
    sub_1D0C50930(a1 + 8);
    uint64_t v35 = *v10;
  }
  else
  {
    unsigned __int8 v36 = operator new(0x4C0uLL, MEMORY[0x1E4FBA2D0]);
    if (!v36)
    {
      uint64_t v15 = 4294954392;
      int v33 = 1;
LABEL_145:
      *unint64_t v10 = 0;
      goto LABEL_146;
    }
    uint64_t v35 = (uint64_t)v36;
    sub_1D0C647D4((uint64_t)v36);
    *(void *)uint64_t v37 = &unk_1F26F12B0;
    *(void *)(v37 + 1176) = 0;
    *(_DWORD *)(v37 + 1184) = 0;
    *(void *)(v37 + 1192) = 0;
    *unint64_t v10 = v37;
  }
  *(unsigned char *)(v35 + 432) = a4;
  uint64_t v38 = pixelBufferOut;
  if (!pixelBufferOut) {
    goto LABEL_136;
  }
  texture = v90;
  unint64_t v82 = v14;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBufferOut);
  int v40 = PixelFormatType;
  if (PixelFormatType <= 1952854577)
  {
    if (PixelFormatType <= 875836533)
    {
      if (PixelFormatType <= 875704933)
      {
        if (PixelFormatType == 875704422) {
          goto LABEL_67;
        }
        int v41 = 875704438;
      }
      else
      {
        if (PixelFormatType == 875704934 || PixelFormatType == 875704950) {
          goto LABEL_67;
        }
        int v41 = 875836518;
      }
    }
    else if (PixelFormatType > 1278226737)
    {
      if (PixelFormatType == 1278226738 || PixelFormatType == 1496395842) {
        goto LABEL_67;
      }
      int v41 = 1952854576;
    }
    else
    {
      if (PixelFormatType == 875836534 || PixelFormatType == 1278226488) {
        goto LABEL_67;
      }
      int v41 = 1278226736;
    }
  }
  else if (PixelFormatType > 2016686639)
  {
    if (PixelFormatType > 2019963439)
    {
      if (PixelFormatType == 2019963440 || PixelFormatType == 2019963442) {
        goto LABEL_67;
      }
      int v41 = 2019963956;
    }
    else
    {
      if (PixelFormatType == 2016686640 || PixelFormatType == 2016686642) {
        goto LABEL_67;
      }
      int v41 = 2016687156;
    }
  }
  else if (PixelFormatType > 1953903153)
  {
    if (PixelFormatType == 1953903154 || PixelFormatType == 1953903668) {
      goto LABEL_67;
    }
    int v41 = 1983000886;
  }
  else
  {
    if (PixelFormatType == 1952854578 || PixelFormatType == 1952855092) {
      goto LABEL_67;
    }
    int v41 = 1953903152;
  }
  if (PixelFormatType != v41) {
    goto LABEL_129;
  }
LABEL_67:
  sub_1D0C4FBB4(v35);
  *(_DWORD *)(v35 + 1184) = 0;
  uint64_t v15 = CVPixelBufferLockBaseAddress(v38, 0);
  if (v15) {
    goto LABEL_137;
  }
  *(void *)(v35 + 1176) = CVPixelBufferRetain(v38);
  *(_DWORD *)(v35 + 520) = CVPixelBufferGetWidth(v38);
  *(_DWORD *)(v35 + 524) = CVPixelBufferGetHeight(v38);
  PlaneCFIndex Count = CVPixelBufferGetPlaneCount(v38);
  unsigned int v43 = PlaneCount;
  if ((PlaneCount & 0xFE) == 0) {
    unsigned int v43 = 1;
  }
  *(unsigned char *)(v35 + 530) = v43;
  if (v43 >= 3)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unexpected %d planes (too many)\n", v43);
      syslog(27, "Unexpected %d planes (too many)\n", *(unsigned __int8 *)(v35 + 530));
    }
    uint64_t v15 = 4294954386;
    goto LABEL_137;
  }
  uint64_t v84 = v35;
  unsigned int v80 = a8;
  size_t v44 = 0;
  char v45 = sub_1D0C50E9C(v40) > 8;
  char v46 = 1;
  do
  {
    uint64_t v47 = v10;
    char v48 = v46;
    size_t v49 = v84 + 8 * v44;
    *(void *)(v49 + 400) = CVPixelBufferGetBaseAddressOfPlane(v38, v44);
    uint64_t v50 = (uint64_t *)(v49 + 400);
    size_t v51 = CVPixelBufferGetBytesPerRowOfPlane(v38, v44) >> v45;
    *(void *)(v49 + 416) = v51;
    uint64_t v52 = *(void *)(v49 + 400);
    if (v52)
    {
      int v53 = v87;
      int v54 = v82;
      if ((v48 & 1) == 0)
      {
        size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v38, 1uLL);
        size_t v56 = *(int *)(v84 + 520);
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v38, 1uLL);
        int v53 = v87 >> (WidthOfPlane < v56);
        int v54 = (int)v82 >> (HeightOfPlane < *(int *)(v84 + 524));
        uint64_t v52 = *v50;
        size_t v51 = *(void *)(v49 + 416);
      }
      *uint64_t v50 = v52 + ((v51 * v54 + (v53 << v44)) << v45);
    }
    unint64_t v58 = v51 << v45;
    unint64_t valuePtr = v58;
    unint64_t v10 = v47;
    if (v58 >= 0x400 && (v58 & 0x3FF) == 0)
    {
      p_unint64_t valuePtr = &valuePtr;
      if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA643328, memory_order_acquire) != -1)
      {
        extraColumnsOnRight[0] = (size_t)sub_1D0C92B78;
        extraColumnsOnRight[1] = (size_t)&p_valuePtr;
        size_t extraRowsOnBottom = (size_t)extraColumnsOnRight;
        std::__call_once(&qword_1EA643328, &extraRowsOnBottom, (void (__cdecl *)(void *))sub_1D0C92B68);
        unint64_t v10 = v47;
      }
    }
    char v46 = 0;
    size_t v44 = 1;
  }
  while ((v48 & 1) != 0);
  if (texture)
  {
    signed int v59 = CVPixelBufferGetPixelFormatType(texture);
    if (v59 <= 1952854577)
    {
      unint64_t v60 = texture;
      if (v59 <= 875836533)
      {
        if (v59 <= 875704933)
        {
          if (v59 == 875704422) {
            goto LABEL_116;
          }
          int v61 = 875704438;
        }
        else
        {
          if (v59 == 875704934 || v59 == 875704950) {
            goto LABEL_116;
          }
          int v61 = 875836518;
        }
      }
      else if (v59 > 1278226737)
      {
        if (v59 == 1278226738 || v59 == 1496395842) {
          goto LABEL_116;
        }
        int v61 = 1952854576;
      }
      else
      {
        if (v59 == 875836534 || v59 == 1278226488) {
          goto LABEL_116;
        }
        int v61 = 1278226736;
      }
    }
    else
    {
      unint64_t v60 = texture;
      if (v59 > 2016686639)
      {
        if (v59 > 2019963439)
        {
          if (v59 == 2019963440 || v59 == 2019963442) {
            goto LABEL_116;
          }
          int v61 = 2019963956;
        }
        else
        {
          if (v59 == 2016686640 || v59 == 2016686642) {
            goto LABEL_116;
          }
          int v61 = 2016687156;
        }
      }
      else
      {
        if (v59 <= 1953903153)
        {
          if (v59 != 1952854578 && v59 != 1952855092)
          {
            int v61 = 1953903152;
            goto LABEL_115;
          }
LABEL_116:
          uint64_t v15 = CVPixelBufferLockBaseAddress(v60, 0);
          if (v15) {
            goto LABEL_137;
          }
          *(void *)(v84 + 1192) = CVPixelBufferRetain(texture);
          if (CVPixelBufferGetWidth(texture) == *(_DWORD *)(v84 + 520)
            && CVPixelBufferGetHeight(texture) == *(_DWORD *)(v84 + 524))
          {
            size_t v62 = 0;
            char v63 = 1;
            do
            {
              char v64 = v63;
              uint64_t v65 = (void *)(v84 + 8 * v62);
              v65[59] = CVPixelBufferGetBaseAddressOfPlane(texture, v62);
              size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(texture, v62);
              char v63 = 0;
              v65[61] = BytesPerRowOfPlane >> v45;
              v65[55] = v65[50];
              v65[57] = v65[52];
              size_t v62 = 1;
            }
            while ((v64 & 1) != 0);
            goto LABEL_121;
          }
          if (dword_1EB671A40 >= 3)
          {
            uint64_t v69 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v70 = "SetBuffer: VRA buffers have different dimensions\n";
            uint64_t v71 = "SetBuffer: VRA buffers have different dimensions\n";
            size_t v72 = 49;
            goto LABEL_135;
          }
          goto LABEL_136;
        }
        if (v59 == 1953903154 || v59 == 1953903668) {
          goto LABEL_116;
        }
        int v61 = 1983000886;
      }
    }
LABEL_115:
    if (v59 == v61) {
      goto LABEL_116;
    }
LABEL_129:
    if (dword_1EB671A40 >= 3)
    {
      uint64_t v69 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v70 = "Invalid pixel format\n";
      uint64_t v71 = "Invalid pixel format\n";
      size_t v72 = 21;
LABEL_135:
      fwrite(v71, v72, 1uLL, v69);
      syslog(27, v70);
    }
LABEL_136:
    uint64_t v15 = 4294954394;
    goto LABEL_137;
  }
LABEL_121:
  *(void *)(v84 + 504) = 0;
  *(void *)(v84 + 512) = 0;
  uint64_t v67 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)*v10 + 40))(*v10, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 24));
  uint64_t v15 = v67;
  if (!a6 || (!v67 ? (BOOL v68 = a3 == 0) : (BOOL v68 = 1), v68))
  {
    int v33 = 1;
    if (v67) {
      goto LABEL_138;
    }
  }
  else
  {
    uint64_t v15 = sub_1D0D26E88((void (**)(uint64_t))(a1 + 128), a6, a7, v80, a9, pixelBufferOut, v87 | (v82 << 32), 1);
    if (v15)
    {
      if (dword_1EB671A40 >= 3)
      {
        int v33 = 1;
        fwrite("Failed to copy source buffer\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Failed to copy source buffer\n");
        goto LABEL_138;
      }
LABEL_137:
      int v33 = 1;
      goto LABEL_138;
    }
    int v33 = 1;
  }
LABEL_146:
  CVPixelBufferRelease(pixelBufferOut);
  CVPixelBufferRelease(v90);
  if (v33) {
    std::mutex::unlock(v88);
  }
  return v15;
}

void sub_1D0C508E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::mutex *a23)
{
}

void sub_1D0C50930(uint64_t a1)
{
  if (*(void *)(a1 + 32) >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
}

uint64_t sub_1D0C50980(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = sub_1D0C50A04(a1, a2, a3);
  if (!result)
  {
    if (*(unsigned char *)(a2 + 2096) != 8 || (uint64_t v6 = sub_1D0C9224C, v7 = sub_1D0C92678, *(unsigned char *)(a2 + 2098) != 8))
    {
      uint64_t v6 = sub_1D0C92460;
      uint64_t v7 = sub_1D0C92830;
    }
    *(void *)(a1 + 1200) = v7;
    *(void *)(a1 + 1208) = v6;
  }
  return result;
}

uint64_t sub_1D0C50A04(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = 0;
  *(void *)(a1 + 520) = *(void *)(a2 + 204);
  int v5 = *(unsigned __int8 *)(a2 + 2096);
  *(unsigned char *)(a1 + 528) = v5;
  int v6 = *(unsigned __int8 *)(a2 + 2098);
  *(unsigned char *)(a1 + 529) = v6;
  *(_DWORD *)(a1 + 1028) = *(unsigned __int8 *)(a2 + 2113);
  float32x2x2_t v7 = *(float32x2x2_t *)(a2 + 2132);
  unint64_t v8 = (float *)(a1 + 648);
  unint64_t v9 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  vst2_f32(v8, v7);
  BOOL v10 = v5 == 8 && v6 == 8;
  char v11 = !v10;
  *(unsigned char *)(a1 + 531) = v11;
  int v12 = *(unsigned __int8 *)(a2 + 201);
  *(unsigned char *)(a1 + 532) = v12;
  *(unsigned char *)(a1 + 533) = *(unsigned char *)(a2 + 1991);
  char v13 = a3 ^ 1;
  if (v10) {
    char v13 = 0;
  }
  *(unsigned char *)(a1 + 534) = v13;
  if (!*(void *)(a1 + 408) && v12)
  {
    if (*(unsigned char *)(a1 + 432))
    {
      if (dword_1EB671A40 > 2)
      {
        unint64_t v14 = (FILE **)MEMORY[0x1E4F143C8];
        fwrite("VRA not implemented without CoreVideo\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "VRA not implemented without CoreVideo\n");
        if (dword_1EB671A40 >= 3)
        {
          fwrite("Failed to allocate chroma plane\n", 0x20uLL, 1uLL, *v14);
          syslog(27, "Failed to allocate chroma plane\n");
        }
      }
      return 4294954386;
    }
    else
    {
      int v16 = *(unsigned __int8 *)(a2 + 2117) << v11;
      sub_1D0C65DAC();
      LODWORD(v17) = qword_1EB671A28;
      if (v16 < (int)qword_1EB671A28) {
        LODWORD(v17) = v16;
      }
      if ((int)v17 <= 32) {
        uint64_t v17 = 32;
      }
      else {
        uint64_t v17 = v17;
      }
      int v18 = ((71 << v11) + 0x7FFFFFFF + v17) & -(int)v17;
      uint64_t v19 = v17 - 1;
      uint64_t v20 = -v17;
      unint64_t v21 = (v17 - 1 + ((*(int *)(a2 + 204) + 142) << v11)) & -v17;
      if ((v21 & 0x3FF) == 0 && v21 > 0x3FF) {
        uint64_t v23 = v17;
      }
      else {
        uint64_t v23 = 0;
      }
      unint64_t v24 = v23 + v21;
      unsigned int v25 = *(unsigned __int8 *)(a2 + 201);
      char v26 = v25 < 3;
      char v27 = v25 < 2;
      unint64_t v28 = (2 * v24) >> (v25 < 3);
      unint64_t v29 = v17 + v28 * ((*(int *)(a2 + 208) >> (v25 < 2)) + 143);
      uint64_t v30 = *(void *)(a1 + 720);
      unint64_t v31 = *(void *)(a1 + 728) - v30;
      if (v29 <= v31)
      {
        if (v29 < v31) {
          *(void *)(a1 + 728) = v30 + v29;
        }
      }
      else
      {
        sub_1D0C4CCE0((unint64_t *)(a1 + 720), v29 - v31);
        uint64_t v30 = *(void *)(a1 + 720);
      }
      uint64_t result = 0;
      *(unsigned char *)(a1 + 530) = 2;
      *(void *)(a1 + 424) = v28 >> v11;
      *(void *)(a1 + 408) = (v19 + v30 + ((unint64_t)(2 * v18) >> v26) + v28 * (0x47u >> v27)) & v20;
    }
  }
  return result;
}

uint64_t sub_1D0C50C50(void *a1, int a2, int a3, int a4)
{
  BOOL v7 = a2 > 12 || a3 > 12;
  if (a4)
  {
    if (!v7)
    {
      if (a2 != 8 || a3 != 8)
      {
        unint64_t v8 = &off_1F26F1900;
        uint64_t result = ((uint64_t (*)(void *))*(&off_1F26F1900 + 4 * a2 - 32))(a1);
        if (result) {
          return result;
        }
        goto LABEL_22;
      }
      goto LABEL_19;
    }
  }
  else if (!v7)
  {
    if (a2 != 8 || a3 != 8)
    {
      unint64_t v8 = &off_1F26F1860;
      uint64_t result = ((uint64_t (*)(void *))*(&off_1F26F1860 + 4 * a2 - 32))(a1);
      if (result) {
        return result;
      }
LABEL_22:
      uint64_t result = ((uint64_t (*)(void *))v8[4 * a3 - 30])(a1);
      if (result) {
        return result;
      }
      return 0;
    }
LABEL_19:
    *a1 = sub_1D0CA9CB8;
    a1[1] = sub_1D0CA9A4C;
    a1[2] = sub_1D0CA9338;
    a1[3] = sub_1D0CA8C0C;
    a1[4] = sub_1D0CA9CB8;
    a1[8] = sub_1D0CA88A4;
    a1[9] = sub_1D0CA8610;
    a1[10] = sub_1D0CA7F18;
    a1[11] = sub_1D0CA7838;
    a1[12] = sub_1D0CA88A4;
    a1[20] = sub_1D0CA76D4;
    a1[21] = sub_1D0CA76D4;
    a1[16] = sub_1D0CA7520;
    a1[17] = sub_1D0CA7520;
    a1[18] = sub_1D0CA72E8;
    a1[19] = sub_1D0CA72E8;
    a1[5] = sub_1D0CAB4AC;
    a1[6] = sub_1D0CAB0D0;
    a1[7] = sub_1D0CAAB58;
    a1[13] = sub_1D0CAA8AC;
    a1[14] = sub_1D0CAA528;
    a1[15] = sub_1D0CA9FBC;
    return 0;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Luma/Chroma bitdepth %d/%d not supported\n", a2, a3);
    syslog(27, "Luma/Chroma bitdepth %d/%d not supported\n", a2, a3);
  }
  return 4294954386;
}

uint64_t sub_1D0C50E9C(int a1)
{
  if (a1 > 1952854577)
  {
    if (a1 <= 2016686639)
    {
      if (a1 <= 1953903153)
      {
        if (a1 == 1952854578 || a1 == 1952855092) {
          return 12;
        }
        int v1 = 1953903152;
LABEL_31:
        if (a1 == v1) {
          return 12;
        }
        return 0;
      }
      if (a1 == 1953903154 || a1 == 1953903668) {
        return 12;
      }
      int v3 = 1983000886;
      goto LABEL_26;
    }
    if (a1 > 2019963439)
    {
      if (a1 != 2019963440 && a1 != 2019963956)
      {
        int v3 = 2019963442;
LABEL_26:
        if (a1 != v3) {
          return 0;
        }
      }
    }
    else if (a1 != 2016686640 && a1 != 2016686642)
    {
      int v3 = 2016687156;
      goto LABEL_26;
    }
    return 10;
  }
  uint64_t v2 = 8;
  if (a1 <= 875836533)
  {
    if (a1 <= 875704933)
    {
      if (a1 == 875704422) {
        return v2;
      }
      int v4 = 875704438;
    }
    else
    {
      if (a1 == 875704934 || a1 == 875704950) {
        return v2;
      }
      int v4 = 875836518;
    }
    if (a1 == v4) {
      return v2;
    }
    return 0;
  }
  if (a1 > 1278226737)
  {
    if (a1 == 1278226738) {
      return 12;
    }
    if (a1 != 1496395842)
    {
      int v1 = 1952854576;
      goto LABEL_31;
    }
    return 10;
  }
  if (a1 != 875836534 && a1 != 1278226488)
  {
    int v3 = 1278226736;
    goto LABEL_26;
  }
  return v2;
}

uint64_t sub_1D0C5108C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48) >> 19)
  {
    return sub_1D0C4C8F0(a1);
  }
  else
  {
    unsigned int v3 = -1;
    do
      ++v3;
    while (!sub_1D0C51880(a1, 1) && v3 < 0x1F);
    return sub_1D0C4CA68(a1, v3) + ~(-1 << v3);
  }
}

uint64_t sub_1D0C51120(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 >= 7)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "maxNumSubLayersMinus1 (%d) out of range [0, %d]\n", a2, 6);
      syslog(27, "maxNumSubLayersMinus1 (%d) out of range [0, %d]\n");
    }
    return 4294954387;
  }
  sub_1D0C51560((unsigned char *)a1, 0, a3);
  *(unsigned char *)(a1 + 57) = sub_1D0C51880(a3, 8);
  if (a2 <= 0)
  {
    uint64_t v10 = (a2 + 1);
  }
  else
  {
    int v6 = 0;
    do
    {
      *(unsigned char *)(a1 + 64) |= (sub_1D0C51880(a3, 1) != 0) << ++v6;
      *(unsigned char *)(a1 + 65) |= (sub_1D0C51880(a3, 1) != 0) << v6;
    }
    while (a2 != v6);
    int v7 = a2 - 8;
    do
      sub_1D0C51880(a3, 2);
    while (!__CFADD__(v7++, 1));
    uint64_t v9 = 0;
    uint64_t v10 = (a2 + 1);
    do
    {
      unsigned int v11 = v9 + 1;
      int v12 = 1 << (v9 + 1);
      if ((v12 & *(unsigned char *)(a1 + 64)) != 0)
      {
        sub_1D0C51560((unsigned char *)a1, v11, a3);
      }
      else
      {
        uint64_t v13 = a1 + v9;
        *(unsigned char *)(v13 + 1) = *(unsigned char *)a1;
        *(unsigned char *)(a1 + 7) |= (*(unsigned char *)(a1 + 7) & 1) << v11;
        *(unsigned char *)(v13 + 9) = *(unsigned char *)(a1 + 8);
        *(_DWORD *)(a1 + 4 * v9 + 20) = *(_DWORD *)(a1 + 16);
        int8x8_t v14 = *(int8x8_t *)(a1 + 44);
        uint16x8_t v15 = vmovl_u8((uint8x8_t)vand_s8(v14, (int8x8_t)0x101010101010101));
        uint32x4_t v16 = (uint32x4_t)vdupq_n_s32(v11);
        uint8x8_t v17 = (uint8x8_t)vorr_s8(v14, vmovn_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v15.i8), v16), (int16x8_t)vshlq_u32(vmovl_high_u16(v15), v16))));
        *(uint8x8_t *)(a1 + 44) = v17;
        v17.i32[0] = *(_DWORD *)(a1 + 52);
        int16x8_t v18 = (int16x8_t)vmovl_u8(v17);
        *(int8x8_t *)v18.i8 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)vmovn_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)(v18.i64[0] & 0xFF01FF01FF01FF01)), v16)));
        *(_DWORD *)(a1 + 52) = vmovn_s16(v18).u32[0];
        *(unsigned char *)(a1 + 56) |= (*(unsigned char *)(a1 + 56) & 1) << v11;
      }
      if ((v12 & *(unsigned char *)(a1 + 65)) != 0) {
        char v19 = sub_1D0C51880(a3, 8);
      }
      else {
        char v19 = *(unsigned char *)(a1 + 57);
      }
      *(unsigned char *)(a1 + v9++ + 58) = v19;
    }
    while (v10 - 1 != v9);
  }
  uint64_t v20 = 0;
  unint64_t v21 = (FILE **)MEMORY[0x1E4F143C8];
  uint64_t v22 = (unsigned __int8 *)&unk_1D0D809F8;
  while (2)
  {
    char v23 = *(unsigned char *)(a1 + v20 + 57) / 0x1Eu;
    *(unsigned char *)(a1 + v20 + 159) = *(unsigned char *)(a1 + v20 + 57) % 0x1Eu / 3;
    *(unsigned char *)(a1 + v20 + 152) = v23;
    if (!*(unsigned char *)(a1 + v20 + 8))
    {
      *(unsigned char *)(a1 + v20 + 152) = 4;
      *(unsigned char *)(a1 + v20 + 159) = 0;
      *(unsigned char *)(a1 + v20 + 57) = 120;
      *(unsigned char *)(a1 + v20 + 8) = 1;
      *(_DWORD *)(a1 + 4 * v20 + 16) = 6;
    }
    if (*(unsigned char *)(a1 + (int)v20))
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("profile_space_[layer_idx] == 0 failed!\n", 0x27uLL, 1uLL, *v21);
        syslog(27, "profile_space_[layer_idx] == 0 failed!\n");
      }
      return 4294954387;
    }
    unint64_t v24 = (unsigned __int8 *)(a1 + (int)v20);
    char v26 = v24 + 152;
    int v25 = v24[152];
    if (((v25 - 7) < 0xFFFFFFFA || v24[159] > v22[v25 - 1])
      && v24[57] != 255
      && dword_1EB671A40 >= 6)
    {
      uint64_t v27 = v10;
      unint64_t v28 = v22;
      fprintf(*v21, "Unknown level %d.%d\n", v25, *(unsigned __int8 *)(a1 + (int)v20 + 159));
      syslog(30, "Unknown level %d.%d\n", *v26, *(unsigned __int8 *)(a1 + (int)v20 + 159));
      uint64_t v22 = v28;
      uint64_t v10 = v27;
    }
    uint64_t v29 = 0;
    while (1)
    {
      int v30 = byte_1D0D809FE[v29];
      if (*(unsigned __int8 *)(a1 + (int)v20 + 8) == v30 || ((*(_DWORD *)(a1 + 4 * (int)v20 + 16) >> v30) & 1) != 0) {
        break;
      }
      if (++v29 == 4)
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf(*v21, "Profile %d not supported\n", *(unsigned __int8 *)(a1 + (int)v20 + 8));
          syslog(27, "Profile %d not supported\n");
        }
        return 4294954387;
      }
    }
    if (++v20 != v10) {
      continue;
    }
    break;
  }
  return 0;
}

uint64_t sub_1D0C51560(unsigned char *a1, int a2, uint64_t a3)
{
  int v6 = &a1[a2];
  unsigned char *v6 = sub_1D0C51880(a3, 2);
  a1[7] |= (sub_1D0C51880(a3, 1) != 0) << a2;
  int v7 = 0;
  v6[8] = sub_1D0C51880(a3, 5);
  unint64_t v8 = v6 + 8;
  uint64_t v9 = &a1[4 * a2 + 16];
  do
    *v9 |= (sub_1D0C51880(a3, 1) != 0) << v7++;
  while (v7 != 32);
  a1[44] |= (sub_1D0C51880(a3, 1) != 0) << a2;
  a1[45] |= (sub_1D0C51880(a3, 1) != 0) << a2;
  a1[46] |= (sub_1D0C51880(a3, 1) != 0) << a2;
  a1[47] |= (sub_1D0C51880(a3, 1) != 0) << a2;
  if (*v8 > 3u || (*(unsigned char *)v9 & 0x10) != 0)
  {
    a1[48] |= (sub_1D0C51880(a3, 1) != 0) << a2;
    a1[49] |= (sub_1D0C51880(a3, 1) != 0) << a2;
    a1[50] |= (sub_1D0C51880(a3, 1) != 0) << a2;
    a1[51] |= (sub_1D0C51880(a3, 1) != 0) << a2;
    a1[52] |= (sub_1D0C51880(a3, 1) != 0) << a2;
    a1[53] |= (sub_1D0C51880(a3, 1) != 0) << a2;
    a1[54] |= (sub_1D0C51880(a3, 1) != 0) << a2;
    a1[55] |= (sub_1D0C51880(a3, 1) != 0) << a2;
    a1[56] |= (sub_1D0C51880(a3, 1) != 0) << a2;
    int v10 = 13;
  }
  else
  {
    a1[48] |= 1 << a2;
    a1[49] |= 1 << a2;
    a1[51] |= 1 << a2;
    a1[52] |= 1 << a2;
    if (*v8 == 3) {
      a1[54] |= 1 << a2;
    }
    int v10 = 22;
  }
  sub_1D0C51880(a3, v10);
  return sub_1D0C51880(a3, 22);
}

uint64_t sub_1D0C51880(uint64_t a1, int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 48);
  unint64_t v3 = *(int *)(a1 + 52) + (uint64_t)a2;
  char v4 = v3 & 7;
  *(_DWORD *)(a1 + 52) = v3 & 7;
  unint64_t v5 = *(void *)(a1 + 40);
  int v6 = (unsigned int *)(*(void *)(a1 + 32) + (v3 >> 3));
  *(void *)(a1 + 32) = v6;
  if ((unint64_t)v6 >= v5)
  {
    if ((unint64_t)v6 > v5) {
      *(void *)(a1 + 32) = v5;
    }
    unsigned int v7 = v2;
  }
  else
  {
    unsigned int v7 = bswap32(*v6);
  }
  *(_DWORD *)(a1 + 48) = v7 << v4;
  return v2 >> -(char)a2;
}

uint64_t sub_1D0C518D8(unsigned int a1, int8x16x2_t *a2, uint64_t a3, double *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v6 = byte_1D0D7FEBA[a1];
  int v7 = (char)v6;
  if (a1 >= 0x12)
  {
    if ((v6 & 0x80) == 0)
    {
      val = a2[2].val;
      uint64_t v8 = 7;
      uint64_t v9 = 3;
      uint64_t v10 = 5;
LABEL_6:
      int8x16_t v12 = a2->val[v8];
      int8x16_t v13 = a2[v9].val[0];
      int8x16_t v14 = a2->val[v10];
      int8x16_t v51 = *val;
      int8x16_t v52 = v14;
      uint64_t v49 = 4 * a3;
      uint64_t v50 = 8;
      uint64_t v15 = *(&v49 + (a1 > 0x11));
      uint64_t v46 = *(&v49 + (a1 < 0x12));
      int8x16_t v53 = v13;
      int8x16_t v54 = v12;
      int v16 = 4;
      unsigned int v17 = v6;
      do
      {
        uint64_t v18 = v17 & 0x7F;
        int8x8_t v19 = *(int8x8_t *)&v51.i8[8 * (v17 >> 7)];
        int8x8_t v20 = (int8x8_t)v51.u64[(v17 >> 7) + 1];
        int8x8_t v21 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 16);
        int8x8_t v22 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 24);
        int8x8_t v23 = *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 32);
        if (v18 >= 0x40)
        {
          int8x8_t v19 = vext_s8(v19, v20, 4uLL);
          int8x8_t v20 = vext_s8(v20, v21, 4uLL);
          int8x8_t v21 = vext_s8(v21, v22, 4uLL);
          int8x8_t v22 = vext_s8(v22, v23, 4uLL);
          int8x8_t v23 = vext_s8(v23, *(int8x8_t *)((char *)&v51 + 8 * (v17 >> 7) + 40), 4uLL);
          uint64_t v18 = (v18 - 64);
        }
        BOOL v24 = a1 < 0x12;
        sub_1D0C5984C(v18, v6, v24, a3, a4, v19, v20);
        sub_1D0C5984C(v18, v6, v24, a3, (double *)((char *)a4 + v15), v20, v21);
        sub_1D0C5984C(v18, v6, v24, a3, (double *)((char *)a4 + 2 * v15), v21, v22);
        uint64_t result = sub_1D0C5984C(v18, v6, v24, a3, (double *)((char *)a4 + 3 * v15), v22, v23);
        a4 = (double *)((char *)a4 + v46);
        v17 += 4 * v6;
        --v16;
      }
      while (v16);
      return result;
    }
    unint64_t v31 = (int8x16_t *)((char *)&unk_1D0D80000 + 32 * a1 - 576);
    int8x16_t v32 = vqtbl2q_s8(*a2, v31[1]);
    int8x16_t v51 = vqtbl2q_s8(*a2, *v31);
    int8x16_t v33 = vextq_s8(v32, v32, 8uLL);
    v33.i16[3] = a2[-1].val[1].i16[7];
    v52.i64[0] = v32.i64[0];
    v52.i64[1] = v33.i64[0];
    int v30 = a2 + 2;
    uint64_t v29 = 5;
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      uint64_t v8 = 3;
      uint64_t v9 = 1;
      uint64_t v10 = 1;
      val = (int8x16_t *)a2;
      goto LABEL_6;
    }
    char v26 = (int8x16_t *)((char *)&unk_1D0D80000 + 32 * (18 - a1));
    int8x16x2_t v56 = a2[2];
    int8x16_t v27 = vqtbl2q_s8(v56, v26[1]);
    int8x16_t v51 = vqtbl2q_s8(v56, *v26);
    int8x16_t v28 = vextq_s8(v27, v27, 8uLL);
    v28.i16[3] = a2[-1].val[1].i16[7];
    v52.i64[0] = v27.i64[0];
    v52.i64[1] = v28.i64[0];
    uint64_t v29 = 1;
    int v30 = a2;
  }
  int8x16_t v34 = a2->val[v29];
  int8x16_t v53 = v30->val[0];
  int8x16_t v54 = v34;
  uint64_t v49 = 4 * a3;
  uint64_t v50 = 8;
  uint64_t v35 = *(&v49 + (a1 > 0x11));
  uint64_t v47 = *(&v49 + (a1 < 0x12));
  int v36 = 4 * (char)v6;
  int v37 = 4;
  int v6 = (char)v6;
  do
  {
    uint64_t v38 = v6 | 0xFFFFFF80;
    long long v39 = &v52.i64[(v6 >> 7) + 1];
    int8x8_t v41 = (int8x8_t)v39[4];
    int8x8_t v40 = (int8x8_t)v39[5];
    int8x8_t v43 = (int8x8_t)v39[2];
    int8x8_t v42 = (int8x8_t)v39[3];
    int8x8_t v44 = (int8x8_t)v39[1];
    if (v38 <= 0xFFFFFFBF)
    {
      int8x8_t v40 = vext_s8(v41, v40, 4uLL);
      int8x8_t v41 = vext_s8(v42, v41, 4uLL);
      int8x8_t v42 = vext_s8(v43, v42, 4uLL);
      int8x8_t v43 = vext_s8(v44, v43, 4uLL);
      int8x8_t v44 = vext_s8((int8x8_t)v52.u64[((uint64_t)v6 >> 7) + 1], v44, 4uLL);
      uint64_t v38 = (v38 + 64);
    }
    BOOL v45 = a1 < 0x12;
    sub_1D0C59E3C(v38, v7, v45, a3, a4, v44, v43);
    sub_1D0C59E3C(v38, v7, v45, a3, (double *)((char *)a4 + v35), v43, v42);
    sub_1D0C59E3C(v38, v7, v45, a3, (double *)((char *)a4 + 2 * v35), v42, v41);
    uint64_t result = sub_1D0C59E3C(v38, v7, v45, a3, (double *)((char *)a4 + 3 * v35), v41, v40);
    a4 = (double *)((char *)a4 + v47);
    v6 += v36;
    --v37;
  }
  while (v37);
  return result;
}

uint64_t sub_1D0C51CBC(unsigned int a1, _OWORD *a2, uint64_t a3, double *a4)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  int v7 = byte_1D0D7FEBA[a1];
  int v8 = (char)v7;
  uint64_t v72 = 0;
  if (a1 < 0x12)
  {
    if (((char)v7 & 0x80000000) == 0)
    {
      uint64_t v9 = 3;
      uint64_t v10 = 2;
      uint64_t v11 = 1;
      int8x16_t v12 = (int8x16_t *)a2;
      goto LABEL_6;
    }
    int8x8_t v43 = (int8x16_t *)&qword_1D0D7FEE0[4 * (18 - a1)];
    int8x16x2_t v74 = *(int8x16x2_t *)((unsigned char *)a2 + 2);
    int8x16_t v44 = vqtbl2q_s8(v74, v43[1]);
    int8x16_t v68 = vqtbl2q_s8(v74, *v43);
    int8x16_t v45 = vextq_s8(v44, v44, 8uLL);
    v45.i8[7] = *((unsigned char *)a2 - 1);
    *(void *)&long long v69 = v44.i64[0];
    *((void *)&v69 + 1) = v45.i64[0];
    uint64_t v46 = 1;
    uint64_t v47 = a2;
    goto LABEL_29;
  }
  if ((v7 & 0x80) != 0)
  {
    char v48 = (int8x16_t *)&qword_1D0D7FEE0[4 * a1 - 72];
    int8x16_t v49 = vqtbl2q_s8(*(int8x16x2_t *)a2, v48[1]);
    int8x16_t v68 = vqtbl2q_s8(*(int8x16x2_t *)a2, *v48);
    int8x16_t v50 = vextq_s8(v49, v49, 8uLL);
    v50.i8[7] = *((unsigned char *)a2 - 1);
    *(void *)&long long v69 = v49.i64[0];
    *((void *)&v69 + 1) = v50.i64[0];
    uint64_t v47 = a2 + 4;
    uint64_t v46 = 5;
LABEL_29:
    long long v51 = a2[v46];
    long long v70 = *v47;
    long long v71 = v51;
    uint64_t v66 = 8 * a3;
    uint64_t v67 = 8;
    uint64_t v52 = *(&v66 + (a1 > 0x11));
    uint64_t v65 = *(&v66 + (a1 < 0x12));
    int v63 = 8 * (char)v7;
    int v53 = 4;
    int v7 = (char)v7;
    while (1)
    {
      uint64_t v54 = v7 | 0xFFFFFF00;
      uint64_t v55 = (void *)&v69 + (v7 >> 8) + 1;
      int8x8_t v57 = (int8x8_t)v55[4];
      int8x8_t v56 = (int8x8_t)v55[5];
      int8x8_t v59 = (int8x8_t)v55[2];
      int8x8_t v58 = (int8x8_t)v55[3];
      int8x8_t v60 = (int8x8_t)v55[1];
      if (v54 <= 0xFFFFFFBF)
      {
        uint64_t v61 = *((void *)&v69 + ((uint64_t)v7 >> 8) + 1);
        if (v54 > 0xFFFFFF7F)
        {
          unsigned int v62 = v7 | 0xFFFFFF00;
        }
        else
        {
          int8x8_t v56 = vext_s8(v57, v56, 4uLL);
          int8x8_t v57 = vext_s8(v58, v57, 4uLL);
          int8x8_t v58 = vext_s8(v59, v58, 4uLL);
          int8x8_t v59 = vext_s8(v60, v59, 4uLL);
          unsigned int v62 = v54 + 128;
          int8x8_t v60 = vext_s8((int8x8_t)v61, v60, 4uLL);
          if (v54 > 0xFFFFFF3F)
          {
            uint64_t v54 = (v54 + 128);
            goto LABEL_37;
          }
          uint64_t v61 = vshld_n_s64(v61, 0x20uLL);
        }
        int8x8_t v56 = vext_s8(v57, v56, 6uLL);
        int8x8_t v57 = vext_s8(v58, v57, 6uLL);
        int8x8_t v58 = vext_s8(v59, v58, 6uLL);
        int8x8_t v59 = vext_s8(v60, v59, 6uLL);
        uint64_t v54 = v62 + 64;
        int8x8_t v60 = vext_s8((int8x8_t)v61, v60, 6uLL);
      }
LABEL_37:
      sub_1D0C5C5B8(v54, v8, a1 < 0x12, a3, a4, v60, v59);
      sub_1D0C5C5B8(v54, v8, a1 < 0x12, a3, (double *)((char *)a4 + v52), v59, v58);
      sub_1D0C5C5B8(v54, v8, a1 < 0x12, a3, (double *)((char *)a4 + 2 * v52), v58, v57);
      uint64_t result = sub_1D0C5C5B8(v54, v8, a1 < 0x12, a3, (double *)((char *)a4 + 3 * v52), v57, v56);
      a4 = (double *)((char *)a4 + v65);
      v7 += v63;
      if (!--v53) {
        return result;
      }
    }
  }
  int8x16_t v12 = (int8x16_t *)(a2 + 4);
  uint64_t v9 = 7;
  uint64_t v10 = 6;
  uint64_t v11 = 5;
LABEL_6:
  long long v13 = a2[v9];
  long long v14 = a2[v10];
  long long v15 = a2[v11];
  int8x16_t v68 = *v12;
  long long v69 = v15;
  uint64_t v66 = 8 * a3;
  uint64_t v67 = 8;
  uint64_t v16 = *(&v66 + (a1 > 0x11));
  uint64_t v64 = *(&v66 + (a1 < 0x12));
  long long v70 = v14;
  long long v71 = v13;
  int v17 = 4;
  unsigned int v18 = v7;
  do
  {
    double v19 = *(double *)&v68.i64[v18 >> 8];
    double v20 = *(double *)&v68.i64[(v18 >> 8) + 1];
    double v21 = *((double *)&v68 + (v18 >> 8) + 2);
    double v22 = *((double *)&v68 + (v18 >> 8) + 3);
    double v23 = *((double *)&v68 + (v18 >> 8) + 4);
    unint64_t v24 = *((unint64_t *)&v68 + (v18 >> 8) + 5);
    double v25 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, *(int8x8_t *)&v20, 4uLL));
    double v26 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v21, 4uLL));
    double v27 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v22, 4uLL));
    double v28 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v22, *(int8x8_t *)&v23, 4uLL));
    double v29 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v23, (int8x8_t)v24, 4uLL));
    double v30 = COERCE_DOUBLE(vshrd_n_u64(v24, 0x20uLL));
    unsigned int v31 = v18 - 128;
    if (v18 < 0x80u)
    {
      unsigned int v31 = v18;
    }
    else
    {
      double v23 = v29;
      double v22 = v28;
      double v21 = v27;
      double v20 = v26;
      double v19 = v25;
      *(double *)&unint64_t v24 = v30;
    }
    double v32 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, *(int8x8_t *)&v20, 2uLL));
    double v33 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v21, 2uLL));
    double v34 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v21, *(int8x8_t *)&v22, 2uLL));
    double v35 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v22, *(int8x8_t *)&v23, 2uLL));
    double v36 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v23, (int8x8_t)v24, 2uLL));
    if (v31 >= 0x40) {
      *(double *)&int8x8_t v37 = v36;
    }
    else {
      *(double *)&int8x8_t v37 = v23;
    }
    if (v31 >= 0x40) {
      *(double *)&int8x8_t v38 = v35;
    }
    else {
      *(double *)&int8x8_t v38 = v22;
    }
    if (v31 >= 0x40) {
      *(double *)&int8x8_t v39 = v34;
    }
    else {
      *(double *)&int8x8_t v39 = v21;
    }
    if (v31 >= 0x40) {
      *(double *)&int8x8_t v40 = v33;
    }
    else {
      *(double *)&int8x8_t v40 = v20;
    }
    if (v31 < 0x40)
    {
      uint64_t v41 = v31;
    }
    else
    {
      double v19 = v32;
      uint64_t v41 = v31 - 64;
    }
    sub_1D0C59B38(v41, v7, a1 < 0x12, a3, a4, *(int8x8_t *)&v19, v40);
    sub_1D0C59B38(v41, v7, a1 < 0x12, a3, (double *)((char *)a4 + v16), v40, v39);
    sub_1D0C59B38(v41, v7, a1 < 0x12, a3, (double *)((char *)a4 + 2 * v16), v39, v38);
    uint64_t result = sub_1D0C59B38(v41, v7, a1 < 0x12, a3, (double *)((char *)a4 + 3 * v16), v38, v37);
    a4 = (double *)((char *)a4 + v64);
    v18 += 8 * v7;
    --v17;
  }
  while (v17);
  return result;
}

uint64_t sub_1D0C52140(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 2112);
  if (v2 > 1)
  {
    uint64_t v3 = *(void *)(**(void **)(a1 + 2064) + 16);
    int v4 = *(_DWORD *)(v3 + 2124);
    if (v4 >= 1)
    {
      int v5 = 0;
      int v6 = *(_DWORD *)(v3 + 2120);
      do
      {
        if (v6 >= 1)
        {
          for (int i = 0; i != v6; ++i)
          {
            int v18 = v5;
            int v19 = i;
            int v8 = sub_1D0D59AF8(a1, i, v5);
            sub_1D0CC6524(*(void *)(*(void *)(a1 + 2064) + 8 * v8), *(void *)(a1 + 2120), *(void **)(a1 + 2088), &v19, &v18);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    goto LABEL_14;
  }
  if (v2 != 1)
  {
LABEL_14:
    sub_1D0C6119C(a1, 0);
    return 0;
  }
  uint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 2064) + 8 * v9);
    uint64_t v11 = *(void *)(a1 + 2120);
    int8x16_t v12 = *(void **)(a1 + 2088);
    int v13 = *(_DWORD *)(v10 + 52);
    int v14 = *(_DWORD *)(*(void *)(v10 + 16) + 2120);
    int v18 = v13 / v14;
    int v19 = v13 % v14;
    *(void *)(v10 + 8) = v11;
    sub_1D0C60948(v10, v11);
    if (v15) {
      break;
    }
    while ((sub_1D0C5281C(v10, v12, &v19, &v18) & 1) != 0)
      ;
    if (++v9 >= *(int *)(a1 + 2112)) {
      goto LABEL_14;
    }
  }
  uint64_t v16 = v15;
  *(void *)(v10 + 8) = 0;
  if (dword_1EB671A40 >= 3)
  {
    fwrite("Error starting decode\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Error starting decode\n");
  }
  sub_1D0C6119C(a1, v16);
  return v16;
}

void *sub_1D0C522D0(int16x4_t *a1, int a2)
{
  int v2 = a1;
  if (a2 <= 16)
  {
    sub_1D0C5A3E8(a1, 0x20u, (uint64_t)&unk_1D0DAEAE0);
LABEL_12:
    unint64_t v8 = -4;
    do
    {
      uint64_t result = sub_1D0C5AF18(v2, 0x20u, (uint64_t)&unk_1D0DAEAF0);
      v8 += 4;
      v2 += 32;
    }
    while (v8 < 0x1C);
    return result;
  }
  if (a2 > 0x30)
  {
    if (a2 >= 0xA1)
    {
      unint64_t v6 = -4;
      int v7 = a1;
      do
      {
        sub_1D0C5F65C(v7);
        v6 += 4;
        ++v7;
      }
      while (v6 < 0x1C);
    }
    else
    {
      unint64_t v4 = -4;
      int v5 = a1;
      do
      {
        sub_1D0C5AFF8(v5, 0x20u, (uint64_t)&unk_1D0DAEB20, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v4 += 4;
        ++v5;
      }
      while (v4 < 0xC);
    }
  }
  else
  {
    sub_1D0C5A624(a1, 0x20u, (uint64_t)&unk_1D0DAEB00, (int16x4_t *)aZzxu);
    sub_1D0C5A624(v2 + 1, 0x20u, (uint64_t)&unk_1D0DAEB00, (int16x4_t *)aZzxu);
  }
  if (a2 <= 32) {
    goto LABEL_12;
  }
  if (a2 > 0x50)
  {
    if (a2 >= 0xE1)
    {
      unint64_t v12 = -4;
      do
      {
        uint64_t result = sub_1D0C5F3A4(v2);
        v12 += 4;
        v2 += 32;
      }
      while (v12 < 0x1C);
    }
    else
    {
      unint64_t v11 = -4;
      do
      {
        uint64_t result = sub_1D0C5B290((int16x8_t *)v2, 0x20u, (uint64_t)&unk_1D0DAEB30, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v11 += 4;
        v2 += 32;
      }
      while (v11 < 0x1C);
    }
  }
  else
  {
    unint64_t v10 = -4;
    do
    {
      uint64_t result = sub_1D0C5A7D4((int16x8_t *)v2, 0x20u, (uint64_t)&unk_1D0DAEB10, (int16x4_t *)aZzxu);
      v10 += 4;
      v2 += 32;
    }
    while (v10 < 0x1C);
  }
  return result;
}

uint64_t sub_1D0C524CC(unsigned int a1, int8x16_t *a2, uint64_t a3, double *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = byte_1D0D7FEBA[a1];
  uint64_t v8 = byte_1D0D7FEBA[a1];
  if (a1 >= 0x12)
  {
    if ((v7 & 0x80000000) == 0)
    {
      int8x16_t v9 = a2[2];
      int8x16_t v10 = a2[3];
      goto LABEL_6;
    }
    int8x16_t v26 = vqtbl1q_s8(*a2, xmmword_1D0D80000[2 * a1 - 35]);
    int8x16_t v24 = vextq_s8(v26, v26, 8uLL);
    v24.i16[3] = a2[-1].i16[7];
    v43.i64[0] = v26.i64[0];
    v43.i64[1] = v24.i64[0];
    int8x16_t v25 = a2[2];
  }
  else
  {
    if ((v8 & 0x80) == 0)
    {
      int8x16_t v9 = *a2;
      int8x16_t v10 = a2[1];
LABEL_6:
      int8x16_t v43 = v9;
      v44.i64[0] = v10.i64[0];
      int8x8_t v37 = (int8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
      int8x8_t v39 = *(int8x8_t *)v10.i8;
      uint64_t v11 = v7;
      BOOL v12 = a1 > 0x11;
      BOOL v13 = a1 < 0x12;
      v44.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
      uint64_t v41 = 4 * a3;
      uint64_t v42 = 8;
      sub_1D0C5984C(v8, v8, v13, a3, a4, *(int8x8_t *)v9.i8, v37);
      uint64_t v14 = *(&v41 + v12);
      sub_1D0C5984C(v8, v8, a1 < 0x12, a3, (double *)((char *)a4 + v14), v37, v39);
      uint64_t v15 = (double *)((char *)a4 + *(&v41 + v13));
      unint64_t v16 = (unint64_t)(5 * v11) >> 7;
      uint64_t v17 = (5 * v11) & 0x7F;
      int8x8_t v18 = *(int8x8_t *)&v43.i8[8 * v16];
      int8x8_t v19 = *(int8x8_t *)&v43.i8[8 * (v16 + 1)];
      int8x8_t v20 = *(int8x8_t *)&v43.i8[8 * (v16 + 2)];
      if (v17 >= 0x40)
      {
        int8x8_t v18 = vext_s8(v18, v19, 4uLL);
        int8x8_t v19 = vext_s8(v19, v20, 4uLL);
        int8x8_t v20 = vext_s8(v20, *(int8x8_t *)&v43.i8[8 * (v16 + 3)], 4uLL);
        uint64_t v17 = (v17 - 64);
      }
      BOOL v21 = a1 < 0x12;
      sub_1D0C5984C(v17, v8, v21, a3, v15, v18, v19);
      return sub_1D0C5984C(v17, v8, v21, a3, (double *)((char *)v15 + v14), v19, v20);
    }
    int8x16_t v23 = vqtbl1q_s8(a2[2], xmmword_1D0D80000[2 * (18 - a1) + 1]);
    int8x16_t v24 = vextq_s8(v23, v23, 8uLL);
    v24.i16[3] = a2[-1].i16[7];
    v43.i64[0] = v23.i64[0];
    v43.i64[1] = v24.i64[0];
    int8x16_t v25 = *a2;
  }
  int8x16_t v44 = v25;
  int8x8_t v38 = (int8x8_t)vextq_s8(v25, v25, 8uLL).u64[0];
  int8x8_t v40 = *(int8x8_t *)v25.i8;
  BOOL v27 = a1 > 0x11;
  BOOL v28 = a1 < 0x12;
  uint64_t v41 = 4 * a3;
  uint64_t v42 = 8;
  sub_1D0C59E3C(v7, v7, v28, a3, a4, *(int8x8_t *)v24.i8, *(int8x8_t *)v25.i8);
  uint64_t v29 = *(&v41 + v27);
  sub_1D0C59E3C(v7, v7, a1 < 0x12, a3, (double *)((char *)a4 + v29), v40, v38);
  double v30 = (double *)((char *)a4 + *(&v41 + v28));
  uint64_t v31 = (5 * v7) | 0xFFFFFF80;
  double v32 = &v43.i64[((5 * (int)v7) >> 7) + 1];
  int8x8_t v34 = (int8x8_t)v32[2];
  int8x8_t v33 = (int8x8_t)v32[3];
  int8x8_t v35 = (int8x8_t)v32[1];
  if (v31 <= 0xFFFFFFBF)
  {
    int8x8_t v33 = vext_s8(v34, v33, 4uLL);
    int8x8_t v34 = vext_s8(v35, v34, 4uLL);
    int8x8_t v35 = vext_s8((int8x8_t)v43.u64[((uint64_t)(5 * (int)v7) >> 7) + 1], v35, 4uLL);
    uint64_t v31 = (v31 + 64);
  }
  BOOL v36 = a1 < 0x12;
  sub_1D0C59E3C(v31, v7, v36, a3, v30, v35, v34);
  return sub_1D0C59E3C(v31, v7, v36, a3, (double *)((char *)v30 + v29), v34, v33);
}

uint64_t sub_1D0C5281C(uint64_t a1, void *a2, int *a3, int *a4)
{
  if (*(unsigned char *)(*(void *)(a1 + 1576) + 33)) {
    BOOL v7 = *(unsigned char *)(*(void *)(a1 + 1568) + 52) != 0;
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = *a3;
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(_DWORD *)(v9 + 1744);
  if (v10 <= *a3) {
    return 0;
  }
  int v11 = *a4;
  int v12 = *(_DWORD *)(v9 + 1748);
  if (v12 <= *a4) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  char v14 = *(unsigned char *)(v13 + 2113);
  if (*(unsigned char *)(v9 + 1752))
  {
    uint64_t v15 = (int *)(*(void *)(v9 + 1696) + 12 * v8);
    int v17 = *v15;
    int v16 = v15[1];
    int v10 = v15[2];
    int8x8_t v18 = (int *)(*(void *)(v9 + 1720) + 12 * v11);
    int v20 = *v18;
    int v19 = v18[1];
    int v12 = v18[2];
  }
  else
  {
    int v20 = 0;
    int v19 = 0;
    int v17 = 0;
    int v16 = 0;
  }
  int v21 = *(_DWORD *)(a1 + 568);
  if (v21 < 1) {
    goto LABEL_16;
  }
  if (*(unsigned char *)(v9 + 20))
  {
    int v22 = v17 - *(_DWORD *)(a1 + 2316) + *(_DWORD *)(a1 + 2328);
    if (v22 < 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!*(unsigned char *)(v9 + 21))
  {
LABEL_16:
    int v22 = 0;
    goto LABEL_17;
  }
  int v22 = v11 - *(_DWORD *)(a1 + 52) / *(_DWORD *)(v13 + 2120);
  if (v22 < 0)
  {
LABEL_18:
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Calculated substream index %d for CTB %dx%d is out of bounds (0, %d)\n", v22, v8, *a4, v21 + 1);
      syslog(27, "Calculated substream index %d for CTB %dx%d is out of bounds (0, %d)\n", v22, *a3, *a4, *(_DWORD *)(a1 + 568) + 1);
    }
    return 0;
  }
LABEL_17:
  if (v22 > v21) {
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(a1 + 2352) + 224 * v22;
  a2[4] = a1;
  a2[5] = v23;
  a2[800] = *(&off_1F26F19A0 + 2 * *(unsigned __int8 *)(v13 + 2148));
  a2[801] = 0;
  BOOL v24 = *(unsigned char *)(v13 + 408) == 0;
  if (*(unsigned char *)(v13 + 408)) {
    int8x16_t v25 = sub_1D0CC0960;
  }
  else {
    int8x16_t v25 = sub_1D0C57428;
  }
  int8x16_t v26 = sub_1D0CBF9A8;
  if (v24) {
    int8x16_t v26 = sub_1D0C5894C;
  }
  a2[796] = v25;
  a2[797] = 0;
  a2[798] = v26;
  a2[799] = 0;
  uint64_t v27 = *(void *)(a1 + 1184);
  uint64_t v28 = *(void *)(a1 + 32);
  int v29 = *(unsigned __int8 *)(v28 + 20);
  BOOL v314 = v7;
  int v318 = v12;
  int v315 = v22;
  if (*(unsigned char *)(v28 + 20))
  {
    double v30 = (_DWORD *)(v27 + 4 * (v20 + v20 * *(unsigned __int16 *)(v28 + 22) + v17));
    int v31 = *a3;
    if (!*(unsigned char *)(v28 + 21))
    {
      unint64_t v319 = v30;
LABEL_36:
      int v41 = *a4;
      goto LABEL_37;
    }
  }
  else
  {
    if (!*(unsigned char *)(v28 + 21))
    {
      unint64_t v319 = *(_DWORD **)(a1 + 1184);
      int v29 = 0;
LABEL_35:
      int v31 = *a3;
      goto LABEL_36;
    }
    double v30 = (_DWORD *)(v27 + 4 * *a4);
    int v31 = *a3;
  }
  unint64_t v319 = v30;
  if (v31) {
    goto LABEL_36;
  }
  if (*a4)
  {
    if (!*(unsigned char *)(a1 + 1385))
    {
      int v31 = 0;
      goto LABEL_36;
    }
    long long v32 = *(_OWORD *)(a1 + 1208);
    long long v33 = *(_OWORD *)(a1 + 1224);
    long long v34 = *(_OWORD *)(a1 + 1240);
    *(_OWORD *)(v23 + 88) = *(_OWORD *)(a1 + 1256);
    *(_OWORD *)(v23 + 72) = v34;
    *(_OWORD *)(v23 + 56) = v33;
    *(_OWORD *)(v23 + 40) = v32;
    long long v35 = *(_OWORD *)(a1 + 1272);
    long long v36 = *(_OWORD *)(a1 + 1288);
    long long v37 = *(_OWORD *)(a1 + 1304);
    *(_OWORD *)(v23 + 152) = *(_OWORD *)(a1 + 1320);
    *(_OWORD *)(v23 + 136) = v37;
    *(_OWORD *)(v23 + 120) = v36;
    *(_OWORD *)(v23 + 104) = v35;
    long long v38 = *(_OWORD *)(a1 + 1336);
    long long v39 = *(_OWORD *)(a1 + 1352);
    long long v40 = *(_OWORD *)(a1 + 1368);
    *(unsigned char *)(v23 + 216) = *(unsigned char *)(a1 + 1384);
    *(_OWORD *)(v23 + 200) = v40;
    *(_OWORD *)(v23 + 184) = v39;
    *(_OWORD *)(v23 + 168) = v38;
    uint64_t v28 = *(void *)(a1 + 32);
    int v29 = *(unsigned __int8 *)(v28 + 20);
    goto LABEL_35;
  }
  int v41 = 0;
  int v31 = 0;
LABEL_37:
  uint64_t v316 = (v8 << v14);
  uint64_t v322 = (v11 << v14);
  int v42 = *(_DWORD *)(*(void *)(a1 + 16) + 2120);
  int v43 = v31 + v42 * (v41 - 1);
  int v44 = v43 + 1;
  int v45 = *(_DWORD *)(a1 + 648);
  if (v31 != 0 && v31 + v42 * v41 > v45) {
    int v46 = 240;
  }
  else {
    int v46 = 0;
  }
  if (v43 >= v45) {
    v46 |= 0x1E00u;
  }
  if (v31 != 0 && v43 > v45) {
    v46 |= 0x100u;
  }
  int v47 = v46 | 0x1E000;
  if (v31 + 1 >= v42) {
    int v47 = v46;
  }
  if (v44 >= v45) {
    int v48 = v47;
  }
  else {
    int v48 = v46;
  }
  unsigned int v323 = a4;
  if (!v29)
  {
    long long v51 = v319;
    goto LABEL_67;
  }
  int v308 = v19;
  int v311 = v16;
  int v320 = v48;
  int v49 = sub_1D0C97628(v28 + 1648, v45 % v42, v45 / v42);
  if (v31)
  {
    if ((int)sub_1D0C97628(*(void *)(a1 + 32) + 1648, v31 - 1, v41) >= v49) {
      int v50 = 240;
    }
    else {
      int v50 = 0;
    }
    if (!v41) {
      goto LABEL_66;
    }
LABEL_58:
    if ((int)sub_1D0C97628(*(void *)(a1 + 32) + 1648, v31, v41 - 1) >= v49) {
      v50 |= 0x1E00u;
    }
    if (v31 && (int)sub_1D0C97628(*(void *)(a1 + 32) + 1648, v31 - 1, v41 - 1) >= v49) {
      v50 |= 0x100u;
    }
    if (v31 + 1 < *(_DWORD *)(*(void *)(a1 + 16) + 2120)
      && (int)sub_1D0C97628(*(void *)(a1 + 32) + 1648, v31 + 1, v41 - 1) >= v49)
    {
      v50 |= 0x1E000u;
    }
    goto LABEL_66;
  }
  int v50 = 0;
  if (v41) {
    goto LABEL_58;
  }
LABEL_66:
  long long v51 = v319;
  int v16 = v311;
  int v19 = v308;
  int v48 = v50 & v320;
  int v31 = *a3;
  int v41 = *v323;
  uint64_t v28 = *(void *)(a1 + 32);
  int v42 = *(_DWORD *)(*(void *)(a1 + 16) + 2120);
LABEL_67:
  if (v16 == v31) {
    int v52 = 130560;
  }
  else {
    int v52 = 131056;
  }
  if (v19 == v41) {
    v52 &= 0xF0u;
  }
  if (v10 - 1 == v31) {
    int v53 = v52 & 0x1FF0;
  }
  else {
    int v53 = v52;
  }
  __int16 v321 = v48;
  uint64_t v54 = v53 & v48;
  memset(v325, 0, 5);
  LOBYTE(v325[0]) = *v51;
  BYTE1(v325[0]) = *(unsigned char *)(v28 + 12);
  BYTE2(v325[0]) = *(unsigned char *)(a1 + 562);
  int v55 = v31 + v42 * v41;
  uint64_t v56 = *(void *)(*(void *)(a1 + 8) + 1000);
  int8x8_t v57 = (void *)(v56 + 16 * v55);
  void *v57 = 0;
  v57[1] = 0;
  if (*(unsigned char *)(a1 + 512) || *(unsigned char *)(a1 + 513))
  {
    if ((v53 & v48 & 0xF0) == 0) {
      goto LABEL_329;
    }
    unint64_t v58 = *(unsigned __int8 *)(v23 + 40);
    unint64_t v60 = *(void *)v23;
    uint64_t v59 = *(void *)(v23 + 8);
    uint64_t v61 = byte_1D0D7FCB3[(v59 & 0xC0) + (v58 >> 1)];
    LODWORD(v62) = v59 - v61;
    if (*(void *)v23 < (unint64_t)((v59 - v61) << 55)) {
      unint64_t v62 = v62;
    }
    else {
      unint64_t v62 = byte_1D0D7FCB3[(v59 & 0xC0) + (v58 >> 1)];
    }
    if (*(void *)v23 < (unint64_t)((v59 - v61) << 55))
    {
      uint64_t v63 = 0;
    }
    else
    {
      unint64_t v60 = *(void *)v23 - ((v59 - v61) << 55);
      uint64_t v63 = 1;
    }
    if (*(void *)v23 < (unint64_t)((v59 - v61) << 55)) {
      char v64 = *(unsigned char *)(v23 + 40);
    }
    else {
      char v64 = v58 + 1;
    }
    unsigned __int8 v65 = byte_1D0D7FCB3[2 * v58 + 256 + v63];
    int v66 = __clz(v62) - 55;
    unint64_t v67 = v60 << v66;
    *(void *)(v23 + 8) = v62 << v66;
    *(unsigned char *)(v23 + 40) = v65;
    uint64_t v68 = *(void *)(v23 + 16) + v66;
    if (v68 >= 0)
    {
      long long v69 = *(unsigned int **)(v23 + 24);
      unsigned int v71 = *v69;
      long long v70 = v69 + 1;
      v67 += (unint64_t)bswap32(v71) << v68;
      v68 -= 32;
      if ((unint64_t)v70 >= *(void *)(v23 + 32)) {
        long long v70 = *(unsigned int **)(v23 + 32);
      }
      *(void *)(v23 + 24) = v70;
    }
    *(void *)(v23 + 16) = v68;
    *(void *)uint64_t v23 = v67;
    if (v64)
    {
      long long v140 = *((_OWORD *)v57 - 1);
    }
    else
    {
LABEL_329:
      if ((v54 & 0x1E00) == 0) {
        goto LABEL_107;
      }
      unint64_t v72 = *(unsigned __int8 *)(v23 + 40);
      unint64_t v74 = *(void *)v23;
      uint64_t v73 = *(void *)(v23 + 8);
      uint64_t v75 = byte_1D0D7FCB3[(v73 & 0xC0) + (v72 >> 1)];
      LODWORD(v76) = v73 - v75;
      if (*(void *)v23 < (unint64_t)((v73 - v75) << 55)) {
        unint64_t v76 = v76;
      }
      else {
        unint64_t v76 = byte_1D0D7FCB3[(v73 & 0xC0) + (v72 >> 1)];
      }
      if (*(void *)v23 < (unint64_t)((v73 - v75) << 55))
      {
        uint64_t v77 = 0;
      }
      else
      {
        unint64_t v74 = *(void *)v23 - ((v73 - v75) << 55);
        uint64_t v77 = 1;
      }
      if (*(void *)v23 < (unint64_t)((v73 - v75) << 55)) {
        char v78 = *(unsigned char *)(v23 + 40);
      }
      else {
        char v78 = v72 + 1;
      }
      unsigned __int8 v79 = byte_1D0D7FCB3[2 * v72 + 256 + v77];
      int v80 = __clz(v76) - 55;
      unint64_t v81 = v74 << v80;
      *(void *)(v23 + 8) = v76 << v80;
      *(unsigned char *)(v23 + 40) = v79;
      uint64_t v82 = *(void *)(v23 + 16) + v80;
      if (v82 >= 0)
      {
        uint64_t v83 = *(unsigned int **)(v23 + 24);
        unsigned int v85 = *v83;
        uint64_t v84 = v83 + 1;
        v81 += (unint64_t)bswap32(v85) << v82;
        v82 -= 32;
        if ((unint64_t)v84 >= *(void *)(v23 + 32)) {
          uint64_t v84 = *(unsigned int **)(v23 + 32);
        }
        *(void *)(v23 + 24) = v84;
      }
      *(void *)(v23 + 16) = v82;
      *(void *)uint64_t v23 = v81;
      if ((v78 & 1) == 0)
      {
LABEL_107:
        uint64_t v86 = v55;
        if (*(unsigned char *)(a1 + 512))
        {
          unint64_t v87 = *(unsigned __int8 *)(v23 + 41);
          unint64_t v89 = *(void *)v23;
          uint64_t v88 = *(void *)(v23 + 8);
          uint64_t v90 = byte_1D0D7FCB3[(v88 & 0xC0) + (v87 >> 1)];
          LODWORD(v91) = v88 - v90;
          if (*(void *)v23 < (unint64_t)((v88 - v90) << 55)) {
            unint64_t v91 = v91;
          }
          else {
            unint64_t v91 = byte_1D0D7FCB3[(v88 & 0xC0) + (v87 >> 1)];
          }
          if (*(void *)v23 < (unint64_t)((v88 - v90) << 55))
          {
            uint64_t v92 = 0;
          }
          else
          {
            unint64_t v89 = *(void *)v23 - ((v88 - v90) << 55);
            uint64_t v92 = 1;
          }
          if (*(void *)v23 < (unint64_t)((v88 - v90) << 55)) {
            char v93 = *(unsigned char *)(v23 + 41);
          }
          else {
            char v93 = v87 + 1;
          }
          unsigned __int8 v94 = byte_1D0D7FCB3[2 * v87 + 256 + v92];
          int v95 = __clz(v91) - 55;
          unint64_t v96 = v89 << v95;
          *(void *)(v23 + 8) = v91 << v95;
          *(unsigned char *)(v23 + 41) = v94;
          uint64_t v97 = *(void *)(v23 + 16) + v95;
          if (v97 >= 0)
          {
            unint64_t v98 = *(unsigned int **)(v23 + 24);
            unsigned int v100 = *v98;
            uint64_t v99 = v98 + 1;
            v96 += (unint64_t)bswap32(v100) << v97;
            v97 -= 32;
            if ((unint64_t)v99 >= *(void *)(v23 + 32)) {
              uint64_t v99 = *(unsigned int **)(v23 + 32);
            }
            *(void *)(v23 + 24) = v99;
          }
          *(void *)(v23 + 16) = v97;
          *(void *)uint64_t v23 = v96;
          if (v93)
          {
            unsigned int v101 = *(unsigned __int8 *)(*(void *)(a1 + 2280) + 1294);
            *(unsigned char *)v57 |= 1u;
            unint64_t v103 = *(void *)v23;
            uint64_t v102 = *(void *)(v23 + 8);
            unint64_t v104 = v102 << 54;
            if (*(void *)v23 >= (unint64_t)(v102 << 54)) {
              uint64_t v105 = v102 << 54;
            }
            else {
              uint64_t v105 = 0;
            }
            uint64_t v106 = 2 * (v103 - v105);
            uint64_t v107 = *(void *)(v23 + 16);
            uint64_t v108 = v107 + 1;
            unsigned int v304 = v54;
            __int16 v306 = v53;
            unint64_t v302 = v104;
            if (v107 >= -1)
            {
              long long v109 = *(unsigned int **)(v23 + 24);
              unsigned int v111 = *v109;
              uint64_t v110 = v109 + 1;
              v106 += (unint64_t)bswap32(v111) << v108;
              uint64_t v108 = v107 - 31;
              if ((unint64_t)v110 >= *(void *)(v23 + 32)) {
                uint64_t v112 = *(unsigned int **)(v23 + 32);
              }
              else {
                uint64_t v112 = v110;
              }
              *(void *)(v23 + 24) = v112;
            }
            uint64_t v113 = 0;
            *(void *)(v23 + 16) = v108;
            *(void *)uint64_t v23 = v106;
            char v114 = *(unsigned char *)(*(void *)(a1 + 32) + 1632);
            uint64_t v309 = v86;
            uint64_t v312 = v56;
            uint64_t v115 = v56 + 16 * v86 + 1;
            do
              *(unsigned char *)(v115 + v113++) = sub_1D0C5A014((unint64_t *)v23, v101) << v114;
            while (v113 != 4);
            if (v103 >= v302)
            {
              char v141 = 0;
              unint64_t v142 = *(void *)v23;
              unint64_t v143 = *(void *)(v23 + 8) << 54;
              for (unsigned int i = 3; i > 1; --i)
              {
                BOOL v145 = v142 >= v143;
                if (v142 < v143) {
                  uint64_t v146 = 0;
                }
                else {
                  uint64_t v146 = *(void *)(v23 + 8) << 54;
                }
                unint64_t v142 = 2 * (v142 - v146);
                char v141 = v145 | (2 * v141);
              }
              uint64_t v147 = *(void *)(v23 + 16);
              uint64_t v148 = v147 + 2;
              long long v51 = v319;
              uint64_t v54 = v304;
              LOWORD(v53) = v306;
              uint64_t v86 = v309;
              uint64_t v56 = v312;
              if (v147 >= -2)
              {
                uint64_t v149 = *(unsigned int **)(v23 + 24);
                unsigned int v151 = *v149;
                int v150 = v149 + 1;
                v142 += (unint64_t)bswap32(v151) << v148;
                uint64_t v148 = v147 - 30;
                if ((unint64_t)v150 >= *(void *)(v23 + 32)) {
                  int v152 = *(unsigned int **)(v23 + 32);
                }
                else {
                  int v152 = v150;
                }
                *(void *)(v23 + 24) = v152;
              }
              *(void *)(v23 + 16) = v148;
              *(void *)uint64_t v23 = v142;
              *(unsigned char *)int8x8_t v57 = *(unsigned char *)v57 & 0xF1 | (2 * (v141 & 7));
              uint64_t v153 = v312 + 16 * v309;
              *(unsigned char *)(v153 + 3) = -*(unsigned char *)(v153 + 3);
              *(unsigned char *)(v153 + 4) = -*(unsigned char *)(v153 + 4);
            }
            else
            {
              uint64_t v116 = 0;
              *(unsigned char *)int8x8_t v57 = *(unsigned char *)v57 & 0xF1 | 8;
              uint64_t v54 = v304;
              LOWORD(v53) = v306;
              uint64_t v86 = v309;
              uint64_t v56 = v312;
              do
              {
                if (*(unsigned char *)(v115 + v116))
                {
                  unint64_t v117 = *(void *)v23;
                  uint64_t v118 = *(void *)(v23 + 8);
                  unint64_t v119 = v118 << 54;
                  if (*(void *)v23 >= (unint64_t)(v118 << 54)) {
                    uint64_t v120 = v118 << 54;
                  }
                  else {
                    uint64_t v120 = 0;
                  }
                  uint64_t v121 = 2 * (v117 - v120);
                  uint64_t v122 = *(void *)(v23 + 16);
                  uint64_t v123 = v122 + 1;
                  if (v122 >= -1)
                  {
                    v124 = *(unsigned int **)(v23 + 24);
                    unsigned int v126 = *v124;
                    int v125 = v124 + 1;
                    v121 += (unint64_t)bswap32(v126) << v123;
                    uint64_t v123 = v122 - 31;
                    if ((unint64_t)v125 >= *(void *)(v23 + 32)) {
                      int v127 = *(unsigned int **)(v23 + 32);
                    }
                    else {
                      int v127 = v125;
                    }
                    *(void *)(v23 + 24) = v127;
                  }
                  *(void *)(v23 + 16) = v123;
                  *(void *)uint64_t v23 = v121;
                  if (v117 >= v119) {
                    *(unsigned char *)(v115 + v116) = -*(unsigned char *)(v115 + v116);
                  }
                }
                ++v116;
              }
              while (v116 != 4);
              char v128 = 0;
              unint64_t v129 = *(void *)v23;
              unint64_t v130 = *(void *)(v23 + 8) << 54;
              for (unsigned int j = 6; j > 1; --j)
              {
                BOOL v132 = v129 >= v130;
                if (v129 < v130) {
                  uint64_t v133 = 0;
                }
                else {
                  uint64_t v133 = *(void *)(v23 + 8) << 54;
                }
                unint64_t v129 = 2 * (v129 - v133);
                char v128 = v132 | (2 * v128);
              }
              uint64_t v134 = *(void *)(v23 + 16);
              uint64_t v135 = v134 + 5;
              long long v51 = v319;
              if (v134 >= -5)
              {
                uint32x4_t v136 = *(unsigned int **)(v23 + 24);
                unsigned int v138 = *v136;
                unsigned int v137 = v136 + 1;
                v129 += (unint64_t)bswap32(v138) << v135;
                uint64_t v135 = v134 - 27;
                if ((unint64_t)v137 >= *(void *)(v23 + 32)) {
                  unsigned int v139 = *(unsigned int **)(v23 + 32);
                }
                else {
                  unsigned int v139 = v137;
                }
                *(void *)(v23 + 24) = v139;
              }
              *(void *)(v23 + 16) = v135;
              *(void *)uint64_t v23 = v129;
              *(unsigned char *)(v312 + 16 * v309 + 13) = v128;
            }
          }
        }
        if (*(unsigned char *)(a1 + 513))
        {
          unint64_t v154 = *(unsigned __int8 *)(v23 + 41);
          unint64_t v156 = *(void *)v23;
          uint64_t v155 = *(void *)(v23 + 8);
          uint64_t v157 = byte_1D0D7FCB3[(v155 & 0xC0) + (v154 >> 1)];
          LODWORD(v158) = v155 - v157;
          if (*(void *)v23 < (unint64_t)((v155 - v157) << 55)) {
            unint64_t v158 = v158;
          }
          else {
            unint64_t v158 = byte_1D0D7FCB3[(v155 & 0xC0) + (v154 >> 1)];
          }
          if (*(void *)v23 < (unint64_t)((v155 - v157) << 55))
          {
            uint64_t v159 = 0;
          }
          else
          {
            unint64_t v156 = *(void *)v23 - ((v155 - v157) << 55);
            uint64_t v159 = 1;
          }
          if (*(void *)v23 < (unint64_t)((v155 - v157) << 55)) {
            char v160 = *(unsigned char *)(v23 + 41);
          }
          else {
            char v160 = v154 + 1;
          }
          unsigned __int8 v161 = byte_1D0D7FCB3[2 * v154 + 256 + v159];
          int v162 = __clz(v158) - 55;
          unint64_t v163 = v156 << v162;
          *(void *)(v23 + 8) = v158 << v162;
          *(unsigned char *)(v23 + 41) = v161;
          uint64_t v164 = *(void *)(v23 + 16) + v162;
          if (v164 >= 0)
          {
            unsigned __int8 v165 = *(unsigned int **)(v23 + 24);
            unsigned int v167 = *v165;
            uint64_t v166 = v165 + 1;
            v163 += (unint64_t)bswap32(v167) << v164;
            v164 -= 32;
            if ((unint64_t)v166 >= *(void *)(v23 + 32)) {
              uint64_t v166 = *(unsigned int **)(v23 + 32);
            }
            *(void *)(v23 + 24) = v166;
          }
          *(void *)(v23 + 16) = v164;
          *(void *)uint64_t v23 = v163;
          if (v160)
          {
            unsigned int v168 = *(unsigned __int8 *)(*(void *)(a1 + 2280) + 1295);
            *(unsigned char *)v57 |= 0x10u;
            unint64_t v170 = *(void *)v23;
            uint64_t v169 = *(void *)(v23 + 8);
            unint64_t v171 = v169 << 54;
            if (*(void *)v23 >= (unint64_t)(v169 << 54)) {
              uint64_t v172 = v169 << 54;
            }
            else {
              uint64_t v172 = 0;
            }
            uint64_t v173 = 2 * (v170 - v172);
            uint64_t v174 = *(void *)(v23 + 16);
            uint64_t v175 = v174 + 1;
            unsigned int v305 = v54;
            __int16 v307 = v53;
            unint64_t v303 = v171;
            if (v174 >= -1)
            {
              int v176 = *(unsigned int **)(v23 + 24);
              unsigned int v178 = *v176;
              int v177 = v176 + 1;
              v173 += (unint64_t)bswap32(v178) << v175;
              uint64_t v175 = v174 - 31;
              if ((unint64_t)v177 >= *(void *)(v23 + 32)) {
                int v179 = *(unsigned int **)(v23 + 32);
              }
              else {
                int v179 = v177;
              }
              *(void *)(v23 + 24) = v179;
            }
            uint64_t v180 = 0;
            *(void *)(v23 + 16) = v175;
            *(void *)uint64_t v23 = v173;
            char v181 = *(unsigned char *)(*(void *)(a1 + 32) + 1633);
            uint64_t v310 = v86;
            uint64_t v313 = v56;
            uint64_t v182 = v56 + 16 * v86 + 5;
            do
              *(unsigned char *)(v182 + v180++) = sub_1D0C5A014((unint64_t *)v23, v168) << v181;
            while (v180 != 4);
            if (v170 >= v303)
            {
              char v236 = 0;
              unint64_t v237 = *(void *)v23;
              unint64_t v238 = *(void *)(v23 + 8) << 54;
              for (unsigned int k = 3; k > 1; --k)
              {
                BOOL v240 = v237 >= v238;
                if (v237 < v238) {
                  uint64_t v241 = 0;
                }
                else {
                  uint64_t v241 = *(void *)(v23 + 8) << 54;
                }
                unint64_t v237 = 2 * (v237 - v241);
                char v236 = v240 | (2 * v236);
              }
              uint64_t v242 = *(void *)(v23 + 16);
              uint64_t v243 = v242 + 2;
              LOWORD(v53) = v307;
              if (v242 >= -2)
              {
                unsigned int v244 = *(unsigned int **)(v23 + 24);
                unsigned int v246 = *v244;
                unint64_t v245 = v244 + 1;
                v237 += (unint64_t)bswap32(v246) << v243;
                uint64_t v243 = v242 - 30;
                if ((unint64_t)v245 >= *(void *)(v23 + 32)) {
                  uint64_t v247 = *(unsigned int **)(v23 + 32);
                }
                else {
                  uint64_t v247 = v245;
                }
                *(void *)(v23 + 24) = v247;
              }
              uint64_t v248 = 0;
              *(void *)(v23 + 16) = v243;
              *(void *)uint64_t v23 = v237;
              *(unsigned char *)int8x8_t v57 = *(unsigned char *)v57 & 0x1F | (32 * v236);
              do
                *(unsigned char *)(v313 + 16 * v310 + 9 + v248++) = sub_1D0C5A014((unint64_t *)v23, v168) << v181;
              while (v248 != 4);
              unsigned int v249 = (unsigned char *)(v313 + 16 * v310);
              v249[7] = -v249[7];
              v249[8] = -v249[8];
              v249[11] = -v249[11];
              v249[12] = -v249[12];
              long long v51 = v319;
              uint64_t v54 = v305;
            }
            else
            {
              uint64_t v183 = 0;
              *(unsigned char *)int8x8_t v57 = *(unsigned char *)v57 & 0x1F | 0x80;
              uint64_t v184 = v313 + 16 * v310 + 5;
              do
              {
                if (*(unsigned char *)(v184 + v183))
                {
                  unint64_t v185 = *(void *)v23;
                  uint64_t v186 = *(void *)(v23 + 8);
                  unint64_t v187 = v186 << 54;
                  if (*(void *)v23 >= (unint64_t)(v186 << 54)) {
                    uint64_t v188 = v186 << 54;
                  }
                  else {
                    uint64_t v188 = 0;
                  }
                  uint64_t v189 = 2 * (v185 - v188);
                  uint64_t v190 = *(void *)(v23 + 16);
                  uint64_t v191 = v190 + 1;
                  if (v190 >= -1)
                  {
                    uint64_t v192 = *(unsigned int **)(v23 + 24);
                    unsigned int v194 = *v192;
                    uint64_t v193 = v192 + 1;
                    v189 += (unint64_t)bswap32(v194) << v191;
                    uint64_t v191 = v190 - 31;
                    if ((unint64_t)v193 >= *(void *)(v23 + 32)) {
                      unsigned __int8 v195 = *(unsigned int **)(v23 + 32);
                    }
                    else {
                      unsigned __int8 v195 = v193;
                    }
                    *(void *)(v23 + 24) = v195;
                  }
                  *(void *)(v23 + 16) = v191;
                  *(void *)uint64_t v23 = v189;
                  if (v185 >= v187) {
                    *(unsigned char *)(v184 + v183) = -*(unsigned char *)(v184 + v183);
                  }
                }
                ++v183;
              }
              while (v183 != 4);
              char v196 = 0;
              unint64_t v197 = *(void *)v23;
              unint64_t v198 = *(void *)(v23 + 8) << 54;
              for (unsigned int m = 6; m > 1; --m)
              {
                BOOL v200 = v197 >= v198;
                if (v197 < v198) {
                  uint64_t v201 = 0;
                }
                else {
                  uint64_t v201 = *(void *)(v23 + 8) << 54;
                }
                unint64_t v197 = 2 * (v197 - v201);
                char v196 = v200 | (2 * v196);
              }
              uint64_t v202 = v313 + 16 * v310;
              uint64_t v203 = *(void *)(v23 + 16);
              uint64_t v204 = v203 + 5;
              LOWORD(v53) = v307;
              if (v203 >= -5)
              {
                uint64_t v205 = *(unsigned int **)(v23 + 24);
                unsigned int v207 = *v205;
                int v206 = v205 + 1;
                v197 += (unint64_t)bswap32(v207) << v204;
                uint64_t v204 = v203 - 27;
                if ((unint64_t)v206 >= *(void *)(v23 + 32)) {
                  uint64_t v208 = *(unsigned int **)(v23 + 32);
                }
                else {
                  uint64_t v208 = v206;
                }
                *(void *)(v23 + 24) = v208;
              }
              uint64_t v209 = 0;
              *(void *)(v23 + 16) = v204;
              *(void *)uint64_t v23 = v197;
              uint64_t v210 = v202 + 9;
              *(unsigned char *)(v202 + 14) = v196;
              do
                *(unsigned char *)(v210 + v209++) = sub_1D0C5A014((unint64_t *)v23, v168) << v181;
              while (v209 != 4);
              uint64_t v211 = 0;
              uint64_t v212 = v313 + 16 * v310 + 9;
              long long v51 = v319;
              uint64_t v54 = v305;
              do
              {
                if (*(unsigned char *)(v212 + v211))
                {
                  unint64_t v213 = *(void *)v23;
                  uint64_t v214 = *(void *)(v23 + 8);
                  unint64_t v215 = v214 << 54;
                  if (*(void *)v23 >= (unint64_t)(v214 << 54)) {
                    uint64_t v216 = v214 << 54;
                  }
                  else {
                    uint64_t v216 = 0;
                  }
                  uint64_t v217 = 2 * (v213 - v216);
                  uint64_t v218 = *(void *)(v23 + 16);
                  uint64_t v219 = v218 + 1;
                  if (v218 >= -1)
                  {
                    char v220 = *(unsigned int **)(v23 + 24);
                    unsigned int v222 = *v220;
                    uint64_t v221 = v220 + 1;
                    v217 += (unint64_t)bswap32(v222) << v219;
                    uint64_t v219 = v218 - 31;
                    if ((unint64_t)v221 >= *(void *)(v23 + 32)) {
                      uint64_t v223 = *(unsigned int **)(v23 + 32);
                    }
                    else {
                      uint64_t v223 = v221;
                    }
                    *(void *)(v23 + 24) = v223;
                  }
                  *(void *)(v23 + 16) = v219;
                  *(void *)uint64_t v23 = v217;
                  if (v213 >= v215) {
                    *(unsigned char *)(v212 + v211) = -*(unsigned char *)(v212 + v211);
                  }
                }
                ++v211;
              }
              while (v211 != 4);
              char v224 = 0;
              unint64_t v225 = *(void *)v23;
              unint64_t v226 = *(void *)(v23 + 8) << 54;
              for (unsigned int n = 6; n > 1; --n)
              {
                BOOL v228 = v225 >= v226;
                if (v225 < v226) {
                  uint64_t v229 = 0;
                }
                else {
                  uint64_t v229 = *(void *)(v23 + 8) << 54;
                }
                unint64_t v225 = 2 * (v225 - v229);
                char v224 = v228 | (2 * v224);
              }
              uint64_t v230 = *(void *)(v23 + 16);
              uint64_t v231 = v230 + 5;
              if (v230 >= -5)
              {
                uint64_t v232 = *(unsigned int **)(v23 + 24);
                unsigned int v234 = *v232;
                uint64_t v233 = v232 + 1;
                v225 += (unint64_t)bswap32(v234) << v231;
                uint64_t v231 = v230 - 27;
                if ((unint64_t)v233 >= *(void *)(v23 + 32)) {
                  unint64_t v235 = *(unsigned int **)(v23 + 32);
                }
                else {
                  unint64_t v235 = v233;
                }
                *(void *)(v23 + 24) = v235;
              }
              *(void *)(v23 + 16) = v231;
              *(void *)uint64_t v23 = v225;
              *(unsigned char *)(v313 + 16 * v310 + 15) = v224;
            }
          }
        }
        goto LABEL_260;
      }
      long long v140 = *(_OWORD *)&v57[-2 * v42];
    }
    *(_OWORD *)int8x8_t v57 = v140;
  }
LABEL_260:
  int v250 = sub_1D0C53AD4(a1, v23, (uint64_t)a2, v316, v322, *(unsigned __int8 *)(*(void *)(a1 + 16) + 2113), 0, v54, (unsigned __int8 *)v325);
  *long long v51 = SLOBYTE(v325[0]);
  if (*(unsigned char *)(a1 + 564))
  {
    uint64_t v251 = *(void *)(a1 + 16);
    unint64_t v252 = *(unsigned __int8 *)(v251 + 2117);
    if (*(unsigned char *)(v251 + 2117))
    {
      unsigned int v253 = 0;
      int v254 = *(void **)(a1 + 8);
      unint64_t v255 = (char *)(v254[121] + v254[117] * ((uint64_t)(int)v316 >> 3) + ((int)v322 >> 2));
      char v256 = (char *)(v254[118] + v254[116] * ((uint64_t)(int)v322 >> 3) + ((int)v316 >> 2));
      do
      {
        bzero(v256, v252 >> 2);
        bzero(v255, v252 >> 2);
        uint64_t v257 = *(void *)(a1 + 8);
        v256 += *(void *)(v257 + 928);
        v255 += *(void *)(v257 + 936);
        v253 += 8;
      }
      while (v253 < v252);
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 567)) {
      sub_1D0C5CAB8(a1, v316, v322, v321);
    }
    uint64_t v258 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v258 + 20) && !*(unsigned char *)(v258 + 27)) {
      sub_1D0C5CAB8(a1, v316, v322, v53);
    }
  }
  uint64_t v259 = *(void *)(a1 + 32);
  int v260 = *a3;
  if (*(unsigned char *)(v259 + 21)) {
    BOOL v261 = v260 == 1;
  }
  else {
    BOOL v261 = 0;
  }
  if (v261)
  {
    long long v262 = *(_OWORD *)(v23 + 40);
    long long v263 = *(_OWORD *)(v23 + 56);
    long long v264 = *(_OWORD *)(v23 + 88);
    *(_OWORD *)(a1 + 1240) = *(_OWORD *)(v23 + 72);
    *(_OWORD *)(a1 + 1256) = v264;
    *(_OWORD *)(a1 + 1208) = v262;
    *(_OWORD *)(a1 + 1224) = v263;
    long long v265 = *(_OWORD *)(v23 + 104);
    long long v266 = *(_OWORD *)(v23 + 120);
    long long v267 = *(_OWORD *)(v23 + 152);
    *(_OWORD *)(a1 + 1304) = *(_OWORD *)(v23 + 136);
    *(_OWORD *)(a1 + 1320) = v267;
    *(_OWORD *)(a1 + 1272) = v265;
    *(_OWORD *)(a1 + 1288) = v266;
    long long v268 = *(_OWORD *)(v23 + 168);
    long long v269 = *(_OWORD *)(v23 + 184);
    long long v270 = *(_OWORD *)(v23 + 200);
    *(unsigned char *)(a1 + 1384) = *(unsigned char *)(v23 + 216);
    *(_OWORD *)(a1 + 1352) = v269;
    *(_OWORD *)(a1 + 1368) = v270;
    *(_OWORD *)(a1 + 1336) = v268;
    *(unsigned char *)(a1 + 1385) = 1;
    int v260 = *a3;
  }
  uint64_t v271 = *(void *)(a1 + 2280);
  if (*(unsigned char *)(v271 + 2052))
  {
    uint64_t v272 = *(void *)(v271 + 1152);
    unsigned int v273 = *(void (**)(void *, uint64_t))(v271 + 1144);
    int v274 = (void *)(v271 + (v272 >> 1) + 1128);
    if (v272) {
      unsigned int v273 = *(void (**)(void *, uint64_t))(*v274 + v273);
    }
    v273(v274, a1);
    int v260 = *a3;
    uint64_t v259 = *(void *)(a1 + 32);
  }
  int v275 = v260 + 1;
  *a3 = v260 + 1;
  if (*(unsigned char *)(v259 + 20))
  {
    int v276 = *(_DWORD *)(a1 + 2320);
    uint64_t v277 = *(void *)(a1 + 16);
    if (v275 >= v10 && v275 < *(_DWORD *)(v277 + 2120) && v315 >= *(_DWORD *)(a1 + 568))
    {
      ++*v323;
      *a3 = v276;
      int v275 = v276;
    }
  }
  else
  {
    int v276 = 0;
    uint64_t v277 = *(void *)(a1 + 16);
  }
  if (v275 >= *(_DWORD *)(v277 + 2120))
  {
    int v278 = (*v323 + 1) << *(unsigned char *)(v277 + 2113);
    int v279 = *(_DWORD *)(*(void *)(a1 + 8) + 524);
    BOOL v280 = v279 <= v278;
    if (v279 < v278) {
      int v278 = *(_DWORD *)(*(void *)(a1 + 8) + 524);
    }
    int v281 = !v280;
    unsigned int v324 = v278 - v281;
    uint64_t v282 = *(void *)(a1 + 2280);
    if (*(unsigned char *)(v282 + 2052))
    {
      unsigned int v324 = *(_DWORD *)(v282 + 1248);
    }
    else if (*(unsigned char *)(v282 + 2051))
    {
      uint64_t v283 = v282 + 1128;
      BOOL v284 = *(void (**)(void *, uint64_t, unsigned int *))(v282 + 1128);
      uint64_t v285 = *(void *)(v282 + 1136);
      int v286 = (void *)(v283 + (v285 >> 1));
      if (v285) {
        BOOL v284 = *(void (**)(void *, uint64_t, unsigned int *))(*v286 + v284);
      }
      v284(v286, a1, &v324);
      uint64_t v282 = *(void *)(a1 + 2280);
    }
    sub_1D0C5E1EC((int *)(v282 + 1264), a1, *(unsigned __int8 *)(v282 + 2050), (int *)&v324);
    if (v314) {
      sub_1D0CD81DC(*(void *)(a1 + 2280) + 1128, *(void *)(a1 + 8), *(unsigned char *)(a1 + 653), (int *)&v324);
    }
    uint64_t v287 = *(void *)(a1 + 8);
    atomic_store(v324, (unsigned int *)(v287 + 1032));
    std::condition_variable::notify_all((std::condition_variable *)(v287 + 1104));
    ++*v323;
    *a3 = v276;
  }
  if (*v323 >= v318)
  {
    *a3 = 0;
    if (v315 < *(_DWORD *)(a1 + 568))
    {
      *(_DWORD *)(a1 + 2328) = v315 + 1;
      if (!sub_1D0C61118(*(void *)(a1 + 32) + 1648, *a3, *v323, a1 + 2304)) {
        goto LABEL_311;
      }
      return 0;
    }
    if (dword_1EB671A40 > 3) {
      int v288 = v250;
    }
    else {
      int v288 = 0;
    }
    if (v288 == 1)
    {
      fwrite("More data is signalled, but we don't know where to put it\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(28, "More data is signalled, but we don't know where to put it\n");
    }
    int v250 = 0;
  }
LABEL_311:
  uint64_t v289 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v289 + 2) && (v250 & 1) == 0)
  {
    long long v290 = *(_OWORD *)(v23 + 40);
    long long v291 = *(_OWORD *)(v23 + 56);
    long long v292 = *(_OWORD *)(v23 + 88);
    *(_OWORD *)(a1 + 1418) = *(_OWORD *)(v23 + 72);
    *(_OWORD *)(a1 + 1434) = v292;
    *(_OWORD *)(a1 + 1386) = v290;
    *(_OWORD *)(a1 + 1402) = v291;
    long long v293 = *(_OWORD *)(v23 + 104);
    long long v294 = *(_OWORD *)(v23 + 120);
    long long v295 = *(_OWORD *)(v23 + 152);
    *(_OWORD *)(a1 + 1482) = *(_OWORD *)(v23 + 136);
    *(_OWORD *)(a1 + 1498) = v295;
    *(_OWORD *)(a1 + 1450) = v293;
    *(_OWORD *)(a1 + 1466) = v294;
    long long v296 = *(_OWORD *)(v23 + 168);
    long long v297 = *(_OWORD *)(v23 + 184);
    long long v298 = *(_OWORD *)(v23 + 200);
    *(unsigned char *)(a1 + 1562) = *(unsigned char *)(v23 + 216);
    *(_OWORD *)(a1 + 1530) = v297;
    *(_OWORD *)(a1 + 1546) = v298;
    *(_OWORD *)(a1 + 1514) = v296;
  }
  if (*v323 < *(_DWORD *)(*(void *)(a1 + 16) + 2124)) {
    int v299 = v250;
  }
  else {
    int v299 = 0;
  }
  if (v299 != 1) {
    return 0;
  }
  if (!*(unsigned char *)(v289 + 21) || *a3) {
    return 1;
  }
  uint64_t v300 = 1;
  if (!sub_1D0C5B210((uint64_t *)v23) && dword_1EB671A40 >= 3)
  {
    uint64_t v300 = 1;
    fwrite("end_of_sub_stream_one_bit is not 1\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "end_of_sub_stream_one_bit is not 1\n");
  }
  return v300;
}

uint64_t sub_1D0C53AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, unsigned __int8 *a9)
{
  int v12 = (void *)a1;
  uint64_t v445 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(void *)(a1 + 8);
  int v14 = *(_DWORD *)(v13 + 520);
  int v15 = *(_DWORD *)(v13 + 524);
  uint64_t v16 = (1 << a6);
  int v17 = v16 + a5;
  int v18 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 2112);
  int v19 = v18 < a6;
  if ((int)v16 + (int)a4 <= v14 && v17 <= v15 && v18 < a6)
  {
    BOOL v22 = (a8 & 0xF0) != 0
       && (*(_WORD *)(*(void *)(v13 + 776)
                    + 2 * (*(void *)(v13 + 768) * ((uint64_t)(int)a5 >> 3) + (((int)a4 - (int)v16) >> 3))) & 3) > a7;
    BOOL v23 = (a8 & 0x1E00) != 0
       && (*(_WORD *)(*(void *)(v13 + 776)
                    + 2 * (*(void *)(v13 + 768) * ((uint64_t)((int)a5 - (int)v16) >> 3) + ((int)a4 >> 3))) & 3) > a7;
    uint64_t v24 = a2 + v23 + v22;
    unint64_t v25 = *(unsigned __int8 *)(v24 + 42);
    uint64_t v27 = *(void *)a2;
    uint64_t v26 = *(void *)(a2 + 8);
    uint64_t v28 = byte_1D0D7FCB3[(v26 & 0xC0) + (v25 >> 1)];
    LODWORD(v29) = v26 - v28;
    if (*(void *)a2 < (unint64_t)((v26 - v28) << 55)) {
      unint64_t v29 = v29;
    }
    else {
      unint64_t v29 = byte_1D0D7FCB3[(v26 & 0xC0) + (v25 >> 1)];
    }
    if (*(void *)a2 < (unint64_t)((v26 - v28) << 55))
    {
      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v27 = *(void *)a2 - ((v26 - v28) << 55);
      uint64_t v30 = 1;
    }
    if (*(void *)a2 < (unint64_t)((v26 - v28) << 55)) {
      char v31 = *(unsigned char *)(v24 + 42);
    }
    else {
      char v31 = v25 + 1;
    }
    unsigned __int8 v32 = byte_1D0D7FCB3[2 * v25 + 256 + v30];
    int v33 = __clz(v29) - 55;
    uint64_t v34 = v27 << v33;
    *(void *)(a2 + 8) = v29 << v33;
    *(unsigned char *)(v24 + 42) = v32;
    uint64_t v35 = *(void *)(a2 + 16) + v33;
    if (v35 >= 0)
    {
      long long v36 = *(unsigned int **)(a2 + 24);
      unsigned int v38 = *v36;
      long long v37 = v36 + 1;
      v34 += (unint64_t)bswap32(v38) << v35;
      v35 -= 32;
      if ((unint64_t)v37 >= *(void *)(a2 + 32)) {
        long long v37 = *(unsigned int **)(a2 + 32);
      }
      *(void *)(a2 + 24) = v37;
    }
    *(void *)(a2 + 16) = v35;
    *(void *)a2 = v34;
    int v19 = v31 & 1;
  }
  int v39 = (char)*a9;
  uint64_t v40 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v40 + 12))
  {
    int v41 = *(_DWORD *)(v40 + 1636);
    if (v41 <= a6)
    {
      uint64_t v42 = *(void *)(a1 + 16);
      if (*(unsigned __int8 *)(v42 + 2113) - a7 > v41) {
        LOBYTE(v41) = *(unsigned char *)(v42 + 2113) - a7;
      }
      int v43 = -1 << v41;
      int v44 = *(unsigned __int8 *)(v42 + 2117) - 1;
      int v45 = (-1 << v41) & a4;
      int v46 = v43 & a5;
      int v47 = (char)*a9;
      if ((v45 & v44) != 0) {
        int v47 = *(__int16 *)(*(void *)(*(void *)(a1 + 8) + 776)
      }
                         + 2 * (*(void *)(*(void *)(a1 + 8) + 768) * ((uint64_t)v46 >> 3) + ((v45 - 1) >> 3))) >> 9;
      if ((v46 & v44) != 0) {
        int v39 = *(__int16 *)(*(void *)(*(void *)(a1 + 8) + 776)
      }
                         + 2 * (*(void *)(*(void *)(a1 + 8) + 768) * ((uint64_t)(v46 - 1) >> 3) + (v45 >> 3))) >> 9;
      int v39 = (v47 + v39 + 1) >> 1;
      a9[1] = 1;
    }
  }
  if (*(unsigned char *)(a1 + 562) && *(_DWORD *)(v40 + 1640) <= a6) {
    a9[2] = 1;
  }
  uint64_t v432 = a4;
  if (!v19)
  {
    uint64_t v53 = (uint64_t)(int)a5 >> 3;
    uint64_t v54 = (__int16 *)(*(void *)(*(void *)(a1 + 8) + 776)
                    + 2 * (*(void *)(*(void *)(a1 + 8) + 768) * v53 + ((int)a4 >> 3)));
    __int16 v55 = a7 & 3 | ((_WORD)v39 << 9);
    *uint64_t v54 = v55;
    __int16 v56 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 19);
    if (*(unsigned char *)(*(void *)(a1 + 32) + 19))
    {
      unint64_t v57 = *(unsigned __int8 *)(a2 + 45);
      uint64_t v59 = *(void *)a2;
      uint64_t v58 = *(void *)(a2 + 8);
      uint64_t v60 = byte_1D0D7FCB3[(v58 & 0xC0) + (v57 >> 1)];
      LODWORD(v61) = v58 - v60;
      if (*(void *)a2 < (unint64_t)((v58 - v60) << 55)) {
        unint64_t v61 = v61;
      }
      else {
        unint64_t v61 = byte_1D0D7FCB3[(v58 & 0xC0) + (v57 >> 1)];
      }
      if (*(void *)a2 < (unint64_t)((v58 - v60) << 55))
      {
        uint64_t v62 = 0;
      }
      else
      {
        uint64_t v59 = *(void *)a2 - ((v58 - v60) << 55);
        uint64_t v62 = 1;
      }
      if (*(void *)a2 < (unint64_t)((v58 - v60) << 55)) {
        char v63 = *(unsigned char *)(a2 + 45);
      }
      else {
        char v63 = v57 + 1;
      }
      unsigned __int8 v64 = byte_1D0D7FCB3[2 * v57 + 256 + v62];
      int v65 = __clz(v61) - 55;
      uint64_t v66 = v59 << v65;
      *(void *)(a2 + 8) = v61 << v65;
      *(unsigned char *)(a2 + 45) = v64;
      uint64_t v67 = *(void *)(a2 + 16) + v65;
      if (v67 >= 0)
      {
        uint64_t v68 = *(unsigned int **)(a2 + 24);
        unsigned int v70 = *v68;
        long long v69 = v68 + 1;
        v66 += (unint64_t)bswap32(v70) << v67;
        v67 -= 32;
        if ((unint64_t)v69 >= *(void *)(a2 + 32)) {
          long long v69 = *(unsigned int **)(a2 + 32);
        }
        *(void *)(a2 + 24) = v69;
      }
      *(void *)(a2 + 16) = v67;
      *(void *)a2 = v66;
      __int16 v56 = (v63 & 1) << 8;
      __int16 v55 = *v54;
    }
    __int16 v71 = v55 & 0xFEFF | v56;
    *uint64_t v54 = v71;
    if (*(unsigned char *)(a1 + 58) == 2)
    {
      __int16 v72 = v71 & 0xFF7F;
    }
    else
    {
      if ((a8 & 0xF0) != 0) {
        unsigned int v73 = (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 8) + 776)
      }
                                   + 2 * (*(void *)(*(void *)(a1 + 8) + 768) * v53 + (((int)a4 - 1) >> 3))) >> 7) & 1;
      else {
        unsigned int v73 = 0;
      }
      if ((a8 & 0x1E00) != 0) {
        unsigned int v74 = (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 8) + 776)
      }
                                   + 2
                                   * (((uint64_t)(int)a4 >> 3)
                                    + *(void *)(*(void *)(a1 + 8) + 768) * ((uint64_t)((int)a5 - 1) >> 3))) >> 7) & 1;
      else {
        unsigned int v74 = 0;
      }
      unint64_t v75 = a2 + v74 + (unint64_t)v73;
      unint64_t v76 = *(unsigned __int8 *)(v75 + 46);
      uint64_t v78 = *(void *)a2;
      uint64_t v77 = *(void *)(a2 + 8);
      uint64_t v79 = byte_1D0D7FCB3[(v77 & 0xC0) + (v76 >> 1)];
      LODWORD(v80) = v77 - v79;
      if (*(void *)a2 < (unint64_t)((v77 - v79) << 55)) {
        unint64_t v80 = v80;
      }
      else {
        unint64_t v80 = byte_1D0D7FCB3[(v77 & 0xC0) + (v76 >> 1)];
      }
      if (*(void *)a2 < (unint64_t)((v77 - v79) << 55))
      {
        uint64_t v81 = 0;
      }
      else
      {
        uint64_t v78 = *(void *)a2 - ((v77 - v79) << 55);
        uint64_t v81 = 1;
      }
      if (*(void *)a2 < (unint64_t)((v77 - v79) << 55)) {
        char v82 = *(unsigned char *)(v75 + 46);
      }
      else {
        char v82 = v76 + 1;
      }
      unsigned __int8 v83 = byte_1D0D7FCB3[2 * v76 + 256 + v81];
      int v84 = __clz(v80) - 55;
      uint64_t v85 = v78 << v84;
      *(void *)(a2 + 8) = v80 << v84;
      *(unsigned char *)(v75 + 46) = v83;
      uint64_t v86 = *(void *)(a2 + 16) + v84;
      if (v86 >= 0)
      {
        unint64_t v87 = *(unsigned int **)(a2 + 24);
        unsigned int v89 = *v87;
        uint64_t v88 = v87 + 1;
        v85 += (unint64_t)bswap32(v89) << v86;
        v86 -= 32;
        if ((unint64_t)v88 >= *(void *)(a2 + 32)) {
          uint64_t v88 = *(unsigned int **)(a2 + 32);
        }
        *(void *)(a2 + 24) = v88;
      }
      *(void *)(a2 + 16) = v86;
      *(void *)a2 = v85;
      __int16 v72 = *v54 & 0xFF7F | ((v82 & 1) << 7);
    }
    *uint64_t v54 = v72;
    int v430 = v16 + a4;
    uint64_t v426 = a5;
    int v427 = v54;
    if ((v72 & 0x80) != 0)
    {
      sub_1D0CC5A30(a1, a2, (long long *)(*(void *)(*(void *)(a1 + 8) + 856)+ 12 * (*(void *)(*(void *)(a1 + 8) + 848) * ((uint64_t)(int)a5 >> 2) + ((int)a4 >> 2))), a4, a5, 1 << a6, v16, a8, a8, a7, 1);
      goto LABEL_359;
    }
    uint64_t v422 = (uint64_t)(int)a4 >> 3;
    uint64_t v424 = (uint64_t)(int)a5 >> 3;
    int v425 = v16 + a5;
    if (*(unsigned char *)(a1 + 58) != 2)
    {
      unint64_t v90 = *(unsigned __int8 *)(a2 + 51);
      uint64_t v91 = *(void *)a2;
      unint64_t v92 = *(void *)(a2 + 8) - byte_1D0D7FCB3[(*(void *)(a2 + 8) & 0xC0) + (v90 >> 1)];
      BOOL v93 = *(void *)a2 >= v92 << 55;
      unint64_t v94 = *(void *)a2 - (v92 << 55);
      if (*(void *)a2 < v92 << 55) {
        unint64_t v92 = v92;
      }
      else {
        unint64_t v92 = byte_1D0D7FCB3[(*(void *)(a2 + 8) & 0xC0) + (v90 >> 1)];
      }
      if (v93)
      {
        uint64_t v91 = v94;
        uint64_t v95 = 1;
      }
      else
      {
        uint64_t v95 = 0;
      }
      if (v93) {
        char v96 = v90 + 1;
      }
      else {
        char v96 = *(unsigned char *)(a2 + 51);
      }
      unsigned __int8 v97 = byte_1D0D7FCB3[2 * v90 + 256 + v95];
      int v98 = __clz(v92) - 55;
      unint64_t v99 = v92 << v98;
      unint64_t v100 = v91 << v98;
      *(void *)(a2 + 8) = v99;
      *(unsigned char *)(a2 + 51) = v97;
      uint64_t v101 = *(void *)(a2 + 16) + v98;
      if (v101 >= 0)
      {
        uint64_t v102 = *(unsigned int **)(a2 + 24);
        unsigned int v104 = *v102;
        unint64_t v103 = v102 + 1;
        v100 += (unint64_t)bswap32(v104) << v101;
        v101 -= 32;
        if ((unint64_t)v103 >= *(void *)(a2 + 32)) {
          unint64_t v103 = *(unsigned int **)(a2 + 32);
        }
        *(void *)(a2 + 24) = v103;
      }
      *(void *)(a2 + 16) = v101;
      *(void *)a2 = v100;
      if ((v96 & 1) == 0)
      {
        uint64_t v105 = 0;
        uint64_t v106 = *(void *)(a1 + 16);
        int v107 = *(unsigned __int8 *)(v106 + 2112);
        int v108 = *(unsigned __int8 *)(v106 + 276);
        if (v107 != a6 || a6 <= 3) {
          uint64_t v110 = 2;
        }
        else {
          uint64_t v110 = 3;
        }
        while (1)
        {
          unint64_t v111 = *(unsigned __int8 *)(a2 + v105 + 52);
          uint64_t v112 = byte_1D0D7FCB3[(v99 & 0xC0) + (v111 >> 1)];
          unint64_t v113 = v99 - v112;
          BOOL v114 = v100 >= v113 << 55;
          unint64_t v115 = v100 - (v113 << 55);
          if (v100 < v113 << 55) {
            unint64_t v113 = v113;
          }
          else {
            unint64_t v113 = v112;
          }
          if (v114)
          {
            unint64_t v100 = v115;
            uint64_t v116 = 1;
          }
          else
          {
            uint64_t v116 = 0;
          }
          if (v114) {
            char v117 = v111 + 1;
          }
          else {
            char v117 = *(unsigned char *)(a2 + v105 + 52);
          }
          unsigned __int8 v118 = byte_1D0D7FCB3[2 * v111 + 256 + v116];
          int v119 = __clz(v113) - 55;
          unint64_t v99 = v113 << v119;
          v100 <<= v119;
          *(void *)(a2 + 8) = v99;
          *(unsigned char *)(a2 + v105 + 52) = v118;
          v101 += v119;
          if (v101 >= 0)
          {
            uint64_t v120 = *(unsigned int **)(a2 + 24);
            unsigned int v122 = *v120;
            uint64_t v121 = v120 + 1;
            v100 += (unint64_t)bswap32(v122) << v101;
            v101 -= 32;
            if ((unint64_t)v121 >= *(void *)(a2 + 32)) {
              uint64_t v121 = *(unsigned int **)(a2 + 32);
            }
            *(void *)(a2 + 24) = v121;
          }
          *(void *)(a2 + 16) = v101;
          *(void *)a2 = v100;
          if (v117) {
            break;
          }
          if (v110 == ++v105) {
            goto LABEL_166;
          }
        }
        LODWORD(v110) = v105;
LABEL_166:
        if (v107 >= a6 || !v108) {
          goto LABEL_315;
        }
        if (v110 == 2)
        {
          unint64_t v193 = *(unsigned __int8 *)(a2 + 55);
          uint64_t v194 = byte_1D0D7FCB3[(v99 & 0xC0) + (v193 >> 1)];
          LODWORD(v195) = v99 - v194;
          BOOL v196 = v100 >= (v99 - v194) << 55;
          if (v100 < (v99 - v194) << 55) {
            unint64_t v195 = v195;
          }
          else {
            unint64_t v195 = byte_1D0D7FCB3[(v99 & 0xC0) + (v193 >> 1)];
          }
          if (v100 < (v99 - v194) << 55)
          {
            uint64_t v197 = 0;
          }
          else
          {
            v100 -= (v99 - v194) << 55;
            uint64_t v197 = 1;
          }
          if (v196) {
            char v198 = v193 + 1;
          }
          else {
            char v198 = *(unsigned char *)(a2 + 55);
          }
          unsigned __int8 v199 = byte_1D0D7FCB3[2 * v193 + 256 + v197];
          int v200 = __clz(v195);
          int v201 = v200 - 55;
          unint64_t v202 = v195 << (v200 - 55);
          unint64_t v203 = v100 << v201;
          *(void *)(a2 + 8) = v202;
          *(unsigned char *)(a2 + 55) = v199;
          uint64_t v204 = v101 + v201;
          if (v204 >= 0)
          {
            uint64_t v205 = *(unsigned int **)(a2 + 24);
            unsigned int v207 = *v205;
            int v206 = v205 + 1;
            v203 += (unint64_t)bswap32(v207) << v204;
            v204 -= 32;
            if ((unint64_t)v206 >= *(void *)(a2 + 32)) {
              int v206 = *(unsigned int **)(a2 + 32);
            }
            *(void *)(a2 + 24) = v206;
          }
          *(void *)(a2 + 16) = v204;
          *(void *)a2 = v203;
          if ((v198 & 1) == 0)
          {
            unint64_t v208 = v202 << 54;
            if (v203 >= v202 << 54) {
              unint64_t v209 = v202 << 54;
            }
            else {
              unint64_t v209 = 0;
            }
            uint64_t v210 = 2 * (v203 - v209);
            uint64_t v211 = v204 + 1;
            if (v204 >= -1)
            {
              uint64_t v212 = *(unsigned int **)(a2 + 24);
              unsigned int v214 = *v212;
              unint64_t v213 = v212 + 1;
              v210 += (unint64_t)bswap32(v214) << v211;
              uint64_t v211 = v204 - 31;
              if ((unint64_t)v213 >= *(void *)(a2 + 32)) {
                unint64_t v215 = *(unsigned int **)(a2 + 32);
              }
              else {
                unint64_t v215 = v213;
              }
              *(void *)(a2 + 24) = v215;
            }
            *(void *)(a2 + 16) = v211;
            *(void *)a2 = v210;
            BOOL v191 = v203 >= v208;
            int v192 = 6;
            goto LABEL_216;
          }
          LODWORD(v110) = 2;
        }
        else if (v110 == 1)
        {
          unint64_t v168 = *(unsigned __int8 *)(a2 + 55);
          uint64_t v169 = byte_1D0D7FCB3[(v99 & 0xC0) + (v168 >> 1)];
          LODWORD(v170) = v99 - v169;
          BOOL v171 = v100 >= (v99 - v169) << 55;
          if (v100 < (v99 - v169) << 55) {
            unint64_t v170 = v170;
          }
          else {
            unint64_t v170 = byte_1D0D7FCB3[(v99 & 0xC0) + (v168 >> 1)];
          }
          if (v100 < (v99 - v169) << 55)
          {
            uint64_t v172 = 0;
          }
          else
          {
            v100 -= (v99 - v169) << 55;
            uint64_t v172 = 1;
          }
          if (v171) {
            char v173 = v168 + 1;
          }
          else {
            char v173 = *(unsigned char *)(a2 + 55);
          }
          unsigned __int8 v174 = byte_1D0D7FCB3[2 * v168 + 256 + v172];
          int v175 = __clz(v170);
          int v176 = v175 - 55;
          unint64_t v177 = v170 << (v175 - 55);
          unint64_t v178 = v100 << v176;
          *(void *)(a2 + 8) = v177;
          *(unsigned char *)(a2 + 55) = v174;
          uint64_t v179 = v101 + v176;
          if (v179 >= 0)
          {
            uint64_t v180 = *(unsigned int **)(a2 + 24);
            unsigned int v182 = *v180;
            char v181 = v180 + 1;
            v178 += (unint64_t)bswap32(v182) << v179;
            v179 -= 32;
            if ((unint64_t)v181 >= *(void *)(a2 + 32)) {
              char v181 = *(unsigned int **)(a2 + 32);
            }
            *(void *)(a2 + 24) = v181;
          }
          *(void *)(a2 + 16) = v179;
          *(void *)a2 = v178;
          if ((v173 & 1) == 0)
          {
            unint64_t v183 = v177 << 54;
            if (v178 >= v177 << 54) {
              unint64_t v184 = v177 << 54;
            }
            else {
              unint64_t v184 = 0;
            }
            uint64_t v185 = 2 * (v178 - v184);
            uint64_t v186 = v179 + 1;
            if (v179 >= -1)
            {
              unint64_t v187 = *(unsigned int **)(a2 + 24);
              unsigned int v189 = *v187;
              uint64_t v188 = v187 + 1;
              v185 += (unint64_t)bswap32(v189) << v186;
              uint64_t v186 = v179 - 31;
              if ((unint64_t)v188 >= *(void *)(a2 + 32)) {
                uint64_t v190 = *(unsigned int **)(a2 + 32);
              }
              else {
                uint64_t v190 = v188;
              }
              *(void *)(a2 + 24) = v190;
            }
            *(void *)(a2 + 16) = v186;
            *(void *)a2 = v185;
            BOOL v191 = v178 >= v183;
            int v192 = 4;
LABEL_216:
            if (v191) {
              LODWORD(v110) = v192 + 1;
            }
            else {
              LODWORD(v110) = v192;
            }
            goto LABEL_315;
          }
          LODWORD(v110) = 1;
        }
LABEL_315:
        uint64_t v325 = *(void *)(a1 + 8);
        uint64_t v326 = *(void *)(v325 + 848);
        unint64_t v327 = (long long *)(*(void *)(v325 + 856) + 12 * (v326 * ((uint64_t)(int)a5 >> 2) + ((int)a4 >> 2)));
        int v328 = (int)v16 >> 1;
        int v329 = (int)v16 >> 3;
        unsigned int v330 = a4 + ((int)v16 >> 1);
        unsigned int v331 = a5 + ((int)v16 >> 1);
        if ((a8 & 0xF0) != 0) {
          int v332 = 15;
        }
        else {
          int v332 = 0;
        }
        int v333 = a8 | (((a8 & 0xF0) != 0) << 8);
        if ((a8 & 0x1E00) != 0) {
          int v335 = 122880;
        }
        else {
          int v335 = 0;
        }
        int v334 = (a8 & 0x1E00) != 0;
        int v336 = (int)v16 >> 2;
        int v337 = (int)v16 >> 4;
        int v338 = v332 | a8 & 0x1FFF0;
        switch((int)v110)
        {
          case 0:
            int v17 = v16 + a5;
            if ((sub_1D0CC5A30(a1, a2, v327, a4, a5, 1 << a6, v16, a8, a8, a7, 0) & 1) == 0) {
              goto LABEL_336;
            }
            goto LABEL_350;
          case 1:
            int __ba = v333 | 0x1E00;
            unsigned int v414 = v327;
            unsigned int v339 = a4;
            unsigned int v405 = a5 + ((int)v16 >> 1);
            sub_1D0CC5A30(a1, a2, v327, a4, a5, 1 << a6, (int)v16 >> 1, v338, a8, a7, 0);
            int v340 = (long long *)((char *)v414 + 12 * v326 * v329);
            unint64_t v401 = __PAIR64__(a7, a8);
            uint64_t v341 = (uint64_t)v12;
            uint64_t v342 = a2;
            unsigned int v343 = v339;
            int v345 = (int)v16 >> 1;
            unsigned int v344 = v405;
            int v346 = v16;
            goto LABEL_333;
          case 2:
            unsigned int v347 = v327;
            unsigned int v348 = a5;
            int __ba = a8 & 0x1FE00 | (v334 << 8) | 0xF0;
            unsigned int v407 = a4 + ((int)v16 >> 1);
            sub_1D0CC5A30(a1, a2, v327, a4, a5, (int)v16 >> 1, v16, v335 & 0xFFFFE000 | a8 & 0x1FFF, a8, a7, 0);
            int v340 = (long long *)((char *)v347 + 12 * v329);
            unint64_t v401 = __PAIR64__(a7, a8);
            uint64_t v341 = (uint64_t)v12;
            uint64_t v342 = a2;
            unsigned int v343 = v407;
            unsigned int v344 = v348;
            int v346 = (int)v16 >> 1;
            goto LABEL_332;
          case 4:
            unsigned int __bc = v331 - v336;
            v409 = (long long *)((char *)v327 + 12 * v326 * v337);
            int v352 = v333 | 0x1E00;
            unsigned int v353 = a4;
            sub_1D0CC5A30(a1, a2, v327, a4, a5, 1 << a6, (int)v16 >> 2, v338, a8, a7, 0);
            int v345 = 3 * v336;
            unint64_t v401 = __PAIR64__(a7, a8);
            uint64_t v341 = (uint64_t)v12;
            uint64_t v342 = a2;
            int v340 = v409;
            unsigned int v343 = v353;
            unsigned int v344 = __bc;
            int v346 = v16;
            goto LABEL_329;
          case 5:
            unsigned int __bd = v331 + v336;
            unsigned int v410 = (long long *)((char *)v327 + 12 * v326 * 3 * v337);
            int v352 = v333 | 0x1E00;
            unsigned int v354 = a4;
            sub_1D0CC5A30(a1, a2, v327, a4, a5, 1 << a6, 3 * v336, v338, a8, a7, 0);
            unint64_t v401 = __PAIR64__(a7, a8);
            uint64_t v341 = (uint64_t)v12;
            uint64_t v342 = a2;
            int v340 = v410;
            unsigned int v343 = v354;
            unsigned int v344 = __bd;
            int v346 = v16;
            int v345 = (int)v16 >> 2;
LABEL_329:
            int v355 = v352;
            goto LABEL_334;
          case 6:
            unsigned int v411 = v330 - v336;
            unsigned int v415 = v327;
            unsigned int v356 = a5;
            int __ba = a8 & 0x1FE00 | (v334 << 8) | 0xF0;
            sub_1D0CC5A30(a1, a2, v327, a4, a5, (int)v16 >> 2, v16, v335 & 0xFFFFE000 | a8 & 0x1FFF, a8, a7, 0);
            int v340 = (long long *)((char *)v415 + 12 * v337);
            int v346 = 3 * v336;
            unint64_t v401 = __PAIR64__(a7, a8);
            uint64_t v341 = (uint64_t)v12;
            uint64_t v342 = a2;
            unsigned int v343 = v411;
            unsigned int v344 = v356;
            goto LABEL_332;
          case 7:
            unsigned int v412 = v330 + v336;
            unsigned int v416 = v327;
            unsigned int v357 = a5;
            int __ba = a8 & 0x1FE00 | (v334 << 8) | 0xF0;
            sub_1D0CC5A30(a1, a2, v327, a4, a5, 3 * v336, v16, v335 & 0xFFFFE000 | a8 & 0x1FFF, a8, a7, 0);
            int v340 = (long long *)((char *)v416 + 36 * v337);
            unint64_t v401 = __PAIR64__(a7, a8);
            uint64_t v341 = (uint64_t)v12;
            uint64_t v342 = a2;
            unsigned int v343 = v412;
            unsigned int v344 = v357;
            int v346 = (int)v16 >> 2;
LABEL_332:
            int v345 = v16;
LABEL_333:
            int v355 = __ba;
LABEL_334:
            sub_1D0CC5A30(v341, v342, v340, v343, v344, v346, v345, v355, v401, SHIDWORD(v401), 0);
            break;
          default:
            int v403 = v333 | 0x1FE00;
            unsigned int v402 = (long long *)((char *)v327 + 12 * v329 * v326);
            unsigned int v349 = v327;
            unsigned int v350 = a5;
            int v351 = (int)v16 >> 1;
            int __bb = a8 & 0x1FE00 | (v334 << 8) | 0xF0;
            unsigned int v406 = v331;
            unsigned int v408 = v330;
            sub_1D0CC5A30(a1, a2, v327, a4, a5, v351, v328, v332 | a8 & 0x1FF0 | v335, a8, a7, 0);
            sub_1D0CC5A30((uint64_t)v12, a2, (long long *)((char *)v349 + 12 * v329), v408, v350, v351, v351, __bb, a8, a7, 0);
            sub_1D0CC5A30((uint64_t)v12, a2, v402, v432, v406, v351, v351, v403, a8, a7, 0);
            sub_1D0CC5A30((uint64_t)v12, a2, (long long *)((char *)v402 + 12 * v329), v408, v406, v351, v351, 8176, a8, a7, 0);
            break;
        }
        int v17 = v425;
LABEL_336:
        unint64_t v358 = *(unsigned __int8 *)(a2 + 70);
        uint64_t v360 = *(void *)a2;
        uint64_t v359 = *(void *)(a2 + 8);
        uint64_t v361 = byte_1D0D7FCB3[(v359 & 0xC0) + (v358 >> 1)];
        LODWORD(v362) = v359 - v361;
        if (*(void *)a2 < (unint64_t)((v359 - v361) << 55)) {
          unint64_t v362 = v362;
        }
        else {
          unint64_t v362 = byte_1D0D7FCB3[(v359 & 0xC0) + (v358 >> 1)];
        }
        if (*(void *)a2 < (unint64_t)((v359 - v361) << 55))
        {
          uint64_t v363 = 0;
        }
        else
        {
          uint64_t v360 = *(void *)a2 - ((v359 - v361) << 55);
          uint64_t v363 = 1;
        }
        if (*(void *)a2 < (unint64_t)((v359 - v361) << 55)) {
          char v364 = *(unsigned char *)(a2 + 70);
        }
        else {
          char v364 = v358 + 1;
        }
        unsigned __int8 v365 = byte_1D0D7FCB3[2 * v358 + 256 + v363];
        int v366 = __clz(v362) - 55;
        uint64_t v367 = v360 << v366;
        *(void *)(a2 + 8) = v362 << v366;
        *(unsigned char *)(a2 + 70) = v365;
        uint64_t v368 = *(void *)(a2 + 16) + v366;
        if (v368 >= 0)
        {
          unsigned int v369 = *(unsigned int **)(a2 + 24);
          unsigned int v371 = *v369;
          unint64_t v370 = v369 + 1;
          v367 += (unint64_t)bswap32(v371) << v368;
          v368 -= 32;
          if ((unint64_t)v370 >= *(void *)(a2 + 32)) {
            unint64_t v370 = *(unsigned int **)(a2 + 32);
          }
          *(void *)(a2 + 24) = v370;
        }
        *(void *)(a2 + 16) = v368;
        *(void *)a2 = v367;
        if ((v364 & 1) == 0) {
          goto LABEL_359;
        }
LABEL_350:
        uint64_t v372 = *(void *)(a3 + 32);
        *(_DWORD *)a3 = a6;
        *(_DWORD *)(a3 + 4) = 3;
        *(_DWORD *)(a3 + 8) = v110;
        int v373 = *(unsigned __int8 **)(v372 + 16);
        unsigned int v374 = (a6 - v373[2114]) & ~((a6 - v373[2114]) >> 31);
        if (v374 >= v373[272]) {
          unsigned int v374 = v373[272];
        }
        *(_DWORD *)(a3 + 12) = v374;
        *(void *)(a3 + 48) = *(void *)(*(void *)(v372 + 8) + 776)
                             + 2 * (v422 + *(void *)(*(void *)(v372 + 8) + 768) * v424);
        *(void *)(a3 + 24) = a9;
        int v375 = v373[201];
        __p[0] = (void *)a6;
        LODWORD(__p[1]) = a8;
        int v376 = *(void (**)(void *, uint64_t, uint64_t, void, uint64_t, uint64_t, void **))(a3 + 6400);
        uint64_t v377 = *(void *)(a3 + 6408);
        int v378 = (void *)(a3 + (v377 >> 1));
        if (v377) {
          int v376 = *(void (**)(void *, uint64_t, uint64_t, void, uint64_t, uint64_t, void **))(*v378 + v376);
        }
        if (v375) {
          uint64_t v379 = 3;
        }
        else {
          uint64_t v379 = 0;
        }
        v376(v378, v432, v426, 0, a8, v379, __p);
        goto LABEL_358;
      }
    }
    uint64_t v123 = *(unsigned char **)(a1 + 16);
    if (v123[2112] == a6)
    {
      unint64_t v124 = *(unsigned __int8 *)(a2 + 52);
      uint64_t v126 = *(void *)a2;
      uint64_t v125 = *(void *)(a2 + 8);
      uint64_t v127 = byte_1D0D7FCB3[(v125 & 0xC0) + (v124 >> 1)];
      LODWORD(v128) = v125 - v127;
      if (*(void *)a2 < (unint64_t)((v125 - v127) << 55)) {
        unint64_t v128 = v128;
      }
      else {
        unint64_t v128 = byte_1D0D7FCB3[(v125 & 0xC0) + (v124 >> 1)];
      }
      if (*(void *)a2 < (unint64_t)((v125 - v127) << 55))
      {
        uint64_t v129 = 0;
      }
      else
      {
        uint64_t v126 = *(void *)a2 - ((v125 - v127) << 55);
        uint64_t v129 = 1;
      }
      if (*(void *)a2 < (unint64_t)((v125 - v127) << 55)) {
        char v130 = *(unsigned char *)(a2 + 52);
      }
      else {
        char v130 = v124 + 1;
      }
      unsigned __int8 v131 = byte_1D0D7FCB3[2 * v124 + 256 + v129];
      int v132 = __clz(v128) - 55;
      uint64_t v133 = v126 << v132;
      *(void *)(a2 + 8) = v128 << v132;
      *(unsigned char *)(a2 + 52) = v131;
      uint64_t v134 = *(void *)(a2 + 16) + v132;
      if (v134 >= 0)
      {
        uint64_t v135 = *(unsigned int **)(a2 + 24);
        unsigned int v137 = *v135;
        uint32x4_t v136 = v135 + 1;
        v133 += (unint64_t)bswap32(v137) << v134;
        v134 -= 32;
        if ((unint64_t)v136 >= *(void *)(a2 + 32)) {
          uint32x4_t v136 = *(unsigned int **)(a2 + 32);
        }
        *(void *)(a2 + 24) = v136;
      }
      *(void *)(a2 + 16) = v134;
      *(void *)a2 = v133;
      if (v130) {
        int v138 = 0;
      }
      else {
        int v138 = 3;
      }
      uint64_t v123 = *(unsigned char **)(a1 + 16);
    }
    else
    {
      int v138 = 0;
    }
    if (v123[278] && !v138 && v123[286] <= a6 && v123[287] >= a6)
    {
      int v139 = sub_1D0C5B210((uint64_t *)a2);
      *uint64_t v54 = *v54 & 0xFFF3 | (4 * (v139 != 0));
      uint64_t v123 = (unsigned char *)v12[2];
      if (v139)
      {
        long long v140 = v12;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v439 = 0;
        uint64_t v440 = 0;
        uint64_t v441 = 0;
        uint64_t v442 = 0;
        unsigned int v141 = v123[2148];
        BOOL v142 = v141 < 3;
        BOOL v143 = v141 < 2;
        int v144 = v123[284] << (2 * a6);
        uint64_t v145 = v123[285] << (2 * a6 - (v141 < 2) - (v141 < 3) + 1);
        if (!v141) {
          uint64_t v145 = 0;
        }
        unint64_t v146 = v145 + v144 + 7;
        uint64_t v147 = *(void *)(a2 + 24);
        uint64_t v148 = (unsigned int *)(v147 + ((*(void *)(a2 + 16) - 16) >> 3));
        if (*(void *)(a2 + 32) - (void)v148 >= v146 >> 3
          && (uint64_t v149 = v146 >> 3, sub_1D0C60F00(a2, (unsigned __int8 *)v148 + (v146 >> 3)), v147))
        {
          sub_1D0C4CAD0((uint64_t)__p, v148, v149);
          int v12 = v140;
          (*(void (**)(void **, uint64_t, void))(v140[285] + 528))(__p, v16, *(unsigned __int8 *)(v140[2] + 284));
          uint64_t v150 = v140[2];
          if (*(unsigned char *)(v150 + 2148)) {
            (*(void (**)(void **, void, void, void))(v140[285] + 536))(__p, (1 << (a6 - v142)), (1 << (a6 - v143)), *(unsigned __int8 *)(v150 + 285));
          }
          unsigned int v151 = (void *)v140[1];
          int8x8_t v152 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(void *)&vdup_n_s32((2 << a6) - 64));
          uint64_t v153 = v151[117];
          uint64_t v154 = (uint64_t)(int)v426 >> 2;
          uint64_t v155 = v151[121];
          uint64_t v156 = v151[116];
          uint64_t v157 = (uint64_t)(int)v432 >> 2;
          uint64_t v158 = v151[118];
          if ((int)v16 >= 5)
          {
            uint64_t v159 = v157 + v156 * v424;
            int8x8_t v160 = vmax_s8(*(int8x8_t *)(v158 + v159), v152);
            *(int8x8_t *)(v155 + v154 + v153 * v422) = vmax_s8(*(int8x8_t *)(v155 + v154 + v153 * v422), v152);
            *(int8x8_t *)(v158 + v159) = v160;
          }
          uint64_t v161 = v157 + v156 * ((uint64_t)v425 >> 3);
          uint64_t v162 = v154 + v153 * ((uint64_t)v430 >> 3);
          int8x8_t v163 = vmax_s8(*(int8x8_t *)(v155 + v162), v152);
          int8x8_t v164 = vmax_s8(*(int8x8_t *)(v158 + v161), v152);
          *(int8x8_t *)(v155 + v162) = v163;
          *(int8x8_t *)(v158 + v161) = v164;
          uint64_t v165 = v140[1];
          if (*(unsigned char *)(v165 + 712))
          {
            uint64_t v166 = (void *)(a3 + ((int)((*(unsigned __int8 *)(v140[2] + 2117) - 1) & v432) >> 2) + 6352);
            int v167 = 1;
            memset((void *)(*(void *)(v165 + 688) + v154), 1, (uint64_t)(int)v16 >> 2);
            memset(v166, 1, (uint64_t)(int)v16 >> 2);
LABEL_393:
            char v216 = 0;
            goto LABEL_394;
          }
          uint64_t v396 = *(void *)(v165 + 856) + 12 * (v157 + *(void *)(v165 + 848) * v154);
          int v167 = 1;
          *(unsigned char *)(v396 + 10) = 1;
          *(_WORD *)(v396 + 8) = -1;
          *(unsigned char *)uint64_t v396 = 1;
          if ((int)v16 < 4) {
            goto LABEL_393;
          }
          int v397 = 0;
          long long v398 = *(_OWORD *)v396;
          uint64_t v399 = 12 * *(void *)(v140[1] + 848);
          do
          {
            uint64_t v400 = 0;
            do
            {
              *(_OWORD *)(v396 + v400) = v398;
              v400 += 12;
            }
            while (12 * (v16 >> 2) != v400);
            ++v397;
            v396 += v399;
          }
          while (v397 != v16 >> 2);
          char v216 = 0;
          int v167 = 1;
        }
        else if (dword_1EB671A40 < 3)
        {
          int v167 = 0;
          char v216 = 1;
          int v12 = v140;
        }
        else
        {
          char v216 = 1;
          fwrite("Ran out of bits for PCM\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "Ran out of bits for PCM\n");
          int v12 = v140;
          int v167 = 0;
        }
LABEL_394:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        int v17 = v425;
        if (v216)
        {
          int v380 = v430;
          if (!v167) {
            return 0;
          }
          goto LABEL_376;
        }
LABEL_359:
        int v380 = v430;
        if (a9[1])
        {
          LOWORD(v381) = *a9;
          uint64_t v382 = v12[2];
          int v383 = *(unsigned __int8 *)(v382 + 2113) - a7;
          if (v383 <= *(_DWORD *)(v12[4] + 1636)) {
            LOBYTE(v383) = *(_DWORD *)(v12[4] + 1636);
          }
          int v387 = -1 << v383;
          int v384 = *(unsigned __int8 *)(v382 + 2117) - 1;
          int v385 = v387 & v432;
          int v386 = v387 & v426;
          LOWORD(v387) = *a9;
          if ((v385 & v384) != 0) {
            int v387 = *(__int16 *)(*(void *)(v12[1] + 776)
          }
                              + 2 * (*(void *)(v12[1] + 768) * ((uint64_t)v386 >> 3) + ((v385 - 1) >> 3))) >> 9;
          if ((v386 & v384) != 0) {
            int v381 = *(__int16 *)(*(void *)(v12[1] + 776)
          }
                              + 2 * (*(void *)(v12[1] + 768) * ((uint64_t)(v386 - 1) >> 3) + (v385 >> 3))) >> 9;
          __int16 v388 = (((_WORD)v387 + (_WORD)v381) << 8) + 256;
          *int v427 = v388 & 0xFE00 | *v427 & 0x1FF;
          int v389 = *(_DWORD *)(v12[4] + 1636);
          if ((v430 & ~(-1 << v389)) == 0 && v389 <= a6 && (v17 & ~(-1 << v389)) == 0) {
            *a9 = v388 >> 9;
          }
        }
        uint64_t v390 = *(void *)(v12[1] + 768);
        int16x8_t v391 = vld1q_dup_s16(v427);
        int v392 = *(unsigned __int8 *)(v12[2] + 2113) - a7;
        switch(v392)
        {
          case 6:
            *(int16x8_t *)int v427 = v391;
            *(int16x8_t *)&v427[v390] = v391;
            *(int16x8_t *)&v427[2 * v390] = v391;
            *(int16x8_t *)&v427[3 * v390] = v391;
            *(int16x8_t *)&v427[4 * v390] = v391;
            *(int16x8_t *)&v427[5 * v390] = v391;
            *(int16x8_t *)&v427[6 * v390] = v391;
            *(int16x8_t *)&v427[7 * v390] = v391;
            break;
          case 5:
            *(void *)int v427 = v391.i64[0];
            *(void *)&v427[v390] = v391.i64[0];
            *(void *)&v427[2 * v390] = v391.i64[0];
            *(void *)&v427[3 * v390] = v391.i64[0];
            break;
          case 4:
            *(_DWORD *)int v427 = v391.i32[0];
            *(_DWORD *)&v427[v390] = v391.i32[0];
            break;
        }
LABEL_376:
        int v393 = *(unsigned __int8 *)(v12[2] + 2117) - 1;
        BOOL v394 = (v393 & v380) != 0 && v380 != *(_DWORD *)(v12[1] + 520);
        BOOL v395 = (v393 & v17) != 0 && v17 != *(_DWORD *)(v12[1] + 524);
        return v394 || v395 || sub_1D0C5B210((uint64_t *)a2) == 0;
      }
      a4 = v432;
      a5 = v426;
    }
    uint64_t v217 = (unsigned char *)(a3 + 6417);
    uint64_t v218 = *(void *)(a3 + 32);
    *(_DWORD *)a3 = a6;
    *(_DWORD *)(a3 + 4) = 1;
    *(_DWORD *)(a3 + 8) = v138;
    int v219 = *(unsigned __int8 *)(*(void *)(v218 + 16) + 273);
    if (v138) {
      ++v219;
    }
    *(_DWORD *)(a3 + 12) = v219;
    int v220 = v123[2117] - 1;
    int v221 = v220 & a4;
    int v222 = v220 & a5;
    int v223 = 1 << (a6 - 3);
    char v224 = (unsigned __int8 *)(a3 + (v221 >> 2) + 6352);
    uint64_t v225 = v12[1];
    unint64_t v226 = (char *)(*(void *)(v225 + 688) + ((int)a5 >> 2));
    int v227 = *(unsigned __int8 *)(v225 + 712);
    __b = v226;
    if (*(unsigned char *)(v225 + 712))
    {
      if (v222 < 1)
      {
        int v228 = 1;
        int v229 = 1;
      }
      else
      {
        int v228 = *v224;
        int v229 = v224[v223];
      }
      if ((a8 & 0xF0) != 0)
      {
        uint64_t v233 = 0;
        uint64_t v238 = *v226;
        uint64_t v239 = v226[v223];
        goto LABEL_239;
      }
      uint64_t v233 = 0;
    }
    else
    {
      uint64_t v230 = *(void *)(v225 + 848);
      uint64_t v231 = v230 * ((uint64_t)(int)a5 >> 2);
      uint64_t v232 = *(void *)(v225 + 856);
      uint64_t v233 = (unsigned __int8 *)(v232 + 12 * (v231 + ((int)a4 >> 2)));
      if (v222 >= 1
        && (uint64_t v234 = ((uint64_t)(int)a4 >> 2) + v230 * ((uint64_t)((int)a5 - 1) >> 2), *(unsigned char *)(v232 + 12 * v234 + 10) == 1))
      {
        unint64_t v235 = (unsigned __int8 *)(v232 + 12 * v234);
        int v228 = *v235;
        int v229 = v235[12 * v223];
      }
      else
      {
        int v228 = 1;
        int v229 = 1;
      }
      if ((a8 & 0xF0) != 0)
      {
        uint64_t v236 = v231 + (((int)a4 - 1) >> 2);
        if (*(unsigned char *)(v232 + 12 * v236 + 10) == 1)
        {
          unint64_t v237 = (unsigned __int8 *)(v232 + 12 * v236);
          uint64_t v238 = *v237;
          uint64_t v239 = v237[12 * v230 * v223];
          goto LABEL_239;
        }
      }
    }
    uint64_t v238 = 1;
    uint64_t v239 = 1;
LABEL_239:
    __int32 v431 = a8;
    if (v138 == 3)
    {
      uint64_t v240 = *(void *)(v225 + 848);
      v443.i64[0] = (uint64_t)v233;
      v443.i64[1] = (uint64_t)&v233[12 * v223];
      v444.i64[0] = (uint64_t)&v233[12 * v223 * v240];
      v444.i64[1] = v444.i64[0] + 12 * v223;
      if (v227)
      {
        int64x2_t v241 = vdupq_n_s64((unint64_t)__p);
        int8x16_t v443 = vorrq_s8((int8x16_t)v241, (int8x16_t)xmmword_1D0D7F250);
        int64x2_t v444 = vaddq_s64(v241, (int64x2_t)xmmword_1D0D7F260);
        uint64_t v233 = (unsigned __int8 *)v443.i64[0];
      }
      uint64_t v242 = 0;
      char v413 = a6 - 1;
      uint64_t v404 = v223;
      unint64_t v243 = *(unsigned __int8 *)(a2 + 56);
      unint64_t v244 = *(void *)a2;
      unint64_t v245 = *(void *)(a2 + 8);
      do
      {
        uint64_t v246 = byte_1D0D7FCB3[(v245 & 0xC0) + (v243 >> 1)];
        unint64_t v247 = v245 - v246;
        BOOL v248 = v244 >= v247 << 55;
        unint64_t v249 = v244 - (v247 << 55);
        if (v244 < v247 << 55) {
          unint64_t v247 = v247;
        }
        else {
          unint64_t v247 = v246;
        }
        if (v248)
        {
          unint64_t v244 = v249;
          uint64_t v250 = 1;
        }
        else
        {
          uint64_t v250 = 0;
        }
        if (v248) {
          char v251 = v243 + 1;
        }
        else {
          char v251 = v243;
        }
        LOBYTE(v243) = byte_1D0D7FCB3[2 * v243 + 256 + v250];
        int v252 = __clz(v247) - 55;
        unint64_t v245 = v247 << v252;
        v244 <<= v252;
        *(void *)(a2 + 8) = v245;
        *(unsigned char *)(a2 + 56) = v243;
        uint64_t v253 = *(void *)(a2 + 16) + v252;
        if (v253 >= 0)
        {
          int v254 = *(unsigned int **)(a2 + 24);
          unsigned int v256 = *v254;
          unint64_t v255 = v254 + 1;
          v244 += (unint64_t)bswap32(v256) << v253;
          v253 -= 32;
          if ((unint64_t)v255 >= *(void *)(a2 + 32)) {
            unint64_t v255 = *(unsigned int **)(a2 + 32);
          }
          *(void *)(a2 + 24) = v255;
        }
        unint64_t v243 = v243;
        *(void *)(a2 + 16) = v253;
        *(void *)a2 = v244;
        v434[v242++] = v251 & 1;
      }
      while (v242 != 4);
      unsigned __int8 v257 = sub_1D0C57204((unint64_t *)a2, v228, v238, v434[0]);
      *uint64_t v233 = v257;
      char v258 = sub_1D0C57204((unint64_t *)a2, v229, v257, v434[1]);
      uint64_t v259 = (unsigned __int8 *)v443.i64[1];
      *(unsigned char *)v443.i64[1] = v258;
      unsigned __int8 v260 = sub_1D0C57204((unint64_t *)a2, *v233, v239, v434[2]);
      BOOL v261 = (unsigned __int8 *)v444.i64[0];
      *(unsigned char *)v444.i64[0] = v260;
      char v262 = sub_1D0C57204((unint64_t *)a2, *v259, v260, v434[3]);
      long long v263 = (unsigned __int8 *)v444.i64[1];
      *(unsigned char *)v444.i64[1] = v262;
      if (*(unsigned char *)(v12[2] + 2148)) {
        char v264 = sub_1D0C5859C((uint64_t *)a2, *v233);
      }
      else {
        char v264 = 0;
      }
      for (uint64_t i = 0; i != 4; ++i)
      {
        uint64_t v285 = v443.i64[i];
        *(unsigned char *)(v285 + 10) = 1;
        *(unsigned char *)(v285 + 1) = v264;
        *(_WORD *)(v285 + 8) = -1;
      }
      int v286 = v12;
      if (*(unsigned char *)(v12[2] + 2148) == 3)
      {
        for (uint64_t j = 1; j != 4; ++j)
        {
          int v288 = (unsigned __int8 *)v443.i64[j];
          v288[1] = sub_1D0C5859C((uint64_t *)a2, *v288);
        }
      }
      uint64_t v289 = v286[1];
      if (*(unsigned char *)(v289 + 712))
      {
        size_t v290 = (uint64_t)(1 << v413) >> 2;
        memset(__b, *v259, v290);
        memset(&__b[v404], *v263, v290);
        memset(v224, *v261, v290);
        memset(&v224[v404], *v263, v290);
        long long v291 = a9;
        int v292 = a6;
        uint64_t v293 = v432;
        uint64_t v294 = v426;
      }
      else
      {
        int v292 = a6;
        long long v291 = a9;
        uint64_t v293 = v432;
        uint64_t v294 = v426;
        if (a6 >= 4 && 1 << v413 >= 4)
        {
          int v304 = 0;
          uint64_t v305 = *(void *)(v289 + 848);
          long long v306 = *(_OWORD *)v233;
          long long v307 = *(_OWORD *)v259;
          long long v308 = *(_OWORD *)v261;
          uint64_t v309 = (1 << v413) >> 2;
          long long v310 = *(_OWORD *)v263;
          uint64_t v311 = 12 * v305;
          do
          {
            uint64_t v312 = 0;
            do
            {
              *(_OWORD *)&v233[v312] = v306;
              *(_OWORD *)&v261[v312] = v308;
              v312 += 12;
            }
            while (12 * v309 != v312);
            ++v304;
            v261 += v311;
            v233 += v311;
          }
          while (v304 != v309);
          int v313 = 0;
          uint64_t v314 = 12 * v305;
          do
          {
            uint64_t v315 = 0;
            do
            {
              *(_OWORD *)&v259[v315] = v307;
              *(_OWORD *)&v263[v315] = v310;
              v315 += 12;
            }
            while (12 * v309 != v315);
            ++v313;
            v263 += v314;
            v259 += v314;
          }
          while (v313 != v309);
        }
      }
      for (uint64_t k = 0; k != 4; ++k)
      {
        unsigned int v317 = (unsigned char *)v443.i64[k];
        *(v217 - 1) = *v317;
        unsigned char *v217 = v317[1];
        v217 += 2;
      }
      *(_WORD *)(a3 + 6424) = *(_WORD *)(a3 + 6416);
      *(void *)(a3 + 48) = *(void *)(*(void *)(*(void *)(a3 + 32) + 8) + 776)
                           + 2 * (v422 + *(void *)(*(void *)(*(void *)(a3 + 32) + 8) + 768) * v424);
      *(void *)(a3 + 24) = v291;
      int v435 = v292;
      int v436 = 0;
      __int32 v437 = v431;
      int v318 = *(void (**)(void *, uint64_t, uint64_t, void))(a3 + 6400);
      uint64_t v319 = *(void *)(a3 + 6408);
      int v320 = (void *)(a3 + (v319 >> 1));
      if (v319) {
        int v318 = *(void (**)(void *, uint64_t, uint64_t, void))(*v320 + v318);
      }
      v318(v320, v293, v294, 0);
      int v12 = v286;
LABEL_358:
      int v17 = v425;
      goto LABEL_359;
    }
    BYTE2(__p[1]) = 1;
    LOWORD(__p[1]) = -1;
    unint64_t v265 = *(unsigned __int8 *)(a2 + 56);
    uint64_t v267 = *(void *)a2;
    uint64_t v266 = *(void *)(a2 + 8);
    uint64_t v268 = byte_1D0D7FCB3[(v266 & 0xC0) + (v265 >> 1)];
    LODWORD(v269) = v266 - v268;
    if (*(void *)a2 < (unint64_t)((v266 - v268) << 55)) {
      unint64_t v269 = v269;
    }
    else {
      unint64_t v269 = byte_1D0D7FCB3[(v266 & 0xC0) + (v265 >> 1)];
    }
    if (*(void *)a2 < (unint64_t)((v266 - v268) << 55))
    {
      uint64_t v270 = 0;
    }
    else
    {
      uint64_t v267 = *(void *)a2 - ((v266 - v268) << 55);
      uint64_t v270 = 1;
    }
    if (*(void *)a2 < (unint64_t)((v266 - v268) << 55)) {
      char v271 = *(unsigned char *)(a2 + 56);
    }
    else {
      char v271 = v265 + 1;
    }
    unsigned __int8 v272 = byte_1D0D7FCB3[2 * v265 + 256 + v270];
    int v273 = __clz(v269) - 55;
    uint64_t v274 = v267 << v273;
    *(void *)(a2 + 8) = v269 << v273;
    *(unsigned char *)(a2 + 56) = v272;
    uint64_t v275 = a5;
    uint64_t v276 = a4;
    uint64_t v277 = *(void *)(a2 + 16) + v273;
    if (v277 >= 0)
    {
      int v278 = *(unsigned int **)(a2 + 24);
      unsigned int v280 = *v278;
      int v279 = v278 + 1;
      v274 += (unint64_t)bswap32(v280) << v277;
      v277 -= 32;
      if ((unint64_t)v279 >= *(void *)(a2 + 32)) {
        int v279 = *(unsigned int **)(a2 + 32);
      }
      *(void *)(a2 + 24) = v279;
    }
    *(void *)(a2 + 16) = v277;
    *(void *)a2 = v274;
    int v281 = sub_1D0C57204((unint64_t *)a2, v228, v238, v271 & 1);
    int v282 = v281;
    LOWORD(__p[0]) = v281;
    if (*(unsigned char *)(v12[2] + 2148))
    {
      char v283 = sub_1D0C5859C((uint64_t *)a2, v281);
      BYTE1(__p[0]) = v283;
    }
    else
    {
      char v283 = 0;
    }
    uint64_t v295 = v12[1];
    if (*(unsigned char *)(v295 + 712))
    {
      size_t v296 = (uint64_t)(int)v16 >> 2;
      memset(__b, v282, v296);
      memset(v224, v282, v296);
    }
    else
    {
      long long v297 = *(_OWORD *)__p;
      if ((int)v16 >= 4)
      {
        int v298 = 0;
        uint64_t v299 = 12 * *(void *)(v295 + 848);
        uint64_t v300 = v276;
        uint64_t v301 = v275;
        __int32 v302 = v431;
        do
        {
          uint64_t v303 = 0;
          do
          {
            *(_OWORD *)&v233[v303] = v297;
            v303 += 12;
          }
          while (12 * (v16 >> 2) != v303);
          ++v298;
          v233 += v299;
        }
        while (v298 != v16 >> 2);
        char v283 = BYTE1(__p[0]);
        goto LABEL_308;
      }
      char v283 = BYTE1(__p[0]);
    }
    uint64_t v300 = v276;
    uint64_t v301 = v275;
    __int32 v302 = v431;
LABEL_308:
    uint64_t v321 = 0;
    *(unsigned char *)(a3 + 6424) = __p[0];
    *(unsigned char *)(a3 + 6425) = v283;
    do
    {
      *(_WORD *)(a3 + 6416 + v321) = *(_WORD *)(a3 + 6424);
      v321 += 2;
    }
    while (v321 != 8);
    *(void *)(a3 + 48) = *(void *)(*(void *)(*(void *)(a3 + 32) + 8) + 776)
                         + 2 * (v422 + *(void *)(*(void *)(*(void *)(a3 + 32) + 8) + 768) * v424);
    *(void *)(a3 + 24) = a9;
    v443.i64[0] = a6;
    v443.i32[2] = v302;
    uint64_t v322 = *(void (**)(void *, uint64_t, uint64_t, void))(a3 + 6400);
    uint64_t v323 = *(void *)(a3 + 6408);
    unsigned int v324 = (void *)(a3 + (v323 >> 1));
    if (v323) {
      uint64_t v322 = *(void (**)(void *, uint64_t, uint64_t, void))(*v324 + v322);
    }
    v322(v324, v300, v301, 0);
    goto LABEL_358;
  }
  unsigned __int8 v423 = v39;
  int v48 = a4 + ((int)v16 >> 1);
  int v49 = a5 + ((int)v16 >> 1);
  int v429 = v15;
  uint64_t result = sub_1D0C53AD4(a1, a2, a3);
  if (v48 < v14 && result) {
    uint64_t result = sub_1D0C53AD4(v12, a2, a3);
  }
  int v51 = v429;
  uint64_t v52 = a3;
  if (v49 < v429 && result)
  {
    uint64_t result = sub_1D0C53AD4(v12, a2, a3);
    int v51 = v429;
    uint64_t v52 = a3;
  }
  if (v49 < v51 && v48 < v14 && result) {
    uint64_t result = sub_1D0C53AD4(v12, a2, v52);
  }
  if (a9[1])
  {
    if (*(_DWORD *)(v12[4] + 1636) == a6) {
      *a9 = v423;
    }
  }
  return result;
}

void sub_1D0C558B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0C558DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, unsigned int *a7, int32x2_t a8)
{
  uint64_t v14 = *(void *)(a1 + 32);
  int v15 = a7[1];
  uint64_t v16 = (int)*a7;
  if (v15 == 1)
  {
    BOOL v18 = 0;
    *(_WORD *)(a1 + 6424) = *(_WORD *)(a1 + 2 * a4 + 6416);
  }
  else if (v15)
  {
    BOOL v18 = 0;
  }
  else
  {
    int v17 = *(_DWORD *)(a1 + 8);
    BOOL v18 = v17 != 0;
    if (*(_DWORD *)(a1 + 4) == 3)
    {
      if (*(unsigned char *)(*(void *)(v14 + 16) + 272)) {
        BOOL v19 = 1;
      }
      else {
        BOOL v19 = v17 == 0;
      }
      BOOL v18 = !v19;
    }
  }
  uint64_t v20 = *(void *)(v14 + 16);
  if ((int)v16 <= *(unsigned __int8 *)(v20 + 2114)) {
    goto LABEL_33;
  }
  char v21 = (int)v16 > *(unsigned __int8 *)(v20 + 2115) || v18;
  if (v21)
  {
    int v22 = 1;
    goto LABEL_34;
  }
  if (v15 >= *(_DWORD *)(a1 + 12))
  {
LABEL_33:
    int v22 = 0;
  }
  else
  {
    BOOL v23 = *(uint64_t **)(a1 + 40);
    unint64_t v24 = ((unsigned __int8 *)v23 - v16)[76];
    uint64_t v26 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v27 = byte_1D0D7FCB3[(v25 & 0xC0) + (v24 >> 1)];
    LODWORD(v28) = v25 - v27;
    if (*v23 < (unint64_t)((v25 - v27) << 55)) {
      unint64_t v28 = v28;
    }
    else {
      unint64_t v28 = byte_1D0D7FCB3[(v25 & 0xC0) + (v24 >> 1)];
    }
    if (*v23 < (unint64_t)((v25 - v27) << 55))
    {
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v26 = *v23 - ((v25 - v27) << 55);
      uint64_t v29 = 1;
    }
    if (*v23 < (unint64_t)((v25 - v27) << 55)) {
      char v30 = ((unsigned char *)v23 - v16)[76];
    }
    else {
      char v30 = v24 + 1;
    }
    unsigned __int8 v31 = byte_1D0D7FCB3[2 * v24 + 256 + v29];
    int v32 = __clz(v28) - 55;
    uint64_t v33 = v26 << v32;
    v23[1] = v28 << v32;
    ((unsigned char *)v23 - v16)[76] = v31;
    uint64_t v34 = v23[2] + v32;
    if (v34 >= 0)
    {
      uint64_t v35 = (unsigned int *)v23[3];
      unsigned int v37 = *v35;
      long long v36 = v35 + 1;
      v33 += (unint64_t)bswap32(v37) << v34;
      v34 -= 32;
      if ((unint64_t)v36 >= v23[4]) {
        long long v36 = (unsigned int *)v23[4];
      }
      v23[3] = (uint64_t)v36;
    }
    v23[2] = v34;
    *BOOL v23 = v33;
    int v22 = v30 & 1;
  }
LABEL_34:
  if ((int)v16 < 3)
  {
    uint64_t v39 = a6;
    if (v22)
    {
LABEL_53:
      unsigned int v58 = v16 - 1;
      uint64_t v59 = ((1 << v58) + a2);
      uint64_t v60 = ((1 << v58) + a3);
      v195[0] = v58;
      v195[1] = v15 + 1;
      v195[2] = a5;
      if ((a5 & 0xF0) != 0) {
        int v61 = 15;
      }
      else {
        int v61 = 0;
      }
      int v62 = v61 | a5 & 0x1FF0;
      if ((a5 & 0x1E00) != 0) {
        int v63 = 122880;
      }
      else {
        int v63 = 0;
      }
      sub_1D0C558DC(a1, a2, a3, 0, v62 | v63, v39, v195);
      sub_1D0C558DC(a1, v59, a3, 1, a5 & 0x1FE00 | (((a5 & 0x1E00) != 0) << 8) | 0xF0, v39, v195);
      sub_1D0C558DC(a1, a2, v60, 2, a5 | (((a5 & 0xF0) != 0) << 8) | 0x1FE00u, v39, v195);
      return sub_1D0C558DC(a1, v59, v60, 3, 8176, v39, v195);
    }
  }
  else
  {
    char v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = *(void *)(a1 + 40) + 76;
    char v41 = 1;
    do
    {
      char v42 = v41;
      if ((a6 >> v38))
      {
        int v43 = *(uint64_t **)(a1 + 40);
        unint64_t v44 = *(unsigned __int8 *)(v40 + v15);
        uint64_t v46 = *v43;
        uint64_t v45 = v43[1];
        uint64_t v47 = byte_1D0D7FCB3[(v45 & 0xC0) + (v44 >> 1)];
        LODWORD(v48) = v45 - v47;
        if (*v43 < (unint64_t)((v45 - v47) << 55)) {
          unint64_t v48 = v48;
        }
        else {
          unint64_t v48 = byte_1D0D7FCB3[(v45 & 0xC0) + (v44 >> 1)];
        }
        if (*v43 < (unint64_t)((v45 - v47) << 55))
        {
          uint64_t v49 = 0;
        }
        else
        {
          uint64_t v46 = *v43 - ((v45 - v47) << 55);
          uint64_t v49 = 1;
        }
        if (*v43 < (unint64_t)((v45 - v47) << 55)) {
          char v50 = *(unsigned char *)(v40 + v15);
        }
        else {
          char v50 = v44 + 1;
        }
        unsigned __int8 v51 = byte_1D0D7FCB3[2 * v44 + 256 + v49];
        int v52 = __clz(v48) - 55;
        uint64_t v53 = v46 << v52;
        v43[1] = v48 << v52;
        *(unsigned char *)(v40 + v15) = v51;
        uint64_t v54 = v43[2] + v52;
        if (v54 >= 0)
        {
          __int16 v55 = (unsigned int *)v43[3];
          unsigned int v57 = *v55;
          __int16 v56 = v55 + 1;
          v53 += (unint64_t)bswap32(v57) << v54;
          v54 -= 32;
          if ((unint64_t)v56 >= v43[4]) {
            __int16 v56 = (unsigned int *)v43[4];
          }
          v43[3] = (uint64_t)v56;
        }
        v43[2] = v54;
        *int v43 = v53;
        uint64_t v39 = ((v50 & 1) << v38) | v39;
      }
      char v41 = 0;
      char v38 = 1;
    }
    while ((v42 & 1) != 0);
    if (v22) {
      goto LABEL_53;
    }
  }
  v195[0] = a5;
  uint64_t v65 = *(void *)(a1 + 32);
  uint64_t v66 = *(void *)(v65 + 8);
  uint64_t v192 = *(void *)(v66 + 416);
  uint64_t v190 = *(void *)(v66 + 400) + ((v192 * (int)a3 + (int)a2) << *(unsigned char *)(v66 + 531));
  uint64_t v68 = *a7;
  int v67 = a7[1];
  int v69 = 1;
  int v70 = 1 << v68;
  uint64_t v71 = *(void *)(v65 + 2280);
  if (*(_DWORD *)(a1 + 4) != 1 && !(v67 | v39)) {
    goto LABEL_84;
  }
  BOOL v19 = v67 == 0;
  __int16 v72 = *(uint64_t **)(a1 + 40);
  if (v19) {
    unsigned int v73 = (char *)v72 + 1;
  }
  else {
    unsigned int v73 = *(char **)(a1 + 40);
  }
  unint64_t v74 = v73[74];
  uint64_t v76 = *v72;
  uint64_t v75 = v72[1];
  uint64_t v77 = byte_1D0D7FCB3[(v75 & 0xC0) + (v74 >> 1)];
  LODWORD(v78) = v75 - v77;
  if (*v72 < (unint64_t)((v75 - v77) << 55)) {
    unint64_t v78 = v78;
  }
  else {
    unint64_t v78 = byte_1D0D7FCB3[(v75 & 0xC0) + (v74 >> 1)];
  }
  if (*v72 < (unint64_t)((v75 - v77) << 55))
  {
    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v76 = *v72 - ((v75 - v77) << 55);
    uint64_t v79 = 1;
  }
  if (*v72 < (unint64_t)((v75 - v77) << 55)) {
    char v80 = v73[74];
  }
  else {
    char v80 = v74 + 1;
  }
  unsigned __int8 v81 = byte_1D0D7FCB3[2 * v74 + 256 + v79];
  int v82 = __clz(v78) - 55;
  uint64_t v83 = v76 << v82;
  v72[1] = v78 << v82;
  v73[74] = v81;
  uint64_t v84 = v72[2] + v82;
  if (v84 >= 0)
  {
    uint64_t v85 = (unsigned int *)v72[3];
    unsigned int v87 = *v85;
    uint64_t v86 = v85 + 1;
    v83 += (unint64_t)bswap32(v87) << v84;
    v84 -= 32;
    if ((unint64_t)v86 >= v72[4]) {
      uint64_t v86 = (unsigned int *)v72[4];
    }
    v72[3] = (uint64_t)v86;
  }
  v72[2] = v84;
  *__int16 v72 = v83;
  int v69 = v80 & 1;
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    uint64_t v185 = *(void *)(a1 + 32);
    unsigned int v88 = sub_1D0C563C4(v185, a2, a3, 1 << v68, 1 << v68, v195, a8);
    HIDWORD(v194) = *(unsigned __int8 *)(a1 + 6425);
    if (HIDWORD(v194) == 35) {
      HIDWORD(v194) = *(unsigned __int8 *)(a1 + 6416);
    }
    uint64_t v89 = *(unsigned __int8 *)(a1 + 6424);
    if ((int)v68 > 3)
    {
      unsigned int v188 = 0;
      LODWORD(v194) = 0;
    }
    else
    {
      unsigned int v188 = byte_1D0DA7278[v89];
      LODWORD(v194) = byte_1D0DA7278[HIDWORD(v194)];
    }
    BOOL v186 = v68 == 2;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      if (*(unsigned char *)(*(void *)(v185 + 16) + 403)) {
        BOOL v91 = (v89 & 0xFFFFFFEF) == 10;
      }
      else {
        BOOL v91 = 0;
      }
      unsigned int v90 = v91;
    }
    else
    {
      unsigned int v90 = 0;
    }
    sub_1D0C56A10(v71 + 8, v89, v68, v195[0], v88, v90, v192, v190);
    unint64_t v92 = *(void **)(*(void *)(a1 + 32) + 8);
    int8x8_t v93 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(void *)&vdup_n_s32((2 << v68) - 64));
    uint64_t v94 = v92[117];
    uint64_t v95 = (uint64_t)(int)a3 >> 2;
    uint64_t v96 = v92[121];
    uint64_t v97 = v92[116];
    uint64_t v98 = (uint64_t)(int)a2 >> 2;
    uint64_t v99 = v92[118];
    if (v70 >= 5)
    {
      uint64_t v100 = v98 + v97 * ((uint64_t)(int)a3 >> 3);
      int8x8_t v101 = vmax_s8(*(int8x8_t *)(v99 + v100), v93);
      *(int8x8_t *)(v96 + v95 + v94 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v96+ v95+ v94 * ((uint64_t)(int)a2 >> 3)), v93);
      *(int8x8_t *)(v99 + v100) = v101;
    }
    uint64_t v102 = v98 + v97 * ((uint64_t)(v70 + (int)a3) >> 3);
    uint64_t v103 = v95 + v94 * ((uint64_t)(v70 + (int)a2) >> 3);
    int8x8_t v104 = vmax_s8(*(int8x8_t *)(v96 + v103), v93);
    int8x8_t v105 = vmax_s8(*(int8x8_t *)(v99 + v102), v93);
    *(int8x8_t *)(v96 + v103) = v104;
    *(int8x8_t *)(v99 + v102) = v105;
  }
  else
  {
LABEL_84:
    unsigned int v188 = 0;
    uint64_t v194 = 0;
    BOOL v186 = 0;
  }
  sub_1D0C56BA8((void *)a1, a2, a3, v69, v39);
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v107 = *(void *)(result + 32);
  if (*(unsigned char *)(v107 + 11)) {
    BOOL v108 = (**(_WORD **)(a1 + 48) & 0x100) == 0;
  }
  else {
    BOOL v108 = 0;
  }
  int v109 = *(unsigned __int8 *)(v107 + 1615) + 2;
  if (v69)
  {
    uint64_t v110 = a1 + 6416;
    *(unsigned char *)(a1 + 6426) = 0;
    int v183 = v109;
    BOOL v184 = v108;
    if ((int)v68 <= v109 && v108)
    {
      uint64_t v112 = *(uint64_t **)(a1 + 40);
      unint64_t v113 = *((unsigned __int8 *)v112 + 81);
      uint64_t v115 = *v112;
      uint64_t v114 = v112[1];
      uint64_t v116 = byte_1D0D7FCB3[(v114 & 0xC0) + (v113 >> 1)];
      LODWORD(v117) = v114 - v116;
      if (*v112 < (unint64_t)((v114 - v116) << 55)) {
        unint64_t v117 = v117;
      }
      else {
        unint64_t v117 = byte_1D0D7FCB3[(v114 & 0xC0) + (v113 >> 1)];
      }
      if (*v112 < (unint64_t)((v114 - v116) << 55))
      {
        uint64_t v118 = 0;
      }
      else
      {
        uint64_t v115 = *v112 - ((v114 - v116) << 55);
        uint64_t v118 = 1;
      }
      if (*v112 < (unint64_t)((v114 - v116) << 55)) {
        char v119 = *((unsigned char *)v112 + 81);
      }
      else {
        char v119 = v113 + 1;
      }
      unsigned __int8 v120 = byte_1D0D7FCB3[2 * v113 + 256 + v118];
      int v121 = __clz(v117) - 55;
      uint64_t v122 = v115 << v121;
      v112[1] = v117 << v121;
      *((unsigned char *)v112 + 81) = v120;
      uint64_t v123 = v112[2] + v121;
      if (v123 >= 0)
      {
        unint64_t v124 = (unsigned int *)v112[3];
        unsigned int v126 = *v124;
        uint64_t v125 = v124 + 1;
        v122 += (unint64_t)bswap32(v126) << v123;
        v123 -= 32;
        if ((unint64_t)v125 >= v112[4]) {
          uint64_t v125 = (unsigned int *)v112[4];
        }
        v112[3] = (uint64_t)v125;
      }
      v112[2] = v123;
      *uint64_t v112 = v122;
      uint64_t v110 = a1 + 6416;
      *(unsigned char *)(a1 + 6426) = v119 & 1;
    }
    *(unsigned char *)(v110 + 11) = sub_1D0C56874(a1, 0, *(unsigned __int8 *)(v110 + 8));
    uint64_t v127 = a1 + 16 * ((int)v68 > 2);
    unint64_t v128 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(v127 + 6368);
    uint64_t v129 = *(void *)(v127 + 6376);
    char v130 = (void *)(a1 + (v129 >> 1));
    if (v129) {
      unint64_t v128 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(*v130 + v128);
    }
    uint64_t v131 = v128(v130, a1 + 64, v68, v188, 0);
    uint64_t v132 = v71 + 552;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      uint64_t v133 = (int)v68 - 2;
    }
    else
    {
      uint64_t v133 = (int)v68 - 2;
      if (!*(unsigned char *)(a1 + 6426))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v132 + 16 * v133 + 8 * v186))(v190, v192, a1 + 64, 0, v131);
LABEL_126:
        int v70 = 1 << v68;
        uint64_t result = *(void *)(a1 + 32);
        if (*(_DWORD *)(a1 + 4) != 1)
        {
          uint64_t v134 = *(void **)(result + 8);
          int8x8_t v135 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(void *)&vdup_n_s32((2 << v68) - 64));
          uint64_t v136 = v134[117];
          uint64_t v137 = (uint64_t)(int)a3 >> 2;
          uint64_t v138 = v134[121];
          uint64_t v139 = v134[116];
          uint64_t v140 = (uint64_t)(int)a2 >> 2;
          uint64_t v141 = v134[118];
          if (v70 >= 5)
          {
            uint64_t v142 = v140 + v139 * ((uint64_t)(int)a3 >> 3);
            int8x8_t v143 = vmax_s8(*(int8x8_t *)(v141 + v142), v135);
            *(int8x8_t *)(v138 + v137 + v136 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v138+ v137+ v136 * ((uint64_t)(int)a2 >> 3)), v135);
            *(int8x8_t *)(v141 + v142) = v143;
          }
          uint64_t v144 = v140 + v139 * ((uint64_t)(v70 + (int)a3) >> 3);
          uint64_t v145 = v137 + v136 * ((uint64_t)(v70 + (int)a2) >> 3);
          int8x8_t v146 = vmax_s8(*(int8x8_t *)(v138 + v145), v135);
          int32x2_t v106 = (int32x2_t)vmax_s8(*(int8x8_t *)(v141 + v144), v135);
          *(int8x8_t *)(v138 + v145) = v146;
          *(int32x2_t *)(v141 + v144) = v106;
          uint64_t result = *(void *)(a1 + 32);
        }
        int v109 = v183;
        BOOL v108 = v184;
        goto LABEL_131;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v132 + 8 * v133 + 248))(v190, v192, a1 + 64, 0);
    goto LABEL_126;
  }
LABEL_131:
  uint64_t v147 = *(void *)(result + 8);
  uint64_t v148 = *(void *)(v147 + 424);
  if ((int)v68 < 3)
  {
    if (a4 != 3) {
      return result;
    }
    v195[0] = a7[2];
    LODWORD(a2) = a2 - v70;
    LODWORD(a3) = a3 - v70;
  }
  else
  {
    uint64_t v68 = (v68 - 1);
    v70 >>= 1;
  }
  int v149 = a2 & 0xFFFFFFFE;
  uint64_t v150 = *(void *)(v147 + 408) + ((v148 * ((uint64_t)(int)a3 >> 1) + (int)(a2 & 0xFFFFFFFE)) << *(unsigned char *)(v147 + 531));
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    BOOL v151 = v108;
    int v152 = v109;
    unsigned int v153 = sub_1D0C563C4(result, v149, a3 & 0xFFFFFFFE, 2 * v70, 2 * v70, v195, v106);
    uint64_t result = sub_1D0C581BC(v71 + 8, HIDWORD(v194), v68, v195[0], v153, v148, v150);
    int v109 = v152;
    BOOL v108 = v151;
  }
  if (v39)
  {
    uint64_t v189 = v150;
    uint64_t v191 = v148;
    uint64_t v193 = v71;
    uint64_t v154 = 0;
    uint64_t v155 = a1 + 64;
    uint64_t v156 = a1 + 64 + 2 * (v70 * v70);
    int v196 = 0;
    BOOL v157 = (int)v68 <= v109 && v108;
    uint64_t v158 = v68;
    uint64_t v159 = a1 + 16 * ((int)v68 > 2);
    int8x8_t v160 = (uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t))(v159 + 6368);
    uint64_t v161 = (uint64_t *)(v159 + 6376);
    uint64_t v187 = a1 + 64;
    do
    {
      uint64_t v162 = v154;
      if (v39)
      {
        *(unsigned char *)(a1 + 6426) = 0;
        if (v157)
        {
          int8x8_t v163 = *(uint64_t **)(a1 + 40);
          unint64_t v164 = *((unsigned __int8 *)v163 + 82);
          uint64_t v166 = *v163;
          uint64_t v165 = v163[1];
          uint64_t v167 = byte_1D0D7FCB3[(v165 & 0xC0) + (v164 >> 1)];
          LODWORD(v168) = v165 - v167;
          if (*v163 < (unint64_t)((v165 - v167) << 55)) {
            unint64_t v168 = v168;
          }
          else {
            unint64_t v168 = byte_1D0D7FCB3[(v165 & 0xC0) + (v164 >> 1)];
          }
          if (*v163 < (unint64_t)((v165 - v167) << 55))
          {
            uint64_t v169 = 0;
          }
          else
          {
            uint64_t v166 = *v163 - ((v165 - v167) << 55);
            uint64_t v169 = 1;
          }
          if (*v163 < (unint64_t)((v165 - v167) << 55)) {
            char v170 = *((unsigned char *)v163 + 82);
          }
          else {
            char v170 = v164 + 1;
          }
          unsigned __int8 v171 = byte_1D0D7FCB3[2 * v164 + 256 + v169];
          int v172 = __clz(v168) - 55;
          uint64_t v173 = v166 << v172;
          v163[1] = v168 << v172;
          *((unsigned char *)v163 + 82) = v171;
          uint64_t v174 = v163[2] + v172;
          if (v174 >= 0)
          {
            int v175 = (unsigned int *)v163[3];
            unsigned int v177 = *v175;
            int v176 = v175 + 1;
            v173 += (unint64_t)bswap32(v177) << v174;
            v174 -= 32;
            if ((unint64_t)v176 >= v163[4]) {
              int v176 = (unsigned int *)v163[4];
            }
            v163[3] = (uint64_t)v176;
          }
          v163[2] = v174;
          *int8x8_t v163 = v173;
          *(unsigned char *)(a1 + 6426) = v170 & 1;
        }
        *(unsigned char *)(a1 + 6427) = sub_1D0C56874(a1, 1u, SHIDWORD(v194));
        unint64_t v178 = *v160;
        uint64_t v179 = (void *)(a1 + (*v161 >> 1));
        if (*v161) {
          unint64_t v178 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t))(*v179 + v178);
        }
        ++v154;
        __int16 v180 = v178(v179, v155, v158, v194, v162 + 1);
        if (*(unsigned char *)(a1 + 6426)) {
          __int16 v181 = -1;
        }
        else {
          __int16 v181 = v180;
        }
        *((_WORD *)&v196 + v162) = v181;
      }
      else
      {
        ++v154;
      }
      LODWORD(v39) = v39 >> 1;
      uint64_t v155 = v156;
    }
    while (!v162);
    uint64_t v182 = v193 + 552 + 8 * ((int)v158 - 2);
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v182 + 280))(v189, v191, v187, v156, 0);
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, int *))(v182 + 128))(v189, v191, v187, v156, 0, &v196);
    }
  }
  return result;
}

uint64_t sub_1D0C563C4(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int *a6, int32x2_t a7)
{
  unsigned int v7 = *a6;
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = *(_DWORD *)(v8 + 524);
  if ((*a6 & 0x1E000) != 0 && (int v10 = *(_DWORD *)(v8 + 520), a2 + 2 * a4 > v10))
  {
    v7 &= 0xFFFE1FFF;
    int v11 = v10 - (a4 + a2);
    if (v11 >= 8)
    {
      unsigned int v12 = v11 >> 3;
      int v13 = ((v11 >> 3) + 3) & 0x3FFFFFFC;
      int8x16_t v14 = (int8x16_t)v7;
      int32x4_t v15 = (int32x4_t)xmmword_1D0D7F240;
      v16.i64[0] = 0x200000002000;
      v16.i64[1] = 0x200000002000;
      v17.i64[0] = 0x400000004;
      v17.i64[1] = 0x400000004;
      do
      {
        int8x16_t v18 = v14;
        uint32x4_t v19 = (uint32x4_t)v15;
        int8x16_t v14 = vorrq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)v15), v14);
        int32x4_t v15 = vaddq_s32(v15, v17);
        v13 -= 4;
      }
      while (v13);
      a7.i32[0] = v12 - 1;
      int8x16_t v20 = vbslq_s8((int8x16_t)vcgtq_u32(v19, (uint32x4_t)vdupq_lane_s32(a7, 0)), v18, v14);
      a7 = (int32x2_t)vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
      unsigned int v7 = a7.i32[0] | a7.i32[1];
    }
    uint64_t v21 = 1;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if ((v7 & 0xF) != 0 && a3 + 2 * a5 > v9)
  {
    v7 &= 0xFFFFFFF0;
    int v23 = v9 - (a5 + a3);
    if (v23 >= 8)
    {
      unsigned int v24 = v23 >> 3;
      int v25 = ((v23 >> 3) + 3) & 0x3FFFFFFC;
      int8x16_t v26 = (int8x16_t)v7;
      int32x4_t v27 = (int32x4_t)xmmword_1D0D7F240;
      int32x4_t v28 = vdupq_n_s32(a5 >> 3);
      v29.i64[0] = 0x100000001;
      v29.i64[1] = 0x100000001;
      v30.i64[0] = 0x400000004;
      v30.i64[1] = 0x400000004;
      do
      {
        int8x16_t v31 = v26;
        uint32x4_t v32 = (uint32x4_t)v27;
        int8x16_t v26 = vorrq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)vaddq_s32(v28, (int32x4_t)vmvnq_s8((int8x16_t)v27))), v26);
        int32x4_t v27 = vaddq_s32(v27, v30);
        v25 -= 4;
      }
      while (v25);
      a7.i32[0] = v24 - 1;
      int8x16_t v33 = vbslq_s8((int8x16_t)vcgtq_u32(v32, (uint32x4_t)vdupq_lane_s32(a7, 0)), v31, v26);
      *(int8x8_t *)v33.i8 = vorr_s8(*(int8x8_t *)v33.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
      unsigned int v7 = v33.i32[0] | v33.i32[1];
    }
    uint64_t v21 = 1;
  }
  *a6 = v7;
  if (*(unsigned char *)(*(void *)(a1 + 32) + 10) && *(unsigned char *)(a1 + 58) != 2)
  {
    int v34 = 0;
    *a6 = 0;
    if ((v7 & 0x100) != 0)
    {
      uint64_t v35 = *(void *)(v8 + 856);
      if (v35 && *(unsigned char *)(v35 + 12 * (*(void *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a2 - 1) >> 2)) + 10) == 1)
      {
        int v34 = 256;
        *a6 = 256;
      }
      else
      {
        int v34 = 0;
      }
    }
    if (a5 == 4)
    {
      if ((v7 & 0xF) != 0)
      {
        uint64_t v36 = *(void *)(v8 + 856);
        if (v36)
        {
          if (*(unsigned char *)(v36 + 12 * (*(void *)(v8 + 848) * ((uint64_t)(a3 + 4) >> 2) + ((a2 - 1) >> 2)) + 10) == 1)
          {
            v34 |= 0xFu;
            *a6 = v34;
          }
        }
      }
      if ((v7 & 0xF0) != 0)
      {
        uint64_t v37 = *(void *)(v8 + 856);
        if (v37)
        {
          if (*(unsigned char *)(v37 + 12 * (*(void *)(v8 + 848) * ((uint64_t)a3 >> 2) + ((a2 - 1) >> 2)) + 10) == 1)
          {
            v34 |= 0xF0u;
            *a6 = v34;
          }
        }
      }
    }
    else
    {
      unsigned int v38 = a5 >> 3;
      if ((v7 & 0xF) != 0 && a5 >= 8)
      {
        int v39 = 0;
        uint64_t v40 = *(void *)(v8 + 856);
        int v41 = a3 + 2 * a5 - 8;
        do
        {
          if (v40
            && *(unsigned char *)(v40 + 12 * (((uint64_t)(a2 - 1) >> 2) + *(void *)(v8 + 848) * ((uint64_t)v41 >> 2)) + 10) == 1)
          {
            v34 |= 1 << v39;
            *a6 = v34;
          }
          ++v39;
          v41 -= 8;
        }
        while (v38 != v39);
      }
      if ((v7 & 0xF0) != 0 && a5 >= 8)
      {
        int v42 = 0;
        uint64_t v43 = *(void *)(v8 + 856);
        int v44 = a5 + a3 - 8;
        do
        {
          if (v43
            && *(unsigned char *)(v43 + 12 * (((uint64_t)(a2 - 1) >> 2) + *(void *)(v8 + 848) * ((uint64_t)v44 >> 2)) + 10) == 1)
          {
            v34 |= 16 << v42;
            *a6 = v34;
          }
          ++v42;
          v44 -= 8;
        }
        while (v38 != v42);
      }
    }
    if (a4 == 4)
    {
      if ((v7 & 0x1E00) != 0)
      {
        uint64_t v45 = *(void *)(v8 + 856);
        if (v45)
        {
          if (*(unsigned char *)(v45 + 12 * (*(void *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + (a2 >> 2)) + 10) == 1)
          {
            v34 |= 0x1E00u;
            *a6 = v34;
          }
        }
      }
      if ((v7 & 0x1E000) != 0)
      {
        uint64_t v46 = *(void *)(v8 + 856);
        if (v46)
        {
          if (*(unsigned char *)(v46 + 12 * (*(void *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a2 + 4) >> 2)) + 10) == 1) {
            *a6 = v34 | 0x1E000;
          }
        }
      }
      return 1;
    }
    unsigned int v47 = a4 >> 3;
    if ((v7 & 0x1E00) != 0 && a4 >= 8)
    {
      int v48 = 0;
      uint64_t v49 = *(void *)(v8 + 856);
      int v50 = a2;
      do
      {
        if (v49 && *(unsigned char *)(v49 + 12 * (*(void *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + (v50 >> 2)) + 10) == 1)
        {
          v34 |= 512 << v48;
          *a6 = v34;
        }
        ++v48;
        v50 += 8;
      }
      while (v47 != v48);
    }
    uint64_t v21 = 1;
    if ((v7 & 0x1E000) != 0 && a4 >= 8)
    {
      int v51 = 0;
      uint64_t v52 = *(void *)(v8 + 856);
      int v53 = a4 + a2;
      do
      {
        if (v52 && *(unsigned char *)(v52 + 12 * (*(void *)(v8 + 848) * ((uint64_t)(a3 - 1) >> 2) + (v53 >> 2)) + 10) == 1)
        {
          v34 |= 0x2000 << v51;
          *a6 = v34;
        }
        ++v51;
        v53 += 8;
      }
      while (v47 != v51);
      return 1;
    }
  }
  return v21;
}

uint64_t sub_1D0C56874(uint64_t a1, unsigned int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 6426) && (**(_WORD **)(a1 + 48) & 0x100) == 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    if (a3 == 26) {
      uint64_t result = 2;
    }
    else {
      uint64_t result = 1;
    }
    if ((a3 & 0xFFFFFFEF) == 0xA && *(unsigned char *)(v3 + 403)) {
      return result;
    }
    return 0;
  }
  if (!*(unsigned char *)(v3 + 404)) {
    return 0;
  }
  int v5 = *(uint64_t **)(a1 + 40);
  unint64_t v6 = (char *)v5 + a2;
  unint64_t v7 = v6[197];
  uint64_t v9 = *v5;
  uint64_t v8 = v5[1];
  uint64_t v10 = byte_1D0D7FCB3[(v8 & 0xC0) + (v7 >> 1)];
  LODWORD(v11) = v8 - v10;
  if (*v5 < (unint64_t)((v8 - v10) << 55)) {
    unint64_t v11 = v11;
  }
  else {
    unint64_t v11 = byte_1D0D7FCB3[(v8 & 0xC0) + (v7 >> 1)];
  }
  if (*v5 < (unint64_t)((v8 - v10) << 55))
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v9 = *v5 - ((v8 - v10) << 55);
    uint64_t v12 = 1;
  }
  if (*v5 < (unint64_t)((v8 - v10) << 55)) {
    char v13 = v6[197];
  }
  else {
    char v13 = v7 + 1;
  }
  char v14 = byte_1D0D7FCB3[2 * v7 + 256 + v12];
  int v15 = __clz(v11) - 55;
  uint64_t v16 = v9 << v15;
  v5[1] = v11 << v15;
  v6[197] = v14;
  uint64_t v17 = v5[2] + v15;
  if (v17 >= 0)
  {
    int8x16_t v18 = (unsigned int *)v5[3];
    unsigned int v20 = *v18;
    uint32x4_t v19 = v18 + 1;
    v16 += (unint64_t)bswap32(v20) << v17;
    v17 -= 32;
    if ((unint64_t)v19 >= v5[4]) {
      uint32x4_t v19 = (unsigned int *)v5[4];
    }
    v5[3] = (uint64_t)v19;
  }
  v5[2] = v17;
  uint64_t *v5 = v16;
  if ((v13 & 1) == 0) {
    return 0;
  }
  uint64_t v21 = *(unint64_t **)(a1 + 40);
  int v22 = (char *)v21 + a2;
  unint64_t v23 = v22[199];
  unint64_t v24 = *v21;
  unint64_t v25 = v21[1] - byte_1D0D7FCB3[(v21[1] & 0xC0) + (v23 >> 1)];
  BOOL v26 = *v21 >= v25 << 55;
  unint64_t v27 = *v21 - (v25 << 55);
  if (*v21 < v25 << 55) {
    unint64_t v25 = v25;
  }
  else {
    unint64_t v25 = byte_1D0D7FCB3[(v21[1] & 0xC0) + (v23 >> 1)];
  }
  if (v26)
  {
    unint64_t v24 = v27;
    uint64_t v28 = 1;
  }
  else
  {
    uint64_t v28 = 0;
  }
  if (v26) {
    char v29 = v23 + 1;
  }
  else {
    char v29 = v22[199];
  }
  char v30 = byte_1D0D7FCB3[2 * v23 + 256 + v28];
  int v31 = __clz(v25);
  int v32 = v31 - 55;
  unint64_t v33 = v25 << (v31 - 55);
  unint64_t v34 = v24 << (v31 - 55);
  v21[1] = v33;
  v22[199] = v30;
  uint64_t v35 = v21[2] + v32;
  if (v35 >= 0)
  {
    uint64_t v36 = (unsigned int *)v21[3];
    unsigned int v38 = *v36;
    uint64_t v37 = v36 + 1;
    v34 += (unint64_t)bswap32(v38) << v35;
    v35 -= 32;
    if ((unint64_t)v37 >= v21[4]) {
      uint64_t v37 = (unsigned int *)v21[4];
    }
    v21[3] = (unint64_t)v37;
  }
  v21[2] = v35;
  *uint64_t v21 = v34;
  return (v29 & 1u) + 1;
}

uint64_t sub_1D0C56A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  int v11 = a3;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(a1 + 16 * a5))(a3, a4, a7, a8, &v18);
  if ((a6 & 1) == 0 && a2 != 1 && !*(unsigned char *)(a1 + 536))
  {
    int v14 = 10 - a2;
    if ((int)a2 >= 10) {
      int v14 = a2 - 10;
    }
    int v15 = 26 - a2;
    if ((int)a2 >= 26) {
      int v15 = a2 - 26;
    }
    if (v14 >= v15) {
      int v14 = v15;
    }
    if (v14 > byte_1D0DA768A[v11]) {
      (*(void (**)(uint64_t *, uint64_t *))(a1 + 8 * v11 + 8))(&v18, &v18);
    }
  }
  if ((int)a2 > 9)
  {
    if (a2 == 10)
    {
      uint64_t v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 40 * a6 + 8 * v11 + 64);
      return (*v16)(a2, &v18, a7, a8);
    }
    if (a2 == 26)
    {
      uint64_t v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 40 * a6 + 8 * v11 + 144);
      return (*v16)(a2, &v18, a7, a8);
    }
LABEL_21:
    uint64_t v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 8 * v11 + 224);
    return (*v16)(a2, &v18, a7, a8);
  }
  if (!a2)
  {
    uint64_t v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 8 * v11 + 264);
    return (*v16)(a2, &v18, a7, a8);
  }
  if (a2 != 1) {
    goto LABEL_21;
  }
  uint64_t v16 = (uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 8 * v11 + 304);
  return (*v16)(a2, &v18, a7, a8);
}

void *sub_1D0C56BA8(void *result, int a2, int a3, int a4, int a5)
{
  uint64_t v5 = result[3];
  if (*(unsigned char *)(v5 + 1)) {
    BOOL v6 = (a4 | a5) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    int v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = (unint64_t *)result[5];
    unint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    uint64_t v12 = (unsigned int *)v9[3];
    char v13 = (unsigned int *)v9[4];
    unint64_t v14 = v9[2];
    int v15 = (char *)v9 + 49;
    do
    {
      unint64_t v16 = *v15;
      uint64_t v17 = byte_1D0D7FCB3[(v11 & 0xC0) + (v16 >> 1)];
      unint64_t v18 = v11 - v17;
      BOOL v19 = v10 >= v18 << 55;
      unint64_t v20 = v10 - (v18 << 55);
      if (v10 < v18 << 55) {
        unint64_t v18 = v18;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v19)
      {
        unint64_t v10 = v20;
        uint64_t v21 = 1;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if (v19) {
        char v22 = v16 + 1;
      }
      else {
        char v22 = *v15;
      }
      int v23 = __clz(v18) - 55;
      unint64_t v11 = v18 << v23;
      v10 <<= v23;
      v7 += v23;
      v8 += v22 & 1;
      *int v15 = byte_1D0D7FCB3[2 * v16 + 256 + v21];
      if ((v22 & 1) == 0) {
        break;
      }
      int v15 = (char *)v9 + 50;
    }
    while (v8 < 5);
    uint64_t v24 = v14 + v7;
    if (v24 >= 0)
    {
      unsigned int v25 = *v12++;
      v10 += (unint64_t)bswap32(v25) << v24;
      v24 -= 32;
      if (v12 >= v13) {
        uint64_t v12 = v13;
      }
    }
    if (v8)
    {
      unint64_t v26 = v11 << 54;
      if (v22)
      {
        unsigned int v27 = 0;
        int v28 = 0;
        do
        {
          if (v10 < v26) {
            unint64_t v29 = 0;
          }
          else {
            unint64_t v29 = v11 << 54;
          }
          unint64_t v30 = v10 - v29;
          int v31 = v27 + 1;
          BOOL v19 = v10 >= v26;
          int v32 = v10 >= v26;
          unint64_t v10 = 2 * v30;
          v28 += v32 << v27;
          if (!v19) {
            break;
          }
          BOOL v19 = v27++ >= 0x18;
        }
        while (!v19);
        v24 += v31;
        if (v24 >= 0)
        {
          unsigned int v33 = *v12++;
          v10 += (unint64_t)bswap32(v33) << v24;
          v24 -= 32;
          if (v12 >= v13) {
            uint64_t v12 = v13;
          }
        }
        v8 += v28;
      }
      else
      {
        int v31 = 1;
      }
      int v35 = 0;
      unsigned int v36 = v31 + 1;
      do
      {
        int v37 = v35;
        unint64_t v38 = v10;
        BOOL v39 = v10 >= v26;
        if (v10 < v26) {
          unint64_t v40 = 0;
        }
        else {
          unint64_t v40 = v11 << 54;
        }
        unint64_t v10 = 2 * (v38 - v40);
        int v35 = v39 | (2 * v37);
        --v36;
      }
      while (v36 > 1);
      v24 += v31;
      if (v24 >= 0)
      {
        unsigned int v41 = *v12++;
        v10 += (unint64_t)bswap32(v41) << v24;
        v24 -= 32;
        if (v12 >= v13) {
          uint64_t v12 = v13;
        }
      }
      int v42 = (v37 & 0x7FFFFFFF) + v8;
      if (v38 >= v26) {
        int v42 = -v42;
      }
      int v34 = v42 + 52;
    }
    else
    {
      int v34 = 52;
    }
    *uint64_t v9 = v10;
    v9[1] = v11;
    v9[2] = v24;
    v9[3] = (unint64_t)v12;
    uint64_t v43 = (unsigned char *)result[3];
    int v44 = (void *)result[4];
    uint64_t v45 = (unsigned __int8 *)v44[2];
    uint64_t v46 = (_WORD *)result[6];
    int v47 = (char)*v43;
    int v48 = v45[2113] - (*v46 & 3);
    if (v48 <= *(_DWORD *)(v44[4] + 1636)) {
      LOBYTE(v48) = *(_DWORD *)(v44[4] + 1636);
    }
    int v49 = -1 << v48;
    int v50 = v45[2117] - 1;
    int v51 = (-1 << v48) & a2;
    int v52 = v49 & a3;
    int v53 = (char)*v43;
    if ((v51 & v50) != 0) {
      int v53 = *(__int16 *)(*(void *)(v44[1] + 776)
    }
                       + 2 * (*(void *)(v44[1] + 768) * ((uint64_t)v52 >> 3) + ((v51 - 1) >> 3))) >> 9;
    int v54 = v45[2097];
    if ((v52 & v50) != 0) {
      int v47 = *(__int16 *)(*(void *)(v44[1] + 776)
    }
                       + 2 * (*(void *)(v44[1] + 768) * ((uint64_t)(v52 - 1) >> 3) + (v51 >> 3))) >> 9;
    int v55 = (v34 + 2 * v54 + ((v53 + v47 + 1) >> 1)) % (v54 + 52) - v54;
    *uint64_t v43 = v55;
    *uint64_t v46 = *v46 & 0x1FF | ((_WORD)v55 << 9);
    uint64_t v5 = result[3];
    *(unsigned char *)(v5 + 1) = 0;
  }
  if (a5 && *(unsigned char *)(v5 + 2) && (*(_WORD *)result[6] & 0x100) == 0)
  {
    __int16 v56 = (uint64_t *)result[5];
    unint64_t v57 = *((unsigned __int8 *)v56 + 201);
    uint64_t v59 = *v56;
    uint64_t v58 = v56[1];
    uint64_t v60 = byte_1D0D7FCB3[(v58 & 0xC0) + (v57 >> 1)];
    LODWORD(v61) = v58 - v60;
    if (*v56 < (unint64_t)((v58 - v60) << 55)) {
      unint64_t v61 = v61;
    }
    else {
      unint64_t v61 = byte_1D0D7FCB3[(v58 & 0xC0) + (v57 >> 1)];
    }
    if (*v56 < (unint64_t)((v58 - v60) << 55))
    {
      uint64_t v62 = 0;
    }
    else
    {
      uint64_t v59 = *v56 - ((v58 - v60) << 55);
      uint64_t v62 = 1;
    }
    if (*v56 < (unint64_t)((v58 - v60) << 55)) {
      char v63 = *((unsigned char *)v56 + 201);
    }
    else {
      char v63 = v57 + 1;
    }
    unsigned __int8 v64 = byte_1D0D7FCB3[2 * v57 + 256 + v62];
    int v65 = __clz(v61) - 55;
    uint64_t v66 = v59 << v65;
    v56[1] = v61 << v65;
    *((unsigned char *)v56 + 201) = v64;
    uint64_t v67 = v56[2] + v65;
    if (v67 >= 0)
    {
      uint64_t v68 = (unsigned int *)v56[3];
      unsigned int v70 = *v68;
      int v69 = v68 + 1;
      v66 += (unint64_t)bswap32(v70) << v67;
      v67 -= 32;
      if ((unint64_t)v69 >= v56[4]) {
        int v69 = (unsigned int *)v56[4];
      }
      v56[3] = (uint64_t)v69;
    }
    v56[2] = v67;
    *__int16 v56 = v66;
    if (v63)
    {
      uint64_t v71 = *(void *)(result[4] + 32);
      unsigned int v72 = *(unsigned __int8 *)(v71 + 1619);
      if (*(unsigned char *)(v71 + 1619))
      {
        unsigned int v73 = 0;
        uint64_t v74 = result[5];
        unint64_t v75 = *(unsigned __int8 *)(v74 + 202);
        unint64_t v76 = *(void *)v74;
        unint64_t v77 = *(void *)(v74 + 8);
        do
        {
          uint64_t v78 = byte_1D0D7FCB3[(v77 & 0xC0) + (v75 >> 1)];
          unint64_t v79 = v77 - v78;
          BOOL v80 = v76 >= v79 << 55;
          unint64_t v81 = v76 - (v79 << 55);
          if (v76 < v79 << 55) {
            unint64_t v79 = v79;
          }
          else {
            unint64_t v79 = v78;
          }
          if (v80)
          {
            unint64_t v76 = v81;
            uint64_t v82 = 1;
          }
          else
          {
            uint64_t v82 = 0;
          }
          if (v80) {
            char v83 = v75 + 1;
          }
          else {
            char v83 = v75;
          }
          LOBYTE(v75) = byte_1D0D7FCB3[2 * v75 + 256 + v82];
          int v84 = __clz(v79) - 55;
          unint64_t v77 = v79 << v84;
          v76 <<= v84;
          *(void *)(v74 + 8) = v77;
          *(unsigned char *)(v74 + 202) = v75;
          uint64_t v85 = *(void *)(v74 + 16) + v84;
          if (v85 >= 0)
          {
            uint64_t v86 = *(unsigned int **)(v74 + 24);
            unsigned int v88 = *v86;
            unsigned int v87 = v86 + 1;
            v76 += (unint64_t)bswap32(v88) << v85;
            v85 -= 32;
            if ((unint64_t)v87 >= *(void *)(v74 + 32)) {
              unsigned int v87 = *(unsigned int **)(v74 + 32);
            }
            *(void *)(v74 + 24) = v87;
          }
          *(void *)(v74 + 16) = v85;
          *(void *)uint64_t v74 = v76;
          ++v73;
          if ((v83 & 1) == 0) {
            break;
          }
          unint64_t v75 = v75;
        }
        while (v73 < v72);
        uint64_t v89 = (int)((__PAIR64__(v73, v83 & 1) - 1) >> 32);
        uint64_t v71 = *(void *)(result[4] + 32);
      }
      else
      {
        uint64_t v89 = 0;
      }
      *(unsigned char *)(result[3] + 3) = *(unsigned char *)(v71 + v89 + 1620);
      *(unsigned char *)(result[3] + 4) = *(unsigned char *)(*(void *)(result[4] + 32) + v89 + 1626);
    }
    else
    {
      *(_WORD *)(result[3] + 3) = 0;
    }
    *(unsigned char *)(result[3] + 2) = 0;
  }
  return result;
}

void *sub_1D0C57014(int a1, int a2, uint64_t a3, uint64_t a4, char *__b)
{
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &__b[v10];
        char v13 = (char *)(a4 + a3 * v10 - 1);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v17 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v17 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v17 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v17 = (v10 - 1) * a3 - 1;
      }
      memset(&__b[v10], *(unsigned __int8 *)(a4 + v17), v10);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        BOOL v19 = (unsigned char *)(a4 - 1);
        unint64_t v20 = __b;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      memset(__b, __b[v10], v10);
    }
    uint64_t v21 = (unsigned __int8 *)(a4 + ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v21 = (unsigned __int8 *)__b;
    }
    int v22 = *v21;
    *(__b - 1) = v22;
    if ((a2 & 0x1E00) != 0) {
      memcpy(&__b[2 << a1], (const void *)(a4 - a3), v10);
    }
    else {
      memset(&__b[2 << a1], v22, v10);
    }
    if ((a2 & 0x1E000) != 0)
    {
      return memcpy(&__b[3 << a1], (const void *)(a4 + v10 - a3), v10);
    }
    size_t v14 = v10;
    int v15 = &__b[3 << a1];
    int v16 = *(v15 - 1);
  }
  else
  {
    size_t v14 = (4 << a1) | 1;
    int v15 = __b - 1;
    int v16 = 128;
  }
  return memset(v15, v16, v14);
}

uint64_t sub_1D0C57204(unint64_t *a1, int a2, uint64_t a3, char a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a3 == a2)
  {
    if ((int)a3 < 2)
    {
      a3 = 0;
      unint64_t v40 = 0x100000000;
      a2 = 1;
      int v4 = 26;
    }
    else
    {
      a2 = (((_BYTE)a3 + 29) & 0x1F) + 2;
      unint64_t v40 = __PAIR64__(a2, a3);
      int v4 = (((_BYTE)a3 - 1) & 0x1F) + 2;
    }
  }
  else
  {
    unint64_t v40 = __PAIR64__(a2, a3);
    if (a2 && a3)
    {
      int v4 = 0;
    }
    else if ((int)a3 + a2 > 1)
    {
      int v4 = 1;
    }
    else
    {
      int v4 = 26;
    }
  }
  int v41 = v4;
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1] << 54;
  if (a4)
  {
    BOOL v7 = v5 >= v6;
    if (v5 < v6) {
      unint64_t v8 = 0;
    }
    else {
      unint64_t v8 = a1[1] << 54;
    }
    unint64_t v9 = 2 * (v5 - v8);
    uint64_t v10 = a1[2];
    uint64_t v11 = v10 + 1;
    if (v10 >= -1)
    {
      uint64_t v12 = (unsigned int *)a1[3];
      unsigned int v14 = *v12;
      char v13 = v12 + 1;
      v9 += (unint64_t)bswap32(v14) << v11;
      uint64_t v11 = v10 - 31;
      if ((unint64_t)v13 >= a1[4]) {
        int v15 = (unsigned int *)a1[4];
      }
      else {
        int v15 = v13;
      }
      a1[3] = (unint64_t)v15;
    }
    a1[2] = v11;
    *a1 = v9;
    if (v5 >= v6)
    {
      BOOL v16 = v9 >= v6;
      if (v9 < v6) {
        unint64_t v6 = 0;
      }
      uint64_t v17 = 2 * (v9 - v6);
      uint64_t v18 = v11 + 1;
      if (v11 >= -1)
      {
        BOOL v19 = (unsigned int *)a1[3];
        unsigned int v21 = *v19;
        unint64_t v20 = v19 + 1;
        v17 += (unint64_t)bswap32(v21) << v18;
        uint64_t v18 = v11 - 31;
        if ((unint64_t)v20 >= a1[4]) {
          int v22 = (unsigned int *)a1[4];
        }
        else {
          int v22 = v20;
        }
        a1[3] = (unint64_t)v22;
      }
      a1[2] = v18;
      *a1 = v17;
      return *((unsigned int *)&v40 + v16 + v7);
    }
  }
  else
  {
    int v23 = 0;
    for (unsigned int i = 6; i > 1; --i)
    {
      BOOL v25 = v5 >= v6;
      if (v5 < v6) {
        unint64_t v26 = 0;
      }
      else {
        unint64_t v26 = a1[1] << 54;
      }
      unint64_t v5 = 2 * (v5 - v26);
      int v23 = v25 | (2 * v23);
    }
    uint64_t v27 = a1[2];
    uint64_t v28 = v27 + 5;
    if (v27 >= -5)
    {
      unint64_t v29 = (unsigned int *)a1[3];
      unsigned int v31 = *v29;
      unint64_t v30 = v29 + 1;
      v5 += (unint64_t)bswap32(v31) << v28;
      uint64_t v28 = v27 - 27;
      if ((unint64_t)v30 >= a1[4]) {
        int v32 = (unsigned int *)a1[4];
      }
      else {
        int v32 = v30;
      }
      a1[3] = (unint64_t)v32;
    }
    a1[2] = v28;
    *a1 = v5;
    if ((int)a3 <= a2) {
      int v33 = a2;
    }
    else {
      int v33 = a3;
    }
    if ((int)a3 >= a2) {
      int v34 = a2;
    }
    else {
      int v34 = a3;
    }
    if (v34 >= v4) {
      int v35 = v4;
    }
    else {
      int v35 = v34;
    }
    if (v34 > v4) {
      int v4 = v34;
    }
    if (v33 <= v4) {
      int v36 = v4;
    }
    else {
      int v36 = v33;
    }
    if (v33 >= v4) {
      int v33 = v4;
    }
    if (v23 < v35) {
      int v37 = v23;
    }
    else {
      int v37 = v23 + 1;
    }
    if (v37 < v33) {
      int v38 = v37;
    }
    else {
      int v38 = v37 + 1;
    }
    if (v38 < v36) {
      return v38;
    }
    else {
      return (v38 + 1);
    }
  }
  return a3;
}

uint64_t sub_1D0C57428(uint64_t a1, uint64_t a2, int8x8_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7 = 0;
  int v8 = 0;
  unint64_t v9 = (unsigned __int8 *)(a1 + 6426);
  uint64_t v10 = *(unint64_t **)(a1 + 40);
  unint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  unsigned int v14 = (unsigned int *)v10[3];
  char v13 = (unsigned int *)v10[4];
  unint64_t v15 = v10[2];
  BOOL v16 = (char *)&unk_1D0DA76FD + 36 * (a6 > 0);
  uint64_t v173 = v10;
  uint64_t v17 = (char *)v10 + 83;
  do
  {
    uint64_t v18 = v16[v7];
    unint64_t v19 = v17[v18];
    uint64_t v20 = byte_1D0D7FCB3[(v12 & 0xC0) + (v19 >> 1)];
    LODWORD(v21) = v12 - v20;
    BOOL v22 = v11 >= (v12 - v20) << 55;
    if (v11 < (v12 - v20) << 55) {
      unint64_t v21 = v21;
    }
    else {
      unint64_t v21 = byte_1D0D7FCB3[(v12 & 0xC0) + (v19 >> 1)];
    }
    if (v11 < (v12 - v20) << 55)
    {
      uint64_t v23 = 0;
    }
    else
    {
      v11 -= (v12 - v20) << 55;
      uint64_t v23 = 1;
    }
    if (v22) {
      char v24 = v19 + 1;
    }
    else {
      char v24 = v17[v18];
    }
    int v25 = __clz(v21) - 55;
    unint64_t v12 = v21 << v25;
    v11 <<= v25;
    v8 += v25;
    v17[v18] = byte_1D0D7FCB3[2 * v19 + 256 + v23];
    if ((v24 & 1) == 0) {
      break;
    }
    ++v7;
  }
  while (v7 != 3);
  uint64_t v26 = v15 + v8;
  if (v26 >= 0)
  {
    unsigned int v27 = *v14++;
    v11 += (unint64_t)bswap32(v27) << v26;
    v26 -= 32;
    if (v14 >= v13) {
      unsigned int v14 = v13;
    }
  }
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v30 = *(void *)(a1 + 40) + 101;
  do
  {
    uint64_t v31 = v16[v28];
    unint64_t v32 = *(unsigned __int8 *)(v30 + v31);
    uint64_t v33 = byte_1D0D7FCB3[(v12 & 0xC0) + (v32 >> 1)];
    LODWORD(v34) = v12 - v33;
    BOOL v35 = v11 >= (v12 - v33) << 55;
    if (v11 < (v12 - v33) << 55) {
      unint64_t v34 = v34;
    }
    else {
      unint64_t v34 = byte_1D0D7FCB3[(v12 & 0xC0) + (v32 >> 1)];
    }
    if (v11 < (v12 - v33) << 55)
    {
      uint64_t v36 = 0;
    }
    else
    {
      v11 -= (v12 - v33) << 55;
      uint64_t v36 = 1;
    }
    if (v35) {
      char v37 = v32 + 1;
    }
    else {
      char v37 = *(unsigned char *)(v30 + v31);
    }
    int v38 = __clz(v34) - 55;
    unint64_t v12 = v34 << v38;
    v11 <<= v38;
    v29 += v38;
    *(unsigned char *)(v30 + v31) = byte_1D0D7FCB3[2 * v32 + 256 + v36];
    if ((v37 & 1) == 0) {
      break;
    }
    ++v28;
  }
  while (v28 != 3);
  uint64_t v39 = v26 + v29;
  if (v39 >= 0)
  {
    unsigned int v40 = *v14++;
    v11 += (unint64_t)bswap32(v40) << v39;
    v39 -= 32;
    if (v14 >= v13) {
      unsigned int v14 = v13;
    }
  }
  if (a5 == 2) {
    int v41 = v28;
  }
  else {
    int v41 = v7;
  }
  if (a5 == 2) {
    int v42 = v7;
  }
  else {
    int v42 = v28;
  }
  __int16 v43 = **(_WORD **)(a1 + 48);
  int v44 = v43 >> 9;
  uint64_t v45 = *(void *)(a1 + 32);
  if (a6)
  {
    v44 += *(char *)(v45 + a6 + 656) + *(char *)(*(void *)(a1 + 24) + a6 + 2);
    uint64_t v46 = *(unsigned char **)(v45 + 16);
    int v47 = v46[2099];
    if (v44 <= -v47) {
      int v44 = -v47;
    }
    if (v46[2148] == 1)
    {
      if (v44 >= 57) {
        int v48 = 57;
      }
      else {
        int v48 = v44;
      }
      BOOL v49 = __OFSUB__(v48, 30);
      int v50 = v48 - 30;
      if (v50 < 0 == v49) {
        int v44 = byte_1D0DAE600[v50];
      }
    }
    else if (v44 >= 51)
    {
      int v44 = 51;
    }
    int v51 = v46 + 223;
  }
  else
  {
    uint64_t v46 = *(unsigned char **)(v45 + 16);
    LOWORD(v47) = v46[2097];
    int v51 = v46 + 222;
  }
  if (v44 < 0)
  {
    LOWORD(v44) = v44 + v47;
    char v52 = *v51 + 5;
  }
  else
  {
    char v52 = 5;
  }
  BOOL v53 = 0;
  uint64_t v54 = a5;
  int v55 = v41 + 4 * v42;
  __int16 v56 = (char *)&unk_1D0DAFC60 + 16 * a5;
  int v57 = v43 & 0x100;
  int v58 = *v9 | v57;
  BOOL v171 = v58 != 0;
  if (v58) {
    BOOL v59 = v46[402] != 0;
  }
  else {
    BOOL v59 = 0;
  }
  uint64_t v60 = *(void *)(v45 + 32);
  if (*(unsigned char *)(v60 + 5) && !v57) {
    BOOL v53 = v9[1] == 0;
  }
  uint64_t v61 = *(void *)(a1 + 40);
  int v62 = v56[v55];
  unint64_t v178 = (char *)&unk_1D0DAF020 + 64 * v54;
  if (v46[274])
  {
    if (*(_DWORD *)(a1 + 4) == 1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = 3;
    }
    uint64_t v64 = v60 + 65 * (v63 + a6) + 40;
  }
  else
  {
    uint64_t v64 = 0;
    v52 -= 4;
  }
  char v170 = v9;
  unsigned int v65 = ((10923 * (__int16)v44) >> 16) + ((10923 * (__int16)v44) >> 31);
  int v66 = a39H[(__int16)v44 % 6];
  if (a6 < 1 || v59) {
    uint64_t v68 = 0;
  }
  else {
    uint64_t v68 = 27;
  }
  uint64_t v69 = 1;
  uint64_t v176 = v64;
  int v169 = v62;
  if ((v62 & 0xF) != 0)
  {
    uint64_t v70 = v61 + v68 + 123;
    LODWORD(v69) = 1 << (v62 & 0xF);
    if (a6) {
      unsigned int v71 = 43;
    }
    else {
      unsigned int v71 = 42;
    }
    uint64_t v72 = (v62 & 0xF) - 1;
    do
    {
      if (!v59) {
        unsigned int v71 = byte_1D0DAFCD0[v178[v72] + 64];
      }
      unint64_t v73 = *(unsigned __int8 *)(v70 + v71);
      uint64_t v74 = byte_1D0D7FCB3[(v12 & 0xC0) + (v73 >> 1)];
      LODWORD(v75) = v12 - v74;
      BOOL v76 = v11 >= (v12 - v74) << 55;
      if (v11 < (v12 - v74) << 55) {
        unint64_t v75 = v75;
      }
      else {
        unint64_t v75 = byte_1D0D7FCB3[(v12 & 0xC0) + (v73 >> 1)];
      }
      if (v11 < (v12 - v74) << 55)
      {
        uint64_t v77 = 0;
      }
      else
      {
        v11 -= (v12 - v74) << 55;
        uint64_t v77 = 1;
      }
      if (v76) {
        char v78 = v73 + 1;
      }
      else {
        char v78 = *(unsigned char *)(v70 + v71);
      }
      int v79 = __clz(v75) - 55;
      v11 <<= v79;
      *(unsigned char *)(v70 + v71) = byte_1D0D7FCB3[2 * v73 + 256 + v77];
      v39 += v79;
      if (v39 >= 0)
      {
        unsigned int v80 = *v14++;
        v11 += (unint64_t)bswap32(v80) << v39;
        v39 -= 32;
        if (v14 >= v13) {
          unsigned int v14 = v13;
        }
      }
      uint64_t v64 = v176;
      unint64_t v12 = v75 << v79;
      uint64_t v69 = ((v78 & 1) << v72) | v69;
      unint64_t v81 = v72-- + 1;
    }
    while (v81 > 1);
  }
  unsigned int v82 = 0;
  int v83 = 0;
  uint64_t v84 = v61 + 16 * (a6 > 0) + 167;
  uint64_t v85 = v61 + 191;
  uint64_t v86 = 4 * (a6 > 0);
  int v87 = v66 << v65;
  a3.i32[0] = v69;
  uint8x8_t v88 = (uint8x8_t)vcnt_s8(a3);
  v88.i16[0] = vaddlv_u8(v88);
  if (v88.i32[0] >= 8u) {
    unsigned int v89 = 8;
  }
  else {
    unsigned int v89 = v88.i32[0];
  }
  if (v89 <= 1) {
    int v90 = 1;
  }
  else {
    int v90 = v89;
  }
  int v91 = 1;
  do
  {
    while (1)
    {
      unint64_t v92 = *(unsigned __int8 *)(v84 + v91);
      uint64_t v93 = byte_1D0D7FCB3[(v12 & 0xC0) + (v92 >> 1)];
      LODWORD(v94) = v12 - v93;
      BOOL v95 = v11 >= (v12 - v93) << 55;
      if (v11 < (v12 - v93) << 55) {
        unint64_t v94 = v94;
      }
      else {
        unint64_t v94 = byte_1D0D7FCB3[(v12 & 0xC0) + (v92 >> 1)];
      }
      if (v11 < (v12 - v93) << 55)
      {
        uint64_t v96 = 0;
      }
      else
      {
        v11 -= (v12 - v93) << 55;
        uint64_t v96 = 1;
      }
      if (v95) {
        char v97 = v92 + 1;
      }
      else {
        char v97 = *(unsigned char *)(v84 + v91);
      }
      int v98 = __clz(v94) - 55;
      v11 <<= v98;
      *(unsigned char *)(v84 + v91) = byte_1D0D7FCB3[2 * v92 + 256 + v96];
      v39 += v98;
      if (v39 >= 0)
      {
        unsigned int v99 = *v14++;
        v11 += (unint64_t)bswap32(v99) << v39;
        v39 -= 32;
        if (v14 >= v13) {
          unsigned int v14 = v13;
        }
      }
      unint64_t v12 = v94 << v98;
      v82 |= (v97 & 1) << v83;
      if ((v97 & 1) == 0) {
        break;
      }
      int v91 = 0;
      if (++v83 == v90) {
        goto LABEL_119;
      }
    }
    if ((v91 - 1) < 2) {
      ++v91;
    }
    ++v83;
  }
  while (v83 != v90);
  BOOL v100 = v88.i32[0] > 8u;
  if (v91)
  {
    int v101 = 0;
    goto LABEL_132;
  }
LABEL_119:
  unint64_t v102 = *(unsigned __int8 *)(v85 + v86);
  uint64_t v103 = byte_1D0D7FCB3[(v12 & 0xC0) + (v102 >> 1)];
  LODWORD(v104) = v12 - v103;
  BOOL v105 = v11 >= (v12 - v103) << 55;
  if (v11 < (v12 - v103) << 55) {
    unint64_t v104 = v104;
  }
  else {
    unint64_t v104 = byte_1D0D7FCB3[(v12 & 0xC0) + (v102 >> 1)];
  }
  if (v11 < (v12 - v103) << 55)
  {
    uint64_t v106 = 0;
  }
  else
  {
    v11 -= (v12 - v103) << 55;
    uint64_t v106 = 1;
  }
  if (v105) {
    char v107 = v102 + 1;
  }
  else {
    char v107 = *(unsigned char *)(v85 + v86);
  }
  int v108 = __clz(v104);
  int v109 = v108 - 55;
  unint64_t v12 = v104 << (v108 - 55);
  v11 <<= v108 - 55;
  int v101 = v107 & 1;
  *(unsigned char *)(v85 + v86) = byte_1D0D7FCB3[2 * v102 + 256 + v106];
  v39 += v109;
  if (v39 >= 0)
  {
    unsigned int v110 = *v14++;
    v11 += (unint64_t)bswap32(v110) << v39;
    v39 -= 32;
    if (v14 >= v13) {
      unsigned int v14 = v13;
    }
  }
  BOOL v100 = 1;
LABEL_132:
  int v111 = 0;
  unsigned int v112 = __clz(v69);
  int v113 = v112 ^ 0x1F;
  char v114 = v112 + 1;
  BOOL v115 = (int)(v113 - __clz(__rbit32(v69))) > 3 && v53;
  unint64_t v116 = v12 << 54;
  int v117 = v88.i32[0] - v115 + 1;
  do
  {
    BOOL v118 = v11 >= v116;
    if (v11 < v116) {
      unint64_t v119 = 0;
    }
    else {
      unint64_t v119 = v12 << 54;
    }
    unint64_t v11 = 2 * (v11 - v119);
    int v111 = v118 | (2 * v111);
    --v117;
  }
  while (v117 > 1);
  uint64_t v120 = v69 << v114;
  uint64_t v121 = v39 + v88.i32[0] - v115;
  if (v121 >= 0)
  {
    unsigned int v122 = *v14++;
    v11 += (unint64_t)bswap32(v122) << v121;
    v121 -= 32;
    if (v14 >= v13) {
      unsigned int v14 = v13;
    }
  }
  unsigned int v123 = 0;
  int v124 = 0;
  unsigned int v125 = 0;
  char v126 = 0;
  int v127 = v111 << (v115 - v88.i8[0]);
  unsigned int v175 = __clz(__rbit32(v82));
  char v128 = v52 - 1;
  uint64_t v172 = a1;
  char v129 = v52;
  char v130 = *(_WORD **)(a1 + 48);
  uint64_t v131 = v87;
  uint64_t v174 = 1 << v128;
  if (v88.i32[0] <= 1u) {
    int v132 = 1;
  }
  else {
    int v132 = v88.i32[0];
  }
  int v133 = v132 - 1;
  char v134 = !v115;
  unsigned int v135 = v82;
  char v136 = v129;
  while (1)
  {
    if (v135) {
      int v137 = v101 + 2;
    }
    else {
      int v137 = 1;
    }
    if (v135) {
      int v101 = 0;
    }
    if (v100)
    {
      BOOL v138 = (v135 & 1) == 0;
      if (v175 != v125 || v82 == 0) {
        int v140 = 2;
      }
      else {
        int v140 = 3;
      }
      BOOL v141 = v140 == v137;
      if (v125 < 8) {
        BOOL v138 = v141;
      }
      if (v138)
      {
        if (v123 <= 3 << v124) {
          unsigned int v142 = v124;
        }
        else {
          unsigned int v142 = v124 + 1;
        }
        if (v142 >= 4) {
          int v124 = 4;
        }
        else {
          int v124 = v142;
        }
        if (v11 >= v116)
        {
          unsigned int v144 = 0;
          do
          {
            unsigned int v143 = v144 + 1;
            unint64_t v11 = 2 * (v11 - v116);
          }
          while (v11 >= v116 && v144++ < 0x11);
        }
        else
        {
          unsigned int v143 = 0;
        }
        v11 *= 2;
        v121 += v143 + 1;
        if (v121 >= 0)
        {
          unsigned int v146 = *v14++;
          v11 += (unint64_t)bswap32(v146) << v121;
          v121 -= 32;
          if (v14 >= v13) {
            unsigned int v14 = v13;
          }
        }
        unsigned int v147 = v143 - 3;
        if (v143 <= 2) {
          unsigned int v147 = 0;
        }
        else {
          unsigned int v143 = (1 << (v143 - 3)) + 2;
        }
        unsigned int v148 = v143 << v124;
        signed int v149 = v147 + v124;
        if (v147 + v124)
        {
          int v150 = 0;
          int v151 = v147 + v124 + 1;
          do
          {
            BOOL v152 = v11 >= v116;
            if (v11 < v116) {
              unint64_t v153 = 0;
            }
            else {
              unint64_t v153 = v12 << 54;
            }
            unint64_t v11 = 2 * (v11 - v153);
            int v150 = v152 | (2 * v150);
            --v151;
          }
          while (v151 > 1);
          v121 += v149;
          if (v121 >= 0)
          {
            unsigned int v154 = *v14++;
            v11 += (unint64_t)bswap32(v154) << v121;
            v121 -= 32;
            if (v14 >= v13) {
              unsigned int v14 = v13;
            }
          }
          uint64_t v64 = v176;
          v148 += v150;
        }
        unsigned int v123 = v148 + v137;
        int v137 = v123;
      }
    }
    v126 += v137;
    if (v125 == v88.i32[0] - 1) {
      char v155 = v134;
    }
    else {
      char v155 = 1;
    }
    int v156 = (v137 ^ (v127 >> 31)) - (v127 >> 31);
    if (v126) {
      int v157 = -v137;
    }
    else {
      int v157 = v137;
    }
    if (v155)
    {
      v127 *= 2;
      int v157 = v156;
    }
    uint64_t v158 = v178[v113];
    if ((*v130 & 0x100) == 0)
    {
      uint64_t v159 = v131;
      if (v64)
      {
        if (v178[v113]) {
          uint64_t v160 = v158 + 1;
        }
        else {
          uint64_t v160 = v178[v113];
        }
        uint64_t v159 = *(unsigned __int8 *)(v64 + v160) * (uint64_t)(int)v131;
      }
      uint64_t v161 = (v174 + v159 * v157) >> v136;
      if (v161 >= 0x7FFF) {
        uint64_t v161 = 0x7FFFLL;
      }
      if (v161 <= -32768) {
        LOWORD(v157) = 0x8000;
      }
      else {
        LOWORD(v157) = v161;
      }
    }
    *(_WORD *)(a2 + 2 * v158) = v157;
    if (v125 == v133) {
      break;
    }
    ++v125;
    v135 >>= 1;
    unsigned int v162 = __clz(v120) + 1;
    LODWORD(v120) = v120 << v162;
    v113 -= v162;
  }
  uint64_t v163 = *(void *)(v172 + 32);
  BOOL v164 = v171;
  if (!*(unsigned char *)(*(void *)(v163 + 16) + 401)) {
    BOOL v164 = 0;
  }
  if (v164 && *(_DWORD *)(v172 + 4) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v163 + 2280) + 792))(a2);
  }
  if (*v170)
  {
    uint64_t v165 = *(void *)(v163 + 2280) + 552;
    BOOL v166 = a6 != 0;
    if (v170[1]) {
      (*(void (**)(uint64_t, uint64_t))(v165 + 8 * v166 + 384))(a2, 2);
    }
    else {
      (*(void (**)(uint64_t))(v165 + 32 * v166 + 176))(a2);
    }
  }
  else if (v170[1])
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v163 + 2280)
                                             + 8 * (v170[1] - 1)
                                             + 920))(a2, 2);
  }
  uint64_t result = (v169 + 1);
  *uint64_t v173 = v11;
  v173[1] = v12;
  v173[2] = v121;
  v173[3] = (unint64_t)v14;
  return result;
}

void sub_1D0C57D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  *a15 = v16;
  a15[1] = v17;
  a15[2] = v18;
  a15[3] = v15;
  _Unwind_Resume(a1);
}

int8x8_t sub_1D0C57D84(__int32 *a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1D0C57E18((int16x4_t *)a3);
  v8.i32[0] = *a1;
  v8.i32[1] = *(__int32 *)((char *)a1 + a2);
  v9.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  uint64_t v10 = (__int32 *)((char *)a1 + 3 * a2);
  v9.i32[1] = *v10;
  int8x8_t result = vqmovun_s16(vqaddq_s16(*(int16x8_t *)a3, (int16x8_t)vmovl_u8(v8)));
  int8x8_t v12 = vqmovun_s16(vqaddq_s16(*(int16x8_t *)(a3 + 16), (int16x8_t)vmovl_u8(v9)));
  *a1 = result.i32[0];
  *(__int32 *)((char *)a1 + a2) = result.i32[1];
  *(__int32 *)((char *)a1 + 2 * a2) = v12.i32[0];
  *uint64_t v10 = v12.i32[1];
  if ((a4 & 1) == 0)
  {
    int8x8_t result = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

int32x4_t sub_1D0C57E18(int16x4_t *a1)
{
  int16x4_t v1 = a1[1];
  int16x4_t v2 = a1[2];
  int16x4_t v3 = a1[3];
  int32x4_t v4 = vaddl_s16(v2, *a1);
  int32x4_t v5 = vaddl_s16(v3, v2);
  int32x4_t v6 = vsubl_s16(*a1, v3);
  v7.i64[0] = 0x1D0000001DLL;
  v7.i64[1] = 0x1D0000001DLL;
  v8.i64[0] = 0x3700000037;
  v8.i64[1] = 0x3700000037;
  int32x4_t v9 = vmlaq_s32(vmlal_s16(vmulq_s32(v4, v7), v1, (int16x4_t)0x4A004A004A004ALL), v5, v8);
  int32x4_t v10 = vmlaq_s32(vmlsl_s16(vmulq_s32(v4, v8), v1, (int16x4_t)0x4A004A004A004ALL), v6, v7);
  v11.i64[0] = 0x1C0000001CLL;
  v11.i64[1] = 0x1C0000001CLL;
  int32x4_t v12 = vmlaq_s32(vmlal_s16(vmulq_s32(v6, v8), v1, (int16x4_t)0x4A004A004A004ALL), v5, v11);
  v13.i64[0] = 0x4A0000004ALL;
  v13.i64[1] = 0x4A0000004ALL;
  int32x4_t v14 = vmulq_s32(vaddw_s16(vsubl_s16(*a1, v2), v3), v13);
  int16x4_t v15 = vqrshrn_n_s32(v9, 7uLL);
  int16x4_t v16 = vqrshrn_n_s32(v12, 7uLL);
  *(int16x4_t *)v14.i8 = vqrshrn_n_s32(v14, 7uLL);
  *(int16x4_t *)v10.i8 = vqrshrn_n_s32(v10, 7uLL);
  *(int16x4_t *)v5.i8 = vtrn1_s16(v15, v16);
  int32x2_t v17 = (int32x2_t)vtrn2_s16(v15, v16);
  int32x2_t v18 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v10.i8);
  *(int16x4_t *)v14.i8 = vtrn2_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v10.i8);
  *(int32x2_t *)v10.i8 = vzip1_s32(*(int32x2_t *)v5.i8, v18);
  int16x4_t v19 = (int16x4_t)vzip2_s32(*(int32x2_t *)v5.i8, v18);
  int32x4_t v20 = vaddl_s16(*(int16x4_t *)v10.i8, v19);
  *(int32x2_t *)v12.i8 = vzip2_s32(v17, *(int32x2_t *)v14.i8);
  int32x4_t v21 = vaddl_s16(v19, *(int16x4_t *)v12.i8);
  int32x4_t v22 = vsubl_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v12.i8);
  *(int32x2_t *)v14.i8 = vzip1_s32(v17, *(int32x2_t *)v14.i8);
  int32x4_t v23 = vmlaq_s32(vmlal_s16(vmulq_s32(v21, v8), *(int16x4_t *)v14.i8, (int16x4_t)0x4A004A004A004ALL), v20, v7);
  int32x4_t v24 = vmlaq_s32(vmlsl_s16(vmulq_s32(v22, v7), *(int16x4_t *)v14.i8, (int16x4_t)0x4A004A004A004ALL), v20, v8);
  int32x4_t v25 = vmlaq_s32(vmlal_s16(vmulq_s32(v22, v8), *(int16x4_t *)v14.i8, (int16x4_t)0x4A004A004A004ALL), v21, v11);
  int32x4_t result = vmulq_s32(vaddw_s16(vsubl_s16(*(int16x4_t *)v10.i8, v19), *(int16x4_t *)v12.i8), v13);
  *(int16x4_t *)v13.i8 = vqrshrn_n_s32(v23, 0xCuLL);
  *(int16x4_t *)v23.i8 = vqrshrn_n_s32(v25, 0xCuLL);
  int16x4_t v27 = vqrshrn_n_s32(result, 0xCuLL);
  *(int16x4_t *)v10.i8 = vqrshrn_n_s32(v24, 0xCuLL);
  vst4_s16((__int16 *)a1, *(int16x4x4_t *)((char *)&v10 - 24));
  return result;
}

uint64_t sub_1D0C57EF4(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, double a5, int8x16_t a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v6 = byte_1D0D7FEBA[result];
  unint64_t v7 = byte_1D0D7FEBA[result];
  char v8 = byte_1D0D7FEBA[result];
  unsigned int v9 = result - 18;
  if (result < 0x12)
  {
    if ((byte_1D0D7FEBA[result] & 0x80) == 0) {
      goto LABEL_5;
    }
    int32x4_t v24 = a2 + 1;
    unsigned int v9 = 18 - result;
    int32x4_t v10 = (int8x8_t *)a2;
LABEL_16:
    a6.i64[0] = *v24;
    unint64_t v25 = (unint64_t)vext_s8(vqtbl1_s8(a6, qword_1D0D7FEE0[4 * v9 + 3]), *v10, 4uLL);
    unint64_t v26 = vshrd_n_u64(v25, 0x20uLL);
    BYTE3(v25) = *((unsigned char *)a2 - 1);
    unint64_t v32 = v26;
    unint64_t v33 = vshrd_n_u64(v25, 0x18uLL);
    unint64_t v34 = vshrd_n_u64(v25, 0x10uLL);
    unint64_t v35 = vshrd_n_u64(v25, 8uLL);
    unint64_t v36 = v25;
    unsigned __int32 v21 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v32 + ~(v6 >> 5)), (uint8x8_t)vdup_n_s8(v7 & 0x1F)), (uint8x8_t)*(&v32 + -(v6 >> 5)), (uint8x8_t)vdup_n_s8(32 - (v7 & 0x1F))), 5uLL).u32[0];
    unsigned __int32 v22 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v32 + ~(v6 >> 4)), (uint8x8_t)vdup_n_s8(2 * (v7 & 0xF))), (uint8x8_t)*(&v32 + -(v6 >> 4)), (uint8x8_t)vdup_n_s8(32 - 2 * (v7 & 0xF))), 5uLL).u32[0];
    unsigned __int32 v23 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v32 + ~((3 * v6) >> 5)), (uint8x8_t)vdup_n_s8((3 * v6) & 0x1F)), (uint8x8_t)*(&v32 + -((3 * v6) >> 5)), (uint8x8_t)vdup_n_s8(32 - ((3 * v6) & 0x1Fu))), 5uLL).u32[0];
    int16x8_t v20 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)*(&v32 + ~(v6 >> 3)), (uint8x8_t)vdup_n_s8(4 * (v7 & 7))), (uint8x8_t)*(&v32 + -(v6 >> 3)), (uint8x8_t)vdup_n_s8(32 - 4 * (v7 & 7)));
    goto LABEL_17;
  }
  int32x4_t v10 = (int8x8_t *)(a2 + 1);
  if (v6 < 0)
  {
    int32x4_t v24 = a2;
    goto LABEL_16;
  }
  ++a2;
LABEL_5:
  unint64_t v11 = vshrd_n_u64(*a2, 8uLL);
  unint64_t v32 = *a2;
  unint64_t v33 = v11;
  unint64_t v34 = vshrd_n_u64(v32, 0x10uLL);
  unint64_t v35 = vshrd_n_u64(v32, 0x18uLL);
  unint64_t v36 = vshrd_n_u64(v32, 0x20uLL);
  int16x8_t v12 = (int16x8_t)vmull_u8((uint8x8_t)*(&v32 + (v7 >> 5)), (uint8x8_t)vdup_n_s8(32 - (v8 & 0x1Fu)));
  if ((v8 & 0x1F) != 0) {
    int16x8_t v12 = (int16x8_t)vmlal_u8((uint16x8_t)v12, (uint8x8_t)*(&v32 + (v7 >> 5) + 1), (uint8x8_t)vdup_n_s8(v8 & 0x1F));
  }
  unsigned int v13 = 2 * (v8 & 0xF);
  int16x8_t v14 = (int16x8_t)vmull_u8((uint8x8_t)*(&v32 + (v7 >> 4)), (uint8x8_t)vdup_n_s8(32 - v13));
  if (v13) {
    int16x8_t v14 = (int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)*(&v32 + (v7 >> 4) + 1), (uint8x8_t)vdup_n_s8(v13));
  }
  unint64_t v15 = (3 * v7) >> 5;
  unsigned int v16 = (3 * v7) & 0x1F;
  int16x8_t v17 = (int16x8_t)vmull_u8((uint8x8_t)*(&v32 + v15), (uint8x8_t)vdup_n_s8(32 - v16));
  if (v16) {
    int16x8_t v17 = (int16x8_t)vmlal_u8((uint16x8_t)v17, (uint8x8_t)*(&v32 + (v15 + 1)), (uint8x8_t)vdup_n_s8(v16));
  }
  unint64_t v18 = v7 >> 3;
  unsigned int v19 = 4 * (v8 & 7);
  int16x8_t v20 = (int16x8_t)vmull_u8((uint8x8_t)*(&v32 + v18), (uint8x8_t)vdup_n_s8(32 - v19));
  if (v19) {
    int16x8_t v20 = (int16x8_t)vmlal_u8((uint16x8_t)v20, (uint8x8_t)*(&v32 + (v18 + 1)), (uint8x8_t)vdup_n_s8(v19));
  }
  unsigned __int32 v21 = vrshrn_n_s16(v12, 5uLL).u32[0];
  unsigned __int32 v22 = vrshrn_n_s16(v14, 5uLL).u32[0];
  unsigned __int32 v23 = vrshrn_n_s16(v17, 5uLL).u32[0];
LABEL_17:
  unsigned __int32 v27 = vrshrn_n_s16(v20, 5uLL).u32[0];
  if (result > 0x11)
  {
    *(_DWORD *)a4 = v21;
    *(_DWORD *)(a4 + a3) = v22;
    uint64_t v31 = (unsigned __int32 *)(a4 + a3 + a3);
    *uint64_t v31 = v23;
    *(unsigned __int32 *)((char *)v31 + a3) = v27;
  }
  else
  {
    *(unsigned char *)a4 = v21;
    *(unsigned char *)(a4 + 1) = v22;
    *(unsigned char *)(a4 + 2) = v23;
    *(unsigned char *)(a4 + 3) = v27;
    uint64_t v28 = (unsigned char *)(a4 + a3);
    *uint64_t v28 = BYTE1(v21);
    v28[1] = BYTE1(v22);
    v28[2] = BYTE1(v23);
    v28[3] = BYTE1(v27);
    int v29 = &v28[a3];
    *int v29 = BYTE2(v21);
    v29[1] = BYTE2(v22);
    v29[2] = BYTE2(v23);
    v29[3] = BYTE2(v27);
    uint64_t v30 = &v29[a3];
    *uint64_t v30 = HIBYTE(v21);
    v30[1] = HIBYTE(v22);
    v30[2] = HIBYTE(v23);
    v30[3] = HIBYTE(v27);
  }
  return result;
}

uint64_t sub_1D0C581BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  int v9 = a3;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(a1 + 16 * a5 + 8))(a3, a4, a6 >> 1, a7, &v15);
  if (*(unsigned char *)(a1 + 538) == 3 && a2 != 1 && !*(unsigned char *)(a1 + 536))
  {
    int v12 = 10 - a2;
    if ((int)a2 >= 10) {
      int v12 = a2 - 10;
    }
    int v13 = 26 - a2;
    if ((int)a2 >= 26) {
      int v13 = a2 - 26;
    }
    if (v12 >= v13) {
      int v12 = v13;
    }
    if (v12 > byte_1D0DA768A[v9]) {
      (*(void (**)(uint64_t *, uint64_t *))(a1 + 8 * v9 + 32))(&v15, &v15);
    }
  }
  return sub_1D0C582F0(a1, a2, v9, (uint64_t)&v15, a6, a7);
}

uint64_t sub_1D0C582F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)a2 > 9)
  {
    if (a2 == 10)
    {
      int v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 408);
      return (*v6)(a2, a4, a5, a6);
    }
    if (a2 == 26)
    {
      int v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 376);
      return (*v6)(a2, a4, a5, a6);
    }
LABEL_8:
    int v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 472);
    return (*v6)(a2, a4, a5, a6);
  }
  if (!a2)
  {
    int v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 344);
    return (*v6)(a2, a4, a5, a6);
  }
  if (a2 != 1) {
    goto LABEL_8;
  }
  int v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 440);
  return (*v6)(a2, a4, a5, a6);
}

void *sub_1D0C58364(void *result, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6 = (char)result;
  if (a2)
  {
    int v10 = 1 << (char)result;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << (char)result)
      {
        uint64_t v11 = (2 << (char)result) - (uint64_t)v10;
        int v12 = &a5[v10];
        int v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      __int16 v15 = *(_WORD *)(a4 + 2 * v14);
      uint64_t v16 = v10;
      int16x8_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (result != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        unsigned int v19 = (_WORD *)(a4 - 2);
        int16x8_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      __int16 v22 = a5[v10];
      unsigned __int32 v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    int32x4_t v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0) {
      int32x4_t v24 = a5;
    }
    __int16 v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      int32x4_t result = memcpy(&a5[2 << (char)result], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      unsigned __int32 v27 = &a5[2 << (char)result];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      return memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      int v29 = &a5[3 << v6];
      __int16 v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    return memset(a5 - 1, 128, (8 * ((unint64_t)(4 << (char)result) >> 2)) | 2);
  }
  return result;
}

uint64_t sub_1D0C5859C(uint64_t *a1, int a2)
{
  unint64_t v2 = *((unsigned __int8 *)a1 + 57);
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = byte_1D0D7FCB3[(v4 & 0xC0) + (v2 >> 1)];
  LODWORD(v6) = v4 - v5;
  if (*a1 < (unint64_t)((v4 - v5) << 55)) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = byte_1D0D7FCB3[(v4 & 0xC0) + (v2 >> 1)];
  }
  if (*a1 < (unint64_t)((v4 - v5) << 55))
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v3 = *a1 - ((v4 - v5) << 55);
    uint64_t v7 = 1;
  }
  if (*a1 < (unint64_t)((v4 - v5) << 55)) {
    char v8 = *((unsigned char *)a1 + 57);
  }
  else {
    char v8 = v2 + 1;
  }
  unsigned __int8 v9 = byte_1D0D7FCB3[2 * v2 + 256 + v7];
  int v10 = __clz(v6);
  int v11 = v10 - 55;
  unint64_t v12 = v6 << (v10 - 55);
  unint64_t v13 = v3 << v11;
  a1[1] = v12;
  *((unsigned char *)a1 + 57) = v9;
  uint64_t v14 = a1[2] + v11;
  if (v14 >= 0)
  {
    __int16 v15 = (unsigned int *)a1[3];
    unsigned int v17 = *v15;
    uint64_t v16 = v15 + 1;
    v13 += (unint64_t)bswap32(v17) << v14;
    v14 -= 32;
    if ((unint64_t)v16 >= a1[4]) {
      uint64_t v16 = (unsigned int *)a1[4];
    }
    a1[3] = (uint64_t)v16;
  }
  a1[2] = v14;
  *a1 = v13;
  if ((v8 & 1) == 0) {
    return 35;
  }
  LODWORD(v19) = 0;
  unint64_t v20 = v12 << 54;
  for (unsigned int i = 3; i > 1; --i)
  {
    BOOL v22 = v13 >= v20;
    if (v13 < v20) {
      unint64_t v23 = 0;
    }
    else {
      unint64_t v23 = v20;
    }
    unint64_t v13 = 2 * (v13 - v23);
    uint64_t v19 = v22 | (2 * v19);
  }
  uint64_t v24 = v14 + 2;
  if (v14 >= -2)
  {
    __int16 v25 = (unsigned int *)a1[3];
    unsigned int v27 = *v25;
    uint64_t v26 = v25 + 1;
    v13 += (unint64_t)bswap32(v27) << v24;
    uint64_t v24 = v14 - 30;
    if ((unint64_t)v26 >= a1[4]) {
      uint64_t v28 = (unsigned int *)a1[4];
    }
    else {
      uint64_t v28 = v26;
    }
    a1[3] = (uint64_t)v28;
  }
  a1[2] = v24;
  *a1 = v13;
  if (byte_1D0D7FEB3[v19] == a2) {
    return 34;
  }
  else {
    return byte_1D0D7FEB3[v19];
  }
}

int8x8_t sub_1D0C586BC(uint8x8_t *a1, uint64_t a2, int32x4_t *a3, int32x4_t *a4, int16x4_t *a5, __int16 *a6)
{
  if (*a6 >= 1) {
    sub_1D0C58754(a3, (unsigned __int16)*a6);
  }
  if (a6[1] >= 1) {
    sub_1D0C58754(a4, (unsigned __int16)a6[1]);
  }
  return sub_1D0C5882C(a1, a2, (int16x8_t *)a3, (int16x8_t *)a4, a5);
}

int32x4_t sub_1D0C58754(int32x4_t *a1, int a2)
{
  if (a2 == 1)
  {
    int32x4_t result = (int32x4_t)vdupq_n_s16((a1->i16[0] + 65) >> 7);
    *a1 = result;
    a1[1] = result;
  }
  else
  {
    int16x4_t v3 = (int16x4_t)a1->u64[1];
    int16x4_t v4 = *(int16x4_t *)a1[1].i8;
    int16x4_t v5 = (int16x4_t)a1[1].u64[1];
    int32x4_t v6 = vsubl_s16(*(int16x4_t *)a1->i8, v4);
    int32x4_t v7 = vshlq_n_s32(vaddl_s16(v4, *(int16x4_t *)a1->i8), 6uLL);
    int32x4_t v8 = vshlq_n_s32(v6, 6uLL);
    int32x4_t v9 = vmlal_s16(vmull_s16(v5, (int16x4_t)0x24002400240024), v3, (int16x4_t)0x53005300530053);
    int32x4_t v10 = vmlsl_s16(vmull_s16(v3, (int16x4_t)0x24002400240024), v5, (int16x4_t)0x53005300530053);
    int16x4_t v11 = vqrshrn_n_s32(vaddq_s32(v9, v7), 7uLL);
    *(int16x4_t *)v7.i8 = vqrshrn_n_s32(vsubq_s32(v7, v9), 7uLL);
    int16x4_t v12 = vqrshrn_n_s32(vaddq_s32(v10, v8), 7uLL);
    *(int16x4_t *)v8.i8 = vqrshrn_n_s32(vsubq_s32(v8, v10), 7uLL);
    *(int16x4_t *)v10.i8 = vtrn1_s16(v11, v12);
    int32x2_t v13 = (int32x2_t)vtrn2_s16(v11, v12);
    int32x2_t v14 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v7.i8);
    *(int16x4_t *)v8.i8 = vtrn2_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v7.i8);
    *(int32x2_t *)v7.i8 = vzip1_s32(*(int32x2_t *)v10.i8, v14);
    int16x4_t v15 = (int16x4_t)vzip2_s32(*(int32x2_t *)v10.i8, v14);
    int32x4_t v16 = vaddl_s16(*(int16x4_t *)v7.i8, v15);
    int32x4_t v17 = vsubl_s16(*(int16x4_t *)v7.i8, v15);
    int32x4_t v18 = vshlq_n_s32(v16, 6uLL);
    int32x4_t v19 = vshlq_n_s32(v17, 6uLL);
    *(int32x2_t *)v16.i8 = vzip1_s32(v13, *(int32x2_t *)v8.i8);
    *(int32x2_t *)v8.i8 = vzip2_s32(v13, *(int32x2_t *)v8.i8);
    int32x4_t v20 = vmlal_s16(vmull_s16(*(int16x4_t *)v8.i8, (int16x4_t)0x24002400240024), *(int16x4_t *)v16.i8, (int16x4_t)0x53005300530053);
    int32x4_t v21 = vmlsl_s16(vmull_s16(*(int16x4_t *)v16.i8, (int16x4_t)0x24002400240024), *(int16x4_t *)v8.i8, (int16x4_t)0x53005300530053);
    int32x4_t result = vaddq_s32(v18, v20);
    int32x4_t v22 = vsubq_s32(v18, v20);
    int32x4_t v23 = vaddq_s32(v19, v21);
    int32x4_t v24 = vsubq_s32(v19, v21);
    int16x4_t v25 = vqrshrn_n_s32(result, 0xCuLL);
    *(int16x4_t *)v21.i8 = vqrshrn_n_s32(v22, 0xCuLL);
    int16x4_t v26 = vqrshrn_n_s32(v23, 0xCuLL);
    *(int16x4_t *)v16.i8 = vqrshrn_n_s32(v24, 0xCuLL);
    vst4_s16(a1->i16, *(int16x4x4_t *)(&v16 - 1));
  }
  return result;
}

int8x8_t sub_1D0C5882C(uint8x8_t *a1, uint64_t a2, int16x8_t *a3, int16x8_t *a4, int16x4_t *a5)
{
  int16x8_t v6 = *a3;
  int16x8_t v5 = a3[1];
  int16x8_t v8 = *a4;
  int16x8_t v7 = a4[1];
  if (a5)
  {
    int16x8_t v9 = a3[-2];
    int16x8_t v10 = a3[-1];
    v11.i64[0] = 0x800000008;
    v11.i64[1] = 0x800000008;
    int32x4_t v12 = vdupq_laneq_s32(vsubw_s16(v11, *a5), 2);
    int32x4_t v13 = vshlq_s32(vmovl_s16(*(int16x4_t *)v9.i8), v12);
    int32x4_t v14 = vshlq_s32(vmovl_high_s16(v9), v12);
    int32x4_t v15 = vshlq_s32(vmovl_s16(*(int16x4_t *)v10.i8), v12);
    int32x4_t v16 = vshlq_s32(vmovl_high_s16(v10), v12);
    int32x4_t v17 = vmovl_s16(vdup_lane_s16(*a5, 0));
    int32x4_t v18 = vmovl_s16(vdup_lane_s16(*a5, 1));
    int16x8_t v6 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v13, v17), 3uLL), vmulq_s32(v14, v17), 3uLL), v6);
    int16x8_t v5 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v15, v17), 3uLL), vmulq_s32(v16, v17), 3uLL), v5);
    int16x8_t v8 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v13, v18), 3uLL), vmulq_s32(v14, v18), 3uLL), v8);
    int16x8_t v7 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v15, v18), 3uLL), vmulq_s32(v16, v18), 3uLL), v7);
    a3[-2] = 0u;
    a3[-1] = 0u;
  }
  *a3 = 0u;
  a3[1] = 0u;
  int16x8_t v19 = vzip1q_s16(v6, v8);
  *a4 = 0u;
  a4[1] = 0u;
  int16x8_t v20 = vqaddq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + a2)), vzip2q_s16(v6, v8));
  int16x8_t v21 = vqaddq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2)), vzip1q_s16(v5, v7));
  int16x8_t v22 = vqaddq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + 3 * a2)), vzip2q_s16(v5, v7));
  *a1 = (uint8x8_t)vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(*a1), v19));
  *(int8x8_t *)((char *)a1 + a2) = vqmovun_s16(v20);
  *(int8x8_t *)((char *)a1 + 2 * a2) = vqmovun_s16(v21);
  int8x8_t result = vqmovun_s16(v22);
  *(int8x8_t *)((char *)a1 + 3 * a2) = result;
  return result;
}

uint64_t sub_1D0C5894C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int8x8_t a6)
{
  int16x8_t v7 = *(unint64_t **)(a1 + 40);
  unint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  int32x4_t v11 = (unsigned int *)v7[3];
  int16x8_t v10 = (unsigned int *)v7[4];
  uint64_t v12 = v7[2];
  uint64_t v13 = (int)a3 - 2;
  if (2 * (int)a3 < 2)
  {
    LODWORD(v14) = 0;
    LODWORD(v17) = 0;
  }
  else
  {
    uint64_t v14 = 0;
    int32x4_t v15 = (char *)&unk_1D0DA76FD + 36 * (a5 > 0) + 9 * v13;
    int32x4_t v16 = (char *)v7 + 83;
    uint64_t v17 = (2 * a3 - 1);
    while (1)
    {
      uint64_t v18 = v15[v14];
      unint64_t v19 = v16[v18];
      uint64_t v20 = byte_1D0D7FCB3[(v9 & 0xC0) + (v19 >> 1)];
      LODWORD(v21) = v9 - v20;
      BOOL v22 = v8 >= (v9 - v20) << 55;
      if (v8 < (v9 - v20) << 55) {
        unint64_t v21 = v21;
      }
      else {
        unint64_t v21 = byte_1D0D7FCB3[(v9 & 0xC0) + (v19 >> 1)];
      }
      if (v8 < (v9 - v20) << 55)
      {
        uint64_t v23 = 0;
      }
      else
      {
        v8 -= (v9 - v20) << 55;
        uint64_t v23 = 1;
      }
      if (v22) {
        char v24 = v19 + 1;
      }
      else {
        char v24 = v16[v18];
      }
      int v25 = __clz(v21) - 55;
      v8 <<= v25;
      v16[v18] = byte_1D0D7FCB3[2 * v19 + 256 + v23];
      v12 += v25;
      if (v12 >= 0)
      {
        unsigned int v26 = *v11++;
        v8 += (unint64_t)bswap32(v26) << v12;
        v12 -= 32;
        if (v11 >= v10) {
          int32x4_t v11 = v10;
        }
      }
      unint64_t v9 = v21 << v25;
      if ((v24 & 1) == 0) {
        break;
      }
      if (v17 == ++v14)
      {
        LODWORD(v14) = 2 * a3 - 1;
        break;
      }
    }
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(a1 + 40) + 101;
    while (1)
    {
      uint64_t v29 = v15[v27];
      unint64_t v30 = *(unsigned __int8 *)(v28 + v29);
      uint64_t v31 = byte_1D0D7FCB3[(v9 & 0xC0) + (v30 >> 1)];
      LODWORD(v32) = v9 - v31;
      BOOL v33 = v8 >= (v9 - v31) << 55;
      if (v8 < (v9 - v31) << 55) {
        unint64_t v32 = v32;
      }
      else {
        unint64_t v32 = byte_1D0D7FCB3[(v9 & 0xC0) + (v30 >> 1)];
      }
      if (v8 < (v9 - v31) << 55)
      {
        uint64_t v34 = 0;
      }
      else
      {
        v8 -= (v9 - v31) << 55;
        uint64_t v34 = 1;
      }
      if (v33) {
        char v35 = v30 + 1;
      }
      else {
        char v35 = *(unsigned char *)(v28 + v29);
      }
      int v36 = __clz(v32) - 55;
      v8 <<= v36;
      *(unsigned char *)(v28 + v29) = byte_1D0D7FCB3[2 * v30 + 256 + v34];
      v12 += v36;
      if (v12 >= 0)
      {
        unsigned int v37 = *v11++;
        v8 += (unint64_t)bswap32(v37) << v12;
        v12 -= 32;
        if (v11 >= v10) {
          int32x4_t v11 = v10;
        }
      }
      unint64_t v9 = v32 << v36;
      if ((v35 & 1) == 0) {
        break;
      }
      if (v17 == ++v27) {
        goto LABEL_36;
      }
    }
    LODWORD(v17) = v27;
LABEL_36:
    unint64_t v38 = v9 << 54;
    if (v14 >= 4)
    {
      int v39 = 0;
      unsigned int v40 = v14 >> 1;
      signed int v41 = (v14 >> 1) - 1;
      do
      {
        BOOL v42 = v8 >= v38;
        if (v8 < v38) {
          unint64_t v43 = 0;
        }
        else {
          unint64_t v43 = v9 << 54;
        }
        unint64_t v8 = 2 * (v8 - v43);
        int v39 = v42 | (2 * v39);
        --v40;
      }
      while (v40 > 1);
      v12 += v41;
      if (v12 >= 0)
      {
        unsigned int v44 = *v11++;
        v8 += (unint64_t)bswap32(v44) << v12;
        v12 -= 32;
        if (v11 >= v10) {
          int32x4_t v11 = v10;
        }
      }
      LODWORD(v14) = v39 + ((v14 & 1 | 2) << v41);
    }
    if (v17 >= 4)
    {
      int v45 = 0;
      unsigned int v46 = v17 >> 1;
      signed int v47 = (v17 >> 1) - 1;
      do
      {
        BOOL v48 = v8 >= v38;
        if (v8 < v38) {
          unint64_t v49 = 0;
        }
        else {
          unint64_t v49 = v9 << 54;
        }
        unint64_t v8 = 2 * (v8 - v49);
        int v45 = v48 | (2 * v45);
        --v46;
      }
      while (v46 > 1);
      v12 += v47;
      if (v12 >= 0)
      {
        unsigned int v50 = *v11++;
        v8 += (unint64_t)bswap32(v50) << v12;
        v12 -= 32;
        if (v11 >= v10) {
          int32x4_t v11 = v10;
        }
      }
      LODWORD(v17) = v45 + ((v17 & 1 | 2) << v47);
    }
  }
  if (a4 == 2) {
    int v51 = v17;
  }
  else {
    int v51 = v14;
  }
  if (a4 == 2) {
    int v52 = v14;
  }
  else {
    int v52 = v17;
  }
  if (a3 == 3) {
    int v53 = 4 * a4;
  }
  else {
    int v53 = 0;
  }
  __int16 v54 = **(_WORD **)(a1 + 48);
  int v55 = v54 >> 9;
  uint64_t v56 = *(void *)(a1 + 32);
  char v251 = v10;
  uint64_t v225 = v7;
  int v227 = (unsigned __int8 *)(a1 + 6426);
  if (a5)
  {
    v55 += *(char *)(v56 + a5 + 656) + *(char *)(*(void *)(a1 + 24) + a5 + 2);
    int v57 = *(unsigned __int8 **)(v56 + 16);
    int v58 = v57[2099];
    if (v55 <= -v58) {
      int v55 = -v58;
    }
    if (v57[2148] == 1)
    {
      if (v55 >= 57) {
        int v59 = 57;
      }
      else {
        int v59 = v55;
      }
      BOOL v60 = __OFSUB__(v59, 30);
      int v61 = v59 - 30;
      if (v61 < 0 == v60) {
        int v55 = byte_1D0DAE600[v61];
      }
    }
    else if (v55 >= 51)
    {
      int v55 = 51;
    }
    uint64_t v62 = a3;
    uint64_t v63 = v57 + 223;
  }
  else
  {
    uint64_t v62 = a3;
    int v57 = *(unsigned __int8 **)(v56 + 16);
    LOWORD(v58) = v57[2097];
    uint64_t v63 = v57 + 222;
  }
  uint64_t v239 = a1;
  int v64 = (v52 >> 2 << v13) + (v51 >> 2);
  int v65 = v51 & 3;
  char v66 = v62 + 3;
  if (v55 < 0)
  {
    LOWORD(v55) = v55 + v58;
    v66 += *v63;
  }
  BOOL v236 = 0;
  uint64_t v67 = *(void *)(a1 + 40) + 40;
  unsigned int v68 = v65 & 0xFFFFFFF3 | (4 * (v52 & 3));
  uint64_t v69 = *((unsigned __int8 *)*(&off_1E6899B00 + v13) + v53 + v64);
  int v70 = *v227;
  int v71 = v54 & 0x100;
  if (v57[402]) {
    BOOL v72 = (v70 | v71) == 0;
  }
  else {
    BOOL v72 = 1;
  }
  int v73 = !v72;
  uint64_t v74 = *(void *)(v56 + 32);
  if (*(unsigned char *)(v74 + 5))
  {
    uint64_t v75 = v239;
    if (!v71) {
      BOOL v236 = v227[1] == 0;
    }
  }
  else
  {
    uint64_t v75 = v239;
  }
  char v258 = (char *)&unk_1D0DAF020 + 64 * (uint64_t)a4 + 16 * v13;
  uint64_t v76 = v67 + 2 * (a5 > 0);
  uint64_t v77 = v67 + 16 * (a5 > 0);
  int v226 = byte_1D0DAFC60[16 * a4 + v68];
  int v78 = v57[274];
  uint64_t v79 = v67 + 4 * (a5 > 0);
  uint64_t v80 = v62;
  BOOL v82 = (int)v62 > 2 && v70 != 0;
  int v83 = (char *)*(&off_1E689A008 + v13) + v53;
  if (!v78 || v82)
  {
    uint64_t v85 = 0;
    v66 -= 4;
  }
  else
  {
    if (*(_DWORD *)(v75 + 4) == 1) {
      uint64_t v84 = 0;
    }
    else {
      uint64_t v84 = 3;
    }
    uint64_t v85 = v74 + 390 * v13 + 65 * (v84 + a5) + 40;
  }
  uint64_t v86 = v251;
  uint64_t v257 = v85;
  uint64_t v238 = (char *)(v76 + 79);
  uint64_t v230 = v77 + 127;
  uint64_t v228 = v79 + 151;
  int v87 = a39H[(__int16)v55 % 6] << ((__int16)v55 / 6);
  unint64_t v248 = (1 << v83[v69]) | (1 << *v83);
  int v88 = v226 & 0xF;
  uint64_t v89 = (1 << v88);
  int v244 = ~(-1 << v13);
  int v246 = 1 << v13;
  int v245 = (1 << v13) - 1;
  int v243 = 4 << v62;
  if (a5 < 1) {
    int v90 = 1;
  }
  else {
    int v90 = v73;
  }
  if (v90) {
    uint64_t v91 = 0;
  }
  else {
    uint64_t v91 = 27;
  }
  uint64_t v242 = v91;
  if (a5) {
    int v92 = 43;
  }
  else {
    int v92 = 42;
  }
  int v241 = v92;
  if (a4) {
    int v93 = 15;
  }
  else {
    int v93 = 9;
  }
  char v252 = v62 - 3;
  if (v62 == 3) {
    int v94 = 9;
  }
  else {
    int v94 = 12;
  }
  int v247 = v94;
  int v254 = ~(-1 << v62);
  if (v62 == 3) {
    int v95 = v93;
  }
  else {
    int v95 = 21;
  }
  int v240 = v95;
  uint64_t v253 = v87;
  char v255 = v66;
  uint64_t v256 = 1 << (v66 - 1);
  int v229 = (char *)&unk_1D0DAF020 + 64 * (uint64_t)a4 + 16 * v13;
  uint64_t v96 = v69;
  int v97 = 1;
  uint64_t v250 = v62;
  int v235 = a5;
  uint64_t v233 = v69;
  uint64_t v234 = v13;
  char v232 = v73;
  uint64_t v231 = v83;
  do
  {
    uint64_t v249 = v96;
    unsigned int v98 = v83[v96];
    int v99 = v98 >> v13;
    if ((int)(v245 & v98) >= v245) {
      int v100 = 0;
    }
    else {
      int v100 = (v248 >> v98) & 2;
    }
    uint64_t v101 = (v248 >> (v246 + v98)) & 1;
    if (v99 >= v245) {
      LODWORD(v101) = 0;
    }
    uint64_t v102 = v101 | v100;
    BOOL v103 = v96 == v69 || v96 == 0;
    int v104 = v103;
    if (!v103)
    {
      if (v102) {
        BOOL v105 = v238 + 1;
      }
      else {
        BOOL v105 = v238;
      }
      unint64_t v106 = *v105;
      uint64_t v107 = byte_1D0D7FCB3[(v9 & 0xC0) + (v106 >> 1)];
      LODWORD(v108) = v9 - v107;
      BOOL v109 = v8 >= (v9 - v107) << 55;
      if (v8 < (v9 - v107) << 55) {
        unint64_t v108 = v108;
      }
      else {
        unint64_t v108 = byte_1D0D7FCB3[(v9 & 0xC0) + (v106 >> 1)];
      }
      if (v8 < (v9 - v107) << 55)
      {
        uint64_t v110 = 0;
      }
      else
      {
        v8 -= (v9 - v107) << 55;
        uint64_t v110 = 1;
      }
      if (v109) {
        char v111 = v106 + 1;
      }
      else {
        char v111 = *v105;
      }
      int v112 = __clz(v108) - 55;
      v8 <<= v112;
      *BOOL v105 = byte_1D0D7FCB3[2 * v106 + 256 + v110];
      v12 += v112;
      if (v12 >= 0)
      {
        unsigned int v113 = *v11++;
        v8 += (unint64_t)bswap32(v113) << v12;
        v12 -= 32;
        if (v11 >= v86) {
          int32x4_t v11 = v86;
        }
      }
      unint64_t v9 = v108 << v112;
      if ((v111 & 1) == 0) {
        goto LABEL_317;
      }
      v248 |= 1 << v98;
    }
    int v260 = v99 * v243 + 4 * (v98 & v244);
    uint64_t v114 = *(void *)(v75 + 40) + v242 + 123;
    if (v88 <= (v104 ^ 1))
    {
      unsigned int v116 = v241;
      if (v104) {
        goto LABEL_179;
      }
    }
    else
    {
      BOOL v115 = &v229[v88 - 1];
      unsigned int v116 = v241;
      int v117 = v260;
      do
      {
        if ((v73 & 1) == 0)
        {
          uint64_t v118 = *v115;
          uint64_t v119 = v118 + v117;
          if (v80 == 2)
          {
            int v117 = v260;
            unsigned int v116 = byte_1D0DAFCD0[v119 + 64];
          }
          else if ((int)v119 < 1)
          {
            unsigned int v116 = 0;
          }
          else
          {
            int v120 = byte_1D0DAFCD0[16 * v102 + (v118 & 3 | (4 * ((v119 >> v80) & 3)))];
            if (a5)
            {
              unsigned int v116 = v247 + v120;
            }
            else
            {
              if ((v119 >> v80 >> 2) + ((v119 & v254) >> 2)) {
                int v121 = v120 + 3;
              }
              else {
                int v121 = v120;
              }
              unsigned int v116 = v121 + v240;
            }
            int v117 = v260;
          }
        }
        unint64_t v122 = *(unsigned __int8 *)(v114 + v116);
        uint64_t v123 = byte_1D0D7FCB3[(v9 & 0xC0) + (v122 >> 1)];
        LODWORD(v124) = v9 - v123;
        BOOL v125 = v8 >= (v9 - v123) << 55;
        if (v8 < (v9 - v123) << 55) {
          unint64_t v124 = v124;
        }
        else {
          unint64_t v124 = byte_1D0D7FCB3[(v9 & 0xC0) + (v122 >> 1)];
        }
        if (v8 < (v9 - v123) << 55)
        {
          uint64_t v126 = 0;
        }
        else
        {
          v8 -= (v9 - v123) << 55;
          uint64_t v126 = 1;
        }
        if (v125) {
          char v127 = v122 + 1;
        }
        else {
          char v127 = *(unsigned char *)(v114 + v116);
        }
        int v128 = __clz(v124) - 55;
        v8 <<= v128;
        *(unsigned char *)(v114 + v116) = byte_1D0D7FCB3[2 * v122 + 256 + v126];
        v12 += v128;
        if (v12 >= 0)
        {
          unsigned int v129 = *v11++;
          v8 += (unint64_t)bswap32(v129) << v12;
          v12 -= 32;
          if (v11 >= v86) {
            int32x4_t v11 = v86;
          }
        }
        --v88;
        unint64_t v9 = v124 << v128;
        uint64_t v89 = ((v127 & 1) << v88) | v89;
        --v115;
      }
      while (v88 > (v104 ^ 1));
      if (v104)
      {
LABEL_179:
        uint64_t v130 = v249;
        if (v89) {
          goto LABEL_180;
        }
        goto LABEL_340;
      }
    }
    uint64_t v130 = v249;
    if (v89)
    {
      if ((v73 & 1) == 0)
      {
        if (v80 == 2)
        {
          unsigned int v116 = byte_1D0DAFCD0[v260 + 64];
        }
        else if (v260 < 1)
        {
          unsigned int v116 = 0;
        }
        else
        {
          int v211 = byte_1D0DAFCD0[16 * v102 + 4 * ((v260 >> v80) & 3)];
          if (a5)
          {
            unsigned int v116 = v247 + v211;
          }
          else
          {
            if ((v260 >> v80 >> 2) + ((v260 & v254) >> 2)) {
              v211 += 3;
            }
            unsigned int v116 = v211 + v240;
          }
        }
      }
      unint64_t v212 = *(unsigned __int8 *)(v114 + v116);
      uint64_t v213 = byte_1D0D7FCB3[(v9 & 0xC0) + (v212 >> 1)];
      LODWORD(v214) = v9 - v213;
      BOOL v215 = v8 >= (v9 - v213) << 55;
      if (v8 < (v9 - v213) << 55) {
        unint64_t v214 = v214;
      }
      else {
        unint64_t v214 = byte_1D0D7FCB3[(v9 & 0xC0) + (v212 >> 1)];
      }
      if (v8 < (v9 - v213) << 55)
      {
        uint64_t v216 = 0;
      }
      else
      {
        v8 -= (v9 - v213) << 55;
        uint64_t v216 = 1;
      }
      if (v215) {
        char v217 = v212 + 1;
      }
      else {
        char v217 = *(unsigned char *)(v114 + v116);
      }
      int v218 = __clz(v214);
      int v219 = v218 - 55;
      unint64_t v9 = v214 << (v218 - 55);
      v8 <<= v218 - 55;
      int v210 = v217 & 1;
      *(unsigned char *)(v114 + v116) = byte_1D0D7FCB3[2 * v212 + 256 + v216];
      v12 += v219;
      if (v12 >= 0)
      {
        unsigned int v220 = *v11++;
        v8 += (unint64_t)bswap32(v220) << v12;
        v12 -= 32;
        if (v11 >= v86) {
          int32x4_t v11 = v86;
        }
      }
      uint64_t v130 = v249;
    }
    else
    {
      int v210 = 1;
    }
    uint64_t v89 = v210 | v89;
    if (v89)
    {
LABEL_180:
      unsigned int v131 = 0;
      int v132 = 0;
      if (v130) {
        BOOL v133 = a5 <= 0;
      }
      else {
        BOOL v133 = 0;
      }
      if (v133) {
        int v134 = 2;
      }
      else {
        int v134 = 0;
      }
      uint64_t v135 = v134 | (v97 == 0);
      uint64_t v136 = v230 + 4 * v135;
      a6.i32[0] = v89;
      a6 = vcnt_s8(a6);
      a6.i16[0] = vaddlv_u8((uint8x8_t)a6);
      if (a6.i32[0] >= 8u) {
        unsigned int v137 = 8;
      }
      else {
        unsigned int v137 = a6.i32[0];
      }
      if (v137 <= 1) {
        int v138 = 1;
      }
      else {
        int v138 = v137;
      }
      int v97 = 1;
      uint64_t v139 = v258;
      do
      {
        while (1)
        {
          unint64_t v140 = *(unsigned __int8 *)(v136 + v97);
          uint64_t v141 = byte_1D0D7FCB3[(v9 & 0xC0) + (v140 >> 1)];
          LODWORD(v142) = v9 - v141;
          BOOL v143 = v8 >= (v9 - v141) << 55;
          if (v8 < (v9 - v141) << 55) {
            unint64_t v142 = v142;
          }
          else {
            unint64_t v142 = byte_1D0D7FCB3[(v9 & 0xC0) + (v140 >> 1)];
          }
          if (v8 < (v9 - v141) << 55)
          {
            uint64_t v144 = 0;
          }
          else
          {
            v8 -= (v9 - v141) << 55;
            uint64_t v144 = 1;
          }
          if (v143) {
            char v145 = v140 + 1;
          }
          else {
            char v145 = *(unsigned char *)(v136 + v97);
          }
          int v146 = __clz(v142) - 55;
          v8 <<= v146;
          *(unsigned char *)(v136 + v97) = byte_1D0D7FCB3[2 * v140 + 256 + v144];
          v12 += v146;
          if (v12 >= 0)
          {
            unsigned int v147 = *v11++;
            v8 += (unint64_t)bswap32(v147) << v12;
            v12 -= 32;
            if (v11 >= v86) {
              int32x4_t v11 = v86;
            }
          }
          unint64_t v9 = v142 << v146;
          v131 |= (v145 & 1) << v132;
          if ((v145 & 1) == 0) {
            break;
          }
          int v97 = 0;
          if (++v132 == v138)
          {
            uint64_t v261 = a2 + 2 * v260;
            uint64_t v148 = v253;
            goto LABEL_219;
          }
        }
        if ((v97 - 1) < 2) {
          ++v97;
        }
        ++v132;
      }
      while (v132 != v138);
      uint64_t v261 = a2 + 2 * v260;
      BOOL v149 = a6.i32[0] > 8u;
      uint64_t v148 = v253;
      if (v97)
      {
        int v150 = 0;
        goto LABEL_232;
      }
LABEL_219:
      unint64_t v151 = *(unsigned __int8 *)(v228 + v135);
      uint64_t v152 = byte_1D0D7FCB3[(v9 & 0xC0) + (v151 >> 1)];
      LODWORD(v153) = v9 - v152;
      BOOL v154 = v8 >= (v9 - v152) << 55;
      if (v8 < (v9 - v152) << 55) {
        unint64_t v153 = v153;
      }
      else {
        unint64_t v153 = byte_1D0D7FCB3[(v9 & 0xC0) + (v151 >> 1)];
      }
      if (v8 < (v9 - v152) << 55)
      {
        uint64_t v155 = 0;
      }
      else
      {
        v8 -= (v9 - v152) << 55;
        uint64_t v155 = 1;
      }
      if (v154) {
        char v156 = v151 + 1;
      }
      else {
        char v156 = *(unsigned char *)(v228 + v135);
      }
      int v157 = __clz(v153);
      int v158 = v157 - 55;
      unint64_t v9 = v153 << (v157 - 55);
      v8 <<= v157 - 55;
      int v150 = v156 & 1;
      *(unsigned char *)(v228 + v135) = byte_1D0D7FCB3[2 * v151 + 256 + v155];
      int v97 = 0;
      v12 += v158;
      if (v12 >= 0)
      {
        unsigned int v159 = *v11++;
        v8 += (unint64_t)bswap32(v159) << v12;
        v12 -= 32;
        if (v11 >= v86) {
          int32x4_t v11 = v86;
        }
      }
      BOOL v149 = 1;
LABEL_232:
      int v160 = 0;
      unsigned int v161 = __clz(v89);
      int v162 = v161 ^ 0x1F;
      char v163 = v161 + 1;
      BOOL v164 = (int)((v161 ^ 0x1F) - __clz(__rbit32(v89))) > 3 && v236;
      unint64_t v165 = v9 << 54;
      int v166 = a6.i32[0] - v164 + 1;
      do
      {
        BOOL v167 = v8 >= v165;
        if (v8 < v165) {
          unint64_t v168 = 0;
        }
        else {
          unint64_t v168 = v9 << 54;
        }
        unint64_t v8 = 2 * (v8 - v168);
        int v160 = v167 | (2 * v160);
        --v166;
      }
      while (v166 > 1);
      uint64_t v169 = v80;
      v12 += a6.i32[0] - v164;
      if (v12 >= 0)
      {
        unsigned int v170 = *v11++;
        v8 += (unint64_t)bswap32(v170) << v12;
        v12 -= 32;
        if (v11 >= v86) {
          int32x4_t v11 = v86;
        }
      }
      unsigned int v171 = 0;
      int v172 = 0;
      unsigned int v173 = 0;
      char v174 = 0;
      uint64_t v175 = v89 << v163;
      int v176 = v160 << (v164 - a6.i8[0]);
      unsigned int v259 = __clz(__rbit32(v131));
      unsigned int v177 = *(_WORD **)(v75 + 48);
      if (a6.i32[0] <= 1u) {
        int v178 = 1;
      }
      else {
        int v178 = a6.i32[0];
      }
      int v179 = v178 - 1;
      unsigned int v180 = v131;
      while (1)
      {
        if (v180) {
          int v181 = v150 + 2;
        }
        else {
          int v181 = 1;
        }
        if (v180) {
          int v150 = 0;
        }
        if (v149)
        {
          BOOL v182 = (v180 & 1) == 0;
          if (v259 != v173 || v131 == 0) {
            int v184 = 2;
          }
          else {
            int v184 = 3;
          }
          BOOL v185 = v184 == v181;
          if (v173 < 8) {
            BOOL v182 = v185;
          }
          if (v182)
          {
            if (v171 <= 3 << v172) {
              unsigned int v186 = v172;
            }
            else {
              unsigned int v186 = v172 + 1;
            }
            if (v186 >= 4) {
              int v172 = 4;
            }
            else {
              int v172 = v186;
            }
            if (v8 >= v165)
            {
              unsigned int v188 = 0;
              do
              {
                unsigned int v187 = v188 + 1;
                unint64_t v8 = 2 * (v8 - v165);
              }
              while (v8 >= v165 && v188++ < 0x11);
            }
            else
            {
              unsigned int v187 = 0;
            }
            v8 *= 2;
            v12 += v187 + 1;
            if (v12 >= 0)
            {
              unsigned int v190 = *v11++;
              v8 += (unint64_t)bswap32(v190) << v12;
              v12 -= 32;
              if (v11 >= v251) {
                int32x4_t v11 = v251;
              }
            }
            unsigned int v191 = v187 - 3;
            if (v187 <= 2)
            {
              unsigned int v192 = 0;
            }
            else
            {
              unsigned int v187 = (1 << (v187 - 3)) + 2;
              unsigned int v192 = v191;
            }
            unsigned int v193 = v187 << v172;
            unsigned int v194 = v192 + v172;
            if (v192 + v172)
            {
              int v195 = 0;
              int v196 = v192 + v172 + 1;
              do
              {
                BOOL v197 = v8 >= v165;
                if (v8 < v165) {
                  unint64_t v198 = 0;
                }
                else {
                  unint64_t v198 = v9 << 54;
                }
                unint64_t v8 = 2 * (v8 - v198);
                int v195 = v197 | (2 * v195);
                --v196;
              }
              while (v196 > 1);
              v12 += (int)v194;
              if (v12 >= 0)
              {
                unsigned int v199 = *v11++;
                v8 += (unint64_t)bswap32(v199) << v12;
                v12 -= 32;
                if (v11 >= v251) {
                  int32x4_t v11 = v251;
                }
              }
              uint64_t v169 = v250;
              uint64_t v139 = v258;
              v193 += v195;
            }
            else
            {
              uint64_t v169 = v250;
            }
            unsigned int v171 = v193 + v181;
            int v181 = v171;
          }
        }
        v174 += v181;
        char v200 = !v164;
        if (v173 != a6.i32[0] - 1) {
          char v200 = 1;
        }
        int v201 = (v181 ^ (v176 >> 31)) - (v176 >> 31);
        if (v174) {
          int v181 = -v181;
        }
        if (v200)
        {
          v176 *= 2;
          int v202 = v201;
        }
        else
        {
          int v202 = v181;
        }
        unsigned int v203 = v139[v162];
        if ((*v177 & 0x100) == 0)
        {
          uint64_t v204 = v148;
          if (v257)
          {
            int v205 = v260 + v203;
            uint64_t v148 = v253;
            unsigned int v206 = ((v205 & v254) >> v252) + 8 * (v205 >> v169 >> v252);
            uint64_t v139 = v258;
            if ((int)v169 < 4) {
              unsigned int v206 = v260 + v203;
            }
            if (v205) {
              signed int v207 = v206 + 1;
            }
            else {
              signed int v207 = v206;
            }
            uint64_t v204 = *(unsigned __int8 *)(v257 + v207) * (uint64_t)(int)v253;
          }
          uint64_t v208 = (v256 + v204 * v202) >> v255;
          if (v208 >= 0x7FFF) {
            uint64_t v208 = 0x7FFFLL;
          }
          if (v208 <= -32768) {
            LOWORD(v202) = 0x8000;
          }
          else {
            LOWORD(v202) = v208;
          }
        }
        *(_WORD *)(v261 + 2 * v203) = v202;
        if (v173 == v179) {
          break;
        }
        ++v173;
        v180 >>= 1;
        unsigned int v209 = __clz(v175) + 1;
        LODWORD(v175) = v175 << v209;
        v162 -= v209;
      }
      uint64_t v89 = 0;
      int v88 = 16;
      a5 = v235;
      uint64_t v75 = v239;
      uint64_t v69 = v233;
      uint64_t v13 = v234;
      LOBYTE(v73) = v232;
      int v83 = v231;
      uint64_t v80 = v169;
      uint64_t v86 = v251;
LABEL_317:
      uint64_t v130 = v249;
      goto LABEL_341;
    }
LABEL_340:
    int v88 = 16;
LABEL_341:
    uint64_t v96 = v130 - 1;
  }
  while (v130 > 0);
  uint64_t v221 = *(void *)(v75 + 32);
  if (*v227)
  {
    uint64_t v222 = *(void *)(v221 + 2280) + 552;
    BOOL v223 = a5 != 0;
    if (v227[1]) {
      (*(void (**)(uint64_t))(v222 + 8 * v223 + 384))(a2);
    }
    else {
      (*(void (**)(uint64_t))(v222 + 32 * v223 + 8 * v13 + 176))(a2);
    }
  }
  else if (v227[1])
  {
    (*(void (**)(uint64_t))(*(void *)(v221 + 2280) + 8 * (v227[1] - 1) + 920))(a2);
  }
  *uint64_t v225 = v8;
  v225[1] = v9;
  uint64_t result = (v226 + 16 * v69 + 1);
  v225[2] = v12;
  v225[3] = (unint64_t)v11;
  return result;
}

void sub_1D0C5983C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  *a9 = v11;
  a9[1] = v12;
  a9[2] = v9;
  a9[3] = v10;
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C5984C(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  v32[5] = *MEMORY[0x1E4F143B8];
  v32[0] = a6;
  v32[1] = vext_s8(a6, a7, 2uLL);
  v32[2] = vext_s8(a6, a7, 4uLL);
  v32[3] = vext_s8(a6, a7, 6uLL);
  v32[4] = a7;
  int16x8_t v7 = (int16x8_t)vmull_u8((uint8x8_t)v32[result >> 5], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F)));
  if ((result & 0x1F) != 0) {
    int16x8_t v7 = (int16x8_t)vmlal_u8((uint16x8_t)v7, (uint8x8_t)v32[(result >> 5) + 1], (uint8x8_t)vdup_n_s8(result & 0x1F));
  }
  int v8 = a2 + result;
  unsigned int v9 = (a2 + result) >> 5;
  unsigned int v10 = (a2 + result) & 0x1F;
  int16x8_t v11 = (int16x8_t)vmull_u8((uint8x8_t)v32[v9], (uint8x8_t)vdup_n_s8(32 - v10));
  if (v10) {
    int16x8_t v11 = (int16x8_t)vmlal_u8((uint16x8_t)v11, (uint8x8_t)v32[v9 + 1], (uint8x8_t)vdup_n_s8(v10));
  }
  unsigned int v12 = (v8 + a2) >> 5;
  unsigned int v13 = (v8 + a2) & 0x1F;
  int16x8_t v14 = (int16x8_t)vmull_u8((uint8x8_t)v32[v12], (uint8x8_t)vdup_n_s8(32 - v13));
  if (v13) {
    int16x8_t v14 = (int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)v32[v12 + 1], (uint8x8_t)vdup_n_s8(v13));
  }
  double v15 = COERCE_DOUBLE(vrshrn_n_s16(v7, 5uLL));
  double v16 = COERCE_DOUBLE(vrshrn_n_s16(v11, 5uLL));
  unsigned int v17 = v8 + a2 + a2;
  unsigned int v18 = v17 >> 5;
  double v19 = COERCE_DOUBLE(vrshrn_n_s16(v14, 5uLL));
  unsigned int v20 = v17 & 0x1F;
  int16x8_t v21 = (int16x8_t)vmull_u8((uint8x8_t)v32[v18], (uint8x8_t)vdup_n_s8(32 - v20));
  if (v20) {
    int16x8_t v21 = (int16x8_t)vmlal_u8((uint16x8_t)v21, (uint8x8_t)v32[v18 + 1], (uint8x8_t)vdup_n_s8(v20));
  }
  double v22 = COERCE_DOUBLE(vrshrn_n_s16(v21, 5uLL));
  int32x2_t v23 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v15, *(int16x4_t *)&v16);
  int32x2_t v24 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v15, *(int16x4_t *)&v16);
  int32x2_t v25 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v22);
  int32x2_t v26 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v22);
  double v27 = COERCE_DOUBLE(vzip1_s32(v23, v25));
  double v28 = COERCE_DOUBLE(vzip2_s32(v23, v25));
  double v29 = COERCE_DOUBLE(vzip1_s32(v24, v26));
  double v30 = COERCE_DOUBLE(vzip2_s32(v24, v26));
  if (a3)
  {
    double v22 = v30;
    double v19 = v28;
    double v16 = v29;
    double v15 = v27;
  }
  *a5 = v15;
  *(double *)((char *)a5 + a4) = v16;
  uint64_t v31 = (double *)((char *)a5 + a4 + a4);
  *uint64_t v31 = v19;
  *(double *)((char *)v31 + a4) = v22;
  return result;
}

uint64_t sub_1D0C599DC(unsigned int a1, int8x8_t *a2, uint64_t a3, double *a4, int8x16_t a5)
{
  int v5 = byte_1D0D7FEBA[a1];
  int v6 = byte_1D0D7FEBA[a1];
  if (a1 >= 0x12)
  {
    if (v5 < 0)
    {
      *(int8x8_t *)a5.i8 = *a2;
      *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, *(int8x8_t *)((char *)&xmmword_1D0D80000[2 * a1 - 34] - 8));
      a5.i16[3] = a2[-1].i16[3];
      a2 += 2;
      return sub_1D0C59E3C(byte_1D0D7FEBA[a1], v5, a1 < 0x12, a3, a4, *(int8x8_t *)a5.i8, *a2);
    }
    a2 += 2;
    return sub_1D0C5984C(byte_1D0D7FEBA[a1], v6, a1 < 0x12, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
  }
  if ((v6 & 0x80) == 0) {
    return sub_1D0C5984C(byte_1D0D7FEBA[a1], v6, a1 < 0x12, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
  }
  *(int8x8_t *)a5.i8 = a2[2];
  *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, (int8x8_t)xmmword_1D0D80000[2 * (18 - a1) + 1].u64[1]);
  a5.i16[3] = a2[-1].i16[3];
  return sub_1D0C59E3C(byte_1D0D7FEBA[a1], v5, a1 < 0x12, a3, a4, *(int8x8_t *)a5.i8, *a2);
}

int8x8_t sub_1D0C59A8C(uint64_t a1, int8x8_t *a2, uint64_t a3, _DWORD *a4)
{
  int8x8_t v7 = a2[1];
  uint8x8_t v8 = (uint8x8_t)vdup_lane_s8(v7, 4);
  int16x4_t v9 = (int16x4_t)vmull_u8((uint8x8_t)0x807060504030201, (uint8x8_t)vdup_lane_s8(*a2, 4)).u64[0];
  int16x4_t v10 = (int16x4_t)vmovl_u8((uint8x8_t)v7).u64[0];
  uint16x8_t v11 = vmovl_u8((uint8x8_t)*a2);
  *(int16x4_t *)v4.i8 = vmul_n_s16((int16x4_t)0x100020003, v11.i16[0]);
  *(int16x4_t *)v5.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 1);
  *(int16x4_t *)v6.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 2);
  *(int16x4_t *)v11.i8 = vmul_lane_s16((int16x4_t)0x100020003, *(int16x4_t *)v11.i8, 3);
  *(int16x4_t *)v12.i8 = vmla_s16(vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v4, (uint8x8_t)0x807060504030201, v8), vdup_lane_s16(v9, 0)), v10, (int16x4_t)0x3000300030003);
  *(int16x4_t *)v13.i8 = vadd_s16((int16x4_t)*(_OWORD *)&vaddw_u8(vmlal_u8(v6, (uint8x8_t)0x807060504030201, v8), (uint8x8_t)v7), vdup_lane_s16(v9, 2));
  v12.u64[1] = (unint64_t)vadd_s16(vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v5, (uint8x8_t)0x807060504030201, v8), vadd_s16(v10, v10)), vdup_lane_s16(v9, 1));
  v13.u64[1] = (unint64_t)vadd_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v11, (uint8x8_t)0x807060504030201, v8), vdup_lane_s16(v9, 3));
  *(int8x8_t *)v11.i8 = vrshrn_n_s16(v12, 3uLL);
  *a4 = v11.i32[0];
  *(_DWORD *)((char *)a4 + a3) = v11.i32[1];
  int8x8_t result = vrshrn_n_s16(v13, 3uLL);
  double v15 = (_DWORD *)((char *)a4 + a3 + a3);
  *double v15 = result.i32[0];
  *(_DWORD *)((char *)v15 + a3) = result.i32[1];
  return result;
}

uint64_t sub_1D0C59B38(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  v64[9] = *MEMORY[0x1E4F143B8];
  v64[0] = a6;
  v64[1] = vext_s8(a6, a7, 1uLL);
  v64[2] = vext_s8(a6, a7, 2uLL);
  v64[3] = vext_s8(a6, a7, 3uLL);
  v64[4] = vext_s8(a6, a7, 4uLL);
  v64[5] = vext_s8(a6, a7, 5uLL);
  v64[6] = vext_s8(a6, a7, 6uLL);
  v64[7] = vext_s8(a6, a7, 7uLL);
  v64[8] = a7;
  int16x8_t v7 = (int16x8_t)vmull_u8((uint8x8_t)v64[result >> 5], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F)));
  if ((result & 0x1F) != 0) {
    int16x8_t v7 = (int16x8_t)vmlal_u8((uint16x8_t)v7, (uint8x8_t)v64[(result >> 5) + 1], (uint8x8_t)vdup_n_s8(result & 0x1F));
  }
  int v8 = a2 + result;
  unsigned int v9 = (a2 + result) >> 5;
  unsigned int v10 = (a2 + result) & 0x1F;
  int16x8_t v11 = (int16x8_t)vmull_u8((uint8x8_t)v64[v9], (uint8x8_t)vdup_n_s8(32 - v10));
  if (v10) {
    int16x8_t v11 = (int16x8_t)vmlal_u8((uint16x8_t)v11, (uint8x8_t)v64[v9 + 1], (uint8x8_t)vdup_n_s8(v10));
  }
  unsigned int v12 = (v8 + a2) >> 5;
  unsigned int v13 = (v8 + a2) & 0x1F;
  int16x8_t v14 = (int16x8_t)vmull_u8((uint8x8_t)v64[v12], (uint8x8_t)vdup_n_s8(32 - v13));
  if (v13) {
    int16x8_t v14 = (int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)v64[v12 + 1], (uint8x8_t)vdup_n_s8(v13));
  }
  unsigned int v15 = v8 + a2 + a2;
  int16x8_t v16 = (int16x8_t)vmull_u8((uint8x8_t)v64[v15 >> 5], (uint8x8_t)vdup_n_s8(32 - (v15 & 0x1F)));
  if ((v15 & 0x1F) != 0) {
    int16x8_t v16 = (int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)v64[(v15 >> 5) + 1], (uint8x8_t)vdup_n_s8(v15 & 0x1F));
  }
  unsigned int v17 = v15 + a2;
  int16x8_t v18 = (int16x8_t)vmull_u8((uint8x8_t)v64[v17 >> 5], (uint8x8_t)vdup_n_s8(32 - (v17 & 0x1F)));
  if ((v17 & 0x1F) != 0) {
    int16x8_t v18 = (int16x8_t)vmlal_u8((uint16x8_t)v18, (uint8x8_t)v64[(v17 >> 5) + 1], (uint8x8_t)vdup_n_s8(v17 & 0x1F));
  }
  unsigned int v19 = v17 + a2;
  int16x8_t v20 = (int16x8_t)vmull_u8((uint8x8_t)v64[v19 >> 5], (uint8x8_t)vdup_n_s8(32 - (v19 & 0x1F)));
  if ((v19 & 0x1F) != 0) {
    int16x8_t v20 = (int16x8_t)vmlal_u8((uint16x8_t)v20, (uint8x8_t)v64[(v19 >> 5) + 1], (uint8x8_t)vdup_n_s8(v19 & 0x1F));
  }
  unsigned int v21 = v19 + a2;
  int16x8_t v22 = (int16x8_t)vmull_u8((uint8x8_t)v64[v21 >> 5], (uint8x8_t)vdup_n_s8(32 - (v21 & 0x1F)));
  if ((v21 & 0x1F) != 0) {
    int16x8_t v22 = (int16x8_t)vmlal_u8((uint16x8_t)v22, (uint8x8_t)v64[(v21 >> 5) + 1], (uint8x8_t)vdup_n_s8(v21 & 0x1F));
  }
  double v23 = COERCE_DOUBLE(vrshrn_n_s16(v7, 5uLL));
  double v24 = COERCE_DOUBLE(vrshrn_n_s16(v11, 5uLL));
  double v25 = COERCE_DOUBLE(vrshrn_n_s16(v14, 5uLL));
  double v26 = COERCE_DOUBLE(vrshrn_n_s16(v16, 5uLL));
  double v27 = COERCE_DOUBLE(vrshrn_n_s16(v18, 5uLL));
  double v28 = COERCE_DOUBLE(vrshrn_n_s16(v20, 5uLL));
  unsigned int v29 = v21 + a2;
  unsigned int v30 = v29 >> 5;
  double v31 = COERCE_DOUBLE(vrshrn_n_s16(v22, 5uLL));
  unsigned int v32 = v29 & 0x1F;
  int16x8_t v33 = (int16x8_t)vmull_u8((uint8x8_t)v64[v30], (uint8x8_t)vdup_n_s8(32 - v32));
  if (v32) {
    int16x8_t v33 = (int16x8_t)vmlal_u8((uint16x8_t)v33, (uint8x8_t)v64[v30 + 1], (uint8x8_t)vdup_n_s8(v32));
  }
  double v34 = COERCE_DOUBLE(vrshrn_n_s16(v33, 5uLL));
  int16x4_t v35 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v23, *(int8x8_t *)&v24);
  int16x4_t v36 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v23, *(int8x8_t *)&v24);
  int16x4_t v37 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v25, *(int8x8_t *)&v26);
  int16x4_t v38 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v25, *(int8x8_t *)&v26);
  int16x4_t v39 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v27, *(int8x8_t *)&v28);
  int16x4_t v40 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v27, *(int8x8_t *)&v28);
  int16x4_t v41 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v31, *(int8x8_t *)&v34);
  int16x4_t v42 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v31, *(int8x8_t *)&v34);
  int32x2_t v43 = (int32x2_t)vtrn1_s16(v35, v37);
  int32x2_t v44 = (int32x2_t)vtrn2_s16(v35, v37);
  int32x2_t v45 = (int32x2_t)vtrn1_s16(v36, v38);
  int32x2_t v46 = (int32x2_t)vtrn2_s16(v36, v38);
  int32x2_t v47 = (int32x2_t)vtrn1_s16(v39, v41);
  int32x2_t v48 = (int32x2_t)vtrn2_s16(v39, v41);
  int32x2_t v49 = (int32x2_t)vtrn1_s16(v40, v42);
  int32x2_t v50 = (int32x2_t)vtrn2_s16(v40, v42);
  double v51 = COERCE_DOUBLE(vzip1_s32(v43, v47));
  double v52 = COERCE_DOUBLE(vzip2_s32(v43, v47));
  double v53 = COERCE_DOUBLE(vzip1_s32(v45, v49));
  double v54 = COERCE_DOUBLE(vzip2_s32(v45, v49));
  double v55 = COERCE_DOUBLE(vzip1_s32(v44, v48));
  double v56 = COERCE_DOUBLE(vzip2_s32(v44, v48));
  double v57 = COERCE_DOUBLE(vzip1_s32(v46, v50));
  double v58 = COERCE_DOUBLE(vzip2_s32(v46, v50));
  if (a3)
  {
    double v34 = v58;
    double v31 = v56;
    double v28 = v54;
    double v27 = v52;
    double v26 = v57;
    double v25 = v55;
    double v24 = v53;
    double v23 = v51;
  }
  *a5 = v23;
  *(double *)((char *)a5 + a4) = v24;
  int v59 = (double *)((char *)a5 + a4 + a4);
  *int v59 = v25;
  BOOL v60 = (double *)((char *)v59 + a4);
  *BOOL v60 = v26;
  int v61 = (double *)((char *)v60 + a4);
  *int v61 = v27;
  uint64_t v62 = (double *)((char *)v61 + a4);
  *uint64_t v62 = v28;
  uint64_t v63 = (double *)((char *)v62 + a4);
  *uint64_t v63 = v31;
  *(double *)((char *)v63 + a4) = v34;
  return result;
}

uint64_t sub_1D0C59E3C(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  v30[5] = *MEMORY[0x1E4F143B8];
  v30[0] = a7;
  v30[1] = vext_s8(a6, a7, 6uLL);
  v30[2] = vext_s8(a6, a7, 4uLL);
  v30[3] = vext_s8(a6, a7, 2uLL);
  v30[4] = a6;
  int v7 = (int)result >> 5;
  if ((int)result >> 5 < 0) {
    int v7 = -v7;
  }
  int16x8_t v8 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v7 - 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v30[v7], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F)));
  int v9 = a2 + result;
  int v10 = (a2 + (int)result) >> 5;
  if (v10 < 0) {
    int v10 = -v10;
  }
  double v11 = COERCE_DOUBLE(vrshrn_n_s16(v8, 5uLL));
  int16x8_t v12 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v10 - 1], (uint8x8_t)vdup_n_s8(v9 & 0x1F)), (uint8x8_t)v30[v10], (uint8x8_t)vdup_n_s8(32 - (v9 & 0x1Fu)));
  int v13 = v9 + a2;
  int v14 = v13 >> 5;
  if (v13 >> 5 < 0) {
    int v14 = -v14;
  }
  double v15 = COERCE_DOUBLE(vrshrn_n_s16(v12, 5uLL));
  int16x8_t v16 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v14 - 1], (uint8x8_t)vdup_n_s8(v13 & 0x1F)), (uint8x8_t)v30[v14], (uint8x8_t)vdup_n_s8(32 - (v13 & 0x1Fu)));
  int v17 = v13 + a2;
  int v18 = v17 >> 5;
  if (v17 >> 5 < 0) {
    int v18 = -v18;
  }
  double v19 = COERCE_DOUBLE(vrshrn_n_s16(v16, 5uLL));
  double v20 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v30[v18 - 1], (uint8x8_t)vdup_n_s8(v17 & 0x1F)), (uint8x8_t)v30[v18], (uint8x8_t)vdup_n_s8(32 - (v17 & 0x1Fu))), 5uLL));
  int32x2_t v21 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v15);
  int32x2_t v22 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v15);
  int32x2_t v23 = (int32x2_t)vtrn1_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v20);
  int32x2_t v24 = (int32x2_t)vtrn2_s16(*(int16x4_t *)&v19, *(int16x4_t *)&v20);
  double v25 = COERCE_DOUBLE(vzip1_s32(v21, v23));
  double v26 = COERCE_DOUBLE(vzip2_s32(v21, v23));
  double v27 = COERCE_DOUBLE(vzip1_s32(v22, v24));
  double v28 = COERCE_DOUBLE(vzip2_s32(v22, v24));
  if (a3)
  {
    double v20 = v28;
    double v19 = v26;
    double v15 = v27;
    double v11 = v25;
  }
  *a5 = v11;
  *(double *)((char *)a5 + a4) = v15;
  unsigned int v29 = (double *)((char *)a5 + a4 + a4);
  *unsigned int v29 = v19;
  *(double *)((char *)v29 + a4) = v20;
  return result;
}

int16x8_t sub_1D0C59FCC(uint16x8_t a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, unsigned char *a5)
{
  int8x8_t v5 = (int8x8_t)a3[1];
  *(int16x4_t *)a1.i8 = vshr_n_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*a3), vdup_n_s16(a3[-1].u8[7])), 1uLL);
  result.i64[0] = vaddw_u8(a1, (uint8x8_t)vdup_lane_s8(v5, 0)).u64[0];
  result.i64[1] = result.i64[0];
  unsigned __int32 v7 = vqmovun_s16(result).u32[0];
  unsigned __int32 v8 = vdup_lane_s8(v5, 1).u32[0];
  unsigned __int32 v9 = vdup_lane_s8(v5, 2).u32[0];
  unsigned __int32 v10 = vdup_lane_s8(v5, 3).u32[0];
  *a5 = v7;
  a5[1] = v8;
  a5[2] = v9;
  a5[3] = v10;
  double v11 = &a5[a4];
  *double v11 = BYTE1(v7);
  v11[1] = BYTE1(v8);
  v11[2] = BYTE1(v9);
  v11[3] = BYTE1(v10);
  int16x8_t v12 = &v11[a4];
  *int16x8_t v12 = BYTE2(v7);
  v12[1] = BYTE2(v8);
  v12[2] = BYTE2(v9);
  v12[3] = BYTE2(v10);
  int v13 = &v12[a4];
  unsigned char *v13 = HIBYTE(v7);
  v13[1] = HIBYTE(v8);
  v13[2] = HIBYTE(v9);
  v13[3] = HIBYTE(v10);
  return result;
}

uint64_t sub_1D0C5A014(unint64_t *a1, unsigned int a2)
{
  unsigned int v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1] << 54;
  uint64_t v5 = a1[2];
  do
  {
    unint64_t v6 = v3;
    if (v3 < v4) {
      unint64_t v7 = 0;
    }
    else {
      unint64_t v7 = v4;
    }
    unint64_t v3 = 2 * (v6 - v7);
    if (v5 < -1)
    {
      ++v5;
    }
    else
    {
      unsigned __int32 v8 = (unsigned int *)a1[3];
      unsigned int v10 = *v8;
      unsigned __int32 v9 = v8 + 1;
      v3 += (unint64_t)bswap32(v10) << (v5 + 1);
      v5 -= 31;
      if ((unint64_t)v9 >= a1[4]) {
        double v11 = (unsigned int *)a1[4];
      }
      else {
        double v11 = v9;
      }
      a1[3] = (unint64_t)v11;
    }
    ++v2;
    a1[2] = v5;
    *a1 = v3;
  }
  while (v6 >= v4 && v2 < a2);
  return v2 - (v6 < v4);
}

int8x8_t sub_1D0C5A09C(uint16x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int8x8_t v5 = *(int8x8_t *)a3;
  *(int16x4_t *)a1.i8 = vshr_n_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(a3 + 8)), vdup_n_s16(*(unsigned __int8 *)(a3 - 1))), 1uLL);
  *a5 = vqmovun_s16((int16x8_t)vaddw_u8(a1, (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a3, 0))).u32[0];
  *(_DWORD *)((char *)a5 + a4) = vdup_lane_s8(v5, 1).u32[0];
  unint64_t v6 = (_DWORD *)((char *)a5 + a4 + a4);
  _DWORD *v6 = vdup_lane_s8(v5, 2).u32[0];
  int8x8_t result = vdup_lane_s8(v5, 3);
  *(_DWORD *)((char *)v6 + a4) = result.i32[0];
  return result;
}

double sub_1D0C5A0E8(uint8x8_t *a1, uint64_t a2, int16x4_t *a3, int a4, int a5)
{
  unint64_t v6 = (int16x8_t *)a3;
  unsigned __int32 v8 = a1;
  if (a5 == 1)
  {
    uint16x8_t v9 = (uint16x8_t)vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    int16x8_t v10 = (int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 6 * a2));
    int16x8_t v11 = (int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)&a1[a2] - a2));
    int8x8_t v12 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + a2)));
    int8x8_t v13 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 2 * a2)));
    int8x8_t v14 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 3 * a2)));
    int8x8_t v15 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 4 * a2)));
    int8x8_t v16 = vqmovun_s16((int16x8_t)vaddw_u8(v9, *(uint8x8_t *)((char *)a1 + 5 * a2)));
    *a1 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v9, *a1));
    *(int8x8_t *)((char *)a1 + a2) = v12;
    *(int8x8_t *)((char *)a1 + 2 * a2) = v13;
    *(int8x8_t *)((char *)a1 + 3 * a2) = v14;
    *(int8x8_t *)((char *)a1 + 4 * a2) = v15;
    *(int8x8_t *)((char *)a1 + 5 * a2) = v16;
    *(int8x8_t *)((char *)a1 + 6 * a2) = vqmovun_s16(v10);
    *(int8x8_t *)((char *)&a1[a2] - a2) = vqmovun_s16(v11);
    if (a4)
    {
      unsigned int v17 = -16;
      do
      {
        int16x8_t *v6 = (int16x8_t)v9;
        v6[1] = (int16x8_t)v9;
        v6 += 2;
        v17 += 16;
      }
      while (v17 < 0x30);
    }
  }
  else
  {
    sub_1D0C5A2BC(a3, a5);
    char v18 = 1;
    do
    {
      char v19 = v18;
      uint8x8_t v20 = *v8;
      uint8x8_t v21 = *(uint8x8_t *)((char *)v8 + a2);
      uint8x8_t v22 = *(uint8x8_t *)((char *)v8 + 2 * a2);
      uint8x8_t v23 = *(uint8x8_t *)((char *)v8 + 3 * a2);
      int16x8_t v24 = v6[1];
      int16x8_t v25 = v6[2];
      int16x8_t v26 = v6[3];
      int32x4_t v27 = (int32x4_t)vtrn1q_s16(*v6, v24);
      int32x4_t v28 = (int32x4_t)vtrn2q_s16(*v6, v24);
      int32x4_t v29 = (int32x4_t)vtrn1q_s16(v25, v26);
      int32x4_t v30 = (int32x4_t)vtrn2q_s16(v25, v26);
      int16x8_t v31 = (int16x8_t)vtrn1q_s32(v27, v29);
      int16x8_t v32 = (int16x8_t)vtrn2q_s32(v27, v29);
      int16x8_t v33 = (int16x8_t)vtrn1q_s32(v28, v30);
      int16x8_t v34 = (int16x8_t)vtrn2q_s32(v28, v30);
      if (a4) {
        unsigned int v35 = -1;
      }
      else {
        unsigned int v35 = 0;
      }
      int8x16_t v36 = (int8x16_t)vdupq_n_s16(v35);
      *(int8x16_t *)unint64_t v6 = vandq_s8((int8x16_t)v31, v36);
      v6[1] = (int16x8_t)vandq_s8((int8x16_t)v33, v36);
      v6[2] = (int16x8_t)vandq_s8((int8x16_t)v32, v36);
      v6[3] = (int16x8_t)vandq_s8((int8x16_t)v34, v36);
      *unsigned __int32 v8 = (uint8x8_t)vqmovun_s16(vqaddq_s16(v31, (int16x8_t)vmovl_u8(v20)));
      *(int8x8_t *)((char *)v8 + a2) = vqmovun_s16(vqaddq_s16(v33, (int16x8_t)vmovl_u8(v21)));
      *(int8x8_t *)((char *)v8 + 2 * a2) = vqmovun_s16(vqaddq_s16(v32, (int16x8_t)vmovl_u8(v22)));
      *(int8x8_t *)v9.i8 = vqmovun_s16(vqaddq_s16(v34, (int16x8_t)vmovl_u8(v23)));
      *(uint8x8_t *)((char *)v8 + 3 * a2) = *(uint8x8_t *)v9.i8;
      unsigned __int32 v8 = (uint8x8_t *)((char *)v8 + 4 * a2);
      v6 += 4;
      char v18 = 0;
    }
    while ((v19 & 1) != 0);
  }
  return *(double *)v9.i64;
}

int16x4_t *sub_1D0C5A2BC(int16x4_t *result, int a2)
{
  unsigned int v2 = result;
  if (a2 == 1)
  {
    int16x8_t v3 = vdupq_n_s16((result->i16[0] + 65) >> 7);
    char v4 = 1;
    do
    {
      char v5 = v4;
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v2 += 8;
      char v4 = 0;
    }
    while ((v5 & 1) != 0);
  }
  else if (a2 > 16)
  {
    sub_1D0C5A624(result, 8u, (uint64_t)&unk_1D0DAE8C0, (int16x4_t *)aYk2);
    sub_1D0C5A624(v2 + 1, 8u, (uint64_t)&unk_1D0DAE8C0, (int16x4_t *)aYk2);
    sub_1D0C5A7D4((int16x8_t *)v2, 8u, (uint64_t)&unk_1D0DAE8C0, (int16x4_t *)aYk2);
    return (int16x4_t *)sub_1D0C5A7D4((int16x8_t *)&v2[8], 8u, (uint64_t)&unk_1D0DAE8C0, (int16x4_t *)aYk2);
  }
  else
  {
    sub_1D0C5A3E8(result, 8u, (uint64_t)&unk_1D0DAE8C0);
    sub_1D0C5AF18(v2, 8u, (uint64_t)&unk_1D0DAE8C0);
    return sub_1D0C5AF18(v2 + 8, 8u, (uint64_t)&unk_1D0DAE8C0);
  }
  return result;
}

int16x4_t *sub_1D0C5A3E8(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  LODWORD(v3) = a2 >> 2;
  int v4 = (a2 - 1) * (a2 >> 2);
  int16x4_t v5 = *(int16x4_t *)((char *)result + 2 * a2);
  int16x4_t v6 = *(int16x4_t *)((char *)result + 4 * a2);
  unint64_t v7 = (int16x8_t *)((char *)&unk_1D0DAE8F0 + 4 * a2);
  int16x4_t v8 = *(int16x4_t *)((char *)result + 6 * a2);
  int32x4_t v9 = vshll_n_s16(*result, 6uLL);
  if (a2 >> 2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v3;
  }
  int16x8_t v10 = (unsigned __int8 *)(a3 + 1);
  do
  {
    int16x8_t v11 = *v7++;
    int32x4_t v12 = vmlal_laneq_s16(v9, v6, v11, 4);
    int32x4_t v13 = vmlsl_laneq_s16(v9, v6, v11, 4);
    int32x4_t v14 = vmlal_lane_s16(vmull_lane_s16(v8, *(int16x4_t *)v11.i8, 1), v5, *(int16x4_t *)v11.i8, 0);
    int32x4_t v15 = vmlal_lane_s16(vmull_lane_s16(v8, *(int16x4_t *)v11.i8, 3), v5, *(int16x4_t *)v11.i8, 2);
    int v16 = *(v10 - 1);
    v11.i32[0] = *v10;
    v10 += 2;
    result[v16] = vqrshrn_n_s32(vaddq_s32(v14, v12), 7uLL);
    result[v11.u32[0]] = vqrshrn_n_s32(vaddq_s32(v15, v13), 7uLL);
    result[v4 - v16] = vqrshrn_n_s32(vsubq_s32(v12, v14), 7uLL);
    result[v4 - v11.i32[0]] = vqrshrn_n_s32(vsubq_s32(v13, v15), 7uLL);
    --v3;
  }
  while (v3);
  return result;
}

int16x4_t sub_1D0C5A4B4(uint64_t a1, int16x4_t *a2, uint64_t a3, int16x4_t *a4)
{
  int16x4_t v4 = vdup_lane_s16(*a2, 1);
  int16x4_t v5 = vdup_lane_s16(*a2, 2);
  int16x4_t result = vdup_lane_s16(*a2, 3);
  *a4 = vdup_lane_s16(*a2, 0);
  *(int16x4_t *)((char *)a4 + a3) = v4;
  unint64_t v7 = (int16x4_t *)((char *)a4 + a3 + a3);
  int16x4_t *v7 = v5;
  *(int16x4_t *)((char *)v7 + a3) = result;
  return result;
}

int8x8_t sub_1D0C5A4E4(uint64_t a1, int16x4_t *a2, uint64_t a3, int8x8_t *a4)
{
  int16x4_t v4 = (const __int16 *)&a2[1];
  uint8x8_t v5 = (uint8x8_t)vld1_dup_s16(v4);
  uint8x8_t v6 = (uint8x8_t)a2[2];
  unint64_t v7 = (const __int16 *)&a2[3];
  uint8x8_t v8 = (uint8x8_t)vld1_dup_s16(v7);
  uint16x8_t v9 = vmull_u8((uint8x8_t)0x404030302020101, v8);
  int32x4_t v10 = (int32x4_t)vmull_u8((uint8x8_t)0x404030302020101, v5);
  int16x8_t v11 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
  int16x8_t v12 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1);
  int16x8_t v13 = (int16x8_t)vdupq_laneq_s32(v10, 2);
  int16x8_t v14 = (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vdupq_laneq_s32(v10, 3), (uint8x8_t)0x404030302020101, v8), (uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 3));
  int16x8_t v15 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 0)), (uint8x8_t)0x404030302020101, v8), v11), v6, (uint8x8_t)0x303030303030303);
  int16x8_t v16 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 1)), (uint8x8_t)0x404030302020101, v8), v12), v6, (uint8x8_t)0x202020202020202);
  int8x8_t result = vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(v9, v6), (uint8x8_t)0x10102020303, (uint8x8_t)vdup_lane_s16(*a2, 2)), v13), 3uLL);
  *a4 = vrshrn_n_s16(v15, 3uLL);
  *(int8x8_t *)((char *)a4 + a3) = vrshrn_n_s16(v16, 3uLL);
  char v18 = (int8x8_t *)((char *)a4 + a3 + a3);
  *char v18 = result;
  *(int8x8_t *)((char *)v18 + a3) = vrshrn_n_s16(v14, 3uLL);
  return result;
}

int16x8_t sub_1D0C5A59C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  int8x8_t v4 = (int8x8_t)a2[1];
  int16x4_t v5 = (int16x4_t)vpaddl_u8((uint8x8_t)vext_s8((int8x8_t)vshld_n_s64(*a2, 0x20uLL), v4, 4uLL));
  int16x4_t v6 = vpadd_s16(v5, v5);
  *(int16x4_t *)v7.i8 = vpadd_s16(v6, v6);
  v7.i64[1] = v7.i64[0];
  uint8x8_t v8 = vqrshrn_n_u16(v7, 3uLL);
  int16x8_t result = (int16x8_t)vaddw_u8(vmull_u8(v8, (uint8x8_t)0x303030303030302), *(uint8x8_t *)a2);
  *(int8x8_t *)v7.i8 = vrshrn_n_s16(result, 2uLL);
  *a4 = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)*a2, (uint8x8_t)v4), v8, (uint8x8_t)0x303030303030302), 2uLL).u32[0];
  int32x4_t v10 = (char *)a4 + a3;
  *int32x4_t v10 = v7.i8[1];
  v10[1] = v8.i8[1];
  v10[2] = v8.i8[1];
  v10[3] = v8.i8[1];
  int16x8_t v11 = (char *)a4 + a3 + a3;
  *int16x8_t v11 = v7.i8[2];
  v11[1] = v8.i8[2];
  v11[2] = v8.i8[2];
  v11[3] = v8.i8[2];
  int16x8_t v12 = &v11[a3];
  *int16x8_t v12 = v7.i8[3];
  v12[1] = v8.i8[3];
  v12[2] = v8.i8[3];
  v12[3] = v8.i8[3];
  return result;
}

double sub_1D0C5A604(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  double result = *(double *)(a2 + 16);
  *a4 = result;
  *(double *)((char *)a4 + a3) = result;
  int16x4_t v5 = (double *)((char *)a4 + a3 + a3);
  double *v5 = result;
  *(double *)((char *)v5 + a3) = result;
  return result;
}

int16x4_t *sub_1D0C5A624(int16x4_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  int16x4_t v4 = *(int16x4_t *)((char *)result + 4 * a2);
  int v5 = (a2 - 1) * (a2 >> 2);
  int16x4_t v6 = result[a2];
  int16x4_t v7 = *(int16x4_t *)((char *)result + 12 * a2);
  int16x4_t v8 = *(int16x4_t *)((char *)result + 2 * a2);
  int16x4_t v9 = *(int16x4_t *)((char *)result + 6 * a2);
  int16x4_t v10 = *(int16x4_t *)((char *)result + 10 * a2);
  int16x4_t v11 = *(int16x4_t *)((char *)result + 14 * a2);
  int32x4_t v12 = vshll_n_s16(*result, 6uLL);
  uint64_t v13 = a2 >> 3;
  int16x8_t v14 = (unsigned __int8 *)(a3 + 3);
  int16x8_t v15 = (int16x8_t *)((char *)&unk_1D0DAE8F0 + 2 * a2);
  do
  {
    int16x8_t v16 = *v15++;
    int32x4_t v17 = vmlal_laneq_s16(v12, v6, v16, 4);
    int32x4_t v18 = vmlsl_laneq_s16(v12, v6, v16, 4);
    int32x4_t v19 = vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v16.i8, 1), v4, *(int16x4_t *)v16.i8, 0);
    int32x4_t v20 = vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v16.i8, 3), v4, *(int16x4_t *)v16.i8, 2);
    int32x4_t v21 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, *a4, 1), v8, *a4, 0), v10, *a4, 2), v11, *a4, 3);
    int32x4_t v22 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, a4[1], 1), v8, a4[1], 0), v10, a4[1], 2), v11, a4[1], 3);
    int16x4_t v23 = a4[3];
    int32x4_t v24 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, a4[2], 1), v8, a4[2], 0), v10, a4[2], 2), v11, a4[2], 3);
    int32x4_t v25 = vaddq_s32(v19, v17);
    int32x4_t v26 = vsubq_s32(v17, v19);
    int v27 = *(v14 - 3);
    int v28 = *(v14 - 2);
    int v29 = *(v14 - 1);
    v16.i32[0] = *v14;
    v14 += 4;
    result[v27] = vqrshrn_n_s32(vaddq_s32(v21, v25), 7uLL);
    int32x4_t v30 = vaddq_s32(v20, v18);
    int32x4_t v31 = vsubq_s32(v18, v20);
    result[v28] = vqrshrn_n_s32(vaddq_s32(v22, v26), 7uLL);
    int32x4_t v32 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, v23, 1), v8, v23, 0), v10, v23, 2), v11, v23, 3);
    result[v29] = vqrshrn_n_s32(vaddq_s32(v24, v30), 7uLL);
    result[v16.u32[0]] = vqrshrn_n_s32(vaddq_s32(v32, v31), 7uLL);
    result[v5 - v27] = vqrshrn_n_s32(vsubq_s32(v25, v21), 7uLL);
    result[v5 - v28] = vqrshrn_n_s32(vsubq_s32(v26, v22), 7uLL);
    result[v5 - v29] = vqrshrn_n_s32(vsubq_s32(v30, v24), 7uLL);
    result[v5 - v16.i32[0]] = vqrshrn_n_s32(vsubq_s32(v31, v32), 7uLL);
    a4 += 4;
    --v13;
  }
  while (v13);
  return result;
}

int16x8_t *sub_1D0C5A7D4(int16x8_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  unsigned int v4 = a2 - 1;
  int v5 = (int16x8_t *)((char *)&unk_1D0DAE8F0 + 2 * a2);
  int16x8_t v6 = *(int16x8_t *)((char *)result + 4 * a2);
  int16x8_t v7 = *(int16x8_t *)((char *)result + 2 * a2);
  int16x8_t v8 = *(int16x8_t *)((char *)result + 6 * a2);
  int32x4_t v9 = (int32x4_t)vtrn1q_s16(*result, v7);
  int32x4_t v10 = (int32x4_t)vtrn2q_s16(*result, v7);
  int32x4_t v11 = (int32x4_t)vtrn1q_s16(v6, v8);
  int32x4_t v12 = (int32x4_t)vtrn2q_s16(v6, v8);
  int16x8_t v13 = (int16x8_t)vtrn1q_s32(v9, v11);
  int16x8_t v14 = (int16x8_t)vtrn2q_s32(v9, v11);
  int16x8_t v15 = (int16x8_t)vtrn1q_s32(v10, v12);
  int16x8_t v16 = (int16x8_t)vtrn2q_s32(v10, v12);
  int32x4_t v17 = vshll_n_s16(*(int16x4_t *)v13.i8, 6uLL);
  uint64_t v18 = a2 >> 3;
  int32x4_t v19 = (unsigned __int8 *)(a3 + 3);
  do
  {
    int16x8_t v20 = *v5++;
    int32x4_t v21 = vmlal_high_laneq_s16(v17, v13, v20, 4);
    int32x4_t v22 = vmlsl_high_laneq_s16(v17, v13, v20, 4);
    int32x4_t v23 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 0), v14, *(int16x4_t *)v20.i8, 1);
    int32x4_t v24 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 2), v14, *(int16x4_t *)v20.i8, 3);
    int32x4_t v25 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *a4, 1), *(int16x4_t *)v15.i8, *a4, 0), v15, *a4, 2), v16, *a4, 3);
    int32x4_t v26 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[1], 1), *(int16x4_t *)v15.i8, a4[1], 0), v15, a4[1], 2), v16, a4[1], 3);
    int16x4_t v27 = a4[3];
    int32x4_t v28 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[2], 1), *(int16x4_t *)v15.i8, a4[2], 0), v15, a4[2], 2), v16, a4[2], 3);
    int32x4_t v29 = vaddq_s32(v23, v21);
    int32x4_t v30 = vsubq_s32(v21, v23);
    int v31 = *(v19 - 3);
    int v32 = *(v19 - 2);
    int v33 = *(v19 - 1);
    v20.i32[0] = *v19;
    v19 += 4;
    *(int16x4_t *)&result->i8[8 * v31] = vqrshrn_n_s32(vaddq_s32(v25, v29), 0xCuLL);
    int32x4_t v34 = vaddq_s32(v24, v22);
    int32x4_t v35 = vsubq_s32(v22, v24);
    *(int16x4_t *)&result->i8[8 * v32] = vqrshrn_n_s32(vaddq_s32(v26, v30), 0xCuLL);
    int32x4_t v36 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, v27, 1), *(int16x4_t *)v15.i8, v27, 0), v15, v27, 2), v16, v27, 3);
    *(int16x4_t *)&result->i8[8 * v33] = vqrshrn_n_s32(vaddq_s32(v28, v34), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * v20.u32[0]] = vqrshrn_n_s32(vaddq_s32(v36, v35), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v31)] = vqrshrn_n_s32(vsubq_s32(v29, v25), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v32)] = vqrshrn_n_s32(vsubq_s32(v30, v26), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v33)] = vqrshrn_n_s32(vsubq_s32(v34, v28), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v20.i32[0])] = vqrshrn_n_s32(vsubq_s32(v35, v36), 0xCuLL);
    a4 += 4;
    --v18;
  }
  while (v18);
  return result;
}

uint64_t sub_1D0C5A968(unsigned int a1, int8x8_t *a2, uint64_t a3, double *a4, int8x16_t a5)
{
  int v5 = byte_1D0D7FEBA[a1];
  int v6 = byte_1D0D7FEBA[a1];
  if (a1 < 0x12)
  {
    if ((v6 & 0x80) == 0) {
      return sub_1D0C59B38(byte_1D0D7FEBA[a1], v6, a1 < 0x12, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
    }
    *(int8x8_t *)a5.i8 = a2[2];
    *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1D0D7FEE0[4 * (18 - a1) + 3]);
    a5.i8[7] = a2[-1].i8[7];
  }
  else
  {
    if ((v5 & 0x80000000) == 0)
    {
      a2 += 2;
      return sub_1D0C59B38(byte_1D0D7FEBA[a1], v6, a1 < 0x12, a3, a4, *a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL));
    }
    *(int8x8_t *)a5.i8 = *a2;
    *(int8x8_t *)a5.i8 = vqtbl1_s8(a5, qword_1D0D7FEE0[4 * a1 - 69]);
    a5.i8[7] = a2[-1].i8[7];
    a2 += 2;
  }
  return sub_1D0C5C5B8(byte_1D0D7FEBA[a1], v5, a1 < 0x12, a3, a4, *(int8x8_t *)a5.i8, *a2);
}

__n128 sub_1D0C5AA1C(int8x8_t *a1, uint64_t a2)
{
  unsigned int v2 = a1[-1].u8[7];
  int8x8_t v3 = vdup_n_s8(v2);
  *(unsigned char *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[2].u8[0] + 2) >> 2;
  int8x16_t v4 = *(int8x16_t *)a1->i8;
  int8x16_t v5 = vextq_s8(v4, v4, 8uLL);
  *(uint8x8_t *)&long long v6 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *a1, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), (uint8x8_t)*a1);
  *((uint8x8_t *)&v6 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1->i8, v5, 9uLL)), *(uint8x8_t *)v5.i8);
  *(_OWORD *)a2 = v6;
  *(unsigned char *)(a2 + 15) = v4.i8[15];
  int8x16_t v7 = *(int8x16_t *)a1[2].i8;
  int8x16_t v8 = vextq_s8(v7, v7, 8uLL);
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v7.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 1uLL)), *(uint8x8_t *)v7.i8);
  *(uint8x8_t *)&result.n128_i8[8] = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v8, 9uLL)), *(uint8x8_t *)v8.i8);
  *(__n128 *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 31) = v7.i8[15];
  return result;
}

__n128 sub_1D0C5AAB4(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2 = a1[-1].u8[15];
  int8x8_t v3 = vdup_n_s8(v2);
  *(unsigned char *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[2].u8[0] + 2) >> 2;
  int8x16_t v4 = *a1;
  int8x16_t v5 = a1[1];
  uint8x8_t v6 = (uint8x8_t)vextq_s8(v4, v4, 8uLL).u64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  uint8x8_t v8 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 9uLL));
  *(uint8x8_t *)v4.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)a1->i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), *(uint8x8_t *)a1->i8);
  *(uint8x8_t *)&long long v9 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 1uLL)), *(uint8x8_t *)v5.i8);
  v4.u64[1] = (unint64_t)vrhadd_u8(v8, v6);
  *((uint8x8_t *)&v9 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 9uLL)), *(uint8x8_t *)v7.i8);
  *(int8x16_t *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 31) = v5.i8[15];
  int8x16_t v10 = a1[2];
  int8x16_t v11 = a1[3];
  int8x16_t v12 = vextq_s8(v11, v11, 8uLL);
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v10.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 1uLL)), *(uint8x8_t *)v10.i8);
  *(uint8x8_t *)&long long v13 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v10, v11, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 1uLL)), *(uint8x8_t *)v11.i8);
  *(uint8x8_t *)&result.n128_i8[8] = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v11, 9uLL)), (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  *((uint8x8_t *)&v13 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v12, 9uLL)), *(uint8x8_t *)v12.i8);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v13;
  *(unsigned char *)(a2 + 63) = v11.i8[15];
  return result;
}

uint8x8_t sub_1D0C5AB9C(uint64_t a1, int8x8_t *a2, uint64_t a3, uint8x8_t *a4)
{
  int16x4_t v4 = vpadd_s16((int16x4_t)vpaddl_u8((uint8x8_t)vuzp1_s8(*a2, a2[2])), (int16x4_t)vpaddl_u8((uint8x8_t)vuzp2_s8(*a2, a2[2])));
  *(int16x4_t *)v5.i8 = vpadd_s16(v4, v4);
  v5.i64[1] = v5.i64[0];
  uint8x8_t result = vqrshrn_n_u16(v5, 3uLL);
  *a4 = result;
  *(uint8x8_t *)((char *)a4 + a3) = result;
  int8x16_t v7 = (uint8x8_t *)((char *)a4 + a3 + a3);
  uint8x8_t *v7 = result;
  *(uint8x8_t *)((char *)v7 + a3) = result;
  return result;
}

int8x8_t sub_1D0C5ABE0(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  int8x8_t v4 = *(int8x8_t *)a2;
  uint16x8_t v5 = (const char *)(a2 - 1);
  uint8x8_t v6 = (uint8x8_t)vld1_dup_s8(v5);
  *a4 = vqmovun_s16(vsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0)), (int16x8_t)vsubl_u8(*(uint8x8_t *)(a2 + 16), v6), 1uLL));
  int8x8_t v7 = vdup_lane_s8(v4, 1);
  int8x8_t v8 = vdup_lane_s8(v4, 2);
  int8x8_t v9 = vdup_lane_s8(v4, 3);
  int8x8_t v10 = vdup_lane_s8(v4, 4);
  int8x8_t v11 = vdup_lane_s8(v4, 5);
  int8x8_t v12 = vdup_lane_s8(v4, 6);
  int8x8_t result = vdup_lane_s8(v4, 7);
  *(int8x8_t *)((char *)a4 + a3) = v7;
  int16x8_t v14 = (int8x8_t *)((char *)a4 + a3 + a3);
  int8x8_t *v14 = v8;
  int16x8_t v15 = (int8x8_t *)((char *)v14 + a3);
  *int16x8_t v15 = v9;
  int16x8_t v16 = (int8x8_t *)((char *)v15 + a3);
  *int16x8_t v16 = v10;
  int32x4_t v17 = (int8x8_t *)((char *)v16 + a3);
  int8x8_t *v17 = v11;
  uint64_t v18 = (int8x8_t *)((char *)v17 + a3);
  *uint64_t v18 = v12;
  *(int8x8_t *)((char *)v18 + a3) = result;
  return result;
}

double sub_1D0C5AC5C(uint64_t a1, uint8x8_t *a2, uint64_t a3, double *a4)
{
  uint64_t v4 = 0;
  v12[8] = *MEMORY[0x1E4F143B8];
  uint16x8_t v5 = (char *)&a2[-1] + 7;
  uint8x8_t v6 = (uint8x8_t)vld1_dup_s8(v5);
  unint64_t v7 = (unint64_t)a2[2];
  int16x8_t v8 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8((int8x8_t)v7, 0));
  int8x8_t v9 = (int8x8_t)vshrd_n_u64(v7, 8uLL);
  uint64_t v10 = (uint64_t)vqmovun_s16(vsraq_n_s16(v8, (int16x8_t)vsubl_u8(*a2, v6), 1uLL));
  v12[0] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x38uLL), v9, 7uLL);
  v12[1] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v9, 7uLL);
  v12[2] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v9, 7uLL);
  v12[3] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v9, 7uLL);
  v12[4] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v9, 7uLL);
  v12[5] = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v9, 7uLL);
  v12[6] = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v9, 7uLL);
  v12[7] = vext_s8((int8x8_t)v10, v9, 7uLL);
  do
  {
    double result = *(double *)&v12[v4];
    *a4 = result;
    a4 = (double *)((char *)a4 + a3);
    ++v4;
  }
  while (v4 != 8);
  return result;
}

int16x4_t *sub_1D0C5AD38(int16x4_t *result, int a2)
{
  unsigned int v2 = result;
  if (a2 == 1)
  {
    int16x8_t v3 = vdupq_n_s16((result->i16[0] + 65) >> 7);
    unsigned int v4 = -32;
    do
    {
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v4 += 32;
      v2 += 8;
    }
    while (v4 < 0xE0);
    return result;
  }
  if (a2 <= 16)
  {
    sub_1D0C5A3E8(result, 0x10u, (uint64_t)&unk_1D0DAE9F0);
LABEL_12:
    unint64_t v8 = -4;
    do
    {
      double result = sub_1D0C5AF18(v2, 0x10u, (uint64_t)&unk_1D0DAEAD0);
      v8 += 4;
      v2 += 16;
    }
    while (v8 < 0xC);
    return result;
  }
  if (a2 >= 0x31)
  {
    unint64_t v6 = -4;
    unint64_t v7 = result;
    do
    {
      sub_1D0C5AFF8(v7, 0x10u, (uint64_t)&unk_1D0DAEA40, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v6 += 4;
      ++v7;
    }
    while (v6 < 0xC);
  }
  else
  {
    sub_1D0C5A624(result, 0x10u, (uint64_t)&unk_1D0DAE9F0, (int16x4_t *)aZwpf);
    sub_1D0C5A624(v2 + 1, 0x10u, (uint64_t)&unk_1D0DAE9F0, (int16x4_t *)aZwpf);
  }
  if (a2 <= 32) {
    goto LABEL_12;
  }
  if (a2 >= 0x51)
  {
    unint64_t v10 = -4;
    do
    {
      double result = (int16x4_t *)sub_1D0C5B290((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1D0DAEAD8, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v10 += 4;
      v2 += 16;
    }
    while (v10 < 0xC);
  }
  else
  {
    unint64_t v9 = -4;
    do
    {
      double result = (int16x4_t *)sub_1D0C5A7D4((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1D0DAEAD0, (int16x4_t *)aZwpf);
      v9 += 4;
      v2 += 16;
    }
    while (v9 < 0xC);
  }
  return result;
}

int16x4_t *sub_1D0C5AF18(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = a2 - 1;
  unsigned int v4 = (int16x8_t *)((char *)&unk_1D0DAE8F0 + 4 * a2);
  int16x4_t v5 = *(int16x4_t *)((char *)result + 2 * a2);
  int16x4_t v6 = *(int16x4_t *)((char *)result + 4 * a2);
  int16x4_t v7 = *(int16x4_t *)((char *)result + 6 * a2);
  int32x2_t v8 = (int32x2_t)vtrn1_s16(*result, v5);
  int32x2_t v9 = (int32x2_t)vtrn1_s16(v6, v7);
  int32x4_t v10 = vshll_n_s16((int16x4_t)vzip1_s32(v8, v9), 6uLL);
  uint64_t v11 = a2 >> 2;
  int32x2_t v12 = (int32x2_t)vtrn2_s16(*result, v5);
  int32x2_t v13 = (int32x2_t)vtrn2_s16(v6, v7);
  int16x4_t v14 = (int16x4_t)vzip2_s32(v8, v9);
  int16x4_t v15 = (int16x4_t)vzip1_s32(v12, v13);
  int16x4_t v16 = (int16x4_t)vzip2_s32(v12, v13);
  int32x4_t v17 = (unsigned __int8 *)(a3 + 1);
  do
  {
    int16x8_t v18 = *v4++;
    int32x4_t v19 = vmlal_laneq_s16(v10, v14, v18, 4);
    int32x4_t v20 = vmlsl_laneq_s16(v10, v14, v18, 4);
    int32x4_t v21 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 1), v15, *(int16x4_t *)v18.i8, 0);
    int32x4_t v22 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 3), v15, *(int16x4_t *)v18.i8, 2);
    int v23 = *(v17 - 1);
    v18.i32[0] = *v17;
    v17 += 2;
    result[v23] = vqrshrn_n_s32(vaddq_s32(v21, v19), 0xCuLL);
    result[v18.u32[0]] = vqrshrn_n_s32(vaddq_s32(v22, v20), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v23))) = vqrshrn_n_s32(vsubq_s32(v19, v21), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v18.i32[0]))) = vqrshrn_n_s32(vsubq_s32(v20, v22), 0xCuLL);
    --v11;
  }
  while (v11);
  return result;
}

int16x4_t *sub_1D0C5AFF8(int16x4_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  uint64_t v5 = a2;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int16x4_t v6 = *(int16x4_t *)((char *)result + 1 * v5);
  int16x4_t v7 = result[v5];
  int16x4_t v8 = *(int16x4_t *)((char *)result + 3 * v5);
  int32x2_t v9 = &result[(v5 * 2)];
  int16x4_t v10 = *(int16x4_t *)((char *)v9 + 1 * v5);
  int16x4_t v11 = *v9;
  int16x4_t v12 = v9[v5];
  int16x4_t v13 = *(int16x4_t *)((char *)v9 + 3 * v5);
  uint64_t v14 = a2 >> 1;
  int16x4_t v15 = (int16x8_t *)((char *)&unk_1D0DAE8F0 + 2 * v14);
  int32x4_t v16 = vshll_n_s16(*result, 6uLL);
  uint64_t v17 = a2 >> 4;
  int16x8_t v18 = (int32x4_t *)v51;
  do
  {
    int16x8_t v19 = *v15++;
    int32x4_t v20 = vmlal_laneq_s16(v16, v11, v19, 4);
    int32x4_t v21 = vmlsl_laneq_s16(v16, v11, v19, 4);
    int32x4_t v22 = vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v19.i8, 1), v7, *(int16x4_t *)v19.i8, 0);
    int32x4_t v23 = vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v19.i8, 3), v7, *(int16x4_t *)v19.i8, 2);
    int32x4_t v24 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v8, *a4, 1), v6, *a4, 0), v10, *a4, 2), v13, *a4, 3);
    int32x4_t v25 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v8, a4[1], 1), v6, a4[1], 0), v10, a4[1], 2), v13, a4[1], 3);
    int16x4_t v26 = a4[3];
    int32x4_t v27 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v8, a4[2], 1), v6, a4[2], 0), v10, a4[2], 2), v13, a4[2], 3);
    int32x4_t v28 = vaddq_s32(v22, v20);
    int32x4_t v29 = vsubq_s32(v20, v22);
    int32x4_t v30 = vaddq_s32(v23, v21);
    int32x4_t v31 = vsubq_s32(v21, v23);
    *int16x8_t v18 = vaddq_s32(v24, v28);
    v18[1] = vaddq_s32(v25, v29);
    int32x4_t v32 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v8, v26, 1), v6, v26, 0), v10, v26, 2), v13, v26, 3);
    v18[2] = vaddq_s32(v27, v30);
    v18[3] = vaddq_s32(v32, v31);
    v18[4] = vsubq_s32(v28, v24);
    v18[5] = vsubq_s32(v29, v25);
    v18[6] = vsubq_s32(v30, v27);
    v18[7] = vsubq_s32(v31, v32);
    a4 += 4;
    v18 += 8;
    --v17;
  }
  while (v17);
  uint64_t v33 = 0;
  int32x4_t v34 = (int16x4_t *)((char *)result + 2 * a2);
  uint64_t v35 = 1 * v5;
  int16x4_t v36 = *(int16x4_t *)((char *)v34 + v35);
  int16x4_t v37 = *v34;
  uint64_t v38 = a2;
  int16x4_t v39 = v34[v38];
  int16x4_t v40 = *(int16x4_t *)((char *)v34 + 12 * a2);
  int16x4_t v41 = &v34[2 * a2];
  int16x4_t v42 = *v41;
  int16x4_t v43 = *(int16x4_t *)((char *)v41 + v35);
  int16x4_t v44 = v41[v38];
  int16x4_t v45 = *(int16x4_t *)((char *)v41 + 12 * a2);
  if (v14 <= 1) {
    uint64_t v46 = 1;
  }
  else {
    uint64_t v46 = v14;
  }
  uint64_t v47 = 2 * v14;
  do
  {
    int32x4_t v48 = (int32x4_t)v51[v33];
    int32x4_t v49 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v36, *a5, 1), v37, *a5, 0), v39, *a5, 2), v40, *a5, 3), v42, *(int16x8_t *)a5->i8, 4), v43, *(int16x8_t *)a5->i8, 5), v44, *(int16x8_t *)a5->i8, 6), v45, *(int16x8_t *)a5->i8,
            7);
    int v50 = (a2 - 1) * (a2 >> 2) - *(unsigned __int8 *)(a3 + v33);
    result[*(unsigned __int8 *)(a3 + v33)] = vqrshrn_n_s32(vaddq_s32(v49, v48), 7uLL);
    result[v50] = vqrshrn_n_s32(vsubq_s32(v48, v49), 7uLL);
    ++v33;
    a5 = (int16x4_t *)((char *)a5 + v47);
  }
  while (v46 != v33);
  return result;
}

uint64_t sub_1D0C5B210(uint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1] - 2;
  a1[1] = v2;
  if (v1 >= v2 << 55) {
    return 1;
  }
  if (v2 > 0xFF) {
    return 0;
  }
  uint64_t v3 = 2 * v1;
  *a1 = v3;
  a1[1] = 2 * v2;
  uint64_t v4 = a1[2];
  uint64_t v5 = v4 + 1;
  if (v4 >= -1)
  {
    int16x4_t v6 = (unsigned int *)a1[3];
    unint64_t v7 = a1[4];
    unsigned int v9 = *v6;
    int16x4_t v8 = v6 + 1;
    *a1 = ((unint64_t)bswap32(v9) << v5) + v3;
    uint64_t v5 = v4 - 31;
    if ((unint64_t)v8 >= v7) {
      int16x4_t v10 = (unsigned int *)v7;
    }
    else {
      int16x4_t v10 = v8;
    }
    a1[3] = (uint64_t)v10;
  }
  uint64_t v11 = 0;
  a1[2] = v5;
  return v11;
}

int16x8_t *sub_1D0C5B290(int16x8_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (int16x8_t *)((char *)result + 2 * a2);
  int16x4_t v6 = (int16x8_t *)((char *)result + 4 * a2);
  unint64_t v7 = (int16x8_t *)((char *)result + 6 * a2);
  int16x8_t v8 = result[1];
  int16x8_t v9 = v5[1];
  int16x8_t v10 = v6[1];
  int16x8_t v11 = v7[1];
  int32x4_t v12 = (int32x4_t)vtrn1q_s16(*result, *v5);
  int32x4_t v13 = (int32x4_t)vtrn2q_s16(*result, *v5);
  int32x4_t v14 = (int32x4_t)vtrn1q_s16(*v6, *v7);
  int32x4_t v15 = (int32x4_t)vtrn2q_s16(*v6, *v7);
  int16x8_t v16 = (int16x8_t)vtrn1q_s32(v12, v14);
  int16x8_t v17 = (int16x8_t)vtrn2q_s32(v12, v14);
  int16x8_t v18 = (int16x8_t)vtrn1q_s32(v13, v15);
  int16x8_t v19 = (int16x8_t)vtrn2q_s32(v13, v15);
  int32x4_t v20 = (int32x4_t)vtrn1q_s16(v8, v9);
  int32x4_t v21 = (int32x4_t)vtrn2q_s16(v8, v9);
  int32x4_t v22 = (int32x4_t)vtrn1q_s16(v10, v11);
  int32x4_t v23 = (int32x4_t)vtrn2q_s16(v10, v11);
  int16x8_t v24 = (int16x8_t)vtrn1q_s32(v20, v22);
  int16x8_t v25 = (int16x8_t)vtrn2q_s32(v20, v22);
  int16x8_t v26 = (int16x8_t)vtrn1q_s32(v21, v23);
  int16x8_t v27 = (int16x8_t)vtrn2q_s32(v21, v23);
  uint64_t v28 = a2 >> 1;
  int32x4_t v29 = (int16x8_t *)((char *)&unk_1D0DAE8F0 + 2 * v28);
  int32x4_t v30 = vshll_n_s16(*(int16x4_t *)v16.i8, 6uLL);
  uint64_t v31 = a2 >> 4;
  int32x4_t v32 = (int32x4_t *)v53;
  do
  {
    int16x8_t v33 = *v29++;
    int32x4_t v34 = vmlal_laneq_s16(v30, *(int16x4_t *)v24.i8, v33, 4);
    int32x4_t v35 = vmlsl_laneq_s16(v30, *(int16x4_t *)v24.i8, v33, 4);
    int32x4_t v36 = vmlal_high_lane_s16(vmull_high_lane_s16(v24, *(int16x4_t *)v33.i8, 1), v16, *(int16x4_t *)v33.i8, 0);
    int32x4_t v37 = vmlal_high_lane_s16(vmull_high_lane_s16(v24, *(int16x4_t *)v33.i8, 3), v16, *(int16x4_t *)v33.i8, 2);
    int32x4_t v38 = vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v17.i8, *a4, 0), v17, *a4, 1), *(int16x4_t *)v25.i8, *a4, 2), v25, *a4, 3);
    int32x4_t v39 = vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v17.i8, a4[1], 0), v17, a4[1], 1), *(int16x4_t *)v25.i8, a4[1], 2), v25, a4[1], 3);
    int16x4_t v40 = a4[3];
    int32x4_t v41 = vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v17.i8, a4[2], 0), v17, a4[2], 1), *(int16x4_t *)v25.i8, a4[2], 2), v25, a4[2], 3);
    int32x4_t v42 = vaddq_s32(v36, v34);
    int32x4_t v43 = vsubq_s32(v34, v36);
    int32x4_t v44 = vaddq_s32(v37, v35);
    int32x4_t v45 = vsubq_s32(v35, v37);
    *int32x4_t v32 = vaddq_s32(v38, v42);
    v32[1] = vaddq_s32(v39, v43);
    int32x4_t v46 = vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v17.i8, v40, 0), v17, v40, 1), *(int16x4_t *)v25.i8, v40, 2), v25, v40, 3);
    v32[2] = vaddq_s32(v41, v44);
    v32[3] = vaddq_s32(v46, v45);
    v32[4] = vsubq_s32(v42, v38);
    v32[5] = vsubq_s32(v43, v39);
    void v32[6] = vsubq_s32(v44, v41);
    v32[7] = vsubq_s32(v45, v46);
    a4 += 4;
    v32 += 8;
    --v31;
  }
  while (v31);
  uint64_t v47 = 0;
  if (v28 <= 1) {
    uint64_t v48 = 1;
  }
  else {
    uint64_t v48 = v28;
  }
  uint64_t v49 = 2 * v28;
  do
  {
    int32x4_t v50 = (int32x4_t)v53[v47];
    int32x4_t v51 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v19.i8, *a5, 1), *(int16x4_t *)v18.i8, *a5, 0), v18, *a5, 2), v19, *a5, 3), *(int16x4_t *)v26.i8, *(int16x8_t *)a5->i8, 4), *(int16x4_t *)v27.i8, *(int16x8_t *)a5->i8, 5), v26,
              *(int16x8_t *)a5->i8,
              6),
            v27,
            *(int16x8_t *)a5->i8,
            7);
    int v52 = 4 * (~*(unsigned __int8 *)(a3 + v47) + a2);
    *(int16x4_t *)&result->i8[8 * *(unsigned __int8 *)(a3 + v47)] = vqrshrn_n_s32(vaddq_s32(v51, v50), 0xCuLL);
    *(int16x4_t *)&result->i8[2 * v52] = vqrshrn_n_s32(vsubq_s32(v50, v51), 0xCuLL);
    ++v47;
    a5 = (int16x4_t *)((char *)a5 + v49);
  }
  while (v48 != v47);
  return result;
}

int8x16_t sub_1D0C5B49C(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = (const char *)(a2 + 48);
  uint8x8_t v5 = (uint8x8_t)vld1_dup_s8(v4);
  int16x4_t v6 = (const char *)(a2 + 16);
  uint8x8_t v7 = (uint8x8_t)vld1_dup_s8(v6);
  int16x8_t v8 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v7);
  int16x8_t v9 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v7);
  int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  int16x8_t v13 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  int8x16_t v14 = *(int8x16_t *)a2;
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0);
  uint16x8_t v16 = vmull_u8(v15, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  uint8x8_t v17 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 1);
  uint16x8_t v18 = vmull_u8(v15, (uint8x8_t)0x1020304050607);
  uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 2);
  uint16x8_t v20 = vmull_u8(v19, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  uint16x8_t v21 = vmull_u8(v19, (uint8x8_t)0x1020304050607);
  uint8x8_t v22 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 3);
  uint16x8_t v23 = vmull_u8(v22, (uint8x8_t)0x8090A0B0C0D0E0FLL);
  uint16x8_t v24 = vmull_u8(v22, (uint8x8_t)0x1020304050607);
  v25.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v25.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  uint8x16_t v26 = *(uint8x16_t *)(a2 + 32);
  int16x8_t v27 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v16, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xF0F0F0F0F0F0F0FLL), v10);
  int16x8_t v28 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v18, v26, v25), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v10);
  v18.i64[0] = 0xE0E0E0E0E0E0E0ELL;
  v18.i64[1] = 0xE0E0E0E0E0E0E0ELL;
  int16x8_t v29 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(v17, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xE0E0E0E0E0E0E0ELL), v11);
  int16x8_t v30 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(v17, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v18), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v11);
  v31.i64[0] = 0xD0D0D0D0D0D0D0DLL;
  v31.i64[1] = 0xD0D0D0D0D0D0D0DLL;
  int16x8_t v32 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v20, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xD0D0D0D0D0D0D0DLL), v12);
  int16x8_t v33 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v21, v26, v31), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v12);
  v31.i64[0] = 0xC0C0C0C0C0C0C0CLL;
  v31.i64[1] = 0xC0C0C0C0C0C0C0CLL;
  *a4 = vrshrn_high_n_s16(vrshrn_n_s16(v27, 5uLL), v28, 5uLL);
  *(int8x16_t *)((char *)a4 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v29, 5uLL), v30, 5uLL);
  int32x4_t v34 = (int8x16_t *)((char *)a4 + a3 + a3);
  *int32x4_t v34 = vrshrn_high_n_s16(vrshrn_n_s16(v32, 5uLL), v33, 5uLL);
  *(int8x16_t *)((char *)v34 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(v23, (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xC0C0C0C0C0C0C0CLL), v13), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(v24, v26, v31), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v13), 5uLL);
  int32x4_t v35 = (int8x16_t *)((char *)a4 + 4 * a3);
  int16x8_t v36 = vdupq_laneq_s16(v8, 4);
  int16x8_t v37 = vdupq_laneq_s16(v8, 5);
  int16x8_t v38 = vdupq_laneq_s16(v8, 6);
  int16x8_t v39 = vdupq_laneq_s16(v8, 7);
  *(int8x8_t *)v8.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 4);
  *(int8x8_t *)v31.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 5);
  *(int8x8_t *)v29.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 6);
  *(int8x8_t *)v21.i8 = vdup_lane_s8(*(int8x8_t *)v14.i8, 7);
  v24.i64[0] = 0xB0B0B0B0B0B0B0BLL;
  v24.i64[1] = 0xB0B0B0B0B0B0B0BLL;
  int16x8_t v40 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v8.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xB0B0B0B0B0B0B0BLL), v36);
  int16x8_t v41 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v8.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v24), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v36);
  v8.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v8.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  int16x8_t v42 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0xA0A0A0A0A0A0A0ALL), v37);
  int16x8_t v43 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v31.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v37);
  v8.i64[0] = 0x909090909090909;
  v8.i64[1] = 0x909090909090909;
  int16x8_t v44 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x909090909090909), v38);
  int16x8_t v45 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v38);
  v8.i64[0] = 0x303030303030303;
  v8.i64[1] = 0x303030303030303;
  *int32x4_t v35 = vrshrn_high_n_s16(vrshrn_n_s16(v40, 5uLL), v41, 5uLL);
  *(int8x16_t *)((char *)v35 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v42, 5uLL), v43, 5uLL);
  int32x4_t v46 = (int8x16_t *)((char *)v35 + a3 + a3);
  *int32x4_t v46 = vrshrn_high_n_s16(vrshrn_n_s16(v44, 5uLL), v45, 5uLL);
  *(int8x16_t *)((char *)v46 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 3uLL)), v39), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 3uLL), *(uint8x8_t *)v21.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v39),
                                       5uLL);
  int16x8_t v47 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
  int16x8_t v48 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  int16x8_t v49 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  int32x4_t v50 = (int8x16_t *)((char *)v35 + 4 * a3);
  int16x8_t v51 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 3);
  *(int8x8_t *)v44.i8 = vdup_laneq_s8(v14, 8);
  *(int8x8_t *)v29.i8 = vdup_laneq_s8(v14, 9);
  *(int8x8_t *)v21.i8 = vdup_laneq_s8(v14, 10);
  *(int8x8_t *)v41.i8 = vdup_laneq_s8(v14, 11);
  v52.i64[0] = 0x707070707070707;
  v52.i64[1] = 0x707070707070707;
  int16x8_t v53 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v44.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x707070707070707), v47);
  int16x8_t v54 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v44.i8, (uint8x8_t)0x1020304050607), v26, v52), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v47);
  v44.i64[0] = 0x606060606060606;
  v44.i64[1] = 0x606060606060606;
  int16x8_t v55 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x606060606060606), v48);
  int16x8_t v56 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v29.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v44), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v48);
  v29.i64[0] = 0x505050505050505;
  v29.i64[1] = 0x505050505050505;
  *int32x4_t v50 = vrshrn_high_n_s16(vrshrn_n_s16(v53, 5uLL), v54, 5uLL);
  *(int8x16_t *)((char *)v50 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(v55, 5uLL), v56, 5uLL);
  double v57 = (int8x16_t *)((char *)v50 + a3 + a3);
  int8x16_t *v57 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x505050505050505), v49), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v29), (uint8x8_t)0x100F0E0D0C0B0A09, v5),
             v49),
           5uLL);
  *(int8x16_t *)((char *)v57 + a3) = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v41.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 2uLL)), v51), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 2uLL), *(uint8x8_t *)v41.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v51),
                                       5uLL);
  double v58 = (int8x16_t *)((char *)v50 + 4 * a3);
  int16x8_t v59 = vdupq_laneq_s16(v9, 4);
  int16x8_t v60 = vdupq_laneq_s16(v9, 5);
  int16x8_t v61 = vdupq_laneq_s16(v9, 6);
  int16x8_t v62 = vdupq_laneq_s16(v9, 7);
  *(int8x8_t *)v51.i8 = vdup_laneq_s8(v14, 12);
  *(int8x8_t *)v53.i8 = vdup_laneq_s8(v14, 13);
  *(int8x8_t *)v55.i8 = vdup_laneq_s8(v14, 14);
  *(int8x8_t *)v14.i8 = vdup_laneq_s8(v14, 15);
  *double v58 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v51.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8, (uint8x8_t)0x303030303030303), v59), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_high_u8(vmull_u8(*(uint8x8_t *)v51.i8, (uint8x8_t)0x1020304050607), v26, (uint8x16_t)v8), (uint8x8_t)0x100F0E0D0C0B0A09, v5),
             v59),
           5uLL);
  uint64_t v63 = (int8x16_t *)((char *)v58 + a3);
  *uint64_t v63 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v53.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v26.i8, 1uLL)), v60), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vshll_high_n_u8(v26, 1uLL), *(uint8x8_t *)v53.i8, (uint8x8_t)0x1020304050607), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v60), 5uLL);
  int v64 = (int8x16_t *)((char *)v63 + a3);
  *int v64 = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(vmull_u8((uint8x8_t)0x807060504030201, v5), *(uint8x8_t *)v26.i8), *(uint8x8_t *)v55.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), v61), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vaddw_high_u8(vmull_u8(*(uint8x8_t *)v55.i8, (uint8x8_t)0x1020304050607), v26), (uint8x8_t)0x100F0E0D0C0B0A09, v5), v61), 5uLL);
  int8x16_t result = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v14.i8, (uint8x8_t)0x8090A0B0C0D0E0FLL), (uint8x8_t)0x807060504030201, v5), v62), 5uLL), vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v5), *(uint8x8_t *)v14.i8, (uint8x8_t)0x1020304050607), v62), 5uLL);
  *(int8x16_t *)((char *)v64 + a3) = result;
  return result;
}

int8x8_t sub_1D0C5B8B0(uint64_t a1, int8x8_t *a2, uint64_t a3, int8x8_t *a4)
{
  uint8x8_t v4 = (uint8x8_t)a2[2];
  uint8x8_t v5 = (const char *)&a2[3];
  uint8x8_t v6 = (uint8x8_t)vld1_dup_s8(v5);
  uint8x8_t v7 = (const char *)&a2[1];
  uint8x8_t v8 = (uint8x8_t)vld1_dup_s8(v7);
  int16x8_t v9 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v8);
  int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 3);
  int16x8_t v13 = vdupq_laneq_s16(v9, 4);
  int16x8_t v14 = vdupq_laneq_s16(v9, 5);
  int16x8_t v15 = vdupq_laneq_s16(v9, 6);
  uint16x8_t v16 = vmull_u8((uint8x8_t)0x807060504030201, v6);
  int16x8_t v17 = vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 7), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), vdupq_laneq_s16(v9, 7));
  int16x8_t v18 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 0), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x707070707070707), vdupq_lane_s16(*(int16x4_t *)v9.i8, 0));
  int16x8_t v19 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 1), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x606060606060606), v10);
  int16x8_t v20 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 2), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x505050505050505), v11);
  int16x8_t v21 = vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 3), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), (int16x8_t)vshll_n_u8(v4, 2uLL)), v12);
  int16x8_t v22 = vaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 4), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), v4, (uint8x8_t)0x303030303030303), v13);
  int16x8_t v23 = vaddq_s16(vaddq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vdup_lane_s8(*a2, 5), (uint8x8_t)0x1020304050607), (uint8x8_t)0x807060504030201, v6), (int16x8_t)vshll_n_u8(v4, 1uLL)), v14);
  int8x8_t result = vrshrn_n_s16(vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(v16, v4), (uint8x8_t)vdup_lane_s8(*a2, 6), (uint8x8_t)0x1020304050607), v15), 4uLL);
  *a4 = vrshrn_n_s16(v18, 4uLL);
  *(int8x8_t *)((char *)a4 + a3) = vrshrn_n_s16(v19, 4uLL);
  uint8x16_t v25 = (int8x8_t *)((char *)a4 + a3 + a3);
  *uint8x16_t v25 = vrshrn_n_s16(v20, 4uLL);
  uint8x16_t v26 = (int8x8_t *)((char *)v25 + a3);
  *uint8x16_t v26 = vrshrn_n_s16(v21, 4uLL);
  int16x8_t v27 = (int8x8_t *)((char *)v26 + a3);
  *int16x8_t v27 = vrshrn_n_s16(v22, 4uLL);
  int16x8_t v28 = (int8x8_t *)((char *)v27 + a3);
  *int16x8_t v28 = vrshrn_n_s16(v23, 4uLL);
  int16x8_t v29 = (int8x8_t *)((char *)v28 + a3);
  *int16x8_t v29 = result;
  *(int8x8_t *)((char *)v29 + a3) = vrshrn_n_s16(v17, 4uLL);
  return result;
}

int16x8_t sub_1D0C5BA0C(uint8x8_t *a1, uint64_t a2, int16x4_t *a3, const __int16 *a4, int16x4_t *a5, int *a6)
{
  uint8x8_t v7 = (__int16 *)a4;
  int v11 = *a6;
  if ((*a6 & 0xFFFEFFFE) != 0)
  {
    if ((__int16)v11 < 1)
    {
      if ((v11 & 0x8000) != 0)
      {
        char v37 = 1;
        int16x8_t v38 = (int16x8_t *)a3;
        do
        {
          char v39 = v37;
          int16x8_t v40 = v38[1];
          int16x8_t v41 = v38[2];
          int16x8_t v42 = v38[3];
          int32x4_t v43 = (int32x4_t)vtrn1q_s16(*v38, v40);
          int32x4_t v44 = (int32x4_t)vtrn2q_s16(*v38, v40);
          int32x4_t v45 = (int32x4_t)vtrn1q_s16(v41, v42);
          int32x4_t v46 = (int32x4_t)vtrn2q_s16(v41, v42);
          *(int32x4_t *)int16x8_t v38 = vtrn1q_s32(v43, v45);
          v38[1] = (int16x8_t)vtrn1q_s32(v44, v46);
          v38[2] = (int16x8_t)vtrn2q_s32(v43, v45);
          v38[3] = (int16x8_t)vtrn2q_s32(v44, v46);
          v38 += 4;
          char v37 = 0;
        }
        while ((v39 & 1) != 0);
      }
    }
    else
    {
      sub_1D0C5A2BC(a3, (unsigned __int16)*a6);
    }
    int v47 = *((unsigned __int16 *)a6 + 1);
    if (*((__int16 *)a6 + 1) < 1)
    {
      if ((v47 & 0x8000) != 0)
      {
        char v48 = 1;
        int16x8_t v49 = (int16x8_t *)v7;
        do
        {
          char v50 = v48;
          int16x8_t v51 = v49[1];
          int16x8_t v52 = v49[2];
          int16x8_t v53 = v49[3];
          int32x4_t v54 = (int32x4_t)vtrn1q_s16(*v49, v51);
          int32x4_t v55 = (int32x4_t)vtrn2q_s16(*v49, v51);
          int32x4_t v56 = (int32x4_t)vtrn1q_s16(v52, v53);
          int32x4_t v57 = (int32x4_t)vtrn2q_s16(v52, v53);
          *(int32x4_t *)int16x8_t v49 = vtrn1q_s32(v54, v56);
          v49[1] = (int16x8_t)vtrn1q_s32(v55, v57);
          v49[2] = (int16x8_t)vtrn2q_s32(v54, v56);
          v49[3] = (int16x8_t)vtrn2q_s32(v55, v57);
          v49 += 4;
          char v48 = 0;
        }
        while ((v50 & 1) != 0);
      }
    }
    else
    {
      sub_1D0C5A2BC((int16x4_t *)v7, v47);
    }
    double v58 = a3 - 16;
    char v59 = 1;
    int16x8_t result = 0uLL;
    v60.i64[0] = 0x800000008;
    v60.i64[1] = 0x800000008;
    do
    {
      char v61 = v59;
      int16x8_t v62 = *(int16x8_t *)v58[16].i8;
      int16x8_t v63 = *(int16x8_t *)v58[18].i8;
      int16x8_t v64 = *(int16x8_t *)v58[20].i8;
      int16x8_t v65 = *(int16x8_t *)v58[22].i8;
      int16x8_t v66 = *(int16x8_t *)v7;
      int16x8_t v67 = *((int16x8_t *)v7 + 1);
      int32x4_t v68 = (int32x4_t)vtrn1q_s16(v62, v63);
      int32x4_t v69 = (int32x4_t)vtrn2q_s16(v62, v63);
      int32x4_t v70 = (int32x4_t)vtrn1q_s16(v64, v65);
      int32x4_t v71 = (int32x4_t)vtrn2q_s16(v64, v65);
      int16x8_t v72 = *((int16x8_t *)v7 + 2);
      int16x8_t v73 = *((int16x8_t *)v7 + 3);
      *(_OWORD *)v58[16].i8 = 0uLL;
      *(_OWORD *)v58[18].i8 = 0uLL;
      *(_OWORD *)v58[20].i8 = 0uLL;
      *(_OWORD *)v58[22].i8 = 0uLL;
      int16x8_t v74 = (int16x8_t)vtrn1q_s32(v68, v70);
      int16x8_t v75 = (int16x8_t)vtrn2q_s32(v68, v70);
      int16x8_t v76 = (int16x8_t)vtrn1q_s32(v69, v71);
      int16x8_t v77 = (int16x8_t)vtrn2q_s32(v69, v71);
      int32x4_t v78 = (int32x4_t)vtrn1q_s16(v66, v67);
      int32x4_t v79 = (int32x4_t)vtrn2q_s16(v66, v67);
      int32x4_t v80 = (int32x4_t)vtrn1q_s16(v72, v73);
      int32x4_t v81 = (int32x4_t)vtrn2q_s16(v72, v73);
      int16x8_t v82 = (int16x8_t)vtrn1q_s32(v78, v80);
      int16x8_t v83 = (int16x8_t)vtrn2q_s32(v78, v80);
      int16x8_t v84 = (int16x8_t)vtrn1q_s32(v79, v81);
      int16x8_t v85 = (int16x8_t)vtrn2q_s32(v79, v81);
      *((_OWORD *)v7 + 2) = 0uLL;
      *((_OWORD *)v7 + 3) = 0uLL;
      *(_OWORD *)uint8x8_t v7 = 0uLL;
      *((_OWORD *)v7 + 1) = 0uLL;
      if (a5)
      {
        int16x8_t v86 = *(int16x8_t *)v58[2].i8;
        int32x4_t v87 = vdupq_laneq_s32(vsubw_s16(v60, *a5), 2);
        int32x4_t v88 = vshlq_s32(vmovl_s16(*v58), v87);
        int32x4_t v89 = vshlq_s32(vmovl_high_s16(*(int16x8_t *)v58->i8), v87);
        int32x4_t v90 = vshlq_s32(vmovl_s16(*(int16x4_t *)v86.i8), v87);
        int32x4_t v91 = vshlq_s32(vmovl_high_s16(v86), v87);
        int32x4_t v92 = vmovl_s16(vdup_lane_s16(*a5, 0));
        int32x4_t v93 = vmovl_s16(vdup_lane_s16(*a5, 1));
        *(_OWORD *)v58->i8 = 0uLL;
        *(_OWORD *)v58[2].i8 = 0uLL;
        int16x8_t v74 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v88, v92), 3uLL), vmulq_s32(v89, v92), 3uLL), v74);
        int16x8_t v82 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v88, v93), 3uLL), vmulq_s32(v89, v93), 3uLL), v82);
        int16x8_t v76 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v90, v92), 3uLL), vmulq_s32(v91, v92), 3uLL), v76);
        int16x8_t v84 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v90, v93), 3uLL), vmulq_s32(v91, v93), 3uLL), v84);
        int16x8_t v94 = *(int16x8_t *)v58[4].i8;
        int16x8_t v95 = *(int16x8_t *)v58[6].i8;
        int32x4_t v96 = vdupq_laneq_s32(vsubw_s16(v60, *a5), 2);
        int32x4_t v97 = vshlq_s32(vmovl_s16(*(int16x4_t *)v94.i8), v96);
        int32x4_t v98 = vshlq_s32(vmovl_high_s16(v94), v96);
        int32x4_t v99 = vshlq_s32(vmovl_s16(*(int16x4_t *)v95.i8), v96);
        int32x4_t v100 = vshlq_s32(vmovl_high_s16(v95), v96);
        int32x4_t v101 = vmovl_s16(vdup_lane_s16(*a5, 0));
        int32x4_t v102 = vmovl_s16(vdup_lane_s16(*a5, 1));
        *(_OWORD *)v58[4].i8 = 0uLL;
        *(_OWORD *)v58[6].i8 = 0uLL;
        int16x8_t v75 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v97, v101), 3uLL), vmulq_s32(v98, v101), 3uLL), v75);
        int16x8_t v83 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v97, v102), 3uLL), vmulq_s32(v98, v102), 3uLL), v83);
        int16x8_t v77 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v99, v101), 3uLL), vmulq_s32(v100, v101), 3uLL), v77);
        int16x8_t v85 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v99, v102), 3uLL), vmulq_s32(v100, v102), 3uLL), v85);
      }
      char v59 = 0;
      int16x8_t v103 = vzip1q_s16(v74, v82);
      int16x8_t v104 = vzip2q_s16(v74, v82);
      int16x8_t v105 = vzip1q_s16(v76, v84);
      int16x8_t v106 = vzip2q_s16(v76, v84);
      int16x8_t v107 = vzip1q_s16(v75, v83);
      int16x8_t v108 = vzip2q_s16(v75, v83);
      int16x8_t v109 = vzip1q_s16(v77, v85);
      uint8x16_t v110 = *(uint8x16_t *)&a1->i8[3 * a2];
      int16x8_t v111 = vqaddq_s16(vzip2q_s16(v77, v85), (int16x8_t)vmovl_high_u8(v110));
      int8x16_t v112 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v103, (int16x8_t)vmovl_u8(*a1))), vqaddq_s16(v104, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)a1->i8)));
      int8x16_t v113 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v105, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + a2)))), vqaddq_s16(v106, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&a1->i8[a2])));
      int8x16_t v114 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v107, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2)))), vqaddq_s16(v108, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&a1->i8[2 * a2])));
      *(int8x16_t *)a1->i8 = v112;
      *(int8x16_t *)&a1->i8[a2] = v113;
      *(int8x16_t *)&a1->i8[2 * a2] = v114;
      *(int8x16_t *)&a1->i8[3 * a2] = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v109, (int16x8_t)vmovl_u8(*(uint8x8_t *)v110.i8))), v111);
      a1 = (uint8x8_t *)((char *)a1 + 4 * a2);
      v58 += 8;
      v7 += 32;
    }
    while ((v61 & 1) != 0);
  }
  else
  {
    int16x8_t v13 = vld1q_dup_s16((const __int16 *)a3);
    int16x8_t v14 = vld1q_dup_s16(a4);
    int16x8_t result = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v13, v14), 1uLL), 6uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    if (a5)
    {
      uint16x8_t v16 = a3 - 16;
      unsigned int v17 = -2;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      do
      {
        int16x8_t v19 = *(int16x8_t *)v16[2].i8;
        int32x4_t v20 = vdupq_laneq_s32(vsubw_s16(v18, *a5), 2);
        int32x4_t v21 = vshlq_s32(vmovl_s16(*v16), v20);
        int32x4_t v22 = vshlq_s32(vmovl_high_s16(*(int16x8_t *)v16->i8), v20);
        int32x4_t v23 = vshlq_s32(vmovl_s16(*(int16x4_t *)v19.i8), v20);
        int32x4_t v24 = vshlq_s32(vmovl_high_s16(v19), v20);
        int32x4_t v25 = vmovl_s16(vdup_lane_s16(*a5, 0));
        int16x8_t v26 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v21, v25), 3uLL), vmulq_s32(v22, v25), 3uLL);
        int16x8_t v27 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v23, v25), 3uLL), vmulq_s32(v24, v25), 3uLL);
        int32x4_t v28 = vmovl_s16(vdup_lane_s16(*a5, 1));
        int32x4_t v29 = vmulq_s32(v21, v28);
        int32x4_t v30 = vmulq_s32(v22, v28);
        int32x4_t v31 = vmulq_s32(v23, v28);
        int32x4_t v32 = vmulq_s32(v24, v28);
        int16x8_t v33 = vshrn_high_n_s32(vshrn_n_s32(v29, 3uLL), v30, 3uLL);
        int16x8_t v34 = vshrn_high_n_s32(vshrn_n_s32(v31, 3uLL), v32, 3uLL);
        *(_OWORD *)v16->i8 = 0uLL;
        *(_OWORD *)v16[2].i8 = 0uLL;
        v16 += 4;
        int8x16_t v35 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(*a1), vaddq_s16(vzip1q_s16(v26, v33), result))), vqaddq_s16((int16x8_t)vmovl_high_u8(*(uint8x16_t *)a1->i8), vaddq_s16(vzip2q_s16(v26, v33), result)));
        int8x16_t v36 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a1 + a2)), vaddq_s16(vzip1q_s16(v27, v34), result))), vqaddq_s16((int16x8_t)vmovl_high_u8(*(uint8x16_t *)&a1->i8[a2]), vaddq_s16(vzip2q_s16(v27, v34), result)));
        *(int8x16_t *)a1->i8 = v35;
        *(int8x16_t *)&a1->i8[a2] = v36;
        a1 = (uint8x8_t *)((char *)a1 + 2 * a2);
        v17 += 2;
      }
      while (v17 < 6);
    }
    else
    {
      int16x8_t v115 = vnegq_s16(result);
      uint8x16_t v116 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(result), result);
      uint8x16_t v117 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v115), v115);
      unsigned int v118 = -2;
      do
      {
        int16x8_t result = (int16x8_t)vqsubq_u8(vqaddq_u8(*(uint8x16_t *)a1->i8, v116), v117);
        uint8x16_t v119 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)&a1->i8[a2], v116), v117);
        *(int16x8_t *)a1->i8 = result;
        *(uint8x16_t *)&a1->i8[a2] = v119;
        a1 = (uint8x8_t *)((char *)a1 + 2 * a2);
        v118 += 2;
      }
      while (v118 < 6);
    }
  }
  return result;
}

int16x8_t sub_1D0C5BF08(uint8x16_t *a1, uint64_t a2, int16x4_t *a3, int a4, int a5)
{
  uint8x8_t v6 = (int16x8_t *)a3;
  if (a5 == 1)
  {
    int16x8_t result = vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    int16x8_t v10 = vnegq_s16(result);
    uint8x16_t v11 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(result), result);
    uint8x16_t v12 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v10), v10);
    unsigned int v13 = -4;
    do
    {
      uint8x16_t v14 = vqaddq_u8(*(uint8x16_t *)((char *)a1 + 3 * a2), v11);
      uint8x16_t v15 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + a2), v11), v12);
      uint8x16_t v16 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + 2 * a2), v11), v12);
      *a1 = vqsubq_u8(vqaddq_u8(*a1, v11), v12);
      *(uint8x16_t *)((char *)a1 + a2) = v15;
      *(uint8x16_t *)((char *)a1 + 2 * a2) = v16;
      *(uint8x16_t *)((char *)a1 + 3 * a2) = vqsubq_u8(v14, v12);
      a1 = (uint8x16_t *)((char *)a1 + 4 * a2);
      v13 += 4;
    }
    while (v13 < 0xC);
    if (a4)
    {
      unsigned int v17 = -16;
      do
      {
        int16x8_t *v6 = result;
        v6[1] = result;
        v6 += 2;
        v17 += 16;
      }
      while (v17 < 0xF0);
    }
  }
  else
  {
    sub_1D0C5AD38(a3, a5);
    unsigned int v18 = -4;
    do
    {
      int16x8_t v19 = v6[1];
      int16x8_t v20 = v6[2];
      int16x8_t v21 = v6[3];
      int16x8_t v22 = v6[4];
      int16x8_t v23 = v6[5];
      int32x4_t v24 = (int32x4_t)vtrn1q_s16(*v6, v20);
      int32x4_t v25 = (int32x4_t)vtrn2q_s16(*v6, v20);
      int16x8_t v26 = v6[6];
      int16x8_t v27 = v6[7];
      int32x4_t v28 = (int32x4_t)vtrn1q_s16(v22, v26);
      int32x4_t v29 = (int32x4_t)vtrn2q_s16(v22, v26);
      int16x8_t v30 = (int16x8_t)vtrn1q_s32(v24, v28);
      int16x8_t v31 = (int16x8_t)vtrn2q_s32(v24, v28);
      int16x8_t v32 = (int16x8_t)vtrn1q_s32(v25, v29);
      int16x8_t v33 = (int16x8_t)vtrn2q_s32(v25, v29);
      int32x4_t v34 = (int32x4_t)vtrn1q_s16(v19, v21);
      int32x4_t v35 = (int32x4_t)vtrn2q_s16(v19, v21);
      int32x4_t v36 = (int32x4_t)vtrn1q_s16(v23, v27);
      int32x4_t v37 = (int32x4_t)vtrn2q_s16(v23, v27);
      int16x8_t v38 = (int16x8_t)vtrn1q_s32(v34, v36);
      int16x8_t v39 = (int16x8_t)vtrn2q_s32(v34, v36);
      int16x8_t v40 = (int16x8_t)vtrn1q_s32(v35, v37);
      int16x8_t v41 = (int16x8_t)vtrn2q_s32(v35, v37);
      if (a4)
      {
        int16x8_t v42 = v30;
        int16x8_t v43 = v38;
        int16x8_t v44 = v32;
        int16x8_t v45 = v40;
        int16x8_t v46 = v31;
        int16x8_t v47 = v39;
        int16x8_t v48 = v33;
        int16x8_t v49 = v41;
      }
      else
      {
        int16x8_t v42 = 0uLL;
        int16x8_t v43 = 0uLL;
        int16x8_t v44 = 0uLL;
        int16x8_t v45 = 0uLL;
        int16x8_t v46 = 0uLL;
        int16x8_t v47 = 0uLL;
        int16x8_t v48 = 0uLL;
        int16x8_t v49 = 0uLL;
      }
      uint8x16_t v50 = *(uint8x16_t *)((char *)a1 + a2);
      uint8x16_t v51 = *a1;
      uint8x16_t v52 = *(uint8x16_t *)((char *)a1 + 2 * a2);
      uint8x16_t v53 = *(uint8x16_t *)((char *)a1 + 3 * a2);
      int16x8_t *v6 = v42;
      v6[1] = v43;
      v6[2] = v44;
      v6[3] = v45;
      v6[4] = v46;
      v6[5] = v47;
      v6[6] = v48;
      v6[7] = v49;
      int16x8_t result = vqaddq_s16(v41, (int16x8_t)vmovl_high_u8(v53));
      *(int8x16_t *)a1 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v30, (int16x8_t)vmovl_u8(*(uint8x8_t *)v51.i8))), vqaddq_s16(v38, (int16x8_t)vmovl_high_u8(v51)));
      *(int8x16_t *)((char *)a1 + a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v32, (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8))), vqaddq_s16(v40, (int16x8_t)vmovl_high_u8(v50)));
      *(int8x16_t *)((char *)a1 + 2 * a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v31, (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8))), vqaddq_s16(v39, (int16x8_t)vmovl_high_u8(v52)));
      *(int8x16_t *)((char *)a1 + 3 * a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v33, (int16x8_t)vmovl_u8(*(uint8x8_t *)v53.i8))), result);
      a1 = (uint8x16_t *)((char *)a1 + 4 * a2);
      v18 += 4;
      v6 += 8;
    }
    while (v18 < 0xC);
  }
  return result;
}

int8x8_t sub_1D0C5C140(uint64_t a1, uint8x8_t *a2, uint64_t a3, int8x8_t *a4)
{
  uint8x8_t v4 = a2[2];
  int16x4_t v5 = vpadd_s16((int16x4_t)vpaddl_u8(v4), (int16x4_t)vpaddl_u8(*a2));
  int16x4_t v6 = vpadd_s16(v5, v5);
  *(int16x4_t *)v7.i8 = vpadd_s16(v6, v6);
  v7.i64[1] = v7.i64[0];
  *(uint8x8_t *)v7.i8 = vqrshrn_n_u16(v7, 4uLL);
  uint64_t v8 = (uint64_t)vrshrn_n_s16((int16x8_t)vaddw_u8(vmull_u8(*(uint8x8_t *)v7.i8, (uint8x8_t)0x303030303030302), *a2), 2uLL);
  int8x8_t result = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)a2->u8[0], v4), *(uint8x8_t *)v7.i8, (uint8x8_t)0x303030303030302), 2uLL);
  *a4 = result;
  *(int8x8_t *)((char *)a4 + a3) = vext_s8((int8x8_t)vshld_n_s64(v8, 0x30uLL), *(int8x8_t *)v7.i8, 7uLL);
  int16x8_t v10 = (int8x8_t *)((char *)a4 + a3 + a3);
  *int16x8_t v10 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x28uLL), *(int8x8_t *)v7.i8, 7uLL);
  uint8x16_t v11 = (int8x8_t *)((char *)v10 + a3);
  *uint8x16_t v11 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x20uLL), *(int8x8_t *)v7.i8, 7uLL);
  uint8x16_t v12 = (int8x8_t *)((char *)v11 + a3);
  *uint8x16_t v12 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x18uLL), *(int8x8_t *)v7.i8, 7uLL);
  unsigned int v13 = (int8x8_t *)((char *)v12 + a3);
  int8x8_t *v13 = vext_s8((int8x8_t)vshld_n_s64(v8, 0x10uLL), *(int8x8_t *)v7.i8, 7uLL);
  uint8x16_t v14 = (int8x8_t *)((char *)v13 + a3);
  int8x8_t *v14 = vext_s8((int8x8_t)vshld_n_s64(v8, 8uLL), *(int8x8_t *)v7.i8, 7uLL);
  *(int8x8_t *)((char *)v14 + a3) = vext_s8((int8x8_t)v8, *(int8x8_t *)v7.i8, 7uLL);
  return result;
}

uint64_t sub_1D0C5C1FC(unsigned int a1, int8x16_t *a2, uint64_t a3, double *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = byte_1D0D7FEBA[a1];
  uint64_t v8 = byte_1D0D7FEBA[a1];
  uint64_t v59 = 0;
  if (a1 >= 0x12)
  {
    if ((v7 & 0x80000000) == 0)
    {
      int8x16_t v9 = a2[2];
      int8x16_t v10 = a2[3];
      goto LABEL_6;
    }
    int8x16_t v37 = vqtbl1q_s8(*a2, *(int8x16_t *)qword_1D0D7FEE0[4 * a1 - 70].i8);
    int8x16_t v35 = vextq_s8(v37, v37, 8uLL);
    v35.i8[7] = a2[-1].i8[15];
    v57.i64[0] = v37.i64[0];
    v57.i64[1] = v35.i64[0];
    int8x16_t v36 = a2[2];
  }
  else
  {
    if ((v8 & 0x80) == 0)
    {
      int8x16_t v9 = *a2;
      int8x16_t v10 = a2[1];
LABEL_6:
      int8x16_t v57 = v9;
      v58.i64[0] = v10.i64[0];
      int8x8_t v51 = (int8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
      int8x8_t v53 = *(int8x8_t *)v10.i8;
      uint64_t v11 = v7;
      BOOL v12 = a1 > 0x11;
      BOOL v13 = a1 < 0x12;
      v58.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
      uint64_t v55 = 8 * a3;
      uint64_t v56 = 8;
      sub_1D0C59B38(v8, v8, v13, a3, a4, *(int8x8_t *)v9.i8, v51);
      uint64_t v14 = *(&v55 + v12);
      sub_1D0C59B38(v8, v8, a1 < 0x12, a3, (double *)((char *)a4 + v14), v51, v53);
      uint8x16_t v15 = (double *)((char *)a4 + *(&v55 + v13));
      unint64_t v16 = (unint64_t)(9 * v11) >> 8;
      double v17 = *(double *)&v57.i64[v16];
      double v18 = *(double *)&v57.i64[(v16 + 1)];
      double v19 = *(double *)&v57.i64[(v16 + 2)];
      unsigned int v20 = (9 * v11);
      unint64_t v21 = v57.u64[(v16 + 3)];
      double v22 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v17, *(int8x8_t *)&v18, 4uLL));
      double v23 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 4uLL));
      double v24 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, (int8x8_t)v21, 4uLL));
      double v25 = COERCE_DOUBLE(vshrd_n_u64(v21, 0x20uLL));
      if (v20 >= 0x80)
      {
        double v19 = v24;
        double v18 = v23;
        double v17 = v22;
        *(double *)&unint64_t v21 = v25;
        v20 -= 128;
      }
      double v26 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v17, *(int8x8_t *)&v18, 2uLL));
      double v27 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v18, *(int8x8_t *)&v19, 2uLL));
      double v28 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v19, (int8x8_t)v21, 2uLL));
      if (v20 >= 0x40) {
        *(double *)&int8x8_t v29 = v28;
      }
      else {
        *(double *)&int8x8_t v29 = v19;
      }
      if (v20 >= 0x40) {
        *(double *)&int8x8_t v30 = v27;
      }
      else {
        *(double *)&int8x8_t v30 = v18;
      }
      if (v20 < 0x40)
      {
        uint64_t v31 = v20;
      }
      else
      {
        double v17 = v26;
        uint64_t v31 = v20 - 64;
      }
      BOOL v32 = a1 < 0x12;
      sub_1D0C59B38(v31, v8, v32, a3, v15, *(int8x8_t *)&v17, v30);
      return sub_1D0C59B38(v31, v8, v32, a3, (double *)((char *)v15 + v14), v30, v29);
    }
    int8x16_t v34 = vqtbl1q_s8(a2[2], *(int8x16_t *)qword_1D0D7FEE0[4 * (18 - a1) + 2].i8);
    int8x16_t v35 = vextq_s8(v34, v34, 8uLL);
    v35.i8[7] = a2[-1].i8[15];
    v57.i64[0] = v34.i64[0];
    v57.i64[1] = v35.i64[0];
    int8x16_t v36 = *a2;
  }
  int8x16_t v58 = v36;
  int8x8_t v52 = (int8x8_t)vextq_s8(v36, v36, 8uLL).u64[0];
  int8x8_t v54 = *(int8x8_t *)v36.i8;
  BOOL v38 = a1 > 0x11;
  BOOL v39 = a1 < 0x12;
  uint64_t v55 = 8 * a3;
  uint64_t v56 = 8;
  sub_1D0C5C5B8(v7, v7, v39, a3, a4, *(int8x8_t *)v35.i8, *(int8x8_t *)v36.i8);
  uint64_t v40 = *(&v55 + v38);
  sub_1D0C5C5B8(v7, v7, a1 < 0x12, a3, (double *)((char *)a4 + v40), v54, v52);
  int16x8_t v41 = (double *)((char *)a4 + *(&v55 + v39));
  int v42 = 9 * v7;
  uint64_t v43 = (9 * v7) | 0xFFFFFF00;
  int16x8_t v44 = &v57.i64[((9 * (int)v7) >> 8) + 1];
  int8x8_t v46 = (int8x8_t)v44[2];
  int8x8_t v45 = (int8x8_t)v44[3];
  int8x8_t v47 = (int8x8_t)v44[1];
  if (v43 <= 0xFFFFFFBF)
  {
    uint64_t v48 = v57.i64[((uint64_t)v42 >> 8) + 1];
    if (v43 > 0xFFFFFF7F)
    {
      unsigned int v49 = v42 | 0xFFFFFF00;
    }
    else
    {
      int8x8_t v45 = vext_s8(v46, v45, 4uLL);
      int8x8_t v46 = vext_s8(v47, v46, 4uLL);
      int8x8_t v47 = vext_s8((int8x8_t)v48, v47, 4uLL);
      unsigned int v49 = v43 + 128;
      if (v43 > 0xFFFFFF3F)
      {
        uint64_t v43 = (v43 + 128);
        goto LABEL_29;
      }
      uint64_t v48 = vshld_n_s64(v48, 0x20uLL);
    }
    int8x8_t v45 = vext_s8(v46, v45, 6uLL);
    int8x8_t v46 = vext_s8(v47, v46, 6uLL);
    int8x8_t v47 = vext_s8((int8x8_t)v48, v47, 6uLL);
    uint64_t v43 = v49 + 64;
  }
LABEL_29:
  BOOL v50 = a1 < 0x12;
  sub_1D0C5C5B8(v43, v7, v50, a3, v41, v47, v46);
  return sub_1D0C5C5B8(v43, v7, v50, a3, (double *)((char *)v41 + v40), v46, v45);
}

uint64_t sub_1D0C5C5B8(uint64_t result, int a2, int a3, uint64_t a4, double *a5, int8x8_t a6, int8x8_t a7)
{
  v59[9] = *MEMORY[0x1E4F143B8];
  v59[0] = a7;
  v59[1] = vext_s8(a6, a7, 7uLL);
  v59[2] = vext_s8(a6, a7, 6uLL);
  v59[3] = vext_s8(a6, a7, 5uLL);
  v59[4] = vext_s8(a6, a7, 4uLL);
  v59[5] = vext_s8(a6, a7, 3uLL);
  v59[6] = vext_s8(a6, a7, 2uLL);
  v59[7] = vext_s8(a6, a7, 1uLL);
  v59[8] = a6;
  if ((int)result >> 5 >= 0) {
    int v7 = (int)result >> 5;
  }
  else {
    int v7 = -((int)result >> 5);
  }
  double v8 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v7 - 1], (uint8x8_t)vdup_n_s8(result & 0x1F)), (uint8x8_t)v59[v7], (uint8x8_t)vdup_n_s8(32 - (result & 0x1F))), 5uLL));
  int v9 = a2 + result;
  int v10 = (a2 + (int)result) >> 5;
  if (v10 < 0) {
    int v10 = -v10;
  }
  double v11 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v10 - 1], (uint8x8_t)vdup_n_s8(v9 & 0x1F)), (uint8x8_t)v59[v10], (uint8x8_t)vdup_n_s8(32 - (v9 & 0x1Fu))), 5uLL));
  int v12 = v9 + a2;
  int v13 = v12 >> 5;
  if (v12 >> 5 < 0) {
    int v13 = -v13;
  }
  double v14 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v13 - 1], (uint8x8_t)vdup_n_s8(v12 & 0x1F)), (uint8x8_t)v59[v13], (uint8x8_t)vdup_n_s8(32 - (v12 & 0x1Fu))), 5uLL));
  int v15 = v12 + a2;
  int v16 = v15 >> 5;
  if (v15 >> 5 < 0) {
    int v16 = -v16;
  }
  double v17 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v16 - 1], (uint8x8_t)vdup_n_s8(v15 & 0x1F)), (uint8x8_t)v59[v16], (uint8x8_t)vdup_n_s8(32 - (v15 & 0x1Fu))), 5uLL));
  int v18 = v15 + a2;
  int v19 = v18 >> 5;
  if (v18 >> 5 < 0) {
    int v19 = -v19;
  }
  double v20 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v19 - 1], (uint8x8_t)vdup_n_s8(v18 & 0x1F)), (uint8x8_t)v59[v19], (uint8x8_t)vdup_n_s8(32 - (v18 & 0x1Fu))), 5uLL));
  int v21 = v18 + a2;
  int v22 = v21 >> 5;
  if (v21 >> 5 < 0) {
    int v22 = -v22;
  }
  double v23 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v22 - 1], (uint8x8_t)vdup_n_s8(v21 & 0x1F)), (uint8x8_t)v59[v22], (uint8x8_t)vdup_n_s8(32 - (v21 & 0x1Fu))), 5uLL));
  int v24 = v21 + a2;
  int v25 = v24 >> 5;
  if (v24 >> 5 < 0) {
    int v25 = -v25;
  }
  double v26 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v25 - 1], (uint8x8_t)vdup_n_s8(v24 & 0x1F)), (uint8x8_t)v59[v25], (uint8x8_t)vdup_n_s8(32 - (v24 & 0x1Fu))), 5uLL));
  int v27 = v24 + a2;
  int v28 = v27 >> 5;
  if (v27 >> 5 < 0) {
    int v28 = -v28;
  }
  double v29 = COERCE_DOUBLE(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)v59[v28 - 1], (uint8x8_t)vdup_n_s8(v27 & 0x1F)), (uint8x8_t)v59[v28], (uint8x8_t)vdup_n_s8(32 - (v27 & 0x1Fu))), 5uLL));
  int16x4_t v30 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v8, *(int8x8_t *)&v11);
  int16x4_t v31 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v8, *(int8x8_t *)&v11);
  int16x4_t v32 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v17);
  int16x4_t v33 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v14, *(int8x8_t *)&v17);
  int16x4_t v34 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v23);
  int16x4_t v35 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v20, *(int8x8_t *)&v23);
  int16x4_t v36 = (int16x4_t)vtrn1_s8(*(int8x8_t *)&v26, *(int8x8_t *)&v29);
  int16x4_t v37 = (int16x4_t)vtrn2_s8(*(int8x8_t *)&v26, *(int8x8_t *)&v29);
  int32x2_t v38 = (int32x2_t)vtrn1_s16(v30, v32);
  int32x2_t v39 = (int32x2_t)vtrn2_s16(v30, v32);
  int32x2_t v40 = (int32x2_t)vtrn1_s16(v31, v33);
  int32x2_t v41 = (int32x2_t)vtrn2_s16(v31, v33);
  int32x2_t v42 = (int32x2_t)vtrn1_s16(v34, v36);
  int32x2_t v43 = (int32x2_t)vtrn2_s16(v34, v36);
  int32x2_t v44 = (int32x2_t)vtrn1_s16(v35, v37);
  int32x2_t v45 = (int32x2_t)vtrn2_s16(v35, v37);
  double v46 = COERCE_DOUBLE(vzip1_s32(v38, v42));
  double v47 = COERCE_DOUBLE(vzip2_s32(v38, v42));
  double v48 = COERCE_DOUBLE(vzip1_s32(v40, v44));
  double v49 = COERCE_DOUBLE(vzip2_s32(v40, v44));
  double v50 = COERCE_DOUBLE(vzip1_s32(v39, v43));
  double v51 = COERCE_DOUBLE(vzip2_s32(v39, v43));
  double v52 = COERCE_DOUBLE(vzip1_s32(v41, v45));
  double v53 = COERCE_DOUBLE(vzip2_s32(v41, v45));
  if (a3)
  {
    double v29 = v53;
    double v26 = v51;
    double v23 = v49;
    double v20 = v47;
    double v17 = v52;
    double v14 = v50;
    double v11 = v48;
    double v8 = v46;
  }
  *a5 = v8;
  *(double *)((char *)a5 + a4) = v11;
  int8x8_t v54 = (double *)((char *)a5 + a4 + a4);
  *int8x8_t v54 = v14;
  uint64_t v55 = (double *)((char *)v54 + a4);
  *uint64_t v55 = v17;
  uint64_t v56 = (double *)((char *)v55 + a4);
  *uint64_t v56 = v20;
  int8x16_t v57 = (double *)((char *)v56 + a4);
  double *v57 = v23;
  int8x16_t v58 = (double *)((char *)v57 + a4);
  *int8x16_t v58 = v26;
  *(double *)((char *)v58 + a4) = v29;
  return result;
}

int8x16_t sub_1D0C5C8B4(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  uint8x8_t v4 = (const __int16 *)(a2 + 16);
  uint8x8_t v5 = (uint8x8_t)vld1_dup_s16(v4);
  int16x4_t v6 = (const __int16 *)(a2 + 48);
  uint8x8_t v7 = (uint8x8_t)vld1_dup_s16(v6);
  int32x4_t v8 = (int32x4_t)vmull_u8((uint8x8_t)0x404030302020101, v5);
  int32x4_t v9 = (int32x4_t)vmull_u8((uint8x8_t)0x808070706060505, v5);
  uint16x8_t v10 = vmull_u8((uint8x8_t)0x404030302020101, v7);
  uint16x8_t v11 = vmull_u8((uint8x8_t)0x808070706060505, v7);
  uint16x8_t v12 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 0);
  uint16x8_t v13 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
  uint16x8_t v14 = (uint16x8_t)vdupq_laneq_s32(v8, 2);
  int16x8_t v15 = *(int16x8_t *)a2;
  uint8x16_t v16 = *(uint8x16_t *)(a2 + 32);
  uint16x8_t v17 = (uint16x8_t)vdupq_laneq_s32(v8, 3);
  uint8x8_t v18 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 0);
  uint16x8_t v19 = vmlal_u8(vmlal_u8(v12, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v18);
  uint16x8_t v20 = vmlal_u8(vmlal_u8(v12, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v18);
  uint8x8_t v21 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 1);
  uint16x8_t v22 = vmlal_u8(vmlal_u8(v13, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v21);
  uint16x8_t v23 = vmlal_u8(vmlal_u8(v13, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v21);
  uint8x8_t v24 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 2);
  uint16x8_t v25 = vmlal_u8(vmlal_u8(v14, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v24);
  uint16x8_t v26 = vmlal_u8(vmlal_u8(v14, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v24);
  uint8x8_t v27 = (uint8x8_t)vdup_lane_s16(*(int16x4_t *)a2, 3);
  uint16x8_t v28 = vmlal_u8(vmlal_u8(v17, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v27);
  uint16x8_t v29 = vmlal_u8(vmlal_u8(v17, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v27);
  v30.i64[0] = 0x707070707070707;
  v30.i64[1] = 0x707070707070707;
  int16x8_t v31 = (int16x8_t)vmlal_high_u8(v20, v16, v30);
  v30.i64[0] = 0x606060606060606;
  v30.i64[1] = 0x606060606060606;
  int16x8_t v32 = (int16x8_t)vmlal_high_u8(v23, v16, v30);
  v30.i64[0] = 0x505050505050505;
  v30.i64[1] = 0x505050505050505;
  int16x8_t v33 = (int16x8_t)vmlal_high_u8(v26, v16, v30);
  v30.i64[0] = 0x404040404040404;
  v30.i64[1] = 0x404040404040404;
  *a4 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v19, *(uint8x8_t *)v16.i8, (uint8x8_t)0x707070707070707), 4uLL), v31, 4uLL);
  *(int8x16_t *)((char *)a4 + a3) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v22, *(uint8x8_t *)v16.i8, (uint8x8_t)0x606060606060606), 4uLL), v32, 4uLL);
  int16x4_t v34 = (int8x16_t *)((char *)a4 + a3 + a3);
  *int16x4_t v34 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v25, *(uint8x8_t *)v16.i8, (uint8x8_t)0x505050505050505), 4uLL), v33, 4uLL);
  *(int8x16_t *)((char *)v34 + a3) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v28, *(uint8x8_t *)v16.i8, (uint8x8_t)0x404040404040404), 4uLL), (int16x8_t)vmlal_high_u8(v29, v16, v30), 4uLL);
  int16x4_t v35 = (int8x16_t *)((char *)a4 + 4 * a3);
  uint16x8_t v36 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
  uint16x8_t v37 = (uint16x8_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 1);
  uint16x8_t v38 = vmlal_u8(v37, (uint8x8_t)0x404030302020101, v7);
  uint16x8_t v39 = vmlal_u8(v37, (uint8x8_t)0x808070706060505, v7);
  int16x8_t v40 = (int16x8_t)vdupq_laneq_s32(v9, 2);
  uint16x8_t v41 = (uint16x8_t)vdupq_laneq_s32(v9, 3);
  uint16x8_t v42 = vmlal_u8(v41, (uint8x8_t)0x404030302020101, v7);
  uint8x8_t v43 = (uint8x8_t)vdup_laneq_s16(v15, 4);
  uint16x8_t v44 = vmlal_u8(v41, (uint8x8_t)0x808070706060505, v7);
  uint16x8_t v45 = vmlal_u8(vmlal_u8(v36, (uint8x8_t)0x404030302020101, v7), (uint8x8_t)0x404050506060707, v43);
  uint16x8_t v46 = vmlal_u8(vmlal_u8(v36, (uint8x8_t)0x808070706060505, v7), (uint8x8_t)0x10102020303, v43);
  uint8x8_t v47 = (uint8x8_t)vdup_laneq_s16(v15, 5);
  uint16x8_t v48 = vmlal_u8(v38, (uint8x8_t)0x404050506060707, v47);
  uint16x8_t v49 = vmlal_u8(v39, (uint8x8_t)0x10102020303, v47);
  uint8x8_t v50 = (uint8x8_t)vdup_laneq_s16(v15, 6);
  uint8x8_t v51 = (uint8x8_t)vdup_laneq_s16(v15, 7);
  int16x8_t v52 = (int16x8_t)vmlal_u8(v42, (uint8x8_t)0x404050506060707, v51);
  int16x8_t v53 = (int16x8_t)vmlal_u8(v44, (uint8x8_t)0x10102020303, v51);
  v54.i64[0] = 0x303030303030303;
  v54.i64[1] = 0x303030303030303;
  int16x8_t v55 = (int16x8_t)vmlal_high_u8(v46, v16, v54);
  v54.i64[0] = 0x202020202020202;
  v54.i64[1] = 0x202020202020202;
  int8x16_t v56 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vaddw_u8(v10, *(uint8x8_t *)v16.i8), v40), (uint8x8_t)0x404050506060707, v50), 4uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vaddw_high_u8(v11, v16), v40), (uint8x8_t)0x10102020303, v50), 4uLL);
  int8x16_t result = vrshrn_high_n_s16(vrshrn_n_s16(v52, 4uLL), v53, 4uLL);
  *int16x4_t v35 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v45, *(uint8x8_t *)v16.i8, (uint8x8_t)0x303030303030303), 4uLL), v55, 4uLL);
  int8x16_t v58 = (int8x16_t *)((char *)v35 + a3);
  *int8x16_t v58 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(v48, *(uint8x8_t *)v16.i8, (uint8x8_t)0x202020202020202), 4uLL), (int16x8_t)vmlal_high_u8(v49, v16, v54), 4uLL);
  uint64_t v59 = (int8x16_t *)((char *)v58 + a3);
  *uint64_t v59 = v56;
  *(int8x16_t *)((char *)v59 + a3) = result;
  return result;
}

void sub_1D0C5CAB8(uint64_t a1, int a2, int a3, __int16 a4)
{
  char v4 = a4;
  unint64_t v8 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 2117);
  if (a3 && (a4 & 0x1E00) == 0) {
    bzero((void *)(*(void *)(*(void *)(a1 + 8) + 944)+ *(void *)(*(void *)(a1 + 8) + 928) * ((uint64_t)a3 >> 3)+ (a2 >> 2)), v8 >> 2);
  }
  if (a2 && (v4 & 0xF0) == 0)
  {
    int32x4_t v9 = (void *)(*(void *)(*(void *)(a1 + 8) + 968)
                + *(void *)(*(void *)(a1 + 8) + 936) * ((uint64_t)a2 >> 3)
                + (a3 >> 2));
    bzero(v9, v8 >> 2);
  }
}

int16x8_t sub_1D0C5CB84(uint64_t a1, int16x4_t *a2, uint64_t a3, int16x8_t *a4)
{
  int16x8_t v4 = vdupq_lane_s16(*a2, 1);
  int16x8_t v5 = vdupq_lane_s16(*a2, 2);
  int16x8_t v6 = vdupq_lane_s16(*a2, 3);
  int16x8_t v7 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 4);
  int16x8_t v8 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 5);
  int16x8_t v9 = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 6);
  int16x8_t result = vdupq_laneq_s16(*(int16x8_t *)a2->i8, 7);
  *a4 = vdupq_lane_s16(*a2, 0);
  *(int16x8_t *)((char *)a4 + a3) = v4;
  uint16x8_t v11 = (int16x8_t *)((char *)a4 + a3 + a3);
  *uint16x8_t v11 = v5;
  uint16x8_t v12 = (int16x8_t *)((char *)v11 + a3);
  *uint16x8_t v12 = v6;
  uint16x8_t v13 = (int16x8_t *)((char *)v12 + a3);
  int16x8_t *v13 = v7;
  uint16x8_t v14 = (int16x8_t *)((char *)v13 + a3);
  int16x8_t *v14 = v8;
  int16x8_t v15 = (int16x8_t *)((char *)v14 + a3);
  *int16x8_t v15 = v9;
  *(int16x8_t *)((char *)v15 + a3) = result;
  return result;
}

void sub_1D0C5CBE4(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  int8x8x2_t v8 = vld2_s8(a2);
  int16x8_t v4 = a2 + 32;
  int8x8x2_t v9 = vld2_s8(v4);
  v8.val[0] = (int8x8_t)vpadd_s16((int16x4_t)vpadal_u8(vpaddl_u8((uint8x8_t)v9.val[0]), (uint8x8_t)v8.val[0]), (int16x4_t)vpadal_u8(vpaddl_u8((uint8x8_t)v9.val[1]), (uint8x8_t)v8.val[1]));
  v8.val[1] = (int8x8_t)vpadd_s16((int16x4_t)v8.val[0], (int16x4_t)v8.val[0]);
  int8x8_t v5 = v8.val[1];
  uint8x16_t v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(*(uint16x8_t *)((char *)&v8 + 8), 4uLL), *(uint16x8_t *)((char *)&v8 + 8), 4uLL);
  int v7 = 8;
  do
  {
    *a4 = v6;
    a4 = (uint8x16_t *)((char *)a4 + a3);
    --v7;
  }
  while (v7);
}

void sub_1D0C5CC2C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = *(_OWORD *)(a2 + 32);
  int v5 = 8;
  do
  {
    *a4 = v4;
    a4 = (_OWORD *)((char *)a4 + a3);
    --v5;
  }
  while (v5);
}

int8x16_t sub_1D0C5CC48(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  int8x16_t v4 = *(int8x16_t *)a2;
  int16x8_t v5 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)a2, 0));
  *a4 = vqmovun_high_s16(vqmovun_s16(vsraq_n_s16(v5, (int16x8_t)vsubl_u8(*(uint8x8_t *)(a2 + 32), (uint8x8_t)vdup_n_s8(*(unsigned __int8 *)(a2 - 1))), 1uLL)), vsraq_n_s16(v5, (int16x8_t)vsubl_high_u8(*(uint8x16_t *)(a2 + 32), (uint8x16_t)vdupq_n_s8(*(unsigned __int8 *)(a2 - 1))), 1uLL));
  *(int8x16_t *)((char *)a4 + a3) = vdupq_lane_s8(*(int8x8_t *)v4.i8, 1);
  uint8x16_t v6 = (int8x16_t *)((char *)a4 + a3 + a3);
  int8x16_t *v6 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 2);
  int v7 = (int8x16_t *)((char *)v6 + a3);
  int8x16_t *v7 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 3);
  int8x8x2_t v8 = (int8x16_t *)((char *)v7 + a3);
  *int8x8x2_t v8 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 4);
  int8x8x2_t v9 = (int8x16_t *)((char *)v8 + a3);
  *int8x8x2_t v9 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 5);
  uint16x8_t v10 = (int8x16_t *)((char *)v9 + a3);
  *uint16x8_t v10 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 6);
  uint16x8_t v11 = (int8x16_t *)((char *)v10 + a3);
  *uint16x8_t v11 = vdupq_lane_s8(*(int8x8_t *)v4.i8, 7);
  int8x16_t result = vdupq_laneq_s8(v4, 8);
  uint16x8_t v13 = (int8x16_t *)((char *)v11 + a3);
  int8x16_t *v13 = result;
  uint16x8_t v14 = (int8x16_t *)((char *)v13 + a3);
  int8x16_t *v14 = vdupq_laneq_s8(v4, 9);
  int16x8_t v15 = (int8x16_t *)((char *)v14 + a3);
  *int16x8_t v15 = vdupq_laneq_s8(v4, 10);
  uint8x16_t v16 = (int8x16_t *)((char *)v15 + a3);
  *uint8x16_t v16 = vdupq_laneq_s8(v4, 11);
  uint16x8_t v17 = (int8x16_t *)((char *)v16 + a3);
  int8x16_t *v17 = vdupq_laneq_s8(v4, 12);
  uint8x8_t v18 = (int8x16_t *)((char *)v17 + a3);
  *uint8x8_t v18 = vdupq_laneq_s8(v4, 13);
  uint16x8_t v19 = (int8x16_t *)((char *)v18 + a3);
  *uint16x8_t v19 = vdupq_laneq_s8(v4, 14);
  *(int8x16_t *)((char *)v19 + a3) = vdupq_laneq_s8(v4, 15);
  return result;
}

uint64_t sub_1D0C5CD38(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint16x8_t v49 = a3;
  uint64_t v50 = result;
  uint64_t v51 = *(void *)(a2 + 8);
  int v101 = *(_DWORD *)(v51 + 520);
  uint64_t v52 = *(void *)(v51 + 416);
  uint64_t v53 = *(void *)(v51 + 424);
  int v54 = *a3;
  uint64_t v102 = v51;
  if (*a3 < *(_DWORD *)(v51 + 524))
  {
    v54 &= 0xFFFFFFF0;
    *a3 = v54;
  }
  int v55 = *(_DWORD *)(result + 120);
  if (v55 < v54)
  {
    signed int v106 = (v101 - 1) & 0xFFFFFFC0;
    uint64_t vars8 = &a49;
    uint64_t v108 = 8 * v52;
    uint64_t v56 = 8 * v53;
    int32x4_t v100 = v49;
    uint64_t vars0 = 8 * v53;
    do
    {
      char v57 = *(unsigned char *)(v102 + 531);
      uint64_t v58 = *(void *)(v102 + 400) + ((*(void *)(v102 + 416) * v55) << v57);
      uint64_t v59 = *(void *)(v102 + 408) + ((*(void *)(v102 + 424) * ((uint64_t)v55 >> 1)) << v57);
      int v60 = v54 - v55;
      if (v60 >= 64) {
        uint64_t v61 = 64;
      }
      else {
        uint64_t v61 = v60;
      }
      uint64_t v109 = ((int)v61 >> 3);
      uint64_t v110 = (((int)v61 + 8) >> 4);
      int v107 = v61;
      int v62 = 0;
      if (v106 >= 1)
      {
        uint64_t v63 = ((int)v61 >> 1);
        do
        {
          uint64_t v113 = v59;
          int16x8_t v64 = &a17;
          int v111 = v62;
          (*(void (**)(uint64_t))(v50 + 48))(a2);
          uint64_t v65 = 0;
          do
          {
            uint64_t v66 = v65 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v50 + 72))(v65 + 8 + v58, v52, (char *)&STACK[0x7C0] + v65, v64, v61);
            v64 += 16;
            uint64_t v65 = v66;
          }
          while (v66 != 64);
          int v67 = *(_DWORD *)(v50 + 120);
          if ((int)v109 > (v67 == 0))
          {
            BOOL v68 = v67 == 0;
            uint64_t v69 = v109 - v68;
            int32x4_t v70 = &a33 + 2 * v68;
            int32x4_t v71 = &STACK[0x800] + v68;
            uint64_t v72 = v58 + v108 * v68;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v72, v52, v71, v70, 64);
              v70 += 2;
              ++v71;
              v72 += v108;
              --v69;
            }
            while (v69);
          }
          int16x8_t v73 = &a49;
          for (uint64_t i = 16; i != 80; i += 16)
          {
            int8x16_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v50 + 88))(v113 + i, v53, v73, v63);
            v73 += 4;
          }
          int v75 = *(_DWORD *)(v50 + 120);
          uint64_t v56 = 8 * v53;
          uint64_t v61 = v107;
          if ((int)v110 > (v75 == 0))
          {
            BOOL v76 = v75 == 0;
            uint64_t v77 = v110 - v76;
            int32x4_t v78 = &STACK[0x6C0] + 4 * v76;
            uint64_t v79 = v113 + vars0 * v76;
            do
            {
              int8x16_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v79, v53, v78, 32);
              v78 += 4;
              v79 += vars0;
              --v77;
            }
            while (v77);
          }
          v58 += 64;
          uint64_t v59 = v113 + 64;
          int v62 = v111 + 64;
        }
        while (v111 + 64 < v106);
        int v55 = *(_DWORD *)(v50 + 120);
      }
      int v80 = v101 - v62;
      if (v101 != v62)
      {
        uint64_t v114 = v59;
        int8x16_t result = (*(uint64_t (**)(uint64_t))(v50 + 48))(a2);
        int v112 = v80;
        if (v80 >= 16)
        {
          uint64_t v81 = v61;
          uint64_t v82 = v58 + 8;
          uint64_t v83 = (v80 >> 3) - 1;
          int16x8_t v84 = &a17;
          int16x8_t v85 = &STACK[0x7C0];
          do
          {
            int8x16_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v50 + 72))(v82, v52, v85, v84, v81);
            v84 += 16;
            ++v85;
            v82 += 8;
            --v83;
          }
          while (v83);
        }
        int v86 = *(_DWORD *)(v50 + 120);
        if ((int)v109 > (v86 == 0))
        {
          BOOL v87 = v86 == 0;
          uint64_t v88 = v109 - v87;
          int32x4_t v89 = &a33 + 2 * v87;
          int32x4_t v90 = &STACK[0x800] + v87;
          uint64_t v91 = v58 + v108 * v87;
          do
          {
            int8x16_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))(v50 + 80))(v91, v52, v90, v89, v112);
            v89 += 2;
            ++v90;
            v91 += v108;
            --v88;
          }
          while (v88);
        }
        if (v112 >= 24)
        {
          uint64_t v92 = v114 + 16;
          uint64_t v93 = ((v112 + 8) >> 4) - 1;
          int16x8_t v94 = &a49;
          do
          {
            int8x16_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v50 + 88))(v92, v53, v94, (v107 >> 1));
            v94 += 4;
            v92 += 16;
            --v93;
          }
          while (v93);
        }
        int v55 = *(_DWORD *)(v50 + 120);
        LODWORD(v61) = v107;
        if ((int)v110 > (v55 == 0))
        {
          BOOL v95 = v55 == 0;
          uint64_t v96 = v110 - v95;
          int32x4_t v97 = &STACK[0x6C0] + 4 * v95;
          uint64_t v98 = v114 + v56 * v95;
          do
          {
            int8x16_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, void))(v50 + 96))(v98, v53, v97, (v112 >> 1));
            v97 += 4;
            v98 += v56;
            --v96;
          }
          while (v96);
          int v55 = *(_DWORD *)(v50 + 120);
        }
      }
      v55 += v61;
      *(_DWORD *)(v50 + 120) = v55;
      uint16x8_t v49 = v100;
      int v54 = *v100;
    }
    while (v55 < *v100);
  }
  int v99 = *(_DWORD *)(v102 + 524);
  if (v99 >= v55) {
    int v99 = v55;
  }
  *uint16x8_t v49 = v99;
  if (*(_DWORD *)(v50 + 120) < *(_DWORD *)(v102 + 524))
  {
    if (v99 <= 4) {
      int v99 = 4;
    }
    *uint16x8_t v49 = v99 - 4;
  }
  return result;
}

uint64_t sub_1D0C5D208(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  if (a5 >= 8)
  {
    uint64_t v5 = a5 >> 3;
    uint64_t v6 = 2 * a2;
    uint64_t v7 = 3 * a2;
    uint64_t v8 = 4 * a2;
    uint64_t v9 = 7 * a2;
    uint64_t v10 = 6 * a2;
    v11.i64[0] = 0x2000200020002;
    v11.i64[1] = 0x2000200020002;
    v12.i64[0] = 0xA000A000A000ALL;
    v12.i64[1] = 0xA000A000A000ALL;
    uint64_t v13 = 5 * a2;
    do
    {
      unsigned int v15 = *a4++;
      unsigned int v14 = v15;
      if (v15)
      {
        int8x8_t v16 = *(int8x8_t *)(result - 4);
        int8x8_t v17 = *(int8x8_t *)(result + a2 - 4);
        int8x8_t v18 = *(int8x8_t *)(result + v6 - 4);
        int8x8_t v19 = *(int8x8_t *)(result + v7 - 4);
        int8x8_t v20 = *(int8x8_t *)(result + v8 - 4);
        int8x8_t v21 = *(int8x8_t *)(result + v13 - 4);
        int8x8_t v22 = *(int8x8_t *)(result + v10 - 4);
        int8x8_t v23 = *(int8x8_t *)(result + v9 - 4);
        int16x4_t v24 = (int16x4_t)vtrn1_s8(v16, v17);
        int16x4_t v25 = (int16x4_t)vtrn2_s8(v16, v17);
        int16x4_t v26 = (int16x4_t)vtrn1_s8(v18, v19);
        int16x4_t v27 = (int16x4_t)vtrn2_s8(v18, v19);
        int16x4_t v28 = (int16x4_t)vtrn1_s8(v20, v21);
        int16x4_t v29 = (int16x4_t)vtrn2_s8(v20, v21);
        int16x4_t v30 = (int16x4_t)vtrn1_s8(v22, v23);
        int16x4_t v31 = (int16x4_t)vtrn2_s8(v22, v23);
        int32x2_t v32 = (int32x2_t)vtrn1_s16(v24, v26);
        int32x2_t v33 = (int32x2_t)vtrn2_s16(v24, v26);
        int32x2_t v34 = (int32x2_t)vtrn1_s16(v25, v27);
        int32x2_t v35 = (int32x2_t)vtrn2_s16(v25, v27);
        int32x2_t v36 = (int32x2_t)vtrn1_s16(v28, v30);
        int32x2_t v37 = (int32x2_t)vtrn2_s16(v28, v30);
        int32x2_t v38 = (int32x2_t)vtrn1_s16(v29, v31);
        int32x2_t v39 = (int32x2_t)vtrn2_s16(v29, v31);
        uint8x8_t v40 = (uint8x8_t)vzip2_s32(v32, v36);
        int8x8_t v41 = (int8x8_t)vzip1_s32(v34, v38);
        uint8x8_t v42 = (uint8x8_t)vzip2_s32(v34, v38);
        uint8x8_t v43 = (uint8x8_t)vzip1_s32(v33, v37);
        int8x8_t v44 = (int8x8_t)vzip2_s32(v33, v37);
        uint8x8_t v45 = (uint8x8_t)vzip1_s32(v35, v39);
        int16x8_t v46 = vdupq_n_s16(*a3);
        int16x8_t v47 = (int16x8_t)vaddl_u8((uint8x8_t)v41, v45);
        int16x8_t v48 = (int16x8_t)vshll_n_u8(v43, 1uLL);
        int16x8_t v49 = vabdq_s16(v47, v48);
        int16x8_t v50 = (int16x8_t)vaddl_u8((uint8x8_t)v44, v40);
        int16x8_t v51 = (int16x8_t)vshll_n_u8(v42, 1uLL);
        int16x8_t v52 = vabdq_s16(v50, v51);
        int8x16_t v53 = (int8x16_t)vabaq_s16(vrev64q_s16(v49), v47, v48);
        int8x16_t v54 = (int8x16_t)vabaq_s16(vrev64q_s16(v52), v50, v51);
        int16x8_t v55 = (int16x8_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v56 = (int16x8_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v57 = (int8x16_t)vcgtq_s16(v46, vaddq_s16(v56, v55));
        if (vaddlvq_u16((uint16x8_t)v57))
        {
          int8x8_t v58 = (int8x8_t)vzip1_s32(v32, v36);
          int8x8_t v59 = (int8x8_t)vzip2_s32(v35, v39);
          int16x8_t v60 = (int16x8_t)vmovl_u8(v43);
          int16x8_t v61 = (int16x8_t)vmovl_u8(v45);
          int16x8_t v62 = (int16x8_t)vmovl_u8(v42);
          int16x8_t v63 = (int16x8_t)vmovl_u8(v40);
          int16x8_t v64 = (int16x8_t)vandq_s8(v57, vqtbl1q_s8((int8x16_t)vdupq_n_s16(v14), (int8x16_t)xmmword_1D0D7F560));
          int16x8_t v65 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v64, vshlq_n_s16(v64, 2uLL)), (int16x8_t)vabdl_u8(v45, v40)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v46, 3uLL), vaddq_s16(v52, v49)), (int8x16_t)vcgtq_u16(vshrq_n_u16((uint16x8_t)v46, 3uLL), vabal_u8(vabdl_u8((uint8x8_t)v59, v40), (uint8x8_t)v58, v45))));
          int16x8_t v66 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v65), (int8x16_t)v65), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v67 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v46, (uint16x8_t)v46, 1uLL), 3uLL);
          int8x16_t v68 = (int8x16_t)vcgtq_s16(v67, v55);
          int8x16_t v69 = (int8x16_t)vcgtq_s16(v67, v56);
          int16x8_t v70 = (int16x8_t)vbicq_s8((int8x16_t)v64, (int8x16_t)v66);
          int16x8_t v71 = (int16x8_t)vsubl_u8(v42, v43);
          uint8x8_t v72 = vrhadd_u8((uint8x8_t)v41, v45);
          uint8x8_t v73 = vrhadd_u8((uint8x8_t)v44, v40);
          if (vaddlvq_u16((uint16x8_t)v66))
          {
            int8x8_t v74 = vmovn_s16(v64);
            uint8x8_t v75 = (uint8x8_t)vadd_s8(v74, v74);
            int16x8_t v76 = (int16x8_t)vaddl_u8((uint8x8_t)v41, v43);
            int16x8_t v77 = (int16x8_t)vaddl_u8(v45, v40);
            int16x8_t v78 = (int16x8_t)vaddl_u8(v42, (uint8x8_t)v44);
            int8x8_t v79 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v77, v60), vhadd_u8((uint8x8_t)v41, v42)), 2uLL), vqadd_u8(v45, v75)), vqsub_u8(v45, v75));
            int8x8_t v80 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v77, v62), vhadd_u8((uint8x8_t)v44, v43)), 2uLL), vqadd_u8(v40, v75)), vqsub_u8(v40, v75));
            int8x8_t v81 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v76, v77), 2uLL), vqadd_u8(v43, v75)), vqsub_u8(v43, v75));
            int8x8_t v82 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v78, v77), 2uLL), vqadd_u8(v42, v75)), vqsub_u8(v42, v75));
            int16x8_t v83 = (int16x8_t)vsubl_u8(v40, v45);
            v84.i64[0] = 0x9000900090009;
            v84.i64[1] = 0x9000900090009;
            int16x8_t v85 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v83, v84), v71, v11), 4uLL);
            int8x16_t v86 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v12), vabsq_s16(v85));
            int16x8_t v87 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v85, v86), v70), vnegq_s16(v70));
            int16x8_t v88 = vshrq_n_s16(v70, 1uLL);
            int16x8_t v89 = (int16x8_t)vsubl_u8(v72, v43);
            int16x8_t v90 = vnegq_s16(v88);
            int16x8_t v91 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v73, v42), v87), v88), v90), vandq_s8(v69, v86)), v62);
            int8x8_t v92 = vqmovn_s16(v66);
            int8x8_t v93 = vbsl_s8(v92, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v58, (uint8x8_t)v41), (int16x8_t)vhaddq_u16((uint16x8_t)v76, (uint16x8_t)v77)), 2uLL), vqadd_u8((uint8x8_t)v41, v75)), vqsub_u8((uint8x8_t)v41, v75)), v41);
            int8x8_t v94 = vbsl_s8(v92, v81, vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(v89, v87), v88), v90), vandq_s8(v68, v86)), v60)));
            *(int8x8_t *)v89.i8 = vbsl_s8(v92, v79, vqmovun_s16(vaddq_s16(v87, v61)));
            int8x8_t v95 = vbsl_s8(v92, v80, vqmovun_s16(vsubq_s16(v63, v87)));
            int8x8_t v96 = vbsl_s8(v92, v82, vqmovun_s16(v91));
            *(int8x8_t *)v91.i8 = vbsl_s8(v92, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v44, (uint8x8_t)v59), (int16x8_t)vhaddq_u16((uint16x8_t)v78, (uint16x8_t)v77)), 2uLL), vqadd_u8((uint8x8_t)v44, v75)), vqsub_u8((uint8x8_t)v44, v75)), v44);
            int16x4_t v97 = (int16x4_t)vtrn1_s8(v58, v93);
            int16x4_t v98 = (int16x4_t)vtrn2_s8(v58, v93);
            int16x4_t v99 = (int16x4_t)vtrn1_s8(v94, *(int8x8_t *)v89.i8);
            int16x4_t v100 = (int16x4_t)vtrn2_s8(v94, *(int8x8_t *)v89.i8);
            *(int8x8_t *)v89.i8 = vtrn1_s8(v95, v96);
            int16x4_t v101 = (int16x4_t)vtrn2_s8(v95, v96);
            int16x4_t v102 = (int16x4_t)vtrn1_s8(*(int8x8_t *)v91.i8, v59);
            *(int8x8_t *)v91.i8 = vtrn2_s8(*(int8x8_t *)v91.i8, v59);
            int32x2_t v103 = (int32x2_t)vtrn1_s16(v97, v99);
            int32x2_t v104 = (int32x2_t)vtrn2_s16(v97, v99);
            int32x2_t v105 = (int32x2_t)vtrn1_s16(v98, v100);
            int32x2_t v106 = (int32x2_t)vtrn2_s16(v98, v100);
            int32x2_t v107 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v89.i8, v102);
            *(int16x4_t *)v89.i8 = vtrn2_s16(*(int16x4_t *)v89.i8, v102);
            int32x2_t v108 = (int32x2_t)vtrn1_s16(v101, *(int16x4_t *)v91.i8);
            *(int32x2_t *)(result - 4) = vzip1_s32(v103, v107);
            *(int32x2_t *)(result + a2 - 4) = vzip1_s32(v105, v108);
            int32x2_t v109 = (int32x2_t)vtrn2_s16(v101, *(int16x4_t *)v91.i8);
            *(int32x2_t *)(result + v6 - 4) = vzip1_s32(v104, *(int32x2_t *)v89.i8);
            *(int32x2_t *)(result + v7 - 4) = vzip1_s32(v106, v109);
            *(int32x2_t *)(result + v8 - 4) = vzip2_s32(v103, v107);
            *(int32x2_t *)(result + v13 - 4) = vzip2_s32(v105, v108);
            *(int32x2_t *)(result + v10 - 4) = vzip2_s32(v104, *(int32x2_t *)v89.i8);
            *(int32x2_t *)(result + v9 - 4) = vzip2_s32(v106, v109);
          }
          else
          {
            int16x8_t v110 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v40, (uint8x8_t)0x909090909090909), v45, (uint8x8_t)0x909090909090909), v71, v11), 4uLL);
            int8x16_t v111 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v12), vabsq_s16(v110));
            int16x8_t v112 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v110, v111), v70), vnegq_s16(v70));
            int16x8_t v113 = vaddq_s16(v112, v61);
            int16x8_t v114 = vsubq_s16(v63, v112);
            int16x8_t v115 = vshrq_n_s16(v70, 1uLL);
            int16x8_t v116 = vnegq_s16(v115);
            int16x8_t v117 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v73, v42), v112), v115), v116), vandq_s8(v69, v111)), v62);
            *(int8x8_t *)v112.i8 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v72, v43), v112), v115), v116), vandq_s8(v68, v111)), v60));
            *(int8x8_t *)v113.i8 = vqmovun_s16(v113);
            int8x8_t v118 = vqmovun_s16(v114);
            *(int8x8_t *)v117.i8 = vqmovun_s16(v117);
            int16x4_t v119 = (int16x4_t)vtrn1_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v113.i8);
            *(int8x8_t *)v112.i8 = vtrn2_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v113.i8);
            *(int8x8_t *)v113.i8 = vtrn1_s8(v118, *(int8x8_t *)v117.i8);
            *(int8x8_t *)v117.i8 = vtrn2_s8(v118, *(int8x8_t *)v117.i8);
            int16x4_t v120 = vtrn1_s16(v119, *(int16x4_t *)v113.i8);
            *(int16x4_t *)v113.i8 = vtrn2_s16(v119, *(int16x4_t *)v113.i8);
            int16x4_t v121 = vtrn1_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v117.i8);
            *(int16x4_t *)v117.i8 = vtrn2_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v117.i8);
            *(_DWORD *)(result - 2) = v120.i32[0];
            *(_DWORD *)(result + a2 - 2) = v121.i32[0];
            *(_DWORD *)(result + v6 - 2) = v113.i32[0];
            *(_DWORD *)(result + v7 - 2) = v117.i32[0];
            *(_DWORD *)(result + v8 - 2) = v120.i32[1];
            *(_DWORD *)(result + v13 - 2) = v121.i32[1];
            *(_DWORD *)(result + v10 - 2) = v113.i32[1];
            *(_DWORD *)(result + v9 - 2) = v117.i32[1];
          }
        }
      }
      result += 8 * a2;
      ++a3;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D0C5D6E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 <= 7)
  {
    uint64_t v7 = -4 * a2;
    uint64_t v8 = 3 * a2;
    uint64_t v9 = -3 * a2;
    uint64_t v10 = 2 * a2;
    uint64_t v11 = -a2;
    uint64_t v12 = -2 * a2;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = a5 >> 3;
    uint64_t v7 = -4 * a2;
    uint64_t v8 = 3 * a2;
    uint64_t v9 = -3 * a2;
    uint64_t v10 = 2 * a2;
    uint64_t v11 = -a2;
    uint64_t v12 = -2 * a2;
    uint64_t v13 = result + a2;
    uint64_t v14 = result + 2 * a2;
    uint64_t v15 = result - a2;
    uint64_t v16 = result - 3 * a2;
    uint64_t v17 = result - 2 * a2;
    v18.i64[0] = 0xA000A000A000ALL;
    v18.i64[1] = 0xA000A000A000ALL;
    uint64_t v19 = result;
    do
    {
      if (*(_WORD *)(a4 + 2 * v5))
      {
        int8x8_t v20 = *(int8x8_t *)(v16 + 8 * v5);
        uint8x8_t v21 = *(uint8x8_t *)(v17 + 8 * v5);
        uint8x8_t v22 = *(uint8x8_t *)(v15 + 8 * v5);
        uint8x8_t v23 = *(uint8x8_t *)(result + 8 * v5);
        uint8x8_t v24 = *(uint8x8_t *)(v13 + 8 * v5);
        int8x8_t v25 = *(int8x8_t *)(v14 + 8 * v5);
        int16x8_t v26 = vdupq_n_s16(*(unsigned __int8 *)(a3 + v5));
        int16x8_t v27 = (int16x8_t)vaddl_u8(v22, (uint8x8_t)v20);
        int16x8_t v28 = (int16x8_t)vshll_n_u8(v21, 1uLL);
        int16x8_t v29 = vabdq_s16(v27, v28);
        int16x8_t v30 = (int16x8_t)vaddl_u8((uint8x8_t)v25, v23);
        int16x8_t v31 = (int16x8_t)vshll_n_u8(v24, 1uLL);
        int16x8_t v32 = vabdq_s16(v30, v31);
        int16x8_t v33 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v29), v27, v28), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v34 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v32), v30, v31), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v35 = (int8x16_t)vcgtq_s16(v26, vaddq_s16(v34, v33));
        if (vaddlvq_u16((uint16x8_t)v35))
        {
          uint8x8_t v36 = *(uint8x8_t *)(result - 4 * a2 + 8 * v5);
          uint8x8_t v37 = *(uint8x8_t *)(result + 3 * a2 + 8 * v5);
          int16x8_t v38 = (int16x8_t)vmovl_u8(v21);
          int16x8_t v39 = (int16x8_t)vmovl_u8(v22);
          int16x8_t v40 = (int16x8_t)vmovl_u8(v24);
          int16x8_t v41 = (int16x8_t)vmovl_u8(v23);
          int16x8_t v42 = (int16x8_t)vandq_s8(v35, vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v5)), (int8x16_t)xmmword_1D0D7F560));
          int16x8_t v43 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v42, vshlq_n_s16(v42, 2uLL)), (int16x8_t)vabdl_u8(v22, v23)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v26, 3uLL), vaddq_s16(v32, v29)), (int8x16_t)vcgtq_u16(vshrq_n_u16((uint16x8_t)v26, 3uLL), vabal_u8(vabdl_u8(v37, v23), v36, v22))));
          int16x8_t v44 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v43), (int8x16_t)v43), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v45 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v26, (uint16x8_t)v26, 1uLL), 3uLL);
          int8x16_t v46 = (int8x16_t)vcgtq_s16(v45, v33);
          int8x16_t v47 = (int8x16_t)vcgtq_s16(v45, v34);
          int16x8_t v48 = (int16x8_t)vbicq_s8((int8x16_t)v42, (int8x16_t)v44);
          int16x8_t v49 = (int16x8_t)vsubl_u8(v24, v21);
          uint8x8_t v50 = vrhadd_u8((uint8x8_t)v20, v22);
          uint8x8_t v51 = vrhadd_u8((uint8x8_t)v25, v23);
          if (vaddlvq_u16((uint16x8_t)v44))
          {
            int8x8_t v52 = vmovn_s16(v42);
            uint8x8_t v53 = (uint8x8_t)vadd_s8(v52, v52);
            int16x8_t v54 = (int16x8_t)vaddl_u8((uint8x8_t)v20, v36);
            int16x8_t v55 = (int16x8_t)vaddl_u8(v21, (uint8x8_t)v20);
            int16x8_t v56 = (int16x8_t)vaddl_u8(v23, v22);
            int16x8_t v57 = (int16x8_t)vaddl_u8((uint8x8_t)v25, v24);
            int16x8_t v58 = (int16x8_t)vaddl_u8(v37, (uint8x8_t)v25);
            int8x8_t v59 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v56, v38), vhadd_u8((uint8x8_t)v20, v24)), 2uLL), vqadd_u8(v22, v53)), vqsub_u8(v22, v53));
            int8x8_t v60 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v56, v40), vhadd_u8((uint8x8_t)v25, v21)), 2uLL), vqadd_u8(v23, v53)), vqsub_u8(v23, v53));
            int8x8_t v61 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v56, v55), 2uLL), vqadd_u8(v21, v53)), vqsub_u8(v21, v53));
            int8x8_t v62 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v57, v56), 2uLL), vqadd_u8(v24, v53)), vqsub_u8(v24, v53));
            int16x8_t v63 = (int16x8_t)vsubl_u8(v23, v22);
            v64.i64[0] = 0x9000900090009;
            v64.i64[1] = 0x9000900090009;
            int16x8_t v65 = vmulq_s16(v63, v64);
            v64.i64[0] = 0x2000200020002;
            v64.i64[1] = 0x2000200020002;
            int16x8_t v66 = vrshrq_n_s16(vmlaq_s16(v65, v49, v64), 4uLL);
            int8x16_t v67 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v18), vabsq_s16(v66));
            int16x8_t v68 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v66, v67), v48), vnegq_s16(v48));
            int16x8_t v69 = vshrq_n_s16(v48, 1uLL);
            int16x8_t v70 = vnegq_s16(v69);
            int16x8_t v71 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v51, v24), v68), v69), v70), vandq_s8(v47, v67)), v40);
            int8x8_t v72 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v50, v21), v68), v69), v70), vandq_s8(v46, v67)), v38));
            int8x8_t v73 = vqmovun_s16(vaddq_s16(v68, v39));
            int8x8_t v74 = vqmovun_s16(vsubq_s16(v41, v68));
            *(int8x8_t *)v68.i8 = vqmovn_s16(v44);
            *(int8x8_t *)(v16 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v54, (int16x8_t)vhaddq_u16((uint16x8_t)v55, (uint16x8_t)v56)), 2uLL), vqadd_u8((uint8x8_t)v20, v53)), vqsub_u8((uint8x8_t)v20, v53)), v20);
            *(int8x8_t *)(v17 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v61, v72);
            *(int8x8_t *)(v15 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v59, v73);
            *(int8x8_t *)(result + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v60, v74);
            *(int8x8_t *)(v13 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v62, vqmovun_s16(v71));
            *(int8x8_t *)(v14 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v58, (int16x8_t)vhaddq_u16((uint16x8_t)v57, (uint16x8_t)v56)), 2uLL), vqadd_u8((uint8x8_t)v25, v53)), vqsub_u8((uint8x8_t)v25, v53)), v25);
          }
          else
          {
            v75.i64[0] = 0x2000200020002;
            v75.i64[1] = 0x2000200020002;
            int16x8_t v76 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v23, (uint8x8_t)0x909090909090909), v22, (uint8x8_t)0x909090909090909), v49, v75), 4uLL);
            int8x16_t v77 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v18), vabsq_s16(v76));
            int16x8_t v78 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v76, v77), v48), vnegq_s16(v48));
            int16x8_t v79 = vaddq_s16(v78, v39);
            int16x8_t v80 = vsubq_s16(v41, v78);
            int16x8_t v81 = vshrq_n_s16(v48, 1uLL);
            int16x8_t v82 = vnegq_s16(v81);
            *(int8x8_t *)(v17 + 8 * v5) = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v50, v21), v78), v81), v82), vandq_s8(v46, v77)), v38));
            *(int8x8_t *)(v15 + 8 * v5) = vqmovun_s16(v79);
            *(int8x8_t *)(result + 8 * v5) = vqmovun_s16(v80);
            *(int8x8_t *)(v13 + 8 * v5) = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v51, v24), v78), v81), v82), vandq_s8(v47, v77)), v40));
          }
        }
      }
      ++v5;
      v19 += 8;
    }
    while (v6 != v5);
    int8x16_t result = v19;
  }
  _X9 = result + 64 + v7;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v9;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v12;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v11;
  __asm
  {
    PRFM            #0x10, [X9]
    PRFM            #0x10, [X0,#0x40]
  }
  _X9 = result + 64 + a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v10;
  __asm { PRFM            #0x10, [X9] }
  _X8 = result + 64 + v8;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1D0C5DB18(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 3 * a2;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = 6 * a2;
    uint64_t v9 = 7 * a2;
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    uint64_t v11 = 5 * a2;
    do
    {
      if (*(void *)(a3 + v4))
      {
        v12.i64[0] = *(void *)(result - 4);
        v13.i64[0] = *(void *)(result + a2 - 4);
        v14.i64[0] = *(void *)(result + v5 - 4);
        v15.i64[0] = *(void *)(result + v6 - 4);
        v12.i64[1] = *(void *)(result + v7 - 4);
        v13.i64[1] = *(void *)(result + v11 - 4);
        v14.i64[1] = *(void *)(result + v8 - 4);
        v15.i64[1] = *(void *)(result + v9 - 4);
        int32x4_t v16 = (int32x4_t)vtrn1q_s16(v12, v13);
        int32x4_t v17 = (int32x4_t)vtrn2q_s16(v12, v13);
        int32x4_t v18 = (int32x4_t)vtrn1q_s16(v14, v15);
        int16x8_t v19 = vtrn2q_s16(v14, v15);
        uint8x16_t v20 = (uint8x16_t)vtrn1q_s32(v16, v18);
        int8x16_t v21 = (int8x16_t)vtrn2q_s32(v16, v18);
        int8x16_t v22 = (int8x16_t)vtrn1q_s32(v17, (int32x4_t)v19);
        uint8x16_t v23 = (uint8x16_t)vtrn2q_s32(v17, (int32x4_t)v19);
        v19.i64[0] = *(void *)(a3 + v4);
        int8x16_t v24 = (int8x16_t)vzip1q_s16(v19, v19);
        int8x16_t v25 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8((uint8x16_t)v21, (uint8x16_t)v22), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(v20, v23), 1uLL), vandq_s8(veorq_s8(v21, v22), v10))), v24), vnegq_s8(v24));
        int16x8_t v26 = (int16x8_t)vsqaddq_u8((uint8x16_t)v22, v25);
        int16x8_t v27 = (int16x8_t)vsqaddq_u8((uint8x16_t)v21, vnegq_s8(v25));
        int16x8_t v28 = vzip1q_s16(v26, v27);
        *(_DWORD *)(result - 2) = v28.i32[0];
        *(_DWORD *)(result + a2 - 2) = v28.i32[1];
        *(_DWORD *)(result + v5 - 2) = v28.i32[2];
        *(_DWORD *)(result + v6 - 2) = v28.i32[3];
        int16x8_t v29 = vzip2q_s16(v26, v27);
        *(_DWORD *)(result + v7 - 2) = v29.i32[0];
        *(_DWORD *)(result + v11 - 2) = v29.i32[1];
        *(_DWORD *)(result + v8 - 2) = v29.i32[2];
        *(_DWORD *)(result + v9 - 2) = v29.i32[3];
      }
      result += 8 * a2;
      v4 += 8;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint8x16_t *sub_1D0C5DC50(uint8x16_t *result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, int16x8_t a10)
{
  if (a4 >= 1)
  {
    uint64_t v10 = 0;
    v11.i64[0] = 0x101010101010101;
    v11.i64[1] = 0x101010101010101;
    do
    {
      if (*(void *)(a3 + v10))
      {
        int8x16_t v12 = *(int8x16_t *)((char *)result - a2);
        a10.i64[0] = *(void *)(a3 + v10);
        a10 = vzip1q_s16(a10, a10);
        int8x16_t v13 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8(*result, (uint8x16_t)v12), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(*(uint8x16_t *)((char *)result - 2 * a2), *(uint8x16_t *)((char *)result + a2)), 1uLL), vandq_s8(veorq_s8(*(int8x16_t *)result, v12), v11))), (int8x16_t)a10), vnegq_s8((int8x16_t)a10));
        uint8x16_t v14 = vsqaddq_u8(*result, vnegq_s8(v13));
        *(uint8x16_t *)((char *)result - a2) = vsqaddq_u8((uint8x16_t)v12, v13);
        *int8x16_t result = v14;
      }
      ++result;
      v10 += 8;
    }
    while ((int)v10 < a4);
  }
  return result;
}

unint64_t sub_1D0C5DCD8(unint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void **)(result + 8);
  uint64_t v8 = (uint64_t)a3 >> 3;
  uint64_t v9 = v7[96];
  uint64_t v10 = v7[97];
  uint64_t v11 = v7[116];
  uint64_t v12 = v7[118];
  uint64_t v13 = v7[117];
  uint8x16_t v14 = (int32x4_t *)(v7[121] + v13 * ((uint64_t)(a2 + 8) >> 3) + (a3 >> 2));
  int16x8_t v15 = (const __int16 *)(*(void *)(result + 32) + 14);
  int32x4_t v16 = *(int32x4_t *)((char *)v14 + v13);
  int32x4_t v17 = *(int32x4_t *)((char *)v14 + 2 * v13);
  int32x4_t v18 = *(int32x4_t *)((char *)v14 + 3 * v13);
  int32x4_t v19 = *(int32x4_t *)((char *)v14 + 4 * v13);
  int32x4_t v20 = *(int32x4_t *)((char *)v14 + 5 * v13);
  int32x4_t v21 = *(int32x4_t *)((char *)v14 + 6 * v13);
  int32x4_t v22 = *(int32x4_t *)((char *)v14 + 7 * v13);
  int64x2_t v23 = (int64x2_t)vtrn1q_s32(*v14, v16);
  int64x2_t v24 = (int64x2_t)vtrn2q_s32(*v14, v16);
  int64x2_t v25 = (int64x2_t)vtrn1q_s32(v17, v18);
  int64x2_t v26 = (int64x2_t)vtrn2q_s32(v17, v18);
  int64x2_t v27 = vzip1q_s64(v23, v25);
  int64x2_t v28 = vzip2q_s64(v23, v25);
  int64x2_t v29 = vzip1q_s64(v24, v26);
  int64x2_t v30 = vzip2q_s64(v24, v26);
  int64x2_t v31 = (int64x2_t)vtrn1q_s32(v19, v20);
  int64x2_t v32 = (int64x2_t)vtrn1q_s32(v21, v22);
  v134[0] = v27;
  v134[1] = vzip1q_s64(v31, v32);
  int8x16_t v33 = (int8x16_t)vld1q_dup_s16(v15);
  int v34 = *(unsigned __int8 *)(result + 660);
  int v35 = *(unsigned __int8 *)(result + 661);
  _X8 = v10 + 2 * (v9 * v8 + (a2 >> 3));
  int64x2_t v37 = (int64x2_t)vtrn2q_s32(v19, v20);
  int64x2_t v38 = (int64x2_t)vtrn2q_s32(v21, v22);
  v134[2] = v29;
  v134[3] = vzip1q_s64(v37, v38);
  v134[4] = v28;
  v134[5] = vzip2q_s64(v31, v32);
  v134[6] = v30;
  v134[7] = vzip2q_s64(v37, v38);
  _X13 = &v14->i8[8 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[9 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[10 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[11 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[12 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[13 * v13];
  __asm { PRFM            #0, [X13] }
  _X13 = &v14->i8[14 * v13];
  __asm { PRFM            #0, [X13] }
  _X9 = (uint64_t)v14[v13].i64 - v13;
  __asm { PRFM            #0, [X9] }
  if (a3)
  {
    _X9 = (int16x8_t *)(_X8 - 2 * v9);
    int16x8_t v60 = *_X9;
    _X9 += 2;
    unsigned long long v61 = (unsigned __int128)vshrq_n_s16(v60, 2uLL);
    __asm { PRFM            #0, [X9] }
  }
  else
  {
    unsigned long long v61 = 0uLL;
  }
  if (a5 >= 8)
  {
    uint64_t v63 = 0;
    unint64_t v64 = 0;
    unsigned int v65 = v35 - 20;
    unsigned int v66 = v35 - 16;
    uint64_t v67 = (uint64_t)a2 >> 2;
    int8x16_t v68 = vdupq_n_s8(v34 - 16);
    int8x16_t v69 = vdupq_n_s8(v65);
    int8x16_t v70 = vdupq_n_s8(v66);
    unint64_t v71 = a5 >> 3;
    uint64_t v72 = 2 * v9;
    uint64_t v73 = 2 * v11;
    uint64_t v74 = v12 + v11 * v8;
    uint64_t v75 = v12 + v11 + v11 * v8;
    uint64_t v76 = 4 * v9;
    int8x16_t result = 512;
    uint64_t v77 = 256;
    uint64_t v78 = 832;
    v79.i64[0] = 0x2323232323232323;
    v79.i64[1] = 0x2323232323232323;
    long long v80 = xmmword_1D0D7F580;
    long long v81 = xmmword_1D0D7F590;
    long long v82 = xmmword_1D0D7F5A0;
    v83.i64[0] = 0x101010101010101;
    v83.i64[1] = 0x101010101010101;
    long long v84 = xmmword_1D0D7F5B0;
    long long v85 = xmmword_1D0D7F5C0;
    long long v86 = xmmword_1D0D7F5D0;
    v87.i64[0] = 0x2B2B2B2B2B2B2B2BLL;
    v87.i64[1] = 0x2B2B2B2B2B2B2B2BLL;
    v88.i64[0] = 0xFAFAFAFAFAFAFAFALL;
    v88.i64[1] = 0xFAFAFAFAFAFAFAFALL;
    v89.i64[0] = 0xE2E2E2E2E2E2E2E2;
    v89.i64[1] = 0xE2E2E2E2E2E2E2E2;
    v90.i64[0] = 0xD4D4D4D4D4D4D4D4;
    v90.i64[1] = 0xD4D4D4D4D4D4D4D4;
    v91.i64[0] = 0xF2F2F2F2F2F2F2F2;
    v91.i64[1] = 0xF2F2F2F2F2F2F2F2;
    do
    {
      unsigned long long v92 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)_X8, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      _X6 = _X8 + v72;
      unsigned long long v94 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      *(int8x8_t *)v6.i8 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v92);
      unsigned long long v61 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v72), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      unsigned long long v95 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v72 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      int8x16_t v96 = vzip1q_s8(v6, v6);
      *(int8x8_t *)&unsigned long long v94 = vraddhn_s16((int16x8_t)v92, (int16x8_t)v94);
      *(int8x8_t *)&unsigned long long v95 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v95);
      int8x16_t v97 = vraddhn_high_s16(*(int8x8_t *)v6.i8, (int16x8_t)v92, (int16x8_t)v61);
      int8x16_t v98 = vzip1q_s8((int8x16_t)v94, (int8x16_t)v95);
      __asm
      {
        PRFM            #0, [X8,#0x20]
        PRFM            #0, [X6,#0x20]
      }
      int8x16_t v101 = vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(v98, v68), v79));
      *(int8x16_t *)(a6 + v78) = vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(v97, v68), v79));
      *(_WORD *)(a6 + v64 + 776) = v101.i16[1];
      *(_WORD *)(a6 + v64 + 784) = v101.i16[2];
      *(_WORD *)(a6 + v64 + 792) = v101.i16[3];
      *(_WORD *)(a6 + v64 + 800) = v101.i16[4];
      *(_WORD *)(a6 + v64 + 808) = v101.i16[5];
      *(_WORD *)(a6 + v64 + 816) = v101.i16[6];
      *(_WORD *)(a6 + v64 + 768) = v101.i16[0];
      *(_WORD *)(a6 + v64 + 824) = v101.i16[7];
      _X4 = v74 + v67 + 16;
      int8x16_t v103 = *(int8x16_t *)(v74 + v67);
      _X6 = v75 + v67 + 16;
      int8x16_t v105 = *(int8x16_t *)(v75 + v67);
      __asm { PRFM            #0, [X4] }
      int8x16_t v107 = vaddq_s8(v97, v69);
      __asm { PRFM            #0, [X6] }
      int8x16_t v109 = vzip1q_s8(v107, v107);
      int8x16_t v110 = vceqzq_s8(v105);
      int8x16_t v111 = vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vaddq_s8(v105, v105), vzip2q_s8(v107, v107)), v79));
      int16x8_t v112 = (int8x16_t *)(a6 + 16 * v64);
      int32x4_t v113 = (int32x4_t)v134[result / 0x10 - 32];
      int32x4_t v114 = (int32x4_t)v134[result / 0x10 - 31];
      int8x16_t v115 = vaddq_s8(v98, v69);
      int8x16_t v116 = vbicq_s8(v111, v110);
      int8x16_t v117 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v113, (int8x16_t)v113), vzip1q_s8(v115, v115)), v79)), vceqzq_s8((int8x16_t)v113));
      v112[8] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vaddq_s8(v103, v103), v109), v79)), vceqzq_s8(v103));
      v112[9] = v116;
      int8x16_t v118 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v114, (int8x16_t)v114), vzip2q_s8(v115, v115)), v79)), vceqzq_s8((int8x16_t)v114));
      int16x4_t v119 = (_DWORD *)(a6 + v63);
      *int16x4_t v119 = v117.i32[0];
      *(_DWORD *)(a6 + v63 + 16) = v117.i32[1];
      *(_DWORD *)(a6 + v63 + 32) = v117.i32[2];
      *(_DWORD *)(a6 + v63 + 48) = v117.i32[3];
      v119[16] = v118.i32[0];
      int8x16_t v120 = vaddq_s8(vqtbl1q_s8(v98, (int8x16_t)xmmword_1D0D7F5E0), v33);
      int8x16_t v121 = vaddq_s8(vandq_s8(vcgtq_s8(v120, v87), v88), v120);
      *(_DWORD *)(a6 + v63 + 80) = v118.i32[1];
      *(_DWORD *)(a6 + v63 + 96) = v118.i32[2];
      int16x8_t v122 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v91, (uint8x16_t)vaddq_s8(v120, v90)), v121, vqtbl1q_s8((int8x16_t)xmmword_1D0D7F5F0, vaddq_s8(v121, v89))), v70), v79));
      *(_DWORD *)(a6 + v63 + 112) = v118.i32[3];
      int8x16_t v123 = (int8x16_t)vcgtq_u8((uint8x16_t)vuzp2q_s32(v113, v114), v83);
      unint64_t v124 = (void *)(a6 + v77);
      BOOL v125 = (void *)(a6 + v77 + 96);
      int8x16_t v126 = vaddq_s8(v96, v33);
      int8x16_t v127 = vandq_s8((int8x16_t)vzip1q_s16(v122, v122), (int8x16_t)vmovl_s8(*(int8x8_t *)v123.i8));
      int8x16_t v128 = vaddq_s8(vandq_s8(vcgtq_s8(v126, v87), v88), v126);
      int8x16_t v129 = vandq_s8((int8x16_t)vzip2q_s16(v122, v122), (int8x16_t)vmovl_high_s8(v123));
      int16x8_t v130 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v86, vminq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v91, (uint8x16_t)vaddq_s8(v126, v90)), v128, vqtbl1q_s8((int8x16_t)xmmword_1D0D7F5F0, vaddq_s8(v128, v89))), v70), v79));
      int8x16_t v131 = (int8x16_t)vzip1q_s16(v130, v130);
      void *v124 = v127.i64[0];
      int8x16_t v6 = (int8x16_t)vzip2q_s16(v130, v130);
      int8x16_t v132 = (int8x16_t)vcgtq_u8((uint8x16_t)v103, v83);
      *(void *)(a6 + v77 + 32) = v127.i64[1];
      BOOL v133 = (int8x16_t *)(a6 + result);
      v64 += 2;
      v74 += v73;
      v124[8] = v129.i64[0];
      result += 32;
      v75 += v73;
      v77 += 8;
      _X8 += v76;
      *BOOL v125 = v129.i64[1];
      int8x16_t *v133 = vandq_s8(v131, (int8x16_t)vmovl_s8(*(int8x8_t *)v132.i8));
      v133[1] = vandq_s8(v6, (int8x16_t)vmovl_high_s8(v132));
      v78 += 16;
      v63 += 4;
    }
    while (v64 < v71);
  }
  return result;
}

void sub_1D0C5E1EC(int *a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (a3)
  {
    if (a1[1])
    {
      if (dword_1EB671A40 < 3) {
        return;
      }
      uint64_t v8 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v9 = "SAO enabled partway through processing frame\n";
      uint64_t v10 = "SAO enabled partway through processing frame\n";
      size_t v11 = 45;
LABEL_9:
      fwrite(v10, v11, 1uLL, v8);
      syslog(27, v9);
      return;
    }
    uint64_t v12 = *a1;
    int v13 = *a4;
    if (*a4 >= *(_DWORD *)(*(void *)(a2 + 16) + 208))
    {
      int v15 = a1[5];
    }
    else
    {
      unsigned int v14 = a1[2];
      int v15 = v13 >> v14;
      *a4 = v13 >> v14 << v14;
    }
    *a1 = v15;
    if ((int)v12 >= v15)
    {
LABEL_22:
      if (*(unsigned char *)(v7 + 534))
      {
        unsigned int v21 = a1[3];
        int v22 = v21 * v12;
        int v23 = v21 * v15;
        if (*(_DWORD *)(v7 + 524) >= v23) {
          int v24 = v23;
        }
        else {
          int v24 = *(_DWORD *)(v7 + 524);
        }
        sub_1D0D38544((uint64_t)a1, v7, v22, v24);
      }
    }
    else
    {
      uint64_t v17 = v12;
      while (1)
      {
        int32x4_t v18 = (unsigned int (*)(void *, uint64_t, uint64_t))*((void *)a1 + 56);
        uint64_t v19 = *((void *)a1 + 57);
        int32x4_t v20 = (void *)((char *)a1 + (v19 >> 1));
        if (v19) {
          int32x4_t v18 = *(unsigned int (**)(void *, uint64_t, uint64_t))(*v20 + v18);
        }
        if (v18(v20, a2, v17)) {
          break;
        }
        uint64_t v17 = (v17 + 1);
        if (v15 == v17) {
          goto LABEL_22;
        }
      }
    }
  }
  else
  {
    if (!*(unsigned char *)(v7 + 534)) {
      return;
    }
    if (*a1)
    {
      if (dword_1EB671A40 < 3) {
        return;
      }
      uint64_t v8 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v9 = "SAO disabled partway through processing frame\n";
      uint64_t v10 = "SAO disabled partway through processing frame\n";
      size_t v11 = 46;
      goto LABEL_9;
    }
    int v16 = *a4;
    if (v16 < *(_DWORD *)(*(void *)(a2 + 16) + 208))
    {
      v16 &= 0xFFFFFFF8;
      *a4 = v16;
    }
    sub_1D0D38544((uint64_t)a1, v7, a1[1], v16);
    a1[1] = *a4;
  }
}

int8x16_t sub_1D0C5E3B8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,long long a30,long long a31,long long a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  int16x8_t v48 = (int8x16_t *)a1;
  char v145 = &v143;
  a48 = *MEMORY[0x1E4F143B8];
  uint64_t v49 = *(void *)(a2 + 8);
  int v50 = *(_DWORD *)(a1 + 16);
  int v51 = *(_DWORD *)(a1 + 20);
  int8x8_t v52 = (unsigned __int8 *)(*(void *)(v49 + 1000) + 16 * (int)(v50 * a3));
  uint64_t v54 = *(void *)(v49 + 416);
  uint64_t v53 = *(void *)(v49 + 424);
  int v56 = *(_DWORD *)(a1 + 8);
  uint64_t v55 = *(int *)(a1 + 12);
  uint64_t v57 = (int)v55 * (uint64_t)(int)a3;
  char v58 = *(unsigned char *)(v49 + 531);
  uint64_t v59 = *(void *)(v49 + 400) + ((v54 * v57) << v58);
  uint64_t v60 = *(void *)(v49 + 408) + ((v53 * ((uint64_t)(int)v57 >> 1)) << v58);
  uint64_t v61 = *(void *)(a1 + 32);
  uint64_t v159 = *(void *)(a1 + 48);
  uint64_t v160 = v60;
  if (a3) {
    uint64_t v62 = 38;
  }
  else {
    uint64_t v62 = 2;
  }
  if (a3) {
    int v63 = 17;
  }
  else {
    int v63 = 1;
  }
  uint64_t v144 = *(void *)(a2 + 8);
  if (v51 - 1 <= (int)a3)
  {
    int v151 = v63;
    int v65 = *(_DWORD *)(v49 + 524) - v57;
  }
  else
  {
    uint64_t v62 = v62 | 0x88;
    int v151 = v63 | 0x40;
    size_t v64 = *(int *)(v49 + 520);
    memcpy(*(void **)(a1 + 40), (const void *)(v59 + v54 * (v55 - 1)), v64);
    memcpy((void *)v48[3].i64[1], (const void *)(v60 + v53 * ((v48->i32[3] >> 1) - 1)), v64 & 0x7FFFFFFFFFFFFFFFLL);
    int v65 = v48->i32[3];
    int v50 = v48[1].i32[0];
  }
  uint64_t vars0 = (v65 >> 1);
  uint64_t vars8 = v48;
  uint64_t v149 = v53;
  int v158 = v65;
  if (v50 < 2)
  {
    uint64_t v68 = 0;
    BOOL v95 = 0;
    int v151 = 0;
  }
  else
  {
    BOOL v66 = 0;
    BOOL v67 = 0;
    uint64_t v68 = 0;
    int8x16_t v69 = &v48->i8[40 * v56];
    unsigned int v147 = v69 + 112;
    uint64_t v148 = v69 - 48;
    uint64_t v146 = v65;
    unsigned int v150 = v151 | v62;
    do
    {
      uint64_t v70 = sub_1D0C5EB40(a2, v68, a3, v62);
      unint64_t v72 = *v52;
      BOOL v73 = (v72 & 1) == 0;
      if (v72)
      {
        uint64_t v74 = (v72 >> 1) & 7;
        if (v74 > 4) {
          return result;
        }
        if (v74 == 4)
        {
          uint64_t v75 = 0;
          unsigned __int8 v76 = v52[13];
          a29 = 0u;
          a30 = 0u;
          int v77 = v158;
          do
          {
            *((unsigned char *)&a29 + ((v76 + (_BYTE)v75) & 0x1F)) = v52[v75 + 1];
            ++v75;
          }
          while (v75 != 4);
        }
        else
        {
          LOWORD(a29) = *(_WORD *)(v52 + 1);
          *(_WORD *)((char *)&a29 + 3) = *(_WORD *)(v52 + 3);
          BYTE2(a29) = 0;
          int v77 = v158;
        }
        BOOL v78 = v73;
        if (v67 && v77 > 0)
        {
          int8x16_t v79 = (char *)(v59 - 1);
          long long v80 = &a33;
          uint64_t v81 = v146;
          do
          {
            *v80++ = *v79;
            v79 += v54;
            --v81;
          }
          while (v81);
        }
        uint64_t v82 = v70;
        (*(void (**)(uint64_t, uint64_t, long long *))&v148[8 * v74])(v59, v54, &a29);
        uint64_t v70 = v82;
        LODWORD(v72) = *v52;
        BOOL v73 = v78;
      }
      BOOL v83 = (v72 & 0x10) == 0;
      if ((v72 & 0x10) != 0)
      {
        if (v72 > 0x9F) {
          return result;
        }
        unsigned int v84 = v72 >> 5;
        int v151 = v83;
        if (v84 == 4)
        {
          uint64_t v85 = 0;
          unsigned __int8 v86 = v52[14];
          a29 = 0u;
          a30 = 0u;
          do
          {
            *((unsigned char *)&a29 + ((v86 + (_BYTE)v85) & 0x1F)) = v52[v85 + 5];
            ++v85;
          }
          while (v85 != 4);
          uint64_t v87 = 0;
          unsigned __int8 v88 = v52[15];
          a31 = 0u;
          a32 = 0u;
          uint64_t v89 = v149;
          do
          {
            *((unsigned char *)&a31 + ((v88 + (_BYTE)v87) & 0x1F)) = v52[v87 + 9];
            ++v87;
          }
          while (v87 != 4);
        }
        else
        {
          LOWORD(a29) = *(_WORD *)(v52 + 5);
          *(_WORD *)((char *)&a29 + 3) = *(_WORD *)(v52 + 7);
          BYTE2(a29) = 0;
          LOWORD(a31) = *(_WORD *)(v52 + 9);
          *(_WORD *)((char *)&a31 + 3) = *(_WORD *)(v52 + 11);
          BYTE2(a31) = 0;
          uint64_t v89 = v149;
        }
        BOOL v90 = v73;
        if (v66 && v158 > 1)
        {
          uint8x16_t v91 = (_WORD *)(v160 - 2);
          unsigned long long v92 = &a13;
          uint64_t v93 = vars0;
          do
          {
            *(_WORD *)unsigned long long v92 = *v91;
            v92 += 2;
            uint8x16_t v91 = (_WORD *)((char *)v91 + v89);
            --v93;
          }
          while (v93);
        }
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))&v147[8 * v84])(v160, v89, &a29, v70, &a13, v159, vars0);
        BOOL v83 = v151;
        BOOL v73 = v90;
      }
      uint64_t v94 = vars8->i32[3];
      v59 += v94;
      v61 += v94;
      v159 += v94;
      v160 += v94;
      v52 += 16;
      uint64_t v68 = (v68 + 1);
      uint64_t v62 = v150;
      BOOL v66 = v83;
      BOOL v67 = v73;
    }
    while ((int)v68 < vars8[1].i32[0] - 1);
    BOOL v95 = v73;
    int v151 = v83;
    LOBYTE(v62) = v150;
    int16x8_t v48 = vars8;
  }
  int v96 = sub_1D0C5EB40(a2, v68, a3, v62 & 0x5D);
  int v97 = *(_DWORD *)(v144 + 520) - (v48[1].i32[0] - 1) * v48->i32[3];
  unint64_t v98 = *v52;
  if (v98)
  {
    uint64_t v99 = (v98 >> 1) & 7;
    if (v99 > 4) {
      return result;
    }
    if (v99 == 4)
    {
      uint64_t v100 = 0;
      unsigned __int8 v101 = v52[13];
      int8x16_t result = 0uLL;
      a29 = 0u;
      a30 = 0u;
      int v102 = v158;
      do
      {
        *((unsigned char *)&a29 + ((v101 + (_BYTE)v100) & 0x1F)) = v52[v100 + 1];
        ++v100;
      }
      while (v100 != 4);
    }
    else
    {
      LOWORD(a29) = *(_WORD *)(v52 + 1);
      *(_WORD *)((char *)&a29 + 3) = *(_WORD *)(v52 + 3);
      BYTE2(a29) = 0;
      int v102 = v158;
    }
    if (v102 > 0 && v95)
    {
      int32x2_t v104 = (char *)(v59 - 1);
      uint64_t v105 = v102;
      int32x2_t v106 = &a33;
      do
      {
        *v106++ = *v104;
        v104 += v54;
        --v105;
      }
      while (v105);
    }
    if ((v96 & 4) != 0) {
      int v107 = 34;
    }
    else {
      int v107 = 2;
    }
    if ((v96 & 4) != 0) {
      int v108 = 17;
    }
    else {
      int v108 = 1;
    }
    unsigned int v109 = v107 & 0xFFFFFF7F | (((v96 & 8) != 0) << 7);
    unsigned int v110 = v108 & 0xFFFFFFBF | (((v96 & 8) != 0) << 6);
    int v155 = v97;
    int v111 = v97 >> 3;
    int16x8_t v112 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))&v48[12] + v99;
    uint64_t v113 = 4;
    int v157 = v96;
    int v114 = v96;
    do
    {
      if ((v111 & (1 << --v113)) != 0)
      {
        v111 -= 1 << v113;
        if (v111) {
          unsigned int v115 = v109;
        }
        else {
          unsigned int v115 = 0;
        }
        uint64_t v116 = v115 | v114;
        int v114 = v114 & 0xC | v110;
        (*v112)(v59, v54, &a29, v116, &a33, v61, v158);
        v59 += 8 << v113;
        v61 += 8 << v113;
      }
      v112 -= 5;
    }
    while (v113);
    LODWORD(v98) = *v52;
    int v96 = v157;
    int v97 = v155;
  }
  uint64_t v117 = v159;
  if ((v98 & 0x10) == 0)
  {
LABEL_93:
    uint64_t v141 = vars8;
    int8x16_t result = vextq_s8(vars8[2], vars8[2], 8uLL);
    int8x16_t v142 = vextq_s8(vars8[3], vars8[3], 8uLL);
    vars8[2] = result;
    v141[3] = v142;
    return result;
  }
  if (v98 <= 0x9F)
  {
    unsigned int v118 = v98 >> 5;
    if (v118 == 4)
    {
      uint64_t v119 = 0;
      unsigned __int8 v120 = v52[14];
      a29 = 0u;
      a30 = 0u;
      int8x16_t v121 = vars8;
      uint64_t v122 = v149;
      uint64_t v123 = v160;
      int v124 = v158;
      int v125 = v151;
      do
      {
        *((unsigned char *)&a29 + ((v120 + (_BYTE)v119) & 0x1F)) = v52[v119 + 5];
        ++v119;
      }
      while (v119 != 4);
      uint64_t v126 = 0;
      unsigned __int8 v127 = v52[15];
      a31 = 0u;
      a32 = 0u;
      do
      {
        *((unsigned char *)&a31 + ((v127 + (_BYTE)v126) & 0x1F)) = v52[v126 + 9];
        ++v126;
      }
      while (v126 != 4);
    }
    else
    {
      LOWORD(a29) = *(_WORD *)(v52 + 5);
      *(_WORD *)((char *)&a29 + 3) = *(_WORD *)(v52 + 7);
      BYTE2(a29) = 0;
      LOWORD(a31) = *(_WORD *)(v52 + 9);
      *(_WORD *)((char *)&a31 + 3) = *(_WORD *)(v52 + 11);
      BYTE2(a31) = 0;
      int8x16_t v121 = vars8;
      uint64_t v122 = v149;
      uint64_t v123 = v160;
      int v124 = v158;
      int v125 = v151;
    }
    if (v124 > 1) {
      int v128 = v125;
    }
    else {
      int v128 = 0;
    }
    if (v128 == 1)
    {
      int8x16_t v129 = (_WORD *)(v123 - 2);
      int16x8_t v130 = &a13;
      uint64_t v131 = vars0;
      do
      {
        *(_WORD *)int16x8_t v130 = *v129;
        v130 += 2;
        int8x16_t v129 = (_WORD *)((char *)v129 + v122);
        --v131;
      }
      while (v131);
    }
    if ((v96 & 4) != 0) {
      int v132 = 34;
    }
    else {
      int v132 = 2;
    }
    if ((v96 & 4) != 0) {
      int v133 = 17;
    }
    else {
      int v133 = 1;
    }
    unsigned int v134 = v132 & 0xFFFFFF7F | (((v96 & 8) != 0) << 7);
    unsigned int v135 = v133 & 0xFFFFFFBF | (((v96 & 8) != 0) << 6);
    int v136 = v97 >> 3;
    unsigned int v137 = &v121[24].i64[v118 + 1];
    uint64_t v138 = 5;
    do
    {
      if ((v136 & (1 << --v138)) != 0)
      {
        v136 -= 1 << v138;
        if (v136) {
          unsigned int v139 = v134;
        }
        else {
          unsigned int v139 = 0;
        }
        int v140 = v96 & 0xC | v135;
        ((void (*)(uint64_t, uint64_t, long long *, void, char *, uint64_t, uint64_t))*v137)(v160, v149, &a29, v139 | v96, &a13, v117, vars0);
        int v96 = v140;
        v160 += 8 << v138;
        v117 += 8 << v138;
      }
      v137 -= 5;
    }
    while (v138);
    goto LABEL_93;
  }
  return result;
}

uint64_t sub_1D0C5EB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(unsigned __int8 *)(v10 + 20);
  if (*(unsigned char *)(v10 + 20))
  {
    int v12 = *(_DWORD *)(v10 + 1744);
    if (v12 > (int)a2)
    {
      int v11 = *(_DWORD *)(v10 + 1748);
      if (v11 > (int)a3)
      {
        int v4 = *(unsigned __int8 *)(v10 + 1752);
        if (*(unsigned char *)(v10 + 1752))
        {
          uint64_t v13 = *(void *)(v10 + 1696) + 12 * (int)a2;
          int v5 = *(_DWORD *)(v13 + 4);
          int v12 = *(_DWORD *)(v13 + 8);
          uint64_t v14 = *(void *)(v10 + 1720) + 12 * (int)a3;
          int v4 = *(_DWORD *)(v14 + 4);
          int v11 = *(_DWORD *)(v14 + 8);
        }
        else
        {
          int v5 = 0;
        }
      }
    }
    if (*(unsigned char *)(v10 + 27))
    {
      BOOL v18 = v12 - 1 == a2 && v4 < (int)a3;
      int v19 = v11 - 1;
      BOOL v21 = v5 == a2 && v19 > (int)a3;
      if (*(unsigned char *)(a1 + 1600)) {
        char v15 = v21;
      }
      else {
        char v15 = 0;
      }
      if (*(unsigned char *)(a1 + 1600)) {
        char v16 = v18;
      }
      else {
        char v16 = 0;
      }
    }
    else
    {
      char v15 = 0;
      char v16 = 0;
      unsigned int v22 = a4 & 0xFFFFFFAE;
      if (v5 != a2) {
        unsigned int v22 = a4;
      }
      if (v12 - 1 == a2) {
        v22 &= 0xFFFFFF5D;
      }
      if (v4 == a3) {
        v22 &= 0xFFFFFFCB;
      }
      if (v11 - 1 == a3) {
        uint64_t v6 = v22 & 0xFFFFFF37;
      }
      else {
        uint64_t v6 = v22;
      }
    }
  }
  else
  {
    char v15 = 0;
    char v16 = 0;
  }
  if (*(unsigned char *)(a1 + 1600))
  {
    uint64_t v23 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))a1)(a1, a2, a3);
    int v24 = *(_DWORD *)(v23 + 648);
    if (*(unsigned char *)(v23 + 567))
    {
LABEL_57:
      if ((v6 & 2) != 0)
      {
        uint64_t v27 = (**(uint64_t (***)(uint64_t, void, uint64_t))a1)(a1, (a2 + 1), a3);
        if (*(_DWORD *)(v27 + 648) != v24)
        {
          if (*(unsigned char *)(v27 + 567)) {
            uint64_t v6 = v6;
          }
          else {
            uint64_t v6 = v6 & 0xFFFFFFFD;
          }
        }
      }
      if ((v6 & 8) != 0)
      {
        uint64_t v28 = (**(uint64_t (***)(uint64_t, uint64_t, void))a1)(a1, a2, (a3 + 1));
        if (*(_DWORD *)(v28 + 648) != v24)
        {
          if (*(unsigned char *)(v28 + 567)) {
            uint64_t v6 = v6;
          }
          else {
            uint64_t v6 = v6 & 0xFFFFFFF7;
          }
        }
      }
      if ((v6 & 0x80) != 0)
      {
        uint64_t v29 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, (a2 + 1), (a3 + 1));
        if (*(_DWORD *)(v29 + 648) != v24)
        {
          if (*(unsigned char *)(v29 + 567)) {
            uint64_t v6 = v6;
          }
          else {
            uint64_t v6 = v6 & 0xFFFFFF7F;
          }
        }
      }
      if ((v6 & 0x40) != 0) {
        char v30 = v15;
      }
      else {
        char v30 = 1;
      }
      if ((v30 & 1) == 0)
      {
        uint64_t v31 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, (a2 - 1), (a3 + 1));
        if (*(_DWORD *)(v31 + 648) != v24)
        {
          if (*(unsigned char *)(v31 + 567)) {
            uint64_t v6 = v6;
          }
          else {
            uint64_t v6 = v6 & 0xFFFFFFBF;
          }
        }
      }
      char v32 = v16 ^ 1;
      if ((v6 & 0x20) == 0) {
        char v32 = 1;
      }
      if ((v32 & 1) == 0)
      {
        uint64_t v33 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, (a2 + 1), (a3 - 1));
        if (*(_DWORD *)(v33 + 648) != v24)
        {
          if (*(unsigned char *)(v33 + 567)) {
            return v6;
          }
          else {
            return v6 & 0xFFFFFFDF;
          }
        }
      }
      return v6;
    }
    if (v6)
    {
      if (*(_DWORD *)((**(uint64_t (***)(uint64_t, void, uint64_t))a1)(a1, (a2 - 1), a3) + 648) == v24) {
        uint64_t v6 = v6;
      }
      else {
        uint64_t v6 = v6 & 0xFFFFFFFE;
      }
      if ((v6 & 4) == 0)
      {
LABEL_40:
        if ((v6 & 0x10) == 0) {
          goto LABEL_44;
        }
        goto LABEL_41;
      }
    }
    else if ((v6 & 4) == 0)
    {
      goto LABEL_40;
    }
    if (*(_DWORD *)((**(uint64_t (***)(uint64_t, uint64_t, void))a1)(a1, a2, (a3 - 1)) + 648) == v24) {
      uint64_t v6 = v6;
    }
    else {
      uint64_t v6 = v6 & 0xFFFFFFFB;
    }
    if ((v6 & 0x10) == 0) {
      goto LABEL_44;
    }
LABEL_41:
    if (*(_DWORD *)((**(uint64_t (***)(uint64_t, void, void))a1)(a1, (a2 - 1), (a3 - 1))+ 648) == v24)uint64_t v6 = v6; {
    else
    }
      uint64_t v6 = v6 & 0xFFFFFFEF;
LABEL_44:
    if ((v6 & 0x20) != 0) {
      char v25 = v16;
    }
    else {
      char v25 = 1;
    }
    if ((v25 & 1) == 0)
    {
      if (*(_DWORD *)((**(uint64_t (***)(uint64_t, void, void))a1)(a1, (a2 + 1), (a3 - 1))+ 648) == v24)uint64_t v6 = v6; {
      else
      }
        uint64_t v6 = v6 & 0xFFFFFFDF;
    }
    char v26 = v15 ^ 1;
    if ((v6 & 0x40) == 0) {
      char v26 = 1;
    }
    if ((v26 & 1) == 0)
    {
      if (*(_DWORD *)((**(uint64_t (***)(uint64_t, void, void))a1)(a1, (a2 - 1), (a3 + 1))+ 648) == v24)uint64_t v6 = v6; {
      else
      }
        uint64_t v6 = v6 & 0xFFFFFFBF;
    }
    goto LABEL_57;
  }
  return v6;
}

void sub_1D0C5EFCC(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint8x16_t v4 = a2[2];
  int16x8_t v5 = (int16x8_t)vmovl_high_u8(*a2);
  int16x8_t v6 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2->i8), *a2), v4), *(uint8x8_t *)v4.i8);
  v6.i64[0] = vpaddq_s16(v6, v6).u64[0];
  *(int16x4_t *)v6.i8 = vpadd_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  *(int16x4_t *)v6.i8 = vpadd_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  v6.i64[1] = v6.i64[0];
  int8x8_t v7 = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v6, 5uLL);
  uint16x8_t v8 = vmull_u8((uint8x8_t)v7, (uint8x8_t)0x303030303030302);
  int16x8_t v9 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  uint64_t v10 = (uint64_t)vrshrn_n_s16((int16x8_t)vaddw_u8(v8, *(uint8x8_t *)a2->i8), 2uLL);
  int8x8_t v11 = vrshrn_n_s16((int16x8_t)vmlal_u8(vaddl_u8((uint8x8_t)a2->u8[0], *(uint8x8_t *)v4.i8), (uint8x8_t)v7, (uint8x8_t)0x303030303030302), 2uLL);
  int8x8_t v20 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v7, 7uLL);
  int8x8_t v21 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v7, 7uLL);
  int8x8_t v22 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v7, 7uLL);
  int8x8_t v23 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v7, 7uLL);
  int8x8_t v24 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v7, 7uLL);
  int8x8_t v25 = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v7, 7uLL);
  int8x8_t v26 = vext_s8((int8x8_t)v10, v7, 7uLL);
  *a4 = vrshrn_high_n_s16(v11, (int16x8_t)vaddw_high_u8((uint16x8_t)v9, v4), 2uLL);
  int v12 = &a4->i8[a3];
  for (uint64_t i = 8; i != 64; i += 8)
  {
    *(int8x8_t *)&long long v14 = *(int8x8_t *)((char *)&v19 + i);
    *((int8x8_t *)&v14 + 1) = v7;
    *(_OWORD *)int v12 = v14;
    v12 += a3;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = (uint64_t)vrshrn_n_s16(vaddq_s16(v9, v5), 2uLL);
  int8x8_t v19 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x38uLL), v7, 7uLL);
  int8x8_t v20 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x30uLL), v7, 7uLL);
  int8x8_t v21 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x28uLL), v7, 7uLL);
  int8x8_t v22 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x20uLL), v7, 7uLL);
  int8x8_t v23 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x18uLL), v7, 7uLL);
  int8x8_t v24 = vext_s8((int8x8_t)vshld_n_s64(v17, 0x10uLL), v7, 7uLL);
  int8x8_t v25 = vext_s8((int8x8_t)vshld_n_s64(v17, 8uLL), v7, 7uLL);
  int8x8_t v26 = vext_s8((int8x8_t)v17, v7, 7uLL);
  do
  {
    *(int8x8_t *)&long long v18 = *(int8x8_t *)((char *)&v19 + v16);
    *((int8x8_t *)&v18 + 1) = v7;
    *(_OWORD *)&v12[v15] = v18;
    v16 += 8;
    v15 += a3;
  }
  while (v16 != 64);
}

char *sub_1D0C5F164(char *result, uint64_t a2, long long *a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  do
  {
    uint64_t v13 = result;
    int8x16x2_t v23 = vld2q_s8(v13);
    _X10 = (char *)&v13[a2];
    uint64_t v15 = result + 32;
    int8x16x2_t v24 = vld2q_s8(v15);
    __asm { PRFM            #0, [X0,#0x40] }
    int8x8_t v21 = _X10;
    int8x16x2_t v25 = vld2q_s8(v21);
    v21 += 32;
    int8x16x2_t v26 = vld2q_s8(v21);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5 = v24.val[0].i8[15];
    a5[1] = v24.val[1].i8[15];
    a5[2] = v26.val[0].i8[15];
    a5[3] = v26.val[1].i8[15];
    v23.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v23.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v23.val[0], 3uLL)));
    v23.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v23.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v23.val[1], 3uLL)));
    v24.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v24.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v24.val[0], 3uLL)));
    v24.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v24.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v24.val[1], 3uLL)));
    v25.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v25.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v25.val[0], 3uLL)));
    v25.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v25.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v25.val[1], 3uLL)));
    vst2q_s8(result, v23);
    uint64_t v11 = 2 * a2;
    result += v11;
    vst2q_s8(v15, v24);
    v26.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v26.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v26.val[0], 3uLL)));
    vst2q_s8(_X10, v25);
    v26.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v26.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v26.val[1], 3uLL)));
    vst2q_s8(v21, v26);
    v12 -= 2;
    a5 += 4;
  }
  while (v12 > 2);
  return result;
}

void sub_1D0C5F238(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(unsigned __int8 *)(a2 - 1);
  int8x16_t v6 = *(int8x16_t *)(a2 + 32);
  unint64_t v7 = vextq_s8(v6, v6, 8uLL).u64[0];
  int16x8_t v8 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_lane_s8(*(int8x8_t *)v6.i8, 0));
  int8x8_t v9 = (int8x8_t)vshrd_n_u64(v6.u64[0], 8uLL);
  uint64_t v10 = (uint64_t)vqmovun_s16(vsraq_n_s16(v8, (int16x8_t)vsubl_u8(*(uint8x8_t *)a2, (uint8x8_t)vdup_n_s8(v5)), 1uLL));
  int16x8_t v11 = vshrq_n_s16((int16x8_t)vsubl_high_u8(*(uint8x16_t *)a2, (uint8x16_t)vdupq_n_s8(v5)), 1uLL);
  int8x8_t v16 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x38uLL), v9, 7uLL);
  int8x8_t v17 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x30uLL), v9, 7uLL);
  int8x8_t v18 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x28uLL), v9, 7uLL);
  int8x8_t v19 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x20uLL), v9, 7uLL);
  int8x8_t v20 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x18uLL), v9, 7uLL);
  int8x8_t v21 = vext_s8((int8x8_t)vshld_n_s64(v10, 0x10uLL), v9, 7uLL);
  int8x8_t v22 = vext_s8((int8x8_t)vshld_n_s64(v10, 8uLL), v9, 7uLL);
  int8x8_t v23 = vext_s8((int8x8_t)v10, v9, 7uLL);
  do
  {
    *(int8x8_t *)&long long v12 = *(int8x8_t *)((char *)&v16 + v4);
    *((void *)&v12 + 1) = v7;
    *a4 = v12;
    a4 = (_OWORD *)((char *)a4 + a3);
    v4 += 8;
  }
  while (v4 != 64);
  uint64_t v13 = 0;
  uint64_t v14 = (uint64_t)vqmovun_s16(vaddq_s16(v11, v8));
  int8x8_t v16 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x38uLL), v9, 7uLL);
  int8x8_t v17 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x30uLL), v9, 7uLL);
  int8x8_t v18 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x28uLL), v9, 7uLL);
  int8x8_t v19 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x20uLL), v9, 7uLL);
  int8x8_t v20 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x18uLL), v9, 7uLL);
  int8x8_t v21 = vext_s8((int8x8_t)vshld_n_s64(v14, 0x10uLL), v9, 7uLL);
  int8x8_t v22 = vext_s8((int8x8_t)vshld_n_s64(v14, 8uLL), v9, 7uLL);
  int8x8_t v23 = vext_s8((int8x8_t)v14, v9, 7uLL);
  do
  {
    *(int8x8_t *)&long long v15 = *(int8x8_t *)((char *)&v16 + v13);
    *((void *)&v15 + 1) = v7;
    *a4 = v15;
    a4 = (_OWORD *)((char *)a4 + a3);
    v13 += 8;
  }
  while (v13 != 64);
}

int16x4_t *sub_1D0C5F3A4(int16x4_t *result)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = (int16x8_t *)&result[16];
  unint64_t v2 = -8;
  do
  {
    int16x8_t v3 = v1[-8];
    int16x8_t v4 = v1[-4];
    int16x8_t v5 = v1[4];
    int32x4_t v6 = (int32x4_t)vtrn1q_s16(v3, v4);
    int32x4_t v7 = (int32x4_t)vtrn2q_s16(v3, v4);
    int32x4_t v8 = (int32x4_t)vtrn1q_s16(*v1, v5);
    int32x4_t v9 = (int32x4_t)vtrn2q_s16(*v1, v5);
    v1[-8] = (int16x8_t)vtrn1q_s32(v6, v8);
    v1[-4] = (int16x8_t)vtrn1q_s32(v7, v9);
    *(int32x4_t *)unint64_t v1 = vtrn2q_s32(v6, v8);
    v1[4] = (int16x8_t)vtrn2q_s32(v7, v9);
    v2 += 8;
    ++v1;
  }
  while (v2 < 0x18);
  unint64_t v10 = 0;
  int16x4_t v11 = result[1];
  int16x4_t v12 = result[2];
  int16x4_t v13 = result[3];
  int16x4_t v15 = result[4];
  int16x4_t v14 = result[5];
  int16x4_t v16 = result[6];
  int16x4_t v17 = result[7];
  int32x4_t v18 = vshll_n_s16(*result, 6uLL);
  int32x4_t v19 = vmlal_s16(v18, v15, (int16x4_t)0x40004000400040);
  int32x4_t v20 = vmlsl_s16(v18, v15, (int16x4_t)0x40004000400040);
  int32x4_t v21 = vmlal_s16(vmull_s16(v16, (int16x4_t)0x24002400240024), v12, (int16x4_t)0x53005300530053);
  int32x4_t v22 = vmlal_s16(vmull_s16(v16, (int16x4_t)0x52005200520052), v12, (int16x4_t)0x24002400240024);
  int32x4_t v23 = vaddq_s32(v21, v19);
  int32x4_t v24 = vsubq_s32(v19, v21);
  int32x4_t v25 = vaddq_s32(v22, v20);
  int32x4_t v26 = vsubq_s32(v20, v22);
  int32x4_t v27 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v13, (int16x4_t)0x4B004B004B004BLL), v11, (int16x4_t)0x59005900590059), v14, (int16x4_t)0x32003200320032), v17, (int16x4_t)0x12001200120012);
  int32x4_t v28 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v13, (int16x4_t)0x31003100310031), v11, (int16x4_t)0x12001200120012), v14, (int16x4_t)0x4B004B004B004BLL), v17, (int16x4_t)0x58005800580058);
  int32x4_t v29 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v13, (int16x4_t)0x11001100110011), v11, (int16x4_t)0x4B004B004B004BLL), v14, (int16x4_t)0x58005800580058), v17, (int16x4_t)0x31003100310031);
  v66[0] = vaddq_s32(v27, v23);
  v66[1] = vaddq_s32(v28, v24);
  int32x4_t v30 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v13, (int16x4_t)0x58005800580058), v11, (int16x4_t)0x32003200320032), v14, (int16x4_t)0x12001200120012), v17, (int16x4_t)0x4B004B004B004BLL);
  v66[2] = vaddq_s32(v29, v25);
  v66[3] = vaddq_s32(v30, v26);
  v66[4] = vsubq_s32(v23, v27);
  v66[5] = vsubq_s32(v24, v28);
  v66[6] = vsubq_s32(v25, v29);
  v66[7] = vsubq_s32(v26, v30);
  int16x4_t v31 = result[16];
  int16x4_t v32 = result[17];
  int16x4_t v33 = result[18];
  int16x4_t v34 = result[19];
  int16x4_t v35 = result[20];
  int16x4_t v36 = result[21];
  int16x4_t v37 = result[22];
  int16x4_t v38 = result[23];
  do
  {
    int16x8_t v39 = (int32x4_t *)&v66[v10 / 8];
    int32x4_t v40 = (int32x4_t)v66[v10 / 8];
    int16x8_t v41 = *(int16x8_t *)&aZwpf9[v10];
    int32x4_t v42 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v32, *(int16x4_t *)v41.i8, 1), v31, *(int16x4_t *)v41.i8, 0), v33, *(int16x4_t *)v41.i8, 2), v34, *(int16x4_t *)v41.i8, 3), v35, v41, 4), v36, v41, 5), v37,
              v41,
              6),
            v38,
            v41,
            7);
    *int16x8_t v39 = vaddq_s32(v42, v40);
    v39[8] = vsubq_s32(v40, v42);
    v10 += 8;
  }
  while (v10 != 64);
  uint64_t v43 = 0;
  int16x4_t v44 = result[8];
  int16x4_t v45 = result[9];
  int16x4_t v46 = result[24];
  int16x4_t v47 = result[25];
  int16x4_t v48 = result[10];
  int16x4_t v49 = result[11];
  int16x4_t v50 = result[26];
  int16x4_t v51 = result[27];
  int16x4_t v52 = result[12];
  int16x4_t v53 = result[13];
  int16x4_t v54 = result[28];
  int16x4_t v55 = result[29];
  int v56 = aZzxurnic6;
  int16x4_t v57 = result[14];
  int16x4_t v58 = result[15];
  int16x4_t v59 = result[30];
  int16x4_t v60 = result[31];
  do
  {
    int16x8_t v61 = *(int16x8_t *)v56;
    int16x8_t v62 = *((int16x8_t *)v56 + 1);
    v56 += 16;
    int32x4_t v63 = (int32x4_t)v66[byte_1D0DAEDC0[v43]];
    int32x4_t v64 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v46, *(int16x4_t *)v61.i8, 1), v44, *(int16x4_t *)v61.i8, 0), v45,
                                      *(int16x4_t *)v61.i8,
                                      2),
                                    v47,
                                    *(int16x4_t *)v61.i8,
                                    3),
                                  v48,
                                  v61,
                                  4),
                                v50,
                                v61,
                                5),
                              v49,
                              v61,
                              6),
                            v51,
                            v61,
                            7),
                          v52,
                          *(int16x4_t *)v62.i8,
                          0),
                        v54,
                        *(int16x4_t *)v62.i8,
                        1),
                      v53,
                      *(int16x4_t *)v62.i8,
                      2),
                    v55,
                    *(int16x4_t *)v62.i8,
                    3),
                  v57,
                  v62,
                  4),
                v59,
                v62,
                5),
              v58,
              v62,
              6),
            v60,
            v62,
            7);
    int v65 = 124 - 4 * *((unsigned __int8 *)&unk_1D0DAEAE0 + v43 + 80);
    result[*((unsigned __int8 *)&unk_1D0DAEAE0 + v43 + 80)] = vqrshrn_n_s32(vaddq_s32(v64, v63), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * v65) = vqrshrn_n_s32(vsubq_s32(v63, v64), 0xCuLL);
    ++v43;
  }
  while (v43 != 16);
  return result;
}

int16x4_t *sub_1D0C5F65C(int16x4_t *result)
{
  unint64_t v1 = 0;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int16x4_t v2 = result[32];
  int16x4_t v3 = result[64];
  int16x4_t v4 = result[96];
  int16x4_t v5 = result[128];
  int16x4_t v6 = result[160];
  int16x4_t v7 = result[192];
  int16x4_t v8 = result[224];
  int32x4_t v9 = vshll_n_s16(*result, 6uLL);
  int32x4_t v10 = vmlal_s16(v9, v5, (int16x4_t)0x40004000400040);
  int32x4_t v11 = vmlsl_s16(v9, v5, (int16x4_t)0x40004000400040);
  int32x4_t v12 = vmlal_s16(vmull_s16(v7, (int16x4_t)0x24002400240024), v3, (int16x4_t)0x53005300530053);
  int32x4_t v13 = vmlal_s16(vmull_s16(v7, (int16x4_t)0x52005200520052), v3, (int16x4_t)0x24002400240024);
  int32x4_t v14 = vaddq_s32(v12, v10);
  int32x4_t v15 = vsubq_s32(v10, v12);
  int32x4_t v16 = vaddq_s32(v13, v11);
  int32x4_t v17 = vsubq_s32(v11, v13);
  int32x4_t v18 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v4, (int16x4_t)0x4B004B004B004BLL), v2, (int16x4_t)0x59005900590059), v6, (int16x4_t)0x32003200320032), v8, (int16x4_t)0x12001200120012);
  int32x4_t v19 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v4, (int16x4_t)0x31003100310031), v2, (int16x4_t)0x12001200120012), v6, (int16x4_t)0x4B004B004B004BLL), v8, (int16x4_t)0x58005800580058);
  int32x4_t v20 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v4, (int16x4_t)0x11001100110011), v2, (int16x4_t)0x4B004B004B004BLL), v6, (int16x4_t)0x58005800580058), v8, (int16x4_t)0x31003100310031);
  v57[0] = vaddq_s32(v18, v14);
  v57[1] = vaddq_s32(v19, v15);
  int32x4_t v21 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v4, (int16x4_t)0x58005800580058), v2, (int16x4_t)0x32003200320032), v6, (int16x4_t)0x12001200120012), v8, (int16x4_t)0x4B004B004B004BLL);
  v57[2] = vaddq_s32(v20, v16);
  v57[3] = vaddq_s32(v21, v17);
  v57[4] = vsubq_s32(v14, v18);
  v57[5] = vsubq_s32(v15, v19);
  v57[6] = vsubq_s32(v16, v20);
  v57[7] = vsubq_s32(v17, v21);
  int16x4_t v22 = result[16];
  int16x4_t v23 = result[48];
  int16x4_t v24 = result[80];
  int16x4_t v25 = result[112];
  int16x4_t v26 = result[144];
  int16x4_t v27 = result[176];
  int16x4_t v28 = result[208];
  int16x4_t v29 = result[240];
  do
  {
    int32x4_t v30 = (int32x4_t *)&v57[v1 / 8];
    int32x4_t v31 = (int32x4_t)v57[v1 / 8];
    int16x8_t v32 = *(int16x8_t *)&aZwpf9[v1];
    int32x4_t v33 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v23, *(int16x4_t *)v32.i8, 1), v22, *(int16x4_t *)v32.i8, 0), v24, *(int16x4_t *)v32.i8, 2), v25, *(int16x4_t *)v32.i8, 3), v26, v32, 4), v27, v32, 5), v28,
              v32,
              6),
            v29,
            v32,
            7);
    *int32x4_t v30 = vaddq_s32(v33, v31);
    v30[8] = vsubq_s32(v31, v33);
    v1 += 8;
  }
  while (v1 != 64);
  uint64_t v34 = 0;
  int16x4_t v35 = result[8];
  int16x4_t v36 = result[24];
  int16x4_t v37 = result[40];
  int16x4_t v38 = result[56];
  int16x4_t v39 = result[72];
  int16x4_t v40 = result[88];
  int16x4_t v41 = result[104];
  int16x4_t v42 = result[120];
  int16x4_t v43 = result[136];
  int16x4_t v44 = result[152];
  int16x4_t v45 = result[168];
  int16x4_t v46 = result[184];
  int16x4_t v47 = aZzxurnic6;
  int16x4_t v48 = result[200];
  int16x4_t v49 = result[216];
  int16x4_t v50 = result[232];
  int16x4_t v51 = result[248];
  do
  {
    int16x8_t v52 = *(int16x8_t *)v47;
    int16x8_t v53 = *((int16x8_t *)v47 + 1);
    v47 += 16;
    int32x4_t v54 = (int32x4_t)v57[byte_1D0DAEDC0[v34]];
    int32x4_t v55 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v36, *(int16x4_t *)v52.i8, 1), v35, *(int16x4_t *)v52.i8, 0), v37,
                                      *(int16x4_t *)v52.i8,
                                      2),
                                    v38,
                                    *(int16x4_t *)v52.i8,
                                    3),
                                  v39,
                                  v52,
                                  4),
                                v40,
                                v52,
                                5),
                              v41,
                              v52,
                              6),
                            v42,
                            v52,
                            7),
                          v43,
                          *(int16x4_t *)v53.i8,
                          0),
                        v44,
                        *(int16x4_t *)v53.i8,
                        1),
                      v45,
                      *(int16x4_t *)v53.i8,
                      2),
                    v46,
                    *(int16x4_t *)v53.i8,
                    3),
                  v48,
                  v53,
                  4),
                v49,
                v53,
                5),
              v50,
              v53,
              6),
            v51,
            v53,
            7);
    int v56 = 992 - 4 * *((unsigned __int8 *)&unk_1D0DAEAE0 + v34 + 64);
    result[*((unsigned __int8 *)&unk_1D0DAEAE0 + v34 + 64)] = vqrshrn_n_s32(vaddq_s32(v55, v54), 7uLL);
    *(int16x4_t *)((char *)result + 2 * v56) = vqrshrn_n_s32(vsubq_s32(v54, v55), 7uLL);
    ++v34;
  }
  while (v34 != 16);
  return result;
}

__n128 sub_1D0C5F8FC(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2 = a1[-1].u8[15];
  int8x8_t v3 = vdup_n_s8(v2);
  *(unsigned char *)(a2 - 1) = (a1->u8[0] + 2 * v2 + a1[4].u8[0] + 2) >> 2;
  int8x16_t v4 = *a1;
  int8x16_t v5 = a1[1];
  int8x16_t v7 = a1[2];
  int8x16_t v6 = a1[3];
  uint8x8_t v8 = (uint8x8_t)vextq_s8(v4, v4, 8uLL).u64[0];
  uint8x8_t v9 = (uint8x8_t)vextq_s8(v5, v5, 8uLL).u64[0];
  uint8x8_t v10 = (uint8x8_t)vextq_s8(v7, v7, 8uLL).u64[0];
  int8x16_t v11 = vextq_s8(v6, v6, 8uLL);
  uint8x8_t v12 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 9uLL));
  uint8x8_t v13 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 9uLL));
  uint8x8_t v14 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v5, v7, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 1uLL));
  uint8x8_t v15 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v7, v6, 9uLL));
  uint8x8_t v16 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v7, v6, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 1uLL));
  *(uint8x8_t *)v4.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)a1->i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 1uLL)), *(uint8x8_t *)a1->i8);
  *(uint8x8_t *)v5.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*a1, v5, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 1uLL)), *(uint8x8_t *)v5.i8);
  *(uint8x8_t *)v7.i8 = vrhadd_u8(v14, *(uint8x8_t *)v7.i8);
  *(uint8x8_t *)&long long v17 = vrhadd_u8(v16, *(uint8x8_t *)v6.i8);
  v4.u64[1] = (unint64_t)vrhadd_u8(v12, v8);
  v5.u64[1] = (unint64_t)vrhadd_u8(v13, v9);
  *(int8x16_t *)a2 = v4;
  *(int8x16_t *)(a2 + 16) = v5;
  v7.u64[1] = (unint64_t)vrhadd_u8(v15, v10);
  *((uint8x8_t *)&v17 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v6, v11, 9uLL)), *(uint8x8_t *)v11.i8);
  *(int8x16_t *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v17;
  *(unsigned char *)(a2 + 63) = v6.i8[15];
  int8x16_t v18 = a1[4];
  int8x16_t v19 = a1[5];
  int8x16_t v21 = a1[6];
  int8x16_t v20 = a1[7];
  uint8x8_t v22 = (uint8x8_t)vextq_s8(v19, v19, 8uLL).u64[0];
  uint8x8_t v23 = (uint8x8_t)vextq_s8(v21, v21, 8uLL).u64[0];
  int8x16_t v24 = vextq_s8(v20, v20, 8uLL);
  uint8x8_t v25 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v19, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 1uLL));
  uint8x8_t v26 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v19, v21, 9uLL));
  uint8x8_t v27 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v19, v21, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 1uLL));
  uint8x8_t v28 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v20, 9uLL));
  uint8x8_t v29 = vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v20, 0xFuLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 1uLL));
  result.n128_u64[0] = (unint64_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v3, *(int8x8_t *)v18.i8, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 1uLL)), *(uint8x8_t *)v18.i8);
  *(uint8x8_t *)v18.i8 = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v19, 9uLL)), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  *(uint8x8_t *)v19.i8 = vrhadd_u8(v25, *(uint8x8_t *)v19.i8);
  uint8x8_t v30 = vrhadd_u8(v26, v22);
  *(uint8x8_t *)v21.i8 = vrhadd_u8(v27, *(uint8x8_t *)v21.i8);
  uint8x8_t v31 = vrhadd_u8(v28, v23);
  *(uint8x8_t *)&long long v32 = vrhadd_u8(v29, *(uint8x8_t *)v20.i8);
  result.n128_u64[1] = v18.i64[0];
  v19.u64[1] = (unint64_t)v30;
  v21.u64[1] = (unint64_t)v31;
  *((uint8x8_t *)&v32 + 1) = vrhadd_u8(vhadd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 7uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v24, 9uLL)), *(uint8x8_t *)v24.i8);
  *(__n128 *)(a2 + 64) = result;
  *(int8x16_t *)(a2 + 80) = v19;
  *(int8x16_t *)(a2 + 96) = v21;
  *(_OWORD *)(a2 + 112) = v32;
  *(unsigned char *)(a2 + 127) = v20.i8[15];
  return result;
}

uint8x16_t *sub_1D0C5FA94(uint8x16_t *result, uint64_t a2, int16x4_t *a3, int a4, int a5)
{
  int8x16_t v6 = a3;
  uint8x8_t v8 = result;
  if (a5 == 1)
  {
    int16x8_t v9 = vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    int16x8_t v10 = vnegq_s16(v9);
    uint8x16_t v11 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v9), v9);
    uint8x16_t v12 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v10), v10);
    unsigned int v13 = -2;
    do
    {
      uint8x8_t v14 = (uint8x16_t *)((char *)v8 + a2);
      uint8x16_t v15 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v8 + a2), v11), v12);
      uint8x16_t v16 = vqsubq_u8(vqaddq_u8(v8[1], v11), v12);
      uint8x16_t v17 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)&v8[1] + a2), v11), v12);
      *uint8x8_t v8 = vqsubq_u8(vqaddq_u8(*v8, v11), v12);
      uint8x16_t *v14 = v15;
      v8[1] = v16;
      v14[1] = v17;
      uint8x8_t v8 = (uint8x16_t *)((char *)v8 + 2 * a2);
      v13 += 2;
    }
    while (v13 < 0x1E);
    if (a4)
    {
      unsigned int v18 = -16;
      do
      {
        _OWORD *v6 = v9;
        v6[1] = v9;
        v6 += 2;
        v18 += 16;
      }
      while (v18 < 0x3F0);
    }
  }
  else
  {
    __n128 result = (uint8x16_t *)sub_1D0C522D0(a3, a5);
    uint64_t v19 = 0;
    char v20 = 1;
    do
    {
      char v21 = v20;
      uint8x8_t v22 = &v8[(unint64_t)v19 / 2];
      unsigned int v23 = -4;
      int8x16_t v24 = (int16x8_t *)&v6[v19];
      do
      {
        int16x8_t v25 = v24[1];
        int16x8_t v26 = v24[4];
        int16x8_t v27 = v24[5];
        int16x8_t v28 = v24[8];
        int16x8_t v29 = v24[9];
        int32x4_t v30 = (int32x4_t)vtrn1q_s16(*v24, v26);
        int32x4_t v31 = (int32x4_t)vtrn2q_s16(*v24, v26);
        int16x8_t v32 = v24[12];
        int16x8_t v33 = v24[13];
        int32x4_t v34 = (int32x4_t)vtrn1q_s16(v28, v32);
        int32x4_t v35 = (int32x4_t)vtrn2q_s16(v28, v32);
        int16x8_t v36 = (int16x8_t)vtrn1q_s32(v30, v34);
        int16x8_t v37 = (int16x8_t)vtrn2q_s32(v30, v34);
        int16x8_t v38 = (int16x8_t)vtrn1q_s32(v31, v35);
        int16x8_t v39 = (int16x8_t)vtrn2q_s32(v31, v35);
        int32x4_t v40 = (int32x4_t)vtrn1q_s16(v25, v27);
        int32x4_t v41 = (int32x4_t)vtrn2q_s16(v25, v27);
        int32x4_t v42 = (int32x4_t)vtrn1q_s16(v29, v33);
        int32x4_t v43 = (int32x4_t)vtrn2q_s16(v29, v33);
        int16x8_t v44 = (int16x8_t)vtrn1q_s32(v40, v42);
        int16x8_t v45 = (int16x8_t)vtrn2q_s32(v40, v42);
        int16x8_t v46 = (int16x8_t)vtrn1q_s32(v41, v43);
        int16x8_t v47 = (int16x8_t)vtrn2q_s32(v41, v43);
        if (a4)
        {
          int16x8_t v48 = v36;
          int16x8_t v49 = v44;
          int16x8_t v50 = v38;
          int16x8_t v51 = v46;
          int16x8_t v52 = v37;
          int16x8_t v53 = v45;
          int16x8_t v54 = v39;
          int16x8_t v55 = v47;
        }
        else
        {
          int16x8_t v48 = 0uLL;
          int16x8_t v49 = 0uLL;
          int16x8_t v50 = 0uLL;
          int16x8_t v51 = 0uLL;
          int16x8_t v52 = 0uLL;
          int16x8_t v53 = 0uLL;
          int16x8_t v54 = 0uLL;
          int16x8_t v55 = 0uLL;
        }
        uint8x16_t v56 = *(uint8x16_t *)((char *)v22 + a2);
        uint8x16_t v57 = *v22;
        uint8x16_t v58 = *(uint8x16_t *)((char *)v22 + 2 * a2);
        uint8x16_t v59 = *(uint8x16_t *)((char *)v22 + 3 * a2);
        *int8x16_t v24 = v48;
        v24[1] = v49;
        v24[4] = v50;
        v24[5] = v51;
        v24[8] = v52;
        v24[9] = v53;
        v24[12] = v54;
        v24[13] = v55;
        *(int8x16_t *)uint8x8_t v22 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v36, (int16x8_t)vmovl_u8(*(uint8x8_t *)v57.i8))), vqaddq_s16(v44, (int16x8_t)vmovl_high_u8(v57)));
        *(int8x16_t *)((char *)v22 + a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v38, (int16x8_t)vmovl_u8(*(uint8x8_t *)v56.i8))), vqaddq_s16(v46, (int16x8_t)vmovl_high_u8(v56)));
        *(int8x16_t *)((char *)v22 + 2 * a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v37, (int16x8_t)vmovl_u8(*(uint8x8_t *)v58.i8))), vqaddq_s16(v45, (int16x8_t)vmovl_high_u8(v58)));
        *(int8x16_t *)((char *)v22 + 3 * a2) = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v39, (int16x8_t)vmovl_u8(*(uint8x8_t *)v59.i8))), vqaddq_s16(v47, (int16x8_t)vmovl_high_u8(v59)));
        uint8x8_t v22 = (uint8x16_t *)((char *)v22 + 4 * a2);
        v23 += 4;
        v24 += 16;
      }
      while (v23 < 0x1C);
      char v20 = 0;
      uint64_t v19 = 2;
    }
    while ((v21 & 1) != 0);
  }
  return result;
}

int16x8_t sub_1D0C5FCE0(uint8x8_t *a1, uint64_t a2, int16x4_t *a3, const __int16 *a4, int16x4_t *a5, int *a6)
{
  int8x16_t v7 = (int16x4_t *)a4;
  uint8x8_t v8 = a3;
  int16x8_t v10 = a1;
  int v11 = *a6;
  if ((*a6 & 0xFFFEFFFE) != 0)
  {
    if ((__int16)v11 < 1)
    {
      if ((v11 & 0x8000) != 0)
      {
        unsigned int v39 = 0;
        int32x4_t v40 = a3;
        do
        {
          uint64_t v41 = 0;
          char v42 = 1;
          do
          {
            char v43 = v42;
            int16x8_t v44 = (int16x8_t *)&v40[v41];
            int16x8_t v45 = v44[2];
            int16x8_t v46 = v44[4];
            int16x8_t v47 = v44[6];
            int32x4_t v48 = (int32x4_t)vtrn1q_s16(*v44, v45);
            int32x4_t v49 = (int32x4_t)vtrn2q_s16(*v44, v45);
            int32x4_t v50 = (int32x4_t)vtrn1q_s16(v46, v47);
            int32x4_t v51 = (int32x4_t)vtrn2q_s16(v46, v47);
            *(int32x4_t *)int16x8_t v44 = vtrn1q_s32(v48, v50);
            v44[2] = (int16x8_t)vtrn1q_s32(v49, v51);
            v44[4] = (int16x8_t)vtrn2q_s32(v48, v50);
            v44[6] = (int16x8_t)vtrn2q_s32(v49, v51);
            uint64_t v41 = 2;
            char v42 = 0;
          }
          while ((v43 & 1) != 0);
          v40 += 16;
          BOOL v52 = v39 >= 0xC;
          v39 += 4;
        }
        while (!v52);
      }
    }
    else
    {
      sub_1D0C5AD38(a3, (unsigned __int16)*a6);
    }
    int v53 = *((unsigned __int16 *)a6 + 1);
    if (*((__int16 *)a6 + 1) < 1)
    {
      if ((v53 & 0x8000) != 0)
      {
        unsigned int v54 = 0;
        int16x8_t v55 = v7;
        do
        {
          uint64_t v56 = 0;
          char v57 = 1;
          do
          {
            char v58 = v57;
            uint8x16_t v59 = (int16x8_t *)&v55[v56];
            int16x8_t v60 = v59[2];
            int16x8_t v61 = v59[4];
            int16x8_t v62 = v59[6];
            int32x4_t v63 = (int32x4_t)vtrn1q_s16(*v59, v60);
            int32x4_t v64 = (int32x4_t)vtrn2q_s16(*v59, v60);
            int32x4_t v65 = (int32x4_t)vtrn1q_s16(v61, v62);
            int32x4_t v66 = (int32x4_t)vtrn2q_s16(v61, v62);
            *(int32x4_t *)uint8x16_t v59 = vtrn1q_s32(v63, v65);
            v59[2] = (int16x8_t)vtrn1q_s32(v64, v66);
            v59[4] = (int16x8_t)vtrn2q_s32(v63, v65);
            v59[6] = (int16x8_t)vtrn2q_s32(v64, v66);
            uint64_t v56 = 2;
            char v57 = 0;
          }
          while ((v58 & 1) != 0);
          v55 += 16;
          BOOL v52 = v54 >= 0xC;
          v54 += 4;
        }
        while (!v52);
      }
    }
    else
    {
      sub_1D0C5AD38(v7, v53);
    }
    unsigned int v67 = 0;
    int16x8_t result = 0uLL;
    v68.i64[0] = 0x800000008;
    v68.i64[1] = 0x800000008;
    do
    {
      uint64_t v69 = 0;
      char v70 = 1;
      do
      {
        char v71 = v70;
        unint64_t v72 = (int16x8_t *)&v8[v69];
        int16x8_t v73 = v72[2];
        int16x8_t v74 = v72[4];
        int16x8_t v75 = v72[6];
        unsigned __int8 v76 = (int16x8_t *)&v7[v69];
        int16x8_t v77 = *v76;
        int16x8_t v78 = v76[2];
        int16x8_t v79 = v76[4];
        int32x4_t v80 = (int32x4_t)vtrn1q_s16(*v72, v73);
        int32x4_t v81 = (int32x4_t)vtrn2q_s16(*v72, v73);
        int32x4_t v82 = (int32x4_t)vtrn1q_s16(v74, v75);
        int32x4_t v83 = (int32x4_t)vtrn2q_s16(v74, v75);
        int16x8_t v84 = v76[6];
        *unint64_t v72 = 0uLL;
        v72[2] = 0uLL;
        v72[4] = 0uLL;
        v72[6] = 0uLL;
        *unsigned __int8 v76 = 0uLL;
        v76[2] = 0uLL;
        v76[4] = 0uLL;
        v76[6] = 0uLL;
        int16x8_t v85 = (int16x8_t)vtrn1q_s32(v80, v82);
        int16x8_t v86 = (int16x8_t)vtrn2q_s32(v80, v82);
        int16x8_t v87 = (int16x8_t)vtrn1q_s32(v81, v83);
        int16x8_t v88 = (int16x8_t)vtrn2q_s32(v81, v83);
        int32x4_t v89 = (int32x4_t)vtrn1q_s16(v77, v78);
        int32x4_t v90 = (int32x4_t)vtrn2q_s16(v77, v78);
        int32x4_t v91 = (int32x4_t)vtrn1q_s16(v79, v84);
        int32x4_t v92 = (int32x4_t)vtrn2q_s16(v79, v84);
        int16x8_t v93 = (int16x8_t)vtrn1q_s32(v89, v91);
        int16x8_t v94 = (int16x8_t)vtrn2q_s32(v89, v91);
        int16x8_t v95 = (int16x8_t)vtrn1q_s32(v90, v92);
        int16x8_t v96 = (int16x8_t)vtrn2q_s32(v90, v92);
        if (a5)
        {
          int16x4_t v97 = *a5;
          int16x8_t v98 = v72[-32];
          int16x8_t v99 = v72[-30];
          v72[-32] = 0uLL;
          v72[-30] = 0uLL;
          int32x4_t v100 = vdupq_laneq_s32(vsubw_s16(v68, v97), 2);
          int32x4_t v101 = vshlq_s32(vmovl_s16(*(int16x4_t *)v98.i8), v100);
          int32x4_t v102 = vshlq_s32(vmovl_high_s16(v98), v100);
          int32x4_t v103 = vshlq_s32(vmovl_s16(*(int16x4_t *)v99.i8), v100);
          int32x4_t v104 = vshlq_s32(vmovl_high_s16(v99), v100);
          int32x4_t v105 = vmovl_s16(vdup_lane_s16(v97, 0));
          int32x4_t v106 = vmovl_s16(vdup_lane_s16(v97, 1));
          int16x8_t v85 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v101, v105), 3uLL), vmulq_s32(v102, v105), 3uLL), v85);
          int16x8_t v93 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v101, v106), 3uLL), vmulq_s32(v102, v106), 3uLL), v93);
          int16x8_t v87 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v103, v105), 3uLL), vmulq_s32(v104, v105), 3uLL), v87);
          int16x8_t v95 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v103, v106), 3uLL), vmulq_s32(v104, v106), 3uLL), v95);
          int v107 = v72 - 28;
          *(int16x4_t *)v106.i8 = *a5;
          int16x8_t v108 = v72[-28];
          unsigned int v109 = v72 - 26;
          int16x8_t v110 = *v109;
          *int v107 = 0uLL;
          int16x8_t *v109 = 0uLL;
          int32x4_t v111 = vdupq_laneq_s32(vsubw_s16(v68, *(int16x4_t *)v106.i8), 2);
          int32x4_t v112 = vshlq_s32(vmovl_s16(*(int16x4_t *)v108.i8), v111);
          int32x4_t v113 = vshlq_s32(vmovl_high_s16(v108), v111);
          int32x4_t v114 = vshlq_s32(vmovl_s16(*(int16x4_t *)v110.i8), v111);
          int32x4_t v115 = vshlq_s32(vmovl_high_s16(v110), v111);
          int32x4_t v116 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v106.i8, 0));
          int32x4_t v117 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v106.i8, 1));
          int16x8_t v86 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v112, v116), 3uLL), vmulq_s32(v113, v116), 3uLL), v86);
          int16x8_t v94 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v112, v117), 3uLL), vmulq_s32(v113, v117), 3uLL), v94);
          int16x8_t v88 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v114, v116), 3uLL), vmulq_s32(v115, v116), 3uLL), v88);
          int16x8_t v96 = vaddq_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v114, v117), 3uLL), vmulq_s32(v115, v117), 3uLL), v96);
        }
        char v70 = 0;
        int16x8_t v118 = vzip1q_s16(v85, v93);
        int16x8_t v119 = vzip2q_s16(v85, v93);
        int16x8_t v120 = vzip1q_s16(v87, v95);
        int16x8_t v121 = vzip2q_s16(v87, v95);
        int16x8_t v122 = vzip1q_s16(v86, v94);
        int16x8_t v123 = vzip2q_s16(v86, v94);
        int16x8_t v124 = vzip1q_s16(v88, v96);
        int v125 = &v10[v69];
        uint8x16_t v126 = *(uint8x16_t *)&v125->i8[3 * a2];
        int16x8_t v127 = vqaddq_s16(vzip2q_s16(v88, v96), (int16x8_t)vmovl_high_u8(v126));
        int8x16_t v128 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v118, (int16x8_t)vmovl_u8(*v125))), vqaddq_s16(v119, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v125->i8)));
        int8x16_t v129 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v120, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v125 + a2)))), vqaddq_s16(v121, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&v125->i8[a2])));
        int8x16_t v130 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v122, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v125 + 2 * a2)))), vqaddq_s16(v123, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&v125->i8[2 * a2])));
        *(int8x16_t *)v125->i8 = v128;
        *(int8x16_t *)&v125->i8[a2] = v129;
        *(int8x16_t *)&v125->i8[2 * a2] = v130;
        *(int8x16_t *)&v125->i8[3 * a2] = vqmovun_high_s16(vqmovun_s16(vqaddq_s16(v124, (int16x8_t)vmovl_u8(*(uint8x8_t *)v126.i8))), v127);
        uint64_t v69 = 2;
      }
      while ((v71 & 1) != 0);
      int16x8_t v10 = (uint8x8_t *)((char *)v10 + 4 * a2);
      v8 += 16;
      v7 += 16;
      BOOL v52 = v67 >= 0xC;
      v67 += 4;
    }
    while (!v52);
  }
  else
  {
    int16x8_t v13 = vld1q_dup_s16((const __int16 *)a3);
    int16x8_t v14 = vld1q_dup_s16(a4);
    int16x8_t result = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v13, v14), 1uLL), 6uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    if (a5)
    {
      uint8x16_t v16 = a1 + 2;
      uint64_t v17 = 0x1FFFFFFFFFFFFFC0;
      v18.i64[0] = 0x800000008;
      v18.i64[1] = 0x800000008;
      do
      {
        uint64_t v19 = &a3[v17];
        int16x8_t v20 = *(int16x8_t *)a3[v17].i8;
        int16x8_t v21 = *(int16x8_t *)a3[v17 + 2].i8;
        int32x4_t v22 = vdupq_laneq_s32(vsubw_s16(v18, *a5), 2);
        int32x4_t v23 = vshlq_s32(vmovl_s16(*(int16x4_t *)v20.i8), v22);
        int32x4_t v24 = vshlq_s32(vmovl_high_s16(v20), v22);
        int32x4_t v25 = vshlq_s32(vmovl_s16(*(int16x4_t *)v21.i8), v22);
        int32x4_t v26 = vshlq_s32(vmovl_high_s16(v21), v22);
        int32x4_t v27 = vmovl_s16(vdup_lane_s16(*a5, 0));
        int16x8_t v28 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v23, v27), 3uLL), vmulq_s32(v24, v27), 3uLL);
        int16x8_t v29 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v25, v27), 3uLL), vmulq_s32(v26, v27), 3uLL);
        int32x4_t v30 = vmovl_s16(vdup_lane_s16(*a5, 1));
        int32x4_t v31 = vmulq_s32(v23, v30);
        int32x4_t v32 = vmulq_s32(v24, v30);
        int32x4_t v33 = vmulq_s32(v25, v30);
        int32x4_t v34 = vmulq_s32(v26, v30);
        int16x8_t v35 = vshrn_high_n_s32(vshrn_n_s32(v31, 3uLL), v32, 3uLL);
        int16x8_t v36 = vshrn_high_n_s32(vshrn_n_s32(v33, 3uLL), v34, 3uLL);
        *(_OWORD *)v19->i8 = 0uLL;
        *(_OWORD *)v19[2].i8 = 0uLL;
        int8x16_t v37 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(v16[-2]), vaddq_s16(vzip1q_s16(v28, v35), result))), vqaddq_s16((int16x8_t)vmovl_high_u8(*(uint8x16_t *)v16[-2].i8), vaddq_s16(vzip2q_s16(v28, v35), result)));
        int8x16_t v38 = vqmovun_high_s16(vqmovun_s16(vqaddq_s16((int16x8_t)vmovl_u8(*v16), vaddq_s16(vzip1q_s16(v29, v36), result))), vqaddq_s16((int16x8_t)vmovl_high_u8(*(uint8x16_t *)v16->i8), vaddq_s16(vzip2q_s16(v29, v36), result)));
        *(int8x16_t *)v16[-2].i8 = v37;
        *(int8x16_t *)v16->i8 = v38;
        uint8x16_t v16 = (uint8x8_t *)((char *)v16 + a2);
        v17 += 4;
      }
      while ((v17 * 8));
    }
    else
    {
      int16x8_t v131 = vnegq_s16(result);
      uint8x16_t v132 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(result), result);
      uint8x16_t v133 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v131), v131);
      unsigned int v134 = (uint8x16_t *)&a1[2];
      int v135 = 16;
      do
      {
        int16x8_t result = (int16x8_t)vqsubq_u8(vqaddq_u8(v134[-1], v132), v133);
        uint8x16_t v136 = vqsubq_u8(vqaddq_u8(*v134, v132), v133);
        v134[-1] = (uint8x16_t)result;
        *unsigned int v134 = v136;
        unsigned int v134 = (uint8x16_t *)((char *)v134 + a2);
        --v135;
      }
      while (v135);
    }
  }
  return result;
}

void sub_1D0C60288(uint64_t a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  v38[4] = *MEMORY[0x1E4F143B8];
  v38[0] = 0xC0C0D0D0E0E0F0FLL;
  v38[1] = 0x80809090A0A0B0BLL;
  v38[2] = 0x404050506060707;
  v38[3] = 0x10102020303;
  int8x16_t v5 = a2[1];
  int8x16_t v6 = a2[4];
  int8x16_t v7 = a2[5];
  v36[0] = *a2;
  v36[1] = v5;
  i16 = a2[2].i16;
  uint8x8_t v9 = (uint8x8_t)vld1_dup_s16(i16);
  uint8x8_t v37 = v9;
  uint8x8_t v10 = (uint8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
  uint8x8_t v11 = (uint8x8_t)vextq_s8(v7, v7, 8uLL).u64[0];
  uint8x16_t v12 = a2[6].i16;
  uint8x8_t v13 = (uint8x8_t)vld1_dup_s16(v12);
  v35[0] = vmull_u8((uint8x8_t)0x404030302020101, v9);
  v35[1] = vmull_u8((uint8x8_t)0x808070706060505, v9);
  v35[2] = vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v9);
  v35[3] = vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v9);
  int16x8_t v14 = (int16x8_t)vmull_u8((uint8x8_t)0x404030302020101, v13);
  int16x8_t v15 = (int16x8_t)vmull_u8((uint8x8_t)0x808070706060505, v13);
  int16x8_t v16 = (int16x8_t)vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v13);
  int16x8_t v17 = (int16x8_t)vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v13);
  do
  {
    int16x4_t v18 = *(int16x4_t *)((char *)v36 + 8 * v4);
    int32x4_t v19 = (int32x4_t)v35[v4];
    int16x8_t v20 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
    int16x8_t v21 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1);
    int16x8_t v22 = (int16x8_t)vdupq_laneq_s32(v19, 2);
    int16x8_t v23 = (int16x8_t)vdupq_laneq_s32(v19, 3);
    uint8x8_t v24 = (uint8x8_t)vdup_lane_s16(v18, 0);
    uint8x8_t v25 = (uint8x8_t)vdup_lane_s16(v18, 1);
    *(int16x4_t *)v19.i8 = vdup_lane_s16(v18, 2);
    uint8x8_t v26 = (uint8x8_t)vdup_lane_s16(v18, 3);
    int16x4_t v27 = (int16x4_t)v38[v4];
    uint8x8_t v28 = (uint8x8_t)vdup_lane_s16(v27, 0);
    uint8x8_t v29 = (uint8x8_t)vdup_lane_s16(v27, 1);
    uint8x8_t v30 = (uint8x8_t)vdup_lane_s16(v27, 2);
    uint8x8_t v31 = (uint8x8_t)vdup_lane_s16(v27, 3);
    *a4 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v24), v20), *(uint8x8_t *)v6.i8, v28), 5uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v15, (uint8x8_t)0x80809090A0A0B0BLL, v24), v20), v10, v28), 5uLL);
    int32x4_t v32 = (int8x16_t *)((char *)a4 + a3);
    *int32x4_t v32 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v14, (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v25), v21), *(uint8x8_t *)v6.i8, v29), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v21), (uint8x8_t)0x80809090A0A0B0BLL, v25), v10, v29), 5uLL);
    int32x4_t v33 = (int8x16_t *)((char *)a4 + 2 * a3);
    *int32x4_t v33 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v14, v22), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v6.i8, v30), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v22), (uint8x8_t)0x80809090A0A0B0BLL, *(uint8x8_t *)v19.i8), v10, v30), 5uLL);
    int32x4_t v34 = (int8x16_t *)((char *)a4 + 3 * a3);
    *int32x4_t v34 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v14, v23), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v26), *(uint8x8_t *)v6.i8, v31), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v15, v23), (uint8x8_t)0x80809090A0A0B0BLL, v26), v10, v31), 5uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v20), (uint8x8_t)0x404050506060707, v24), *(uint8x8_t *)v7.i8, v28), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v20), (uint8x8_t)0x10102020303, v24), v11, v28), 5uLL);
    v32[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v21), (uint8x8_t)0x404050506060707, v25), *(uint8x8_t *)v7.i8, v29), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v21), (uint8x8_t)0x10102020303, v25), v11, v29), 5uLL);
    v33[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v22), (uint8x8_t)0x404050506060707, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v7.i8, v30), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v22), (uint8x8_t)0x10102020303, *(uint8x8_t *)v19.i8), v11, v30), 5uLL);
    v34[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v23), (uint8x8_t)0x404050506060707, v26), *(uint8x8_t *)v7.i8, v31), 5uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v23), (uint8x8_t)0x10102020303, v26), v11, v31), 5uLL);
    ++v4;
    a4 = (int8x16_t *)((char *)a4 + 4 * a3);
  }
  while (v4 != 4);
}

_OWORD *sub_1D0C60528(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  v49[0] = xmmword_1D0D7F2B0;
  v49[1] = xmmword_1D0D7F2C0;
  v49[2] = xmmword_1D0D7F2D0;
  v49[3] = xmmword_1D0D7F2E0;
  uint8x16_t v5 = a2[1];
  uint8x16_t v6 = a2[4];
  uint8x16_t v7 = a2[5];
  uint16x8_t v8 = vmovl_high_u8(*a2);
  v48[0] = vmovl_u8(*(uint8x8_t *)a2->i8);
  v48[1] = v8;
  v48[2] = vmovl_u8(*(uint8x8_t *)v5.i8);
  v48[3] = vmovl_high_u8(v5);
  int16x8_t v9 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v6.i8);
  int16x8_t v10 = (int16x8_t)vmovl_high_u8(v6);
  int16x8_t v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v7.i8);
  int16x8_t v12 = (int16x8_t)vmovl_high_u8(v7);
  i8 = a2[6].i8;
  uint8x8_t v14 = (uint8x8_t)vld1_dup_s8(i8);
  int16x8_t v15 = a2[2].i8;
  uint8x8_t v16 = (uint8x8_t)vld1_dup_s8(v15);
  int16x8_t v17 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v14);
  int16x8_t v18 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v14);
  int16x8_t v19 = (int16x8_t)vmull_u8((uint8x8_t)0x1817161514131211, v14);
  int16x8_t v20 = (int16x8_t)vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v14);
  v47[0] = vmull_u8((uint8x8_t)0x807060504030201, v16);
  v47[1] = vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v16);
  uint64_t v21 = 4 * a3;
  uint64_t v22 = 7 * a3;
  uint64_t v23 = 6 * a3;
  uint64_t v24 = 5 * a3;
  uint64_t v25 = 3 * a3 + 16;
  uint64_t v26 = 2 * a3 + 16;
  v47[2] = vmull_u8((uint8x8_t)0x1817161514131211, v16);
  v47[3] = vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v16);
  uint64_t v27 = a3 + 16;
  int16x8_t result = v47;
  do
  {
    int16x8_t v29 = (int16x8_t)v47[v4];
    int16x8_t v30 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 0);
    int16x8_t v31 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 1);
    int16x8_t v32 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 2);
    int16x8_t v33 = vdupq_lane_s16(*(int16x4_t *)v29.i8, 3);
    int16x8_t v34 = (int16x8_t)v48[v4];
    int16x8_t v35 = (int16x8_t)v49[v4];
    *a4 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1D0D7F2B0, *(int16x4_t *)v34.i8, 0), v30), v9, *(int16x4_t *)v35.i8, 0), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1D0D7F2C0, *(int16x4_t *)v34.i8, 0), v30), v10, *(int16x4_t *)v35.i8, 0), 6uLL);
    int16x8_t v36 = (int8x16_t *)((char *)a4 + v27);
    v36[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1D0D7F2B0, *(int16x4_t *)v34.i8, 1), v31), v9, *(int16x4_t *)v35.i8, 1), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1D0D7F2C0, *(int16x4_t *)v34.i8, 1), v31), v10, *(int16x4_t *)v35.i8, 1), 6uLL);
    uint8x8_t v37 = (int8x16_t *)((char *)a4 + v26);
    v37[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1D0D7F2B0, *(int16x4_t *)v34.i8, 2), v32), v9, *(int16x4_t *)v35.i8, 2), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1D0D7F2C0, *(int16x4_t *)v34.i8, 2), v32), v10, *(int16x4_t *)v35.i8, 2), 6uLL);
    int8x16_t v38 = (int8x16_t *)((char *)a4 + v25);
    v38[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v17, (int16x8_t)xmmword_1D0D7F2B0, *(int16x4_t *)v34.i8, 3), v33), v9, *(int16x4_t *)v35.i8, 3), 6uLL), vmlaq_lane_s16(vaddq_s16(vmlaq_lane_s16(v18, (int16x8_t)xmmword_1D0D7F2C0, *(int16x4_t *)v34.i8, 3), v33), v10, *(int16x4_t *)v35.i8, 3), 6uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v30, v19), v11, *(int16x4_t *)v35.i8, 0), (int16x8_t)xmmword_1D0D7F2D0, *(int16x4_t *)v34.i8, 0), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v30, v20), v12, *(int16x4_t *)v35.i8, 0), (int16x8_t)xmmword_1D0D7F2E0, *(int16x4_t *)v34.i8, 0), 6uLL);
    *int16x8_t v36 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v31, v19), v11, *(int16x4_t *)v35.i8, 1), (int16x8_t)xmmword_1D0D7F2D0, *(int16x4_t *)v34.i8, 1), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v31, v20), v12, *(int16x4_t *)v35.i8, 1), (int16x8_t)xmmword_1D0D7F2E0, *(int16x4_t *)v34.i8, 1), 6uLL);
    *uint8x8_t v37 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v32, v19), v11, *(int16x4_t *)v35.i8, 2), (int16x8_t)xmmword_1D0D7F2D0, *(int16x4_t *)v34.i8, 2), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v32, v20), v12, *(int16x4_t *)v35.i8, 2), (int16x8_t)xmmword_1D0D7F2E0, *(int16x4_t *)v34.i8, 2), 6uLL);
    *int8x16_t v38 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v33, v19), v11, *(int16x4_t *)v35.i8, 3), (int16x8_t)xmmword_1D0D7F2D0, *(int16x4_t *)v34.i8, 3), 6uLL), vmlaq_lane_s16(vmlaq_lane_s16(vaddq_s16(v33, v20), v12, *(int16x4_t *)v35.i8, 3), (int16x8_t)xmmword_1D0D7F2E0, *(int16x4_t *)v34.i8, 3), 6uLL);
    unsigned int v39 = (int8x16_t *)((char *)a4 + v21);
    int16x8_t v40 = vdupq_laneq_s16(v29, 4);
    int16x8_t v41 = vdupq_laneq_s16(v29, 5);
    int16x8_t v42 = vdupq_laneq_s16(v29, 6);
    int16x8_t v43 = vdupq_laneq_s16(v29, 7);
    *unsigned int v39 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1D0D7F2B0, v34, 4), v40), v9, v35, 4), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1D0D7F2C0, v34, 4), v40), v10, v35, 4), 6uLL);
    int16x8_t v44 = (int8x16_t *)((char *)a4 + v24);
    *int16x8_t v44 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1D0D7F2B0, v34, 5), v41), v9, v35, 5), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1D0D7F2C0, v34, 5), v41), v10, v35, 5), 6uLL);
    int16x8_t v45 = (int8x16_t *)((char *)a4 + v23);
    *int16x8_t v45 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1D0D7F2B0, v34, 6), v42), v9, v35, 6), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1D0D7F2C0, v34, 6), v42), v10, v35, 6), 6uLL);
    int16x8_t v46 = (int8x16_t *)((char *)a4 + v22);
    *int16x8_t v46 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v17, (int16x8_t)xmmword_1D0D7F2B0, v34, 7), v43), v9, v35, 7), 6uLL), vmlaq_laneq_s16(vaddq_s16(vmlaq_laneq_s16(v18, (int16x8_t)xmmword_1D0D7F2C0, v34, 7), v43), v10, v35, 7), 6uLL);
    v39[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v40, v19), v11, v35, 4), (int16x8_t)xmmword_1D0D7F2D0, v34, 4), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v40, v20), v12, v35, 4), (int16x8_t)xmmword_1D0D7F2E0, v34, 4), 6uLL);
    v44[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v41, v19), v11, v35, 5), (int16x8_t)xmmword_1D0D7F2D0, v34, 5), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v41, v20), v12, v35, 5), (int16x8_t)xmmword_1D0D7F2E0, v34, 5), 6uLL);
    v45[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v42, v19), v11, v35, 6), (int16x8_t)xmmword_1D0D7F2D0, v34, 6), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v42, v20), v12, v35, 6), (int16x8_t)xmmword_1D0D7F2E0, v34, 6), 6uLL);
    v46[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v43, v19), v11, v35, 7), (int16x8_t)xmmword_1D0D7F2D0, v34, 7), 6uLL), vmlaq_laneq_s16(vmlaq_laneq_s16(vaddq_s16(v43, v20), v12, v35, 7), (int16x8_t)xmmword_1D0D7F2E0, v34, 7), 6uLL);
    a4 = (int8x16_t *)((char *)v39 + v21);
    ++v4;
  }
  while (v4 != 4);
  return result;
}

void sub_1D0C60948(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  int v3 = *(_DWORD *)(a1 + 52);
  int v4 = *(_DWORD *)(*(void *)(a1 + 16) + 2120);
  int v5 = v3 / v4;
  int v6 = v3 / v4 * v4;
  int v7 = v3 % v4;
  if (*(unsigned char *)(a1 + 58))
  {
    if (*(unsigned char *)(a1 + 58) == 1) {
      unsigned int v8 = *(unsigned char *)(a1 + 553) == 0;
    }
    else {
      unsigned int v8 = 2;
    }
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(a1 + 553);
  }
  if (sub_1D0C61118(*(void *)(a1 + 32) + 1648, v3 % v4, v5, a1 + 2304)) {
    return;
  }
  *(_DWORD *)(a1 + 2328) = 0;
  if (*(unsigned __int8 *)(*(void *)(a1 + 1576) + 34) != 255)
  {
    sub_1D0C97148(a1, v9);
    if (v10) {
      return;
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v11 + 20))
  {
    int v12 = *(unsigned __int16 *)(v11 + 22) + 1 + (*(unsigned __int16 *)(v11 + 22) + 1) * *(unsigned __int16 *)(v11 + 24);
  }
  else if (*(unsigned char *)(v11 + 21))
  {
    int v12 = *(_DWORD *)(*(void *)(a1 + 16) + 2124);
  }
  else
  {
    int v12 = 1;
  }
  sub_1D0C60FFC((char **)(a1 + 1184), v12);
  if (v12 >= 1)
  {
    uint8x8_t v13 = *(_DWORD **)(a1 + 1184);
    uint64_t v14 = v12;
    do
    {
      *v13++ = *(char *)(a1 + 653);
      --v14;
    }
    while (v14);
  }
  uint64_t v15 = *(int *)(a1 + 568);
  unint64_t v16 = v15 + 1;
  int16x8_t v17 = *(char **)(a1 + 2360);
  int16x8_t v18 = *(unsigned char **)(a1 + 2352);
  unint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 5);
  unint64_t v20 = v15 + 1 - v19;
  if (v15 + 1 > v19)
  {
    uint64_t v21 = *(void *)(a1 + 2368);
    if (0x6DB6DB6DB6DB6DB7 * ((v21 - (uint64_t)v17) >> 5) < v20)
    {
      if ((int)v15 <= -2) {
        sub_1D0C8D71C();
      }
      unsigned int v79 = v8;
      unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((v21 - (uint64_t)v18) >> 5);
      unint64_t v23 = 0xDB6DB6DB6DB6DB6ELL * ((v21 - (uint64_t)v18) >> 5);
      if (v23 > v16) {
        unint64_t v16 = v23;
      }
      if (v22 >= 0x92492492492492) {
        unint64_t v16 = 0x124924924924924;
      }
      if (v16 > 0x124924924924924) {
        sub_1D0C6AC2C();
      }
      uint64_t v24 = 224 * v16;
      uint64_t v25 = (char *)operator new(224 * v16);
      uint64_t v26 = &v25[32 * ((v17 - v18) >> 5)];
      int16x8_t v78 = &v25[v24];
      bzero(v26, 224 * ((((224 * v20 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 224);
      uint64_t v27 = &v26[224 * ((((224 * v20 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 224];
      if (v17 == v18)
      {
        unsigned int v8 = v79;
      }
      else
      {
        unsigned int v8 = v79;
        do
        {
          long long v28 = *((_OWORD *)v17 - 13);
          *((_OWORD *)v26 - 14) = *((_OWORD *)v17 - 14);
          *((_OWORD *)v26 - 13) = v28;
          long long v29 = *((_OWORD *)v17 - 12);
          long long v30 = *((_OWORD *)v17 - 11);
          long long v31 = *((_OWORD *)v17 - 9);
          *((_OWORD *)v26 - 10) = *((_OWORD *)v17 - 10);
          *((_OWORD *)v26 - 9) = v31;
          *((_OWORD *)v26 - 12) = v29;
          *((_OWORD *)v26 - 11) = v30;
          long long v32 = *((_OWORD *)v17 - 8);
          long long v33 = *((_OWORD *)v17 - 7);
          long long v34 = *((_OWORD *)v17 - 5);
          *((_OWORD *)v26 - 6) = *((_OWORD *)v17 - 6);
          *((_OWORD *)v26 - 5) = v34;
          *((_OWORD *)v26 - 8) = v32;
          *((_OWORD *)v26 - 7) = v33;
          long long v35 = *((_OWORD *)v17 - 4);
          long long v36 = *((_OWORD *)v17 - 3);
          long long v37 = *((_OWORD *)v17 - 2);
          *(_OWORD *)(v26 - 23) = *(_OWORD *)(v17 - 23);
          *((_OWORD *)v26 - 3) = v36;
          *((_OWORD *)v26 - 2) = v37;
          *((_OWORD *)v26 - 4) = v35;
          v26 -= 224;
          v17 -= 224;
        }
        while (v17 != v18);
        int16x8_t v17 = *(char **)(a1 + 2352);
      }
      *(void *)(a1 + 2352) = v26;
      *(void *)(a1 + 2360) = v27;
      *(void *)(a1 + 2368) = v78;
      if (v17) {
        operator delete(v17);
      }
      goto LABEL_37;
    }
    bzero(*(void **)(a1 + 2360), 224 * ((((224 * v20 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 224);
    int8x16_t v38 = &v17[224 * ((((224 * v20 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 224];
    goto LABEL_33;
  }
  if (v15 + 1 < v19)
  {
    int8x16_t v38 = &v18[224 * v16];
LABEL_33:
    *(void *)(a1 + 2360) = v38;
  }
LABEL_37:
  LODWORD(v39) = *(_DWORD *)(a1 + 568);
  if ((int)v39 <= 0)
  {
LABEL_62:
    uint64_t v50 = (void *)(*(void *)(a1 + 2352) + 224 * (int)v39);
    sub_1D0C60F68((uint64_t)v50, v8, *(char *)(a1 + 653));
    int32x4_t v51 = *(unsigned __int8 **)(a1 + 1640);
    uint64_t v52 = *(void *)(a1 + 1648);
    v50[1] = 510;
    v50[3] = v51;
    v50[4] = v52;
    sub_1D0C60F00((uint64_t)v50, v51);
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v53 = *(void *)(a1 + 32);
      int v54 = *(unsigned __int8 *)(v53 + 21);
      if (*(unsigned char *)(v53 + 21))
      {
        if (v3 == v6) {
          goto LABEL_84;
        }
      }
      if (v7 != *(_DWORD *)(a1 + 2320) || v5 != *(_DWORD *)(a1 + 2308))
      {
        if (*(unsigned char *)(v53 + 20))
        {
          int v55 = *(_DWORD *)(a1 + 2304)
              + *(_DWORD *)(a1 + 2304) * *(unsigned __int16 *)(v53 + 22)
              + *(_DWORD *)(a1 + 2316);
        }
        else if (*(unsigned char *)(v53 + 21))
        {
          int v55 = v5;
        }
        else
        {
          int v55 = 0;
        }
        uint64_t v56 = *(void *)(a1 + 2336);
        uint64_t v57 = *(void *)(v56 + 1184);
        if (v55 < (unint64_t)((*(void *)(v56 + 1192) - v57) >> 2)) {
          *(_DWORD *)(*(void *)(a1 + 1184) + 4 * v55) = *(_DWORD *)(v57 + 4 * v55);
        }
        uint64_t v58 = *(void *)(a1 + 2352);
        long long v59 = *(_OWORD *)(v56 + 1386);
        long long v60 = *(_OWORD *)(v56 + 1402);
        long long v61 = *(_OWORD *)(v56 + 1418);
        *(_OWORD *)(v58 + 88) = *(_OWORD *)(v56 + 1434);
        *(_OWORD *)(v58 + 72) = v61;
        *(_OWORD *)(v58 + 56) = v60;
        *(_OWORD *)(v58 + 40) = v59;
        long long v62 = *(_OWORD *)(v56 + 1450);
        long long v63 = *(_OWORD *)(v56 + 1466);
        long long v64 = *(_OWORD *)(v56 + 1482);
        *(_OWORD *)(v58 + 152) = *(_OWORD *)(v56 + 1498);
        *(_OWORD *)(v58 + 136) = v64;
        *(_OWORD *)(v58 + 120) = v63;
        *(_OWORD *)(v58 + 104) = v62;
        long long v65 = *(_OWORD *)(v56 + 1514);
        long long v66 = *(_OWORD *)(v56 + 1530);
        long long v67 = *(_OWORD *)(v56 + 1546);
        *(unsigned char *)(v58 + 216) = *(unsigned char *)(v56 + 1562);
        *(_OWORD *)(v58 + 200) = v67;
        *(_OWORD *)(v58 + 184) = v66;
        *(_OWORD *)(v58 + 168) = v65;
        uint64_t v53 = *(void *)(a1 + 32);
        int v54 = *(unsigned __int8 *)(v53 + 21);
      }
      if (v54)
      {
LABEL_84:
        if (!*(unsigned char *)(v53 + 20))
        {
          uint64_t v68 = *(void *)(a1 + 2336);
          long long v69 = *(_OWORD *)(v68 + 1256);
          long long v71 = *(_OWORD *)(v68 + 1208);
          long long v70 = *(_OWORD *)(v68 + 1224);
          *(_OWORD *)(a1 + 1240) = *(_OWORD *)(v68 + 1240);
          *(_OWORD *)(a1 + 1256) = v69;
          *(_OWORD *)(a1 + 1208) = v71;
          *(_OWORD *)(a1 + 1224) = v70;
          long long v72 = *(_OWORD *)(v68 + 1320);
          long long v74 = *(_OWORD *)(v68 + 1272);
          long long v73 = *(_OWORD *)(v68 + 1288);
          *(_OWORD *)(a1 + 1304) = *(_OWORD *)(v68 + 1304);
          *(_OWORD *)(a1 + 1320) = v72;
          *(_OWORD *)(a1 + 1272) = v74;
          *(_OWORD *)(a1 + 1288) = v73;
          long long v76 = *(_OWORD *)(v68 + 1352);
          long long v75 = *(_OWORD *)(v68 + 1368);
          long long v77 = *(_OWORD *)(v68 + 1336);
          *(unsigned char *)(a1 + 1384) = *(unsigned char *)(v68 + 1384);
          *(_OWORD *)(a1 + 1352) = v76;
          *(_OWORD *)(a1 + 1368) = v75;
          *(_OWORD *)(a1 + 1336) = v77;
          *(unsigned char *)(a1 + 1385) = *(unsigned char *)(v68 + 1385);
        }
      }
    }
    *(unsigned char *)(a1 + 2332) = 1;
    return;
  }
  uint64_t v40 = 0;
  while (1)
  {
    int16x8_t v41 = (void *)(*(void *)(a1 + 2352) + 224 * v40);
    int v42 = *(_DWORD *)(*(void *)(a1 + 576) + 4 * v40);
    sub_1D0C60F68((uint64_t)v41, v8, *(char *)(a1 + 653));
    int16x8_t v43 = *(unsigned __int8 **)(a1 + 1640);
    uint64_t v44 = (uint64_t)&v43[-*(void *)(a1 + 1632)];
    if (v44 < 2)
    {
      if (v44 != 1)
      {
        LODWORD(v44) = 0;
        goto LABEL_47;
      }
    }
    else
    {
      LODWORD(v44) = *(v43 - 2) ? 1 : 2;
    }
    if (*(v43 - 1)) {
      LODWORD(v44) = 0;
    }
LABEL_47:
    unint64_t v45 = (v42 + 1);
    if (v42 != -1) {
      break;
    }
    unint64_t v45 = 0;
LABEL_61:
    v41[1] = 510;
    v41[3] = v43;
    v41[4] = &v43[v45];
    sub_1D0C60F00((uint64_t)v41, v43);
    *(void *)(a1 + 1640) += v45;
    ++v40;
    uint64_t v39 = *(int *)(a1 + 568);
    if (v40 >= v39) {
      goto LABEL_62;
    }
  }
  uint64_t v46 = 0;
  while (*(void *)(a1 + 1648) - (void)v43 != v46)
  {
    unsigned int v47 = v43[v46];
    BOOL v48 = v44 == 2;
    if (v44 == 2) {
      LODWORD(v44) = 2 * (v47 > 3);
    }
    uint64_t v49 = v47 < 4 && v48;
    v45 -= v49;
    if (v43[v46]) {
      LODWORD(v44) = 0;
    }
    else {
      LODWORD(v44) = v44 + 1;
    }
    if (++v46 >= v45) {
      goto LABEL_61;
    }
  }
}

uint64_t sub_1D0C60F00(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = 0;
  *(void *)(result + 24) = a2;
  *(_OWORD *)int16x8_t result = xmmword_1D0D7F200;
  unint64_t v3 = *(void *)(result + 32);
  uint64_t v4 = 64;
  int v5 = a2;
  do
  {
    v4 -= 8;
    v2 |= (unint64_t)*v5 << v4;
    *(void *)int16x8_t result = v2;
    if ((unint64_t)v5 < v3) {
      *(void *)(result + 24) = ++v5;
    }
  }
  while (8 * (a2 & 3) != v4);
  *(void *)(result + 16) = (int)((8 * a2) | 0xFFFFFFE0);
  return result;
}

uint64_t sub_1D0C60F68(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if (a3 >= 51) {
    int v4 = 51;
  }
  else {
    int v4 = a3;
  }
  int v5 = v4 & ~(v4 >> 31);
  do
  {
    unsigned int v6 = byte_1D0D7F87C[177 * a2 + v3];
    int v7 = 8 * (v6 & 0xF) + ((int)((5 * (v6 >> 4) - 45) * v5) >> 4) - 16;
    if (v7 >= 126) {
      int v7 = 126;
    }
    if (v7 <= 1) {
      int v7 = 1;
    }
    char v8 = 63 - v7;
    BOOL v9 = v7 > 0x3F;
    BOOL v10 = v7 > 0x3F;
    char v11 = v7 + 64;
    if (!v9) {
      char v11 = v8;
    }
    *(unsigned char *)(result + 40 + v3++) = v10 | (2 * v11);
  }
  while (v3 != 177);
  *(_DWORD *)(result + 213) = 0;
  return result;
}

void sub_1D0C60FFC(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  int v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v16 = &v3[4 * a2];
    goto LABEL_16;
  }
  unint64_t v6 = a2 - v5;
  int v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    unint64_t v16 = &v4[4 * v6];
LABEL_16:
    a1[1] = v16;
    return;
  }
  if (a2 >> 62) {
    sub_1D0C8D71C();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 62) {
    sub_1D0C6AC2C();
  }
  char v11 = (char *)operator new(4 * v10);
  int v12 = &v11[4 * v5];
  uint8x8_t v13 = &v11[4 * v10];
  bzero(v12, 4 * v6);
  uint64_t v14 = &v12[4 * v6];
  while (v4 != v3)
  {
    int v15 = *((_DWORD *)v4 - 1);
    v4 -= 4;
    *((_DWORD *)v12 - 1) = v15;
    v12 -= 4;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

uint64_t sub_1D0C61118(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 96) <= a2 || *(_DWORD *)(a1 + 100) <= a3) {
    return 4294954387;
  }
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t result = 0;
    uint64_t v6 = *(void *)(a1 + 48) + 12 * a2;
    uint64_t v7 = *(void *)v6;
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(v6 + 8);
    *(void *)(a4 + 12) = v7;
    uint64_t v8 = *(void *)(a1 + 72) + 12 * a3;
    uint64_t v9 = *(void *)v8;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(v8 + 8);
    *(void *)a4 = v9;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    int v11 = *(_DWORD *)(a1 + 96);
    int v10 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a4 + 20) = v11;
    *(_DWORD *)(a4 + 8) = v10;
  }
  return result;
}

void sub_1D0C6119C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int v4 = (void *)(a1 + 2120);
  uint64_t v5 = *(void *)(a1 + 2120);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 2128);
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  if (!v6)
  {
    *int v4 = 0;
    *(void *)(a1 + 2128) = 0;
    if (a2) {
      goto LABEL_20;
    }
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 2128);
  *int v4 = 0;
  v4[1] = 0;
  if (v7) {
    sub_1D0C4C984(v7);
  }
  if (!v2)
  {
LABEL_7:
    if (v5)
    {
      uint64_t v8 = *(void *)(a1 + 2056);
      if (*(unsigned __int8 *)(v8 + 50) == 255) {
        goto LABEL_13;
      }
      int v9 = sub_1D0C75CC0(v5);
      if (dword_1EB671A40 >= 7)
      {
        int v10 = (FILE **)MEMORY[0x1E4F143C8];
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Received frame checksum (POC %d) = %x\n", *(_DWORD *)(**(void **)(a1 + 2064) + 640), *(unsigned __int16 *)(v8 + 64));
        syslog(31, "Received frame checksum (POC %d) = %x\n", *(_DWORD *)(**(void **)(a1 + 2064) + 640), *(unsigned __int16 *)(*(void *)(a1 + 2056) + 64));
        if (dword_1EB671A40 >= 7)
        {
          fprintf(*v10, "Decoded  frame checksum (POC %d) = %x\n", *(_DWORD *)(**(void **)(a1 + 2064) + 640), v9);
          syslog(31, "Decoded  frame checksum (POC %d) = %x\n", *(_DWORD *)(**(void **)(a1 + 2064) + 640), v9);
        }
      }
      if (*(unsigned __int16 *)(*(void *)(a1 + 2056) + 64) == v9)
      {
LABEL_13:
        uint64_t v2 = 0;
      }
      else
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Checksum mismatch at POC %d: enc = %d, dec = %d\n", *(_DWORD *)(**(void **)(a1 + 2064) + 640), *(unsigned __int16 *)(*(void *)(a1 + 2056) + 64), v9);
          syslog(27, "Checksum mismatch at POC %d: enc = %d, dec = %d\n", *(_DWORD *)(**(void **)(a1 + 2064) + 640), *(unsigned __int16 *)(*(void *)(a1 + 2056) + 64), v9);
        }
        uint64_t v2 = 4294954387;
      }
    }
    else
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Something went wrong and frame is NULL (but we have no specific error...)\n", 0x4AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Something went wrong and frame is NULL (but we have no specific error...)\n");
      }
      uint64_t v2 = 4294954385;
    }
  }
LABEL_20:
  if (*(int *)(a1 + 2112) >= 1)
  {
    uint64_t v11 = 0;
    do
      sub_1D0C6179C(*(void *)(*(void *)(a1 + 2064) + 8 * v11++));
    while (v11 < *(int *)(a1 + 2112));
  }
  sub_1D0C6183C((void *)(a1 + 2136));
  if (v5)
  {
    int v15 = (std::mutex *)(v5 + 1040);
    char v16 = 1;
    std::mutex::lock((std::mutex *)(v5 + 1040));
    atomic_store(0x7FFFFFFFu, (unsigned int *)(v5 + 1032));
    sub_1D0C615D8((uint64_t)&v15);
    std::condition_variable::notify_all((std::condition_variable *)(v5 + 1104));
    if (v16) {
      std::mutex::unlock(v15);
    }
    *(unsigned char *)(v5 + 45) = *(unsigned char *)(**(void **)(a1 + 2064) + 59);
    if (!v2)
    {
      if (*(unsigned char *)(*(void *)(a1 + 2056) + 304))
      {
        uint64_t v2 = sub_1D0C8EA3C(v5, v5 + 598);
        *(unsigned char *)(v5 + 597) = 1;
      }
      else
      {
        uint64_t v2 = 0;
      }
    }
  }
  uint64_t v12 = *(void *)a1;
  atomic_store(0, (unsigned __int8 *)(a1 + 3440));
  sub_1D0C614DC(*(void *)(a1 + 2056), v12, v2, &v13);
  if (v14) {
    sub_1D0C4C984(v14);
  }
}

void sub_1D0C6149C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15, char a16)
{
  if (v16) {
    sub_1D0C4C984(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0C614DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v13 = (std::mutex *)(a1 + 2472);
  char v14 = 1;
  std::mutex::lock((std::mutex *)(a1 + 2472));
  uint64_t v8 = *a4;
  if (*a4)
  {
    *(unsigned char *)(v8 + 44) = 1;
    *(_DWORD *)(v8 + 544) = a3;
    *(void *)(v8 + 536) = a2;
  }
  BOOL v10 = v8 == 0;
  int v9 = *(void (**)(void, uint64_t, uint64_t, uint64_t *))(a1 + 2408);
  BOOL v10 = !v10 && a3 == 0;
  if (!v10 && v9 != 0) {
    v9(*(void *)(a1 + 2416), a2, a3, a4);
  }
  sub_1D0C6161C(a1);
  sub_1D0C615D8((uint64_t)&v13);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 2400));
  if (v14)
  {
    uint64_t v12 = v13;
    std::mutex::unlock(v12);
  }
}

void sub_1D0C615BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0C615D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::mutex::unlock(*(std::mutex **)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    sub_1D0C6161C(v2);
  }
}

void sub_1D0C6161C(uint64_t a1)
{
  do
  {
    if (!*(void *)(a1 + 2464)) {
      break;
    }
    long long v2 = *(_OWORD *)(*(void *)(*(void *)(a1 + 2432) + ((*(void *)(a1 + 2456) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *(void *)(a1 + 2456));
    *(_OWORD *)uint64_t v11 = v2;
    if (*((void *)&v2 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v2 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v3 = *(unsigned __int8 *)(v2 + 44);
    if (*(unsigned char *)(v2 + 44))
    {
      unint64_t v4 = *(void *)(a1 + 2456);
      uint64_t v5 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a1 + 2432) + ((v4 >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * v4
                                        + 8);
      if (v5)
      {
        sub_1D0C4C984(v5);
        unint64_t v4 = *(void *)(a1 + 2456);
      }
      --*(void *)(a1 + 2464);
      unint64_t v6 = v4 + 1;
      *(void *)(a1 + 2456) = v6;
      if (v6 >= 0x200)
      {
        operator delete(**(void ***)(a1 + 2432));
        *(void *)(a1 + 2432) += 8;
        *(void *)(a1 + 2456) -= 256;
      }
      int v7 = *(_DWORD *)(a1 + 328);
      if (v7)
      {
        uint64_t v8 = *(void *)v11;
        if (*(_DWORD *)(a1 + 196) >= v7) {
          *(unsigned char *)(*(void *)v11 + 45) = 0;
        }
      }
      else
      {
        uint64_t v8 = *(void *)v11;
      }
      if (*(unsigned char *)(v8 + 45))
      {
        int v9 = *(FILE **)(a1 + 216);
        if (v9) {
          sub_1D0C8E29C(v8, v9, *(void *)(a1 + 168), *(unsigned __int8 *)(a1 + 359));
        }
      }
      BOOL v10 = *(void (**)(void, void, void, int *))(a1 + 2408);
      if (v10 && !*(_DWORD *)(*(void *)v11 + 544)) {
        v10(*(void *)(a1 + 2416), *(void *)(*(void *)v11 + 536), 0, v11);
      }
      ++*(_DWORD *)(a1 + 196);
    }
    if (*(void *)&v11[2]) {
      sub_1D0C4C984(*(std::__shared_weak_count **)&v11[2]);
    }
  }
  while (v3);
}

void sub_1D0C61780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1D0C4C984(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0C6179C(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; i += 16)
  {
    uint64_t v3 = a1 + i;
    unint64_t v4 = *(std::__shared_weak_count **)(a1 + i + 1680);
    *(_OWORD *)(a1 + i + 1672) = 0u;
    if (v4) {
      sub_1D0C4C984(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 1936);
    *(_OWORD *)(v3 + 1928) = 0u;
    if (v5) {
      sub_1D0C4C984(v5);
    }
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 2192);
  *(_OWORD *)(a1 + 2184) = 0u;
  if (v6)
  {
    sub_1D0C4C984(v6);
  }
}

void sub_1D0C6183C(void *a1)
{
  for (uint64_t i = 0; i != 32; i += 2)
  {
    uint64_t v3 = &a1[i];
    unint64_t v4 = (std::__shared_weak_count *)a1[i + 4];
    v3[3] = 0;
    v3[4] = 0;
    if (v4) {
      sub_1D0C4C984(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)v3[36];
    v3[35] = 0;
    v3[36] = 0;
    if (v5) {
      sub_1D0C4C984(v5);
    }
    unint64_t v6 = &a1[i];
    int v7 = (std::__shared_weak_count *)a1[i + 68];
    *(_OWORD *)&a1[i + 67] = 0u;
    if (v7) {
      sub_1D0C4C984(v7);
    }
    uint64_t v8 = (std::__shared_weak_count *)v6[100];
    *(_OWORD *)(v6 + 99) = 0u;
    if (v8) {
      sub_1D0C4C984(v8);
    }
    int v9 = (std::__shared_weak_count *)a1[i + 132];
    *(_OWORD *)&a1[i + 131] = 0u;
    if (v9) {
      sub_1D0C4C984(v9);
    }
  }
  *a1 = 0;
  a1[1] = 0;
}

void sub_1D0C618EC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (!a3)
  {
    int v7 = (unsigned char *)*a4;
    if (*a4)
    {
      if (v7[45])
      {
        uint64_t v8 = (__CVBuffer *)(*(uint64_t (**)(void))(*(void *)v7 + 24))(*a4);
        if (v8 == *(__CVBuffer **)(a2 + 32)) {
          sub_1D0C4FBB4((uint64_t)v7);
        }
        if (v8)
        {
          int v9 = *(__CVBuffer **)(a2 + 32);
          if (v9)
          {
            if (v8 != v9)
            {
              OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v8);
              OSType v11 = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a2 + 32));
              OSType v29 = PixelFormatType;
              if (PixelFormatType != v11 && dword_1EB671A40 >= 3)
              {
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "Pixel format mismatch for tile - got %x, expected %x\n", v11, PixelFormatType);
                syslog(27, "Pixel format mismatch for tile - got %x, expected %x\n", v11, PixelFormatType);
              }
              size_t v12 = *(int *)(*a4 + 520);
              size_t v13 = *(int *)(*a4 + 524);
              size_t v14 = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 32)) - *(int *)(a2 + 40);
              size_t Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 32));
              uint64_t v16 = *(int *)(a2 + 44);
              size_t extraRowsOnBottom = 0;
              size_t extraColumnsOnRight = 0;
              CVPixelBufferGetExtendedPixels(*(CVPixelBufferRef *)(a2 + 32), 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
              size_t v17 = v14 + extraColumnsOnRight;
              size_t v18 = v13;
              size_t v19 = v12;
              if (v17 >= v12 && Height - v16 + extraRowsOnBottom >= v18)
              {
                if (v29 == v11) {
                  sub_1D0D26E08(*(void (***)(uint64_t))(a1 + 1064), v8, *(__CVBuffer **)(a2 + 32), *(void *)(a2 + 40));
                }
              }
              else if (dword_1EB671A40 >= 3)
              {
                unint64_t v20 = (FILE *)*MEMORY[0x1E4F143C8];
                int v21 = *(_DWORD *)(a2 + 40);
                int v22 = *(_DWORD *)(a2 + 44);
                size_t Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 32));
                size_t v24 = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 32));
                fprintf(v20, "OOB destination for %zux%zu tile - offset %dx%d into %zux%zu with %zu/%zu edge\n", v19, v18, v21, v22, Width, v24, extraColumnsOnRight, extraRowsOnBottom);
                int v25 = *(_DWORD *)(a2 + 40);
                int v26 = *(_DWORD *)(a2 + 44);
                size_t v27 = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 32));
                size_t v28 = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 32));
                syslog(27, "OOB destination for %zux%zu tile - offset %dx%d into %zux%zu with %zu/%zu edge\n", v19, v18, v25, v26, v27, v28, extraColumnsOnRight, extraRowsOnBottom);
              }
            }
          }
        }
      }
      else
      {
        *(_DWORD *)(a2 + 8) |= 2u;
      }
    }
  }
  VTTileDecoderSessionEmitDecodedTile();
  sub_1D0C61B88(a2);
}

uint64_t sub_1D0C61B80(uint64_t a1)
{
  return *(void *)(a1 + 1176);
}

void sub_1D0C61B88(uint64_t a1)
{
  if (a1)
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
    long long v2 = *(const void **)(a1 + 16);
    if (v2) {
      CFRelease(v2);
    }
    free((void *)a1);
  }
}

uint8x16_t *sub_1D0C61BD8(uint8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, uint8x16_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int16 *)((char *)&result[3].i16[7] + (v9 + 1) * a2);
  uint8x16_t v11 = *_X5;
  uint8x16_t v10 = _X5[1];
  uint8x16_t v12 = _X5[2];
  uint8x16_t v13 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint8x16_t v19 = *result;
  uint8x16_t v20 = result[1];
  uint8x16_t v21 = result[2];
  uint8x16_t v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v24 = v9 + 2;
  do
  {
    uint8x16_t v25 = v19;
    uint8x16_t v26 = v20;
    uint8x16_t v27 = v21;
    uint8x16_t v28 = v22;
    _X9 = (uint64_t)result->i64 + a2;
    uint8x16_t v19 = *(uint8x16_t *)((char *)result + a2);
    uint8x16_t v20 = *(uint8x16_t *)((char *)&result[1] + a2);
    uint8x16_t v21 = *(uint8x16_t *)((char *)&result[2] + a2);
    uint8x16_t v22 = *(uint8x16_t *)((char *)&result[3] + a2);
    __asm { PRFM            #0, [X9,#0x40] }
    *a5++ = v28.i16[7];
    int8x16_t v31 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v25, v11), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v11, v25)), (int8x16_t)vcgtq_u8(v25, v19)), (int8x16_t)vcgtq_u8(v19, v25)));
    uint8x16_t v11 = v25;
    uint8x16_t v32 = vsqaddq_u8(v25, v31);
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v26, v10), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v10, v26)), (int8x16_t)vcgtq_u8(v26, v20)), (int8x16_t)vcgtq_u8(v20, v26)));
    uint8x16_t v10 = v26;
    uint8x16_t v34 = vsqaddq_u8(v26, v33);
    int8x16_t v35 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v27, v12), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v12, v27)), (int8x16_t)vcgtq_u8(v27, v21)), (int8x16_t)vcgtq_u8(v21, v27)));
    uint8x16_t v12 = v27;
    uint8x16_t v36 = vsqaddq_u8(v27, v35);
    int8x16_t v37 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v28, v13), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v13, v28)), (int8x16_t)vcgtq_u8(v28, v22)), (int8x16_t)vcgtq_u8(v22, v28)));
    uint8x16_t v13 = v28;
    *uint64_t result = v32;
    result[1] = v34;
    result[2] = v36;
    result[3] = vsqaddq_u8(v28, v37);
    --v24;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
  }
  while (v24 > 1);
  return result;
}

int16x8_t sub_1D0C61D38(uint64_t a1, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  v24[0] = *a2;
  v24[1] = v5;
  char v6 = 1;
  do
  {
    int16x8_t v7 = (int16x8_t)v24[v4];
    char v8 = v6;
    int16x8_t v9 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 0);
    int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 1);
    int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 2);
    int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 3);
    int16x8_t v13 = vdupq_laneq_s16(v7, 4);
    int16x8_t v14 = vdupq_laneq_s16(v7, 5);
    int16x8_t v15 = vdupq_laneq_s16(v7, 6);
    int16x8_t result = vdupq_laneq_s16(v7, 7);
    *a4 = v9;
    a4[1] = v9;
    size_t v17 = (int16x8_t *)((char *)a4 + a3);
    int16x8_t *v17 = v10;
    v17[1] = v10;
    size_t v18 = (int16x8_t *)((char *)a4 + a3 + a3);
    *size_t v18 = v11;
    v18[1] = v11;
    uint8x16_t v19 = (int16x8_t *)((char *)v18 + a3);
    *uint8x16_t v19 = v12;
    v19[1] = v12;
    uint8x16_t v20 = (int16x8_t *)((char *)v19 + a3);
    *uint8x16_t v20 = v13;
    v20[1] = v13;
    uint8x16_t v21 = (int16x8_t *)((char *)v20 + a3);
    *uint8x16_t v21 = v14;
    v21[1] = v14;
    uint8x16_t v22 = (int16x8_t *)((char *)v21 + a3);
    *uint8x16_t v22 = v15;
    v22[1] = v15;
    unint64_t v23 = (int16x8_t *)((char *)v22 + a3);
    *unint64_t v23 = result;
    v23[1] = result;
    a4 = (int16x8_t *)((char *)v23 + a3);
    uint64_t v4 = 1;
    char v6 = 0;
  }
  while ((v8 & 1) != 0);
  return result;
}

void sub_1D0C61E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  char v6 = (_OWORD *)(a4 + 16);
  int v7 = 16;
  do
  {
    *(v6 - 1) = v4;
    _OWORD *v6 = v5;
    char v6 = (_OWORD *)((char *)v6 + a3);
    --v7;
  }
  while (v7);
}

void sub_1D0C61E28(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  long long v4 = a2 + 64;
  int8x16x2_t v9 = vld2q_s8(a2);
  int8x16x2_t v10 = vld2q_s8(v4);
  int8x16_t v5 = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v9.val[0].i8), (uint8x16_t)v9.val[0]), (uint8x16_t)v10.val[0]), *(uint8x8_t *)v10.val[0].i8);
  v9.val[0] = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v9.val[1].i8), (uint8x16_t)v9.val[1]), (uint8x16_t)v10.val[1]), *(uint8x8_t *)v10.val[1].i8);
  *(int16x4_t *)v9.val[0].i8 = vpadd_s16(vadd_s16(*(int16x4_t *)v5.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)), vadd_s16(*(int16x4_t *)v9.val[0].i8, (int16x4_t)*(_OWORD *)&vextq_s8(v9.val[0], v9.val[0], 8uLL)));
  *(int16x4_t *)v9.val[1].i8 = vpadd_s16(*(int16x4_t *)v9.val[0].i8, *(int16x4_t *)v9.val[0].i8);
  v9.val[1].i64[1] = v9.val[1].i64[0];
  uint8x16_t v6 = vqrshrn_high_n_u16(vqrshrn_n_u16((uint16x8_t)v9.val[1], 5uLL), (uint16x8_t)v9.val[1], 5uLL);
  int v7 = a4 + 1;
  int v8 = 16;
  do
  {
    v7[-1] = v6;
    uint8x16_t *v7 = v6;
    int v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

void sub_1D0C61E94(uint64_t a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2), *(uint8x16_t *)a2), *(uint8x16_t *)(a2 + 16)), *(uint8x8_t *)(a2 + 16)), *(uint8x16_t *)(a2 + 64)), *(uint8x8_t *)(a2 + 64)), *(uint8x16_t *)(a2 + 80)), *(uint8x8_t *)(a2 + 80));
  v4.i64[0] = vpaddq_s16(v4, v4).u64[0];
  *(int16x4_t *)v4.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  v5.i64[1] = v5.i64[0];
  uint8x16_t v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(v5, 6uLL), v5, 6uLL);
  int v7 = a4 + 1;
  int v8 = 32;
  do
  {
    v7[-1] = v6;
    uint8x16_t *v7 = v6;
    int v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

uint64_t sub_1D0C61EF0(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned char *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D306D8((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_WORD *)&a5[2 * a7] = *(_WORD *)(result + a7 * a2 - 2);
  }
  if ((a4 & 4) == 0)
  {
    *(_WORD *)a5 = *(_WORD *)(result + 62);
    a5 += 2;
    _X5 = (int8x16_t *)result;
    result += a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = vdupq_n_s8(~a4);
  int8x16_t v10 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F100);
  int8x16_t v11 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F110);
  int8x16_t v13 = *_X5;
  int8x16_t v12 = _X5[1];
  int8x16_t v14 = _X5[2];
  int8x16_t v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v22 = *(int8x16_t *)result;
  int8x16_t v23 = *(int8x16_t *)(result + 16);
  int8x16_t v24 = *(int8x16_t *)(result + 32);
  int8x16_t v25 = *(int8x16_t *)(result + 48);
  uint8x16_t v26 = (const __int16 *)(result + 64);
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v28 = (int8x16_t)vld1q_dup_s16(i16);
  *(_WORD *)a5 = v25.i16[7];
  OSType v29 = (__int16 *)(a5 + 2);
  signed int v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v31 = vceqzq_s8(v11);
  int8x16_t v32 = vceqzq_s8(v10);
  int8x16_t v33 = v29;
  do
  {
    uint8x16_t v34 = (uint8x16_t)vextq_s8(v14, v15, 2uLL);
    int8x16_t v35 = v25;
    uint8x16_t v36 = (uint8x16_t)v24;
    uint8x16_t v37 = (uint8x16_t)v23;
    uint8x16_t v38 = (uint8x16_t)vextq_s8(v13, v12, 2uLL);
    int8x16_t v13 = v22;
    _X11 = (char *)v26 + a2;
    int8x16_t v22 = *(int8x16_t *)((char *)v26 + a2 - 64);
    int8x16_t v23 = *(int8x16_t *)((char *)v26 + a2 - 48);
    int8x16_t v24 = *(int8x16_t *)((char *)v26 + a2 - 32);
    int8x16_t v25 = *(int8x16_t *)((char *)v26 + a2 - 16);
    __asm { PRFM            #0, [X11] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_s16(v33++);
    *OSType v29 = v25.i16[7];
    uint8x16_t v42 = (uint8x16_t)vextq_s8(v15, v28, 2uLL);
    uint8x16_t v43 = (uint8x16_t)vextq_s8(v12, v14, 2uLL);
    uint8x16_t v44 = (uint8x16_t)vextq_s8(v41, v22, 0xEuLL);
    uint8x16_t v45 = (uint8x16_t)vextq_s8(v22, v23, 0xEuLL);
    uint8x16_t v46 = (uint8x16_t)vextq_s8(v23, v24, 0xEuLL);
    uint8x16_t v47 = (uint8x16_t)vextq_s8(v24, v25, 0xEuLL);
    int8x16_t v48 = (int8x16_t)vsqaddq_u8((uint8x16_t)v13, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v13, v38), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v38, (uint8x16_t)v13)), (int8x16_t)vcgtq_u8((uint8x16_t)v13, v44)), (int8x16_t)vcgtq_u8(v44, (uint8x16_t)v13))));
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v37, v43), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v43, v37)), (int8x16_t)vcgtq_u8(v37, v45)), (int8x16_t)vcgtq_u8(v45, v37)));
    int8x16_t v12 = (int8x16_t)v37;
    uint8x16_t v50 = vsqaddq_u8(v37, v49);
    int8x16_t v14 = (int8x16_t)v36;
    int8x16_t v51 = vbslq_s8(v31, (int8x16_t)vsqaddq_u8((uint8x16_t)v35, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v35, v42), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v42, (uint8x16_t)v35)), (int8x16_t)vcgtq_u8((uint8x16_t)v35, v47)), (int8x16_t)vcgtq_u8(v47, (uint8x16_t)v35)))), v35);
    *((int8x16_t *)v26 - 4) = vbslq_s8(v32, v48, v13);
    *((uint8x16_t *)v26 - 3) = v50;
    int8x16_t v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v30;
    *((uint8x16_t *)v26 - 2) = vsqaddq_u8(v36, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v36, v34), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v34, v36)), (int8x16_t)vcgtq_u8(v36, v46)), (int8x16_t)vcgtq_u8(v46, v36))));
    *((int8x16_t *)v26 - 1) = v51;
    uint8x16_t v26 = (const __int16 *)((char *)v26 + a2);
    OSType v29 = (__int16 *)v33;
    int8x16_t v15 = v35;
  }
  while (v30 > 1);
  return result;
}

int8x16_t *sub_1D0C620FC(int8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, char *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D30764((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int8 *)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v11 = &_X5[-1].i16[7];
    int8x16_t v10 = (int8x16_t)vld1q_dup_s16(v11);
  }
  else
  {
    int8x16_t v9 = (const __int16 *)a5;
    int8x16_t v10 = (int8x16_t)vld1q_dup_s16(v9++);
    *(_WORD *)a5 = result[3].i16[7];
    _X5 = result;
    int16x8_t result = (int8x16_t *)((char *)result + a2);
    --a7;
    a5 = (char *)v9;
  }
  v7.i64[1] = v8;
  unsigned int v12 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_WORD *)&a5[2 * (v12 + 1)] = *(__int16 *)((char *)&result[3].i16[7] + (int)(v12 + 1) * a2);
  int8x16_t v13 = vdupq_n_s8(~a4);
  int8x16_t v14 = vandq_s8(v13, (int8x16_t)xmmword_1D0D7F100);
  int8x16_t v15 = vandq_s8(v13, (int8x16_t)xmmword_1D0D7F110);
  int8x16_t v17 = *_X5;
  int8x16_t v16 = _X5[1];
  int8x16_t v19 = _X5[2];
  int8x16_t v18 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v25 = result + 2;
  int8x16_t v26 = result[2];
  int8x16_t v27 = *result;
  int8x16_t v28 = result[1];
  int8x16_t v29 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v31 = v12 + 2;
  int8x16_t v32 = vceqzq_s8(v15);
  int8x16_t v33 = vceqzq_s8(v14);
  uint8x16_t v34 = (const __int16 *)a5;
  do
  {
    uint8x16_t v35 = (uint8x16_t)vextq_s8(v19, v18, 0xEuLL);
    int8x16_t v18 = v29;
    uint8x16_t v36 = (uint8x16_t)v26;
    uint8x16_t v37 = (uint8x16_t)v28;
    uint8x16_t v38 = (uint8x16_t)vextq_s8(v10, v17, 0xEuLL);
    uint8x16_t v39 = (uint8x16_t)vextq_s8(v17, v16, 0xEuLL);
    int8x16_t v17 = v27;
    _X12 = &v25->i8[a2];
    int8x16_t v27 = *(int8x16_t *)((char *)&v25[-2] + a2);
    int8x16_t v28 = *(int8x16_t *)((char *)&v25[-1] + a2);
    int8x16_t v26 = *(int8x16_t *)((char *)v25 + a2);
    int8x16_t v29 = *(int8x16_t *)((char *)&v25[1] + a2);
    __asm { PRFM            #0, [X12,#0x20] }
    v10.i32[0] = *(unsigned __int16 *)((char *)v25[-2].u16 + a2 + ((32 * a4) & 0x40));
    uint8x16_t v42 = (uint8x16_t)vextq_s8(v16, v19, 0xEuLL);
    uint8x16_t v43 = (uint8x16_t)vextq_s8(v27, v28, 2uLL);
    uint8x16_t v44 = (uint8x16_t)vextq_s8(v28, v26, 2uLL);
    uint8x16_t v45 = (uint8x16_t)vextq_s8(v26, v29, 2uLL);
    uint8x16_t v46 = (uint8x16_t)vextq_s8(v29, v10, 2uLL);
    int8x16_t v47 = (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v38), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v38, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v43)), (int8x16_t)vcgtq_u8(v43, (uint8x16_t)v17))));
    int8x16_t v16 = (int8x16_t)v37;
    uint8x16_t v48 = vsqaddq_u8(v37, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v37, v39), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v39, v37)), (int8x16_t)vcgtq_u8(v37, v44)), (int8x16_t)vcgtq_u8(v44, v37))));
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v36, v42), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v42, v36)), (int8x16_t)vcgtq_u8(v36, v45)), (int8x16_t)vcgtq_u8(v45, v36)));
    int8x16_t v19 = (int8x16_t)v36;
    v25[-2] = vbslq_s8(v33, v47, v17);
    v25[-1] = (int8x16_t)v48;
    *(uint8x16_t *)int8x16_t v25 = vsqaddq_u8(v36, v49);
    v25[1] = vbslq_s8(v32, (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v35), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v35, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v46)), (int8x16_t)vcgtq_u8(v46, (uint8x16_t)v18)))), v18);
    int8x16_t v10 = (int8x16_t)vld1q_dup_s16(v34++);
    --v31;
    int8x16_t v25 = (int8x16_t *)((char *)v25 + a2);
    *(_WORD *)a5 = v18.i16[7];
    a5 = (char *)v34;
  }
  while (v31 > 1);
  return result;
}

char *sub_1D0C62328(char *result, uint64_t a2, long long *a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  do
  {
    int8x16_t v13 = result;
    int8x8x2_t v22 = vld2_s8(v13);
    int8x16_t v14 = (char *)&v13[a2];
    __asm { PRFM            #0, [X0,#0x10] }
    _X11 = v14;
    int8x8x2_t v23 = vld2_s8(_X11);
    _X11 += 16;
    __asm { PRFM            #0, [X11] }
    *a5 = v22.val[0].i8[7];
    a5[1] = v22.val[1].i8[7];
    a5[2] = v23.val[0].i8[7];
    a5[3] = v23.val[1].i8[7];
    v22.val[0] = (int8x8_t)vsqadd_u8((uint8x8_t)v22.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, (int8x8_t)vshr_n_u8((uint8x8_t)v22.val[0], 3uLL)));
    v22.val[1] = (int8x8_t)vsqadd_u8((uint8x8_t)v22.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, (int8x8_t)vshr_n_u8((uint8x8_t)v22.val[1], 3uLL)));
    v23.val[0] = (int8x8_t)vsqadd_u8((uint8x8_t)v23.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, (int8x8_t)vshr_n_u8((uint8x8_t)v23.val[0], 3uLL)));
    vst2_s8(result, v22);
    uint64_t v11 = 2 * a2;
    result += v11;
    v23.val[1] = (int8x8_t)vsqadd_u8((uint8x8_t)v23.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, (int8x8_t)vshr_n_u8((uint8x8_t)v23.val[1], 3uLL)));
    vst2_s8(v14, v23);
    v12 -= 2;
    a5 += 4;
  }
  while (v12 > 2);
  return result;
}

uint64_t HEVCVideoDecoder_CreateInstance(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  VTVideoDecoderGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    if (dword_1EB671A40 >= 3)
    {
      uint16x8_t v5 = (FILE *)*MEMORY[0x1E4F143C8];
      uint8x16_t v6 = "FigDerivedObjectCreate failed";
      long long v7 = "FigDerivedObjectCreate failed";
      size_t v8 = 29;
LABEL_4:
      fwrite(v7, v8, 1uLL, v5);
      syslog(27, v6);
    }
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 1044) = -1;
    *(void *)(DerivedStorage + 1048) = -1;
    *(unsigned char *)(DerivedStorage + 1060) = 1;
    long long v10 = operator new(0x40uLL, MEMORY[0x1E4FBA2D0]);
    uint64_t v11 = v10;
    if (v10)
    {
      v10[12] = 0;
      *((void *)v10 + 7) = sub_1D0D4AB88;
      *(void *)long long v10 = sub_1D0D27D80;
      *((void *)v10 + 2) = sub_1D0D27D38;
      *((void *)v10 + 4) = sub_1D0D27CF4;
      *((void *)v10 + 5) = sub_1D0D27BC4;
      *((void *)v10 + 1) = sub_1D0D4A208;
      *((void *)v10 + 3) = sub_1D0D4A164;
    }
    *(void *)(DerivedStorage + 1064) = v10;
    int v12 = (char *)operator new(0x40uLL, MEMORY[0x1E4FBA2D0]);
    int8x16_t v13 = v12;
    if (v12)
    {
      *(void *)int v12 = 850045863;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *((void *)v12 + 7) = 0;
    }
    *(void *)(DerivedStorage + 1072) = v12;
    int8x16_t v14 = (char *)operator new(0x40uLL, MEMORY[0x1E4FBA2D0]);
    if (!v14)
    {
      *(void *)(DerivedStorage + 24) = 0;
      atomic_store(0, (unsigned __int8 *)(DerivedStorage + 1080));
      uint64_t v4 = 4294954392;
      goto LABEL_20;
    }
    *(_OWORD *)int8x16_t v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    v14[21] = 1;
    *(_DWORD *)(v14 + 22) = 0;
    *(_DWORD *)(v14 + 25) = 0;
    v14[29] = 3;
    *((_OWORD *)v14 + 2) = 0u;
    *((_OWORD *)v14 + 3) = 0u;
    *(void *)(DerivedStorage + 24) = v14;
    uint64_t v4 = 4294954392;
    atomic_store(0, (unsigned __int8 *)(DerivedStorage + 1080));
    if (v11 && v13)
    {
      int8x16_t v15 = (char *)operator new(0xA20uLL, MEMORY[0x1E4FBA2D0]);
      if (v15)
      {
        int8x16_t v16 = v15;
        *(_OWORD *)int8x16_t v15 = 0u;
        *((_OWORD *)v15 + 1) = 0u;
        *(_DWORD *)(v15 + 34) = -1;
        *((_WORD *)v15 + 19) = -1;
        v15[40] = 0;
        *((_WORD *)v15 + 16) = 0;
        *((_DWORD *)v15 + 12) = -1;
        v15[52] = -1;
        v15[100] = 0;
        *((void *)v15 + 21) = 0;
        *((void *)v15 + 22) = 0;
        uint64_t v17 = (uint64_t)(v15 + 248);
        *((void *)v15 + 28) = 0;
        *((void *)v15 + 29) = 0;
        sub_1D0C6504C((uint64_t)(v15 + 248));
        *((void *)v16 + 31) = &unk_1F26F1270;
        v16[348] = 0;
        sub_1D0C62FE8(v17, 0xAF63E54C8601FBD7, "h", v16 + 305, 0);
        sub_1D0C62FE8(v17, 0xA9918CC5FA26ABAuLL, "help", v16 + 305, 0);
        sub_1D0C635C0(v17, 0, 0, (void *)v16 + 36);
        sub_1D0C635C0(v17, 0xAF63E24C8601F6BELL, "o", (void *)v16 + 37);
        sub_1D0C62FE8(v17, 0x81988191775D1F3uLL, "md5", v16 + 304, 0);
        sub_1D0C62FE8(v17, 0x35CA209DCAF9161DuLL, "verbose", v16 + 306, 0);
        sub_1D0C63350(v17, 0x23E5906728B4E66FuLL, "frames", (_DWORD *)v16 + 82, 0);
        sub_1D0C62FE8(v17, 0x1E5485EF2E9F9384uLL, "time", v16 + 332, 0);
        sub_1D0C63350(v17, 0x84C51CA356506FC0, "trials", (_DWORD *)v16 + 84, 1);
        sub_1D0C62FE8(v17, 0x832846984DBFE0D9, "time-frames", v16 + 340, 0);
        sub_1D0C63350(v17, 0x71F304EA62C01CBDuLL, "window", (_DWORD *)v16 + 86, 1);
        sub_1D0C62FE8(v17, 0x1D394CB372451B96uLL, "coding-order", v16 + 357, 0);
        sub_1D0C62FE8(v17, 0xDEE7D1A9CEA3053FLL, "deblock-per-ctb", v16 + 358, 0);
        sub_1D0C62FE8(v17, 0x5DAB01B8216B7BDDuLL, "scalar", v16 + 348, 0);
        sub_1D0C65DAC();
        sub_1D0C63350(v17, 0xC0AB56BF45863635, "max-threads", (_DWORD *)v16 + 78, dword_1EB671A24);
        sub_1D0C63350(v17, 0x1CEC94C4396EBFBuLL, "max-mpt-threads", (_DWORD *)v16 + 79, 3);
        sub_1D0C63350(v17, 0x90EC632032E98B72, "wpp-threads", (_DWORD *)v16 + 80, 0);
        sub_1D0C63350(v17, 0xDC868918FEB4BC88, "fps", (_DWORD *)v16 + 88, 0);
        sub_1D0C62FE8(v17, 0x54EB290A497D21C7uLL, "leaks", v16 + 360, 0);
        sub_1D0C62FE8(v17, 0xBA3720DECF81698ALL, "u16-yuv", v16 + 359, 0);
        sub_1D0C63350(v17, 0xC757C18968E4439DLL, "debug_facetime", (_DWORD *)v16 + 91, 0);
        sub_1D0C63450(v17, 0xFE31B357AB72A0FuLL, (uint64_t)"threading", (_DWORD *)v16 + 77, qword_1E6899D08, 0x3C0D17BAD169557BLL);
        sub_1D0C63450(v17, 0xF5B6EA8C35AC1E89, (uint64_t)"priority", (_DWORD *)v16 + 81, qword_1E6899DB0, 0xC76A095E1FFA22B6);
        sub_1D0C418C4(v17, 0xE061A2646338FACFLL, (uint64_t)"HEVCDecoderOptions", (void (*)(uint64_t, unint64_t))sub_1D0C65130, 0, 0);
        bzero(v16 + 368, 0x648uLL);
        sub_1D0C6492C((uint64_t)(v16 + 1976));
        *((_DWORD *)v16 + 598) = 1;
        *(_OWORD *)(v16 + 2424) = 0u;
        *(_OWORD *)(v16 + 2440) = 0u;
        *(_OWORD *)(v16 + 2456) = 0u;
        *((void *)v16 + 309) = 850045863;
        *((void *)v16 + 298) = 0;
        *((_OWORD *)v16 + 13) = 0u;
        *(_OWORD *)(v16 + 184) = 0u;
        *((_OWORD *)v16 + 150) = 0u;
        *((_OWORD *)v16 + 155) = 0u;
        *((_OWORD *)v16 + 156) = 0u;
        *((_OWORD *)v16 + 157) = 0u;
        *((_OWORD *)v16 + 158) = 0u;
        *((_OWORD *)v16 + 159) = 0u;
        *((_OWORD *)v16 + 160) = 0u;
        *(_OWORD *)(v16 + 2569) = 0u;
        v16[240] = 0;
        *((_DWORD *)v16 + 50) = 65793;
        *(void *)&v22.tm_sec = &unk_1F26F1560;
        *(void *)&v22.tm_hour = v16;
        *(void *)&v22.tm_wday = &v22;
        sub_1D0C63978(&v22, (void *)v16 + 247);
        sub_1D0C64604(&v22);
        *(void *)(DerivedStorage + 32) = v16;
        operator new();
      }
      *(void *)(DerivedStorage + 32) = 0;
      int8x16_t v18 = (uint64_t *)(DerivedStorage + 32);
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Decoder creation failed\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Decoder creation failed\n");
        if (*v18)
        {
          uint64_t v19 = sub_1D0CC6B5C(*v18);
          MEMORY[0x1D25F0230](v19, 0x10F2C4084AC0B2ELL);
        }
        int v20 = dword_1EB671A40;
        *int8x16_t v18 = 0;
        if (v20 >= 3)
        {
          uint16x8_t v5 = (FILE *)*MEMORY[0x1E4F143C8];
          uint8x16_t v6 = "Error creating LRP decoder\n";
          long long v7 = "Error creating LRP decoder\n";
          size_t v8 = 27;
          goto LABEL_4;
        }
      }
    }
  }
LABEL_20:
  *a3 = 0;
  return v4;
}

void sub_1D0C62F58(_Unwind_Exception *a1)
{
  if (STACK[0x228]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x228] + 8))(STACK[0x228]);
  }
  _Unwind_Resume(a1);
}

void sub_1D0C62FE8(uint64_t a1, unint64_t a2, const char *a3, unsigned char *a4, char a5)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  *a4 = a5;
  size_t v8 = *(void **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    uint64_t v11 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
    if (v11)
    {
      v11[2] = 0;
      *(void *)uint64_t v11 = &unk_1F26F1100;
      *((void *)v11 + 2) = a4;
      sub_1D0C630E8((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    unint64_t v10 = v8[4];
    if (a2 >= v10) {
      break;
    }
LABEL_5:
    size_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_6;
    }
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

uint64_t **sub_1D0C630E8(uint64_t **a1, unint64_t a2, _OWORD *a3)
{
  uint8x16_t v6 = a1 + 1;
  uint16x8_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint16x8_t v5 = *v7;
        uint8x16_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint16x8_t v5 = v7[1];
      if (!v5)
      {
        uint8x16_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v7 = a1 + 1;
LABEL_9:
    long long v9 = (uint64_t *)v7;
    long long v7 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v7 + 2) = *a3;
    v7[6] = 0;
    const char *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    const char *v6 = (uint64_t *)v7;
    unint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_1D0C631B8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_1D0C631B8(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      long long v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            long long v9 = (uint64_t **)a2[2];
          }
          else
          {
            long long v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *long long v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            long long v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *long long v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        long long v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *long long v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_1D0C63350(uint64_t a1, unint64_t a2, const char *a3, _DWORD *a4, int a5)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  *a4 = a5;
  int v8 = *(void **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    uint64_t v11 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
    if (v11)
    {
      v11[2] = 0;
      *(void *)uint64_t v11 = &unk_1F26F1190;
      *((void *)v11 + 2) = a4;
      sub_1D0C630E8((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    unint64_t v10 = v8[4];
    if (a2 >= v10) {
      break;
    }
LABEL_5:
    int v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_6;
    }
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

void sub_1D0C63450(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, void *a5, uint64_t a6)
{
  uint64_t v7 = a5;
  *(void *)&long long v19 = a2;
  *((void *)&v19 + 1) = a3;
  uint64_t v11 = *a5;
  if (!*a5)
  {
LABEL_7:
    uint64_t v17 = operator new(0x20uLL, MEMORY[0x1E4FBA2D0]);
    if (!v17) {
      return;
    }
    v17[2] = 0;
    *(void *)uint64_t v17 = &unk_1F26F12F0;
    *((void *)v17 + 2) = v7;
    *((void *)v17 + 3) = a4;
    if (v11)
    {
      while (!a6 || v11 != a6)
      {
        uint64_t v18 = v7[3];
        v7 += 3;
        uint64_t v11 = v18;
        if (!v18) {
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      if (a6)
      {
LABEL_14:
        sub_1D0C630E8((uint64_t **)(a1 + 8), a2, &v19)[6] = (uint64_t *)v17;
        return;
      }
    }
    *a4 = *((_DWORD *)v7 + 4);
    goto LABEL_14;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *a5;
  int8x16_t v14 = a5;
  while (1)
  {
    uint64_t v15 = v12;
    int8x16_t v16 = a5;
    if (v12) {
      break;
    }
LABEL_6:
    ++v12;
    int8x16_t v14 = &a5[3 * v12];
    uint64_t v13 = *v14;
    if (!*v14) {
      goto LABEL_7;
    }
  }
  while (v13 != *v16)
  {
    v16 += 3;
    if (!--v15) {
      goto LABEL_6;
    }
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of named enum '%s' and '%s' collide (%llx)! Change one of the names!\n", (const char *)v14[1], (const char *)v16[1], v13);
    syslog(27, "Hash of named enum '%s' and '%s' collide (%llx)! Change one of the names!\n", (const char *)v14[1], (const char *)v16[1], *v14);
  }
}

void sub_1D0C635C0(uint64_t a1, unint64_t a2, const char *a3, void *a4)
{
  *(void *)&long long v11 = a2;
  *((void *)&v11 + 1) = a3;
  *a4 = 0;
  uint64_t v7 = *(void **)(a1 + 16);
  if (!v7)
  {
LABEL_6:
    unint64_t v10 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
    if (v10)
    {
      v10[2] = 0;
      *(void *)unint64_t v10 = &unk_1F26F10A0;
      *((void *)v10 + 2) = a4;
      sub_1D0C630E8((uint64_t **)(a1 + 8), a2, &v11)[6] = (uint64_t *)v10;
    }
    return;
  }
  while (1)
  {
    unint64_t v9 = v7[4];
    if (a2 >= v9) {
      break;
    }
LABEL_5:
    uint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (v9 < a2)
  {
    ++v7;
    goto LABEL_5;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

uint64_t sub_1D0C636C0(uint64_t a1, unint64_t a2, const char *a3, char *a4, uint64_t a5, uint64_t a6)
{
  int v6 = a3;
  char v14 = 0;
  uint64_t result = sub_1D0C637CC(a1, a2, a3, a4, a5, a6, &v14);
  if (!result)
  {
    if (v14) {
      return 0;
    }
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unknown option '%s'\n", v6);
      syslog(27, "Unknown option '%s'\n", v6);
    }
    uint64_t result = 4294954386;
    if (a2)
    {
      if (v6)
      {
        size_t v9 = strlen(v6);
        if (!v9) {
          return 4294954386;
        }
        size_t v10 = v9 - 1;
        do
        {
          int v12 = *v6++;
          int v11 = v12;
          if (v12 < 0) {
            break;
          }
        }
        while (v10--);
        uint64_t result = 4294954386;
        if (v11 < 0 && dword_1EB671A40 >= 3)
        {
          fwrite("Option name contains non-ASCII characters, this is wrong!\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "Option name contains non-ASCII characters, this is wrong!\n");
          return 4294954386;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D0C637CC(uint64_t a1, unint64_t a2, const char *a3, char *__s, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  *a7 = 0;
  if (!a2
    && strlen(__s) >= 3
    && ((*__s << 16) | (__s[1] << 8) | __s[2]) == 0xE28094)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Option '%s' starts with the wrong dash, please retype it\n", __s);
      syslog(27, "Option '%s' starts with the wrong dash, please retype it\n");
    }
    return 4294954394;
  }
  int8x16_t v16 = *(void **)(a1 + 16);
  uint64_t v15 = (void *)(a1 + 16);
  char v14 = v16;
  if (!v16) {
    return 0;
  }
  uint64_t v17 = v15;
  do
  {
    unint64_t v18 = v14[4];
    BOOL v19 = v18 >= a2;
    if (v18 >= a2) {
      int v20 = v14;
    }
    else {
      int v20 = v14 + 1;
    }
    if (v19) {
      uint64_t v17 = v14;
    }
    char v14 = (void *)*v20;
  }
  while (*v20);
  if (v17 == v15 || a2 < v17[4]) {
    return 0;
  }
  tm v22 = (unsigned int *)v17[6];
  if (a5 == -1) {
    a5 = v22[2];
  }
  *a7 = 1;
  uint64_t result = (*(uint64_t (**)(unsigned int *, char *, uint64_t, uint64_t))(*(void *)v22 + 8))(v22, __s, a5, a6);
  if (result == -12902 && dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid parameter '%s' to '%s'\n", __s, a3);
    syslog(27, "Invalid parameter '%s' to '%s'\n");
    return 4294954394;
  }
  return result;
}

void *sub_1D0C63978(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint16x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1D0C63BD8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1D0C72464(a1);
}

void sub_1D0C63BEC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26F1E98;
}

uint64_t sub_1D0C63C0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26F1560;
  a2[1] = v2;
  return result;
}

void VCPHEVCRegisterDecoder()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB671A90, memory_order_acquire) != -1)
  {
    uint64_t v2 = &v0;
    unint64_t v1 = &v2;
    std::__call_once(&qword_1EB671A90, &v1, (void (__cdecl *)(void *))sub_1D0C3FDE0);
  }
}

void sub_1D0C63C90(void **a1, unint64_t a2)
{
  uint16x8_t v5 = (char *)*a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6) {
      a1[1] = &v5[248 * a2];
    }
  }
  else
  {
    int v8 = a1[2];
    if (0xEF7BDEF7BDEF7BDFLL * ((v8 - (unsigned char *)v4) >> 3) >= v7)
    {
      int v31 = (_OWORD *)((char *)v4 + 248 * v7);
      do
      {
        *(_OWORD *)((char *)v4 + 153) = 0uLL;
        v4[8] = 0uLL;
        v4[9] = 0uLL;
        v4[6] = 0uLL;
        v4[7] = 0uLL;
        v4[4] = 0uLL;
        v4[5] = 0uLL;
        v4[2] = 0uLL;
        v4[3] = 0uLL;
        *uint64_t v4 = 0uLL;
        v4[1] = 0uLL;
        *(_OWORD *)((char *)v4 + 170) = 0uLL;
        *(_OWORD *)((char *)v4 + 186) = 0uLL;
        *(_OWORD *)((char *)v4 + 202) = 0uLL;
        *(_OWORD *)((char *)v4 + 218) = 0uLL;
        *(_OWORD *)((char *)v4 + 230) = 0uLL;
        uint64_t v4 = (_OWORD *)((char *)v4 + 248);
      }
      while (v4 != v31);
      a1[1] = v31;
    }
    else
    {
      if (a2 > 0x108421084210842) {
        sub_1D0C8D71C();
      }
      unint64_t v9 = 0xEF7BDEF7BDEF7BDFLL * ((v8 - v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x84210842108421) {
        unint64_t v11 = 0x108421084210842;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 > 0x108421084210842) {
        sub_1D0C6AC2C();
      }
      int v12 = (char *)operator new(248 * v11);
      uint64_t v13 = &v12[248 * v6];
      char v14 = &v12[248 * a2];
      uint64_t v15 = v13;
      do
      {
        *(_OWORD *)(v15 + 153) = 0uLL;
        *((_OWORD *)v15 + 8) = 0uLL;
        *((_OWORD *)v15 + 9) = 0uLL;
        *((_OWORD *)v15 + 6) = 0uLL;
        *((_OWORD *)v15 + 7) = 0uLL;
        *((_OWORD *)v15 + 4) = 0uLL;
        *((_OWORD *)v15 + 5) = 0uLL;
        *((_OWORD *)v15 + 2) = 0uLL;
        *((_OWORD *)v15 + 3) = 0uLL;
        *(_OWORD *)uint64_t v15 = 0uLL;
        *((_OWORD *)v15 + 1) = 0uLL;
        *(_OWORD *)(v15 + 170) = 0uLL;
        *(_OWORD *)(v15 + 186) = 0uLL;
        *(_OWORD *)(v15 + 202) = 0uLL;
        *(_OWORD *)(v15 + 218) = 0uLL;
        *(_OWORD *)(v15 + 230) = 0uLL;
        v15 += 248;
      }
      while (v15 != v14);
      int8x16_t v16 = &v12[248 * v11];
      unint64_t v18 = (char *)*a1;
      uint64_t v17 = (char *)a1[1];
      if (v17 != *a1)
      {
        do
        {
          long long v19 = *(_OWORD *)(v17 - 248);
          long long v20 = *(_OWORD *)(v17 - 232);
          long long v21 = *(_OWORD *)(v17 - 216);
          *(_OWORD *)(v13 - 200) = *(_OWORD *)(v17 - 200);
          *(_OWORD *)(v13 - 216) = v21;
          *(_OWORD *)(v13 - 232) = v20;
          *(_OWORD *)(v13 - 248) = v19;
          long long v22 = *(_OWORD *)(v17 - 184);
          long long v23 = *(_OWORD *)(v17 - 168);
          long long v24 = *(_OWORD *)(v17 - 152);
          *(_OWORD *)(v13 - 136) = *(_OWORD *)(v17 - 136);
          *(_OWORD *)(v13 - 152) = v24;
          *(_OWORD *)(v13 - 168) = v23;
          *(_OWORD *)(v13 - 184) = v22;
          long long v25 = *(_OWORD *)(v17 - 120);
          long long v26 = *(_OWORD *)(v17 - 104);
          long long v27 = *(_OWORD *)(v17 - 88);
          *(_OWORD *)(v13 - 72) = *(_OWORD *)(v17 - 72);
          *(_OWORD *)(v13 - 88) = v27;
          *(_OWORD *)(v13 - 104) = v26;
          *(_OWORD *)(v13 - 120) = v25;
          long long v28 = *(_OWORD *)(v17 - 56);
          long long v29 = *(_OWORD *)(v17 - 40);
          long long v30 = *(_OWORD *)(v17 - 24);
          *(void *)(v13 - 10) = *(void *)(v17 - 10);
          *(_OWORD *)(v13 - 24) = v30;
          *(_OWORD *)(v13 - 40) = v29;
          *(_OWORD *)(v13 - 56) = v28;
          v13 -= 248;
          v17 -= 248;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*a1;
      }
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v16;
      if (v17)
      {
        operator delete(v17);
      }
    }
  }
}

void sub_1D0C63EF0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    uint16x8_t v5 = (void *)a1[1];
    unint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      int8x16_t v41 = (char *)sub_1D0C3FC20(v40);
      uint8x16_t v42 = &v41[8 * (v40 >> 2)];
      uint8x16_t v44 = &v41[8 * v43];
      uint8x16_t v45 = (uint64_t *)a1[1];
      unint64_t v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        unint64_t v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        uint8x16_t v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)uint8x16_t v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    unint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  long long v20 = (char *)a1[2];
  long long v19 = (char *)a1[3];
  long long v21 = (char *)*a1;
  long long v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    long long v25 = operator new(0x1000uLL);
    long long v26 = v25;
    if (v19 != v20)
    {
      *(void *)long long v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      uint64_t v53 = (char *)sub_1D0C3FC20(v51);
      long long v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      int v55 = (uint64_t *)a1[1];
      uint64_t v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        uint64_t v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        long long v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)long long v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      long long v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        long long v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    unint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)unint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      int8x16_t v41 = (char *)sub_1D0C3FC20(v85);
      uint8x16_t v42 = &v41[8 * (v85 >> 2)];
      uint8x16_t v44 = &v41[8 * v86];
      int16x8_t v87 = (uint64_t *)a1[1];
      unint64_t v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        unint64_t v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        int32x4_t v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)int32x4_t v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      uint8x16_t v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        unint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  long long v29 = (char *)sub_1D0C3FC20(v28);
  uint64_t v31 = v30;
  int8x16_t v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  uint8x16_t v34 = operator new(0x1000uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    long long v64 = (char *)sub_1D0C3FC20(v63);
    int8x16_t v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)int8x16_t v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    long long v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      long long v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        long long v75 = (char *)sub_1D0C3FC20(v74);
        uint64_t v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        long long v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          long long v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          int32x4_t v80 = v68;
          int32x4_t v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)int32x4_t v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        uint64_t v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          long long v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      uint64_t v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  int16x8_t v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_1D0C643B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

char *sub_1D0C643E0(void *a1)
{
  unint64_t v2 = (char *)operator new(0x1D0uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(void *)unint64_t v2 = &unk_1F26F1698;
  *(void *)(v2 + 31) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *((_WORD *)v2 + 44) = 0;
  *(_OWORD *)(v2 + 92) = 0u;
  *(_OWORD *)(v2 + 108) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  *(_OWORD *)(v2 + 140) = 0u;
  *(_OWORD *)(v2 + 156) = 0u;
  *(_OWORD *)(v2 + 172) = 0u;
  *((_WORD *)v2 + 94) = 0;
  *((void *)v2 + 24) = 0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(void *)(v2 + 213) = 0;
  *(_WORD *)(v2 + 221) = 257;
  *((_WORD *)v2 + 137) = 0;
  BOOL v3 = v2 + 308;
  *((_DWORD *)v2 + 80) = 0;
  *((_WORD *)v2 + 162) = 0;
  v2[326] = 0;
  v2[328] = 0;
  unint64_t v4 = v2 + 330;
  *(_OWORD *)(v2 + 223) = 0u;
  *(_WORD *)(v2 + 239) = 0;
  *(_OWORD *)(v2 + 244) = 0u;
  *((void *)v2 + 37) = 0;
  v2[304] = 0;
  v2[316] = 0;
  v2[456] = 0;
  *((void *)v2 + 56) = 0;
  *((_OWORD *)v2 + 27) = 0u;
  a1[1] = v2;
  *((void *)v2 + 3) = 0;
  uint64_t result = v2 + 24;
  *(void *)(result + 236) = 0;
  *(void *)(result + 241) = 0;
  *((_OWORD *)result + 16) = 0u;
  *BOOL v3 = 0;
  *(_DWORD *)(v4 + 95) = 0;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *a1 = result;
  return result;
}

uint64_t sub_1D0C644DC(uint64_t a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = 0u;
  if (v3) {
    sub_1D0C4C984(v3);
  }
  return a1;
}

void sub_1D0C6457C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1D0C645F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D0D02CBC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1D0C64604(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1D0C64688(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F1410;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v2 = a1 + 324;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 225) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 242) = 0u;
  *(_OWORD *)(a1 + 258) = 0u;
  *(_OWORD *)(a1 + 274) = 0u;
  *(_OWORD *)(a1 + 290) = 0u;
  *(_OWORD *)(a1 + 302) = 0u;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(void *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(void *)(a1 + 1624) = 0;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(void *)(a1 + 1656) = 0;
  *(_OWORD *)(a1 + 1640) = 0u;
  bzero((void *)(a1 + 1672), 0x220uLL);
  *(unsigned char *)(a1 + 659) = 1;
  *(_WORD *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 50) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 58) = 258;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 559) = 0;
  *(unsigned char *)(a1 + 567) = 1;
  *(_DWORD *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 572) = 0;
  *(_WORD *)(a1 + 600) = 0;
  *(_OWORD *)(v2 + 196) = xmmword_1D0D7F1F0;
  *(_OWORD *)(v2 + 212) = xmmword_1D0D7F1F0;
  *(_DWORD *)(a1 + 2256) = 0;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(unsigned char *)(a1 + 1600) = 0;
  return a1;
}

double sub_1D0C647D4(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F13D0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = a1;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 141) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 527) = 0;
  *(void *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 712) = 1;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 1016) = 0;
  *(void *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(void *)(a1 + 1040) = 850045863;
  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1104) = 1018212795;
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 42) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 548) = 0;
  *(unsigned char *)(a1 + 597) = 0;
  *(unsigned char *)(a1 + 1172) = 0;
  *(unsigned char *)(a1 + 748) = 0;
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 672) = -1;
  *(void *)(a1 + 664) = -1;
  *(unsigned char *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  return result;
}

uint64_t sub_1D0C6492C(uint64_t a1)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v3[0] = &unk_1F26F1E98;
  v3[3] = v3;
  sub_1D0C63978(v3, (void *)a1);
  sub_1D0C64604(v3);
  return a1;
}

void sub_1D0C64A10(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 163))
  {
    int v3 = 0;
    int v4 = 0;
    int v5 = *(unsigned __int16 *)(a1 + 170)
       + 1
       - 2 * *(unsigned __int8 *)(a1 + 168) * (*(unsigned __int16 *)(a1 + 170) + 1);
    unsigned int v6 = *(unsigned __int16 *)(a1 + 172);
    unsigned int v7 = *(unsigned __int16 *)(a1 + 174);
    uint64_t v8 = *(unsigned __int8 *)(a2 + 162) + 1;
    uint64_t v9 = (__int16 *)(a2 + 128);
    do
    {
      if ((v6 | v7))
      {
        char v10 = v6 & 1;
        int v11 = v5 + *v9;
        if (v11 < 0)
        {
          uint64_t v13 = a1 + 4 * v4;
          *(_WORD *)uint64_t v13 = v11;
          *(unsigned char *)(v13 + 2) = v10;
          ++v4;
        }
        else
        {
          uint64_t v12 = a1 + 4 * v3;
          *(_WORD *)(v12 + 64) = v11;
          *(unsigned char *)(v12 + 66) = v10;
          ++v3;
        }
      }
      v6 >>= 1;
      v7 >>= 1;
      ++v9;
      --v8;
    }
    while (v8);
    *(unsigned char *)(a1 + 160) = v4;
    *(unsigned char *)(a1 + 161) = v3;
    unint64_t v14 = v4;
    uint8x16_t v45 = sub_1D0D7BADC;
    if (v4 < 0x81u)
    {
      uint64_t v15 = 0;
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v15 = (int *)sub_1D0D7B5EC(v4);
      uint64_t v17 = v16;
    }
    sub_1D0D7B650(a1, (int *)(a1 + 4 * v14), (uint64_t (**)(int *, int *))&v45, v14, v15, v17);
    if (v15) {
      operator delete(v15);
    }
    unint64_t v34 = *(unsigned __int8 *)(a1 + 161);
    uint8x16_t v45 = sub_1D0D7B8C8;
    if (v34 < 0x81)
    {
      long long v35 = 0;
      uint64_t v37 = 0;
    }
    else
    {
      long long v35 = (int *)sub_1D0D7B5EC(v34);
      uint64_t v37 = v36;
    }
    sub_1D0D7B650(a1 + 64, (int *)(a1 + 64 + 4 * v34), (uint64_t (**)(int *, int *))&v45, v34, v35, v37);
    if (v35) {
      operator delete(v35);
    }
    LODWORD(v20) = *(unsigned __int8 *)(a1 + 160);
    if (*(unsigned char *)(a1 + 160))
    {
LABEL_27:
      uint64_t v38 = 0;
      do
      {
        *(_WORD *)(a1 + v38 + 128) = *(_WORD *)(a1 + 2 * v38);
        v38 += 2;
      }
      while (2 * v20 != v38);
    }
  }
  else
  {
    unsigned int v18 = *(unsigned __int16 *)(a1 + 242);
    int v19 = ~*(unsigned __int16 *)(a1 + 178);
    *(_WORD *)a1 = ~*(_WORD *)(a1 + 178);
    *(unsigned char *)(a1 + 2) = v18 & 1;
    unint64_t v20 = *(unsigned __int8 *)(a1 + 176);
    if (v20 >= 2)
    {
      unint64_t v21 = v20 - 1;
      long long v22 = (unsigned char *)(a1 + 6);
      unint64_t v23 = (unsigned __int16 *)(a1 + 180);
      do
      {
        int v24 = (v18 >> 1) & 1;
        unsigned int v18 = (unsigned __int16)v18 >> 1;
        int v25 = *v23++;
        v19 += ~v25;
        *((_WORD *)v22 - 1) = v19;
        *long long v22 = v24;
        v22 += 4;
        --v21;
      }
      while (v21);
    }
    unsigned int v26 = *(unsigned __int16 *)(a1 + 244);
    int v27 = *(unsigned __int16 *)(a1 + 210) + 1;
    *(_WORD *)(a1 + 64) = *(_WORD *)(a1 + 210) + 1;
    *(unsigned char *)(a1 + 66) = v26 & 1;
    unint64_t v28 = *(unsigned __int8 *)(a1 + 177);
    if (v28 >= 2)
    {
      unint64_t v29 = v28 - 1;
      uint64_t v30 = (unsigned char *)(a1 + 70);
      uint64_t v31 = (unsigned __int16 *)(a1 + 212);
      do
      {
        int v32 = (v26 >> 1) & 1;
        unsigned int v26 = (unsigned __int16)v26 >> 1;
        int v33 = *v31++;
        v27 += v33 + 1;
        *((_WORD *)v30 - 1) = v27;
        *uint64_t v30 = v32;
        v30 += 4;
        --v29;
      }
      while (v29);
    }
    *(unsigned char *)(a1 + 160) = v20;
    *(unsigned char *)(a1 + 161) = v28;
    if (v20) {
      goto LABEL_27;
    }
  }
  char v39 = *(unsigned char *)(a1 + 161);
  if (v39)
  {
    unint64_t v40 = (_WORD *)(a1 + 2 * v20 + 128);
    int8x16_t v41 = (__int16 *)(a1 + 64);
    uint64_t v42 = *(unsigned __int8 *)(a1 + 161);
    do
    {
      __int16 v43 = *v41;
      v41 += 2;
      *v40++ = v43;
      --v42;
    }
    while (v42);
  }
  unsigned __int8 v44 = v39 + v20;
  *(unsigned char *)(a1 + 162) = v44;
  if (v44 <= 0xFu) {
    bzero((void *)(a1 + 2 * v44 + 128), ((30 - 2 * v44) & 0x1FFFFFFFELL) + 2);
  }
}

void sub_1D0C64CD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0C64CF4(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 *)(a1 + 196);
  if (v1 >= 0x10)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "vps_video_parameter_set_id_ of %lld is out of range (%lld, %lld)\n", v1, 0, 15);
      syslog(27, "vps_video_parameter_set_id_ of %lld is out of range (%lld, %lld)\n");
    }
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 200);
  if (v2 >= 7)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "vps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n", v2, 0, 6);
      syslog(27, "vps_max_sub_layers_minus1_ of %lld is out of range (%lld, %lld)\n");
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 202)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 200);
  }
  uint64_t v4 = 4 * v3 + 220;
  uint64_t v5 = v2 + 1;
  do
  {
    uint64_t v6 = a1 + v3;
    uint64_t v7 = *(unsigned __int8 *)(a1 + v3 + 203);
    if (v7 >= 0x10)
    {
      if (dword_1EB671A40 < 3) {
        return 0;
      }
      uint64_t v13 = "vps_max_dec_pic_buffering_minus1_[idx] of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "vps_max_dec_pic_buffering_minus1_[idx] of %lld is out of range (%lld, %lld)\n", v7, 0, 15);
      uint64_t v14 = *(unsigned __int8 *)(v6 + 203);
      uint64_t v15 = 15;
LABEL_25:
      syslog(27, v13, v14, 0, v15);
      return 0;
    }
    uint64_t v8 = *(unsigned __int8 *)(v6 + 210);
    if (v8 > v7)
    {
      if (dword_1EB671A40 < 3) {
        return 0;
      }
      uint64_t v13 = "vps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "vps_max_num_reorder_pics_[idx] of %lld is out of range (%lld, %lld)\n", v8, 0, v7);
      uint64_t v14 = *(unsigned __int8 *)(v6 + 210);
      uint64_t v15 = *(unsigned __int8 *)(v6 + 203);
      goto LABEL_25;
    }
    uint64_t v9 = *(unsigned int *)(a1 + v4);
    if (v9 >= 0xFFFFFFFE)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "vps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n", v9, 0, 4294967293);
        syslog(27, "vps_max_latency_increase_plus1_[idx] of %lld is out of range (%lld, %lld)\n");
      }
      return 0;
    }
    ++v3;
    v4 += 4;
  }
  while (v5 != v3);
  unint64_t v10 = *(unsigned __int16 *)(a1 + 250);
  if (v10 >= 0x400)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "vps_num_layer_sets_minus1_ of %lld is out of range (%lld, %lld)\n", v10, 0, 1023);
      syslog(27, "vps_num_layer_sets_minus1_ of %lld is out of range (%lld, %lld)\n");
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 280)) {
      return 1;
    }
    unint64_t v11 = *(unsigned __int16 *)(a1 + 300);
    if (v11 < 0x401) {
      return 1;
    }
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "vps_num_hrd_parameters_ of %lld is out of range (%lld, %lld)\n", v11, 0, 1024);
      syslog(27, "vps_num_hrd_parameters_ of %lld is out of range (%lld, %lld)\n");
    }
  }
  return 0;
}

uint64_t sub_1D0C64FA0(uint64_t a1, unsigned char *a2, int a3, unsigned char *a4)
{
  if (a2)
  {
    unint64_t v4 = 0xCBF29CE484222325;
    char v5 = *a2;
    if (*a2)
    {
      uint64_t v6 = a2 + 1;
      do
      {
        unint64_t v4 = 0x100000001B3 * (v4 ^ v5);
        int v7 = *v6++;
        char v5 = v7;
      }
      while (v7);
    }
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  *a4 = 1;
  if (*(_DWORD *)(a1 + 8) != a3) {
    return 0;
  }
  uint64_t v8 = *(uint64_t **)(a1 + 16);
  uint64_t v9 = *v8;
  if (*v8)
  {
    while (!v4 || v9 != v4)
    {
      uint64_t v10 = v8[3];
      v8 += 3;
      uint64_t v9 = v10;
      if (!v10) {
        goto LABEL_14;
      }
    }
    goto LABEL_17;
  }
LABEL_14:
  if (!v4)
  {
LABEL_17:
    uint64_t v11 = 0;
    **(_DWORD **)(a1 + 24) = *((_DWORD *)v8 + 4);
    return v11;
  }
  return 4294954394;
}

uint64_t sub_1D0C6504C(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F26F1250;
  *(void *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  sub_1D0C63450(a1, 0xAAB8A388324B35B9, (uint64_t)"loglevel", &dword_1EB671A40, qword_1E6899B20, 0x9F7452DD75D54D31);
  sub_1D0C418C4(a1, 0x78039475C6A50527uLL, (uint64_t)"config", (void (*)(uint64_t, unint64_t))sub_1D0C656C0, 0, 1);
  return a1;
}

void sub_1D0C6511C(_Unwind_Exception *a1)
{
  sub_1D0CC77D4(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C65130(uint64_t a1, int a2, const char *a3, char *__s1)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (!__s1) {
    return 0;
  }
  char v5 = strdup(__s1);
  if (!v5) {
    return 4294954392;
  }
  uint64_t v6 = v5;
  int v7 = 0;
  __stringp = v5;
  unint64_t v51 = 0;
  uint8x16_t v48 = v5;
  uint64_t v47 = a3;
  while (1)
  {
    uint64_t v8 = strsep(&__stringp, "\r\n");
    unint64_t v51 = v8;
    if (!v8)
    {
      uint64_t v45 = 0;
      goto LABEL_86;
    }
    while (1)
    {
      int v9 = *v8;
      if (v9 != 32 && v9 != 9) {
        break;
      }
      unint64_t v51 = ++v8;
    }
    sub_1D0CC7C80(v8);
    uint64_t v11 = v51;
    int v12 = *v51;
    if (!*v51 || v12 == 35) {
      goto LABEL_79;
    }
    if (v12 == 45) {
      break;
    }
    __dst[0] = 0;
    long long v35 = strsep(&v51, ":");
    uint64_t v36 = v35;
    if (!v35)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d: Parse error (expected <option> : <argument>)\n", a3, v7);
        syslog(27, "%s:%d: Parse error (expected <option> : <argument>)\n", a3, v7);
      }
      goto LABEL_92;
    }
    sub_1D0CC7C80(v35);
    for (i = v51; ; unint64_t v51 = i)
    {
      int v38 = *i;
      if (v38 != 32 && v38 != 9) {
        break;
      }
      ++i;
    }
    char v40 = *v36;
    unint64_t v41 = 0xCBF29CE484222325;
    if (*v36)
    {
      uint64_t v42 = (unsigned __int8 *)(v36 + 1);
      do
      {
        unint64_t v41 = 0x100000001B3 * (v41 ^ v40);
        int v43 = *v42++;
        char v40 = v43;
      }
      while (v43);
    }
    if (v41 <= 1) {
      unint64_t v44 = 1;
    }
    else {
      unint64_t v44 = v41;
    }
    uint64_t v45 = sub_1D0C636C0(a1, v44, v36, i, 0xFFFFFFFFLL, (uint64_t)__dst);
    if (v45) {
      goto LABEL_86;
    }
LABEL_79:
    ++v7;
  }
  uint64_t v85 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v54 = 0u;
  unint64_t v13 = 1;
  uint64_t v53 = a3;
  do
  {
    while (1)
    {
      int v14 = *v11++;
      if (v14 != 32 && v14 != 9) {
        break;
      }
      unint64_t v51 = v11;
    }
    (&v53)[v13] = strsep(&v51, " \t");
    int v16 = v13 + 1;
    uint64_t v11 = v51;
    if (v13 > 0x7E) {
      break;
    }
    ++v13;
  }
  while (v51);
  if (v51)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d: Too many options (max %d)\n", v47, v7, 128);
      syslog(27, "%s:%d: Too many options (max %d)\n", v47, v7, 128);
    }
LABEL_92:
    uint64_t v45 = 4294954394;
    goto LABEL_86;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 32);
  if ((v17 & 0x80000000) != 0)
  {
LABEL_63:
    uint64_t v6 = v48;
    a3 = v47;
    goto LABEL_79;
  }
  while (v16 < 2)
  {
LABEL_61:
    BOOL v34 = __OFSUB__(v17, 1);
    uint64_t v17 = (v17 - 1);
    if ((int)v17 < 0 != v34) {
      goto LABEL_63;
    }
  }
  int v18 = 1;
  while (2)
  {
    char v52 = 0;
    int v19 = (char *)(&v53)[v18];
    size_t v20 = strlen(v19);
    if (!v20)
    {
LABEL_60:
      if (++v18 >= v16) {
        goto LABEL_61;
      }
      continue;
    }
    break;
  }
  if (*v19 != 45)
  {
    uint64_t v45 = sub_1D0C636C0(a1, 0, 0, v19, v17, (uint64_t)&v52);
    if (v45) {
      goto LABEL_85;
    }
    goto LABEL_60;
  }
  unint64_t v21 = &v19[v20];
  size_t v22 = v20 - 1;
  do
  {
    if (!v22)
    {
      unsigned int v26 = strchr(v21, 61);
      if (!v26) {
        goto LABEL_60;
      }
LABEL_37:
      if ((unint64_t)(v26 - v21) >= 0x3FF)
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "'%s' option too long!\n", v21);
          syslog(27, "'%s' option too long!\n", v21);
        }
        goto LABEL_60;
      }
      int v19 = __dst;
      memcpy(__dst, v21, v26 - v21);
      __dst[v26 - v21] = 0;
      LOBYTE(v23) = __dst[0];
      if (!__dst[0]) {
        goto LABEL_60;
      }
      int v27 = v26 + 1;
      int v28 = 1;
      goto LABEL_47;
    }
    int v24 = *++v19;
    int v23 = v24;
    --v22;
  }
  while (v24 == 45);
  int v25 = strchr(v19, 61);
  if (v25)
  {
    unsigned int v26 = v25;
    unint64_t v21 = v19;
    goto LABEL_37;
  }
  if (v18 + 1 >= v16) {
    int v27 = 0;
  }
  else {
    int v27 = (char *)(&v53)[v18 + 1];
  }
  int v28 = 0;
  unint64_t v29 = 0xCBF29CE484222325;
  if (v23)
  {
LABEL_47:
    uint64_t v30 = 1;
    unint64_t v29 = 0xCBF29CE484222325;
    do
    {
      unint64_t v29 = 0x100000001B3 * (v29 ^ (char)v23);
      int v23 = v19[v30++];
    }
    while (v23);
  }
  if (v29 <= 1) {
    unint64_t v31 = 1;
  }
  else {
    unint64_t v31 = v29;
  }
  uint64_t v45 = sub_1D0C636C0(a1, v31, v19, v27, v17, (uint64_t)&v52);
  if (!v45)
  {
    if (v52) {
      int v32 = v28;
    }
    else {
      int v32 = 1;
    }
    v18 += v32 ^ 1;
    if (v52) {
      int v33 = 0;
    }
    else {
      int v33 = v28;
    }
    if (v33 != 1) {
      goto LABEL_60;
    }
    if (dword_1EB671A40 >= 6) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Option '%s' is invalid!\n", (&v53)[v18]);
    }
    uint64_t v45 = 4294954394;
  }
LABEL_85:
  uint64_t v6 = v48;
LABEL_86:
  free(v6);
  return v45;
}

void sub_1D0C65694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t sub_1D0C656C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  v21[19] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    if (*(unsigned char *)(a1 + 36))
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Config file within a config file not supported!\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Config file within a config file not supported!\n");
      }
      return 4294954394;
    }
    else
    {
      *(unsigned char *)(a1 + 36) = 1;
      sub_1D0C98350(v19);
      if (v20[15])
      {
        sub_1D0C71D34((uint64_t)v16);
        std::ostream::operator<<();
        std::stringbuf::str();
        unint64_t v6 = 0xCBF29CE484222325;
        char v7 = *(unsigned char *)v4;
        if (*(unsigned char *)v4)
        {
          uint64_t v8 = (unsigned __int8 *)(v4 + 1);
          do
          {
            unint64_t v6 = 0x100000001B3 * (v6 ^ v7);
            int v9 = *v8++;
            char v7 = v9;
          }
          while (v9);
        }
        if (v6 <= 1) {
          int v10 = 1;
        }
        else {
          int v10 = v6;
        }
        if (v15 >= 0) {
          p_p = (char *)&__p;
        }
        else {
          p_p = (char *)__p;
        }
        uint64_t v4 = sub_1D0C65130(a1, v10, (const char *)v4, p_p);
        if (v15 < 0) {
          operator delete(__p);
        }
        v16[0] = *MEMORY[0x1E4FBA408];
        uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 72);
        *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
        v16[2] = v12;
        v16[3] = MEMORY[0x1E4FBA470] + 16;
        if (v17 < 0) {
          operator delete((void *)v16[11]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1D25F01B0](&v18);
      }
      else
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open config file '%s'\n", (const char *)v4);
          syslog(27, "Unable to open config file '%s'\n", (const char *)v4);
        }
        uint64_t v4 = 4294954394;
      }
      v19[0] = *MEMORY[0x1E4FBA3F8];
      *(uint64_t *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
      MEMORY[0x1D25F0010](v20);
      std::istream::~istream();
      MEMORY[0x1D25F01B0](v21);
    }
  }
  return v4;
}

void sub_1D0C65A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
}

void sub_1D0C65A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 2408))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Callback already set and can't be changed!\n", 0x2BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Callback already set and can't be changed!\n");
    }
  }
  else
  {
    *(void *)(a1 + 2408) = a2;
    *(void *)(a1 + 2416) = a3;
  }
}

uint64_t sub_1D0C65AFC(uint64_t a1, long long *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 184);
  uint64_t v2 = *(void *)(a1 + 184);
  long long v4 = *a2;
  *(void *)(a1 + 2552) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 2536) = v4;
  if (v2) {
    return 0;
  }
  char v7 = (unsigned __int8 **)(a1 + 1920);
  uint64_t v8 = (unsigned __int8 **)(a1 + 624);
  int v9 = -1;
  while (1)
  {
    int v10 = *v8;
    if (*v8)
    {
      if (*((_DWORD *)v10 + 51) - (*((_DWORD *)v10 + 533) + *((_DWORD *)v10 + 534)) == *(_DWORD *)(a1 + 2552)
        && *((_DWORD *)v10 + 52) - (*((_DWORD *)v10 + 535) + *((_DWORD *)v10 + 536)) == *(_DWORD *)(a1 + 2556))
      {
        break;
      }
    }
    if (v9 < 0 && v10 != 0) {
      int v9 = v2;
    }
    ++v2;
    v8 += 2;
    if (v2 == 16)
    {
      uint64_t v12 = 0;
      goto LABEL_15;
    }
  }
  uint64_t result = sub_1D0C43454(v8, v3 + 294, v3);
  if (result) {
    return result;
  }
  uint64_t v12 = *v3;
  if (*v3) {
    goto LABEL_23;
  }
LABEL_15:
  if ((v9 & 0x80000000) == 0)
  {
    if (dword_1EB671A40 >= 4)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Didn't find an SPS matching dimensions %dx%d, using SPS %d\n", *(_DWORD *)(a1 + 2552), *(_DWORD *)(a1 + 2556), v9);
      syslog(28, "Didn't find an SPS matching dimensions %dx%d, using SPS %d\n", *(_DWORD *)(a1 + 2552), *(_DWORD *)(a1 + 2556), v9);
    }
    if (v9 <= 0xF) {
      unint64_t v13 = (unsigned __int8 **)(a1 + 16 * v9 + 624);
    }
    else {
      unint64_t v13 = v7;
    }
    uint64_t result = sub_1D0C43454(v13, v3 + 294, v3);
    if (result) {
      return result;
    }
    uint64_t v12 = *v3;
  }
LABEL_23:
  if (v12 || !*(void *)(a1 + 2544)) {
    return 0;
  }
  if (dword_1EB671A40 >= 3)
  {
    fwrite("No SPS found in hvcC!\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "No SPS found in hvcC!\n");
  }
  return 4294954387;
}

int8x16_t sub_1D0C65CC0(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  v22[0] = *a2;
  v22[1] = v5;
  do
  {
    int8x8_t v6 = *(int8x8_t *)((char *)v22 + v4);
    int8x16_t v7 = vdupq_lane_s8(v6, 0);
    int8x16_t v8 = vdupq_lane_s8(v6, 1);
    int8x16_t v9 = vdupq_lane_s8(v6, 2);
    int8x16_t v10 = vdupq_lane_s8(v6, 3);
    int8x16_t v11 = vdupq_lane_s8(v6, 4);
    int8x16_t v12 = vdupq_lane_s8(v6, 5);
    int8x16_t v13 = vdupq_lane_s8(v6, 6);
    int8x16_t result = vdupq_lane_s8(v6, 7);
    *a4 = v7;
    a4[1] = v7;
    char v15 = (int8x16_t *)((char *)a4 + a3);
    *char v15 = v8;
    v15[1] = v8;
    int v16 = (int8x16_t *)((char *)a4 + a3 + a3);
    *int v16 = v9;
    v16[1] = v9;
    char v17 = (int8x16_t *)((char *)v16 + a3);
    int8x16_t *v17 = v10;
    v17[1] = v10;
    uint64_t v18 = (int8x16_t *)((char *)v17 + a3);
    *uint64_t v18 = v11;
    v18[1] = v11;
    int v19 = (int8x16_t *)((char *)v18 + a3);
    *int v19 = v12;
    v19[1] = v12;
    size_t v20 = (int8x16_t *)((char *)v19 + a3);
    *size_t v20 = v13;
    v20[1] = v13;
    unint64_t v21 = (int8x16_t *)((char *)v20 + a3);
    *unint64_t v21 = result;
    v21[1] = result;
    a4 = (int8x16_t *)((char *)v21 + a3);
    v4 += 8;
  }
  while (v4 != 32);
  return result;
}

void sub_1D0C65D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  int8x8_t v6 = (_OWORD *)(a4 + 16);
  int v7 = 32;
  do
  {
    *(v6 - 1) = v4;
    _OWORD *v6 = v5;
    int8x8_t v6 = (_OWORD *)((char *)v6 + a3);
    --v7;
  }
  while (v7);
}

void sub_1D0C65DAC()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB671A78, memory_order_acquire) != -1)
  {
    char v0 = &v1;
    unint64_t v1 = sub_1D0CC75E8;
    std::__call_once(&qword_1EB671A78, &v0, (void (__cdecl *)(void *))sub_1D0CC75DC);
  }
}

uint64_t sub_1D0C65E10(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned char *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D30908((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_WORD *)&a5[2 * a7] = *(_WORD *)(result + a7 * a2 - 2);
  }
  if ((a4 & 4) == 0)
  {
    *(_WORD *)a5 = *(_WORD *)(result + 14);
    a5 += 2;
    _X5 = (int8x16_t *)result;
    result += a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  int8x16_t v17 = *(int8x16_t *)result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_s16(i16);
  *(_WORD *)a5 = HIWORD(*(_OWORD *)result);
  size_t v20 = (__int16 *)(a5 + 2);
  signed int v21 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v22 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1D0D7F140));
  uint64_t v23 = v20;
  do
  {
    _X11 = result + a2 + 16;
    int8x16_t v25 = *(int8x16_t *)(result + a2);
    __asm { PRFM            #0, [X11] }
    int8x16_t v27 = (int8x16_t)vld1q_dup_s16(v23++);
    *size_t v20 = v25.i16[7];
    uint8x16_t v28 = (uint8x16_t)vextq_s8(v9, v19, 2uLL);
    uint8x16_t v29 = (uint8x16_t)vextq_s8(v27, v25, 0xEuLL);
    *(int8x16_t *)int8x16_t result = vbslq_s8(v22, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v28), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v29)), (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v17)))), v17);
    uint64_t v30 = (const __int16 *)(result + 16);
    --v21;
    size_t v20 = (__int16 *)v23;
    int8x16_t v19 = (int8x16_t)vld1q_dup_s16(v30);
    int8x16_t v9 = v17;
    int8x16_t v17 = v25;
    result += a2;
  }
  while (v21 > 1);
  return result;
}

int8x16_t *sub_1D0C65F58(int8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D30994((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const __int16 *)(a6 - 2);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int8x16_t v10 = (const __int16 *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *(_WORD *)a5 = result->i16[7];
    a6 = (unsigned __int8 *)result;
    int8x16_t result = (int8x16_t *)((char *)result + a2);
    --a7;
    a5 = (char *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_WORD *)&a5[2 * (v13 + 1)] = *(__int16 *)((char *)&result->i16[7] + (int)(v13 + 1) * a2);
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 16;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X10 = result + 1;
  int8x16_t v23 = *result;
  __asm { PRFM            #0, [X10] }
  int v25 = v13 + 2;
  int8x16_t v26 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1D0D7F140));
  int8x16_t v27 = (const __int16 *)a5;
  do
  {
    _X12 = (uint64_t)result[1].i64 + a2;
    int8x16_t v29 = *(int8x16_t *)((char *)result + a2);
    __asm { PRFM            #0, [X12] }
    v7.i16[0] = *(__int16 *)((char *)result->i16 + a2 + ((8 * a4) & 0x10));
    uint8x16_t v31 = (uint8x16_t)vextq_s8(v11, v16, 0xEuLL);
    uint8x16_t v32 = (uint8x16_t)vextq_s8(v29, v7, 2uLL);
    int8x16_t v7 = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v23, v31), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120);
    *int8x16_t result = vbslq_s8(v26, (int8x16_t)vsqaddq_u8((uint8x16_t)v23, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(v7, (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v23)), (int8x16_t)vcgtq_u8((uint8x16_t)v23, v32)), (int8x16_t)vcgtq_u8(v32, (uint8x16_t)v23)))), v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v27++);
    --v25;
    int8x16_t v16 = v23;
    *(_WORD *)a5 = v23.i16[7];
    int8x16_t v23 = v29;
    a5 = (char *)v27;
    int8x16_t result = (int8x16_t *)((char *)result + a2);
  }
  while (v25 > 1);
  return result;
}

uint8x16_t *sub_1D0C660B4(uint8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, uint8x16_t *a6, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    int8x16_t result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int16 *)((char *)&result->i16[7] + (v9 + 1) * a2);
  uint8x16_t v11 = *a6;
  _X5 = a6 + 1;
  uint8x16_t v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X9 = result + 1;
  uint8x16_t v19 = *result;
  __asm { PRFM            #0, [X9] }
  int v21 = v9 + 2;
  do
  {
    _X10 = (uint64_t)result[1].i64 + a2;
    uint8x16_t v23 = *(uint8x16_t *)((char *)result + a2);
    __asm { PRFM            #0, [X10] }
    *a5++ = v19.i16[7];
    int8x16_t v25 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v19, v12), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v12, v19)), (int8x16_t)vcgtq_u8(v19, v23)), (int8x16_t)vcgtq_u8(v23, v19)));
    uint8x16_t v12 = v19;
    *int8x16_t result = vsqaddq_u8(v19, v25);
    --v21;
    uint8x16_t v19 = v23;
    int8x16_t result = (uint8x16_t *)((char *)result + a2);
  }
  while (v21 > 1);
  return result;
}

int8x16_t *sub_1D0C6617C(int8x16_t *result, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12, uint64_t a13, int a14)
{
  v14.i64[0] = *a3;
  v14.i64[1] = a3[4];
  int v15 = a14 + 1;
  int8x16_t v16 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1D0D7F140));
  int8x16_t v17 = a5;
  do
  {
    int8x16_t v18 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v24 = (int8x16_t)vld1q_dup_s16(v17++);
    uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned long long *)result);
    a12.i16[0] = *(__int16 *)((char *)result->i16 + ((8 * a4) & 0x10));
    uint8x16_t v26 = (uint8x16_t)vextq_s8(v18, a12, 2uLL);
    a12 = (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v14, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v25), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v25, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v26)), (int8x16_t)vcgtq_u8(v26, (uint8x16_t)v18))));
    *int8x16_t result = vbslq_s8(v16, a12, v18);
    int8x16_t result = (int8x16_t *)((char *)result + a2);
    --v15;
    a5 = (__int16 *)v17;
  }
  while (v15 > 1);
  return result;
}

int8x16_t *sub_1D0C66228(int8x16_t *result, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = vdupq_n_s8(~a4);
  int8x16_t v10 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F100);
  int v11 = a7 + 1;
  int8x16_t v12 = vceqzq_s8(vandq_s8(v9, (int8x16_t)xmmword_1D0D7F110));
  int8x16_t v13 = vceqzq_s8(v10);
  int8x16_t v14 = a5;
  do
  {
    int8x16_t v16 = *result;
    int8x16_t v15 = result[1];
    int8x16_t v17 = result[2];
    int8x16_t v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v24 = (int8x16_t)vld1q_dup_s16(v14++);
    *a5 = v18.i16[7];
    v7.i16[0] = *(__int16 *)((char *)result->i16 + ((32 * a4) & 0x40));
    uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v16, 0xEuLL);
    uint8x16_t v26 = (uint8x16_t)vextq_s8(v16, v15, 0xEuLL);
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v15, v17, 0xEuLL);
    uint8x16_t v28 = (uint8x16_t)vextq_s8(v17, v18, 0xEuLL);
    uint8x16_t v29 = (uint8x16_t)vextq_s8(v16, v15, 2uLL);
    uint8x16_t v30 = (uint8x16_t)vextq_s8(v15, v17, 2uLL);
    uint8x16_t v31 = (uint8x16_t)vextq_s8(v17, v18, 2uLL);
    uint8x16_t v32 = (uint8x16_t)vextq_s8(v18, v7, 2uLL);
    int8x16_t v7 = (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v28), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v32)), (int8x16_t)vcgtq_u8(v32, (uint8x16_t)v18))));
    *int8x16_t result = vbslq_s8(v13, (int8x16_t)vsqaddq_u8((uint8x16_t)v16, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v16, v29), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v16)), (int8x16_t)vcgtq_u8((uint8x16_t)v16, v25)), (int8x16_t)vcgtq_u8(v25, (uint8x16_t)v16)))), v16);
    result[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v15, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v15, v26), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v26, (uint8x16_t)v15)), (int8x16_t)vcgtq_u8((uint8x16_t)v15, v30)), (int8x16_t)vcgtq_u8(v30, (uint8x16_t)v15))));
    result[2] = (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v27), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v27, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v31)), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v17))));
    result[3] = vbslq_s8(v12, v7, v18);
    int8x16_t result = (int8x16_t *)((char *)result + a2);
    --v11;
    a5 = (__int16 *)v14;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C66384(uint64_t result, void *a2, int a3, int16x8_t *a4, unsigned int a5)
{
  int16x8_t v5 = *a4;
  int8x8_t v6 = (_OWORD *)*a2;
  int8x16_t v7 = (uint8x16_t *)a2[1];
  int8x16_t v8 = (_OWORD *)a2[2];
  int8x16_t v9 = (uint8x16_t *)a2[3];
  int8x16_t v10 = (_OWORD *)a2[4];
  int v11 = (uint8x16_t *)a2[5];
  int8x16_t v12 = (_OWORD *)a2[6];
  int8x16_t v13 = (uint8x16_t *)a2[7];
  int16x8_t v14 = vnegq_s16(vdupq_n_s16(a5));
  if ((a3 & 0x10000) != 0)
  {
    a3 -= 16;
    uint8x16_t v16 = *(uint8x16_t *)v6;
    int8x16_t v15 = v6 + 1;
    uint8x16_t v17 = *(uint8x16_t *)v15;
    int8x8_t v6 = v15 + 1;
    int16x8_t v18 = vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v16.i8), v5.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v17.i8), *(int16x4_t *)v5.i8, 1);
    int16x8_t v19 = vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v16), v5.i16[0]), (int16x8_t)vmovl_high_u8(v17), *(int16x4_t *)v5.i8, 1);
    uint8x16_t v21 = *(uint8x16_t *)v8;
    size_t v20 = v8 + 1;
    uint8x16_t v22 = *(uint8x16_t *)v20;
    int8x16_t v8 = v20 + 1;
    int16x8_t v23 = vmlaq_lane_s16(vmlaq_lane_s16(v18, (int16x8_t)vmovl_u8(*(uint8x8_t *)v21.i8), *(int16x4_t *)v5.i8, 2), (int16x8_t)vmovl_u8(*(uint8x8_t *)v22.i8), *(int16x4_t *)v5.i8, 3);
    int16x8_t v24 = vmlaq_lane_s16(vmlaq_lane_s16(v19, (int16x8_t)vmovl_high_u8(v21), *(int16x4_t *)v5.i8, 2), (int16x8_t)vmovl_high_u8(v22), *(int16x4_t *)v5.i8, 3);
    uint8x16_t v26 = *(uint8x16_t *)v10;
    uint8x16_t v25 = v10 + 1;
    uint8x16_t v27 = *(uint8x16_t *)v25;
    int8x16_t v10 = v25 + 1;
    int16x8_t v28 = vmlaq_laneq_s16(vmlaq_laneq_s16(v23, (int16x8_t)vmovl_u8(*(uint8x8_t *)v26.i8), v5, 4), (int16x8_t)vmovl_u8(*(uint8x8_t *)v27.i8), v5, 5);
    int16x8_t v29 = vmlaq_laneq_s16(vmlaq_laneq_s16(v24, (int16x8_t)vmovl_high_u8(v26), v5, 4), (int16x8_t)vmovl_high_u8(v27), v5, 5);
    uint8x16_t v31 = *(uint8x16_t *)v12;
    uint8x16_t v30 = v12 + 1;
    uint8x16_t v32 = *(uint8x16_t *)v30;
    int8x16_t v12 = v30 + 1;
    *(int8x8_t *)int8x16_t result = vqmovun_s16(vrshlq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(v28, (int16x8_t)vmovl_u8(*(uint8x8_t *)v31.i8), v5, 6), (int16x8_t)vmovl_u8(*(uint8x8_t *)v32.i8), v5, 7), v14));
    *(int8x8_t *)(result + 8) = vqmovun_s16(vrshlq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(v29, (int16x8_t)vmovl_high_u8(v31), v5, 6), (int16x8_t)vmovl_high_u8(v32), v5, 7), v14));
    result += 16;
  }
  do
  {
    BOOL v33 = __OFSUB__(a3, 32);
    a3 -= 32;
    uint8x16_t v34 = *(uint8x16_t *)v6;
    uint8x16_t v35 = *((uint8x16_t *)v6 + 1);
    v6 += 2;
    int16x8_t v36 = vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v34.i8), v5.i16[0]);
    int16x8_t v37 = vmulq_n_s16((int16x8_t)vmovl_high_u8(v34), v5.i16[0]);
    int16x8_t v38 = vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v35.i8), v5.i16[0]);
    int16x8_t v39 = vmulq_n_s16((int16x8_t)vmovl_high_u8(v35), v5.i16[0]);
    uint8x16_t v40 = *v7;
    uint8x16_t v41 = v7[1];
    v7 += 2;
    int16x8_t v42 = vmlaq_lane_s16(v36, (int16x8_t)vmovl_u8(*(uint8x8_t *)v40.i8), *(int16x4_t *)v5.i8, 1);
    int16x8_t v43 = vmlaq_lane_s16(v37, (int16x8_t)vmovl_high_u8(v40), *(int16x4_t *)v5.i8, 1);
    int16x8_t v44 = vmlaq_lane_s16(v38, (int16x8_t)vmovl_u8(*(uint8x8_t *)v41.i8), *(int16x4_t *)v5.i8, 1);
    int16x8_t v45 = vmlaq_lane_s16(v39, (int16x8_t)vmovl_high_u8(v41), *(int16x4_t *)v5.i8, 1);
    uint8x16_t v46 = *(uint8x16_t *)v8;
    uint8x16_t v47 = *((uint8x16_t *)v8 + 1);
    v8 += 2;
    int16x8_t v48 = vmlaq_lane_s16(v42, (int16x8_t)vmovl_u8(*(uint8x8_t *)v46.i8), *(int16x4_t *)v5.i8, 2);
    int16x8_t v49 = vmlaq_lane_s16(v43, (int16x8_t)vmovl_high_u8(v46), *(int16x4_t *)v5.i8, 2);
    int16x8_t v50 = vmlaq_lane_s16(v44, (int16x8_t)vmovl_u8(*(uint8x8_t *)v47.i8), *(int16x4_t *)v5.i8, 2);
    int16x8_t v51 = vmlaq_lane_s16(v45, (int16x8_t)vmovl_high_u8(v47), *(int16x4_t *)v5.i8, 2);
    uint8x16_t v52 = *v9;
    uint8x16_t v53 = v9[1];
    v9 += 2;
    int16x8_t v54 = vmlaq_lane_s16(v48, (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8), *(int16x4_t *)v5.i8, 3);
    int16x8_t v55 = vmlaq_lane_s16(v49, (int16x8_t)vmovl_high_u8(v52), *(int16x4_t *)v5.i8, 3);
    int16x8_t v56 = vmlaq_lane_s16(v50, (int16x8_t)vmovl_u8(*(uint8x8_t *)v53.i8), *(int16x4_t *)v5.i8, 3);
    int16x8_t v57 = vmlaq_lane_s16(v51, (int16x8_t)vmovl_high_u8(v53), *(int16x4_t *)v5.i8, 3);
    uint8x16_t v58 = *(uint8x16_t *)v10;
    uint8x16_t v59 = *((uint8x16_t *)v10 + 1);
    v10 += 2;
    int16x8_t v60 = vmlaq_laneq_s16(v54, (int16x8_t)vmovl_u8(*(uint8x8_t *)v58.i8), v5, 4);
    int16x8_t v61 = vmlaq_laneq_s16(v55, (int16x8_t)vmovl_high_u8(v58), v5, 4);
    int16x8_t v62 = vmlaq_laneq_s16(v56, (int16x8_t)vmovl_u8(*(uint8x8_t *)v59.i8), v5, 4);
    int16x8_t v63 = vmlaq_laneq_s16(v57, (int16x8_t)vmovl_high_u8(v59), v5, 4);
    uint8x16_t v64 = *v11;
    uint8x16_t v65 = v11[1];
    v11 += 2;
    int16x8_t v66 = vmlaq_laneq_s16(v60, (int16x8_t)vmovl_u8(*(uint8x8_t *)v64.i8), v5, 5);
    int16x8_t v67 = vmlaq_laneq_s16(v61, (int16x8_t)vmovl_high_u8(v64), v5, 5);
    int16x8_t v68 = vmlaq_laneq_s16(v62, (int16x8_t)vmovl_u8(*(uint8x8_t *)v65.i8), v5, 5);
    int16x8_t v69 = vmlaq_laneq_s16(v63, (int16x8_t)vmovl_high_u8(v65), v5, 5);
    uint8x16_t v70 = *(uint8x16_t *)v12;
    uint8x16_t v71 = *((uint8x16_t *)v12 + 1);
    v12 += 2;
    int16x8_t v72 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v70.i8);
    int16x8_t v73 = (int16x8_t)vmovl_high_u8(v70);
    int16x8_t v74 = vmlaq_laneq_s16(v68, (int16x8_t)vmovl_u8(*(uint8x8_t *)v71.i8), v5, 6);
    int16x8_t v75 = vmlaq_laneq_s16(v69, (int16x8_t)vmovl_high_u8(v71), v5, 6);
    uint8x16_t v76 = *v13;
    uint8x16_t v77 = v13[1];
    v13 += 2;
    *(int8x16_t *)int8x16_t result = vqmovun_high_s16(vqmovun_s16(vrshlq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(v66, v72, v5, 6), (int16x8_t)vmovl_u8(*(uint8x8_t *)v76.i8), v5, 7), v14)), vrshlq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(v67, v73, v5, 6), (int16x8_t)vmovl_high_u8(v76), v5, 7), v14));
    *(int8x16_t *)(result + 16) = vqmovun_high_s16(vqmovun_s16(vrshlq_s16(vmlaq_laneq_s16(v74, (int16x8_t)vmovl_u8(*(uint8x8_t *)v77.i8), v5, 7), v14)), vrshlq_s16(vmlaq_laneq_s16(v75, (int16x8_t)vmovl_high_u8(v77), v5, 7), v14));
    result += 32;
  }
  while (!((a3 < 0) ^ v33 | (a3 == 0)));
  return result;
}

int8x8_t *sub_1D0C665B8(int8x8_t *result, uint64_t a2, int a3, uint64_t a4, unsigned __int16 *a5, unsigned char *a6, unsigned int a7)
{
  int16x8_t v7 = vnegq_s16(vdupq_n_s16(a7));
  unsigned __int16 v9 = *a5;
  int8x16_t v8 = a5 + 1;
  int8x16_t v10 = (uint8x8_t *)(a2 - 3 + v9);
  do
  {
    BOOL v11 = __OFSUB__(a3, 8);
    a3 -= 8;
    unsigned int v14 = *v8;
    int8x16_t v12 = v8 + 1;
    uint64_t v13 = v14;
    unsigned int v16 = *v12++;
    uint64_t v15 = v16;
    unsigned int v18 = *v12++;
    uint64_t v17 = v18;
    unsigned int v19 = *v12++;
    uint8x8_t v21 = *v10;
    size_t v20 = (uint8x8_t *)((char *)v10 + v13);
    uint8x8_t v23 = *v20;
    uint8x16_t v22 = (uint8x8_t *)((char *)v20 + v15);
    uint8x8_t v25 = *v22;
    int16x8_t v24 = (uint8x8_t *)((char *)v22 + v17);
    uint8x8_t v27 = *v24;
    uint8x16_t v26 = (uint8x8_t *)((char *)v24 + v19);
    LOBYTE(v19) = *a6;
    int16x8_t v28 = a6 + 1;
    LOBYTE(v13) = v19;
    LOBYTE(v19) = *v28++;
    LOBYTE(v15) = v19;
    LOBYTE(v19) = *v28++;
    LOBYTE(v17) = v19;
    LOBYTE(v19) = *v28++;
    int16x8_t v29 = vmulq_s16((int16x8_t)vmovl_u8(v21), *(int16x8_t *)(a4 + v13));
    int16x8_t v30 = vmulq_s16((int16x8_t)vmovl_u8(v23), *(int16x8_t *)(a4 + v15));
    int16x8_t v31 = vmulq_s16((int16x8_t)vmovl_u8(v25), *(int16x8_t *)(a4 + v17));
    int16x8_t v32 = vmulq_s16((int16x8_t)vmovl_u8(v27), *(int16x8_t *)(a4 + v19));
    unsigned int v34 = *v12++;
    uint64_t v33 = v34;
    unsigned int v36 = *v12++;
    uint64_t v35 = v36;
    unsigned int v38 = *v12++;
    uint64_t v37 = v38;
    unsigned int v39 = *v12;
    int8x16_t v8 = v12 + 1;
    uint8x8_t v41 = *v26;
    uint8x16_t v40 = (uint8x8_t *)((char *)v26 + v33);
    uint8x8_t v43 = *v40;
    int16x8_t v42 = (uint8x8_t *)((char *)v40 + v35);
    uint8x8_t v45 = *v42;
    int16x8_t v44 = (uint8x8_t *)((char *)v42 + v37);
    uint8x8_t v46 = *v44;
    int8x16_t v10 = (uint8x8_t *)((char *)v44 + v39);
    LOBYTE(v39) = *v28++;
    LOBYTE(v33) = v39;
    LOBYTE(v39) = *v28++;
    LOBYTE(v35) = v39;
    LOBYTE(v39) = *v28++;
    LOBYTE(v37) = v39;
    LOBYTE(v39) = *v28;
    a6 = v28 + 1;
    *result++ = vqmovun_s16(vrshlq_s16(vpaddq_s16(vpaddq_s16(vpaddq_s16(v29, v30), vpaddq_s16(v31, v32)), vpaddq_s16(vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8(v41), *(int16x8_t *)(a4 + v33)), vmulq_s16((int16x8_t)vmovl_u8(v43), *(int16x8_t *)(a4 + v35))), vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8(v45), *(int16x8_t *)(a4 + v37)), vmulq_s16((int16x8_t)vmovl_u8(v46), *(int16x8_t *)(a4 + v39))))), v7));
  }
  while (!((a3 < 0) ^ v11 | (a3 == 0)));
  return result;
}

int8x8_t *sub_1D0C666EC(int8x8_t *result, uint64_t a2, int a3, uint64_t a4, unsigned __int16 *a5, unsigned char *a6, unsigned int a7)
{
  int16x8_t v7 = vnegq_s16(vdupq_n_s16(a7));
  unsigned __int16 v9 = *a5;
  int8x16_t v8 = a5 + 1;
  int8x16_t v10 = (const char *)(a2 - 6 + v9);
  do
  {
    BOOL v11 = __OFSUB__(a3, 8);
    a3 -= 8;
    unsigned int v14 = *v8;
    int8x16_t v12 = v8 + 1;
    uint64_t v13 = v14;
    unsigned int v16 = *v12++;
    uint64_t v15 = v16;
    unsigned int v18 = *v12++;
    uint64_t v17 = v18;
    unsigned int v20 = *v12;
    int8x16_t v8 = v12 + 1;
    uint64_t v19 = v20;
    int8x8x2_t v25 = vld2_s8(v10);
    uint8x8_t v21 = &v10[v13];
    int8x8x2_t v26 = vld2_s8(v21);
    uint8x16_t v22 = &v21[v15];
    int8x8x2_t v27 = vld2_s8(v22);
    uint8x8_t v23 = &v22[v17];
    int8x8x2_t v28 = vld2_s8(v23);
    int8x16_t v10 = &v23[v19];
    LOBYTE(v20) = *a6;
    int16x8_t v24 = a6 + 1;
    LOBYTE(v13) = v20;
    LOBYTE(v20) = *v24++;
    LOBYTE(v15) = v20;
    LOBYTE(v20) = *v24++;
    LOBYTE(v17) = v20;
    LOBYTE(v20) = *v24;
    a6 = v24 + 1;
    *result++ = vqmovun_s16(vrshlq_s16(vpaddq_s16(vpaddq_s16(vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v25.val[0]), *(int16x8_t *)(a4 + v13)), vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v25.val[1]), *(int16x8_t *)(a4 + v13))), vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v26.val[0]), *(int16x8_t *)(a4 + v15)), vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v26.val[1]), *(int16x8_t *)(a4 + v15)))), vpaddq_s16(vpaddq_s16(
                          vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v27.val[0]), *(int16x8_t *)(a4 + v17)), vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v27.val[1]), *(int16x8_t *)(a4 + v17))), vpaddq_s16(vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v28.val[0]), *(int16x8_t *)(a4 + v20)), vmulq_s16((int16x8_t)vmovl_u8((uint8x8_t)v28.val[1]), *(int16x8_t *)(a4 + v20))))), v7));
  }
  while (!((a3 < 0) ^ v11 | (a3 == 0)));
  return result;
}

uint64_t sub_1D0C667D0(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v4);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if (v5) {
    goto LABEL_31;
  }
  int8x8_t v6 = *(const opaqueCMFormatDescription **)(DerivedStorage + 16);
  if (!v6) {
    goto LABEL_31;
  }
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v6);
  if (Dimensions != CMVideoFormatDescriptionGetDimensions(a2)) {
    goto LABEL_31;
  }
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a2, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (Extension && (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(Extension)))
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(Extension, @"hvcC");
    if (!Value) {
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(Extension, @"ftvH");
    }
  }
  else
  {
    CFDataRef Value = 0;
  }
  memset(v27, 0, 24);
  memset(&v27[4], 0, 24);
  BytePtr = (unsigned int *)CFDataGetBytePtr(Value);
  CFIndex Length = CFDataGetLength(Value);
  int v13 = sub_1D0C4CAD0((uint64_t)v27, BytePtr, Length);
  if (v13)
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
  }
  else
  {
    *(void *)uint8x8_t v23 = 0x1000000;
    v21[0] = 0;
    v21[1] = 0;
    char v22 = 0;
    *(_DWORD *)&v23[7] = 0;
    __int16 v24 = 3;
    *(_OWORD *)long long __p = 0u;
    long long v26 = 0u;
    int v17 = sub_1D0C42E68((uint64_t)v21, (uint64_t)v27);
    int v13 = v17;
    if (v17) {
      int v14 = 0;
    }
    else {
      int v14 = v23[3];
    }
    if (v17) {
      int v15 = 0;
    }
    else {
      int v15 = v23[4];
    }
    if (v17) {
      int v16 = 0;
    }
    else {
      int v16 = v23[5];
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  if (v27[0]) {
    operator delete(v27[0]);
  }
  if (v13)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("CanAcceptFormatDescription: Error parsing new FormatDescription\n", 0x40uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "CanAcceptFormatDescription: Error parsing new FormatDescription\n");
    }
    goto LABEL_31;
  }
  unsigned int v18 = *(unsigned __int8 **)(DerivedStorage + 24);
  if (v14 != v18[21] || v15 != v18[22] || v16 != v18[23])
  {
LABEL_31:
    uint64_t v19 = 0;
    goto LABEL_32;
  }
  uint64_t v19 = 1;
LABEL_32:
  std::mutex::unlock(v4);
  return v19;
}

void sub_1D0C669F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void sub_1D0C66A34()
{
  keys[11] = *(void **)MEMORY[0x1E4F143B8];
  memset(&keys[8], 0, 24);
  memset(&values[8], 0, 24);
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    uint64_t v3 = (void *)*MEMORY[0x1E4F44CC8];
    keys[0] = *(void **)MEMORY[0x1E4F44CE8];
    keys[1] = v3;
    values[0] = v1;
    values[1] = v1;
    long long v4 = (void *)*MEMORY[0x1E4F44D00];
    keys[2] = @"NegotiationDetails";
    keys[3] = v4;
    values[2] = v1;
    values[3] = v1;
    unsigned __int8 v5 = (void *)*MEMORY[0x1E4F44CA8];
    keys[4] = *(void **)MEMORY[0x1E4F44BF8];
    keys[5] = v5;
    values[4] = v1;
    values[5] = v1;
    int8x8_t v6 = (void *)*MEMORY[0x1E4F44C20];
    keys[6] = *(void **)MEMORY[0x1E4F44CD0];
    keys[7] = v6;
    values[6] = v1;
    values[7] = v1;
    qword_1EB671A68 = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!qword_1EB671A68 && dword_1EB671A40 >= 3)
    {
      fwrite("CFDictionaryCreate failed", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "CFDictionaryCreate failed");
    }
    CFRelease(v2);
  }
  else if (dword_1EB671A40 >= 3)
  {
    fwrite("CFDictionaryCreate failed", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "CFDictionaryCreate failed");
  }
}

uint64_t sub_1D0C66C04(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, char a4, _DWORD *a5)
{
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v15 = 0;
  int8x16_t v10 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v10);
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if (v11)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Session was invalidated");
    }
    uint64_t v13 = 4294954393;
  }
  else
  {
    int8x16_t v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x1020040089D864DuLL);
    *int8x16_t v12 = a2;
    sub_1D0C44010(DerivedStorage, (uint64_t)v12, a3, a4, a5, &v15);
    if (!v15)
    {
      sub_1D0C61B88((uint64_t)v12);
      VTDecoderSessionEmitDecodedFrame();
    }
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v10);
  return v13;
}

void sub_1D0C66D44(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C66D60(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  VTVideoDecoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int8x8_t v6 = *(std::mutex **)(DerivedStorage + 1072);
  std::mutex::lock(v6);
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if (v7)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Session was invalidated");
    }
    uint64_t v8 = 4294954393;
  }
  else
  {
    *(void *)uint64_t DerivedStorage = a2;
    uint64_t v8 = sub_1D0C424A8(DerivedStorage, a3);
    if (v8)
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Invalid/unsupported format\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Invalid/unsupported format\n");
      }
    }
    else
    {
      uint64_t v9 = *(void *)(DerivedStorage + 32);
      *(_DWORD *)(v9 + 192) = *(unsigned __int8 *)(*(void *)(DerivedStorage + 24) + 29) + 1;
      sub_1D0C65A8C(v9, (uint64_t)sub_1D0C66EA4, DerivedStorage);
      uint64_t v8 = 0;
    }
  }
  std::mutex::unlock(v6);
  return v8;
}

void sub_1D0C66E8C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1D0C66EA4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  CFTypeRef cf = 0;
  if (!a3)
  {
    uint64_t v6 = *a4;
    if (*a4)
    {
      if (*(unsigned char *)(v6 + 45))
      {
        unsigned __int8 v7 = (__CVBuffer *)(*(uint64_t (**)(void))(*(void *)v6 + 24))(*a4);
        if (v7)
        {
          if (*(unsigned char *)(v6 + 1173))
          {
            CVPixelBufferLockFlags v8 = *(unsigned int *)(v6 + 1184);
            if ((v8 & 1) == 0)
            {
              uint64_t v9 = *(__CVBuffer **)(v6 + 1176);
              if (v9)
              {
                CVPixelBufferUnlockBaseAddress(v9, v8);
                uint64_t v10 = *(unsigned int *)(v6 + 1184);
                *(_DWORD *)(v6 + 1184) = v10 | 1;
                CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v6 + 1176), v10 | 1);
              }
            }
          }
          else
          {
            PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool();
            if (PixelBufferPool)
            {
              if (!CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, (CVPixelBufferRef *)&cf))
              {
                sub_1D0D26E08(*(void (***)(uint64_t))(a1 + 1064), v7, (__CVBuffer *)cf, 0);
                CVBufferPropagateAttachments(v7, (CVBufferRef)cf);
                *(_DWORD *)(a2 + 8) |= 4u;
              }
            }
            else if (dword_1EB671A40 >= 3)
            {
              fwrite("Unable to get CVPixelBufferPool from VideoToolbox\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              syslog(27, "Unable to get CVPixelBufferPool from VideoToolbox\n");
            }
          }
        }
      }
      else
      {
        *(_DWORD *)(a2 + 8) |= 2u;
      }
    }
  }
  VTDecoderSessionEmitDecodedFrame();
  sub_1D0C61B88(a2);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t sub_1D0C67058(uint64_t a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 32))
  {
    uint64_t v6 = DerivedStorage;
    unsigned __int8 v7 = *(std::mutex **)(DerivedStorage + 1072);
    std::mutex::lock(v7);
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v6 + 1080));
    if (v8)
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Session was invalidated");
      }
      uint64_t v9 = 4294954393;
      goto LABEL_11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44CE8])) {
      goto LABEL_4;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44CC8]))
    {
      if (a3)
      {
        CFTypeID TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          int valuePtr = 0;
          CFTypeID v12 = CFGetTypeID(a3);
          if (v12 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
            if (valuePtr >= 1) {
              sub_1D0CC6FEC(*(void *)(v6 + 32), valuePtr);
            }
          }
        }
      }
      goto LABEL_4;
    }
    if (CFEqual(a2, @"NegotiationDetails"))
    {
      *(unsigned char *)(v6 + 40) = 0;
      uint64_t v13 = (char *)(v6 + 40);
      if (a3)
      {
        CFTypeID v14 = CFStringGetTypeID();
        if (v14 == CFGetTypeID(a3))
        {
          CFStringGetCString(a3, v13, 1001, 0);
          uint64_t v9 = 0;
          goto LABEL_11;
        }
      }
      goto LABEL_4;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44D00]))
    {
      if (a3)
      {
        CFTypeID v15 = CFNumberGetTypeID();
        if (v15 == CFGetTypeID(a3)) {
          sub_1D0C674E8(a3, (void *)(v6 + 1044));
        }
        goto LABEL_4;
      }
      if (dword_1EB671A40 >= 3)
      {
        uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
        unsigned int v20 = "Invalid value of VideoResolutionAdaptationType";
        uint8x8_t v21 = "Invalid value of VideoResolutionAdaptationType";
        size_t v22 = 46;
LABEL_41:
        fwrite(v21, v22, 1uLL, v19);
        syslog(27, v20);
      }
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44BF8]))
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44CA8]))
        {
          if (!a3) {
            goto LABEL_4;
          }
          CFTypeID v23 = CFBooleanGetTypeID();
          if (v23 != CFGetTypeID(a3)) {
            goto LABEL_4;
          }
          *(unsigned char *)(v6 + 1060) = sub_1D0C67554(a3);
          *(unsigned char *)(v6 + 1061) = 1;
        }
        else
        {
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44CD0]))
          {
            if (dword_1EB671A40 >= 3)
            {
              fwrite("unrecognised property key", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              syslog(27, "unrecognised property key");
            }
            uint64_t v9 = 4294954396;
            goto LABEL_11;
          }
          if (!a3) {
            goto LABEL_4;
          }
          CFTypeID v24 = CFBooleanGetTypeID();
          if (v24 != CFGetTypeID(a3)) {
            goto LABEL_4;
          }
          *(unsigned char *)(v6 + 1062) = sub_1D0C67554(a3);
        }
        sub_1D0C675A0(v6);
LABEL_4:
        uint64_t v9 = 0;
LABEL_11:
        std::mutex::unlock(v7);
        return v9;
      }
      if (a3)
      {
        CFTypeID v16 = CFDictionaryGetTypeID();
        if (v16 != CFGetTypeID(a3)) {
          goto LABEL_4;
        }
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F44D60]);
        if (!Value)
        {
          if (dword_1EB671A40 < 3) {
            goto LABEL_42;
          }
          uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
          unsigned int v20 = "Invalid value of kVTDecompressionResolutionKey_Width";
          uint8x8_t v21 = "Invalid value of kVTDecompressionResolutionKey_Width";
          size_t v22 = 52;
          goto LABEL_41;
        }
        CFNumberGetValue(Value, kCFNumberIntType, (void *)(v6 + 1048));
        CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F44D58]);
        if (v18)
        {
          CFNumberGetValue(v18, kCFNumberIntType, (void *)(v6 + 1052));
          goto LABEL_4;
        }
        if (dword_1EB671A40 >= 3)
        {
          uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
          unsigned int v20 = "Invalid value of kVTDecompressionResolutionKey_Height";
          uint8x8_t v21 = "Invalid value of kVTDecompressionResolutionKey_Height";
          size_t v22 = 53;
          goto LABEL_41;
        }
      }
      else if (dword_1EB671A40 >= 3)
      {
        uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
        unsigned int v20 = "Invalid value of ActiveVideoResolution";
        uint8x8_t v21 = "Invalid value of ActiveVideoResolution";
        size_t v22 = 38;
        goto LABEL_41;
      }
    }
LABEL_42:
    uint64_t v9 = 4294954394;
    goto LABEL_11;
  }
  if (dword_1EB671A40 >= 3)
  {
    fwrite("No decoder, session was invalidated?\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "No decoder, session was invalidated?\n");
  }
  return 4294954393;
}

void sub_1D0C674C4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFTypeID sub_1D0C674E8(const void *a1, void *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  CFTypeID result = CFNumberGetTypeID();
  if (v4 == result)
  {
    return CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, a2);
  }
  return result;
}

BOOL sub_1D0C67554(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  return v2 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)a1) != 0;
}

uint64_t sub_1D0C675A0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1062))
  {
    *(_WORD *)(a1 + 1060) = 0;
    CFDictionaryRef v1 = "background";
  }
  else if (*(unsigned char *)(a1 + 1060))
  {
    if (*(unsigned char *)(a1 + 1061)) {
      CFDictionaryRef v1 = "high";
    }
    else {
      CFDictionaryRef v1 = "medium";
    }
  }
  else
  {
    CFDictionaryRef v1 = "low";
  }
  uint64_t v2 = *(void *)(a1 + 32) + 248;
  char v4 = 0;
  return sub_1D0C636C0(v2, 0xF5B6EA8C35AC1E89, "priority", v1, 0xFFFFFFFFLL, (uint64_t)&v4);
}

uint64_t sub_1D0C67634(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 32))
  {
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = *(std::mutex **)(DerivedStorage + 1072);
    std::mutex::lock(v9);
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)(v8 + 1080));
    if (v10)
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Session was invalidated", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Session was invalidated");
      }
      uint64_t v11 = 4294954393;
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44CC8]))
    {
      int valuePtr = *(_DWORD *)(*(void *)(v8 + 32) + 312);
      uint64_t v11 = 0;
      *a4 = CFNumberCreate(a3, kCFNumberSInt32Type, &valuePtr);
LABEL_19:
      std::mutex::unlock(v9);
      return v11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44CA8]))
    {
      uint64_t v11 = 0;
      int v12 = *(unsigned __int8 *)(v8 + 1060);
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44CD0]))
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44C20]))
        {
          if (dword_1EB671A40 >= 3)
          {
            fwrite("unrecognised property key", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(27, "unrecognised property key");
          }
          uint64_t v11 = 4294954396;
          goto LABEL_19;
        }
        uint64_t v11 = 0;
        uint64_t v13 = (CFNumberRef *)MEMORY[0x1E4F1CFD0];
        goto LABEL_18;
      }
      uint64_t v11 = 0;
      int v12 = *(unsigned __int8 *)(v8 + 1062);
    }
    if (v12) {
      uint64_t v13 = (CFNumberRef *)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v13 = (CFNumberRef *)MEMORY[0x1E4F1CFC8];
    }
LABEL_18:
    *a4 = *v13;
    goto LABEL_19;
  }
  if (dword_1EB671A40 >= 3)
  {
    fwrite("No decoder, session was invalidated?\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "No decoder, session was invalidated?\n");
  }
  return 4294954393;
}

void sub_1D0C6784C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__CFString *sub_1D0C67868(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<LRPVideoDecoder %p>", a1);
  return Mutable;
}

std::mutex *sub_1D0C678C0()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  sub_1D0C67914();
  CFTypeID result = *(std::mutex **)(DerivedStorage + 1072);
  if (result)
  {
    std::mutex::~mutex(result);
    CFTypeID result = (std::mutex *)MEMORY[0x1D25F0230]();
  }
  *(void *)(DerivedStorage + 1072) = 0;
  return result;
}

uint64_t sub_1D0C67914()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(DerivedStorage + 1080));
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = (void *)DerivedStorage;
    atomic_store(1u, (unsigned __int8 *)(DerivedStorage + 1080));
    uint64_t v3 = *(std::mutex **)(DerivedStorage + 1072);
    std::mutex::lock(v3);
    uint64_t v4 = v2[4];
    if (v4)
    {
      uint64_t v5 = sub_1D0CC6B5C(v4);
      MEMORY[0x1D25F0230](v5, 0x10F2C4084AC0B2ELL);
    }
    v2[4] = 0;
    uint64_t v6 = v2[133];
    if (v6) {
      MEMORY[0x1D25F0230](v6, 0x1080C409C3078A8);
    }
    v2[133] = 0;
    uint64_t v7 = v2[3];
    if (v7)
    {
      uint64_t v8 = *(void **)(v7 + 32);
      if (v8)
      {
        *(void *)(v7 + 40) = v8;
        operator delete(v8);
      }
      MEMORY[0x1D25F0230](v7, 0x1010C4086E593A5);
    }
    v2[3] = 0;
    *uint64_t v2 = 0;
    FigFormatDescriptionRelease();
    v2[2] = 0;
    std::mutex::unlock(v3);
  }
  return 0;
}

void sub_1D0C679F4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1D0C67A08(uint64_t a1, int a2)
{
  *(_WORD *)(a1 + 12) = 257;
  uint64_t v3 = a1 + 12;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  uint64_t v4 = a1 + 144;
  *(_WORD *)(a1 + 1440) = 0;
  *(void *)(a1 + 40) = 0x403E000000000000;
  uint64_t v5 = a1 + 40;
  *(_DWORD *)(a1 + 48) = 0x7FFFFFFF;
  uint64_t v6 = a1 + 48;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 1196) = 3;
  *(_DWORD *)(a1 + 1220) = -1;
  *(_DWORD *)(a1 + 1296) = a2;
  *(_DWORD *)(a1 + 32) = -1082130432;
  uint64_t v7 = a1 + 32;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1344) = 0;
  uint64_t v8 = (long long *)MEMORY[0x1E4F1FA48];
  long long v9 = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 1368) = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)(a1 + 1352) = v9;
  long long v10 = *v8;
  *(void *)(a1 + 1392) = *((void *)v8 + 2);
  *(_OWORD *)(a1 + 1376) = v10;
  uint64_t v11 = (char *)operator new(0x2B10uLL, MEMORY[0x1E4FBA2D0]);
  if (!v11)
  {
    *(void *)(a1 + 1288) = 0;
    return;
  }
  int v12 = v11;
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_DWORD *)(v11 + 34) = -1;
  *((_WORD *)v11 + 19) = -1;
  v11[40] = 0;
  *((_WORD *)v11 + 16) = 0;
  *((_DWORD *)v11 + 12) = -1;
  v11[52] = -1;
  v11[100] = 0;
  *((void *)v11 + 21) = 0;
  *((void *)v11 + 22) = 0;
  *((void *)v11 + 24) = 0;
  *((void *)v11 + 25) = 0;
  *((void *)v11 + 26) = 0;
  *((void *)v11 + 34) = 0;
  v11[288] = 0;
  *((void *)v11 + 37) = 0;
  *((void *)v11 + 38) = 0;
  *((void *)v11 + 42) = 0;
  *((void *)v11 + 43) = 0;
  uint64_t v13 = (uint64_t)(v11 + 360);
  *((void *)v11 + 44) = 0;
  sub_1D0C6504C((uint64_t)(v11 + 360));
  *((void *)v12 + 45) = &unk_1F26F1290;
  *((void *)v12 + 1017) = 0;
  *((_DWORD *)v12 + 150) = 0;
  *((_DWORD *)v12 + 232) = 1000;
  v12[869] = 7;
  *(_OWORD *)(v12 + 7876) = 0u;
  *(_OWORD *)(v12 + 7892) = 0u;
  *(_OWORD *)(v12 + 7908) = 0u;
  *(_OWORD *)(v12 + 7924) = 0u;
  *(_OWORD *)(v12 + 7940) = 0u;
  *(_OWORD *)(v12 + 7956) = 0u;
  *(_OWORD *)(v12 + 7972) = 0u;
  *(_OWORD *)(v12 + 7988) = 0u;
  *(_OWORD *)(v12 + 8004) = 0u;
  *(_OWORD *)(v12 + 8020) = 0u;
  *(_OWORD *)(v12 + 8036) = 0u;
  *(_OWORD *)(v12 + 8052) = 0u;
  *(_OWORD *)(v12 + 8068) = 0u;
  *(_OWORD *)(v12 + 8084) = 0u;
  *(_OWORD *)(v12 + 8100) = 0u;
  *(_OWORD *)(v12 + 8116) = 0u;
  v12[952] = 0;
  bzero(v12 + 956, 0x1B00uLL);
  *((void *)v12 + 99) = 0;
  *((void *)v12 + 98) = 0;
  *((_DWORD *)v12 + 202) = 0;
  *((void *)v12 + 100) = 0;
  *((void *)v12 + 102) = 0;
  *(void *)(v12 + 828) = 0;
  *((_DWORD *)v12 + 209) = 0;
  sub_1D0C62FE8(v13, 0xAF63E54C8601FBD7, "h", v12 + 427, 0);
  sub_1D0C62FE8(v13, 0xA9918CC5FA26ABAuLL, "help", v12 + 427, 0);
  sub_1D0C635C0(v13, 0, 0, (void *)v12 + 50);
  sub_1D0C635C0(v13, 0xAF63E24C8601F6BELL, "o", (void *)v12 + 51);
  sub_1D0C635C0(v13, 0xAF63EF4C86020CD5, "r", (void *)v12 + 52);
  sub_1D0C635C0(v13, 0x75909A2E7B7A5950uLL, "negotiationdetails", (void *)v12 + 85);
  sub_1D0C62FE8(v13, 0x81988191775D1F3uLL, "md5", v12 + 424, 0);
  sub_1D0C62FE8(v13, 0x7E8D690E31D04174uLL, "psnr", v12 + 425, 0);
  sub_1D0C62FE8(v13, 0x4B67B014335F38D7uLL, "quiet", v12 + 426, 0);
  sub_1D0C62FE8(v13, 0x35CA209DCAF9161DuLL, "verbose", v12 + 428, 0);
  sub_1D0C62FE8(v13, 0x6C8B4995CC5E527EuLL, "ionly", v12 + 429, 0);
  sub_1D0C62FE8(v13, 0x72868D48B2D5EBA3uLL, "lossless", v12 + 430, 0);
  sub_1D0C62FE8(v13, 0xB03C2E5AF042E3A5, "probskip", v12 + 445, 1);
  sub_1D0C62FE8(v13, 0x8435706FD97519EDLL, "framereenc", v12 + 446, 0);
  sub_1D0C62FE8(v13, 0xDA7CA283D396F91BLL, "framedrop", v12 + 447, 0);
  sub_1D0C62FE8(v13, 0xDFF2FE5D542EA31BLL, "preprocess", v12 + 448, 0);
  sub_1D0C62FE8(v13, 0x602305DAC098B022uLL, "cabac_estimation_enable_", v12 + 449, 0);
  sub_1D0C62FE8(v13, 0x3A01566E736A4E8uLL, "dpmd", v12 + 450, 0);
  sub_1D0C62FE8(v13, 0x2B1EBF5605FA6228uLL, "dpmd-enable", v12 + 451, 0);
  sub_1D0C62FE8(v13, 0x651738E42F5A27F0uLL, "band-qp", v12 + 452, 0);
  sub_1D0CC7FE8(v13, 0x272E34E2BFB32E6CuLL, "hdr-type", v12 + 481, -1);
  sub_1D0C62FE8(v13, 0xB5C61104404590D6, "hdr-pq-deblock", v12 + 482, 0);
  sub_1D0C62FE8(v13, 0x240E0E991FD2AE9BuLL, "hdr-pq-banding", v12 + 483, 0);
  sub_1D0C62FE8(v13, 0xA8EDB06A6EA3063ELL, "hdr-pq-qpm", v12 + 484, 0);
  sub_1D0C62FE8(v13, 0xE7A385CA7BF9D2E1, "hdr-pq-chroma-qpm", v12 + 485, 0);
  sub_1D0C62FE8(v13, 0xEBAEEC9A08259398, "adaptive-hdr-chroma-qpm", v12 + 486, 0);
  sub_1D0C62FE8(v13, 0xB71C8689F9C18CECLL, "hdr-hlg-qpm", v12 + 487, 0);
  sub_1D0CC7DDC(v13, 0x818677D402EF7CE6, "roundingcontrol", (_WORD *)v12 + 227, 0);
  sub_1D0C62FE8(v13, 0x74FC82D498616DDCuLL, "recoverdroppedframe", v12 + 575, 0);
  sub_1D0C62FE8(v13, 0xBDE6380775DA187BLL, "frameack", v12 + 585, 0);
  sub_1D0CC7FE8(v13, 0x8914E07B53BA1E3uLL, "db", v12 + 561, 1);
  sub_1D0CC7FE8(v13, 0xAF63EE4C86020B22, "s", v12 + 480, 1);
  sub_1D0CC7FE8(v13, 0x8B74307B55C5E6FuLL, "iq", v12 + 488, 26);
  sub_1D0CC7FE8(v13, 0x8D55707B5757DFAuLL, "pq", v12 + 489, 29);
  sub_1D0CC7FE8(v13, 0xDDFB231C5BDB75EuLL, "cb-qp-offset", v12 + 490, 0);
  sub_1D0CC7FE8(v13, 0x4D722CB707F47EEuLL, "cr-qp-offset", v12 + 491, 0);
  sub_1D0CC7FE8(v13, 0x70A12C1952D5628BuLL, "qpm", v12 + 492, 0);
  sub_1D0CC7FE8(v13, 0x3740EA07C0973081uLL, "qpmp", v12 + 493, 0);
  sub_1D0C62FE8(v13, 0xA5ED87530AAE8BE1, "qpm-flat-area", v12 + 495, 1);
  sub_1D0CC7FE8(v13, 0x3740DD07C0971A6AuLL, "qpme", v12 + 494, 0);
  sub_1D0CC7FE8(v13, 0xF8B0C066E05FB132, "dqpd", v12 + 496, 0);
  sub_1D0CC7FE8(v13, 0x53F78B1FC36A960FuLL, "rdoq", v12 + 497, 0);
  sub_1D0C63350(v13, 0x2C6F698EE31B44D2uLL, "rdoq-prequant-dz-intra", (_DWORD *)v12 + 125, 256);
  sub_1D0C63350(v13, 0x2C2E868EE2E3DF24uLL, "rdoq-prequant-dz-inter", (_DWORD *)v12 + 126, 256);
  sub_1D0C62FE8(v13, 0x822379195CCD6478, "sbh", v12 + 508, 1);
  sub_1D0C63350(v13, 0xAF63DB4C8601EAD9, "f", (_DWORD *)v12 + 128, 0x7FFFFFFF);
  sub_1D0C65DAC();
  sub_1D0C63350(v13, 0xC0AB56BF45863635, "max-threads", (_DWORD *)v12 + 130, dword_1EB671A24);
  sub_1D0C63350(v13, 0x90EC632032E98B72, "wpp-threads", (_DWORD *)v12 + 131, 0);
  sub_1D0C62FE8(v13, 0x8931489410D7395BLL, "global-threadpool", v12 + 560, 0);
  sub_1D0CC8258(v13, 0x72351913690D14uLL, "bps", (_DWORD *)v12 + 137);
  sub_1D0CC7FE8(v13, 0x8DC5507B57B9942uLL, "rc", v12 + 552, 0);
  sub_1D0C62FE8(v13, 0x5DAB01B8216B7BDDuLL, "scalar", v12 + 568, 0);
  sub_1D0C62FE8(v13, 0x1E5485EF2E9F9384uLL, "time", v12 + 569, 0);
  sub_1D0C62FE8(v13, 0x832846984DBFE0D9, "time-frames", v12 + 570, 0);
  sub_1D0C62FE8(v13, 0x54EB290A497D21C7uLL, "leaks", v12 + 571, 0);
  sub_1D0C62FE8(v13, 0x5ED5212C9D566C9DuLL, "use-cra", v12 + 536, 0);
  sub_1D0CC7FE8(v13, 0x822DA0195CD5FB42, "sao", v12 + 572, 2);
  sub_1D0CC7FE8(v13, 0x9823E18BF99D7A9uLL, "saoq", v12 + 573, 0);
  sub_1D0CC7FE8(v13, 0x9BFA121F99ACE953, "adaptcu", v12 + 444, 0);
  sub_1D0CC7FE8(v13, 0x8D26507B5735FEDuLL, "qc", v12 + 562, 0);
  sub_1D0CC7FE8(v13, 0x8A25007B54A187CuLL, "cf", v12 + 563, 3);
  sub_1D0C62FE8(v13, 0x8A24D07B54A1363uLL, "cc", v12 + 564, 1);
  sub_1D0C62FE8(v13, 0x50939CEF4A983267uLL, "tssd", v12 + 565, 0);
  sub_1D0C62FE8(v13, 0xCDE5ECAD70CF6CD5, "lomd", v12 + 908, 0);
  sub_1D0C62FE8(v13, 0xDC9E8F18FEC9589BLL, "fii", v12 + 898, 0);
  sub_1D0CC7FE8(v13, 0x8AD3B07B553FC52uLL, "lm", v12 + 566, 1);
  sub_1D0CC7FE8(v13, 0x570AB51944740F8AuLL, "trm", v12 + 567, 1);
  sub_1D0C63350(v13, 0x615A99E879F1FBEDuLL, "maxsatd", (_DWORD *)v12 + 144, 32);
  sub_1D0C62FE8(v13, 0x56E9FE341621E09uLL, "adaptive-lambda", v12 + 580, 1);
  sub_1D0C62FE8(v13, 0x5334C45223677F91uLL, "no-ic-half", v12 + 581, 1);
  sub_1D0C62FE8(v13, 0x5F76FE45FB19FE48uLL, "qpel-bilinear", v12 + 582, 0);
  sub_1D0C63350(v13, 0x8984D07B541BEDEuLL, "fs", (_DWORD *)v12 + 129, 0);
  sub_1D0CC7FE8(v13, 0x41B440525D697FF7uLL, "mdmode", v12 + 856, 4);
  sub_1D0C62FE8(v13, 0xC25B30BDF01A30D5, "mtree-skip-rect", v12 + 888, 0);
  sub_1D0C62FE8(v13, 0xB8E3D9290E474EB5, "check-split-first", v12 + 860, 0);
  sub_1D0C62FE8(v13, 0x8A2F64AA860B099FLL, "mtree-cu-test-order", v12 + 890, 0);
  sub_1D0CC7FE8(v13, 0xD21B034DBFE04CECLL, "skip-bias", v12 + 889, 1);
  sub_1D0C62FE8(v13, 0x43F116253D1EA9CEuLL, "mtree-skip-cu-split", v12 + 891, 0);
  sub_1D0C62FE8(v13, 0x840C1656727A0FCFLL, "mtree-skip-cu-full", v12 + 892, 0);
  sub_1D0C62FE8(v13, 0xC4BF903204850796, "fast-merge", v12 + 901, 1);
  sub_1D0C62FE8(v13, 0x1E2005B3F5BEB950uLL, "satd-merge", v12 + 902, 0);
  sub_1D0C63350(v13, 0x799736CC586FE042uLL, "num-merge-candidate", (_DWORD *)v12 + 226, 5);
  sub_1D0CC7FE8(v13, 0xF43418886590D867, "imode", v12 + 857, 0);
  sub_1D0CC7FE8(v13, 0x2B80F1192BB9FFE5uLL, "iet", v12 + 858, 0);
  sub_1D0CC7FE8(v13, 0xD65DFC1F8E66C132, "ichroma", v12 + 859, 0);
  sub_1D0CC7FE8(v13, 0xF8430C8B4F06F401, "amvp-et", v12 + 887, 0);
  sub_1D0CC7FE8(v13, 0xB85BFD9F3C15B21BLL, "nimode", v12 + 861, 2);
  sub_1D0C63350(v13, 0xAA68CD72D6497127, "max-intra-cu-size", (_DWORD *)v12 + 216, 6);
  sub_1D0CC7FE8(v13, 0x81EED073FE32EFC5, "max-inter-cu-size", v12 + 868, 6);
  sub_1D0CC7FE8(v13, 0x6273AF826AE6052uLL, "check-combine-cu", v12 + 910, 0);
  sub_1D0C62FE8(v13, 0x7A5CA636C472D4BAuLL, "less-recon", v12 + 911, 0);
  sub_1D0CC7FE8(v13, 0x5A76D5720CA84BE6uLL, "thrde", v12 + 862, 0);
  sub_1D0C62FE8(v13, 0x42362CEF434B870CuLL, "tmvp", v12 + 583, 0);
  sub_1D0C62FE8(v13, 0xC4D0FEC7CD579487, "reencode-anti-pop", v12 + 584, 0);
  sub_1D0CC7FE8(v13, 0x9532CFA66877DD95, "num_mvp", v12 + 586, 0);
  sub_1D0C62FE8(v13, 0xE31989A769C63238, "sub8x8pu", v12 + 587, 1);
  sub_1D0C62FE8(v13, 0xAF2A5491CAA7C0A4, "me-topleft", v12 + 592, 1);
  sub_1D0C62FE8(v13, 0x2B9CFF192BD29267uLL, "imv", v12 + 593, 1);
  sub_1D0C62FE8(v13, 0x7EF6AFD0BC2C3AFBuLL, "turde", v12 + 588, 0);
  sub_1D0CC7FE8(v13, 0xAF38EF220F97347CLL, "fasttu", v12 + 589, 0);
  sub_1D0C62FE8(v13, 0xAEC568C75E5A789BLL, "bipred", v12 + 594, 0);
  sub_1D0CC7FE8(v13, 0xEDFFBC8BA94277D2, "biiter", v12 + 595, 1);
  sub_1D0CC7FE8(v13, 0x4A6099A424EFF8D8uLL, "bisearch", v12 + 596, 4);
  sub_1D0CC7FE8(v13, 0xD92EDD40EE009C75, "fastbipred", v12 + 597, 0);
  sub_1D0C62FE8(v13, 0xDC91E78F7946A89BLL, "lowdelay-b", v12 + 599, 0);
  sub_1D0C63350(v13, 0x32468D84F55FB2A7uLL, "number-gop", (_DWORD *)v12 + 151, 1);
  sub_1D0C63350(v13, 0x9163BFEE0B8BBC39, "dec-reorder", (_DWORD *)v12 + 161, 0);
  sub_1D0C62FE8(v13, 0x6FB4ED4D665CFB53uLL, "ref-l0-m", v12 + 648, 0);
  sub_1D0C62FE8(v13, 0x672CC44D6190BB64uLL, "ref-l1-m", v12 + 649, 0);
  sub_1D0C62FE8(v13, 0xF177F127AFD546AFLL, "fastprecomp", v12 + 590, 0);
  sub_1D0C62FE8(v13, 0xA8CCC6E13F002CB5, "fast-TA", v12 + 591, 0);
  sub_1D0C635C0(v13, 0xC149B762C3CBBEEFLL, "ave_bin_path", (void *)v12 + 83);
  sub_1D0C635C0(v13, 0xC8CF39AD19D4144ELL, "ave_log_path", (void *)v12 + 84);
  sub_1D0CC7FE8(v13, 0xC31497E238864B46, "fw_stats_usage", v12 + 697, 0);
  sub_1D0C63350(v13, 0x4CF9EDAEEADD3E2DuLL, "start_frame", (_DWORD *)v12 + 133, 0);
  sub_1D0C635C0(v13, 0x58682CE1B84A76E1uLL, "fw_stats_path_prefix", (void *)v12 + 88);
  sub_1D0C62FE8(v13, 0xE71AB9033F0EDA46, "ispdrivenwp", v12 + 712, 0);
  sub_1D0C62FE8(v13, 0x25CA010D7C67FE5uLL, "en-analyze-wp", v12 + 713, 0);
  sub_1D0C63350(v13, 0x10F5B9695738A8B9uLL, "forcedqualitylevel", (_DWORD *)v12 + 172, -1);
  sub_1D0C63350(v13, 0x362F2028C00751E9uLL, "forcedqp", (_DWORD *)v12 + 173, -1);
  sub_1D0C62FE8(v13, 0x694C40428BDBDE55uLL, "vradeblocktuning", v12 + 696, 0);
  sub_1D0C635C0(v13, 0x8860D9D1EF04328uLL, "isp_meta_file", (void *)v12 + 90);
  sub_1D0C635C0(v13, 0x6F04801F48EBD537uLL, "face_meta_file", (void *)v12 + 91);
  sub_1D0C62FE8(v13, 0xF0F0537A8BB752CELL, "facedrivenqpm", v12 + 714, 0);
  sub_1D0C62FE8(v13, 0xDF7FDAC19F2075E3, "hardware_scaling", v12 + 736, 0);
  sub_1D0C62FE8(v13, 0xBE27DAD503ACC303, "ref_selection", v12 + 870, 0);
  sub_1D0C62FE8(v13, 0x8AE8B64DF29B63BELL, "extended-frame-stats", v12 + 737, 0);
  sub_1D0C635C0(v13, 0xFE98FF5FC68FF9F7, "logfile", (void *)v12 + 93);
  sub_1D0C62FE8(v13, 0xBC874B605A9708BuLL, "fixed-fps", v12 + 871, 0);
  sub_1D0C62FE8(v13, 0xD6C905BD7D301F5FLL, "fast-sao", v12 + 574, 0);
  sub_1D0C63350(v13, 0xC757C18968E4439DLL, "debug_facetime", (_DWORD *)v12 + 189, 0);
  sub_1D0C62FE8(v13, 0xE7F531AB6DDD32A0, "use_bias", v12 + 840, 0);
  *(void *)&long long v70 = 0x32B8DD2503E0688BLL;
  *((void *)&v70 + 1) = "predbias";
  *((void *)v12 + 106) = 0x3FE8000000000000;
  for (uint64_t i = (void *)*((void *)v12 + 47); i; uint64_t i = (void *)*i)
  {
    unint64_t v15 = i[4];
    if (v15 <= 0x32B8DD2503E0688BLL)
    {
      if (v15 == 0x32B8DD2503E0688BLL)
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of option '%s' collides with previous a option! Change its name!\n", "predbias");
          syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", "predbias");
        }
        goto LABEL_9;
      }
      ++i;
    }
  }
  CFTypeID v16 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
  if (v16)
  {
    v16[2] = 0;
    *(void *)CFTypeID v16 = &unk_1F26F1130;
    *((void *)v16 + 2) = v12 + 848;
    sub_1D0C630E8((uint64_t **)v12 + 46, 0x32B8DD2503E0688BuLL, &v70)[6] = (uint64_t *)v16;
  }
LABEL_9:
  sub_1D0C62FE8(v13, 0xFC7DFD8BC570D29ELL, "noise-level-control", v12 + 912, 0);
  sub_1D0C62FE8(v13, 0xD751E917FCC287DDLL, "intra-motion-analysis", v12 + 936, 0);
  sub_1D0C62FE8(v13, 0x2C51CE3D8BCD05CuLL, "mv-analysis-anti-pop", v12 + 937, 0);
  sub_1D0C62FE8(v13, 0xA1EDFCC9C98DE037, "noise-level-estimate", v12 + 913, 0);
  sub_1D0CC7FE8(v13, 0x992C8E2B020CE065, "noise-early-terminate", v12 + 914, 0);
  sub_1D0CC8568(v13, 0xA5B5C24B1EE618C9, "noise-et-strength", (float *)v12 + 229, 1.0);
  sub_1D0C63350(v13, 0x567920750E39752DuLL, "freq-deadzone-level", (_DWORD *)v12 + 230, 0);
  sub_1D0C62FE8(v13, 0x70CF4EDD9A7A5A6FuLL, "ml-tree-cu-split", v12 + 752, 0);
  sub_1D0C62FE8(v13, 0x4BCAD57DADE2AAD5uLL, "use-ernie-motion-mask-qpm", v12 + 753, 0);
  sub_1D0C62FE8(v13, 0x9FA17F231CA2208DLL, "legacy-pixfmt", v12 + 872, 0);
  sub_1D0CC7DDC(v13, 0xD2169DA14FFB5F9ALL, "ifdist", (_WORD *)v12 + 437, 0);
  sub_1D0C63350(v13, 0x5C8E300840CF1DCCuLL, "idr-interval", (_DWORD *)v12 + 219, 0);
  sub_1D0CC8568(v13, 0x25B0C33846144F91uLL, "idr-duration", (float *)v12 + 220, 0.0);
  sub_1D0C62FE8(v13, 0x907E5BC0BE3F5F7FLL, "scene-idr", v12 + 884, 0);
  sub_1D0CC7DDC(v13, 0xEADA4767E797268BLL, "vui-chroma-loc", (_WORD *)v12 + 381, 0);
  sub_1D0C62FE8(v13, 0x3BEB44829B7A4FABuLL, "vui-full-range", v12 + 760, 0);
  sub_1D0CC7DDC(v13, 0x9FFE593DC10E7CC4, "vui-primaries", (_WORD *)v12 + 382, 2);
  sub_1D0CC7DDC(v13, 0x2660BA38B42FDFB5uLL, "vui-transfer", (_WORD *)v12 + 383, 2);
  sub_1D0CC7DDC(v13, 0xE961BACE8A163BCBLL, "vui-matrix-coeff", (_WORD *)v12 + 384, 2);
  sub_1D0C63350(v13, 0xA4FAC089B047A575, "schedule-policy", (_DWORD *)v12 + 233, 0);
  sub_1D0C418C4(v13, 0x4179B3C137C3CEB0uLL, (uint64_t)"vui-sar", (void (*)(uint64_t, unint64_t))sub_1D0D06A4C, 0, 0);
  sub_1D0C63350(v13, 0x818A639346385C5uLL, "required-sps-id", (_DWORD *)v12 + 235, 0);
  sub_1D0C63350(v13, 0xEC4CA737CBED8456, "required-pps-id", (_DWORD *)v12 + 236, 0);
  sub_1D0C63350(v13, 0x4BD00B7E61081A2BuLL, "alpha-layer-id", (_DWORD *)v12 + 237, 0);
  sub_1D0C63450(v13, 0xD1603A6EC53E98DFLL, (uint64_t)"chroma", (_DWORD *)v12 + 164, qword_1E6899E28, 0x2BD23A1809BB3649);
  sub_1D0C63450(v13, 0xFE31B357AB72A0FuLL, (uint64_t)"threading", (_DWORD *)v12 + 136, qword_1E6899D08, 0x3C0D17BAD169557BLL);
  sub_1D0C63450(v13, 0xF5B6EA8C35AC1E89, (uint64_t)"priority", (_DWORD *)v12 + 139, qword_1E6899DB0, 0xC76A095E1FFA22B6);
  sub_1D0C63450(v13, 0xB2883551E8F20F05, (uint64_t)"me-mode", (_DWORD *)v12 + 108, qword_1E6899EA0, 0x9783E8FBF7E0C136);
  sub_1D0C63450(v13, 0x73F6047B706C4F0EuLL, (uint64_t)"subpel-mode", (_DWORD *)v12 + 109, qword_1E6899F18, 0x8948DE7DE7DC4ALL);
  sub_1D0C63450(v13, 0xF481A443D70D26E9, (uint64_t)"bipred-mode", (_DWORD *)v12 + 110, qword_1E6899F90, 0xDC9178070790BA59);
  sub_1D0CC8258(v13, 0x8ADD349E618BA10ELL, "profile", (_DWORD *)v12 + 115);
  *(void *)&long long v70 = 0xE8DDC90A9D7C709DLL;
  *((void *)&v70 + 1) = "level";
  *((_WORD *)v12 + 232) = 0;
  int v17 = (void *)*((void *)v12 + 47);
  if (!v17)
  {
LABEL_14:
    uint64_t v19 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
    if (v19)
    {
      uint64_t v19[2] = 0;
      *(void *)uint64_t v19 = &unk_1F26F1220;
      *((void *)v19 + 2) = v12 + 464;
      sub_1D0C630E8((uint64_t **)v12 + 46, 0xE8DDC90A9D7C709DLL, &v70)[6] = (uint64_t *)v19;
    }
    goto LABEL_16;
  }
  while (1)
  {
    unint64_t v18 = v17[4];
    if (v18 <= 0xE8DDC90A9D7C709DLL) {
      break;
    }
LABEL_13:
    int v17 = (void *)*v17;
    if (!v17) {
      goto LABEL_14;
    }
  }
  if (v18 != 0xE8DDC90A9D7C709DLL)
  {
    ++v17;
    goto LABEL_13;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of option '%s' collides with previous a option! Change its name!\n", "level");
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", "level");
  }
LABEL_16:
  sub_1D0C418C4(v13, 0xAF63D94C8601E773, (uint64_t)"d", (void (*)(uint64_t, unint64_t))sub_1D0D06954, 0, 0);
  sub_1D0C418C4(v13, 0x8984E07B541C091uLL, (uint64_t)"fr", (void (*)(uint64_t, unint64_t))sub_1D0D0683C, (uint64_t)"30", 0);
  sub_1D0C418C4(v13, 0x89E9C01960F4C582, (uint64_t)"ref", (void (*)(uint64_t, unint64_t))sub_1D0D06748, (uint64_t)"1:0:1:1", 0);
  sub_1D0C418C4(v13, 0x8A24307B54A0265uLL, (uint64_t)"cu", (void (*)(uint64_t, unint64_t))sub_1D0D06A4C, (uint64_t)"3:6", 0);
  sub_1D0C418C4(v13, 0x8C84307B56AD1A2uLL, (uint64_t)"tu", (void (*)(uint64_t, unint64_t))sub_1D0D06A4C, (uint64_t)"2:5", 0);
  sub_1D0C418C4(v13, 0x571BB01944827A3EuLL, (uint64_t)"tuh", (void (*)(uint64_t, unint64_t))sub_1D0D06A4C, (uint64_t)"2:2", 0);
  sub_1D0C418C4(v13, 0x8C49EF6ED9F28EA0, (uint64_t)"bit-depth", (void (*)(uint64_t, unint64_t))sub_1D0D0651C, (uint64_t)"8", 0);
  sub_1D0C418C4(v13, 0x81C3B0CF315BC925, (uint64_t)"input-bit-depth", (void (*)(uint64_t, unint64_t))sub_1D0D0651C, 0, 0);
  sub_1D0C418C4(v13, 0xDD66DE355FAABFA7, (uint64_t)"HEVCEncoderOptions", (void (*)(uint64_t, unint64_t))sub_1D0C65130, 0, 0);
  sub_1D0C418C4(v13, 0xA72E681EA6EA2FFDLL, (uint64_t)"gop-size", (void (*)(uint64_t, unint64_t))sub_1D0D0638C, 0, 0);
  sub_1D0C418C4(v13, 0x50F6C19BB163CD98uLL, (uint64_t)"ref-struct", (void (*)(uint64_t, unint64_t))sub_1D0D05688, 0, 0);
  sub_1D0C418C4(v13, 0x3DC4253E192FDEDuLL, (uint64_t)"max-cll", (void (*)(uint64_t, unint64_t))sub_1D0D06A4C, 0, 0);
  sub_1D0C418C4(v13, 0x90898E7CB0F4FE00, (uint64_t)"master-display", (void (*)(uint64_t, unint64_t))sub_1D0D055E4, 0, 0);
  sub_1D0C418C4(v13, 0x6FFBA4D618E54C5DuLL, (uint64_t)"ambient-viewing", (void (*)(uint64_t, unint64_t))sub_1D0D05568, 0, 0);
  sub_1D0C418C4(v13, 0x92F39F846EC10A99, (uint64_t)"scaling-list", (void (*)(uint64_t, unint64_t))sub_1D0D0541C, 0, 0);
  sub_1D0C418C4(v13, 0x6BABB84D374647CAuLL, (uint64_t)"scaling-list-file", (void (*)(uint64_t, unint64_t))sub_1D0D04E70, 0, 0);
  sub_1D0C418C4(v13, 0xAF63E84C860200F0, (uint64_t)"u", (void (*)(uint64_t, unint64_t))sub_1D0D0460C, 0, 1);
  *((void *)v12 + 1226) = 0;
  *((_OWORD *)v12 + 612) = 0u;
  bzero(v12 + 8152, 0x660uLL);
  *((void *)v12 + 1231) = 850045863;
  *((_OWORD *)v12 + 616) = 0u;
  *((_OWORD *)v12 + 617) = 0u;
  *((_OWORD *)v12 + 618) = 0u;
  *((void *)v12 + 1238) = 0;
  *((void *)v12 + 1240) = 0;
  *(_OWORD *)(v12 + 9928) = 0u;
  sub_1D0C6492C((uint64_t)(v12 + 9968));
  *((_OWORD *)v12 + 649) = 0u;
  *(_OWORD *)(v12 + 10408) = 0u;
  *(_OWORD *)(v12 + 10760) = 0u;
  *(_OWORD *)(v12 + 10776) = 0u;
  *(_OWORD *)(v12 + 10792) = 0u;
  *((void *)v12 + 1351) = 850045863;
  *((_OWORD *)v12 + 676) = 0u;
  *((_OWORD *)v12 + 677) = 0u;
  *((_OWORD *)v12 + 678) = 0u;
  *((_OWORD *)v12 + 679) = 0u;
  *((_OWORD *)v12 + 680) = 0u;
  *((_OWORD *)v12 + 681) = 0u;
  *((void *)v12 + 1364) = 0;
  v12[11012] = 1;
  v12[11012] = CC_MD5_Init((CC_MD5_CTX *)(v12 + 10920)) != 0;
  *((_DWORD *)v12 + 2454) = 0;
  *((void *)v12 + 1223) = 0;
  *((void *)v12 + 1300) = 0;
  *((void *)v12 + 23) = 0;
  *((_DWORD *)v12 + 2036) = 0;
  *((void *)v12 + 32) = 0;
  *((void *)v12 + 33) = 0;
  *((void *)v12 + 1228) = 0;
  *((void *)v12 + 1230) = 0;
  unsigned int v20 = (uint64_t *)MEMORY[0x1E4F143D8];
  *((void *)v12 + 1229) = 0;
  uint64_t v21 = *v20;
  *((void *)v12 + 30) = 0;
  *((void *)v12 + 31) = v21;
  v12[224] = 1;
  *((void *)v12 + 1239) = 0;
  *(void *)(v12 + 9948) = 0;
  *((_DWORD *)v12 + 82) = 0;
  *(_DWORD *)(v12 + 9961) = 0;
  sub_1D0C46C7C((uint64_t)&v70);
  *(void *)(a1 + 1288) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA6432F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EA6432F8))
  {
    qword_1EA6432F0 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &unk_1D0D7F780);
    __cxa_guard_release(&qword_1EA6432F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EA643308))
  {
    qword_1EA643300 = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &unk_1D0D7F784);
    __cxa_guard_release(&qword_1EA643308);
  }
  size_t v22 = (float *)operator new(0x28uLL, MEMORY[0x1E4FBA2D0]);
  if (v22)
  {
    CFTypeID v23 = v22;
    *(_OWORD *)size_t v22 = 0u;
    *((_OWORD *)v22 + 1) = 0u;
    v22[8] = 1.0;
    *(void *)(a1 + 1448) = v22;
    CFTypeID TypeID = CFStringGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44AA0];
    *((void *)&v70 + 1) = TypeID;
    uint64_t v71 = a1;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v25 = CFBooleanGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F447E8];
    *((void *)&v70 + 1) = v25;
    uint64_t v71 = v3;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v26 = CFBooleanGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F447D0];
    *((void *)&v70 + 1) = v26;
    uint64_t v71 = v3 + 1;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v27 = CFBooleanGetTypeID();
    *(void *)&long long v70 = @"DroppablePFramesOnly";
    *((void *)&v70 + 1) = v27;
    uint64_t v71 = a1 + 14;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v28 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F449C8];
    *((void *)&v70 + 1) = v28;
    uint64_t v71 = a1 + 16;
    uint64_t v72 = 3;
    uint64_t v73 = qword_1EA6432F0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v29 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F449D0];
    *((void *)&v70 + 1) = v29;
    uint64_t v71 = a1 + 20;
    uint64_t v72 = 5;
    uint64_t v73 = qword_1EA643300;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v30 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44A20];
    *((void *)&v70 + 1) = v30;
    uint64_t v71 = a1 + 24;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v31 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44810];
    *((void *)&v70 + 1) = v31;
    uint64_t v71 = a1 + 28;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v32 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44AB0];
    *((void *)&v70 + 1) = v32;
    uint64_t v71 = v7;
    uint64_t v72 = 5;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v33 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F448F0];
    *((void *)&v70 + 1) = v33;
    uint64_t v71 = v5;
    uint64_t v72 = 13;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v34 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44B18];
    *((void *)&v70 + 1) = v34;
    uint64_t v71 = v6;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v35 = CFDictionaryGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44A60];
    *((void *)&v70 + 1) = v35;
    uint64_t v71 = a1 + 56;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v36 = CFStringGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44868];
    *((void *)&v70 + 1) = v36;
    uint64_t v71 = a1 + 72;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v37 = CFStringGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44B58];
    *((void *)&v70 + 1) = v37;
    uint64_t v71 = a1 + 80;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v38 = CFStringGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44BB0];
    *((void *)&v70 + 1) = v38;
    uint64_t v71 = a1 + 88;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v39 = CFDataGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44880];
    *((void *)&v70 + 1) = v39;
    uint64_t v71 = a1 + 96;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v40 = CFDataGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F449B0];
    *((void *)&v70 + 1) = v40;
    uint64_t v71 = a1 + 104;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v41 = CFDataGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44990];
    *((void *)&v70 + 1) = v41;
    uint64_t v71 = a1 + 136;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v42 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44B68];
    *((void *)&v70 + 1) = v42;
    uint64_t v71 = v4;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v43 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44900];
    *((void *)&v70 + 1) = v43;
    uint64_t v71 = a1 + 148;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v44 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"RequiredHEVCSequenceParameterSetID";
    *((void *)&v70 + 1) = v44;
    uint64_t v71 = a1 + 160;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v45 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"RequiredHEVCPictureParameterSetID";
    *((void *)&v70 + 1) = v45;
    uint64_t v71 = a1 + 164;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v46 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"RequiredHEVCVideoParameterSetAlphaLayerID";
    *((void *)&v70 + 1) = v46;
    uint64_t v71 = a1 + 168;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v47 = CFBooleanGetTypeID();
    *(void *)&long long v70 = @"EncodesAlpha";
    *((void *)&v70 + 1) = v47;
    uint64_t v71 = a1 + 172;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v48 = CFBooleanGetTypeID();
    *(void *)&long long v70 = @"RequireDeterministicDependencyAndReordering";
    *((void *)&v70 + 1) = v48;
    uint64_t v71 = a1 + 173;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v49 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"InitialQPI";
    *((void *)&v70 + 1) = v49;
    uint64_t v71 = a1 + 152;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v50 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"InitialQP";
    *((void *)&v70 + 1) = v50;
    uint64_t v71 = a1 + 152;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v51 = CFDataGetTypeID();
    *(void *)&long long v70 = @"QuantizationScalingLists";
    *((void *)&v70 + 1) = v51;
    uint64_t v71 = a1 + 120;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v52 = CFNumberGetTypeID();
    *(void *)&long long v70 = *MEMORY[0x1E4F44AB8];
    *((void *)&v70 + 1) = v52;
    uint64_t v71 = a1 + 128;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v53 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"ThermalLevel";
    *((void *)&v70 + 1) = v53;
    uint64_t v71 = a1 + 176;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v54 = CFStringGetTypeID();
    *(void *)&long long v70 = @"NegotiationDetails";
    *((void *)&v70 + 1) = v54;
    uint64_t v71 = a1 + 184;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v55 = CFBooleanGetTypeID();
    *(void *)&long long v70 = @"UsingCellular";
    *((void *)&v70 + 1) = v55;
    uint64_t v71 = a1 + 1193;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v56 = CFBooleanGetTypeID();
    *(void *)&long long v70 = @"PrivateKey001";
    *((void *)&v70 + 1) = v56;
    uint64_t v71 = a1 + 1194;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v57 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"PrivateKey002";
    *((void *)&v70 + 1) = v57;
    uint64_t v71 = v3 + 1184;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v58 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"PrivateKey000";
    *((void *)&v70 + 1) = v58;
    uint64_t v71 = a1 + 1204;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v59 = CFStringGetTypeID();
    *(void *)&long long v70 = @"PrivateKey004";
    *((void *)&v70 + 1) = v59;
    uint64_t v71 = a1 + 1208;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v60 = CFBooleanGetTypeID();
    *(void *)&long long v70 = @"PrivateKey005";
    *((void *)&v70 + 1) = v60;
    uint64_t v71 = a1 + 1216;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v61 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"PrivateKey003";
    *((void *)&v70 + 1) = v61;
    uint64_t v71 = v3 + 1208;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v62 = CFStringGetTypeID();
    *(void *)&long long v70 = @"PrivateKey024";
    *((void *)&v70 + 1) = v62;
    uint64_t v71 = a1 + 1224;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v63 = CFStringGetTypeID();
    *(void *)&long long v70 = @"PrivateKey023";
    *((void *)&v70 + 1) = v63;
    uint64_t v71 = a1 + 1232;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v64 = CFBooleanGetTypeID();
    *(void *)&long long v70 = @"PrivateKey034";
    *((void *)&v70 + 1) = v64;
    uint64_t v71 = a1 + 1240;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v65 = CFNumberGetTypeID();
    *(void *)&long long v70 = @"PrivateKey035";
    *((void *)&v70 + 1) = v65;
    uint64_t v71 = a1 + 1244;
    uint64_t v72 = 3;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v66 = CFStringGetTypeID();
    *(void *)&long long v70 = @"PrivateKey041";
    *((void *)&v70 + 1) = v66;
    uint64_t v71 = a1 + 1248;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v67 = CFBooleanGetTypeID();
    *(void *)&long long v70 = @"PrivateKey044";
    *((void *)&v70 + 1) = v67;
    uint64_t v71 = v3 + 1428;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v68 = CFBooleanGetTypeID();
    *(void *)&long long v70 = @"PrivateKey045";
    *((void *)&v70 + 1) = v68;
    uint64_t v71 = v3 + 1429;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
    CFTypeID v69 = CFStringGetTypeID();
    *(void *)&long long v70 = @"PrivateKey046";
    *((void *)&v70 + 1) = v69;
    uint64_t v71 = a1 + 1256;
    uint64_t v72 = 16;
    uint64_t v73 = 0;
    sub_1D0C6A81C(v23, (CFTypeRef *)&v70, (uint64_t)&v70);
  }
  else
  {
    *(void *)(a1 + 1448) = 0;
  }
}

void sub_1D0C6A5F8(_Unwind_Exception *a1)
{
}

void sub_1D0C6A81C(float *a1, CFTypeRef *a2, uint64_t a3)
{
  CFHashCode v7 = CFHash(*a2);
  CFHashCode v8 = v7;
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      CFHashCode v3 = v7;
      if (v7 >= v9) {
        CFHashCode v3 = v7 % v9;
      }
    }
    else
    {
      CFHashCode v3 = (v9 - 1) & v7;
    }
    int v12 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v14 = (unint64_t)i[1];
        if (v14 == v8)
        {
          if (CFEqual(i[2], *a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = operator new(0x38uLL);
  *unint64_t v15 = 0;
  v15[1] = v8;
  long long v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v16;
  v15[6] = *(void *)(a3 + 32);
  float v17 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v18 = a1[8];
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *((void *)a1 + 1);
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_1D0C6AC2C();
          }
          CFTypeID v23 = operator new(8 * *(void *)&prime);
          CFTypeID v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          CFTypeID v26 = (void *)*((void *)a1 + 2);
          if (v26)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = a1 + 4;
            CFTypeID v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  *CFTypeID v26 = *v32;
                  *CFTypeID v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  CFTypeID v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_55:
                CFTypeID v26 = v32;
                CFTypeID v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        CFTypeID v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        CFHashCode v3 = v8 % v9;
      }
      else {
        CFHashCode v3 = v8;
      }
    }
    else
    {
      CFHashCode v3 = (v9 - 1) & v8;
    }
  }
  CFTypeID v34 = *(void **)a1;
  CFTypeID v35 = *(void **)(*(void *)a1 + 8 * v3);
  if (v35)
  {
    *unint64_t v15 = *v35;
LABEL_72:
    *CFTypeID v35 = v15;
    goto LABEL_73;
  }
  *unint64_t v15 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v15;
  v34[v3] = a1 + 4;
  if (*v15)
  {
    unint64_t v36 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    CFTypeID v35 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_1D0C6AC18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D0C6AC2C()
{
  exceptiounsigned int n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  unsigned __int8 v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, (struct type_info *)&unk_1F26F0F68, MEMORY[0x1E4FBA1F8]);
}

void sub_1D0C6AC60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1312)) {
    return;
  }
  *(unsigned char *)(a1 + 1312) = 1;
  uint64_t v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  CFHashCode v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 184);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 184) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 72);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 80);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 80) = 0;
  }
  CFHashCode v7 = *(const void **)(a1 + 88);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 88) = 0;
  }
  CFHashCode v8 = *(const void **)(a1 + 1208);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 1208) = 0;
  }
  unint64_t v9 = *(const void **)(a1 + 1224);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 1224) = 0;
  }
  uint8x8_t v10 = *(const void **)(a1 + 1232);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 1232) = 0;
  }
  unint64_t v11 = *(const void **)(a1 + 1248);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 1248) = 0;
  }
  int v12 = *(const void **)(a1 + 1256);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 1256) = 0;
  }
  uint64_t v13 = *(const void **)(a1 + 96);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 96) = 0;
  }
  unint64_t v14 = *(const void **)(a1 + 104);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 104) = 0;
  }
  unint64_t v15 = *(const void **)(a1 + 112);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 112) = 0;
  }
  long long v16 = *(const void **)(a1 + 120);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 120) = 0;
  }
  float v17 = *(const void **)(a1 + 136);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 136) = 0;
  }
  *(void *)(a1 + 1264) = 0;
  FigFormatDescriptionRelease();
  *(void *)(a1 + 1280) = 0;
  uint64_t v18 = *(void *)(a1 + 1288);
  if (v18)
  {
    sub_1D0CE9E88(*(void *)(a1 + 1288));
    BOOL v19 = *(NSObject **)(v18 + 9912);
    if (v19)
    {
      dispatch_group_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(*(dispatch_object_t *)(v18 + 9912));
      *(void *)(v18 + 9912) = 0;
    }
    unint64_t v20 = *(NSObject **)(v18 + 9824);
    if (v20)
    {
      dispatch_release(v20);
      *(void *)(v18 + 9824) = 0;
    }
    unint64_t v21 = *(NSObject **)(v18 + 9832);
    if (v21)
    {
      dispatch_release(v21);
      *(void *)(v18 + 9832) = 0;
    }
    uint64_t v22 = *(void *)(v18 + 9784);
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    CFTypeID v23 = *(void **)(v18 + 10400);
    if (!v23) {
      goto LABEL_73;
    }
    CFTypeID v24 = (char *)v23[226];
    uint64_t v25 = (char *)v23[225];
    if (v24 == v25)
    {
      uint64_t v25 = (char *)v23[226];
      if (v24)
      {
LABEL_52:
        v23[226] = v25;
        operator delete(v25);
      }
    }
    else
    {
      do
      {
        uint64_t v26 = *((void *)v24 - 1);
        if (v26)
        {
          std::condition_variable::~condition_variable((std::condition_variable *)(v26 + 104));
          std::mutex::~mutex((std::mutex *)(v26 + 40));
          unint64_t v27 = *(void **)(v26 + 8);
          if (v27)
          {
            *(void *)(v26 + 16) = v27;
            operator delete(v27);
          }
          MEMORY[0x1D25F0230](v26, 0x1020C40567BECFALL);
          CFTypeID v24 = (char *)v23[226];
          uint64_t v25 = (char *)v23[225];
        }
        v24 -= 8;
        v23[226] = v24;
      }
      while (v24 != v25);
      if (v25) {
        goto LABEL_52;
      }
    }
    uint64_t v28 = v23[220];
    v23[220] = 0;
    if (v28) {
      MEMORY[0x1D25F0230](v28, 0x1000C409380FD32);
    }
    unint64_t v29 = (void **)v23[57];
    uint8x8_t v30 = (void **)v23[58];
    v23[61] = 0;
    unint64_t v31 = (char *)v30 - (char *)v29;
    if ((unint64_t)((char *)v30 - (char *)v29) >= 0x11)
    {
      do
      {
        operator delete(*v29);
        uint8x8_t v30 = (void **)v23[58];
        unint64_t v29 = (void **)(v23[57] + 8);
        v23[57] = v29;
        unint64_t v31 = (char *)v30 - (char *)v29;
      }
      while ((unint64_t)((char *)v30 - (char *)v29) > 0x10);
    }
    unint64_t v32 = v31 >> 3;
    if (v32 == 1)
    {
      uint64_t v33 = 170;
    }
    else
    {
      if (v32 != 2) {
        goto LABEL_64;
      }
      uint64_t v33 = 341;
    }
    v23[60] = v33;
LABEL_64:
    if (v29 != v30)
    {
      do
      {
        CFTypeID v34 = *v29++;
        operator delete(v34);
      }
      while (v29 != v30);
      uint64_t v36 = v23[57];
      uint64_t v35 = v23[58];
      if (v35 != v36) {
        v23[58] = v35 + ((v36 - v35 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    CFTypeID v37 = (void *)v23[56];
    if (v37) {
      operator delete(v37);
    }
    CFTypeID v38 = (std::__shared_weak_count *)v23[2];
    if (v38) {
      sub_1D0C4C984(v38);
    }
    MEMORY[0x1D25F0230](v23, 0x10E0C40107E3BE5);
    *(void *)(v18 + 10400) = 0;
LABEL_73:
    CFTypeID v39 = *(FILE **)(v18 + 184);
    if (v39) {
      fclose(v39);
    }
    CFTypeID v40 = *(FILE **)(v18 + 248);
    if (v40)
    {
      CFTypeID v41 = (void *)MEMORY[0x1E4F143D8];
      if (v40 != (FILE *)*MEMORY[0x1E4F143D8])
      {
        fclose(v40);
        *(void *)(v18 + 248) = *v41;
      }
    }
    CFTypeID v42 = *(FILE **)(v18 + 240);
    if (v42 && fclose(v42) && dword_1EB671A40 >= 3)
    {
      fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Unable to close file\n");
    }
    CFTypeID v43 = *(FILE **)(v18 + 264);
    if (v43 && fclose(v43) && dword_1EB671A40 >= 3)
    {
      fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Unable to close file\n");
    }
    CFTypeID v44 = *(FILE **)(v18 + 256);
    if (v44 && fclose(v44) && dword_1EB671A40 >= 3)
    {
      fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Unable to close file\n");
    }
    sub_1D0CE94AC(v18 + 10872);
    std::mutex::~mutex((std::mutex *)(v18 + 10808));
    CFTypeID v45 = *(void **)(v18 + 10784);
    if (v45)
    {
      *(void *)(v18 + 10792) = v45;
      operator delete(v45);
    }
    CFTypeID v46 = *(void **)(v18 + 10760);
    if (v46)
    {
      *(void *)(v18 + 10768) = v46;
      operator delete(v46);
    }
    CFTypeID v47 = *(std::__shared_weak_count **)(v18 + 10416);
    if (v47) {
      sub_1D0C4C984(v47);
    }
    CFTypeID v48 = *(std::__shared_weak_count **)(v18 + 10392);
    if (v48) {
      sub_1D0C4C984(v48);
    }
    for (uint64_t i = 0; i != -272; i -= 16)
    {
      CFTypeID v50 = *(std::__shared_weak_count **)(v18 + i + 10264);
      if (v50) {
        sub_1D0C4C984(v50);
      }
    }
    sub_1D0C64604((void *)(v18 + 9968));
    uint64_t v72 = (void **)(v18 + 9920);
    sub_1D0CE960C(&v72);
    std::mutex::~mutex((std::mutex *)(v18 + 9848));
    uint64_t v72 = (void **)(v18 + 9792);
    sub_1D0CE960C(&v72);
    CFTypeID v51 = *(std::__shared_weak_count **)(v18 + 9776);
    if (v51) {
      sub_1D0C4C984(v51);
    }
    CFTypeID v52 = *(std::__shared_weak_count **)(v18 + 9760);
    if (v52) {
      sub_1D0C4C984(v52);
    }
    CFTypeID v53 = *(std::__shared_weak_count **)(v18 + 9744);
    if (v53) {
      sub_1D0C4C984(v53);
    }
    CFTypeID v54 = *(std::__shared_weak_count **)(v18 + 9728);
    if (v54) {
      sub_1D0C4C984(v54);
    }
    CFTypeID v55 = *(std::__shared_weak_count **)(v18 + 9712);
    if (v55) {
      sub_1D0C4C984(v55);
    }
    CFTypeID v56 = *(std::__shared_weak_count **)(v18 + 9696);
    if (v56) {
      sub_1D0C4C984(v56);
    }
    for (uint64_t j = 0; j != -1024; j -= 16)
    {
      CFTypeID v58 = *(std::__shared_weak_count **)(v18 + j + 9680);
      if (v58) {
        sub_1D0C4C984(v58);
      }
    }
    for (uint64_t k = 0; k != -256; k -= 16)
    {
      CFTypeID v60 = *(std::__shared_weak_count **)(v18 + k + 8656);
      if (v60) {
        sub_1D0C4C984(v60);
      }
    }
    for (uint64_t m = 0; m != -256; m -= 16)
    {
      CFTypeID v62 = *(std::__shared_weak_count **)(v18 + m + 8400);
      if (v62) {
        sub_1D0C4C984(v62);
      }
    }
    *(void *)(v18 + 360) = &unk_1F26F1290;
    uint64_t v63 = *(void *)(v18 + 8136);
    *(void *)(v18 + 8136) = 0;
    if (v63) {
      sub_1D0CE981C(v63);
    }
    sub_1D0CC7710((void *)(v18 + 360));
    uint64_t v72 = (void **)(v18 + 336);
    sub_1D0CE96F4(&v72);
    CFTypeID v64 = *(std::__shared_weak_count **)(v18 + 304);
    if (v64) {
      sub_1D0C4C984(v64);
    }
    CFTypeID v65 = *(void **)(v18 + 192);
    if (v65)
    {
      *(void *)(v18 + 200) = v65;
      operator delete(v65);
    }
    CFTypeID v66 = *(std::__shared_weak_count **)(v18 + 176);
    if (v66) {
      sub_1D0C4C984(v66);
    }
    if (*(char *)(v18 + 23) < 0) {
      operator delete(*(void **)v18);
    }
    MEMORY[0x1D25F0230](v18, 0x10F2C4042379925);
  }
  CFTypeID v67 = *(const void **)(a1 + 1320);
  if (v67)
  {
    CFRelease(v67);
    *(void *)(a1 + 1320) = 0;
  }
  uint64_t v68 = *(void *)(a1 + 1448);
  if (v68)
  {
    CFTypeID v69 = *(void **)(v68 + 16);
    if (v69)
    {
      do
      {
        long long v70 = (void *)*v69;
        operator delete(v69);
        CFTypeID v69 = v70;
      }
      while (v70);
    }
    uint64_t v71 = *(void **)v68;
    *(void *)uint64_t v68 = 0;
    if (v71) {
      operator delete(v71);
    }
    JUMPOUT(0x1D25F0230);
  }
}

uint64_t sub_1D0C6B328(uint64_t a1, CFStringRef theString, const void *a3)
{
  CFTypeRef v20 = theString;
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  uint64_t v6 = sub_1D0C6B578(*(void **)(a1 + 1448), &v20);
  if (!v6) {
    goto LABEL_33;
  }
  CFHashCode v7 = v6[3];
  CFHashCode v8 = sub_1D0C6B578(*(void **)(a1 + 1448), &v20);
  if (!v8) {
    goto LABEL_33;
  }
  if (!a3 || (unint64_t v9 = (BOOL *)v8[4], (uint64_t *)CFGetTypeID(a3) != v7))
  {
LABEL_13:
    if (dword_1EB671A40 < 3) {
      return 4294954394;
    }
    long long v16 = "(key '%s'): bad\n";
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "(key '%s'): bad\n");
LABEL_15:
    syslog(27, v16, CStringPtr);
    return 4294954394;
  }
  if (v7 == (uint64_t *)CFNumberGetTypeID())
  {
    uint8x8_t v10 = sub_1D0C6B578(*(void **)(a1 + 1448), &v20);
    if (!v10) {
      goto LABEL_33;
    }
    CFNumberType v11 = (CFNumberType)v10[5];
    CFTypeID v12 = CFGetTypeID(a3);
    if (v12 == CFNumberGetTypeID() && CFNumberGetValue((CFNumberRef)a3, v11, v9))
    {
      uint64_t v13 = sub_1D0C6B578(*(void **)(a1 + 1448), &v20);
      if (v13)
      {
        CFNumberRef v14 = (const __CFNumber *)v13[6];
        if (!v14 || CFNumberCompare((CFNumberRef)a3, v14, 0) != kCFCompareLessThan) {
          return 0;
        }
        if (dword_1EB671A40 < 3) {
          return 4294954394;
        }
        long long v16 = "bad (key '%s') (out of range)\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "bad (key '%s') (out of range)\n");
        goto LABEL_15;
      }
LABEL_33:
      sub_1D0C6B674();
    }
    goto LABEL_13;
  }
  if (v7 == (uint64_t *)CFBooleanGetTypeID())
  {
    CFTypeID v17 = CFGetTypeID(a3);
    BOOL v18 = v17 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)a3) != 0;
    uint64_t result = 0;
    *unint64_t v9 = v18;
  }
  else if (v7 == (uint64_t *)CFStringGetTypeID() || v7 == (uint64_t *)CFDataGetTypeID())
  {
    if (*(void *)v9) {
      CFRelease(*(CFTypeRef *)v9);
    }
    CFTypeRef v19 = CFRetain(a3);
    uint64_t result = 0;
    *(void *)unint64_t v9 = v19;
  }
  else
  {
    if (dword_1EB671A40 >= 2)
    {
      fwrite("unsupported CFTypeID for SetCommonProperty()\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(26, "unsupported CFTypeID for SetCommonProperty()\n");
    }
    return 4294954385;
  }
  return result;
}

uint64_t **sub_1D0C6B578(void *a1, CFTypeRef *a2)
{
  CFHashCode v4 = CFHash(*a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  CFHashCode v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    CFHashCode v9 = v4;
    if (v4 >= *(void *)&v5) {
      CFHashCode v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if (CFEqual(i[2], *a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void sub_1D0C6B674()
{
  exceptiounsigned int n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1D0C6B6C8(exception);
  __cxa_throw(exception, (struct type_info *)&unk_1F26F0F50, MEMORY[0x1E4FBA1D0]);
}

void sub_1D0C6B6B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1D0C6B6C8(std::logic_error *a1)
{
  uint64_t result = std::logic_error::logic_error(a1, "unordered_map::at: key not found");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

uint64_t sub_1D0C6B704(uint64_t a1, const void *a2, void *a3)
{
  CFTypeRef v14 = a2;
  int8x8_t v5 = sub_1D0C6B578(*(void **)(a1 + 1448), &v14);
  if (!v5) {
    goto LABEL_20;
  }
  CFHashCode v6 = v5[3];
  uint8x8_t v7 = sub_1D0C6B578(*(void **)(a1 + 1448), &v14);
  if (!v7) {
    goto LABEL_20;
  }
  unint64_t v8 = v7[4];
  *a3 = 0;
  if (v6 == (uint64_t *)CFNumberGetTypeID())
  {
    CFHashCode v9 = sub_1D0C6B578(*(void **)(a1 + 1448), &v14);
    if (v9)
    {
      uint8x8_t v10 = CFNumberCreate(0, (CFNumberType)v9[5], v8);
LABEL_15:
      uint64_t v13 = v10;
      uint64_t result = 0;
      *a3 = v13;
      return result;
    }
LABEL_20:
    sub_1D0C6B674();
  }
  if (v6 == (uint64_t *)CFBooleanGetTypeID())
  {
    CFNumberType v11 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)v8) {
      CFNumberType v11 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t result = *v11;
LABEL_14:
    uint8x8_t v10 = (void *)CFRetain((CFTypeRef)result);
    goto LABEL_15;
  }
  if (v6 == (uint64_t *)CFStringGetTypeID()
    || v6 == (uint64_t *)CFDataGetTypeID()
    || v6 == (uint64_t *)CFDictionaryGetTypeID())
  {
    uint64_t result = *v8;
    if (!*v8) {
      return result;
    }
    goto LABEL_14;
  }
  if (dword_1EB671A40 >= 2)
  {
    fwrite("unsupported CFTypeID for CopyCommonProperty()", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(26, "unsupported CFTypeID for CopyCommonProperty()");
  }
  return 4294954385;
}

uint64_t HEVCVideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, void *a3)
{
  if (dword_1EB671A40 >= 7)
  {
    fwrite("\n\n========================\n\nrunning through HEVCVideoEncoder_CreateInstance()\n\n========================\n\n", 0x69uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(31, "\n\n========================\n\nrunning through HEVCVideoEncoder_CreateInstance()\n\n========================\n\n");
  }
  VTVideoEncoderGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (dword_1EB671A40 >= 3)
  {
    fwrite("FigDerivedObjectCreate failed", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "FigDerivedObjectCreate failed");
  }
  *a3 = 0;
  return v4;
}

uint64_t sub_1D0C6B964()
{
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  sub_1D0CE9E88(*(void *)(DerivedStorage + 1288));
  return 0;
}

uint64_t sub_1D0C6B98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v15 = 0uLL;
  uint8x8_t v10 = (char *)operator new(0x320uLL, MEMORY[0x1E4FBA2D0]);
  uint64_t v11 = (uint64_t)v10;
  if (!v10) {
    goto LABEL_8;
  }
  bzero(v10 + 88, 0x2C8uLL);
  *(void *)(v11 + 96) = 0x186A0000280A0;
  *(void *)(v11 + 120) = 0x403E000000000000;
  *(void *)(v11 + 460) = 0;
  *(void *)(v11 + 452) = 0;
  *(_DWORD *)(v11 + 468) = 0;
  *(_DWORD *)(v11 + 356) = 1;
  *(void *)(v11 + 436) = 0;
  *(void *)(v11 + 444) = 0;
  *(void *)(v11 + 428) = 0;
  *(_DWORD *)(v11 + 660) = -1;
  *(_OWORD *)(v11 + 500) = 0u;
  *(_OWORD *)(v11 + 516) = 0u;
  *(_OWORD *)(v11 + 532) = 0u;
  *(_OWORD *)(v11 + 548) = 0u;
  *(_OWORD *)(v11 + 564) = 0u;
  *(_OWORD *)(v11 + 580) = 0u;
  *(_OWORD *)(v11 + 596) = 0u;
  *(_OWORD *)(v11 + 612) = 0u;
  *(_OWORD *)(v11 + 628) = 0u;
  *(_OWORD *)(v11 + 644) = 0u;
  *(_OWORD *)(v11 + 664) = 0u;
  *(_OWORD *)(v11 + 680) = 0u;
  *(_DWORD *)(v11 + 284) = -1;
  if (!a3) {
    goto LABEL_8;
  }
  *(void *)(v11 + 8) = a2;
  if (!*(unsigned char *)(DerivedStorage + 1313) && sub_1D0C6BC48(DerivedStorage))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Init failed\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Init failed\n");
    }
    goto LABEL_8;
  }
  if (sub_1D0CF17A4(*(void *)(DerivedStorage + 1288)))
  {
LABEL_8:
    VTEncoderSessionEmitEncodedTile();
    if (v11)
    {
      sub_1D0CC716C((void *)(v11 + 88));
      MEMORY[0x1D25F0230](v11, 0x1070C40040150F9);
    }
    goto LABEL_10;
  }
  if (sub_1D0C709FC(DerivedStorage, (uint64_t *)&v15, v11, a6))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Setup failed\n", 0xDuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Setup failed\n");
    }
    goto LABEL_8;
  }
  uint64_t v13 = *(void *)(DerivedStorage + 1288);
  long long v14 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_1D0CF1890(v13, &v14, v11, v11 + 88);
  if (*((void *)&v14 + 1)) {
    sub_1D0C4C984(*((std::__shared_weak_count **)&v14 + 1));
  }
LABEL_10:
  if (*((void *)&v15 + 1)) {
    sub_1D0C4C984(*((std::__shared_weak_count **)&v15 + 1));
  }
  return 0;
}

void sub_1D0C6BC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1D0C4C984(a10);
  }
  if (a12) {
    sub_1D0C4C984(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0C6BC48(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  CFHashCode v3 = v2;
  uint64_t v4 = v1;
  uint64_t v384 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(v1 + 8);
  if (!*(void *)(v1 + 1272))
  {
    if (v5 != 3) {
      goto LABEL_8;
    }
LABEL_7:
    *(_WORD *)(v1 + 12) = 0;
    *(_DWORD *)(v1 + 16) = 1;
    *(_DWORD *)(v1 + 144) = 40;
    goto LABEL_8;
  }
  if (*(unsigned char *)(v1 + 12)) {
    BOOL v6 = v5 == 3;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v7 = *(void *)(v1 + 1376);
  int v8 = *(_DWORD *)(v1 + 1384);
  int v9 = *(_DWORD *)(v1 + 144);
  if (v9)
  {
    if (v9 != 41) {
      goto LABEL_31;
    }
    *(_DWORD *)(v1 + 144) = 0;
  }
  if (*(unsigned char *)(v1 + 12))
  {
    if (*(unsigned char *)(v1 + 13)) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 1;
    }
    *(_DWORD *)(v1 + 1196) = v10;
    unsigned int v11 = __clz(__rbit32(v10));
  }
  else
  {
    *(_DWORD *)(v1 + 16) = 1;
    *(unsigned char *)(v1 + 13) = 0;
    unsigned int v11 = __clz(__rbit32(*(_DWORD *)(v1 + 1196))) & 0x1F;
  }
  *(_DWORD *)(v1 + 1200) = v11;
  if (*(_DWORD *)(v1 + 1220) == -1)
  {
    int IntegerCodePointForString = CVColorPrimariesGetIntegerCodePointForString(*(CFStringRef *)(v1 + 72));
    int v13 = CVTransferFunctionGetIntegerCodePointForString(*(CFStringRef *)(v4 + 80));
    int v14 = CVYCbCrMatrixGetIntegerCodePointForString(*(CFStringRef *)(v4 + 88));
    if (IntegerCodePointForString == 9 && v13 == 16 && v14 == 9)
    {
      int v15 = 2;
      if (dword_1EB671A40 <= 5) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
    if (IntegerCodePointForString == 9 && v13 == 18 && v14 == 9)
    {
      int v15 = 3;
      if (dword_1EB671A40 < 6)
      {
LABEL_30:
        *(_DWORD *)(v4 + 1220) = v15;
        goto LABEL_31;
      }
LABEL_29:
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Changing hdr_type from %d to %d\n", *(_DWORD *)(v4 + 1220), v15);
      syslog(30, "Changing hdr_type from %d to %d\n", *(_DWORD *)(v4 + 1220), v15);
      goto LABEL_30;
    }
  }
LABEL_31:
  if (!*(void *)(v4 + 1272) && *(_DWORD *)(v4 + 144) != 40)
  {
    int v19 = *(_DWORD *)(v4 + 28);
    if (v19 < 1)
    {
      float v17 = *(float *)(v4 + 32);
      if (v17 >= 0.0)
      {
LABEL_36:
        *(_DWORD *)(v4 + 1328) = 1;
        int v18 = *(unsigned __int8 *)(v4 + 172);
        if (!*(unsigned char *)(v4 + 172)) {
          goto LABEL_45;
        }
        goto LABEL_37;
      }
      int v18 = *(unsigned __int8 *)(v4 + 172);
      *(_DWORD *)(v4 + 1328) = v18;
      if (v18)
      {
LABEL_37:
        if (v17 < 0.0)
        {
          int v16 = 30;
          goto LABEL_58;
        }
LABEL_45:
        if (v17 < 0.0) {
          float v17 = 0.75;
        }
        if (v17 < 1.0) {
          float v20 = v17;
        }
        else {
          float v20 = 1.0;
        }
        BOOL v260 = v17 > 0.0;
        float v21 = 0.0;
        if (v260) {
          float v21 = v20;
        }
        int v16 = a3210[(int)(v21 * 100.0 + 0.5)];
        if (v21 == 1.0 && v18 == 0)
        {
          uint64_t v23 = *(void *)(v4 + 1288) + 360;
          buffer[0] = 0;
          sub_1D0C636C0(v23, 0x72868D48B2D5EBA3uLL, "lossless", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
        }
        goto LABEL_58;
      }
      if (!v19)
      {
        if (7 * *(_DWORD *)(v4 + 1300) * *(_DWORD *)(v4 + 1304) >= 800000000) {
          int v19 = 800000000;
        }
        else {
          int v19 = 7 * *(_DWORD *)(v4 + 1300) * *(_DWORD *)(v4 + 1304);
        }
        *(_DWORD *)(v4 + 28) = v19;
      }
    }
    else
    {
      *(_DWORD *)(v4 + 1328) = 0;
    }
    sub_1D0CEE110(*(void *)(v4 + 1288), 0x72351913690D14uLL, "bps", v19);
    goto LABEL_59;
  }
  if (!*(unsigned char *)(v4 + 156))
  {
    float v17 = *(float *)(v4 + 32);
    goto LABEL_36;
  }
  *(_DWORD *)(v4 + 1328) = 2;
  int v16 = *(_DWORD *)(v4 + 152);
LABEL_58:
  sub_1D0CEE110(*(void *)(v4 + 1288), 0x8B74307B55C5E6FuLL, "iq", v16);
  uint64_t v24 = *(void *)(v4 + 1288);
  int v25 = sub_1D0C71C0C();
  sub_1D0CEE110(v24, 0x8D55707B5757DFAuLL, "pq", v25 + v16);
LABEL_59:
  CFStringRef v26 = *(const __CFString **)(v4 + 1208);
  if (v26)
  {
    CFStringGetCString(v26, buffer, 32, 0x8000100u);
    uint64_t v27 = *(void *)(v4 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1D0C636C0(v27, 0xAAB8A388324B35B9, "loglevel", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  if (dword_1EB671A40 >= 7)
  {
    uint64_t v28 = (FILE **)MEMORY[0x1E4F143D8];
    fwrite("\n========================\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143D8]);
    if (dword_1EB671A40 >= 6)
    {
      fwrite("\n=== VTCompressionProperties.h === \n", 0x24uLL, 1uLL, *v28);
      if (dword_1EB671A40 >= 6)
      {
        unint64_t v29 = *v28;
        CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)v4, 0x8000100u);
        fprintf(v29, "profileLevelArg             = %s\n", CStringPtr);
        if (dword_1EB671A40 >= 6)
        {
          fprintf(*v28, "profile                     = %u\n", *(_DWORD *)(v4 + 8));
          if (dword_1EB671A40 >= 6)
          {
            fprintf(*v28, "allowTemporal               = %d\n", *(unsigned __int8 *)(v4 + 12));
            if (dword_1EB671A40 >= 6)
            {
              fprintf(*v28, "allowB                      = %d\n", *(unsigned __int8 *)(v4 + 13));
              if (dword_1EB671A40 >= 6)
              {
                fprintf(*v28, "droppablePOnly              = %d\n", *(unsigned __int8 *)(v4 + 14));
                if (dword_1EB671A40 >= 6)
                {
                  fprintf(*v28, "maxKeyFrameInterval         = %u\n", *(_DWORD *)(v4 + 16));
                  if (dword_1EB671A40 >= 6)
                  {
                    fprintf(*v28, "maxKeyFrameIntervalDuratiounsigned int n = %f\n", *(float *)(v4 + 20));
                    if (dword_1EB671A40 >= 6)
                    {
                      fprintf(*v28, "numberOfThreads             = %d\n", *(_DWORD *)(v4 + 24));
                      if (dword_1EB671A40 >= 6)
                      {
                        fprintf(*v28, "targetBitsPerSec            = %d\n", *(_DWORD *)(v4 + 28));
                        if (dword_1EB671A40 >= 6)
                        {
                          fprintf(*v28, "expectedFrameRate           = %f\n", *(double *)(v4 + 40));
                          if (dword_1EB671A40 >= 6)
                          {
                            fprintf(*v28, "numberOfFramesToEncode      = %d\n", *(_DWORD *)(v4 + 48));
                            if (dword_1EB671A40 >= 6)
                            {
                              fprintf(*v28, "sar_width                   = %u\n", *(_DWORD *)(v4 + 64));
                              if (dword_1EB671A40 >= 6)
                              {
                                fprintf(*v28, "sar_height                  = %u\n", *(_DWORD *)(v4 + 68));
                                if (dword_1EB671A40 >= 6)
                                {
                                  unint64_t v31 = *v28;
                                  unint64_t v32 = CFStringGetCStringPtr(*(CFStringRef *)(v4 + 72), 0x8000100u);
                                  fprintf(v31, "colorPrimaries              = %s\n", v32);
                                  if (dword_1EB671A40 >= 6)
                                  {
                                    uint64_t v33 = *v28;
                                    CFTypeID v34 = CFStringGetCStringPtr(*(CFStringRef *)(v4 + 80), 0x8000100u);
                                    fprintf(v33, "transferCharacteristics     = %s\n", v34);
                                    if (dword_1EB671A40 >= 6)
                                    {
                                      uint64_t v35 = *v28;
                                      uint64_t v36 = CFStringGetCStringPtr(*(CFStringRef *)(v4 + 88), 0x8000100u);
                                      fprintf(v35, "matrixCoefficients          = %s\n", v36);
                                      if (dword_1EB671A40 >= 6)
                                      {
                                        fwrite("\n=== VTCompressionPropertiesPrivate.h === \n", 0x2BuLL, 1uLL, *v28);
                                        if (dword_1EB671A40 >= 6)
                                        {
                                          fprintf(*v28, "usage                       = %d\n", *(_DWORD *)(v4 + 144));
                                          if (dword_1EB671A40 >= 6)
                                          {
                                            fprintf(*v28, "priority                    = %u\n", *(_DWORD *)(v4 + 148));
                                            if (dword_1EB671A40 >= 6)
                                            {
                                              fwrite("\n=== VideoProcessing.h === \n", 0x1CuLL, 1uLL, *v28);
                                              if (dword_1EB671A40 >= 6)
                                              {
                                                fprintf(*v28, "thermalLevel                = %d\n", *(_DWORD *)(v4 + 176));
                                                if (dword_1EB671A40 >= 6)
                                                {
                                                  fprintf(*v28, "fUsingCellular              = %d\n", *(unsigned __int8 *)(v4 + 1193));
                                                  if (dword_1EB671A40 >= 6)
                                                  {
                                                    fwrite("\n=== LRPVideoToolboxPrivateKeys.h === \n", 0x27uLL, 1uLL, *v28);
                                                    if (dword_1EB671A40 >= 6)
                                                    {
                                                      fprintf(*v28, "sceneChangeIdrInsertion     = %d\n", *(unsigned __int8 *)(v4 + 1194));
                                                      if (dword_1EB671A40 >= 6)
                                                      {
                                                        fprintf(*v28, "gopSize                     = %d\n", *(_DWORD *)(v4 + 1196));
                                                        if (dword_1EB671A40 >= 6)
                                                        {
                                                          fprintf(*v28, "maxReorder                  = %d\n", *(_DWORD *)(v4 + 1204));
                                                          if (dword_1EB671A40 >= 6)
                                                          {
                                                            CFTypeID v37 = *v28;
                                                            CFTypeID v38 = CFStringGetCStringPtr(*(CFStringRef *)(v4 + 1208), 0x8000100u);
                                                            fprintf(v37, "logLevel                    = %s\n", v38);
                                                            if (dword_1EB671A40 >= 6)
                                                            {
                                                              fprintf(*v28, "md5                         = %d\n", *(unsigned __int8 *)(v4 + 1216));
                                                              if (dword_1EB671A40 >= 6)
                                                              {
                                                                fprintf(*v28, "hdr_type                    = %d\n", *(_DWORD *)(v4 + 1220));
                                                                if (dword_1EB671A40 >= 6)
                                                                {
                                                                  CFTypeID v39 = *v28;
                                                                  CFTypeID v40 = CFStringGetCStringPtr(*(CFStringRef *)(v4 + 1224), 0x8000100u);
                                                                  fprintf(v39, "hdr10MaxCLL                 = %s\n", v40);
                                                                  if (dword_1EB671A40 >= 6)
                                                                  {
                                                                    CFTypeID v41 = *v28;
                                                                    CFTypeID v42 = CFStringGetCStringPtr(*(CFStringRef *)(v4 + 1232), 0x8000100u);
                                                                    fprintf(v41, "hdr10MasterDisplay          = %s\n", v42);
                                                                    if (dword_1EB671A40 >= 6)
                                                                    {
                                                                      fprintf(*v28, "noiseLevelControl           = %d\n", *(unsigned __int8 *)(v4 + 1240));
                                                                      if (dword_1EB671A40 >= 6)
                                                                      {
                                                                        fprintf(*v28, "schedulePolicy              = %d\n", *(_DWORD *)(v4 + 1244));
                                                                        if (dword_1EB671A40 >= 6)
                                                                        {
                                                                          fwrite("\n=== others === \n", 0x11uLL, 1uLL, *v28);
                                                                          if (dword_1EB671A40 >= 6)
                                                                          {
                                                                            fprintf(*v28, "codecType                   = %u\n", *(_DWORD *)(v4 + 1296));
                                                                            if (dword_1EB671A40 >= 6)
                                                                            {
                                                                              fprintf(*v28, "dimensions                  = %dx%d\n", *(_DWORD *)(v4 + 1300), *(_DWORD *)(v4 + 1304));
                                                                              if (dword_1EB671A40 >= 6)
                                                                              {
                                                                                CFTypeID v43 = *v28;
                                                                                CFTypeID v44 = CFStringGetCStringPtr(*(CFStringRef *)(v4 + 1248), 0x8000100u);
                                                                                fprintf(v43, "version_string              = %s\n", v44);
                                                                                if (dword_1EB671A40 >= 6) {
                                                                                  fwrite("\n========================\n", 0x1AuLL, 1uLL, *v28);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*(_DWORD *)(v4 + 8)) {
    goto LABEL_114;
  }
  uint64_t v45 = *(void *)(v4 + 1288);
  snprintf(buffer, 0x10uLL, "%u", *(_DWORD *)(v4 + 8));
  LOBYTE(__p) = 0;
  sub_1D0C636C0(v45 + 360, 0x8ADD349E618BA10ELL, "profile", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  int v46 = *(_DWORD *)(v4 + 8);
  int v47 = 8;
  if (v46 <= 1891)
  {
    switch(v46)
    {
      case 0:
        goto LABEL_114;
      case 1:
      case 3:
        goto LABEL_115;
      case 2:
        goto LABEL_111;
      default:
        goto LABEL_112;
    }
    goto LABEL_115;
  }
  if (v46 > 2915)
  {
    if (v46 == 3044) {
      goto LABEL_115;
    }
    if (v46 != 2916) {
      goto LABEL_112;
    }
LABEL_111:
    int v47 = 10;
    goto LABEL_115;
  }
  if (v46 == 1892) {
    goto LABEL_111;
  }
  if (v46 != 2020)
  {
LABEL_112:
    if (dword_1EB671A40 >= 4)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Specified profile %d, but we don't know the allowed bitdepth\n", *(_DWORD *)(v4 + 8));
      syslog(28, "Specified profile %d, but we don't know the allowed bitdepth\n", *(_DWORD *)(v4 + 8));
    }
LABEL_114:
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v3);
    int v47 = sub_1D0C50E9C(PixelFormatType);
  }
LABEL_115:
  sub_1D0CEE110(*(void *)(v4 + 1288), 0x8C49EF6ED9F28EA0, "bit-depth", v47);
  sub_1D0CEE110(*(void *)(v4 + 1288), 0xAF63E84C860200F0, "u", *(_DWORD *)(v4 + 144));
  snprintf(buffer, 0x40uLL, "%dx%d", *(_DWORD *)(v4 + 1300), *(_DWORD *)(v4 + 1304));
  uint64_t v49 = *(void *)(v4 + 1288) + 360;
  LOBYTE(__p) = 0;
  sub_1D0C636C0(v49, 0xAF63D94C8601E773, "d", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  int v50 = *(_DWORD *)(v4 + 144);
  if (v50 == 33)
  {
    int v51 = 2;
    int v52 = 4;
  }
  else if ((v50 - 34) >= 4)
  {
    if (v50 < 0)
    {
      int v52 = 2;
      int v51 = 2;
    }
    else
    {
      int v51 = 2 * *(unsigned __int8 *)(v4 + 12);
      if (*(int *)(v4 + 1196) < 2) {
        int v52 = 2 * *(unsigned __int8 *)(v4 + 12);
      }
      else {
        int v52 = *(_DWORD *)(v4 + 1200) + 1;
      }
    }
  }
  else
  {
    int v51 = 2;
    int v52 = 5;
  }
  snprintf(buffer, 0x80uLL, "%d:%d:%d:%d", v52, 0, v51, v51);
  uint64_t v53 = *(void *)(v4 + 1288) + 360;
  LOBYTE(__p) = 0;
  sub_1D0C636C0(v53, 0x89E9C01960F4C582, "ref", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  sub_1D0CEE1AC(*(void *)(v4 + 1288), 0x8984E07B541C091uLL, "fr", *(double *)(v4 + 40));
  signed int v54 = CVPixelBufferGetPixelFormatType(v3);
  CFStringRef v55 = *(const __CFString **)(v4 + 1224);
  if (v55)
  {
    CFStringGetCString(v55, buffer, 50, 0x8000100u);
    uint64_t v56 = *(void *)(v4 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1D0C636C0(v56, 0x3DC4253E192FDEDuLL, "max-cll", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  CFStringRef v57 = *(const __CFString **)(v4 + 1232);
  if (v57)
  {
    CFStringGetCString(v57, buffer, 200, 0x8000100u);
    uint64_t v58 = *(void *)(v4 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1D0C636C0(v58, 0x90898E7CB0F4FE00, "master-display", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  CFDataRef v59 = *(const __CFData **)(v4 + 96);
  if (v59)
  {
    memset(buffer, 0, sizeof(buffer));
    uint64_t v368 = 0;
    uint64_t v370 = 0;
    unint64_t v371 = 0;
    unint64_t v372 = 0;
    BytePtr = (unsigned int *)CFDataGetBytePtr(v59);
    if (CFDataGetLength(*(CFDataRef *)(v4 + 96)) == 4 && !sub_1D0C4CAD0((uint64_t)buffer, BytePtr, 4))
    {
      CFTypeID v61 = (unsigned int *)(v370 + ((unint64_t)(SHIDWORD(v372) + 16) >> 3));
      if ((unint64_t)v61 >= v371)
      {
        if ((unint64_t)v61 > v371) {
          CFTypeID v61 = (unsigned int *)v371;
        }
        unsigned int v62 = v372;
      }
      else
      {
        unsigned int v62 = bswap32(*v61);
      }
      unsigned int v63 = WORD1(v372);
      unsigned int v64 = v62 << (BYTE4(v372) & 7);
      unint64_t v372 = __PAIR64__(HIDWORD(v372), v64) & 0x7FFFFFFFFLL;
      if ((unint64_t)v61 + 2 > v371) {
        uint64_t v370 = v371;
      }
      snprintf((char *)&__p, 0x32uLL, "%u:%u", v63, HIWORD(v64));
      uint64_t v65 = *(void *)(v4 + 1288) + 360;
      LOBYTE(v376[0]) = 0;
      sub_1D0C636C0(v65, 0x3DC4253E192FDEDuLL, "max-cll", (char *)&__p, 0xFFFFFFFFLL, (uint64_t)v376);
    }
    if (*(void *)buffer) {
      operator delete(*(void **)buffer);
    }
  }
  CFDataRef v66 = *(const __CFData **)(v4 + 104);
  if (v66)
  {
    uint64_t v379 = 0;
    long long __p = 0;
    uint64_t v380 = 0;
    int v381 = 0;
    unint64_t v383 = 0;
    uint64_t v382 = 0;
    CFTypeID v67 = (unsigned int *)CFDataGetBytePtr(v66);
    if (CFDataGetLength(*(CFDataRef *)(v4 + 104)) == 24 && !sub_1D0C4CAD0((uint64_t)&__p, v67, 24))
    {
      uint64_t v68 = 0;
      unsigned int v69 = v383;
      int v70 = HIDWORD(v383);
      unint64_t v71 = (unint64_t)v382;
      uint64_t v72 = v381;
      int v73 = BYTE4(v383) & 7;
      do
      {
        HIDWORD(v383) = v73;
        int16x8_t v74 = (unsigned int *)((char *)v72 + ((unint64_t)(v70 + 16) >> 3));
        int v381 = v74;
        if ((unint64_t)v74 >= v71)
        {
          if ((unint64_t)v74 > v71) {
            int16x8_t v74 = (unsigned int *)v71;
          }
          unsigned int v75 = v69;
        }
        else
        {
          unsigned int v75 = bswap32(*v74);
        }
        *(_WORD *)((char *)v376 + v68 * 2) = HIWORD(v69);
        unsigned int v76 = v75 << v73;
        unint64_t v383 = __PAIR64__(v73, v76);
        uint64_t v72 = (unsigned int *)((char *)v74 + 2);
        int v381 = v72;
        if ((unint64_t)v72 >= v71)
        {
          if ((unint64_t)v72 > v71)
          {
            int v381 = (unsigned int *)v71;
            uint64_t v72 = (unsigned int *)v71;
          }
          unsigned int v77 = v76;
        }
        else
        {
          unsigned int v77 = bswap32(*v72);
        }
        unsigned int v69 = v77 << v73;
        LODWORD(v383) = v69;
        v365[v68++] = HIWORD(v76);
        int v70 = v73;
      }
      while (v68 != 3);
      HIDWORD(v383) = v73;
      long long v78 = (unsigned int *)((char *)v72 + 2);
      int v381 = (unsigned int *)((char *)v72 + 2);
      if ((unint64_t)v72 + 2 >= v71)
      {
        if ((unint64_t)v72 + 2 > v71) {
          long long v78 = (unsigned int *)v71;
        }
        unsigned int v79 = v69;
      }
      else
      {
        unsigned int v79 = bswap32(*v78);
      }
      unsigned int v80 = v79 << v73;
      unint64_t v383 = __PAIR64__(v73, v80);
      long long v81 = (unsigned int *)((char *)v78 + 2);
      int v381 = v81;
      if ((unint64_t)v81 >= v71)
      {
        if ((unint64_t)v81 > v71) {
          long long v81 = (unsigned int *)v71;
        }
        unsigned int v82 = v80;
      }
      else
      {
        unsigned int v82 = bswap32(*v81);
      }
      unsigned int v83 = v82 << v73;
      unint64_t v383 = __PAIR64__(v73, v83);
      long long v84 = (unsigned int *)((char *)v81 + 2);
      int v381 = (unsigned int *)((char *)v81 + 2);
      if ((unint64_t)v81 + 2 >= v71)
      {
        if ((unint64_t)v81 + 2 > v71) {
          long long v84 = (unsigned int *)v71;
        }
        unsigned int v85 = v83;
      }
      else
      {
        unsigned int v85 = bswap32(*v84);
      }
      unsigned int v86 = v85 << v73;
      unint64_t v383 = __PAIR64__(v73, v86);
      uint64_t v87 = (unsigned int *)((char *)v84 + 2);
      int v381 = v87;
      if ((unint64_t)v87 >= v71)
      {
        if ((unint64_t)v87 > v71) {
          uint64_t v87 = (unsigned int *)v71;
        }
        unsigned int v88 = v86;
      }
      else
      {
        unsigned int v88 = bswap32(*v87);
      }
      unsigned int v89 = v83 & 0xFFFF0000;
      unsigned int v90 = v88 << v73;
      unint64_t v383 = __PAIR64__(v73, v90);
      uint64_t v91 = (unsigned int *)((char *)v87 + 2);
      int v381 = v91;
      if ((unint64_t)v91 >= v71)
      {
        if ((unint64_t)v91 > v71) {
          uint64_t v91 = (unsigned int *)v71;
        }
        unsigned int v92 = v90;
      }
      else
      {
        unsigned int v92 = bswap32(*v91);
      }
      unsigned int v93 = HIWORD(v69);
      unsigned int v94 = HIWORD(v80);
      unsigned int v95 = v90 & 0xFFFF0000;
      unsigned int v96 = v92 << v73;
      unint64_t v383 = __PAIR64__(v73, v96);
      if ((unint64_t)v91 + 2 > v71) {
        int v381 = (unsigned int *)v71;
      }
      snprintf(buffer, 0xC8uLL, "%hu:%hu:%hu:%hu:%hu:%hu:%hu:%hu:%u:%u", LOWORD(v376[0]), v365[0], WORD1(v376[0]), v365[1], WORD2(v376[0]), v365[2], v93, v94, v89 | HIWORD(v86), v95 | HIWORD(v96));
      uint64_t v97 = *(void *)(v4 + 1288) + 360;
      char v366 = 0;
      sub_1D0C636C0(v97, 0x90898E7CB0F4FE00, "master-display", buffer, 0xFFFFFFFFLL, (uint64_t)&v366);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  if (*(void *)(v4 + 112))
  {
    uint64_t v379 = 0;
    long long __p = 0;
    uint64_t v380 = 0;
    int v381 = 0;
    unint64_t v383 = 0;
    uint64_t v382 = 0;
    sub_1D0C71D34((uint64_t)buffer);
    int16x8_t v98 = (unsigned int *)CFDataGetBytePtr(*(CFDataRef *)(v4 + 112));
    if (CFDataGetLength(*(CFDataRef *)(v4 + 112)) == 8 && !sub_1D0C4CAD0((uint64_t)&__p, v98, 8))
    {
      char v99 = BYTE4(v383) & 7;
      int32x4_t v100 = (unsigned int *)((char *)v381 + ((unint64_t)(SHIDWORD(v383) + 32) >> 3));
      if (v100 >= v382)
      {
        if (v100 > v382) {
          int32x4_t v100 = v382;
        }
        unsigned int v101 = v383;
      }
      else
      {
        unsigned int v101 = bswap32(*v100);
      }
      int32x4_t v102 = (unsigned int *)((char *)v100 + 2);
      if (v102 >= v382)
      {
        if (v102 > v382) {
          int32x4_t v102 = v382;
        }
        unsigned int v103 = v101 << v99;
      }
      else
      {
        unsigned int v103 = bswap32(*v102);
      }
      LODWORD(v383) = v103 << v99;
      HIDWORD(v383) = BYTE4(v383) & 7;
      int32x4_t v104 = (unsigned int *)((char *)v102 + 2);
      int v381 = v104;
      if (v104 >= v382)
      {
        if (v104 > v382) {
          int v381 = v382;
        }
        unsigned int v105 = v103 << v99;
      }
      else
      {
        unsigned int v105 = bswap32(*v104);
      }
      LODWORD(v383) = v105 << v99;
      int32x4_t v106 = (void *)std::ostream::operator<<();
      sub_1D0C7200C(v106);
      int v107 = (void *)std::ostream::operator<<();
      sub_1D0C7200C(v107);
      std::ostream::operator<<();
      uint64_t v108 = *(void *)(v4 + 1288);
      std::stringbuf::str();
      if (v377 >= 0) {
        unsigned int v109 = (char *)v376;
      }
      else {
        unsigned int v109 = (char *)v376[0];
      }
      LOBYTE(v365[0]) = 0;
      sub_1D0C636C0(v108 + 360, 0x6FFBA4D618E54C5DuLL, "ambient-viewing", v109, 0xFFFFFFFFLL, (uint64_t)v365);
      if (v377 < 0) {
        operator delete(v376[0]);
      }
    }
    *(void *)buffer = *MEMORY[0x1E4FBA408];
    uint64_t v110 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)&buffer[*(void *)(*(void *)buffer - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
    uint64_t v368 = v110;
    uint64_t v369 = MEMORY[0x1E4FBA470] + 16;
    if (v374 < 0) {
      operator delete(v373);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1D25F01B0](&v375);
    if (__p) {
      operator delete(__p);
    }
  }
  int v111 = *(_DWORD *)(v4 + 1220);
  if (v111 == -1) {
    goto LABEL_223;
  }
  sub_1D0CEE110(*(void *)(v4 + 1288), 0x272E34E2BFB32E6CuLL, "hdr-type", v111);
  unsigned int v112 = *(_DWORD *)(v4 + 1220);
  if (v112 < 3)
  {
    uint64_t v113 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v113, 0xB5C61104404590D6, "hdr-pq-deblock", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    uint64_t v114 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v114, 0x240E0E991FD2AE9BuLL, "hdr-pq-banding", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    uint64_t v115 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v115, 0xA8EDB06A6EA3063ELL, "hdr-pq-qpm", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    uint64_t v116 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v116, 0xE7A385CA7BF9D2E1, "hdr-pq-chroma-qpm", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    uint64_t v117 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v117, 0xEBAEEC9A08259398, "adaptive-hdr-chroma-qpm", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    goto LABEL_220;
  }
  if (v112 == 3)
  {
    uint64_t v118 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v118, 0xB71C8689F9C18CECLL, "hdr-hlg-qpm", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    goto LABEL_220;
  }
  if (dword_1EB671A40 < 4)
  {
LABEL_223:
    uint64_t v121 = *(void *)(v4 + 1288);
    CFTypeRef Attachment = CVBufferGetAttachment(v3, (CFStringRef)*MEMORY[0x1E4F24A10], 0);
    CFTypeRef v123 = CVBufferGetAttachment(v3, (CFStringRef)*MEMORY[0x1E4F24A08], 0);
    if (Attachment) {
      int16x8_t v124 = Attachment;
    }
    else {
      int16x8_t v124 = v123;
    }
    if (v124)
    {
      if (v123 && !CFEqual(v124, v123) && dword_1EB671A40 >= 4)
      {
        fwrite("Chroma siting for bottom field differs from top\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(28, "Chroma siting for bottom field differs from top\n");
      }
      if (!CFEqual(v124, (CFTypeRef)*MEMORY[0x1E4F24A38]))
      {
        if (CFEqual(v124, (CFTypeRef)*MEMORY[0x1E4F24A28]))
        {
          int v125 = 1;
          goto LABEL_233;
        }
        if (CFEqual(v124, (CFTypeRef)*MEMORY[0x1E4F24A48]))
        {
          int v125 = 2;
          goto LABEL_233;
        }
        if (CFEqual(v124, (CFTypeRef)*MEMORY[0x1E4F24A40]))
        {
          int v125 = 3;
          goto LABEL_233;
        }
        if (CFEqual(v124, (CFTypeRef)*MEMORY[0x1E4F24A20]))
        {
          int v125 = 4;
          goto LABEL_233;
        }
        if (CFEqual(v124, (CFTypeRef)*MEMORY[0x1E4F24A18]))
        {
          int v125 = 5;
          goto LABEL_233;
        }
      }
    }
    int v125 = 0;
LABEL_233:
    sub_1D0CEE110(v121, 0xEADA4767E797268BLL, "vui-chroma-loc", v125);
    uint64_t v126 = *(void *)(v4 + 1288);
    int v127 = CVColorPrimariesGetIntegerCodePointForString(*(CFStringRef *)(v4 + 72));
    sub_1D0CEE110(v126, 0x9FFE593DC10E7CC4, "vui-primaries", v127);
    uint64_t v128 = *(void *)(v4 + 1288);
    int v129 = CVTransferFunctionGetIntegerCodePointForString(*(CFStringRef *)(v4 + 80));
    sub_1D0CEE110(v128, 0x2660BA38B42FDFB5uLL, "vui-transfer", v129);
    uint64_t v130 = *(void *)(v4 + 1288);
    int v131 = CVYCbCrMatrixGetIntegerCodePointForString(*(CFStringRef *)(v4 + 88));
    sub_1D0CEE110(v130, 0xE961BACE8A163BCBLL, "vui-matrix-coeff", v131);
    goto LABEL_234;
  }
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "None of the hdr tuning parameters is enabled for hdr_type=%d.\n", *(_DWORD *)(v4 + 1220));
  syslog(28, "None of the hdr tuning parameters is enabled for hdr_type=%d.\n", *(_DWORD *)(v4 + 1220));
LABEL_220:
  unsigned int v119 = *(_DWORD *)(v4 + 1220);
  if (v119 > 2) {
    goto LABEL_223;
  }
  if (v119 >= 2)
  {
    sub_1D0CEE110(*(void *)(v4 + 1288), 0xEADA4767E797268BLL, "vui-chroma-loc", 2);
    sub_1D0CEE110(*(void *)(v4 + 1288), 0x9FFE593DC10E7CC4, "vui-primaries", 9);
    sub_1D0CEE110(*(void *)(v4 + 1288), 0x2660BA38B42FDFB5uLL, "vui-transfer", 16);
    sub_1D0CEE110(*(void *)(v4 + 1288), 0xE961BACE8A163BCBLL, "vui-matrix-coeff", 9);
  }
  else
  {
    sub_1D0CEE110(*(void *)(v4 + 1288), 0xEADA4767E797268BLL, "vui-chroma-loc", 0);
    snprintf(buffer, 0x28uLL, "%d/%lld", v8, v7);
    uint64_t v120 = *(void *)(v4 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1D0C636C0(v120, 0x8984E07B541C091uLL, "fr", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
LABEL_234:
  if (v54 <= 1278226735)
  {
    if (v54 != 875704422)
    {
      unsigned __int16 v132 = 12344;
      goto LABEL_242;
    }
LABEL_241:
    uint64_t v133 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v133, 0x3BEB44829B7A4FABuLL, "vui-full-range", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    unsigned __int16 v132 = 12592;
LABEL_242:
    if (v54 != (v132 | 0x4C300000)) {
      goto LABEL_245;
    }
    goto LABEL_243;
  }
  switch(v54)
  {
    case 1278226736:
LABEL_243:
      uint64_t v134 = *(void *)(v4 + 1288) + 360;
      buffer[0] = 0;
      sub_1D0C636C0(v134, 0x3BEB44829B7A4FABuLL, "vui-full-range", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
      uint64_t v135 = *(void *)(v4 + 1288) + 360;
      buffer[0] = 0;
      sub_1D0C636C0(v135, 0xD1603A6EC53E98DFLL, "chroma", "mono", 0xFFFFFFFFLL, (uint64_t)buffer);
      break;
    case 1496395842:
      uint64_t v136 = *(void *)(v4 + 1288) + 360;
      buffer[0] = 0;
      sub_1D0C636C0(v136, 0x9FA17F231CA2208DLL, "legacy-pixfmt", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
      break;
    case 2019963440:
      goto LABEL_241;
  }
LABEL_245:
  if (*(_DWORD *)(v4 + 1220) <= 1u)
  {
    uint64_t v137 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v137, 0x3BEB44829B7A4FABuLL, "vui-full-range", "false", 0xFFFFFFFFLL, (uint64_t)buffer);
  }
  snprintf(buffer, 0x40uLL, "%d:%d", *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 68));
  uint64_t v138 = *(void *)(v4 + 1288) + 360;
  LOBYTE(__p) = 0;
  sub_1D0C636C0(v138, 0x4179B3C137C3CEB0uLL, "vui-sar", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  if (*(unsigned char *)(v4 + 14))
  {
    *(_DWORD *)(v4 + 1196) = 1;
    uint64_t v139 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v139, 0x32468D84F55FB2A7uLL, "number-gop", "1", 0xFFFFFFFFLL, (uint64_t)buffer);
    sub_1D0CEE110(*(void *)(v4 + 1288), 0xA72E681EA6EA2FFDLL, "gop-size", *(_DWORD *)(v4 + 1196));
    int v140 = sub_1D0C71C0C();
    snprintf(buffer, 0x80uLL, "1 P 1 %d 1 1 1 -1 1 0", v140);
    uint64_t v141 = *(void *)(v4 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1D0C636C0(v141, 0x50F6C19BB163CD98uLL, "ref-struct", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  else if (*(unsigned char *)(v4 + 13) && *(int *)(v4 + 1196) >= 2)
  {
    uint64_t v143 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v143, 0x32468D84F55FB2A7uLL, "number-gop", "1", 0xFFFFFFFFLL, (uint64_t)buffer);
    sub_1D0CEE110(*(void *)(v4 + 1288), 0xA72E681EA6EA2FFDLL, "gop-size", *(_DWORD *)(v4 + 1196));
    snprintf(buffer, 0x80uLL, "0 L %d 3 0 2 2 %d %d 1 1 0", *(_DWORD *)(v4 + 1196), -*(_DWORD *)(v4 + 1196), -2 * *(_DWORD *)(v4 + 1196));
    uint64_t v144 = *(void *)(v4 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1D0C636C0(v144, 0x50F6C19BB163CD98uLL, "ref-struct", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
    int v145 = *(_DWORD *)(v4 + 1196);
    if (*(_DWORD *)(v4 + 144))
    {
      if (v145 >= 2)
      {
        int v146 = 1;
        int v147 = -1;
        do
        {
          snprintf(buffer, 0x80uLL, "%d R %d 4 1 2 2 %d %d 1 1 0", v146, v146, v147, v145 + v147);
          uint64_t v148 = *(void *)(v4 + 1288) + 360;
          LOBYTE(__p) = 0;
          sub_1D0C636C0(v148, 0x50F6C19BB163CD98uLL, "ref-struct", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
          ++v146;
          int v145 = *(_DWORD *)(v4 + 1196);
          --v147;
        }
        while (v146 < v145);
      }
    }
    else
    {
      if (v145 == 2)
      {
        uint64_t v265 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v265, 0x50F6C19BB163CD98uLL, "ref-struct", "1 R 1 4 1 2 2 -1 1 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        int v145 = *(_DWORD *)(v4 + 1196);
      }
      if (v145 == 4)
      {
        uint64_t v266 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v266, 0x50F6C19BB163CD98uLL, "ref-struct", "1 R 2 3 1 2 2 -2 2 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        uint64_t v267 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v267, 0x50F6C19BB163CD98uLL, "ref-struct", "2 R 1 4 2 3 2 -1 1 3 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        uint64_t v268 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v268, 0x50F6C19BB163CD98uLL, "ref-struct", "3 R 3 4 2 3 2 -1 1 -3 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        int v145 = *(_DWORD *)(v4 + 1196);
      }
      if (v145 == 8)
      {
        uint64_t v269 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v269, 0x50F6C19BB163CD98uLL, "ref-struct", "1 R 4 2 1 2 2 -4 4 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        uint64_t v270 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v270, 0x50F6C19BB163CD98uLL, "ref-struct", "2 R 2 3 2 3 2 -2 2 6 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        uint64_t v271 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v271, 0x50F6C19BB163CD98uLL, "ref-struct", "3 R 1 4 3 4 2 -1 1 3 7 1 1 0 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        uint64_t v272 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v272, 0x50F6C19BB163CD98uLL, "ref-struct", "4 R 3 4 3 4 2 -3 -1 1 5 0 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        uint64_t v273 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v273, 0x50F6C19BB163CD98uLL, "ref-struct", "5 R 6 3 2 3 2 -6 -2 2 0 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        uint64_t v274 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v274, 0x50F6C19BB163CD98uLL, "ref-struct", "6 R 5 4 3 4 2 -5 -1 1 3 0 1 1 0 0", 0xFFFFFFFFLL, (uint64_t)&__p);
        uint64_t v275 = *(void *)(v4 + 1288) + 360;
        LOBYTE(__p) = 0;
        sub_1D0C636C0(v275, 0x50F6C19BB163CD98uLL, "ref-struct", "7 R 7 4 3 3 2 -7 -1 1 0 1 1 0", 0xFFFFFFFFLL, (uint64_t)&__p);
      }
    }
  }
  unsigned int v142 = *(_DWORD *)(v4 + 24);
  if (!v142)
  {
    if ((*(_DWORD *)(v4 + 144) - 33) > 4)
    {
      sub_1D0C65DAC();
      unsigned int v142 = dword_1EB671A20;
    }
    else
    {
      if (*(_DWORD *)(v4 + 1300) / 256 <= 1) {
        unsigned int v142 = 1;
      }
      else {
        unsigned int v142 = *(_DWORD *)(v4 + 1300) / 256;
      }
      *(_DWORD *)(v4 + 24) = v142;
      sub_1D0C65DAC();
      if (dword_1EB671A24 < v142) {
        unsigned int v142 = dword_1EB671A24;
      }
    }
    *(_DWORD *)(v4 + 24) = v142;
  }
  sub_1D0C65DAC();
  if (dword_1EB671A20 >= v142) {
    int v149 = v142;
  }
  else {
    int v149 = dword_1EB671A20;
  }
  *(_DWORD *)(v4 + 24) = v149;
  sub_1D0CEE110(*(void *)(v4 + 1288), 0xC0AB56BF45863635, "max-threads", v149);
  int v150 = *(_DWORD *)(v4 + 144);
  if (v150 == 40 || !v150 && *(unsigned char *)(v4 + 1440)) {
    int v151 = "auto";
  }
  else {
    int v151 = "wavefront";
  }
  uint64_t v152 = *(void *)(v4 + 1288) + 360;
  buffer[0] = 0;
  sub_1D0C636C0(v152, 0xFE31B357AB72A0FuLL, "threading", v151, 0xFFFFFFFFLL, (uint64_t)buffer);
  int v153 = *(_DWORD *)(v4 + 148);
  BOOL v154 = "low";
  if (v153 > 29)
  {
    if (v153 == 31) {
      goto LABEL_282;
    }
    if (v153 == 30)
    {
      BOOL v154 = "high";
      goto LABEL_282;
    }
  }
  else
  {
    if (v153 == 8) {
      goto LABEL_282;
    }
    if (v153 == 25)
    {
      BOOL v154 = "background";
      goto LABEL_282;
    }
  }
  BOOL v154 = "medium";
LABEL_282:
  uint64_t v155 = *(void *)(v4 + 1288) + 360;
  buffer[0] = 0;
  sub_1D0C636C0(v155, 0xF5B6EA8C35AC1E89, "priority", v154, 0xFFFFFFFFLL, (uint64_t)buffer);
  sub_1D0CEE110(*(void *)(v4 + 1288), 0x907E5BC0BE3F5F7FLL, "scene-idr", *(unsigned __int8 *)(v4 + 1194));
  if (dword_1EB671A40 >= 7)
  {
    char v156 = (FILE *)*MEMORY[0x1E4F143C8];
    int v157 = *(_DWORD *)(v4 + 144);
    int v158 = (const char *)sub_1D0CC7A2C((uint64_t)&unk_1E6899C00, v157);
    fprintf(v156, "glob->usage = %d (%s)\n", v157, v158);
    LODWORD(v156) = *(_DWORD *)(v4 + 144);
    uint64_t v159 = (const char *)sub_1D0CC7A2C((uint64_t)&unk_1E6899C00, (int)v156);
    syslog(31, "glob->usage = %d (%s)\n", v156, v159);
  }
  int v160 = *(_DWORD *)(v4 + 144);
  if ((v160 - 33) <= 4)
  {
    uint64_t v161 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v161, 0xBE27DAD503ACC303, "ref_selection", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    uint64_t v162 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v162, 0x9163BFEE0B8BBC39, "dec-reorder", "4", 0xFFFFFFFFLL, (uint64_t)buffer);
    uint64_t v163 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v163, 0x8931489410D7395BLL, "global-threadpool", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    int v160 = *(_DWORD *)(v4 + 144);
  }
  if (!v160)
  {
    sub_1D0CEE110(*(void *)(v4 + 1288), 0x9163BFEE0B8BBC39, "dec-reorder", *(_DWORD *)(v4 + 1200));
    if (dword_1EB671A40 > 6 || *(unsigned char *)(v4 + 1216))
    {
      uint64_t v164 = *(void *)(v4 + 1288) + 360;
      buffer[0] = 0;
      sub_1D0C636C0(v164, 0x7E8D690E31D04174uLL, "psnr", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
      if (dword_1EB671A40 >= 7)
      {
        uint64_t v165 = *(void *)(v4 + 1288) + 360;
        buffer[0] = 0;
        sub_1D0C636C0(v165, 0x1E5485EF2E9F9384uLL, "time", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
      }
    }
    sub_1D0CEE110(*(void *)(v4 + 1288), 0xAF63DB4C8601EAD9, "f", *(_DWORD *)(v4 + 48));
  }
  if (*(unsigned char *)(v4 + 1216))
  {
    uint64_t v166 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v166, 0x81988191775D1F3uLL, "md5", "1", 0xFFFFFFFFLL, (uint64_t)buffer);
  }
  int v167 = *(_DWORD *)(v4 + 16);
  if (v167) {
    sub_1D0CEE110(*(void *)(v4 + 1288), 0x5C8E300840CF1DCCuLL, "idr-interval", v167);
  }
  float v168 = *(float *)(v4 + 20);
  if (v168 != 0.0) {
    sub_1D0CEE1AC(*(void *)(v4 + 1288), 0x25B0C33846144F91uLL, "idr-duration", v168);
  }
  if (*(unsigned char *)(v4 + 1240))
  {
    uint64_t v169 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v169, 0xFC7DFD8BC570D29ELL, "noise-level-control", "true", 0xFFFFFFFFLL, (uint64_t)buffer);
    uint64_t v170 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v170, 0x1E2005B3F5BEB950uLL, "satd-merge", "false", 0xFFFFFFFFLL, (uint64_t)buffer);
    uint64_t v171 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v171, 0xC4BF903204850796, "fast-merge", "false", 0xFFFFFFFFLL, (uint64_t)buffer);
    uint64_t v172 = *(void *)(v4 + 1288) + 360;
    buffer[0] = 0;
    sub_1D0C636C0(v172, 0x799736CC586FE042uLL, "num-merge-candidate", "3", 0xFFFFFFFFLL, (uint64_t)buffer);
  }
  CFDataRef v173 = *(const __CFData **)(v4 + 120);
  if (v173)
  {
    if (CFDataGetLength(*(CFDataRef *)(v4 + 120)) > 999)
    {
      LOBYTE(__p) = 0;
      unsigned int v177 = CFDataGetBytePtr(v173);
      unsigned int v178 = 0;
      unint64_t v179 = 0;
      while (2)
      {
        unsigned int v180 = 0;
        if (v178) {
          int v181 = byte_1D0DAEFE0;
        }
        else {
          int v181 = byte_1D0DAEFB8;
        }
        if (v178) {
          uint64_t v182 = 64;
        }
        else {
          uint64_t v182 = 16;
        }
        if (v178 == 3) {
          int v183 = 3;
        }
        else {
          int v183 = 1;
        }
        int v362 = v183;
        unsigned int v364 = v178;
        int v363 = 4 << v178;
        do
        {
          unsigned int v184 = v180 - 3;
          if (v180 < 3) {
            unsigned int v184 = v180;
          }
          snprintf((char *)&__p, 0x100uLL, "%s%dX%d_%s", off_1E6899AD8[v180 > 2], v363, v363, off_1E6899AE8[v184]);
          if (v364 >= 2)
          {
            unint64_t v185 = v179 + snprintf(&buffer[v179], 0x4000 - v179, "%s_DC =\n", (const char *)&__p);
            if (v185 >= 0x4000 || (unint64_t v179 = v185 + snprintf(&buffer[v185], 0x4000 - v185, "%d\n", *v177), v179 >= 0x4000))
            {
LABEL_337:
              if (dword_1EB671A40 <= 2) {
                goto LABEL_341;
              }
LABEL_340:
              fwrite("Buffer is too small\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              syslog(27, "Buffer is too small\n");
              goto LABEL_341;
            }
            ++v177;
          }
          unint64_t v186 = v179 + snprintf(&buffer[v179], 0x4000 - v179, "%s =\n", (const char *)&__p);
          unint64_t v187 = v186 >> 14;
          if (v186 >> 14) {
            goto LABEL_337;
          }
          do
          {
            *((unsigned char *)v376 + v181[v187]) = v177[v187];
            ++v187;
          }
          while (v182 != v187);
          uint64_t v188 = 0;
          v177 += v187;
          do
            v186 += snprintf(&buffer[v186], 0x4000 - v186, "%d, ", *((unsigned __int8 *)v376 + v188++));
          while (v182 != v188);
          if (v186 >= 0x4000 || (unint64_t v179 = v186 + snprintf(&buffer[v186], 0x4000 - v186, "\n\n"), v179 >= 0x4000))
          {
            if (dword_1EB671A40 <= 2) {
              goto LABEL_341;
            }
            goto LABEL_340;
          }
          v180 += v362;
        }
        while (v180 < 6);
        unsigned int v178 = v364 + 1;
        if (v364 != 3) {
          continue;
        }
        break;
      }
    }
    else if (dword_1EB671A40 >= 3)
    {
      fwrite("kVTCompressionPropertyKey_QuantizationScalingLists too small\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "kVTCompressionPropertyKey_QuantizationScalingLists too small\n");
    }
LABEL_341:
    uint64_t v189 = *(void *)(v4 + 1288) + 360;
    LOBYTE(__p) = 0;
    sub_1D0C636C0(v189, 0x92F39F846EC10A99, "scaling-list", buffer, 0xFFFFFFFFLL, (uint64_t)&__p);
  }
  else
  {
    int v174 = *(_DWORD *)(v4 + 128);
    if (v174)
    {
      if (v174 == 1) {
        uint64_t v175 = "default";
      }
      else {
        uint64_t v175 = "flat";
      }
      uint64_t v176 = *(void *)(v4 + 1288) + 360;
      buffer[0] = 0;
      sub_1D0C636C0(v176, 0x92F39F846EC10A99, "scaling-list", v175, 0xFFFFFFFFLL, (uint64_t)buffer);
    }
  }
  sub_1D0CEE110(*(void *)(v4 + 1288), 0xA4FAC089B047A575, "schedule-policy", *(_DWORD *)(v4 + 1244));
  sub_1D0CEE110(*(void *)(v4 + 1288), 0x818A639346385C5uLL, "required-sps-id", *(_DWORD *)(v4 + 160));
  sub_1D0CEE110(*(void *)(v4 + 1288), 0xEC4CA737CBED8456, "required-pps-id", *(_DWORD *)(v4 + 164));
  sub_1D0CEE110(*(void *)(v4 + 1288), 0x4BD00B7E61081A2BuLL, "alpha-layer-id", *(_DWORD *)(v4 + 168));
  if (*(unsigned char *)(v4 + 1441))
  {
    sub_1D0CEE110(*(void *)(v4 + 1288), 0x5ED5212C9D566C9DuLL, "use-cra", 1);
    sub_1D0CEE110(*(void *)(v4 + 1288), 0xC4D0FEC7CD579487, "reencode-anti-pop", 0);
  }
  uint64_t v190 = *(void *)(v4 + 1288);
  *(_DWORD *)(v190 + 11016) = 0;
  sub_1D0C3FEAC(v190 + 360);
  int v191 = *(_DWORD *)(v190 + 520);
  if (v191 <= 1) {
    int v191 = 1;
  }
  *(_DWORD *)(v190 + 520) = v191;
  int v192 = *(_DWORD *)(v190 + 544);
  if ((v192 & 4) != 0 && 2 << *(unsigned char *)(v190 + 538) >= *(__int16 *)(v190 + 466))
  {
    v192 &= ~4u;
    *(_DWORD *)(v190 + 544) = v192;
  }
  int v193 = *(_DWORD *)(v190 + 524);
  if (!v193)
  {
    int v193 = v191;
    if (v192 != 4)
    {
      char v194 = *(unsigned char *)(v190 + 538);
      int v195 = *(__int16 *)(v190 + 466) / (5 << v194);
      int v193 = *(__int16 *)(v190 + 468) / (2 << v194);
      if (v193 >= v195) {
        int v193 = v195;
      }
    }
  }
  if (v193 < v191) {
    int v191 = v193;
  }
  if (v193 <= 1) {
    int v191 = 1;
  }
  *(_DWORD *)(v190 + 524) = v191;
  int v196 = *(unsigned __int8 *)(v190 + 429);
  if (*(unsigned char *)(v190 + 429))
  {
    if (*(char *)(v190 + 856) >= 1) {
      *(_DWORD *)(v190 + 576) = 8;
    }
    if (!*(unsigned char *)(v190 + 430)) {
      goto LABEL_367;
    }
  }
  else if (!*(unsigned char *)(v190 + 430))
  {
    goto LABEL_370;
  }
  *(unsigned char *)(v190 + 492) = 0;
  *(unsigned char *)(v190 + 561) = 0;
  *(unsigned char *)(v190 + 572) = 0;
  *(unsigned char *)(v190 + 508) = 0;
  if (!v196 && dword_1EB671A40 >= 4)
  {
    fwrite("Lossless inter coding is broken, disabling inter frames\n", 0x38uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(28, "Lossless inter coding is broken, disabling inter frames\n");
  }
  *(unsigned char *)(v190 + 429) = 1;
LABEL_367:
  if (*(unsigned char *)(v190 + 584))
  {
    *(unsigned char *)(v190 + 584) = 0;
    if (dword_1EB671A40 >= 4)
    {
      fwrite("Reencode for IDR anti popping doesn't work for I only. Force disabled\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(28, "Reencode for IDR anti popping doesn't work for I only. Force disabled\n");
    }
  }
LABEL_370:
  if (!*(_DWORD *)(v190 + 656))
  {
    if (!*(unsigned char *)(v190 + 429) && dword_1EB671A40 >= 4)
    {
      fwrite("Monochrome inter coding is broken, disabling inter frames\n", 0x3AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(28, "Monochrome inter coding is broken, disabling inter frames\n");
    }
    *(unsigned char *)(v190 + 429) = 1;
  }
  if (*(void *)(v190 + 8136))
  {
    if (*(unsigned char *)(v190 + 497) && dword_1EB671A40 >= 4)
    {
      fwrite("RDOQ not implemented for scaling lists, disabling RDOQ\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(28, "RDOQ not implemented for scaling lists, disabling RDOQ\n");
    }
    *(unsigned char *)(v190 + 497) = 0;
  }
  int v197 = *(_DWORD *)(v190 + 544);
  if ((v197 & 2) != 0)
  {
    if (*(unsigned char *)(v190 + 446)
      || *(unsigned char *)(v190 + 447)
      || *(unsigned char *)(v190 + 585)
      || *(unsigned char *)(v190 + 529)
      || (int v291 = *(_DWORD *)(v190 + 456)) != 0 && v291 != 40)
    {
      if (dword_1EB671A40 >= 4)
      {
        fwrite("MPT isn't supported/tested with another enabled options; disabling MPT\n",
          0x47uLL,
          1uLL,
          (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(28, "MPT isn't supported/tested with another enabled options; disabling MPT\n");
        int v197 = *(_DWORD *)(v190 + 544);
      }
      *(_DWORD *)(v190 + 544) = v197 & 0xFFFFFFFD;
    }
    else if (*(unsigned char *)(v190 + 572))
    {
      if (!*(unsigned char *)(v190 + 429))
      {
        *(unsigned char *)(v190 + 572) = 0;
        if (dword_1EB671A40 >= 4)
        {
          fwrite("mpt does not support sao for now. Force disabled\n", 0x31uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(28, "mpt does not support sao for now. Force disabled\n");
        }
      }
    }
  }
  if (!*(unsigned char *)(v190 + 652) || !*(unsigned char *)(v190 + 653)) {
    *(_WORD *)(v190 + 652) = *(_WORD *)(v190 + 650);
  }
  int v198 = *(_DWORD *)(v190 + 656);
  if (v198 >= 2)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unsupported chroma format idc %d\n", *(_DWORD *)(v190 + 656));
      syslog(27, "Unsupported chroma format idc %d\n", *(_DWORD *)(v190 + 656));
LABEL_555:
      LOWORD(v290) = -12902;
      goto LABEL_556;
    }
    goto LABEL_697;
  }
  if (!v198) {
    *(unsigned char *)(v190 + 908) = 1;
  }
  if (*(unsigned char *)(v190 + 952))
  {
    *(unsigned char *)(v190 + 594) = 1;
  }
  else
  {
    *(void *)(v190 + 7868) = 0x100000000;
    *(_DWORD *)(v190 + 608) = 1;
    *(_DWORD *)(v190 + 640) = 1;
    *(unsigned char *)(v190 + 956) = 0;
    if (*(unsigned char *)(v190 + 594)) {
      char v199 = 76;
    }
    else {
      char v199 = 80;
    }
    *(unsigned char *)(v190 + 957) = v199;
    *(unsigned char *)(v190 + 960) = *(unsigned char *)(v190 + 489) - *(unsigned char *)(v190 + 488);
    *(_WORD *)(v190 + 958) = 256;
    uint64_t v200 = *(unsigned __int8 *)(v190 + 528);
    *(unsigned char *)(v190 + 961) = v200;
    *(unsigned char *)(v190 + 962) = *(unsigned char *)(v190 + 530);
    *(unsigned char *)(v190 + 1044) = 0;
    if (v200)
    {
      uint64_t v201 = 0;
      uint64_t v202 = v190 + 1028;
      int v203 = -1;
      do
      {
        *(_DWORD *)(v202 + 4 * v201 - 64) = v203;
        *(unsigned char *)(v202 + v201) = 1;
        --v203;
        ++v201;
      }
      while (v200 != v201);
    }
  }
  if (!*(unsigned char *)(v190 + 429))
  {
    unint64_t v252 = *(unsigned int *)(v190 + 604);
    if ((int)v252 >= 1)
    {
      uint64_t v253 = 0;
      BOOL v254 = 0;
      int v255 = 0;
      while (1)
      {
        int v256 = *(_DWORD *)(v190 + 4 * v253 + 608);
        if (v256 >= 1) {
          break;
        }
LABEL_465:
        BOOL v254 = ++v253 >= v252;
        if (v253 == v252) {
          goto LABEL_554;
        }
      }
      int v257 = 0;
      int v258 = v255 + v256;
      unsigned int v259 = (unsigned __int8 *)(v190 + 962 + 108 * v255);
      while (1)
      {
        BOOL v260 = !*(v259 - 3) || v256 < *(v259 - 3);
        if (v260) {
          break;
        }
        unsigned int v261 = *(v259 - 5) - 76;
        BOOL v260 = v261 > 6;
        int v262 = (1 << v261) & 0x51;
        if (v260 || v262 == 0)
        {
          if (dword_1EB671A40 >= 3)
          {
            fwrite("(gop_list_[frm_num].frame_type == 'P') || (gop_list_[frm_num].frame_type == 'R') || (gop_list_[frm_num].frame_type == 'L') failed!\n", 0x83uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(27, "(gop_list_[frm_num].frame_type == 'P') || (gop_list_[frm_num].frame_type == 'R') || (gop_list_[frm_num].frame_type == 'L') failed!\n");
          }
          goto LABEL_554;
        }
        if (*v259 > *(v259 - 1))
        {
          if (dword_1EB671A40 >= 3)
          {
            fwrite("gop_list_[frm_num].number_ref_active <= gop_list_[frm_num].number_ref_all failed!\n", 0x52uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(27, "gop_list_[frm_num].number_ref_active <= gop_list_[frm_num].number_ref_all failed!\n");
          }
          goto LABEL_554;
        }
        ++v257;
        v259 += 108;
        if (v256 == v257)
        {
          int v255 = v258;
          goto LABEL_465;
        }
      }
      if (dword_1EB671A40 > 2)
      {
        fwrite("(gop_list_[frm_num].poc > 0) && (gop_list_[frm_num].poc <= gop_size_[gop_id]) failed!\n", 0x56uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "(gop_list_[frm_num].poc > 0) && (gop_list_[frm_num].poc <= gop_size_[gop_id]) failed!\n");
      }
LABEL_554:
      if (!v254) {
        goto LABEL_555;
      }
    }
  }
  *(_DWORD *)(v190 + 7868) = 0;
  int v204 = *(_DWORD *)(v190 + 604);
  if (v204 >= 1)
  {
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    int v207 = 0;
    while (1)
    {
      *(_DWORD *)buffer = 0;
      uint64_t v208 = v190 + 4 * v206;
      int v209 = *(_DWORD *)(v208 + 608);
      if (v209 >= 1) {
        break;
      }
      uint64_t v212 = v205;
LABEL_446:
      v207 += v209;
      *(_DWORD *)(v208 + 7876) = v212 - v205;
      ++v206;
      uint64_t v205 = v212;
      if (v206 >= v204) {
        goto LABEL_467;
      }
    }
    int v210 = 0;
    int v211 = 0;
    uint64_t v212 = v205;
    uint64_t v213 = 1;
    while (1)
    {
      int v214 = v211 / v209 * v209;
      uint64_t v215 = v211 - v214 + v207;
      uint64_t v216 = v190 + 108 * v215;
      int v217 = v214 + *(unsigned __int8 *)(v216 + 959);
      uint64_t v218 = *(unsigned __int8 *)(v216 + 961);
      if (*(unsigned char *)(v216 + 961))
      {
        uint64_t v219 = 0;
        unsigned int v220 = (unsigned __int8 *)(v216 + 961);
        uint64_t v221 = 4 * v213;
        while (2)
        {
          int v222 = *(_DWORD *)(v190 + 108 * (int)v215 + 4 * v219 + 964) + v217;
          if (v222 < 0)
          {
            unint64_t v229 = 0;
            int v230 = 0;
            uint64_t v231 = *(int *)(v190 + 7872) + (uint64_t)(int)v212;
            uint64_t v232 = v190 + 956 + 108 * v231;
            *(unsigned char *)(v232 + 3) = v217;
            uint64_t v233 = (unsigned char *)(v232 + 3);
            uint64_t v234 = v190 + 956 + 108 * (int)v215;
            *((_WORD *)v233 - 1) = *(_WORD *)(v234 + 1);
            v233[1] = *(unsigned char *)(v234 + 4);
            uint64_t v235 = v190 + 108 * (int)v215;
            do
            {
              int v236 = *(_DWORD *)(v235 + 4 * v229 + 964);
              if (v236 > ~v217)
              {
                uint64_t v218 = v190 + 108 * v231 + 956;
                *(_DWORD *)(v218 + 4 * v230 + 8) = v236;
                *(unsigned char *)(v218 + v230++ + 72) = *(unsigned char *)(v235 + v229 + 1028);
                LODWORD(v218) = *v220;
              }
              ++v229;
            }
            while (v229 < v218);
            int v237 = *(_DWORD *)(v190 + 7868);
            uint64_t v238 = v190 + 956;
            uint64_t v239 = v190 + 956 + 108 * v231;
            *(unsigned char *)(v239 + 5) = v230;
            *(unsigned char *)(v239 + 6) = *(unsigned char *)(v190 + 956 + 108 * (int)v215 + 6);
            if (v237)
            {
              uint64_t v240 = 0;
              uint64_t v241 = (int)v231 - 1;
              uint64_t v242 = v238 + 108 * v241;
              uint64_t v243 = *(unsigned __int8 *)(v242 + 5);
              int v244 = (unsigned char *)(v238 + 108 * v231);
              v244[90] = v243 + 1;
              int v245 = *(unsigned __int8 *)(v242 + 3);
              v244[88] = 1;
              v244[89] = v245 - *v233;
              uint64_t v246 = v190 + 108 * v231;
              do
              {
                int v247 = v245;
                if (v240 != v243) {
                  int v247 = *(_DWORD *)(v190 + 108 * v241 + 4 * v240 + 964) + v245;
                }
                if ((_BYTE)v230)
                {
                  uint64_t v248 = 0;
                  char v249 = 0;
                  do
                  {
                    if (v247 == *(_DWORD *)(v246 + 4 * v248 + 964) + v217)
                    {
                      if (*(unsigned char *)(v246 + v248 + 1028)) {
                        char v249 = 1;
                      }
                      else {
                        char v249 = 2;
                      }
                    }
                    ++v248;
                  }
                  while (v230 != v248);
                }
                else
                {
                  char v249 = 0;
                }
                *(unsigned char *)(v190 + 108 * v231 + v240 + 1047) = v249;
                BOOL v6 = v240++ == v243;
              }
              while (!v6);
              int v250 = *(_DWORD *)(v190 + 7868);
            }
            else
            {
              int v250 = 0;
              uint64_t v251 = v190 + 108 * v231;
              *(unsigned char *)(v251 + 1044) = 0;
              *(unsigned char *)(v251 + 1046) = 0;
            }
            uint64_t v212 = (v250 + 1);
            *(_DWORD *)(v190 + 7868) = v212;
            uint64_t v215 = *(_DWORD *)(v190 + 7872) + v250;
            LODWORD(v218) = *(unsigned __int8 *)(v190 + 108 * v215 + 961);
            goto LABEL_418;
          }
          uint64_t v223 = 0;
          while (v222 != *(_DWORD *)&buffer[v223])
          {
            v223 += 4;
            if (v221 == v223)
            {
              if (dword_1EB671A40 >= 3)
              {
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "Reference %d not avail for frame %d of gop %d\n", v222, v217, v206);
                syslog(27, "Reference %d not avail for frame %d of gop %d\n", v222, v217, v206);
              }
              goto LABEL_555;
            }
          }
          if (++v219 != v218) {
            continue;
          }
          break;
        }
      }
      ++v210;
LABEL_418:
      uint64_t v224 = v218;
      if (v218)
      {
        uint64_t v225 = (int *)(v190 + 964 + 108 * (int)v215);
        int v226 = buffer;
        uint64_t v227 = v224;
        do
        {
          int v228 = *v225++;
          *(_DWORD *)int v226 = v228 + v217;
          v226 += 4;
          --v227;
        }
        while (v227);
      }
      *(_DWORD *)&buffer[4 * v224] = v217;
      uint64_t v213 = v224 + 1;
      ++v211;
      int v209 = *(_DWORD *)(v208 + 608);
      if (v210 >= v209)
      {
        int v204 = *(_DWORD *)(v190 + 604);
        goto LABEL_446;
      }
    }
  }
LABEL_467:
  BOOL v264 = *(unsigned char *)(v190 + 898) && !*(unsigned char *)(v190 + 429) || (*(unsigned char *)(v190 + 887) & 6) != 0;
  *(unsigned char *)(v190 + 897) = v264;
  unsigned int v276 = *(unsigned __int8 *)(v190 + 481);
  *(unsigned char *)(v190 + 482) = v276 < 3;
  if (v276 >= 3)
  {
    BOOL v278 = 0;
    *(unsigned char *)(v190 + 483) = 0;
  }
  else
  {
    int v277 = *(unsigned __int8 *)(v190 + 494);
    *(unsigned char *)(v190 + 483) = *(unsigned char *)(v190 + 494) == 0;
    if (v277) {
      BOOL v278 = 0;
    }
    else {
      BOOL v278 = *(unsigned char *)(v190 + 493) == 0;
    }
  }
  *(unsigned char *)(v190 + 484) = v278;
  BOOL v279 = (v276 | 2) == 2 && *(char *)(v190 + 492) > 0;
  BOOL v280 = 0;
  *(unsigned char *)(v190 + 485) |= v279;
  if (v276 == 3 && *(unsigned char *)(v190 + 487))
  {
    if (*(unsigned char *)(v190 + 494)) {
      BOOL v280 = 0;
    }
    else {
      BOOL v280 = *(unsigned char *)(v190 + 493) == 0;
    }
  }
  *(unsigned char *)(v190 + 487) = v280;
  if (*(_DWORD *)(v190 + 756)) {
    *(unsigned char *)(v190 + 737) = 1;
  }
  if (*(unsigned char *)(v190 + 912)) {
    BOOL v281 = 1;
  }
  else {
    BOOL v281 = *(unsigned char *)(v190 + 914) != 0;
  }
  *(unsigned char *)(v190 + 913) |= v281;
  if (*(unsigned char *)(v190 + 910)
    && *(char *)(v190 + 868) >= (int)*(unsigned __int8 *)(v190 + 538)
    && !*(unsigned char *)(v190 + 892))
  {
    if (dword_1EB671A40 >= 7)
    {
      fwrite("Turn off CU combine since full mode is always checked\n", 0x36uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(31, "Turn off CU combine since full mode is always checked\n");
    }
    *(unsigned char *)(v190 + 910) = 0;
  }
  if (*(unsigned char *)(v190 + 911) && *(unsigned char *)(v190 + 856) != 4)
  {
    if (dword_1EB671A40 >= 7)
    {
      fwrite("Turn off auto recon skip, it's only supported in full RD\n", 0x39uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(31, "Turn off auto recon skip, it's only supported in full RD\n");
    }
    *(unsigned char *)(v190 + 911) = 0;
  }
  int v282 = -6 * *(char *)(v190 + 650) + 48;
  int v283 = *(char *)(v190 + 488);
  if (v282 > v283) {
    int v283 = -6 * *(char *)(v190 + 650) + 48;
  }
  if (v283 >= 51) {
    LOBYTE(v283) = 51;
  }
  *(unsigned char *)(v190 + 488) = v283;
  if (v282 <= *(char *)(v190 + 489)) {
    int v282 = *(char *)(v190 + 489);
  }
  if (v282 >= 51) {
    LOBYTE(v282) = 51;
  }
  *(unsigned char *)(v190 + 489) = v282;
  if (*(unsigned char *)(v190 + 552) && !*(_DWORD *)(v190 + 548))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("bps_ > 0 failed!\n", 0x11uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "bps_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (*(_WORD *)(v190 + 464))
  {
    uint64_t v284 = 0;
    uint64_t v285 = word_1D0D80944;
LABEL_525:
    uint64_t v286 = 0;
    while (!v285[v286] || v285[v286] != *(unsigned __int16 *)(v190 + 464))
    {
      if (++v286 == 3)
      {
        ++v284;
        v285 += 3;
        if (v284 != 6) {
          goto LABEL_525;
        }
        if (dword_1EB671A40 >= 3)
        {
          fwrite("ProfileTierLevel::IsLevelIdcValid(level_) failed!\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "ProfileTierLevel::IsLevelIdcValid(level_) failed!\n");
          goto LABEL_555;
        }
        goto LABEL_697;
      }
    }
  }
  if (*(__int16 *)(v190 + 466) < 1 || *(__int16 *)(v190 + 468) <= 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("width_ > 0 && height_ > 0 failed!\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "width_ > 0 && height_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (*(double *)(v190 + 472) <= 0.0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("expected_fps_ > 0 failed!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "expected_fps_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (*(int *)(v190 + 512) <= 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("number_frames_ > 0 failed!\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "number_frames_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if ((*(_DWORD *)(v190 + 516) & 0x80000000) != 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("frame_skip_interval_ >= 0 failed!\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "frame_skip_interval_ >= 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  uint64_t v288 = *(unsigned __int8 *)(v190 + 537);
  if ((v288 - 3) >= 4)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2_min_cu_size_ of %lld is out of range (%lld, %lld)\n", v288, 3, 6);
      syslog(27, "log2_min_cu_size_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v190 + 537), 3, 6);
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  uint64_t v289 = *(unsigned __int8 *)(v190 + 538);
  if ((v289 - 4) >= 3)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2_max_cu_size_ of %lld is out of range (%lld, %lld)\n", v289, 4, 6);
      syslog(27, "log2_max_cu_size_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v190 + 538), 4, 6);
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (v289 < v288)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("log2_max_cu_size_ >= log2_min_cu_size_ failed!\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "log2_max_cu_size_ >= log2_min_cu_size_ failed!\n");
      goto LABEL_555;
    }
LABEL_697:
    LOWORD(v290) = -12902;
    return (__int16)v290;
  }
  uint64_t v292 = *(unsigned __int8 *)(v190 + 539);
  if ((v292 - 2) >= 4)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2_min_tu_size_ of %lld is out of range (%lld, %lld)\n", v292, 2, 5);
      syslog(27, "log2_min_tu_size_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v190 + 539), 2, 5);
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  uint64_t v293 = *(unsigned __int8 *)(v190 + 540);
  if ((v293 - 2) >= 4)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "log2_max_tu_size_ of %lld is out of range (%lld, %lld)\n", v293, 2, 5);
      syslog(27, "log2_max_tu_size_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v190 + 540), 2, 5);
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (v293 < v292)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("log2_max_tu_size_ >= log2_min_tu_size_ failed!\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "log2_max_tu_size_ >= log2_min_tu_size_ failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  uint64_t v294 = *(unsigned __int8 *)(v190 + 541);
  uint64_t v295 = v289 - v292;
  if (v295 < v294)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "max_hierarchy_tu_intra_ of %lld is out of range (%lld, %lld)\n", v294, 0, v295);
      syslog(27, "max_hierarchy_tu_intra_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v190 + 541), 0, *(unsigned __int8 *)(v190 + 538) - (unint64_t)*(unsigned __int8 *)(v190 + 539));
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  uint64_t v296 = *(unsigned __int8 *)(v190 + 542);
  if (v295 < v296)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "max_hierarchy_tu_inter_ of %lld is out of range (%lld, %lld)\n", v296, 0, v295);
      syslog(27, "max_hierarchy_tu_inter_ of %lld is out of range (%lld, %lld)\n", *(unsigned __int8 *)(v190 + 542), 0, *(unsigned __int8 *)(v190 + 538) - (unint64_t)*(unsigned __int8 *)(v190 + 539));
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (v289 < v293)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("log2_max_cu_size_ >= log2_max_tu_size_ failed!\n", 0x2FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "log2_max_cu_size_ >= log2_max_tu_size_ failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  HIDWORD(v298) = *(_DWORD *)(v190 + 576);
  LODWORD(v298) = HIDWORD(v298) - 4;
  unsigned int v297 = v298 >> 2;
  if (v297 > 7 || ((1 << v297) & 0x8B) == 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("max_satd_luma_size_ == 4 || max_satd_luma_size_ == 8 || max_satd_luma_size_ == 16 || max_satd_luma_size_ == 32 failed!\n", 0x77uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "max_satd_luma_size_ == 4 || max_satd_luma_size_ == 8 || max_satd_luma_size_ == 16 || max_satd_luma_size_ == 32 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (*(unsigned __int8 *)(v190 + 857) >= 2u)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("fast_intra_ == 0 || fast_intra_ == 1 failed!\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "fast_intra_ == 0 || fast_intra_ == 1 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  unsigned int v299 = *(unsigned __int8 *)(v190 + 858);
  if (v299 >= 4)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("intra_early_termination_ >= kNoIntraET && intra_early_termination_ <= kIntraETALLLimited failed!\n", 0x61uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "intra_early_termination_ >= kNoIntraET && intra_early_termination_ <= kIntraETALLLimited failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (v299 >= 2)
  {
    if ((*(unsigned char *)(v190 + 889) & 8) != 0) {
      goto LABEL_605;
    }
LABEL_628:
    if (dword_1EB671A40 >= 3)
    {
      fwrite("((intra_early_termination_ >= kIntraETAll) && (skip_mode_bias_ & kBypassIntraWhenSkip)) || ((intra_early_termination_ < kIntraETAll) && !(skip_mode_bias_ & kBypassIntraWhenSkip)) failed!\n", 0xBBuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "((intra_early_termination_ >= kIntraETAll) && (skip_mode_bias_ & kBypassIntraWhenSkip)) || ((intra_early_termination_ < kIntraETAll) && !(skip_mode_bias_ & kBypassIntraWhenSkip)) failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if ((*(unsigned char *)(v190 + 889) & 8) != 0) {
    goto LABEL_628;
  }
LABEL_605:
  if (*(char *)(v190 + 861) >= 5)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("num_intra_rd_candidate_ <= 4 failed!\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "num_intra_rd_candidate_ <= 4 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (*(unsigned __int8 *)(v190 + 859) >= 3u)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("fast_intra_chroma_ >= kNoFastIntraChroma && fast_intra_chroma_ <= kFastIntraChromaLimited failed!\n", 0x62uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "fast_intra_chroma_ >= kNoFastIntraChroma && fast_intra_chroma_ <= kFastIntraChromaLimited failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (*(unsigned __int8 *)(v190 + 572) >= 4u)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("sao_ >= kSaoOff && sao_ <= kSaoChromaOnly failed!\n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "sao_ >= kSaoOff && sao_ <= kSaoChromaOnly failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  unint64_t v300 = *(char *)(v190 + 492);
  if (v300 >= 6)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "qpm_ of %lld is out of range (%lld, %lld)\n", v300, 0, 5);
      syslog(27, "qpm_ of %lld is out of range (%lld, %lld)\n", *(char *)(v190 + 492), 0, 5);
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (*(unsigned char *)(v190 + 492))
  {
    uint64_t v301 = *(char *)(v190 + 496);
    uint64_t v302 = v289 - v288;
    if (v301 < 0 || v302 < v301)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "dqp_depth_ of %lld is out of range (%lld, %lld)\n", v301, 0, v302);
        syslog(27, "dqp_depth_ of %lld is out of range (%lld, %lld)\n", *(char *)(v190 + 496), 0, *(unsigned __int8 *)(v190 + 538) - (unint64_t)*(unsigned __int8 *)(v190 + 537));
        goto LABEL_555;
      }
      goto LABEL_697;
    }
    unint64_t v303 = *(char *)(v190 + 493);
    if (v303 >= 5)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "qpm_param_ of %lld is out of range (%lld, %lld)\n", v303, 0, 4);
        syslog(27, "qpm_param_ of %lld is out of range (%lld, %lld)\n", *(char *)(v190 + 493), 0, 4);
        goto LABEL_555;
      }
      goto LABEL_697;
    }
    unint64_t v304 = *(char *)(v190 + 494);
    if (v304 >= 4)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "qpm_eq_ of %lld is out of range (%lld, %lld)\n", v304, 0, 3);
        syslog(27, "qpm_eq_ of %lld is out of range (%lld, %lld)\n", *(char *)(v190 + 494), 0, 3);
        goto LABEL_555;
      }
      goto LABEL_697;
    }
  }
  if (*(unsigned char *)(v190 + 585) && *(char *)(v190 + 529) + *(char *)(v190 + 528) >= 5)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("number_short_term_ref_in_dpb_+number_long_term_ref_in_dpb_+2 <= kMaxDpbSizeFrameAck failed!\n", 0x5CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "number_short_term_ref_in_dpb_+number_long_term_ref_in_dpb_+2 <= kMaxDpbSizeFrameAck failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  unint64_t v305 = *(char *)(v190 + 444);
  if (v305 >= 4)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "adaptive_cudepth_ of %lld is out of range (%lld, %lld)\n", v305, 0, 3);
      syslog(27, "adaptive_cudepth_ of %lld is out of range (%lld, %lld)\n", *(char *)(v190 + 444), 0, 3);
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (!*(unsigned char *)(v190 + 492) && *(unsigned char *)(v190 + 714))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("qpm_ > 0 failed!\n", 0x11uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "qpm_ > 0 failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (*(unsigned char *)(v190 + 898) && !*(unsigned char *)(v190 + 429) && !*(unsigned char *)(v190 + 897))
  {
    if (dword_1EB671A40 < 3) {
      goto LABEL_697;
    }
    goto LABEL_661;
  }
  if ((*(unsigned char *)(v190 + 887) & 6) != 0 && !*(unsigned char *)(v190 + 897))
  {
    if (dword_1EB671A40 < 3) {
      goto LABEL_697;
    }
LABEL_661:
    fwrite("update_enc_md_info_ failed!\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "update_enc_md_info_ failed!\n");
    goto LABEL_555;
  }
  if (*(unsigned char *)(v190 + 712) && *(unsigned char *)(v190 + 713))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("!(isp_driven_wp_ && en_analyze_wp_) failed!\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "!(isp_driven_wp_ && en_analyze_wp_) failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (*(unsigned __int8 *)(v190 + 450) < *(unsigned __int8 *)(v190 + 451))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("dpmd_on_ >= dpmd_enable_ failed!\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "dpmd_on_ >= dpmd_enable_ failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (v300 == 5 && *(char *)(v190 + 856) <= 1)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("qpm 5 mode does not work with mdmode smaller than 2.", 0x34uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "qpm 5 mode does not work with mdmode smaller than 2.");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (!*(_DWORD *)(v190 + 456) && *(unsigned char *)(v190 + 584) && *(unsigned char *)(v190 + 536))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("!(reencode_idr_anti_popping_ && use_cra_for_force_idr_) failed!\n", 0x40uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "!(reencode_idr_anti_popping_ && use_cra_for_force_idr_) failed!\n");
      goto LABEL_555;
    }
    goto LABEL_697;
  }
  if (dword_1EB671A40 >= 7)
  {
    long long v306 = *(void **)(v190 + 368);
    if (v306 != (void *)(v190 + 376))
    {
      uint64_t v307 = *MEMORY[0x1E4F143C8];
      do
      {
        (**(void (***)(void, uint64_t, void, void))v306[6])(v306[6], v307, v306[4], v306[5]);
        long long v308 = (void *)v306[1];
        if (v308)
        {
          do
          {
            uint64_t v309 = v308;
            long long v308 = (void *)*v308;
          }
          while (v308);
        }
        else
        {
          do
          {
            uint64_t v309 = (void *)v306[2];
            BOOL v6 = *v309 == (void)v306;
            long long v306 = v309;
          }
          while (!v6);
        }
        long long v306 = v309;
      }
      while (v309 != (void *)(v190 + 376));
    }
  }
  int v310 = sub_1D0C41350(v190, *(char **)(v190 + 680));
  __int16 v311 = v310;
  if (!v310)
  {
    if (*(unsigned __int8 *)(v190 + 34) != 255 && !*(unsigned char *)(v190 + 447)) {
      goto LABEL_555;
    }
    sub_1D0C643E0(buffer);
    uint64_t v319 = *(std::__shared_weak_count **)(v190 + 8160);
    *(_OWORD *)(v190 + 8152) = *(_OWORD *)buffer;
    if (v319) {
      sub_1D0C4C984(v319);
    }
    uint64_t v320 = *(int *)(v190 + 940);
    if ((int)v320 >= 16 || (uint64_t v321 = *(int *)(v190 + 944), (int)v321 >= 64))
    {
      if (dword_1EB671A40 > 2)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "SPS ID %d not valid\n", *(_DWORD *)(v190 + 940));
        syslog(27, "SPS ID %d not valid\n", v320);
        goto LABEL_555;
      }
      goto LABEL_697;
    }
    uint64_t v323 = operator new(0x888uLL);
    v323[1] = 0;
    v323[2] = 0;
    *uint64_t v323 = &unk_1F26F1708;
    *(void *)&long long v324 = sub_1D0C42C78((uint64_t)(v323 + 3), v190 + 8152, v320);
    *((void *)&v324 + 1) = v323;
    uint64_t v325 = v190 + 16 * v320;
    uint64_t v326 = *(std::__shared_weak_count **)(v325 + 8416);
    *(_OWORD *)(v325 + 8408) = v324;
    if (v326) {
      sub_1D0C4C984(v326);
    }
    unint64_t v327 = operator new(0x708uLL);
    v327[1] = 0;
    v327[2] = 0;
    *unint64_t v327 = &unk_1F26F16D0;
    *(void *)&long long v328 = sub_1D0C42B54((uint64_t)(v327 + 3), v190 + 8152, v321, v320);
    *((void *)&v328 + 1) = v327;
    uint64_t v329 = v190 + 16 * v321;
    unsigned int v330 = *(std::__shared_weak_count **)(v329 + 8672);
    *(_OWORD *)(v329 + 8664) = v328;
    if (v330) {
      sub_1D0C4C984(v330);
    }
    uint64_t v331 = *(void *)(v190 + 8152);
    uint64_t v332 = *(void *)(v190 + 8160);
    if (v332) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v332 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v190 + 9736) = v331;
    int v333 = *(std::__shared_weak_count **)(v190 + 9744);
    *(void *)(v190 + 9744) = v332;
    if (v333) {
      sub_1D0C4C984(v333);
    }
    uint64_t v334 = *(unsigned int *)(v190 + 940);
    if (v334 <= 0xF) {
      int v335 = (uint64_t *)(v190 + 16 * v334 + 8408);
    }
    else {
      int v335 = (uint64_t *)(v190 + 9704);
    }
    uint64_t v337 = *v335;
    uint64_t v336 = v335[1];
    if (v336) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v336 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v190 + 9752) = v337;
    int v338 = *(std::__shared_weak_count **)(v190 + 9760);
    *(void *)(v190 + 9760) = v336;
    if (v338) {
      sub_1D0C4C984(v338);
    }
    uint64_t v339 = *(unsigned int *)(v190 + 944);
    if (v339 <= 0x3F) {
      int v340 = (uint64_t *)(v190 + 16 * v339 + 8664);
    }
    else {
      int v340 = (uint64_t *)(v190 + 9720);
    }
    uint64_t v342 = *v340;
    uint64_t v341 = v340[1];
    if (v341) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v341 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v190 + 9768) = v342;
    unsigned int v343 = *(std::__shared_weak_count **)(v190 + 9776);
    *(void *)(v190 + 9776) = v341;
    if (v343) {
      sub_1D0C4C984(v343);
    }
    uint64_t v290 = *(void *)(v190 + 9736);
    int v344 = *(_DWORD *)(v190 + 948);
    *(unsigned char *)(v290 + 196) = 0;
    *(_WORD *)(v290 + 200) = 256;
    int v345 = sub_1D0CE6F94(v290, v190 + 360);
    __int16 v311 = v345;
    if (!v345)
    {
      LOBYTE(v347) = 0;
      *(unsigned char *)(v290 + 202) = 0;
      uint64_t v348 = *(unsigned __int8 *)(v290 + 200);
      if (*(int *)(v190 + 640) >= 2) {
        int v347 = *(_DWORD *)(v190 + 644);
      }
      int v349 = *(char *)(v190 + 529) + *(char *)(v190 + 528);
      int v350 = v349 + 1;
      unsigned int v351 = *(unsigned __int8 *)(v290 + 12 * *(unsigned __int8 *)(v290 + 200) + 76);
      if (v349 + 1 > v351)
      {
        if (dword_1EB671A40 < 3)
        {
          LOWORD(v290) = -12909;
          return (__int16)v290;
        }
        uint64_t v352 = v290 + v348;
        LOBYTE(v346) = *(unsigned char *)(v290 + v348 + 57);
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "MaxDpbSize constraint violated, level %1.1f specifies %d, we have %d\n", (float)((float)v346 / 30.0), *(unsigned __int8 *)(v290 + 12 * *(unsigned __int8 *)(v290 + 200) + 76), v349 + 1);
        LOBYTE(v353) = *(unsigned char *)(v352 + 57);
        syslog(27, "MaxDpbSize constraint violated, level %1.1f specifies %d, we have %d\n", (float)((float)v353 / 30.0), v351, v350);
        LOWORD(v290) = -12909;
        goto LABEL_556;
      }
      if (*(unsigned char *)(v190 + 585)) {
        LOBYTE(v349) = 6;
      }
      uint64_t v359 = v290 + v348;
      *(unsigned char *)(v359 + 203) = v349;
      *(unsigned char *)(v359 + 210) = v347;
      *(_DWORD *)(v290 + 4 * v348 + 220) = 0;
      *(unsigned char *)(v290 + 248) = 0;
      *(_WORD *)(v290 + 250) = 0;
      *(unsigned char *)(v290 + 280) = 0;
      if (v344)
      {
        char v360 = 1;
        *(unsigned char *)(v290 + 199) = 1;
        *(unsigned char *)(v290 + 304) = 0;
        *(_WORD *)(v290 + 306) = 8;
        *(unsigned char *)(v290 + 308) = 0;
        *(unsigned char *)(v290 + 340) = 1;
        *(_WORD *)(v290 + 356) = 1;
        *(unsigned char *)(v290 + 358) = v344;
        *(unsigned char *)(v290 + 359) = 0;
        *(unsigned char *)(v290 + 364) = 1;
        *(unsigned char *)(v290 + 366) = 1;
        *(void *)(v290 + 369) = 0x100000001000000;
        *(unsigned char *)(v290 + 377) = 1;
        *(unsigned char *)(v290 + 404) = 0;
        *(_DWORD *)(v290 + 380) = 0;
        *(_WORD *)(v290 + 384) = 0;
      }
      else
      {
        char v360 = 0;
      }
      *(unsigned char *)(v290 + 302) = v360;
      int v361 = sub_1D0CEE248(v190, *(void *)(v190 + 9752), *(_DWORD *)(v190 + 940));
      __int16 v311 = v361;
      if (!v361)
      {
        sub_1D0CEEC2C(v190, *(void *)(v190 + 9768), *(_DWORD *)(v190 + 944));
        sub_1D0C3FD20(buffer, *(_DWORD *)(v190 + 520), *(_DWORD *)(v190 + 556));
      }
    }
  }
  LOWORD(v290) = v311;
  if (v311)
  {
LABEL_556:
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Encoder initialization failed\n", 0x1EuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Encoder initialization failed\n");
    }
    return (__int16)v290;
  }
  *(_DWORD *)(*(void *)(v4 + 1288) + 8144) = 4;
  *(void *)buffer = 0;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v313 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  LODWORD(v290) = 52632;
  if (!v313 || !Mutable) {
    goto LABEL_743;
  }
  int v314 = sub_1D0CF1EFC(*(void *)(v4 + 1288), (CFDataRef *)buffer);
  if (v314)
  {
    LODWORD(v290) = (unsigned __int16)v314;
    if (dword_1EB671A40 >= 3)
    {
      uint64_t v315 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v316 = "hvcC creation failed\n";
      unsigned int v317 = "hvcC creation failed\n";
      size_t v318 = 21;
LABEL_742:
      fwrite(v317, v318, 1uLL, v315);
      syslog(27, v316);
      goto LABEL_743;
    }
    goto LABEL_743;
  }
  unsigned int v354 = *(const void **)buffer;
  if (*(_DWORD *)(v4 + 1296) == 1718908520) {
    CFDictionaryAddValue(v313, @"ftvH", *(const void **)buffer);
  }
  CFDictionaryAddValue(v313, @"hvcC", v354);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1EDA8], @"HEVC");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1EE20], v313);
  int v355 = *(const void **)(v4 + 72);
  if (v355) {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24A90], v355);
  }
  unsigned int v356 = *(const void **)(v4 + 80);
  if (v356) {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24BC8], v356);
  }
  unsigned int v357 = *(const void **)(v4 + 88);
  if (v357) {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24C18], v357);
  }
  if (*(void *)(v4 + 1264))
  {
    VideoFormatDescriptiounsigned int n = VTEncoderSessionCreateVideoFormatDescription();
    goto LABEL_739;
  }
  if (*(void *)(v4 + 1272))
  {
    VideoFormatDescriptiounsigned int n = VTTileEncoderSessionCreateVideoFormatDescription();
LABEL_739:
    LODWORD(v290) = VideoFormatDescription;
    if (!VideoFormatDescription) {
      goto LABEL_743;
    }
    goto LABEL_740;
  }
  LODWORD(v290) = 52626;
LABEL_740:
  if (dword_1EB671A40 >= 3)
  {
    uint64_t v315 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v316 = "VTEncoderSessionCreateVideoFormatDescription failed";
    unsigned int v317 = "VTEncoderSessionCreateVideoFormatDescription failed";
    size_t v318 = 51;
    goto LABEL_742;
  }
LABEL_743:
  if (*(void *)buffer) {
    CFRelease(*(CFTypeRef *)buffer);
  }
  if (v313) {
    CFRelease(v313);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v290)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("CreateAndSetHeaders failed\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "CreateAndSetHeaders failed\n");
    }
  }
  else
  {
    *(unsigned char *)(v4 + 1313) = 1;
  }
  return (__int16)v290;
}

void sub_1D0C70934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 8))(a25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C709FC(uint64_t a1, uint64_t *a2, uint64_t a3, CFDictionaryRef theDict)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 1312))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Session was invalidated\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Session was invalidated\n");
    }
    return 4294954393;
  }
  *(_DWORD *)(a3 + 712) = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a3 + 88) = *(_DWORD *)(a1 + 144);
  int v8 = *(_DWORD *)(a1 + 28);
  if (v8 >= 1) {
    *(_DWORD *)(a3 + 92) = v8;
  }
  int v9 = (void *)(a3 + 284);
  if (theDict)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PrivateKey010");
    if (Value)
    {
      CFNumberRef v11 = Value;
      CFTypeID v12 = CFGetTypeID(Value);
      if (v12 == CFNumberGetTypeID()) {
        CFNumberGetValue(v11, kCFNumberSInt32Type, (void *)(a1 + 1308));
      }
    }
  }
  *(_DWORD *)(a3 + 144) = 0;
  *(_DWORD *)(a3 + 292) = 0;
  *(_DWORD *)(a3 + 312) = 0;
  *(_DWORD *)(a3 + 332) = 0;
  *(_DWORD *)(a3 + 352) = 0;
  *(_DWORD *)(a3 + 360) = 0;
  *(void *)(a3 + 476) = -1;
  *(void *)(a3 + 436) = 0;
  *(void *)(a3 + 444) = 0;
  *(void *)(a3 + 428) = 0;
  *(_DWORD *)(a3 + 484) = -1;
  *(_DWORD *)(a3 + 696) = 0;
  *(unsigned char *)(a3 + 136) = 0;
  *(unsigned char *)(a3 + 148) = 0;
  *(_WORD *)(a3 + 186) = 0;
  *int v9 = 0xFFFFFFFFLL;
  *(unsigned char *)(a3 + 188) = 0;
  int v13 = *(const void **)(a3 + 208);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a3 + 208) = 0;
  }
  *(void *)(a3 + 200) = 0;
  int v14 = *(const void **)(a3 + 272);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a3 + 272) = 0;
  }
  *(void *)(a3 + 256) = 0;
  int v15 = *(const void **)(a3 + 176);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a3 + 176) = 0;
  }
  *(void *)(a3 + 168) = 0;
  if (theDict)
  {
    int v16 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44ED8]);
    float v17 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (v16) {
      BOOL v168 = CFEqual(v16, (CFTypeRef)*MEMORY[0x1E4F1CFD0]) != 0;
    }
    else {
      BOOL v168 = 0;
    }
    CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PrivateKey006");
    if (v19)
    {
      CFNumberRef v20 = v19;
      CFTypeID v21 = CFGetTypeID(v19);
      if (v21 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v20, kCFNumberSInt32Type, (void *)(a3 + 140));
        *(unsigned char *)(a3 + 136) = 1;
      }
    }
    CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PrivateKey014");
    if (v22 && (CFNumberRef v23 = v22, v24 = CFGetTypeID(v22), v24 == CFNumberGetTypeID())) {
      CFNumberGetValue(v23, kCFNumberSInt32Type, (void *)(a3 + 144));
    }
    else {
      *(_DWORD *)(a3 + 144) = 0;
    }
    CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PrivateKey025");
    if (v25 && (CFNumberRef v26 = v25, v27 = CFGetTypeID(v25), v27 == CFNumberGetTypeID())) {
      CFNumberGetValue(v26, kCFNumberSInt32Type, (void *)(a3 + 284));
    }
    else {
      *(_DWORD *)int v9 = -1;
    }
    CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PrivateKey043");
    if (v28)
    {
      CFNumberRef v29 = v28;
      CFTypeID v30 = CFGetTypeID(v28);
      if (v30 == CFNumberGetTypeID()) {
        CFNumberGetValue(v29, kCFNumberSInt32Type, (void *)(a3 + 288));
      }
    }
    CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PrivateKey009");
    if (v31)
    {
      CFNumberRef v32 = v31;
      CFTypeID v33 = CFGetTypeID(v31);
      if (v33 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v32, kCFNumberSInt32Type, (void *)(a3 + 152));
        *(unsigned char *)(a3 + 148) = 1;
      }
    }
    CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PrivateKey015");
    if (v34)
    {
      CFNumberRef v35 = v34;
      CFTypeID v36 = CFGetTypeID(v34);
      if (v36 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v35, kCFNumberSInt32Type, (void *)(a3 + 160));
        *(unsigned char *)(a3 + 156) = 1;
      }
    }
    CFTypeID v37 = CFDictionaryGetValue(theDict, @"PrivateKey016");
    if (v37)
    {
      BOOL v38 = CFEqual(v37, *v17) != 0;
      *(unsigned char *)(a3 + 164) = v38;
      if (!v38) {
        goto LABEL_53;
      }
    }
    else if (!*(unsigned char *)(a3 + 164))
    {
      goto LABEL_53;
    }
    CFDictionaryRef v39 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PrivateKey017");
    if (v39)
    {
      CFTypeID v40 = CFDictionaryGetValue(v39, @"PrivateKey018");
      *(void *)(a3 + 176) = v40;
      if (v40)
      {
        CFRetain(v40);
        *(void *)(a3 + 168) = CFDataGetBytePtr(*(CFDataRef *)(a3 + 176));
      }
      else if (dword_1EB671A40 >= 3)
      {
        fwrite("Delta QP data missing!\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Delta QP data missing!\n");
      }
    }
LABEL_53:
    CFTypeID v41 = CFDictionaryGetValue(theDict, @"PrivateKey007");
    if (v41)
    {
      *(unsigned char *)(a3 + 184) = 1;
      *(unsigned char *)(a3 + 185) = CFEqual(v41, *v17) != 0;
    }
    CFTypeID v42 = CFDictionaryGetValue(theDict, @"PrivateKey008");
    if (v42) {
      *(unsigned char *)(a3 + 186) = CFEqual(v42, *v17) != 0;
    }
    CFTypeID v43 = CFDictionaryGetValue(theDict, @"PrivateKey040");
    if (v43) {
      *(unsigned char *)(a3 + 187) = CFEqual(v43, *v17) != 0;
    }
    CFDictionaryRef v44 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PrivateKey036");
    if (v44)
    {
      CFDictionaryRef v45 = v44;
      LODWORD(valuePtr) = -1;
      CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v44, @"PrivateKey037");
      if (v46 && (CFNumberRef v47 = v46, v48 = CFGetTypeID(v46), v48 == CFNumberGetTypeID()))
      {
        CFNumberGetValue(v47, kCFNumberSInt32Type, &valuePtr);
        int v49 = (int)valuePtr;
      }
      else
      {
        int v49 = -1;
      }
      *(_DWORD *)(a3 + 192) = v49;
      LODWORD(valuePtr) = -1;
      CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(v45, @"PrivateKey038");
      CFNumberRef v51 = v50;
      if (v50 && (CFTypeID v52 = CFGetTypeID(v50), v52 == CFNumberGetTypeID()))
      {
        CFNumberGetValue(v51, kCFNumberSInt32Type, &valuePtr);
        int v53 = (int)valuePtr;
        *(_DWORD *)(a3 + 196) = valuePtr;
        if (*(int *)(a3 + 192) >= 1 && v53 >= 1)
        {
          signed int v54 = CFDictionaryGetValue(v45, @"PrivateKey039");
          *(void *)(a3 + 208) = v54;
          if (v54)
          {
            CFRetain(v54);
            *(void *)(a3 + 200) = CFDataGetBytePtr(*(CFDataRef *)(a3 + 208));
            *(unsigned char *)(a3 + 188) = 1;
          }
          else if (dword_1EB671A40 >= 3)
          {
            fwrite("Motion mask data missing!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(27, "Motion mask data missing!\n");
          }
        }
      }
      else
      {
        *(_DWORD *)(a3 + 196) = -1;
      }
    }
    CFDictionaryRef v55 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PrivateKey019");
    CFDictionaryRef v56 = v55;
    if (!v55) {
      goto LABEL_81;
    }
    LODWORD(valuePtr) = -1;
    CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(v55, @"PrivateKey020");
    CFNumberRef v58 = v57;
    if (v57 && (CFTypeID v59 = CFGetTypeID(v57), v59 == CFNumberGetTypeID()))
    {
      CFNumberGetValue(v58, kCFNumberSInt32Type, &valuePtr);
      int v60 = (int)valuePtr;
      *(_DWORD *)(a3 + 264) = valuePtr;
      if (v60 == 16)
      {
        LODWORD(valuePtr) = 0;
        CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(v56, @"PrivateKey021");
        CFNumberRef v62 = v61;
        if (v61 && (CFTypeID v63 = CFGetTypeID(v61), v63 == CFNumberGetTypeID()))
        {
          CFNumberGetValue(v62, kCFNumberSInt32Type, &valuePtr);
          int v64 = (int)valuePtr;
        }
        else
        {
          int v64 = 0;
        }
        *(_DWORD *)(a3 + 280) = v64;
        int v167 = CFDictionaryGetValue(v56, @"PrivateKey022");
        *(void *)(a3 + 272) = v167;
        if (v167)
        {
          CFRetain(v167);
          *(void *)(a3 + 256) = CFDataGetBytePtr(*(CFDataRef *)(a3 + 272));
        }
        else if (dword_1EB671A40 >= 3)
        {
          fwrite("MCM dQP map data missing!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "MCM dQP map data missing!\n");
        }
LABEL_81:
        if (*(_DWORD *)(a3 + 88) == 1)
        {
          *(_WORD *)(a3 + 352) = 2;
          int v170 = 2;
          CFDataRef v66 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EC8]);
          if (v66)
          {
            CFTypeID TypeID = CFDataGetTypeID();
            if (TypeID == CFGetTypeID(v66))
            {
              BytePtr = CFDataGetBytePtr(v66);
              unint64_t v69 = (unint64_t)CFDataGetLength(v66) >> 1;
              if ((int)v69 >= 8) {
                LODWORD(v69) = 8;
              }
              memcpy((void *)(a3 + 296), BytePtr, 2 * (int)v69);
              *(unsigned char *)(a3 + 354) = 1;
            }
          }
          CFDataRef v70 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44ED0]);
          if (v70)
          {
            CFTypeID v71 = CFDataGetTypeID();
            if (v71 == CFGetTypeID(v70))
            {
              uint64_t v72 = CFDataGetBytePtr(v70);
              unint64_t v73 = (unint64_t)CFDataGetLength(v70) >> 1;
              if ((int)v73 >= 8) {
                LODWORD(v73) = 8;
              }
              memcpy((void *)(a3 + 316), v72, 2 * (int)v73);
            }
          }
          CFDataRef v74 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EC0]);
          if (v74)
          {
            CFTypeID v75 = CFDataGetTypeID();
            if (v75 == CFGetTypeID(v74))
            {
              unsigned int v76 = CFDataGetBytePtr(v74);
              unint64_t v77 = (unint64_t)CFDataGetLength(v74) >> 1;
              if ((int)v77 >= 8) {
                LODWORD(v77) = 8;
              }
              memcpy((void *)(a3 + 336), v76, 2 * (int)v77);
            }
          }
          CFNumberRef v78 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EF8]);
          if (v78)
          {
            CFTypeID v79 = CFNumberGetTypeID();
            if (v79 == CFGetTypeID(v78))
            {
              CFNumberGetValue(v78, kCFNumberSInt32Type, &v170);
              *(_WORD *)(a3 + 352) = v170;
            }
          }
          CFArrayRef v80 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44DC0]);
          if (v80)
          {
            CFTypeID v81 = CFArrayGetTypeID();
            if (v81 == CFGetTypeID(v80))
            {
              unsigned int Count = CFArrayGetCount(v80);
              int v83 = Count >= 0x10 ? 16 : Count;
              *(_DWORD *)(a3 + 360) = v83;
              if (v83)
              {
                unint64_t v84 = 0;
                unsigned int v85 = (char *)(a3 + 364);
                do
                {
                  CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v80, v84);
                  CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v85);
                  ++v84;
                  v85 += 4;
                }
                while (v84 < *(unsigned int *)(a3 + 360));
              }
            }
          }
          *(_DWORD *)(a3 + 472) = 0;
          CFNumberRef v87 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"queuelength");
          if (v87)
          {
            *(_DWORD *)(a3 + 472) = 1;
            CFNumberGetValue(v87, kCFNumberSInt32Type, (void *)(a3 + 476));
          }
          CFNumberRef v88 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"avgOutgoingRate");
          CFNumberRef v89 = v88;
          if (v88)
          {
            CFTypeID v90 = CFGetTypeID(v88);
            if (v90 == CFNumberGetTypeID()) {
              CFNumberGetValue(v89, kCFNumberSInt32Type, (void *)(a3 + 480));
            }
          }
          CFNumberRef v91 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"instantOutgoingRate");
          CFNumberRef v92 = v91;
          if (v91)
          {
            CFTypeID v93 = CFGetTypeID(v91);
            if (v93 == CFNumberGetTypeID()) {
              CFNumberGetValue(v92, kCFNumberSInt32Type, (void *)(a3 + 484));
            }
          }
          CFNumberRef v94 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Use2GNetwork");
          CFNumberRef v95 = v94;
          if (v94)
          {
            CFTypeID v96 = CFGetTypeID(v94);
            if (v96 == CFNumberGetTypeID()) {
              CFNumberGetValue(v95, kCFNumberSInt32Type, (void *)(a3 + 488));
            }
          }
          CFNumberRef v97 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RemoteDisplayWidth");
          CFNumberRef v98 = v97;
          if (v97)
          {
            CFTypeID v99 = CFGetTypeID(v97);
            if (v99 == CFNumberGetTypeID()) {
              CFNumberGetValue(v98, kCFNumberSInt32Type, (void *)(a3 + 492));
            }
          }
          CFNumberRef v100 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RemoteDisplayHeight");
          CFNumberRef v101 = v100;
          if (v100)
          {
            CFTypeID v102 = CFGetTypeID(v100);
            if (v102 == CFNumberGetTypeID()) {
              CFNumberGetValue(v101, kCFNumberSInt32Type, (void *)(a3 + 496));
            }
          }
          CFNumberRef v103 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CameraFacingType");
          CFNumberRef v104 = v103;
          if (v103)
          {
            CFTypeID v105 = CFGetTypeID(v103);
            if (v105 == CFNumberGetTypeID()) {
              CFNumberGetValue(v104, kCFNumberSInt32Type, (void *)(a3 + 696));
            }
          }
          CFDictionaryRef v106 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F90]);
          CFDictionaryRef v107 = v106;
          if (v106)
          {
            CFNumberRef v108 = (const __CFNumber *)CFDictionaryGetValue(v106, (const void *)*MEMORY[0x1E4F24A88]);
            CFNumberRef v109 = v108;
            if (v108)
            {
              CFTypeID v110 = CFGetTypeID(v108);
              if (v110 == CFNumberGetTypeID()) {
                CFNumberGetValue(v109, kCFNumberSInt32Type, (void *)(a3 + 456));
              }
            }
            CFNumberRef v111 = (const __CFNumber *)CFDictionaryGetValue(v107, (const void *)*MEMORY[0x1E4F24A68]);
            CFNumberRef v112 = v111;
            if (v111)
            {
              CFTypeID v113 = CFGetTypeID(v111);
              if (v113 == CFNumberGetTypeID()) {
                CFNumberGetValue(v112, kCFNumberSInt32Type, (void *)(a3 + 460));
              }
            }
            CFNumberRef v114 = (const __CFNumber *)CFDictionaryGetValue(v107, (const void *)*MEMORY[0x1E4F24A70]);
            CFNumberRef v115 = v114;
            if (v114)
            {
              CFTypeID v116 = CFGetTypeID(v114);
              if (v116 == CFNumberGetTypeID()) {
                CFNumberGetValue(v115, kCFNumberSInt32Type, (void *)(a3 + 464));
              }
            }
            CFNumberRef v117 = (const __CFNumber *)CFDictionaryGetValue(v107, (const void *)*MEMORY[0x1E4F24A80]);
            CFNumberRef v118 = v117;
            if (v117)
            {
              CFTypeID v119 = CFGetTypeID(v117);
              if (v119 == CFNumberGetTypeID()) {
                CFNumberGetValue(v118, kCFNumberSInt32Type, (void *)(a3 + 468));
              }
            }
          }
          else
          {
            *(void *)(a3 + 456) = 0;
            *(void *)(a3 + 464) = 0;
          }
          CFNumberRef v120 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PadFrameToMinimumSize");
          CFNumberRef v121 = v120;
          if (v120)
          {
            CFTypeID v122 = CFGetTypeID(v120);
            if (v122 == CFNumberGetTypeID()) {
              CFNumberGetValue(v121, kCFNumberSInt32Type, (void *)(a3 + 452));
            }
          }
          CFNumberRef v123 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F50]);
          CFNumberRef v124 = v123;
          if (v123)
          {
            CFTypeID v125 = CFGetTypeID(v123);
            if (v125 == CFNumberGetTypeID()) {
              CFNumberGetValue(v124, kCFNumberSInt32Type, (void *)(a3 + 428));
            }
          }
          CFNumberRef v126 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F08]);
          CFNumberRef v127 = v126;
          if (v126)
          {
            CFTypeID v128 = CFGetTypeID(v126);
            if (v128 == CFNumberGetTypeID()) {
              CFNumberGetValue(v127, kCFNumberDoubleType, (void *)(a3 + 432));
            }
          }
          CFNumberRef v129 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44DD8]);
          CFNumberRef v130 = v129;
          if (v129)
          {
            CFTypeID v131 = CFGetTypeID(v129);
            if (v131 == CFNumberGetTypeID()) {
              CFNumberGetValue(v130, kCFNumberSInt32Type, (void *)(a3 + 440));
            }
          }
          CFNumberRef v132 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44EB0]);
          CFNumberRef v133 = v132;
          if (v132)
          {
            CFTypeID v134 = CFGetTypeID(v132);
            if (v134 == CFNumberGetTypeID()) {
              CFNumberGetValue(v133, kCFNumberSInt32Type, (void *)(a3 + 444));
            }
          }
          CFNumberRef v135 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F44F10]);
          CFNumberRef v136 = v135;
          if (v135)
          {
            CFTypeID v137 = CFGetTypeID(v135);
            if (v137 == CFNumberGetTypeID()) {
              CFNumberGetValue(v136, kCFNumberSInt32Type, (void *)(a3 + 448));
            }
          }
          LODWORD(valuePtr) = 1;
          CFNumberRef v138 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"AutoExposureState");
          CFNumberRef v139 = v138;
          if (v138 && (CFTypeID v140 = CFGetTypeID(v138), v140 == CFNumberGetTypeID()))
          {
            CFNumberGetValue(v139, kCFNumberSInt32Type, &valuePtr);
            int v141 = (int)valuePtr;
          }
          else
          {
            int v141 = 1;
          }
          *(_DWORD *)(a3 + 356) = v141;
        }
        BOOL v18 = v168;
        goto LABEL_166;
      }
      uint64_t v65 = (_DWORD *)(a3 + 264);
    }
    else
    {
      uint64_t v65 = (_DWORD *)(a3 + 264);
      int v60 = -1;
      *(_DWORD *)(a3 + 264) = -1;
    }
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "MCM map with granularity %d not supported\n", v60);
      syslog(27, "MCM map with granularity %d not supported\n", *v65);
    }
    goto LABEL_81;
  }
  BOOL v18 = 0;
  if (*(_DWORD *)(a3 + 88) == 1) {
    *(_WORD *)(a3 + 352) = 2;
  }
LABEL_166:
  *(_DWORD *)(a3 + 128) |= v18;
  *(_DWORD *)(a3 + 132) = 0;
  if (*(_DWORD *)(a1 + 1328) != 2) {
    goto LABEL_187;
  }
  int v142 = *(_DWORD *)(a1 + 1300);
  int v143 = *(_DWORD *)(a1 + 1304);
  int v144 = *(_DWORD *)(a1 + 152);
  int v146 = v142 + 63;
  BOOL v145 = v142 < -63;
  int v147 = v142 + 126;
  if (v145) {
    int v148 = v147;
  }
  else {
    int v148 = v146;
  }
  int v149 = v143 + 63;
  BOOL v145 = v143 < -63;
  int v150 = v143 + 126;
  if (v145) {
    int v151 = v150;
  }
  else {
    int v151 = v149;
  }
  uint64_t v152 = *(const void **)(a3 + 248);
  if (v152) {
    CFRelease(v152);
  }
  uint64_t v153 = *(void *)(a3 + 240);
  *(void *)(a3 + 240) = 0;
  *(void *)(a3 + 248) = 0;
  if (v153 == a3 + 216)
  {
    (*(void (**)(uint64_t))(*(void *)(a3 + 216) + 32))(a3 + 216);
  }
  else if (v153)
  {
    (*(void (**)(uint64_t))(*(void *)v153 + 40))(v153);
  }
  BOOL v154 = CFDictionaryGetValue(theDict, @"HEVCQPMap");
  *(void *)(a3 + 248) = v154;
  if (v154)
  {
    uint64_t v155 = (v148 >> 6);
    uint64_t v156 = 88 * (v151 >> 6) * (int)v155;
    CFRetain(v154);
    int v157 = CFDataGetBytePtr(*(CFDataRef *)(a3 + 248));
    CFIndex Length = CFDataGetLength(*(CFDataRef *)(a3 + 248));
    if (Length >= v156)
    {
      int valuePtr = &unk_1F26F15A8;
      uint64_t v172 = v157;
      uint64_t v173 = v155;
      p_int valuePtr = &valuePtr;
      sub_1D0CC71CC(&valuePtr, (void *)(a3 + 216));
      sub_1D0CC70E8(&valuePtr);
      goto LABEL_187;
    }
    if (dword_1EB671A40 >= 3)
    {
      CFIndex v159 = Length;
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "External QP map is %zd, expected %zd!\n", Length, v156);
      syslog(27, "External QP map is %zd, expected %zd!\n", v159, v156);
    }
  }
  int valuePtr = &unk_1F26F15F0;
  LODWORD(v172) = v144;
  p_int valuePtr = &valuePtr;
  sub_1D0CC71CC(&valuePtr, (void *)(a3 + 216));
  sub_1D0CC70E8(&valuePtr);
  int v160 = *(const void **)(a3 + 248);
  if (v160) {
    CFRelease(v160);
  }
  *(void *)(a3 + 248) = 0;
LABEL_187:
  if (*(_DWORD *)(a1 + 1204))
  {
    if (!*(unsigned char *)(a3 + 148))
    {
      if (dword_1EB671A40 >= 4)
      {
        fwrite("Specified MaxReording but didn't set InputFrameNum, assuming no reorder\n", 0x48uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(28, "Specified MaxReording but didn't set InputFrameNum, assuming no reorder\n");
      }
      *(unsigned char *)(a3 + 148) = 1;
      *(_DWORD *)(a3 + 152) = *(_DWORD *)(a1 + 1308);
    }
  }
  else if (!*(unsigned char *)(a3 + 148))
  {
    int v162 = *(_DWORD *)(a1 + 1308);
    int v165 = 1;
    goto LABEL_202;
  }
  int v161 = *(_DWORD *)(a3 + 152);
  int v162 = *(_DWORD *)(a1 + 1308);
  int v163 = *(_DWORD *)(a1 + 1196);
  if (v161 - v162 >= v163)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Reordering for GOP size of %d, but specified a maximum of %d\n", v161 - v162 + 1, v163);
      syslog(27, "Reordering for GOP size of %d, but specified a maximum of %d\n", *(_DWORD *)(a3 + 152) - *(_DWORD *)(a1 + 1308) + 1, *(_DWORD *)(a1 + 1196));
    }
    return 4294954394;
  }
  int v164 = *(_DWORD *)(a1 + 1204);
  if (v162 - v161 > v164)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Number of reordered pictures %d exceeds given maximum of %d\n", v162 - v161, v164);
      syslog(27, "Number of reordered pictures %d exceeds given maximum of %d\n", *(_DWORD *)(a1 + 1308) - *(_DWORD *)(a3 + 152), *(_DWORD *)(a1 + 1204));
    }
    return 4294954394;
  }
  int v165 = 0;
LABEL_202:
  uint64_t v166 = *a2;
  *(_DWORD *)(v166 + 8) = v162;
  *(_OWORD *)(v166 + 16) = *(_OWORD *)(a3 + 776);
  *(_DWORD *)(v166 + 32) = *(_DWORD *)(a3 + 792);
  uint64_t result = 0;
  if (v165) {
    *(_DWORD *)(a1 + 1308) = v162 + 1;
  }
  return result;
}

uint64_t sub_1D0C71C0C()
{
  uint64_t v0 = 2;
  unsigned int valuePtr = 2;
  CFPreferencesAppSynchronize(@"com.apple.videoprocessing");
  CFStringRef v1 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
  CFArrayRef v3 = CFPreferencesCopyKeyList(@"com.apple.videoprocessing", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (v3)
  {
    CFArrayRef v4 = v3;
    if (CFArrayGetCount(v3) >= 1
      && (v11.length = CFArrayGetCount(v4), v11.locatiounsigned int n = 0, CFArrayContainsValue(v4, v11, @"PFrameQpOffset"))
      && (CFPropertyListRef v5 = CFPreferencesCopyValue(@"PFrameQpOffset", @"com.apple.videoprocessing", v1, v2)) != 0)
    {
      BOOL v6 = v5;
      CFTypeID v7 = CFGetTypeID(v5);
      if (v7 == CFNumberGetTypeID())
      {
        CFTypeID v8 = CFGetTypeID(v6);
        if (v8 == CFNumberGetTypeID()) {
          CFNumberGetValue((CFNumberRef)v6, kCFNumberSInt32Type, &valuePtr);
        }
      }
      CFRelease(v4);
      CFRelease(v6);
      return valuePtr;
    }
    else
    {
      CFRelease(v4);
    }
  }
  return v0;
}

uint64_t sub_1D0C71D34(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  CFPropertyListRef v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  CFTypeID v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1D0C71FE4(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1D25F01B0](v1);
  _Unwind_Resume(a1);
}

void *sub_1D0C7200C(void *a1)
{
  MEMORY[0x1D25F0050](v19, a1);
  if (v19[0])
  {
    uint64_t v2 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v3 = *((void *)v2 + 5);
    int v4 = *((_DWORD *)v2 + 2);
    int v5 = *((_DWORD *)v2 + 36);
    if (v5 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v6 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v2 + 36) = v5;
    }
    if ((v4 & 0xB0) == 0x20) {
      uint64_t v7 = "";
    }
    else {
      uint64_t v7 = ":";
    }
    if (!v3) {
      goto LABEL_29;
    }
    uint64_t v8 = *((void *)v2 + 3);
    BOOL v9 = v8 <= 1;
    uint64_t v10 = v8 - 1;
    size_t v11 = v9 ? 0 : v10;
    if (v7 - ":" >= 1
      && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(void *)v3 + 96))(v3, ":", v7 - ":") != v7 - ":")
    {
      goto LABEL_29;
    }
    if ((uint64_t)v11 >= 1)
    {
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        sub_1D0C72478();
      }
      if (v11 >= 0x17)
      {
        uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v13 = v11 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_b = (std::locale::__imp *)operator new(v13 + 1);
        size_t v21 = v11;
        int64_t v22 = v14 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v22) = v11;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v5, v11);
      *((unsigned char *)p_b + v11) = 0;
      int v15 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v16 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v3 + 96))(v3, v15, v11);
      if (SHIBYTE(v22) < 0) {
        operator delete(__b.__locale_);
      }
      if (v16 != v11) {
        goto LABEL_29;
      }
    }
    uint64_t v17 = ":" - v7 + 1;
    if (v17 < 1
      || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)v3 + 96))(v3, v7, ":" - v7 + 1) == v17)
    {
      *((void *)v2 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1D25F0060](v19);
  return a1;
}

void sub_1D0C722AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1D25F0060](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1D0C72280);
}

void sub_1D0C72318(_Unwind_Exception *a1)
{
}

uint64_t sub_1D0C7232C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D25F01B0](a1 + 128);
  return a1;
}

void sub_1D0C72464(void *a1)
{
}

void sub_1D0C72478()
{
}

void sub_1D0C72490(const char *a1)
{
  exceptiounsigned int n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1D0C724EC(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1F26F0F38, MEMORY[0x1E4FBA1C8]);
}

void sub_1D0C724D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1D0C724EC(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t sub_1D0C72520(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5)
{
  int v6 = a4;
  unint64_t v8 = HIDWORD(a4);
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 1272) = a2;
  *(_DWORD *)(DerivedStorage + 1300) = v6;
  *(_DWORD *)(DerivedStorage + 1304) = v8;
  *(_WORD *)(DerivedStorage + 12) = 0;
  if (a5) {
    *(void *)(DerivedStorage + 1320) = CFRetain(a5);
  }
  uint64_t v10 = sub_1D0C937F4(*(_DWORD *)(DerivedStorage + 8));
  if (v10)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Error setting tile requirements\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Error setting tile requirements\n");
    }
  }
  else
  {
    uint64_t v11 = *(void *)(DerivedStorage + 1288);
    *(void *)(v11 + 10448) = sub_1D0C725FC;
    *(void *)(v11 + 10456) = DerivedStorage;
  }
  return v10;
}

uint64_t sub_1D0C725FC(uint64_t a1, uint64_t a2, int a3, const void *a4, size_t dataLength, unsigned char *a6, uint64_t a7)
{
  CFTypeRef cf = 0;
  if (!a3 && a4 && dataLength)
  {
    uint64_t v13 = *(void *)(a1 + 1288);
    if (*(unsigned char *)(v13 + 424)) {
      *(unsigned char *)(v13 + 11012) &= CC_MD5_Update((CC_MD5_CTX *)(v13 + 10920), a4, dataLength);
    }
    sub_1D0C72718(a1, a4, dataLength, 0, a7, a6, a2, (CMSampleBufferRef *)&cf);
  }
  VTEncoderSessionEmitEncodedTile();
  if (cf) {
    CFRelease(cf);
  }
  sub_1D0CC716C((void *)(a2 + 88));
  return MEMORY[0x1D25F0230](a2, 0x1070C40040150F9);
}

uint64_t sub_1D0C72718(uint64_t a1, const void *a2, size_t dataLength, const CMSampleTimingInfo *a4, uint64_t a5, unsigned char *a6, uint64_t a7, CMSampleBufferRef *a8)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  dataPointerOut = 0;
  CMBlockBufferRef dataBuffer = 0;
  size_t sampleSizeArray = dataLength;
  if (dataLength >> 31 || !*(void *)a5)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("No data / frame encoded!\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "No data / frame encoded!\n");
    }
    uint64_t DataPointer = 4294954392;
    goto LABEL_16;
  }
  size_t v13 = dataLength;
  CFDataRef v16 = *(const __CFData **)(a1 + 136);
  if (v16)
  {
    dataLength += CFDataGetLength(v16);
    size_t sampleSizeArray = dataLength;
  }
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, dataLength, *(CFAllocatorRef *)(a1 + 1320), 0, 0, dataLength, 1u, &dataBuffer);
  if (!DataPointer)
  {
    uint64_t DataPointer = CMSampleBufferCreate(v17, dataBuffer, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 1280), 1, a4 != 0, a4, 1, &sampleSizeArray, a8);
    if (!DataPointer)
    {
      uint64_t DataPointer = CMBlockBufferGetDataPointer(dataBuffer, 0, 0, 0, &dataPointerOut);
      if (!DataPointer)
      {
        memcpy(dataPointerOut, a2, v13);
        CFDataRef v19 = *(const __CFData **)(a1 + 136);
        if (v19)
        {
          CFNumberRef v20 = &dataPointerOut[v13];
          BytePtr = CFDataGetBytePtr(v19);
          size_t Length = CFDataGetLength(*(CFDataRef *)(a1 + 136));
          memcpy(v20, BytePtr, Length);
        }
        CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(*a8, 1u);
        CFNumberRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
        CFNumberRef v25 = ValueAtIndex;
        if ((*(_DWORD *)(a1 + 144) - 33) <= 4)
        {
          sub_1D0C72D58(ValueAtIndex, a5, (uint64_t)a6, *(_DWORD *)(a1 + 1308));
          if (*a6)
          {
            uint64_t v26 = *(void *)a5;
            goto LABEL_33;
          }
          unint64_t v28 = CFStringGetLength(*(CFStringRef *)(a1 + 1248));
          if (v28 >= 0x29)
          {
            if (dword_1EB671A40 >= 4)
            {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "VersionString(%d) is longer than max length(%d), truncating..", v28, 40);
              syslog(28, "VersionString(%d) is longer than max length(%d), truncating..", v28, 40);
            }
            unint64_t v28 = 40;
          }
          CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(a1 + 1248), 0x8000100u);
          memcpy(__dst, CStringPtr, v28);
          uint64_t v56 = 61;
          uint64_t v30 = sub_1D0D64E1C((uint64_t)__dst, v28, (uint64_t)v61, &v56);
          if (v30)
          {
            uint64_t DataPointer = v30;
            if (dword_1EB671A40 >= 3)
            {
              fwrite("Error creating SEI user data unregistered\n", 0x2AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              syslog(27, "Error creating SEI user data unregistered\n");
            }
            goto LABEL_16;
          }
          CFIndex v31 = off_1EB671A48(bytes);
          CFDataRef v32 = CFDataCreate(v17, bytes, v31);
          if (!v32) {
            return 4294954385;
          }
          CFDataRef v33 = v32;
          CFDictionaryAddValue(v25, @"PrivateKey041", v32);
          CFRelease(v33);
        }
        uint64_t v26 = *(void *)a5;
        if (!*a6)
        {
          int v36 = 0;
          int v34 = 1;
          goto LABEL_40;
        }
LABEL_33:
        int v34 = 0;
        if (*(unsigned char *)(v26 + 40)) {
          BOOL v35 = *(unsigned char *)(a1 + 13) == 0;
        }
        else {
          BOOL v35 = 1;
        }
        int v36 = !v35;
LABEL_40:
        if (*(_DWORD *)(v26 + 36) == 1)
        {
          *(_DWORD *)bytes = *(_DWORD *)(v26 + 8);
          CFNumberRef v37 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
          if (v37)
          {
            CFNumberRef v38 = v37;
            CFDictionaryAddValue(v25, (const void *)*MEMORY[0x1E4F453B8], v37);
            CFRelease(v38);
          }
          uint64_t v26 = *(void *)a5;
        }
        if (*(unsigned char *)(v26 + 41)) {
          char v39 = v34;
        }
        else {
          char v39 = 1;
        }
        CFTypeID v40 = (const void **)MEMORY[0x1E4F1CFD0];
        if (v39)
        {
          if (v34)
          {
LABEL_64:
            CFTypeID v48 = (const void *)*MEMORY[0x1E4F1CFC8];
            int v49 = *v40;
            if (v34) {
              CFNumberRef v50 = (const void *)*MEMORY[0x1E4F1CFC8];
            }
            else {
              CFNumberRef v50 = *v40;
            }
            CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F1F200], v50);
            if (!*(unsigned char *)(*(void *)a5 + 40)) {
              CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F1F1F8], v48);
            }
            CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F1F1A8], v50);
            if (v36) {
              CFNumberRef v51 = v49;
            }
            else {
              CFNumberRef v51 = v48;
            }
            CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F1F1C0], v51);
            if (*(int *)(*(void *)a5 + 504) >= 1 && *(int *)(*(void *)a5 + 508) >= 1)
            {
              *(_DWORD *)bytes = *(_DWORD *)(*(void *)a5 + 504);
              CFNumberRef v52 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
              if (v52)
              {
                CFNumberRef v53 = v52;
                CFDictionaryAddValue(v25, @"VRAWidth", v52);
                CFRelease(v53);
              }
              *(_DWORD *)bytes = *(_DWORD *)(*(void *)a5 + 508);
              CFNumberRef v54 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
              if (v54)
              {
                CFNumberRef v55 = v54;
                CFDictionaryAddValue(v25, @"VRAHeight", v54);
                CFRelease(v55);
              }
            }
            uint64_t DataPointer = 0;
            goto LABEL_16;
          }
        }
        else
        {
          CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F453B0], (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        double v41 = *(double *)(a7 + 432);
        if (v41 >= 1.0 && *(int *)(a7 + 92) >= 77000)
        {
          if (v41 >= 10.0) {
            int v42 = 3;
          }
          else {
            int v42 = 2;
          }
          if (v41 < 5.0) {
            int v43 = 1;
          }
          else {
            int v43 = v42;
          }
          *(_DWORD *)bytes = 0;
          CFNumberRef v44 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
          if (v44)
          {
            CFNumberRef v45 = v44;
            CFDictionaryAddValue(v25, (const void *)*MEMORY[0x1E4F45380], v44);
            CFRelease(v45);
          }
          *(_DWORD *)bytes = v43;
          CFNumberRef v46 = CFNumberCreate(0, kCFNumberSInt32Type, bytes);
          if (v46)
          {
            CFNumberRef v47 = v46;
            CFDictionaryAddValue(v25, (const void *)*MEMORY[0x1E4F45390], v46);
            CFRelease(v47);
          }
          CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E4F45388], *v40);
        }
        goto LABEL_64;
      }
    }
  }
LABEL_16:
  if (dataBuffer) {
    CFRelease(dataBuffer);
  }
  if (DataPointer)
  {
    if (*a8) {
      CFRelease(*a8);
    }
    *a8 = 0;
  }
  return DataPointer;
}

void sub_1D0C72D58(__CFDictionary *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8 = *(_DWORD **)a2;
  uint64_t v9 = 127;
  if (!*(unsigned char *)(*(void *)a2 + 432)) {
    uint64_t v9 = 131;
  }
  int v10 = v8[v9];
  uint64_t v11 = 126;
  if (!*(unsigned char *)(*(void *)a2 + 432)) {
    uint64_t v11 = 130;
  }
  int v12 = v8[v11] * v10;
  int v13 = v8[292];
  if (v12 >= 0) {
    int v14 = v8[v11] * v10;
  }
  else {
    int v14 = v12 + 1;
  }
  int v15 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)v8 + 24))(v8);
  CFDataRef v16 = CFDataCreate(0, (const UInt8 *)(*(void *)a2 + 664), 24);
  CFDataRef v17 = v16;
  if (!v15)
  {
    if (!v16) {
      return;
    }
    goto LABEL_21;
  }
  if (!v16) {
    return;
  }
  unsigned int v32 = (100 * v13 + (v14 >> 1)) / v12;
  CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v32);
  if (v18)
  {
    CFNumberRef v19 = v18;
    CFDictionaryAddValue(a1, @"PrivateKey026", v18);
    CFRelease(v19);
    int valuePtr = *(_DWORD *)(*(void *)a2 + 1164);
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v20)
    {
      CFNumberRef v21 = v20;
      CFDictionaryAddValue(a1, @"PrivateKey028", v20);
      CFRelease(v21);
      CFDictionaryAddValue(a1, @"PrivateKey027", v15);
      char v34 = *(unsigned char *)(a3 + 1);
      CFNumberRef v22 = CFNumberCreate(0, kCFNumberSInt8Type, &v34);
      if (v22)
      {
        CFNumberRef v23 = v22;
        CFDictionaryAddValue(a1, @"PrivateKey029", v22);
        CFRelease(v23);
        int v35 = a4;
        CFNumberRef v24 = CFNumberCreate(0, kCFNumberSInt32Type, &v35);
        if (v24)
        {
          CFNumberRef v25 = v24;
          CFDictionaryAddValue(a1, @"PrivateKey010", v24);
          CFRelease(v25);
          CFDictionaryAddValue(a1, @"PrivateKey042", v17);
          uint64_t v26 = *(const UInt8 **)(a3 + 16);
          if (!v26) {
            goto LABEL_17;
          }
          CFDataRef v27 = CFDataCreate(0, v26, 208);
          if (v27)
          {
            CFDataRef v28 = v27;
            CFDictionaryAddValue(a1, @"PrivateKey031", v27);
            CFRelease(v28);
LABEL_17:
            CFNumberRef v29 = *(const UInt8 **)(a3 + 8);
            if (v29)
            {
              CFDataRef v30 = CFDataCreate(0, v29, 22);
              if (v30)
              {
                CFDataRef v31 = v30;
                CFDictionaryAddValue(a1, @"PrivateKey030", v30);
                CFRelease(v31);
              }
            }
          }
        }
      }
    }
  }
LABEL_21:
  CFRelease(v17);
}

uint64_t sub_1D0C72FD4(uint64_t a1, void *a2)
{
  int v5 = &v6;
  uint64_t v6 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1EA643318, memory_order_acquire) != -1)
  {
    unint64_t v8 = &v5;
    uint64_t v7 = &v8;
    std::__call_once(qword_1EA643318, &v7, (void (__cdecl *)(void *))sub_1D0C730B8);
  }
  if (qword_1EA643310)
  {
    if (a2)
    {
      CFTypeRef v3 = CFRetain((CFTypeRef)qword_1EA643310);
      uint64_t result = 0;
      *a2 = v3;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("CFDictionaryCreate failed\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "CFDictionaryCreate failed\n", v5);
    }
    return 4294954392;
  }
  return result;
}

void sub_1D0C730B8()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v2)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("CFDictionaryCreate failed", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "CFDictionaryCreate failed");
    }
    goto LABEL_24;
  }
  CFDictionaryRef v3 = v2;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("CFArrayCreate (CreateProfileLevelDict) failed!", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "CFArrayCreate (CreateProfileLevelDict) failed!");
    }
    goto LABEL_23;
  }
  int v5 = Mutable;
  uint64_t v6 = (const void **)MEMORY[0x1E4F452A8];
  uint64_t v7 = 0x10u;
  do
  {
    CFArrayAppendValue(v5, *v6);
    uint64_t v6 = *(const void ***)((char *)&unk_1E6899A70 + v7);
    v7 += 16;
  }
  while (v7 != 96);
  unint64_t v8 = (void *)*MEMORY[0x1E4F45310];
  values = v5;
  keys[0] = v8;
  CFDictionaryRef v9 = CFDictionaryCreate(v1, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v9) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = dword_1EB671A40 <= 2;
  }
  if (!v10)
  {
    fwrite("CFDictionaryCreate (CreateProfileLevelDict) failed!", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "CFDictionaryCreate (CreateProfileLevelDict) failed!");
    CFRelease(v5);
LABEL_23:
    CFRelease(v3);
LABEL_24:
    CFDictionaryRef Copy = 0;
    goto LABEL_25;
  }
  CFDictionaryRef v11 = v9;
  CFRelease(v5);
  if (!v11) {
    goto LABEL_23;
  }
  int v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v12)
  {
    int v13 = *(uint64_t ***)(*(void *)(DerivedStorage + 1448) + 16);
    if (v13)
    {
      int v14 = (const void *)*MEMORY[0x1E4F44AA0];
      do
      {
        if (CFEqual(v13[2], v14)) {
          CFDictionaryRef v15 = v11;
        }
        else {
          CFDictionaryRef v15 = v3;
        }
        CFDictionaryAddValue(v12, v13[2], v15);
        int v13 = (uint64_t **)*v13;
      }
      while (v13);
    }
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v1, v12);
  }
  else
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("CFDictionaryCreate failed", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "CFDictionaryCreate failed");
    }
    CFDictionaryRef Copy = 0;
  }
  CFRelease(v3);
  CFRelease(v11);
  if (v12) {
    CFRelease(v12);
  }
LABEL_25:
  qword_1EA643310 = (uint64_t)Copy;
}

uint64_t sub_1D0C733BC()
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  sub_1D0CE9E88(*(void *)(DerivedStorage + 1288));
  if (*(unsigned char *)(DerivedStorage + 1216))
  {
    CFAllocatorRef v1 = *(const void **)(DerivedStorage + 1256);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 1256) = 0;
    }
    uint64_t v2 = *(void *)(DerivedStorage + 1288);
    if (*(unsigned char *)(v2 + 424) && *(void *)(v2 + 248))
    {
      char v3 = CC_MD5_Final(md, (CC_MD5_CTX *)(v2 + 10920));
      BOOL v4 = (v3 & *(unsigned char *)(v2 + 11012)) == 0;
      *(unsigned char *)(v2 + 11012) &= v3;
      if (v4)
      {
        if (dword_1EB671A40 >= 3)
        {
          fwrite("Error printing bitstream MD5\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "Error printing bitstream MD5\n");
        }
      }
      else
      {
        sub_1D0C71D34((uint64_t)v57);
        uint64_t v5 = v58[0];
        *(_DWORD *)((char *)&v58[1] + *(void *)(v58[0] - 24)) = *(_DWORD *)((unsigned char *)&v58[1]
                                                                              + *(void *)(v58[0] - 24)) & 0xFFFFFFB5 | 8;
        uint64_t v6 = (char *)v58 + *(void *)(v5 - 24);
        uint64_t v7 = (void *)MEMORY[0x1E4FBA408];
        if (*((_DWORD *)v6 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(v5 - 24)));
          unint64_t v8 = std::locale::use_facet(&v55, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
          std::locale::~locale(&v55);
        }
        uint64_t v9 = 0;
        *((_DWORD *)v6 + 36) = 48;
        do
        {
          *(void *)((char *)&v58[3] + *(void *)(v58[0] - 24)) = 2;
          std::ostream::operator<<();
          ++v9;
        }
        while (v9 != 16);
        std::stringbuf::str();
        if (dword_1EB671A40 >= 6)
        {
          locale = (const char *)&v55;
          if (v56 < 0) {
            locale = (const char *)v55.__locale_;
          }
          fprintf(*(FILE **)(v2 + 248), "Stream MD5: %s\n", locale);
        }
        if (v56 >= 0) {
          CFDictionaryRef v11 = (const char *)&v55;
        }
        else {
          CFDictionaryRef v11 = (const char *)v55.__locale_;
        }
        *(void *)(DerivedStorage + 1256) = CFStringCreateWithCString(0, v11, 0x8000100u);
        if (v56 < 0) {
          operator delete(v55.__locale_);
        }
        v57[0] = *v7;
        uint64_t v12 = v7[9];
        *(void *)((char *)v57 + *(void *)(v57[0] - 24)) = v7[8];
        v58[0] = v12;
        v58[1] = MEMORY[0x1E4FBA470] + 16;
        if (v59 < 0) {
          operator delete((void *)v58[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1D25F01B0](&v60);
      }
    }
    uint64_t v13 = *(void *)(DerivedStorage + 1288);
    unsigned int v14 = *(_DWORD *)(v13 + 10464);
    unsigned int v15 = *(_DWORD *)(v13 + 10468) + v14;
    double v16 = *(unsigned char *)(v13 + 447) ? *(double *)(v13 + 472) : *(double *)(v13 + 10544) / (double)v15;
    if (dword_1EB671A40 >= 6)
    {
      char v17 = *(unsigned char *)(v13 + 650);
      int v18 = *(__int16 *)(v13 + 466);
      int v19 = *(__int16 *)(v13 + 468);
      double v20 = *(double *)(v13 + 10600);
      double v21 = *(double *)(v13 + 10608);
      double v22 = *(double *)(v13 + 10616);
      CFNumberRef v23 = *(FILE **)(v13 + 248);
      fwrite("-----------------------------------------------------------------------------------------------------------\n", 0x6CuLL, 1uLL, v23);
      if (dword_1EB671A40 >= 6)
      {
        fprintf(v23, "Total bits written: %llu, VPS/SPS/PPS bits: %u, NALU stream bits: %llu\n", 8 * (*(void *)(v13 + 10656) + *(unsigned int *)(v13 + 10664)), 8 * *(_DWORD *)(v13 + 10664), 8 * *(void *)(v13 + 10656));
        if (dword_1EB671A40 >= 6)
        {
          LODWORD(v24) = *(_DWORD *)(v13 + 10464);
          fprintf(v23, "Avg {   PSNR[i]   }: Y = %6.2f, Cb = %6.2f, Cr = %6.2f\n", *(double *)(v13 + 10624) / (double)v24, *(double *)(v13 + 10632) / (double)v24, *(double *)(v13 + 10640) / (double)v24);
          if (dword_1EB671A40 >= 6)
          {
            double v25 = (double)(~(-1 << v17) * ~(-1 << v17)) * (double)(v19 * v18) * (double)v14;
            double v26 = *(double *)(v13 + 10600);
            double v27 = 999.0;
            double v28 = 999.0;
            if (v26 > 0.0) {
              double v28 = log10(v25 / v26) * 10.0;
            }
            double v29 = v20 + v21;
            double v30 = *(double *)(v13 + 10608);
            double v31 = 999.0;
            if (v30 > 0.0) {
              double v31 = log10(v25 * 0.25 / v30) * 10.0;
            }
            double v32 = v29 + v22;
            double v33 = *(double *)(v13 + 10616);
            double v34 = 999.0;
            if (v33 > 0.0) {
              double v34 = log10(v25 * 0.25 / v33) * 10.0;
            }
            if (v32 > 0.0) {
              double v27 = log10(v25 * 1.5 / v32) * 10.0;
            }
            fprintf(v23, "PSNR{ Avg{MSE[i]} }: Y = %6.2f, Cb = %6.2f, Cr = %6.2f, Total = %6.2f\n", v28, v31, v34, v27);
            if (dword_1EB671A40 >= 6)
            {
              fprintf(v23, "NALU stream bitrate (including SPS/PPS): %6.2f kbps @ %.2f fps\n", v16* (double)(8 * (*(void *)(v13 + 10656) + (unint64_t)*(unsigned int *)(v13 + 10664)))/ ((double)v15* 1000.0), v16 * (float)*(unsigned int *)(v13 + 10464) / (double)v15);
              if (dword_1EB671A40 >= 6)
              {
                fwrite("-----------------------------------------------------------------------------------------------------------\n", 0x6CuLL, 1uLL, v23);
                if (dword_1EB671A40 >= 6)
                {
                  fprintf(v23, "Frame(s) encoded/dropped/reencoded %u/%u/%u\n", *(_DWORD *)(v13 + 10464), *(_DWORD *)(v13 + 10468), *(_DWORD *)(v13 + 10480));
                  if (dword_1EB671A40 >= 6)
                  {
                    fprintf(v23, "Frame(s) dropped: before encoding/after encoding/after reencoding %u/%u/%u\n", *(_DWORD *)(v13 + 10476), *(_DWORD *)(v13 + 10472), *(_DWORD *)(v13 + 10484));
                    if (dword_1EB671A40 >= 6)
                    {
                      LODWORD(v35) = *(_DWORD *)(v13 + 10464);
                      fprintf(v23, "Resolution: min/avg/max %ux%u/%ux%u/%ux%u\n", *(_DWORD *)(v13 + 10512), *(_DWORD *)(v13 + 10516), (*(double *)(v13 + 10496) / (double)v35), (*(double *)(v13 + 10504) / (double)v35), *(_DWORD *)(v13 + 10520), *(_DWORD *)(v13 + 10524));
                      if (dword_1EB671A40 >= 6)
                      {
                        LODWORD(v36) = *(_DWORD *)(v13 + 10464);
                        fprintf(v23, "Frame rate: min/avg/max %.2f/%.2f/%.2f\n", *(double *)(v13 + 10552), *(double *)(v13 + 10544) / (double)v36, *(double *)(v13 + 10560));
                        if (dword_1EB671A40 >= 6)
                        {
                          LODWORD(v37) = *(_DWORD *)(v13 + 10464);
                          fprintf(v23, "Frame QP: min/avg/max %.2f/%.2f/%.2f\n", (double)*(int *)(v13 + 10536), *(double *)(v13 + 10528) / (double)v37, (double)*(int *)(v13 + 10540));
                          if (dword_1EB671A40 >= 6)
                          {
                            LODWORD(v38) = *(_DWORD *)(v13 + 10464);
                            fprintf(v23, "Transmission buffer delay: min/avg/max %.2f/%.2f/%.2f ms\n", (double)*(int *)(v13 + 10576), *(double *)(v13 + 10568) / (double)v38, (double)*(int *)(v13 + 10580));
                            if (dword_1EB671A40 >= 6)
                            {
                              unsigned int v39 = *(_DWORD *)(v13 + 10464);
                              double v40 = -1.0;
                              double v41 = -1.0;
                              if (v39 >= 0xB)
                              {
                                double v40 = *(double *)(v13 + 10584) / (double)(v39 - 10);
                                double v41 = (double)*(int *)(v13 + 10596);
                              }
                              fprintf(v23, "After first ten frames: avg/max %.2f/%.2f ms\n", v40, v41);
                              if (dword_1EB671A40 >= 6)
                              {
                                LODWORD(v42) = *(_DWORD *)(v13 + 10488);
                                int v43 = *(_DWORD *)(v13 + 10492);
                                double v44 = 1.0 / (double)v42;
                                if (v43 == -1) {
                                  int v43 = *(_DWORD *)(v13 + 10464);
                                }
                                fprintf(v23, "VRA stability score: %.2f, min number of frames stayed at one resolution: %d\n", v44, v43);
                                int v46 = dword_1EB671A40;
                                int v47 = *(_DWORD *)(v13 + 456);
                                if (!v47 && dword_1EB671A40 >= 7)
                                {
                                  fwrite("Avg frame bytes by type:\n", 0x19uLL, 1uLL, v23);
                                  uint64_t v48 = 0;
                                  int v49 = dword_1EB671A40;
                                  uint64_t v50 = v13 + 10720;
                                  do
                                  {
                                    if (v49 >= 6)
                                    {
                                      unint64_t v51 = *(unsigned int *)(v50 + 4 * v48);
                                      if (v51) {
                                        unint64_t v52 = *(void *)(v50 + 8 * v48 - 48) / v51;
                                      }
                                      else {
                                        unint64_t v52 = 0;
                                      }
                                      fprintf(v23, "    %llu", v52);
                                      int v49 = dword_1EB671A40;
                                    }
                                    ++v48;
                                  }
                                  while (v48 != 6);
                                  if (v49 <= 5) {
                                    return 0;
                                  }
                                  fputc(10, v23);
                                  int v46 = dword_1EB671A40;
                                  int v47 = *(_DWORD *)(v13 + 456);
                                }
                                if (!v47 && v46 > 6)
                                {
                                  uint64_t v53 = *(void *)(v13 + 10400);
                                  if (!v53)
                                  {
LABEL_70:
                                    fwrite("-----------------------------------------------------------------------------------------------------------\n", 0x6CuLL, 1uLL, v23);
                                    return 0;
                                  }
                                  LODWORD(v45) = *(_DWORD *)(v53 + 1712);
                                  fprintf(v23, "bps (encoded, target, error): (%.0f, %.0f, %.3f)\n", v16* (double)(8* (*(void *)(v13 + 10656) + (unint64_t)*(unsigned int *)(v13 + 10664)))/ (double)v15, (double)v45, (v16* (double)(8* (*(void *)(v13 + 10656)+ (unint64_t)*(unsigned int *)(v13 + 10664)))/ (double)v15- (double)v45)/ (double)v45);
                                  int v46 = dword_1EB671A40;
                                }
                                if (v46 >= 6) {
                                  goto LABEL_70;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_1D0C73D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  a21 = *v40;
  uint64_t v42 = v40[9];
  *(uint64_t *)((char *)&a21 + *(void *)(a21 - 24)) = v40[8];
  a23 = v42;
  a24 = MEMORY[0x1E4FBA470] + 16;
  if (a37 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D25F01B0](&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C73E64(uint64_t a1, uint64_t a2, __CVBuffer *a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6)
{
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v58 = 0uLL;
  uint64_t v9 = (char *)operator new(0x320uLL, MEMORY[0x1E4FBA2D0]);
  uint64_t v10 = (uint64_t)v9;
  if (!v9) {
    goto LABEL_80;
  }
  bzero(v9 + 88, 0x2C8uLL);
  *(void *)(v10 + 96) = 0x186A0000280A0;
  *(void *)(v10 + 120) = 0x403E000000000000;
  *(void *)(v10 + 460) = 0;
  *(void *)(v10 + 452) = 0;
  *(_DWORD *)(v10 + 468) = 0;
  *(_DWORD *)(v10 + 356) = 1;
  *(void *)(v10 + 436) = 0;
  *(void *)(v10 + 444) = 0;
  *(void *)(v10 + 428) = 0;
  *(_DWORD *)(v10 + 660) = -1;
  *(_OWORD *)(v10 + 500) = 0u;
  *(_OWORD *)(v10 + 516) = 0u;
  *(_OWORD *)(v10 + 532) = 0u;
  *(_OWORD *)(v10 + 548) = 0u;
  *(_OWORD *)(v10 + 564) = 0u;
  *(_OWORD *)(v10 + 580) = 0u;
  *(_OWORD *)(v10 + 596) = 0u;
  *(_OWORD *)(v10 + 612) = 0u;
  *(_OWORD *)(v10 + 628) = 0u;
  *(_OWORD *)(v10 + 644) = 0u;
  *(_OWORD *)(v10 + 664) = 0u;
  *(_OWORD *)(v10 + 680) = 0u;
  *(_DWORD *)(v10 + 284) = -1;
  if (!a3) {
    goto LABEL_80;
  }
  *(void *)uint64_t v10 = a2;
  *(void *)(v10 + 648) = 0;
  *(void *)(v10 + 656) = 0xFFFFFFFF00000000;
  *(_OWORD *)(v10 + 500) = 0uLL;
  *(_OWORD *)(v10 + 516) = 0uLL;
  *(_OWORD *)(v10 + 532) = 0uLL;
  *(_OWORD *)(v10 + 548) = 0uLL;
  *(_OWORD *)(v10 + 564) = 0uLL;
  *(_OWORD *)(v10 + 580) = 0uLL;
  *(_OWORD *)(v10 + 596) = 0uLL;
  *(_OWORD *)(v10 + 612) = 0uLL;
  *(_OWORD *)(v10 + 628) = 0uLL;
  *(void *)(v10 + 672) = 0;
  *(void *)(v10 + 688) = 0;
  *(void *)(v10 + 680) = 0;
  *(void *)(v10 + 664) = 0x3FF0000000000000;
  CFNumberRef Attachment = (const __CFNumber *)CVBufferGetAttachment(a3, @"FrameIndex", 0);
  value.CMTime value = (CMTimeValue)Attachment;
  if (Attachment) {
    CFNumberGetValue(Attachment, kCFNumberIntType, (void *)(v10 + 660));
  }
  CFDictionaryRef Attachments = CVBufferGetAttachments(a3, kCVAttachmentMode_ShouldPropagate);
  CFDictionaryRef v13 = Attachments;
  if (Attachments)
  {
    unsigned int v14 = (const void *)*MEMORY[0x1E4F51480];
    if (CFDictionaryContainsKey(Attachments, (const void *)*MEMORY[0x1E4F51480]))
    {
      CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(v13, v14);
      CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F52700]);
      CFArrayRef v16 = v15;
      if (v15)
      {
        CFTypeID v17 = CFGetTypeID(v15);
        if (v17 == CFArrayGetTypeID())
        {
          unsigned int Count = CFArrayGetCount(v16);
          int v19 = Count >= 5 ? 5 : Count;
          *(_DWORD *)(v10 + 640) = v19;
          if (v19)
          {
            unint64_t v20 = 0;
            double v21 = (const void *)*MEMORY[0x1E4F52708];
            key = (void *)*MEMORY[0x1E4F52718];
            uint64_t v48 = (void *)*MEMORY[0x1E4F52720];
            unint64_t v52 = (void *)*MEMORY[0x1E4F52710];
            double v22 = (float32x4_t *)(v10 + 504);
            do
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v20);
              CFDictionaryRef v24 = ValueAtIndex;
              if (ValueAtIndex)
              {
                CFTypeID v25 = CFGetTypeID(ValueAtIndex);
                if (v25 == CFDictionaryGetTypeID())
                {
                  if (CFDictionaryGetValueIfPresent(v24, v21, (const void **)&value)) {
                    CFNumberGetValue((CFNumberRef)value.value, kCFNumberSInt32Type, (char *)&v22[-1].u64[1] + 4);
                  }
                  if (!v20)
                  {
                    if (CFDictionaryGetValueIfPresent(v24, key, (const void **)&value)) {
                      CFNumberGetValue((CFNumberRef)value.value, kCFNumberSInt32Type, (void *)(v10 + 520));
                    }
                    if (CFDictionaryGetValueIfPresent(v24, v48, (const void **)&value)) {
                      CFNumberGetValue((CFNumberRef)value.value, kCFNumberSInt32Type, (void *)(v10 + 524));
                    }
                  }
                  if (CFDictionaryGetValueIfPresent(v24, v52, (const void **)&value)
                    && CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)value.value, &rect))
                  {
                    *double v22 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)rect.origin), (float64x2_t)rect.size);
                  }
                }
              }
              ++v20;
              double v22 = (float32x4_t *)((char *)v22 + 28);
            }
            while (v20 < *(unsigned int *)(v10 + 640));
          }
        }
      }
    }
  }
  time1.CMTime value = 0;
  *(_OWORD *)(v10 + 720) = 0u;
  LODWORD(time2.value) = 0;
  *(void *)(v10 + 744) = 0;
  *(_DWORD *)(v10 + 752) = 0;
  *(_DWORD *)(v10 + 736) = 0;
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E4F523A8], (const void **)&time1)) {
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberDoubleType, (void *)(v10 + 720));
  }
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E4F52338], (const void **)&time1)) {
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 728));
  }
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E4F52450], (const void **)&time1)) {
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 732));
  }
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E4F52328], (const void **)&time1)) {
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, &time2);
  }
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E4F52350], (const void **)&time1)) {
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 744));
  }
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E4F52348], (const void **)&time1)) {
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 748));
  }
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E4F52340], (const void **)&time1)) {
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 752));
  }
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E4F52448], (const void **)&time1)) {
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberIntType, (void *)(v10 + 736));
  }
  if (CFDictionaryGetValueIfPresent(v13, (const void *)*MEMORY[0x1E4F523E8], (const void **)&time1)) {
    CFNumberGetValue((CFNumberRef)time1.value, kCFNumberDoubleType, (void *)(v10 + 760));
  }
  *(_OWORD *)(v10 + 40) = *(_OWORD *)a4;
  CMTimeEpoch v26 = *(void *)(a4 + 16);
  *(void *)(v10 + 56) = v26;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a5;
  CGFloat v27 = *(double *)(a5 + 16);
  *(CGFloat *)(v10 + 32) = v27;
  CMTimeValue v28 = *(void *)a4;
  CMTimeScale v29 = *(_DWORD *)(a4 + 8);
  CMTimeFlags v30 = *(_DWORD *)(a4 + 12);
  uint64_t v53 = *(void **)a5;
  int v31 = *(_DWORD *)(a5 + 8);
  CMTimeFlags v32 = *(_DWORD *)(a5 + 12);
  int v33 = *(_DWORD *)(DerivedStorage + 1308);
  *(void *)(v10 + 776) = *(void *)a4;
  *(_DWORD *)(v10 + 792) = v29;
  CMTimeScale keya = v31;
  if ((v32 & 0x1D) == 1
    && (*(void *)&rect.origin.x = v53,
        *(void *)&rect.origin.y = __PAIR64__(v32, v31),
        rect.size.width = v27,
        CMTime value = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48],
        int32_t v34 = CMTimeCompare((CMTime *)&rect, &value),
        int v31 = keya,
        v34 >= 1))
  {
    time1.CMTime value = (CMTimeValue)v53;
    time1.timescale = keya;
    time1.flags = v32;
    p_CMTime time1 = &time1;
    *(CGFloat *)&time1.epoch = v27;
  }
  else
  {
    if (v33 < 1
      || (v30 & 0x1D) != 1
      || (time1.CMTime value = v28,
          time1.timescale = v29,
          time1.flags = v30,
          time1.epoch = v26,
          CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48],
          int32_t v36 = CMTimeCompare(&time1, &time2),
          int v31 = keya,
          v36 < 1))
    {
      double Seconds = 1.0 / *(double *)(v10 + 120);
      goto LABEL_56;
    }
    lhs.CMTime value = v28;
    lhs.timescale = v29;
    lhs.flags = v30;
    lhs.epoch = v26;
    CMTime rhs = *(CMTime *)(DerivedStorage + 1352);
    p_CMTime time1 = &v62;
    CMTimeSubtract(&v62, &lhs, &rhs);
  }
  double Seconds = CMTimeGetSeconds(p_time1);
  int v31 = keya;
LABEL_56:
  int v38 = 0;
  int v39 = 0;
  *(double *)(DerivedStorage + 8 * (v33 % 5) + 1400) = Seconds;
  double v40 = 0.0;
  unsigned int v41 = v33;
  do
  {
    if (v33 + v38 >= 0)
    {
      ++v39;
      double v40 = v40 + *(double *)(DerivedStorage + 8 * (v38 + v33 - 5 * (v41 / 5)) + 1400);
    }
    --v38;
    --v41;
  }
  while (v38 != -5);
  if (v40 <= 0.0)
  {
    double v42 = *(double *)(v10 + 120);
  }
  else
  {
    double v42 = (double)v39 / v40;
    *(double *)(v10 + 120) = v42;
  }
  *(void *)(DerivedStorage + 1352) = v28;
  *(_DWORD *)(DerivedStorage + 1360) = v29;
  *(_DWORD *)(DerivedStorage + 1364) = v30;
  *(void *)(DerivedStorage + 1368) = v26;
  *(void *)(DerivedStorage + 1376) = v53;
  *(_DWORD *)(DerivedStorage + 1384) = v31;
  *(_DWORD *)(DerivedStorage + 1388) = v32;
  *(CGFloat *)(DerivedStorage + 1392) = v27;
  if (*(double *)(DerivedStorage + 1344) != v42)
  {
    if (dword_1EB671A40 >= 6)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Update framerate %.2f -> %.2f\n", *(double *)(DerivedStorage + 1344), v42);
      syslog(30, "Update framerate %.2f -> %.2f\n", *(double *)(DerivedStorage + 1344), *(double *)(v10 + 120));
      double v42 = *(double *)(v10 + 120);
      int v31 = keya;
    }
    *(double *)(DerivedStorage + 1344) = v42;
  }
  if ((v30 & 0x1D) == 1)
  {
    *(void *)(v10 + 776) = v28;
    *(_DWORD *)(v10 + 792) = v29;
    if ((v32 & 0x1D) == 1)
    {
      if (v29 == v31)
      {
        uint64_t v43 = (uint64_t)v53;
LABEL_77:
        *(void *)(v10 + 784) = v43;
        goto LABEL_78;
      }
      double v45 = (double)v29 / (double)v31 * (double)(uint64_t)v53;
    }
    else
    {
      double v45 = Seconds * (double)v29;
    }
    uint64_t v43 = (uint64_t)(v45 + 0.5);
    goto LABEL_77;
  }
  if (v42 > 0.0)
  {
    uint64_t v44 = (uint64_t)(3000.0 / v42 * (double)v33);
    *(void *)(v10 + 776) = v44;
    *(void *)(v10 + 784) = (uint64_t)(3000.0 / v42 * (double)(v33 + 1)) - v44;
    *(_DWORD *)(v10 + 792) = (int)(v42 * (double)(uint64_t)(3000.0 / v42 + 0.5) + 0.5);
  }
LABEL_78:
  if (!*(unsigned char *)(DerivedStorage + 1313) && sub_1D0C6BC48(DerivedStorage))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Init failed\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Init failed\n");
    }
    goto LABEL_80;
  }
  if (sub_1D0CF17A4(*(void *)(DerivedStorage + 1288)))
  {
LABEL_80:
    VTEncoderSessionEmitEncodedFrame();
    if (v10)
    {
      sub_1D0CC716C((void *)(v10 + 88));
      MEMORY[0x1D25F0230](v10, 0x1070C40040150F9);
    }
    goto LABEL_82;
  }
  if (sub_1D0C709FC(DerivedStorage, (uint64_t *)&v58, v10, a6))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Setup failed\n", 0xDuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Setup failed\n");
    }
    goto LABEL_80;
  }
  v56[1] = *(_OWORD *)a4;
  uint64_t v57 = *(void *)(a4 + 16);
  VTEncoderSessionEnqueuePresentationTimeStamp();
  uint64_t v47 = *(void *)(DerivedStorage + 1288);
  v56[0] = v58;
  if (*((void *)&v58 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_1D0CF1890(v47, v56, v10, v10 + 88);
  if (*((void *)&v56[0] + 1)) {
    sub_1D0C4C984(*((std::__shared_weak_count **)&v56[0] + 1));
  }
LABEL_82:
  if (*((void *)&v58 + 1)) {
    sub_1D0C4C984(*((std::__shared_weak_count **)&v58 + 1));
  }
  return 0;
}

void sub_1D0C74834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a22) {
    sub_1D0C4C984(a22);
  }
  if (a28) {
    sub_1D0C4C984(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0C74870(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4)
{
  int v5 = a3;
  unint64_t v7 = HIDWORD(a3);
  VTVideoEncoderGetCMBaseObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 1264) = a2;
  *(_DWORD *)(DerivedStorage + 1300) = v5;
  *(_DWORD *)(DerivedStorage + 1304) = v7;
  if (a4) {
    *(void *)(DerivedStorage + 1320) = CFRetain(a4);
  }
  uint64_t v9 = sub_1D0C92FFC(v5, v7, *(_DWORD *)(DerivedStorage + 8));
  if (v9)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Error setting buffer attributes\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Error setting buffer attributes\n");
    }
  }
  else
  {
    uint64_t v10 = *(void *)(DerivedStorage + 1288);
    *(void *)(v10 + 10448) = sub_1D0C74950;
    *(void *)(v10 + 10456) = DerivedStorage;
  }
  return v9;
}

uint64_t sub_1D0C74950(uint64_t a1, uint64_t a2, int a3, const void *a4, size_t a5, unsigned char *a6, uint64_t a7)
{
  CFTypeRef cf = 0;
  VTEncoderSessionDequeueDecodeTimeStamp();
  if (!a3 && a4 && a5)
  {
    uint64_t v14 = *(void *)(a1 + 1288);
    if (*(unsigned char *)(v14 + 424)) {
      *(unsigned char *)(v14 + 11012) &= CC_MD5_Update((CC_MD5_CTX *)(v14 + 10920), a4, a5);
    }
    sub_1D0C72718(a1, a4, a5, (const CMSampleTimingInfo *)(a2 + 16), a7, a6, a2, (CMSampleBufferRef *)&cf);
  }
  VTEncoderSessionEmitEncodedFrame();
  if (cf) {
    CFRelease(cf);
  }
  sub_1D0CC716C((void *)(a2 + 88));
  return MEMORY[0x1D25F0230](a2, 0x1070C40040150F9);
}

uint64_t sub_1D0C74A88(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v53 = a2;
  uint64_t v6 = *(const void **)(DerivedStorage + 1208);
  if (v6)
  {
    if (CFEqual(v6, @"debug") && dword_1EB671A40 >= 4)
    {
      unint64_t v8 = (FILE *)*MEMORY[0x1E4F143C8];
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      fprintf(v8, "SetProperty: %s\n", CStringPtr);
      uint64_t v10 = CFStringGetCStringPtr(a2, 0x8000100u);
      syslog(28, "SetProperty: %s\n", v10);
    }
  }
  if (!sub_1D0C6B578(*(void **)(DerivedStorage + 1448), (CFTypeRef *)&v53))
  {
    if (dword_1EB671A40 >= 3)
    {
      CFDictionaryRef v11 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v12 = "unrecognised property key";
      CFDictionaryRef v13 = "unrecognised property key";
      size_t v14 = 25;
      goto LABEL_29;
    }
    return 4294954396;
  }
  if (*(void *)(DerivedStorage + 1272))
  {
    if ((CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F447D0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F447E8]))
      && !CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1CFC8]))
    {
      if (dword_1EB671A40 >= 3)
      {
        CFDictionaryRef v11 = (FILE *)*MEMORY[0x1E4F143C8];
        uint64_t v12 = "Setting FrameReordering or TemporalCompression for tiles isn't supported\n";
        CFDictionaryRef v13 = "Setting FrameReordering or TemporalCompression for tiles isn't supported\n";
        size_t v14 = 73;
        goto LABEL_29;
      }
      return 4294954396;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44810]))
    {
      if (dword_1EB671A40 >= 3)
      {
        CFDictionaryRef v11 = (FILE *)*MEMORY[0x1E4F143C8];
        uint64_t v12 = "Bitrate control for tile sessions isn't supported\n";
        CFDictionaryRef v13 = "Bitrate control for tile sessions isn't supported\n";
        size_t v14 = 50;
LABEL_29:
        fwrite(v13, v14, 1uLL, v11);
        syslog(27, v12);
        return 4294954396;
      }
      return 4294954396;
    }
  }
  if (CFEqual(a2, @"InitialQP") || CFEqual(a2, @"InitialQPI")) {
    *(unsigned char *)(DerivedStorage + 156) = 1;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44AA0]))
  {
    if (!a3)
    {
      int v30 = 0;
LABEL_44:
      *(_DWORD *)(DerivedStorage + 8) = v30;
      if (*(void *)DerivedStorage) {
        CFRelease(*(CFTypeRef *)DerivedStorage);
      }
      *(void *)uint64_t DerivedStorage = 0;
      if (a3) {
        *(void *)uint64_t DerivedStorage = CFRetain(a3);
      }
      if (*(void *)(DerivedStorage + 1272)) {
        uint64_t v31 = sub_1D0C937F4(*(_DWORD *)(DerivedStorage + 8));
      }
      else {
        uint64_t v31 = sub_1D0C92FFC(*(_DWORD *)(DerivedStorage + 1300), *(_DWORD *)(DerivedStorage + 1304), *(_DWORD *)(DerivedStorage + 8));
      }
      uint64_t v20 = v31;
      if (v31 && dword_1EB671A40 >= 3)
      {
        fwrite("Error updating pixel format requirements for requested profile\n", 0x3FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Error updating pixel format requirements for requested profile\n");
      }
      return v20;
    }
    CFTypeID v15 = CFGetTypeID(a3);
    if (v15 == CFStringGetTypeID())
    {
      uint64_t v16 = 0;
      CFTypeID v17 = (CFTypeRef *)MEMORY[0x1E4F452A8];
      int v18 = &qword_1E6899A80;
      while (!CFEqual(a3, *v17))
      {
        ++v16;
        int v19 = (CFTypeRef *)*v18;
        v18 += 2;
        CFTypeID v17 = v19;
        if (v16 == 5) {
          goto LABEL_69;
        }
      }
      if (v16 != 5)
      {
        int v30 = dword_1E6899A70[4 * v16 + 2];
        goto LABEL_44;
      }
LABEL_69:
      if (dword_1EB671A40 >= 3)
      {
        double v40 = (FILE *)*MEMORY[0x1E4F143C8];
        unsigned int v41 = CFStringGetCStringPtr(a3, 0x8000100u);
        fprintf(v40, "Unsupported profile %s\n", v41);
        CFStringGetCStringPtr(a3, 0x8000100u);
        syslog(27, "Unsupported profile %s\n");
      }
      return 4294954394;
    }
    if (dword_1EB671A40 < 3) {
      return 4294954394;
    }
    CMTimeFlags v32 = (FILE *)*MEMORY[0x1E4F143C8];
    int v33 = "Profile argument not a string\n";
    int32_t v34 = "Profile argument not a string\n";
    size_t v35 = 30;
LABEL_52:
    fwrite(v34, v35, 1uLL, v32);
    syslog(27, v33, v52);
    return 4294954394;
  }
  uint64_t v22 = *MEMORY[0x1E4F44A60];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A60]))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA6432D8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EA6432D8))
    {
      qword_1EA6432D0 = v22;
      __cxa_guard_release(&qword_1EA6432D8);
    }
    CFNumberRef v23 = sub_1D0C6B578(*(void **)(DerivedStorage + 1448), (CFTypeRef *)&qword_1EA6432D0);
    if (v23)
    {
      CFDictionaryRef v24 = (CFTypeRef *)v23[4];
      CFTypeID v25 = sub_1D0C6B578(*(void **)(DerivedStorage + 1448), (CFTypeRef *)&qword_1EA6432D0);
      if (v25)
      {
        CMTimeEpoch v26 = v25[3];
        if (v26 != (uint64_t *)CFDictionaryGetTypeID())
        {
          uint64_t v20 = 4294954385;
          goto LABEL_100;
        }
        if (!a3)
        {
          CFTypeRef v29 = *v24;
          if (*v24)
          {
            CFRelease(v29);
            CFTypeRef v29 = 0;
          }
LABEL_78:
          *CFDictionaryRef v24 = v29;
          uint64_t v20 = *(void *)(DerivedStorage + 56);
          if (!v20)
          {
LABEL_103:
            *(void *)(DerivedStorage + 64) = 0x100000001;
            return v20;
          }
          CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 56), (const void *)*MEMORY[0x1E4F24B90]);
          uint64_t v43 = CFDictionaryGetValue((CFDictionaryRef)v20, (const void *)*MEMORY[0x1E4F24BA0]);
          if (Value)
          {
            uint64_t v44 = v43;
            CFTypeID TypeID = CFNumberGetTypeID();
            if (TypeID == CFGetTypeID(Value))
            {
              if (v44)
              {
                CFTypeID v46 = CFNumberGetTypeID();
                if (v46 == CFGetTypeID(v44))
                {
                  uint64_t valuePtr = 0;
                  CFTypeID v47 = CFGetTypeID(Value);
                  if (v47 == CFNumberGetTypeID()) {
                    CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, (char *)&valuePtr + 4);
                  }
                  CFTypeID v48 = CFGetTypeID(v44);
                  if (v48 == CFNumberGetTypeID())
                  {
                    CFNumberGetValue((CFNumberRef)v44, kCFNumberIntType, &valuePtr);
                    if (SHIDWORD(valuePtr) >= 1)
                    {
                      int v49 = valuePtr;
                      if ((int)valuePtr >= 1)
                      {
                        unsigned int v50 = HIDWORD(valuePtr);
                        unsigned int v51 = valuePtr;
                        do
                        {
                          if ((int)v50 <= (int)v51) {
                            v51 %= v50;
                          }
                          else {
                            v50 %= v51;
                          }
                        }
                        while (v50 && v51);
                        uint64_t v20 = 0;
                        if (!v50) {
                          unsigned int v50 = v51;
                        }
                        *(_DWORD *)(DerivedStorage + 64) = SHIDWORD(valuePtr) / (int)v50;
                        *(_DWORD *)(DerivedStorage + 68) = v49 / (int)v50;
                        return v20;
                      }
                    }
                  }
                }
              }
            }
          }
          if (dword_1EB671A40 >= 3)
          {
            fwrite("Bad PASP\n", 9uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(27, "Bad PASP\n");
          }
          uint64_t v20 = 4294954394;
LABEL_100:
          if (*v24) {
            CFRelease(*v24);
          }
          *CFDictionaryRef v24 = 0;
          goto LABEL_103;
        }
        CGFloat v27 = sub_1D0C6B578(*(void **)(DerivedStorage + 1448), (CFTypeRef *)&qword_1EA6432D0);
        if (v27)
        {
          CMTimeValue v28 = v27[3];
          if (v28 != (uint64_t *)CFGetTypeID(a3))
          {
            if (dword_1EB671A40 < 3) {
              return 4294954394;
            }
            CMTimeFlags v32 = (FILE *)*MEMORY[0x1E4F143C8];
            int v33 = "(PASP): bad\n";
            int32_t v34 = "(PASP): bad\n";
            size_t v35 = 12;
            goto LABEL_52;
          }
          if (*v24) {
            CFRelease(*v24);
          }
          CFTypeRef v29 = CFRetain(a3);
          goto LABEL_78;
        }
      }
    }
LABEL_106:
    sub_1D0C6B674();
  }
  if (CFEqual(a2, @"NegotiationDetails"))
  {
    int32_t v36 = sub_1D0C6B578(*(void **)(DerivedStorage + 1448), (CFTypeRef *)&off_1E6899AD0);
    if (!v36) {
      goto LABEL_106;
    }
    CFStringRef v37 = (const __CFString *)v36[4];
    int v38 = sub_1D0C6B578(*(void **)(DerivedStorage + 1448), (CFTypeRef *)&off_1E6899AD0);
    if (!v38) {
      goto LABEL_106;
    }
    int v39 = v38[3];
    if (v39 == (uint64_t *)CFStringGetTypeID())
    {
      uint64_t v20 = sub_1D0C6B328(DerivedStorage, @"NegotiationDetails", a3);
      if (v20)
      {
LABEL_60:
        if (v37) {
          CFRelease(v37);
        }
        bzero((void *)(DerivedStorage + 192), 0x3E9uLL);
        return v20;
      }
      if (CFStringGetCString(v37, (char *)(DerivedStorage + 192), 1001, 0)) {
        return v20;
      }
    }
    uint64_t v20 = 4294954385;
    goto LABEL_60;
  }
  return sub_1D0C6B328(DerivedStorage, a2, a3);
}

uint64_t sub_1D0C751EC(uint64_t a1, const __CFString *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v16 = a2;
  unint64_t v7 = *(const void **)(DerivedStorage + 1208);
  if (v7)
  {
    if (CFEqual(v7, @"debug") && dword_1EB671A40 >= 4)
    {
      uint64_t v9 = (FILE *)*MEMORY[0x1E4F143C8];
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      fprintf(v9, "CopyProperty: %s\n", CStringPtr);
      CFDictionaryRef v11 = CFStringGetCStringPtr(a2, 0x8000100u);
      syslog(28, "CopyProperty: %s\n", v11);
    }
  }
  if (sub_1D0C6B578(*(void **)(DerivedStorage + 1448), (CFTypeRef *)&v16))
  {
    uint64_t v12 = *MEMORY[0x1E4F44A60];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F44A60]))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA6432E8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EA6432E8))
      {
        qword_1EA6432E0 = v12;
        __cxa_guard_release(&qword_1EA6432E8);
      }
      *a4 = 0;
      if (*(_DWORD *)(DerivedStorage + 64) == 1 && *(_DWORD *)(DerivedStorage + 68) == 1) {
        return 0;
      }
      CFStringRef v14 = (const __CFString *)qword_1EA6432E0;
      uint64_t v15 = DerivedStorage;
    }
    else
    {
      uint64_t v15 = DerivedStorage;
      CFStringRef v14 = a2;
    }
    return sub_1D0C6B704(v15, v14, a4);
  }
  else
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("unrecognised property key", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "unrecognised property key");
    }
    return 4294954396;
  }
}

__CFString *sub_1D0C753C0(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<LRPVideoEncoder %p>", a1);
  return Mutable;
}

void sub_1D0C75418()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    if (!*(unsigned char *)(DerivedStorage + 1312))
    {
      uint64_t v1 = CMBaseObjectGetDerivedStorage();
      if (v1)
      {
        sub_1D0C6AC60(v1);
      }
    }
  }
}

uint64_t sub_1D0C75470()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage) {
    sub_1D0C6AC60(DerivedStorage);
  }
  return 0;
}

uint64_t sub_1D0C75498(uint64_t a1, __CVBuffer *a2, CVPixelBufferRef pixelBuffer)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  OSType v7 = CVPixelBufferGetPixelFormatType(a2);
  OSType v8 = v7;
  if (v7 != 1278226736 && v7 != 2016686640 && v7 != 2019963440)
  {
    CVBufferGetAttachment(a2, @"VPImageBufferLSBAligned", 0);
    return 4294954394;
  }
  CFTypeRef Attachment = CVBufferGetAttachment(a2, @"VPImageBufferLSBAligned", 0);
  if (PixelFormatType != 875704422 && PixelFormatType != 1278226488 && PixelFormatType != 875704438) {
    return 4294954394;
  }
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  size_t Width = CVPixelBufferGetWidth(a2);
  size_t v11 = CVPixelBufferGetWidth(pixelBuffer);
  if (v11 < Width) {
    size_t Width = v11;
  }
  size_t Height = CVPixelBufferGetHeight(a2);
  size_t v13 = CVPixelBufferGetHeight(pixelBuffer);
  if (v13 < Height) {
    size_t Height = v13;
  }
  v18[0] = CVPixelBufferGetBytesPerRowOfPlane(a2, 0) >> 1;
  v18[1] = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL) >> 1;
  v17[0] = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v17[1] = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v16[0] = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  v16[1] = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  v15[0] = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  v15[1] = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  if (v8 == 1278226736 || PixelFormatType == 1278226488) {
    sub_1D0C7572C(Width, Height, Attachment != 0, v18, v17, v16, v15, (int *)a1);
  }
  else {
    (*(void (**)(size_t, size_t, BOOL, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(a1 + 8))(Width, Height, Attachment != 0, v18, v17, v16, v15, a1);
  }
  *(_DWORD *)a1 &= 0xFFFu;
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  return 0;
}

size_t sub_1D0C7572C(size_t __len, unint64_t a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  size_t v10 = __len;
  int v11 = *a8;
  if (a3) {
    char v12 = 0;
  }
  else {
    char v12 = 6;
  }
  if (a5[1])
  {
    if (a2 >= 2)
    {
      uint64_t v13 = 0;
      LOWORD(__len) = v11 + a2 * __len;
      unint64_t v14 = a2 >> 1;
      int v15 = *a8;
      do
      {
        int v16 = __len & 0xFFF;
        if (v10)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *a7;
          do
          {
            unsigned int v19 = *(unsigned __int16 *)(*a5 + 2 * v17) >> v12;
            if (v19 <= 0x43) {
              uint64_t v20 = (char *)&unk_1D0DAD21B;
            }
            else {
              uint64_t v20 = (char *)&unk_1D0DAC214;
            }
            int v21 = (int)(v19 + v20[v15]) >> 2;
            if (v21 >= 255) {
              int v21 = 255;
            }
            *(unsigned char *)(v18 + v17) = v21 & ~(v21 >> 31);
            unsigned int v22 = *(unsigned __int16 *)(a5[1] + 2 * v17) >> v12;
            if (*(unsigned __int8 *)(*a7 + v17) < 0x12u) {
              goto LABEL_18;
            }
            int v23 = v22 - 512;
            if (v22 < 0x200) {
              int v23 = 512 - v22;
            }
            CFDictionaryRef v24 = (char *)&unk_1D0DAC214;
            if (v23 <= 3) {
LABEL_18:
            }
              CFDictionaryRef v24 = (char *)&unk_1D0DAD21B;
            int v15 = ((_WORD)v15 + 1) & 0xFFF;
            int v25 = (int)(v22 + v24[v16]) >> 2;
            if (v25 >= 255) {
              int v25 = 255;
            }
            *(unsigned char *)(a7[1] + v17) = v25 & ~(v25 >> 31);
            uint64_t v18 = *a7;
            *a8 += (*(unsigned char *)(a7[1] + v17) & 1) + (*(unsigned char *)(*a7 + v17) & 1);
            ++v17;
            int v16 = ((_WORD)v16 + 1) & 0xFFF;
          }
          while (v10 != v17);
        }
        uint64_t v26 = *a4;
        *a5 += 2 * *a4;
        uint64_t v27 = *a6;
        uint64_t v28 = *a7 + *a6;
        *a7 = v28;
        if (v10)
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            unsigned int v30 = *(unsigned __int16 *)(*a5 + 2 * i) >> v12;
            if (v30 <= 0x43) {
              uint64_t v31 = (char *)&unk_1D0DAD21B;
            }
            else {
              uint64_t v31 = (char *)&unk_1D0DAC214;
            }
            int v32 = (int)(v30 + v31[v15]) >> 2;
            int v15 = ((_WORD)v15 + 1) & 0xFFF;
            if (v32 >= 255) {
              int v32 = 255;
            }
            *(unsigned char *)(v28 + i) = v32 & ~(v32 >> 31);
            uint64_t v28 = *a7;
            *a8 += *(unsigned char *)(*a7 + i) & 1;
          }
          uint64_t v26 = *a4;
          uint64_t v27 = *a6;
        }
        int v33 = dword_1D0DA81F8[((_WORD)v11 + (_WORD)v13) & 0xFFF];
        __int16 v34 = v33 + v15;
        __leunsigned int n = (v33 + v16);
        uint64_t v35 = *a5 + 2 * v26;
        uint64_t v36 = a5[1] + 2 * a4[1];
        int v15 = v34 & 0xFFF;
        ++v13;
        *a5 = v35;
        a5[1] = v36;
        uint64_t v37 = *a7 + v27;
        uint64_t v38 = a7[1] + a6[1];
        *a7 = v37;
        a7[1] = v38;
      }
      while (v13 != v14);
    }
  }
  else if (a2 >= 2)
  {
    uint64_t v39 = 0;
    if (a2 >> 1 <= 1) {
      uint64_t v40 = 1;
    }
    else {
      uint64_t v40 = a2 >> 1;
    }
    int v41 = *a8;
    do
    {
      if (v10)
      {
        uint64_t v42 = 0;
        uint64_t v43 = *a7;
        do
        {
          unsigned int v44 = *(unsigned __int16 *)(*a5 + 2 * v42) >> v12;
          if (v44 <= 0x43) {
            double v45 = (char *)&unk_1D0DAD21B;
          }
          else {
            double v45 = (char *)&unk_1D0DAC214;
          }
          int v46 = (int)(v44 + v45[v41]) >> 2;
          int v41 = ((_WORD)v41 + 1) & 0xFFF;
          if (v46 >= 255) {
            int v46 = 255;
          }
          *(unsigned char *)(v43 + v42) = v46 & ~(v46 >> 31);
          uint64_t v43 = *a7;
          *a8 += *(unsigned char *)(*a7 + v42++) & 1;
        }
        while (v10 != v42);
      }
      uint64_t v47 = *a4;
      *a5 += 2 * *a4;
      uint64_t v48 = *a6;
      uint64_t v49 = *a7 + *a6;
      *a7 = v49;
      if (v10)
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          unsigned int v51 = *(unsigned __int16 *)(*a5 + 2 * j) >> v12;
          if (v51 <= 0x43) {
            uint64_t v52 = (char *)&unk_1D0DAD21B;
          }
          else {
            uint64_t v52 = (char *)&unk_1D0DAC214;
          }
          int v53 = (int)(v51 + v52[v41]) >> 2;
          int v41 = ((_WORD)v41 + 1) & 0xFFF;
          if (v53 >= 255) {
            int v53 = 255;
          }
          *(unsigned char *)(v49 + j) = v53 & ~(v53 >> 31);
          uint64_t v49 = *a7;
          *a8 += *(unsigned char *)(*a7 + j) & 1;
        }
        uint64_t v47 = *a4;
        uint64_t v48 = *a6;
      }
      int v41 = ((unsigned __int16)dword_1D0DA81F8[((_WORD)v11 + (_WORD)v39++) & 0xFFF] + (_WORD)v41) & 0xFFF;
      *a5 += 2 * v47;
      *a7 += v48;
    }
    while (v39 != v40);
    __leunsigned int n = a7[1];
    if (__len)
    {
      do
      {
        memset((void *)__len, 128, v10);
        __leunsigned int n = a7[1] + a6[1];
        a7[1] = __len;
        --v40;
      }
      while (v40);
    }
  }
  return __len;
}

uint64_t sub_1D0C75AF0(char *a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = &a1[a5];
  }
  else
  {
    size_t v10 = (a2 + 2);
    bzero(a1, v10);
    a1[v10] = 1;
    uint64_t v9 = &a1[v10 + 1];
  }
  *uint64_t v9 = *a3;
  int v11 = (int8x16_t *)(a3 + 2);
  char v12 = (int8x16_t *)(v9 + 2);
  v9[1] = a3[1];
  unint64_t v13 = a4 - 2;
  if ((unint64_t)(a4 - 2) < 0x10) {
    goto LABEL_22;
  }
  while (1)
  {
    int8x16_t v14 = *v11;
    *char v12 = *v11;
    if (!vaddvq_s32((int32x4_t)vceqzq_s8(v14)))
    {
      ++v12;
      ++v11;
      v13 -= 16;
      goto LABEL_21;
    }
    uint64_t v15 = 0;
    while (v12->u8[v15++])
      ;
    char v12 = (int8x16_t *)((char *)v12 + v15);
    unint64_t v17 = v13 - v15;
    if (!v17) {
      break;
    }
    uint64_t v18 = &v11->u8[v15];
    int v19 = 1;
    while (v19 != 2)
    {
      int v19 = 2;
LABEL_14:
      int v21 = *v18;
      v12->i8[0] = v21;
      char v12 = (int8x16_t *)((char *)v12 + 1);
      if (v21)
      {
        int v11 = (int8x16_t *)(v18 + 1);
        goto LABEL_20;
      }
      ++v18;
      if (!--v17) {
        goto LABEL_32;
      }
    }
    unsigned int v20 = *v18;
    if (v20 < 4)
    {
      v12->i8[0] = 3;
      char v12 = (int8x16_t *)((char *)v12 + 1);
      int v19 = 1;
      goto LABEL_14;
    }
    int v11 = (int8x16_t *)(v18 + 1);
    v12->i8[0] = v20;
    char v12 = (int8x16_t *)((char *)v12 + 1);
LABEL_20:
    unint64_t v13 = v17 - 1;
LABEL_21:
    if (v13 <= 0xF)
    {
LABEL_22:
      if (v13)
      {
        int v22 = 0;
        do
        {
          unsigned int v23 = v11->u8[0];
          if (v22 == 2)
          {
            if (v23 > 3)
            {
              int v22 = 2;
            }
            else
            {
              int v22 = 0;
              v12->i8[0] = 3;
              char v12 = (int8x16_t *)((char *)v12 + 1);
              unsigned int v23 = v11->u8[0];
            }
          }
          if (v23) {
            int v22 = 0;
          }
          else {
            ++v22;
          }
          int v11 = (int8x16_t *)((char *)v11 + 1);
          v12->i8[0] = v23;
          char v12 = (int8x16_t *)((char *)v12 + 1);
          --v13;
        }
        while (v13);
      }
      break;
    }
  }
LABEL_32:
  if (a5)
  {
    unsigned int v24 = v12 - a1 - a5;
    switch(a5)
    {
      case 4:
        *(_DWORD *)a1 = bswap32(v24);
        break;
      case 2:
        *(_WORD *)a1 = bswap32(v24) >> 16;
        break;
      case 1:
        *a1 = v24;
        break;
    }
  }
  return (char *)v12 - a1;
}

uint64_t sub_1D0C75CC0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 531)) {
    char v1 = 2;
  }
  else {
    char v1 = 3;
  }
  int v2 = *(_DWORD *)(a1 + 524);
  if (v2 < 1)
  {
    unint64_t v4 = 0;
LABEL_20:
    uint64_t v18 = 0;
    goto LABEL_21;
  }
  int v3 = 0;
  unint64_t v4 = 0;
  int v5 = *(int *)(a1 + 520) >> v1;
  uint64_t v6 = *(void *)(a1 + 400);
  do
  {
    int8x16_t v7 = 0uLL;
    if (v5 >= 4)
    {
      uint64_t v8 = 0;
      int8x16_t v9 = 0uLL;
      do
      {
        int8x16_t v7 = veorq_s8(*(int8x16_t *)(v6 + v8), v7);
        int8x16_t v9 = veorq_s8(*(int8x16_t *)(v6 + v8 + 16), v9);
        v8 += 32;
      }
      while (32 * (v5 >> 2) != v8);
      int8x16_t v7 = veorq_s8(v9, v7);
    }
    v4 ^= *(void *)&veor_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
    ++v3;
    v6 += 8 * (*(uint64_t *)(a1 + 416) >> v1);
  }
  while (v3 != v2);
  if (v2 < 2) {
    goto LABEL_20;
  }
  int v10 = 0;
  uint64_t v11 = *(uint64_t *)(a1 + 424) >> v1;
  unsigned int v12 = v2 >> 1;
  uint64_t v13 = *(void *)(a1 + 408);
  uint64_t v14 = 8 * v11;
  do
  {
    int8x16_t v15 = 0uLL;
    if (v5 >= 4)
    {
      uint64_t v16 = 0;
      int8x16_t v17 = 0uLL;
      do
      {
        int8x16_t v15 = veorq_s8(*(int8x16_t *)(v13 + v16), v15);
        int8x16_t v17 = veorq_s8(*(int8x16_t *)(v13 + v16 + 16), v17);
        v16 += 32;
      }
      while (32 * (v5 >> 2) != v16);
      int8x16_t v15 = veorq_s8(v17, v15);
    }
    ++v10;
    v13 += v14;
  }
  while (v10 != v12);
  uint64_t v18 = *(void *)&veor_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)) ^ v4;
LABEL_21:
  unsigned int v19 = ((v4 ^ HIDWORD(v4)) >> 16) ^ (unsigned __int16)(v4 ^ WORD2(v4));
  return (((v18 ^ HIDWORD(v18)) >> 16) ^ (unsigned __int16)(v18 ^ WORD2(v18)) ^ (unsigned __int16)((((v18 ^ HIDWORD(v18)) >> 16) ^ (unsigned __int16)(v18 ^ WORD2(v18))) << 8)) & 0xFF00 | (unsigned __int16)(v19 ^ (unsigned __int16)(v19 >> 8));
}

uint8x16_t *sub_1D0C75E20(uint8x16_t *result, uint64_t a2, long long *a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 2;
  int v10 = a7 + 1;
  do
  {
    uint8x16_t v11 = _X8[-2];
    uint8x16_t v12 = _X8[-1];
    uint8x16_t v13 = *_X8;
    uint8x16_t v14 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v14.i8[15];
    _X8[-2] = vsqaddq_u8(v11, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v11, 3uLL)));
    _X8[-1] = vsqaddq_u8(v12, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v12, 3uLL)));
    *_X8 = vsqaddq_u8(v13, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v13, 3uLL)));
    _X8[1] = vsqaddq_u8(v14, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v14, 3uLL)));
    _X8 = (uint8x16_t *)((char *)_X8 + a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C75E88(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int8 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D30BB0((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u8[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u8[15];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = vdupq_n_s8(~a4);
  int8x16_t v10 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int8x16_t v11 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0E0);
  int8x16_t v13 = *_X5;
  int8x16_t v12 = _X5[1];
  int8x16_t v14 = _X5[2];
  int8x16_t v15 = _X5[3];
  i8 = _X5[4].i8;
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v22 = *result;
  int8x16_t v23 = result[1];
  int8x16_t v24 = result[2];
  int8x16_t v25 = result[3];
  uint64_t v26 = result[4].i8;
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v28 = vld1q_dup_s8(i8);
  *a5 = v25.u8[15];
  CFTypeRef v29 = (char *)(a5 + 1);
  signed int v30 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v31 = vceqzq_s8(v11);
  int8x16_t v32 = vceqzq_s8(v10);
  v33.i64[0] = 0x202020202020202;
  v33.i64[1] = 0x202020202020202;
  v34.i64[0] = 0x303030303030303;
  v34.i64[1] = 0x303030303030303;
  uint64_t v35 = v29;
  do
  {
    uint8x16_t v36 = (uint8x16_t)vextq_s8(v14, v15, 1uLL);
    int8x16_t v37 = v25;
    uint8x16_t v38 = (uint8x16_t)v24;
    uint8x16_t v39 = (uint8x16_t)v23;
    uint8x16_t v40 = (uint8x16_t)vextq_s8(v13, v12, 1uLL);
    int8x16_t v13 = v22;
    _X11 = &v26[a2];
    int8x16_t v22 = *(int8x16_t *)&v26[a2 - 64];
    int8x16_t v23 = *(int8x16_t *)&v26[a2 - 48];
    int8x16_t v24 = *(int8x16_t *)&v26[a2 - 32];
    int8x16_t v25 = *(int8x16_t *)&v26[a2 - 16];
    __asm { PRFM            #0, [X11] }
    int8x16_t v43 = vld1q_dup_s8(v35++);
    *CFTypeRef v29 = v25.i8[15];
    uint8x16_t v44 = (uint8x16_t)vextq_s8(v15, v28, 1uLL);
    uint8x16_t v45 = (uint8x16_t)vextq_s8(v12, v14, 1uLL);
    uint8x16_t v46 = (uint8x16_t)vextq_s8(v43, v22, 0xFuLL);
    uint8x16_t v47 = (uint8x16_t)vextq_s8(v22, v23, 0xFuLL);
    uint8x16_t v48 = (uint8x16_t)vextq_s8(v23, v24, 0xFuLL);
    uint8x16_t v49 = (uint8x16_t)vextq_s8(v24, v25, 0xFuLL);
    int8x16_t v50 = (int8x16_t)vsqaddq_u8((uint8x16_t)v13, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v13, v40), v34, v33), (int8x16_t)vcgtq_u8(v40, (uint8x16_t)v13)), (int8x16_t)vcgtq_u8((uint8x16_t)v13, v46)), (int8x16_t)vcgtq_u8(v46, (uint8x16_t)v13))));
    int8x16_t v51 = vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v39, v45), v34, v33), (int8x16_t)vcgtq_u8(v45, v39)), (int8x16_t)vcgtq_u8(v39, v47)), (int8x16_t)vcgtq_u8(v47, v39)));
    int8x16_t v12 = (int8x16_t)v39;
    uint8x16_t v52 = vsqaddq_u8(v39, v51);
    int8x16_t v14 = (int8x16_t)v38;
    int8x16_t v53 = vbslq_s8(v31, (int8x16_t)vsqaddq_u8((uint8x16_t)v37, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v37, v44), v34, v33), (int8x16_t)vcgtq_u8(v44, (uint8x16_t)v37)), (int8x16_t)vcgtq_u8((uint8x16_t)v37, v49)), (int8x16_t)vcgtq_u8(v49, (uint8x16_t)v37)))), v37);
    *((int8x16_t *)v26 - 4) = vbslq_s8(v32, v50, v13);
    *((uint8x16_t *)v26 - 3) = v52;
    int8x16_t v28 = vld1q_dup_s8(v26);
    --v30;
    *((uint8x16_t *)v26 - 2) = vsqaddq_u8(v38, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v38, v36), v34, v33), (int8x16_t)vcgtq_u8(v36, v38)), (int8x16_t)vcgtq_u8(v38, v48)), (int8x16_t)vcgtq_u8(v48, v38))));
    *((int8x16_t *)v26 - 1) = v53;
    v26 += a2;
    CFTypeRef v29 = (char *)v35;
    int8x16_t v15 = v37;
  }
  while (v30 > 1);
  return result;
}

int8x16_t *sub_1D0C7608C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, char *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D30FDC(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int8 *)_X5, 0x40uLL, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v11 = &_X5[-1].i8[15];
    int8x16_t v10 = vld1q_dup_s8(v11);
  }
  else
  {
    int8x16_t v9 = a5;
    int8x16_t v10 = vld1q_dup_s8(v9++);
    *a5 = result[3].i8[15];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + a2);
    int v7 = a7 - 1;
    a5 = (char *)v9;
  }
  unsigned int v12 = v7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v12 + 1] = result[3].i8[(int)(v12 + 1) * a2 + 15];
  int8x16_t v13 = vdupq_n_s8(~a4);
  int8x16_t v14 = vandq_s8(v13, (int8x16_t)xmmword_1D0D7F0D0);
  int8x16_t v15 = vandq_s8(v13, (int8x16_t)xmmword_1D0D7F0E0);
  int8x16_t v16 = *_X5;
  int8x16_t v17 = _X5[1];
  int8x16_t v19 = _X5[2];
  int8x16_t v18 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v25 = *result;
  int8x16_t v26 = result[1];
  uint64_t v27 = result + 2;
  int8x16_t v28 = result[2];
  int8x16_t v29 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v31 = v12 + 2;
  int8x16_t v32 = vceqzq_s8(v15);
  int8x16_t v33 = vceqzq_s8(v14);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0x303030303030303;
  v35.i64[1] = 0x303030303030303;
  uint8x16_t v36 = a5;
  do
  {
    uint8x16_t v37 = (uint8x16_t)vextq_s8(v19, v18, 0xFuLL);
    int8x16_t v18 = v29;
    uint8x16_t v38 = (uint8x16_t)v28;
    uint8x16_t v39 = (uint8x16_t)v26;
    uint8x16_t v40 = (uint8x16_t)vextq_s8(v10, v16, 0xFuLL);
    uint8x16_t v41 = (uint8x16_t)vextq_s8(v16, v17, 0xFuLL);
    int8x16_t v16 = v25;
    _X12 = &v27->i8[a2];
    int8x16_t v25 = *(int8x16_t *)((char *)&v27[-2] + a2);
    int8x16_t v26 = *(int8x16_t *)((char *)&v27[-1] + a2);
    int8x16_t v28 = *(int8x16_t *)((char *)v27 + a2);
    int8x16_t v29 = *(int8x16_t *)((char *)&v27[1] + a2);
    __asm { PRFM            #0, [X12,#0x20] }
    v10.i32[0] = v27[-2].u8[a2 + ((32 * a4) & 0x40)];
    uint8x16_t v44 = (uint8x16_t)vextq_s8(v17, v19, 0xFuLL);
    uint8x16_t v45 = (uint8x16_t)vextq_s8(v25, v26, 1uLL);
    uint8x16_t v46 = (uint8x16_t)vextq_s8(v26, v28, 1uLL);
    uint8x16_t v47 = (uint8x16_t)vextq_s8(v28, v29, 1uLL);
    uint8x16_t v48 = (uint8x16_t)vextq_s8(v29, v10, 1uLL);
    int8x16_t v49 = (int8x16_t)vsqaddq_u8((uint8x16_t)v16, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v16, v40), v35, v34), (int8x16_t)vcgtq_u8(v40, (uint8x16_t)v16)), (int8x16_t)vcgtq_u8((uint8x16_t)v16, v45)), (int8x16_t)vcgtq_u8(v45, (uint8x16_t)v16))));
    int8x16_t v17 = (int8x16_t)v39;
    uint8x16_t v50 = vsqaddq_u8(v39, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v39, v41), v35, v34), (int8x16_t)vcgtq_u8(v41, v39)), (int8x16_t)vcgtq_u8(v39, v46)), (int8x16_t)vcgtq_u8(v46, v39))));
    int8x16_t v51 = vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v38, v44), v35, v34), (int8x16_t)vcgtq_u8(v44, v38)), (int8x16_t)vcgtq_u8(v38, v47)), (int8x16_t)vcgtq_u8(v47, v38)));
    int8x16_t v19 = (int8x16_t)v38;
    v27[-2] = vbslq_s8(v33, v49, v16);
    v27[-1] = (int8x16_t)v50;
    *(uint8x16_t *)uint64_t v27 = vsqaddq_u8(v38, v51);
    v27[1] = vbslq_s8(v32, (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v37), v35, v34), (int8x16_t)vcgtq_u8(v37, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v48)), (int8x16_t)vcgtq_u8(v48, (uint8x16_t)v18)))), v18);
    int8x16_t v10 = vld1q_dup_s8(v36++);
    --v31;
    uint64_t v27 = (int8x16_t *)((char *)v27 + a2);
    *a5 = v18.i8[15];
    a5 = (char *)v36;
  }
  while (v31 > 1);
  return result;
}

uint8x16_t *sub_1D0C762B0(uint8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned char *a5, uint8x16_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i8[15];
    _X5 = result;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i8[(v8 + 1) * a2 + 15];
  uint8x16_t v10 = *_X5;
  uint8x16_t v9 = _X5[1];
  uint8x16_t v11 = _X5[2];
  uint8x16_t v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint8x16_t v18 = *result;
  uint8x16_t v19 = result[1];
  uint8x16_t v20 = result[2];
  uint8x16_t v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v23 = v8 + 2;
  v24.i64[0] = 0x202020202020202;
  v24.i64[1] = 0x202020202020202;
  v25.i64[0] = 0x303030303030303;
  v25.i64[1] = 0x303030303030303;
  do
  {
    uint8x16_t v26 = v18;
    uint8x16_t v27 = v19;
    uint8x16_t v28 = v20;
    uint8x16_t v29 = v21;
    _X9 = (uint64_t)result->i64 + a2;
    uint8x16_t v18 = *(uint8x16_t *)((char *)result + a2);
    uint8x16_t v19 = *(uint8x16_t *)((char *)&result[1] + a2);
    uint8x16_t v20 = *(uint8x16_t *)((char *)&result[2] + a2);
    uint8x16_t v21 = *(uint8x16_t *)((char *)&result[3] + a2);
    __asm { PRFM            #0, [X9,#0x40] }
    *a5++ = v29.i8[15];
    int8x16_t v32 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v26, v10), v25, v24), (int8x16_t)vcgtq_u8(v10, v26)), (int8x16_t)vcgtq_u8(v26, v18)), (int8x16_t)vcgtq_u8(v18, v26)));
    uint8x16_t v10 = v26;
    uint8x16_t v33 = vsqaddq_u8(v26, v32);
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v27, v9), v25, v24), (int8x16_t)vcgtq_u8(v9, v27)), (int8x16_t)vcgtq_u8(v27, v19)), (int8x16_t)vcgtq_u8(v19, v27)));
    uint8x16_t v9 = v27;
    uint8x16_t v35 = vsqaddq_u8(v27, v34);
    int8x16_t v36 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v28, v11), v25, v24), (int8x16_t)vcgtq_u8(v11, v28)), (int8x16_t)vcgtq_u8(v28, v20)), (int8x16_t)vcgtq_u8(v20, v28)));
    uint8x16_t v11 = v28;
    uint8x16_t v37 = vsqaddq_u8(v28, v36);
    int8x16_t v38 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v29, v12), v25, v24), (int8x16_t)vcgtq_u8(v12, v29)), (int8x16_t)vcgtq_u8(v29, v21)), (int8x16_t)vcgtq_u8(v21, v29)));
    uint8x16_t v12 = v29;
    *uint64_t result = v33;
    result[1] = v35;
    result[2] = v37;
    result[3] = vsqaddq_u8(v29, v38);
    --v23;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
  }
  while (v23 > 1);
  return result;
}

int8x16_t *sub_1D0C76400(int8x16_t *result, uint64_t a2, int8x16_t *a3, int a4, char *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = vdupq_n_s8(~a4);
  int8x16_t v10 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = vceqzq_s8(vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0E0));
  int8x16_t v13 = vceqzq_s8(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0x303030303030303;
  v15.i64[1] = 0x303030303030303;
  int8x16_t v16 = a5;
  do
  {
    int8x16_t v18 = *result;
    int8x16_t v17 = result[1];
    int8x16_t v19 = result[2];
    int8x16_t v20 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v26 = vld1q_dup_s8(v16++);
    *a5 = v20.i8[15];
    v7.i8[0] = result->i8[(32 * a4) & 0x40];
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, v18, 0xFuLL);
    uint8x16_t v28 = (uint8x16_t)vextq_s8(v18, v17, 0xFuLL);
    uint8x16_t v29 = (uint8x16_t)vextq_s8(v17, v19, 0xFuLL);
    uint8x16_t v30 = (uint8x16_t)vextq_s8(v19, v20, 0xFuLL);
    uint8x16_t v31 = (uint8x16_t)vextq_s8(v18, v17, 1uLL);
    uint8x16_t v32 = (uint8x16_t)vextq_s8(v17, v19, 1uLL);
    uint8x16_t v33 = (uint8x16_t)vextq_s8(v19, v20, 1uLL);
    uint8x16_t v34 = (uint8x16_t)vextq_s8(v20, v7, 1uLL);
    int8x16_t v7 = (int8x16_t)vsqaddq_u8((uint8x16_t)v20, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v20, v30), v15, v14), (int8x16_t)vcgtq_u8(v30, (uint8x16_t)v20)), (int8x16_t)vcgtq_u8((uint8x16_t)v20, v34)), (int8x16_t)vcgtq_u8(v34, (uint8x16_t)v20))));
    *uint64_t result = vbslq_s8(v13, (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v31), v15, v14), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v27)), (int8x16_t)vcgtq_u8(v27, (uint8x16_t)v18)))), v18);
    result[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v28), v15, v14), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v32)), (int8x16_t)vcgtq_u8(v32, (uint8x16_t)v17))));
    result[2] = (int8x16_t)vsqaddq_u8((uint8x16_t)v19, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v19, v29), v15, v14), (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v19)), (int8x16_t)vcgtq_u8((uint8x16_t)v19, v33)), (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v19))));
    result[3] = vbslq_s8(v12, v7, v20);
    uint64_t result = (int8x16_t *)((char *)result + a2);
    --v11;
    a5 = (char *)v16;
  }
  while (v11 > 1);
  return result;
}

uint8x16_t *sub_1D0C7654C(uint8x16_t *result, uint64_t a2, long long *a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 1;
  int v10 = a7 + 1;
  do
  {
    uint8x16_t v11 = _X8[-1];
    uint8x16_t v12 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIBYTE(*(unsigned long long *)_X8);
    _X8[-1] = vsqaddq_u8(v11, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v11, 3uLL)));
    *_X8 = vsqaddq_u8(v12, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v12, 3uLL)));
    _X8 = (uint8x16_t *)((char *)_X8 + a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C76594(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int8 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D30BB0((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u8[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u8[15];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = vdupq_n_s8(~a4);
  int8x16_t v10 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int8x16_t v11 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0E0);
  int8x16_t v12 = *_X5;
  int8x16_t v13 = _X5[1];
  i8 = _X5[2].i8;
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v20 = *result;
  int8x16_t v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v23 = vld1q_dup_s8(i8);
  *a5 = v21.u8[15];
  int8x16_t v24 = (char *)(a5 + 1);
  signed int v25 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v26 = vceqzq_s8(v11);
  int8x16_t v27 = vceqzq_s8(v10);
  v28.i64[0] = 0x202020202020202;
  v28.i64[1] = 0x202020202020202;
  v29.i64[0] = 0x303030303030303;
  v29.i64[1] = 0x303030303030303;
  uint8x16_t v30 = v24;
  do
  {
    uint8x16_t v31 = (uint8x16_t)vextq_s8(v12, v13, 1uLL);
    uint8x16_t v32 = (uint8x16_t)vextq_s8(v13, v23, 1uLL);
    int8x16_t v33 = v21;
    int8x16_t v34 = v20;
    _X10 = &result->i8[a2];
    int8x16_t v20 = *(int8x16_t *)((char *)result + a2);
    int8x16_t v21 = *(int8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X10,#0x20] }
    int8x16_t v37 = vld1q_dup_s8(v30++);
    *int8x16_t v24 = v21.i8[15];
    uint8x16_t v38 = (uint8x16_t)vextq_s8(v37, v20, 0xFuLL);
    uint8x16_t v39 = (uint8x16_t)vextq_s8(v20, v21, 0xFuLL);
    *uint64_t result = vbslq_s8(v27, (int8x16_t)vsqaddq_u8((uint8x16_t)v34, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v34, v31), v29, v28), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v34)), (int8x16_t)vcgtq_u8((uint8x16_t)v34, v38)), (int8x16_t)vcgtq_u8(v38, (uint8x16_t)v34)))), v34);
    result[1] = vbslq_s8(v26, (int8x16_t)vsqaddq_u8((uint8x16_t)v33, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v33, v32), v29, v28), (int8x16_t)vcgtq_u8(v32, (uint8x16_t)v33)), (int8x16_t)vcgtq_u8((uint8x16_t)v33, v39)), (int8x16_t)vcgtq_u8(v39, (uint8x16_t)v33)))), v33);
    uint8x16_t v40 = result[2].i8;
    --v25;
    int8x16_t v24 = (char *)v30;
    int8x16_t v23 = vld1q_dup_s8(v40);
    int8x16_t v12 = v34;
    int8x16_t v13 = v33;
    uint64_t result = (int8x16_t *)((char *)result + a2);
  }
  while (v25 > 1);
  return result;
}

int8x16_t *sub_1D0C7671C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, char *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D30FDC(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int8 *)_X5, 0x20uLL, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = &_X5[-1].i8[15];
    int8x16_t v11 = vld1q_dup_s8(v12);
  }
  else
  {
    int8x16_t v10 = a5;
    int8x16_t v11 = vld1q_dup_s8(v10++);
    *a5 = result[1].i8[15];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + a2);
    int v8 = a7 - 1;
    a5 = (char *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i8[(int)(v13 + 1) * a2 + 15];
  int8x16_t v14 = vdupq_n_s8(~a4);
  int8x16_t v15 = vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int8x16_t v16 = vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0E0);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *result;
  int8x16_t v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  int8x16_t v28 = vceqzq_s8(v16);
  int8x16_t v29 = vceqzq_s8(v15);
  v30.i64[0] = 0x202020202020202;
  v30.i64[1] = 0x202020202020202;
  v31.i64[0] = 0x303030303030303;
  v31.i64[1] = 0x303030303030303;
  uint8x16_t v32 = a5;
  do
  {
    uint8x16_t v33 = (uint8x16_t)vextq_s8(v17, v18, 0xFuLL);
    int8x16_t v34 = v25;
    uint8x16_t v35 = (uint8x16_t)vextq_s8(v11, v17, 0xFuLL);
    int8x16_t v17 = v24;
    _X11 = &result->i8[a2];
    int8x16_t v24 = *(int8x16_t *)((char *)result + a2);
    int8x16_t v25 = *(int8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X11,#0x20] }
    v7.i8[0] = result->i8[a2 + ((16 * a4) & 0x20)];
    uint8x16_t v38 = (uint8x16_t)vextq_s8(v24, v25, 1uLL);
    uint8x16_t v39 = (uint8x16_t)vextq_s8(v25, v7, 1uLL);
    int8x16_t v40 = (int8x16_t)vcgtq_u8((uint8x16_t)v34, v39);
    int8x16_t v7 = (int8x16_t)vcgtq_u8(v39, (uint8x16_t)v34);
    *uint64_t result = vbslq_s8(v29, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v9, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v35), v31, v30), (int8x16_t)vcgtq_u8(v35, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v38)), (int8x16_t)vcgtq_u8(v38, (uint8x16_t)v17)))), v17);
    result[1] = vbslq_s8(v28, (int8x16_t)vsqaddq_u8((uint8x16_t)v34, vqtbl1q_s8(v9, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v34, v33), v31, v30), (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v34)), v40), v7))), v34);
    int8x16_t v11 = vld1q_dup_s8(v32++);
    --v27;
    *a5 = v34.i8[15];
    int8x16_t v18 = v34;
    a5 = (char *)v32;
    uint64_t result = (int8x16_t *)((char *)result + a2);
  }
  while (v27 > 1);
  return result;
}

uint8x16_t *sub_1D0C768B4(uint8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned char *a5, uint8x16_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i8[15];
    _X5 = result;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i8[(v8 + 1) * a2 + 15];
  uint8x16_t v10 = *_X5;
  uint8x16_t v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint8x16_t v16 = *result;
  uint8x16_t v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int v19 = v8 + 2;
  v20.i64[0] = 0x202020202020202;
  v20.i64[1] = 0x202020202020202;
  v21.i64[0] = 0x303030303030303;
  v21.i64[1] = 0x303030303030303;
  do
  {
    uint8x16_t v22 = v16;
    uint8x16_t v23 = v17;
    _X9 = (uint64_t)result->i64 + a2;
    uint8x16_t v16 = *(uint8x16_t *)((char *)result + a2);
    uint8x16_t v17 = *(uint8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X9,#0x20] }
    *a5++ = v23.i8[15];
    int8x16_t v26 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v22, v10), v21, v20), (int8x16_t)vcgtq_u8(v10, v22)), (int8x16_t)vcgtq_u8(v22, v16)), (int8x16_t)vcgtq_u8(v16, v22)));
    uint8x16_t v10 = v22;
    uint8x16_t v27 = vsqaddq_u8(v22, v26);
    int8x16_t v28 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v23, v9), v21, v20), (int8x16_t)vcgtq_u8(v9, v23)), (int8x16_t)vcgtq_u8(v23, v17)), (int8x16_t)vcgtq_u8(v17, v23)));
    uint8x16_t v9 = v23;
    *uint64_t result = v27;
    result[1] = vsqaddq_u8(v23, v28);
    --v19;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
  }
  while (v19 > 1);
  return result;
}

int8x16_t *sub_1D0C76994(int8x16_t *result, uint64_t a2, int8x16_t *a3, int a4, char *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = vdupq_n_s8(~a4);
  int8x16_t v10 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = vceqzq_s8(vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0E0));
  int8x16_t v13 = vceqzq_s8(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0x303030303030303;
  v15.i64[1] = 0x303030303030303;
  uint8x16_t v16 = a5;
  do
  {
    int8x16_t v17 = *result;
    int8x16_t v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v24 = vld1q_dup_s8(v16++);
    *a5 = v18.i8[15];
    v7.i8[0] = result->i8[(16 * a4) & 0x20];
    uint8x16_t v25 = (uint8x16_t)vextq_s8(v24, v17, 0xFuLL);
    uint8x16_t v26 = (uint8x16_t)vextq_s8(v17, v18, 0xFuLL);
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v17, v18, 1uLL);
    uint8x16_t v28 = (uint8x16_t)vextq_s8(v18, v7, 1uLL);
    int8x16_t v7 = (int8x16_t)vsqaddq_u8((uint8x16_t)v18, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v18, v26), v15, v14), (int8x16_t)vcgtq_u8(v26, (uint8x16_t)v18)), (int8x16_t)vcgtq_u8((uint8x16_t)v18, v28)), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v18))));
    *uint64_t result = vbslq_s8(v13, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v27), v15, v14), (int8x16_t)vcgtq_u8(v27, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v25)), (int8x16_t)vcgtq_u8(v25, (uint8x16_t)v17)))), v17);
    result[1] = vbslq_s8(v12, v7, v18);
    uint64_t result = (int8x16_t *)((char *)result + a2);
    --v11;
    a5 = (char *)v16;
  }
  while (v11 > 1);
  return result;
}

uint8x16_t *sub_1D0C76A78(uint8x16_t *result, uint64_t a2, long long *a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  do
  {
    uint8x16_t v10 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIBYTE(*(unsigned long long *)result);
    *uint64_t result = vsqaddq_u8(v10, vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8(v10, 3uLL)));
    uint64_t result = (uint8x16_t *)((char *)result + a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

unsigned __int8 *sub_1D0C76AB0(unsigned __int8 *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int8 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (unsigned __int8 *)sub_1D0D30BB0(result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[15];
    _X5 = (int8x16_t *)result;
    result += a2;
    int v7 = a7 - 1;
  }
  int8x16_t v9 = *_X5;
  i8 = _X5[1].i8;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  int8x16_t v17 = *(int8x16_t *)result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = vld1q_dup_s8(i8);
  *a5 = HIBYTE(*(_OWORD *)result);
  int8x16_t v20 = (char *)(a5 + 1);
  signed int v21 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v22 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1D0D7F0F0));
  v23.i64[0] = 0x202020202020202;
  v23.i64[1] = 0x202020202020202;
  v24.i64[0] = 0x303030303030303;
  v24.i64[1] = 0x303030303030303;
  uint8x16_t v25 = v20;
  do
  {
    _X11 = (uint64_t)&result[a2 + 16];
    int8x16_t v27 = *(int8x16_t *)&result[a2];
    __asm { PRFM            #0, [X11] }
    int8x16_t v29 = vld1q_dup_s8(v25++);
    *int8x16_t v20 = v27.i8[15];
    uint8x16_t v30 = (uint8x16_t)vextq_s8(v9, v19, 1uLL);
    uint8x16_t v31 = (uint8x16_t)vextq_s8(v29, v27, 0xFuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v22, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v30), v24, v23), (int8x16_t)vcgtq_u8(v30, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v31)), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v17)))), v17);
    uint8x16_t v32 = (const char *)(result + 16);
    --v21;
    int8x16_t v20 = (char *)v25;
    int8x16_t v19 = vld1q_dup_s8(v32);
    int8x16_t v9 = v17;
    int8x16_t v17 = v27;
    result += a2;
  }
  while (v21 > 1);
  return result;
}

char *sub_1D0C76BF0(char *result, uint64_t a2, int8x16_t *a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (char *)sub_1D0D30FDC(result, a2, (uint64_t)a3, a4, a5, a6, 0x10uLL, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const char *)(a6 - 1);
    int8x16_t v11 = vld1q_dup_s8(v12);
  }
  else
  {
    uint8x16_t v10 = a5;
    int8x16_t v11 = vld1q_dup_s8(v10++);
    *a5 = result[15];
    a6 = (unsigned __int8 *)result;
    result += a2;
    int v8 = a7 - 1;
    a5 = (char *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[(int)(v13 + 1) * a2 + 15];
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 16;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X10 = result + 16;
  int8x16_t v23 = *(int8x16_t *)result;
  __asm { PRFM            #0, [X10] }
  int v25 = v13 + 2;
  int8x16_t v26 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1D0D7F0F0));
  v27.i64[0] = 0x202020202020202;
  v27.i64[1] = 0x202020202020202;
  v28.i64[0] = 0x303030303030303;
  v28.i64[1] = 0x303030303030303;
  int8x16_t v29 = a5;
  do
  {
    _X12 = (uint64_t)&result[a2 + 16];
    int8x16_t v31 = *(int8x16_t *)&result[a2];
    __asm { PRFM            #0, [X12] }
    v7.i8[0] = result[a2 + ((8 * a4) & 0x10)];
    uint8x16_t v33 = (uint8x16_t)vextq_s8(v11, v16, 0xFuLL);
    uint8x16_t v34 = (uint8x16_t)vextq_s8(v31, v7, 1uLL);
    int8x16_t v7 = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v23, v33), v28, v27);
    *(int8x16_t *)uint64_t result = vbslq_s8(v26, (int8x16_t)vsqaddq_u8((uint8x16_t)v23, vqtbl1q_s8(v9, vaddq_s8(vsubq_s8(vaddq_s8(v7, (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v23)), (int8x16_t)vcgtq_u8((uint8x16_t)v23, v34)), (int8x16_t)vcgtq_u8(v34, (uint8x16_t)v23)))), v23);
    int8x16_t v11 = vld1q_dup_s8(v29++);
    --v25;
    int8x16_t v16 = v23;
    *a5 = v23.i8[15];
    int8x16_t v23 = v31;
    a5 = (char *)v29;
    result += a2;
  }
  while (v25 > 1);
  return result;
}

uint8x16_t *sub_1D0C76D44(uint8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned char *a5, uint8x16_t *a6, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i8[15];
    a6 = result;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i8[(v8 + 1) * a2 + 15];
  uint8x16_t v10 = *a6;
  _X5 = a6 + 1;
  uint8x16_t v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X9 = result + 1;
  uint8x16_t v18 = *result;
  __asm { PRFM            #0, [X9] }
  int v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0x303030303030303;
  v22.i64[1] = 0x303030303030303;
  do
  {
    _X10 = (uint64_t)result[1].i64 + a2;
    uint8x16_t v24 = *(uint8x16_t *)((char *)result + a2);
    __asm { PRFM            #0, [X10] }
    *a5++ = v18.i8[15];
    int8x16_t v26 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v18, v11), v22, v21), (int8x16_t)vcgtq_u8(v11, v18)), (int8x16_t)vcgtq_u8(v18, v24)), (int8x16_t)vcgtq_u8(v24, v18)));
    uint8x16_t v11 = v18;
    *uint64_t result = vsqaddq_u8(v18, v26);
    --v20;
    uint8x16_t v18 = v24;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
  }
  while (v20 > 1);
  return result;
}

int8x16_t *sub_1D0C76DFC(int8x16_t *result, uint64_t a2, int8x16_t *a3, int a4, char *a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12, uint64_t a13, int a14)
{
  int8x16_t v14 = *a3;
  int v15 = a14 + 1;
  int8x16_t v16 = vceqzq_s8(vandq_s8(vdupq_n_s8(~a4), (int8x16_t)xmmword_1D0D7F0F0));
  v17.i64[0] = 0x202020202020202;
  v17.i64[1] = 0x202020202020202;
  v18.i64[0] = 0x303030303030303;
  v18.i64[1] = 0x303030303030303;
  int8x16_t v19 = a5;
  do
  {
    int8x16_t v20 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v26 = vld1q_dup_s8(v19++);
    uint8x16_t v27 = (uint8x16_t)vextq_s8(v26, *result, 0xFuLL);
    *a5 = HIBYTE(*(unsigned long long *)result);
    a12.i8[0] = result->i8[(8 * a4) & 0x10];
    uint8x16_t v28 = (uint8x16_t)vextq_s8(v20, a12, 1uLL);
    a12 = (int8x16_t)vsqaddq_u8((uint8x16_t)v20, vqtbl1q_s8(v14, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v20, v27), v18, v17), (int8x16_t)vcgtq_u8(v27, (uint8x16_t)v20)), (int8x16_t)vcgtq_u8((uint8x16_t)v20, v28)), (int8x16_t)vcgtq_u8(v28, (uint8x16_t)v20))));
    *uint64_t result = vbslq_s8(v16, a12, v20);
    uint64_t result = (int8x16_t *)((char *)result + a2);
    --v15;
    a5 = (char *)v19;
  }
  while (v15 > 1);
  return result;
}

uint8x8_t *sub_1D0C76E98(uint8x8_t *result, uint64_t a2, long long *a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  do
  {
    uint8x8_t v10 = *result;
    __asm { PRFM            #0, [X0,#8] }
    *a5++ = HIBYTE(*(unint64_t *)result);
    *uint64_t result = vsqadd_u8(v10, vqtbl2_s8(*(int8x16x2_t *)&v7, (int8x8_t)vshr_n_u8(v10, 3uLL)));
    uint64_t result = (uint8x8_t *)((char *)result + a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

unsigned __int8 *sub_1D0C76ED0(unsigned __int8 *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int8 *a5, int8x8_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (unsigned __int8 *)sub_1D0D30BB0(result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[7];
    _X5 = (int8x8_t *)result;
    result += a2;
    int v7 = a7 - 1;
  }
  int8x8_t v9 = *_X5;
  uint8x8_t v10 = (const char *)&_X5[1];
  __asm { PRFM            #0, [X5,#8] }
  _X10 = result + 8;
  int8x8_t v17 = *(int8x8_t *)result;
  __asm { PRFM            #0, [X10] }
  int8x8_t v19 = (int8x8_t)vld1q_dup_s8(v10).u64[0];
  *a5 = HIBYTE(*(void *)result);
  int8x16_t v20 = (char *)(a5 + 1);
  signed int v21 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x8_t v22 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x200000000000001));
  int8x16_t v23 = v20;
  do
  {
    _X11 = (uint64_t)&result[a2 + 8];
    int8x8_t v25 = *(int8x8_t *)&result[a2];
    __asm { PRFM            #0, [X11] }
    int8x8_t v27 = vld1_dup_s8(v23++);
    *int8x16_t v20 = v25.i8[7];
    uint8x8_t v28 = (uint8x8_t)vext_s8(v9, v19, 1uLL);
    uint8x8_t v29 = (uint8x8_t)vext_s8(v27, v25, 7uLL);
    *(int8x8_t *)uint64_t result = vbsl_s8(v22, (int8x8_t)vsqadd_u8((uint8x8_t)v17, vqtbl1_s8(v8, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v17, v28), (int8x8_t)0x303030303030303, (int8x8_t)0x202020202020202), (int8x8_t)vcgt_u8(v28, (uint8x8_t)v17)), (int8x8_t)vcgt_u8((uint8x8_t)v17, v29)), (int8x8_t)vcgt_u8(v29, (uint8x8_t)v17)))), v17);
    uint8x16_t v30 = (const char *)(result + 8);
    --v21;
    int8x16_t v20 = (char *)v23;
    int8x8_t v19 = (int8x8_t)vld1q_dup_s8(v30).u64[0];
    int8x8_t v9 = v17;
    int8x8_t v17 = v25;
    result += a2;
  }
  while (v21 > 1);
  return result;
}

char *sub_1D0C77010(char *result, uint64_t a2, int8x16_t *a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (char *)sub_1D0D30FDC(result, a2, (uint64_t)a3, a4, a5, a6, 8uLL, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const char *)(a6 - 1);
    int8x8_t v11 = (int8x8_t)vld1q_dup_s8(v12).u64[0];
  }
  else
  {
    uint8x8_t v10 = a5;
    int8x8_t v11 = (int8x8_t)vld1q_dup_s8(v10++).u64[0];
    *a5 = result[7];
    a6 = (unsigned __int8 *)result;
    result += a2;
    int v8 = a7 - 1;
    a5 = (char *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[(int)(v13 + 1) * a2 + 7];
  int8x8_t v15 = *(int8x8_t *)a6;
  _X5 = a6 + 8;
  int8x8_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X10 = result + 8;
  int8x8_t v23 = *(int8x8_t *)result;
  __asm { PRFM            #0, [X10] }
  int v25 = v13 + 2;
  int8x8_t v26 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x200000000000001));
  int8x8_t v27 = a5;
  do
  {
    _X12 = (uint64_t)&result[a2 + 8];
    int8x8_t v29 = *(int8x8_t *)&result[a2];
    __asm { PRFM            #0, [X12] }
    v7.i8[0] = result[a2 + ((4 * a4) & 8)];
    uint8x8_t v31 = (uint8x8_t)vext_s8(v11, v16, 7uLL);
    uint8x8_t v32 = (uint8x8_t)vext_s8(v29, v7, 1uLL);
    int8x8_t v7 = vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v23, v31), (int8x8_t)0x303030303030303, (int8x8_t)0x202020202020202);
    *(int8x8_t *)uint64_t result = vbsl_s8(v26, (int8x8_t)vsqadd_u8((uint8x8_t)v23, vqtbl1_s8(v9, vadd_s8(vsub_s8(vadd_s8(v7, (int8x8_t)vcgt_u8(v31, (uint8x8_t)v23)), (int8x8_t)vcgt_u8((uint8x8_t)v23, v32)), (int8x8_t)vcgt_u8(v32, (uint8x8_t)v23)))), v23);
    int8x8_t v11 = (int8x8_t)vld1q_dup_s8(v27++).u64[0];
    --v25;
    int8x8_t v16 = v23;
    *a5 = v23.i8[7];
    int8x8_t v23 = v29;
    a5 = (char *)v27;
    result += a2;
  }
  while (v25 > 1);
  return result;
}

uint8x8_t *sub_1D0C77164(uint8x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned char *a5, uint8x8_t *a6, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i8[7];
    a6 = result;
    uint64_t result = (uint8x8_t *)((char *)result + a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i8[(v8 + 1) * a2 + 7];
  uint8x8_t v10 = *a6;
  _X5 = a6 + 1;
  uint8x8_t v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X9 = result + 1;
  uint8x8_t v18 = *result;
  __asm { PRFM            #0, [X9] }
  int v20 = v8 + 2;
  do
  {
    _X10 = (uint64_t)&result[1] + a2;
    uint8x8_t v22 = *(uint8x8_t *)((char *)result + a2);
    __asm { PRFM            #0, [X10] }
    *a5++ = v18.i8[7];
    int8x8_t v24 = vqtbl1_s8(v7, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8(v18, v11), (int8x8_t)0x303030303030303, (int8x8_t)0x202020202020202), (int8x8_t)vcgt_u8(v11, v18)), (int8x8_t)vcgt_u8(v18, v22)), (int8x8_t)vcgt_u8(v22, v18)));
    uint8x8_t v11 = v18;
    *uint64_t result = vsqadd_u8(v18, v24);
    --v20;
    uint8x8_t v18 = v22;
    uint64_t result = (uint8x8_t *)((char *)result + a2);
  }
  while (v20 > 1);
  return result;
}

int8x8_t *sub_1D0C7721C(int8x8_t *result, uint64_t a2, int8x16_t *a3, int a4, char *a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x8_t a12, uint64_t a13, int a14)
{
  int8x16_t v14 = *a3;
  int v15 = a14 + 1;
  int8x8_t v16 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x200000000000001));
  int8x8_t v17 = a5;
  do
  {
    int8x8_t v18 = *result;
    __asm { PRFM            #0, [X0,#8] }
    int8x8_t v24 = vld1_dup_s8(v17++);
    uint8x8_t v25 = (uint8x8_t)vext_s8(v24, *result, 7uLL);
    *a5 = HIBYTE(*(unint64_t *)result);
    a12.i8[0] = result->i8[(4 * a4) & 8];
    uint8x8_t v26 = (uint8x8_t)vext_s8(v18, a12, 1uLL);
    a12 = (int8x8_t)vsqadd_u8((uint8x8_t)v18, vqtbl1_s8(v14, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v18, v25), (int8x8_t)0x303030303030303, (int8x8_t)0x202020202020202), (int8x8_t)vcgt_u8(v25, (uint8x8_t)v18)), (int8x8_t)vcgt_u8((uint8x8_t)v18, v26)), (int8x8_t)vcgt_u8(v26, (uint8x8_t)v18))));
    *uint64_t result = vbsl_s8(v16, a12, v18);
    uint64_t result = (int8x8_t *)((char *)result + a2);
    --v15;
    a5 = (char *)v17;
  }
  while (v15 > 1);
  return result;
}

char *sub_1D0C772B8(char *a1, uint64_t a2, long long *a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7)
{
  sub_1D0C5F164(a1, a2, a3, a4, a5, a6, a7);
  return sub_1D0C5F164(a1 + 64, a2, a3, v12, a5, v13, a7);
}

uint64_t sub_1D0C77320(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, unsigned char *a5, int8x16_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C61EF0(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C61EF0(a1 + 64, a2, a3, v16, a5, a6 + 4, a7);
}

int8x16_t *sub_1D0C773E0(int8x16_t *a1, uint64_t a2, uint64_t *a3, int a4, char *a5, int8x16_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C620FC(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C620FC(a1 + 4, a2, a3, v16, a5, a6 + 4, a7);
}

uint8x16_t *sub_1D0C774A0(uint8x16_t *a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, uint8x16_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C61BD8(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C61BD8(a1 + 4, a2, a3, v16, a5, a6 + 4, a7);
}

int8x16_t *sub_1D0C77560(int8x16_t *a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, uint64_t a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v12 = 34;
  }
  else {
    int v12 = 2;
  }
  unsigned int v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0) {
    int v14 = 17;
  }
  else {
    int v14 = 1;
  }
  unsigned int v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C66228(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C66228(a1 + 4, a2, a3, v15, a5, v16, a7);
}

char *sub_1D0C77610(char *result, uint64_t a2, long long *a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  do
  {
    unsigned int v13 = result;
    int8x16x2_t v22 = vld2q_s8(v13);
    int v14 = (char *)&v13[a2];
    __asm { PRFM            #0, [X0,#0x20] }
    _X11 = v14;
    int8x16x2_t v23 = vld2q_s8(_X11);
    _X11 += 32;
    __asm { PRFM            #0, [X11] }
    *a5 = v22.val[0].i8[15];
    a5[1] = v22.val[1].i8[15];
    a5[2] = v23.val[0].i8[15];
    a5[3] = v23.val[1].i8[15];
    v22.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v22.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v22.val[0], 3uLL)));
    v22.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v22.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v22.val[1], 3uLL)));
    v23.val[0] = (int8x16_t)vsqaddq_u8((uint8x16_t)v23.val[0], vqtbl2q_s8(*(int8x16x2_t *)&v7, (int8x16_t)vshrq_n_u8((uint8x16_t)v23.val[0], 3uLL)));
    vst2q_s8(result, v22);
    uint64_t v11 = 2 * a2;
    result += v11;
    v23.val[1] = (int8x16_t)vsqaddq_u8((uint8x16_t)v23.val[1], vqtbl2q_s8(*(int8x16x2_t *)&v9, (int8x16_t)vshrq_n_u8((uint8x16_t)v23.val[1], 3uLL)));
    vst2q_s8(v14, v23);
    v12 -= 2;
    a5 += 4;
  }
  while (v12 > 2);
  return result;
}

uint64_t sub_1D0C776A0(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned char *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D307F0((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_WORD *)&a5[2 * a7] = *(_WORD *)(result + a7 * a2 - 2);
  }
  if ((a4 & 4) == 0)
  {
    *(_WORD *)a5 = *(_WORD *)(result + 30);
    a5 += 2;
    _X5 = (int8x16_t *)result;
    result += a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = vdupq_n_s8(~a4);
  int8x16_t v10 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F100);
  int8x16_t v11 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F110);
  int8x16_t v12 = *_X5;
  int8x16_t v13 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v20 = *(int8x16_t *)result;
  int8x16_t v21 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v23 = (int8x16_t)vld1q_dup_s16(i16);
  *(_WORD *)a5 = v21.i16[7];
  int8x8_t v24 = (__int16 *)(a5 + 2);
  signed int v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v26 = vceqzq_s8(v11);
  int8x16_t v27 = vceqzq_s8(v10);
  uint8x8_t v28 = v24;
  do
  {
    uint8x16_t v29 = (uint8x16_t)vextq_s8(v12, v13, 2uLL);
    uint8x16_t v30 = (uint8x16_t)vextq_s8(v13, v23, 2uLL);
    int8x16_t v31 = v21;
    int8x16_t v32 = v20;
    _X10 = result + a2;
    int8x16_t v20 = *(int8x16_t *)(result + a2);
    int8x16_t v21 = *(int8x16_t *)(result + a2 + 16);
    __asm { PRFM            #0, [X10,#0x20] }
    int8x16_t v35 = (int8x16_t)vld1q_dup_s16(v28++);
    *int8x8_t v24 = v21.i16[7];
    uint8x16_t v36 = (uint8x16_t)vextq_s8(v35, v20, 0xEuLL);
    uint8x16_t v37 = (uint8x16_t)vextq_s8(v20, v21, 0xEuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vsqaddq_u8((uint8x16_t)v32, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v32, v29), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v32)), (int8x16_t)vcgtq_u8((uint8x16_t)v32, v36)), (int8x16_t)vcgtq_u8(v36, (uint8x16_t)v32)))), v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vsqaddq_u8((uint8x16_t)v31, vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v31, v30), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v30, (uint8x16_t)v31)), (int8x16_t)vcgtq_u8((uint8x16_t)v31, v37)), (int8x16_t)vcgtq_u8(v37, (uint8x16_t)v31)))), v31);
    uint8x16_t v38 = (const __int16 *)(result + 32);
    --v25;
    int8x8_t v24 = (__int16 *)v28;
    int8x16_t v23 = (int8x16_t)vld1q_dup_s16(v38);
    int8x16_t v12 = v32;
    int8x16_t v13 = v31;
    result += a2;
  }
  while (v25 > 1);
  return result;
}

int8x16_t *sub_1D0C77830(int8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, char *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D3087C((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int8 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int8x16_t v10 = (const __int16 *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *(_WORD *)a5 = result[1].i16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + a2);
    --a7;
    a5 = (char *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_WORD *)&a5[2 * (v13 + 1)] = *(__int16 *)((char *)&result[1].i16[7] + (int)(v13 + 1) * a2);
  int8x16_t v14 = vdupq_n_s8(~a4);
  int8x16_t v15 = vandq_s8(v14, (int8x16_t)xmmword_1D0D7F100);
  int8x16_t v16 = vandq_s8(v14, (int8x16_t)xmmword_1D0D7F110);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *result;
  int8x16_t v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  int8x16_t v28 = vceqzq_s8(v16);
  int8x16_t v29 = vceqzq_s8(v15);
  uint8x16_t v30 = (const __int16 *)a5;
  do
  {
    uint8x16_t v31 = (uint8x16_t)vextq_s8(v17, v18, 0xEuLL);
    int8x16_t v32 = v25;
    uint8x16_t v33 = (uint8x16_t)vextq_s8(v11, v17, 0xEuLL);
    int8x16_t v17 = v24;
    _X11 = &result->i8[a2];
    int8x16_t v24 = *(int8x16_t *)((char *)result + a2);
    int8x16_t v25 = *(int8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X11,#0x20] }
    v7.i16[0] = *(__int16 *)((char *)result->i16 + a2 + ((16 * a4) & 0x20));
    uint8x16_t v36 = (uint8x16_t)vextq_s8(v24, v25, 2uLL);
    uint8x16_t v37 = (uint8x16_t)vextq_s8(v25, v7, 2uLL);
    int8x16_t v38 = (int8x16_t)vcgtq_u8((uint8x16_t)v32, v37);
    int8x16_t v7 = (int8x16_t)vcgtq_u8(v37, (uint8x16_t)v32);
    *uint64_t result = vbslq_s8(v29, (int8x16_t)vsqaddq_u8((uint8x16_t)v17, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v17, v33), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v17)), (int8x16_t)vcgtq_u8((uint8x16_t)v17, v36)), (int8x16_t)vcgtq_u8(v36, (uint8x16_t)v17)))), v17);
    result[1] = vbslq_s8(v28, (int8x16_t)vsqaddq_u8((uint8x16_t)v32, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v32, v31), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v31, (uint8x16_t)v32)), v38), v7))), v32);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v30++);
    --v27;
    *(_WORD *)a5 = v32.i16[7];
    int8x16_t v18 = v32;
    a5 = (char *)v30;
    uint64_t result = (int8x16_t *)((char *)result + a2);
  }
  while (v27 > 1);
  return result;
}

uint8x16_t *sub_1D0C779D0(uint8x16_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, uint8x16_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int16 *)((char *)&result[1].i16[7] + (v9 + 1) * a2);
  uint8x16_t v11 = *_X5;
  uint8x16_t v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint8x16_t v17 = *result;
  uint8x16_t v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int v20 = v9 + 2;
  do
  {
    uint8x16_t v21 = v17;
    uint8x16_t v22 = v18;
    _X9 = (uint64_t)result->i64 + a2;
    uint8x16_t v17 = *(uint8x16_t *)((char *)result + a2);
    uint8x16_t v18 = *(uint8x16_t *)((char *)&result[1] + a2);
    __asm { PRFM            #0, [X9,#0x20] }
    *a5++ = v22.i16[7];
    int8x16_t v25 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v21, v11), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v11, v21)), (int8x16_t)vcgtq_u8(v21, v17)), (int8x16_t)vcgtq_u8(v17, v21)));
    uint8x16_t v11 = v21;
    uint8x16_t v26 = vsqaddq_u8(v21, v25);
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v22, v10), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v10, v22)), (int8x16_t)vcgtq_u8(v22, v18)), (int8x16_t)vcgtq_u8(v18, v22)));
    uint8x16_t v10 = v22;
    *uint64_t result = v26;
    result[1] = vsqaddq_u8(v22, v27);
    --v20;
    uint64_t result = (uint8x16_t *)((char *)result + a2);
  }
  while (v20 > 1);
  return result;
}

int8x16_t *sub_1D0C77AC0(int8x16_t *result, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = vdupq_n_s8(~a4);
  int8x16_t v10 = vandq_s8(v9, (int8x16_t)xmmword_1D0D7F100);
  int v11 = a7 + 1;
  int8x16_t v12 = vceqzq_s8(vandq_s8(v9, (int8x16_t)xmmword_1D0D7F110));
  int8x16_t v13 = vceqzq_s8(v10);
  int8x16_t v14 = a5;
  do
  {
    int8x16_t v15 = *result;
    int8x16_t v16 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v22 = (int8x16_t)vld1q_dup_s16(v14++);
    *a5 = v16.i16[7];
    v7.i16[0] = *(__int16 *)((char *)result->i16 + ((16 * a4) & 0x20));
    uint8x16_t v23 = (uint8x16_t)vextq_s8(v22, v15, 0xEuLL);
    uint8x16_t v24 = (uint8x16_t)vextq_s8(v15, v16, 0xEuLL);
    uint8x16_t v25 = (uint8x16_t)vextq_s8(v15, v16, 2uLL);
    uint8x16_t v26 = (uint8x16_t)vextq_s8(v16, v7, 2uLL);
    int8x16_t v7 = (int8x16_t)vsqaddq_u8((uint8x16_t)v16, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v16, v24), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v24, (uint8x16_t)v16)), (int8x16_t)vcgtq_u8((uint8x16_t)v16, v26)), (int8x16_t)vcgtq_u8(v26, (uint8x16_t)v16))));
    *uint64_t result = vbslq_s8(v13, (int8x16_t)vsqaddq_u8((uint8x16_t)v15, vqtbl1q_s8(v8, vaddq_s8(vsubq_s8(vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v15, v25), (int8x16_t)xmmword_1D0D7F130, (int8x16_t)xmmword_1D0D7F120), (int8x16_t)vcgtq_u8(v25, (uint8x16_t)v15)), (int8x16_t)vcgtq_u8((uint8x16_t)v15, v23)), (int8x16_t)vcgtq_u8(v23, (uint8x16_t)v15)))), v15);
    result[1] = vbslq_s8(v12, v7, v16);
    uint64_t result = (int8x16_t *)((char *)result + a2);
    --v11;
    a5 = (__int16 *)v14;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C77BB4(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned char *a5, int8x8_t *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D30A98((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_WORD *)&a5[2 * a7] = *(_WORD *)(result + a7 * a2 - 2);
  }
  if ((a4 & 4) == 0)
  {
    *(_WORD *)a5 = *(_WORD *)(result + 6);
    a5 += 2;
    _X5 = (int8x8_t *)result;
    result += a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x8_t v9 = *_X5;
  int8x16_t v10 = (const __int16 *)&_X5[1];
  __asm { PRFM            #0, [X5,#8] }
  _X10 = result + 8;
  int8x8_t v17 = *(int8x8_t *)result;
  __asm { PRFM            #0, [X10] }
  int8x8_t v19 = (int8x8_t)vld1q_dup_s16(v10).u64[0];
  *(_WORD *)a5 = HIWORD(*(void *)result);
  int v20 = (__int16 *)(a5 + 2);
  signed int v21 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x8_t v22 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x202000000000101));
  uint8x16_t v23 = v20;
  do
  {
    _X11 = result + a2 + 8;
    int8x8_t v25 = *(int8x8_t *)(result + a2);
    __asm { PRFM            #0, [X11] }
    int8x8_t v27 = (int8x8_t)vld1_dup_s16(v23++);
    *int v20 = v25.i16[3];
    uint8x8_t v28 = (uint8x8_t)vext_s8(v9, v19, 2uLL);
    uint8x8_t v29 = (uint8x8_t)vext_s8(v27, v25, 6uLL);
    *(int8x8_t *)uint64_t result = vbsl_s8(v22, (int8x8_t)vsqadd_u8((uint8x8_t)v17, vqtbl1_s8(v7, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v17, v28), (int8x8_t)0xB030B030B030B03, (int8x8_t)0xA020A020A020A02), (int8x8_t)vcgt_u8(v28, (uint8x8_t)v17)), (int8x8_t)vcgt_u8((uint8x8_t)v17, v29)), (int8x8_t)vcgt_u8(v29, (uint8x8_t)v17)))), v17);
    uint8x16_t v30 = (const __int16 *)(result + 8);
    --v21;
    int v20 = (__int16 *)v23;
    int8x8_t v19 = (int8x8_t)vld1q_dup_s16(v30).u64[0];
    int8x8_t v9 = v17;
    int8x8_t v17 = v25;
    result += a2;
  }
  while (v21 > 1);
  return result;
}

int8x8_t *sub_1D0C77CFC(int8x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x8_t *)sub_1D0D30B24((unsigned __int8 *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) != 0)
  {
    int v11 = (const __int16 *)(a6 - 2);
    int8x8_t v10 = (int8x8_t)vld1q_dup_s16(v11).u64[0];
  }
  else
  {
    int8x8_t v9 = (const __int16 *)a5;
    int8x8_t v10 = (int8x8_t)vld1q_dup_s16(v9++).u64[0];
    *(_WORD *)a5 = result->i16[3];
    a6 = (unsigned __int8 *)result;
    uint64_t result = (int8x8_t *)((char *)result + a2);
    --a7;
    a5 = (char *)v9;
  }
  v7.i64[1] = v8;
  unsigned int v12 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_WORD *)&a5[2 * (v12 + 1)] = *(__int16 *)((char *)&result->i16[3] + (int)(v12 + 1) * a2);
  int8x8_t v14 = *(int8x8_t *)a6;
  _X5 = a6 + 8;
  int8x8_t v15 = v14;
  __asm { PRFM            #0, [X5] }
  _X10 = result + 1;
  int8x8_t v22 = *result;
  __asm { PRFM            #0, [X10] }
  int v24 = v12 + 2;
  int8x8_t v25 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x202000000000101));
  uint8x16_t v26 = (const __int16 *)a5;
  do
  {
    _X12 = (uint64_t)&result[1] + a2;
    int8x8_t v28 = *(int8x8_t *)((char *)result + a2);
    __asm { PRFM            #0, [X12] }
    uint8x8_t v30 = (uint8x8_t)vext_s8(v10, v15, 6uLL);
    v15.i16[0] = *(__int16 *)((char *)result->i16 + a2 + ((4 * a4) & 8));
    uint8x8_t v31 = (uint8x8_t)vext_s8(v28, v15, 2uLL);
    *uint64_t result = vbsl_s8(v25, (int8x8_t)vsqadd_u8((uint8x8_t)v22, vqtbl1_s8(v7, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v22, v30), (int8x8_t)0xB030B030B030B03, (int8x8_t)0xA020A020A020A02), (int8x8_t)vcgt_u8(v30, (uint8x8_t)v22)), (int8x8_t)vcgt_u8((uint8x8_t)v22, v31)), (int8x8_t)vcgt_u8(v31, (uint8x8_t)v22)))), v22);
    int8x8_t v10 = (int8x8_t)vld1q_dup_s16(v26++).u64[0];
    --v24;
    int8x8_t v15 = v22;
    *(_WORD *)a5 = v22.i16[3];
    int8x8_t v22 = v28;
    a5 = (char *)v26;
    uint64_t result = (int8x8_t *)((char *)result + a2);
  }
  while (v24 > 1);
  return result;
}

uint8x8_t *sub_1D0C77E58(uint8x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, uint8x8_t *a6, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[3];
    a6 = result;
    uint64_t result = (uint8x8_t *)((char *)result + a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int16 *)((char *)&result->i16[3] + (v9 + 1) * a2);
  uint8x8_t v11 = *a6;
  _X5 = a6 + 1;
  uint8x8_t v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X9 = result + 1;
  uint8x8_t v19 = *result;
  __asm { PRFM            #0, [X9] }
  int v21 = v9 + 2;
  do
  {
    _X10 = (uint64_t)&result[1] + a2;
    uint8x8_t v23 = *(uint8x8_t *)((char *)result + a2);
    __asm { PRFM            #0, [X10] }
    *a5++ = v19.i16[3];
    int8x8_t v25 = vqtbl1_s8(v7, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8(v19, v12), (int8x8_t)0xB030B030B030B03, (int8x8_t)0xA020A020A020A02), (int8x8_t)vcgt_u8(v12, v19)), (int8x8_t)vcgt_u8(v19, v23)), (int8x8_t)vcgt_u8(v23, v19)));
    uint8x8_t v12 = v19;
    *uint64_t result = vsqadd_u8(v19, v25);
    --v21;
    uint8x8_t v19 = v23;
    uint64_t result = (uint8x8_t *)((char *)result + a2);
  }
  while (v21 > 1);
  return result;
}

int8x8_t *sub_1D0C77F20(int8x8_t *result, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x8_t a12, uint64_t a13, int a14)
{
  v14.i64[0] = *a3;
  v14.i64[1] = a3[4];
  int v15 = a14 + 1;
  int8x8_t v16 = vceqz_s8(vand_s8(vdup_n_s8(~a4), (int8x8_t)0x202000000000101));
  int8x8_t v17 = a5;
  do
  {
    int8x8_t v18 = *result;
    __asm { PRFM            #0, [X0,#8] }
    int8x8_t v24 = (int8x8_t)vld1_dup_s16(v17++);
    uint8x8_t v25 = (uint8x8_t)vext_s8(v24, *result, 6uLL);
    *a5 = HIWORD(*(unint64_t *)result);
    a12.i16[0] = *(__int16 *)((char *)result->i16 + ((4 * a4) & 8));
    uint8x8_t v26 = (uint8x8_t)vext_s8(v18, a12, 2uLL);
    a12 = (int8x8_t)vsqadd_u8((uint8x8_t)v18, vqtbl1_s8(v14, vadd_s8(vsub_s8(vadd_s8(vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v18, v25), (int8x8_t)0xB030B030B030B03, (int8x8_t)0xA020A020A020A02), (int8x8_t)vcgt_u8(v25, (uint8x8_t)v18)), (int8x8_t)vcgt_u8((uint8x8_t)v18, v26)), (int8x8_t)vcgt_u8(v26, (uint8x8_t)v18))));
    *uint64_t result = vbsl_s8(v16, a12, v18);
    uint64_t result = (int8x8_t *)((char *)result + a2);
    --v15;
    a5 = (__int16 *)v17;
  }
  while (v15 > 1);
  return result;
}

int16x8_t *sub_1D0C77FCC(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    for (int i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = result;
        do
        {
          int16x8_t v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          int16x8_t v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 8uLL);
          int16x8_t v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 8uLL);
          int16x8_t *v6 = vshlq_n_s16(*v6, 8uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 8uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      uint64_t result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int16x8_t *sub_1D0C78054(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xFF00FF00FF00FFLL;
  v11.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v12 = _X9[-6];
    int16x8_t v13 = _X9[-5];
    int16x8_t v14 = _X9[-4];
    int16x8_t v15 = _X9[-3];
    int16x8_t v16 = _X9[-2];
    int16x8_t v17 = _X9[-1];
    int16x8_t v18 = *_X9;
    int16x8_t v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 3uLL), v13, 3uLL));
    int16x8_t v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    int16x8_t v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    int8x16_t v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 3uLL), v15, 3uLL));
    int16x8_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    int16x8_t v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    int8x16_t v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 3uLL), v17, 3uLL));
    int16x8_t v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    int16x8_t v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 3uLL), v19, 3uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int8x16_t *sub_1D0C7813C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2F524(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 0x40) != 0) {
      a5[a7] = result->u16[a7 * a2 - 1];
    }
    if ((a4 & 4) == 0)
    {
      *a5++ = result[7].u16[7];
      _X5 = result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
    }
    int8x16_t v10 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v12 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = (int16x8_t)_X5[1];
    int16x8_t v16 = (int16x8_t)_X5[2];
    int16x8_t v15 = (int16x8_t)_X5[3];
    int16x8_t v18 = (int16x8_t)_X5[4];
    int16x8_t v17 = (int16x8_t)_X5[5];
    int16x8_t v19 = (int16x8_t)_X5[6];
    int8x16_t v20 = _X5[7];
    i16 = _X5[8].i16;
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *result;
    int8x16_t v29 = result[1];
    int8x16_t v30 = result[2];
    int8x16_t v31 = result[3];
    int8x16_t v32 = result + 6;
    int8x16_t v33 = result[6];
    int8x16_t v34 = result[4];
    int8x16_t v35 = result[5];
    uint64_t v36 = 2 * a2;
    signed int v37 = v8 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    int8x16_t v38 = result[7];
    __asm { PRFM            #0, [X0,#0x80] }
    int8x16_t v40 = (int8x16_t)vceqzq_s16(v12);
    int8x16_t v41 = (int8x16_t)vceqzq_s16(v11);
    __asm { PRFM            #0, [X0,#0xC0] }
    v43.i64[0] = 0x202020202020202;
    v43.i64[1] = 0x202020202020202;
    v44.i64[0] = 0xFF00FF00FF00FFLL;
    v44.i64[1] = 0xFF00FF00FF00FFLL;
    int8x16_t v45 = (int8x16_t)vld1q_dup_s16(i16);
    *a5 = v38.u16[7];
    uint8x16_t v46 = (__int16 *)(a5 + 1);
    uint8x16_t v47 = v46;
    do
    {
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 2uLL);
      int16x8_t v49 = (int16x8_t)v38;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 2uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 2uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 2uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 2uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 2uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 2uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = &v32->i8[v36];
      int8x16_t v28 = *(int8x16_t *)((char *)&v32[-6] + v36);
      int8x16_t v29 = *(int8x16_t *)((char *)&v32[-5] + v36);
      int8x16_t v30 = *(int8x16_t *)((char *)&v32[-4] + v36);
      int8x16_t v31 = *(int8x16_t *)((char *)&v32[-3] + v36);
      int8x16_t v34 = *(int8x16_t *)((char *)&v32[-2] + v36);
      int8x16_t v35 = *(int8x16_t *)((char *)&v32[-1] + v36);
      int8x16_t v33 = *(int8x16_t *)((char *)v32 + 2 * a2);
      int8x16_t v38 = *(int8x16_t *)((char *)&v32[1] + v36);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v59 = (int8x16_t)vld1q_dup_s16(v47++);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v20, v45, 2uLL);
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v59, v28, 0xEuLL);
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v14));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
      int8x16_t v65 = vqmovn_high_s16(vqmovn_s16(v63), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v13)));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v30, v31, 0xEuLL);
      int16x8_t v67 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v16));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v31, v34, 0xEuLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v67), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v15)));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v34, v35, 0xEuLL);
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v17));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v35, v33, 0xEuLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v18))), v71);
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v33, v38, 0xEuLL);
      *uint8x16_t v46 = v38.i16[7];
      int8x16_t v75 = vqtbl1q_s8(v9, vaddq_s8(v65, v43));
      int8x16_t v76 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v60, (uint16x8_t)v49), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v60)), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v74)), (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v49)));
      v32[-6] = vbslq_s8(v41, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v75.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      v32[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v75), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v9, vaddq_s8(v69, v43));
      v32[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      v32[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v44);
      int8x16_t v78 = vqtbl1q_s8(v9, vaddq_s8(v73, v43));
      v32[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
      v32[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v78), (int16x8_t)0), v44);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v76, v43));
      *(int16x8_t *)int8x16_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
      v32[1] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v49, v79), (int16x8_t)0), v44), (int8x16_t)v49);
      CFArrayRef v80 = v32[2].i16;
      --v37;
      int8x16_t v32 = (int8x16_t *)((char *)v32 + v36);
      uint8x16_t v46 = (__int16 *)v47;
      int8x16_t v20 = (int8x16_t)v49;
      int8x16_t v45 = (int8x16_t)vld1q_dup_s16(v80);
    }
    while (v37 > 1);
  }
  return result;
}

int8x16_t *sub_1D0C784A8(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2F948(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 4) != 0)
    {
      int16x8_t v12 = &_X5[-1].i16[7];
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
    }
    else
    {
      int8x16_t v10 = a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
      *a5 = result[7].i16[7];
      _X5 = (int16x8_t *)result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
      a5 = (__int16 *)v10;
    }
    unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
    a5[v13 + 1] = result[7].i16[(int)(v13 + 1) * a2 + 7];
    int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v17 = *_X5;
    int16x8_t v16 = _X5[1];
    int16x8_t v18 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *result;
    int8x16_t v32 = result[1];
    int8x16_t v33 = result[2];
    int8x16_t v34 = result[3];
    int8x16_t v35 = result[4];
    int8x16_t v36 = result[5];
    signed int v37 = result + 6;
    int8x16_t v38 = result[6];
    int8x16_t v39 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int v42 = v13 + 2;
    uint64_t v43 = 2 * a2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v18);
    int8x16_t v45 = (int8x16_t)vceqzq_s16(v15);
    v46.i64[0] = 0x202020202020202;
    v46.i64[1] = 0x202020202020202;
    v47.i64[0] = 0xFF00FF00FF00FFLL;
    v47.i64[1] = 0xFF00FF00FF00FFLL;
    uint16x8_t v48 = a5;
    do
    {
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xEuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xEuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xEuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xEuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v20, 0xEuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 0xEuLL);
      int16x8_t v16 = (int16x8_t)v32;
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v17, 0xEuLL);
      int16x8_t v17 = (int16x8_t)v31;
      _X13 = &v37->i8[v43];
      int8x16_t v31 = *(int8x16_t *)((char *)&v37[-6] + v43);
      int8x16_t v32 = *(int8x16_t *)((char *)&v37[-5] + v43);
      int8x16_t v33 = *(int8x16_t *)((char *)&v37[-4] + v43);
      int8x16_t v34 = *(int8x16_t *)((char *)&v37[-3] + v43);
      int8x16_t v35 = *(int8x16_t *)((char *)&v37[-2] + v43);
      int8x16_t v36 = *(int8x16_t *)((char *)&v37[-1] + v43);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v56, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v56)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v17));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
      int16x8_t v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v16));
      uint16x8_t v63 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
      int8x16_t v64 = vqmovn_high_s16(vqmovn_s16(v60), v62);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v20));
      int16x8_t v66 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v63));
      int8x16_t v38 = *(int8x16_t *)((char *)v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)((char *)&v37[1] + v43);
      int16x8_t v67 = vaddq_s16(v66, (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v19));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v35, v36, 2uLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v65), v67);
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v36, v38, 2uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v73 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v21));
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v38, v39, 2uLL);
      int8x16_t v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v22))), v73);
      int16x8_t v76 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v74);
      int16x8_t v77 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v50)), v76);
      v76.i32[0] = v37[8 * ((a4 >> 1) & 1) - 6].u16[a2];
      uint16x8_t v78 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v76, 2uLL);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v64, v46));
      int8x16_t v80 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v77, (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v78)), (int16x8_t)vcgtq_u16(v78, (uint16x8_t)v23)));
      v37[-6] = vbslq_s8(v45, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v79.i8), (int16x8_t)0), v47), (int8x16_t)v17);
      v37[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v79), (int16x8_t)0), v47);
      int8x16_t v81 = vqtbl1q_s8(v9, vaddq_s8(v69, v46));
      v37[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v81.i8), (int16x8_t)0), v47);
      v37[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v81), (int16x8_t)0), v47);
      int8x16_t v82 = vqtbl1q_s8(v9, vaddq_s8(v75, v46));
      v37[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v82.i8), (int16x8_t)0), v47);
      v37[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v82), (int16x8_t)0), v47);
      int8x16_t v83 = vqtbl1q_s8(v9, vaddq_s8(v80, v46));
      *(int16x8_t *)signed int v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v83.i8), (int16x8_t)0), v47);
      v37[1] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v83), (int16x8_t)0), v47), (int8x16_t)v23);
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v48++);
      --v42;
      signed int v37 = (int8x16_t *)((char *)v37 + v43);
      *a5 = v23.i16[7];
      a5 = (__int16 *)v48;
    }
    while (v42 > 1);
  }
  return result;
}

uint64_t sub_1D0C78824(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  uint16x8_t v14 = _X5[4];
  uint16x8_t v13 = _X5[5];
  uint16x8_t v16 = _X5[6];
  uint16x8_t v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v23 = *(uint16x8_t *)result;
  uint16x8_t v24 = *(uint16x8_t *)(result + 16);
  uint16x8_t v25 = *(uint16x8_t *)(result + 32);
  uint16x8_t v26 = *(uint16x8_t *)(result + 48);
  uint16x8_t v27 = *(uint16x8_t *)(result + 64);
  uint16x8_t v28 = *(uint16x8_t *)(result + 80);
  int8x16_t v29 = (int16x8_t *)(result + 96);
  uint16x8_t v30 = *(uint16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v34 = v8 + 2;
  uint64_t v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFF00FF00FF00FFLL;
  v37.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v38 = (int16x8_t)v31;
    int16x8_t v39 = (int16x8_t)v30;
    int16x8_t v40 = (int16x8_t)v28;
    int16x8_t v41 = (int16x8_t)v27;
    int16x8_t v42 = (int16x8_t)v26;
    int16x8_t v43 = (int16x8_t)v25;
    int16x8_t v44 = (int16x8_t)v24;
    int16x8_t v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    uint16x8_t v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    uint16x8_t v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    uint16x8_t v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *int8x16_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v29 = (int16x8_t *)((char *)v29 + v35);
    uint16x8_t v10 = (uint16x8_t)v45;
    uint16x8_t v9 = (uint16x8_t)v44;
    uint16x8_t v12 = (uint16x8_t)v43;
    uint16x8_t v11 = (uint16x8_t)v42;
    uint16x8_t v14 = (uint16x8_t)v41;
    uint16x8_t v13 = (uint16x8_t)v40;
    uint16x8_t v16 = (uint16x8_t)v39;
    uint16x8_t v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int16x8_t *sub_1D0C78AD4(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F0D0);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F150);
  int v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  uint16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v18 = result[2];
    int16x8_t v19 = result[3];
    int16x8_t v20 = result[4];
    int16x8_t v21 = result[5];
    int16x8_t v23 = result[6];
    int16x8_t v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    int8x16_t v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    int16x8_t v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    int16x8_t v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    int8x16_t v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

int16x8_t *sub_1D0C78D4C(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 2;
  int v10 = a7 + 1;
  v11.i64[0] = 0xFF00FF00FF00FFLL;
  v11.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v12 = _X8[-2];
    int16x8_t v13 = _X8[-1];
    int16x8_t v14 = *_X8;
    int16x8_t v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    int8x16_t v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 3uLL), v13, 3uLL));
    int16x8_t v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    int16x8_t v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    int8x16_t v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 3uLL), v15, 3uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C78DD8(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2F524(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v13 = *(int16x8_t *)_X5;
  int16x8_t v12 = (int16x8_t)_X5[1];
  int8x16_t v14 = _X5[2];
  int8x16_t v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v22 = *result;
  int8x16_t v23 = result[1];
  int8x16_t v24 = result[2];
  int8x16_t v25 = result[3];
  uint16x8_t v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  int8x16_t v29 = (__int16 *)(a5 + 1);
  uint64_t v30 = a2;
  signed int v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xFF00FF00FF00FFLL;
  v35.i64[1] = 0xFF00FF00FF00FFLL;
  uint16x8_t v36 = v29;
  do
  {
    int16x8_t v37 = (int16x8_t)v25;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    int16x8_t v39 = (int16x8_t)v24;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    int16x8_t v12 = (int16x8_t)v23;
    int16x8_t v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    int8x16_t v22 = *(int8x16_t *)&v26[v30 - 32];
    int8x16_t v23 = *(int8x16_t *)&v26[v30 - 24];
    int8x16_t v24 = *(int8x16_t *)&v26[v30 - 16];
    int8x16_t v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    int8x16_t v43 = (int8x16_t)vld1q_dup_s16(v36++);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *int8x16_t v29 = v25.i16[7];
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    uint16x8_t v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    int8x16_t v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    int8x16_t v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    uint16x8_t v26 = (const __int16 *)((char *)v26 + v30 * 2);
    int8x16_t v29 = (__int16 *)v36;
    int8x16_t v14 = (int8x16_t)v39;
    int8x16_t v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int8x16_t *sub_1D0C78FF8(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2F948(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *result;
  int8x16_t v27 = result[1];
  int8x16_t v28 = result + 2;
  int8x16_t v29 = result[2];
  int8x16_t v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFF00FF00FF00FFLL;
  v37.i64[1] = 0xFF00FF00FF00FFLL;
  uint16x8_t v38 = a5;
  do
  {
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    int8x16_t v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    int8x16_t v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    int8x16_t v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    int8x16_t v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    int16x8_t v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    int8x16_t v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)int8x16_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    int8x16_t v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C79234(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v18 = *result;
  uint16x8_t v19 = result[1];
  uint16x8_t v20 = result[2];
  uint16x8_t v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v23 = v8 + 2;
  uint64_t v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xFF00FF00FF00FFLL;
  v26.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v27 = (int16x8_t)v18;
    int16x8_t v28 = (int16x8_t)v19;
    int16x8_t v29 = (int16x8_t)v20;
    int16x8_t v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    uint16x8_t v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    uint64_t result = (uint16x8_t *)((char *)result + v24);
    uint16x8_t v10 = (uint16x8_t)v27;
    uint16x8_t v9 = (uint16x8_t)v28;
    uint16x8_t v12 = (uint16x8_t)v29;
    uint16x8_t v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int16x8_t *sub_1D0C793B0(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFF00FF00FF00FFLL;
  v15.i64[1] = 0xFF00FF00FF00FFLL;
  int16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    int16x8_t v20 = result[2];
    int16x8_t v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    int8x16_t v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    int16x8_t v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C7951C(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 1;
  int v10 = a7 + 1;
  v11.i64[0] = 0xFF00FF00FF00FFLL;
  v11.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v12 = _X8[-1];
    int16x8_t v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)_X8);
    int8x16_t v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 3uLL), v13, 3uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C7957C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2F524(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v13 = *_X5;
  int8x16_t v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v20 = *result;
  int8x16_t v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  uint64_t v24 = (__int16 *)(a5 + 1);
  uint64_t v25 = 2 * a2;
  signed int v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xFF00FF00FF00FFLL;
  v30.i64[1] = 0xFF00FF00FF00FFLL;
  uint16x8_t v31 = v24;
  do
  {
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    int16x8_t v33 = (int16x8_t)v21;
    int16x8_t v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    int8x16_t v20 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v37 = (int8x16_t)vld1q_dup_s16(v31++);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *uint64_t v24 = v21.i16[7];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    int8x16_t v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *uint64_t result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    uint16x8_t v42 = result[2].i16;
    --v26;
    uint64_t result = (int8x16_t *)((char *)result + v25);
    int8x16_t v23 = (int8x16_t)vld1q_dup_s16(v42);
    uint64_t v24 = (__int16 *)v31;
    int8x16_t v13 = (int8x16_t)v34;
    int8x16_t v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int8x16_t *sub_1D0C79714(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2F948(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *result;
  int8x16_t v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xFF00FF00FF00FFLL;
  v32.i64[1] = 0xFF00FF00FF00FFLL;
  int16x8_t v33 = a5;
  do
  {
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    int16x8_t v35 = (int16x8_t)v25;
    int16x8_t v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    int8x16_t v24 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    int16x8_t v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    int8x16_t v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    uint64_t result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    int8x16_t v17 = (int8x16_t)v36;
    int8x16_t v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C798C0(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v16 = *result;
  uint16x8_t v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v19 = 2 * a2;
  int v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xFF00FF00FF00FFLL;
  v22.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v23 = (int16x8_t)v16;
    int16x8_t v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    uint16x8_t v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v19);
    uint16x8_t v10 = (uint16x8_t)v23;
    uint16x8_t v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int16x8_t *sub_1D0C799BC(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFF00FF00FF00FFLL;
  v15.i64[1] = 0xFF00FF00FF00FFLL;
  uint16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    int8x16_t v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C79AB0(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  v10.i64[0] = 0xFF00FF00FF00FFLL;
  v10.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)result);
    *uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 3uLL))), (int16x8_t)0), v10);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1D0C79AFC(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D2F524(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  int16x8_t v17 = *result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned long long *)result);
  int v20 = (__int16 *)(a5 + 1);
  uint64_t v21 = 2 * a2;
  signed int v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xFF00FF00FF00FFLL;
  v26.i64[1] = 0xFF00FF00FF00FFLL;
  uint16x8_t v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    int8x16_t v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *int v20 = v29.i16[7];
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    uint16x8_t v34 = result[1].i16;
    --v22;
    uint64_t result = (int16x8_t *)((char *)result + v21);
    int8x16_t v19 = (int8x16_t)vld1q_dup_s16(v34);
    int v20 = (__int16 *)v27;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1D0C79C50(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D2F948(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const __int16 *)(a6 - 1);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v23 = *result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xFF00FF00FF00FFLL;
  v30.i64[1] = 0xFF00FF00FF00FFLL;
  int8x16_t v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    int8x16_t v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    uint16x8_t v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    uint64_t result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C79DB8(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v20 = 2 * a2;
  int v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xFF00FF00FF00FFLL;
  v24.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    uint16x8_t v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v18;
    int16x8_t v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int8x16_t *sub_1D0C79E8C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xFF00FF00FF00FFLL;
  v13.i64[1] = 0xFF00FF00FF00FFLL;
  int8x16_t v14 = a5;
  do
  {
    int16x8_t v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v21 = (int8x16_t)vld1q_dup_s16(v14++);
    uint16x8_t v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned long long *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    uint16x8_t v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    int16x8_t v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1D0C79F3C(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    for (int i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = result;
        do
        {
          int16x8_t v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          int16x8_t v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 7uLL);
          int16x8_t v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 7uLL);
          int16x8_t *v6 = vshlq_n_s16(*v6, 7uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 7uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      uint64_t result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int16x8_t *sub_1D0C79FC4(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xFE00FE00FE00FE00;
  v11.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v12 = _X9[-6];
    int16x8_t v13 = _X9[-5];
    int16x8_t v14 = _X9[-4];
    int16x8_t v15 = _X9[-3];
    int16x8_t v16 = _X9[-2];
    int16x8_t v17 = _X9[-1];
    int16x8_t v18 = *_X9;
    int16x8_t v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 4uLL), v13, 4uLL));
    int16x8_t v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    int16x8_t v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    int8x16_t v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 4uLL), v15, 4uLL));
    int16x8_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    int16x8_t v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    int8x16_t v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 4uLL), v17, 4uLL));
    int16x8_t v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    int16x8_t v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 4uLL), v19, 4uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int8x16_t *sub_1D0C7A0AC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2DB94(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 0x40) != 0) {
      a5[a7] = result->u16[a7 * a2 - 1];
    }
    if ((a4 & 4) == 0)
    {
      *a5++ = result[7].u16[7];
      _X5 = result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
    }
    int8x16_t v10 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v12 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = (int16x8_t)_X5[1];
    int16x8_t v16 = (int16x8_t)_X5[2];
    int16x8_t v15 = (int16x8_t)_X5[3];
    int16x8_t v18 = (int16x8_t)_X5[4];
    int16x8_t v17 = (int16x8_t)_X5[5];
    int16x8_t v19 = (int16x8_t)_X5[6];
    int8x16_t v20 = _X5[7];
    i16 = _X5[8].i16;
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *result;
    int8x16_t v29 = result[1];
    int8x16_t v30 = result[2];
    int8x16_t v31 = result[3];
    int8x16_t v32 = result + 6;
    int8x16_t v33 = result[6];
    int8x16_t v34 = result[4];
    int8x16_t v35 = result[5];
    uint64_t v36 = 2 * a2;
    signed int v37 = v8 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    int8x16_t v38 = result[7];
    __asm { PRFM            #0, [X0,#0x80] }
    int8x16_t v40 = (int8x16_t)vceqzq_s16(v12);
    int8x16_t v41 = (int8x16_t)vceqzq_s16(v11);
    __asm { PRFM            #0, [X0,#0xC0] }
    v43.i64[0] = 0x202020202020202;
    v43.i64[1] = 0x202020202020202;
    v44.i64[0] = 0xFE00FE00FE00FE00;
    v44.i64[1] = 0xFE00FE00FE00FE00;
    int8x16_t v45 = (int8x16_t)vld1q_dup_s16(i16);
    *a5 = v38.u16[7];
    uint16x8_t v46 = (__int16 *)(a5 + 1);
    uint16x8_t v47 = v46;
    do
    {
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 2uLL);
      int16x8_t v49 = (int16x8_t)v38;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 2uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 2uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 2uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 2uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 2uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 2uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = &v32->i8[v36];
      int8x16_t v28 = *(int8x16_t *)((char *)&v32[-6] + v36);
      int8x16_t v29 = *(int8x16_t *)((char *)&v32[-5] + v36);
      int8x16_t v30 = *(int8x16_t *)((char *)&v32[-4] + v36);
      int8x16_t v31 = *(int8x16_t *)((char *)&v32[-3] + v36);
      int8x16_t v34 = *(int8x16_t *)((char *)&v32[-2] + v36);
      int8x16_t v35 = *(int8x16_t *)((char *)&v32[-1] + v36);
      int8x16_t v33 = *(int8x16_t *)((char *)v32 + 2 * a2);
      int8x16_t v38 = *(int8x16_t *)((char *)&v32[1] + v36);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v59 = (int8x16_t)vld1q_dup_s16(v47++);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v20, v45, 2uLL);
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v59, v28, 0xEuLL);
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v14));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
      int8x16_t v65 = vqmovn_high_s16(vqmovn_s16(v63), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v13)));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v30, v31, 0xEuLL);
      int16x8_t v67 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v16));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v31, v34, 0xEuLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v67), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v15)));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v34, v35, 0xEuLL);
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v17));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v35, v33, 0xEuLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v18))), v71);
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v33, v38, 0xEuLL);
      *uint16x8_t v46 = v38.i16[7];
      int8x16_t v75 = vqtbl1q_s8(v9, vaddq_s8(v65, v43));
      int8x16_t v76 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v60, (uint16x8_t)v49), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v60)), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v74)), (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v49)));
      v32[-6] = vbslq_s8(v41, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v75.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      v32[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v75), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v9, vaddq_s8(v69, v43));
      v32[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      v32[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v44);
      int8x16_t v78 = vqtbl1q_s8(v9, vaddq_s8(v73, v43));
      v32[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
      v32[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v78), (int16x8_t)0), v44);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v76, v43));
      *(int16x8_t *)int8x16_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
      v32[1] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v49, v79), (int16x8_t)0), v44), (int8x16_t)v49);
      int8x16_t v80 = v32[2].i16;
      --v37;
      int8x16_t v32 = (int8x16_t *)((char *)v32 + v36);
      uint16x8_t v46 = (__int16 *)v47;
      int8x16_t v20 = (int8x16_t)v49;
      int8x16_t v45 = (int8x16_t)vld1q_dup_s16(v80);
    }
    while (v37 > 1);
  }
  return result;
}

int8x16_t *sub_1D0C7A418(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2DFB8(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 4) != 0)
    {
      int16x8_t v12 = &_X5[-1].i16[7];
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
    }
    else
    {
      int8x16_t v10 = a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
      *a5 = result[7].i16[7];
      _X5 = (int16x8_t *)result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
      a5 = (__int16 *)v10;
    }
    unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
    a5[v13 + 1] = result[7].i16[(int)(v13 + 1) * a2 + 7];
    int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v17 = *_X5;
    int16x8_t v16 = _X5[1];
    int16x8_t v18 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *result;
    int8x16_t v32 = result[1];
    int8x16_t v33 = result[2];
    int8x16_t v34 = result[3];
    int8x16_t v35 = result[4];
    int8x16_t v36 = result[5];
    signed int v37 = result + 6;
    int8x16_t v38 = result[6];
    int8x16_t v39 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int v42 = v13 + 2;
    uint64_t v43 = 2 * a2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v18);
    int8x16_t v45 = (int8x16_t)vceqzq_s16(v15);
    v46.i64[0] = 0x202020202020202;
    v46.i64[1] = 0x202020202020202;
    v47.i64[0] = 0xFE00FE00FE00FE00;
    v47.i64[1] = 0xFE00FE00FE00FE00;
    uint16x8_t v48 = a5;
    do
    {
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xEuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xEuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xEuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xEuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v20, 0xEuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 0xEuLL);
      int16x8_t v16 = (int16x8_t)v32;
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v17, 0xEuLL);
      int16x8_t v17 = (int16x8_t)v31;
      _X13 = &v37->i8[v43];
      int8x16_t v31 = *(int8x16_t *)((char *)&v37[-6] + v43);
      int8x16_t v32 = *(int8x16_t *)((char *)&v37[-5] + v43);
      int8x16_t v33 = *(int8x16_t *)((char *)&v37[-4] + v43);
      int8x16_t v34 = *(int8x16_t *)((char *)&v37[-3] + v43);
      int8x16_t v35 = *(int8x16_t *)((char *)&v37[-2] + v43);
      int8x16_t v36 = *(int8x16_t *)((char *)&v37[-1] + v43);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v56, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v56)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v17));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
      int16x8_t v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v16));
      uint16x8_t v63 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
      int8x16_t v64 = vqmovn_high_s16(vqmovn_s16(v60), v62);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v20));
      int16x8_t v66 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v63));
      int8x16_t v38 = *(int8x16_t *)((char *)v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)((char *)&v37[1] + v43);
      int16x8_t v67 = vaddq_s16(v66, (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v19));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v35, v36, 2uLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v65), v67);
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v36, v38, 2uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v73 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v21));
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v38, v39, 2uLL);
      int8x16_t v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v22))), v73);
      int16x8_t v76 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v74);
      int16x8_t v77 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v50)), v76);
      v76.i32[0] = v37[8 * ((a4 >> 1) & 1) - 6].u16[a2];
      uint16x8_t v78 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v76, 2uLL);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v64, v46));
      int8x16_t v80 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v77, (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v78)), (int16x8_t)vcgtq_u16(v78, (uint16x8_t)v23)));
      v37[-6] = vbslq_s8(v45, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v79.i8), (int16x8_t)0), v47), (int8x16_t)v17);
      v37[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v79), (int16x8_t)0), v47);
      int8x16_t v81 = vqtbl1q_s8(v9, vaddq_s8(v69, v46));
      v37[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v81.i8), (int16x8_t)0), v47);
      v37[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v81), (int16x8_t)0), v47);
      int8x16_t v82 = vqtbl1q_s8(v9, vaddq_s8(v75, v46));
      v37[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v82.i8), (int16x8_t)0), v47);
      v37[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v82), (int16x8_t)0), v47);
      int8x16_t v83 = vqtbl1q_s8(v9, vaddq_s8(v80, v46));
      *(int16x8_t *)signed int v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v83.i8), (int16x8_t)0), v47);
      v37[1] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v83), (int16x8_t)0), v47), (int8x16_t)v23);
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v48++);
      --v42;
      signed int v37 = (int8x16_t *)((char *)v37 + v43);
      *a5 = v23.i16[7];
      a5 = (__int16 *)v48;
    }
    while (v42 > 1);
  }
  return result;
}

uint64_t sub_1D0C7A794(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  uint16x8_t v14 = _X5[4];
  uint16x8_t v13 = _X5[5];
  uint16x8_t v16 = _X5[6];
  uint16x8_t v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v23 = *(uint16x8_t *)result;
  uint16x8_t v24 = *(uint16x8_t *)(result + 16);
  uint16x8_t v25 = *(uint16x8_t *)(result + 32);
  uint16x8_t v26 = *(uint16x8_t *)(result + 48);
  uint16x8_t v27 = *(uint16x8_t *)(result + 64);
  uint16x8_t v28 = *(uint16x8_t *)(result + 80);
  int8x16_t v29 = (int16x8_t *)(result + 96);
  uint16x8_t v30 = *(uint16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v34 = v8 + 2;
  uint64_t v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFE00FE00FE00FE00;
  v37.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v38 = (int16x8_t)v31;
    int16x8_t v39 = (int16x8_t)v30;
    int16x8_t v40 = (int16x8_t)v28;
    int16x8_t v41 = (int16x8_t)v27;
    int16x8_t v42 = (int16x8_t)v26;
    int16x8_t v43 = (int16x8_t)v25;
    int16x8_t v44 = (int16x8_t)v24;
    int16x8_t v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    uint16x8_t v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    uint16x8_t v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    uint16x8_t v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *int8x16_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v29 = (int16x8_t *)((char *)v29 + v35);
    uint16x8_t v10 = (uint16x8_t)v45;
    uint16x8_t v9 = (uint16x8_t)v44;
    uint16x8_t v12 = (uint16x8_t)v43;
    uint16x8_t v11 = (uint16x8_t)v42;
    uint16x8_t v14 = (uint16x8_t)v41;
    uint16x8_t v13 = (uint16x8_t)v40;
    uint16x8_t v16 = (uint16x8_t)v39;
    uint16x8_t v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int16x8_t *sub_1D0C7AA44(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F0D0);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F150);
  int v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  uint16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v18 = result[2];
    int16x8_t v19 = result[3];
    int16x8_t v20 = result[4];
    int16x8_t v21 = result[5];
    int16x8_t v23 = result[6];
    int16x8_t v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    int8x16_t v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    int16x8_t v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    int16x8_t v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    int8x16_t v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

int16x8_t *sub_1D0C7ACBC(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 2;
  int v10 = a7 + 1;
  v11.i64[0] = 0xFE00FE00FE00FE00;
  v11.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v12 = _X8[-2];
    int16x8_t v13 = _X8[-1];
    int16x8_t v14 = *_X8;
    int16x8_t v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    int8x16_t v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 4uLL), v13, 4uLL));
    int16x8_t v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    int16x8_t v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    int8x16_t v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 4uLL), v15, 4uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C7AD48(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2DB94(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v13 = *(int16x8_t *)_X5;
  int16x8_t v12 = (int16x8_t)_X5[1];
  int8x16_t v14 = _X5[2];
  int8x16_t v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v22 = *result;
  int8x16_t v23 = result[1];
  int8x16_t v24 = result[2];
  int8x16_t v25 = result[3];
  uint16x8_t v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  int8x16_t v29 = (__int16 *)(a5 + 1);
  uint64_t v30 = a2;
  signed int v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xFE00FE00FE00FE00;
  v35.i64[1] = 0xFE00FE00FE00FE00;
  uint16x8_t v36 = v29;
  do
  {
    int16x8_t v37 = (int16x8_t)v25;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    int16x8_t v39 = (int16x8_t)v24;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    int16x8_t v12 = (int16x8_t)v23;
    int16x8_t v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    int8x16_t v22 = *(int8x16_t *)&v26[v30 - 32];
    int8x16_t v23 = *(int8x16_t *)&v26[v30 - 24];
    int8x16_t v24 = *(int8x16_t *)&v26[v30 - 16];
    int8x16_t v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    int8x16_t v43 = (int8x16_t)vld1q_dup_s16(v36++);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *int8x16_t v29 = v25.i16[7];
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    uint16x8_t v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    int8x16_t v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    int8x16_t v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    uint16x8_t v26 = (const __int16 *)((char *)v26 + v30 * 2);
    int8x16_t v29 = (__int16 *)v36;
    int8x16_t v14 = (int8x16_t)v39;
    int8x16_t v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int8x16_t *sub_1D0C7AF68(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2DFB8(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *result;
  int8x16_t v27 = result[1];
  int8x16_t v28 = result + 2;
  int8x16_t v29 = result[2];
  int8x16_t v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFE00FE00FE00FE00;
  v37.i64[1] = 0xFE00FE00FE00FE00;
  uint16x8_t v38 = a5;
  do
  {
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    int8x16_t v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    int8x16_t v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    int8x16_t v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    int8x16_t v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    int16x8_t v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    int8x16_t v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)int8x16_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    int8x16_t v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C7B1A4(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v18 = *result;
  uint16x8_t v19 = result[1];
  uint16x8_t v20 = result[2];
  uint16x8_t v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v23 = v8 + 2;
  uint64_t v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xFE00FE00FE00FE00;
  v26.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v27 = (int16x8_t)v18;
    int16x8_t v28 = (int16x8_t)v19;
    int16x8_t v29 = (int16x8_t)v20;
    int16x8_t v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    uint16x8_t v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    uint64_t result = (uint16x8_t *)((char *)result + v24);
    uint16x8_t v10 = (uint16x8_t)v27;
    uint16x8_t v9 = (uint16x8_t)v28;
    uint16x8_t v12 = (uint16x8_t)v29;
    uint16x8_t v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int16x8_t *sub_1D0C7B320(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFE00FE00FE00FE00;
  v15.i64[1] = 0xFE00FE00FE00FE00;
  int16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    int16x8_t v20 = result[2];
    int16x8_t v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    int8x16_t v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    int16x8_t v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C7B48C(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 1;
  int v10 = a7 + 1;
  v11.i64[0] = 0xFE00FE00FE00FE00;
  v11.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v12 = _X8[-1];
    int16x8_t v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)_X8);
    int8x16_t v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 4uLL), v13, 4uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C7B4EC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2DB94(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v13 = *_X5;
  int8x16_t v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v20 = *result;
  int8x16_t v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  uint64_t v24 = (__int16 *)(a5 + 1);
  uint64_t v25 = 2 * a2;
  signed int v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xFE00FE00FE00FE00;
  v30.i64[1] = 0xFE00FE00FE00FE00;
  uint16x8_t v31 = v24;
  do
  {
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    int16x8_t v33 = (int16x8_t)v21;
    int16x8_t v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    int8x16_t v20 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v37 = (int8x16_t)vld1q_dup_s16(v31++);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *uint64_t v24 = v21.i16[7];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    int8x16_t v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *uint64_t result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    uint16x8_t v42 = result[2].i16;
    --v26;
    uint64_t result = (int8x16_t *)((char *)result + v25);
    int8x16_t v23 = (int8x16_t)vld1q_dup_s16(v42);
    uint64_t v24 = (__int16 *)v31;
    int8x16_t v13 = (int8x16_t)v34;
    int8x16_t v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int8x16_t *sub_1D0C7B684(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2DFB8(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *result;
  int8x16_t v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xFE00FE00FE00FE00;
  v32.i64[1] = 0xFE00FE00FE00FE00;
  int16x8_t v33 = a5;
  do
  {
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    int16x8_t v35 = (int16x8_t)v25;
    int16x8_t v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    int8x16_t v24 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    int16x8_t v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    int8x16_t v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    uint64_t result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    int8x16_t v17 = (int8x16_t)v36;
    int8x16_t v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C7B830(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v16 = *result;
  uint16x8_t v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v19 = 2 * a2;
  int v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xFE00FE00FE00FE00;
  v22.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v23 = (int16x8_t)v16;
    int16x8_t v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    uint16x8_t v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v19);
    uint16x8_t v10 = (uint16x8_t)v23;
    uint16x8_t v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int16x8_t *sub_1D0C7B92C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFE00FE00FE00FE00;
  v15.i64[1] = 0xFE00FE00FE00FE00;
  uint16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    int8x16_t v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C7BA20(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  v10.i64[0] = 0xFE00FE00FE00FE00;
  v10.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)result);
    *uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 4uLL))), (int16x8_t)0), v10);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1D0C7BA6C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D2DB94(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  int16x8_t v17 = *result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned long long *)result);
  int v20 = (__int16 *)(a5 + 1);
  uint64_t v21 = 2 * a2;
  signed int v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xFE00FE00FE00FE00;
  v26.i64[1] = 0xFE00FE00FE00FE00;
  uint16x8_t v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    int8x16_t v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *int v20 = v29.i16[7];
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    uint16x8_t v34 = result[1].i16;
    --v22;
    uint64_t result = (int16x8_t *)((char *)result + v21);
    int8x16_t v19 = (int8x16_t)vld1q_dup_s16(v34);
    int v20 = (__int16 *)v27;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1D0C7BBC0(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D2DFB8(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const __int16 *)(a6 - 1);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v23 = *result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xFE00FE00FE00FE00;
  v30.i64[1] = 0xFE00FE00FE00FE00;
  int8x16_t v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    int8x16_t v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    uint16x8_t v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    uint64_t result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C7BD28(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v20 = 2 * a2;
  int v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xFE00FE00FE00FE00;
  v24.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    uint16x8_t v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v18;
    int16x8_t v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int8x16_t *sub_1D0C7BDFC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xFE00FE00FE00FE00;
  v13.i64[1] = 0xFE00FE00FE00FE00;
  int8x16_t v14 = a5;
  do
  {
    int16x8_t v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v21 = (int8x16_t)vld1q_dup_s16(v14++);
    uint16x8_t v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned long long *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    uint16x8_t v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    int16x8_t v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1D0C7BEAC(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    for (int i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = result;
        do
        {
          int16x8_t v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          int16x8_t v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 6uLL);
          int16x8_t v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 6uLL);
          int16x8_t *v6 = vshlq_n_s16(*v6, 6uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 6uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      uint64_t result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int16x8_t *sub_1D0C7BF34(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v12 = _X9[-6];
    int16x8_t v13 = _X9[-5];
    int16x8_t v14 = _X9[-4];
    int16x8_t v15 = _X9[-3];
    int16x8_t v16 = _X9[-2];
    int16x8_t v17 = _X9[-1];
    int16x8_t v18 = *_X9;
    int16x8_t v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 5uLL), v13, 5uLL));
    int16x8_t v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    int16x8_t v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    int8x16_t v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 5uLL), v15, 5uLL));
    int16x8_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    int16x8_t v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    int8x16_t v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 5uLL), v17, 5uLL));
    int16x8_t v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    int16x8_t v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 5uLL), v19, 5uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int8x16_t *sub_1D0C7C01C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2C204(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 0x40) != 0) {
      a5[a7] = result->u16[a7 * a2 - 1];
    }
    if ((a4 & 4) == 0)
    {
      *a5++ = result[7].u16[7];
      _X5 = result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
    }
    int8x16_t v10 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v12 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = (int16x8_t)_X5[1];
    int16x8_t v16 = (int16x8_t)_X5[2];
    int16x8_t v15 = (int16x8_t)_X5[3];
    int16x8_t v18 = (int16x8_t)_X5[4];
    int16x8_t v17 = (int16x8_t)_X5[5];
    int16x8_t v19 = (int16x8_t)_X5[6];
    int8x16_t v20 = _X5[7];
    i16 = _X5[8].i16;
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *result;
    int8x16_t v29 = result[1];
    int8x16_t v30 = result[2];
    int8x16_t v31 = result[3];
    int8x16_t v32 = result + 6;
    int8x16_t v33 = result[6];
    int8x16_t v34 = result[4];
    int8x16_t v35 = result[5];
    uint64_t v36 = 2 * a2;
    signed int v37 = v8 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    int8x16_t v38 = result[7];
    __asm { PRFM            #0, [X0,#0x80] }
    int8x16_t v40 = (int8x16_t)vceqzq_s16(v12);
    int8x16_t v41 = (int8x16_t)vceqzq_s16(v11);
    __asm { PRFM            #0, [X0,#0xC0] }
    v43.i64[0] = 0x202020202020202;
    v43.i64[1] = 0x202020202020202;
    v44.i64[0] = 0xFC00FC00FC00FC00;
    v44.i64[1] = 0xFC00FC00FC00FC00;
    int8x16_t v45 = (int8x16_t)vld1q_dup_s16(i16);
    *a5 = v38.u16[7];
    uint16x8_t v46 = (__int16 *)(a5 + 1);
    uint16x8_t v47 = v46;
    do
    {
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 2uLL);
      int16x8_t v49 = (int16x8_t)v38;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 2uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 2uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 2uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 2uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 2uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 2uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = &v32->i8[v36];
      int8x16_t v28 = *(int8x16_t *)((char *)&v32[-6] + v36);
      int8x16_t v29 = *(int8x16_t *)((char *)&v32[-5] + v36);
      int8x16_t v30 = *(int8x16_t *)((char *)&v32[-4] + v36);
      int8x16_t v31 = *(int8x16_t *)((char *)&v32[-3] + v36);
      int8x16_t v34 = *(int8x16_t *)((char *)&v32[-2] + v36);
      int8x16_t v35 = *(int8x16_t *)((char *)&v32[-1] + v36);
      int8x16_t v33 = *(int8x16_t *)((char *)v32 + 2 * a2);
      int8x16_t v38 = *(int8x16_t *)((char *)&v32[1] + v36);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v59 = (int8x16_t)vld1q_dup_s16(v47++);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v20, v45, 2uLL);
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v59, v28, 0xEuLL);
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v14));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
      int8x16_t v65 = vqmovn_high_s16(vqmovn_s16(v63), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v13)));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v30, v31, 0xEuLL);
      int16x8_t v67 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v16));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v31, v34, 0xEuLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v67), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v15)));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v34, v35, 0xEuLL);
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v17));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v35, v33, 0xEuLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v18))), v71);
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v33, v38, 0xEuLL);
      *uint16x8_t v46 = v38.i16[7];
      int8x16_t v75 = vqtbl1q_s8(v9, vaddq_s8(v65, v43));
      int8x16_t v76 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v60, (uint16x8_t)v49), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v60)), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v74)), (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v49)));
      v32[-6] = vbslq_s8(v41, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v75.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      v32[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v75), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v9, vaddq_s8(v69, v43));
      v32[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      v32[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v44);
      int8x16_t v78 = vqtbl1q_s8(v9, vaddq_s8(v73, v43));
      v32[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
      v32[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v78), (int16x8_t)0), v44);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v76, v43));
      *(int16x8_t *)int8x16_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
      v32[1] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v49, v79), (int16x8_t)0), v44), (int8x16_t)v49);
      int8x16_t v80 = v32[2].i16;
      --v37;
      int8x16_t v32 = (int8x16_t *)((char *)v32 + v36);
      uint16x8_t v46 = (__int16 *)v47;
      int8x16_t v20 = (int8x16_t)v49;
      int8x16_t v45 = (int8x16_t)vld1q_dup_s16(v80);
    }
    while (v37 > 1);
  }
  return result;
}

int8x16_t *sub_1D0C7C388(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2C628(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 4) != 0)
    {
      int16x8_t v12 = &_X5[-1].i16[7];
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
    }
    else
    {
      int8x16_t v10 = a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
      *a5 = result[7].i16[7];
      _X5 = (int16x8_t *)result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
      a5 = (__int16 *)v10;
    }
    unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
    a5[v13 + 1] = result[7].i16[(int)(v13 + 1) * a2 + 7];
    int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v17 = *_X5;
    int16x8_t v16 = _X5[1];
    int16x8_t v18 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *result;
    int8x16_t v32 = result[1];
    int8x16_t v33 = result[2];
    int8x16_t v34 = result[3];
    int8x16_t v35 = result[4];
    int8x16_t v36 = result[5];
    signed int v37 = result + 6;
    int8x16_t v38 = result[6];
    int8x16_t v39 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int v42 = v13 + 2;
    uint64_t v43 = 2 * a2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v18);
    int8x16_t v45 = (int8x16_t)vceqzq_s16(v15);
    v46.i64[0] = 0x202020202020202;
    v46.i64[1] = 0x202020202020202;
    v47.i64[0] = 0xFC00FC00FC00FC00;
    v47.i64[1] = 0xFC00FC00FC00FC00;
    uint16x8_t v48 = a5;
    do
    {
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xEuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xEuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xEuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xEuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v20, 0xEuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 0xEuLL);
      int16x8_t v16 = (int16x8_t)v32;
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v17, 0xEuLL);
      int16x8_t v17 = (int16x8_t)v31;
      _X13 = &v37->i8[v43];
      int8x16_t v31 = *(int8x16_t *)((char *)&v37[-6] + v43);
      int8x16_t v32 = *(int8x16_t *)((char *)&v37[-5] + v43);
      int8x16_t v33 = *(int8x16_t *)((char *)&v37[-4] + v43);
      int8x16_t v34 = *(int8x16_t *)((char *)&v37[-3] + v43);
      int8x16_t v35 = *(int8x16_t *)((char *)&v37[-2] + v43);
      int8x16_t v36 = *(int8x16_t *)((char *)&v37[-1] + v43);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v56, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v56)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v17));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
      int16x8_t v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v16));
      uint16x8_t v63 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
      int8x16_t v64 = vqmovn_high_s16(vqmovn_s16(v60), v62);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v20));
      int16x8_t v66 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v63));
      int8x16_t v38 = *(int8x16_t *)((char *)v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)((char *)&v37[1] + v43);
      int16x8_t v67 = vaddq_s16(v66, (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v19));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v35, v36, 2uLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v65), v67);
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v36, v38, 2uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v73 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v21));
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v38, v39, 2uLL);
      int8x16_t v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v22))), v73);
      int16x8_t v76 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v74);
      int16x8_t v77 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v50)), v76);
      v76.i32[0] = v37[8 * ((a4 >> 1) & 1) - 6].u16[a2];
      uint16x8_t v78 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v76, 2uLL);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v64, v46));
      int8x16_t v80 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v77, (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v78)), (int16x8_t)vcgtq_u16(v78, (uint16x8_t)v23)));
      v37[-6] = vbslq_s8(v45, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v79.i8), (int16x8_t)0), v47), (int8x16_t)v17);
      v37[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v79), (int16x8_t)0), v47);
      int8x16_t v81 = vqtbl1q_s8(v9, vaddq_s8(v69, v46));
      v37[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v81.i8), (int16x8_t)0), v47);
      v37[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v81), (int16x8_t)0), v47);
      int8x16_t v82 = vqtbl1q_s8(v9, vaddq_s8(v75, v46));
      v37[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v82.i8), (int16x8_t)0), v47);
      v37[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v82), (int16x8_t)0), v47);
      int8x16_t v83 = vqtbl1q_s8(v9, vaddq_s8(v80, v46));
      *(int16x8_t *)signed int v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v83.i8), (int16x8_t)0), v47);
      v37[1] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v83), (int16x8_t)0), v47), (int8x16_t)v23);
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v48++);
      --v42;
      signed int v37 = (int8x16_t *)((char *)v37 + v43);
      *a5 = v23.i16[7];
      a5 = (__int16 *)v48;
    }
    while (v42 > 1);
  }
  return result;
}

uint64_t sub_1D0C7C704(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  uint16x8_t v14 = _X5[4];
  uint16x8_t v13 = _X5[5];
  uint16x8_t v16 = _X5[6];
  uint16x8_t v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v23 = *(uint16x8_t *)result;
  uint16x8_t v24 = *(uint16x8_t *)(result + 16);
  uint16x8_t v25 = *(uint16x8_t *)(result + 32);
  uint16x8_t v26 = *(uint16x8_t *)(result + 48);
  uint16x8_t v27 = *(uint16x8_t *)(result + 64);
  uint16x8_t v28 = *(uint16x8_t *)(result + 80);
  int8x16_t v29 = (int16x8_t *)(result + 96);
  uint16x8_t v30 = *(uint16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v34 = v8 + 2;
  uint64_t v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFC00FC00FC00FC00;
  v37.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v38 = (int16x8_t)v31;
    int16x8_t v39 = (int16x8_t)v30;
    int16x8_t v40 = (int16x8_t)v28;
    int16x8_t v41 = (int16x8_t)v27;
    int16x8_t v42 = (int16x8_t)v26;
    int16x8_t v43 = (int16x8_t)v25;
    int16x8_t v44 = (int16x8_t)v24;
    int16x8_t v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    uint16x8_t v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    uint16x8_t v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    uint16x8_t v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *int8x16_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v29 = (int16x8_t *)((char *)v29 + v35);
    uint16x8_t v10 = (uint16x8_t)v45;
    uint16x8_t v9 = (uint16x8_t)v44;
    uint16x8_t v12 = (uint16x8_t)v43;
    uint16x8_t v11 = (uint16x8_t)v42;
    uint16x8_t v14 = (uint16x8_t)v41;
    uint16x8_t v13 = (uint16x8_t)v40;
    uint16x8_t v16 = (uint16x8_t)v39;
    uint16x8_t v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int16x8_t *sub_1D0C7C9B4(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F0D0);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F150);
  int v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  uint16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v18 = result[2];
    int16x8_t v19 = result[3];
    int16x8_t v20 = result[4];
    int16x8_t v21 = result[5];
    int16x8_t v23 = result[6];
    int16x8_t v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    int8x16_t v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    int16x8_t v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    int16x8_t v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    int8x16_t v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

int16x8_t *sub_1D0C7CC2C(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 2;
  int v10 = a7 + 1;
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v12 = _X8[-2];
    int16x8_t v13 = _X8[-1];
    int16x8_t v14 = *_X8;
    int16x8_t v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    int8x16_t v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 5uLL), v13, 5uLL));
    int16x8_t v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    int16x8_t v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    int8x16_t v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 5uLL), v15, 5uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C7CCB8(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2C204(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v13 = *(int16x8_t *)_X5;
  int16x8_t v12 = (int16x8_t)_X5[1];
  int8x16_t v14 = _X5[2];
  int8x16_t v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v22 = *result;
  int8x16_t v23 = result[1];
  int8x16_t v24 = result[2];
  int8x16_t v25 = result[3];
  uint16x8_t v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  int8x16_t v29 = (__int16 *)(a5 + 1);
  uint64_t v30 = a2;
  signed int v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xFC00FC00FC00FC00;
  v35.i64[1] = 0xFC00FC00FC00FC00;
  uint16x8_t v36 = v29;
  do
  {
    int16x8_t v37 = (int16x8_t)v25;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    int16x8_t v39 = (int16x8_t)v24;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    int16x8_t v12 = (int16x8_t)v23;
    int16x8_t v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    int8x16_t v22 = *(int8x16_t *)&v26[v30 - 32];
    int8x16_t v23 = *(int8x16_t *)&v26[v30 - 24];
    int8x16_t v24 = *(int8x16_t *)&v26[v30 - 16];
    int8x16_t v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    int8x16_t v43 = (int8x16_t)vld1q_dup_s16(v36++);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *int8x16_t v29 = v25.i16[7];
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    uint16x8_t v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    int8x16_t v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    int8x16_t v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    uint16x8_t v26 = (const __int16 *)((char *)v26 + v30 * 2);
    int8x16_t v29 = (__int16 *)v36;
    int8x16_t v14 = (int8x16_t)v39;
    int8x16_t v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int8x16_t *sub_1D0C7CED8(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2C628(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *result;
  int8x16_t v27 = result[1];
  int8x16_t v28 = result + 2;
  int8x16_t v29 = result[2];
  int8x16_t v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xFC00FC00FC00FC00;
  v37.i64[1] = 0xFC00FC00FC00FC00;
  uint16x8_t v38 = a5;
  do
  {
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    int8x16_t v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    int8x16_t v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    int8x16_t v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    int8x16_t v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    int16x8_t v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    int8x16_t v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)int8x16_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    int8x16_t v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C7D114(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v18 = *result;
  uint16x8_t v19 = result[1];
  uint16x8_t v20 = result[2];
  uint16x8_t v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v23 = v8 + 2;
  uint64_t v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xFC00FC00FC00FC00;
  v26.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v27 = (int16x8_t)v18;
    int16x8_t v28 = (int16x8_t)v19;
    int16x8_t v29 = (int16x8_t)v20;
    int16x8_t v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    uint16x8_t v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    uint64_t result = (uint16x8_t *)((char *)result + v24);
    uint16x8_t v10 = (uint16x8_t)v27;
    uint16x8_t v9 = (uint16x8_t)v28;
    uint16x8_t v12 = (uint16x8_t)v29;
    uint16x8_t v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int16x8_t *sub_1D0C7D290(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFC00FC00FC00FC00;
  v15.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    int16x8_t v20 = result[2];
    int16x8_t v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    int8x16_t v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    int16x8_t v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C7D3FC(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 1;
  int v10 = a7 + 1;
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v12 = _X8[-1];
    int16x8_t v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)_X8);
    int8x16_t v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 5uLL), v13, 5uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C7D45C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2C204(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v13 = *_X5;
  int8x16_t v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v20 = *result;
  int8x16_t v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  uint64_t v24 = (__int16 *)(a5 + 1);
  uint64_t v25 = 2 * a2;
  signed int v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xFC00FC00FC00FC00;
  v30.i64[1] = 0xFC00FC00FC00FC00;
  uint16x8_t v31 = v24;
  do
  {
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    int16x8_t v33 = (int16x8_t)v21;
    int16x8_t v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    int8x16_t v20 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v37 = (int8x16_t)vld1q_dup_s16(v31++);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *uint64_t v24 = v21.i16[7];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    int8x16_t v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *uint64_t result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    uint16x8_t v42 = result[2].i16;
    --v26;
    uint64_t result = (int8x16_t *)((char *)result + v25);
    int8x16_t v23 = (int8x16_t)vld1q_dup_s16(v42);
    uint64_t v24 = (__int16 *)v31;
    int8x16_t v13 = (int8x16_t)v34;
    int8x16_t v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int8x16_t *sub_1D0C7D5F4(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2C628(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *result;
  int8x16_t v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xFC00FC00FC00FC00;
  v32.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v33 = a5;
  do
  {
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    int16x8_t v35 = (int16x8_t)v25;
    int16x8_t v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    int8x16_t v24 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    int16x8_t v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    int8x16_t v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    uint64_t result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    int8x16_t v17 = (int8x16_t)v36;
    int8x16_t v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C7D7A0(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v16 = *result;
  uint16x8_t v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v19 = 2 * a2;
  int v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xFC00FC00FC00FC00;
  v22.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v23 = (int16x8_t)v16;
    int16x8_t v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    uint16x8_t v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v19);
    uint16x8_t v10 = (uint16x8_t)v23;
    uint16x8_t v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int16x8_t *sub_1D0C7D89C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xFC00FC00FC00FC00;
  v15.i64[1] = 0xFC00FC00FC00FC00;
  uint16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    int8x16_t v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C7D990(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  v10.i64[0] = 0xFC00FC00FC00FC00;
  v10.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)result);
    *uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 5uLL))), (int16x8_t)0), v10);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1D0C7D9DC(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D2C204(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  int16x8_t v17 = *result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned long long *)result);
  int v20 = (__int16 *)(a5 + 1);
  uint64_t v21 = 2 * a2;
  signed int v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xFC00FC00FC00FC00;
  v26.i64[1] = 0xFC00FC00FC00FC00;
  uint16x8_t v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    int8x16_t v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *int v20 = v29.i16[7];
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    uint16x8_t v34 = result[1].i16;
    --v22;
    uint64_t result = (int16x8_t *)((char *)result + v21);
    int8x16_t v19 = (int8x16_t)vld1q_dup_s16(v34);
    int v20 = (__int16 *)v27;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1D0C7DB30(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D2C628(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const __int16 *)(a6 - 1);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v23 = *result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xFC00FC00FC00FC00;
  v30.i64[1] = 0xFC00FC00FC00FC00;
  int8x16_t v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    int8x16_t v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    uint16x8_t v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    uint64_t result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C7DC98(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v20 = 2 * a2;
  int v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xFC00FC00FC00FC00;
  v24.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    uint16x8_t v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v18;
    int16x8_t v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int8x16_t *sub_1D0C7DD6C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xFC00FC00FC00FC00;
  v13.i64[1] = 0xFC00FC00FC00FC00;
  int8x16_t v14 = a5;
  do
  {
    int16x8_t v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v21 = (int8x16_t)vld1q_dup_s16(v14++);
    uint16x8_t v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned long long *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    uint16x8_t v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    int16x8_t v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1D0C7DE1C(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    for (int i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = result;
        do
        {
          int16x8_t v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          int16x8_t v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 5uLL);
          int16x8_t v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 5uLL);
          int16x8_t *v6 = vshlq_n_s16(*v6, 5uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 5uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      uint64_t result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int16x8_t *sub_1D0C7DEA4(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xF800F800F800F800;
  v11.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v12 = _X9[-6];
    int16x8_t v13 = _X9[-5];
    int16x8_t v14 = _X9[-4];
    int16x8_t v15 = _X9[-3];
    int16x8_t v16 = _X9[-2];
    int16x8_t v17 = _X9[-1];
    int16x8_t v18 = *_X9;
    int16x8_t v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 6uLL), v13, 6uLL));
    int16x8_t v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    int16x8_t v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    int8x16_t v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 6uLL), v15, 6uLL));
    int16x8_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    int16x8_t v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    int8x16_t v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 6uLL), v17, 6uLL));
    int16x8_t v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    int16x8_t v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 6uLL), v19, 6uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int8x16_t *sub_1D0C7DF8C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2A874(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 0x40) != 0) {
      a5[a7] = result->u16[a7 * a2 - 1];
    }
    if ((a4 & 4) == 0)
    {
      *a5++ = result[7].u16[7];
      _X5 = result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
    }
    int8x16_t v10 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v12 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = (int16x8_t)_X5[1];
    int16x8_t v16 = (int16x8_t)_X5[2];
    int16x8_t v15 = (int16x8_t)_X5[3];
    int16x8_t v18 = (int16x8_t)_X5[4];
    int16x8_t v17 = (int16x8_t)_X5[5];
    int16x8_t v19 = (int16x8_t)_X5[6];
    int8x16_t v20 = _X5[7];
    i16 = _X5[8].i16;
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *result;
    int8x16_t v29 = result[1];
    int8x16_t v30 = result[2];
    int8x16_t v31 = result[3];
    int8x16_t v32 = result + 6;
    int8x16_t v33 = result[6];
    int8x16_t v34 = result[4];
    int8x16_t v35 = result[5];
    uint64_t v36 = 2 * a2;
    signed int v37 = v8 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    int8x16_t v38 = result[7];
    __asm { PRFM            #0, [X0,#0x80] }
    int8x16_t v40 = (int8x16_t)vceqzq_s16(v12);
    int8x16_t v41 = (int8x16_t)vceqzq_s16(v11);
    __asm { PRFM            #0, [X0,#0xC0] }
    v43.i64[0] = 0x202020202020202;
    v43.i64[1] = 0x202020202020202;
    v44.i64[0] = 0xF800F800F800F800;
    v44.i64[1] = 0xF800F800F800F800;
    int8x16_t v45 = (int8x16_t)vld1q_dup_s16(i16);
    *a5 = v38.u16[7];
    uint16x8_t v46 = (__int16 *)(a5 + 1);
    uint16x8_t v47 = v46;
    do
    {
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 2uLL);
      int16x8_t v49 = (int16x8_t)v38;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 2uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 2uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 2uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 2uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 2uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 2uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = &v32->i8[v36];
      int8x16_t v28 = *(int8x16_t *)((char *)&v32[-6] + v36);
      int8x16_t v29 = *(int8x16_t *)((char *)&v32[-5] + v36);
      int8x16_t v30 = *(int8x16_t *)((char *)&v32[-4] + v36);
      int8x16_t v31 = *(int8x16_t *)((char *)&v32[-3] + v36);
      int8x16_t v34 = *(int8x16_t *)((char *)&v32[-2] + v36);
      int8x16_t v35 = *(int8x16_t *)((char *)&v32[-1] + v36);
      int8x16_t v33 = *(int8x16_t *)((char *)v32 + 2 * a2);
      int8x16_t v38 = *(int8x16_t *)((char *)&v32[1] + v36);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v59 = (int8x16_t)vld1q_dup_s16(v47++);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v20, v45, 2uLL);
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v59, v28, 0xEuLL);
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v14));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
      int8x16_t v65 = vqmovn_high_s16(vqmovn_s16(v63), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v13)));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v30, v31, 0xEuLL);
      int16x8_t v67 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v16));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v31, v34, 0xEuLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v67), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v15)));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v34, v35, 0xEuLL);
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v17));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v35, v33, 0xEuLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v18))), v71);
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v33, v38, 0xEuLL);
      *uint16x8_t v46 = v38.i16[7];
      int8x16_t v75 = vqtbl1q_s8(v9, vaddq_s8(v65, v43));
      int8x16_t v76 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v60, (uint16x8_t)v49), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v60)), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v74)), (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v49)));
      v32[-6] = vbslq_s8(v41, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v75.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      v32[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v75), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v9, vaddq_s8(v69, v43));
      v32[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      v32[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v44);
      int8x16_t v78 = vqtbl1q_s8(v9, vaddq_s8(v73, v43));
      v32[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
      v32[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v78), (int16x8_t)0), v44);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v76, v43));
      *(int16x8_t *)int8x16_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
      v32[1] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v49, v79), (int16x8_t)0), v44), (int8x16_t)v49);
      int8x16_t v80 = v32[2].i16;
      --v37;
      int8x16_t v32 = (int8x16_t *)((char *)v32 + v36);
      uint16x8_t v46 = (__int16 *)v47;
      int8x16_t v20 = (int8x16_t)v49;
      int8x16_t v45 = (int8x16_t)vld1q_dup_s16(v80);
    }
    while (v37 > 1);
  }
  return result;
}

int8x16_t *sub_1D0C7E2F8(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2AC98(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 4) != 0)
    {
      int16x8_t v12 = &_X5[-1].i16[7];
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
    }
    else
    {
      int8x16_t v10 = a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
      *a5 = result[7].i16[7];
      _X5 = (int16x8_t *)result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
      a5 = (__int16 *)v10;
    }
    unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
    a5[v13 + 1] = result[7].i16[(int)(v13 + 1) * a2 + 7];
    int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v17 = *_X5;
    int16x8_t v16 = _X5[1];
    int16x8_t v18 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *result;
    int8x16_t v32 = result[1];
    int8x16_t v33 = result[2];
    int8x16_t v34 = result[3];
    int8x16_t v35 = result[4];
    int8x16_t v36 = result[5];
    signed int v37 = result + 6;
    int8x16_t v38 = result[6];
    int8x16_t v39 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int v42 = v13 + 2;
    uint64_t v43 = 2 * a2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v18);
    int8x16_t v45 = (int8x16_t)vceqzq_s16(v15);
    v46.i64[0] = 0x202020202020202;
    v46.i64[1] = 0x202020202020202;
    v47.i64[0] = 0xF800F800F800F800;
    v47.i64[1] = 0xF800F800F800F800;
    uint16x8_t v48 = a5;
    do
    {
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xEuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xEuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xEuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xEuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v20, 0xEuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 0xEuLL);
      int16x8_t v16 = (int16x8_t)v32;
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v17, 0xEuLL);
      int16x8_t v17 = (int16x8_t)v31;
      _X13 = &v37->i8[v43];
      int8x16_t v31 = *(int8x16_t *)((char *)&v37[-6] + v43);
      int8x16_t v32 = *(int8x16_t *)((char *)&v37[-5] + v43);
      int8x16_t v33 = *(int8x16_t *)((char *)&v37[-4] + v43);
      int8x16_t v34 = *(int8x16_t *)((char *)&v37[-3] + v43);
      int8x16_t v35 = *(int8x16_t *)((char *)&v37[-2] + v43);
      int8x16_t v36 = *(int8x16_t *)((char *)&v37[-1] + v43);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v56, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v56)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v17));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
      int16x8_t v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v16));
      uint16x8_t v63 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
      int8x16_t v64 = vqmovn_high_s16(vqmovn_s16(v60), v62);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v20));
      int16x8_t v66 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v63));
      int8x16_t v38 = *(int8x16_t *)((char *)v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)((char *)&v37[1] + v43);
      int16x8_t v67 = vaddq_s16(v66, (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v19));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v35, v36, 2uLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v65), v67);
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v36, v38, 2uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v73 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v21));
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v38, v39, 2uLL);
      int8x16_t v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v22))), v73);
      int16x8_t v76 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v74);
      int16x8_t v77 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v50)), v76);
      v76.i32[0] = v37[8 * ((a4 >> 1) & 1) - 6].u16[a2];
      uint16x8_t v78 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v76, 2uLL);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v64, v46));
      int8x16_t v80 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v77, (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v78)), (int16x8_t)vcgtq_u16(v78, (uint16x8_t)v23)));
      v37[-6] = vbslq_s8(v45, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v79.i8), (int16x8_t)0), v47), (int8x16_t)v17);
      v37[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v79), (int16x8_t)0), v47);
      int8x16_t v81 = vqtbl1q_s8(v9, vaddq_s8(v69, v46));
      v37[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v81.i8), (int16x8_t)0), v47);
      v37[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v81), (int16x8_t)0), v47);
      int8x16_t v82 = vqtbl1q_s8(v9, vaddq_s8(v75, v46));
      v37[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v82.i8), (int16x8_t)0), v47);
      v37[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v82), (int16x8_t)0), v47);
      int8x16_t v83 = vqtbl1q_s8(v9, vaddq_s8(v80, v46));
      *(int16x8_t *)signed int v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v83.i8), (int16x8_t)0), v47);
      v37[1] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v83), (int16x8_t)0), v47), (int8x16_t)v23);
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v48++);
      --v42;
      signed int v37 = (int8x16_t *)((char *)v37 + v43);
      *a5 = v23.i16[7];
      a5 = (__int16 *)v48;
    }
    while (v42 > 1);
  }
  return result;
}

uint64_t sub_1D0C7E674(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  uint16x8_t v14 = _X5[4];
  uint16x8_t v13 = _X5[5];
  uint16x8_t v16 = _X5[6];
  uint16x8_t v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v23 = *(uint16x8_t *)result;
  uint16x8_t v24 = *(uint16x8_t *)(result + 16);
  uint16x8_t v25 = *(uint16x8_t *)(result + 32);
  uint16x8_t v26 = *(uint16x8_t *)(result + 48);
  uint16x8_t v27 = *(uint16x8_t *)(result + 64);
  uint16x8_t v28 = *(uint16x8_t *)(result + 80);
  int8x16_t v29 = (int16x8_t *)(result + 96);
  uint16x8_t v30 = *(uint16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v34 = v8 + 2;
  uint64_t v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xF800F800F800F800;
  v37.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v38 = (int16x8_t)v31;
    int16x8_t v39 = (int16x8_t)v30;
    int16x8_t v40 = (int16x8_t)v28;
    int16x8_t v41 = (int16x8_t)v27;
    int16x8_t v42 = (int16x8_t)v26;
    int16x8_t v43 = (int16x8_t)v25;
    int16x8_t v44 = (int16x8_t)v24;
    int16x8_t v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    uint16x8_t v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    uint16x8_t v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    uint16x8_t v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *int8x16_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v29 = (int16x8_t *)((char *)v29 + v35);
    uint16x8_t v10 = (uint16x8_t)v45;
    uint16x8_t v9 = (uint16x8_t)v44;
    uint16x8_t v12 = (uint16x8_t)v43;
    uint16x8_t v11 = (uint16x8_t)v42;
    uint16x8_t v14 = (uint16x8_t)v41;
    uint16x8_t v13 = (uint16x8_t)v40;
    uint16x8_t v16 = (uint16x8_t)v39;
    uint16x8_t v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int16x8_t *sub_1D0C7E924(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F0D0);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F150);
  int v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  uint16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v18 = result[2];
    int16x8_t v19 = result[3];
    int16x8_t v20 = result[4];
    int16x8_t v21 = result[5];
    int16x8_t v23 = result[6];
    int16x8_t v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    int8x16_t v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    int16x8_t v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    int16x8_t v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    int8x16_t v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

int16x8_t *sub_1D0C7EB9C(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 2;
  int v10 = a7 + 1;
  v11.i64[0] = 0xF800F800F800F800;
  v11.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v12 = _X8[-2];
    int16x8_t v13 = _X8[-1];
    int16x8_t v14 = *_X8;
    int16x8_t v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    int8x16_t v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 6uLL), v13, 6uLL));
    int16x8_t v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    int16x8_t v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    int8x16_t v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 6uLL), v15, 6uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C7EC28(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2A874(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v13 = *(int16x8_t *)_X5;
  int16x8_t v12 = (int16x8_t)_X5[1];
  int8x16_t v14 = _X5[2];
  int8x16_t v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v22 = *result;
  int8x16_t v23 = result[1];
  int8x16_t v24 = result[2];
  int8x16_t v25 = result[3];
  uint16x8_t v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  int8x16_t v29 = (__int16 *)(a5 + 1);
  uint64_t v30 = a2;
  signed int v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xF800F800F800F800;
  v35.i64[1] = 0xF800F800F800F800;
  uint16x8_t v36 = v29;
  do
  {
    int16x8_t v37 = (int16x8_t)v25;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    int16x8_t v39 = (int16x8_t)v24;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    int16x8_t v12 = (int16x8_t)v23;
    int16x8_t v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    int8x16_t v22 = *(int8x16_t *)&v26[v30 - 32];
    int8x16_t v23 = *(int8x16_t *)&v26[v30 - 24];
    int8x16_t v24 = *(int8x16_t *)&v26[v30 - 16];
    int8x16_t v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    int8x16_t v43 = (int8x16_t)vld1q_dup_s16(v36++);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *int8x16_t v29 = v25.i16[7];
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    uint16x8_t v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    int8x16_t v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    int8x16_t v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    uint16x8_t v26 = (const __int16 *)((char *)v26 + v30 * 2);
    int8x16_t v29 = (__int16 *)v36;
    int8x16_t v14 = (int8x16_t)v39;
    int8x16_t v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int8x16_t *sub_1D0C7EE48(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2AC98(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *result;
  int8x16_t v27 = result[1];
  int8x16_t v28 = result + 2;
  int8x16_t v29 = result[2];
  int8x16_t v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xF800F800F800F800;
  v37.i64[1] = 0xF800F800F800F800;
  uint16x8_t v38 = a5;
  do
  {
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    int8x16_t v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    int8x16_t v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    int8x16_t v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    int8x16_t v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    int16x8_t v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    int8x16_t v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)int8x16_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    int8x16_t v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C7F084(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v18 = *result;
  uint16x8_t v19 = result[1];
  uint16x8_t v20 = result[2];
  uint16x8_t v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v23 = v8 + 2;
  uint64_t v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xF800F800F800F800;
  v26.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v27 = (int16x8_t)v18;
    int16x8_t v28 = (int16x8_t)v19;
    int16x8_t v29 = (int16x8_t)v20;
    int16x8_t v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    uint16x8_t v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    uint64_t result = (uint16x8_t *)((char *)result + v24);
    uint16x8_t v10 = (uint16x8_t)v27;
    uint16x8_t v9 = (uint16x8_t)v28;
    uint16x8_t v12 = (uint16x8_t)v29;
    uint16x8_t v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int16x8_t *sub_1D0C7F200(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xF800F800F800F800;
  v15.i64[1] = 0xF800F800F800F800;
  int16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    int16x8_t v20 = result[2];
    int16x8_t v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    int8x16_t v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    int16x8_t v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C7F36C(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 1;
  int v10 = a7 + 1;
  v11.i64[0] = 0xF800F800F800F800;
  v11.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v12 = _X8[-1];
    int16x8_t v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)_X8);
    int8x16_t v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 6uLL), v13, 6uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C7F3CC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2A874(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v13 = *_X5;
  int8x16_t v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v20 = *result;
  int8x16_t v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  uint64_t v24 = (__int16 *)(a5 + 1);
  uint64_t v25 = 2 * a2;
  signed int v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xF800F800F800F800;
  v30.i64[1] = 0xF800F800F800F800;
  uint16x8_t v31 = v24;
  do
  {
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    int16x8_t v33 = (int16x8_t)v21;
    int16x8_t v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    int8x16_t v20 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v37 = (int8x16_t)vld1q_dup_s16(v31++);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *uint64_t v24 = v21.i16[7];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    int8x16_t v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *uint64_t result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    uint16x8_t v42 = result[2].i16;
    --v26;
    uint64_t result = (int8x16_t *)((char *)result + v25);
    int8x16_t v23 = (int8x16_t)vld1q_dup_s16(v42);
    uint64_t v24 = (__int16 *)v31;
    int8x16_t v13 = (int8x16_t)v34;
    int8x16_t v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int8x16_t *sub_1D0C7F564(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D2AC98(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *result;
  int8x16_t v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xF800F800F800F800;
  v32.i64[1] = 0xF800F800F800F800;
  int16x8_t v33 = a5;
  do
  {
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    int16x8_t v35 = (int16x8_t)v25;
    int16x8_t v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    int8x16_t v24 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    int16x8_t v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    int8x16_t v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    uint64_t result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    int8x16_t v17 = (int8x16_t)v36;
    int8x16_t v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C7F710(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v16 = *result;
  uint16x8_t v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v19 = 2 * a2;
  int v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xF800F800F800F800;
  v22.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v23 = (int16x8_t)v16;
    int16x8_t v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    uint16x8_t v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v19);
    uint16x8_t v10 = (uint16x8_t)v23;
    uint16x8_t v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int16x8_t *sub_1D0C7F80C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xF800F800F800F800;
  v15.i64[1] = 0xF800F800F800F800;
  uint16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    int8x16_t v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C7F900(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  v10.i64[0] = 0xF800F800F800F800;
  v10.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)result);
    *uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 6uLL))), (int16x8_t)0), v10);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1D0C7F94C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D2A874(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  int16x8_t v17 = *result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned long long *)result);
  int v20 = (__int16 *)(a5 + 1);
  uint64_t v21 = 2 * a2;
  signed int v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xF800F800F800F800;
  v26.i64[1] = 0xF800F800F800F800;
  uint16x8_t v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    int8x16_t v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *int v20 = v29.i16[7];
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    uint16x8_t v34 = result[1].i16;
    --v22;
    uint64_t result = (int16x8_t *)((char *)result + v21);
    int8x16_t v19 = (int8x16_t)vld1q_dup_s16(v34);
    int v20 = (__int16 *)v27;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1D0C7FAA0(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D2AC98(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const __int16 *)(a6 - 1);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v23 = *result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xF800F800F800F800;
  v30.i64[1] = 0xF800F800F800F800;
  int8x16_t v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    int8x16_t v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    uint16x8_t v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    uint64_t result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C7FC08(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v20 = 2 * a2;
  int v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xF800F800F800F800;
  v24.i64[1] = 0xF800F800F800F800;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    uint16x8_t v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v18;
    int16x8_t v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int8x16_t *sub_1D0C7FCDC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xF800F800F800F800;
  v13.i64[1] = 0xF800F800F800F800;
  int8x16_t v14 = a5;
  do
  {
    int16x8_t v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v21 = (int8x16_t)vld1q_dup_s16(v14++);
    uint16x8_t v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned long long *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    uint16x8_t v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    int16x8_t v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1D0C7FD8C(int16x8_t *result, uint64_t a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    for (int i = 0; i < a4; i += 4)
    {
      if (a3 >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = result;
        do
        {
          int16x8_t v7 = *(int16x8_t *)((char *)v6 + 6 * a2);
          int16x8_t v8 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 2 * a2), 4uLL);
          int16x8_t v9 = vshlq_n_s16(*(int16x8_t *)((char *)v6 + 4 * a2), 4uLL);
          int16x8_t *v6 = vshlq_n_s16(*v6, 4uLL);
          *(int16x8_t *)((char *)v6 + 2 * a2) = v8;
          *(int16x8_t *)((char *)v6 + 4 * a2) = v9;
          *(int16x8_t *)((char *)v6 + 6 * a2) = vshlq_n_s16(v7, 4uLL);
          v5 += 8;
          ++v6;
        }
        while (v5 < a3);
      }
      uint64_t result = (int16x8_t *)((char *)result + 8 * a2);
    }
  }
  return result;
}

int16x8_t *sub_1D0C7FE14(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  _X9 = result + 6;
  v11.i64[0] = 0xF000F000F000F000;
  v11.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v12 = _X9[-6];
    int16x8_t v13 = _X9[-5];
    int16x8_t v14 = _X9[-4];
    int16x8_t v15 = _X9[-3];
    int16x8_t v16 = _X9[-2];
    int16x8_t v17 = _X9[-1];
    int16x8_t v18 = *_X9;
    int16x8_t v19 = _X9[1];
    __asm
    {
      PRFM            #0, [X9,#0x20]
      PRFM            #0, [X9,#0x60]
    }
    *a5++ = v19.i16[7];
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 7uLL), v13, 7uLL));
    int16x8_t v27 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v26.i8), (int16x8_t)0), v11);
    int16x8_t v28 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v26), (int16x8_t)0), v11);
    int8x16_t v29 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 7uLL), v15, 7uLL));
    int16x8_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v29.i8), (int16x8_t)0), v11);
    int16x8_t v31 = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v29), (int16x8_t)0), v11);
    int8x16_t v32 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v16, 7uLL), v17, 7uLL));
    int16x8_t v33 = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v32.i8), (int16x8_t)0), v11);
    int16x8_t v34 = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v32), (int16x8_t)0), v11);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v18, 7uLL), v19, 7uLL));
    _X9[-6] = v27;
    _X9[-5] = v28;
    _X9[-4] = v30;
    _X9[-3] = v31;
    _X9[-2] = v33;
    _X9[-1] = v34;
    *_X9 = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v35.i8), (int16x8_t)0), v11);
    _X9[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v35), (int16x8_t)0), v11);
    --v9;
    _X9 = (int16x8_t *)((char *)_X9 + 2 * a2);
  }
  while (v9 > 1);
  return result;
}

int8x16_t *sub_1D0C7FEFC(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D28EE4(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 0x40) != 0) {
      a5[a7] = result->u16[a7 * a2 - 1];
    }
    if ((a4 & 4) == 0)
    {
      *a5++ = result[7].u16[7];
      _X5 = result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
    }
    int8x16_t v10 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v12 = (int16x8_t)vandq_s8(v10, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = (int16x8_t)_X5[1];
    int16x8_t v16 = (int16x8_t)_X5[2];
    int16x8_t v15 = (int16x8_t)_X5[3];
    int16x8_t v18 = (int16x8_t)_X5[4];
    int16x8_t v17 = (int16x8_t)_X5[5];
    int16x8_t v19 = (int16x8_t)_X5[6];
    int8x16_t v20 = _X5[7];
    i16 = _X5[8].i16;
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *result;
    int8x16_t v29 = result[1];
    int8x16_t v30 = result[2];
    int8x16_t v31 = result[3];
    int8x16_t v32 = result + 6;
    int8x16_t v33 = result[6];
    int8x16_t v34 = result[4];
    int8x16_t v35 = result[5];
    uint64_t v36 = 2 * a2;
    signed int v37 = v8 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    int8x16_t v38 = result[7];
    __asm { PRFM            #0, [X0,#0x80] }
    int8x16_t v40 = (int8x16_t)vceqzq_s16(v12);
    int8x16_t v41 = (int8x16_t)vceqzq_s16(v11);
    __asm { PRFM            #0, [X0,#0xC0] }
    v43.i64[0] = 0x202020202020202;
    v43.i64[1] = 0x202020202020202;
    v44.i64[0] = 0xF000F000F000F000;
    v44.i64[1] = 0xF000F000F000F000;
    int8x16_t v45 = (int8x16_t)vld1q_dup_s16(i16);
    *a5 = v38.u16[7];
    uint16x8_t v46 = (__int16 *)(a5 + 1);
    uint16x8_t v47 = v46;
    do
    {
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 2uLL);
      int16x8_t v49 = (int16x8_t)v38;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 2uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 2uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 2uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 2uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 2uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 2uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = &v32->i8[v36];
      int8x16_t v28 = *(int8x16_t *)((char *)&v32[-6] + v36);
      int8x16_t v29 = *(int8x16_t *)((char *)&v32[-5] + v36);
      int8x16_t v30 = *(int8x16_t *)((char *)&v32[-4] + v36);
      int8x16_t v31 = *(int8x16_t *)((char *)&v32[-3] + v36);
      int8x16_t v34 = *(int8x16_t *)((char *)&v32[-2] + v36);
      int8x16_t v35 = *(int8x16_t *)((char *)&v32[-1] + v36);
      int8x16_t v33 = *(int8x16_t *)((char *)v32 + 2 * a2);
      int8x16_t v38 = *(int8x16_t *)((char *)&v32[1] + v36);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v59 = (int8x16_t)vld1q_dup_s16(v47++);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v20, v45, 2uLL);
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v59, v28, 0xEuLL);
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v28, v29, 0xEuLL);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v14));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v29, v30, 0xEuLL);
      int8x16_t v65 = vqmovn_high_s16(vqmovn_s16(v63), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v13)));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v30, v31, 0xEuLL);
      int16x8_t v67 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v16));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v31, v34, 0xEuLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v67), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v15)));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v34, v35, 0xEuLL);
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v17));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v35, v33, 0xEuLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v18))), v71);
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v33, v38, 0xEuLL);
      *uint16x8_t v46 = v38.i16[7];
      int8x16_t v75 = vqtbl1q_s8(v9, vaddq_s8(v65, v43));
      int8x16_t v76 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v60, (uint16x8_t)v49), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v60)), (int16x8_t)vcgtq_u16((uint16x8_t)v49, v74)), (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v49)));
      v32[-6] = vbslq_s8(v41, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v75.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      v32[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v75), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v9, vaddq_s8(v69, v43));
      v32[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      v32[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v44);
      int8x16_t v78 = vqtbl1q_s8(v9, vaddq_s8(v73, v43));
      v32[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v78.i8), (int16x8_t)0), v44);
      v32[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v78), (int16x8_t)0), v44);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v76, v43));
      *(int16x8_t *)int8x16_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v79.i8), (int16x8_t)0), v44);
      v32[1] = vbslq_s8(v40, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v49, v79), (int16x8_t)0), v44), (int8x16_t)v49);
      int8x16_t v80 = v32[2].i16;
      --v37;
      int8x16_t v32 = (int8x16_t *)((char *)v32 + v36);
      uint16x8_t v46 = (__int16 *)v47;
      int8x16_t v20 = (int8x16_t)v49;
      int8x16_t v45 = (int8x16_t)vld1q_dup_s16(v80);
    }
    while (v37 > 1);
  }
  return result;
}

int8x16_t *sub_1D0C80268(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D29308(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x40u, a7);
  }
  else
  {
    int8x16_t v9 = *a3;
    if ((a4 & 4) != 0)
    {
      int16x8_t v12 = &_X5[-1].i16[7];
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
    }
    else
    {
      int8x16_t v10 = a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
      *a5 = result[7].i16[7];
      _X5 = (int16x8_t *)result;
      uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
      int v8 = a7 - 1;
      a5 = (__int16 *)v10;
    }
    unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
    a5[v13 + 1] = result[7].i16[(int)(v13 + 1) * a2 + 7];
    int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
    int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
    int16x8_t v17 = *_X5;
    int16x8_t v16 = _X5[1];
    int16x8_t v18 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *result;
    int8x16_t v32 = result[1];
    int8x16_t v33 = result[2];
    int8x16_t v34 = result[3];
    int8x16_t v35 = result[4];
    int8x16_t v36 = result[5];
    signed int v37 = result + 6;
    int8x16_t v38 = result[6];
    int8x16_t v39 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int v42 = v13 + 2;
    uint64_t v43 = 2 * a2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v18);
    int8x16_t v45 = (int8x16_t)vceqzq_s16(v15);
    v46.i64[0] = 0x202020202020202;
    v46.i64[1] = 0x202020202020202;
    v47.i64[0] = 0xF000F000F000F000;
    v47.i64[1] = 0xF000F000F000F000;
    uint16x8_t v48 = a5;
    do
    {
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xEuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xEuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xEuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xEuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v54 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v20, 0xEuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v55 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v16, 0xEuLL);
      int16x8_t v16 = (int16x8_t)v32;
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v17, 0xEuLL);
      int16x8_t v17 = (int16x8_t)v31;
      _X13 = &v37->i8[v43];
      int8x16_t v31 = *(int8x16_t *)((char *)&v37[-6] + v43);
      int8x16_t v32 = *(int8x16_t *)((char *)&v37[-5] + v43);
      int8x16_t v33 = *(int8x16_t *)((char *)&v37[-4] + v43);
      int8x16_t v34 = *(int8x16_t *)((char *)&v37[-3] + v43);
      int8x16_t v35 = *(int8x16_t *)((char *)&v37[-2] + v43);
      int8x16_t v36 = *(int8x16_t *)((char *)&v37[-1] + v43);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v31, v32, 2uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v32, v33, 2uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v56, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v56)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v58)), (int16x8_t)vcgtq_u16(v58, (uint16x8_t)v17));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v33, v34, 2uLL);
      int16x8_t v62 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v55, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v55)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v16));
      uint16x8_t v63 = (uint16x8_t)vextq_s8(v34, v35, 2uLL);
      int8x16_t v64 = vqmovn_high_s16(vqmovn_s16(v60), v62);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v61)), (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v20));
      int16x8_t v66 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v63));
      int8x16_t v38 = *(int8x16_t *)((char *)v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)((char *)&v37[1] + v43);
      int16x8_t v67 = vaddq_s16(v66, (int16x8_t)vcgtq_u16(v63, (uint16x8_t)v19));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v35, v36, 2uLL);
      int8x16_t v69 = vqmovn_high_s16(vqmovn_s16(v65), v67);
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v36, v38, 2uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v73 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v21));
      uint16x8_t v74 = (uint16x8_t)vextq_s8(v38, v39, 2uLL);
      int8x16_t v75 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v22))), v73);
      int16x8_t v76 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v74);
      int16x8_t v77 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v50)), v76);
      v76.i32[0] = v37[8 * ((a4 >> 1) & 1) - 6].u16[a2];
      uint16x8_t v78 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v76, 2uLL);
      int8x16_t v79 = vqtbl1q_s8(v9, vaddq_s8(v64, v46));
      int8x16_t v80 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v77, (int16x8_t)vcgtq_u16(v74, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v78)), (int16x8_t)vcgtq_u16(v78, (uint16x8_t)v23)));
      v37[-6] = vbslq_s8(v45, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v79.i8), (int16x8_t)0), v47), (int8x16_t)v17);
      v37[-5] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v79), (int16x8_t)0), v47);
      int8x16_t v81 = vqtbl1q_s8(v9, vaddq_s8(v69, v46));
      v37[-4] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v81.i8), (int16x8_t)0), v47);
      v37[-3] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v81), (int16x8_t)0), v47);
      int8x16_t v82 = vqtbl1q_s8(v9, vaddq_s8(v75, v46));
      v37[-2] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v82.i8), (int16x8_t)0), v47);
      v37[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v82), (int16x8_t)0), v47);
      int8x16_t v83 = vqtbl1q_s8(v9, vaddq_s8(v80, v46));
      *(int16x8_t *)signed int v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v83.i8), (int16x8_t)0), v47);
      v37[1] = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v83), (int16x8_t)0), v47), (int8x16_t)v23);
      int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v48++);
      --v42;
      signed int v37 = (int8x16_t *)((char *)v37 + v43);
      *a5 = v23.i16[7];
      a5 = (__int16 *)v48;
    }
    while (v42 > 1);
  }
  return result;
}

uint64_t sub_1D0C805E4(uint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_WORD *)(result + 126);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = *(_WORD *)(result + 2 * (v8 + 1) * a2 + 126);
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  uint16x8_t v14 = _X5[4];
  uint16x8_t v13 = _X5[5];
  uint16x8_t v16 = _X5[6];
  uint16x8_t v15 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v23 = *(uint16x8_t *)result;
  uint16x8_t v24 = *(uint16x8_t *)(result + 16);
  uint16x8_t v25 = *(uint16x8_t *)(result + 32);
  uint16x8_t v26 = *(uint16x8_t *)(result + 48);
  uint16x8_t v27 = *(uint16x8_t *)(result + 64);
  uint16x8_t v28 = *(uint16x8_t *)(result + 80);
  int8x16_t v29 = (int16x8_t *)(result + 96);
  uint16x8_t v30 = *(uint16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v34 = v8 + 2;
  uint64_t v35 = 2 * a2;
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xF000F000F000F000;
  v37.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v38 = (int16x8_t)v31;
    int16x8_t v39 = (int16x8_t)v30;
    int16x8_t v40 = (int16x8_t)v28;
    int16x8_t v41 = (int16x8_t)v27;
    int16x8_t v42 = (int16x8_t)v26;
    int16x8_t v43 = (int16x8_t)v25;
    int16x8_t v44 = (int16x8_t)v24;
    int16x8_t v45 = (int16x8_t)v23;
    _X11 = &v29->i8[v35];
    uint16x8_t v23 = *(uint16x8_t *)((char *)&v29[-6] + v35);
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v29[-5] + v35);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v29[-4] + v35);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v29[-3] + v35);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v29[-2] + v35);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v29[-1] + v35);
    uint16x8_t v30 = *(uint16x8_t *)((char *)v29 + 2 * a2);
    uint16x8_t v31 = *(uint16x8_t *)((char *)&v29[1] + v35);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i16[7];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v23)), (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v44))), v36));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v42))), v36));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v40))), v36));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v38))), v36));
    v29[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v29[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v29[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v29[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v29[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v29[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v34;
    *int8x16_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v29[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v29 = (int16x8_t *)((char *)v29 + v35);
    uint16x8_t v10 = (uint16x8_t)v45;
    uint16x8_t v9 = (uint16x8_t)v44;
    uint16x8_t v12 = (uint16x8_t)v43;
    uint16x8_t v11 = (uint16x8_t)v42;
    uint16x8_t v14 = (uint16x8_t)v41;
    uint16x8_t v13 = (uint16x8_t)v40;
    uint16x8_t v16 = (uint16x8_t)v39;
    uint16x8_t v15 = (uint16x8_t)v38;
  }
  while (v34 > 1);
  return result;
}

int16x8_t *sub_1D0C80894(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F0D0);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F150);
  int v12 = a7 + 1;
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  uint16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v18 = result[2];
    int16x8_t v19 = result[3];
    int16x8_t v20 = result[4];
    int16x8_t v21 = result[5];
    int16x8_t v23 = result[6];
    int16x8_t v22 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v30 = (int8x16_t)vld1q_dup_s16(v15++);
    *a5 = v22.i16[7];
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v16, 0xEuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 0xEuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 0xEuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 0xEuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 2uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 2uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 2uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v21, 2uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v23, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v22, 2uLL);
    v7.i16[0] = result[8 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v7, 2uLL);
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), v13));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), v13));
    int8x16_t v49 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v21))), v13));
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v49.i8), (int16x8_t)0), v14);
    int16x8_t v51 = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v49), (int16x8_t)0), v14);
    int16x8_t v52 = (int16x8_t)vcgtq_u16((uint16x8_t)v22, v46);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v22);
    int8x16_t v53 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v37)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v38)), v52), v7)), v13));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v16, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v47.i8), (int16x8_t)0), v14));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v47), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v14);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v48), (int16x8_t)0), v14);
    result[4] = v50;
    result[5] = v51;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v53.i8), (int16x8_t)0), v14);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v22, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v22, v53), (int16x8_t)0), v14));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (__int16 *)v15;
  }
  while (v12 > 1);
  return result;
}

int16x8_t *sub_1D0C80B0C(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 2;
  int v10 = a7 + 1;
  v11.i64[0] = 0xF000F000F000F000;
  v11.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v12 = _X8[-2];
    int16x8_t v13 = _X8[-1];
    int16x8_t v14 = *_X8;
    int16x8_t v15 = _X8[1];
    __asm { PRFM            #0, [X8,#0x20] }
    *a5++ = v15.i16[7];
    int8x16_t v21 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 7uLL), v13, 7uLL));
    int16x8_t v22 = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v21.i8), (int16x8_t)0), v11);
    int16x8_t v23 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v21), (int16x8_t)0), v11);
    int8x16_t v24 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v14, 7uLL), v15, 7uLL));
    _X8[-2] = v22;
    _X8[-1] = v23;
    *_X8 = vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v24.i8), (int16x8_t)0), v11);
    _X8[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v24), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C80B98(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D28EE4(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x20u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v13 = *(int16x8_t *)_X5;
  int16x8_t v12 = (int16x8_t)_X5[1];
  int8x16_t v14 = _X5[2];
  int8x16_t v15 = _X5[3];
  i16 = _X5[4].i16;
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v22 = *result;
  int8x16_t v23 = result[1];
  int8x16_t v24 = result[2];
  int8x16_t v25 = result[3];
  uint16x8_t v26 = result[4].i16;
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v28 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v25.u16[7];
  int8x16_t v29 = (__int16 *)(a5 + 1);
  uint64_t v30 = a2;
  signed int v31 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v33 = (int8x16_t)vceqzq_s16(v10);
  v34.i64[0] = 0x202020202020202;
  v34.i64[1] = 0x202020202020202;
  v35.i64[0] = 0xF000F000F000F000;
  v35.i64[1] = 0xF000F000F000F000;
  uint16x8_t v36 = v29;
  do
  {
    int16x8_t v37 = (int16x8_t)v25;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, v14, 2uLL);
    int16x8_t v39 = (int16x8_t)v24;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v12, 2uLL);
    int16x8_t v12 = (int16x8_t)v23;
    int16x8_t v13 = (int16x8_t)v22;
    _X12 = &v26[v30];
    int8x16_t v22 = *(int8x16_t *)&v26[v30 - 32];
    int8x16_t v23 = *(int8x16_t *)&v26[v30 - 24];
    int8x16_t v24 = *(int8x16_t *)&v26[v30 - 16];
    int8x16_t v25 = *(int8x16_t *)&v26[v30 - 8];
    __asm { PRFM            #0, [X12] }
    int8x16_t v43 = (int8x16_t)vld1q_dup_s16(v36++);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v14, v15, 2uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v15, v28, 2uLL);
    *int8x16_t v29 = v25.i16[7];
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v43, v22, 0xEuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v22, v23, 0xEuLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v23, v24, 0xEuLL);
    uint16x8_t v49 = (uint16x8_t)vextq_s8(v24, v25, 0xEuLL);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v13))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v12))), v34));
    int8x16_t v51 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v44, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v44)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v48)), (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v45, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v45)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v49)), (int16x8_t)vcgtq_u16(v49, (uint16x8_t)v37))), v34));
    *((int8x16_t *)v26 - 4) = vbslq_s8(v33, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, *(int8x8_t *)v50.i8), (int16x8_t)0), v35), (int8x16_t)v13);
    *((int16x8_t *)v26 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v12, v50), (int16x8_t)0), v35);
    *((int16x8_t *)v26 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v51.i8), (int16x8_t)0), v35);
    *((int8x16_t *)v26 - 1) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v37, v51), (int16x8_t)0), v35), (int8x16_t)v37);
    int8x16_t v28 = (int8x16_t)vld1q_dup_s16(v26);
    --v31;
    uint16x8_t v26 = (const __int16 *)((char *)v26 + v30 * 2);
    int8x16_t v29 = (__int16 *)v36;
    int8x16_t v14 = (int8x16_t)v39;
    int8x16_t v15 = (int8x16_t)v37;
  }
  while (v31 > 1);
  return result;
}

int8x16_t *sub_1D0C80DB8(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D29308(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x20u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[3].i16[7];
    _X5 = (int16x8_t *)result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[3].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *result;
  int8x16_t v27 = result[1];
  int8x16_t v28 = result + 2;
  int8x16_t v29 = result[2];
  int8x16_t v30 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0x202020202020202;
  v36.i64[1] = 0x202020202020202;
  v37.i64[0] = 0xF000F000F000F000;
  v37.i64[1] = 0xF000F000F000F000;
  uint16x8_t v38 = a5;
  do
  {
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xEuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xEuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xEuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = &v28->i8[v33];
    int8x16_t v26 = *(int8x16_t *)((char *)&v28[-2] + v33);
    int8x16_t v27 = *(int8x16_t *)((char *)&v28[-1] + v33);
    int8x16_t v29 = *(int8x16_t *)((char *)v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)((char *)&v28[1] + v33);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = v28[4 * ((a4 >> 1) & 1) - 2].u16[a2];
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v26, v27, 2uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v27, v29, 2uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v29, v30, 2uLL);
    uint16x8_t v48 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 2uLL);
    int8x16_t v49 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v17))), v36));
    int16x8_t v50 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v48);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v48, (uint16x8_t)v19);
    int8x16_t v51 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v39)), v50), v7)), v36));
    v28[-2] = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v49.i8), (int16x8_t)0), v37), (int8x16_t)v18);
    v28[-1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v49), (int16x8_t)0), v37);
    *(int16x8_t *)int8x16_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v28[1] = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v51), (int16x8_t)0), v37), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v38++);
    --v32;
    int8x16_t v28 = (int8x16_t *)((char *)v28 + v33);
    *a5 = v19.i16[7];
    a5 = (__int16 *)v38;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C80FF4(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[3].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  uint16x8_t v12 = _X5[2];
  uint16x8_t v11 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v18 = *result;
  uint16x8_t v19 = result[1];
  uint16x8_t v20 = result[2];
  uint16x8_t v21 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v23 = v8 + 2;
  uint64_t v24 = 2 * a2;
  v25.i64[0] = 0x202020202020202;
  v25.i64[1] = 0x202020202020202;
  v26.i64[0] = 0xF000F000F000F000;
  v26.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v27 = (int16x8_t)v18;
    int16x8_t v28 = (int16x8_t)v19;
    int16x8_t v29 = (int16x8_t)v20;
    int16x8_t v30 = (int16x8_t)v21;
    _X10 = (uint64_t)result->i64 + v24;
    uint16x8_t v18 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v19 = *(uint16x8_t *)((char *)&result[1] + v24);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[2] + v24);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[3] + v24);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i16[7];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v28))), v25));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v30))), v25));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v23;
    uint64_t result = (uint16x8_t *)((char *)result + v24);
    uint16x8_t v10 = (uint16x8_t)v27;
    uint16x8_t v9 = (uint16x8_t)v28;
    uint16x8_t v12 = (uint16x8_t)v29;
    uint16x8_t v11 = (uint16x8_t)v30;
  }
  while (v23 > 1);
  return result;
}

int16x8_t *sub_1D0C81170(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xF000F000F000F000;
  v15.i64[1] = 0xF000F000F000F000;
  int16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    int16x8_t v20 = result[2];
    int16x8_t v19 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v26 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v19.i16[7];
    v7.i16[0] = result[4 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v27 = (uint16x8_t)vextq_s8(v26, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 0xEuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xEuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v20, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 2uLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v19, v7, 2uLL);
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v18))), v14));
    int8x16_t v36 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19))), v14));
    int16x8_t v37 = vaddw_s8(v20, *(int8x8_t *)v36.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v36), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v35.i8), (int16x8_t)0), v15), (int8x16_t)v17);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v15);
    result[2] = vminq_s16(vmaxq_s16(v37, (int16x8_t)0), v15);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v19);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C812DC(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  _X8 = result + 1;
  int v10 = a7 + 1;
  v11.i64[0] = 0xF000F000F000F000;
  v11.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v12 = _X8[-1];
    int16x8_t v13 = *_X8;
    __asm { PRFM            #0, [X8,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)_X8);
    int8x16_t v19 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v12, 7uLL), v13, 7uLL));
    _X8[-1] = vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v19.i8), (int16x8_t)0), v11);
    *_X8 = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v19), (int16x8_t)0), v11);
    _X8 = (int16x8_t *)((char *)_X8 + 2 * a2);
    --v10;
  }
  while (v10 > 1);
  return result;
}

int8x16_t *sub_1D0C8133C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D28EE4(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 0x10u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].u16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v11 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v13 = *_X5;
  int8x16_t v12 = _X5[1];
  i16 = _X5[2].i16;
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v20 = *result;
  int8x16_t v21 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v23 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = v21.u16[7];
  uint64_t v24 = (__int16 *)(a5 + 1);
  uint64_t v25 = 2 * a2;
  signed int v26 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v11);
  int8x16_t v28 = (int8x16_t)vceqzq_s16(v10);
  v29.i64[0] = 0x202020202020202;
  v29.i64[1] = 0x202020202020202;
  v30.i64[0] = 0xF000F000F000F000;
  v30.i64[1] = 0xF000F000F000F000;
  uint16x8_t v31 = v24;
  do
  {
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v13, v12, 2uLL);
    int16x8_t v33 = (int16x8_t)v21;
    int16x8_t v34 = (int16x8_t)v20;
    _X11 = &result->i8[v25];
    int8x16_t v20 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v21 = *(int8x16_t *)((char *)&result[1] + v25);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v37 = (int8x16_t)vld1q_dup_s16(v31++);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v12, v23, 2uLL);
    *uint64_t v24 = v21.i16[7];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v37, v20, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v20, v21, 0xEuLL);
    int8x16_t v41 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v34))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v33), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v33, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v33))), v29));
    *uint64_t result = vbslq_s8(v28, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v34, *(int8x8_t *)v41.i8), (int16x8_t)0), v30), (int8x16_t)v34);
    result[1] = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v33, v41), (int16x8_t)0), v30), (int8x16_t)v33);
    uint16x8_t v42 = result[2].i16;
    --v26;
    uint64_t result = (int8x16_t *)((char *)result + v25);
    int8x16_t v23 = (int8x16_t)vld1q_dup_s16(v42);
    uint64_t v24 = (__int16 *)v31;
    int8x16_t v13 = (int8x16_t)v34;
    int8x16_t v12 = (int8x16_t)v33;
  }
  while (v26 > 1);
  return result;
}

int8x16_t *sub_1D0C814D4(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int8x16_t *)sub_1D0D29308(result->i8, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, 0x10u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = &_X5[-1].i16[7];
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result[1].i16[7];
    _X5 = result;
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result[1].i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F0D0);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F150);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *result;
  int8x16_t v25 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0x202020202020202;
  v31.i64[1] = 0x202020202020202;
  v32.i64[0] = 0xF000F000F000F000;
  v32.i64[1] = 0xF000F000F000F000;
  int16x8_t v33 = a5;
  do
  {
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v17, v18, 0xEuLL);
    int16x8_t v35 = (int16x8_t)v25;
    int16x8_t v36 = (int16x8_t)v24;
    _X12 = &result->i8[v28];
    int8x16_t v24 = *(int8x16_t *)((char *)result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)((char *)&result[1] + v28);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[a2];
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v11, v17, 0xEuLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v24, v25, 2uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 2uLL);
    int16x8_t v42 = (int16x8_t)vcgtq_u16((uint16x8_t)v35, v41);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v35);
    int8x16_t v43 = vqtbl1q_s8(v9, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v36), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v36, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v36))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v34)), v42), v7)), v31));
    *uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v36, *(int8x8_t *)v43.i8), (int16x8_t)0), v32), (int8x16_t)v36);
    result[1] = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v43), (int16x8_t)0), v32), (int8x16_t)v35);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v33++);
    --v27;
    uint64_t result = (int8x16_t *)((char *)result + v28);
    *a5 = v35.i16[7];
    int8x16_t v17 = (int8x16_t)v36;
    int8x16_t v18 = (int8x16_t)v35;
    a5 = (__int16 *)v33;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C81680(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *_X5, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i16[7];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result[1].i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *_X5;
  uint16x8_t v9 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v16 = *result;
  uint16x8_t v17 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v19 = 2 * a2;
  int v20 = v8 + 2;
  v21.i64[0] = 0x202020202020202;
  v21.i64[1] = 0x202020202020202;
  v22.i64[0] = 0xF000F000F000F000;
  v22.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v23 = (int16x8_t)v16;
    int16x8_t v24 = (int16x8_t)v17;
    _X10 = (uint64_t)result->i64 + v19;
    uint16x8_t v16 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v17 = *(uint16x8_t *)((char *)&result[1] + v19);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i16[7];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v16)), (int16x8_t)vcgtq_u16(v16, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v9, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v9)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v24))), v21));
    --v20;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v19);
    uint16x8_t v10 = (uint16x8_t)v23;
    uint16x8_t v9 = (uint16x8_t)v24;
  }
  while (v20 > 1);
  return result;
}

int16x8_t *sub_1D0C8177C(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F0D0);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F150));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0x202020202020202;
  v14.i64[1] = 0x202020202020202;
  v15.i64[0] = 0xF000F000F000F000;
  v15.i64[1] = 0xF000F000F000F000;
  uint16x8_t v16 = a5;
  do
  {
    int16x8_t v17 = *result;
    int16x8_t v18 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v24 = (int8x16_t)vld1q_dup_s16(v16++);
    *a5 = v18.i16[7];
    v7.i16[0] = result[2 * ((a4 >> 1) & 1)].i16[0];
    uint16x8_t v25 = (uint16x8_t)vextq_s8(v24, (int8x16_t)v17, 0xEuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xEuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 2uLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 2uLL);
    int8x16_t v29 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v18))), v14));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v29.i8), (int16x8_t)0), v15);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v17);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v29), (int16x8_t)0), v15), (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (__int16 *)v16;
  }
  while (v11 > 1);
  return result;
}

int16x8_t *sub_1D0C81870(int16x8_t *result, uint64_t a2, long long *a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  int v9 = a7 + 1;
  v10.i64[0] = 0xF000F000F000F000;
  v10.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v11 = *result;
    __asm { PRFM            #0, [X0,#0x10] }
    *a5++ = HIWORD(*(unsigned long long *)result);
    *uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v11, vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v11, 7uLL))), (int16x8_t)0), v10);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v9;
  }
  while (v9 > 1);
  return result;
}

int16x8_t *sub_1D0C818BC(int16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, unsigned __int16 *a5, int8x16_t *_X5, int a7)
{
  int v7 = a7;
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D28EE4(result->i8, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, 8u, a7);
  }
  int8x16_t v8 = *a3;
  if ((a4 & 0x40) != 0) {
    a5[a7] = result->u16[a7 * a2 - 1];
  }
  if ((a4 & 4) == 0)
  {
    *a5++ = result->u16[7];
    _X5 = (int8x16_t *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v7 = a7 - 1;
  }
  int8x16_t v9 = *_X5;
  i16 = _X5[1].i16;
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 1;
  int16x8_t v17 = *result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_s16(i16);
  *a5 = HIWORD(*(unsigned long long *)result);
  int v20 = (__int16 *)(a5 + 1);
  uint64_t v21 = 2 * a2;
  signed int v22 = v7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v24.i64[0] = 0x2000200020002;
  v24.i64[1] = 0x2000200020002;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  v26.i64[0] = 0xF000F000F000F000;
  v26.i64[1] = 0xF000F000F000F000;
  uint16x8_t v27 = v20;
  do
  {
    _X12 = (uint64_t)result[1].i64 + v21;
    int8x16_t v29 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v31 = (int8x16_t)vld1q_dup_s16(v27++);
    *int v20 = v29.i16[7];
    uint16x8_t v32 = (uint16x8_t)vextq_s8(v9, v19, 2uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v31, v29, 0xEuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v32), v25, v24), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v33)),
                                                                                   (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v17))))), (int16x8_t)0), v26), (int8x16_t)v17);
    uint16x8_t v34 = result[1].i16;
    --v22;
    uint64_t result = (int16x8_t *)((char *)result + v21);
    int8x16_t v19 = (int8x16_t)vld1q_dup_s16(v34);
    int v20 = (__int16 *)v27;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v29;
  }
  while (v22 > 1);
  return result;
}

int16x8_t *sub_1D0C81A10(int16x8_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  int v8 = a7;
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return (int16x8_t *)sub_1D0D29308(result->i8, a2, (uint64_t)a3, a4, a5, a6, 8u, a7);
  }
  int8x16_t v9 = *a3;
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const __int16 *)(a6 - 1);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v12);
  }
  else
  {
    int16x8_t v10 = a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v10++);
    *a5 = result->i16[7];
    a6 = (unsigned __int16 *)result;
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    int v8 = a7 - 1;
    a5 = (__int16 *)v10;
  }
  unsigned int v13 = v8 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v13 + 1] = result->i16[(int)(v13 + 1) * a2 + 7];
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v23 = *result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v28.i64[0] = 0x2000200020002;
  v28.i64[1] = 0x2000200020002;
  v29.i64[0] = 0x3000300030003;
  v29.i64[1] = 0x3000300030003;
  v30.i64[0] = 0xF000F000F000F000;
  v30.i64[1] = 0xF000F000F000F000;
  int8x16_t v31 = a5;
  do
  {
    _X13 = (uint64_t)result[1].i64 + v25;
    int8x16_t v33 = *(int8x16_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i16[0] = result[(a4 >> 1) & 1].i16[a2];
    uint16x8_t v35 = (uint16x8_t)vextq_s8(v11, v16, 0xEuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v33, (int8x16_t)v7, 2uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v35), v29, v28);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v9, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v35, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v36)), (int16x8_t)vcgtq_u16(v36,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v30),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_s16(v31++);
    --v26;
    uint64_t result = (int16x8_t *)((char *)result + v25);
    *a5 = v23.i16[7];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v33;
    a5 = (__int16 *)v31;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C81B78(uint16x8_t *result, uint64_t a2, int8x16_t *a3, unsigned int a4, _WORD *a5, uint16x8_t *a6, int a7)
{
  int8x16_t v7 = *a3;
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i16[7];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  int v8 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v8 + 1] = result->i16[(v8 + 1) * a2 + 7];
  uint16x8_t v10 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v11 = v10;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v18 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v20 = 2 * a2;
  int v21 = v8 + 2;
  v22.i64[0] = 0x2000200020002;
  v22.i64[1] = 0x2000200020002;
  v23.i64[0] = 0x3000300030003;
  v23.i64[1] = 0x3000300030003;
  v24.i64[0] = 0xF000F000F000F000;
  v24.i64[1] = 0xF000F000F000F000;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v20;
    uint16x8_t v26 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v18.i16[7];
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v18, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v18, v11), v23, v22), (int16x8_t)vcgtq_u16(v11, (uint16x8_t)v18)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v18))))), (int16x8_t)0), v24);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v18;
    int16x8_t v18 = (int16x8_t)v26;
  }
  while (v21 > 1);
  return result;
}

int8x16_t *sub_1D0C81C4C(int8x16_t *result, uint64_t a2, int8x16_t *a3, unint64_t a4, __int16 *a5, uint64_t a6, int a7)
{
  int8x16_t v8 = *a3;
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F160));
  v11.i64[0] = 0x2000200020002;
  v11.i64[1] = 0x2000200020002;
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  v13.i64[0] = 0xF000F000F000F000;
  v13.i64[1] = 0xF000F000F000F000;
  int8x16_t v14 = a5;
  do
  {
    int16x8_t v15 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v21 = (int8x16_t)vld1q_dup_s16(v14++);
    uint16x8_t v22 = (uint16x8_t)vextq_s8(v21, *result, 0xEuLL);
    *a5 = HIWORD(*(unsigned long long *)result);
    v7.i16[0] = result[(a4 >> 1) & 1].i16[0];
    uint16x8_t v23 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v7, 2uLL);
    int16x8_t v24 = (int16x8_t)vcgtq_u16((uint16x8_t)v15, v23);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v23, (uint16x8_t)v15);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v15, v22), v12, v11), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v15)), v24), v7)))),
                               (int16x8_t)0),
                             v13),
                (int8x16_t)v15);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (__int16 *)v14;
  }
  while (v9 > 1);
  return result;
}

__int16 *sub_1D0C81CFC(__int16 *a1, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  sub_1D0C81D64(a1, a2, a3, a4, a5, a6, a7);
  return sub_1D0C81D64(a1 + 64, a2, a3, v12, a5, v13, a7);
}

__int16 *sub_1D0C81D64(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v42 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int16x8x2_t v36 = vld2q_s16(v17);
    int16x8_t v18 = result + 32;
    int16x8x2_t v45 = vld2q_s16(v18);
    int8x16_t v19 = result + 48;
    int8x16x2_t v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    uint16x8_t v26 = _X11;
    int16x8x2_t v41 = vld2q_s16(v26);
    v26 += 16;
    int16x8x2_t v40 = vld2q_s16(v26);
    int8x16_t v27 = _X11 + 32;
    int16x8x2_t v38 = vld2q_s16(v27);
    int8x16_t v28 = _X11 + 48;
    int8x16x2_t v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1D0D7F170).i32[1];
    int8x16_t v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 3uLL), v36.val[0], 3uLL));
    int8x16_t v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 3uLL), v36.val[1], 3uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 3uLL), (int16x8_t)v44.val[0], 3uLL));
    int16x8_t v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 3uLL), (int16x8_t)v44.val[1], 3uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 3uLL), v40.val[0], 3uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 3uLL), v40.val[1], 3uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 3uLL), (int16x8_t)v39.val[0], 3uLL));
    vst2q_s16(result, v42);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 3uLL), (int16x8_t)v39.val[1], 3uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

uint64_t sub_1D0C81F54(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C82014(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C82014(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C82014(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2EEF8((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 0x40) != 0) {
      *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
    }
    if ((a4 & 4) == 0)
    {
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      a5 += 2;
      _X5 = (_OWORD *)result;
      result += 2 * a2;
      --a7;
    }
    v8.i64[1] = v9;
    int16x8_t v10 = vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v12 = (int8x16_t)vtstq_s16(v10, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = *((int16x8_t *)_X5 + 1);
    int16x8_t v16 = *((int16x8_t *)_X5 + 2);
    int16x8_t v15 = *((int16x8_t *)_X5 + 3);
    int16x8_t v18 = *((int16x8_t *)_X5 + 4);
    int16x8_t v17 = *((int16x8_t *)_X5 + 5);
    int16x8_t v19 = *((int16x8_t *)_X5 + 6);
    int8x16_t v20 = *((int8x16_t *)_X5 + 7);
    int8x16_t v21 = (const float *)(_X5 + 8);
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *(int8x16_t *)result;
    int8x16_t v29 = *(int8x16_t *)(result + 16);
    int8x16_t v30 = *(int8x16_t *)(result + 32);
    int8x16_t v31 = *(int8x16_t *)(result + 48);
    uint64_t v32 = result + 96;
    int8x16_t v33 = *(int8x16_t *)(result + 96);
    int8x16_t v34 = *(int8x16_t *)(result + 64);
    int8x16_t v35 = *(int8x16_t *)(result + 80);
    int8x16_t v36 = *(int8x16_t *)(result + 112);
    __asm { PRFM            #0, [X0,#0x80] }
    uint64_t v38 = 2 * a2;
    signed int v39 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    __asm { PRFM            #0, [X0,#0xC0] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v21);
    *(_DWORD *)a5 = v36.i32[3];
    int16x8x2_t v42 = (float *)(a5 + 2);
    int8x16_t v43 = (int8x16_t)vceqzq_s16(v11);
    v44.i64[0] = 0xFF00FF00FF00FFLL;
    v44.i64[1] = 0xFF00FF00FF00FFLL;
    int16x8x2_t v45 = v42;
    do
    {
      uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 4uLL);
      int16x8_t v47 = (int16x8_t)v36;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 4uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 4uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 4uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 4uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 4uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = v32 + v38;
      int8x16_t v28 = *(int8x16_t *)(v32 + v38 - 96);
      int8x16_t v29 = *(int8x16_t *)(v32 + v38 - 80);
      int8x16_t v30 = *(int8x16_t *)(v32 + v38 - 64);
      int8x16_t v31 = *(int8x16_t *)(v32 + v38 - 48);
      int8x16_t v34 = *(int8x16_t *)(v32 + v38 - 32);
      int8x16_t v35 = *(int8x16_t *)(v32 + v38 - 16);
      int8x16_t v33 = *(int8x16_t *)(v32 + 2 * a2);
      int8x16_t v36 = *(int8x16_t *)(v32 + v38 + 16);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v57 = (int8x16_t)vld1q_dup_f32(v45++);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v20, v41, 4uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v57, v28, 0xCuLL);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
      int16x8_t v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v14));
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
      int8x16_t v63 = vqmovn_high_s16(vqmovn_s16(v61), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13)));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v30, v31, 0xCuLL);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v16));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v31, v34, 0xCuLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v65), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v15)));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v34, v35, 0xCuLL);
      int16x8_t v69 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v17));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v35, v33, 0xCuLL);
      int8x16_t v71 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v18))), v69);
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v33, v36, 0xCuLL);
      *int16x8x2_t v42 = *(float *)&v36.i32[3];
      int8x16_t v73 = vqtbl1q_s8(v8, vaddq_s8(v63, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v58, (uint16x8_t)v47), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v58)), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v47)));
      *(int8x16_t *)(v32 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v73.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      *(int16x8_t *)(v32 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v73), (int16x8_t)0), v44);
      int8x16_t v75 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v75.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v75), (int16x8_t)0), v44);
      int8x16_t v76 = vqtbl1q_s8(v8, vaddq_s8(v71, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v76), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v74, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      *(int8x16_t *)(v32 + 16) = vbslq_s8(v12, (int8x16_t)v47, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v47, v77), (int16x8_t)0), v44));
      uint16x8_t v78 = (const float *)(v32 + 32);
      --v39;
      v32 += v38;
      int16x8x2_t v42 = (float *)v45;
      int8x16_t v20 = (int8x16_t)v47;
      int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v78);
    }
    while (v39 > 1);
  }
  return result;
}

uint64_t sub_1D0C82388(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unint64_t v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C82448(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C82448(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C82448(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2EF84((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 4) != 0)
    {
      int8x16_t v12 = (const float *)&_X5[-1].i32[3];
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
    }
    else
    {
      int16x8_t v10 = (const float *)a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      _X5 = (int16x8_t *)result;
      result += 2 * a2;
      --a7;
      a5 = (__int16 *)v10;
    }
    v8.i64[1] = v9;
    unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
    *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 124);
    int16x8_t v14 = vdupq_n_s16(~a4);
    int16x8_t v16 = *_X5;
    int16x8_t v15 = _X5[1];
    int16x8_t v17 = (int16x8_t)vandq_s8((int8x16_t)v14, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v18 = (int8x16_t)vtstq_s16(v14, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *(int8x16_t *)result;
    int8x16_t v32 = *(int8x16_t *)(result + 16);
    int8x16_t v33 = *(int8x16_t *)(result + 32);
    int8x16_t v34 = *(int8x16_t *)(result + 48);
    int8x16_t v35 = *(int8x16_t *)(result + 64);
    int8x16_t v36 = *(int8x16_t *)(result + 80);
    uint64_t v37 = result + 96;
    int8x16_t v38 = *(int8x16_t *)(result + 96);
    int8x16_t v39 = *(int8x16_t *)(result + 112);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    uint64_t v42 = 2 * a2;
    int v43 = v13 + 2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v17);
    v45.i64[0] = 0xFF00FF00FF00FFLL;
    v45.i64[1] = 0xFF00FF00FF00FFLL;
    uint16x8_t v46 = (const float *)a5;
    do
    {
      uint16x8_t v47 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xCuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xCuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xCuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v20, 0xCuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xCuLL);
      int16x8_t v15 = (int16x8_t)v32;
      uint16x8_t v54 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v16, 0xCuLL);
      int16x8_t v16 = (int16x8_t)v31;
      _X13 = v37 + v42;
      int8x16_t v31 = *(int8x16_t *)(v37 + v42 - 96);
      int8x16_t v32 = *(int8x16_t *)(v37 + v42 - 80);
      int8x16_t v33 = *(int8x16_t *)(v37 + v42 - 64);
      int8x16_t v34 = *(int8x16_t *)(v37 + v42 - 48);
      int8x16_t v35 = *(int8x16_t *)(v37 + v42 - 32);
      int8x16_t v36 = *(int8x16_t *)(v37 + v42 - 16);
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
      uint16x8_t v57 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
      int16x8_t v58 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v16));
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v15));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
      int8x16_t v62 = vqmovn_high_s16(vqmovn_s16(v58), v60);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v20));
      int16x8_t v64 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v61));
      int8x16_t v38 = *(int8x16_t *)(v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)(v37 + v42 + 16);
      int16x8_t v65 = vaddq_s16(v64, (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v19));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v35, v36, 4uLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v63), v65);
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v36, v38, 4uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v21));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v38, v39, 4uLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v22))), v71);
      int16x8_t v74 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v72);
      int16x8_t v75 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v48)), v74);
      v74.i32[0] = *(_DWORD *)(v37 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
      uint16x8_t v76 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v74, 4uLL);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v62, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v78 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v75, (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v76)), (int16x8_t)vcgtq_u16(v76, (uint16x8_t)v23)));
      *(int8x16_t *)(v37 - 96) = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v45), (int8x16_t)v16);
      *(int16x8_t *)(v37 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v45);
      int8x16_t v79 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v79.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v79), (int16x8_t)0), v45);
      int8x16_t v80 = vqtbl1q_s8(v8, vaddq_s8(v73, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v80.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v80), (int16x8_t)0), v45);
      int8x16_t v81 = vqtbl1q_s8(v8, vaddq_s8(v78, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v81.i8), (int16x8_t)0), v45);
      *(int8x16_t *)(v37 + 16) = vbslq_s8(v18, (int8x16_t)v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v81), (int16x8_t)0), v45));
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v46++);
      --v43;
      v37 += v42;
      *(_DWORD *)a5 = v23.i32[3];
      a5 = (__int16 *)v46;
    }
    while (v43 > 1);
  }
  return result;
}

uint64_t sub_1D0C827CC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C8288C(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C8288C(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C8288C(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  uint16x8_t v15 = _X5[4];
  uint16x8_t v14 = _X5[5];
  uint16x8_t v17 = _X5[6];
  uint16x8_t v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v24 = *(uint16x8_t *)result;
  uint16x8_t v25 = *(uint16x8_t *)(result + 16);
  uint16x8_t v26 = *(uint16x8_t *)(result + 32);
  uint16x8_t v27 = *(uint16x8_t *)(result + 48);
  uint16x8_t v28 = *(uint16x8_t *)(result + 64);
  uint16x8_t v29 = *(uint16x8_t *)(result + 80);
  int8x16_t v30 = (int16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 96);
  uint16x8_t v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v35 = v9 + 2;
  uint64_t v36 = 2 * a2;
  v37.i64[0] = 0xFF00FF00FF00FFLL;
  v37.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v38 = (int16x8_t)v32;
    int16x8_t v39 = (int16x8_t)v31;
    int16x8_t v40 = (int16x8_t)v29;
    int16x8_t v41 = (int16x8_t)v28;
    int16x8_t v42 = (int16x8_t)v27;
    int16x8_t v43 = (int16x8_t)v26;
    int16x8_t v44 = (int16x8_t)v25;
    int16x8_t v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    uint16x8_t v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    uint16x8_t v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    uint16x8_t v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1D0D7F120));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *int8x16_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v30 = (int16x8_t *)((char *)v30 + v36);
    uint16x8_t v11 = (uint16x8_t)v45;
    uint16x8_t v10 = (uint16x8_t)v44;
    uint16x8_t v13 = (uint16x8_t)v43;
    uint16x8_t v12 = (uint16x8_t)v42;
    uint16x8_t v15 = (uint16x8_t)v41;
    uint16x8_t v14 = (uint16x8_t)v40;
    uint16x8_t v17 = (uint16x8_t)v39;
    uint16x8_t v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

int16x8_t *sub_1D0C82B50(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v12 = 34;
  }
  else {
    int v12 = 2;
  }
  unsigned int v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0) {
    int v14 = 17;
  }
  else {
    int v14 = 1;
  }
  unint64_t v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C82C00(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C82C00(a1 + 8, a2, a3, v15, a5, v16, a7);
}

int16x8_t *sub_1D0C82C00(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F190);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F1A0);
  int v12 = a7 + 1;
  v13.i64[0] = 0xFF00FF00FF00FFLL;
  v13.i64[1] = 0xFF00FF00FF00FFLL;
  int v14 = a5;
  do
  {
    int16x8_t v15 = *result;
    int16x8_t v16 = result[1];
    int16x8_t v17 = result[2];
    int16x8_t v18 = result[3];
    int16x8_t v19 = result[4];
    int16x8_t v20 = result[5];
    int16x8_t v22 = result[6];
    int16x8_t v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    int8x16_t v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    int16x8_t v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    int8x16_t v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

__int16 *sub_1D0C82E84(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v32 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int8x16x2_t v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    int16x8_t v23 = _X11;
    int16x8x2_t v31 = vld2q_s16(v23);
    v23 += 16;
    int8x16x2_t v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v25;
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 3uLL), (int16x8_t)v33.val[0], 3uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    int8x16_t v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 3uLL), (int16x8_t)v33.val[1], 3uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 3uLL), (int16x8_t)v30.val[0], 3uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 3uLL), (int16x8_t)v30.val[1], 3uLL));
    int16x8_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1D0C82F94(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v13 = a7 + 2;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v25 = vld2q_s16(v15);
    uint64_t v11 = a2;
    int16x8_t v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    int8x16x2_t v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 3uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 3uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 3uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 3uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    uint64_t v12 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

uint64_t sub_1D0C83050(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2F010((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v12 = *(int16x8_t *)_X5;
  int16x8_t v11 = *((int16x8_t *)_X5 + 1);
  int8x16_t v13 = *((int8x16_t *)_X5 + 2);
  int8x16_t v14 = *((int8x16_t *)_X5 + 3);
  int16x8_t v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v21 = *(int8x16_t *)result;
  int8x16_t v22 = *(int8x16_t *)(result + 16);
  int8x16_t v23 = *(int8x16_t *)(result + 32);
  int8x16_t v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  int16x8x2_t v27 = (float *)(a5 + 2);
  int8x16_t v28 = (const float *)(result + 64);
  uint64_t v29 = 2 * a2;
  signed int v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xFF00FF00FF00FFLL;
  v33.i64[1] = 0xFF00FF00FF00FFLL;
  int16x8x2_t v34 = v27;
  do
  {
    int16x8_t v35 = (int16x8_t)v24;
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    int16x8_t v37 = (int16x8_t)v23;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    int16x8_t v11 = (int16x8_t)v22;
    int16x8_t v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    int8x16_t v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    int8x16_t v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    int8x16_t v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    int8x16_t v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v34++);
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *int16x8x2_t v27 = *(float *)&v24.i32[3];
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    int8x16_t v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1D0D7F120));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    int8x16_t v28 = (const float *)((char *)v28 + v29);
    int16x8x2_t v27 = (float *)v34;
    int8x16_t v13 = (int8x16_t)v37;
    int8x16_t v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

uint64_t sub_1D0C8327C(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2F09C((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *(int8x16_t *)result;
  int8x16_t v27 = *(int8x16_t *)(result + 16);
  uint64_t v28 = result + 32;
  int8x16_t v29 = *(int8x16_t *)(result + 32);
  int8x16_t v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xFF00FF00FF00FFLL;
  v36.i64[1] = 0xFF00FF00FF00FFLL;
  int16x8_t v37 = (const float *)a5;
  do
  {
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    int8x16_t v26 = *(int8x16_t *)(v28 + v33 - 32);
    int8x16_t v27 = *(int8x16_t *)(v28 + v33 - 16);
    int8x16_t v29 = *(int8x16_t *)(v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)uint64_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C834C4(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v19 = *result;
  uint16x8_t v20 = result[1];
  uint16x8_t v21 = result[2];
  uint16x8_t v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v24 = v9 + 2;
  uint64_t v25 = 2 * a2;
  v26.i64[0] = 0xFF00FF00FF00FFLL;
  v26.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v27 = (int16x8_t)v19;
    int16x8_t v28 = (int16x8_t)v20;
    int16x8_t v29 = (int16x8_t)v21;
    int16x8_t v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    uint16x8_t v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    uint16x8_t v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1D0D7F120));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    uint64_t result = (uint16x8_t *)((char *)result + v25);
    uint16x8_t v11 = (uint16x8_t)v27;
    uint16x8_t v10 = (uint16x8_t)v28;
    uint16x8_t v13 = (uint16x8_t)v29;
    uint16x8_t v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

int16x8_t *sub_1D0C83654(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v19 = result[2];
    int16x8_t v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    int8x16_t v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C837CC(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2F128((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int8x16_t v12 = *(int8x16_t *)_X5;
  int8x16_t v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  int16x8_t v18 = (const float *)(_X5 + 2);
  int8x16_t v19 = *(int8x16_t *)result;
  int8x16_t v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  int8x16_t v23 = (float *)(a5 + 2);
  uint64_t v24 = 2 * a2;
  signed int v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xFF00FF00FF00FFLL;
  v28.i64[1] = 0xFF00FF00FF00FFLL;
  uint16x8_t v29 = v23;
  do
  {
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    int16x8_t v31 = (int16x8_t)v20;
    int16x8_t v32 = (int16x8_t)v19;
    _X11 = result + v24;
    int8x16_t v19 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v35 = (int8x16_t)vld1q_dup_f32(v29++);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *int8x16_t v23 = *(float *)&v20.i32[3];
    uint16x8_t v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    int8x16_t v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    uint16x8_t v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v40);
    int8x16_t v23 = (float *)v29;
    int8x16_t v12 = (int8x16_t)v32;
    int8x16_t v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

uint64_t sub_1D0C83970(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2F1B4((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *(int8x16_t *)result;
  int8x16_t v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xFF00FF00FF00FFLL;
  v31.i64[1] = 0xFF00FF00FF00FFLL;
  int16x8_t v32 = (const float *)a5;
  do
  {
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    int16x8_t v34 = (int16x8_t)v25;
    int16x8_t v35 = (int16x8_t)v24;
    _X12 = result + v28;
    int8x16_t v24 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    int16x8_t v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    int8x16_t v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    int8x16_t v17 = (int8x16_t)v35;
    int8x16_t v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C83B28(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v17 = *result;
  uint16x8_t v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v20 = 2 * a2;
  int v21 = v9 + 2;
  v22.i64[0] = 0xFF00FF00FF00FFLL;
  v22.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    int16x8_t v23 = (int16x8_t)v17;
    int16x8_t v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    uint16x8_t v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1D0D7F120));
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v23;
    uint16x8_t v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1D0C83C38(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    int8x16_t v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C83D38(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2F2B8((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = *(int8x16_t *)_X5;
  int16x8_t v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  int16x8_t v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  uint64_t v20 = (float *)(a5 + 2);
  uint64_t v21 = 2 * a2;
  signed int v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v24.i64[0] = 0xFF00FF00FF00FFLL;
  v24.i64[1] = 0xFF00FF00FF00FFLL;
  uint16x8_t v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    int8x16_t v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *uint64_t v20 = *(float *)&v27.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    int16x8_t v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v32);
    uint64_t v20 = (float *)v25;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1D0C83E9C(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2F344((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)(a6 - 2);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  int16x8_t v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v28.i64[0] = 0xFF00FF00FF00FFLL;
  v28.i64[1] = 0xFF00FF00FF00FFLL;
  int8x16_t v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    int8x16_t v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C84014(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v21 = 2 * a2;
  int v22 = v9 + 2;
  v23.i64[0] = 0xFF00FF00FF00FFLL;
  v23.i64[1] = 0xFF00FF00FF00FFLL;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    uint16x8_t v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    uint64_t result = (uint16x8_t *)((char *)result + v21);
    uint16x8_t v12 = (uint16x8_t)v19;
    int16x8_t v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

int8x16_t *sub_1D0C84100(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v11.i64[0] = 0xFF00FF00FF00FFLL;
  v11.i64[1] = 0xFF00FF00FF00FFLL;
  uint16x8_t v12 = a5;
  do
  {
    int16x8_t v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v12++);
    uint16x8_t v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned long long *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    uint16x8_t v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    int16x8_t v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

__int16 *sub_1D0C841C0(__int16 *a1, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  sub_1D0C84228(a1, a2, a3, a4, a5, a6, a7);
  return sub_1D0C84228(a1 + 64, a2, a3, v12, a5, v13, a7);
}

__int16 *sub_1D0C84228(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int8x16_t v15 = result;
    int16x8x2_t v42 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int16x8x2_t v36 = vld2q_s16(v17);
    uint16x8_t v18 = result + 32;
    int16x8x2_t v45 = vld2q_s16(v18);
    int8x16_t v19 = result + 48;
    int8x16x2_t v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int v26 = _X11;
    int16x8x2_t v41 = vld2q_s16(v26);
    v26 += 16;
    int16x8x2_t v40 = vld2q_s16(v26);
    int8x16_t v27 = _X11 + 32;
    int16x8x2_t v38 = vld2q_s16(v27);
    int16x8_t v28 = _X11 + 48;
    int8x16x2_t v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1D0D7F170).i32[1];
    int8x16_t v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 4uLL), v36.val[0], 4uLL));
    int8x16_t v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 4uLL), v36.val[1], 4uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 4uLL), (int16x8_t)v44.val[0], 4uLL));
    int16x8_t v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 4uLL), (int16x8_t)v44.val[1], 4uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 4uLL), v40.val[0], 4uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 4uLL), v40.val[1], 4uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 4uLL), (int16x8_t)v39.val[0], 4uLL));
    vst2q_s16(result, v42);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 4uLL), (int16x8_t)v39.val[1], 4uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

uint64_t sub_1D0C84418(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C844D8(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C844D8(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C844D8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2D568((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 0x40) != 0) {
      *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
    }
    if ((a4 & 4) == 0)
    {
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      a5 += 2;
      _X5 = (_OWORD *)result;
      result += 2 * a2;
      --a7;
    }
    v8.i64[1] = v9;
    int16x8_t v10 = vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v12 = (int8x16_t)vtstq_s16(v10, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = *((int16x8_t *)_X5 + 1);
    int16x8_t v16 = *((int16x8_t *)_X5 + 2);
    int16x8_t v15 = *((int16x8_t *)_X5 + 3);
    int16x8_t v18 = *((int16x8_t *)_X5 + 4);
    int16x8_t v17 = *((int16x8_t *)_X5 + 5);
    int16x8_t v19 = *((int16x8_t *)_X5 + 6);
    int8x16_t v20 = *((int8x16_t *)_X5 + 7);
    uint16x8_t v21 = (const float *)(_X5 + 8);
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *(int8x16_t *)result;
    int8x16_t v29 = *(int8x16_t *)(result + 16);
    int8x16_t v30 = *(int8x16_t *)(result + 32);
    int8x16_t v31 = *(int8x16_t *)(result + 48);
    uint64_t v32 = result + 96;
    int8x16_t v33 = *(int8x16_t *)(result + 96);
    int8x16_t v34 = *(int8x16_t *)(result + 64);
    int8x16_t v35 = *(int8x16_t *)(result + 80);
    int8x16_t v36 = *(int8x16_t *)(result + 112);
    __asm { PRFM            #0, [X0,#0x80] }
    uint64_t v38 = 2 * a2;
    signed int v39 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    __asm { PRFM            #0, [X0,#0xC0] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v21);
    *(_DWORD *)a5 = v36.i32[3];
    int16x8x2_t v42 = (float *)(a5 + 2);
    int8x16_t v43 = (int8x16_t)vceqzq_s16(v11);
    v44.i64[0] = 0xFE00FE00FE00FE00;
    v44.i64[1] = 0xFE00FE00FE00FE00;
    int16x8x2_t v45 = v42;
    do
    {
      uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 4uLL);
      int16x8_t v47 = (int16x8_t)v36;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 4uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 4uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 4uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 4uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 4uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = v32 + v38;
      int8x16_t v28 = *(int8x16_t *)(v32 + v38 - 96);
      int8x16_t v29 = *(int8x16_t *)(v32 + v38 - 80);
      int8x16_t v30 = *(int8x16_t *)(v32 + v38 - 64);
      int8x16_t v31 = *(int8x16_t *)(v32 + v38 - 48);
      int8x16_t v34 = *(int8x16_t *)(v32 + v38 - 32);
      int8x16_t v35 = *(int8x16_t *)(v32 + v38 - 16);
      int8x16_t v33 = *(int8x16_t *)(v32 + 2 * a2);
      int8x16_t v36 = *(int8x16_t *)(v32 + v38 + 16);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v57 = (int8x16_t)vld1q_dup_f32(v45++);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v20, v41, 4uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v57, v28, 0xCuLL);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
      int16x8_t v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v14));
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
      int8x16_t v63 = vqmovn_high_s16(vqmovn_s16(v61), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13)));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v30, v31, 0xCuLL);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v16));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v31, v34, 0xCuLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v65), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v15)));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v34, v35, 0xCuLL);
      int16x8_t v69 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v17));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v35, v33, 0xCuLL);
      int8x16_t v71 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v18))), v69);
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v33, v36, 0xCuLL);
      *int16x8x2_t v42 = *(float *)&v36.i32[3];
      int8x16_t v73 = vqtbl1q_s8(v8, vaddq_s8(v63, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v58, (uint16x8_t)v47), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v58)), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v47)));
      *(int8x16_t *)(v32 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v73.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      *(int16x8_t *)(v32 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v73), (int16x8_t)0), v44);
      int8x16_t v75 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v75.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v75), (int16x8_t)0), v44);
      int8x16_t v76 = vqtbl1q_s8(v8, vaddq_s8(v71, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v76), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v74, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      *(int8x16_t *)(v32 + 16) = vbslq_s8(v12, (int8x16_t)v47, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v47, v77), (int16x8_t)0), v44));
      int8x16_t v78 = (const float *)(v32 + 32);
      --v39;
      v32 += v38;
      int16x8x2_t v42 = (float *)v45;
      int8x16_t v20 = (int8x16_t)v47;
      int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v78);
    }
    while (v39 > 1);
  }
  return result;
}

uint64_t sub_1D0C8484C(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unint64_t v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C8490C(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C8490C(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C8490C(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2D5F4((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 4) != 0)
    {
      int8x16_t v12 = (const float *)&_X5[-1].i32[3];
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
    }
    else
    {
      int16x8_t v10 = (const float *)a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      _X5 = (int16x8_t *)result;
      result += 2 * a2;
      --a7;
      a5 = (__int16 *)v10;
    }
    v8.i64[1] = v9;
    unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
    *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 124);
    int16x8_t v14 = vdupq_n_s16(~a4);
    int16x8_t v16 = *_X5;
    int16x8_t v15 = _X5[1];
    int16x8_t v17 = (int16x8_t)vandq_s8((int8x16_t)v14, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v18 = (int8x16_t)vtstq_s16(v14, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *(int8x16_t *)result;
    int8x16_t v32 = *(int8x16_t *)(result + 16);
    int8x16_t v33 = *(int8x16_t *)(result + 32);
    int8x16_t v34 = *(int8x16_t *)(result + 48);
    int8x16_t v35 = *(int8x16_t *)(result + 64);
    int8x16_t v36 = *(int8x16_t *)(result + 80);
    uint64_t v37 = result + 96;
    int8x16_t v38 = *(int8x16_t *)(result + 96);
    int8x16_t v39 = *(int8x16_t *)(result + 112);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    uint64_t v42 = 2 * a2;
    int v43 = v13 + 2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v17);
    v45.i64[0] = 0xFE00FE00FE00FE00;
    v45.i64[1] = 0xFE00FE00FE00FE00;
    uint16x8_t v46 = (const float *)a5;
    do
    {
      uint16x8_t v47 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xCuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xCuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xCuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v20, 0xCuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xCuLL);
      int16x8_t v15 = (int16x8_t)v32;
      uint16x8_t v54 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v16, 0xCuLL);
      int16x8_t v16 = (int16x8_t)v31;
      _X13 = v37 + v42;
      int8x16_t v31 = *(int8x16_t *)(v37 + v42 - 96);
      int8x16_t v32 = *(int8x16_t *)(v37 + v42 - 80);
      int8x16_t v33 = *(int8x16_t *)(v37 + v42 - 64);
      int8x16_t v34 = *(int8x16_t *)(v37 + v42 - 48);
      int8x16_t v35 = *(int8x16_t *)(v37 + v42 - 32);
      int8x16_t v36 = *(int8x16_t *)(v37 + v42 - 16);
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
      uint16x8_t v57 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
      int16x8_t v58 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v16));
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v15));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
      int8x16_t v62 = vqmovn_high_s16(vqmovn_s16(v58), v60);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v20));
      int16x8_t v64 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v61));
      int8x16_t v38 = *(int8x16_t *)(v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)(v37 + v42 + 16);
      int16x8_t v65 = vaddq_s16(v64, (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v19));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v35, v36, 4uLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v63), v65);
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v36, v38, 4uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v21));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v38, v39, 4uLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v22))), v71);
      int16x8_t v74 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v72);
      int16x8_t v75 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v48)), v74);
      v74.i32[0] = *(_DWORD *)(v37 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
      uint16x8_t v76 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v74, 4uLL);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v62, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v78 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v75, (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v76)), (int16x8_t)vcgtq_u16(v76, (uint16x8_t)v23)));
      *(int8x16_t *)(v37 - 96) = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v45), (int8x16_t)v16);
      *(int16x8_t *)(v37 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v45);
      int8x16_t v79 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v79.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v79), (int16x8_t)0), v45);
      int8x16_t v80 = vqtbl1q_s8(v8, vaddq_s8(v73, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v80.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v80), (int16x8_t)0), v45);
      int8x16_t v81 = vqtbl1q_s8(v8, vaddq_s8(v78, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v81.i8), (int16x8_t)0), v45);
      *(int8x16_t *)(v37 + 16) = vbslq_s8(v18, (int8x16_t)v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v81), (int16x8_t)0), v45));
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v46++);
      --v43;
      v37 += v42;
      *(_DWORD *)a5 = v23.i32[3];
      a5 = (__int16 *)v46;
    }
    while (v43 > 1);
  }
  return result;
}

uint64_t sub_1D0C84C90(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C84D50(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C84D50(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C84D50(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  uint16x8_t v15 = _X5[4];
  uint16x8_t v14 = _X5[5];
  uint16x8_t v17 = _X5[6];
  uint16x8_t v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v24 = *(uint16x8_t *)result;
  uint16x8_t v25 = *(uint16x8_t *)(result + 16);
  uint16x8_t v26 = *(uint16x8_t *)(result + 32);
  uint16x8_t v27 = *(uint16x8_t *)(result + 48);
  uint16x8_t v28 = *(uint16x8_t *)(result + 64);
  uint16x8_t v29 = *(uint16x8_t *)(result + 80);
  int8x16_t v30 = (int16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 96);
  uint16x8_t v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v35 = v9 + 2;
  uint64_t v36 = 2 * a2;
  v37.i64[0] = 0xFE00FE00FE00FE00;
  v37.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v38 = (int16x8_t)v32;
    int16x8_t v39 = (int16x8_t)v31;
    int16x8_t v40 = (int16x8_t)v29;
    int16x8_t v41 = (int16x8_t)v28;
    int16x8_t v42 = (int16x8_t)v27;
    int16x8_t v43 = (int16x8_t)v26;
    int16x8_t v44 = (int16x8_t)v25;
    int16x8_t v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    uint16x8_t v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    uint16x8_t v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    uint16x8_t v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1D0D7F120));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *int8x16_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v30 = (int16x8_t *)((char *)v30 + v36);
    uint16x8_t v11 = (uint16x8_t)v45;
    uint16x8_t v10 = (uint16x8_t)v44;
    uint16x8_t v13 = (uint16x8_t)v43;
    uint16x8_t v12 = (uint16x8_t)v42;
    uint16x8_t v15 = (uint16x8_t)v41;
    uint16x8_t v14 = (uint16x8_t)v40;
    uint16x8_t v17 = (uint16x8_t)v39;
    uint16x8_t v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

int16x8_t *sub_1D0C85014(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v12 = 34;
  }
  else {
    int v12 = 2;
  }
  unsigned int v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0) {
    int v14 = 17;
  }
  else {
    int v14 = 1;
  }
  unint64_t v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C850C4(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C850C4(a1 + 8, a2, a3, v15, a5, v16, a7);
}

int16x8_t *sub_1D0C850C4(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F190);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F1A0);
  int v12 = a7 + 1;
  v13.i64[0] = 0xFE00FE00FE00FE00;
  v13.i64[1] = 0xFE00FE00FE00FE00;
  int v14 = a5;
  do
  {
    int16x8_t v15 = *result;
    int16x8_t v16 = result[1];
    int16x8_t v17 = result[2];
    int16x8_t v18 = result[3];
    int16x8_t v19 = result[4];
    int16x8_t v20 = result[5];
    int16x8_t v22 = result[6];
    int16x8_t v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    int8x16_t v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    int16x8_t v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    int8x16_t v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

__int16 *sub_1D0C85348(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v32 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int8x16x2_t v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    int16x8_t v23 = _X11;
    int16x8x2_t v31 = vld2q_s16(v23);
    v23 += 16;
    int8x16x2_t v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v25;
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 4uLL), (int16x8_t)v33.val[0], 4uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    int8x16_t v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 4uLL), (int16x8_t)v33.val[1], 4uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 4uLL), (int16x8_t)v30.val[0], 4uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 4uLL), (int16x8_t)v30.val[1], 4uLL));
    int16x8_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1D0C85458(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v13 = a7 + 2;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v25 = vld2q_s16(v15);
    uint64_t v11 = a2;
    int16x8_t v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    int8x16x2_t v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 4uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 4uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 4uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 4uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    uint64_t v12 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

uint64_t sub_1D0C85514(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2D680((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v12 = *(int16x8_t *)_X5;
  int16x8_t v11 = *((int16x8_t *)_X5 + 1);
  int8x16_t v13 = *((int8x16_t *)_X5 + 2);
  int8x16_t v14 = *((int8x16_t *)_X5 + 3);
  int16x8_t v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v21 = *(int8x16_t *)result;
  int8x16_t v22 = *(int8x16_t *)(result + 16);
  int8x16_t v23 = *(int8x16_t *)(result + 32);
  int8x16_t v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  int16x8x2_t v27 = (float *)(a5 + 2);
  int8x16_t v28 = (const float *)(result + 64);
  uint64_t v29 = 2 * a2;
  signed int v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xFE00FE00FE00FE00;
  v33.i64[1] = 0xFE00FE00FE00FE00;
  int16x8x2_t v34 = v27;
  do
  {
    int16x8_t v35 = (int16x8_t)v24;
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    int16x8_t v37 = (int16x8_t)v23;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    int16x8_t v11 = (int16x8_t)v22;
    int16x8_t v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    int8x16_t v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    int8x16_t v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    int8x16_t v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    int8x16_t v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v34++);
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *int16x8x2_t v27 = *(float *)&v24.i32[3];
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    int8x16_t v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1D0D7F120));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    int8x16_t v28 = (const float *)((char *)v28 + v29);
    int16x8x2_t v27 = (float *)v34;
    int8x16_t v13 = (int8x16_t)v37;
    int8x16_t v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

uint64_t sub_1D0C85740(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2D70C((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *(int8x16_t *)result;
  int8x16_t v27 = *(int8x16_t *)(result + 16);
  uint64_t v28 = result + 32;
  int8x16_t v29 = *(int8x16_t *)(result + 32);
  int8x16_t v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xFE00FE00FE00FE00;
  v36.i64[1] = 0xFE00FE00FE00FE00;
  int16x8_t v37 = (const float *)a5;
  do
  {
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    int8x16_t v26 = *(int8x16_t *)(v28 + v33 - 32);
    int8x16_t v27 = *(int8x16_t *)(v28 + v33 - 16);
    int8x16_t v29 = *(int8x16_t *)(v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)uint64_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C85988(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v19 = *result;
  uint16x8_t v20 = result[1];
  uint16x8_t v21 = result[2];
  uint16x8_t v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v24 = v9 + 2;
  uint64_t v25 = 2 * a2;
  v26.i64[0] = 0xFE00FE00FE00FE00;
  v26.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v27 = (int16x8_t)v19;
    int16x8_t v28 = (int16x8_t)v20;
    int16x8_t v29 = (int16x8_t)v21;
    int16x8_t v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    uint16x8_t v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    uint16x8_t v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1D0D7F120));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    uint64_t result = (uint16x8_t *)((char *)result + v25);
    uint16x8_t v11 = (uint16x8_t)v27;
    uint16x8_t v10 = (uint16x8_t)v28;
    uint16x8_t v13 = (uint16x8_t)v29;
    uint16x8_t v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

int16x8_t *sub_1D0C85B18(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v19 = result[2];
    int16x8_t v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    int8x16_t v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C85C90(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2D798((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int8x16_t v12 = *(int8x16_t *)_X5;
  int8x16_t v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  int16x8_t v18 = (const float *)(_X5 + 2);
  int8x16_t v19 = *(int8x16_t *)result;
  int8x16_t v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  int8x16_t v23 = (float *)(a5 + 2);
  uint64_t v24 = 2 * a2;
  signed int v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xFE00FE00FE00FE00;
  v28.i64[1] = 0xFE00FE00FE00FE00;
  uint16x8_t v29 = v23;
  do
  {
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    int16x8_t v31 = (int16x8_t)v20;
    int16x8_t v32 = (int16x8_t)v19;
    _X11 = result + v24;
    int8x16_t v19 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v35 = (int8x16_t)vld1q_dup_f32(v29++);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *int8x16_t v23 = *(float *)&v20.i32[3];
    uint16x8_t v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    int8x16_t v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    uint16x8_t v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v40);
    int8x16_t v23 = (float *)v29;
    int8x16_t v12 = (int8x16_t)v32;
    int8x16_t v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

uint64_t sub_1D0C85E34(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2D824((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *(int8x16_t *)result;
  int8x16_t v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xFE00FE00FE00FE00;
  v31.i64[1] = 0xFE00FE00FE00FE00;
  int16x8_t v32 = (const float *)a5;
  do
  {
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    int16x8_t v34 = (int16x8_t)v25;
    int16x8_t v35 = (int16x8_t)v24;
    _X12 = result + v28;
    int8x16_t v24 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    int16x8_t v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    int8x16_t v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    int8x16_t v17 = (int8x16_t)v35;
    int8x16_t v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C85FEC(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v17 = *result;
  uint16x8_t v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v20 = 2 * a2;
  int v21 = v9 + 2;
  v22.i64[0] = 0xFE00FE00FE00FE00;
  v22.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    int16x8_t v23 = (int16x8_t)v17;
    int16x8_t v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    uint16x8_t v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1D0D7F120));
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v23;
    uint16x8_t v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1D0C860FC(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    int8x16_t v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C861FC(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2D928((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = *(int8x16_t *)_X5;
  int16x8_t v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  int16x8_t v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  uint64_t v20 = (float *)(a5 + 2);
  uint64_t v21 = 2 * a2;
  signed int v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v24.i64[0] = 0xFE00FE00FE00FE00;
  v24.i64[1] = 0xFE00FE00FE00FE00;
  uint16x8_t v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    int8x16_t v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *uint64_t v20 = *(float *)&v27.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    int16x8_t v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v32);
    uint64_t v20 = (float *)v25;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1D0C86360(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2D9B4((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)(a6 - 2);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  int16x8_t v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v28.i64[0] = 0xFE00FE00FE00FE00;
  v28.i64[1] = 0xFE00FE00FE00FE00;
  int8x16_t v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    int8x16_t v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C864D8(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v21 = 2 * a2;
  int v22 = v9 + 2;
  v23.i64[0] = 0xFE00FE00FE00FE00;
  v23.i64[1] = 0xFE00FE00FE00FE00;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    uint16x8_t v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    uint64_t result = (uint16x8_t *)((char *)result + v21);
    uint16x8_t v12 = (uint16x8_t)v19;
    int16x8_t v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

int8x16_t *sub_1D0C865C4(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v11.i64[0] = 0xFE00FE00FE00FE00;
  v11.i64[1] = 0xFE00FE00FE00FE00;
  uint16x8_t v12 = a5;
  do
  {
    int16x8_t v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v12++);
    uint16x8_t v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned long long *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    uint16x8_t v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    int16x8_t v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

__int16 *sub_1D0C86684(__int16 *a1, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  sub_1D0C866EC(a1, a2, a3, a4, a5, a6, a7);
  return sub_1D0C866EC(a1 + 64, a2, a3, v12, a5, v13, a7);
}

__int16 *sub_1D0C866EC(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int8x16_t v15 = result;
    int16x8x2_t v42 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int16x8x2_t v36 = vld2q_s16(v17);
    uint16x8_t v18 = result + 32;
    int16x8x2_t v45 = vld2q_s16(v18);
    int8x16_t v19 = result + 48;
    int8x16x2_t v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int v26 = _X11;
    int16x8x2_t v41 = vld2q_s16(v26);
    v26 += 16;
    int16x8x2_t v40 = vld2q_s16(v26);
    int8x16_t v27 = _X11 + 32;
    int16x8x2_t v38 = vld2q_s16(v27);
    int16x8_t v28 = _X11 + 48;
    int8x16x2_t v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1D0D7F170).i32[1];
    int8x16_t v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 5uLL), v36.val[0], 5uLL));
    int8x16_t v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 5uLL), v36.val[1], 5uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 5uLL), (int16x8_t)v44.val[0], 5uLL));
    int16x8_t v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 5uLL), (int16x8_t)v44.val[1], 5uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 5uLL), v40.val[0], 5uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 5uLL), v40.val[1], 5uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 5uLL), (int16x8_t)v39.val[0], 5uLL));
    vst2q_s16(result, v42);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 5uLL), (int16x8_t)v39.val[1], 5uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

uint64_t sub_1D0C868DC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C8699C(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C8699C(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C8699C(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2BBD8((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 0x40) != 0) {
      *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
    }
    if ((a4 & 4) == 0)
    {
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      a5 += 2;
      _X5 = (_OWORD *)result;
      result += 2 * a2;
      --a7;
    }
    v8.i64[1] = v9;
    int16x8_t v10 = vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v12 = (int8x16_t)vtstq_s16(v10, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = *((int16x8_t *)_X5 + 1);
    int16x8_t v16 = *((int16x8_t *)_X5 + 2);
    int16x8_t v15 = *((int16x8_t *)_X5 + 3);
    int16x8_t v18 = *((int16x8_t *)_X5 + 4);
    int16x8_t v17 = *((int16x8_t *)_X5 + 5);
    int16x8_t v19 = *((int16x8_t *)_X5 + 6);
    int8x16_t v20 = *((int8x16_t *)_X5 + 7);
    uint16x8_t v21 = (const float *)(_X5 + 8);
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *(int8x16_t *)result;
    int8x16_t v29 = *(int8x16_t *)(result + 16);
    int8x16_t v30 = *(int8x16_t *)(result + 32);
    int8x16_t v31 = *(int8x16_t *)(result + 48);
    uint64_t v32 = result + 96;
    int8x16_t v33 = *(int8x16_t *)(result + 96);
    int8x16_t v34 = *(int8x16_t *)(result + 64);
    int8x16_t v35 = *(int8x16_t *)(result + 80);
    int8x16_t v36 = *(int8x16_t *)(result + 112);
    __asm { PRFM            #0, [X0,#0x80] }
    uint64_t v38 = 2 * a2;
    signed int v39 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    __asm { PRFM            #0, [X0,#0xC0] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v21);
    *(_DWORD *)a5 = v36.i32[3];
    int16x8x2_t v42 = (float *)(a5 + 2);
    int8x16_t v43 = (int8x16_t)vceqzq_s16(v11);
    v44.i64[0] = 0xFC00FC00FC00FC00;
    v44.i64[1] = 0xFC00FC00FC00FC00;
    int16x8x2_t v45 = v42;
    do
    {
      uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 4uLL);
      int16x8_t v47 = (int16x8_t)v36;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 4uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 4uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 4uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 4uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 4uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = v32 + v38;
      int8x16_t v28 = *(int8x16_t *)(v32 + v38 - 96);
      int8x16_t v29 = *(int8x16_t *)(v32 + v38 - 80);
      int8x16_t v30 = *(int8x16_t *)(v32 + v38 - 64);
      int8x16_t v31 = *(int8x16_t *)(v32 + v38 - 48);
      int8x16_t v34 = *(int8x16_t *)(v32 + v38 - 32);
      int8x16_t v35 = *(int8x16_t *)(v32 + v38 - 16);
      int8x16_t v33 = *(int8x16_t *)(v32 + 2 * a2);
      int8x16_t v36 = *(int8x16_t *)(v32 + v38 + 16);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v57 = (int8x16_t)vld1q_dup_f32(v45++);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v20, v41, 4uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v57, v28, 0xCuLL);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
      int16x8_t v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v14));
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
      int8x16_t v63 = vqmovn_high_s16(vqmovn_s16(v61), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13)));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v30, v31, 0xCuLL);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v16));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v31, v34, 0xCuLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v65), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v15)));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v34, v35, 0xCuLL);
      int16x8_t v69 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v17));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v35, v33, 0xCuLL);
      int8x16_t v71 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v18))), v69);
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v33, v36, 0xCuLL);
      *int16x8x2_t v42 = *(float *)&v36.i32[3];
      int8x16_t v73 = vqtbl1q_s8(v8, vaddq_s8(v63, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v58, (uint16x8_t)v47), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v58)), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v47)));
      *(int8x16_t *)(v32 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v73.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      *(int16x8_t *)(v32 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v73), (int16x8_t)0), v44);
      int8x16_t v75 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v75.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v75), (int16x8_t)0), v44);
      int8x16_t v76 = vqtbl1q_s8(v8, vaddq_s8(v71, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v76), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v74, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      *(int8x16_t *)(v32 + 16) = vbslq_s8(v12, (int8x16_t)v47, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v47, v77), (int16x8_t)0), v44));
      int8x16_t v78 = (const float *)(v32 + 32);
      --v39;
      v32 += v38;
      int16x8x2_t v42 = (float *)v45;
      int8x16_t v20 = (int8x16_t)v47;
      int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v78);
    }
    while (v39 > 1);
  }
  return result;
}

uint64_t sub_1D0C86D10(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unint64_t v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C86DD0(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C86DD0(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C86DD0(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2BC64((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 4) != 0)
    {
      int8x16_t v12 = (const float *)&_X5[-1].i32[3];
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
    }
    else
    {
      int16x8_t v10 = (const float *)a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      _X5 = (int16x8_t *)result;
      result += 2 * a2;
      --a7;
      a5 = (__int16 *)v10;
    }
    v8.i64[1] = v9;
    unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
    *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 124);
    int16x8_t v14 = vdupq_n_s16(~a4);
    int16x8_t v16 = *_X5;
    int16x8_t v15 = _X5[1];
    int16x8_t v17 = (int16x8_t)vandq_s8((int8x16_t)v14, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v18 = (int8x16_t)vtstq_s16(v14, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *(int8x16_t *)result;
    int8x16_t v32 = *(int8x16_t *)(result + 16);
    int8x16_t v33 = *(int8x16_t *)(result + 32);
    int8x16_t v34 = *(int8x16_t *)(result + 48);
    int8x16_t v35 = *(int8x16_t *)(result + 64);
    int8x16_t v36 = *(int8x16_t *)(result + 80);
    uint64_t v37 = result + 96;
    int8x16_t v38 = *(int8x16_t *)(result + 96);
    int8x16_t v39 = *(int8x16_t *)(result + 112);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    uint64_t v42 = 2 * a2;
    int v43 = v13 + 2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v17);
    v45.i64[0] = 0xFC00FC00FC00FC00;
    v45.i64[1] = 0xFC00FC00FC00FC00;
    uint16x8_t v46 = (const float *)a5;
    do
    {
      uint16x8_t v47 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xCuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xCuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xCuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v20, 0xCuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xCuLL);
      int16x8_t v15 = (int16x8_t)v32;
      uint16x8_t v54 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v16, 0xCuLL);
      int16x8_t v16 = (int16x8_t)v31;
      _X13 = v37 + v42;
      int8x16_t v31 = *(int8x16_t *)(v37 + v42 - 96);
      int8x16_t v32 = *(int8x16_t *)(v37 + v42 - 80);
      int8x16_t v33 = *(int8x16_t *)(v37 + v42 - 64);
      int8x16_t v34 = *(int8x16_t *)(v37 + v42 - 48);
      int8x16_t v35 = *(int8x16_t *)(v37 + v42 - 32);
      int8x16_t v36 = *(int8x16_t *)(v37 + v42 - 16);
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
      uint16x8_t v57 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
      int16x8_t v58 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v16));
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v15));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
      int8x16_t v62 = vqmovn_high_s16(vqmovn_s16(v58), v60);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v20));
      int16x8_t v64 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v61));
      int8x16_t v38 = *(int8x16_t *)(v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)(v37 + v42 + 16);
      int16x8_t v65 = vaddq_s16(v64, (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v19));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v35, v36, 4uLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v63), v65);
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v36, v38, 4uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v21));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v38, v39, 4uLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v22))), v71);
      int16x8_t v74 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v72);
      int16x8_t v75 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v48)), v74);
      v74.i32[0] = *(_DWORD *)(v37 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
      uint16x8_t v76 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v74, 4uLL);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v62, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v78 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v75, (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v76)), (int16x8_t)vcgtq_u16(v76, (uint16x8_t)v23)));
      *(int8x16_t *)(v37 - 96) = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v45), (int8x16_t)v16);
      *(int16x8_t *)(v37 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v45);
      int8x16_t v79 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v79.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v79), (int16x8_t)0), v45);
      int8x16_t v80 = vqtbl1q_s8(v8, vaddq_s8(v73, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v80.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v80), (int16x8_t)0), v45);
      int8x16_t v81 = vqtbl1q_s8(v8, vaddq_s8(v78, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v81.i8), (int16x8_t)0), v45);
      *(int8x16_t *)(v37 + 16) = vbslq_s8(v18, (int8x16_t)v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v81), (int16x8_t)0), v45));
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v46++);
      --v43;
      v37 += v42;
      *(_DWORD *)a5 = v23.i32[3];
      a5 = (__int16 *)v46;
    }
    while (v43 > 1);
  }
  return result;
}

uint64_t sub_1D0C87154(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C87214(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C87214(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C87214(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  uint16x8_t v15 = _X5[4];
  uint16x8_t v14 = _X5[5];
  uint16x8_t v17 = _X5[6];
  uint16x8_t v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v24 = *(uint16x8_t *)result;
  uint16x8_t v25 = *(uint16x8_t *)(result + 16);
  uint16x8_t v26 = *(uint16x8_t *)(result + 32);
  uint16x8_t v27 = *(uint16x8_t *)(result + 48);
  uint16x8_t v28 = *(uint16x8_t *)(result + 64);
  uint16x8_t v29 = *(uint16x8_t *)(result + 80);
  int8x16_t v30 = (int16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 96);
  uint16x8_t v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v35 = v9 + 2;
  uint64_t v36 = 2 * a2;
  v37.i64[0] = 0xFC00FC00FC00FC00;
  v37.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v38 = (int16x8_t)v32;
    int16x8_t v39 = (int16x8_t)v31;
    int16x8_t v40 = (int16x8_t)v29;
    int16x8_t v41 = (int16x8_t)v28;
    int16x8_t v42 = (int16x8_t)v27;
    int16x8_t v43 = (int16x8_t)v26;
    int16x8_t v44 = (int16x8_t)v25;
    int16x8_t v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    uint16x8_t v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    uint16x8_t v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    uint16x8_t v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1D0D7F120));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *int8x16_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v30 = (int16x8_t *)((char *)v30 + v36);
    uint16x8_t v11 = (uint16x8_t)v45;
    uint16x8_t v10 = (uint16x8_t)v44;
    uint16x8_t v13 = (uint16x8_t)v43;
    uint16x8_t v12 = (uint16x8_t)v42;
    uint16x8_t v15 = (uint16x8_t)v41;
    uint16x8_t v14 = (uint16x8_t)v40;
    uint16x8_t v17 = (uint16x8_t)v39;
    uint16x8_t v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

int16x8_t *sub_1D0C874D8(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v12 = 34;
  }
  else {
    int v12 = 2;
  }
  unsigned int v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0) {
    int v14 = 17;
  }
  else {
    int v14 = 1;
  }
  unint64_t v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C87588(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C87588(a1 + 8, a2, a3, v15, a5, v16, a7);
}

int16x8_t *sub_1D0C87588(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F190);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F1A0);
  int v12 = a7 + 1;
  v13.i64[0] = 0xFC00FC00FC00FC00;
  v13.i64[1] = 0xFC00FC00FC00FC00;
  int v14 = a5;
  do
  {
    int16x8_t v15 = *result;
    int16x8_t v16 = result[1];
    int16x8_t v17 = result[2];
    int16x8_t v18 = result[3];
    int16x8_t v19 = result[4];
    int16x8_t v20 = result[5];
    int16x8_t v22 = result[6];
    int16x8_t v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    int8x16_t v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    int16x8_t v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    int8x16_t v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

__int16 *sub_1D0C8780C(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v32 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int8x16x2_t v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    int16x8_t v23 = _X11;
    int16x8x2_t v31 = vld2q_s16(v23);
    v23 += 16;
    int8x16x2_t v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v25;
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 5uLL), (int16x8_t)v33.val[0], 5uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    int8x16_t v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 5uLL), (int16x8_t)v33.val[1], 5uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 5uLL), (int16x8_t)v30.val[0], 5uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 5uLL), (int16x8_t)v30.val[1], 5uLL));
    int16x8_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1D0C8791C(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v13 = a7 + 2;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v25 = vld2q_s16(v15);
    uint64_t v11 = a2;
    int16x8_t v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    int8x16x2_t v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 5uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 5uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 5uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 5uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    uint64_t v12 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

uint64_t sub_1D0C879D8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2BCF0((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v12 = *(int16x8_t *)_X5;
  int16x8_t v11 = *((int16x8_t *)_X5 + 1);
  int8x16_t v13 = *((int8x16_t *)_X5 + 2);
  int8x16_t v14 = *((int8x16_t *)_X5 + 3);
  int16x8_t v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v21 = *(int8x16_t *)result;
  int8x16_t v22 = *(int8x16_t *)(result + 16);
  int8x16_t v23 = *(int8x16_t *)(result + 32);
  int8x16_t v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  int16x8x2_t v27 = (float *)(a5 + 2);
  int8x16_t v28 = (const float *)(result + 64);
  uint64_t v29 = 2 * a2;
  signed int v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xFC00FC00FC00FC00;
  v33.i64[1] = 0xFC00FC00FC00FC00;
  int16x8x2_t v34 = v27;
  do
  {
    int16x8_t v35 = (int16x8_t)v24;
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    int16x8_t v37 = (int16x8_t)v23;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    int16x8_t v11 = (int16x8_t)v22;
    int16x8_t v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    int8x16_t v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    int8x16_t v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    int8x16_t v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    int8x16_t v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v34++);
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *int16x8x2_t v27 = *(float *)&v24.i32[3];
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    int8x16_t v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1D0D7F120));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    int8x16_t v28 = (const float *)((char *)v28 + v29);
    int16x8x2_t v27 = (float *)v34;
    int8x16_t v13 = (int8x16_t)v37;
    int8x16_t v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

uint64_t sub_1D0C87C04(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2BD7C((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *(int8x16_t *)result;
  int8x16_t v27 = *(int8x16_t *)(result + 16);
  uint64_t v28 = result + 32;
  int8x16_t v29 = *(int8x16_t *)(result + 32);
  int8x16_t v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xFC00FC00FC00FC00;
  v36.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v37 = (const float *)a5;
  do
  {
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    int8x16_t v26 = *(int8x16_t *)(v28 + v33 - 32);
    int8x16_t v27 = *(int8x16_t *)(v28 + v33 - 16);
    int8x16_t v29 = *(int8x16_t *)(v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)uint64_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C87E4C(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v19 = *result;
  uint16x8_t v20 = result[1];
  uint16x8_t v21 = result[2];
  uint16x8_t v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v24 = v9 + 2;
  uint64_t v25 = 2 * a2;
  v26.i64[0] = 0xFC00FC00FC00FC00;
  v26.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v27 = (int16x8_t)v19;
    int16x8_t v28 = (int16x8_t)v20;
    int16x8_t v29 = (int16x8_t)v21;
    int16x8_t v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    uint16x8_t v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    uint16x8_t v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1D0D7F120));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    uint64_t result = (uint16x8_t *)((char *)result + v25);
    uint16x8_t v11 = (uint16x8_t)v27;
    uint16x8_t v10 = (uint16x8_t)v28;
    uint16x8_t v13 = (uint16x8_t)v29;
    uint16x8_t v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

int16x8_t *sub_1D0C87FDC(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v19 = result[2];
    int16x8_t v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    int8x16_t v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C88154(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2BE08((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int8x16_t v12 = *(int8x16_t *)_X5;
  int8x16_t v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  int16x8_t v18 = (const float *)(_X5 + 2);
  int8x16_t v19 = *(int8x16_t *)result;
  int8x16_t v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  int8x16_t v23 = (float *)(a5 + 2);
  uint64_t v24 = 2 * a2;
  signed int v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xFC00FC00FC00FC00;
  v28.i64[1] = 0xFC00FC00FC00FC00;
  uint16x8_t v29 = v23;
  do
  {
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    int16x8_t v31 = (int16x8_t)v20;
    int16x8_t v32 = (int16x8_t)v19;
    _X11 = result + v24;
    int8x16_t v19 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v35 = (int8x16_t)vld1q_dup_f32(v29++);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *int8x16_t v23 = *(float *)&v20.i32[3];
    uint16x8_t v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    int8x16_t v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    uint16x8_t v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v40);
    int8x16_t v23 = (float *)v29;
    int8x16_t v12 = (int8x16_t)v32;
    int8x16_t v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

uint64_t sub_1D0C882F8(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2BE94((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *(int8x16_t *)result;
  int8x16_t v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xFC00FC00FC00FC00;
  v31.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v32 = (const float *)a5;
  do
  {
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    int16x8_t v34 = (int16x8_t)v25;
    int16x8_t v35 = (int16x8_t)v24;
    _X12 = result + v28;
    int8x16_t v24 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    int16x8_t v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    int8x16_t v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    int8x16_t v17 = (int8x16_t)v35;
    int8x16_t v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C884B0(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v17 = *result;
  uint16x8_t v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v20 = 2 * a2;
  int v21 = v9 + 2;
  v22.i64[0] = 0xFC00FC00FC00FC00;
  v22.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    int16x8_t v23 = (int16x8_t)v17;
    int16x8_t v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    uint16x8_t v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1D0D7F120));
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v23;
    uint16x8_t v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1D0C885C0(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    int8x16_t v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C886C0(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2BF98((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = *(int8x16_t *)_X5;
  int16x8_t v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  int16x8_t v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  uint64_t v20 = (float *)(a5 + 2);
  uint64_t v21 = 2 * a2;
  signed int v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v24.i64[0] = 0xFC00FC00FC00FC00;
  v24.i64[1] = 0xFC00FC00FC00FC00;
  uint16x8_t v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    int8x16_t v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *uint64_t v20 = *(float *)&v27.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    int16x8_t v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v32);
    uint64_t v20 = (float *)v25;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1D0C88824(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2C024((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)(a6 - 2);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  int16x8_t v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v28.i64[0] = 0xFC00FC00FC00FC00;
  v28.i64[1] = 0xFC00FC00FC00FC00;
  int8x16_t v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    int8x16_t v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C8899C(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v21 = 2 * a2;
  int v22 = v9 + 2;
  v23.i64[0] = 0xFC00FC00FC00FC00;
  v23.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    uint16x8_t v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    uint64_t result = (uint16x8_t *)((char *)result + v21);
    uint16x8_t v12 = (uint16x8_t)v19;
    int16x8_t v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

int8x16_t *sub_1D0C88A88(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  uint16x8_t v12 = a5;
  do
  {
    int16x8_t v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v12++);
    uint16x8_t v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned long long *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    uint16x8_t v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    int16x8_t v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

__int16 *sub_1D0C88B48(__int16 *a1, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  sub_1D0C88BB0(a1, a2, a3, a4, a5, a6, a7);
  return sub_1D0C88BB0(a1 + 64, a2, a3, v12, a5, v13, a7);
}

__int16 *sub_1D0C88BB0(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  do
  {
    int8x16_t v15 = result;
    int16x8x2_t v42 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int16x8x2_t v36 = vld2q_s16(v17);
    uint16x8_t v18 = result + 32;
    int16x8x2_t v45 = vld2q_s16(v18);
    int8x16_t v19 = result + 48;
    int8x16x2_t v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int v26 = _X11;
    int16x8x2_t v41 = vld2q_s16(v26);
    v26 += 16;
    int16x8x2_t v40 = vld2q_s16(v26);
    int8x16_t v27 = _X11 + 32;
    int16x8x2_t v38 = vld2q_s16(v27);
    int16x8_t v28 = _X11 + 48;
    int8x16x2_t v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1D0D7F170).i32[1];
    int8x16_t v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 6uLL), v36.val[0], 6uLL));
    int8x16_t v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 6uLL), v36.val[1], 6uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 6uLL), (int16x8_t)v44.val[0], 6uLL));
    int16x8_t v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 6uLL), (int16x8_t)v44.val[1], 6uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 6uLL), v40.val[0], 6uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 6uLL), v40.val[1], 6uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 6uLL), (int16x8_t)v39.val[0], 6uLL));
    vst2q_s16(result, v42);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 6uLL), (int16x8_t)v39.val[1], 6uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

uint64_t sub_1D0C88DA0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C88E60(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C88E60(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C88E60(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2A248((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 0x40) != 0) {
      *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
    }
    if ((a4 & 4) == 0)
    {
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      a5 += 2;
      _X5 = (_OWORD *)result;
      result += 2 * a2;
      --a7;
    }
    v8.i64[1] = v9;
    int16x8_t v10 = vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v12 = (int8x16_t)vtstq_s16(v10, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = *((int16x8_t *)_X5 + 1);
    int16x8_t v16 = *((int16x8_t *)_X5 + 2);
    int16x8_t v15 = *((int16x8_t *)_X5 + 3);
    int16x8_t v18 = *((int16x8_t *)_X5 + 4);
    int16x8_t v17 = *((int16x8_t *)_X5 + 5);
    int16x8_t v19 = *((int16x8_t *)_X5 + 6);
    int8x16_t v20 = *((int8x16_t *)_X5 + 7);
    uint16x8_t v21 = (const float *)(_X5 + 8);
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *(int8x16_t *)result;
    int8x16_t v29 = *(int8x16_t *)(result + 16);
    int8x16_t v30 = *(int8x16_t *)(result + 32);
    int8x16_t v31 = *(int8x16_t *)(result + 48);
    uint64_t v32 = result + 96;
    int8x16_t v33 = *(int8x16_t *)(result + 96);
    int8x16_t v34 = *(int8x16_t *)(result + 64);
    int8x16_t v35 = *(int8x16_t *)(result + 80);
    int8x16_t v36 = *(int8x16_t *)(result + 112);
    __asm { PRFM            #0, [X0,#0x80] }
    uint64_t v38 = 2 * a2;
    signed int v39 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    __asm { PRFM            #0, [X0,#0xC0] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v21);
    *(_DWORD *)a5 = v36.i32[3];
    int16x8x2_t v42 = (float *)(a5 + 2);
    int8x16_t v43 = (int8x16_t)vceqzq_s16(v11);
    v44.i64[0] = 0xF800F800F800F800;
    v44.i64[1] = 0xF800F800F800F800;
    int16x8x2_t v45 = v42;
    do
    {
      uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 4uLL);
      int16x8_t v47 = (int16x8_t)v36;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 4uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 4uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 4uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 4uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 4uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = v32 + v38;
      int8x16_t v28 = *(int8x16_t *)(v32 + v38 - 96);
      int8x16_t v29 = *(int8x16_t *)(v32 + v38 - 80);
      int8x16_t v30 = *(int8x16_t *)(v32 + v38 - 64);
      int8x16_t v31 = *(int8x16_t *)(v32 + v38 - 48);
      int8x16_t v34 = *(int8x16_t *)(v32 + v38 - 32);
      int8x16_t v35 = *(int8x16_t *)(v32 + v38 - 16);
      int8x16_t v33 = *(int8x16_t *)(v32 + 2 * a2);
      int8x16_t v36 = *(int8x16_t *)(v32 + v38 + 16);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v57 = (int8x16_t)vld1q_dup_f32(v45++);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v20, v41, 4uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v57, v28, 0xCuLL);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
      int16x8_t v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v14));
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
      int8x16_t v63 = vqmovn_high_s16(vqmovn_s16(v61), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13)));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v30, v31, 0xCuLL);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v16));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v31, v34, 0xCuLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v65), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v15)));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v34, v35, 0xCuLL);
      int16x8_t v69 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v17));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v35, v33, 0xCuLL);
      int8x16_t v71 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v18))), v69);
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v33, v36, 0xCuLL);
      *int16x8x2_t v42 = *(float *)&v36.i32[3];
      int8x16_t v73 = vqtbl1q_s8(v8, vaddq_s8(v63, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v58, (uint16x8_t)v47), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v58)), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v47)));
      *(int8x16_t *)(v32 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v73.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      *(int16x8_t *)(v32 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v73), (int16x8_t)0), v44);
      int8x16_t v75 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v75.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v75), (int16x8_t)0), v44);
      int8x16_t v76 = vqtbl1q_s8(v8, vaddq_s8(v71, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v76), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v74, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      *(int8x16_t *)(v32 + 16) = vbslq_s8(v12, (int8x16_t)v47, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v47, v77), (int16x8_t)0), v44));
      int8x16_t v78 = (const float *)(v32 + 32);
      --v39;
      v32 += v38;
      int16x8x2_t v42 = (float *)v45;
      int8x16_t v20 = (int8x16_t)v47;
      int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v78);
    }
    while (v39 > 1);
  }
  return result;
}

uint64_t sub_1D0C891D4(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unint64_t v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C89294(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C89294(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C89294(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2A2D4((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 4) != 0)
    {
      int8x16_t v12 = (const float *)&_X5[-1].i32[3];
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
    }
    else
    {
      int16x8_t v10 = (const float *)a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      _X5 = (int16x8_t *)result;
      result += 2 * a2;
      --a7;
      a5 = (__int16 *)v10;
    }
    v8.i64[1] = v9;
    unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
    *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 124);
    int16x8_t v14 = vdupq_n_s16(~a4);
    int16x8_t v16 = *_X5;
    int16x8_t v15 = _X5[1];
    int16x8_t v17 = (int16x8_t)vandq_s8((int8x16_t)v14, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v18 = (int8x16_t)vtstq_s16(v14, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *(int8x16_t *)result;
    int8x16_t v32 = *(int8x16_t *)(result + 16);
    int8x16_t v33 = *(int8x16_t *)(result + 32);
    int8x16_t v34 = *(int8x16_t *)(result + 48);
    int8x16_t v35 = *(int8x16_t *)(result + 64);
    int8x16_t v36 = *(int8x16_t *)(result + 80);
    uint64_t v37 = result + 96;
    int8x16_t v38 = *(int8x16_t *)(result + 96);
    int8x16_t v39 = *(int8x16_t *)(result + 112);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    uint64_t v42 = 2 * a2;
    int v43 = v13 + 2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v17);
    v45.i64[0] = 0xF800F800F800F800;
    v45.i64[1] = 0xF800F800F800F800;
    uint16x8_t v46 = (const float *)a5;
    do
    {
      uint16x8_t v47 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xCuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xCuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xCuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v20, 0xCuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xCuLL);
      int16x8_t v15 = (int16x8_t)v32;
      uint16x8_t v54 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v16, 0xCuLL);
      int16x8_t v16 = (int16x8_t)v31;
      _X13 = v37 + v42;
      int8x16_t v31 = *(int8x16_t *)(v37 + v42 - 96);
      int8x16_t v32 = *(int8x16_t *)(v37 + v42 - 80);
      int8x16_t v33 = *(int8x16_t *)(v37 + v42 - 64);
      int8x16_t v34 = *(int8x16_t *)(v37 + v42 - 48);
      int8x16_t v35 = *(int8x16_t *)(v37 + v42 - 32);
      int8x16_t v36 = *(int8x16_t *)(v37 + v42 - 16);
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
      uint16x8_t v57 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
      int16x8_t v58 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v16));
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v15));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
      int8x16_t v62 = vqmovn_high_s16(vqmovn_s16(v58), v60);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v20));
      int16x8_t v64 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v61));
      int8x16_t v38 = *(int8x16_t *)(v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)(v37 + v42 + 16);
      int16x8_t v65 = vaddq_s16(v64, (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v19));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v35, v36, 4uLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v63), v65);
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v36, v38, 4uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v21));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v38, v39, 4uLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v22))), v71);
      int16x8_t v74 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v72);
      int16x8_t v75 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v48)), v74);
      v74.i32[0] = *(_DWORD *)(v37 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
      uint16x8_t v76 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v74, 4uLL);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v62, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v78 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v75, (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v76)), (int16x8_t)vcgtq_u16(v76, (uint16x8_t)v23)));
      *(int8x16_t *)(v37 - 96) = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v45), (int8x16_t)v16);
      *(int16x8_t *)(v37 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v45);
      int8x16_t v79 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v79.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v79), (int16x8_t)0), v45);
      int8x16_t v80 = vqtbl1q_s8(v8, vaddq_s8(v73, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v80.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v80), (int16x8_t)0), v45);
      int8x16_t v81 = vqtbl1q_s8(v8, vaddq_s8(v78, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v81.i8), (int16x8_t)0), v45);
      *(int8x16_t *)(v37 + 16) = vbslq_s8(v18, (int8x16_t)v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v81), (int16x8_t)0), v45));
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v46++);
      --v43;
      v37 += v42;
      *(_DWORD *)a5 = v23.i32[3];
      a5 = (__int16 *)v46;
    }
    while (v43 > 1);
  }
  return result;
}

uint64_t sub_1D0C89618(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C896D8(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C896D8(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C896D8(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  uint16x8_t v15 = _X5[4];
  uint16x8_t v14 = _X5[5];
  uint16x8_t v17 = _X5[6];
  uint16x8_t v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v24 = *(uint16x8_t *)result;
  uint16x8_t v25 = *(uint16x8_t *)(result + 16);
  uint16x8_t v26 = *(uint16x8_t *)(result + 32);
  uint16x8_t v27 = *(uint16x8_t *)(result + 48);
  uint16x8_t v28 = *(uint16x8_t *)(result + 64);
  uint16x8_t v29 = *(uint16x8_t *)(result + 80);
  int8x16_t v30 = (int16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 96);
  uint16x8_t v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v35 = v9 + 2;
  uint64_t v36 = 2 * a2;
  v37.i64[0] = 0xF800F800F800F800;
  v37.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v38 = (int16x8_t)v32;
    int16x8_t v39 = (int16x8_t)v31;
    int16x8_t v40 = (int16x8_t)v29;
    int16x8_t v41 = (int16x8_t)v28;
    int16x8_t v42 = (int16x8_t)v27;
    int16x8_t v43 = (int16x8_t)v26;
    int16x8_t v44 = (int16x8_t)v25;
    int16x8_t v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    uint16x8_t v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    uint16x8_t v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    uint16x8_t v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1D0D7F120));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *int8x16_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v30 = (int16x8_t *)((char *)v30 + v36);
    uint16x8_t v11 = (uint16x8_t)v45;
    uint16x8_t v10 = (uint16x8_t)v44;
    uint16x8_t v13 = (uint16x8_t)v43;
    uint16x8_t v12 = (uint16x8_t)v42;
    uint16x8_t v15 = (uint16x8_t)v41;
    uint16x8_t v14 = (uint16x8_t)v40;
    uint16x8_t v17 = (uint16x8_t)v39;
    uint16x8_t v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

int16x8_t *sub_1D0C8999C(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v12 = 34;
  }
  else {
    int v12 = 2;
  }
  unsigned int v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0) {
    int v14 = 17;
  }
  else {
    int v14 = 1;
  }
  unint64_t v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C89A4C(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C89A4C(a1 + 8, a2, a3, v15, a5, v16, a7);
}

int16x8_t *sub_1D0C89A4C(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F190);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F1A0);
  int v12 = a7 + 1;
  v13.i64[0] = 0xF800F800F800F800;
  v13.i64[1] = 0xF800F800F800F800;
  int v14 = a5;
  do
  {
    int16x8_t v15 = *result;
    int16x8_t v16 = result[1];
    int16x8_t v17 = result[2];
    int16x8_t v18 = result[3];
    int16x8_t v19 = result[4];
    int16x8_t v20 = result[5];
    int16x8_t v22 = result[6];
    int16x8_t v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    int8x16_t v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    int16x8_t v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    int8x16_t v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

__int16 *sub_1D0C89CD0(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v32 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int8x16x2_t v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    int16x8_t v23 = _X11;
    int16x8x2_t v31 = vld2q_s16(v23);
    v23 += 16;
    int8x16x2_t v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v25;
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 6uLL), (int16x8_t)v33.val[0], 6uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    int8x16_t v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 6uLL), (int16x8_t)v33.val[1], 6uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 6uLL), (int16x8_t)v30.val[0], 6uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 6uLL), (int16x8_t)v30.val[1], 6uLL));
    int16x8_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1D0C89DE0(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v13 = a7 + 2;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v25 = vld2q_s16(v15);
    uint64_t v11 = a2;
    int16x8_t v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    int8x16x2_t v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 6uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 6uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 6uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 6uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    uint64_t v12 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

uint64_t sub_1D0C89E9C(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2A360((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v12 = *(int16x8_t *)_X5;
  int16x8_t v11 = *((int16x8_t *)_X5 + 1);
  int8x16_t v13 = *((int8x16_t *)_X5 + 2);
  int8x16_t v14 = *((int8x16_t *)_X5 + 3);
  int16x8_t v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v21 = *(int8x16_t *)result;
  int8x16_t v22 = *(int8x16_t *)(result + 16);
  int8x16_t v23 = *(int8x16_t *)(result + 32);
  int8x16_t v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  int16x8x2_t v27 = (float *)(a5 + 2);
  int8x16_t v28 = (const float *)(result + 64);
  uint64_t v29 = 2 * a2;
  signed int v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xF800F800F800F800;
  v33.i64[1] = 0xF800F800F800F800;
  int16x8x2_t v34 = v27;
  do
  {
    int16x8_t v35 = (int16x8_t)v24;
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    int16x8_t v37 = (int16x8_t)v23;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    int16x8_t v11 = (int16x8_t)v22;
    int16x8_t v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    int8x16_t v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    int8x16_t v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    int8x16_t v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    int8x16_t v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v34++);
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *int16x8x2_t v27 = *(float *)&v24.i32[3];
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    int8x16_t v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1D0D7F120));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    int8x16_t v28 = (const float *)((char *)v28 + v29);
    int16x8x2_t v27 = (float *)v34;
    int8x16_t v13 = (int8x16_t)v37;
    int8x16_t v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

uint64_t sub_1D0C8A0C8(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2A3EC((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *(int8x16_t *)result;
  int8x16_t v27 = *(int8x16_t *)(result + 16);
  uint64_t v28 = result + 32;
  int8x16_t v29 = *(int8x16_t *)(result + 32);
  int8x16_t v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xF800F800F800F800;
  v36.i64[1] = 0xF800F800F800F800;
  int16x8_t v37 = (const float *)a5;
  do
  {
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    int8x16_t v26 = *(int8x16_t *)(v28 + v33 - 32);
    int8x16_t v27 = *(int8x16_t *)(v28 + v33 - 16);
    int8x16_t v29 = *(int8x16_t *)(v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)uint64_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C8A310(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v19 = *result;
  uint16x8_t v20 = result[1];
  uint16x8_t v21 = result[2];
  uint16x8_t v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v24 = v9 + 2;
  uint64_t v25 = 2 * a2;
  v26.i64[0] = 0xF800F800F800F800;
  v26.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v27 = (int16x8_t)v19;
    int16x8_t v28 = (int16x8_t)v20;
    int16x8_t v29 = (int16x8_t)v21;
    int16x8_t v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    uint16x8_t v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    uint16x8_t v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1D0D7F120));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    uint64_t result = (uint16x8_t *)((char *)result + v25);
    uint16x8_t v11 = (uint16x8_t)v27;
    uint16x8_t v10 = (uint16x8_t)v28;
    uint16x8_t v13 = (uint16x8_t)v29;
    uint16x8_t v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

int16x8_t *sub_1D0C8A4A0(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v19 = result[2];
    int16x8_t v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    int8x16_t v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C8A618(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2A478((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int8x16_t v12 = *(int8x16_t *)_X5;
  int8x16_t v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  int16x8_t v18 = (const float *)(_X5 + 2);
  int8x16_t v19 = *(int8x16_t *)result;
  int8x16_t v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  int8x16_t v23 = (float *)(a5 + 2);
  uint64_t v24 = 2 * a2;
  signed int v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xF800F800F800F800;
  v28.i64[1] = 0xF800F800F800F800;
  uint16x8_t v29 = v23;
  do
  {
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    int16x8_t v31 = (int16x8_t)v20;
    int16x8_t v32 = (int16x8_t)v19;
    _X11 = result + v24;
    int8x16_t v19 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v35 = (int8x16_t)vld1q_dup_f32(v29++);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *int8x16_t v23 = *(float *)&v20.i32[3];
    uint16x8_t v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    int8x16_t v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    uint16x8_t v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v40);
    int8x16_t v23 = (float *)v29;
    int8x16_t v12 = (int8x16_t)v32;
    int8x16_t v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

uint64_t sub_1D0C8A7BC(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2A504((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *(int8x16_t *)result;
  int8x16_t v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xF800F800F800F800;
  v31.i64[1] = 0xF800F800F800F800;
  int16x8_t v32 = (const float *)a5;
  do
  {
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    int16x8_t v34 = (int16x8_t)v25;
    int16x8_t v35 = (int16x8_t)v24;
    _X12 = result + v28;
    int8x16_t v24 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    int16x8_t v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    int8x16_t v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    int8x16_t v17 = (int8x16_t)v35;
    int8x16_t v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C8A974(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v17 = *result;
  uint16x8_t v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v20 = 2 * a2;
  int v21 = v9 + 2;
  v22.i64[0] = 0xF800F800F800F800;
  v22.i64[1] = 0xF800F800F800F800;
  do
  {
    int16x8_t v23 = (int16x8_t)v17;
    int16x8_t v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    uint16x8_t v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1D0D7F120));
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v23;
    uint16x8_t v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1D0C8AA84(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    int8x16_t v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C8AB84(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D2A608((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = *(int8x16_t *)_X5;
  int16x8_t v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  int16x8_t v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  uint64_t v20 = (float *)(a5 + 2);
  uint64_t v21 = 2 * a2;
  signed int v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v24.i64[0] = 0xF800F800F800F800;
  v24.i64[1] = 0xF800F800F800F800;
  uint16x8_t v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    int8x16_t v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *uint64_t v20 = *(float *)&v27.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    int16x8_t v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v32);
    uint64_t v20 = (float *)v25;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1D0C8ACE8(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D2A694((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)(a6 - 2);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  int16x8_t v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v28.i64[0] = 0xF800F800F800F800;
  v28.i64[1] = 0xF800F800F800F800;
  int8x16_t v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    int8x16_t v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C8AE60(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v21 = 2 * a2;
  int v22 = v9 + 2;
  v23.i64[0] = 0xF800F800F800F800;
  v23.i64[1] = 0xF800F800F800F800;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    uint16x8_t v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    uint64_t result = (uint16x8_t *)((char *)result + v21);
    uint16x8_t v12 = (uint16x8_t)v19;
    int16x8_t v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

int8x16_t *sub_1D0C8AF4C(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v11.i64[0] = 0xF800F800F800F800;
  v11.i64[1] = 0xF800F800F800F800;
  uint16x8_t v12 = a5;
  do
  {
    int16x8_t v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v12++);
    uint16x8_t v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned long long *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    uint16x8_t v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    int16x8_t v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

__int16 *sub_1D0C8B00C(__int16 *a1, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  sub_1D0C8B074(a1, a2, a3, a4, a5, a6, a7);
  return sub_1D0C8B074(a1 + 64, a2, a3, v12, a5, v13, a7);
}

__int16 *sub_1D0C8B074(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  do
  {
    int8x16_t v15 = result;
    int16x8x2_t v42 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int16x8x2_t v36 = vld2q_s16(v17);
    uint16x8_t v18 = result + 32;
    int16x8x2_t v45 = vld2q_s16(v18);
    int8x16_t v19 = result + 48;
    int8x16x2_t v44 = (int8x16x2_t)vld2q_s16(v19);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int v26 = _X11;
    int16x8x2_t v41 = vld2q_s16(v26);
    v26 += 16;
    int16x8x2_t v40 = vld2q_s16(v26);
    int8x16_t v27 = _X11 + 32;
    int16x8x2_t v38 = vld2q_s16(v27);
    int16x8_t v28 = _X11 + 48;
    int8x16x2_t v39 = (int8x16x2_t)vld2q_s16(v28);
    LODWORD(v29) = vqtbl2q_s8(v44, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v29) = vqtbl2q_s8(v39, (int8x16_t)xmmword_1D0D7F170).i32[1];
    int8x16_t v30 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v42.val[0], 7uLL), v36.val[0], 7uLL));
    int8x16_t v31 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v42.val[1], 7uLL), v36.val[1], 7uLL));
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[0], *(int8x8_t *)v30.i8), (int16x8_t)0), v14);
    __asm
    {
      PRFM            #0, [X11,#0x80]
      PRFM            #0, [X11,#0xC0]
    }
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v42.val[1], *(int8x8_t *)v31.i8), (int16x8_t)0), v14);
    *a5++ = v29;
    v43.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[0], v30), (int16x8_t)0), v14);
    v43.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v36.val[1], v31), (int16x8_t)0), v14);
    v36.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v45.val[0], 7uLL), (int16x8_t)v44.val[0], 7uLL));
    int16x8_t v34 = vaddw_high_s8((int16x8_t)v44.val[0], (int8x16_t)v36.val[0]);
    v36.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[0], *(int8x8_t *)v36.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v35 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v45.val[1], 7uLL), (int16x8_t)v44.val[1], 7uLL));
    v36.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v45.val[1], *(int8x8_t *)v35.i8), (int16x8_t)0), v14);
    v45.val[0] = vminq_s16(vmaxq_s16(v34, (int16x8_t)0), v14);
    v45.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v44.val[1], v35), (int16x8_t)0), v14);
    v44.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v41.val[0], 7uLL), v40.val[0], 7uLL));
    v37.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[0], *(int8x8_t *)v44.val[0].i8), (int16x8_t)0), v14);
    v44.val[1] = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v41.val[1], 7uLL), v40.val[1], 7uLL));
    v37.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v41.val[1], *(int8x8_t *)v44.val[1].i8), (int16x8_t)0), v14);
    v41.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[0], v44.val[0]), (int16x8_t)0), v14);
    v41.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40.val[1], v44.val[1]), (int16x8_t)0), v14);
    v40.val[0] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v38.val[0], 7uLL), (int16x8_t)v39.val[0], 7uLL));
    vst2q_s16(result, v42);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v42.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[0], *(int8x8_t *)v40.val[0].i8), (int16x8_t)0), v14);
    vst2q_s16(v17, v43);
    v40.val[1] = (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v38.val[1], 7uLL), (int16x8_t)v39.val[1], 7uLL));
    vst2q_s16(v18, v36);
    vst2q_s16(v19, v45);
    v42.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v38.val[1], *(int8x8_t *)v40.val[1].i8), (int16x8_t)0), v14);
    vst2q_s16(_X11, v37);
    v38.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[0], (int8x16_t)v40.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v26, v41);
    v38.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v39.val[1], (int8x16_t)v40.val[1]), (int16x8_t)0), v14);
    vst2q_s16(v27, v42);
    vst2q_s16(v28, v38);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

uint64_t sub_1D0C8B264(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _WORD *a5, _OWORD *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C8B324(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C8B324(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C8B324(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D288B8((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 0x40) != 0) {
      *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
    }
    if ((a4 & 4) == 0)
    {
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      a5 += 2;
      _X5 = (_OWORD *)result;
      result += 2 * a2;
      --a7;
    }
    v8.i64[1] = v9;
    int16x8_t v10 = vdupq_n_s16(~a4);
    int16x8_t v11 = (int16x8_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v12 = (int8x16_t)vtstq_s16(v10, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v14 = *(int16x8_t *)_X5;
    int16x8_t v13 = *((int16x8_t *)_X5 + 1);
    int16x8_t v16 = *((int16x8_t *)_X5 + 2);
    int16x8_t v15 = *((int16x8_t *)_X5 + 3);
    int16x8_t v18 = *((int16x8_t *)_X5 + 4);
    int16x8_t v17 = *((int16x8_t *)_X5 + 5);
    int16x8_t v19 = *((int16x8_t *)_X5 + 6);
    int8x16_t v20 = *((int8x16_t *)_X5 + 7);
    uint16x8_t v21 = (const float *)(_X5 + 8);
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v28 = *(int8x16_t *)result;
    int8x16_t v29 = *(int8x16_t *)(result + 16);
    int8x16_t v30 = *(int8x16_t *)(result + 32);
    int8x16_t v31 = *(int8x16_t *)(result + 48);
    uint64_t v32 = result + 96;
    int8x16_t v33 = *(int8x16_t *)(result + 96);
    int8x16_t v34 = *(int8x16_t *)(result + 64);
    int8x16_t v35 = *(int8x16_t *)(result + 80);
    int8x16_t v36 = *(int8x16_t *)(result + 112);
    __asm { PRFM            #0, [X0,#0x80] }
    uint64_t v38 = 2 * a2;
    signed int v39 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
    __asm { PRFM            #0, [X0,#0xC0] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v21);
    *(_DWORD *)a5 = v36.i32[3];
    int16x8x2_t v42 = (float *)(a5 + 2);
    int8x16_t v43 = (int8x16_t)vceqzq_s16(v11);
    v44.i64[0] = 0xF000F000F000F000;
    v44.i64[1] = 0xF000F000F000F000;
    int16x8x2_t v45 = v42;
    do
    {
      uint16x8_t v46 = (uint16x8_t)vextq_s8((int8x16_t)v19, v20, 4uLL);
      int16x8_t v47 = (int16x8_t)v36;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
      int16x8_t v19 = (int16x8_t)v33;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 4uLL);
      int16x8_t v17 = (int16x8_t)v35;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v18, 4uLL);
      int16x8_t v18 = (int16x8_t)v34;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 4uLL);
      int16x8_t v15 = (int16x8_t)v31;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v16, 4uLL);
      int16x8_t v16 = (int16x8_t)v30;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v14, (int8x16_t)v13, 4uLL);
      int16x8_t v13 = (int16x8_t)v29;
      int16x8_t v14 = (int16x8_t)v28;
      _X12 = v32 + v38;
      int8x16_t v28 = *(int8x16_t *)(v32 + v38 - 96);
      int8x16_t v29 = *(int8x16_t *)(v32 + v38 - 80);
      int8x16_t v30 = *(int8x16_t *)(v32 + v38 - 64);
      int8x16_t v31 = *(int8x16_t *)(v32 + v38 - 48);
      int8x16_t v34 = *(int8x16_t *)(v32 + v38 - 32);
      int8x16_t v35 = *(int8x16_t *)(v32 + v38 - 16);
      int8x16_t v33 = *(int8x16_t *)(v32 + 2 * a2);
      int8x16_t v36 = *(int8x16_t *)(v32 + v38 + 16);
      __asm
      {
        PRFM            #0, [X12,#0x20]
        PRFM            #0, [X12,#0x60]
      }
      int8x16_t v57 = (int8x16_t)vld1q_dup_f32(v45++);
      uint16x8_t v58 = (uint16x8_t)vextq_s8(v20, v41, 4uLL);
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v57, v28, 0xCuLL);
      uint16x8_t v60 = (uint16x8_t)vextq_s8(v28, v29, 0xCuLL);
      int16x8_t v61 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v14), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v14, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v14));
      uint16x8_t v62 = (uint16x8_t)vextq_s8(v29, v30, 0xCuLL);
      int8x16_t v63 = vqmovn_high_s16(vqmovn_s16(v61), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v13), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v13, v60)), (int16x8_t)vcgtq_u16(v60, (uint16x8_t)v13)));
      uint16x8_t v64 = (uint16x8_t)vextq_s8(v30, v31, 0xCuLL);
      int16x8_t v65 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v62)), (int16x8_t)vcgtq_u16(v62, (uint16x8_t)v16));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v31, v34, 0xCuLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v65), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v64)), (int16x8_t)vcgtq_u16(v64, (uint16x8_t)v15)));
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v34, v35, 0xCuLL);
      int16x8_t v69 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v48)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v17));
      uint16x8_t v70 = (uint16x8_t)vextq_s8(v35, v33, 0xCuLL);
      int8x16_t v71 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v18))), v69);
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v33, v36, 0xCuLL);
      *int16x8x2_t v42 = *(float *)&v36.i32[3];
      int8x16_t v73 = vqtbl1q_s8(v8, vaddq_s8(v63, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v74 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v46, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v46)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v70)), (int16x8_t)vcgtq_u16(v70, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v58, (uint16x8_t)v47), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v58)), (int16x8_t)vcgtq_u16((uint16x8_t)v47, v72)), (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v47)));
      *(int8x16_t *)(v32 - 96) = vbslq_s8(v43, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v14, *(int8x8_t *)v73.i8), (int16x8_t)0), v44), (int8x16_t)v14);
      *(int16x8_t *)(v32 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v13, v73), (int16x8_t)0), v44);
      int8x16_t v75 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v75.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v75), (int16x8_t)0), v44);
      int8x16_t v76 = vqtbl1q_s8(v8, vaddq_s8(v71, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v32 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v76.i8), (int16x8_t)0), v44);
      *(int16x8_t *)(v32 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v76), (int16x8_t)0), v44);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v74, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v32 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v77.i8), (int16x8_t)0), v44);
      *(int8x16_t *)(v32 + 16) = vbslq_s8(v12, (int8x16_t)v47, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v47, v77), (int16x8_t)0), v44));
      int8x16_t v78 = (const float *)(v32 + 32);
      --v39;
      v32 += v38;
      int16x8x2_t v42 = (float *)v45;
      int8x16_t v20 = (int8x16_t)v47;
      int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v78);
    }
    while (v39 > 1);
  }
  return result;
}

uint64_t sub_1D0C8B698(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, __int16 *a5, int16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unint64_t v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C8B758(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C8B758(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C8B758(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D28944((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  else
  {
    v8.i64[0] = *a3;
    uint64_t v9 = a3[4];
    if ((a4 & 4) != 0)
    {
      int8x16_t v12 = (const float *)&_X5[-1].i32[3];
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
    }
    else
    {
      int16x8_t v10 = (const float *)a5;
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
      *(_DWORD *)a5 = *(_DWORD *)(result + 124);
      _X5 = (int16x8_t *)result;
      result += 2 * a2;
      --a7;
      a5 = (__int16 *)v10;
    }
    v8.i64[1] = v9;
    unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
    *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 124);
    int16x8_t v14 = vdupq_n_s16(~a4);
    int16x8_t v16 = *_X5;
    int16x8_t v15 = _X5[1];
    int16x8_t v17 = (int16x8_t)vandq_s8((int8x16_t)v14, (int8x16_t)xmmword_1D0D7F190);
    int8x16_t v18 = (int8x16_t)vtstq_s16(v14, (int16x8_t)xmmword_1D0D7F1A0);
    int16x8_t v20 = _X5[2];
    int16x8_t v19 = _X5[3];
    int16x8_t v22 = _X5[4];
    int16x8_t v21 = _X5[5];
    int16x8_t v24 = _X5[6];
    int16x8_t v23 = _X5[7];
    __asm
    {
      PRFM            #0, [X5,#0x80]
      PRFM            #0, [X5,#0xC0]
    }
    int8x16_t v31 = *(int8x16_t *)result;
    int8x16_t v32 = *(int8x16_t *)(result + 16);
    int8x16_t v33 = *(int8x16_t *)(result + 32);
    int8x16_t v34 = *(int8x16_t *)(result + 48);
    int8x16_t v35 = *(int8x16_t *)(result + 64);
    int8x16_t v36 = *(int8x16_t *)(result + 80);
    uint64_t v37 = result + 96;
    int8x16_t v38 = *(int8x16_t *)(result + 96);
    int8x16_t v39 = *(int8x16_t *)(result + 112);
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    uint64_t v42 = 2 * a2;
    int v43 = v13 + 2;
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v17);
    v45.i64[0] = 0xF000F000F000F000;
    v45.i64[1] = 0xF000F000F000F000;
    uint16x8_t v46 = (const float *)a5;
    do
    {
      uint16x8_t v47 = (uint16x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v23, 0xCuLL);
      int16x8_t v23 = (int16x8_t)v39;
      uint16x8_t v48 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v24, 0xCuLL);
      int16x8_t v24 = (int16x8_t)v38;
      uint16x8_t v49 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
      int16x8_t v21 = (int16x8_t)v36;
      uint16x8_t v50 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v22, 0xCuLL);
      int16x8_t v22 = (int16x8_t)v35;
      uint16x8_t v51 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
      int16x8_t v19 = (int16x8_t)v34;
      uint16x8_t v52 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v20, 0xCuLL);
      int16x8_t v20 = (int16x8_t)v33;
      uint16x8_t v53 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v15, 0xCuLL);
      int16x8_t v15 = (int16x8_t)v32;
      uint16x8_t v54 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v16, 0xCuLL);
      int16x8_t v16 = (int16x8_t)v31;
      _X13 = v37 + v42;
      int8x16_t v31 = *(int8x16_t *)(v37 + v42 - 96);
      int8x16_t v32 = *(int8x16_t *)(v37 + v42 - 80);
      int8x16_t v33 = *(int8x16_t *)(v37 + v42 - 64);
      int8x16_t v34 = *(int8x16_t *)(v37 + v42 - 48);
      int8x16_t v35 = *(int8x16_t *)(v37 + v42 - 32);
      int8x16_t v36 = *(int8x16_t *)(v37 + v42 - 16);
      uint16x8_t v56 = (uint16x8_t)vextq_s8(v31, v32, 4uLL);
      uint16x8_t v57 = (uint16x8_t)vextq_s8(v32, v33, 4uLL);
      int16x8_t v58 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v54, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v54)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v56)), (int16x8_t)vcgtq_u16(v56, (uint16x8_t)v16));
      uint16x8_t v59 = (uint16x8_t)vextq_s8(v33, v34, 4uLL);
      int16x8_t v60 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v53, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v53)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v57)), (int16x8_t)vcgtq_u16(v57, (uint16x8_t)v15));
      uint16x8_t v61 = (uint16x8_t)vextq_s8(v34, v35, 4uLL);
      int8x16_t v62 = vqmovn_high_s16(vqmovn_s16(v58), v60);
      int16x8_t v63 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v52, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v52)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v59)), (int16x8_t)vcgtq_u16(v59, (uint16x8_t)v20));
      int16x8_t v64 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v51, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v51)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v61));
      int8x16_t v38 = *(int8x16_t *)(v37 + 2 * a2);
      int8x16_t v39 = *(int8x16_t *)(v37 + v42 + 16);
      int16x8_t v65 = vaddq_s16(v64, (int16x8_t)vcgtq_u16(v61, (uint16x8_t)v19));
      uint16x8_t v66 = (uint16x8_t)vextq_s8(v35, v36, 4uLL);
      int8x16_t v67 = vqmovn_high_s16(vqmovn_s16(v63), v65);
      uint16x8_t v68 = (uint16x8_t)vextq_s8(v36, v38, 4uLL);
      __asm
      {
        PRFM            #0, [X13,#0x20]
        PRFM            #0, [X13,#0x60]
      }
      int16x8_t v71 = vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v49, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v49)), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v68)), (int16x8_t)vcgtq_u16(v68, (uint16x8_t)v21));
      uint16x8_t v72 = (uint16x8_t)vextq_s8(v38, v39, 4uLL);
      int8x16_t v73 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v50, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v50)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v66)), (int16x8_t)vcgtq_u16(v66, (uint16x8_t)v22))), v71);
      int16x8_t v74 = (int16x8_t)vcgtq_u16((uint16x8_t)v24, v72);
      int16x8_t v75 = vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v48, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v48)), v74);
      v74.i32[0] = *(_DWORD *)(v37 + (((a4 >> 1) & 1) << 7) + 2 * a2 - 96);
      uint16x8_t v76 = (uint16x8_t)vextq_s8(v39, (int8x16_t)v74, 4uLL);
      int8x16_t v77 = vqtbl1q_s8(v8, vaddq_s8(v62, (int8x16_t)xmmword_1D0D7F120));
      int8x16_t v78 = vqmovn_high_s16(vqmovn_s16(vaddq_s16(v75, (int16x8_t)vcgtq_u16(v72, (uint16x8_t)v24))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v47, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v47)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v76)), (int16x8_t)vcgtq_u16(v76, (uint16x8_t)v23)));
      *(int8x16_t *)(v37 - 96) = vbslq_s8(v44, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v77.i8), (int16x8_t)0), v45), (int8x16_t)v16);
      *(int16x8_t *)(v37 - 80) = vminq_s16(vmaxq_s16(vaddw_high_s8(v15, v77), (int16x8_t)0), v45);
      int8x16_t v79 = vqtbl1q_s8(v8, vaddq_s8(v67, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 64) = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v79.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 48) = vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v79), (int16x8_t)0), v45);
      int8x16_t v80 = vqtbl1q_s8(v8, vaddq_s8(v73, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)(v37 - 32) = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v80.i8), (int16x8_t)0), v45);
      *(int16x8_t *)(v37 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v80), (int16x8_t)0), v45);
      int8x16_t v81 = vqtbl1q_s8(v8, vaddq_s8(v78, (int8x16_t)xmmword_1D0D7F120));
      *(int16x8_t *)uint64_t v37 = vminq_s16(vmaxq_s16(vaddw_s8(v24, *(int8x8_t *)v81.i8), (int16x8_t)0), v45);
      *(int8x16_t *)(v37 + 16) = vbslq_s8(v18, (int8x16_t)v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v23, v81), (int16x8_t)0), v45));
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v46++);
      --v43;
      v37 += v42;
      *(_DWORD *)a5 = v23.i32[3];
      a5 = (__int16 *)v46;
    }
    while (v43 > 1);
  }
  return result;
}

uint64_t sub_1D0C8BADC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v13 = 34;
  }
  else {
    int v13 = 2;
  }
  unsigned int v14 = a4 & 0xFFFFFF5D | v13;
  if ((a4 & 4) != 0) {
    int v15 = 17;
  }
  else {
    int v15 = 1;
  }
  unsigned int v16 = a4 & 0xFFFFFFAE | v15 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C8BB9C(a1, a2, a3, v14 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C8BB9C(a1 + 128, a2, a3, v16, a5, a6 + 8, a7);
}

uint64_t sub_1D0C8BB9C(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = *(_DWORD *)(result + 124);
    _X5 = (uint16x8_t *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(_DWORD *)(result + 2 * (v9 + 1) * a2 + 124);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  uint16x8_t v15 = _X5[4];
  uint16x8_t v14 = _X5[5];
  uint16x8_t v17 = _X5[6];
  uint16x8_t v16 = _X5[7];
  __asm
  {
    PRFM            #0, [X5,#0x80]
    PRFM            #0, [X5,#0xC0]
  }
  uint16x8_t v24 = *(uint16x8_t *)result;
  uint16x8_t v25 = *(uint16x8_t *)(result + 16);
  uint16x8_t v26 = *(uint16x8_t *)(result + 32);
  uint16x8_t v27 = *(uint16x8_t *)(result + 48);
  uint16x8_t v28 = *(uint16x8_t *)(result + 64);
  uint16x8_t v29 = *(uint16x8_t *)(result + 80);
  int8x16_t v30 = (int16x8_t *)(result + 96);
  uint16x8_t v31 = *(uint16x8_t *)(result + 96);
  uint16x8_t v32 = *(uint16x8_t *)(result + 112);
  __asm
  {
    PRFM            #0, [X0,#0x80]
    PRFM            #0, [X0,#0xC0]
  }
  int v35 = v9 + 2;
  uint64_t v36 = 2 * a2;
  v37.i64[0] = 0xF000F000F000F000;
  v37.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v38 = (int16x8_t)v32;
    int16x8_t v39 = (int16x8_t)v31;
    int16x8_t v40 = (int16x8_t)v29;
    int16x8_t v41 = (int16x8_t)v28;
    int16x8_t v42 = (int16x8_t)v27;
    int16x8_t v43 = (int16x8_t)v26;
    int16x8_t v44 = (int16x8_t)v25;
    int16x8_t v45 = (int16x8_t)v24;
    _X11 = &v30->i8[v36];
    uint16x8_t v24 = *(uint16x8_t *)((char *)&v30[-6] + v36);
    uint16x8_t v25 = *(uint16x8_t *)((char *)&v30[-5] + v36);
    uint16x8_t v26 = *(uint16x8_t *)((char *)&v30[-4] + v36);
    uint16x8_t v27 = *(uint16x8_t *)((char *)&v30[-3] + v36);
    uint16x8_t v28 = *(uint16x8_t *)((char *)&v30[-2] + v36);
    uint16x8_t v29 = *(uint16x8_t *)((char *)&v30[-1] + v36);
    uint16x8_t v31 = *(uint16x8_t *)((char *)v30 + 2 * a2);
    uint16x8_t v32 = *(uint16x8_t *)((char *)&v30[1] + v36);
    __asm
    {
      PRFM            #0, [X11,#0x20]
      PRFM            #0, [X11,#0x60]
    }
    *a5++ = v38.i32[3];
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v45), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v45, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v45))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v44), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v44, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v44))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v50 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v43), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v43, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v43))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v42), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v42, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v42))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v51 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v15, (uint16x8_t)v41), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v15)), (int16x8_t)vcgtq_u16((uint16x8_t)v41, v28)), (int16x8_t)vcgtq_u16(v28, (uint16x8_t)v41))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v14, (uint16x8_t)v40), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v14)), (int16x8_t)vcgtq_u16((uint16x8_t)v40, v29)), (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v40))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v52 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v17, (uint16x8_t)v39), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v39, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v39))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v16, (uint16x8_t)v38), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v16)), (int16x8_t)vcgtq_u16((uint16x8_t)v38, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v38))), (int8x16_t)xmmword_1D0D7F120));
    v30[-6] = vminq_s16(vmaxq_s16(vaddw_s8(v45, *(int8x8_t *)v49.i8), (int16x8_t)0), v37);
    v30[-5] = vminq_s16(vmaxq_s16(vaddw_high_s8(v44, v49), (int16x8_t)0), v37);
    v30[-4] = vminq_s16(vmaxq_s16(vaddw_s8(v43, *(int8x8_t *)v50.i8), (int16x8_t)0), v37);
    v30[-3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v42, v50), (int16x8_t)0), v37);
    v30[-2] = vminq_s16(vmaxq_s16(vaddw_s8(v41, *(int8x8_t *)v51.i8), (int16x8_t)0), v37);
    v30[-1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v40, v51), (int16x8_t)0), v37);
    --v35;
    *int8x16_t v30 = vminq_s16(vmaxq_s16(vaddw_s8(v39, *(int8x8_t *)v52.i8), (int16x8_t)0), v37);
    v30[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v38, v52), (int16x8_t)0), v37);
    int8x16_t v30 = (int16x8_t *)((char *)v30 + v36);
    uint16x8_t v11 = (uint16x8_t)v45;
    uint16x8_t v10 = (uint16x8_t)v44;
    uint16x8_t v13 = (uint16x8_t)v43;
    uint16x8_t v12 = (uint16x8_t)v42;
    uint16x8_t v15 = (uint16x8_t)v41;
    uint16x8_t v14 = (uint16x8_t)v40;
    uint16x8_t v17 = (uint16x8_t)v39;
    uint16x8_t v16 = (uint16x8_t)v38;
  }
  while (v35 > 1);
  return result;
}

int16x8_t *sub_1D0C8BE60(int16x8_t *a1, uint64_t a2, uint64_t *a3, int a4, float *a5, uint64_t a6, int a7)
{
  if ((a4 & 4) != 0) {
    int v12 = 34;
  }
  else {
    int v12 = 2;
  }
  unsigned int v13 = a4 & 0xFFFFFF5D | v12;
  if ((a4 & 4) != 0) {
    int v14 = 17;
  }
  else {
    int v14 = 1;
  }
  unint64_t v15 = a4 & 0xFFFFFFAE | v14 & 0xFFFFFFBF | (((a4 & 8) != 0) << 6);
  sub_1D0C8BF10(a1, a2, a3, v13 & 0xFFFFFF7F | (((a4 & 8) != 0) << 7), a5, a6, a7);
  return sub_1D0C8BF10(a1 + 8, a2, a3, v15, a5, v16, a7);
}

int16x8_t *sub_1D0C8BF10(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int16x8_t v9 = vdupq_n_s16(~a4);
  int8x16_t v10 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F190);
  int8x16_t v11 = (int8x16_t)vtstq_s16(v9, (int16x8_t)xmmword_1D0D7F1A0);
  int v12 = a7 + 1;
  v13.i64[0] = 0xF000F000F000F000;
  v13.i64[1] = 0xF000F000F000F000;
  int v14 = a5;
  do
  {
    int16x8_t v15 = *result;
    int16x8_t v16 = result[1];
    int16x8_t v17 = result[2];
    int16x8_t v18 = result[3];
    int16x8_t v19 = result[4];
    int16x8_t v20 = result[5];
    int16x8_t v22 = result[6];
    int16x8_t v21 = result[7];
    __asm
    {
      PRFM            #0, [X0,#0x80]
      PRFM            #0, [X0,#0xC0]
    }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v14++);
    *a5 = *(float *)&v21.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v29, (int8x16_t)v15, 0xCuLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v35 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 0xCuLL);
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 0xCuLL);
    uint16x8_t v37 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 4uLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 4uLL);
    uint16x8_t v41 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 4uLL);
    uint16x8_t v42 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v22, 4uLL);
    uint16x8_t v44 = (uint16x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v21, 4uLL);
    v7.i32[0] = result[8 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v45 = (uint16x8_t)vextq_s8((int8x16_t)v21, (int8x16_t)v7, 4uLL);
    int8x16_t v46 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v15), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v15, v30)), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v15))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v31, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v31)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v16))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v47 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v32, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v32)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v34, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v34)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v42)), (int16x8_t)vcgtq_u16(v42, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v35, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v35)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v43)), (int16x8_t)vcgtq_u16(v43, (uint16x8_t)v20))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = vminq_s16(vmaxq_s16(vaddw_s8(v19, *(int8x8_t *)v48.i8), (int16x8_t)0), v13);
    int16x8_t v50 = vminq_s16(vmaxq_s16(vaddw_high_s8(v20, v48), (int16x8_t)0), v13);
    int16x8_t v51 = (int16x8_t)vcgtq_u16((uint16x8_t)v21, v45);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v21);
    int8x16_t v52 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v22), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v22, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v22))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v37, (uint16x8_t)v21), (int16x8_t)vcgtq_u16((uint16x8_t)v21, v37)), v51), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v10, (int8x16_t)v15, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v15, *(int8x8_t *)v46.i8), (int16x8_t)0), v13));
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v16, v46), (int16x8_t)0), v13);
    result[2] = vminq_s16(vmaxq_s16(vaddw_s8(v17, *(int8x8_t *)v47.i8), (int16x8_t)0), v13);
    result[3] = vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v47), (int16x8_t)0), v13);
    result[4] = v49;
    result[5] = v50;
    result[6] = vminq_s16(vmaxq_s16(vaddw_s8(v22, *(int8x8_t *)v52.i8), (int16x8_t)0), v13);
    result[7] = (int16x8_t)vbslq_s8(v11, (int8x16_t)v21, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v21, v52), (int16x8_t)0), v13));
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v12;
    a5 = (float *)v14;
  }
  while (v12 > 1);
  return result;
}

__int16 *sub_1D0C8C194(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v12 = a7 + 2;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v32 = vld2q_s16(v15);
    uint64_t v11 = a2;
    _X11 = (__int16 *)&v15[v11];
    int16x8_t v17 = result + 16;
    int8x16x2_t v33 = (int8x16x2_t)vld2q_s16(v17);
    __asm { PRFM            #0, [X0,#0x40] }
    int16x8_t v23 = _X11;
    int16x8x2_t v31 = vld2q_s16(v23);
    v23 += 16;
    int8x16x2_t v30 = (int8x16x2_t)vld2q_s16(v23);
    __asm { PRFM            #0, [X11,#0x40] }
    LODWORD(v25) = vqtbl2q_s8(v33, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v25) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v25;
    int8x16_t v26 = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v32.val[0], 7uLL), (int16x8_t)v33.val[0], 7uLL));
    v34.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[0], *(int8x8_t *)v26.i8), (int16x8_t)0), v14);
    int8x16_t v27 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v32.val[1], 7uLL), (int16x8_t)v33.val[1], 7uLL));
    v34.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v32.val[1], *(int8x8_t *)v27.i8), (int16x8_t)0), v14);
    v32.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[0], v26), (int16x8_t)0), v14);
    v32.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v33.val[1], v27), (int16x8_t)0), v14);
    v33.val[0] = vqtbl2q_s8(*(int8x16x2_t *)&v7, vshrn_high_n_s16(vshrn_n_s16(v31.val[0], 7uLL), (int16x8_t)v30.val[0], 7uLL));
    v33.val[1] = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v31.val[0], *(int8x8_t *)v33.val[0].i8), (int16x8_t)0), v14);
    int8x16_t v28 = vqtbl2q_s8(*(int8x16x2_t *)&v9, vshrn_high_n_s16(vshrn_n_s16(v31.val[1], 7uLL), (int16x8_t)v30.val[1], 7uLL));
    int16x8_t v29 = vminq_s16(vmaxq_s16(vaddw_s8(v31.val[1], *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    vst2q_s16(result, v34);
    uint64_t v13 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v13);
    v31.val[0] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[0], v33.val[0]), (int16x8_t)0), v14);
    vst2q_s16(v17, v32);
    v31.val[1] = vminq_s16(vmaxq_s16(vaddw_high_s8((int16x8_t)v30.val[1], v28), (int16x8_t)0), v14);
    vst2q_s16(_X11, *(int16x8x2_t *)((char *)&v33 + 16));
    vst2q_s16(v23, v31);
    v12 -= 2;
  }
  while (v12 > 2);
  return result;
}

__int16 *sub_1D0C8C2A4(__int16 *result, uint64_t a2, long long *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  long long v7 = *a3;
  long long v8 = a3[1];
  long long v9 = a3[2];
  long long v10 = a3[3];
  int v13 = a7 + 2;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v15 = result;
    int16x8x2_t v25 = vld2q_s16(v15);
    uint64_t v11 = a2;
    int16x8_t v16 = (__int16 *)&v15[v11];
    __asm { PRFM            #0, [X0,#0x20] }
    _X12 = v16;
    int8x16x2_t v26 = (int8x16x2_t)vld2q_s16(_X12);
    _X12 += 16;
    __asm { PRFM            #0, [X12] }
    LODWORD(v24) = vqtbl2q_s8((int8x16x2_t)v25, (int8x16_t)xmmword_1D0D7F180).u32[0];
    HIDWORD(v24) = vqtbl2q_s8(v26, (int8x16_t)xmmword_1D0D7F170).i32[1];
    *a5++ = v24;
    v27.val[0] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16(v25.val[0], 7uLL))), (int16x8_t)0), v14);
    v27.val[1] = vminq_s16(vmaxq_s16(vaddw_s8(v25.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16(v25.val[1], 7uLL))), (int16x8_t)0), v14);
    v25.val[0] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[0], vqtbl2_s8(*(int8x16x2_t *)&v7, vshrn_n_s16((int16x8_t)v26.val[0], 7uLL))), (int16x8_t)0), v14);
    v25.val[1] = vminq_s16(vmaxq_s16(vaddw_s8((int16x8_t)v26.val[1], vqtbl2_s8(*(int8x16x2_t *)&v9, vshrn_n_s16((int16x8_t)v26.val[1], 7uLL))), (int16x8_t)0), v14);
    vst2q_s16(result, v27);
    uint64_t v12 = 4 * a2;
    uint64_t result = (__int16 *)((char *)result + v12);
    vst2q_s16(v16, v25);
    v13 -= 2;
  }
  while (v13 > 2);
  return result;
}

uint64_t sub_1D0C8C360(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D289D0((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v12 = *(int16x8_t *)_X5;
  int16x8_t v11 = *((int16x8_t *)_X5 + 1);
  int8x16_t v13 = *((int8x16_t *)_X5 + 2);
  int8x16_t v14 = *((int8x16_t *)_X5 + 3);
  int16x8_t v15 = (const float *)(_X5 + 4);
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v21 = *(int8x16_t *)result;
  int8x16_t v22 = *(int8x16_t *)(result + 16);
  int8x16_t v23 = *(int8x16_t *)(result + 32);
  int8x16_t v24 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v15);
  *(_DWORD *)a5 = v24.i32[3];
  int16x8x2_t v27 = (float *)(a5 + 2);
  int8x16_t v28 = (const float *)(result + 64);
  uint64_t v29 = 2 * a2;
  signed int v30 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v31 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v32 = (int8x16_t)vceqzq_s16(v10);
  v33.i64[0] = 0xF000F000F000F000;
  v33.i64[1] = 0xF000F000F000F000;
  int16x8x2_t v34 = v27;
  do
  {
    int16x8_t v35 = (int16x8_t)v24;
    uint16x8_t v36 = (uint16x8_t)vextq_s8((int8x16_t)v11, v13, 4uLL);
    int16x8_t v37 = (int16x8_t)v23;
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v11, 4uLL);
    int16x8_t v11 = (int16x8_t)v22;
    int16x8_t v12 = (int16x8_t)v21;
    _X12 = (char *)v28 + v29;
    int8x16_t v21 = *(int8x16_t *)((char *)v28 + v29 - 64);
    int8x16_t v22 = *(int8x16_t *)((char *)v28 + v29 - 48);
    int8x16_t v23 = *(int8x16_t *)((char *)v28 + v29 - 32);
    int8x16_t v24 = *(int8x16_t *)((char *)v28 + v29 - 16);
    __asm { PRFM            #0, [X12] }
    int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v34++);
    uint16x8_t v42 = (uint16x8_t)vextq_s8(v13, v14, 4uLL);
    uint16x8_t v43 = (uint16x8_t)vextq_s8(v14, v26, 4uLL);
    *int16x8x2_t v27 = *(float *)&v24.i32[3];
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v41, v21, 0xCuLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v21, v22, 0xCuLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v22, v23, 0xCuLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v23, v24, 0xCuLL);
    int8x16_t v48 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v12), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v12, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v12))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v11), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v11, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v11))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v49 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v42, (uint16x8_t)v37), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v42)), (int16x8_t)vcgtq_u16((uint16x8_t)v37, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v37))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v43, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v43)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v47)), (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v35))), (int8x16_t)xmmword_1D0D7F120));
    *((int8x16_t *)v28 - 4) = vbslq_s8(v32, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v12, *(int8x8_t *)v48.i8), (int16x8_t)0), v33), (int8x16_t)v12);
    *((int16x8_t *)v28 - 3) = vminq_s16(vmaxq_s16(vaddw_high_s8(v11, v48), (int16x8_t)0), v33);
    *((int16x8_t *)v28 - 2) = vminq_s16(vmaxq_s16(vaddw_s8(v37, *(int8x8_t *)v49.i8), (int16x8_t)0), v33);
    *((int8x16_t *)v28 - 1) = vbslq_s8(v31, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v35, v49), (int16x8_t)0), v33), (int8x16_t)v35);
    int8x16_t v26 = (int8x16_t)vld1q_dup_f32(v28);
    --v30;
    int8x16_t v28 = (const float *)((char *)v28 + v29);
    int16x8x2_t v27 = (float *)v34;
    int8x16_t v13 = (int8x16_t)v37;
    int8x16_t v14 = (int8x16_t)v35;
  }
  while (v30 > 1);
  return result;
}

uint64_t sub_1D0C8C58C(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int16x8_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D28A5C((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int16x8_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 60);
    _X5 = (int16x8_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 60);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int16x8_t v18 = *_X5;
  int16x8_t v17 = _X5[1];
  int16x8_t v20 = _X5[2];
  int16x8_t v19 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  int8x16_t v26 = *(int8x16_t *)result;
  int8x16_t v27 = *(int8x16_t *)(result + 16);
  uint64_t v28 = result + 32;
  int8x16_t v29 = *(int8x16_t *)(result + 32);
  int8x16_t v30 = *(int8x16_t *)(result + 48);
  __asm { PRFM            #0, [X0,#0x40] }
  int v32 = v13 + 2;
  uint64_t v33 = 2 * a2;
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v35 = (int8x16_t)vceqzq_s16(v15);
  v36.i64[0] = 0xF000F000F000F000;
  v36.i64[1] = 0xF000F000F000F000;
  int16x8_t v37 = (const float *)a5;
  do
  {
    uint16x8_t v38 = (uint16x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v19, 0xCuLL);
    int16x8_t v19 = (int16x8_t)v30;
    uint16x8_t v39 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v20, 0xCuLL);
    int16x8_t v20 = (int16x8_t)v29;
    uint16x8_t v40 = (uint16x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 0xCuLL);
    int16x8_t v17 = (int16x8_t)v27;
    uint16x8_t v41 = (uint16x8_t)vextq_s8(v11, (int8x16_t)v18, 0xCuLL);
    int16x8_t v18 = (int16x8_t)v26;
    _X13 = v28 + v33;
    int8x16_t v26 = *(int8x16_t *)(v28 + v33 - 32);
    int8x16_t v27 = *(int8x16_t *)(v28 + v33 - 16);
    int8x16_t v29 = *(int8x16_t *)(v28 + 2 * a2);
    int8x16_t v30 = *(int8x16_t *)(v28 + v33 + 16);
    __asm { PRFM            #0, [X13,#0x20] }
    v7.i32[0] = *(_DWORD *)(v28 + (((a4 >> 1) & 1) << 6) + 2 * a2 - 32);
    uint16x8_t v44 = (uint16x8_t)vextq_s8(v26, v27, 4uLL);
    uint16x8_t v45 = (uint16x8_t)vextq_s8(v27, v29, 4uLL);
    uint16x8_t v46 = (uint16x8_t)vextq_s8(v29, v30, 4uLL);
    uint16x8_t v47 = (uint16x8_t)vextq_s8(v30, (int8x16_t)v7, 4uLL);
    int8x16_t v48 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v41, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v41)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v44)), (int16x8_t)vcgtq_u16(v44, (uint16x8_t)v18))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v40, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v40)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v45)), (int16x8_t)vcgtq_u16(v45, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v49 = (int16x8_t)vcgtq_u16((uint16x8_t)v19, v47);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v47, (uint16x8_t)v19);
    int8x16_t v50 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v39, (uint16x8_t)v20), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v39)), (int16x8_t)vcgtq_u16((uint16x8_t)v20, v46)), (int16x8_t)vcgtq_u16(v46, (uint16x8_t)v20))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v38)), v49), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)(v28 - 32) = vbslq_s8(v35, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v18, *(int8x8_t *)v48.i8), (int16x8_t)0), v36), (int8x16_t)v18);
    *(int16x8_t *)(v28 - 16) = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v48), (int16x8_t)0), v36);
    *(int16x8_t *)uint64_t v28 = vminq_s16(vmaxq_s16(vaddw_s8(v20, *(int8x8_t *)v50.i8), (int16x8_t)0), v36);
    *(int8x16_t *)(v28 + 16) = vbslq_s8(v34, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v19, v50), (int16x8_t)0), v36), (int8x16_t)v19);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v37++);
    --v32;
    v28 += v33;
    *(_DWORD *)a5 = v19.i32[3];
    a5 = (__int16 *)v37;
  }
  while (v32 > 1);
  return result;
}

uint16x8_t *sub_1D0C8C7D4(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[3].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[3].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  uint16x8_t v13 = _X5[2];
  uint16x8_t v12 = _X5[3];
  __asm { PRFM            #0, [X5,#0x40] }
  uint16x8_t v19 = *result;
  uint16x8_t v20 = result[1];
  uint16x8_t v21 = result[2];
  uint16x8_t v22 = result[3];
  __asm { PRFM            #0, [X0,#0x40] }
  int v24 = v9 + 2;
  uint64_t v25 = 2 * a2;
  v26.i64[0] = 0xF000F000F000F000;
  v26.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v27 = (int16x8_t)v19;
    int16x8_t v28 = (int16x8_t)v20;
    int16x8_t v29 = (int16x8_t)v21;
    int16x8_t v30 = (int16x8_t)v22;
    _X10 = (uint64_t)result->i64 + v25;
    uint16x8_t v19 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v20 = *(uint16x8_t *)((char *)&result[1] + v25);
    uint16x8_t v21 = *(uint16x8_t *)((char *)&result[2] + v25);
    uint16x8_t v22 = *(uint16x8_t *)((char *)&result[3] + v25);
    __asm { PRFM            #0, [X10,#0x40] }
    *a5++ = v30.i32[3];
    int8x16_t v33 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v27), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v27, v19)), (int16x8_t)vcgtq_u16(v19, (uint16x8_t)v27))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v28), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v28, v20)), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v28))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v34 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v13, (uint16x8_t)v29), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v13)), (int16x8_t)vcgtq_u16((uint16x8_t)v29, v21)), (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v29))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v12, (uint16x8_t)v30), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v12)), (int16x8_t)vcgtq_u16((uint16x8_t)v30, v22)), (int16x8_t)vcgtq_u16(v22, (uint16x8_t)v30))), (int8x16_t)xmmword_1D0D7F120));
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v27, *(int8x8_t *)v33.i8), (int16x8_t)0), v26);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v28, v33), (int16x8_t)0), v26);
    result[2] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_s8(v29, *(int8x8_t *)v34.i8), (int16x8_t)0), v26);
    result[3] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v30, v34), (int16x8_t)0), v26);
    --v24;
    uint64_t result = (uint16x8_t *)((char *)result + v25);
    uint16x8_t v11 = (uint16x8_t)v27;
    uint16x8_t v10 = (uint16x8_t)v28;
    uint16x8_t v13 = (uint16x8_t)v29;
    uint16x8_t v12 = (uint16x8_t)v30;
  }
  while (v24 > 1);
  return result;
}

int16x8_t *sub_1D0C8C964(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    int16x8_t v19 = result[2];
    int16x8_t v18 = result[3];
    __asm { PRFM            #0, [X0,#0x40] }
    int8x16_t v25 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v18.i32[3];
    v7.i32[0] = result[4 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v26 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v28 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 0xCuLL);
    uint16x8_t v29 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 0xCuLL);
    uint16x8_t v30 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v19, 4uLL);
    uint16x8_t v32 = (uint16x8_t)vextq_s8((int8x16_t)v19, (int8x16_t)v18, 4uLL);
    uint16x8_t v33 = (uint16x8_t)vextq_s8((int8x16_t)v18, v7, 4uLL);
    int8x16_t v34 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v31)), (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v35 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v28, (uint16x8_t)v19), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v28)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v32)), (int16x8_t)vcgtq_u16(v32, (uint16x8_t)v19))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v29, (uint16x8_t)v18), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v29)), (int16x8_t)vcgtq_u16((uint16x8_t)v18, v33)), (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v18))), (int8x16_t)xmmword_1D0D7F120));
    int16x8_t v36 = vaddw_s8(v19, *(int8x8_t *)v35.i8);
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v18, v35), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v34.i8), (int16x8_t)0), v14), (int8x16_t)v16);
    result[1] = vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v34), (int16x8_t)0), v14);
    result[2] = vminq_s16(vmaxq_s16(v36, (int16x8_t)0), v14);
    result[3] = (int16x8_t)vbslq_s8(v12, v7, (int8x16_t)v18);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C8CADC(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D28AE8((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int8x16_t v12 = *(int8x16_t *)_X5;
  int8x16_t v11 = *((int8x16_t *)_X5 + 1);
  __asm { PRFM            #0, [X5,#0x20] }
  int16x8_t v18 = (const float *)(_X5 + 2);
  int8x16_t v19 = *(int8x16_t *)result;
  int8x16_t v20 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v18);
  *(_DWORD *)a5 = v20.i32[3];
  int8x16_t v23 = (float *)(a5 + 2);
  uint64_t v24 = 2 * a2;
  signed int v25 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v26 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v27 = (int8x16_t)vceqzq_s16(v10);
  v28.i64[0] = 0xF000F000F000F000;
  v28.i64[1] = 0xF000F000F000F000;
  uint16x8_t v29 = v23;
  do
  {
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v12, v11, 4uLL);
    int16x8_t v31 = (int16x8_t)v20;
    int16x8_t v32 = (int16x8_t)v19;
    _X11 = result + v24;
    int8x16_t v19 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v20 = *(int8x16_t *)(result + v24 + 16);
    __asm { PRFM            #0, [X11,#0x20] }
    int8x16_t v35 = (int8x16_t)vld1q_dup_f32(v29++);
    uint16x8_t v36 = (uint16x8_t)vextq_s8(v11, v22, 4uLL);
    *int8x16_t v23 = *(float *)&v20.i32[3];
    uint16x8_t v37 = (uint16x8_t)vextq_s8(v35, v19, 0xCuLL);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v19, v20, 0xCuLL);
    int8x16_t v39 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v30, (uint16x8_t)v32), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v30)), (int16x8_t)vcgtq_u16((uint16x8_t)v32, v37)), (int16x8_t)vcgtq_u16(v37, (uint16x8_t)v32))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v36, (uint16x8_t)v31), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v36)), (int16x8_t)vcgtq_u16((uint16x8_t)v31, v38)), (int16x8_t)vcgtq_u16(v38, (uint16x8_t)v31))), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v32, *(int8x8_t *)v39.i8), (int16x8_t)0), v28), (int8x16_t)v32);
    *(int8x16_t *)(result + 16) = vbslq_s8(v26, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v31, v39), (int16x8_t)0), v28), (int8x16_t)v31);
    uint16x8_t v40 = (const float *)(result + 32);
    --v25;
    result += v24;
    int8x16_t v22 = (int8x16_t)vld1q_dup_f32(v40);
    int8x16_t v23 = (float *)v29;
    int8x16_t v12 = (int8x16_t)v32;
    int8x16_t v11 = (int8x16_t)v31;
  }
  while (v25 > 1);
  return result;
}

uint64_t sub_1D0C8CC80(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, int8x16_t *_X5, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D28B74((char *)result, a2, (uint64_t)a3, a4, a5, (unsigned __int16 *)_X5, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)&_X5[-1].i32[3];
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 28);
    _X5 = (int8x16_t *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 28);
  int8x16_t v14 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v15 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F190);
  int16x8_t v16 = (int16x8_t)vandq_s8(v14, (int8x16_t)xmmword_1D0D7F1A0);
  int8x16_t v17 = *_X5;
  int8x16_t v18 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  int8x16_t v24 = *(int8x16_t *)result;
  int8x16_t v25 = *(int8x16_t *)(result + 16);
  __asm { PRFM            #0, [X0,#0x20] }
  int v27 = v13 + 2;
  uint64_t v28 = 2 * a2;
  int8x16_t v29 = (int8x16_t)vceqzq_s16(v16);
  int8x16_t v30 = (int8x16_t)vceqzq_s16(v15);
  v31.i64[0] = 0xF000F000F000F000;
  v31.i64[1] = 0xF000F000F000F000;
  int16x8_t v32 = (const float *)a5;
  do
  {
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v17, v18, 0xCuLL);
    int16x8_t v34 = (int16x8_t)v25;
    int16x8_t v35 = (int16x8_t)v24;
    _X12 = result + v28;
    int8x16_t v24 = *(int8x16_t *)(result + 2 * a2);
    int8x16_t v25 = *(int8x16_t *)(result + v28 + 16);
    __asm { PRFM            #0, [X12,#0x20] }
    v7.i32[0] = *(_DWORD *)(result + 32 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v38 = (uint16x8_t)vextq_s8(v11, v17, 0xCuLL);
    uint16x8_t v39 = (uint16x8_t)vextq_s8(v24, v25, 4uLL);
    uint16x8_t v40 = (uint16x8_t)vextq_s8(v25, (int8x16_t)v7, 4uLL);
    int16x8_t v41 = (int16x8_t)vcgtq_u16((uint16x8_t)v34, v40);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v40, (uint16x8_t)v34);
    int8x16_t v42 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v38, (uint16x8_t)v35), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v38)), (int16x8_t)vcgtq_u16((uint16x8_t)v35, v39)), (int16x8_t)vcgtq_u16(v39, (uint16x8_t)v35))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v33, (uint16x8_t)v34), (int16x8_t)vcgtq_u16((uint16x8_t)v34, v33)), v41), v7)), (int8x16_t)xmmword_1D0D7F120));
    *(int8x16_t *)uint64_t result = vbslq_s8(v30, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v35, *(int8x8_t *)v42.i8), (int16x8_t)0), v31), (int8x16_t)v35);
    *(int8x16_t *)(result + 16) = vbslq_s8(v29, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v34, v42), (int16x8_t)0), v31), (int8x16_t)v34);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v32++);
    --v27;
    result += v28;
    *(_DWORD *)a5 = v34.i32[3];
    int8x16_t v17 = (int8x16_t)v35;
    int8x16_t v18 = (int8x16_t)v34;
    a5 = (__int16 *)v32;
  }
  while (v27 > 1);
  return result;
}

uint16x8_t *sub_1D0C8CE38(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *_X5, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result[1].i32[3];
    _X5 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result[1].i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *_X5;
  uint16x8_t v10 = _X5[1];
  __asm { PRFM            #0, [X5,#0x20] }
  uint16x8_t v17 = *result;
  uint16x8_t v18 = result[1];
  __asm { PRFM            #0, [X0,#0x20] }
  uint64_t v20 = 2 * a2;
  int v21 = v9 + 2;
  v22.i64[0] = 0xF000F000F000F000;
  v22.i64[1] = 0xF000F000F000F000;
  do
  {
    int16x8_t v23 = (int16x8_t)v17;
    int16x8_t v24 = (int16x8_t)v18;
    _X10 = (uint64_t)result->i64 + v20;
    uint16x8_t v17 = *(uint16x8_t *)((char *)result + 2 * a2);
    uint16x8_t v18 = *(uint16x8_t *)((char *)&result[1] + v20);
    __asm { PRFM            #0, [X10,#0x20] }
    *a5++ = v24.i32[3];
    int8x16_t v27 = vqtbl1q_s8(v7, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v11, (uint16x8_t)v23), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v11)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v17)), (int16x8_t)vcgtq_u16(v17, (uint16x8_t)v23))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v10, (uint16x8_t)v24), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v10)), (int16x8_t)vcgtq_u16((uint16x8_t)v24, v18)), (int16x8_t)vcgtq_u16(v18, (uint16x8_t)v24))), (int8x16_t)xmmword_1D0D7F120));
    --v21;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v23, *(int8x8_t *)v27.i8), (int16x8_t)0), v22);
    result[1] = (uint16x8_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v24, v27), (int16x8_t)0), v22);
    uint64_t result = (uint16x8_t *)((char *)result + v20);
    uint16x8_t v11 = (uint16x8_t)v23;
    uint16x8_t v10 = (uint16x8_t)v24;
  }
  while (v21 > 1);
  return result;
}

int16x8_t *sub_1D0C8CF48(int16x8_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int8x16_t v9 = (int8x16_t)vdupq_n_s16(~a4);
  int16x8_t v10 = (int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F190);
  int v11 = a7 + 1;
  int8x16_t v12 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v9, (int8x16_t)xmmword_1D0D7F1A0));
  int8x16_t v13 = (int8x16_t)vceqzq_s16(v10);
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  int16x8_t v15 = a5;
  do
  {
    int16x8_t v16 = *result;
    int16x8_t v17 = result[1];
    __asm { PRFM            #0, [X0,#0x20] }
    int8x16_t v23 = (int8x16_t)vld1q_dup_f32(v15++);
    *a5 = *(float *)&v17.i32[3];
    v7.i32[0] = result[2 * ((a4 >> 1) & 1)].i32[0];
    uint16x8_t v24 = (uint16x8_t)vextq_s8(v23, (int8x16_t)v16, 0xCuLL);
    uint16x8_t v25 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 0xCuLL);
    uint16x8_t v26 = (uint16x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 4uLL);
    uint16x8_t v27 = (uint16x8_t)vextq_s8((int8x16_t)v17, v7, 4uLL);
    int8x16_t v28 = vqtbl1q_s8(v8, vaddq_s8(vqmovn_high_s16(vqmovn_s16(vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v26, (uint16x8_t)v16), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v26)), (int16x8_t)vcgtq_u16((uint16x8_t)v16, v24)), (int16x8_t)vcgtq_u16(v24, (uint16x8_t)v16))), vaddq_s16(vsubq_s16(vsubq_s16((int16x8_t)vcgtq_u16(v25, (uint16x8_t)v17), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v25)), (int16x8_t)vcgtq_u16((uint16x8_t)v17, v27)), (int16x8_t)vcgtq_u16(v27, (uint16x8_t)v17))), (int8x16_t)xmmword_1D0D7F120));
    int8x16_t v7 = (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v16, *(int8x8_t *)v28.i8), (int16x8_t)0), v14);
    *(int8x16_t *)uint64_t result = vbslq_s8(v13, v7, (int8x16_t)v16);
    result[1] = (int16x8_t)vbslq_s8(v12, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_high_s8(v17, v28), (int16x8_t)0), v14), (int8x16_t)v17);
    uint64_t result = (int16x8_t *)((char *)result + 2 * a2);
    --v11;
    a5 = (float *)v15;
  }
  while (v11 > 1);
  return result;
}

uint64_t sub_1D0C8D048(uint64_t result, uint64_t a2, uint64_t *a3, unsigned int a4, _WORD *a5, _OWORD *_X5, int a7)
{
  if (((~a4 & 6) != 0) == (a4 & 0x20) >> 5
    || ((((~a4 & 9) != 0) ^ ((a4 & 0x40) >> 6)) & 1) == 0)
  {
    return sub_1D0D28C78((char *)result, a2, (uint64_t)a3, a4, a5, (uint64_t)_X5, a7);
  }
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 0x40) != 0) {
    *(_DWORD *)&a5[2 * a7] = *(_DWORD *)(result + 2 * a7 * a2 - 4);
  }
  if ((a4 & 4) == 0)
  {
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a5 += 2;
    _X5 = (_OWORD *)result;
    result += 2 * a2;
    --a7;
  }
  v7.i64[1] = v8;
  int8x16_t v9 = *(int8x16_t *)_X5;
  int16x8_t v10 = (const float *)(_X5 + 1);
  __asm { PRFM            #0, [X5,#0x10] }
  _X10 = result + 16;
  int16x8_t v17 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X10] }
  int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v10);
  *(_DWORD *)a5 = HIDWORD(*(_OWORD *)result);
  uint64_t v20 = (float *)(a5 + 2);
  uint64_t v21 = 2 * a2;
  signed int v22 = a7 + ((a4 >> 3) | 0xFFFFFFFE) + 2;
  int8x16_t v23 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v24.i64[0] = 0xF000F000F000F000;
  v24.i64[1] = 0xF000F000F000F000;
  uint16x8_t v25 = v20;
  do
  {
    _X12 = result + v21 + 16;
    int8x16_t v27 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X12] }
    int8x16_t v29 = (int8x16_t)vld1q_dup_f32(v25++);
    *uint64_t v20 = *(float *)&v27.i32[3];
    uint16x8_t v30 = (uint16x8_t)vextq_s8(v9, v19, 4uLL);
    uint16x8_t v31 = (uint16x8_t)vextq_s8(v29, v27, 0xCuLL);
    *(int8x16_t *)uint64_t result = vbslq_s8(v23, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v17, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v17, v30), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v30, (uint16x8_t)v17)), (int16x8_t)vcgtq_u16((uint16x8_t)v17,
                                                                                                  v31)),
                                                                                   (int16x8_t)vcgtq_u16(v31, (uint16x8_t)v17))))), (int16x8_t)0), v24), (int8x16_t)v17);
    int16x8_t v32 = (const float *)(result + 16);
    --v22;
    result += v21;
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v32);
    uint64_t v20 = (float *)v25;
    int8x16_t v9 = (int8x16_t)v17;
    int16x8_t v17 = (int16x8_t)v27;
  }
  while (v22 > 1);
  return result;
}

uint64_t sub_1D0C8D1AC(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  if (((~a4 & 5) != 0) == (a4 & 0x10) >> 4
    || ((((~a4 & 0xA) != 0) ^ ((a4 & 0x80) >> 7)) & 1) == 0)
  {
    return sub_1D0D28D04((char *)result, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  v8.i64[0] = *a3;
  uint64_t v9 = a3[4];
  if ((a4 & 4) != 0)
  {
    int8x16_t v12 = (const float *)(a6 - 2);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v12);
  }
  else
  {
    int16x8_t v10 = (const float *)a5;
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10++);
    *(_DWORD *)a5 = *(_DWORD *)(result + 12);
    a6 = (unsigned __int16 *)result;
    result += 2 * a2;
    --a7;
    a5 = (__int16 *)v10;
  }
  v8.i64[1] = v9;
  unsigned int v13 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  *(_DWORD *)&a5[2 * (v13 + 1)] = *(_DWORD *)(result + 2 * (int)(v13 + 1) * a2 + 12);
  int8x16_t v15 = *(int8x16_t *)a6;
  _X5 = a6 + 8;
  int8x16_t v16 = v15;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 16;
  int16x8_t v23 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v25 = 2 * a2;
  int v26 = v13 + 2;
  int8x16_t v27 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v28.i64[0] = 0xF000F000F000F000;
  v28.i64[1] = 0xF000F000F000F000;
  int8x16_t v29 = (const float *)a5;
  do
  {
    _X13 = result + v25 + 16;
    int8x16_t v31 = *(int8x16_t *)(result + 2 * a2);
    __asm { PRFM            #0, [X13] }
    v7.i32[0] = *(_DWORD *)(result + 16 * ((a4 >> 1) & 1) + 2 * a2);
    uint16x8_t v33 = (uint16x8_t)vextq_s8(v11, v16, 0xCuLL);
    uint16x8_t v34 = (uint16x8_t)vextq_s8(v31, (int8x16_t)v7, 4uLL);
    int16x8_t v7 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v23, v33), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0);
    *(int8x16_t *)uint64_t result = vbslq_s8(v27, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v23, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16(v7, (int16x8_t)vcgtq_u16(v33, (uint16x8_t)v23)), (int16x8_t)vcgtq_u16((uint16x8_t)v23, v34)), (int16x8_t)vcgtq_u16(v34,
                                                                                                (uint16x8_t)v23))))),
                                            (int16x8_t)0),
                                          v28),
                             (int8x16_t)v23);
    int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v29++);
    --v26;
    result += v25;
    *(_DWORD *)a5 = v23.i32[3];
    int8x16_t v16 = (int8x16_t)v23;
    int16x8_t v23 = (int16x8_t)v31;
    a5 = (__int16 *)v29;
  }
  while (v26 > 1);
  return result;
}

uint16x8_t *sub_1D0C8D324(uint16x8_t *result, uint64_t a2, uint64_t *a3, unsigned int a4, _DWORD *a5, uint16x8_t *a6, int a7)
{
  v7.i64[0] = *a3;
  uint64_t v8 = a3[4];
  if ((a4 & 4) == 0)
  {
    *a5++ = result->i32[3];
    a6 = result;
    uint64_t result = (uint16x8_t *)((char *)result + 2 * a2);
    --a7;
  }
  v7.i64[1] = v8;
  int v9 = a7 + ((a4 >> 3) | 0xFFFFFFFE);
  a5[v9 + 1] = *(__int32 *)((char *)&result->i32[3] + 2 * (v9 + 1) * a2);
  uint16x8_t v11 = *a6;
  _X5 = a6 + 1;
  uint16x8_t v12 = v11;
  __asm { PRFM            #0, [X5] }
  _X8 = result + 1;
  int16x8_t v19 = *(int16x8_t *)result;
  __asm { PRFM            #0, [X8] }
  uint64_t v21 = 2 * a2;
  int v22 = v9 + 2;
  v23.i64[0] = 0xF000F000F000F000;
  v23.i64[1] = 0xF000F000F000F000;
  do
  {
    _X11 = (uint64_t)result[1].i64 + v21;
    uint16x8_t v25 = *(uint16x8_t *)((char *)result + 2 * a2);
    __asm { PRFM            #0, [X11] }
    *a5++ = v19.i32[3];
    --v22;
    *(int16x8_t *)uint64_t result = vminq_s16(vmaxq_s16(vaddw_s8(v19, vqtbl1_s8(v7, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v19, v12), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v12, (uint16x8_t)v19)), (int16x8_t)vcgtq_u16((uint16x8_t)v19, v25)), (int16x8_t)vcgtq_u16(v25, (uint16x8_t)v19))))), (int16x8_t)0), v23);
    uint64_t result = (uint16x8_t *)((char *)result + v21);
    uint16x8_t v12 = (uint16x8_t)v19;
    int16x8_t v19 = (int16x8_t)v25;
  }
  while (v22 > 1);
  return result;
}

int8x16_t *sub_1D0C8D410(int8x16_t *result, uint64_t a2, uint64_t *a3, unint64_t a4, float *a5, uint64_t a6, int a7)
{
  v8.i64[0] = *a3;
  v8.i64[1] = a3[4];
  int v9 = a7 + 1;
  int8x16_t v10 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(~a4), (int8x16_t)xmmword_1D0D7F1B0));
  v11.i64[0] = 0xF000F000F000F000;
  v11.i64[1] = 0xF000F000F000F000;
  uint16x8_t v12 = a5;
  do
  {
    int16x8_t v13 = *(int16x8_t *)result;
    __asm { PRFM            #0, [X0,#0x10] }
    int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v12++);
    uint16x8_t v20 = (uint16x8_t)vextq_s8(v19, *result, 0xCuLL);
    *(_DWORD *)a5 = HIDWORD(*(unsigned long long *)result);
    v7.i32[0] = result[(a4 >> 1) & 1].i32[0];
    uint16x8_t v21 = (uint16x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v7, 4uLL);
    int16x8_t v22 = (int16x8_t)vcgtq_u16((uint16x8_t)v13, v21);
    int16x8_t v7 = (int16x8_t)vcgtq_u16(v21, (uint16x8_t)v13);
    *uint64_t result = vbslq_s8(v10, (int8x16_t)vminq_s16(vmaxq_s16(vaddw_s8(v13, vqtbl1_s8(v8, (int8x8_t)vqmovn_u16((uint16x8_t)vaddq_s16(vsubq_s16(vaddq_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v13, v20), (int8x16_t)xmmword_1D0D7F1D0, (int8x16_t)xmmword_1D0D7F1C0), (int16x8_t)vcgtq_u16(v20, (uint16x8_t)v13)), v22), v7)))),
                               (int16x8_t)0),
                             v11),
                (int8x16_t)v13);
    uint64_t result = (int8x16_t *)((char *)result + 2 * a2);
    --v9;
    a5 = (float *)v12;
  }
  while (v9 > 1);
  return result;
}

uint64_t sub_1D0C8D4D4(void *a1)
{
  int v2 = (void *)a1[218];
  if (v2)
  {
    a1[219] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[215];
  if (v3)
  {
    a1[216] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[212];
  if (v4)
  {
    a1[213] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[209];
  if (v5)
  {
    a1[210] = v5;
    operator delete(v5);
  }
  uint64_t result = a1[203];
  a1[203] = 0;
  if (result)
  {
    JUMPOUT(0x1D25F01F0);
  }
  return result;
}

void sub_1D0C8D56C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F16D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F0230);
}

void sub_1D0C8D5C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F16D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *sub_1D0C8D5E0(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = result;
    if (a4 < 0) {
      sub_1D0C8D71C();
    }
    uint64_t result = sub_1D0C8D77C(a4);
    int16x8_t v7 = result;
    *unint64_t v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 2 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1D0C8D658(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1D0C8D674(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = result;
    if (a4 >= 0x1555555555555556) {
      sub_1D0C8D71C();
    }
    uint64_t result = sub_1D0C8D734(a4);
    int16x8_t v7 = result;
    *unint64_t v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 12 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1D0C8D700(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0C8D71C()
{
}

void *sub_1D0C8D734(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    sub_1D0C6AC2C();
  }
  return operator new(12 * a1);
}

void *sub_1D0C8D77C(uint64_t a1)
{
  if (a1 < 0) {
    sub_1D0C6AC2C();
  }
  return operator new(2 * a1);
}

void sub_1D0C8D7B4(uint64_t a1)
{
  unint64_t v4 = (void **)(a1 + 2072);
  sub_1D0C8D838(&v4);
  uint64_t v2 = *(void *)(a1 + 2000);
  *(void *)(a1 + 2000) = 0;
  if (v2) {
    MEMORY[0x1D25F01F0](v2, 0x1000C8052888210);
  }
  int v3 = *(void **)(a1 + 320);
  if (v3)
  {
    *(void *)(a1 + 328) = v3;
    operator delete(v3);
  }
}

void sub_1D0C8D838(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 7;
        sub_1D0C8D8BC(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D0C8D8BC(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_1D0C8D914(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F1708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F0230);
}

void sub_1D0C8D968(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F1708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D0C8D98C(void *a1)
{
  uint64_t v2 = a1[54];
  if (v2)
  {
    uint64_t v3 = a1[55];
    unint64_t v4 = (void *)a1[54];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        int16x8_t v7 = (void **)(v3 - 24);
        sub_1D0C8D838(&v7);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = (void *)a1[54];
    }
    a1[55] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[35];
  if (v6)
  {
    a1[36] = v6;
    operator delete(v6);
  }
}

void sub_1D0C8DA30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F1698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F0230);
}

void sub_1D0C8DA84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F1698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1D0C8DAA4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 16) < 0x16uLL) & (0x3F03FFu >> *(unsigned char *)(a1 + 16));
}

void sub_1D0C8DAC4()
{
}

uint64_t sub_1D0C8DADC(char *a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    size_t v9 = &a1[a5];
  }
  else
  {
    size_t v10 = (a2 + 2);
    bzero(a1, v10);
    a1[v10] = 1;
    size_t v9 = &a1[v10 + 1];
  }
  *size_t v9 = *a3;
  int16x8_t v11 = v9 + 2;
  v9[1] = a3[1];
  uint64_t v12 = a4 - 2;
  if (a4 != 2)
  {
    int v13 = 0;
    int16x8_t v14 = a3 + 2;
    do
    {
      unsigned int v15 = *v14;
      if (v13 == 2)
      {
        if (v15 > 3)
        {
          int v13 = 2;
        }
        else
        {
          int v13 = 0;
          *v11++ = 3;
          unsigned int v15 = *v14;
        }
      }
      if (v15) {
        int v13 = 0;
      }
      else {
        ++v13;
      }
      ++v14;
      *v11++ = v15;
      --v12;
    }
    while (v12);
  }
  if (a5)
  {
    unsigned int v16 = v11 - a1 - a5;
    switch(a5)
    {
      case 4:
        *(_DWORD *)a1 = bswap32(v16);
        break;
      case 2:
        *(_WORD *)a1 = bswap32(v16) >> 16;
        break;
      case 1:
        *a1 = v16;
        break;
    }
  }
  return v11 - a1;
}

void sub_1D0C8DBF0()
{
  off_1EB671A70 = sub_1D0C4CBE8;
  off_1EB671A48 = (uint64_t (*)(void *))sub_1D0C75AF0;
}

uint64_t sub_1D0C8DC1C()
{
  return 0;
}

uint64_t sub_1D0C8DC24()
{
  return 0;
}

void *sub_1D0C8DC2C(void *result, int a2, int a3, int a4)
{
  int v5 = *((int *)result + 130) >> a4;
  int v6 = *((int *)result + 131) >> a4;
  int v7 = *((int *)result + 186) >> a4;
  uint64_t v8 = (char *)result + 8 * a4;
  uint64_t v9 = *((void *)v8 + 50);
  uint64_t v10 = *((void *)v8 + 52);
  uint64_t v11 = a2 & ~(a2 >> 31);
  if (a3 >= v6) {
    int v12 = *((int *)result + 131) >> a4;
  }
  else {
    int v12 = a3;
  }
  if (*((unsigned char *)result + 531))
  {
    if (v12 > (int)v11)
    {
      int v13 = (__int16 *)(v9 + 2 * v10 * v11);
      int16x8_t v14 = &v13[v5 - 1];
      do
      {
        if (v7)
        {
          __int16 v15 = *v13;
          uint64_t v16 = -(uint64_t)v7;
          do
            v13[v16] = v15;
          while (!__CFADD__(v16++, 1));
          __int16 v18 = *v14;
          uint64_t v19 = v5;
          uint64_t result = (void *)v7;
          do
          {
            v13[v19++] = v18;
            uint64_t result = (char *)result - 1;
          }
          while (result);
        }
        LODWORD(v11) = v11 + 1;
        v13 += v10;
        v14 += v10;
      }
      while (v11 != v12);
    }
    if (a2 < 1 && v7 >= 1)
    {
      uint64_t v20 = (v7 + 1) - 1;
      uint16x8_t v21 = (char *)(v9 + -2 * v10 - 2 * v7);
      do
      {
        uint64_t result = memcpy(v21, (const void *)(v9 - 2 * v7), 2 * (v5 + 2 * v7));
        v21 -= 2 * v10;
        --v20;
      }
      while (v20);
    }
    if (v6 <= a3 && v7 >= 1)
    {
      uint64_t v22 = v6 - 1;
      int16x8_t v23 = (const void *)(v9 - 2 * v7 + 2 * v10 * v22);
      uint64_t v24 = (v7 + 1) - 1;
      uint16x8_t v25 = (char *)(v9 + v10 * (2 * v22 + 2) - 2 * v7);
      uint64_t v26 = 2 * v10;
      do
      {
        uint64_t result = memcpy(v25, v23, 2 * (v5 + 2 * v7));
        v25 += v26;
        --v24;
      }
      while (v24);
    }
  }
  else
  {
    int v35 = *((int *)result + 130) >> a4;
    uint64_t v36 = v9;
    int v27 = v12 - v11;
    if (v12 > (int)v11)
    {
      int16x8_t v28 = (unsigned __int8 *)(v9 + v10 * v11);
      do
      {
        memset(&v28[-v7], *v28, v7);
        uint64_t result = memset(&v28[v35], v28[v35 - 1], v7);
        v28 += v10;
        --v27;
      }
      while (v27);
    }
    if (a2 < 1 && v7 >= 1)
    {
      uint64_t v29 = (v7 + 1) - 1;
      uint16x8_t v30 = (char *)(v36 + -v10 - v7);
      do
      {
        uint64_t result = memcpy(v30, (const void *)(v36 - v7), v35 + 2 * v7);
        v30 -= v10;
        --v29;
      }
      while (v29);
    }
    if (v6 <= a3 && v7 >= 1)
    {
      uint64_t v31 = v6 - 1;
      int16x8_t v32 = (const void *)(v36 - v7 + v10 * v31);
      uint64_t v33 = (v7 + 1) - 1;
      uint16x8_t v34 = (char *)(v36 + v10 + v10 * v31 - v7);
      do
      {
        uint64_t result = memcpy(v34, v32, v35 + 2 * v7);
        v34 += v10;
        --v33;
      }
      while (v33);
    }
  }
  return result;
}

void sub_1D0C8DEF4(uint64_t a1)
{
  sub_1D0C8DF2C(a1);
  JUMPOUT(0x1D25F0230);
}

uint64_t sub_1D0C8DF2C(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F13D0;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1104));
  std::mutex::~mutex((std::mutex *)(a1 + 1040));
  uint64_t v2 = *(void **)(a1 + 1000);
  if (v2)
  {
    *(void *)(a1 + 1008) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 968);
  if (v3)
  {
    *(void *)(a1 + 976) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 944);
  if (v4)
  {
    *(void *)(a1 + 952) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 904);
  if (v5)
  {
    *(void *)(a1 + 912) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 880);
  if (v6)
  {
    *(void *)(a1 + 888) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)(a1 + 856);
  if (v7)
  {
    *(void *)(a1 + 864) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 808);
  if (v8)
  {
    *(void *)(a1 + 816) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 776);
  if (v9)
  {
    *(void *)(a1 + 784) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 720);
  if (v10)
  {
    *(void *)(a1 + 728) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 688);
  if (v11)
  {
    *(void *)(a1 + 696) = v11;
    operator delete(v11);
  }
  int v12 = *(void **)(a1 + 376);
  if (v12)
  {
    *(void *)(a1 + 384) = v12;
    operator delete(v12);
  }
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  int v13 = *(void **)(a1 + 64);
  if (v13)
  {
    *(void *)(a1 + 72) = v13;
    operator delete(v13);
  }
  return a1;
}

unsigned int *sub_1D0C8E058(unsigned int *result)
{
  if (*((unsigned __int8 *)result + 530) >= 2u)
  {
    if (*((unsigned char *)result + 531))
    {
      int v1 = 1 << (*((unsigned char *)result + 529) - 1);
      if (*((unsigned char *)result + 534)) {
        LOWORD(v1) = 0x8000;
      }
      int v2 = result[131];
      if (v2 >= 1)
      {
        int v3 = 0;
        uint64_t v4 = *((void *)result + 51);
        uint64_t v5 = result[130];
        uint64_t v6 = 2 * *((void *)result + 53);
        do
        {
          if ((int)v5 >= 1)
          {
            uint64_t v7 = 0;
            do
            {
              *(_WORD *)(v4 + v7) = v1;
              v7 += 2;
            }
            while (2 * v5 != v7);
          }
          v3 += 2;
          v4 += v6;
        }
        while (v3 < v2);
      }
    }
    else
    {
      return (unsigned int *)memset(*((void **)result + 51), 128, *((void *)result + 53) * (int)result[131] / 2);
    }
  }
  return result;
}

uint64_t sub_1D0C8E108(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  int v2 = *(void **)result;
  char v3 = 16;
  if (!v1
    || ((64 - v1) >= 0x10uLL ? (char v4 = 16) : (char v4 = 64 - v1),
        *v2 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v1 - v4)) & (-1 << v1)),
        ++v2,
        *(void *)uint64_t result = v2,
        (char v3 = (16 - v4) & 0x3F) != 0))
  {
    *(void *)uint64_t result = v2;
    *v2 &= ~(0xFFFFFFFFFFFFFFFFLL >> -v3);
  }
  return result;
}

uint64_t sub_1D0C8E178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 504);
  uint64_t v5 = *(unsigned int *)(a1 + 508);
  uint64_t v6 = *(unsigned int *)(a1 + 520);
  uint64_t v7 = *(unsigned int *)(a1 + 524);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v4, v5, v6, v7, v8, v9);
  if (result)
  {
    int v11 = 0;
    *(_DWORD *)(a1 + 512) = 0;
  }
  else
  {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 530);
    if (*(unsigned char *)(a1 + 530))
    {
      int v13 = (void *)(a1 + 488);
      do
      {
        *(v13 - 11) = *(v13 - 2);
        *(v13 - 9) = *v13;
        ++v13;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 520);
    int v11 = *(_DWORD *)(a1 + 524);
  }
  *(_DWORD *)(a1 + 516) = v11;
  return result;
}

uint64_t sub_1D0C8E29C(uint64_t a1, FILE *__stream, uint64_t a3, int a4)
{
  int v7 = 0;
  if (a3 && *(unsigned char *)(a1 + 432))
  {
    if (*(_DWORD *)(a1 + 504) == *(_DWORD *)(a1 + 520) && *(_DWORD *)(a1 + 508) == *(_DWORD *)(a1 + 524))
    {
      int v7 = 0;
    }
    else
    {
      uint64_t result = sub_1D0C8E178(a1, a3);
      if (result) {
        return result;
      }
      int v7 = 1;
    }
  }
  int v9 = *(_DWORD *)(a1 + 648);
  uint64_t v10 = (*(_DWORD *)(a1 + 520) - (v9 + *(_DWORD *)(a1 + 656)));
  int v11 = *(_DWORD *)(a1 + 524);
  int v12 = *(_DWORD *)(a1 + 652);
  int v13 = *(_DWORD *)(a1 + 660);
  int v14 = v11 - (v12 + v13);
  int v15 = v11 - v13;
  if (*(unsigned char *)(a1 + 531) != 1)
  {
    if (a4)
    {
      int v96 = v7;
      unsigned int v18 = *(unsigned __int8 *)(a1 + 532);
      char v19 = v18 < 3;
      BOOL v20 = v18 < 2;
      if (v18 >= 2) {
        char v21 = v18 < 3;
      }
      else {
        char v21 = v19 + 1;
      }
      int v22 = (2 * (int)v10 * v14) >> v21;
      char v93 = v20;
      if (v22)
      {
        uint64_t v23 = v22;
        if (v22 < 0) {
          sub_1D0C8D71C();
        }
        int v24 = v14;
        uint16x8_t v25 = (char *)sub_1D0C8D77C(v22);
        bzero(v25, 2 * v23);
        int v9 = *(_DWORD *)(a1 + 648);
        int v12 = *(_DWORD *)(a1 + 652);
      }
      else
      {
        int v24 = v14;
        uint16x8_t v25 = 0;
      }
      if (v12 < v15)
      {
        uint64_t v53 = v12;
        uint64_t v54 = v15;
        uint64_t v55 = *(void *)(a1 + 400) + v9;
        do
        {
          if ((int)v10 >= 1)
          {
            uint16x8_t v56 = (unsigned __int8 *)(v55 + *(void *)(a1 + 416) * v53);
            uint16x8_t v57 = v25;
            uint64_t v58 = v10;
            do
            {
              __int16 v59 = *v56++;
              *v57++ = v59;
              --v58;
            }
            while (v58);
          }
          fwrite(v25, 2uLL, (int)v10, __stream);
          ++v53;
        }
        while (v53 < v54);
      }
      if (*(unsigned __int8 *)(a1 + 530) > 1u)
      {
        int v60 = (int)v10 >> v19;
        uint64_t v61 = (v24 >> v93);
        int v62 = ((int)v10 >> v19) * v61;
        if ((int)v61 >= 1)
        {
          uint64_t v63 = *(void *)(a1 + 424);
          int16x8_t v64 = &v25[2 * v62];
          uint64_t v65 = 2 * v60;
          uint64_t v66 = v63 * (*(int *)(a1 + 652) >> v93) + v65 + 2 * (*(int *)(a1 + 648) >> v19) + *(void *)(a1 + 408) - 1;
          int8x16_t v67 = v25;
          do
          {
            if (v60 >= 1)
            {
              uint16x8_t v68 = (unsigned __int8 *)v66;
              uint64_t v69 = v60 - 1;
              do
              {
                *(_WORD *)&v67[2 * v69] = *(v68 - 1);
                __int16 v70 = *v68;
                v68 -= 2;
                *(_WORD *)&v64[2 * v69] = v70;
                unint64_t v71 = v69-- + 1;
              }
              while (v71 > 1);
            }
            v64 += v65;
            v67 += v65;
            v66 += v63;
            BOOL v52 = v61-- <= 1;
          }
          while (!v52);
        }
        fwrite(v25, 2uLL, 2 * v62, __stream);
      }
      int v7 = v96;
    }
    else
    {
      __ptr = 0;
      uint64_t v98 = 0;
      uint64_t v99 = 0;
      if (*(unsigned __int8 *)(a1 + 530) >= 2u)
      {
        int v34 = 2 * v10 * v14;
        if (v34)
        {
          sub_1D0C4CCE0((unint64_t *)&__ptr, v34);
          int v9 = *(_DWORD *)(a1 + 648);
          int v12 = *(_DWORD *)(a1 + 652);
        }
      }
      int v35 = v14;
      if (v12 < v15)
      {
        uint64_t v36 = *(void *)(a1 + 400) + v9;
        uint64_t v37 = v12;
        do
          fwrite((const void *)(v36 + *(void *)(a1 + 416) * v37++), 1uLL, (int)v10, __stream);
        while (v37 < v15);
      }
      uint16x8_t v25 = (char *)__ptr;
      if (*(unsigned __int8 *)(a1 + 530) >= 2u)
      {
        unsigned int v38 = *(unsigned __int8 *)(a1 + 532);
        char v39 = v38 < 2;
        uint64_t v40 = (v35 >> (v38 < 2));
        char v41 = v38 < 3;
        int v42 = (int)v10 >> (v38 < 3);
        uint64_t v43 = v42 * (uint64_t)(int)v40;
        if ((int)v40 >= 1)
        {
          uint64_t v44 = *(void *)(a1 + 424);
          uint16x8_t v45 = (char *)__ptr + v43;
          uint64_t v46 = v44 * (*(int *)(a1 + 652) >> v39)
              + 2 * v42
              + 2 * (*(int *)(a1 + 648) >> v41)
              + *(void *)(a1 + 408)
              - 1;
          uint16x8_t v47 = __ptr;
          do
          {
            if (v42 >= 1)
            {
              int8x16_t v48 = (char *)v46;
              uint64_t v49 = v42 - 1;
              do
              {
                v47[v49] = *(v48 - 1);
                char v50 = *v48;
                v48 -= 2;
                v45[v49] = v50;
                unint64_t v51 = v49-- + 1;
              }
              while (v51 > 1);
            }
            v47 += v42;
            v45 += v42;
            v46 += v44;
            BOOL v52 = v40-- <= 1;
          }
          while (!v52);
        }
        fwrite(v25, 1uLL, 2 * v43, __stream);
      }
    }
    goto LABEL_75;
  }
  __ptr = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  int v16 = *(unsigned __int8 *)(a1 + 534);
  int v94 = v11 - (v12 + v13);
  int v95 = v7;
  int v92 = v16;
  if (*(unsigned __int8 *)(a1 + 530) >= 2u)
  {
    sub_1D0C8E930((char **)&__ptr, 2 * (int)v10 * v14);
    uint64_t v17 = *(void *)(a1 + 400) + 2 * *(int *)(a1 + 648);
    if (!v16)
    {
      int v12 = *(_DWORD *)(a1 + 652);
      goto LABEL_61;
    }
LABEL_21:
    uint64_t v26 = *(int *)(a1 + 652);
    if ((int)v26 < v15)
    {
      char v27 = 16 - *(unsigned char *)(a1 + 528);
      int16x8_t v28 = __ptr;
      uint64_t v29 = 2 * v26;
      do
      {
        if ((int)v10 >= 1)
        {
          uint16x8_t v30 = (unsigned __int16 *)(v17 + *(void *)(a1 + 416) * v29);
          uint64_t v31 = v28;
          uint64_t v32 = v10;
          do
          {
            unsigned int v33 = *v30++;
            *v31++ = v33 >> v27;
            --v32;
          }
          while (v32);
        }
        fwrite(v28, 1uLL, 2 * (int)v10, __stream);
        ++v26;
        v29 += 2;
      }
      while (v26 < v15);
    }
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 534))
  {
    sub_1D0C8E930((char **)&__ptr, (int)v10);
    uint64_t v17 = *(void *)(a1 + 400) + 2 * *(int *)(a1 + 648);
    goto LABEL_21;
  }
  uint64_t v17 = *(void *)(a1 + 400) + 2 * v9;
LABEL_61:
  if (v12 < v15)
  {
    uint64_t v72 = v12;
    do
      fwrite((const void *)(v17 + 2 * *(void *)(a1 + 416) * v72++), 1uLL, 2 * (int)v10, __stream);
    while (v72 < v15);
  }
LABEL_64:
  uint16x8_t v25 = (char *)__ptr;
  int v7 = v95;
  if (*(unsigned __int8 *)(a1 + 530) >= 2u)
  {
    unsigned int v73 = *(unsigned __int8 *)(a1 + 532);
    char v74 = v73 < 3;
    char v75 = v73 < 2;
    int v76 = (int)v10 >> (v73 < 3);
    uint64_t v77 = (v94 >> (v73 < 2));
    char v78 = 16 - *(unsigned char *)(a1 + 529);
    if (!v92) {
      char v78 = 0;
    }
    uint64_t v79 = v76 * (int)v77;
    if ((int)v77 >= 1)
    {
      uint64_t v80 = *(void *)(a1 + 424);
      int8x16_t v81 = (char *)__ptr + 2 * v79;
      int v82 = 2 * (*(int *)(a1 + 648) >> v74);
      uint64_t v83 = 2 * v76;
      uint64_t v84 = 2 * v80 * (*(int *)(a1 + 652) >> v75) + 4 * v76 + 2 * v82 + *(void *)(a1 + 408) - 2;
      uint64_t v85 = 2 * v80;
      unsigned int v86 = (char *)__ptr;
      do
      {
        if (v76 >= 1)
        {
          CFNumberRef v87 = (unsigned __int16 *)v84;
          uint64_t v88 = v76 - 1;
          do
          {
            *(_WORD *)&v86[2 * v88] = *(v87 - 1) >> v78;
            unsigned int v89 = *v87;
            v87 -= 2;
            *(_WORD *)&v81[2 * v88] = v89 >> v78;
            unint64_t v90 = v88-- + 1;
          }
          while (v90 > 1);
        }
        v81 += v83;
        v86 += v83;
        v84 += v85;
        BOOL v52 = v77-- <= 1;
      }
      while (!v52);
    }
    fwrite(v25, 1uLL, 4 * v79, __stream);
  }
LABEL_75:
  if (v25) {
    operator delete(v25);
  }
  if (!v7 || !*(unsigned char *)(a1 + 432)) {
    return 0;
  }
  uint64_t result = 0;
  long long v91 = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 416) = v91;
  *(void *)(a1 + 512) = 0;
  return result;
}

void sub_1D0C8E8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0C8E930(char **a1, unint64_t a2)
{
  char v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    char v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  unint64_t v6 = a2 - v5;
  int v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    char v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    sub_1D0C8D71C();
  }
  unint64_t v8 = v7 - v3;
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = v9;
  }
  int v11 = (char *)sub_1D0C8D77C(v10);
  int v12 = *a1;
  int v13 = a1[1];
  int v14 = &v11[2 * v5];
  int v16 = &v11[2 * v15];
  bzero(v14, 2 * v6);
  uint64_t v17 = &v14[2 * v6];
  while (v13 != v12)
  {
    __int16 v18 = *((_WORD *)v13 - 1);
    v13 -= 2;
    *((_WORD *)v14 - 1) = v18;
    v14 -= 2;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

uint64_t sub_1D0C8EA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 531) == 1)
  {
    for (uint64_t i = 0; i != 288; i += 96)
    {
      *((unsigned char *)&c + i + 92) = 1;
      *((unsigned char *)&c + i + 92) = CC_MD5_Init((CC_MD5_CTX *)((char *)&c + i)) != 0;
    }
    if (*(unsigned char *)(a1 + 534))
    {
      int v5 = 16 - *(unsigned __int8 *)(a1 + 528);
      char v6 = 16 - *(unsigned char *)(a1 + 529);
    }
    else
    {
      int v5 = 0;
      char v6 = 0;
    }
    int v10 = *(unsigned __int8 *)(a1 + 530);
    uint64_t v11 = *(int *)(a1 + 520);
    uint64_t v12 = *(unsigned int *)(a1 + 520);
    uint64_t v13 = *(unsigned int *)(a1 + 524);
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    int v14 = (const void **)(a1 + 400);
    uint64_t v15 = (void **)(a1 + 408);
    if (*(unsigned char *)(a1 + 432)) {
      int v16 = (uint64_t *)(a1 + 456);
    }
    else {
      int v16 = (uint64_t *)(a1 + 416);
    }
    if (*(unsigned char *)(a1 + 432)) {
      uint64_t v17 = (uint64_t *)(a1 + 464);
    }
    else {
      uint64_t v17 = (uint64_t *)(a1 + 424);
    }
    if (*(unsigned char *)(a1 + 432))
    {
      uint64_t v15 = (void **)(a1 + 448);
      int v14 = (const void **)(a1 + 440);
    }
    __int16 v18 = (unsigned __int16 *)*v14;
    CFNumberRef v109 = *v15;
    uint64_t v107 = *v16;
    uint64_t v106 = *v17;
    unint64_t v19 = 4 * (int)v13 * (int)v12;
    data = *(char **)(a1 + 376);
    unint64_t v20 = *(void *)(a1 + 384) - (void)data;
    if (v19 <= v20)
    {
      if (v19 < v20) {
        *(void *)(a1 + 384) = &data[v19];
      }
    }
    else
    {
      sub_1D0C4CCE0((unint64_t *)(a1 + 376), v19 - v20);
      data = *(char **)(a1 + 376);
    }
    if (*(unsigned char *)(a1 + 528) == 8)
    {
      if ((int)v13 >= 1)
      {
        uint64_t v21 = 0;
        int v22 = data;
        do
        {
          uint64_t v23 = v18;
          int v24 = v22;
          uint64_t v25 = v12;
          if ((int)v11 >= 1)
          {
            do
            {
              unsigned int v26 = *v23++;
              *v24++ = v26 >> v5;
              --v25;
            }
            while (v25);
          }
          ++v21;
          v22 += v11;
          v18 += v107;
        }
        while (v21 != v13);
      }
      CC_LONG v27 = v13 * v12;
    }
    else
    {
      if (!v5)
      {
        if (*(_DWORD *)(a1 + 524))
        {
          unint64_t v104 = 0;
          do
          {
            char v105 = CC_MD5_Update(&c, v18, 2 * v12);
            v114 &= v105;
            ++v104;
            v18 += v107;
          }
          while (v104 < *(int *)(a1 + 524));
        }
LABEL_38:
        if (v109)
        {
          unsigned int v35 = *(unsigned __int8 *)(a1 + 532);
          uint64_t v36 = ((int)v13 >> (v35 < 2));
          int v37 = *(unsigned __int8 *)(a1 + 529);
          uint64_t v38 = (int)v12 >> (v35 < 3);
          uint64_t v39 = v38 * (int)v36;
          if (v37 == 8)
          {
            if ((int)v36 >= 1)
            {
              uint64_t v40 = data;
              uint64_t v41 = (uint64_t)v109 + 4 * v38 - 2;
              int v42 = &data[v39];
              do
              {
                if ((int)v38 >= 1)
                {
                  uint64_t v43 = (unsigned __int16 *)v41;
                  uint64_t v44 = v38 - 1;
                  do
                  {
                    v40[v44] = *(v43 - 1) >> v6;
                    unsigned int v45 = *v43;
                    v43 -= 2;
                    v42[v44] = v45 >> v6;
                    unint64_t v46 = v44-- + 1;
                  }
                  while (v46 > 1);
                }
                v40 += v38;
                v42 += v38;
                v41 += 2 * v106;
                BOOL v47 = v36-- <= 1;
              }
              while (!v47);
            }
            char v48 = CC_MD5_Update(&v115, data, v39);
            v116 &= v48;
            char v49 = CC_MD5_Update(&v117, &data[v39], v39);
          }
          else
          {
            unint64_t v90 = &data[2 * v39];
            if ((int)v36 >= 1)
            {
              long long v91 = data;
              uint64_t v92 = 2 * v38;
              uint64_t v93 = (uint64_t)v109 + 4 * v38 - 2;
              int v94 = &data[2 * v39];
              do
              {
                if ((int)v38 >= 1)
                {
                  int v95 = (unsigned __int16 *)v93;
                  uint64_t v96 = v38 - 1;
                  do
                  {
                    *(_WORD *)&v91[2 * v96] = *(v95 - 1) >> v6;
                    unsigned int v97 = *v95;
                    v95 -= 2;
                    *(_WORD *)&v94[2 * v96] = v97 >> v6;
                    unint64_t v98 = v96-- + 1;
                  }
                  while (v98 > 1);
                }
                v94 += v92;
                v91 += v92;
                v93 += 2 * v106;
                BOOL v47 = v36-- <= 1;
              }
              while (!v47);
            }
            CC_LONG v99 = 2 * v39;
            char v100 = CC_MD5_Update(&v115, data, v99);
            v116 &= v100;
            char v49 = CC_MD5_Update(&v117, v90, v99);
          }
          v118 &= v49;
        }
        unint64_t v101 = 0;
        p_CC_MD5_CTX c = &c;
        while (1)
        {
          char v103 = CC_MD5_Final((unsigned __int8 *)a2, p_c);
          BOOL v88 = (v103 & p_c[1].A) == 0;
          LOBYTE(p_c[1].A) &= v103;
          if (v88) {
            break;
          }
          uint64_t result = 0;
          if (v10 != 1)
          {
            p_CC_MD5_CTX c = (CC_MD5_CTX *)((char *)p_c + 96);
            a2 += 16;
            BOOL v47 = v101++ > 1;
            if (!v47) {
              continue;
            }
          }
          return result;
        }
        return 4294954385;
      }
      if ((int)v13 >= 1)
      {
        uint64_t v28 = 0;
        uint64_t v29 = data;
        do
        {
          uint16x8_t v30 = v18;
          uint64_t v31 = v29;
          uint64_t v32 = v12;
          if ((int)v11 >= 1)
          {
            do
            {
              unsigned int v33 = *v30++;
              *v31++ = v33 >> v5;
              --v32;
            }
            while (v32);
          }
          ++v28;
          v29 += v11;
          v18 += v107;
        }
        while (v28 != v13);
      }
      CC_LONG v27 = 2 * v13 * v12;
    }
    char v34 = CC_MD5_Update(&c, data, v27);
    v114 &= v34;
    goto LABEL_38;
  }
  for (uint64_t j = 0; j != 288; j += 96)
  {
    *((unsigned char *)&c + j + 92) = 1;
    *((unsigned char *)&c + j + 92) = CC_MD5_Init((CC_MD5_CTX *)((char *)&c + j)) != 0;
  }
  if (*(unsigned char *)(a1 + 534))
  {
    int v8 = 16 - *(unsigned __int8 *)(a1 + 528);
    char v9 = 16 - *(unsigned char *)(a1 + 529);
  }
  else
  {
    int v8 = 0;
    char v9 = 0;
  }
  int dataa = *(unsigned __int8 *)(a1 + 530);
  uint64_t v50 = *(int *)(a1 + 520);
  uint64_t v51 = *(unsigned int *)(a1 + 520);
  uint64_t v52 = *(unsigned int *)(a1 + 524);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (*(unsigned char *)(a1 + 432)) {
    uint64_t v53 = (const void **)(a1 + 440);
  }
  else {
    uint64_t v53 = (const void **)(a1 + 400);
  }
  if (*(unsigned char *)(a1 + 432)) {
    uint64_t v54 = (uint64_t *)(a1 + 448);
  }
  else {
    uint64_t v54 = (uint64_t *)(a1 + 408);
  }
  if (*(unsigned char *)(a1 + 432)) {
    uint64_t v55 = (uint64_t *)(a1 + 456);
  }
  else {
    uint64_t v55 = (uint64_t *)(a1 + 416);
  }
  if (*(unsigned char *)(a1 + 432)) {
    uint16x8_t v56 = (uint64_t *)(a1 + 464);
  }
  else {
    uint16x8_t v56 = (uint64_t *)(a1 + 424);
  }
  uint64_t v57 = *v56;
  uint64_t v58 = *v55;
  __int16 v59 = (unsigned __int8 *)*v53;
  unint64_t v60 = 2 * (int)v52 * (int)v51;
  uint64_t v108 = *v54;
  CFTypeID v110 = *(char **)(a1 + 376);
  unint64_t v61 = *(void *)(a1 + 384) - (void)v110;
  if (v60 <= v61)
  {
    if (v60 < v61) {
      *(void *)(a1 + 384) = &v110[v60];
    }
  }
  else
  {
    sub_1D0C4CCE0((unint64_t *)(a1 + 376), v60 - v61);
    CFTypeID v110 = *(char **)(a1 + 376);
  }
  if (v8)
  {
    if ((int)v52 >= 1)
    {
      uint64_t v62 = 0;
      uint64_t v63 = v110;
      do
      {
        int16x8_t v64 = v59;
        uint64_t v65 = v63;
        uint64_t v66 = v51;
        if ((int)v50 >= 1)
        {
          do
          {
            unsigned int v67 = *v64++;
            *v65++ = v67 >> v8;
            --v66;
          }
          while (v66);
        }
        ++v62;
        v63 += v50;
        v59 += v58;
      }
      while (v62 != v52);
    }
    char v68 = CC_MD5_Update(&c, v110, v52 * v51);
    v114 &= v68;
  }
  else if (*(_DWORD *)(a1 + 524))
  {
    unint64_t v69 = 0;
    do
    {
      char v70 = CC_MD5_Update(&c, v59, v51);
      v114 &= v70;
      ++v69;
      v59 += v58;
    }
    while (v69 < *(int *)(a1 + 524));
  }
  if (v108)
  {
    unsigned int v71 = *(unsigned __int8 *)(a1 + 532);
    int v72 = (int)v50 >> (v71 < 3);
    uint64_t v73 = ((int)v52 >> (v71 < 2));
    CC_LONG v74 = v72 * v73;
    char v75 = &v110[v72 * (uint64_t)(int)v73];
    if ((int)v73 >= 1)
    {
      int v76 = v110;
      uint64_t v77 = v108 + 2 * v72 - 1;
      char v78 = &v110[v72 * (uint64_t)(int)v73];
      do
      {
        if (v72 >= 1)
        {
          uint64_t v79 = (unsigned __int8 *)v77;
          uint64_t v80 = v72 - 1;
          do
          {
            v76[v80] = *(v79 - 1) >> v9;
            unsigned int v81 = *v79;
            v79 -= 2;
            v78[v80] = v81 >> v9;
            unint64_t v82 = v80-- + 1;
          }
          while (v82 > 1);
        }
        v76 += v72;
        v78 += v72;
        v77 += v57;
        BOOL v47 = v73-- <= 1;
      }
      while (!v47);
    }
    char v83 = CC_MD5_Update(&v115, v110, v74);
    v116 &= v83;
    char v84 = CC_MD5_Update(&v117, v75, v74);
    v118 &= v84;
  }
  unint64_t v85 = 0;
  unsigned int v86 = &c;
  while (1)
  {
    char v87 = CC_MD5_Final((unsigned __int8 *)a2, v86);
    BOOL v88 = (v87 & v86[1].A) == 0;
    LOBYTE(v86[1].A) &= v87;
    if (v88) {
      break;
    }
    uint64_t result = 0;
    if (dataa != 1)
    {
      unsigned int v86 = (CC_MD5_CTX *)((char *)v86 + 96);
      a2 += 16;
      BOOL v47 = v85++ > 1;
      if (!v47) {
        continue;
      }
    }
    return result;
  }
  return 4294954385;
}

void sub_1D0C8F1F8(uint64_t a1, double *a2, double *a3)
{
  double v5 = (double)(unint64_t)(1046529 * *(int *)(a1 + 520) * (uint64_t)*(int *)(a1 + 524));
  double v6 = 999.0;
  double v7 = 999.0;
  if (*a2 > 0.0) {
    double v7 = log10(v5 / *a2) * 10.0;
  }
  *a3 = v7;
  double v8 = a2[1];
  double v9 = 999.0;
  if (v8 > 0.0) {
    double v9 = log10(v5 * 0.25 / v8) * 10.0;
  }
  a3[1] = v9;
  double v10 = a2[2];
  double v11 = 999.0;
  if (v10 > 0.0) {
    double v11 = log10(v5 * 0.25 / v10) * 10.0;
  }
  a3[2] = v11;
  double v12 = *a2 + a2[1] + a2[2];
  if (v12 > 0.0) {
    double v6 = log10(v5 * 1.5 / v12) * 10.0;
  }
  a3[3] = v6;
}

void sub_1D0C8F2F8(uint64_t a1, double *a2, double *a3)
{
  double v5 = (double)(unint64_t)(261121 * *(int *)(a1 + 520) * (uint64_t)*(int *)(a1 + 524));
  double v6 = 999.0;
  double v7 = 999.0;
  if (*a2 > 0.0) {
    double v7 = log10(v5 / *a2) * 10.0;
  }
  *a3 = v7;
  double v8 = a2[1];
  double v9 = 999.0;
  if (v8 > 0.0) {
    double v9 = log10(v5 * 0.25 / v8) * 10.0;
  }
  a3[1] = v9;
  double v10 = a2[2];
  double v11 = 999.0;
  if (v10 > 0.0) {
    double v11 = log10(v5 * 0.25 / v10) * 10.0;
  }
  a3[2] = v11;
  double v12 = *a2 + a2[1] + a2[2];
  if (v12 > 0.0) {
    double v6 = log10(v5 * 1.5 / v12) * 10.0;
  }
  a3[3] = v6;
}

void sub_1D0C8F3F8(uint64_t a1, double *a2, double *a3)
{
  double v5 = (double)(unint64_t)(65025 * *(int *)(a1 + 520) * (uint64_t)*(int *)(a1 + 524));
  double v6 = 999.0;
  double v7 = 999.0;
  if (*a2 > 0.0) {
    double v7 = log10(v5 / *a2) * 10.0;
  }
  *a3 = v7;
  double v8 = a2[1];
  double v9 = 999.0;
  if (v8 > 0.0) {
    double v9 = log10(v5 * 0.25 / v8) * 10.0;
  }
  a3[1] = v9;
  double v10 = a2[2];
  double v11 = 999.0;
  if (v10 > 0.0) {
    double v11 = log10(v5 * 0.25 / v10) * 10.0;
  }
  a3[2] = v11;
  double v12 = *a2 + a2[1] + a2[2];
  if (v12 > 0.0) {
    double v6 = log10(v5 * 1.5 / v12) * 10.0;
  }
  a3[3] = v6;
}

void sub_1D0C8F4F4(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  char v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    int v16 = &v4[2 * a2];
    goto LABEL_21;
  }
  unint64_t v6 = a2 - v5;
  double v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 1)
  {
    bzero(a1[1], 2 * v6);
    int v16 = &v3[2 * v6];
LABEL_21:
    a1[1] = v16;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    sub_1D0C8D71C();
  }
  unint64_t v8 = v7 - v4;
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v10 < 0) {
    sub_1D0C6AC2C();
  }
  double v11 = (char *)operator new(2 * v10);
  double v12 = &v11[2 * v5];
  uint64_t v13 = &v11[2 * v10];
  bzero(v12, 2 * v6);
  int v14 = &v12[2 * v6];
  if (v3 != v4)
  {
    do
    {
      __int16 v15 = *((_WORD *)v3 - 1);
      v3 -= 2;
      *((_WORD *)v12 - 1) = v15;
      v12 -= 2;
    }
    while (v3 != v4);
    char v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

void sub_1D0C8F60C(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  char v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v17 = &v4[16 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  double v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 4)
  {
    bzero(a1[1], 16 * v6);
    uint64_t v17 = &v3[16 * v6];
LABEL_20:
    a1[1] = v17;
    return;
  }
  if (a2 >> 60) {
    sub_1D0C8D71C();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 60) {
    sub_1D0C6AC2C();
  }
  double v11 = (char *)operator new(16 * v10);
  double v12 = &v11[16 * v5];
  uint64_t v13 = &v11[16 * v10];
  bzero(v12, 16 * v6);
  int v14 = &v12[16 * v6];
  if (v3 != v4)
  {
    do
    {
      uint64_t v15 = *((void *)v3 - 2);
      v3 -= 16;
      uint64_t v16 = *(void *)(v3 + 6);
      *((void *)v12 - 2) = v15;
      v12 -= 16;
      *(void *)(v12 + 6) = v16;
    }
    while (v3 != v4);
    char v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

void *sub_1D0C8F738(void *result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a7 + 400);
  uint64_t v12 = *(void *)(a7 + 408);
  uint64_t v14 = *(void *)(a7 + 416);
  uint64_t v76 = *(void *)(a7 + 424);
  uint64_t v15 = v76 >> 1;
  if ((int)result <= 2)
  {
    if (a2 <= 3) {
      uint64_t v16 = 3;
    }
    else {
      uint64_t v16 = a2;
    }
    int v17 = *(_DWORD *)(a7 + 524);
    LODWORD(v18) = a2 + a6 + 4;
    if ((int)v18 >= v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = v18;
    }
    if ((int)v16 - 3 < (int)v18)
    {
      uint64_t v19 = v16 - 3;
      uint64_t v20 = v13 + 2 * v14 * v19 - 2;
      do
      {
        __int16 v21 = *(_WORD *)(v13 + 2 * v14 * v19);
        int v22 = (_WORD *)v20;
        uint64_t v23 = (3 - result);
        do
        {
          *v22-- = v21;
          --v23;
        }
        while (v23);
        ++v19;
        v20 += 2 * v14;
      }
      while (v19 != v18);
    }
    if (a4 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = a4;
    }
    int v25 = a4 + a6 + 2;
    if (v25 >= v17) {
      int v26 = v17;
    }
    else {
      int v26 = a4 + a6 + 2;
    }
    if ((int)v24 <= v26)
    {
      uint64_t v27 = v24 - 1;
      uint64_t v28 = v12 + 4 * v15 * v27 - 4;
      do
      {
        if (a3 <= 0)
        {
          int v29 = *(_DWORD *)(v12 + 4 * v15 * v27);
          uint16x8_t v30 = (_DWORD *)v28;
          uint64_t v31 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v30-- = v29;
            --v31;
          }
          while (v31);
          int v17 = *(_DWORD *)(a7 + 524);
        }
        ++v27;
        if (v25 >= v17) {
          int v32 = v17;
        }
        else {
          int v32 = a4 + a6 + 2;
        }
        v28 += 4 * v15;
      }
      while (v27 < v32);
    }
  }
  int v33 = result + a5 + 4;
  uint64_t v34 = *(int *)(a7 + 520);
  if (v33 > (int)v34)
  {
    if (a2 <= 3) {
      uint64_t v35 = 3;
    }
    else {
      uint64_t v35 = a2;
    }
    int v36 = *(_DWORD *)(a7 + 524);
    LODWORD(v37) = a2 + a6 + 4;
    if ((int)v37 >= v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v37;
    }
    if ((int)v35 - 3 < (int)v37)
    {
      uint64_t v38 = v35 - 3;
      uint64_t v39 = 2 * v14 * v38 + 2 * (v34 - 1) + v13 + 2;
      do
      {
        if (v33 != v34)
        {
          __int16 v40 = *(_WORD *)(v13 + 2 * (v34 - 1 + v14 * v38));
          uint64_t v41 = (_WORD *)v39;
          uint64_t v42 = v33 - (int)v34;
          do
          {
            *v41++ = v40;
            --v42;
          }
          while (v42);
        }
        ++v38;
        v39 += 2 * v14;
      }
      while (v38 != v37);
    }
    if (a4 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = a4;
    }
    int v44 = a4 + a6 + 2;
    if (v44 >= v36) {
      int v45 = v36;
    }
    else {
      int v45 = a4 + a6 + 2;
    }
    if ((int)v43 <= v45)
    {
      uint64_t v46 = 2 * (int)v34 - 2;
      uint64_t v47 = v12 + 2 * v46;
      int v48 = a3 + a5 - v34 + 2;
      uint64_t v49 = v43 - 1;
      uint64_t v50 = 4 * v15 * v49 + 2 * v46 + v12 + 4;
      do
      {
        if (v48 >= 1)
        {
          int v51 = *(_DWORD *)(v47 + 4 * v15 * v49);
          uint64_t v52 = (_DWORD *)v50;
          uint64_t v53 = v48 & ~(v48 >> 31);
          do
          {
            *v52++ = v51;
            --v53;
          }
          while (v53);
          int v36 = *(_DWORD *)(a7 + 524);
        }
        ++v49;
        if (v44 >= v36) {
          int v54 = v36;
        }
        else {
          int v54 = a4 + a6 + 2;
        }
        v50 += 4 * v15;
      }
      while (v49 < v54);
    }
  }
  uint64_t v75 = v12;
  uint64_t v77 = v13 + 2 * (int)result;
  if (a2 <= 2)
  {
    int v55 = a2 - 3;
    uint16x8_t v56 = (char *)(v77 - 6);
    size_t v57 = 2 * (a5 + 7);
    do
    {
      uint64_t v58 = &v56[-2 * v14];
      uint64_t result = memcpy(v58, v56, v57);
      uint16x8_t v56 = v58;
      BOOL v59 = __CFADD__(v55++, 1);
    }
    while (!v59);
    if (a4 <= 0)
    {
      int v60 = a4 - 1;
      unint64_t v61 = (char *)(v75 + 2 * (2 * a3 - 2));
      do
      {
        uint64_t v62 = &v61[-2 * v76];
        uint64_t result = memcpy(v62, v61, 2 * (2 * a5 + 6));
        unint64_t v61 = v62;
        BOOL v59 = __CFADD__(v60++, 1);
      }
      while (!v59);
    }
  }
  uint64_t v63 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v63)
  {
    int v64 = a4;
    int v65 = a6 + a2 - v63 + 4;
    uint64_t v66 = 2 * v14 * (v63 - 1);
    uint64_t v67 = v77 - 6;
    uint64_t v68 = 2 * v14;
    uint64_t v69 = v14 * (2 * (v63 - 1) + 2);
    do
    {
      uint64_t result = memcpy((void *)(v67 + v69), (const void *)(v67 + v66), 2 * (a5 + 7));
      v67 += v68;
      --v65;
    }
    while (v65);
    uint64_t v70 = *(int *)(a7 + 524);
    if ((int)v70 < v64 + a6 + 2)
    {
      int v71 = a6 + v64 - v70 + 2;
      uint64_t v72 = 2 * v76 * (v70 - 1);
      uint64_t v73 = v75 + 2 * (2 * a3 - 2);
      uint64_t v74 = v76 * (2 * (v70 - 1) + 2);
      do
      {
        uint64_t result = memcpy((void *)(v73 + v74), (const void *)(v73 + v72), 2 * (2 * a5 + 6));
        v73 += 2 * v76;
        --v71;
      }
      while (v71);
    }
  }
  return result;
}

unint64_t sub_1D0C8FB5C(unint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  int v79 = a6;
  uint64_t v10 = *(void *)(a7 + 400);
  uint64_t v11 = *(void *)(a7 + 408);
  uint64_t v12 = *(void *)(a7 + 416);
  uint64_t v13 = *(void *)(a7 + 424);
  uint64_t v14 = v13;
  uint64_t v75 = v11;
  if ((int)result <= 2)
  {
    if (a2 <= 3) {
      uint64_t v15 = 3;
    }
    else {
      uint64_t v15 = a2;
    }
    int v16 = a2 + a6 + 4;
    LODWORD(v17) = *(_DWORD *)(a7 + 524);
    if (v16 >= (int)v17) {
      int v18 = *(_DWORD *)(a7 + 524);
    }
    else {
      int v18 = a2 + a6 + 4;
    }
    if ((int)v15 - 3 < v18)
    {
      int v76 = a5;
      unsigned int v72 = result;
      size_t v19 = (3 - result);
      uint64_t v20 = v15 - 3;
      uint64_t v70 = *(void *)(a7 + 400);
      __int16 v21 = (unsigned __int8 *)(v10 + v12 * (v15 - 3));
      do
      {
        memset(&v21[-v19], *v21, v19);
        LODWORD(v17) = *(_DWORD *)(a7 + 524);
        ++v20;
        if (v16 >= (int)v17) {
          int v22 = *(_DWORD *)(a7 + 524);
        }
        else {
          int v22 = v16;
        }
        v21 += v12;
      }
      while (v20 < v22);
      uint64_t v14 = *(void *)(a7 + 424);
      a6 = v79;
      a5 = v76;
      uint64_t result = v72;
      uint64_t v10 = v70;
    }
    if (a4 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = a4;
    }
    int v24 = a4 + a6 + 2;
    if (v24 >= (int)v17) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = v24;
    }
    if ((int)v23 <= (int)v17)
    {
      uint64_t v25 = v23 - 1;
      uint64_t v26 = v11 + 2 * (v14 >> 1) * v25 - 2;
      do
      {
        if (a3 <= 0)
        {
          __int16 v27 = *(_WORD *)(v11 + 2 * (v14 >> 1) * v25);
          uint64_t v28 = (_WORD *)v26;
          uint64_t v29 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v28-- = v27;
            --v29;
          }
          while (v29);
        }
        ++v25;
        v26 += 2 * (v14 >> 1);
      }
      while (v25 != v17);
    }
  }
  int v30 = result + a5 + 4;
  int v31 = *(_DWORD *)(a7 + 520);
  int v32 = v30 - v31;
  if (v30 > v31)
  {
    if (a2 <= 3) {
      uint64_t v33 = 3;
    }
    else {
      uint64_t v33 = a2;
    }
    int v34 = a2 + a6 + 4;
    LODWORD(v35) = *(_DWORD *)(a7 + 524);
    if (v34 >= (int)v35) {
      int v36 = *(_DWORD *)(a7 + 524);
    }
    else {
      int v36 = a2 + a6 + 4;
    }
    if ((int)v33 - 3 < v36)
    {
      unsigned int v73 = result;
      int v77 = a5;
      uint64_t v37 = v33 - 3;
      size_t v38 = v32;
      uint64_t v71 = v10;
      uint64_t v39 = (char *)(v31 + v12 * (v33 - 3) + v10);
      do
      {
        memset(v39, *(v39 - 1), v38);
        ++v37;
        LODWORD(v35) = *(_DWORD *)(a7 + 524);
        if (v34 >= (int)v35) {
          int v40 = *(_DWORD *)(a7 + 524);
        }
        else {
          int v40 = v34;
        }
        v39 += v12;
      }
      while (v37 < v40);
      int v31 = *(_DWORD *)(a7 + 520);
      uint64_t v14 = *(void *)(a7 + 424);
      a6 = v79;
      a5 = v77;
      uint64_t result = v73;
      uint64_t v10 = v71;
    }
    if (a4 <= 1) {
      uint64_t v41 = 1;
    }
    else {
      uint64_t v41 = a4;
    }
    int v42 = a4 + a6 + 2;
    if (v42 >= (int)v35) {
      uint64_t v35 = v35;
    }
    else {
      uint64_t v35 = v42;
    }
    if ((int)v41 <= (int)v35)
    {
      uint64_t v43 = 2 * v31 - 2;
      uint64_t v44 = v11 + v43;
      uint64_t v45 = v14 >> 1;
      int v46 = a3 + a5 - v31 + 2;
      uint64_t v47 = v41 - 1;
      uint64_t v48 = v43 + 2 * v45 * v47 + v11 + 2;
      do
      {
        if (v46 >= 1)
        {
          __int16 v49 = *(_WORD *)(v44 + 2 * v45 * v47);
          uint64_t v50 = (_WORD *)v48;
          uint64_t v51 = v46 & ~(v46 >> 31);
          do
          {
            *v50++ = v49;
            --v51;
          }
          while (v51);
        }
        ++v47;
        v48 += 2 * v45;
      }
      while (v47 != v35);
    }
  }
  int v52 = a5;
  int v74 = 2 * a5;
  uint64_t v78 = v10 + (int)result;
  if (a2 <= 2)
  {
    int v53 = a2 - 3;
    int v54 = (char *)(v78 - 3);
    do
    {
      int v55 = &v54[-v12];
      uint64_t result = (unint64_t)memcpy(&v54[-v12], v54, v52 + 7);
      int v54 = v55;
      BOOL v56 = __CFADD__(v53++, 1);
    }
    while (!v56);
    if (a4 <= 0)
    {
      int v57 = a4 - 1;
      uint64_t v58 = (char *)(v11 + 2 * a3 - 2);
      do
      {
        BOOL v59 = &v58[-v13];
        uint64_t result = (unint64_t)memcpy(&v58[-v13], v58, v74 + 6);
        uint64_t v58 = v59;
        BOOL v56 = __CFADD__(v57++, 1);
      }
      while (!v56);
    }
  }
  uint64_t v60 = *(int *)(a7 + 524);
  if (a2 + v79 + 4 > (int)v60)
  {
    uint64_t v61 = v12 * (v60 - 1);
    int v62 = v79 + a2 - v60 + 4;
    uint64_t v63 = v78 - 3;
    uint64_t v64 = v12 * v60;
    do
    {
      uint64_t result = (unint64_t)memcpy((void *)(v63 + v64), (const void *)(v63 + v61), v52 + 7);
      v63 += v12;
      --v62;
    }
    while (v62);
    uint64_t v65 = *(int *)(a7 + 524);
    if ((int)v65 < a4 + v79 + 2)
    {
      uint64_t v66 = v13 * (v65 - 1);
      int v67 = v79 + a4 - v65 + 2;
      uint64_t v68 = v75 + 2 * a3 - 2;
      uint64_t v69 = v13 * v65;
      do
      {
        uint64_t result = (unint64_t)memcpy((void *)(v68 + v69), (const void *)(v68 + v66), v74 + 6);
        v68 += v13;
        --v67;
      }
      while (v67);
    }
  }
  return result;
}

void *sub_1D0C8FF70(void *result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a7 + 400);
  uint64_t v12 = *(void *)(a7 + 408);
  uint64_t v14 = *(void *)(a7 + 416);
  uint64_t v76 = *(void *)(a7 + 424);
  uint64_t v15 = v76 >> 1;
  if ((int)result <= 2)
  {
    if (a2 <= 3) {
      uint64_t v16 = 3;
    }
    else {
      uint64_t v16 = a2;
    }
    int v17 = *(_DWORD *)(a7 + 524);
    LODWORD(v18) = a2 + a6 + 4;
    if ((int)v18 >= v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = v18;
    }
    if ((int)v16 - 3 < (int)v18)
    {
      uint64_t v19 = v16 - 3;
      uint64_t v20 = v13 + 2 * v14 * v19 - 2;
      do
      {
        __int16 v21 = *(_WORD *)(v13 + 2 * v14 * v19);
        int v22 = (_WORD *)v20;
        uint64_t v23 = (3 - result);
        do
        {
          *v22-- = v21;
          --v23;
        }
        while (v23);
        ++v19;
        v20 += 2 * v14;
      }
      while (v19 != v18);
    }
    if (a4 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = a4;
    }
    int v25 = a4 + a6 + 2;
    if (v25 >= v17) {
      int v26 = v17;
    }
    else {
      int v26 = a4 + a6 + 2;
    }
    if ((int)v24 <= v26)
    {
      uint64_t v27 = v24 - 1;
      uint64_t v28 = v12 + 4 * v15 * v27 - 4;
      do
      {
        if (a3 <= 0)
        {
          int v29 = *(_DWORD *)(v12 + 4 * v15 * v27);
          int v30 = (_DWORD *)v28;
          uint64_t v31 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v30-- = v29;
            --v31;
          }
          while (v31);
          int v17 = *(_DWORD *)(a7 + 524);
        }
        ++v27;
        if (v25 >= v17) {
          int v32 = v17;
        }
        else {
          int v32 = a4 + a6 + 2;
        }
        v28 += 4 * v15;
      }
      while (v27 < v32);
    }
  }
  int v33 = result + a5 + 4;
  uint64_t v34 = *(int *)(a7 + 520);
  if (v33 > (int)v34)
  {
    if (a2 <= 3) {
      uint64_t v35 = 3;
    }
    else {
      uint64_t v35 = a2;
    }
    int v36 = *(_DWORD *)(a7 + 524);
    LODWORD(v37) = a2 + a6 + 4;
    if ((int)v37 >= v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v37;
    }
    if ((int)v35 - 3 < (int)v37)
    {
      uint64_t v38 = v35 - 3;
      uint64_t v39 = 2 * v14 * v38 + 2 * (v34 - 1) + v13 + 2;
      do
      {
        if (v33 != v34)
        {
          __int16 v40 = *(_WORD *)(v13 + 2 * (v34 - 1 + v14 * v38));
          uint64_t v41 = (_WORD *)v39;
          uint64_t v42 = v33 - (int)v34;
          do
          {
            *v41++ = v40;
            --v42;
          }
          while (v42);
        }
        ++v38;
        v39 += 2 * v14;
      }
      while (v38 != v37);
    }
    if (a4 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = a4;
    }
    int v44 = a4 + a6 + 2;
    if (v44 >= v36) {
      int v45 = v36;
    }
    else {
      int v45 = a4 + a6 + 2;
    }
    if ((int)v43 <= v45)
    {
      uint64_t v46 = (int)v34 - 2;
      uint64_t v47 = v12 + 2 * v46;
      int v48 = a3 + (a5 >> 1) - ((int)v34 >> 1) + 2;
      uint64_t v49 = v43 - 1;
      uint64_t v50 = 4 * v15 * v49 + 2 * v46 + v12 + 4;
      do
      {
        if (v48 >= 1)
        {
          int v51 = *(_DWORD *)(v47 + 4 * v15 * v49);
          int v52 = (_DWORD *)v50;
          uint64_t v53 = v48 & ~(v48 >> 31);
          do
          {
            *v52++ = v51;
            --v53;
          }
          while (v53);
          int v36 = *(_DWORD *)(a7 + 524);
        }
        ++v49;
        if (v44 >= v36) {
          int v54 = v36;
        }
        else {
          int v54 = a4 + a6 + 2;
        }
        v50 += 4 * v15;
      }
      while (v49 < v54);
    }
  }
  uint64_t v75 = v12;
  uint64_t v77 = v13 + 2 * (int)result;
  if (a2 <= 2)
  {
    int v55 = a2 - 3;
    BOOL v56 = (char *)(v77 - 6);
    size_t v57 = 2 * (a5 + 7);
    do
    {
      uint64_t v58 = &v56[-2 * v14];
      uint64_t result = memcpy(v58, v56, v57);
      BOOL v56 = v58;
      BOOL v59 = __CFADD__(v55++, 1);
    }
    while (!v59);
    if (a4 <= 0)
    {
      int v60 = a4 - 1;
      uint64_t v61 = (char *)(v75 + 2 * (2 * a3 - 2));
      do
      {
        int v62 = &v61[-2 * v76];
        uint64_t result = memcpy(v62, v61, 2 * (int)((a5 & 0xFFFFFFFE) + 6));
        uint64_t v61 = v62;
        BOOL v59 = __CFADD__(v60++, 1);
      }
      while (!v59);
    }
  }
  uint64_t v63 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v63)
  {
    int v64 = a4;
    int v65 = a6 + a2 - v63 + 4;
    uint64_t v66 = 2 * v14 * (v63 - 1);
    uint64_t v67 = v77 - 6;
    uint64_t v68 = 2 * v14;
    uint64_t v69 = v14 * (2 * (v63 - 1) + 2);
    do
    {
      uint64_t result = memcpy((void *)(v67 + v69), (const void *)(v67 + v66), 2 * (a5 + 7));
      v67 += v68;
      --v65;
    }
    while (v65);
    uint64_t v70 = *(int *)(a7 + 524);
    if ((int)v70 < v64 + a6 + 2)
    {
      int v71 = a6 + v64 - v70 + 2;
      uint64_t v72 = 2 * v76 * (v70 - 1);
      uint64_t v73 = v75 + 2 * (2 * a3 - 2);
      uint64_t v74 = v76 * (2 * (v70 - 1) + 2);
      do
      {
        uint64_t result = memcpy((void *)(v73 + v74), (const void *)(v73 + v72), 2 * (int)((a5 & 0xFFFFFFFE) + 6));
        v73 += 2 * v76;
        --v71;
      }
      while (v71);
    }
  }
  return result;
}

unint64_t sub_1D0C90390(unint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v10 = *(void *)(a7 + 400);
  uint64_t v11 = *(void *)(a7 + 408);
  uint64_t v12 = *(void *)(a7 + 416);
  uint64_t v13 = *(void *)(a7 + 424);
  uint64_t v14 = v13;
  int v75 = a6;
  if ((int)result <= 2)
  {
    if (a2 <= 3) {
      uint64_t v15 = 3;
    }
    else {
      uint64_t v15 = a2;
    }
    int v16 = a2 + a6 + 4;
    LODWORD(v17) = *(_DWORD *)(a7 + 524);
    if (v16 >= (int)v17) {
      int v18 = *(_DWORD *)(a7 + 524);
    }
    else {
      int v18 = a2 + a6 + 4;
    }
    if ((int)v15 - 3 < v18)
    {
      unsigned int v73 = result;
      size_t v19 = (3 - result);
      uint64_t v20 = v15 - 3;
      uint64_t v71 = *(void *)(a7 + 400);
      __int16 v21 = (unsigned __int8 *)(v10 + v12 * (v15 - 3));
      do
      {
        memset(&v21[-v19], *v21, v19);
        LODWORD(v17) = *(_DWORD *)(a7 + 524);
        ++v20;
        if (v16 >= (int)v17) {
          int v22 = *(_DWORD *)(a7 + 524);
        }
        else {
          int v22 = v16;
        }
        v21 += v12;
      }
      while (v20 < v22);
      uint64_t v14 = *(void *)(a7 + 424);
      a6 = v75;
      uint64_t result = v73;
      uint64_t v10 = v71;
    }
    if (a4 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = a4;
    }
    int v24 = a4 + a6 + 2;
    if (v24 >= (int)v17) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = v24;
    }
    if ((int)v23 <= (int)v17)
    {
      uint64_t v25 = v23 - 1;
      uint64_t v26 = v11 + 2 * (v14 >> 1) * v25 - 2;
      do
      {
        if (a3 <= 0)
        {
          __int16 v27 = *(_WORD *)(v11 + 2 * (v14 >> 1) * v25);
          uint64_t v28 = (_WORD *)v26;
          uint64_t v29 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v28-- = v27;
            --v29;
          }
          while (v29);
        }
        ++v25;
        v26 += 2 * (v14 >> 1);
      }
      while (v25 != v17);
    }
  }
  int v30 = result + a5 + 4;
  int v31 = *(_DWORD *)(a7 + 520);
  int v32 = v30 - v31;
  if (v30 > v31)
  {
    if (a2 <= 3) {
      uint64_t v33 = 3;
    }
    else {
      uint64_t v33 = a2;
    }
    int v34 = a2 + a6 + 4;
    LODWORD(v35) = *(_DWORD *)(a7 + 524);
    if (v34 >= (int)v35) {
      int v36 = *(_DWORD *)(a7 + 524);
    }
    else {
      int v36 = a2 + a6 + 4;
    }
    if ((int)v33 - 3 < v36)
    {
      unsigned int v74 = result;
      uint64_t v37 = v33 - 3;
      size_t v38 = v32;
      uint64_t v72 = v10;
      uint64_t v39 = (char *)(v31 + v12 * (v33 - 3) + v10);
      do
      {
        memset(v39, *(v39 - 1), v38);
        ++v37;
        LODWORD(v35) = *(_DWORD *)(a7 + 524);
        if (v34 >= (int)v35) {
          int v40 = *(_DWORD *)(a7 + 524);
        }
        else {
          int v40 = v34;
        }
        v39 += v12;
      }
      while (v37 < v40);
      int v31 = *(_DWORD *)(a7 + 520);
      uint64_t v14 = *(void *)(a7 + 424);
      a6 = v75;
      uint64_t result = v74;
      uint64_t v10 = v72;
    }
    if (a4 <= 1) {
      uint64_t v41 = 1;
    }
    else {
      uint64_t v41 = a4;
    }
    int v42 = a4 + a6 + 2;
    if (v42 >= (int)v35) {
      uint64_t v35 = v35;
    }
    else {
      uint64_t v35 = v42;
    }
    if ((int)v41 <= (int)v35)
    {
      uint64_t v43 = v31 - 2;
      uint64_t v44 = v11 + v43;
      uint64_t v45 = v14 >> 1;
      int v46 = a3 + (a5 >> 1) - (v31 >> 1) + 2;
      uint64_t v47 = v41 - 1;
      uint64_t v48 = v43 + 2 * v45 * v47 + v11 + 2;
      do
      {
        if (v46 >= 1)
        {
          __int16 v49 = *(_WORD *)(v44 + 2 * v45 * v47);
          uint64_t v50 = (_WORD *)v48;
          uint64_t v51 = v46 & ~(v46 >> 31);
          do
          {
            *v50++ = v49;
            --v51;
          }
          while (v51);
        }
        ++v47;
        v48 += 2 * v45;
      }
      while (v47 != v35);
    }
  }
  uint64_t v52 = v10 + (int)result;
  if (a2 <= 2)
  {
    int v53 = a2 - 3;
    int v54 = (char *)(v52 - 3);
    do
    {
      int v55 = &v54[-v12];
      uint64_t result = (unint64_t)memcpy(&v54[-v12], v54, a5 + 7);
      int v54 = v55;
      BOOL v56 = __CFADD__(v53++, 1);
    }
    while (!v56);
    if (a4 <= 0)
    {
      int v57 = a4 - 1;
      uint64_t v58 = (char *)(v11 + 2 * a3 - 2);
      do
      {
        BOOL v59 = &v58[-v13];
        uint64_t result = (unint64_t)memcpy(&v58[-v13], v58, (int)((a5 & 0xFFFFFFFE) + 6));
        uint64_t v58 = v59;
        BOOL v56 = __CFADD__(v57++, 1);
      }
      while (!v56);
    }
  }
  uint64_t v60 = *(int *)(a7 + 524);
  if (a2 + v75 + 4 > (int)v60)
  {
    uint64_t v61 = v12 * (v60 - 1);
    int v62 = v75 + a2 - v60 + 4;
    uint64_t v63 = v52 - 3;
    uint64_t v64 = v12 * v60;
    do
    {
      uint64_t result = (unint64_t)memcpy((void *)(v63 + v64), (const void *)(v63 + v61), a5 + 7);
      v63 += v12;
      --v62;
    }
    while (v62);
    uint64_t v65 = *(int *)(a7 + 524);
    if ((int)v65 < a4 + v75 + 2)
    {
      uint64_t v66 = v13 * (v65 - 1);
      int v67 = 2 * a3 - 2;
      int v68 = v75 + a4 - v65 + 2;
      uint64_t v69 = v13 * v65;
      uint64_t v70 = v11 + v67;
      do
      {
        uint64_t result = (unint64_t)memcpy((void *)(v70 + v69), (const void *)(v70 + v66), (int)((a5 & 0xFFFFFFFE) + 6));
        v70 += v13;
        --v68;
      }
      while (v68);
    }
  }
  return result;
}

void *sub_1D0C90794(void *result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a7 + 400);
  uint64_t v12 = *(void *)(a7 + 408);
  uint64_t v14 = *(void *)(a7 + 416);
  uint64_t v76 = *(void *)(a7 + 424);
  uint64_t v15 = v76 >> 1;
  if ((int)result <= 2)
  {
    if (a2 <= 3) {
      uint64_t v16 = 3;
    }
    else {
      uint64_t v16 = a2;
    }
    int v17 = *(_DWORD *)(a7 + 524);
    LODWORD(v18) = a2 + a6 + 4;
    if ((int)v18 >= v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = v18;
    }
    if ((int)v16 - 3 < (int)v18)
    {
      uint64_t v19 = v16 - 3;
      uint64_t v20 = v13 + 2 * v14 * v19 - 2;
      do
      {
        __int16 v21 = *(_WORD *)(v13 + 2 * v14 * v19);
        int v22 = (_WORD *)v20;
        uint64_t v23 = (3 - result);
        do
        {
          *v22-- = v21;
          --v23;
        }
        while (v23);
        ++v19;
        v20 += 2 * v14;
      }
      while (v19 != v18);
    }
    if (a4 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = a4;
    }
    int v25 = a4 + (a6 >> 1) + 2;
    int v26 = v17 >> 1;
    if (v25 < v17 >> 1) {
      int v26 = a4 + (a6 >> 1) + 2;
    }
    if ((int)v24 <= v26)
    {
      uint64_t v27 = v24 - 1;
      uint64_t v28 = v12 + 4 * v15 * v27 - 4;
      do
      {
        if (a3 <= 0)
        {
          int v29 = *(_DWORD *)(v12 + 4 * v15 * v27);
          int v30 = (_DWORD *)v28;
          uint64_t v31 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v30-- = v29;
            --v31;
          }
          while (v31);
          int v17 = *(_DWORD *)(a7 + 524);
        }
        ++v27;
        int v32 = v17 >> 1;
        if (v25 < v17 >> 1) {
          int v32 = a4 + (a6 >> 1) + 2;
        }
        v28 += 4 * v15;
      }
      while (v27 < v32);
    }
  }
  int v33 = result + a5 + 4;
  uint64_t v34 = *(int *)(a7 + 520);
  if (v33 > (int)v34)
  {
    if (a2 <= 3) {
      uint64_t v35 = 3;
    }
    else {
      uint64_t v35 = a2;
    }
    int v36 = *(_DWORD *)(a7 + 524);
    LODWORD(v37) = a2 + a6 + 4;
    if ((int)v37 >= v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v37;
    }
    if ((int)v35 - 3 < (int)v37)
    {
      uint64_t v38 = v35 - 3;
      uint64_t v39 = 2 * v14 * v38 + 2 * (v34 - 1) + v13 + 2;
      do
      {
        if (v33 != v34)
        {
          __int16 v40 = *(_WORD *)(v13 + 2 * (v34 - 1 + v14 * v38));
          uint64_t v41 = (_WORD *)v39;
          uint64_t v42 = v33 - (int)v34;
          do
          {
            *v41++ = v40;
            --v42;
          }
          while (v42);
        }
        ++v38;
        v39 += 2 * v14;
      }
      while (v38 != v37);
    }
    if (a4 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = a4;
    }
    int v44 = a4 + (a6 >> 1) + 2;
    int v45 = v36 >> 1;
    if (v44 < v36 >> 1) {
      int v45 = a4 + (a6 >> 1) + 2;
    }
    if ((int)v43 <= v45)
    {
      uint64_t v46 = (int)v34 - 2;
      uint64_t v47 = v12 + 2 * v46;
      int v48 = a3 + (a5 >> 1) - ((int)v34 >> 1) + 2;
      uint64_t v49 = v43 - 1;
      uint64_t v50 = 4 * v15 * v49 + 2 * v46 + v12 + 4;
      do
      {
        if (v48 >= 1)
        {
          int v51 = *(_DWORD *)(v47 + 4 * v15 * v49);
          uint64_t v52 = (_DWORD *)v50;
          uint64_t v53 = v48 & ~(v48 >> 31);
          do
          {
            *v52++ = v51;
            --v53;
          }
          while (v53);
          int v36 = *(_DWORD *)(a7 + 524);
        }
        ++v49;
        int v54 = v36 >> 1;
        if (v44 < v36 >> 1) {
          int v54 = a4 + (a6 >> 1) + 2;
        }
        v50 += 4 * v15;
      }
      while (v49 < v54);
    }
  }
  uint64_t v75 = v12;
  uint64_t v77 = v13 + 2 * (int)result;
  if (a2 <= 2)
  {
    int v55 = a2 - 3;
    BOOL v56 = (char *)(v77 - 6);
    size_t v57 = 2 * (a5 + 7);
    do
    {
      uint64_t v58 = &v56[-2 * v14];
      uint64_t result = memcpy(v58, v56, v57);
      BOOL v56 = v58;
      BOOL v59 = __CFADD__(v55++, 1);
    }
    while (!v59);
    if (a4 <= 0)
    {
      int v60 = a4 - 1;
      uint64_t v61 = (char *)(v75 + 2 * (2 * a3 - 2));
      do
      {
        int v62 = &v61[-2 * v76];
        uint64_t result = memcpy(v62, v61, 2 * (int)((a5 & 0xFFFFFFFE) + 6));
        uint64_t v61 = v62;
        BOOL v59 = __CFADD__(v60++, 1);
      }
      while (!v59);
    }
  }
  uint64_t v63 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v63)
  {
    int v64 = a4;
    int v65 = v63 - a2 - 4;
    uint64_t v66 = 2 * v14 * (v63 - 1);
    uint64_t v67 = v77 - 6;
    uint64_t v68 = 2 * v14;
    uint64_t v69 = v14 * (2 * (v63 - 1) + 2);
    do
    {
      uint64_t result = memcpy((void *)(v67 + v69), (const void *)(v67 + v66), 2 * (a5 + 7));
      ++v65;
      v67 += v68;
    }
    while (a6 != v65);
    int v70 = *(int *)(a7 + 524) >> 1;
    if (v70 < v64 + (a6 >> 1) + 2)
    {
      int v71 = (a6 >> 1) + v64 - v70 + 2;
      uint64_t v72 = 2 * v76 * (v70 - 1);
      uint64_t v73 = v75 + 2 * (2 * a3 - 2);
      uint64_t v74 = 2 * v76 * v70;
      do
      {
        uint64_t result = memcpy((void *)(v73 + v74), (const void *)(v73 + v72), 2 * (int)((a5 & 0xFFFFFFFE) + 6));
        v73 += 2 * v76;
        --v71;
      }
      while (v71);
    }
  }
  return result;
}

unint64_t sub_1D0C90BD0(unint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v10 = *(void *)(a7 + 400);
  uint64_t v11 = *(void *)(a7 + 408);
  uint64_t v12 = *(void *)(a7 + 416);
  uint64_t v13 = *(void *)(a7 + 424);
  uint64_t v14 = v13;
  uint64_t v77 = v11;
  if ((int)result <= 2)
  {
    if (a2 <= 3) {
      uint64_t v15 = 3;
    }
    else {
      uint64_t v15 = a2;
    }
    int v16 = a2 + a6 + 4;
    int v17 = *(_DWORD *)(a7 + 524);
    if (v16 >= v17) {
      int v18 = *(_DWORD *)(a7 + 524);
    }
    else {
      int v18 = a2 + a6 + 4;
    }
    if ((int)v15 - 3 < v18)
    {
      int v78 = a2;
      unsigned int v75 = result;
      size_t v19 = (3 - result);
      uint64_t v20 = v15 - 3;
      uint64_t v73 = *(void *)(a7 + 400);
      __int16 v21 = (unsigned __int8 *)(v10 + v12 * (v15 - 3));
      do
      {
        memset(&v21[-v19], *v21, v19);
        int v17 = *(_DWORD *)(a7 + 524);
        ++v20;
        if (v16 >= v17) {
          int v22 = *(_DWORD *)(a7 + 524);
        }
        else {
          int v22 = v16;
        }
        v21 += v12;
      }
      while (v20 < v22);
      uint64_t v14 = *(void *)(a7 + 424);
      a2 = v78;
      uint64_t result = v75;
      uint64_t v10 = v73;
    }
    if (a4 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = a4;
    }
    int v24 = a4 + (a6 >> 1) + 2;
    if (v24 >= v17 >> 1) {
      uint64_t v25 = (v17 >> 1);
    }
    else {
      uint64_t v25 = v24;
    }
    if ((int)v23 <= (int)v25)
    {
      uint64_t v26 = v14 >> 1;
      uint64_t v27 = v23 - 1;
      if (v25 > v23) {
        uint64_t v23 = v25;
      }
      uint64_t v28 = v11 + 2 * v26 * v27 - 2;
      do
      {
        if (a3 <= 0)
        {
          __int16 v29 = *(_WORD *)(v11 + 2 * v26 * v27);
          int v30 = (_WORD *)v28;
          uint64_t v31 = (1 - a3) & ~((1 - a3) >> 31);
          do
          {
            *v30-- = v29;
            --v31;
          }
          while (v31);
        }
        ++v27;
        v28 += 2 * v26;
      }
      while (v27 != v23);
    }
  }
  int v32 = result + a5 + 4;
  int v33 = *(_DWORD *)(a7 + 520);
  int v34 = v32 - v33;
  if (v32 > v33)
  {
    if (a2 <= 3) {
      uint64_t v35 = 3;
    }
    else {
      uint64_t v35 = a2;
    }
    int v36 = a2 + a6 + 4;
    int v37 = *(_DWORD *)(a7 + 524);
    if (v36 >= v37) {
      int v38 = *(_DWORD *)(a7 + 524);
    }
    else {
      int v38 = a2 + a6 + 4;
    }
    if ((int)v35 - 3 < v38)
    {
      unsigned int v76 = result;
      int v79 = a2;
      uint64_t v39 = v35 - 3;
      size_t v40 = v34;
      uint64_t v74 = v10;
      uint64_t v41 = (char *)(v33 + v12 * (v35 - 3) + v10);
      do
      {
        memset(v41, *(v41 - 1), v40);
        ++v39;
        int v37 = *(_DWORD *)(a7 + 524);
        if (v36 >= v37) {
          int v42 = *(_DWORD *)(a7 + 524);
        }
        else {
          int v42 = v36;
        }
        v41 += v12;
      }
      while (v39 < v42);
      int v33 = *(_DWORD *)(a7 + 520);
      uint64_t v14 = *(void *)(a7 + 424);
      a2 = v79;
      uint64_t result = v76;
      uint64_t v10 = v74;
    }
    if (a4 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = a4;
    }
    int v44 = a4 + (a6 >> 1) + 2;
    if (v44 >= v37 >> 1) {
      uint64_t v45 = (v37 >> 1);
    }
    else {
      uint64_t v45 = v44;
    }
    if ((int)v43 <= (int)v45)
    {
      uint64_t v46 = v33 - 2;
      uint64_t v47 = v14 >> 1;
      int v48 = a3 + (a5 >> 1) - (v33 >> 1) + 2;
      uint64_t v49 = v43 - 1;
      if (v45 > v43) {
        uint64_t v43 = v45;
      }
      uint64_t v50 = v46 + 2 * v47 * v49 + v11 + 2;
      do
      {
        if (v48 >= 1)
        {
          __int16 v51 = *(_WORD *)(v11 + v46 + 2 * v47 * v49);
          uint64_t v52 = (_WORD *)v50;
          uint64_t v53 = v48 & ~(v48 >> 31);
          do
          {
            *v52++ = v51;
            --v53;
          }
          while (v53);
        }
        ++v49;
        v50 += 2 * v47;
      }
      while (v49 != v43);
    }
  }
  uint64_t v80 = v10 + (int)result;
  int v54 = a2;
  if (a2 <= 2)
  {
    int v55 = a2 - 3;
    BOOL v56 = (char *)(v80 - 3);
    do
    {
      size_t v57 = &v56[-v12];
      uint64_t result = (unint64_t)memcpy(&v56[-v12], v56, a5 + 7);
      BOOL v56 = v57;
      BOOL v58 = __CFADD__(v55++, 1);
    }
    while (!v58);
    if (a4 <= 0)
    {
      int v59 = a4 - 1;
      int v60 = (char *)(v11 + 2 * a3 - 2);
      do
      {
        uint64_t v61 = &v60[-v13];
        uint64_t result = (unint64_t)memcpy(&v60[-v13], v60, (int)((a5 & 0xFFFFFFFE) + 6));
        int v60 = v61;
        BOOL v58 = __CFADD__(v59++, 1);
      }
      while (!v58);
    }
  }
  uint64_t v62 = *(int *)(a7 + 524);
  if (v54 + a6 + 4 > (int)v62)
  {
    uint64_t v63 = v12 * (v62 - 1);
    int v64 = v62 - v54 - 4;
    uint64_t v65 = v80 - 3;
    uint64_t v66 = v12 * v62;
    do
    {
      uint64_t result = (unint64_t)memcpy((void *)(v65 + v66), (const void *)(v65 + v63), a5 + 7);
      ++v64;
      v65 += v12;
    }
    while (a6 != v64);
    int v67 = *(int *)(a7 + 524) >> 1;
    if (v67 < a4 + (a6 >> 1) + 2)
    {
      uint64_t v68 = v13 * (v67 - 1);
      int v69 = 2 * a3 - 2;
      int v70 = (a6 >> 1) + a4 - v67 + 2;
      uint64_t v71 = v77 + v69;
      uint64_t v72 = v13 * v67;
      do
      {
        uint64_t result = (unint64_t)memcpy((void *)(v71 + v72), (const void *)(v71 + v68), (int)((a5 & 0xFFFFFFFE) + 6));
        v71 += v13;
        --v70;
      }
      while (v70);
    }
  }
  return result;
}

void *sub_1D0C9100C(void *result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(a7 + 400);
  uint64_t v12 = *(void *)(a7 + 416);
  if ((int)result <= 2)
  {
    uint64_t v13 = a2 <= 3 ? 3 : a2;
    LODWORD(v14) = *(_DWORD *)(a7 + 524);
    int v15 = a2 + a6 + 4;
    uint64_t v14 = v15 >= (int)v14 ? v14 : v15;
    if ((int)v13 - 3 < (int)v14)
    {
      uint64_t v16 = v13 - 3;
      uint64_t v17 = v11 + 2 * v12 * v16 - 2;
      do
      {
        __int16 v18 = *(_WORD *)(v11 + 2 * v12 * v16);
        size_t v19 = (_WORD *)v17;
        uint64_t v20 = (3 - result);
        do
        {
          *v19-- = v18;
          --v20;
        }
        while (v20);
        ++v16;
        v17 += 2 * v12;
      }
      while (v16 != v14);
    }
  }
  int v21 = result + a5 + 4;
  uint64_t v22 = *(int *)(a7 + 520);
  if (v21 > (int)v22)
  {
    uint64_t v23 = a2 <= 3 ? 3 : a2;
    LODWORD(v24) = *(_DWORD *)(a7 + 524);
    int v25 = a2 + a6 + 4;
    uint64_t v24 = v25 >= (int)v24 ? v24 : v25;
    if ((int)v23 - 3 < (int)v24)
    {
      uint64_t v26 = v23 - 3;
      uint64_t v27 = 2 * v12 * v26 + 2 * (v22 - 1) + v11 + 2;
      do
      {
        if (v21 != v22)
        {
          __int16 v28 = *(_WORD *)(v11 + 2 * (v22 - 1 + v12 * v26));
          __int16 v29 = (_WORD *)v27;
          uint64_t v30 = v21 - (int)v22;
          do
          {
            *v29++ = v28;
            --v30;
          }
          while (v30);
        }
        ++v26;
        v27 += 2 * v12;
      }
      while (v26 != v24);
    }
  }
  uint64_t v31 = v11 + 2 * (int)result;
  if (a2 <= 2)
  {
    int v32 = a2 - 3;
    int v33 = (char *)(v31 - 6);
    size_t v34 = 2 * (a5 + 7);
    do
    {
      uint64_t v35 = &v33[-2 * v12];
      uint64_t result = memcpy(v35, v33, v34);
      int v33 = v35;
    }
    while (!__CFADD__(v32++, 1));
  }
  uint64_t v37 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v37)
  {
    size_t v38 = 2 * (a5 + 7);
    int v39 = a6 + a2 - v37 + 4;
    uint64_t v40 = 2 * v12 * (v37 - 1);
    uint64_t v41 = v31 - 6;
    uint64_t v42 = v12 * (2 * (v37 - 1) + 2);
    do
    {
      uint64_t result = memcpy((void *)(v41 + v42), (const void *)(v41 + v40), v38);
      v41 += 2 * v12;
      --v39;
    }
    while (v39);
  }
  return result;
}

void *sub_1D0C91214(void *result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  int v10 = (int)result;
  uint64_t v38 = *(void *)(a7 + 400);
  uint64_t v11 = *(void *)(a7 + 416);
  if ((int)result <= 2)
  {
    if (a2 <= 3) {
      uint64_t v12 = 3;
    }
    else {
      uint64_t v12 = a2;
    }
    int v13 = a2 + a6 + 4;
    int v14 = *(_DWORD *)(a7 + 524);
    if (v13 < v14) {
      int v14 = a2 + a6 + 4;
    }
    if ((int)v12 - 3 < v14)
    {
      size_t v15 = (3 - result);
      uint64_t v16 = v12 - 3;
      uint64_t v17 = (unsigned __int8 *)(v38 + v11 * (v12 - 3));
      do
      {
        uint64_t result = memset(&v17[-v15], *v17, v15);
        int v18 = *(_DWORD *)(a7 + 524);
        ++v16;
        if (v13 < v18) {
          int v18 = v13;
        }
        v17 += v11;
      }
      while (v16 < v18);
    }
  }
  int v19 = v10 + a5 + 4;
  uint64_t v20 = *(int *)(a7 + 520);
  if (v19 > (int)v20)
  {
    if (a2 <= 3) {
      uint64_t v21 = 3;
    }
    else {
      uint64_t v21 = a2;
    }
    int v22 = a2 + a6 + 4;
    int v23 = *(_DWORD *)(a7 + 524);
    if (v22 < v23) {
      int v23 = a2 + a6 + 4;
    }
    if ((int)v21 - 3 < v23)
    {
      uint64_t v24 = v21 - 3;
      size_t v25 = v19 - (int)v20;
      uint64_t v26 = (char *)(v20 + v11 * (v21 - 3) + v38);
      do
      {
        uint64_t result = memset(v26, *(v26 - 1), v25);
        ++v24;
        int v27 = *(_DWORD *)(a7 + 524);
        if (v22 < v27) {
          int v27 = a2 + a6 + 4;
        }
        v26 += v11;
      }
      while (v24 < v27);
    }
  }
  uint64_t v28 = v38 + v10;
  if (a2 <= 2)
  {
    int v29 = a2 - 3;
    uint64_t v30 = (char *)(v28 - 3);
    do
    {
      uint64_t v31 = &v30[-v11];
      uint64_t result = memcpy(&v30[-v11], v30, a5 + 7);
      uint64_t v30 = v31;
    }
    while (!__CFADD__(v29++, 1));
  }
  uint64_t v33 = *(int *)(a7 + 524);
  if (a2 + a6 + 4 > (int)v33)
  {
    uint64_t v34 = v11 * (v33 - 1);
    int v35 = a6 + a2 - v33 + 4;
    uint64_t v36 = v28 - 3;
    uint64_t v37 = v11 * v33;
    do
    {
      uint64_t result = memcpy((void *)(v36 + v37), (const void *)(v36 + v34), a5 + 7);
      v36 += v11;
      --v35;
    }
    while (v35);
  }
  return result;
}

void sub_1D0C91410(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  if (v2)
  {
    uint64_t v3 = 120 * v2;
    do
    {
      std::condition_variable::~condition_variable((std::condition_variable *)(a1 + v3 - 56));
      std::mutex::~mutex((std::mutex *)(a1 + v3 - 120));
      v3 -= 120;
    }
    while (v3);
  }
  JUMPOUT(0x1D25F01F0);
}

uint64_t sub_1D0C9148C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 200);
  v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 200);
  v7.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 200));
  uint64_t m = v2;
  if (!*(_DWORD *)(a1 + 196)) {
    goto LABEL_5;
  }
  do
    std::condition_variable::wait((std::condition_variable *)(a1 + 264), &v7);
  while (*(_DWORD *)(a1 + 196));
  if (v7.__owns_)
  {
    uint64_t m = v7.__m_;
LABEL_5:
    std::mutex::unlock(m);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 264));
  std::mutex::~mutex(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4) {
    sub_1D0C4C984(v4);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    sub_1D0C91410(v5);
  }
  return a1;
}

void sub_1D0C9153C(_DWORD *a1, uint64_t a2)
{
  atomic_store(0, a1 + 32);
  atomic_store(0, a1 + 48);
  a1[17] = *(_DWORD *)(a2 + 2124);
  if (*(unsigned __int8 *)(a2 + 2117) > 0x10u) {
    int v2 = 1;
  }
  else {
    int v2 = 2;
  }
  a1[16] = v2;
  operator new[]();
}

void sub_1D0C91710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0C9172C(uint64_t a1, void *a2, signed int *a3)
{
  signed int v3 = *(_DWORD *)(a1 + 68);
  *a2 = 0;
  *a3 = -1;
  while (1)
  {
    while (1)
    {
      signed int v4 = atomic_load((unsigned int *)(a1 + 128));
      signed int v5 = v4;
      signed int v6 = v4;
      signed int v7 = v3 - v4;
      if (v3 > v4)
      {
        int v8 = v3 - 1 - v4;
        uint64_t v9 = 120 * v4;
        signed int v6 = v4;
        while (1)
        {
          int v10 = (atomic_uchar *)(*(void *)a1 + v9 + 114);
          LOBYTE(v10) = atomic_load_explicit(v10, memory_order_acquire);
          if (!v10)
          {
            uint64_t v11 = (atomic_ushort *)(*(void *)a1 + v9 + 112);
            LOWORD(v11) = atomic_load_explicit(v11, memory_order_acquire);
            uint64_t v12 = (atomic_ushort *)(*(void *)a1 + v9 - 8);
            LOWORD(v12) = atomic_load_explicit(v12, memory_order_acquire);
            if ((int)v12 - *(_DWORD *)(a1 + 64) > (int)v11) {
              break;
            }
          }
          int v13 = (atomic_ushort *)(*(void *)a1 + v9 + 112);
          LOWORD(v13) = atomic_load_explicit(v13, memory_order_acquire);
          ++v6;
          if (v13) {
            BOOL v14 = v8 == 0;
          }
          else {
            BOOL v14 = 1;
          }
          --v8;
          v9 += 120;
          if (v14) {
            goto LABEL_13;
          }
        }
      }
      if (v6 < v3) {
        break;
      }
LABEL_13:
      unsigned int v15 = atomic_load((unsigned int *)(a1 + 192));
      if ((int)(v15 + 1) < v7)
      {
        signed int v6 = v4;
        if (v3 > v4)
        {
          for (uint64_t i = 120 * v4 + 114; ; i += 120)
          {
            uint64_t v17 = (atomic_uchar *)(*(void *)a1 + i);
            LOBYTE(v17) = atomic_load_explicit(v17, memory_order_acquire);
            if (!v17) {
              break;
            }
            ++v5;
            if (!--v7) {
              return 0;
            }
          }
          signed int v6 = v5;
        }
        break;
      }
      unsigned int v18 = v15;
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 192), &v18, v15 - 1);
      if (v18 == v15) {
        return 1;
      }
    }
    if (v6 >= v3) {
      return 0;
    }
    char v19 = 0;
    atomic_compare_exchange_strong((atomic_uchar *volatile)(*(void *)a1 + 120 * v6 + 114), (unsigned __int8 *)&v19, 1u);
    if (!v19)
    {
      uint64_t v21 = 0;
      *a2 = *(void *)a1 + 120 * v6;
      *a3 = v6;
      return v21;
    }
  }
}

void sub_1D0C918AC(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 196) = a2;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  sub_1D0D02E20(*(void *)(a1 + 16), a2, a3, a1);
  uint64_t m = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 200);
  v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 200);
  v7.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 200));
  if (!*(_DWORD *)(a1 + 196)) {
    goto LABEL_5;
  }
  do
    std::condition_variable::wait((std::condition_variable *)(a1 + 264), &v7);
  while (*(_DWORD *)(a1 + 196));
  if (v7.__owns_)
  {
    uint64_t m = v7.__m_;
LABEL_5:
    std::mutex::unlock(m);
  }
}

void sub_1D0C91934(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  atomic_fetch_add((atomic_uint *volatile)(a1 + 192), 1u);
  char v4 = sub_1D0C9172C(a1, &v24, (signed int *)&v23 + 1);
  for (uint64_t i = v24; v24; uint64_t i = v24)
  {
    signed int v6 = (atomic_ushort *)&i[1].__m_.__opaque[40];
    LOWORD(v6) = atomic_load_explicit(v6, memory_order_acquire);
    LODWORD(v23) = v6;
    std::unique_lock<std::mutex> v7 = v24;
    int v8 = *(_DWORD *)(a1 + 64) + v6;
    uint64_t v9 = (atomic_ushort *)&v24[-1].__m_.__opaque[48];
    LOWORD(v6) = atomic_load_explicit((atomic_ushort *volatile)&v24[-1].__m_.__opaque[48], memory_order_acquire);
    if (v8 >= (int)v6)
    {
      __lk.__m_ = (std::mutex *)((char *)v7 - 120);
      __lk.__owns_ = 1;
      std::mutex::lock((std::mutex *)((char *)v7 - 120));
      LOWORD(v10) = atomic_load_explicit(v9, memory_order_acquire);
      if (v8 >= v10)
      {
        opaque = (std::condition_variable *)v7[-1].__m_.__opaque;
        do
        {
          std::condition_variable::wait(opaque, &__lk);
          LOWORD(v12) = atomic_load_explicit(v9, memory_order_acquire);
        }
        while (v8 >= v12);
      }
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
    }
    int v22 = HIDWORD(v23);
    while (1)
    {
      int v13 = *(_DWORD *)(a1 + 64);
      int v14 = v13 + v23;
      LOWORD(v13) = atomic_load_explicit(v9, memory_order_acquire);
      if (v14 >= v13) {
        break;
      }
      (*(void (**)(void, uint64_t, uint64_t *, int *))(a1 + 40))(*(void *)(a1 + 32), a2, &v23, &v22);
      if ((int)v23 >= 1)
      {
        unsigned int v15 = v24;
        atomic_store(v23, (unsigned __int16 *)&v24[1].__m_.__opaque[40]);
        std::condition_variable::notify_all((std::condition_variable *)&v15[1]);
      }
      int v16 = v22;
      int v17 = HIDWORD(v23);
      if (v22 > SHIDWORD(v23)) {
        goto LABEL_15;
      }
    }
    int v16 = v22;
    int v17 = HIDWORD(v23);
LABEL_15:
    if (v16 <= v17)
    {
      char v19 = v24;
      atomic_store(0, (unsigned __int8 *)&v24[1].__m_.__opaque[42]);
      std::condition_variable::notify_all((std::condition_variable *)&v19[1]);
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)(a1 + 128), 1u);
      unsigned int v18 = v24;
      atomic_store(2u, (unsigned __int8 *)&v24[1].__m_.__opaque[42]);
      __lk.__m_ = v18;
      __lk.__owns_ = 1;
      std::mutex::lock(v18);
      atomic_store(0xFFFFu, (unsigned __int16 *)&v18[1].__m_.__opaque[40]);
      sub_1D0C615D8((uint64_t)&__lk);
      std::condition_variable::notify_all((std::condition_variable *)&v18[1]);
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
    }
    uint64_t v24 = 0;
    char v4 = sub_1D0C9172C(a1, &v24, (signed int *)&v23 + 1);
  }
  if ((v4 & 1) == 0) {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 192), 0xFFFFFFFF);
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 200);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 200));
  int v20 = *(_DWORD *)(a1 + 196) - 1;
  *(_DWORD *)(a1 + 196) = v20;
  if (!v20)
  {
    uint64_t v21 = *(void (**)(void))(a1 + 56);
    if (v21) {
      v21(*(void *)(a1 + 48));
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 264));
  }
  sub_1D0C615D8((uint64_t)&__lk);
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_1D0C91B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a14) {
    std::mutex::unlock(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0C91B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  signed int v3 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  sub_1D0C4FC20((void *)(a1 + 8), &v4);
  std::mutex::unlock(v3);
}

void sub_1D0C91BE8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0C91BFC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v45 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  *a4 = 0;
  int v44 = (void *)(a1 + 8);
  if (*(void *)(a1 + 48))
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 16) + ((*(void *)(a1 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*(void *)(a1 + 40) & 0x1FFLL));
    *a4 = v8;
    *(void *)(v8 + 992) = 0;
    *(unsigned char *)(v8 + 40) = 0;
    *(_WORD *)(v8 + 42) = 0;
    *(unsigned char *)(v8 + 44) = 0;
    *(_DWORD *)(v8 + 1024) = 0;
    *(_DWORD *)(v8 + 36) = 0;
    *(unsigned char *)(v8 + 548) = 0;
    *(unsigned char *)(v8 + 597) = 0;
    *(unsigned char *)(v8 + 1172) = 0;
    *(_OWORD *)(v8 + 648) = 0u;
    *(unsigned char *)(v8 + 748) = 0;
    *(void *)(v8 + 752) = 0;
    *(_OWORD *)(v8 + 760) = 0u;
    *(void *)(v8 + 832) = 0;
    *(_OWORD *)(v8 + 840) = 0u;
    *(_OWORD *)(v8 + 928) = 0u;
    *(void *)(v8 + 672) = -1;
    *(void *)(v8 + 664) = -1;
    *(unsigned char *)(v8 + 680) = 0;
    *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_1D0D7F1E0);
    sub_1D0C50930(a1 + 8);
    uint64_t v9 = (void *)*a4;
  }
  else
  {
    int v10 = operator new(0x498uLL, MEMORY[0x1E4FBA2D0]);
    if (!v10)
    {
      uint64_t v12 = 4294954392;
      goto LABEL_43;
    }
    uint64_t v9 = v10;
    sub_1D0C647D4((uint64_t)v10);
    *a4 = v11;
  }
  *((unsigned char *)v9 + 432) = a3;
  if (a3)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("VRA not implemented without CoreVideo\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "VRA not implemented without CoreVideo\n");
    }
    uint64_t v12 = 4294954386;
  }
  else
  {
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v42 = a2;
    if (*((unsigned char *)v9 + 528) == 8)
    {
      if (*((unsigned char *)v9 + 529) == 8) {
        int v14 = 1;
      }
      else {
        int v14 = 2;
      }
    }
    else
    {
      int v14 = 2;
    }
    unsigned int v43 = v14;
    int v15 = *(unsigned __int8 *)(v13 + 2117);
    sub_1D0C65DAC();
    int v16 = v43 * v15;
    if ((int)(v43 * v15) >= (int)qword_1EB671A28) {
      int v16 = qword_1EB671A28;
    }
    if (v16 <= 32) {
      uint64_t v17 = 32;
    }
    else {
      uint64_t v17 = v16;
    }
    int v18 = *(_DWORD *)(v13 + 208);
    uint64_t v19 = *(int *)(v13 + 204);
    uint64_t v20 = v17 - 1;
    uint64_t v21 = -v17;
    unint64_t v22 = (v17 - 1 + (v19 + 142) * v43) & -v17;
    if ((v22 & 0x3FF) == 0 && v22 > 0x3FF) {
      uint64_t v24 = v17;
    }
    else {
      uint64_t v24 = 0;
    }
    unint64_t v25 = v24 + v22;
    unint64_t v26 = v17 + (v24 + v22) * (v18 + 143);
    unsigned int v27 = *(unsigned __int8 *)(v13 + 201);
    unint64_t v28 = (2 * (v24 + v22)) >> (v27 < 3);
    unint64_t v29 = v17 + v28 * ((v18 >> (v27 < 2)) + 143);
    if (!*(unsigned char *)(v13 + 201))
    {
      unint64_t v29 = 0;
      unint64_t v28 = 0;
    }
    unint64_t v40 = v28;
    unint64_t v41 = v26;
    unint64_t v30 = v29 + v26;
    uint64_t v31 = *((void *)v9 + 90);
    unint64_t v32 = *((void *)v9 + 91) - v31;
    if (v30 <= v32)
    {
      if (v30 < v32) {
        *((void *)v9 + 91) = v31 + v30;
      }
      unsigned int v33 = v27;
    }
    else
    {
      sub_1D0C4CCE0((unint64_t *)v9 + 90, v30 - v32);
      LODWORD(v19) = *(_DWORD *)(v13 + 204);
      int v18 = *(_DWORD *)(v13 + 208);
      unsigned int v33 = *(unsigned __int8 *)(v13 + 201);
      uint64_t v31 = *((void *)v9 + 90);
    }
    uint64_t v34 = (v17 + 71 * v43 - 1) & -(int)v17;
    *((_DWORD *)v9 + 130) = v19;
    *((_DWORD *)v9 + 131) = v18;
    if (v33) {
      char v35 = 2;
    }
    else {
      char v35 = 1;
    }
    *((unsigned char *)v9 + 530) = v35;
    *((_DWORD *)v9 + 186) = 71;
    uint64_t v36 = v31 + v34 + 71 * v25;
    unint64_t v37 = v31 + v41 + v40 * (0x47u >> (v27 < 2)) + ((unint64_t)(2 * v34) >> (v27 < 3));
    if (!v33) {
      unint64_t v37 = 0;
    }
    unint64_t v38 = v40 / v43;
    if (!v33) {
      unint64_t v38 = 0;
    }
    *((void *)v9 + 52) = v25 / v43;
    *((void *)v9 + 53) = v38;
    *((void *)v9 + 50) = (v20 + v36) & v21;
    *((void *)v9 + 51) = (v20 + v37) & v21;
    *((void *)v9 + 63) = 0;
    *((void *)v9 + 64) = 0;
    uint64_t v12 = (*(uint64_t (**)(void, void, void))(*(void *)*a4 + 40))(*a4, *(void *)(v42 + 8), *(unsigned __int8 *)(v42 + 24));
    if (!v12) {
      goto LABEL_44;
    }
  }
  if (*a4)
  {
    sub_1D0C4FC20(v44, a4);
LABEL_43:
    *a4 = 0;
  }
LABEL_44:
  std::mutex::unlock(v45);
  return v12;
}

void sub_1D0C91FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16)
{
}

void sub_1D0C91FC4(uint64_t a1)
{
  sub_1D0C91FFC(a1);
  JUMPOUT(0x1D25F0230);
}

uint64_t sub_1D0C91FFC(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F1530;
  int v2 = (void **)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 48); i; uint64_t i = *(void *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 16) + ((*(void *)(a1 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*(void *)(a1 + 40) & 0x1FFLL));
    ++*(void *)(a1 + 40);
    *(void *)(a1 + 48) = i - 1;
    sub_1D0C50930((uint64_t)v2);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  signed int v5 = *(void ***)(a1 + 16);
  signed int v6 = *(void ***)(a1 + 24);
  *(void *)(a1 + 48) = 0;
  unint64_t v7 = (char *)v6 - (char *)v5;
  if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
  {
    do
    {
      operator delete(*v5);
      signed int v6 = *(void ***)(a1 + 24);
      signed int v5 = (void **)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v5;
      unint64_t v7 = (char *)v6 - (char *)v5;
    }
    while ((unint64_t)((char *)v6 - (char *)v5) > 0x10);
  }
  unint64_t v8 = v7 >> 3;
  if (v8 == 1)
  {
    uint64_t v9 = 256;
    goto LABEL_11;
  }
  if (v8 == 2)
  {
    uint64_t v9 = 512;
LABEL_11:
    *(void *)(a1 + 40) = v9;
  }
  if (v5 != v6)
  {
    do
    {
      int v10 = *v5++;
      operator delete(v10);
    }
    while (v5 != v6);
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v11 = *(void *)(a1 + 24);
    if (v11 != v12) {
      *(void *)(a1 + 24) = v11 + ((v12 - v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*v2) {
    operator delete(*v2);
  }
  return a1;
}

uint64_t sub_1D0C9215C()
{
  return 0;
}

uint64_t sub_1D0C9216C(uint64_t a1, int a2, void *a3)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a2)
  {
    int valuePtr = 1496395842;
    CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    signed int v6 = (void *)*MEMORY[0x1E4F24D70];
    values = v5;
    keys[0] = v6;
    CFDictionaryRef v7 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFRelease(v5);
  }
  else
  {
    CFDictionaryRef v7 = 0;
  }
  return sub_1D0C401A0(a1, 1, v7, a3);
}

unint64_t sub_1D0C9224C(int a1, size_t a2, CVPixelBufferRef pixelBuffer)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  uint64x2_t v34 = 0u;
  uint64x2_t v35 = 0u;
  CVPixelBufferGetExtendedPixels(pixelBuffer, (size_t *)&v34, &v34.u64[1], (size_t *)&v35, &v35.u64[1]);
  size_t v8 = a1 & ~(a1 >> 31);
  uint64x2_t v34 = vshrq_n_u64(v34, 1uLL);
  uint64x2_t v35 = vshrq_n_u64(v35, 1uLL);
  size_t v9 = Height >> 1;
  if (Height >> 1 >= a2) {
    size_t v10 = a2;
  }
  else {
    size_t v10 = Height >> 1;
  }
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  unint64_t result = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  unint64_t v13 = result >> 1;
  if (v10 > v8)
  {
    int v14 = &BaseAddressOfPlane[2 * v13 * v8];
    int v15 = &v14[(Width & 0xFFFFFFFFFFFFFFFELL) - 2];
    uint64x2_t v16 = v34;
    uint64_t v17 = -v34.i64[0];
    do
    {
      if (v16.i64[0])
      {
        __int16 v18 = *(_WORD *)v14;
        uint64_t v19 = v17;
        do
          *(_WORD *)&v14[2 * v19] = v18;
        while (!__CFADD__(v19++, 1));
      }
      if (v16.i64[1])
      {
        __int16 v21 = *(_WORD *)v15;
        unint64_t v22 = Width & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v23 = v16.i64[1];
        do
        {
          *(_WORD *)&v14[v22] = v21;
          v22 += 2;
          --v23;
        }
        while (v23);
      }
      ++v8;
      v14 += 2 * v13;
      v15 += 2 * v13;
    }
    while (v8 != v10);
  }
  if (a1 < 1)
  {
    uint64_t v24 = v35.i64[0];
    if (v35.i64[0])
    {
      unint64_t v25 = 0;
      unint64_t v26 = &BaseAddressOfPlane[-2 * v35.i64[0]];
      unsigned int v27 = &BaseAddressOfPlane[-2 * v35.i64[0] + -2 * v13];
      do
      {
        unint64_t result = (unint64_t)memcpy(v27, v26, (Width & 0xFFFFFFFFFFFFFFFELL) + 4 * v24);
        uint64_t v24 = v35.i64[0];
        ++v25;
        v27 -= 2 * v13;
      }
      while (v35.i64[0] > v25);
    }
  }
  if (v9 <= a2)
  {
    uint64_t v28 = v35.i64[1];
    if (v35.i64[1])
    {
      unint64_t v29 = 0;
      unint64_t v30 = &BaseAddressOfPlane[-2 * v35.i64[1]];
      uint64_t v31 = &v30[2 * v13 * (v9 - 1)];
      unint64_t v32 = Width & 0xFFFFFFFFFFFFFFFELL;
      unsigned int v33 = &v30[2 * v13 * v9];
      do
      {
        unint64_t result = (unint64_t)memcpy(v33, v31, v32 + 4 * v28);
        uint64_t v28 = v35.i64[1];
        ++v29;
        v33 += 2 * v13;
      }
      while (v35.i64[1] > v29);
    }
  }
  return result;
}

unint64_t sub_1D0C92460(int a1, size_t a2, CVPixelBufferRef pixelBuffer)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  uint64x2_t v34 = 0u;
  uint64x2_t v35 = 0u;
  CVPixelBufferGetExtendedPixels(pixelBuffer, (size_t *)&v34, &v34.u64[1], (size_t *)&v35, &v35.u64[1]);
  size_t v8 = a1 & ~(a1 >> 31);
  uint64x2_t v34 = vshrq_n_u64(v34, 1uLL);
  uint64x2_t v35 = vshrq_n_u64(v35, 1uLL);
  size_t v9 = Width >> 1;
  size_t v10 = Height >> 1;
  if (v10 >= a2) {
    size_t v11 = a2;
  }
  else {
    size_t v11 = v10;
  }
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  unint64_t result = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  unint64_t v14 = result >> 2;
  if (v11 > v8)
  {
    int v15 = &BaseAddressOfPlane[4 * v14 * v8];
    uint64x2_t v16 = &v15[4 * v9 - 4];
    uint64x2_t v17 = v34;
    uint64_t v18 = -v34.i64[0];
    do
    {
      if (v17.i64[0])
      {
        int v19 = *(_DWORD *)v15;
        uint64_t v20 = v18;
        do
          *(_DWORD *)&v15[4 * v20] = v19;
        while (!__CFADD__(v20++, 1));
      }
      if (v17.i64[1])
      {
        int v22 = *(_DWORD *)v16;
        uint64_t v23 = 4 * v9;
        uint64_t v24 = v17.i64[1];
        do
        {
          *(_DWORD *)&v15[v23] = v22;
          v23 += 4;
          --v24;
        }
        while (v24);
      }
      ++v8;
      v15 += 4 * v14;
      v16 += 4 * v14;
    }
    while (v8 != v11);
  }
  if (a1 < 1)
  {
    uint64_t v25 = v35.i64[0];
    if (v35.i64[0])
    {
      unint64_t v26 = 0;
      unsigned int v27 = &BaseAddressOfPlane[-4 * v35.i64[0]];
      uint64_t v28 = &BaseAddressOfPlane[-4 * v35.i64[0] + -4 * v14];
      do
      {
        unint64_t result = (unint64_t)memcpy(v28, v27, 4 * v9 + 8 * v25);
        uint64_t v25 = v35.i64[0];
        ++v26;
        v28 -= 4 * v14;
      }
      while (v35.i64[0] > v26);
    }
  }
  if (v10 <= a2)
  {
    uint64_t v29 = v35.i64[1];
    if (v35.i64[1])
    {
      unint64_t v30 = 0;
      uint64_t v31 = &BaseAddressOfPlane[-4 * v35.i64[1]];
      unint64_t v32 = &v31[4 * v14 * (v10 - 1)];
      unsigned int v33 = &v31[4 * v14 * v10];
      do
      {
        unint64_t result = (unint64_t)memcpy(v33, v32, 4 * v9 + 8 * v29);
        uint64_t v29 = v35.i64[1];
        ++v30;
        v33 += 4 * v14;
      }
      while (v35.i64[1] > v30);
    }
  }
  return result;
}

uint64_t sub_1D0C92678(int a1, size_t a2, CVPixelBufferRef pixelBuffer)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t v8 = a1 & ~(a1 >> 31);
  *(_OWORD *)__leunsigned int n = 0u;
  long long v25 = 0u;
  CVPixelBufferGetExtendedPixels(pixelBuffer, __len, &__len[1], (size_t *)&v25, (size_t *)&v25 + 1);
  if (Height >= a2) {
    size_t v9 = a2;
  }
  else {
    size_t v9 = Height;
  }
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  uint64_t result = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  uint64_t v12 = result;
  BOOL v13 = v9 > v8;
  size_t v14 = v9 - v8;
  if (v13)
  {
    int v15 = &BaseAddressOfPlane[result * v8];
    do
    {
      memset(&v15[-__len[0]], *v15, __len[0]);
      uint64_t result = (uint64_t)memset(&v15[Width], v15[Width - 1], __len[1]);
      v15 += v12;
      --v14;
    }
    while (v14);
  }
  if (a1 < 1)
  {
    uint64_t v16 = v25;
    if ((void)v25)
    {
      unint64_t v17 = 0;
      uint64_t v18 = &BaseAddressOfPlane[-v25];
      int v19 = &BaseAddressOfPlane[-v12 - v25];
      do
      {
        uint64_t result = (uint64_t)memcpy(v19, v18, Width + 2 * v16);
        uint64_t v16 = v25;
        ++v17;
        v19 -= v12;
      }
      while ((unint64_t)v25 > v17);
    }
  }
  if (Height <= a2)
  {
    uint64_t v20 = *((void *)&v25 + 1);
    if (*((void *)&v25 + 1))
    {
      unint64_t v21 = 0;
      int v22 = &BaseAddressOfPlane[v12 * (Height - 1) - *((void *)&v25 + 1)];
      uint64_t v23 = &BaseAddressOfPlane[v12 * Height - *((void *)&v25 + 1)];
      do
      {
        uint64_t result = (uint64_t)memcpy(v23, v22, Width + 2 * v20);
        uint64_t v20 = *((void *)&v25 + 1);
        ++v21;
        v23 += v12;
      }
      while (*((void *)&v25 + 1) > v21);
    }
  }
  return result;
}

unint64_t sub_1D0C92830(int a1, size_t a2, CVPixelBufferRef pixelBuffer)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t v8 = a1 & ~(a1 >> 31);
  long long v33 = 0u;
  long long v34 = 0u;
  CVPixelBufferGetExtendedPixels(pixelBuffer, (size_t *)&v33, (size_t *)&v33 + 1, (size_t *)&v34, (size_t *)&v34 + 1);
  if (Height >= a2) {
    size_t v9 = a2;
  }
  else {
    size_t v9 = Height;
  }
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  unint64_t result = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  unint64_t v12 = result >> 1;
  if (v9 > v8)
  {
    BOOL v13 = &BaseAddressOfPlane[2 * v12 * v8];
    size_t v14 = &v13[2 * Width - 2];
    long long v15 = v33;
    uint64_t v16 = -(uint64_t)v33;
    do
    {
      if ((void)v15)
      {
        __int16 v17 = *(_WORD *)v13;
        uint64_t v18 = v16;
        do
          *(_WORD *)&v13[2 * v18] = v17;
        while (!__CFADD__(v18++, 1));
      }
      if (*((void *)&v15 + 1))
      {
        __int16 v20 = *(_WORD *)v14;
        uint64_t v21 = 2 * Width;
        uint64_t v22 = *((void *)&v15 + 1);
        do
        {
          *(_WORD *)&v13[v21] = v20;
          v21 += 2;
          --v22;
        }
        while (v22);
      }
      ++v8;
      v13 += 2 * v12;
      v14 += 2 * v12;
    }
    while (v8 != v9);
  }
  if (a1 < 1)
  {
    uint64_t v23 = v34;
    if ((void)v34)
    {
      unint64_t v24 = 0;
      long long v25 = &BaseAddressOfPlane[-2 * v34];
      uint64_t v26 = &BaseAddressOfPlane[-2 * v34 + -2 * v12];
      do
      {
        unint64_t result = (unint64_t)memcpy(v26, v25, 2 * Width + 4 * v23);
        uint64_t v23 = v34;
        ++v24;
        v26 -= 2 * v12;
      }
      while ((unint64_t)v34 > v24);
    }
  }
  if (Height <= a2)
  {
    uint64_t v27 = *((void *)&v34 + 1);
    if (*((void *)&v34 + 1))
    {
      unint64_t v28 = 0;
      uint64_t v29 = &BaseAddressOfPlane[-2 * *((void *)&v34 + 1)];
      unint64_t v30 = &v29[2 * v12 * (Height - 1)];
      uint64_t v31 = 2 * Width;
      unint64_t v32 = &v29[2 * Height * v12];
      do
      {
        unint64_t result = (unint64_t)memcpy(v32, v30, v31 + 4 * v27);
        uint64_t v27 = *((void *)&v34 + 1);
        ++v28;
        v32 += 2 * v12;
      }
      while (*((void *)&v34 + 1) > v28);
    }
  }
  return result;
}

uint64_t sub_1D0C92A30(uint64_t a1)
{
  return *(void *)(a1 + 1192);
}

uint64_t sub_1D0C92A38(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!*(unsigned char *)(a1 + 432))
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * a4 + 1200);
    uint64_t v5 = a3;
    goto LABEL_5;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * a4 + 1200);
  uint64_t v5 = a3;
  if (*(void *)(a1 + 400) == *(void *)(a1 + 440))
  {
LABEL_5:
    uint64_t v6 = *(void *)(a1 + 1176);
    return v4(a2, v5, v6);
  }
  uint64_t v6 = *(void *)(a1 + 1192);
  return v4(a2, v5, v6);
}

void sub_1D0C92A80(void *a1)
{
  sub_1D0C92AB8(a1);
  JUMPOUT(0x1D25F0230);
}

uint64_t sub_1D0C92AB8(void *a1)
{
  *a1 = &unk_1F26F12B0;
  sub_1D0C4FBB4((uint64_t)a1);
  return sub_1D0C8DF2C((uint64_t)a1);
}

uint64_t sub_1D0C92B14(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t result = sub_1D0C4FCA8(a1, a2, 0, a3, &v6, 0, 0, 0, 0);
  *a4 = v6;
  return result;
}

uint64_t sub_1D0C92B68(uint64_t a1)
{
  return (**(uint64_t (***)(void))a1)(**(void **)(*(void *)a1 + 8));
}

void sub_1D0C92B78(void *a1)
{
  if (dword_1EB671A40 >= 4)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Stride of %zd bytes is very aligned, this may cause slowdown\n", *a1);
    syslog(28, "Stride of %zd bytes is very aligned, this may cause slowdown\n", *a1);
  }
}

void sub_1D0C92BE8(uint64_t a1)
{
  sub_1D0C92C20(a1);
  JUMPOUT(0x1D25F0230);
}

uint64_t sub_1D0C92C20(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F1070;
  CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a1 + 120));
  return sub_1D0C91FFC(a1);
}

uint64_t sub_1D0C92C80(uint64_t a1, CVBufferRef buffer)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 32);
  if (v4) {
    CVBufferSetAttachments(buffer, v4, kCVAttachmentMode_ShouldPropagate);
  }
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 40);
  if (v5) {
    CVBufferSetAttachments(buffer, v5, kCVAttachmentMode_ShouldNotPropagate);
  }
  return 0;
}

void sub_1D0C92CD0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F17B0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    sub_1D0C4C984(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x1D25F0230);
}

void sub_1D0C92D40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F17B0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    sub_1D0C4C984(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1D0C92D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t))(*(void *)a1 + 32))(a1, a2, 0, 0, a3);
}

uint64_t sub_1D0C92DCC(uint64_t a1, __CVBuffer *a2, int64_t a3, unsigned int a4, int a5)
{
  uint64_t v11 = 0;
  uint64_t v6 = sub_1D0C4FCA8(*(void *)(a1 + 48), a1, 1, *(unsigned __int8 *)(a1 + 25), &v11, a2, a3, a4, a5);
  if (!v6)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1D0C4E4C8(&v10, v7);
  }
  return v6;
}

void sub_1D0C92E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1D0C4C984(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0C92EA8(void *a1)
{
  sub_1D0C92EE0(a1);
  JUMPOUT(0x1D25F0230);
}

void *sub_1D0C92EE0(void *a1)
{
  *a1 = &unk_1F26F1390;
  int v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  signed int v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  CFDictionaryRef v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    sub_1D0C4C984(v4);
  }
  *a1 = &unk_1F26F0FB8;
  CFDictionaryRef v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    sub_1D0C4C984(v5);
  }
  return a1;
}

uint64_t sub_1D0C92F90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1D0C92FC0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F0230);
}

uint64_t sub_1D0C92FFC(int a1, int a2, int a3)
{
  uint64_t v9 = 0;
  long long v10 = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA643330, memory_order_acquire) != -1)
  {
    v12[0] = sub_1D0C93368;
    v12[1] = &v9;
    uint64_t v11 = v12;
    std::__call_once(&qword_1EA643330, &v11, (void (__cdecl *)(void *))sub_1D0C93358);
  }
  sub_1D0C430F0(a1, a2, 0, 0, &v10);
  uint64_t v6 = v10;
  uint64_t v7 = sub_1D0C930E4(a3, v10);
  if (!v7)
  {
    uint64_t v7 = VTEncoderSessionSetPixelBufferAttributes();
    if (!v6) {
      return v7;
    }
    goto LABEL_5;
  }
  if (v6) {
LABEL_5:
  }
    CFRelease(v6);
  return v7;
}

uint64_t sub_1D0C930E4(int a1, __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (Mutable) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 4294954392;
  }
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    if ((a1 & 0xFFFFFFFD) == 1)
    {
      char v7 = 0;
      int v8 = 875704422;
      uint64_t v9 = 1;
      while (1)
      {
        char v10 = v7;
        int valuePtr = v8;
        CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (!v11) {
          break;
        }
        CFNumberRef v12 = v11;
        CFArrayAppendValue(v6, v11);
        CFRelease(v12);
        int v8 = *(_DWORD *)&aF024v024[4 * v9];
        char v7 = 1;
        uint64_t v9 = 2;
        if (v10) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 2020:
          int valuePtr = 1278226488;
          CFNumberRef v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          if (v17)
          {
            CFNumberRef v18 = v17;
            CFArrayAppendValue(v6, v17);
            CFRelease(v18);
LABEL_27:
            CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F24D70], v6);
            goto LABEL_29;
          }
          break;
        case 1892:
          char v19 = 0;
          int v20 = 1278226736;
          uint64_t v21 = 1;
          while (1)
          {
            char v22 = v19;
            int valuePtr = v20;
            CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (!v23) {
              break;
            }
            CFNumberRef v24 = v23;
            CFArrayAppendValue(v6, v23);
            CFRelease(v24);
            int v20 = *(_DWORD *)&a010l800l[4 * v21];
            char v19 = 1;
            uint64_t v21 = 2;
            if (v22) {
              goto LABEL_27;
            }
          }
          break;
        case 2:
          int v13 = 2016686640;
          uint64_t v14 = 4u;
          while (1)
          {
            int valuePtr = v13;
            CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (!v15) {
              break;
            }
            CFNumberRef v16 = v15;
            CFArrayAppendValue(v6, v15);
            CFRelease(v16);
            int v13 = *(_DWORD *)&a024x02fx612vv0[v14];
            v14 += 4;
            if (v14 == 28) {
              goto LABEL_27;
            }
          }
          break;
        default:
          uint64_t v25 = 0;
          int v26 = 2016686640;
          while (1)
          {
            int valuePtr = v26;
            CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (!v27) {
              break;
            }
            CFNumberRef v28 = v27;
            CFArrayAppendValue(v6, v27);
            CFRelease(v28);
            int v26 = *(_DWORD *)&a024x02fx612vf0[v25 + 4];
            v25 += 4;
            if (v25 == 32) {
              goto LABEL_27;
            }
          }
          break;
      }
    }
    uint64_t v5 = 4294954392;
LABEL_29:
    CFRelease(v6);
    return v5;
  }
  return 4294954392;
}

uint64_t sub_1D0C93358(uint64_t (***a1)(void))
{
  return (**a1)(0);
}

void sub_1D0C93368()
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  CFDataRef v1 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)"@", 2, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  CFDataRef v2 = CFDataCreateWithBytesNoCopy(0, byte_1D0D7F7FE, 4, v0);
  CFDataRef v3 = CFDataCreateWithBytesNoCopy(0, byte_1F26F1BA0, 24, v0);
  CFDataRef v4 = CFDataCreateWithBytesNoCopy(0, byte_1F26F1BB8, 24, v0);
  uint64_t v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(0, 0, v5, v6);
  CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(0, 0, v5, v6);
  values[0] = v8;
  values[1] = v9;
  CFArrayRef v10 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E4F1D510]);
  CFArrayRef v11 = v10;
  if (v1) {
    BOOL v12 = v2 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || v3 == 0 || v4 == 0 || Mutable == 0 || v8 == 0 || v9 == 0 || v10 == 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Failed to register 10-bit pixel format; 10-bit decodes will fail.\n",
        0x42uLL,
        1uLL,
        (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Failed to register 10-bit pixel format; 10-bit decodes will fail.\n");
    }
    if (!v1)
    {
      if (!v2) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  else
  {
    CFDataRef value = v2;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24E98], (const void *)*MEMORY[0x1E4F1CFC8]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24EE0], v11);
    int valuePtr = 1496395842;
    CFNumberRef v19 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v19)
    {
      CFNumberRef v20 = v19;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24E90], v19);
      CFRelease(v20);
    }
    uint64_t v21 = (const void *)*MEMORY[0x1E4F24E28];
    CFDataRef v34 = v1;
    CFDictionaryAddValue(v8, (const void *)*MEMORY[0x1E4F24E28], v1);
    char v22 = (const void *)*MEMORY[0x1E4F24EC8];
    CFDictionaryAddValue(v8, (const void *)*MEMORY[0x1E4F24EC8], v3);
    CFNumberRef v23 = (const void *)*MEMORY[0x1E4F24E18];
    int valuePtr = 16;
    CFNumberRef v24 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v24)
    {
      CFNumberRef v25 = v24;
      CFDictionaryAddValue(v8, v23, v24);
      CFRelease(v25);
    }
    int v26 = v21;
    CFDataRef v2 = value;
    CFDictionaryAddValue(v9, v26, value);
    CFDictionaryAddValue(v9, v22, v4);
    int valuePtr = 32;
    CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v27)
    {
      CFNumberRef v28 = v27;
      CFDictionaryAddValue(v9, v23, v27);
      CFRelease(v28);
    }
    int valuePtr = 2;
    CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v29)
    {
      CFNumberRef v30 = v29;
      CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E4F24ED0], v29);
      CFRelease(v30);
    }
    int valuePtr = 2;
    CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDataRef v1 = v34;
    if (v31)
    {
      CFNumberRef v32 = v31;
      CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E4F24EE8], v31);
      CFRelease(v32);
    }
    CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(Mutable, 0x59313042u);
  }
  CFRelease(v1);
  if (v2) {
LABEL_28:
  }
    CFRelease(v2);
LABEL_29:
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t sub_1D0C93784(__CVBuffer *a1)
{
  size_t Height = CVPixelBufferGetHeight(a1);
  sub_1D0C92460(0, Height >> 1, a1);
  return 1;
}

uint64_t sub_1D0C937BC(__CVBuffer *a1)
{
  size_t Height = CVPixelBufferGetHeight(a1);
  sub_1D0C92830(0, Height, a1);
  return 1;
}

uint64_t sub_1D0C937F4(int a1)
{
  sub_1D0C65DAC();
  if ((unint64_t)qword_1EB671A28 >= 0x40) {
    uint64_t v2 = 64;
  }
  else {
    uint64_t v2 = qword_1EB671A28;
  }
  CFDataRef v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFDataRef v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(0, 0, v3, v4);
  char v7 = v6;
  if (Mutable) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t valuePtr = v2;
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v11)
    {
      CFNumberRef v12 = v11;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24C98], v11);
      CFRelease(v12);
    }
    uint64_t valuePtr = v2;
    CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
    if (v13)
    {
      CFNumberRef v14 = v13;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D78], v13);
      CFRelease(v14);
    }
    uint64_t v9 = sub_1D0C930E4(a1, Mutable);
    if (!v9)
    {
      LODWORD(valuePtr) = 0xFFFFFFF;
      CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v15)
      {
        CFNumberRef v16 = v15;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45570], v15);
        CFRelease(v16);
      }
      LODWORD(valuePtr) = 0xFFFFFFF;
      CFNumberRef v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v17)
      {
        CFNumberRef v18 = v17;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45578], v17);
        CFRelease(v18);
      }
      LODWORD(valuePtr) = 2;
      CFNumberRef v19 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v19)
      {
        CFNumberRef v20 = v19;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45580], v19);
        CFRelease(v20);
      }
      LODWORD(valuePtr) = 2;
      CFNumberRef v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v21)
      {
        CFNumberRef v22 = v21;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45588], v21);
        CFRelease(v22);
      }
      LODWORD(valuePtr) = 64;
      CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v23)
      {
        CFNumberRef v24 = v23;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F455A0], v23);
        CFRelease(v24);
      }
      LODWORD(valuePtr) = 16;
      CFNumberRef v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v25)
      {
        CFNumberRef v26 = v25;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45598], v25);
        CFRelease(v26);
      }
      LODWORD(valuePtr) = 0x7FFFFFFF;
      CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v27)
      {
        CFNumberRef v28 = v27;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45568], v27);
        CFRelease(v28);
      }
      LODWORD(valuePtr) = 0x7FFFFFFF;
      CFNumberRef v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      if (v29)
      {
        CFNumberRef v30 = v29;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45558], v29);
        CFRelease(v30);
      }
      uint64_t valuePtr = 0x7FFFFFFFFFFFFFFFLL;
      CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      if (v31)
      {
        CFNumberRef v32 = v31;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45560], v31);
        CFRelease(v32);
      }
      uint64_t valuePtr = v2;
      CFNumberRef v33 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      if (v33)
      {
        CFNumberRef v34 = v33;
        CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45590], v33);
        CFRelease(v34);
      }
      CFDictionaryAddValue(v7, (const void *)*MEMORY[0x1E4F45540], (const void *)*MEMORY[0x1E4F1CFC8]);
      uint64_t v9 = VTTileEncoderSessionSetTileEncodeRequirements();
    }
LABEL_39:
    CFRelease(Mutable);
    if (!v7) {
      return v9;
    }
    goto LABEL_11;
  }
  uint64_t v9 = 4294954392;
  if (Mutable) {
    goto LABEL_39;
  }
  if (v6) {
LABEL_11:
  }
    CFRelease(v7);
  return v9;
}

void sub_1D0C93BEC(void *a1)
{
  sub_1D0C93C24(a1);
  JUMPOUT(0x1D25F0230);
}

void *sub_1D0C93C24(void *a1)
{
  *a1 = &unk_1F26F1410;
  uint64_t v2 = (std::__shared_weak_count *)a1[274];
  if (v2) {
    sub_1D0C4C984(v2);
  }
  for (uint64_t i = 272; i != 208; i -= 2)
  {
    CFDataRef v4 = (std::__shared_weak_count *)a1[i];
    if (v4) {
      sub_1D0C4C984(v4);
    }
  }
  uint64_t v5 = (void *)a1[201];
  if (v5)
  {
    a1[202] = v5;
    operator delete(v5);
  }
  CFMutableDictionaryRef v6 = (std::__shared_weak_count *)a1[199];
  if (v6) {
    sub_1D0C4C984(v6);
  }
  char v7 = (void *)a1[148];
  if (v7)
  {
    a1[149] = v7;
    operator delete(v7);
  }
  BOOL v8 = (void *)a1[76];
  if (v8)
  {
    a1[77] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[72];
  if (v9)
  {
    a1[73] = v9;
    operator delete(v9);
  }
  CFArrayRef v10 = (std::__shared_weak_count *)a1[5];
  if (v10) {
    sub_1D0C4C984(v10);
  }
  CFNumberRef v11 = (std::__shared_weak_count *)a1[3];
  if (v11) {
    sub_1D0C4C984(v11);
  }
  return a1;
}

uint64_t sub_1D0C93CF8(uint64_t result, __int16 *a2, int a3, int a4, int a5, int a6)
{
  CFMutableDictionaryRef v6 = *(void **)(result + 8);
  uint64_t v7 = v6[106];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    BOOL v8 = (unsigned char *)(v6[118] + v6[116] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    uint64_t v9 = a5 >> 2;
    CFArrayRef v10 = &a2[-6 * v7 + 2];
    do
    {
      if (*(unsigned __int8 *)(result + 2224 + (a2[4] & 0xF)) != *(unsigned __int8 *)(result + 2224 + (v10[2] & 0xF))
        || *(unsigned __int8 *)(result + 2240 + (*((unsigned char *)a2 + 9) & 0xF)) != *(unsigned __int8 *)(result
                                                                                                  + 2240
                                                                                                  + (*((unsigned char *)v10 + 5) & 0xF)))
      {
        goto LABEL_16;
      }
      int v11 = *(v10 - 2) - *a2;
      if (v11 < 0) {
        int v11 = *a2 - *(v10 - 2);
      }
      if (v11 > 3) {
        goto LABEL_16;
      }
      int v12 = *(v10 - 1) - a2[1];
      if (v12 < 0) {
        int v12 = a2[1] - *(v10 - 1);
      }
      if (v12 > 3) {
        goto LABEL_16;
      }
      int v13 = *v10 - a2[2];
      if (v13 < 0) {
        int v13 = a2[2] - *v10;
      }
      if (v13 <= 3)
      {
        int v15 = v10[1] - a2[3];
        if (v15 < 0) {
          int v15 = a2[3] - v10[1];
        }
        unsigned int v14 = v15 > 3;
      }
      else
      {
LABEL_16:
        unsigned int v14 = 1;
      }
      if (*v8 > v14) {
        LOBYTE(v14) = *v8;
      }
      *v8++ = v14;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    CFNumberRef v16 = (unsigned char *)(*(void *)(*(void *)(result + 8) + 968)
                  + *(void *)(*(void *)(result + 8) + 936) * ((uint64_t)a3 >> 3)
                  + (a4 >> 2));
    uint64_t v17 = a6 >> 2;
    CFNumberRef v18 = a2 - 3;
    uint64_t v19 = 12 * v7;
    do
    {
      if (*(unsigned __int8 *)(result + 2224 + (a2[4] & 0xF)) != *(unsigned __int8 *)(result + 2224 + (v18[1] & 0xF))
        || *(unsigned __int8 *)(result + 2240 + (*((unsigned char *)a2 + 9) & 0xF)) != *(unsigned __int8 *)(result
                                                                                                  + 2240
                                                                                                  + (*((unsigned char *)v18 + 3) & 0xF)))
      {
        goto LABEL_39;
      }
      int v20 = *(v18 - 3) - *a2;
      if (v20 < 0) {
        int v20 = *a2 - *(v18 - 3);
      }
      if (v20 > 3) {
        goto LABEL_39;
      }
      int v21 = *(v18 - 2) - a2[1];
      if (v21 < 0) {
        int v21 = a2[1] - *(v18 - 2);
      }
      if (v21 > 3) {
        goto LABEL_39;
      }
      int v22 = *(v18 - 1) - a2[2];
      if (v22 < 0) {
        int v22 = a2[2] - *(v18 - 1);
      }
      if (v22 <= 3)
      {
        int v24 = *v18 - a2[3];
        if (v24 < 0) {
          int v24 = a2[3] - *v18;
        }
        unsigned int v23 = v24 > 3;
      }
      else
      {
LABEL_39:
        unsigned int v23 = 1;
      }
      if (*v16 > v23) {
        LOBYTE(v23) = *v16;
      }
      *v16++ = v23;
      CFNumberRef v18 = (__int16 *)((char *)v18 + v19);
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1D0C93F28(uint64_t result, __int16 *a2, int a3, int a4, int a5, int a6)
{
  CFMutableDictionaryRef v6 = *(void **)(result + 8);
  uint64_t v7 = v6[106];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    BOOL v8 = (unsigned char *)(v6[118] + v6[116] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    uint64_t v9 = a5 >> 2;
    CFArrayRef v10 = &a2[-6 * v7];
    do
    {
      if (*(unsigned __int8 *)(result + 2224 + (a2[4] & 0xF)) != *(unsigned __int8 *)(result + 2224 + (v10[4] & 0xF))) {
        goto LABEL_9;
      }
      int v11 = *a2 - *v10;
      if (v11 < 0) {
        int v11 = *v10 - *a2;
      }
      if (v11 <= 3)
      {
        int v13 = a2[1] - v10[1];
        if (v13 < 0) {
          int v13 = v10[1] - a2[1];
        }
        unsigned int v12 = v13 > 3;
      }
      else
      {
LABEL_9:
        unsigned int v12 = 1;
      }
      v10 += 6;
      if (*v8 > v12) {
        LOBYTE(v12) = *v8;
      }
      *v8++ = v12;
      --v9;
    }
    while (v9);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    unsigned int v14 = (unsigned char *)(*(void *)(*(void *)(result + 8) + 968)
                  + *(void *)(*(void *)(result + 8) + 936) * ((uint64_t)a3 >> 3)
                  + (a4 >> 2));
    uint64_t v15 = a6 >> 2;
    CFNumberRef v16 = a2 - 2;
    uint64_t v17 = 12 * v7;
    do
    {
      if (*(unsigned __int8 *)(result + 2224 + (a2[4] & 0xF)) != *(unsigned __int8 *)(result
                                                                                     + 2224
                                                                                     + (*(unsigned char *)v16 & 0xF)))
        goto LABEL_24;
      int v18 = *a2 - *(v16 - 4);
      if (v18 < 0) {
        int v18 = *(v16 - 4) - *a2;
      }
      if (v18 <= 3)
      {
        int v20 = a2[1] - *(v16 - 3);
        if (v20 < 0) {
          int v20 = *(v16 - 3) - a2[1];
        }
        unsigned int v19 = v20 > 3;
      }
      else
      {
LABEL_24:
        unsigned int v19 = 1;
      }
      CFNumberRef v16 = (__int16 *)((char *)v16 + v17);
      if (*v14 > v19) {
        LOBYTE(v19) = *v14;
      }
      *v14++ = v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_1D0C940A4(uint64_t result, __int16 *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v10 = result;
  int v11 = *(void **)(result + 8);
  uint64_t v12 = v11[106];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    int v13 = (unsigned __int8 *)(v11[118] + v11[116] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    uint64_t v14 = a5 >> 2;
    uint64_t v15 = &a2[-6 * v12];
    do
    {
      uint64_t result = sub_1D0C941DC(a2, v15, v10 + 2224);
      unsigned int v16 = *v13;
      if (v16 <= result) {
        LOBYTE(v16) = result;
      }
      *v13++ = v16;
      v15 += 6;
      --v14;
    }
    while (v14);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    uint64_t v17 = (unsigned __int8 *)(*(void *)(*(void *)(v10 + 8) + 968)
                            + *(void *)(*(void *)(v10 + 8) + 936) * ((uint64_t)a3 >> 3)
                            + (a4 >> 2));
    uint64_t v18 = a6 >> 2;
    uint64_t v19 = v10 + 2224;
    int v20 = a2 - 6;
    do
    {
      uint64_t result = sub_1D0C941DC(a2, v20, v19);
      unsigned int v21 = *v17;
      if (v21 <= result) {
        LOBYTE(v21) = result;
      }
      *v17++ = v21;
      v20 += 6 * v12;
      --v18;
    }
    while (v18);
  }
  return result;
}

BOOL sub_1D0C941DC(__int16 *a1, __int16 *a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a3 + (a1[4] & 0xF));
  int v4 = *(unsigned __int8 *)(a3 + 16 + (*((unsigned char *)a1 + 9) & 0xF));
  int v5 = *(unsigned __int8 *)(a3 + (a2[4] & 0xF));
  int v6 = *(unsigned __int8 *)(a3 + 16 + (*((unsigned char *)a2 + 9) & 0xF));
  if (v3 != v5 || v4 != v6)
  {
    if (v3 != v6 || v4 != v5) {
      return 1;
    }
    if (v3 != v4)
    {
      int v9 = a2[2] - *a1;
      if (v9 < 0) {
        int v9 = *a1 - a2[2];
      }
      if (v9 > 3) {
        return 1;
      }
      int v10 = a2[3] - a1[1];
      if (v10 < 0) {
        int v10 = a1[1] - a2[3];
      }
      if (v10 > 3) {
        return 1;
      }
      int v11 = *a2;
LABEL_37:
      int v19 = v11 - a1[2];
      if (v19 < 0) {
        int v19 = -v19;
      }
      if (v19 > 3) {
        return 1;
      }
      int v20 = a2 + 1;
      goto LABEL_52;
    }
LABEL_19:
    int v11 = *a2;
    int v12 = *a1;
    unsigned int v13 = v11 - v12;
    if (v11 - v12 < 0) {
      unsigned int v13 = v12 - v11;
    }
    if (v13 <= 3)
    {
      int v14 = a2[1] - a1[1];
      if (v14 < 0) {
        int v14 = a1[1] - a2[1];
      }
      if (v14 <= 3)
      {
        int v15 = a2[2] - a1[2];
        if (v15 < 0) {
          int v15 = a1[2] - a2[2];
        }
        if (v15 <= 3)
        {
          int v16 = a2[3] - a1[3];
          if (v16 < 0) {
            int v16 = a1[3] - a2[3];
          }
          if (v16 < 4) {
            return 0;
          }
        }
      }
    }
    int v17 = a2[2] - v12;
    if (v17 < 0) {
      int v17 = -v17;
    }
    if (v17 > 3) {
      return 1;
    }
    int v18 = a2[3] - a1[1];
    if (v18 < 0) {
      int v18 = a1[1] - a2[3];
    }
    if (v18 > 3) {
      return 1;
    }
    goto LABEL_37;
  }
  if (v3 == v4) {
    goto LABEL_19;
  }
  int v21 = *a2 - *a1;
  if (v21 < 0) {
    int v21 = *a1 - *a2;
  }
  if (v21 > 3) {
    return 1;
  }
  int v22 = a2[1] - a1[1];
  if (v22 < 0) {
    int v22 = a1[1] - a2[1];
  }
  if (v22 > 3) {
    return 1;
  }
  int v23 = a2[2] - a1[2];
  if (v23 < 0) {
    int v23 = a1[2] - a2[2];
  }
  if (v23 > 3) {
    return 1;
  }
  int v20 = a2 + 3;
LABEL_52:
  int v25 = *v20 - a1[3];
  if (v25 < 0) {
    int v25 = -v25;
  }
  return v25 > 3;
}

uint64_t sub_1D0C94390(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if (*a2 <= *(char *)(a1 + 516)) {
    int v6 = *(char *)(a1 + 516);
  }
  else {
    int v6 = *a2;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    if (v5 > 0)
    {
      uint64_t v130 = a3;
      int v134 = 15;
      int v6 = 15;
      goto LABEL_7;
    }
    goto LABEL_139;
  }
  uint64_t result = 0;
  int v88 = *(char *)(a1 + 517);
  if (v5 > v88) {
    int v88 = *a2;
  }
  if (*(unsigned char *)(a1 + 58)) {
    int v88 = 0;
  }
  int v134 = v88;
  if (*(unsigned char *)(a1 + 58) != 2)
  {
    if (v5 >= 1)
    {
      if (v6 < 16)
      {
        if (v88 < 16)
        {
          uint64_t v130 = a3;
LABEL_7:
          uint64_t v7 = (void *)(a1 + 2200);
          *(void *)&v136[0] = a1 + 2200;
          DWORD2(v136[0]) = 0;
          sub_1D0C8E108((uint64_t)v136);
          BOOL v8 = (void *)(a1 + 2208);
          *(void *)&v136[0] = a1 + 2208;
          DWORD2(v136[0]) = 0;
          sub_1D0C8E108((uint64_t)v136);
          if (v6 >= 1)
          {
            LODWORD(v9) = 0;
            uint64_t v131 = a1 + 1680;
            uint64_t v10 = v6;
            int v132 = v6;
            do
            {
              if ((int)a2[1] >= 1)
              {
                uint64_t v11 = 0;
                uint64_t v12 = (int)v9;
                unsigned int v13 = (std::__shared_weak_count **)(a2 + 8);
                int v14 = (std::__shared_weak_count **)(v131 + 16 * (int)v9);
                do
                {
                  int v16 = *(v13 - 1);
                  int v15 = *v13;
                  if (*v13) {
                    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  int v17 = *v14;
                  *(v14 - 1) = v16;
                  unsigned char *v14 = v15;
                  if (v17) {
                    sub_1D0C4C984(v17);
                  }
                  ++v11;
                  uint64_t v9 = v12 + v11;
                  v13 += 2;
                  v14 += 2;
                }
                while (v11 < (int)a2[1] && v9 < v10);
                int v6 = v132;
              }
              if ((int)a2[2] >= 1 && (int)v9 < v6)
              {
                uint64_t v20 = 0;
                uint64_t v21 = (int)v9;
                int v22 = (std::__shared_weak_count **)(v131 + 16 * (int)v9);
                int v23 = (std::__shared_weak_count **)(a2 + 72);
                do
                {
                  int v25 = *(v23 - 1);
                  int v24 = *v23;
                  if (*v23) {
                    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  CFNumberRef v26 = *v22;
                  *(v22 - 1) = v25;
                  *int v22 = v24;
                  if (v26) {
                    sub_1D0C4C984(v26);
                  }
                  ++v20;
                  uint64_t v9 = v21 + v20;
                  v23 += 2;
                  v22 += 2;
                }
                while (v20 < (int)a2[2] && v9 < v10);
                int v6 = v132;
              }
              if ((int)a2[3] >= 1 && (int)v9 < v6)
              {
                uint64_t v29 = 0;
                uint64_t v30 = (int)v9;
                CFNumberRef v31 = (std::__shared_weak_count **)(v131 + 16 * (int)v9);
                CFNumberRef v32 = (std::__shared_weak_count **)(a2 + 136);
                do
                {
                  CFNumberRef v34 = *(v32 - 1);
                  CFNumberRef v33 = *v32;
                  if (*v32) {
                    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v35 = *v31;
                  *(v31 - 1) = v34;
                  *CFNumberRef v31 = v33;
                  if (v35) {
                    sub_1D0C4C984(v35);
                  }
                  *v7 |= 1 << (v30 + v29++);
                  uint64_t v9 = v30 + v29;
                  v32 += 2;
                  v31 += 2;
                }
                while (v29 < (int)a2[3] && v9 < v10);
                int v6 = v132;
              }
            }
            while ((int)v9 < v6);
          }
          if (v134 >= 1)
          {
            LODWORD(v37) = 0;
            uint64_t v133 = a1 + 1936;
            do
            {
              if ((int)a2[2] >= 1)
              {
                uint64_t v38 = 0;
                uint64_t v39 = (int)v37;
                unint64_t v40 = (std::__shared_weak_count **)(v133 + 16 * (int)v37);
                unint64_t v41 = (std::__shared_weak_count **)(a2 + 72);
                do
                {
                  unsigned int v43 = *(v41 - 1);
                  uint64_t v42 = *v41;
                  if (*v41) {
                    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  int v44 = *v40;
                  *(v40 - 1) = v43;
                  *unint64_t v40 = v42;
                  if (v44) {
                    sub_1D0C4C984(v44);
                  }
                  ++v38;
                  uint64_t v37 = v39 + v38;
                  v41 += 2;
                  v40 += 2;
                }
                while (v38 < (int)a2[2] && v37 < v134);
              }
              if ((int)a2[1] >= 1 && (int)v37 < v134)
              {
                uint64_t v47 = 0;
                uint64_t v48 = (int)v37;
                uint64_t v49 = (std::__shared_weak_count **)(v133 + 16 * (int)v37);
                uint64_t v50 = (std::__shared_weak_count **)(a2 + 8);
                do
                {
                  uint64_t v52 = *(v50 - 1);
                  __int16 v51 = *v50;
                  if (*v50) {
                    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v53 = *v49;
                  *(v49 - 1) = v52;
                  *uint64_t v49 = v51;
                  if (v53) {
                    sub_1D0C4C984(v53);
                  }
                  ++v47;
                  uint64_t v37 = v48 + v47;
                  v50 += 2;
                  v49 += 2;
                }
                while (v47 < (int)a2[1] && v37 < v134);
              }
              if ((int)a2[3] >= 1 && (int)v37 < v134)
              {
                uint64_t v56 = 0;
                uint64_t v57 = (int)v37;
                BOOL v58 = (std::__shared_weak_count **)(v133 + 16 * (int)v37);
                int v59 = (std::__shared_weak_count **)(a2 + 136);
                do
                {
                  uint64_t v61 = *(v59 - 1);
                  int v60 = *v59;
                  if (*v59) {
                    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v62 = *v58;
                  *(v58 - 1) = v61;
                  *BOOL v58 = v60;
                  if (v62) {
                    sub_1D0C4C984(v62);
                  }
                  *v8 |= 1 << (v57 + v56++);
                  uint64_t v37 = v57 + v56;
                  v59 += 2;
                  v58 += 2;
                }
                while (v56 < (int)a2[3] && v37 < v134);
              }
            }
            while ((int)v37 < v134);
          }
          if (*(unsigned char *)(a1 + 48))
          {
            *(_OWORD *)(v130 + 232) = 0u;
            *(_OWORD *)(v130 + 328) = 0u;
            *(_OWORD *)(v130 + 344) = 0u;
            *(_OWORD *)(v130 + 296) = 0u;
            *(_OWORD *)(v130 + 312) = 0u;
            *(_OWORD *)(v130 + 264) = 0u;
            *(_OWORD *)(v130 + 280) = 0u;
            *(_OWORD *)(v130 + 248) = 0u;
            int v64 = (uint64_t *)(v130 + 360);
            *(void *)&v136[0] = v130 + 360;
            DWORD2(v136[0]) = 0;
            sub_1D0C8E108((uint64_t)v136);
            uint64_t v65 = (uint64_t *)(v130 + 368);
            *(void *)&v136[0] = v130 + 368;
            DWORD2(v136[0]) = 0;
            sub_1D0C8E108((uint64_t)v136);
            uint64_t v66 = 0;
            int v67 = (_DWORD *)(v130 + 296);
            uint64_t v68 = a1 + 1928;
            do
            {
              uint64_t v69 = *(void *)(v68 - 256);
              if (v69)
              {
                *(v67 - 16) = *(_DWORD *)(v69 + 1024);
                uint64_t v70 = 1 << v66;
                if ((*v7 & (1 << v66)) != 0) {
                  uint64_t v71 = *v64 | v70;
                }
                else {
                  uint64_t v71 = *v64 & ~v70;
                }
                *int v64 = v71;
              }
              if (*(void *)v68)
              {
                *int v67 = *(_DWORD *)(*(void *)v68 + 1024);
                uint64_t v72 = 1 << v66;
                if ((*v8 & (1 << v66)) != 0) {
                  uint64_t v73 = *v65 | v72;
                }
                else {
                  uint64_t v73 = *v65 & ~v72;
                }
                *uint64_t v65 = v73;
              }
              ++v66;
              ++v67;
              v68 += 16;
            }
            while (v66 != 16);
            char v74 = 0;
            uint64_t v75 = 0;
            char v76 = 1;
            char v77 = 1;
            do
            {
              uint64_t v78 = 0;
              char v79 = v76;
              do
              {
                uint64_t v80 = *(void *)(a1 + (v75 << 8) + 16 * v78 + 1672);
                if (v80)
                {
                  if (v78)
                  {
                    uint64_t v81 = 0;
                    unint64_t v82 = (void *)(a1 + 1672 + (v75 << 8));
                    while (v80 != *v82)
                    {
                      ++v81;
                      v82 += 2;
                      if (v78 == v81) {
                        goto LABEL_112;
                      }
                    }
                    int v83 = *(unsigned __int8 *)(a1 + 16 * v75 + v81 + 2224);
                  }
                  else
                  {
LABEL_112:
                    int v83 = 0;
                  }
                  if (v83 == 0 && (v74 & 1) != 0)
                  {
                    uint64_t v84 = 0;
                    unint64_t v85 = (void *)(a1 + 1672);
                    while (v80 != *v85)
                    {
                      ++v84;
                      v85 += 2;
                      if (v84 == 16)
                      {
                        int v83 = 0;
                        goto LABEL_120;
                      }
                    }
                    int v83 = *(unsigned __int8 *)(a1 + 2224 + v84);
                  }
LABEL_120:
                  if (v83) {
                    LOBYTE(v80) = v83;
                  }
                  else {
                    LOBYTE(v80) = v77;
                  }
                  if (!v83) {
                    ++v77;
                  }
                }
                *(unsigned char *)(a1 + 16 * v75 + v78++ + 2224) = v80;
              }
              while (v78 != 16);
              char v76 = 0;
              char v74 = 1;
              uint64_t v75 = 1;
            }
            while ((v79 & 1) != 0);
            *(unsigned char *)(a1 + 2255) = 0;
            *(unsigned char *)(a1 + 2239) = 0;
          }
          memset(v136, 0, sizeof(v136));
          v135[0] = *(unsigned char *)(a1 + 518);
          if (*(unsigned char *)(a1 + 58)) {
            BOOL v86 = 0;
          }
          else {
            BOOL v86 = *(unsigned char *)(a1 + 519) != 0;
          }
          uint64_t v89 = 0;
          v135[1] = v86;
          char v90 = 1;
          do
          {
            char v91 = v90;
            if (v135[v89])
            {
              if (*(char *)(a1 + v89 + 516) >= 1)
              {
                uint64_t v92 = 0;
                uint64_t v93 = (std::__shared_weak_count **)v136 + 1;
                do
                {
                  uint64_t v94 = a1 + (v89 << 8) + 16 * *(unsigned __int8 *)(a1 + 520 + 16 * v89 + v92);
                  int v95 = *(std::__shared_weak_count **)(v94 + 1672);
                  uint64_t v96 = *(std::__shared_weak_count **)(v94 + 1680);
                  if (v96) {
                    atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  unsigned int v97 = *v93;
                  *(v93 - 1) = v95;
                  uint64_t *v93 = v96;
                  if (v97) {
                    sub_1D0C4C984(v97);
                  }
                  ++v92;
                  v93 += 2;
                }
                while (v92 < *(char *)(a1 + v89 + 516));
              }
              uint64_t v98 = 0;
              uint64_t v99 = a1 + (v89 << 8);
              do
              {
                long long v100 = v136[v98];
                uint64_t v101 = *((void *)&v136[v98] + 1);
                if (v101) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
                }
                CFTypeID v102 = *(std::__shared_weak_count **)(v99 + v98 * 16 + 1680);
                *(_OWORD *)(v99 + v98 * 16 + 1672) = v100;
                if (v102) {
                  sub_1D0C4C984(v102);
                }
                ++v98;
              }
              while (v98 != 16);
            }
            else
            {
              *(_OWORD *)(a1 + 16 * v89 + 520) = xmmword_1D0D7F1F0;
            }
            char v90 = 0;
            uint64_t v89 = 1;
          }
          while ((v91 & 1) != 0);
          *(unsigned char *)(a1 + 659) = 1;
          if (*(char *)(a1 + 516) < 1)
          {
LABEL_165:
            if (*(unsigned char *)(a1 + 58) || *(char *)(a1 + 517) < 1)
            {
LABEL_173:
              for (uint64_t i = 248; i != -8; i -= 16)
              {
                uint64_t v108 = *(std::__shared_weak_count **)((char *)v136 + i);
                if (v108) {
                  sub_1D0C4C984(v108);
                }
              }
              int v109 = *(unsigned __int8 *)(a1 + 58);
              if (!*(unsigned char *)(a1 + 514))
              {
LABEL_187:
                uint64_t v115 = 0;
                char v116 = 1;
                while (*(char *)(a1 + v115 + 516) < 1)
                {
LABEL_192:
                  char v119 = (v109 == 0) & v116;
                  uint64_t v115 = 1;
                  char v116 = 0;
                  if ((v119 & 1) == 0)
                  {
                    if (*(unsigned char *)(a1 + 48))
                    {
                      if (v109 || *(char *)(a1 + 516) < 1) {
                        goto LABEL_195;
                      }
                      uint64_t v126 = 0;
                      char v127 = 1;
                      do
                      {
                        if (*(char *)(a1 + 517) >= 1)
                        {
                          CFTypeID v128 = (void *)(a1 + 1928);
                          uint64_t v129 = *(char *)(a1 + 517);
                          while (*(void *)(a1 + 1672 + 16 * v126) != *v128)
                          {
                            v128 += 2;
                            if (!--v129) {
                              goto LABEL_234;
                            }
                          }
                          char v127 = 0;
                        }
LABEL_234:
                        ++v126;
                      }
                      while (v126 != *(unsigned __int8 *)(a1 + 516));
                      if (v127) {
LABEL_195:
                      }
                        int v120 = 3;
                      else {
                        int v120 = 0;
                      }
                      if (v109 == 1)
                      {
                        if (*(unsigned char *)(a1 + 516) == 1) {
                          int v120 = 4;
                        }
                        else {
                          int v120 = 1;
                        }
                        *(_DWORD *)(a1 + 2256) = v120;
                        CFNumberRef v121 = (uint64_t (**)(uint64_t, __int16 *, int, int, int, int))(a1 + 2264);
                        *(void *)(a1 + 2264) = sub_1D0C940A4;
                        *(void *)(a1 + 2272) = 0;
LABEL_220:
                        CFNumberRef v124 = sub_1D0C93F28;
LABEL_221:
                        *CFNumberRef v121 = v124;
                        goto LABEL_222;
                      }
LABEL_218:
                      *(_DWORD *)(a1 + 2256) = v120;
                      CFNumberRef v121 = (uint64_t (**)(uint64_t, __int16 *, int, int, int, int))(a1 + 2264);
                      *(void *)(a1 + 2264) = sub_1D0C940A4;
                      *(void *)(a1 + 2272) = 0;
                      CFNumberRef v124 = sub_1D0C93CF8;
                      if (v120 == 3) {
                        goto LABEL_221;
                      }
                      if (v120 == 1) {
                        goto LABEL_220;
                      }
LABEL_222:
                      CFTypeID v125 = sub_1D0D59CD4;
                      if (v120 == 4)
                      {
                        CFTypeID v125 = sub_1D0D59F0C;
                      }
                      else if (v120 != 3)
                      {
                        if (v120 != 1) {
                          return 0;
                        }
                        CFTypeID v125 = sub_1D0D5A098;
                      }
                      uint64_t result = 0;
                    }
                    else
                    {
                      if (v109 == 1)
                      {
                        int v122 = *(_DWORD *)(a1 + 2256);
                        int v120 = v122 == 1 || v122 == 4;
                        goto LABEL_218;
                      }
                      uint64_t result = 0;
                      *(_DWORD *)(a1 + 2256) = 0;
                      CFTypeID v125 = sub_1D0C940A4;
                    }
                    *(void *)(a1 + 2264) = v125;
                    *(void *)(a1 + 2272) = 0;
                    return result;
                  }
                }
                uint64_t v117 = *(unsigned __int8 *)(a1 + v115 + 516);
                char v118 = (void *)(a1 + 1672 + (v115 << 8));
                while (*v118)
                {
                  v118 += 2;
                  if (!--v117) {
                    goto LABEL_192;
                  }
                }
                if (dword_1EB671A40 >= 3)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "L%d found too few reference frames\n", v115);
                  syslog(27, "L%d found too few reference frames\n", v115);
                }
                return 4294954387;
              }
              if (*(unsigned char *)(a1 + 58)) {
                uint64_t v110 = 0;
              }
              else {
                uint64_t v110 = *(unsigned __int8 *)(a1 + 554) ^ 1;
              }
              uint64_t v111 = a1 + (v110 << 8) + 16 * *(unsigned __int8 *)(a1 + 555);
              uint64_t v112 = *(void *)(v111 + 1672);
              uint64_t v113 = *(void *)(v111 + 1680);
              if (v113) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v113 + 8), 1uLL, memory_order_relaxed);
              }
              *(void *)(a1 + 2184) = v112;
              char v114 = *(std::__shared_weak_count **)(a1 + 2192);
              *(void *)(a1 + 2192) = v113;
              if (v114)
              {
                sub_1D0C4C984(v114);
                uint64_t v112 = *(void *)(a1 + 2184);
              }
              if (v112)
              {
                int v109 = *(unsigned __int8 *)(a1 + 58);
                goto LABEL_187;
              }
              if (dword_1EB671A40 >= 3)
              {
                fwrite("Temporal MVP enabled but pointing to invalid reference\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                syslog(27, "Temporal MVP enabled but pointing to invalid reference\n");
              }
              return 4294954387;
            }
            uint64_t v105 = *(unsigned __int8 *)(a1 + 517);
            uint64_t v106 = a1 + 1928;
            while (!*(void *)v106 || *(_DWORD *)(*(void *)v106 + 1024) <= *(_DWORD *)(a1 + 640))
            {
              v106 += 16;
              if (!--v105) {
                goto LABEL_173;
              }
            }
          }
          else
          {
            uint64_t v103 = *(unsigned __int8 *)(a1 + 516);
            uint64_t v104 = a1 + 1672;
            while (!*(void *)v104 || *(_DWORD *)(*(void *)v104 + 1024) <= *(_DWORD *)(a1 + 640))
            {
              v104 += 16;
              if (!--v103) {
                goto LABEL_165;
              }
            }
          }
          *(unsigned char *)(a1 + 659) = 0;
          goto LABEL_173;
        }
        if (dword_1EB671A40 < 3) {
          return 4294954387;
        }
      }
      else if (dword_1EB671A40 < 3)
      {
        return 4294954387;
      }
      fwrite("Too many active refs!\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Too many active refs!\n");
      return 4294954387;
    }
LABEL_139:
    if (dword_1EB671A40 >= 3)
    {
      fwrite("No active refs but we expect them\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "No active refs but we expect them\n");
    }
    return 4294954387;
  }
  return result;
}

void sub_1D0C94F44(uint64_t a1, int a2)
{
  signed int v2 = a2 + 8;
  int v3 = (atomic_uint *)(a1 + 1032);
  if ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < a2 + 8)
  {
    v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    v5.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    if ((int)atomic_load_explicit(v3, memory_order_acquire) < v2)
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &v5);
      while ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < v2);
    }
    if (v5.__owns_) {
      std::mutex::unlock(v5.__m_);
    }
  }
}

uint64_t sub_1D0C94FD8(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  int v12 = -3 - a6;
  int v13 = *(_DWORD *)(a2 + 520);
  unsigned int v14 = v13 + 2;
  int v15 = a4 + ((__int16)a3 >> 2);
  if (v15 < v13 + 2) {
    unsigned int v14 = a4 + ((__int16)a3 >> 2);
  }
  if (v15 <= v12) {
    uint64_t v16 = v12;
  }
  else {
    uint64_t v16 = v14;
  }
  int v17 = -3 - a7;
  int v18 = *(_DWORD *)(a2 + 524);
  unsigned int v19 = v18 + 2;
  int v20 = a5 + (a3 >> 18);
  if (v20 < v18 + 2) {
    unsigned int v19 = a5 + (a3 >> 18);
  }
  if (v20 <= v17) {
    uint64_t v21 = v17;
  }
  else {
    uint64_t v21 = v19;
  }
  char v22 = *(unsigned char *)(a2 + 531);
  *a8 = *(void *)(a2 + 400) + ((*(void *)(a2 + 416) * (int)v21 + (int)v16) << v22);
  int v23 = ((__int16)a3 >> 3) + (a4 >> 1);
  if (v23 >= v13 >> 1) {
    unsigned int v24 = v13 >> 1;
  }
  else {
    unsigned int v24 = ((__int16)a3 >> 3) + (a4 >> 1);
  }
  if (v23 <= ~((int)a6 >> 1)) {
    uint64_t v25 = ~((int)a6 >> 1);
  }
  else {
    uint64_t v25 = v24;
  }
  int v26 = (a5 >> 1) + (a3 >> 19);
  if (v26 >= v18 >> 1) {
    unsigned int v27 = v18 >> 1;
  }
  else {
    unsigned int v27 = (a5 >> 1) + (a3 >> 19);
  }
  if (v26 <= ~((int)a7 >> 1)) {
    uint64_t v28 = ~((int)a7 >> 1);
  }
  else {
    uint64_t v28 = v27;
  }
  if (*(unsigned char *)(*(void *)(a1 + 16) + 201)) {
    *a9 = *(void *)(a2 + 408) + ((*(void *)(a2 + 424) * (int)v28 + 2 * (int)v25) << v22);
  }
  sub_1D0C94F44(a2, v21 + a7);
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1F26F1BE8[2 * *(unsigned __int8 *)(a2 + 532)]
                                                                                               + *(unsigned __int8 *)(a2 + 531));
  return v29(v16, v21, v25, v28, a6, a7, a2);
}

uint64_t sub_1D0C95154(uint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t *a7, uint64_t *a8)
{
  if ((a6 & 0xF) != 0) {
    uint64_t v8 = *(void *)(*(void *)(result + 8) + 856)
  }
       + 12 * (*(void *)(*(void *)(result + 8) + 848) * ((uint64_t)(a5 + a3) >> 2) + ((a2 - 1) >> 2));
  else {
    uint64_t v8 = 0;
  }
  char v9 = *(unsigned char *)(*(void *)(result + 16) + 2112);
  *a7 = v8;
  if ((a6 & 0xF0) != 0) {
    uint64_t v10 = *(void *)(*(void *)(result + 8) + 856)
  }
        + 12 * (*(void *)(*(void *)(result + 8) + 848) * ((uint64_t)(a3 + a5 - 1) >> 2) + ((a2 - 1) >> 2));
  else {
    uint64_t v10 = 0;
  }
  char v11 = v9 - 1;
  a7[1] = v10;
  if ((a6 & 0x1E000) != 0) {
    uint64_t v12 = *(void *)(*(void *)(result + 8) + 856)
  }
        + 12 * (*(void *)(*(void *)(result + 8) + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a4 + a2) >> 2));
  else {
    uint64_t v12 = 0;
  }
  int v13 = 1 << v11;
  *a8 = v12;
  if ((a6 & 0x1E00) != 0) {
    uint64_t v14 = *(void *)(*(void *)(result + 8) + 856)
  }
        + 12 * (*(void *)(*(void *)(result + 8) + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a4 + a2 - v13) >> 2));
  else {
    uint64_t v14 = 0;
  }
  a8[1] = v14;
  if ((a6 & 0x100) != 0) {
    uint64_t v15 = *(void *)(*(void *)(result + 8) + 856)
  }
        + 12 * (*(void *)(*(void *)(result + 8) + 848) * ((uint64_t)(a3 - 1) >> 2) + ((a2 - v13) >> 2));
  else {
    uint64_t v15 = 0;
  }
  a8[2] = v15;
  return result;
}

uint64_t sub_1D0C952B0(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a4 && *(unsigned char *)(a4 + 10) != 1)
  {
    unsigned int v6 = a2;
    if (!*(unsigned char *)(a1 + 659)) {
      unsigned int v6 = *(unsigned __int8 *)(a1 + 554);
    }
    uint64_t v7 = v6;
    unsigned int v8 = *(unsigned char *)(a4 + v6 + 8) & 0xF;
    if (v8 == 15)
    {
      uint64_t v7 = 1 - v6;
      unsigned int v8 = *(unsigned char *)(a4 + v7 + 8) & 0xF;
    }
    uint64_t v9 = (1 << *(unsigned char *)(a1 + 16 * a2 + a3 + 520)) & *(void *)(*(void *)(a1 + 8) + 8 * a2 + 360);
    char v10 = (v9 != 0) ^ (*(void *)(*(void *)(a1 + 2184) + 8 * v7 + 360) >> v8);
    if ((v10 & 1) == 0)
    {
      __int32 v11 = *(_DWORD *)(a4 + 4 * v7);
      *(_DWORD *)a5 = v11;
      if (!v9)
      {
        uint64_t v12 = *(void *)(a1 + 2184);
        int v13 = *(_DWORD *)(v12 + (v7 << 6) + 4 * v8 + 232);
        int v14 = *(_DWORD *)(a1 + 640)
            - *(_DWORD *)(*(void *)(a1 + ((unint64_t)a2 << 8) + 16 * a3 + 1672) + 1024);
        int v15 = *(_DWORD *)(v12 + 1024) - v13;
        if (v15 && v15 != v14)
        {
          if (v15 >= 127) {
            int v15 = 127;
          }
          if (v15 <= -128) {
            int v15 = -128;
          }
          if (v14 >= 127) {
            int v14 = 127;
          }
          if (v14 <= -128) {
            int v14 = -128;
          }
          if (v15)
          {
            if (v15 >= 0) {
              unsigned int v17 = v15;
            }
            else {
              unsigned int v17 = -v15;
            }
            int v15 = (__int16)((__int16)((v17 >> 1) + 0x4000) / (__int16)v15);
          }
          signed int v18 = (v15 * v14 + 32) >> 6;
          if (v18 >= 4095) {
            signed int v18 = 4095;
          }
          if (v18 <= -4096) {
            signed int v18 = -4096;
          }
          v19.i32[0] = v11 << 16;
          v19.i32[1] = v11;
          int32x2_t v20 = vmul_s32(vdup_n_s32(v18), vshr_n_s32(v19, 0x10uLL));
          int32x2_t v21 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v20), (int32x2_t)0x7F0000007FLL), 8uLL);
          int32x2_t v22 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v20), (int8x8_t)vneg_s32(v21), (int8x8_t)v21), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          *(_WORD *)(a5 + 2) = v22.i16[2];
          *(_WORD *)a5 = v22.i16[0];
        }
      }
    }
    char v5 = v10 ^ 1;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_1D0C95464(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6, int a7, uint64_t a8, char a9)
{
  uint64_t v9 = *(void *)(a1 + 2184);
  if (*(unsigned char *)(v9 + 712)) {
    return 0;
  }
  int v10 = a7;
  int v17 = a5 + a3;
  if ((int)atomic_load_explicit((atomic_uint *volatile)(v9 + 1032), memory_order_acquire) < a5 + a3)
  {
    uint64_t v18 = a8;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v9 + 1040);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v9 + 1040));
    while ((int)atomic_load_explicit((atomic_uint *volatile)(v9 + 1032), memory_order_acquire) < v17)
      std::condition_variable::wait((std::condition_variable *)(v9 + 1104), &__lk);
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    a8 = v18;
    int v10 = a7;
  }
  char v19 = *(unsigned char *)(*(void *)(a1 + 16) + 2113);
  int v20 = a3 >> v19;
  int v21 = v17 >> v19;
  uint64_t v22 = *(void *)(a1 + 2184);
  if (v20 == v21 && a4 + a2 < *(_DWORD *)(v22 + 520) && v17 < *(_DWORD *)(v22 + 524))
  {
    uint64_t v23 = *(void *)(v22 + 848) * (int)((v17 >> 2) & 0xFFFFFFFC) + (int)(((a4 + a2) >> 2) & 0xFFFFFFFC);
    if (a9) {
      uint64_t v24 = *(void *)(v22 + 880) + 16 * v23;
    }
    else {
      uint64_t v24 = *(void *)(v22 + 856) + 12 * v23;
    }
    uint64_t v25 = a8;
    if (sub_1D0C952B0(a1, a6, v10, v24, a8)) {
      return 1;
    }
    uint64_t v22 = *(void *)(a1 + 2184);
    a8 = v25;
  }
  int v27 = a2 + (a4 >> 1);
  if (v27 >= *(_DWORD *)(v22 + 520)) {
    return 0;
  }
  int v28 = a3 + (a5 >> 1);
  if (v28 >= *(_DWORD *)(v22 + 524)) {
    return 0;
  }
  uint64_t v29 = *(void *)(v22 + 848) * (int)((v28 >> 2) & 0xFFFFFFFC) + (int)((v27 >> 2) & 0xFFFFFFFC);
  if (a9) {
    uint64_t v30 = *(void *)(v22 + 880) + 16 * v29;
  }
  else {
    uint64_t v30 = *(void *)(v22 + 856) + 12 * v29;
  }
  return sub_1D0C952B0(a1, a6, v10, v30, a8);
}

uint64_t sub_1D0C95660(uint64_t result, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8, void *a9, uint64_t a10, char a11)
{
  uint64_t v14 = a4;
  unint64_t v15 = result + 1672 + ((unint64_t)a4 << 8);
  uint64_t v16 = a4 == 0;
  uint64_t v17 = result + 1672 + (v16 << 8);
  uint64_t v18 = 1 - a4;
  uint64_t v19 = *(void *)(result + 8);
  unint64_t v20 = *(void *)(v19 + 8 * a4 + 360);
  uint64_t v21 = (1 << *(unsigned char *)(result + 16 * a4 + a5 + 520)) & v20;
  if (*a9 && *(unsigned __int8 *)(*a9 + 10) > 1u)
  {
    BOOL v22 = 1;
  }
  else
  {
    uint64_t v23 = a9[1];
    if (v23) {
      BOOL v22 = *(unsigned __int8 *)(v23 + 10) > 1u;
    }
    else {
      BOOL v22 = 0;
    }
  }
  uint64_t v24 = 0;
  unint64_t v25 = v15 + 16 * a5;
  int v26 = *(_DWORD *)(*(void *)v25 + 1024);
  *((unsigned char *)a8 + 48) = 0;
  char v27 = 1;
  do
  {
    char v28 = v27;
    uint64_t v29 = a9[v24];
    if (v29 && *(unsigned __int8 *)(v29 + 10) >= 2u)
    {
      unint64_t v30 = (unint64_t)*(unsigned __int8 *)(v29 + v14 + 8) >> 4;
      if (v30 != 15 && v26 == *(_DWORD *)(*(void *)(v15 + 16 * v30) + 1024))
      {
        LOBYTE(v32) = 0;
        LODWORD(v39) = 1;
        *((unsigned char *)a8 + 48) = 1;
        int v43 = *(_DWORD *)(v29 + 4 * v14);
LABEL_30:
        *a8 = v43;
        goto LABEL_57;
      }
      unint64_t v31 = (unint64_t)*(unsigned __int8 *)(v29 + v18 + 8) >> 4;
      if (v31 != 15 && v26 == *(_DWORD *)(*(void *)(v17 + 16 * v31) + 1024))
      {
        LOBYTE(v32) = 0;
        LODWORD(v39) = 1;
        *((unsigned char *)a8 + 48) = 1;
        int v43 = *(_DWORD *)(v29 + 4 * v18);
        goto LABEL_30;
      }
    }
    char v27 = 0;
    uint64_t v24 = 1;
  }
  while ((v28 & 1) != 0);
  uint64_t v32 = 0;
  CFNumberRef v33 = (void *)(v19 + 8 * v18 + 360);
  char v34 = 1;
  while (1)
  {
    char v35 = v34;
    uint64_t v36 = a9[v32];
    if (v36)
    {
      if (*(unsigned __int8 *)(v36 + 10) >= 2u)
      {
        unsigned int v37 = *(unsigned __int8 *)(v36 + v14 + 8);
        if (v37 <= 0xEF && (((v21 != 0) ^ (v20 >> (v37 & 0xF))) & 1) == 0)
        {
          uint64_t v40 = v14;
          uint64_t v41 = v14;
          goto LABEL_26;
        }
        unsigned int v38 = *(unsigned __int8 *)(v36 + v18 + 8);
        if (v38 <= 0xEF && (((v21 != 0) ^ (*v33 >> (v38 & 0xF))) & 1) == 0) {
          break;
        }
      }
    }
    char v34 = 0;
    uint64_t v32 = 1;
    if ((v35 & 1) == 0)
    {
      LODWORD(v39) = 0;
      goto LABEL_57;
    }
  }
  uint64_t v40 = 1 - a4;
  uint64_t v41 = a4 == 0;
LABEL_26:
  LODWORD(v39) = 1;
  *((unsigned char *)a8 + 48) = 1;
  __int32 v42 = *(_DWORD *)(v36 + 4 * v40);
  *a8 = v42;
  if (v21)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    int v44 = *(_DWORD *)(*(void *)(result + (v41 << 8) + (*(unsigned char *)(a9[v32] + v40 + 8) & 0xF0) + 1672) + 1024);
    int v45 = *(_DWORD *)(result + 640);
    int v46 = *(_DWORD *)(*(void *)v25 + 1024);
    int v47 = v45 - v44;
    if (v45 == v44 || v46 == v44)
    {
      LOBYTE(v32) = 0;
    }
    else
    {
      int v49 = v45 - v46;
      if (v47 >= 127) {
        int v47 = 127;
      }
      if (v47 <= -128) {
        int v47 = -128;
      }
      if (v49 >= 127) {
        int v49 = 127;
      }
      if (v49 <= -128) {
        int v49 = -128;
      }
      if (v47)
      {
        if (v47 >= 0) {
          unsigned int v50 = v47;
        }
        else {
          unsigned int v50 = -v47;
        }
        int v51 = (__int16)((__int16)((v50 >> 1) + 0x4000) / (__int16)v47);
      }
      else
      {
        int v51 = 0;
      }
      LOBYTE(v32) = 0;
      signed int v52 = (v51 * v49 + 32) >> 6;
      if (v52 >= 4095) {
        signed int v52 = 4095;
      }
      if (v52 <= -4096) {
        signed int v52 = -4096;
      }
      v53.i32[0] = v42 << 16;
      v53.i32[1] = v42;
      int32x2_t v54 = vmul_s32(vdup_n_s32(v52), vshr_n_s32(v53, 0x10uLL));
      int32x2_t v55 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v54), (int32x2_t)0x7F0000007FLL), 8uLL);
      int32x2_t v56 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v54), (int8x8_t)vneg_s32(v55), (int8x8_t)v55), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
      *((_WORD *)a8 + 1) = v56.i16[2];
      *(_WORD *)a8 = v56.i16[0];
    }
    LODWORD(v39) = 1;
  }
LABEL_57:
  uint64_t v57 = 0;
  while (1)
  {
    uint64_t v58 = *(void *)(a10 + v57);
    if (v58 && *(unsigned __int8 *)(v58 + 10) >= 2u)
    {
      unint64_t v59 = (unint64_t)*(unsigned __int8 *)(v58 + v14 + 8) >> 4;
      if (v59 != 15 && v26 == *(_DWORD *)(*(void *)(v15 + 16 * v59) + 1024))
      {
        uint64_t v66 = v14;
        if (v32) {
          goto LABEL_80;
        }
        int v67 = *a8;
        int v68 = *(_DWORD *)(v58 + 4 * v14);
        uint64_t v66 = v14;
        goto LABEL_79;
      }
      unint64_t v60 = (unint64_t)*(unsigned __int8 *)(v58 + v18 + 8) >> 4;
      if (v60 != 15 && v26 == *(_DWORD *)(*(void *)(v17 + 16 * v60) + 1024)) {
        break;
      }
    }
    v57 += 8;
    if (v57 == 24) {
      goto LABEL_65;
    }
  }
  uint64_t v66 = 1 - a4;
  if (v32) {
    goto LABEL_80;
  }
  int v67 = *a8;
  int v68 = *(_DWORD *)(v58 + 4 * v18);
  uint64_t v66 = 1 - a4;
LABEL_79:
  if (v67 == v68) {
    goto LABEL_65;
  }
LABEL_80:
  *((unsigned char *)a8 + 48) = v39 + 1;
  a8[v39] = *(_DWORD *)(v58 + 4 * v66);
  LODWORD(v39) = v39 + 1;
LABEL_65:
  if (!v22)
  {
    uint64_t v61 = 0;
    while (1)
    {
      uint64_t v62 = *(void *)(a10 + 8 * v61);
      if (v62 && *(unsigned __int8 *)(v62 + 10) >= 2u)
      {
        uint64_t v63 = *(void *)(result + 8);
        unsigned int v64 = *(unsigned __int8 *)(v62 + v14 + 8);
        if (v64 <= 0xEF && (((v21 != 0) ^ (*(void *)(v63 + 8 * v14 + 360) >> (v64 & 0xF))) & 1) == 0)
        {
          uint64_t v16 = v14;
          goto LABEL_83;
        }
        unsigned int v65 = *(unsigned __int8 *)(v62 + v18 + 8);
        if (v65 <= 0xEF && (((v21 != 0) ^ (*(void *)(v63 + 8 * v18 + 360) >> (v65 & 0xF))) & 1) == 0) {
          break;
        }
      }
      if (++v61 == 3) {
        goto LABEL_108;
      }
    }
    uint64_t v14 = 1 - a4;
LABEL_83:
    a8[v39] = *(_DWORD *)(v62 + 4 * v14);
    int v69 = *(_DWORD *)(*(void *)(result + (v16 << 8) + (*(unsigned char *)(*(void *)(a10 + 8 * v61) + v14 + 8) & 0xF0) + 1672)
                    + 1024);
    int v70 = *(_DWORD *)(*(void *)v25 + 1024);
    uint64_t v39 = *((unsigned __int8 *)a8 + 48);
    if (v69 != v70 && v21 == 0)
    {
      int v72 = *(_DWORD *)(result + 640);
      int v73 = v72 - v69;
      if (v73)
      {
        int v74 = v72 - v70;
        if (v73 >= 127) {
          int v73 = 127;
        }
        if (v73 <= -128) {
          int v73 = -128;
        }
        if (v74 >= 127) {
          int v74 = 127;
        }
        if (v74 <= -128) {
          int v74 = -128;
        }
        if (v73 >= 0) {
          unsigned int v75 = v73;
        }
        else {
          unsigned int v75 = -v73;
        }
        signed int v76 = ((__int16)((__int16)((v75 >> 1) + 0x4000) / (__int16)v73) * v74 + 32) >> 6;
        if (v76 >= 4095) {
          signed int v76 = 4095;
        }
        if (v76 <= -4096) {
          signed int v76 = -4096;
        }
        char v77 = (__int16 *)&a8[v39];
        v78.i32[0] = *v77;
        v78.i32[1] = v77[1];
        int32x2_t v79 = vmul_s32(vdup_n_s32(v76), v78);
        int32x2_t v80 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v79), (int32x2_t)0x7F0000007FLL), 8uLL);
        int32x2_t v81 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v79), (int8x8_t)vneg_s32(v80), (int8x8_t)v80), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
        *char v77 = v81.i16[0];
        v77[1] = v81.i16[2];
        LODWORD(v39) = *((unsigned __int8 *)a8 + 48);
      }
    }
    if (!v39 || *a8 != a8[1])
    {
      LOBYTE(v39) = v39 + 1;
      *((unsigned char *)a8 + 48) = v39;
    }
  }
LABEL_108:
  if (*(unsigned char *)(result + 514))
  {
    if (v39 > 1u) {
      return result;
    }
    uint64_t result = sub_1D0C95464(result, a2, a3, a6, a7, a4, a5, (uint64_t)&a8[v39], a11);
    LOBYTE(v39) = *((unsigned char *)a8 + 48) + result;
    *((unsigned char *)a8 + 48) = v39;
  }
  if (v39 <= 1u)
  {
    uint64_t v82 = v39;
    do
    {
      uint64_t v83 = v82;
      *((unsigned char *)a8 + 48) = v82 + 1;
      a8[v82] = 0;
      uint64_t v82 = 1;
    }
    while (!v83);
  }
  return result;
}

uint64_t sub_1D0C95CB8(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, unsigned int a7, uint64_t *a8, uint64_t *a9, char a10)
{
  uint64_t v16 = (unsigned char *)result;
  *(unsigned char *)(a6 + 60) = 0;
  uint64_t v17 = a8[1];
  if (v17 && *(unsigned __int8 *)(v17 + 10) >= 2u && (a4 >= a5 || ((a5 - 1) & a2) <= 0))
  {
    int v56 = *(unsigned __int8 *)(v17 + 8) >> 4;
    int v57 = *(unsigned __int8 *)(v17 + 9) >> 4;
    *(void *)(a6 + 4) = *(void *)v17;
    *(unsigned char *)a6 = v56;
    *(unsigned char *)(a6 + 1) = v57;
    *(unsigned char *)(a6 + 60) = 1;
    if (a7 == 1) {
      return result;
    }
  }
  else
  {
    a8[1] = 0;
  }
  uint64_t v18 = a9[1];
  if (v18 && *(unsigned __int8 *)(v18 + 10) >= 2u && (a4 <= a5 || ((a4 - 1) & a3) <= 0))
  {
    uint64_t v58 = a8[1];
    if (!v58
      || *(unsigned __int8 *)(v58 + 10) < 2u
      || (*(unsigned __int8 *)(v18 + 8) ^ *(unsigned __int8 *)(v58 + 8)) > 0xF
      || *(_DWORD *)v58 != *(_DWORD *)v18
      || (*(unsigned __int8 *)(v18 + 9) ^ *(unsigned __int8 *)(v58 + 9)) > 0xF
      || *(_DWORD *)(v58 + 4) != *(_DWORD *)(v18 + 4))
    {
      int v59 = *(unsigned __int8 *)(v18 + 8) >> 4;
      int v60 = *(unsigned __int8 *)(v18 + 9) >> 4;
      uint64_t v61 = a6 + 12 * *(unsigned __int8 *)(a6 + 60);
      *(void *)(v61 + 4) = *(void *)v18;
      *(unsigned char *)uint64_t v61 = v59;
      unsigned __int8 v62 = *(unsigned char *)(a6 + 60);
      *(unsigned char *)(a6 + 12 * v62++ + 1) = v60;
      *(unsigned char *)(a6 + 60) = v62;
      if (a7 == v62) {
        return result;
      }
    }
  }
  else
  {
    a9[1] = 0;
  }
  uint64_t v19 = *a9;
  if (!*a9) {
    goto LABEL_96;
  }
  if (*(unsigned __int8 *)(v19 + 10) < 2u) {
    goto LABEL_96;
  }
  uint64_t v20 = a9[1];
  if (v20)
  {
    if (*(unsigned __int8 *)(v20 + 10) >= 2u
      && (*(unsigned __int8 *)(v19 + 8) ^ *(unsigned __int8 *)(v20 + 8)) <= 0xF
      && *(_DWORD *)v20 == *(_DWORD *)v19
      && (*(unsigned __int8 *)(v19 + 9) ^ *(unsigned __int8 *)(v20 + 9)) <= 0xF
      && *(_DWORD *)(v20 + 4) == *(_DWORD *)(v19 + 4))
    {
      goto LABEL_96;
    }
  }
  int v21 = *(unsigned __int8 *)(v19 + 8) >> 4;
  int v22 = *(unsigned __int8 *)(v19 + 9) >> 4;
  uint64_t v23 = a6 + 12 * *(unsigned __int8 *)(a6 + 60);
  *(void *)(v23 + 4) = *(void *)v19;
  *(unsigned char *)uint64_t v23 = v21;
  unsigned __int8 v24 = *(unsigned char *)(a6 + 60);
  *(unsigned char *)(a6 + 12 * v24++ + 1) = v22;
  *(unsigned char *)(a6 + 60) = v24;
  if (a7 != v24)
  {
LABEL_96:
    uint64_t v25 = *a8;
    if (!*a8
      || *(unsigned __int8 *)(v25 + 10) < 2u
      || (uint64_t v26 = a8[1]) != 0
      && *(unsigned __int8 *)(v26 + 10) >= 2u
      && (*(unsigned __int8 *)(v25 + 8) ^ *(unsigned __int8 *)(v26 + 8)) <= 0xF
      && *(_DWORD *)v26 == *(_DWORD *)v25
      && (*(unsigned __int8 *)(v25 + 9) ^ *(unsigned __int8 *)(v26 + 9)) <= 0xF
      && *(_DWORD *)(v26 + 4) == *(_DWORD *)(v25 + 4))
    {
      unsigned __int8 v27 = *(unsigned char *)(a6 + 60);
    }
    else
    {
      int v43 = *(unsigned __int8 *)(v25 + 8) >> 4;
      int v44 = *(unsigned __int8 *)(v25 + 9) >> 4;
      uint64_t v45 = a6 + 12 * *(unsigned __int8 *)(a6 + 60);
      *(void *)(v45 + 4) = *(void *)v25;
      *(unsigned char *)uint64_t v45 = v43;
      unsigned __int8 v46 = *(unsigned char *)(a6 + 60);
      *(unsigned char *)(a6 + 12 * v46 + 1) = v44;
      unsigned __int8 v27 = v46 + 1;
      *(unsigned char *)(a6 + 60) = v27;
      if (a7 == v27) {
        return result;
      }
    }
    if (v27 > 3u) {
      goto LABEL_97;
    }
    uint64_t v28 = a9[2];
    if (!v28) {
      goto LABEL_97;
    }
    if (*(unsigned __int8 *)(v28 + 10) < 2u) {
      goto LABEL_97;
    }
    uint64_t v29 = a8[1];
    if (v29)
    {
      if (*(unsigned __int8 *)(v29 + 10) >= 2u
        && (*(unsigned __int8 *)(v28 + 8) ^ *(unsigned __int8 *)(v29 + 8)) <= 0xF
        && *(_DWORD *)v29 == *(_DWORD *)v28
        && (*(unsigned __int8 *)(v28 + 9) ^ *(unsigned __int8 *)(v29 + 9)) <= 0xF
        && *(_DWORD *)(v29 + 4) == *(_DWORD *)(v28 + 4))
      {
        goto LABEL_97;
      }
    }
    uint64_t v30 = a9[1];
    if (v30)
    {
      if (*(unsigned __int8 *)(v30 + 10) >= 2u
        && (*(unsigned __int8 *)(v28 + 8) ^ *(unsigned __int8 *)(v30 + 8)) <= 0xF
        && *(_DWORD *)v30 == *(_DWORD *)v28
        && (*(unsigned __int8 *)(v28 + 9) ^ *(unsigned __int8 *)(v30 + 9)) <= 0xF
        && *(_DWORD *)(v30 + 4) == *(_DWORD *)(v28 + 4))
      {
        goto LABEL_97;
      }
    }
    int v31 = *(unsigned __int8 *)(v28 + 8) >> 4;
    int v32 = *(unsigned __int8 *)(v28 + 9) >> 4;
    uint64_t v33 = a6 + 12 * v27;
    *(void *)(v33 + 4) = *(void *)v28;
    *(unsigned char *)uint64_t v33 = v31;
    LOBYTE(v31) = *(unsigned char *)(a6 + 60);
    *(unsigned char *)(a6 + 12 * v31 + 1) = v32;
    LOBYTE(v31) = v31 + 1;
    *(unsigned char *)(a6 + 60) = v31;
    if (a7 != v31)
    {
LABEL_97:
      if (!*(unsigned char *)(result + 514)) {
        goto LABEL_98;
      }
      int v34 = sub_1D0C95464(result, a2, a3, a4, a5, 0, 0, (uint64_t)&v69, a10);
      uint64_t result = 0;
      if (!v16[58]) {
        uint64_t result = sub_1D0C95464((uint64_t)v16, a2, a3, a4, a5, 1u, 0, (uint64_t)&v68, a10);
      }
      if ((v34 | result) != 1) {
        goto LABEL_98;
      }
      int v36 = v68;
      int v35 = v69;
      if (v34)
      {
        char v37 = 0;
      }
      else
      {
        int v35 = 0;
        char v37 = 15;
      }
      if (result)
      {
        char v38 = 0;
      }
      else
      {
        int v36 = 0;
        char v38 = 15;
      }
      uint64_t v39 = a6 + 12 * *(unsigned __int8 *)(a6 + 60);
      *(_DWORD *)(v39 + 4) = v35;
      *(_DWORD *)(v39 + 8) = v36;
      *(unsigned char *)uint64_t v39 = v37;
      unsigned __int8 v40 = *(unsigned char *)(a6 + 60);
      *(unsigned char *)(a6 + 12 * v40++ + 1) = v38;
      *(unsigned char *)(a6 + 60) = v40;
      if (a7 != v40)
      {
LABEL_98:
        if (v16[58])
        {
          char v41 = v16[516];
          unsigned __int8 v42 = *(unsigned char *)(a6 + 60);
        }
        else
        {
          LODWORD(v47) = *(unsigned __int8 *)(a6 + 60);
          uint64_t v48 = ((v47 - 1) * v47);
          if ((int)v48 <= 0)
          {
            char v41 = v16[516];
          }
          else
          {
            int v49 = &byte_1D0D7F868;
            unsigned int v50 = &byte_1D0D7F85C;
            do
            {
              if (v47 > 4u) {
                break;
              }
              uint64_t v51 = *(char *)(a6 + 12 * *v50);
              if (v51 != 15)
              {
                uint64_t v52 = *(char *)(a6 + 12 * *v49 + 1);
                if (v52 != 15)
                {
                  uint64_t result = a6 + 12 * *v49;
                  int v53 = *(_DWORD *)(a6 + 12 * *v50 + 4);
                  int v54 = *(_DWORD *)(result + 8);
                  if (v53 != v54
                    || (uint64_t result = *(unsigned int *)(*(void *)&v16[16 * v51 + 1672] + 1024),
                        result != *(_DWORD *)(*(void *)&v16[16 * v52 + 1928] + 1024)))
                  {
                    uint64_t v47 = a6 + 12 * v47;
                    *(_DWORD *)(v47 + 4) = v53;
                    *(unsigned char *)uint64_t v47 = v51;
                    LOBYTE(v47) = *(unsigned char *)(a6 + 60);
                    uint64_t v55 = a6 + 12 * v47;
                    *(_DWORD *)(v55 + 8) = v54;
                    *(unsigned char *)(v55 + 1) = v52;
                    LOBYTE(v47) = v47 + 1;
                    *(unsigned char *)(a6 + 60) = v47;
                    if (a7 == v47) {
                      return result;
                    }
                  }
                }
              }
              ++v49;
              ++v50;
              --v48;
            }
            while (v48);
            char v41 = v16[516];
            unsigned __int8 v42 = v47;
            if (v16[58]) {
              goto LABEL_85;
            }
          }
          if ((char)v16[517] < v41) {
            char v41 = v16[517];
          }
          unsigned __int8 v42 = v47;
        }
LABEL_85:
        if (a7 > v42)
        {
          int v63 = 0;
          do
          {
            uint64_t v64 = a6 + 12 * v42;
            *(_DWORD *)(v64 + 4) = 0;
            *(_DWORD *)(v64 + 8) = 0;
            if (v63 >= v41) {
              char v65 = 0;
            }
            else {
              char v65 = v63;
            }
            *(unsigned char *)uint64_t v64 = v65;
            char v66 = *(unsigned char *)(a6 + 60);
            if (v16[58]) {
              char v67 = 15;
            }
            else {
              char v67 = *(unsigned char *)(a6 + 12 * *(unsigned __int8 *)(a6 + 60));
            }
            *(unsigned char *)(a6 + 12 * *(unsigned __int8 *)(a6 + 60) + 1) = v67;
            ++v63;
            unsigned __int8 v42 = v66 + 1;
            *(unsigned char *)(a6 + 60) = v42;
          }
          while (a7 > v42);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D0C96330(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned __int8 a8)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  sub_1D0C95154(a1, a2, a3, a4, a5, a6, &v30, &v27);
  __int16 v15 = *(_WORD *)(*(void *)(a1 + 32) + 1610);
  if (v15)
  {
    char v16 = v15 + 2;
    int v17 = a2 >> (v15 + 2);
    int v18 = (a2 - 1) >> v16;
    int v19 = a3 >> v16;
    if (v17 == v18 && v19 == (a5 + a3) >> v16) {
      uint64_t v30 = 0;
    }
    if (v17 == v18 && v19 == (a3 - 1 + a5) >> v16) {
      uint64_t v31 = 0;
    }
    int v22 = (a3 - 1) >> v16;
    if (v17 == (a4 + a2) >> v16 && v19 == v22) {
      uint64_t v27 = 0;
    }
    if (v17 == (a2 - 1 + a4) >> v16 && v19 == v22) {
      uint64_t v28 = 0;
    }
    if (v17 == v18 && v19 == v22) {
      uint64_t v29 = 0;
    }
  }
  return sub_1D0C95CB8(a1, a2, a3, a4, a5, a7, a8, &v30, &v27, 0);
}

uint64_t sub_1D0C96494(uint64_t result, FILE *__stream)
{
  uint64_t v3 = result;
  if (dword_1EB671A40 >= 6)
  {
    uint64_t result = fwrite("=========== Slice ===========\n", 0x1EuLL, 1uLL, __stream);
    if (dword_1EB671A40 >= 6)
    {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "first_slice_in_pic_flag", *(unsigned __int8 *)(v3 + 48));
      if (dword_1EB671A40 >= 6)
      {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "no_output_of_prior_pics_flag", *(unsigned __int8 *)(v3 + 49));
        if (dword_1EB671A40 >= 6) {
          uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_pic_parameter_set_id", *(unsigned __int8 *)(v3 + 50));
        }
      }
    }
  }
  if (!*(unsigned char *)(v3 + 48))
  {
    int v4 = dword_1EB671A40;
    if (*(unsigned char *)(*(void *)(v3 + 32) + 2)) {
      BOOL v5 = dword_1EB671A40 < 6;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "dependent_slice_flag", *(unsigned __int8 *)(v3 + 56));
      int v4 = dword_1EB671A40;
    }
    if (v4 >= 6) {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_segment_address", *(int *)(v3 + 52));
    }
  }
  if (!*(unsigned char *)(v3 + 56))
  {
    int v8 = dword_1EB671A40;
    if (*(unsigned char *)(*(void *)(v3 + 32) + 4))
    {
      unint64_t v9 = *(unsigned __int8 *)(*(void *)(v3 + 32) + 4) + 1;
      do
      {
        if (v8 >= 6)
        {
          uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "slice_reserved_flag", ((unint64_t)*(unsigned __int8 *)(v3 + 57) >> (v9 - 2)) & 1);
          int v8 = dword_1EB671A40;
        }
        --v9;
      }
      while (v9 > 1);
    }
    if (v8 <= 5)
    {
      uint64_t v11 = v3 + 16;
    }
    else
    {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_type", *(unsigned __int8 *)(v3 + 58));
      int v8 = dword_1EB671A40;
      if (*(unsigned char *)(*(void *)(v3 + 32) + 3)) {
        BOOL v10 = dword_1EB671A40 < 6;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10)
      {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "pic_output_flag", *(unsigned __int8 *)(v3 + 59));
        int v8 = dword_1EB671A40;
      }
      uint64_t v11 = v3 + 16;
      if (*(unsigned char *)(*(void *)(v3 + 16) + 202)) {
        BOOL v12 = v8 < 6;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "colour_plane_id", *(unsigned __int8 *)(v3 + 60));
        int v8 = dword_1EB671A40;
      }
    }
    if (*(unsigned char *)(v3 + 632))
    {
LABEL_96:
      if (*(unsigned char *)(*(void *)v11 + 277)) {
        BOOL v28 = v8 < 6;
      }
      else {
        BOOL v28 = 1;
      }
      if (!v28)
      {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_sao_luma_flag", *(unsigned __int8 *)(v3 + 512));
        int v8 = dword_1EB671A40;
        if (dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_sao_chroma_flag", *(unsigned __int8 *)(v3 + 513));
          int v8 = dword_1EB671A40;
        }
      }
      if (*(unsigned __int8 *)(v3 + 58) > 1u) {
        goto LABEL_151;
      }
      if (v8 >= 6)
      {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_active_override_flag", *(unsigned __int8 *)(v3 + 515));
        int v8 = dword_1EB671A40;
        if (*(unsigned char *)(v3 + 515))
        {
          if (dword_1EB671A40 >= 6)
          {
            uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_active", *(char *)(v3 + 516));
            int v8 = dword_1EB671A40;
            if (!*(unsigned char *)(v3 + 58) && dword_1EB671A40 >= 6)
            {
              uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_active", *(char *)(v3 + 517));
              int v8 = dword_1EB671A40;
            }
          }
        }
      }
      if (*(unsigned char *)(*(void *)(v3 + 32) + 1608))
      {
        if (v8 >= 6) {
          uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "ref_pic_list_modification_flag_l0", *(unsigned __int8 *)(v3 + 518));
        }
        if (*(unsigned char *)(v3 + 518))
        {
          int v29 = *(char *)(v3 + 516);
          int v8 = dword_1EB671A40;
          if (v29 >= 1)
          {
            uint64_t v30 = 0;
            do
            {
              if (v8 >= 6)
              {
                uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "list_entry", *(unsigned __int8 *)(v3 + 520 + v30));
                int v8 = dword_1EB671A40;
                LOBYTE(v29) = *(unsigned char *)(v3 + 516);
              }
              ++v30;
            }
            while (v30 < (char)v29);
          }
        }
        else
        {
          int v8 = dword_1EB671A40;
        }
        if (!*(unsigned char *)(v3 + 58))
        {
          if (v8 >= 6) {
            uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "ref_pic_list_modification_flag_l1", *(unsigned __int8 *)(v3 + 519));
          }
          if (*(unsigned char *)(v3 + 519))
          {
            int v38 = *(char *)(v3 + 517);
            int v8 = dword_1EB671A40;
            if (v38 >= 1)
            {
              uint64_t v39 = 0;
              do
              {
                if (v8 >= 6)
                {
                  uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "list_entry", *(unsigned __int8 *)(v3 + 536 + v39));
                  int v8 = dword_1EB671A40;
                  LOBYTE(v38) = *(unsigned char *)(v3 + 517);
                }
                ++v39;
              }
              while (v39 < (char)v38);
            }
          }
          else
          {
            int v8 = dword_1EB671A40;
          }
        }
      }
      if (*(unsigned char *)(v3 + 58)) {
        BOOL v31 = 1;
      }
      else {
        BOOL v31 = v8 < 6;
      }
      if (!v31)
      {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "mvd_l1_zero_flag", *(unsigned __int8 *)(v3 + 552));
        int v8 = dword_1EB671A40;
      }
      if (*(unsigned char *)(*(void *)(v3 + 32) + 6)) {
        BOOL v32 = v8 < 6;
      }
      else {
        BOOL v32 = 1;
      }
      if (!v32) {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "cabac_init_flag", *(unsigned __int8 *)(v3 + 553));
      }
      if (*(unsigned char *)(v3 + 514))
      {
        int v33 = dword_1EB671A40;
        if (!*(unsigned char *)(v3 + 58) && dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "collocated_from_l0_flag", *(unsigned __int8 *)(v3 + 554));
          int v33 = dword_1EB671A40;
        }
        if (*(unsigned char *)(v3 + 554))
        {
          if (*(char *)(v3 + 516) < 2 || v33 <= 5) {
            goto LABEL_142;
          }
LABEL_141:
          uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "collocated_ref_idx", *(unsigned __int8 *)(v3 + 555));
          goto LABEL_142;
        }
        if (*(char *)(v3 + 517) >= 2 && v33 >= 6) {
          goto LABEL_141;
        }
      }
LABEL_142:
      uint64_t v34 = *(void *)(v3 + 32);
      if (*(unsigned char *)(v34 + 17) && *(unsigned char *)(v3 + 58) == 1 || *(unsigned char *)(v34 + 18) && !*(unsigned char *)(v3 + 58))
      {
        if (dword_1EB671A40 < 6) {
          goto LABEL_159;
        }
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "luma_log2_weight_denom", *(unsigned __int8 *)(v3 + 556));
        if (dword_1EB671A40 < 6) {
          goto LABEL_159;
        }
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "delta_chroma_log2_weight_denom", *(char *)(v3 + 557));
      }
      if (dword_1EB671A40 < 6) {
        goto LABEL_159;
      }
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "five_minus_max_num_merge_cand", *(unsigned __int8 *)(v3 + 558));
      int v8 = dword_1EB671A40;
LABEL_151:
      if (v8 >= 6)
      {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_qp_delta", *(char *)(v3 + 559));
        int v35 = dword_1EB671A40;
        int v36 = *(unsigned char **)(v3 + 32);
        if (v36[16] && dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_cb_qp_offset", *(char *)(v3 + 560));
          if (dword_1EB671A40 < 6) {
            goto LABEL_159;
          }
          uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_cr_qp_offset", *(char *)(v3 + 561));
          int v35 = dword_1EB671A40;
          int v36 = *(unsigned char **)(v3 + 32);
        }
        if (!v36[1617] || v35 < 6)
        {
LABEL_160:
          if (v36[29])
          {
            if (dword_1EB671A40 >= 6)
            {
              uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "deblocking_filter_override_flag", *(unsigned __int8 *)(v3 + 563));
              if (*(unsigned char *)(v3 + 563))
              {
                if (dword_1EB671A40 >= 6)
                {
                  uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_deblocking_filter_disabled_flag", *(unsigned __int8 *)(v3 + 564));
                  if (!*(unsigned char *)(v3 + 564) && dword_1EB671A40 >= 6)
                  {
                    uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_beta_offset_div2", *(char *)(v3 + 565));
                    if (dword_1EB671A40 >= 6) {
                      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_tc_offset_div2", *(char *)(v3 + 566));
                    }
                  }
                }
              }
            }
          }
          if (!*(unsigned char *)(*(void *)(v3 + 32) + 28)) {
            goto LABEL_15;
          }
          if (*(unsigned char *)(v3 + 512))
          {
            int v37 = dword_1EB671A40;
          }
          else
          {
            int v37 = dword_1EB671A40;
            if (!*(unsigned char *)(v3 + 513))
            {
              if (*(unsigned char *)(v3 + 564) || dword_1EB671A40 <= 5) {
                goto LABEL_15;
              }
LABEL_173:
              uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_loop_filter_across_slices_enabled_flag", *(unsigned __int8 *)(v3 + 567));
              goto LABEL_15;
            }
          }
          if (v37 < 6) {
            goto LABEL_15;
          }
          goto LABEL_173;
        }
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "cu_chroma_qp_offset_enabled_flag", *(unsigned __int8 *)(v3 + 562));
      }
LABEL_159:
      int v36 = *(unsigned char **)(v3 + 32);
      goto LABEL_160;
    }
    if (v8 >= 6)
    {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_pic_order_cnt_lsb", *(int *)(v3 + 64));
      if (dword_1EB671A40 >= 6) {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "short_term_ref_pic_set_sps_flag", *(unsigned __int8 *)(v3 + 68));
      }
    }
    if (*(unsigned char *)(v3 + 68))
    {
      unsigned int v17 = *(_DWORD *)(*(void *)v11 + 288);
      if (v17)
      {
        unsigned int v18 = __clz(v17) ^ 0x1F;
        if ((v17 & (v17 - 1)) != 0) {
          int v19 = -1;
        }
        else {
          int v19 = 0;
        }
        int v8 = dword_1EB671A40;
        if (v18 == v19 || dword_1EB671A40 < 6) {
          goto LABEL_66;
        }
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "short_term_ref_pic_set_idx", *(int *)(v3 + 320));
      }
    }
    else
    {
      uint64_t result = sub_1D0D7BE7C(v3 + 72, __stream, *(void *)(v3 + 16), *(_DWORD *)(*(void *)(v3 + 16) + 288));
    }
    int v8 = dword_1EB671A40;
LABEL_66:
    uint64_t v21 = *(void *)v11;
    if (*(unsigned char *)(*(void *)v11 + 320))
    {
      if (v8 >= 6)
      {
        uint64_t result = fwrite("  long_term_ref_pic_set {\n", 0x1AuLL, 1uLL, __stream);
        int v8 = dword_1EB671A40;
        if (dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "num_long_term_sps", *(unsigned int *)(v3 + 324));
          int v8 = dword_1EB671A40;
          if (dword_1EB671A40 >= 6)
          {
            uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "num_long_term_pics", *(unsigned int *)(v3 + 328));
            int v8 = dword_1EB671A40;
          }
        }
      }
      LODWORD(v22) = *(_DWORD *)(v3 + 324);
      if (v22)
      {
        unint64_t v23 = 0;
        uint64_t v24 = v3 + 332;
        do
        {
          if (v8 >= 6)
          {
            uint64_t result = fprintf(__stream, "      %-40s : %lld\n", "lt_idx_sps", *(unsigned __int8 *)(v24 + v23));
            int v8 = dword_1EB671A40;
            if (dword_1EB671A40 >= 6)
            {
              uint64_t result = fprintf(__stream, "      %-40s : %lld\n", "delta_poc_msb_present_flag", (*(unsigned __int16 *)(v3 + 510) >> v23) & 1);
              int v8 = dword_1EB671A40;
              if (((*(unsigned __int16 *)(v3 + 510) >> v23) & 1) != 0 && dword_1EB671A40 >= 6)
              {
                uint64_t result = fprintf(__stream, "      %-40s : %lld\n", "delta_poc_msb_cycle_lt", *(int *)(v24 + 4 * v23 + 48));
                int v8 = dword_1EB671A40;
              }
            }
          }
          ++v23;
          unint64_t v22 = *(unsigned int *)(v3 + 324);
        }
        while (v23 < v22);
      }
      if (v22 < *(_DWORD *)(v3 + 328) + (int)v22)
      {
        uint64_t v25 = (int)v22;
        uint64_t v26 = v3 + 348;
        do
        {
          if (v8 >= 6)
          {
            uint64_t result = fprintf(__stream, "      %-40s : %lld\n", "poc_lsb_lt", *(unsigned __int16 *)(v26 + 2 * v25));
            int v8 = dword_1EB671A40;
            if (dword_1EB671A40 >= 6)
            {
              uint64_t result = fprintf(__stream, "      %-40s : %lld\n", "used_by_curr_pic_lt_flag", ((unint64_t)*(unsigned __int16 *)(v3 + 508) >> v25) & 1);
              int v8 = dword_1EB671A40;
              if (dword_1EB671A40 >= 6)
              {
                uint64_t result = fprintf(__stream, "      %-40s : %lld\n", "delta_poc_msb_present_flag", ((unint64_t)*(unsigned __int16 *)(v3 + 510) >> v25) & 1);
                int v8 = dword_1EB671A40;
                if (((*(unsigned __int16 *)(v3 + 510) >> v25) & 1) != 0 && dword_1EB671A40 >= 6)
                {
                  uint64_t result = fprintf(__stream, "      %-40s : %lld\n", "delta_poc_msb_cycle_lt", *(int *)(v26 + 4 * v25 + 32));
                  int v8 = dword_1EB671A40;
                }
              }
            }
          }
          ++v25;
        }
        while (*(_DWORD *)(v3 + 328) + *(_DWORD *)(v3 + 324) > v25);
      }
      if (v8 > 5)
      {
        uint64_t result = fwrite("  }\n", 4uLL, 1uLL, __stream);
        int v8 = dword_1EB671A40;
      }
      uint64_t v21 = *(void *)v11;
    }
    if (*(unsigned char *)(v21 + 396)) {
      BOOL v27 = v8 < 6;
    }
    else {
      BOOL v27 = 1;
    }
    if (!v27)
    {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "slice_temporal_mvp_enable_flag", *(unsigned __int8 *)(v3 + 514));
      int v8 = dword_1EB671A40;
    }
    goto LABEL_96;
  }
LABEL_15:
  uint64_t v6 = *(void *)(v3 + 32);
  if (*(unsigned char *)(v6 + 20))
  {
    int v7 = dword_1EB671A40;
  }
  else
  {
    int v13 = *(unsigned __int8 *)(v6 + 21);
    int v7 = dword_1EB671A40;
    if (!v13) {
      goto LABEL_43;
    }
  }
  if (v7 >= 6)
  {
    uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "num_entry_point_offsets", *(int *)(v3 + 568));
    int v7 = dword_1EB671A40;
  }
  int v14 = *(_DWORD *)(v3 + 568);
  if (v14 >= 1)
  {
    if (v7 < 6
      || (uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "offset_len_minus1", *(unsigned __int8 *)(v3 + 572)),
          int v14 = *(_DWORD *)(v3 + 568),
          int v7 = dword_1EB671A40,
          v14 >= 1))
    {
      for (uint64_t i = 0; i < v14; ++i)
      {
        if (v7 >= 6)
        {
          uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "entry_point_offset_minus1", *(unsigned int *)(*(void *)(v3 + 576) + 4 * i));
          int v7 = dword_1EB671A40;
          int v14 = *(_DWORD *)(v3 + 568);
        }
      }
    }
  }
LABEL_43:
  if (*(unsigned char *)(*(void *)(v3 + 32) + 1612)) {
    BOOL v16 = v7 < 6;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16) {
    return fprintf(__stream, "  %-44s : %lld\n", "slice_segment_header_extension_length", *(unsigned __int16 *)(v3 + 600));
  }
  return result;
}

double sub_1D0C97148(uint64_t a1, double result)
{
  uint64_t v2 = *(void *)(a1 + 1568);
  int v3 = *(_DWORD *)(v2 + 8);
  int v4 = *(_DWORD *)(v2 + 12);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v3 <= *(_DWORD *)(v5 + 520))
  {
    BOOL v6 = v4 < 17 || v3 < 17;
    if (!v6 && v4 <= *(_DWORD *)(v5 + 524))
    {
      if (*(unsigned char *)(a1 + 58) == 2 || *(char *)(a1 + 516) < 1)
      {
LABEL_37:
        *(_DWORD *)(v5 + 504) = v3;
        *(_DWORD *)(v5 + 508) = v4;
        uint64_t result = 0.0;
        *(void *)(v5 + 512) = 0;
        return result;
      }
      uint64_t v9 = 0;
      uint64_t v29 = a1 + 1672;
      while (1)
      {
        uint64_t v10 = *(void *)(v29 + 16 * v9);
        if (*(_DWORD *)(v10 + 512) == v3 && *(_DWORD *)(v10 + 516) == v4)
        {
          if (*(void *)(v10 + 400) != *(void *)(v10 + 472)) {
            *(unsigned char *)(v10 + 48) = 1;
          }
          long long v11 = *(_OWORD *)(v10 + 472);
          long long v12 = *(_OWORD *)(v10 + 488);
        }
        else
        {
          if (*(_DWORD *)(v10 + 504) != v3 || *(_DWORD *)(v10 + 508) != v4)
          {
            uint64_t v13 = *(int *)(v10 + 524);
            if (v13)
            {
              uint64_t v14 = *(void *)(v10 + 488);
              size_t v15 = *(int *)(v10 + 520);
              BOOL v16 = *(char **)(v10 + 472);
              do
              {
                --v13;
                memset(v16, 128, v15);
                v16 += v14;
              }
              while (v13);
              unsigned int v17 = *(_DWORD *)(v10 + 524);
              if (v17 >= 2)
              {
                size_t v18 = *(int *)(v10 + 520);
                uint64_t v19 = *(void *)(v10 + 496);
                uint64_t v20 = (uint64_t)(int)v17 >> 1;
                uint64_t v21 = *(char **)(v10 + 480);
                do
                {
                  --v20;
                  memset(v21, 128, v18);
                  v21 += v19;
                }
                while (v20);
              }
            }
            uint64_t v22 = 0;
            uint64_t v23 = *(void *)(a1 + 1584);
            char v24 = 1;
            do
            {
              char v25 = v24;
              uint64_t v26 = (void *)(v10 + 8 * v22);
              *(void *)(v23 + 8 * v22 + 8) = v26[55];
              *(void *)(*(void *)(a1 + 1584) + 8 * v22 + 24) = v26[59];
              uint64_t v23 = *(void *)(a1 + 1584);
              uint64_t v27 = v23 + 8 * v22;
              *(void *)(v27 + 40) = v26[57];
              *(void *)(v27 + 56) = v26[61];
              uint64_t v22 = 1;
              char v24 = 0;
            }
            while ((v25 & 1) != 0);
            *(void *)(v23 + 72) = *(void *)(v10 + 504);
            *(_DWORD *)(v23 + 80) = v3;
            *(_DWORD *)(v23 + 84) = v4;
            (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
            long long v28 = *(_OWORD *)(v10 + 488);
            *(_OWORD *)(v10 + 400) = *(_OWORD *)(v10 + 472);
            *(_OWORD *)(v10 + 416) = v28;
            *(_DWORD *)(v10 + 512) = v3;
            *(_DWORD *)(v10 + 516) = v4;
            (*(void (**)(uint64_t, void, void, void))(*(void *)v10 + 16))(v10, 0, *(unsigned int *)(v10 + 524), 0);
            *(unsigned char *)(v10 + 48) = 1;
            goto LABEL_35;
          }
          if (*(void *)(v10 + 400) != *(void *)(v10 + 440)) {
            *(unsigned char *)(v10 + 48) = 1;
          }
          long long v11 = *(_OWORD *)(v10 + 440);
          long long v12 = *(_OWORD *)(v10 + 456);
        }
        *(_OWORD *)(v10 + 400) = v11;
        *(_OWORD *)(v10 + 416) = v12;
LABEL_35:
        if (++v9 >= *(char *)(a1 + 516))
        {
          uint64_t v5 = *(void *)(a1 + 8);
          goto LABEL_37;
        }
      }
    }
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid VRA parameters %dx%d!\n", v3, v4);
    syslog(27, "Invalid VRA parameters %dx%d!\n", v3, v4);
  }
  return result;
}

void sub_1D0C9740C(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)a1) >> 2);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v21 = &v3[3 * a2];
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 2) >= v6)
  {
    size_t v22 = 12 * ((12 * v6 - 12) / 0xC) + 12;
    bzero(*(void **)(a1 + 8), v22);
    uint64_t v21 = (_DWORD *)(v4 + v22);
LABEL_19:
    *(void *)(a1 + 8) = v21;
    return;
  }
  if (a2 > 0x1555555555555555) {
    sub_1D0C8D71C();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 2);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x1555555555555555;
  }
  else {
    unint64_t v10 = v9;
  }
  long long v11 = (char *)sub_1D0C8D734(v10);
  long long v12 = &v11[12 * v5];
  uint64_t v14 = &v11[12 * v13];
  size_t v15 = 12 * ((12 * v6 - 12) / 0xC) + 12;
  bzero(v12, v15);
  BOOL v16 = &v12[v15];
  size_t v18 = *(_DWORD **)a1;
  unsigned int v17 = *(_DWORD **)(a1 + 8);
  if (v17 != *(_DWORD **)a1)
  {
    do
    {
      uint64_t v19 = *(void *)(v17 - 3);
      v17 -= 3;
      int v20 = v17[2];
      *(void *)(v12 - 12) = v19;
      v12 -= 12;
      *((_DWORD *)v12 + 2) = v20;
    }
    while (v17 != v18);
    unsigned int v17 = *(_DWORD **)a1;
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v14;
  if (v17)
  {
    operator delete(v17);
  }
}

uint64_t sub_1D0C97590(int a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int v5 = 0;
  int v6 = 0;
  uint64_t v7 = a4 + 8;
  while (v5 < a1)
  {
    uint64_t v8 = 0;
    unsigned int v9 = *(unsigned __int16 *)(a3 + 2 * v4);
    unint64_t v10 = (_DWORD *)(v7 + 12 * v5);
    do
    {
      *(v10 - 2) = v4;
      *(v10 - 1) = v6;
      *unint64_t v10 = v6 + v9 + 1;
      unsigned int v11 = v8;
      int v12 = v8 + 1;
      if (v8 >= v9) {
        break;
      }
      uint64_t v13 = v5 + 1 + v8;
      v10 += 3;
      ++v8;
    }
    while (v13 < a1);
    if (v11 < v9) {
      break;
    }
    v5 += v12;
    ++v4;
    v6 += v9 + 1;
    if (v4 == a2) {
      return 0;
    }
  }
  return 4294954387;
}

uint64_t sub_1D0C97628(uint64_t a1, int a2, int a3)
{
  if (*(unsigned char *)(a1 + 104))
  {
    int v5 = *(_DWORD *)(a1 + 96);
    if (v5 > a2 && *(_DWORD *)(a1 + 100) > a3)
    {
      int v6 = *(_DWORD *)(*(void *)(a1 + 72) + 12 * a3);
      return (v6
                          + v6 * *(_DWORD *)(*(void *)(a1 + 48) + 12 * (v5 - 1))
                          + *(_DWORD *)(*(void *)(a1 + 48) + 12 * a2));
    }
    if (dword_1EB671A40 >= 7)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid ctb [%d][%d]\n", a3, a2);
      syslog(31, "Invalid ctb [%d][%d]\n", a3, a2);
    }
  }
  return 0;
}

uint64_t sub_1D0C976F4(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = a2 + 4;
  int v5 = *(unsigned int **)a1;
  unint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  BOOL v7 = v4 >= v6;
  size_t v8 = v4 - v6;
  if (v8 != 0 && v7)
  {
    sub_1D0C4CCE0((unint64_t *)a1, v8);
    int v5 = *(unsigned int **)a1;
  }
  else if (!v7)
  {
    *(void *)(a1 + 8) = (char *)v5 + v4;
  }
  uint64_t result = sub_1D0C4CAD0(a1, v5, a2);
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1D0C9775C(uint64_t result, int a2, int a3)
{
  unsigned int v3 = (a2 << (-(char)a3 - *(_DWORD *)(result + 52))) | *(_DWORD *)(result + 48);
  *(_DWORD *)(result + 48) = v3;
  **(_DWORD **)(result + 32) = bswap32(v3);
  unint64_t v4 = *(int *)(result + 52) + (uint64_t)a3;
  int v5 = *(_DWORD *)(result + 48) << (v4 & 0xF8);
  unint64_t v6 = *(void *)(result + 40);
  unint64_t v7 = *(void *)(result + 32) + (v4 >> 3);
  *(void *)(result + 32) = v7;
  *(_DWORD *)(result + 48) = v5;
  *(_DWORD *)(result + 52) = v4 & 7;
  if (v7 >= v6)
  {
    *(unsigned char *)(result + 56) = 1;
    *(void *)(result + 32) = v6;
  }
  return result;
}

uint64_t sub_1D0C977C0(uint64_t a1, unsigned int a2, int a3)
{
  unsigned __int16 v3 = a2;
  uint64_t v4 = a1;
  if (a3 > 25)
  {
    sub_1D0C9775C(a1, HIWORD(a2), a3 - 16);
    a2 = v3;
    a1 = v4;
    a3 = 16;
  }
  return sub_1D0C9775C(a1, a2, a3);
}

uint64_t sub_1D0C97824(uint64_t a1, int a2)
{
  unsigned int v3 = a2 + 1;
  if (a2 == -1)
  {
    sub_1D0C9775C(a1, 0, 16);
    sub_1D0C9775C(a1, 0, 16);
    sub_1D0C9775C(a1, 1, 1);
    sub_1D0C9775C(a1, 0, 16);
    uint64_t v4 = a1;
    int v5 = 0;
    int v6 = 16;
LABEL_11:
    return sub_1D0C9775C(v4, v5, v6);
  }
  unsigned int v7 = __clz(v3);
  unsigned int v8 = v7 ^ 0x1F;
  unsigned int v9 = (v7 ^ 0x1F) >> 1;
  if ((v7 ^ 0x1F) >= 2) {
    sub_1D0C9775C(a1, 0, v8 >> 1);
  }
  if (v8 != v9) {
    sub_1D0C9775C(a1, 0, v8 - (v8 >> 1));
  }
  uint64_t result = sub_1D0C9775C(a1, 1, 1);
  unsigned int v11 = v3 - (0x80000000 >> v7);
  if (v8 >= 2) {
    uint64_t result = sub_1D0C9775C(a1, v11 >> (v8 - (v8 >> 1)), v8 >> 1);
  }
  if (v8 != v9)
  {
    uint64_t v4 = a1;
    int v5 = v11;
    int v6 = v8 - (v8 >> 1);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1D0C97958(uint64_t a1, int a2)
{
  if (a2 <= 0) {
    int v2 = -2 * a2;
  }
  else {
    int v2 = 2 * a2 - 1;
  }
  unsigned int v3 = v2 + 1;
  unsigned int v4 = __clz(v3);
  return sub_1D0C9775C(a1, (v3 - (0x80000000 >> v4)) | (0x80000000 >> v4), 63 - 2 * v4);
}

uint64_t sub_1D0C9798C(uint64_t a1)
{
  uint64_t result = sub_1D0C9775C(a1, 1, 1);
  uint64_t v3 = *(int *)(a1 + 52);
  if (v3)
  {
    unsigned int v4 = *(unsigned char **)(a1 + 32);
    if ((unint64_t)v4 < *(void *)(a1 + 40))
    {
      *v4 &= byte_1D0D7F874[v3];
      unsigned int v4 = *(unsigned char **)(a1 + 32);
    }
    *(void *)(a1 + 32) = v4 + 1;
  }
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1D0C979F4(uint64_t a1)
{
  CFDataRef v1 = (unsigned int *)(*(void *)(a1 + 40) - 1);
  while (!*(unsigned char *)v1)
  {
    BOOL v2 = (unint64_t)v1 > *(void *)(a1 + 32);
    CFDataRef v1 = (unsigned int *)((char *)v1 - 1);
    if (!v2) {
      goto LABEL_4;
    }
  }
  signed int v4 = __clz(__rbit32(*(unsigned __int8 *)v1)) ^ 7;
  if (v1 != *(unsigned int **)(a1 + 32) || *(_DWORD *)(a1 + 52) <= v4)
  {
    uint64_t v3 = 0;
    *(_DWORD *)(a1 + 52) = v4;
    *(void *)(a1 + 32) = v1;
    *(_DWORD *)(a1 + 48) = bswap32(*v1) << v4;
    return v3;
  }
LABEL_4:
  if (dword_1EB671A40 >= 3)
  {
    fwrite("Failed to find terminating bit\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Failed to find terminating bit\n");
  }
  return 4294954387;
}

void *sub_1D0C97AC0(void *a1)
{
  BOOL v2 = (std::__shared_weak_count *)a1[197];
  if (v2) {
    sub_1D0C4C984(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[195];
  if (v3) {
    sub_1D0C4C984(v3);
  }
  signed int v4 = (std::__shared_weak_count *)a1[193];
  if (v4) {
    sub_1D0C4C984(v4);
  }
  for (uint64_t i = 191; i != 63; i -= 2)
  {
    int v6 = (std::__shared_weak_count *)a1[i];
    if (v6) {
      sub_1D0C4C984(v6);
    }
  }
  do
  {
    unsigned int v7 = (std::__shared_weak_count *)a1[i];
    if (v7) {
      sub_1D0C4C984(v7);
    }
    i -= 2;
  }
  while (i != 31);
  do
  {
    unsigned int v8 = (std::__shared_weak_count *)a1[i];
    if (v8) {
      sub_1D0C4C984(v8);
    }
    i -= 2;
  }
  while (i != -1);
  return a1;
}

uint64_t sub_1D0C97B54(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0;
  uint64_t v5 = a1;
  do
  {
    unint64_t v6 = 0;
    if (v4) {
      unsigned int v7 = byte_1D0DAEFE0;
    }
    else {
      unsigned int v7 = byte_1D0DAEFB8;
    }
    if (v4) {
      uint64_t v8 = 64;
    }
    else {
      uint64_t v8 = 16;
    }
    if (v4 == 3) {
      unint64_t v9 = 3;
    }
    else {
      unint64_t v9 = 1;
    }
    uint64_t v37 = v8;
    int v38 = v7;
    __unsigned int n = v8 | 1;
    unint64_t v10 = v9 | (v9 << 6);
    uint64_t v36 = v5;
    unint64_t v39 = v10;
    unint64_t v40 = v9;
    __s2 = (char *)(v5 - v10);
    uint64_t v42 = -(uint64_t)v10;
    do
    {
      if (v4) {
        unsigned int v11 = (char *)&unk_1D0D7FAA0 + ((v6 > 2) | ((unint64_t)(v6 > 2) << 6));
      }
      else {
        unsigned int v11 = (char *)&unk_1D0D7FA8F;
      }
      int v12 = (unsigned __int8 *)(a1 + 390 * v4 + 65 * v6);
      int v13 = memcmp(v12, v11, __n);
      if (v6 >= v9)
      {
        uint64_t v14 = __s2;
        unint64_t v15 = v9;
        while (memcmp(v12, v14, __n))
        {
          v15 += v9;
          v14 += v42;
          if (v15 > v6) {
            goto LABEL_19;
          }
        }
        unsigned int v21 = v15 / v9;
        sub_1D0C9775C(a2, 0, 1);
        goto LABEL_27;
      }
LABEL_19:
      sub_1D0C9775C(a2, v13 != 0, 1);
      if (!v13)
      {
        unsigned int v21 = 0;
LABEL_27:
        unsigned int v22 = __clz(v21 + 1);
        uint64_t result = sub_1D0C9775C(a2, (v21 + 1 - (0x80000000 >> v22)) | (0x80000000 >> v22), 63 - 2 * v22);
        goto LABEL_34;
      }
      if (v4 < 2)
      {
        int v20 = 8;
      }
      else
      {
        unsigned int v16 = *v12;
        if (v16 <= 8) {
          int v17 = 16 - 2 * v16;
        }
        else {
          int v17 = 2 * v16 - 17;
        }
        unsigned int v18 = v17 + 1;
        unsigned int v19 = __clz(v18);
        sub_1D0C9775C(a2, (v18 - (0x80000000 >> v19)) | (0x80000000 >> v19), 63 - 2 * v19);
        int v20 = *v12;
      }
      uint64_t v25 = v37;
      char v24 = v38;
      do
      {
        unsigned int v26 = *v24++;
        uint64_t v27 = v26 + 65 * v6 + a1 + 390 * v4;
        int v28 = *(unsigned __int8 *)(v27 + 1);
        BOOL v29 = __OFSUB__(v28, v20);
        int v31 = v28 - v20;
        char v30 = (v31 < 0) ^ v29 | (v31 == 0);
        int v32 = 2 * v31;
        if (v30) {
          int v33 = -v32;
        }
        else {
          int v33 = v32 - 1;
        }
        unsigned int v34 = v33 + 1;
        unsigned int v35 = __clz(v34);
        uint64_t result = sub_1D0C9775C(a2, (v34 - (0x80000000 >> v35)) | (0x80000000 >> v35), 63 - 2 * v35);
        int v20 = *(unsigned __int8 *)(v27 + 1);
        --v25;
      }
      while (v25);
LABEL_34:
      unint64_t v9 = v40;
      v6 += v40;
      __s2 += v39;
    }
    while (v6 < 6);
    ++v4;
    uint64_t v5 = v36 + 390;
  }
  while (v4 != 4);
  return result;
}

uint64_t sub_1D0C97DD4(char *__dst, const char *a2)
{
  uint64_t v3 = 0;
  unint64_t v4 = __dst;
  do
  {
    unint64_t v5 = 0;
    if (v3) {
      size_t v6 = 65;
    }
    else {
      size_t v6 = 17;
    }
    unsigned int v7 = v4;
    do
    {
      if (v3) {
        uint64_t v8 = (char *)&unk_1D0D7FAA0 + ((v5 > 2) | ((unint64_t)(v5 > 2) << 6));
      }
      else {
        uint64_t v8 = (char *)&unk_1D0D7FA8F;
      }
      memcpy(v7, v8, v6);
      ++v5;
      v7 += 65;
    }
    while (v5 != 6);
    ++v3;
    v4 += 390;
  }
  while (v3 != 4);
  if (!a2) {
    return 0;
  }
  unint64_t v9 = strdup(a2);
  if (!v9) {
    return 4294954392;
  }
  unint64_t v10 = v9;
  __stringp = v9;
  uint64_t v45 = 0;
  size_t v11 = strlen(v9);
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      int v13 = __stringp[i];
      if (v13 == 61 || v13 == 44) {
        __stringp[i] = 32;
      }
    }
  }
  uint64_t v14 = 0;
  int v15 = 0;
  int v16 = 0;
  do
  {
LABEL_20:
    int v17 = strsep(&__stringp, "\r\n");
    uint64_t v45 = v17;
    if (!v17)
    {
      for (uint64_t j = 0; j != 390; j += 65)
      {
        unint64_t v39 = &__dst[j];
        *unint64_t v39 = __dst[j + 1];
        v39[390] = __dst[j + 391];
      }
      uint64_t v37 = 0;
      goto LABEL_66;
    }
  }
  while (*v17 == 35);
  while (1)
  {
    while (1)
    {
      do
      {
        unsigned int v35 = strsep(&v45, " ");
        uint64_t v36 = v35;
        if (!v35) {
          goto LABEL_20;
        }
      }
      while (!*v35);
      if (*(_WORD *)v35 == 20041 && v35[2] == 84) {
        break;
      }
      if (!v14)
      {
        if (dword_1EB671A40 < 3) {
          goto LABEL_77;
        }
        char v41 = "Unexpected token (expected coeff): '%s'\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unexpected token (expected coeff): '%s'\n");
LABEL_71:
        syslog(27, v41, v36);
        goto LABEL_77;
      }
      if (v16 >= v15)
      {
        if (dword_1EB671A40 >= 3)
        {
          fwrite("coeff_idx exceeded num_coeff\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "coeff_idx exceeded num_coeff\n");
        }
        uint64_t v37 = 4294954385;
        goto LABEL_66;
      }
      unsigned int v19 = atoi(v35);
      unsigned int v20 = v19;
      if (v19 >= 0x100)
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid coeff %d\n", v19);
          syslog(27, "Invalid coeff %d\n", v20);
        }
        goto LABEL_77;
      }
      v14[v16++] = v19;
      if (v16 >= v15) {
        uint64_t v14 = 0;
      }
    }
    if (v14)
    {
      if (dword_1EB671A40 <= 2) {
        goto LABEL_77;
      }
      char v41 = "Unexpected token '%s' (expected more coefficients)\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unexpected token '%s' (expected more coefficients)\n");
      goto LABEL_71;
    }
    if (strlen(v35) <= 0xC
      || (int v21 = strncmp(v36, "INTRA", 5uLL), v22 = strncmp(v36, "INTER", 5uLL), v23 = v22, v21) && v22)
    {
LABEL_78:
      if (dword_1EB671A40 > 2) {
        goto LABEL_79;
      }
      goto LABEL_77;
    }
    char v24 = strchr(v36, 88);
    if (!v24) {
      break;
    }
    uint64_t v25 = v24;
    unsigned int v26 = atoi(v36 + 5);
    if (v26 != atoi(v25 + 1)
      || (HIDWORD(v28) = v26, LODWORD(v28) = v26 - 4, unsigned int v27 = v28 >> 2, v27 > 7)
      || ((1 << v27) & 0x8B) == 0)
    {
      if (dword_1EB671A40 >= 3) {
        goto LABEL_85;
      }
      goto LABEL_86;
    }
    BOOL v29 = strchr(v36, 95);
    if (!v29) {
      goto LABEL_78;
    }
    char v30 = v29;
    unsigned int v31 = __clz(__rbit32(v26)) - 2;
    unsigned int v42 = v26;
    if (v26) {
      int v32 = v31;
    }
    else {
      int v32 = -2;
    }
    if (v23) {
      unsigned int v33 = 0;
    }
    else {
      unsigned int v33 = 3;
    }
    if (strncmp(v29, "_LUMA", 5uLL))
    {
      if (!strncmp(v30, "_CHROMAU", 8uLL))
      {
        ++v33;
      }
      else
      {
        if (strncmp(v30, "_CHROMAV", 8uLL)) {
          goto LABEL_78;
        }
        v33 += 2;
      }
    }
    unsigned int v34 = strchr(v30 + 1, 95);
    if (v34)
    {
      if (strncmp(v34, "_DC", 3uLL))
      {
        if (dword_1EB671A40 >= 3)
        {
LABEL_79:
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid token '%s'\n", v36);
          syslog(27, "Invalid token '%s'\n", v36);
        }
LABEL_77:
        uint64_t v37 = 4294954394;
        goto LABEL_66;
      }
      int v16 = 0;
      uint64_t v14 = &__dst[390 * v32 + (v33 | ((unint64_t)v33 << 6))];
      int v15 = 1;
    }
    else
    {
      int v16 = 0;
      uint64_t v14 = &__dst[390 * v32 + 1 + (v33 | ((unint64_t)v33 << 6))];
      if (v42 == 4) {
        int v15 = 16;
      }
      else {
        int v15 = 64;
      }
    }
  }
  if (dword_1EB671A40 > 2)
  {
LABEL_85:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid token '%s'\n", v36);
    syslog(27, "Invalid token '%s'\n", v36);
  }
LABEL_86:
  uint64_t v37 = 4294954387;
LABEL_66:
  free(v10);
  return v37;
}

void sub_1D0C9832C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D0C98350(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  size_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x1D25F0000](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_1D0C984D8(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1D25F01B0](v1);
  _Unwind_Resume(a1);
}

void *sub_1D0C98510(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1D25F0010](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1D25F01B0](a1 + 53);
  return a1;
}

uint64_t sub_1D0C985DC(uint64_t result, FILE *__stream)
{
  unint64_t v3 = 0;
  int v4 = dword_1EB671A40;
  uint64_t v12 = result;
  uint64_t v5 = result + 1;
  do
  {
    unint64_t v6 = 0;
    unsigned int v7 = 16 << (2 * v3);
    if (v7 >= 0x40) {
      unsigned int v7 = 64;
    }
    if (v7 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v7;
    }
    if (v3 == 3) {
      uint64_t v9 = 3;
    }
    else {
      uint64_t v9 = 1;
    }
    uint64_t v14 = v9;
    uint64_t v13 = 65 * v9;
    uint64_t v11 = v5;
    do
    {
      if (v4 > 5)
      {
        uint64_t result = fprintf(__stream, "  scalingList[%d][%d] {", v3, v6);
        int v4 = dword_1EB671A40;
        if (v3 >= 2 && dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, "\n    scaling_list_dc_coeff : %d", *(unsigned __int8 *)(v12 + 390 * v3 + 65 * v6));
          int v4 = dword_1EB671A40;
        }
      }
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (!(i & 3 | v3))
        {
          if (v4 < 6) {
            continue;
          }
LABEL_22:
          uint64_t result = fwrite("\n   ", 4uLL, 1uLL, __stream);
          int v4 = dword_1EB671A40;
          goto LABEL_23;
        }
        if (v3 && (i & 7) == 0 && v4 > 5) {
          goto LABEL_22;
        }
LABEL_23:
        if (v4 >= 6)
        {
          uint64_t result = fprintf(__stream, " %3d", *(unsigned __int8 *)(v5 + i));
          int v4 = dword_1EB671A40;
        }
      }
      if (v4 > 5)
      {
        uint64_t result = fwrite("\n  }\n", 5uLL, 1uLL, __stream);
        int v4 = dword_1EB671A40;
      }
      v6 += v14;
      v5 += v13;
    }
    while (v6 < 6);
    ++v3;
    uint64_t v5 = v11 + 390;
  }
  while (v3 != 4);
  return result;
}

__n128 sub_1D0C987A8(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 248);
  long long v1 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a1 + 184) = v1;
  long long v2 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a1 + 216) = v2;
  long long v3 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 120) = v3;
  long long v4 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 152) = v4;
  long long v5 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(a1 + 56) = v5;
  __n128 result = *(__n128 *)(a1 + 296);
  long long v7 = *(_OWORD *)(a1 + 312);
  *(__n128 *)(a1 + 72) = result;
  *(_OWORD *)(a1 + 88) = v7;
  return result;
}

__n128 sub_1D0C98808(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 408) = v1;
  long long v2 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 440) = v2;
  long long v3 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 344) = v3;
  long long v4 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 376) = v4;
  long long v5 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 280) = v5;
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 312) = v6;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a1 + 248) = result;
  uint64_t v8 = 8 * (*(_DWORD *)(a1 + 464) - *(_DWORD *)(a1 + 32));
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 510;
  *(void *)(a1 + 24) = v8;
  return result;
}

uint64_t sub_1D0C98888(_DWORD *a1)
{
  return (((a1[6] + 8 * (a1[8] - a1[116])) << 8) - a1[4] + 510);
}

void *sub_1D0C988B0(void *result, int a2, unsigned char *a3, int a4, int a5)
{
  if (a5)
  {
    uint64_t v9 = result;
    __n128 result = sub_1D0C98960(result, a2 != 0, a3);
    if (a2)
    {
      unint64_t v10 = &a3[a4];
      int v11 = a2 - 1;
      if (a2 != 1)
      {
        do
        {
          __n128 result = sub_1D0C98960(v9, 1, v10);
          --v11;
        }
        while (v11);
      }
      if (a5 > a2)
      {
        return sub_1D0C98960(v9, 0, v10);
      }
    }
  }
  return result;
}

void *sub_1D0C98960(void *result, int a2, unsigned char *a3)
{
  unint64_t v3 = *a3;
  uint64_t v4 = byte_1D0D7FCB3[(result[2] & 0xC0) + (v3 >> 1)];
  uint64_t v5 = result[3];
  unint64_t v6 = result[2] - v4;
  int v7 = v3 & 1 ^ a2;
  if (v7) {
    uint64_t v8 = result[2] - v4;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v8 + result[1];
  if (v7) {
    unint64_t v6 = byte_1D0D7FCB3[(result[2] & 0xC0) + (v3 >> 1)];
  }
  *a3 = byte_1D0D7FCB3[(v7 | (2 * v3)) + 256];
  int v10 = __clz(v6) - 55;
  unint64_t v11 = v6 << v10;
  unint64_t v12 = v9 << v10;
  uint64_t v13 = v5 + v10;
  result[2] = v11;
  uint64_t v14 = v13 - 32;
  if (v13 >= 32)
  {
    int v15 = (_DWORD *)result[4];
    if ((unint64_t)v15 < result[5])
    {
      unint64_t v16 = result[58];
      char v17 = v13 - 22;
      unint64_t v18 = v12 >> v17;
      result[4] = v15 + 1;
      *int v15 = bswap32(v12 >> v17);
      v12 &= ~(-1 << v17);
      if ((v18 & 0x100000000) != 0)
      {
        unsigned int v19 = v15 - 1;
        do
        {
          if ((unint64_t)v19 < v16) {
            break;
          }
          unsigned int v20 = *v19;
          *unsigned int v19 = bswap32(bswap32(*v19) + 1);
          --v19;
        }
        while (v20 == -1);
      }
      uint64_t v13 = v14;
    }
  }
  result[1] = v12;
  result[3] = v13;
  return result;
}

void *sub_1D0C98A3C(void *result, signed int a2, unsigned char *a3, signed int a4)
{
  int v7 = result;
  if (a4 >= a2) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = a4;
  }
  if ((int)v8 >= 1)
  {
    uint64_t v9 = a3;
    do
    {
      __n128 result = sub_1D0C98960(v7, 1, v9++);
      --v8;
    }
    while (v8);
  }
  if (a2 < a4)
  {
    return sub_1D0C98960(v7, 0, &a3[a2]);
  }
  return result;
}

void *sub_1D0C98AE0(void *a1, unsigned int a2, int a3)
{
  int v3 = 1 << a3;
  for (i = a3; a2 >= 1 << i; int v3 = 1 << i)
  {
    ++i;
    a2 -= v3;
  }
  return sub_1D0C98B24(a1, a2 | (-2 << i), 2 * i - a3 + 1);
}

void *sub_1D0C98B24(void *a1, unsigned int a2, int a3)
{
  if (a3 >= 23)
  {
    unsigned int v6 = a3 + 1;
    do
      __n128 result = sub_1D0C98C60(a1, (a2 >> (v6-- - 2)) & 1);
    while (v6 > 1);
  }
  else
  {
    return sub_1D0C98BA4(a1, a2, a3);
  }
  return result;
}

void *sub_1D0C98BA4(void *result, int a2, int a3)
{
  if (a3)
  {
    unint64_t v3 = result[1];
    uint64_t v4 = result[3] + a3;
    if (a3 >= 1)
    {
      int v5 = a2 << -(char)a3;
      unsigned int v6 = a3 + 1;
      do
      {
        if (v5 >= 0) {
          uint64_t v7 = 0;
        }
        else {
          uint64_t v7 = result[2];
        }
        unint64_t v3 = v7 + 2 * v3;
        v5 *= 2;
        --v6;
      }
      while (v6 > 1);
    }
    uint64_t v8 = v4 - 32;
    if (v4 >= 32)
    {
      uint64_t v9 = (_DWORD *)result[4];
      if ((unint64_t)v9 < result[5])
      {
        unint64_t v10 = result[58];
        char v11 = v4 - 22;
        unint64_t v12 = v3 >> v11;
        result[4] = v9 + 1;
        *uint64_t v9 = bswap32(v3 >> v11);
        v3 &= ~(-1 << v11);
        if ((v12 & 0x100000000) != 0)
        {
          uint64_t v13 = v9 - 1;
          do
          {
            if ((unint64_t)v13 < v10) {
              break;
            }
            unsigned int v14 = *v13;
            unsigned int *v13 = bswap32(bswap32(*v13) + 1);
            --v13;
          }
          while (v14 == -1);
        }
        uint64_t v4 = v8;
      }
    }
    result[1] = v3;
    result[3] = v4;
  }
  return result;
}

void *sub_1D0C98C60(void *result, int a2)
{
  unint64_t v2 = 2 * result[1];
  if (a2) {
    v2 += result[2];
  }
  uint64_t v3 = result[3];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3 - 31;
  if (v3 >= 31)
  {
    unsigned int v6 = (_DWORD *)result[4];
    if ((unint64_t)v6 < result[5])
    {
      unint64_t v7 = result[58];
      char v8 = v3 - 21;
      unint64_t v9 = v2 >> v8;
      result[4] = v6 + 1;
      _DWORD *v6 = bswap32(v2 >> v8);
      v2 &= ~(-1 << v8);
      if ((v9 & 0x100000000) != 0)
      {
        unint64_t v10 = v6 - 1;
        do
        {
          if ((unint64_t)v10 < v7) {
            break;
          }
          unsigned int v11 = *v10;
          *unint64_t v10 = bswap32(bswap32(*v10) + 1);
          --v10;
        }
        while (v11 == -1);
      }
      uint64_t v4 = v5;
    }
  }
  result[1] = v2;
  result[3] = v4;
  return result;
}

void *sub_1D0C98CF4(void *a1, unsigned int a2, int a3)
{
  return sub_1D0C98BA4(a1, a2 & ~(-1 << a3) | (-2 << a3), a3 + (a2 >> a3) + 1);
}

void *sub_1D0C98D1C(void *a1, int a2, int a3)
{
  if (a3 >= a2) {
    int v6 = a2;
  }
  else {
    int v6 = a3;
  }
  if (v6 >= 22)
  {
    do
    {
      __n128 result = sub_1D0C98C60(a1, 1);
      --v6;
    }
    while (v6);
    if (a2 < a3)
    {
      return sub_1D0C98C60(a1, 0);
    }
  }
  else
  {
    int v7 = ~(a2 < a3);
    if (a2 >= a3) {
      int v8 = v6;
    }
    else {
      int v8 = v6 + 1;
    }
    return sub_1D0C98BA4(a1, v7, v8);
  }
  return result;
}

void *sub_1D0C98DD4(void *result, int a2)
{
  uint64_t v2 = result[2] - 2;
  int v3 = 1 - ((int)v2 >> 8);
  uint64_t v4 = 2;
  if (!a2)
  {
    uint64_t v4 = result[2] - 2;
    uint64_t v2 = 0;
  }
  uint64_t v5 = v2 + result[1];
  if (a2) {
    int v6 = 7;
  }
  else {
    int v6 = v3;
  }
  unint64_t v7 = v5 << v6;
  uint64_t v8 = result[3] + v6;
  result[2] = v4 << v6;
  uint64_t v9 = v8 - 32;
  if (v8 >= 32)
  {
    unint64_t v10 = (_DWORD *)result[4];
    if ((unint64_t)v10 < result[5])
    {
      unint64_t v11 = result[58];
      char v12 = v8 - 22;
      unint64_t v13 = v7 >> v12;
      result[4] = v10 + 1;
      *unint64_t v10 = bswap32(v7 >> v12);
      v7 &= ~(-1 << v12);
      if ((v13 & 0x100000000) != 0)
      {
        unsigned int v14 = v10 - 1;
        do
        {
          if ((unint64_t)v14 < v11) {
            break;
          }
          unsigned int v15 = *v14;
          unsigned int *v14 = bswap32(bswap32(*v14) + 1);
          --v14;
        }
        while (v15 == -1);
      }
      uint64_t v8 = v9;
    }
  }
  result[1] = v7;
  result[3] = v8;
  return result;
}

uint64_t sub_1D0C98E90(uint64_t result)
{
  *(_DWORD *)(result + 228) = 0;
  return result;
}

uint64_t sub_1D0C98E98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 228);
}

uint64_t sub_1D0C98EA0(uint64_t result, int a2, unsigned char *a3, int a4, int a5)
{
  if (a5)
  {
    int v5 = *(_DWORD *)(result + 228) + dword_1D0DAE36C[(*a3 ^ (a2 != 0))];
    *(_DWORD *)(result + 228) = v5;
    if (a2)
    {
      int v6 = a2 - 1;
      if (a2 != 1)
      {
        do
        {
          v5 += dword_1D0DAE36C[a3[a4] ^ 1];
          *(_DWORD *)(result + 228) = v5;
          --v6;
        }
        while (v6);
      }
      if (a5 > a2) {
        *(_DWORD *)(result + 228) = v5 + dword_1D0DAE36C[a3[a4]];
      }
    }
  }
  return result;
}

uint64_t sub_1D0C98F18(uint64_t result, signed int a2, unsigned __int8 *a3, signed int a4)
{
  if (a4 >= a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = a4;
  }
  if ((int)v4 >= 1)
  {
    int v5 = *(_DWORD *)(result + 228);
    int v6 = a3;
    do
    {
      unsigned int v7 = *v6++;
      v5 += dword_1D0DAE36C[v7 ^ 1];
      *(_DWORD *)(result + 228) = v5;
      --v4;
    }
    while (v4);
  }
  if (a2 < a4) {
    *(_DWORD *)(result + 228) += dword_1D0DAE36C[a3[a2]];
  }
  return result;
}

uint64_t sub_1D0C98F74(uint64_t result, unsigned int a2, int a3)
{
  int v3 = 1 << a3;
  int v4 = a3;
  if (1 << a3 <= a2)
  {
    int v4 = a3;
    do
    {
      ++v4;
      a2 -= v3;
      int v3 = 1 << v4;
    }
    while (a2 >= 1 << v4);
  }
  *(_DWORD *)(result + 228) = *(_DWORD *)(result + 228) - (a3 << 8) + (v4 << 9) + 256;
  return result;
}

uint64_t sub_1D0C98FB8(uint64_t result, unsigned int a2, int a3)
{
  *(_DWORD *)(result + 228) += ((a3 + (a2 >> a3)) << 8) + 256;
  return result;
}

uint64_t sub_1D0C98FD4(uint64_t result, int a2, int a3)
{
  if (a3 >= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a2 < a3) {
    ++v3;
  }
  *(_DWORD *)(result + 228) += v3 << 8;
  return result;
}

uint64_t sub_1D0C98FF4(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 228) += a3 << 8;
  return result;
}

uint64_t sub_1D0C99004(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 228) += a3 << 8;
  return result;
}

uint64_t sub_1D0C99014(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 1792;
  }
  else {
    int v2 = 2;
  }
  *(_DWORD *)(result + 228) += v2;
  return result;
}

uint64_t sub_1D0C99034(uint64_t result)
{
  *(_DWORD *)(result + 228) += 256;
  return result;
}

uint64_t sub_1D0C99044(uint64_t result, char a2, unsigned char *a3)
{
  *(_DWORD *)(result + 228) += dword_1D0DAE36C[(*a3 ^ a2)];
  return result;
}

uint64_t sub_1D0C9906C(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, int a6)
{
  int v72 = 0;
  uint64_t v73 = a2;
  v70[0] = &v71;
  v70[1] = &v73;
  uint64_t v71 = 0;
  if (a5)
  {
    uint64_t v8 = (*(_DWORD *)(a5 + 4) + *(_DWORD *)a5);
    if ((int)v8 >= 1)
    {
      uint64_t v10 = 0;
      int v66 = 0;
      int v11 = 0;
      int v67 = -*(_DWORD *)(*(void *)a3 + 2108) & a6;
      while (1)
      {
        int v12 = *(unsigned __int16 *)(a5 + 2 * v10 + 24);
        int v13 = 1 << v10;
        if (((1 << v10) & *(unsigned __int16 *)(a5 + 186)) != 0)
        {
          int v14 = *(_DWORD *)(a5 + 4 * v10 + 120);
          int v15 = *(_DWORD *)(*(void *)a3 + 2108);
          int v16 = v67 + v12;
          int v12 = v67 + v12 - v15 * v14;
          char v17 = (uint64_t *)sub_1D0C99620(v73, v16 - v15 * v14);
          uint64_t v19 = *v17;
          unint64_t v18 = (std::__shared_weak_count *)v17[1];
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v20 = v72;
          uint64_t v71 = v19;
          int v72 = v18;
          if (v20) {
            goto LABEL_8;
          }
        }
        else
        {
          uint64_t v28 = v73;
          char v29 = *(unsigned char *)(*(void *)a3 + 224);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643360, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EA643360))
          {
            __cxa_atexit((void (*)(void *))sub_1D0C99904, &qword_1EA643350, &dword_1D0C3F000);
            __cxa_guard_release(&qword_1EA643360);
          }
          uint64_t v30 = 32;
          while (1)
          {
            uint64_t v31 = *(void *)(v28 + v30);
            if (v31)
            {
              if (((*(_DWORD *)(v31 + 1024) ^ v12) & ~(-16 << v29)) == 0) {
                break;
              }
            }
            v30 += 16;
            if (v30 == 304)
            {
              int v32 = &qword_1EA643350;
              uint64_t v31 = qword_1EA643350;
              goto LABEL_36;
            }
          }
          int v32 = (uint64_t *)(v28 + v30);
LABEL_36:
          unsigned int v34 = (std::__shared_weak_count *)v32[1];
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v20 = v72;
          uint64_t v71 = v31;
          int v72 = v34;
          if (v20) {
LABEL_8:
          }
            sub_1D0C4C984(v20);
        }
        uint64_t v21 = sub_1D0C996E8(v70, v12, (unsigned __int16)(v13 & *(_WORD *)(a5 + 184)) != 0);
        if (v21) {
          goto LABEL_93;
        }
        uint64_t v22 = v71;
        if (!v71) {
          goto LABEL_29;
        }
        int v23 = v72;
        if (((unsigned __int16)v13 & *(_WORD *)(a5 + 184)) != 0)
        {
          if (v72) {
            atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&a1[4 * v11 + 134] = v22;
          char v24 = &a1[4 * v11];
          uint64_t v25 = (std::__shared_weak_count *)*((void *)v24 + 68);
          *((void *)v24 + 68) = v23;
          ++v11;
          if (v25) {
            goto LABEL_15;
          }
        }
        else
        {
          if (v72) {
            atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)&a1[4 * v66 + 262] = v22;
          unsigned int v33 = &a1[4 * v66];
          uint64_t v25 = (std::__shared_weak_count *)*((void *)v33 + 132);
          *((void *)v33 + 132) = v23;
          ++v66;
          if (v25) {
LABEL_15:
          }
            sub_1D0C4C984(v25);
        }
        uint64_t v26 = 0;
        uint64_t v27 = v73 + 32;
        while (!*(void *)v27 || *(_DWORD *)(*(void *)v27 + 1024) != v12)
        {
          ++v26;
          v27 += 16;
          if (v26 == 17) {
            goto LABEL_29;
          }
        }
        if ((v26 & 0x80000000) == 0) {
          *(unsigned char *)(v73 + v26 + 304) = 2;
        }
LABEL_29:
        if (++v10 == v8) {
          goto LABEL_44;
        }
      }
    }
    int v11 = 0;
    int v66 = 0;
LABEL_44:
    a1[3] = v11;
    a1[5] = v66;
  }
  else
  {
    int v11 = 0;
    a1[5] = 0;
    a1[3] = 0;
  }
  unsigned int v35 = a4;
  if (a4)
  {
    if (a4[160])
    {
      unint64_t v36 = 0;
      int v37 = 0;
      int v38 = 0;
      unint64_t v39 = a4 + 2;
      while (1)
      {
        int v40 = *((__int16 *)v39 - 1) + a6;
        char v41 = (uint64_t *)sub_1D0C99620(v73, v40);
        uint64_t v43 = *v41;
        unsigned int v42 = (std::__shared_weak_count *)v41[1];
        if (v42) {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v44 = v72;
        uint64_t v71 = v43;
        int v72 = v42;
        if (v44) {
          sub_1D0C4C984(v44);
        }
        uint64_t v21 = sub_1D0C996E8(v70, v40, *v39);
        if (v21) {
          goto LABEL_93;
        }
        uint64_t v45 = v71;
        if (v71 && (sub_1D0C99830(v73, v40) & 1) == 0)
        {
          unsigned __int8 v46 = v72;
          unsigned int v35 = a4;
          if (*v39)
          {
            if (v72) {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(void *)&a1[4 * v38 + 6] = v45;
            uint64_t v47 = &a1[4 * v38];
            uint64_t v48 = (std::__shared_weak_count *)*((void *)v47 + 4);
            *((void *)v47 + 4) = v46;
            ++v38;
            if (!v48) {
              goto LABEL_61;
            }
          }
          else
          {
            if (v72) {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(void *)&a1[4 * v37 + 198] = v45;
            int v49 = &a1[4 * v37];
            uint64_t v48 = (std::__shared_weak_count *)*((void *)v49 + 100);
            *((void *)v49 + 100) = v46;
            ++v37;
            if (!v48) {
              goto LABEL_61;
            }
          }
          sub_1D0C4C984(v48);
        }
        else
        {
          unsigned int v35 = a4;
        }
LABEL_61:
        ++v36;
        v39 += 4;
        if (v36 >= v35[160]) {
          goto LABEL_69;
        }
      }
    }
    int v38 = 0;
    int v37 = 0;
LABEL_69:
    a1[1] = v38;
    if (v35[161])
    {
      unint64_t v51 = 0;
      int v52 = 0;
      int v53 = v35 + 66;
      while (1)
      {
        int v54 = *((__int16 *)v53 - 1) + a6;
        uint64_t v55 = (uint64_t *)sub_1D0C99620(v73, v54);
        uint64_t v57 = *v55;
        int v56 = (std::__shared_weak_count *)v55[1];
        if (v56) {
          atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v58 = v72;
        uint64_t v71 = v57;
        int v72 = v56;
        if (v58) {
          sub_1D0C4C984(v58);
        }
        uint64_t v21 = sub_1D0C996E8(v70, v54, *v53);
        if (v21) {
          goto LABEL_93;
        }
        uint64_t v59 = v71;
        if (v71 && (sub_1D0C99830(v73, v54) & 1) == 0)
        {
          uint64_t v61 = v72;
          int v60 = a4;
          if (*v53)
          {
            if (v72) {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(void *)&a1[4 * v52 + 70] = v59;
            unsigned __int8 v62 = &a1[4 * v52];
            int v63 = (std::__shared_weak_count *)*((void *)v62 + 36);
            *((void *)v62 + 36) = v61;
            ++v52;
            if (!v63) {
              goto LABEL_84;
            }
          }
          else
          {
            if (v72) {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(void *)&a1[4 * v37 + 198] = v59;
            uint64_t v64 = &a1[4 * v37];
            int v63 = (std::__shared_weak_count *)*((void *)v64 + 100);
            *((void *)v64 + 100) = v61;
            ++v37;
            if (!v63) {
              goto LABEL_84;
            }
          }
          sub_1D0C4C984(v63);
        }
        else
        {
          int v60 = a4;
        }
LABEL_84:
        ++v51;
        v53 += 4;
        if (v51 >= v60[161])
        {
          int v38 = a1[1];
          goto LABEL_91;
        }
      }
    }
    int v52 = 0;
LABEL_91:
    a1[2] = v52;
    a1[4] = v37;
    int v50 = v52 + v38;
    int v11 = a1[3];
  }
  else
  {
    int v50 = 0;
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  uint64_t v21 = 0;
  *a1 = v50 + v11;
LABEL_93:
  if (v72) {
    sub_1D0C4C984(v72);
  }
  return v21;
}

void sub_1D0C99600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1D0C4C984(a15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1D0C99620(uint64_t a1, int a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643348, memory_order_acquire) & 1) == 0)
  {
    uint64_t v9 = a1;
    int v8 = a2;
    int v6 = __cxa_guard_acquire(&qword_1EA643348);
    a2 = v8;
    int v7 = v6;
    a1 = v9;
    if (v7)
    {
      __cxa_atexit((void (*)(void *))sub_1D0C99904, &unk_1EA643338, &dword_1D0C3F000);
      __cxa_guard_release(&qword_1EA643348);
      a2 = v8;
      a1 = v9;
    }
  }
  uint64_t v2 = 32;
  int v3 = &unk_1EA643338;
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + v2);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 1024) == a2) {
        break;
      }
    }
    v2 += 16;
    if (v2 == 304) {
      return v3;
    }
  }
  return (void *)(a1 + v2);
}

uint64_t sub_1D0C996E8(void **a1, int a2, int a3)
{
  if (**a1) {
    return 0;
  }
  if (!a3)
  {
    if (dword_1EB671A40 >= 6)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unused reference with POC %d not found!\n", a2);
      syslog(30, "Unused reference with POC %d not found!\n", a2);
    }
    return 0;
  }
  uint64_t v6 = *a1[1];
  int v13 = a2;
  uint64_t v7 = *(void *)(v6 + 24);
  if (!v7) {
    sub_1D0C9987C();
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v7 + 48))(&v12);
  int v8 = *a1;
  long long v9 = v12;
  long long v12 = 0uLL;
  uint64_t v10 = (std::__shared_weak_count *)v8[1];
  *(_OWORD *)int v8 = v9;
  if (v10) {
    sub_1D0C4C984(v10);
  }
  if (*((void *)&v12 + 1)) {
    sub_1D0C4C984(*((std::__shared_weak_count **)&v12 + 1));
  }
  if (**a1) {
    return 0;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Failed to create missing reference for poc %d\n", a2);
    syslog(27, "Failed to create missing reference for poc %d\n", a2);
  }
  return 4294954387;
}

uint64_t sub_1D0C99830(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  for (uint64_t i = a1 + 32; !*(void *)i || *(_DWORD *)(*(void *)i + 1024) != a2; i += 16)
  {
    if (++v2 == 17) {
      return 0;
    }
  }
  if ((v2 & 0x80000000) == 0) {
    return (*(unsigned __int8 *)(a1 + v2 + 304) >> 1) & 1;
  }
  return 0;
}

void sub_1D0C9987C()
{
  exceptiounsigned int n = __cxa_allocate_exception(8uLL);
  void *exception = &unk_1F26F1638;
  __cxa_throw(exception, (struct type_info *)&unk_1F26F0F08, (void (*)(void *))std::exception::~exception);
}

void sub_1D0C998CC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1D25F0230);
}

uint64_t sub_1D0C99904(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1D0C4C984(v2);
  }
  return a1;
}

void sub_1D0C99934(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void *sub_1D0C99940()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F26F1E98;
  return result;
}

void sub_1D0C99978()
{
}

unsigned __int16 *sub_1D0C99990(unsigned __int16 *result, unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (char *)result;
    if (a3 == 2)
    {
      unsigned int v7 = *(a2 - 1);
      unsigned int v8 = *result;
      if (v7 < v8)
      {
        *__n128 result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v19 = (char *)a4;
      unint64_t v20 = a3 >> 1;
      uint64_t v21 = &result[a3 >> 1];
      unint64_t v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1D0C99BA8(result, v21, v22, a4);
        int v23 = (unsigned __int16 *)&v19[2 * v20];
        __n128 result = sub_1D0C99BA8((unsigned __int16 *)&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        char v24 = (unsigned __int16 *)&v19[2 * a3];
        uint64_t v25 = v23;
        while (v25 != v24)
        {
          unsigned int v26 = *v25;
          unsigned int v27 = *(unsigned __int16 *)v19;
          BOOL v28 = v26 < v27;
          BOOL v29 = v26 >= v27;
          if (v26 >= v27) {
            LOWORD(v26) = *(_WORD *)v19;
          }
          v19 += 2 * v29;
          v25 += v28;
          *(_WORD *)uint64_t v6 = v26;
          v6 += 2;
          if (v19 == (char *)v23)
          {
            if (v25 != v24)
            {
              uint64_t v30 = 0;
              do
              {
                *(_WORD *)&v6[v30 * 2] = v25[v30];
                ++v30;
              }
              while (&v25[v30] != v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          uint64_t v31 = 0;
          do
          {
            *(_WORD *)&v6[v31] = *(_WORD *)&v19[v31];
            v31 += 2;
          }
          while (&v19[v31] != (char *)v23);
        }
      }
      else
      {
        sub_1D0C99990(result, v21, v22, a4, a5);
        sub_1D0C99990(&v6[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return (unsigned __int16 *)sub_1D0C99D78(v6, &v6[2 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      uint64_t v10 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v11 = 2;
        long long v12 = result;
        do
        {
          unsigned int v13 = v12[1];
          unsigned int v14 = *v12;
          long long v12 = v10;
          if (v13 < v14)
          {
            uint64_t v15 = v11;
            while (1)
            {
              *(unsigned __int16 *)((char *)result + v15) = v14;
              uint64_t v16 = v15 - 2;
              if (v15 == 2) {
                break;
              }
              unsigned int v14 = *(unsigned __int16 *)((char *)result + v15 - 4);
              v15 -= 2;
              if (v13 >= v14)
              {
                char v17 = (unsigned __int16 *)((char *)result + v16);
                goto LABEL_15;
              }
            }
            char v17 = result;
LABEL_15:
            unsigned __int16 *v17 = v13;
          }
          uint64_t v10 = v12 + 1;
          v11 += 2;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

unsigned __int16 *sub_1D0C99BA8(unsigned __int16 *result, unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_9:
      *uint64_t v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      unsigned int v9 = *(a2 - 1);
      unsigned __int16 v8 = *(a2 - 1);
      unsigned int v10 = *result;
      BOOL v11 = v9 >= v10;
      if (v9 >= v10) {
        unsigned __int16 v8 = *result;
      }
      *a4 = v8;
      uint64_t v4 = a4 + 1;
      if (v11) {
        uint64_t v6 = a2 - 1;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v22 = &result[a3 >> 1];
      sub_1D0C99990(result, v22, a3 >> 1, a4, a3 >> 1);
      __n128 result = (unsigned __int16 *)sub_1D0C99990(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      int v23 = &v6[a3 >> 1];
      while (v23 != a2)
      {
        unsigned int v24 = *v23;
        unsigned int v25 = *v6;
        BOOL v26 = v24 >= v25;
        BOOL v27 = v24 < v25;
        if (v24 >= v25) {
          LOWORD(v24) = *v6;
        }
        v23 += v27;
        v6 += v26;
        *v4++ = v24;
        if (v6 == v22)
        {
          if (v23 != a2)
          {
            uint64_t v28 = 0;
            do
            {
              v4[v28] = v23[v28];
              ++v28;
            }
            while (&v23[v28] != a2);
          }
          return result;
        }
      }
      if (v6 != v22)
      {
        uint64_t v29 = 0;
        do
        {
          v4[v29] = v6[v29];
          ++v29;
        }
        while (&v6[v29] != v22);
      }
    }
    else if (result != a2)
    {
      long long v12 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        unsigned int v14 = a4;
        uint64_t v15 = a4;
        do
        {
          unsigned int v17 = *v15++;
          unsigned __int16 v16 = v17;
          unsigned int v18 = *v12;
          if (v18 >= v17)
          {
            *uint64_t v15 = v18;
          }
          else
          {
            v14[1] = v16;
            uint64_t v19 = a4;
            if (v14 != a4)
            {
              uint64_t v20 = v13;
              while (1)
              {
                uint64_t v19 = (unsigned __int16 *)((char *)a4 + v20);
                unsigned int v21 = *(unsigned __int16 *)((char *)a4 + v20 - 2);
                if (*v12 >= v21) {
                  break;
                }
                *uint64_t v19 = v21;
                v20 -= 2;
                if (!v20)
                {
                  uint64_t v19 = a4;
                  break;
                }
              }
            }
            *uint64_t v19 = *v12;
          }
          ++v12;
          v13 += 2;
          unsigned int v14 = v15;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_1D0C99D78(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    BOOL v11 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      unsigned int v12 = *(unsigned __int16 *)a2;
      while (1)
      {
        unsigned int v13 = *(unsigned __int16 *)v11;
        if (v12 < v13) {
          break;
        }
        v11 += 2;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(_WORD *)BOOL v11 = v12;
          *(_WORD *)a2 = v13;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v24 = a4;
        }
        else {
          uint64_t v24 = a4 + 1;
        }
        unsigned __int16 v16 = (unsigned __int16 *)&v11[v24 & 0xFFFFFFFFFFFFFFFELL];
        uint64_t v15 = a3;
        if (a3 != a2)
        {
          unint64_t v25 = (a3 - a2) >> 1;
          uint64_t v15 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            BOOL v27 = (unsigned __int16 *)&v15[2 * (v25 >> 1)];
            unsigned int v29 = *v27;
            uint64_t v28 = v27 + 1;
            v25 += ~(v25 >> 1);
            if (v29 < *v16) {
              uint64_t v15 = (char *)v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v23 = v24 >> 1;
        uint64_t v22 = (v15 - a2) >> 1;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v14 = v8;
        }
        else {
          uint64_t v14 = v8 + 1;
        }
        uint64_t v15 = &a2[v14 & 0xFFFFFFFFFFFFFFFELL];
        unsigned __int16 v16 = (unsigned __int16 *)a2;
        if (a2 != v11)
        {
          unint64_t v17 = (a2 - v11) >> 1;
          unsigned __int16 v16 = (unsigned __int16 *)v11;
          do
          {
            unint64_t v18 = v17 >> 1;
            uint64_t v19 = &v16[v17 >> 1];
            unsigned int v21 = *v19;
            uint64_t v20 = v19 + 1;
            v17 += ~(v17 >> 1);
            if (*(unsigned __int16 *)v15 < v21) {
              unint64_t v17 = v18;
            }
            else {
              unsigned __int16 v16 = v20;
            }
          }
          while (v17);
        }
        uint64_t v22 = v14 >> 1;
        uint64_t v23 = ((char *)v16 - v11) >> 1;
      }
      uint64_t v30 = (unsigned __int16 *)v15;
      if (v16 != (unsigned __int16 *)a2)
      {
        uint64_t v30 = v16;
        if (a2 != v15)
        {
          if (v16 + 1 == (unsigned __int16 *)a2)
          {
            unsigned __int16 v71 = *v16;
            int64_t v37 = v15 - a2;
            uint64_t v73 = v22;
            unsigned int v75 = a6;
            int v38 = a3;
            memmove(v16, a2, v15 - a2);
            uint64_t v22 = v73;
            a6 = v75;
            a3 = v38;
            uint64_t v30 = (unsigned __int16 *)((char *)v16 + v37);
            *uint64_t v30 = v71;
          }
          else if (a2 + 2 == v15)
          {
            unsigned __int16 v39 = *((_WORD *)v15 - 1);
            uint64_t v30 = v16 + 1;
            if (v15 - 2 != (char *)v16)
            {
              uint64_t v74 = v22;
              signed int v76 = a6;
              int v40 = a3;
              unsigned __int16 v72 = *((_WORD *)v15 - 1);
              memmove(v16 + 1, v16, v15 - 2 - (char *)v16);
              unsigned __int16 v39 = v72;
              uint64_t v22 = v74;
              a6 = v76;
              a3 = v40;
            }
            *unsigned __int16 v16 = v39;
          }
          else
          {
            uint64_t v31 = (a2 - (char *)v16) >> 1;
            if (v31 == (v15 - a2) >> 1)
            {
              uint64_t v32 = 0;
              do
              {
                unsigned __int16 v33 = v16[v32];
                v16[v32] = *(_WORD *)&a2[v32 * 2];
                uint64_t v34 = (uint64_t)&v16[v32 + 1];
                *(_WORD *)&a2[v32 * 2] = v33;
                uint64_t v35 = (uint64_t)&a2[v32 * 2 + 2];
                ++v32;
              }
              while ((char *)v34 != a2 && v35 != (void)v15);
              uint64_t v30 = (unsigned __int16 *)a2;
            }
            else
            {
              uint64_t v41 = (v15 - a2) >> 1;
              uint64_t v42 = (a2 - (char *)v16) >> 1;
              do
              {
                uint64_t v43 = v42;
                uint64_t v42 = v41;
                uint64_t v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                int v44 = &v16[v42];
                do
                {
                  unsigned __int16 v46 = *--v44;
                  unsigned __int16 v45 = v46;
                  uint64_t v47 = &v44[v31];
                  uint64_t v48 = v44;
                  do
                  {
                    int v49 = v48;
                    uint64_t v48 = v47;
                    *int v49 = *v47;
                    BOOL v50 = __OFSUB__(v31, (v15 - (char *)v47) >> 1);
                    uint64_t v52 = v31 - ((v15 - (char *)v47) >> 1);
                    char v51 = (v52 < 0) ^ v50;
                    uint64_t v47 = &v16[v52];
                    if (v51) {
                      uint64_t v47 = &v48[v31];
                    }
                  }
                  while (v47 != v44);
                  unsigned __int16 *v48 = v45;
                }
                while (v44 != v16);
              }
              uint64_t v30 = &v16[(v15 - a2) >> 1];
            }
          }
        }
      }
      a4 -= v23;
      v8 -= v22;
      if (v23 + v22 >= a4 + v8)
      {
        uint64_t v56 = a4;
        uint64_t v57 = v22;
        int v54 = a6;
        __n128 result = (char *)sub_1D0C99D78(v30, v15, a3, v56, v8, a6, a7);
        uint64_t v15 = (char *)v16;
        uint64_t v8 = v57;
        a4 = v23;
        a3 = (char *)v30;
      }
      else
      {
        int v53 = v11;
        int v54 = a6;
        uint64_t v55 = a3;
        __n128 result = (char *)sub_1D0C99D78(v53, v16, v30, v23, v22, a6, a7);
        a3 = v55;
        BOOL v11 = (char *)v30;
      }
      a2 = v15;
      a6 = v54;
      if (!v8) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        uint64_t v64 = 0;
        do
        {
          *(_WORD *)&a6[v64] = *(_WORD *)&v11[v64];
          v64 += 2;
        }
        while (&v11[v64] != a2);
        char v65 = &a6[v64];
        if (v65 != a6)
        {
          while (a2 != a3)
          {
            unsigned int v66 = *(unsigned __int16 *)a2;
            unsigned int v67 = *(unsigned __int16 *)a6;
            BOOL v68 = v66 < v67;
            BOOL v69 = v66 >= v67;
            if (v66 >= v67) {
              LOWORD(v66) = *(_WORD *)a6;
            }
            a6 += 2 * v69;
            a2 += 2 * v68;
            *(_WORD *)BOOL v11 = v66;
            v11 += 2;
            if (a6 == v65) {
              return result;
            }
          }
          return (char *)memmove(v11, a6, v65 - a6);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v58 = 0;
      do
      {
        *(_WORD *)&a6[v58] = *(_WORD *)&a2[v58];
        v58 += 2;
      }
      while (&a2[v58] != a3);
      uint64_t v59 = &a6[v58];
      if (v59 != a6)
      {
        int v60 = a3 - 2;
        while (a2 != v11)
        {
          unsigned int v61 = *((unsigned __int16 *)v59 - 1);
          unsigned int v62 = *((unsigned __int16 *)a2 - 1);
          BOOL v63 = v61 >= v62;
          if (v61 <= v62) {
            LOWORD(v61) = *((_WORD *)a2 - 1);
          }
          if (v63) {
            v59 -= 2;
          }
          else {
            a2 -= 2;
          }
          *(_WORD *)int v60 = v61;
          v60 -= 2;
          if (v59 == a6) {
            return result;
          }
        }
        uint64_t v70 = 0;
        do
        {
          *(_WORD *)&v60[v70] = *(_WORD *)&v59[v70 - 2];
          v70 -= 2;
        }
        while (&v59[v70] != a6);
      }
    }
  }
  return result;
}

void *sub_1D0C9A200(uint64_t a1, unsigned __int8 a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA6433A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = a1;
    unsigned __int8 v10 = a2;
    int v8 = __cxa_guard_acquire(&qword_1EA6433A8);
    a2 = v10;
    int v9 = v8;
    a1 = v11;
    if (v9)
    {
      __cxa_atexit((void (*)(void *))sub_1D0C99904, &unk_1EA643398, &dword_1D0C3F000);
      __cxa_guard_release(&qword_1EA6433A8);
      a2 = v10;
      a1 = v11;
    }
  }
  uint64_t v2 = 0;
  int v3 = (uint64_t *)(a1 + 32);
  int v4 = -1;
  int v5 = -1;
  do
  {
    uint64_t v6 = *v3;
    if (*v3 && *(_DWORD *)(v6 + 1024) > v5 && *(_DWORD *)(v6 + 36) == a2)
    {
      int v5 = *(_DWORD *)(v6 + 1024);
      int v4 = v2;
    }
    ++v2;
    v3 += 2;
  }
  while (v2 != 17);
  if (v4 == -1) {
    return &unk_1EA643398;
  }
  else {
    return (void *)(a1 + 16 * v4 + 32);
  }
}

void sub_1D0C9A2F0(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 312) = 0;
    *(unsigned char *)(a1 + 320) = 0;
    int v2 = a2[1];
    if (v2 >= 1)
    {
      for (uint64_t i = 0; i < v2; ++i)
      {
        uint64_t v4 = 0;
        uint64_t v5 = a1 + 32;
        while (!*(void *)v5 || *(_DWORD *)(*(void *)v5 + 1024) != *(_DWORD *)(*(void *)&a2[4 * i + 6] + 1024))
        {
          ++v4;
          v5 += 16;
          if (v4 == 17) {
            goto LABEL_11;
          }
        }
        if ((v4 & 0x80000000) == 0)
        {
          *(unsigned char *)(a1 + v4 + 304) = 1;
          int v2 = a2[1];
        }
LABEL_11:
        ;
      }
    }
    int v6 = a2[2];
    if (v6 >= 1)
    {
      for (uint64_t j = 0; j < v6; ++j)
      {
        uint64_t v8 = 0;
        uint64_t v9 = a1 + 32;
        while (!*(void *)v9
             || *(_DWORD *)(*(void *)v9 + 1024) != *(_DWORD *)(*(void *)&a2[4 * j + 70] + 1024))
        {
          ++v8;
          v9 += 16;
          if (v8 == 17) {
            goto LABEL_21;
          }
        }
        if ((v8 & 0x80000000) == 0)
        {
          *(unsigned char *)(a1 + v8 + 304) = 1;
          int v6 = a2[2];
        }
LABEL_21:
        ;
      }
    }
    int v10 = a2[4];
    if (v10 >= 1)
    {
      for (uint64_t k = 0; k < v10; ++k)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a1 + 32;
        while (!*(void *)v13
             || *(_DWORD *)(*(void *)v13 + 1024) != *(_DWORD *)(*(void *)&a2[4 * k + 198] + 1024))
        {
          ++v12;
          v13 += 16;
          if (v12 == 17) {
            goto LABEL_31;
          }
        }
        if ((v12 & 0x80000000) == 0)
        {
          *(unsigned char *)(a1 + v12 + 304) = 1;
          int v10 = a2[4];
        }
LABEL_31:
        ;
      }
    }
    int v14 = a2[3];
    if (v14 >= 1)
    {
      for (uint64_t m = 0; m < v14; ++m)
      {
        uint64_t v16 = 0;
        uint64_t v17 = a1 + 32;
        while (!*(void *)v17
             || *(_DWORD *)(*(void *)v17 + 1024) != *(_DWORD *)(*(void *)&a2[4 * m + 134] + 1024))
        {
          ++v16;
          v17 += 16;
          if (v16 == 17) {
            goto LABEL_41;
          }
        }
        if ((v16 & 0x80000000) == 0)
        {
          *(unsigned char *)(a1 + v16 + 304) = 2;
          int v14 = a2[3];
        }
LABEL_41:
        ;
      }
    }
    int v18 = a2[5];
    if (v18 >= 1)
    {
      for (uint64_t n = 0; n < v18; ++n)
      {
        uint64_t v20 = 0;
        uint64_t v21 = a1 + 32;
        while (!*(void *)v21
             || *(_DWORD *)(*(void *)v21 + 1024) != *(_DWORD *)(*(void *)&a2[4 * n + 262] + 1024))
        {
          ++v20;
          v21 += 16;
          if (v20 == 17) {
            goto LABEL_51;
          }
        }
        if ((v20 & 0x80000000) == 0)
        {
          *(unsigned char *)(a1 + v20 + 304) = 2;
          int v18 = a2[5];
        }
LABEL_51:
        ;
      }
    }
  }
  else if (dword_1EB671A40 >= 3)
  {
    fwrite("MarkRefs gets invalid combined RPS!\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "MarkRefs gets invalid combined RPS!\n");
  }
}

uint64_t sub_1D0C9A58C(uint64_t a1)
{
  int v1 = 0;
  for (uint64_t i = 32; i != 304; i += 16)
  {
    uint64_t v3 = *(void *)(a1 + i);
    if (v3)
    {
      uint64_t v4 = a1 + 4 * v1++;
      *(_DWORD *)(v4 + 324) = *(_DWORD *)(v3 + 1024);
    }
  }
  uint64_t v5 = a1 + 324;
  unint64_t v6 = v1;
  unsigned int v7 = (int *)(a1 + 324 + 4 * v1);
  int v14 = (uint64_t (*)(int *, int *))sub_1D0C9B02C;
  if (v1 < 129)
  {
LABEL_9:
    uint64_t v12 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v9 = v1;
    while (1)
    {
      int v10 = (int *)operator new(4 * v9, v8);
      if (v10) {
        break;
      }
      BOOL v11 = v9 > 1;
      v9 >>= 1;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = v10;
  }
  sub_1D0C9A690(v5, v7, &v14, v6, v12, v9);
  if (v12) {
    operator delete(v12);
  }
  return v5;
}

void sub_1D0C9A678(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0C9A690(uint64_t result, int *a2, uint64_t (**a3)(int *, int *), unint64_t a4, int *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = (int *)result;
    if (a4 == 2)
    {
      unint64_t v9 = a2 - 1;
      __n128 result = (*a3)(a2 - 1, (int *)result);
      if (result)
      {
        int v10 = *v8;
        *uint64_t v8 = *v9;
        *unint64_t v9 = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v19 = (char *)a5;
      unint64_t v20 = a4 >> 1;
      uint64_t v21 = (int *)(result + 4 * (a4 >> 1));
      unint64_t v22 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1D0C9A908((int *)result, v21, a3, v22, a5);
        uint64_t v23 = (int *)&v19[4 * v20];
        __n128 result = (uint64_t)sub_1D0C9A908(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23);
        uint64_t v24 = &v19[4 * a4];
        unint64_t v25 = v23;
        while (v25 != (int *)v24)
        {
          __n128 result = (*a3)(v25, (int *)v19);
          if (result) {
            unint64_t v26 = (char *)v25;
          }
          else {
            unint64_t v26 = v19;
          }
          v19 += 4 * (result ^ 1);
          v25 += result;
          *v8++ = *(_DWORD *)v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (int *)v24)
            {
              uint64_t v27 = 0;
              do
              {
                v8[v27] = v25[v27];
                ++v27;
              }
              while (&v25[v27] != (int *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          uint64_t v28 = 0;
          do
          {
            v8[v28] = *(_DWORD *)&v19[v28 * 4];
            ++v28;
          }
          while (&v19[v28 * 4] != (char *)v23);
        }
      }
      else
      {
        sub_1D0C9A690(result, v21, a3, v22, a5, a6);
        sub_1D0C9A690(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v19, a6);
        return sub_1D0C9AB18((uint64_t)v8, &v8[a4 >> 1], a2, (uint64_t (**)(void, void))a3, a4 >> 1, a4 - (a4 >> 1), v19, a6);
      }
    }
    else if ((int *)result != a2)
    {
      uint64_t v12 = (int *)(result + 4);
      if ((int *)(result + 4) != a2)
      {
        uint64_t v13 = 0;
        int v14 = (int *)result;
        do
        {
          uint64_t v15 = v14;
          int v14 = v12;
          __n128 result = (*a3)(v12, v15);
          if (result)
          {
            int v29 = *v14;
            uint64_t v16 = v13;
            while (1)
            {
              *(int *)((char *)v8 + v16 + 4) = *(int *)((char *)v8 + v16);
              if (!v16) {
                break;
              }
              v16 -= 4;
              __n128 result = (*a3)(&v29, (int *)((char *)v8 + v16));
              if ((result & 1) == 0)
              {
                uint64_t v17 = (int *)((char *)v8 + v16 + 4);
                goto LABEL_15;
              }
            }
            uint64_t v17 = v8;
LABEL_15:
            int *v17 = v29;
          }
          uint64_t v12 = v14 + 1;
          v13 += 4;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

int *sub_1D0C9A908(int *result, int *a2, uint64_t (**a3)(int *, int *), unint64_t a4, int *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    unsigned int v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      int *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      int v10 = a2 - 1;
      __n128 result = (int *)(*a3)(a2 - 1, result);
      if (result) {
        BOOL v11 = v10;
      }
      else {
        BOOL v11 = v7;
      }
      *v5++ = *v11;
      if (!result) {
        unsigned int v7 = v10;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v19 = &result[a4 >> 1];
      sub_1D0C9A690(result, v19, a3, a4 >> 1, a5, a4 >> 1);
      __n128 result = (int *)sub_1D0C9A690(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v20 = &v7[a4 >> 1];
      while (v20 != a2)
      {
        __n128 result = (int *)(*a3)(v20, v7);
        if (result) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = v7;
        }
        v20 += result;
        v7 += result ^ 1;
        *v5++ = *v21;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v22 = 0;
            do
            {
              v5[v22] = v20[v22];
              ++v22;
            }
            while (&v20[v22] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v23 = 0;
        do
        {
          v5[v23] = v7[v23];
          ++v23;
        }
        while (&v7[v23] != v19);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        int v14 = a5;
        do
        {
          uint64_t v15 = v14++;
          __n128 result = (int *)(*a3)(v12, v15);
          uint64_t v16 = v14;
          if (result)
          {
            v15[1] = *v15;
            uint64_t v16 = v5;
            if (v15 != v5)
            {
              uint64_t v17 = v13;
              while (1)
              {
                uint64_t v16 = (int *)((char *)v5 + v17);
                __n128 result = (int *)(*a3)(v12, (int *)((char *)v5 + v17 - 4));
                if (!result) {
                  break;
                }
                *(int *)((char *)v5 + v17) = *(int *)((char *)v5 + v17 - 4);
                v17 -= 4;
                if (!v17)
                {
                  uint64_t v16 = v5;
                  break;
                }
              }
            }
          }
          int v18 = *v12++;
          *uint64_t v16 = v18;
          v13 += 4;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1D0C9AB18(uint64_t result, _DWORD *a2, _DWORD *a3, uint64_t (**a4)(void, void), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  uint64_t v15 = (_DWORD *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    while (1)
    {
      __n128 result = (*a4)(a2, v15);
      if (result) {
        break;
      }
      ++v15;
      if (!--a5) {
        return result;
      }
    }
    __srCC_MD5_CTX c = a7;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        int v65 = *v15;
        *uint64_t v15 = *a2;
        *a2 = v65;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v22 = a5;
      }
      else {
        uint64_t v22 = a5 + 1;
      }
      uint64_t v72 = v22 >> 1;
      unint64_t v20 = &v15[v22 >> 1];
      if (a3 == a2)
      {
        int v18 = a3;
        uint64_t v27 = a3;
      }
      else
      {
        uint64_t v69 = v10;
        uint64_t v68 = a8;
        uint64_t v23 = (uint64_t (*)(_DWORD *, _DWORD *))*a4;
        unint64_t v24 = a3 - a2;
        int v18 = a2;
        do
        {
          unint64_t v25 = &v18[v24 >> 1];
          int v26 = v23(v25, v20);
          if (v26) {
            v24 += ~(v24 >> 1);
          }
          else {
            v24 >>= 1;
          }
          if (v26) {
            int v18 = v25 + 1;
          }
        }
        while (v24);
        uint64_t v27 = a2;
        a8 = v68;
        uint64_t v10 = v69;
      }
      uint64_t v17 = v18 - v27;
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = v10 + 1;
      }
      uint64_t v17 = v16 >> 1;
      int v18 = &a2[v16 >> 1];
      if (a2 == v15)
      {
        unint64_t v20 = a2;
        uint64_t v21 = a2;
      }
      else
      {
        uint64_t v71 = v16 >> 1;
        uint64_t v67 = a8;
        unint64_t v19 = a2 - v15;
        unint64_t v20 = v15;
        do
        {
          if ((*a4)(v18, &v20[v19 >> 1]))
          {
            v19 >>= 1;
          }
          else
          {
            v20 += (v19 >> 1) + 1;
            v19 += ~(v19 >> 1);
          }
        }
        while (v19);
        uint64_t v21 = v15;
        a8 = v67;
        uint64_t v17 = v71;
      }
      uint64_t v72 = v20 - v21;
    }
    uint64_t v28 = v18;
    if (v20 != a2)
    {
      uint64_t v28 = v20;
      if (a2 != v18)
      {
        if (v20 + 1 == a2)
        {
          uint64_t v70 = v10;
          int v35 = *v20;
          int64_t v36 = (char *)v18 - (char *)a2;
          int64_t v37 = a2;
          size_t v38 = (char *)v18 - (char *)a2;
          uint64_t v39 = v17;
          memmove(v20, v37, v38);
          uint64_t v17 = v39;
          uint64_t v28 = (_DWORD *)((char *)v20 + v36);
          *uint64_t v28 = v35;
        }
        else
        {
          if (a2 + 1 != v18)
          {
            uint64_t v29 = a2 - v20;
            if (v29 == v18 - a2)
            {
              uint64_t v30 = 0;
              do
              {
                int v31 = v20[v30];
                v20[v30] = a2[v30];
                uint64_t v32 = (uint64_t)&v20[v30 + 1];
                a2[v30] = v31;
                uint64_t v33 = (uint64_t)&a2[++v30];
              }
              while ((_DWORD *)v32 != a2 && v33 != (void)v18);
              uint64_t v28 = a2;
            }
            else
            {
              uint64_t v43 = v18 - a2;
              uint64_t v44 = a2 - v20;
              do
              {
                uint64_t v45 = v44;
                uint64_t v44 = v43;
                uint64_t v43 = v45 % v43;
              }
              while (v43);
              if (v44)
              {
                unsigned __int16 v46 = &v20[v44];
                do
                {
                  int v48 = *--v46;
                  int v47 = v48;
                  int v49 = &v46[v29];
                  BOOL v50 = v46;
                  do
                  {
                    char v51 = v50;
                    BOOL v50 = v49;
                    *char v51 = *v49;
                    BOOL v52 = __OFSUB__(v29, v18 - v49);
                    uint64_t v54 = v29 - (v18 - v49);
                    char v53 = (v54 < 0) ^ v52;
                    int v49 = &v20[v54];
                    if (v53) {
                      int v49 = &v50[v29];
                    }
                  }
                  while (v49 != v46);
                  *BOOL v50 = v47;
                }
                while (v46 != v20);
              }
              uint64_t v28 = &v20[v18 - a2];
            }
            goto LABEL_64;
          }
          uint64_t v70 = v10;
          uint64_t v40 = a8;
          int v41 = *(v18 - 1);
          uint64_t v28 = v20 + 1;
          if (v18 - 1 != v20)
          {
            uint64_t v42 = v17;
            memmove(v20 + 1, v20, (char *)(v18 - 1) - (char *)v20);
            uint64_t v17 = v42;
          }
          *unint64_t v20 = v41;
          a8 = v40;
        }
        uint64_t v10 = v70;
      }
    }
LABEL_64:
    a5 -= v72;
    v10 -= v17;
    if (v72 + v17 >= a5 + v10)
    {
      uint64_t v56 = a3;
      uint64_t v57 = v17;
      __n128 result = sub_1D0C9AB18(v28, v18, v56, a4, a5, v10, __src, a8);
      int v18 = v20;
      a7 = __src;
      uint64_t v10 = v57;
      a5 = v72;
      a3 = v28;
    }
    else
    {
      uint64_t v55 = v20;
      a7 = __src;
      __n128 result = sub_1D0C9AB18(v15, v55, v28, a4, v72, v17, __src, a8);
      uint64_t v15 = v28;
    }
    a2 = v18;
    if (!v10) {
      return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      uint64_t v62 = 0;
      do
      {
        *(_DWORD *)&a7[v62 * 4] = v15[v62];
        ++v62;
      }
      while (&v15[v62] != a2);
      BOOL v63 = &a7[v62 * 4];
      if (&a7[v62 * 4] != a7)
      {
        while (a2 != a3)
        {
          __n128 result = (*a4)(a2, a7);
          if (result) {
            uint64_t v64 = (char *)a2;
          }
          else {
            uint64_t v64 = a7;
          }
          a7 += 4 * (result ^ 1);
          a2 += result;
          *v15++ = *(_DWORD *)v64;
          if (a7 == v63) {
            return result;
          }
        }
        return (uint64_t)memmove(v15, a7, v63 - a7);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v58 = 0;
    do
    {
      *(_DWORD *)&a7[v58 * 4] = a2[v58];
      ++v58;
    }
    while (&a2[v58] != a3);
    uint64_t v59 = &a7[v58 * 4];
    if (&a7[v58 * 4] != a7)
    {
      int v60 = a3 - 1;
      while (a2 != v15)
      {
        __n128 result = (*a4)(v59 - 4, a2 - 1);
        if (result) {
          unsigned int v61 = (char *)a2;
        }
        else {
          unsigned int v61 = v59;
        }
        if (result) {
          --a2;
        }
        else {
          v59 -= 4;
        }
        *v60-- = *((_DWORD *)v61 - 1);
        if (v59 == a7) {
          return result;
        }
      }
      uint64_t v66 = 0;
      do
      {
        v60[v66] = *(_DWORD *)&v59[v66 * 4 - 4];
        --v66;
      }
      while (&v59[v66 * 4] != a7);
    }
  }
  return result;
}

BOOL sub_1D0C9B02C(_DWORD *a1, _DWORD *a2)
{
  return *a1 > *a2;
}

uint64_t sub_1D0C9B040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  uint64_t v9 = a1 + 8 * a7;
  uint64_t v10 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (a9 == 1) {
    uint64_t v10 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 64);
  }
  BOOL v11 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 296);
  if (!a8) {
    BOOL v11 = v10;
  }
  return (*v11)(a2, a3, a4, a5, a6);
}

void *sub_1D0C9B080(void *result)
{
  result[43] = sub_1D0C9B51C;
  result[44] = sub_1D0C9B4B0;
  result[45] = sub_1D0C9B444;
  result[28] = sub_1D0C9B418;
  result[29] = sub_1D0C9B3EC;
  result[38] = sub_1D0C9B2E0;
  result[49] = sub_1D0C9B1C4;
  result[13] = sub_1D0D778D0;
  result[14] = sub_1D0D77860;
  result[15] = sub_1D0D777F0;
  result[16] = sub_1D0D77758;
  result[17] = sub_1D0D7724C;
  result[18] = sub_1D0D76CA0;
  result[19] = sub_1D0D76698;
  result[21] = sub_1D0D6E5FC;
  result[26] = sub_1D0D6E5E8;
  result[27] = sub_1D0D6E5D0;
  result[35] = sub_1D0D7657C;
  result[36] = sub_1D0D76454;
  result[37] = sub_1D0D7632C;
  return result;
}

uint64_t sub_1D0C9B1C4(uint64_t result, int a2, int a3)
{
  int v3 = 1 << a2;
  char v4 = a2 - 3;
  char v5 = 3 - a2;
  int v6 = 1 << (2 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      int v7 = 0;
      if (v3 <= 1) {
        unsigned int v8 = 1;
      }
      else {
        unsigned int v8 = 1 << a2;
      }
      uint64_t v9 = 2 * v3;
      do
      {
        uint64_t v10 = 0;
        int v11 = 0;
        do
        {
          int v12 = *(__int16 *)(result + v10);
          int v13 = (v6 + v12) >> v5;
          int v14 = v12 << v4;
          if (a2 < 3) {
            int v14 = v13;
          }
          v11 += v14;
          if (v11 >= 0x7FFF) {
            int v15 = 0x7FFF;
          }
          else {
            int v15 = v11;
          }
          if (v15 <= -32768) {
            LOWORD(v15) = 0x8000;
          }
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    int v16 = 0;
    if (v3 <= 1) {
      int v17 = 1;
    }
    else {
      int v17 = 1 << a2;
    }
    do
    {
      int v18 = 0;
      int v19 = 0;
      do
      {
        int v20 = (v18 << a2) + v16;
        int v21 = *(__int16 *)(result + 2 * v20);
        int v22 = (v6 + v21) >> v5;
        int v23 = v21 << v4;
        if (a2 < 3) {
          int v23 = v22;
        }
        v19 += v23;
        if (v19 >= 0x7FFF) {
          int v24 = 0x7FFF;
        }
        else {
          int v24 = v19;
        }
        if (v24 <= -32768) {
          LOWORD(v24) = 0x8000;
        }
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

void sub_1D0C9B2E0(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = a3 - 2048;
  int v11 = (_WORD *)(a1 + 2);
  uint64_t v12 = 2 * a2;
  do
  {
    uint64_t v13 = 0;
    int v14 = &a3[v8];
    int v15 = v11;
    do
    {
      int v16 = *(__int16 *)&v14[v13];
      int v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        int v18 = *(__int16 *)&v14[v13 - 2048] << 12 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      int v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 4095) {
        int v19 = 4095;
      }
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      int v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 4095) {
        int v20 = 4095;
      }
      *int v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    int v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5) {
    bzero(v10, 0x800uLL);
  }
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

int16x8_t sub_1D0C9B3EC(uint64_t a1)
{
  for (uint64_t i = 0; i != 2048; i += 16)
  {
    int16x8_t result = vqmovn_high_s32(vqmovn_s32(vshll_n_s16(*(int16x4_t *)(a1 + i), 2uLL)), vshll_high_n_s16(*(int16x8_t *)(a1 + i), 2uLL));
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

int16x8_t sub_1D0C9B418(uint64_t a1)
{
  for (uint64_t i = 0; i != 512; i += 16)
  {
    int16x8_t result = vqmovn_high_s32(vqmovn_s32(vshll_n_s16(*(int16x4_t *)(a1 + i), 1uLL)), vshll_high_n_s16(*(int16x8_t *)(a1 + i), 1uLL));
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

uint64_t sub_1D0C9B444(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  int v7 = (__int16 *)(result + 2);
  uint64_t v8 = (__int16 *)(a3 + 2);
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = v8;
    int v11 = v7;
    do
    {
      *(_WORD *)(a5 + v9) = *(v11 - 1) - *(v10 - 1);
      __int16 v13 = *v11;
      v11 += 2;
      __int16 v12 = v13;
      __int16 v14 = *v10;
      v10 += 2;
      *(_WORD *)(a6 + v9) = v12 - v14;
      v9 += 2;
    }
    while (v9 != 32);
    ++v6;
    a6 += 32;
    a5 += 32;
    v7 += a2;
    v8 += a4;
  }
  while (v6 != 16);
  return result;
}

uint64_t sub_1D0C9B4B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  int v7 = (__int16 *)(result + 2);
  uint64_t v8 = (__int16 *)(a3 + 2);
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = v8;
    int v11 = v7;
    do
    {
      *(_WORD *)(a5 + v9) = *(v11 - 1) - *(v10 - 1);
      __int16 v13 = *v11;
      v11 += 2;
      __int16 v12 = v13;
      __int16 v14 = *v10;
      v10 += 2;
      *(_WORD *)(a6 + v9) = v12 - v14;
      v9 += 2;
    }
    while (v9 != 16);
    ++v6;
    a6 += 16;
    a5 += 16;
    v7 += a2;
    v8 += a4;
  }
  while (v6 != 8);
  return result;
}

uint64_t sub_1D0C9B51C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  int v7 = (__int16 *)(result + 2);
  uint64_t v8 = (__int16 *)(a3 + 2);
  do
  {
    uint64_t v9 = 0;
    uint64_t v10 = v8;
    int v11 = v7;
    do
    {
      *(_WORD *)(a5 + v9) = *(v11 - 1) - *(v10 - 1);
      __int16 v13 = *v11;
      v11 += 2;
      __int16 v12 = v13;
      __int16 v14 = *v10;
      v10 += 2;
      *(_WORD *)(a6 + v9) = v12 - v14;
      v9 += 2;
    }
    while (v9 != 8);
    ++v6;
    a6 += 8;
    a5 += 8;
    v7 += a2;
    v8 += a4;
  }
  while (v6 != 4);
  return result;
}

void (**sub_1D0C9B588(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B418;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B3EC;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B818;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B7A8;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B73C;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B1C4;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6FFBC;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6FCA8;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6FF64;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6FF0C;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6FE48;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6FD20;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6FC34;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6FB6C;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6FAA8;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6F978;
  *int16x8_t result = sub_1D0D6F7A4;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6F494;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6F0F4;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E610;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E5FC;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E5E8;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E5D0;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E578;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E44C;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E350;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E25C;
  return result;
}

uint64_t sub_1D0C9B73C(uint64_t result, int a2)
{
  if (a2 != 31)
  {
    int v2 = 0;
    int v3 = 1 << a2;
    if (1 << a2 <= 1) {
      int v3 = 1;
    }
    do
    {
      int v4 = 0;
      int v5 = 0;
      do
      {
        int v6 = (v4 << a2) + v2;
        v5 += *(__int16 *)(result + 2 * v6);
        if (v5 >= 0x7FFF) {
          int v7 = 0x7FFF;
        }
        else {
          int v7 = v5;
        }
        if (v7 <= -32768) {
          LOWORD(v7) = 0x8000;
        }
        *(_WORD *)(result + 2 * v6) = v7;
        ++v4;
      }
      while (v3 != v4);
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_1D0C9B7A8(uint64_t result, int a2)
{
  if (a2 != 31)
  {
    int v2 = 0;
    if (1 << a2 <= 1) {
      unsigned int v3 = 1;
    }
    else {
      unsigned int v3 = 1 << a2;
    }
    do
    {
      uint64_t v4 = 0;
      int v5 = 0;
      do
      {
        v5 += *(__int16 *)(result + v4);
        if (v5 >= 0x7FFF) {
          int v6 = 0x7FFF;
        }
        else {
          int v6 = v5;
        }
        if (v6 <= -32768) {
          LOWORD(v6) = 0x8000;
        }
        *(_WORD *)(result + v4) = v6;
        v4 += 2;
      }
      while (2 * v3 != v4);
      ++v2;
      result += 2 * (1 << a2);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_1D0C9B818(uint64_t result)
{
  uint64_t v1 = 0;
  for (uint64_t i = 30; i != 14; i -= 2)
  {
    __int16 v3 = *(_WORD *)(result + v1);
    *(_WORD *)(result + v1) = *(_WORD *)(result + i);
    *(_WORD *)(result + i) = v3;
    v1 += 2;
  }
  return result;
}

void *sub_1D0C9B844(void *result)
{
  result[43] = sub_1D0C9B51C;
  result[44] = sub_1D0C9B4B0;
  result[45] = sub_1D0C9B444;
  result[28] = nullsub_7;
  result[29] = sub_1D0C9BBB0;
  result[38] = sub_1D0C9BAA4;
  result[49] = sub_1D0C9B988;
  result[13] = sub_1D0D76254;
  result[14] = sub_1D0D761E4;
  result[15] = sub_1D0D76174;
  result[16] = sub_1D0D760DC;
  result[17] = sub_1D0D75BD0;
  result[18] = sub_1D0D75624;
  result[19] = sub_1D0D7501C;
  result[21] = sub_1D0D6C844;
  result[26] = sub_1D0D6C830;
  result[27] = sub_1D0D6C80C;
  result[35] = sub_1D0D74F00;
  result[36] = sub_1D0D74DD8;
  result[37] = sub_1D0D74CB0;
  return result;
}

uint64_t sub_1D0C9B988(uint64_t result, int a2, int a3)
{
  int v3 = 1 << a2;
  char v4 = a2 - 4;
  char v5 = 4 - a2;
  int v6 = 1 << (3 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      int v7 = 0;
      if (v3 <= 1) {
        unsigned int v8 = 1;
      }
      else {
        unsigned int v8 = 1 << a2;
      }
      uint64_t v9 = 2 * v3;
      do
      {
        uint64_t v10 = 0;
        int v11 = 0;
        do
        {
          int v12 = *(__int16 *)(result + v10);
          int v13 = (v6 + v12) >> v5;
          int v14 = v12 << v4;
          if (a2 < 4) {
            int v14 = v13;
          }
          v11 += v14;
          if (v11 >= 0x7FFF) {
            int v15 = 0x7FFF;
          }
          else {
            int v15 = v11;
          }
          if (v15 <= -32768) {
            LOWORD(v15) = 0x8000;
          }
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    int v16 = 0;
    if (v3 <= 1) {
      int v17 = 1;
    }
    else {
      int v17 = 1 << a2;
    }
    do
    {
      int v18 = 0;
      int v19 = 0;
      do
      {
        int v20 = (v18 << a2) + v16;
        int v21 = *(__int16 *)(result + 2 * v20);
        int v22 = (v6 + v21) >> v5;
        int v23 = v21 << v4;
        if (a2 < 4) {
          int v23 = v22;
        }
        v19 += v23;
        if (v19 >= 0x7FFF) {
          int v24 = 0x7FFF;
        }
        else {
          int v24 = v19;
        }
        if (v24 <= -32768) {
          LOWORD(v24) = 0x8000;
        }
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

void sub_1D0C9BAA4(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = a3 - 2048;
  int v11 = (_WORD *)(a1 + 2);
  uint64_t v12 = 2 * a2;
  do
  {
    uint64_t v13 = 0;
    int v14 = &a3[v8];
    int v15 = v11;
    do
    {
      int v16 = *(__int16 *)&v14[v13];
      int v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        int v18 = *(__int16 *)&v14[v13 - 2048] << 11 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      int v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 2047) {
        int v19 = 2047;
      }
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      int v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 2047) {
        int v20 = 2047;
      }
      *int v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    int v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5) {
    bzero(v10, 0x800uLL);
  }
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

int16x8_t sub_1D0C9BBB0(uint64_t a1)
{
  for (uint64_t i = 0; i != 2048; i += 16)
  {
    int16x8_t result = vqmovn_high_s32(vqmovn_s32(vshll_n_s16(*(int16x4_t *)(a1 + i), 1uLL)), vshll_high_n_s16(*(int16x8_t *)(a1 + i), 1uLL));
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

void (**sub_1D0C9BBE0(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))nullsub_7;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9BBB0;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B818;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B7A8;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B73C;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B988;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E204;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6DEF0;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E1AC;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E154;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6E090;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6DF68;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6DE7C;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6DDB4;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6DCF0;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6DBC0;
  *int16x8_t result = sub_1D0D6D9EC;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6D6DC;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6D33C;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C858;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C844;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C830;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C80C;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C7B4;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C688;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C58C;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C498;
  return result;
}

void *sub_1D0C9BD94(void *result)
{
  result[43] = sub_1D0C9B51C;
  result[44] = sub_1D0C9B4B0;
  result[45] = sub_1D0C9B444;
  result[28] = sub_1D0C9C104;
  result[29] = nullsub_8;
  result[38] = sub_1D0C9BFF4;
  result[49] = sub_1D0C9BED8;
  result[13] = sub_1D0D74BD8;
  result[14] = sub_1D0D74B68;
  result[15] = sub_1D0D74AF8;
  result[16] = sub_1D0D74A60;
  result[17] = sub_1D0D74554;
  result[18] = sub_1D0D73FA8;
  result[19] = sub_1D0D739A0;
  result[21] = sub_1D0D6AA80;
  result[26] = sub_1D0D6AA6C;
  result[27] = sub_1D0D6AA48;
  result[35] = sub_1D0D73884;
  result[36] = sub_1D0D7375C;
  result[37] = sub_1D0D73634;
  return result;
}

uint64_t sub_1D0C9BED8(uint64_t result, int a2, int a3)
{
  int v3 = 1 << a2;
  char v4 = a2 - 5;
  char v5 = 5 - a2;
  int v6 = 1 << (4 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      int v7 = 0;
      if (v3 <= 1) {
        unsigned int v8 = 1;
      }
      else {
        unsigned int v8 = 1 << a2;
      }
      uint64_t v9 = 2 * v3;
      do
      {
        uint64_t v10 = 0;
        int v11 = 0;
        do
        {
          int v12 = *(__int16 *)(result + v10);
          int v13 = (v6 + v12) >> v5;
          int v14 = v12 << v4;
          if (a2 < 5) {
            int v14 = v13;
          }
          v11 += v14;
          if (v11 >= 0x7FFF) {
            int v15 = 0x7FFF;
          }
          else {
            int v15 = v11;
          }
          if (v15 <= -32768) {
            LOWORD(v15) = 0x8000;
          }
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    int v16 = 0;
    if (v3 <= 1) {
      int v17 = 1;
    }
    else {
      int v17 = 1 << a2;
    }
    do
    {
      int v18 = 0;
      int v19 = 0;
      do
      {
        int v20 = (v18 << a2) + v16;
        int v21 = *(__int16 *)(result + 2 * v20);
        int v22 = (v6 + v21) >> v5;
        int v23 = v21 << v4;
        if (a2 < 5) {
          int v23 = v22;
        }
        v19 += v23;
        if (v19 >= 0x7FFF) {
          int v24 = 0x7FFF;
        }
        else {
          int v24 = v19;
        }
        if (v24 <= -32768) {
          LOWORD(v24) = 0x8000;
        }
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

void sub_1D0C9BFF4(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = a3 - 2048;
  int v11 = (_WORD *)(a1 + 2);
  uint64_t v12 = 2 * a2;
  do
  {
    uint64_t v13 = 0;
    int v14 = &a3[v8];
    int v15 = v11;
    do
    {
      int v16 = *(__int16 *)&v14[v13];
      int v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        int v18 = *(__int16 *)&v14[v13 - 2048] << 10 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      int v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 1023) {
        int v19 = 1023;
      }
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      int v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 1023) {
        int v20 = 1023;
      }
      *int v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    int v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5) {
    bzero(v10, 0x800uLL);
  }
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

uint64_t sub_1D0C9C104(uint64_t result)
{
  uint64_t v1 = 0;
  v2.i64[0] = 0x1000100010001;
  v2.i64[1] = 0x1000100010001;
  do
  {
    *(int16x8_t *)(result + v1) = vhaddq_s16(*(int16x8_t *)(result + v1), v2);
    v1 += 16;
  }
  while (v1 != 512);
  return result;
}

void (**sub_1D0C9C128(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9C104;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))nullsub_8;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B818;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B7A8;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B73C;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9BED8;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C440;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C12C;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C3E8;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C390;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C2CC;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C1A4;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6C0B8;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6BFF0;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6BF2C;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6BDFC;
  *int16x8_t result = sub_1D0D6BC28;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6B918;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6B578;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6AA94;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6AA80;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6AA6C;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6AA48;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A9F0;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A8C4;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A7C8;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A6D4;
  return result;
}

void *sub_1D0C9C2DC(void *result)
{
  result[43] = sub_1D0C9B51C;
  result[44] = sub_1D0C9B4B0;
  result[45] = sub_1D0C9B444;
  result[28] = sub_1D0C9C66C;
  result[29] = sub_1D0C9C648;
  result[38] = sub_1D0C9C53C;
  result[49] = sub_1D0C9C420;
  result[13] = sub_1D0D7355C;
  result[14] = sub_1D0D734EC;
  result[15] = sub_1D0D7347C;
  result[16] = sub_1D0D733E4;
  result[17] = sub_1D0D72ED8;
  result[18] = sub_1D0D7292C;
  result[19] = sub_1D0D72324;
  result[21] = sub_1D0D68CBC;
  result[26] = sub_1D0D68CA8;
  result[27] = sub_1D0D68C84;
  result[35] = sub_1D0D72208;
  result[36] = sub_1D0D720E0;
  result[37] = sub_1D0D71FB8;
  return result;
}

uint64_t sub_1D0C9C420(uint64_t result, int a2, int a3)
{
  int v3 = 1 << a2;
  char v4 = a2 - 6;
  char v5 = 6 - a2;
  int v6 = 1 << (5 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      int v7 = 0;
      if (v3 <= 1) {
        unsigned int v8 = 1;
      }
      else {
        unsigned int v8 = 1 << a2;
      }
      uint64_t v9 = 2 * v3;
      do
      {
        uint64_t v10 = 0;
        int v11 = 0;
        do
        {
          int v12 = *(__int16 *)(result + v10);
          int v13 = (v6 + v12) >> v5;
          int v14 = v12 << v4;
          if (a2 < 6) {
            int v14 = v13;
          }
          v11 += v14;
          if (v11 >= 0x7FFF) {
            int v15 = 0x7FFF;
          }
          else {
            int v15 = v11;
          }
          if (v15 <= -32768) {
            LOWORD(v15) = 0x8000;
          }
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    int v16 = 0;
    if (v3 <= 1) {
      int v17 = 1;
    }
    else {
      int v17 = 1 << a2;
    }
    do
    {
      int v18 = 0;
      int v19 = 0;
      do
      {
        int v20 = (v18 << a2) + v16;
        int v21 = *(__int16 *)(result + 2 * v20);
        int v22 = (v6 + v21) >> v5;
        int v23 = v21 << v4;
        if (a2 < 6) {
          int v23 = v22;
        }
        v19 += v23;
        if (v19 >= 0x7FFF) {
          int v24 = 0x7FFF;
        }
        else {
          int v24 = v19;
        }
        if (v24 <= -32768) {
          LOWORD(v24) = 0x8000;
        }
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

void sub_1D0C9C53C(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = a3 - 2048;
  int v11 = (_WORD *)(a1 + 2);
  uint64_t v12 = 2 * a2;
  do
  {
    uint64_t v13 = 0;
    int v14 = &a3[v8];
    int v15 = v11;
    do
    {
      int v16 = *(__int16 *)&v14[v13];
      int v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        int v18 = *(__int16 *)&v14[v13 - 2048] << 9 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      int v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 511) {
        int v19 = 511;
      }
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      int v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 511) {
        int v20 = 511;
      }
      *int v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    int v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5) {
    bzero(v10, 0x800uLL);
  }
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

uint64_t sub_1D0C9C648(uint64_t result)
{
  uint64_t v1 = 0;
  v2.i64[0] = 0x1000100010001;
  v2.i64[1] = 0x1000100010001;
  do
  {
    *(int16x8_t *)(result + v1) = vhaddq_s16(*(int16x8_t *)(result + v1), v2);
    v1 += 16;
  }
  while (v1 != 2048);
  return result;
}

int16x8_t sub_1D0C9C66C(uint64_t a1)
{
  for (uint64_t i = 0; i != 512; i += 16)
  {
    int16x8_t result = vrshrn_high_n_s32(vrshrn_n_s32(vmovl_s16(*(int16x4_t *)(a1 + i)), 2uLL), vmovl_high_s16(*(int16x8_t *)(a1 + i)), 2uLL);
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

void (**sub_1D0C9C698(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9C66C;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9C648;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B818;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B7A8;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B73C;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9C420;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A67C;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A368;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A624;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A5CC;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A508;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A3E0;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A2F4;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A22C;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A168;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6A038;
  *int16x8_t result = sub_1D0D69E64;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D69B54;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D697B4;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68CD0;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68CBC;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68CA8;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68C84;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68C2C;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68B00;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68A04;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68910;
  return result;
}

void *sub_1D0C9C84C(void *result)
{
  result[43] = sub_1D0C9B51C;
  result[44] = sub_1D0C9B4B0;
  result[45] = sub_1D0C9B444;
  result[28] = sub_1D0C9CBE4;
  result[29] = sub_1D0C9CBB8;
  result[38] = sub_1D0C9CAAC;
  result[49] = sub_1D0C9C990;
  result[13] = sub_1D0D70928;
  result[14] = sub_1D0D708B8;
  result[15] = sub_1D0D70848;
  result[16] = sub_1D0D71F20;
  result[17] = sub_1D0D71A14;
  result[18] = sub_1D0D71468;
  result[19] = sub_1D0D70E60;
  result[21] = sub_1D0D65EE4;
  result[26] = sub_1D0D65ED0;
  result[27] = sub_1D0D65EAC;
  result[35] = sub_1D0D70D44;
  result[36] = sub_1D0D70C1C;
  result[37] = sub_1D0D70AF4;
  return result;
}

uint64_t sub_1D0C9C990(uint64_t result, int a2, int a3)
{
  int v3 = 1 << a2;
  char v4 = a2 - 7;
  char v5 = 7 - a2;
  int v6 = 1 << (6 - a2);
  if (a3 == 1)
  {
    if (a2 != 31)
    {
      int v7 = 0;
      if (v3 <= 1) {
        unsigned int v8 = 1;
      }
      else {
        unsigned int v8 = 1 << a2;
      }
      uint64_t v9 = 2 * v3;
      do
      {
        uint64_t v10 = 0;
        int v11 = 0;
        do
        {
          int v12 = *(__int16 *)(result + v10);
          int v13 = (v6 + v12) >> v5;
          int v14 = v12 << v4;
          if (a2 < 7) {
            int v14 = v13;
          }
          v11 += v14;
          if (v11 >= 0x7FFF) {
            int v15 = 0x7FFF;
          }
          else {
            int v15 = v11;
          }
          if (v15 <= -32768) {
            LOWORD(v15) = 0x8000;
          }
          *(_WORD *)(result + v10) = v15;
          v10 += 2;
        }
        while (2 * v8 != v10);
        ++v7;
        result += v9;
      }
      while (v7 != v8);
    }
  }
  else if (a2 != 31)
  {
    int v16 = 0;
    if (v3 <= 1) {
      int v17 = 1;
    }
    else {
      int v17 = 1 << a2;
    }
    do
    {
      int v18 = 0;
      int v19 = 0;
      do
      {
        int v20 = (v18 << a2) + v16;
        int v21 = *(__int16 *)(result + 2 * v20);
        int v22 = (v6 + v21) >> v5;
        int v23 = v21 << v4;
        if (a2 < 7) {
          int v23 = v22;
        }
        v19 += v23;
        if (v19 >= 0x7FFF) {
          int v24 = 0x7FFF;
        }
        else {
          int v24 = v19;
        }
        if (v24 <= -32768) {
          LOWORD(v24) = 0x8000;
        }
        *(_WORD *)(result + 2 * v20) = v24;
        ++v18;
      }
      while (v17 != v18);
      ++v16;
    }
    while (v16 != v17);
  }
  return result;
}

void sub_1D0C9CAAC(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = a3 - 2048;
  int v11 = (_WORD *)(a1 + 2);
  uint64_t v12 = 2 * a2;
  do
  {
    uint64_t v13 = 0;
    int v14 = &a3[v8];
    int v15 = v11;
    do
    {
      int v16 = *(__int16 *)&v14[v13];
      int v17 = *(__int16 *)&a4[v8 + v13];
      if (a5)
      {
        int v18 = *(__int16 *)&v14[v13 - 2048] << 8 >> a5[2];
        v16 += (v18 * *a5) >> 3;
        v17 += (v18 * a5[1]) >> 3;
      }
      int v19 = v16 + (unsigned __int16)*(v15 - 1);
      if (v19 >= 255) {
        int v19 = 255;
      }
      *(v15 - 1) = v19 & ~(unsigned __int16)(v19 >> 31);
      int v20 = v17 + (unsigned __int16)*v15;
      if (v20 >= 255) {
        int v20 = 255;
      }
      *int v15 = v20 & ~(unsigned __int16)(v20 >> 31);
      v15 += 2;
      v13 += 2;
    }
    while (v13 != 64);
    ++v9;
    int v11 = (_WORD *)((char *)v11 + v12);
    v8 += 64;
  }
  while (v9 != 32);
  if (a5) {
    bzero(v10, 0x800uLL);
  }
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

int16x8_t sub_1D0C9CBB8(uint64_t a1)
{
  for (uint64_t i = 0; i != 2048; i += 16)
  {
    int16x8_t result = vrshrn_high_n_s32(vrshrn_n_s32(vmovl_s16(*(int16x4_t *)(a1 + i)), 2uLL), vmovl_high_s16(*(int16x8_t *)(a1 + i)), 2uLL);
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

int16x8_t sub_1D0C9CBE4(uint64_t a1)
{
  for (uint64_t i = 0; i != 512; i += 16)
  {
    int16x8_t result = vrshrn_high_n_s32(vrshrn_n_s32(vmovl_s16(*(int16x4_t *)(a1 + i)), 3uLL), vmovl_high_s16(*(int16x8_t *)(a1 + i)), 3uLL);
    *(int16x8_t *)(a1 + i) = result;
  }
  return result;
}

void (**sub_1D0C9CC10(void (**result)(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)))(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4, int a5)
{
  result[24] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9CBE4;
  result[25] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9CBB8;
  result[30] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B818;
  result[46] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B7A8;
  result[47] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9B73C;
  result[48] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0C9C990;
  result[39] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D688B8;
  result[40] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D685A4;
  result[41] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68860;
  result[42] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68808;
  result[8] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68744;
  result[9] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D6861C;
  result[10] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68530;
  result[11] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68468;
  result[12] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D683A4;
  result[1] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68314;
  *int16x8_t result = sub_1D0D68218;
  result[2] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D68034;
  result[4] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D67E74;
  result[6] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D67CC4;
  result[20] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D65EE4;
  result[22] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D65ED0;
  result[23] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D65EAC;
  result[31] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D67C6C;
  result[32] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D67B40;
  result[33] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D67A44;
  result[34] = (void (*)(uint64_t *, uint64_t, int32x4_t *, int, int))sub_1D0D67950;
  return result;
}

void sub_1D0C9CDC4(uint64_t a1, uint64_t a2, char *a3, char *a4, __int16 *a5)
{
  uint64_t v8 = 0;
  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v10 = 0;
    int v11 = &a3[v8];
    do
    {
      int v12 = *(__int16 *)&v11[v10];
      int v13 = *(__int16 *)&a4[v8 + v10];
      if (a5)
      {
        int v14 = *(__int16 *)&v11[v10 - 2048] << 8 >> a5[2];
        v12 += (v14 * *a5) >> 3;
        v13 += (v14 * a5[1]) >> 3;
      }
      int v15 = (unsigned char *)(a1 + v10);
      int v16 = v12 + *(unsigned __int8 *)(a1 + v10);
      if (v16 >= 255) {
        int v16 = 255;
      }
      *int v15 = v16 & ~(v16 >> 31);
      int v17 = v13 + v15[1];
      if (v17 >= 255) {
        int v17 = 255;
      }
      v15[1] = v17 & ~(v17 >> 31);
      v10 += 2;
    }
    while (v10 != 64);
    a1 += a2;
    v8 += 64;
  }
  if (a5) {
    bzero(a3 - 2048, 0x800uLL);
  }
  bzero(a3, 0x800uLL);
  bzero(a4, 0x800uLL);
}

uint64_t sub_1D0C9CEC8(uint64_t result)
{
  *(void *)(result + 8) = sub_1D0C9DF20;
  int v1 = *(unsigned __int8 *)(result + 538);
  int16x8_t v2 = sub_1D0C9D990;
  if (v1 == 2) {
    int16x8_t v2 = sub_1D0C9DC20;
  }
  if (v1 == 3) {
    int16x8_t v2 = sub_1D0C9D66C;
  }
  *(void *)(result + 24) = v2;
  *(void *)(result + 56) = sub_1D0C9D5C4;
  *(void *)(result + 64) = sub_1D0C9D51C;
  *(void *)(result + 72) = sub_1D0C9D474;
  *(void *)(result + 376) = sub_1D0C9D3CC;
  *(void *)(result + 384) = sub_1D0C9D324;
  *(void *)(result + 472) = sub_1D0C9D270;
  *(void *)(result + 480) = sub_1D0C9D1A8;
  *(void *)(result + 528) = sub_1D0C9D09C;
  *(void *)(result + 456) = sub_1D0CDF3B8;
  *(void *)(result + 464) = sub_1D0CDF36C;
  *(void *)(result + 360) = sub_1D0CDF2BC;
  *(void *)(result + 368) = sub_1D0CDF21C;
  *(void *)(result + 392) = sub_1D0CDF1F4;
  *(void *)(result + 400) = sub_1D0CDF1C4;
  *(void *)(result + 408) = sub_1D0CDF198;
  *(void *)(result + 416) = sub_1D0CDF15C;
  *(void *)(result + 424) = sub_1D0CDF11C;
  *(void *)(result + 432) = sub_1D0CDF0DC;
  *(void *)(result + 440) = sub_1D0CDF0AC;
  *(void *)(result + 448) = sub_1D0CDF074;
  *(void *)(result + 488) = sub_1D0CDFF2C;
  *(void *)(result + 496) = sub_1D0CDFBBC;
  *(void *)(result + 504) = sub_1D0CDF7F0;
  *(void *)(result + 512) = sub_1D0CDF3F4;
  return result;
}

uint64_t sub_1D0C9D09C(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 >= 1)
  {
    uint64_t v6 = a6;
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = a6 + 2;
    uint64_t v18 = a2;
    char v12 = 12 - a4;
    uint64_t v13 = 4 * a2;
    uint64_t v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v15 = 0;
        do
        {
          int16x8_t result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v6 + v15) = result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    int v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v17 = 0;
        do
        {
          int16x8_t result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v11 + v17) = result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

__n128 sub_1D0C9D1A8(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = (int32x4_t)xmmword_1D0D7F210;
  int32x4_t v6 = 0uLL;
  int32x4_t v7 = (int32x4_t)xmmword_1D0D7F210;
  int32x4_t v8 = 0uLL;
  do
  {
    uint64_t v9 = (const __int16 *)(a2 + v4);
    int v10 = (const __int16 *)(a2 + v4 + 256);
    int16x8x2_t v22 = vld2q_s16(v10);
    int16x8x2_t v23 = vld2q_s16(v9);
    int32x4_t v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, (uint16x8_t)v22.val[0]), (uint16x8_t)v23.val[0]);
    int32x4_t v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v22.val[0].i8), *(uint16x4_t *)v23.val[0].i8);
    int32x4_t v8 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v8, (uint16x8_t)v22.val[1]), (uint16x8_t)v23.val[1]);
    int32x4_t v7 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v7, *(uint16x4_t *)v22.val[1].i8), *(uint16x4_t *)v23.val[1].i8);
    v4 += 32;
  }
  while (v4 != 128);
  uint64_t v11 = 0;
  int32x4_t v12 = vdupq_n_s32((vaddvq_s32(vaddq_s32(v7, v8)) << 10) & 0xFFFF0000 | (unsigned __int16)(vaddvq_s32(vaddq_s32(v5, v6)) >> 6));
  do
    a4[v11++] = (__int128)v12;
  while (v11 != 8);
  uint64_t v13 = 2 * a3;
  int v14 = 31;
  do
  {
    uint64_t v15 = (uint64_t)a4 + v13;
    long long v16 = *a4;
    long long v17 = a4[1];
    long long v18 = a4[3];
    *(_OWORD *)(v15 + 32) = a4[2];
    *(_OWORD *)(v15 + 48) = v18;
    *(_OWORD *)uint64_t v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    __n128 result = (__n128)a4[4];
    long long v20 = a4[5];
    long long v21 = a4[7];
    *(_OWORD *)(v15 + 96) = a4[6];
    *(_OWORD *)(v15 + 112) = v21;
    *(__n128 *)(v15 + 64) = result;
    *(_OWORD *)(v15 + 80) = v20;
    a4 = (long long *)((char *)a4 + v13);
    --v14;
  }
  while (v14);
  return result;
}

__n128 sub_1D0C9D270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = (int32x4_t)xmmword_1D0D7F220;
  int32x4_t v6 = 0uLL;
  int32x4_t v7 = (int32x4_t)xmmword_1D0D7F220;
  int32x4_t v8 = 0uLL;
  do
  {
    uint64_t v9 = (const __int16 *)(a2 + v4);
    int v10 = (const __int16 *)(a2 + v4 + 128);
    int16x8x2_t v18 = vld2q_s16(v10);
    int16x8x2_t v19 = vld2q_s16(v9);
    int32x4_t v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, (uint16x8_t)v18.val[0]), (uint16x8_t)v19.val[0]);
    int32x4_t v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v18.val[0].i8), *(uint16x4_t *)v19.val[0].i8);
    int32x4_t v8 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v8, (uint16x8_t)v18.val[1]), (uint16x8_t)v19.val[1]);
    int32x4_t v7 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v7, *(uint16x4_t *)v18.val[1].i8), *(uint16x4_t *)v19.val[1].i8);
    v4 += 32;
  }
  while (v4 != 64);
  uint64_t v11 = 0;
  int32x4_t v12 = vdupq_n_s32((vaddvq_s32(vaddq_s32(v7, v8)) << 11) & 0xFFFF0000 | (unsigned __int16)(vaddvq_s32(vaddq_s32(v5, v6)) >> 5));
  do
  {
    *(int32x4_t *)(a4 + v11) = v12;
    v11 += 16;
  }
  while (v11 != 64);
  int v13 = 15;
  do
  {
    __n128 result = *(__n128 *)a4;
    long long v15 = *(_OWORD *)(a4 + 16);
    long long v16 = *(_OWORD *)(a4 + 32);
    long long v17 = *(_OWORD *)(a4 + 48);
    a4 += 2 * a3;
    *(_OWORD *)(a4 + 32) = v16;
    *(_OWORD *)(a4 + 48) = v17;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v15;
    --v13;
  }
  while (v13);
  return result;
}

uint64_t sub_1D0C9D324(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = a2 + 128;
  do
  {
    uint64_t v6 = 0;
    int32x4_t v7 = &a2[2 * v4];
    int v8 = 31;
    int v9 = 31 - v4++;
    int v10 = 1;
    do
    {
      uint64_t v11 = (_WORD *)(a4 + v6 * 2);
      *uint64_t v11 = (v10 * a2[192] + v8 * *v7 + v9 * v5[v6] + v4 * a2[64] + 32) >> 6;
      uint64_t result = v5[v6 + 1];
      v11[1] = (v10 * a2[193] + v8 * v7[1] + v9 * result + v4 * a2[65] + 32) >> 6;
      --v8;
      v6 += 2;
      ++v10;
    }
    while (v6 != 64);
    a4 += 2 * a3;
  }
  while (v4 != 32);
  return result;
}

uint64_t sub_1D0C9D3CC(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = a2 + 64;
  do
  {
    uint64_t v6 = 0;
    int32x4_t v7 = &a2[2 * v4];
    int v8 = 15;
    int v9 = 15 - v4++;
    int v10 = 1;
    do
    {
      uint64_t v11 = (_WORD *)(a4 + v6 * 2);
      *uint64_t v11 = (v10 * a2[96] + v8 * *v7 + v9 * v5[v6] + v4 * a2[32] + 16) >> 5;
      uint64_t result = v5[v6 + 1];
      v11[1] = (v10 * a2[97] + v8 * v7[1] + v9 * result + v4 * a2[33] + 16) >> 5;
      --v8;
      v6 += 2;
      ++v10;
    }
    while (v6 != 32);
    a4 += 2 * a3;
  }
  while (v4 != 16);
  return result;
}

unsigned __int16 *sub_1D0C9D474(unsigned __int16 *result, uint64_t a2)
{
  char v2 = 1;
  do
  {
    uint64_t v3 = 0;
    int v4 = *(result - 2);
    char v5 = v2;
    *(_WORD *)(a2 - 4) = (*result + 2 * v4 + result[128] + 2) >> 2;
    *(_WORD *)(a2 + 508) = result[254];
    *(_WORD *)(a2 + 252) = result[126];
    int v6 = v4;
    do
    {
      int v7 = result[v3];
      int v8 = (_WORD *)(a2 + v3 * 2);
      *int v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      int v9 = result[v3 + 128];
      v8[128] = (v6 + 2 * v9 + result[v3 + 130] + 2) >> 2;
      v3 += 2;
      int v4 = v7;
      int v6 = v9;
    }
    while (v3 != 126);
    char v2 = 0;
    ++result;
    a2 += 2;
  }
  while ((v5 & 1) != 0);
  return result;
}

unsigned __int16 *sub_1D0C9D51C(unsigned __int16 *result, uint64_t a2)
{
  char v2 = 1;
  do
  {
    uint64_t v3 = 0;
    int v4 = *(result - 2);
    char v5 = v2;
    *(_WORD *)(a2 - 4) = (*result + 2 * v4 + result[64] + 2) >> 2;
    *(_WORD *)(a2 + 252) = result[126];
    *(_WORD *)(a2 + 124) = result[62];
    int v6 = v4;
    do
    {
      int v7 = result[v3];
      int v8 = (_WORD *)(a2 + v3 * 2);
      *int v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      int v9 = result[v3 + 64];
      v8[64] = (v6 + 2 * v9 + result[v3 + 66] + 2) >> 2;
      v3 += 2;
      int v4 = v7;
      int v6 = v9;
    }
    while (v3 != 62);
    char v2 = 0;
    ++result;
    a2 += 2;
  }
  while ((v5 & 1) != 0);
  return result;
}

unsigned __int16 *sub_1D0C9D5C4(unsigned __int16 *result, uint64_t a2)
{
  char v2 = 1;
  do
  {
    uint64_t v3 = 0;
    int v4 = *(result - 2);
    char v5 = v2;
    *(_WORD *)(a2 - 4) = (*result + 2 * v4 + result[32] + 2) >> 2;
    *(_WORD *)(a2 + 124) = result[62];
    *(_WORD *)(a2 + 60) = result[30];
    int v6 = v4;
    do
    {
      int v7 = result[v3];
      int v8 = (_WORD *)(a2 + v3 * 2);
      *int v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      int v9 = result[v3 + 32];
      v8[32] = (v6 + 2 * v9 + result[v3 + 34] + 2) >> 2;
      v3 += 2;
      int v4 = v7;
      int v6 = v9;
    }
    while (v3 != 30);
    char v2 = 0;
    ++result;
    a2 += 2;
  }
  while ((v5 & 1) != 0);
  return result;
}

void sub_1D0C9D66C(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    int v11 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 4 * v13;
      uint64_t v18 = -4 * v15;
      uint64_t v19 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      long long v21 = (int *)(v17 - 4);
      int16x8x2_t v22 = (int *)(v19 - 4);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          unint64_t v25 = v22;
          int v26 = v21;
          do
          {
            int v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v17 + 4 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        long long v21 = (int *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (int *)v34;
          uint64_t v40 = v33;
          do
          {
            int v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      int v11 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 4 * (int)v7;
      int v48 = (int *)(a4 - 4 * a3);
      int v49 = v48;
      BOOL v50 = (_DWORD *)(a5 + 4 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          char v51 = v49;
          BOOL v52 = v50;
          uint64_t v53 = v45;
          do
          {
            int v54 = *v51++;
            int v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        BOOL v50 = (_DWORD *)((char *)v50 + v47);
        int v49 = (int *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      uint64_t v57 = (_DWORD *)(a5 + 4 * (v46 + v6));
      uint64_t v58 = 4 * v44;
      uint64_t v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          int v60 = v59;
          unsigned int v61 = v57;
          uint64_t v62 = v45;
          do
          {
            int v63 = *v60++;
            int v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        uint64_t v57 = (_DWORD *)((char *)v57 + v58);
        uint64_t v59 = (int *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6C0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0C9D990(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = (1 << a1);
    unsigned int v6 = __clz(__rbit32(a2));
    if (v6 < 9) {
      uint64_t v7 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 + 18 + v6]) * a3 - 1;
    }
    else {
      uint64_t v7 = byte_1D0D7FB44[9 * a1 + 9 + v6] - a3;
    }
    LODWORD(v8) = (int)v5 >> 2;
    unsigned int v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 2 << a1;
      uint64_t v12 = a5 + 4 * v11;
      if ((int)v8 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v8;
      }
      uint64_t v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        uint64_t v15 = v10 + 1;
        if ((a2 >> v10))
        {
          uint64_t v16 = -4;
          uint64_t v17 = (unsigned int *)v14;
          do
          {
            unsigned int v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        uint64_t v10 = v15;
      }
      while (v15 != v13);
      uint64_t v18 = 0;
      uint64_t v19 = a5 + 4 * v5;
      uint64_t v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        uint64_t v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          uint64_t v22 = -4;
          uint64_t v23 = (unsigned int *)v20;
          do
          {
            unsigned int v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        uint64_t v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v9 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      uint64_t v24 = 0;
      int v25 = 2 << a1;
      if ((int)v8 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v8;
      }
      uint64_t v26 = a5 + 4 * v25;
      uint64_t v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * (v25 + (unint64_t)v5);
      uint64_t v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6C0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0C9DC20(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 + 9 + v8] - a3;
    }
    unsigned int v10 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v11 = 0;
      LODWORD(v12) = ((int)v6 + 4) >> 3;
      int v13 = 2 << a1;
      if ((int)v12 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v12;
      }
      if ((int)v6 >= 8) {
        int v14 = 8;
      }
      else {
        int v14 = 1 << a1;
      }
      uint64_t v15 = v14;
      uint64_t v16 = a5 + 4 * v13;
      uint64_t v17 = -4 * v14;
      uint64_t v18 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v19 = a3 * v14;
      uint64_t v20 = (unsigned int *)(v16 - 4);
      uint64_t v21 = (unsigned int *)(v18 - 4);
      uint64_t v22 = v7 + 1;
      uint64_t v23 = -(uint64_t)v14;
      do
      {
        if ((a2 >> v11))
        {
          uint64_t v24 = v22;
          int v25 = v21;
          uint64_t v26 = v20;
          do
          {
            unsigned int v10 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v16 + 4 * v27) = v10;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v11;
        uint64_t v20 = (unsigned int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v12);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v15;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (unsigned int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v19;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v15;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (unsigned int *)v34;
          uint64_t v40 = v33;
          do
          {
            unsigned int v10 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v10;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (unsigned int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v12);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v10 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      LODWORD(v43) = (int)v6 >> 2;
      uint64_t v44 = 2 << a1;
      if ((int)v6 >> 2 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v43;
      }
      uint64_t v45 = a4 - 4 * a3;
      uint64_t v46 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v10 = *(_DWORD *)(v45 + i);
            *(_DWORD *)(v46 + i) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v44 + 4 * v42)) = vdupq_n_s32(v10);
        }
        ++v42;
        v46 += 16;
        v45 += 16;
      }
      while (v42 != v43);
      uint64_t v48 = 0;
      uint64_t v49 = a5 + 4 * (v44 + v6);
      uint64_t v50 = a4 - 4 * a3 + 4 * v6;
      do
      {
        if (((a2 >> v48) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v10 = *(_DWORD *)(v50 + j);
            *(_DWORD *)(v49 + j) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v6 + 4 * v48 + v44)) = vdupq_n_s32(v10);
        }
        ++v48;
        v49 += 16;
        v50 += 16;
      }
      while (v48 != v43);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6C0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0C9DF20(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6 = a1;
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &a5[v10];
        int v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      int v15 = *(_DWORD *)(a4 + 4 * v14);
      uint64_t v16 = v10;
      uint64_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        uint64_t v19 = (_DWORD *)(a4 - 4);
        uint64_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      int v22 = a5[v10];
      uint64_t v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v24 = a5;
    }
    int v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      uint64_t v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      uint64_t v29 = &a5[3 << v6];
      int v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F6C0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

uint64_t sub_1D0C9E158(uint64_t result)
{
  *(void *)uint64_t result = sub_1D0C9ECA0;
  *(void *)(result + 16) = sub_1D0C9E978;
  int v1 = *(unsigned __int8 *)(result + 537);
  *(void *)(result + 296) = sub_1D0C9E908;
  *(void *)(result + 304) = sub_1D0C9E898;
  *(void *)(result + 312) = sub_1D0C9E828;
  *(void *)(result + 200) = sub_1D0C9E808;
  *(void *)(result + 208) = sub_1D0C9E7E4;
  *(void *)(result + 216) = sub_1D0C9E7C0;
  *(void *)(result + 224) = sub_1D0C9E794;
  *(void *)(result + 232) = sub_1D0C9E758;
  *(void *)(result + 120) = sub_1D0C9E730;
  *(void *)(result + 128) = sub_1D0C9E708;
  *(void *)(result + 136) = sub_1D0C9E6DC;
  *(void *)(result + 144) = sub_1D0C9E6A4;
  *(void *)(result + 152) = sub_1D0C9E66C;
  *(void *)(result + 336) = sub_1D0C9E5A0;
  *(void *)(result + 344) = sub_1D0C9E524;
  *(void *)(result + 352) = sub_1D0C9E4A8;
  *(void *)(result + 520) = sub_1D0C9E408;
  *(void *)(result + 32) = sub_1D0CDBE90;
  *(void *)(result + 40) = sub_1D0CDBDCC;
  BOOL v2 = v1 == 0;
  uint64_t v3 = sub_1D0CDE068;
  if (v2) {
    uint64_t v3 = sub_1D0CDBD08;
  }
  *(void *)(result + 48) = v3;
  *(void *)(result + 320) = sub_1D0CDBB9C;
  *(void *)(result + 328) = sub_1D0CDBAC0;
  *(void *)(result + 280) = sub_1D0CDBA28;
  *(void *)(result + 288) = sub_1D0CDB990;
  *(void *)(result + 160) = sub_1D0CDE000;
  *(void *)(result + 168) = sub_1D0CDDF2C;
  *(void *)(result + 176) = sub_1D0CDDE7C;
  *(void *)(result + 184) = sub_1D0CDB778;
  *(void *)(result + 192) = sub_1D0CDB73C;
  *(void *)(result + 80) = sub_1D0CDDE20;
  *(void *)(result + 88) = sub_1D0CDDD88;
  *(void *)(result + 96) = sub_1D0CDDCE4;
  *(void *)(result + 104) = sub_1D0CDB574;
  *(void *)(result + 112) = sub_1D0CDB53C;
  *(void *)(result + 240) = sub_1D0CDDB3C;
  *(void *)(result + 248) = sub_1D0CDD8B0;
  *(void *)(result + 256) = sub_1D0CDD54C;
  *(void *)(result + 264) = sub_1D0CDD104;
  *(void *)(result + 272) = sub_1D0CDCC80;
  return result;
}

uint64_t sub_1D0C9E408(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 >= 1)
  {
    uint64_t v8 = result;
    int v9 = 0;
    char v10 = 12 - a3;
    uint64_t v11 = 2 * a2;
    uint64_t v12 = 2 * a4;
    do
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t result = sub_1D0C51880(v8, a3);
        *(_WORD *)(a5 + v13) = result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_1D0C9E4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = (int32x4_t)xmmword_1D0D7F230;
  int32x4_t v6 = 0uLL;
  do
  {
    uint16x8_t v7 = *(uint16x8_t *)(a2 + v4 + 256);
    uint16x8_t v8 = *(uint16x8_t *)(a2 + v4);
    int32x4_t v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, v7), v8);
    int32x4_t v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v7.i8), *(uint16x4_t *)v8.i8);
    v4 += 16;
  }
  while (v4 != 128);
  uint64_t v9 = 0;
  int16x8_t v10 = vdupq_n_s16(vaddvq_s32(vaddq_s32(v5, v6)) >> 7);
  do
  {
    for (uint64_t i = 0; i != 128; i += 16)
      *(int16x8_t *)(a4 + i) = v10;
    ++v9;
    a4 += 2 * a3;
  }
  while (v9 != 64);
}

void sub_1D0C9E524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = (int32x4_t)xmmword_1D0D7F210;
  int32x4_t v6 = 0uLL;
  do
  {
    uint16x8_t v7 = *(uint16x8_t *)(a2 + v4 + 128);
    uint16x8_t v8 = *(uint16x8_t *)(a2 + v4);
    int32x4_t v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, v7), v8);
    int32x4_t v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v7.i8), *(uint16x4_t *)v8.i8);
    v4 += 16;
  }
  while (v4 != 64);
  uint64_t v9 = 0;
  int16x8_t v10 = vdupq_n_s16(vaddvq_s32(vaddq_s32(v5, v6)) >> 6);
  do
  {
    for (uint64_t i = 0; i != 64; i += 16)
      *(int16x8_t *)(a4 + i) = v10;
    ++v9;
    a4 += 2 * a3;
  }
  while (v9 != 32);
}

void sub_1D0C9E5A0(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = (int32x4_t)xmmword_1D0D7F220;
  int32x4_t v6 = 0uLL;
  do
  {
    uint16x8_t v7 = *(uint16x8_t *)&a2[v4 + 32];
    uint16x8_t v8 = *(uint16x8_t *)&a2[v4];
    int32x4_t v6 = (int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v6, v7), v8);
    int32x4_t v5 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v7.i8), *(uint16x4_t *)v8.i8);
    v4 += 8;
  }
  while (v4 != 16);
  unsigned int v9 = vaddvq_s32(vaddq_s32(v5, v6)) >> 5;
  *a4 = (*a2 + 2 * v9 + a2[32] + 2) >> 2;
  int v10 = 3 * v9 + 2;
  uint64_t v11 = &a4[a3];
  for (uint64_t i = 1; i != 16; ++i)
  {
    uint64_t v13 = &a2[i];
    a4[i] = (v10 + v13[32]) >> 2;
    a4[i * a3] = (v10 + *v13) >> 2;
    for (uint64_t j = 1; j != 16; ++j)
      v11[j] = v9;
    v11 += a3;
  }
}

void sub_1D0C9E66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 64; ++i)
  {
    uint64_t v5 = 0;
    int32x4_t v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

void sub_1D0C9E6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v5 = 0;
    int32x4_t v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

int16x8_t sub_1D0C9E6DC(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a4 + 1;
  do
  {
    int32x4_t v6 = (const __int16 *)(a2 + v4);
    int16x8_t result = vld1q_dup_s16(v6);
    v5[-1] = result;
    int16x8_t *v5 = result;
    v4 += 2;
    uint64_t v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

int16x8_t sub_1D0C9E708(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  for (uint64_t i = 0; i != 16; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x8_t result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x4_t sub_1D0C9E730(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  for (uint64_t i = 0; i != 8; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x4_t result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

__n128 sub_1D0C9E758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 64;
  do
  {
    long long v5 = *(_OWORD *)(a2 + 256);
    long long v6 = *(_OWORD *)(a2 + 272);
    long long v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    __n128 result = *(__n128 *)(a2 + 320);
    long long v9 = *(_OWORD *)(a2 + 336);
    long long v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0C9E794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 32;
  do
  {
    __n128 result = *(__n128 *)(a2 + 128);
    long long v6 = *(_OWORD *)(a2 + 144);
    long long v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0C9E7C0(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 4;
  int v5 = 16;
  do
  {
    __n128 result = *v4;
    __n128 v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1D0C9E7E4(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 2;
  int v5 = 8;
  do
  {
    __n128 result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

void sub_1D0C9E808(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = 4;
  do
  {
    *a4 = *(void *)(a2 + 16);
    a4 = (void *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

uint64_t sub_1D0C9E828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 + 1;
    int v7 = 63;
    do
    {
      uint64_t result = *(unsigned __int16 *)(a2 + 256 + 2 * v5);
      *(_WORD *)(a4 + 2 * v5) = ((v5 + 1) * *(unsigned __int16 *)(a2 + 384)
                               + v7 * *(unsigned __int16 *)(a2 + 2 * v4)
                               + (63 - v4) * result
                               + v6 * *(unsigned __int16 *)(a2 + 128)
                               + 64) >> 7;
      --v7;
      ++v5;
    }
    while (v5 != 64);
    a4 += 2 * a3;
    ++v4;
  }
  while (v6 != 64);
  return result;
}

uint64_t sub_1D0C9E898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 + 1;
    int v7 = 31;
    do
    {
      uint64_t result = *(unsigned __int16 *)(a2 + 128 + 2 * v5);
      *(_WORD *)(a4 + 2 * v5) = ((v5 + 1) * *(unsigned __int16 *)(a2 + 192)
                               + v7 * *(unsigned __int16 *)(a2 + 2 * v4)
                               + (31 - v4) * result
                               + v6 * *(unsigned __int16 *)(a2 + 64)
                               + 32) >> 6;
      --v7;
      ++v5;
    }
    while (v5 != 32);
    a4 += 2 * a3;
    ++v4;
  }
  while (v6 != 32);
  return result;
}

uint64_t sub_1D0C9E908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 + 1;
    int v7 = 15;
    do
    {
      uint64_t result = *(unsigned __int16 *)(a2 + 64 + 2 * v5);
      *(_WORD *)(a4 + 2 * v5) = ((v5 + 1) * *(unsigned __int16 *)(a2 + 96)
                               + v7 * *(unsigned __int16 *)(a2 + 2 * v4)
                               + (15 - v4) * result
                               + v6 * *(unsigned __int16 *)(a2 + 32)
                               + 16) >> 5;
      --v7;
      ++v5;
    }
    while (v5 != 16);
    a4 += 2 * a3;
    ++v4;
  }
  while (v6 != 16);
  return result;
}

void sub_1D0C9E978(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    __int16 v11 = *(_WORD *)(a4 + 2 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 2 * v13;
      uint64_t v18 = -2 * v15;
      uint64_t v19 = a4 + 2 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      uint64_t v21 = (__int16 *)(v17 - 2);
      int v22 = (__int16 *)(v19 - 2);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          int v25 = v22;
          uint64_t v26 = v21;
          do
          {
            __int16 v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_WORD *)(v17 + 2 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        uint64_t v21 = (__int16 *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 2 * v6;
      uint64_t v31 = -2 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (__int16 *)(v30 - 2);
      uint64_t v34 = a4 + 2 * a3 * (v6 - 1) - 2;
      uint64_t v35 = -2 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (__int16 *)v34;
          uint64_t v40 = v33;
          do
          {
            __int16 v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_WORD *)(v30 + 2 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (__int16 *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      __int16 v11 = *(_WORD *)(a4 + 2 * ~a3);
    }
    *(_WORD *)(a5 - 2) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 2 * (int)v7;
      uint64_t v48 = (__int16 *)(a4 - 2 * a3);
      uint64_t v49 = v48;
      uint64_t v50 = (_WORD *)(a5 + 2 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          char v51 = v49;
          BOOL v52 = v50;
          uint64_t v53 = v45;
          do
          {
            __int16 v54 = *v51++;
            __int16 v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        uint64_t v50 = (_WORD *)((char *)v50 + v47);
        uint64_t v49 = (__int16 *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      uint64_t v57 = (_WORD *)(a5 + 2 * (v46 + v6));
      uint64_t v58 = 2 * v44;
      uint64_t v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          int v60 = v59;
          unsigned int v61 = v57;
          uint64_t v62 = v45;
          do
          {
            __int16 v63 = *v60++;
            __int16 v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        uint64_t v57 = (_WORD *)((char *)v57 + v58);
        uint64_t v59 = (__int16 *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1D0D7F6C0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1D0C9ECA0(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6 = a1;
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &a5[v10];
        int v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      __int16 v15 = *(_WORD *)(a4 + 2 * v14);
      uint64_t v16 = v10;
      uint64_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        uint64_t v19 = (_WORD *)(a4 - 2);
        uint64_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      __int16 v22 = a5[v10];
      uint64_t v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v24 = a5;
    }
    __int16 v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      uint64_t v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      uint64_t v29 = &a5[3 << v6];
      __int16 v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F6C0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

uint64_t sub_1D0C9EEDC(uint64_t result)
{
  *(void *)(result + 8) = sub_1D0C9FA70;
  int v1 = *(unsigned __int8 *)(result + 538);
  BOOL v2 = sub_1D0C9F4E0;
  if (v1 == 2) {
    BOOL v2 = sub_1D0C9F770;
  }
  if (v1 == 3) {
    BOOL v2 = sub_1D0C9F1BC;
  }
  *(void *)(result + 24) = v2;
  *(void *)(result + 56) = sub_1D0C9D5C4;
  *(void *)(result + 64) = sub_1D0C9D51C;
  *(void *)(result + 72) = sub_1D0C9D474;
  *(void *)(result + 384) = sub_1D0C9D324;
  *(void *)(result + 480) = sub_1D0C9D1A8;
  *(void *)(result + 528) = sub_1D0C9F0B0;
  *(void *)(result + 456) = sub_1D0CDF3B8;
  *(void *)(result + 464) = sub_1D0CDF36C;
  *(void *)(result + 360) = sub_1D0CDF2BC;
  *(void *)(result + 368) = sub_1D0CDF21C;
  *(void *)(result + 392) = sub_1D0CDF1F4;
  *(void *)(result + 400) = sub_1D0CDF1C4;
  *(void *)(result + 408) = sub_1D0CDF198;
  *(void *)(result + 416) = sub_1D0CDF15C;
  *(void *)(result + 424) = sub_1D0CDF11C;
  *(void *)(result + 432) = sub_1D0CDF0DC;
  *(void *)(result + 440) = sub_1D0CDF0AC;
  *(void *)(result + 448) = sub_1D0CDF074;
  *(void *)(result + 488) = sub_1D0CDEE68;
  *(void *)(result + 496) = sub_1D0CDEB60;
  *(void *)(result + 504) = sub_1D0CDE810;
  *(void *)(result + 512) = sub_1D0CDE488;
  *(void *)(result + 472) = sub_1D0CDE42C;
  *(void *)(result + 376) = sub_1D0CDE32C;
  return result;
}

uint64_t sub_1D0C9F0B0(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 >= 1)
  {
    uint64_t v6 = a6;
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = a6 + 2;
    uint64_t v18 = a2;
    char v12 = 11 - a4;
    uint64_t v13 = 4 * a2;
    uint64_t v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v15 = 0;
        do
        {
          uint64_t result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v6 + v15) = result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    int v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v17 = 0;
        do
        {
          uint64_t result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v11 + v17) = result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1D0C9F1BC(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    int v11 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 4 * v13;
      uint64_t v18 = -4 * v15;
      uint64_t v19 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      uint64_t v21 = (int *)(v17 - 4);
      __int16 v22 = (int *)(v19 - 4);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          __int16 v25 = v22;
          uint64_t v26 = v21;
          do
          {
            int v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v17 + 4 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        uint64_t v21 = (int *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (int *)v34;
          uint64_t v40 = v33;
          do
          {
            int v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      int v11 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 4 * (int)v7;
      uint64_t v48 = (int *)(a4 - 4 * a3);
      uint64_t v49 = v48;
      uint64_t v50 = (_DWORD *)(a5 + 4 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          char v51 = v49;
          BOOL v52 = v50;
          uint64_t v53 = v45;
          do
          {
            int v54 = *v51++;
            int v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        uint64_t v50 = (_DWORD *)((char *)v50 + v47);
        uint64_t v49 = (int *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      uint64_t v57 = (_DWORD *)(a5 + 4 * (v46 + v6));
      uint64_t v58 = 4 * v44;
      uint64_t v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          int v60 = v59;
          unsigned int v61 = v57;
          uint64_t v62 = v45;
          do
          {
            int v63 = *v60++;
            int v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        uint64_t v57 = (_DWORD *)((char *)v57 + v58);
        uint64_t v59 = (int *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6D0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0C9F4E0(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = (1 << a1);
    unsigned int v6 = __clz(__rbit32(a2));
    if (v6 < 9) {
      uint64_t v7 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 + 18 + v6]) * a3 - 1;
    }
    else {
      uint64_t v7 = byte_1D0D7FB44[9 * a1 + 9 + v6] - a3;
    }
    LODWORD(v8) = (int)v5 >> 2;
    unsigned int v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 2 << a1;
      uint64_t v12 = a5 + 4 * v11;
      if ((int)v8 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v8;
      }
      uint64_t v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        uint64_t v15 = v10 + 1;
        if ((a2 >> v10))
        {
          uint64_t v16 = -4;
          uint64_t v17 = (unsigned int *)v14;
          do
          {
            unsigned int v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        uint64_t v10 = v15;
      }
      while (v15 != v13);
      uint64_t v18 = 0;
      uint64_t v19 = a5 + 4 * v5;
      uint64_t v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        uint64_t v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          uint64_t v22 = -4;
          uint64_t v23 = (unsigned int *)v20;
          do
          {
            unsigned int v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        uint64_t v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v9 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      uint64_t v24 = 0;
      int v25 = 2 << a1;
      if ((int)v8 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v8;
      }
      uint64_t v26 = a5 + 4 * v25;
      uint64_t v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * (v25 + (unint64_t)v5);
      uint64_t v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6D0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0C9F770(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 + 9 + v8] - a3;
    }
    unsigned int v10 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v11 = 0;
      LODWORD(v12) = ((int)v6 + 4) >> 3;
      int v13 = 2 << a1;
      if ((int)v12 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v12;
      }
      if ((int)v6 >= 8) {
        int v14 = 8;
      }
      else {
        int v14 = 1 << a1;
      }
      uint64_t v15 = v14;
      uint64_t v16 = a5 + 4 * v13;
      uint64_t v17 = -4 * v14;
      uint64_t v18 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v19 = a3 * v14;
      uint64_t v20 = (unsigned int *)(v16 - 4);
      uint64_t v21 = (unsigned int *)(v18 - 4);
      uint64_t v22 = v7 + 1;
      uint64_t v23 = -(uint64_t)v14;
      do
      {
        if ((a2 >> v11))
        {
          uint64_t v24 = v22;
          int v25 = v21;
          uint64_t v26 = v20;
          do
          {
            unsigned int v10 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v16 + 4 * v27) = v10;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v11;
        uint64_t v20 = (unsigned int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v12);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v15;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (unsigned int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v19;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v15;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (unsigned int *)v34;
          uint64_t v40 = v33;
          do
          {
            unsigned int v10 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v10;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (unsigned int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v12);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v10 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      LODWORD(v43) = (int)v6 >> 2;
      uint64_t v44 = 2 << a1;
      if ((int)v6 >> 2 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v43;
      }
      uint64_t v45 = a4 - 4 * a3;
      uint64_t v46 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v10 = *(_DWORD *)(v45 + i);
            *(_DWORD *)(v46 + i) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v44 + 4 * v42)) = vdupq_n_s32(v10);
        }
        ++v42;
        v46 += 16;
        v45 += 16;
      }
      while (v42 != v43);
      uint64_t v48 = 0;
      uint64_t v49 = a5 + 4 * (v44 + v6);
      uint64_t v50 = a4 - 4 * a3 + 4 * v6;
      do
      {
        if (((a2 >> v48) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v10 = *(_DWORD *)(v50 + j);
            *(_DWORD *)(v49 + j) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v6 + 4 * v48 + v44)) = vdupq_n_s32(v10);
        }
        ++v48;
        v49 += 16;
        v50 += 16;
      }
      while (v48 != v43);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6D0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0C9FA70(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6 = a1;
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &a5[v10];
        int v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      int v15 = *(_DWORD *)(a4 + 4 * v14);
      uint64_t v16 = v10;
      uint64_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        uint64_t v19 = (_DWORD *)(a4 - 4);
        uint64_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      int v22 = a5[v10];
      uint64_t v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v24 = a5;
    }
    int v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      uint64_t v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      uint64_t v29 = &a5[3 << v6];
      int v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F6D0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

uint64_t sub_1D0C9FCA8(uint64_t result)
{
  *(void *)uint64_t result = sub_1D0CA04DC;
  *(void *)(result + 16) = sub_1D0CA01B4;
  int v1 = *(unsigned __int8 *)(result + 537);
  *(void *)(result + 304) = sub_1D0C9E898;
  *(void *)(result + 312) = sub_1D0C9E828;
  *(void *)(result + 200) = sub_1D0CA0194;
  *(void *)(result + 208) = sub_1D0CA0170;
  *(void *)(result + 216) = sub_1D0CA014C;
  *(void *)(result + 224) = sub_1D0CA0120;
  *(void *)(result + 232) = sub_1D0CA00E4;
  *(void *)(result + 120) = sub_1D0CA00BC;
  *(void *)(result + 128) = sub_1D0CA0094;
  *(void *)(result + 136) = sub_1D0CA0068;
  *(void *)(result + 144) = sub_1D0CA0030;
  *(void *)(result + 152) = sub_1D0C9FFF8;
  *(void *)(result + 344) = sub_1D0C9E524;
  *(void *)(result + 520) = sub_1D0C9FF58;
  *(void *)(result + 32) = sub_1D0CDBE90;
  *(void *)(result + 40) = sub_1D0CDBDCC;
  BOOL v2 = v1 == 0;
  uint64_t v3 = sub_1D0CDCB8C;
  if (v2) {
    uint64_t v3 = sub_1D0CDBD08;
  }
  *(void *)(result + 48) = v3;
  *(void *)(result + 320) = sub_1D0CDBB9C;
  *(void *)(result + 328) = sub_1D0CDBAC0;
  *(void *)(result + 280) = sub_1D0CDBA28;
  *(void *)(result + 288) = sub_1D0CDB990;
  *(void *)(result + 160) = sub_1D0CDCB24;
  *(void *)(result + 168) = sub_1D0CDCA50;
  *(void *)(result + 176) = sub_1D0CDC9A0;
  *(void *)(result + 184) = sub_1D0CDB778;
  *(void *)(result + 192) = sub_1D0CDB73C;
  *(void *)(result + 80) = sub_1D0CDC944;
  *(void *)(result + 88) = sub_1D0CDC8AC;
  *(void *)(result + 96) = sub_1D0CDC808;
  *(void *)(result + 104) = sub_1D0CDB574;
  *(void *)(result + 112) = sub_1D0CDB53C;
  *(void *)(result + 240) = sub_1D0CDB3AC;
  *(void *)(result + 248) = sub_1D0CDB130;
  *(void *)(result + 256) = sub_1D0CDAE08;
  *(void *)(result + 264) = sub_1D0CDAA30;
  *(void *)(result + 272) = sub_1D0CDA614;
  *(void *)(result + 336) = sub_1D0CDA4B0;
  *(void *)(result + 352) = sub_1D0CDA414;
  *(void *)(result + 296) = sub_1D0CDA374;
  return result;
}

uint64_t sub_1D0C9FF58(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 >= 1)
  {
    uint64_t v8 = result;
    int v9 = 0;
    char v10 = 11 - a3;
    uint64_t v11 = 2 * a2;
    uint64_t v12 = 2 * a4;
    do
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t result = sub_1D0C51880(v8, a3);
        *(_WORD *)(a5 + v13) = result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_1D0C9FFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 64; ++i)
  {
    uint64_t v5 = 0;
    char v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

void sub_1D0CA0030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v5 = 0;
    char v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

int16x8_t sub_1D0CA0068(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a4 + 1;
  do
  {
    char v6 = (const __int16 *)(a2 + v4);
    int16x8_t result = vld1q_dup_s16(v6);
    v5[-1] = result;
    int16x8_t *v5 = result;
    v4 += 2;
    uint64_t v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

int16x8_t sub_1D0CA0094(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  for (uint64_t i = 0; i != 16; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x8_t result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x4_t sub_1D0CA00BC(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  for (uint64_t i = 0; i != 8; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x4_t result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

__n128 sub_1D0CA00E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 64;
  do
  {
    long long v5 = *(_OWORD *)(a2 + 256);
    long long v6 = *(_OWORD *)(a2 + 272);
    long long v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    __n128 result = *(__n128 *)(a2 + 320);
    long long v9 = *(_OWORD *)(a2 + 336);
    long long v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0CA0120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 32;
  do
  {
    __n128 result = *(__n128 *)(a2 + 128);
    long long v6 = *(_OWORD *)(a2 + 144);
    long long v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0CA014C(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 4;
  int v5 = 16;
  do
  {
    __n128 result = *v4;
    __n128 v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1D0CA0170(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 2;
  int v5 = 8;
  do
  {
    __n128 result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

void sub_1D0CA0194(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = 4;
  do
  {
    *a4 = *(void *)(a2 + 16);
    a4 = (void *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

void sub_1D0CA01B4(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    __int16 v11 = *(_WORD *)(a4 + 2 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 2 * v13;
      uint64_t v18 = -2 * v15;
      uint64_t v19 = a4 + 2 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      uint64_t v21 = (__int16 *)(v17 - 2);
      int v22 = (__int16 *)(v19 - 2);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          int v25 = v22;
          uint64_t v26 = v21;
          do
          {
            __int16 v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_WORD *)(v17 + 2 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        uint64_t v21 = (__int16 *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 2 * v6;
      uint64_t v31 = -2 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (__int16 *)(v30 - 2);
      uint64_t v34 = a4 + 2 * a3 * (v6 - 1) - 2;
      uint64_t v35 = -2 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (__int16 *)v34;
          uint64_t v40 = v33;
          do
          {
            __int16 v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_WORD *)(v30 + 2 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (__int16 *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      __int16 v11 = *(_WORD *)(a4 + 2 * ~a3);
    }
    *(_WORD *)(a5 - 2) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 2 * (int)v7;
      uint64_t v48 = (__int16 *)(a4 - 2 * a3);
      uint64_t v49 = v48;
      uint64_t v50 = (_WORD *)(a5 + 2 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          char v51 = v49;
          BOOL v52 = v50;
          uint64_t v53 = v45;
          do
          {
            __int16 v54 = *v51++;
            __int16 v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        uint64_t v50 = (_WORD *)((char *)v50 + v47);
        uint64_t v49 = (__int16 *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      uint64_t v57 = (_WORD *)(a5 + 2 * (v46 + v6));
      uint64_t v58 = 2 * v44;
      uint64_t v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          int v60 = v59;
          unsigned int v61 = v57;
          uint64_t v62 = v45;
          do
          {
            __int16 v63 = *v60++;
            __int16 v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        uint64_t v57 = (_WORD *)((char *)v57 + v58);
        uint64_t v59 = (__int16 *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1D0D7F6D0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1D0CA04DC(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6 = a1;
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &a5[v10];
        int v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      __int16 v15 = *(_WORD *)(a4 + 2 * v14);
      uint64_t v16 = v10;
      uint64_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        uint64_t v19 = (_WORD *)(a4 - 2);
        uint64_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      __int16 v22 = a5[v10];
      uint64_t v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v24 = a5;
    }
    __int16 v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      uint64_t v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      uint64_t v29 = &a5[3 << v6];
      __int16 v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F6D0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

uint64_t sub_1D0CA0718(uint64_t result)
{
  *(void *)(result + 8) = sub_1D0CA12AC;
  int v1 = *(unsigned __int8 *)(result + 538);
  BOOL v2 = sub_1D0CA0D1C;
  if (v1 == 2) {
    BOOL v2 = sub_1D0CA0FAC;
  }
  if (v1 == 3) {
    BOOL v2 = sub_1D0CA09F8;
  }
  *(void *)(result + 24) = v2;
  *(void *)(result + 56) = sub_1D0C9D5C4;
  *(void *)(result + 64) = sub_1D0C9D51C;
  *(void *)(result + 72) = sub_1D0C9D474;
  *(void *)(result + 528) = sub_1D0CA08EC;
  *(void *)(result + 456) = sub_1D0CDF3B8;
  *(void *)(result + 464) = sub_1D0CDF36C;
  *(void *)(result + 360) = sub_1D0CDF2BC;
  *(void *)(result + 368) = sub_1D0CDF21C;
  *(void *)(result + 392) = sub_1D0CDF1F4;
  *(void *)(result + 400) = sub_1D0CDF1C4;
  *(void *)(result + 408) = sub_1D0CDF198;
  *(void *)(result + 416) = sub_1D0CDF15C;
  *(void *)(result + 424) = sub_1D0CDF11C;
  *(void *)(result + 432) = sub_1D0CDF0DC;
  *(void *)(result + 440) = sub_1D0CDF0AC;
  *(void *)(result + 448) = sub_1D0CDF074;
  *(void *)(result + 488) = sub_1D0CDEE68;
  *(void *)(result + 496) = sub_1D0CDEB60;
  *(void *)(result + 504) = sub_1D0CDE810;
  *(void *)(result + 512) = sub_1D0CDE488;
  *(void *)(result + 472) = sub_1D0CDE42C;
  *(void *)(result + 376) = sub_1D0CDE32C;
  *(void *)(result + 480) = sub_1D0CDE298;
  *(void *)(result + 384) = sub_1D0CDE15C;
  return result;
}

uint64_t sub_1D0CA08EC(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 >= 1)
  {
    uint64_t v6 = a6;
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = a6 + 2;
    uint64_t v18 = a2;
    char v12 = 10 - a4;
    uint64_t v13 = 4 * a2;
    uint64_t v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v15 = 0;
        do
        {
          __n128 result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v6 + v15) = result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    int v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v17 = 0;
        do
        {
          __n128 result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v11 + v17) = result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1D0CA09F8(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    int v11 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 4 * v13;
      uint64_t v18 = -4 * v15;
      uint64_t v19 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      uint64_t v21 = (int *)(v17 - 4);
      __int16 v22 = (int *)(v19 - 4);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          __int16 v25 = v22;
          uint64_t v26 = v21;
          do
          {
            int v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v17 + 4 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        uint64_t v21 = (int *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (int *)v34;
          uint64_t v40 = v33;
          do
          {
            int v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      int v11 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 4 * (int)v7;
      uint64_t v48 = (int *)(a4 - 4 * a3);
      uint64_t v49 = v48;
      uint64_t v50 = (_DWORD *)(a5 + 4 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          char v51 = v49;
          BOOL v52 = v50;
          uint64_t v53 = v45;
          do
          {
            int v54 = *v51++;
            int v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        uint64_t v50 = (_DWORD *)((char *)v50 + v47);
        uint64_t v49 = (int *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      uint64_t v57 = (_DWORD *)(a5 + 4 * (v46 + v6));
      uint64_t v58 = 4 * v44;
      uint64_t v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          int v60 = v59;
          unsigned int v61 = v57;
          uint64_t v62 = v45;
          do
          {
            int v63 = *v60++;
            int v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        uint64_t v57 = (_DWORD *)((char *)v57 + v58);
        uint64_t v59 = (int *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6E0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0CA0D1C(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = (1 << a1);
    unsigned int v6 = __clz(__rbit32(a2));
    if (v6 < 9) {
      uint64_t v7 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 + 18 + v6]) * a3 - 1;
    }
    else {
      uint64_t v7 = byte_1D0D7FB44[9 * a1 + 9 + v6] - a3;
    }
    LODWORD(v8) = (int)v5 >> 2;
    unsigned int v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 2 << a1;
      uint64_t v12 = a5 + 4 * v11;
      if ((int)v8 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v8;
      }
      uint64_t v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        uint64_t v15 = v10 + 1;
        if ((a2 >> v10))
        {
          uint64_t v16 = -4;
          uint64_t v17 = (unsigned int *)v14;
          do
          {
            unsigned int v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        uint64_t v10 = v15;
      }
      while (v15 != v13);
      uint64_t v18 = 0;
      uint64_t v19 = a5 + 4 * v5;
      uint64_t v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        uint64_t v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          uint64_t v22 = -4;
          uint64_t v23 = (unsigned int *)v20;
          do
          {
            unsigned int v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        uint64_t v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v9 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      uint64_t v24 = 0;
      int v25 = 2 << a1;
      if ((int)v8 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v8;
      }
      uint64_t v26 = a5 + 4 * v25;
      uint64_t v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * (v25 + (unint64_t)v5);
      uint64_t v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6E0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0CA0FAC(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 + 9 + v8] - a3;
    }
    unsigned int v10 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v11 = 0;
      LODWORD(v12) = ((int)v6 + 4) >> 3;
      int v13 = 2 << a1;
      if ((int)v12 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v12;
      }
      if ((int)v6 >= 8) {
        int v14 = 8;
      }
      else {
        int v14 = 1 << a1;
      }
      uint64_t v15 = v14;
      uint64_t v16 = a5 + 4 * v13;
      uint64_t v17 = -4 * v14;
      uint64_t v18 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v19 = a3 * v14;
      uint64_t v20 = (unsigned int *)(v16 - 4);
      uint64_t v21 = (unsigned int *)(v18 - 4);
      uint64_t v22 = v7 + 1;
      uint64_t v23 = -(uint64_t)v14;
      do
      {
        if ((a2 >> v11))
        {
          uint64_t v24 = v22;
          int v25 = v21;
          uint64_t v26 = v20;
          do
          {
            unsigned int v10 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v16 + 4 * v27) = v10;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v11;
        uint64_t v20 = (unsigned int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v12);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v15;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (unsigned int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v19;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v15;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (unsigned int *)v34;
          uint64_t v40 = v33;
          do
          {
            unsigned int v10 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v10;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (unsigned int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v12);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v10 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      LODWORD(v43) = (int)v6 >> 2;
      uint64_t v44 = 2 << a1;
      if ((int)v6 >> 2 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v43;
      }
      uint64_t v45 = a4 - 4 * a3;
      uint64_t v46 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v10 = *(_DWORD *)(v45 + i);
            *(_DWORD *)(v46 + i) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v44 + 4 * v42)) = vdupq_n_s32(v10);
        }
        ++v42;
        v46 += 16;
        v45 += 16;
      }
      while (v42 != v43);
      uint64_t v48 = 0;
      uint64_t v49 = a5 + 4 * (v44 + v6);
      uint64_t v50 = a4 - 4 * a3 + 4 * v6;
      do
      {
        if (((a2 >> v48) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v10 = *(_DWORD *)(v50 + j);
            *(_DWORD *)(v49 + j) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v6 + 4 * v48 + v44)) = vdupq_n_s32(v10);
        }
        ++v48;
        v49 += 16;
        v50 += 16;
      }
      while (v48 != v43);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6E0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0CA12AC(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6 = a1;
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &a5[v10];
        int v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      int v15 = *(_DWORD *)(a4 + 4 * v14);
      uint64_t v16 = v10;
      uint64_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        uint64_t v19 = (_DWORD *)(a4 - 4);
        uint64_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      int v22 = a5[v10];
      uint64_t v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v24 = a5;
    }
    int v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      uint64_t v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      uint64_t v29 = &a5[3 << v6];
      int v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F6E0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

uint64_t sub_1D0CA14E4(uint64_t result)
{
  *(void *)__n128 result = sub_1D0CA1D18;
  *(void *)(result + 16) = sub_1D0CA19F0;
  int v1 = *(unsigned __int8 *)(result + 537);
  *(void *)(result + 312) = sub_1D0C9E828;
  *(void *)(result + 200) = sub_1D0CA19D0;
  *(void *)(result + 208) = sub_1D0CA19AC;
  *(void *)(result + 216) = sub_1D0CA1988;
  *(void *)(result + 224) = sub_1D0CA195C;
  *(void *)(result + 232) = sub_1D0CA1920;
  *(void *)(result + 120) = sub_1D0CA18F8;
  *(void *)(result + 128) = sub_1D0CA18D0;
  *(void *)(result + 136) = sub_1D0CA18A4;
  *(void *)(result + 144) = sub_1D0CA186C;
  *(void *)(result + 152) = sub_1D0CA1834;
  *(void *)(result + 520) = sub_1D0CA1794;
  *(void *)(result + 32) = sub_1D0CDBE90;
  *(void *)(result + 40) = sub_1D0CDBDCC;
  BOOL v2 = v1 == 0;
  uint64_t v3 = sub_1D0CDC714;
  if (v2) {
    uint64_t v3 = sub_1D0CDBD08;
  }
  *(void *)(result + 48) = v3;
  *(void *)(result + 320) = sub_1D0CDBB9C;
  *(void *)(result + 328) = sub_1D0CDBAC0;
  *(void *)(result + 280) = sub_1D0CDBA28;
  *(void *)(result + 288) = sub_1D0CDB990;
  *(void *)(result + 160) = sub_1D0CDC6AC;
  *(void *)(result + 168) = sub_1D0CDC5D8;
  *(void *)(result + 176) = sub_1D0CDC528;
  *(void *)(result + 184) = sub_1D0CDB778;
  *(void *)(result + 192) = sub_1D0CDB73C;
  *(void *)(result + 80) = sub_1D0CDC4CC;
  *(void *)(result + 88) = sub_1D0CDC434;
  *(void *)(result + 96) = sub_1D0CDC390;
  *(void *)(result + 104) = sub_1D0CDB574;
  *(void *)(result + 112) = sub_1D0CDB53C;
  *(void *)(result + 240) = sub_1D0CDB3AC;
  *(void *)(result + 248) = sub_1D0CDB130;
  *(void *)(result + 256) = sub_1D0CDAE08;
  *(void *)(result + 264) = sub_1D0CDAA30;
  *(void *)(result + 272) = sub_1D0CDA614;
  *(void *)(result + 336) = sub_1D0CDA4B0;
  *(void *)(result + 352) = sub_1D0CDA414;
  *(void *)(result + 296) = sub_1D0CDA374;
  *(void *)(result + 344) = sub_1D0CDA314;
  *(void *)(result + 304) = sub_1D0CDA214;
  return result;
}

uint64_t sub_1D0CA1794(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 >= 1)
  {
    uint64_t v8 = result;
    int v9 = 0;
    char v10 = 10 - a3;
    uint64_t v11 = 2 * a2;
    uint64_t v12 = 2 * a4;
    do
    {
      uint64_t v13 = 0;
      do
      {
        __n128 result = sub_1D0C51880(v8, a3);
        *(_WORD *)(a5 + v13) = result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_1D0CA1834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 64; ++i)
  {
    uint64_t v5 = 0;
    char v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

void sub_1D0CA186C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v5 = 0;
    char v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

int16x8_t sub_1D0CA18A4(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a4 + 1;
  do
  {
    char v6 = (const __int16 *)(a2 + v4);
    int16x8_t result = vld1q_dup_s16(v6);
    v5[-1] = result;
    int16x8_t *v5 = result;
    v4 += 2;
    uint64_t v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

int16x8_t sub_1D0CA18D0(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  for (uint64_t i = 0; i != 16; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x8_t result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x4_t sub_1D0CA18F8(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  for (uint64_t i = 0; i != 8; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x4_t result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

__n128 sub_1D0CA1920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 64;
  do
  {
    long long v5 = *(_OWORD *)(a2 + 256);
    long long v6 = *(_OWORD *)(a2 + 272);
    long long v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    __n128 result = *(__n128 *)(a2 + 320);
    long long v9 = *(_OWORD *)(a2 + 336);
    long long v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0CA195C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 32;
  do
  {
    __n128 result = *(__n128 *)(a2 + 128);
    long long v6 = *(_OWORD *)(a2 + 144);
    long long v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0CA1988(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 4;
  int v5 = 16;
  do
  {
    __n128 result = *v4;
    __n128 v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1D0CA19AC(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 2;
  int v5 = 8;
  do
  {
    __n128 result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

void sub_1D0CA19D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = 4;
  do
  {
    *a4 = *(void *)(a2 + 16);
    a4 = (void *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

void sub_1D0CA19F0(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    __int16 v11 = *(_WORD *)(a4 + 2 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 2 * v13;
      uint64_t v18 = -2 * v15;
      uint64_t v19 = a4 + 2 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      uint64_t v21 = (__int16 *)(v17 - 2);
      int v22 = (__int16 *)(v19 - 2);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          int v25 = v22;
          uint64_t v26 = v21;
          do
          {
            __int16 v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_WORD *)(v17 + 2 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        uint64_t v21 = (__int16 *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 2 * v6;
      uint64_t v31 = -2 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (__int16 *)(v30 - 2);
      uint64_t v34 = a4 + 2 * a3 * (v6 - 1) - 2;
      uint64_t v35 = -2 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (__int16 *)v34;
          uint64_t v40 = v33;
          do
          {
            __int16 v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_WORD *)(v30 + 2 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (__int16 *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      __int16 v11 = *(_WORD *)(a4 + 2 * ~a3);
    }
    *(_WORD *)(a5 - 2) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 2 * (int)v7;
      uint64_t v48 = (__int16 *)(a4 - 2 * a3);
      uint64_t v49 = v48;
      uint64_t v50 = (_WORD *)(a5 + 2 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          char v51 = v49;
          BOOL v52 = v50;
          uint64_t v53 = v45;
          do
          {
            __int16 v54 = *v51++;
            __int16 v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        uint64_t v50 = (_WORD *)((char *)v50 + v47);
        uint64_t v49 = (__int16 *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      uint64_t v57 = (_WORD *)(a5 + 2 * (v46 + v6));
      uint64_t v58 = 2 * v44;
      uint64_t v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          int v60 = v59;
          unsigned int v61 = v57;
          uint64_t v62 = v45;
          do
          {
            __int16 v63 = *v60++;
            __int16 v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        uint64_t v57 = (_WORD *)((char *)v57 + v58);
        uint64_t v59 = (__int16 *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1D0D7F6E0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1D0CA1D18(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6 = a1;
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &a5[v10];
        int v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      __int16 v15 = *(_WORD *)(a4 + 2 * v14);
      uint64_t v16 = v10;
      uint64_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        uint64_t v19 = (_WORD *)(a4 - 2);
        uint64_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      __int16 v22 = a5[v10];
      uint64_t v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v24 = a5;
    }
    __int16 v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      uint64_t v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      uint64_t v29 = &a5[3 << v6];
      __int16 v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F6E0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

uint64_t sub_1D0CA1F54(uint64_t result)
{
  *(void *)(result + 8) = sub_1D0CA2AE8;
  int v1 = *(unsigned __int8 *)(result + 538);
  BOOL v2 = sub_1D0CA2558;
  if (v1 == 2) {
    BOOL v2 = sub_1D0CA27E8;
  }
  if (v1 == 3) {
    BOOL v2 = sub_1D0CA2234;
  }
  *(void *)(result + 24) = v2;
  *(void *)(result + 56) = sub_1D0C9D5C4;
  *(void *)(result + 64) = sub_1D0C9D51C;
  *(void *)(result + 72) = sub_1D0C9D474;
  *(void *)(result + 528) = sub_1D0CA2128;
  *(void *)(result + 456) = sub_1D0CDF3B8;
  *(void *)(result + 464) = sub_1D0CDF36C;
  *(void *)(result + 360) = sub_1D0CDF2BC;
  *(void *)(result + 368) = sub_1D0CDF21C;
  *(void *)(result + 392) = sub_1D0CDF1F4;
  *(void *)(result + 400) = sub_1D0CDF1C4;
  *(void *)(result + 408) = sub_1D0CDF198;
  *(void *)(result + 416) = sub_1D0CDF15C;
  *(void *)(result + 424) = sub_1D0CDF11C;
  *(void *)(result + 432) = sub_1D0CDF0DC;
  *(void *)(result + 440) = sub_1D0CDF0AC;
  *(void *)(result + 448) = sub_1D0CDF074;
  *(void *)(result + 488) = sub_1D0CDEE68;
  *(void *)(result + 496) = sub_1D0CDEB60;
  *(void *)(result + 504) = sub_1D0CDE810;
  *(void *)(result + 512) = sub_1D0CDE488;
  *(void *)(result + 472) = sub_1D0CDE42C;
  *(void *)(result + 376) = sub_1D0CDE32C;
  *(void *)(result + 480) = sub_1D0CDE298;
  *(void *)(result + 384) = sub_1D0CDE15C;
  return result;
}

uint64_t sub_1D0CA2128(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 >= 1)
  {
    uint64_t v6 = a6;
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = a6 + 2;
    uint64_t v18 = a2;
    char v12 = 9 - a4;
    uint64_t v13 = 4 * a2;
    uint64_t v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v15 = 0;
        do
        {
          __n128 result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v6 + v15) = result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    int v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v17 = 0;
        do
        {
          __n128 result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v11 + v17) = result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1D0CA2234(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    int v11 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 4 * v13;
      uint64_t v18 = -4 * v15;
      uint64_t v19 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      uint64_t v21 = (int *)(v17 - 4);
      __int16 v22 = (int *)(v19 - 4);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          __int16 v25 = v22;
          uint64_t v26 = v21;
          do
          {
            int v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v17 + 4 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        uint64_t v21 = (int *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (int *)v34;
          uint64_t v40 = v33;
          do
          {
            int v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      int v11 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 4 * (int)v7;
      uint64_t v48 = (int *)(a4 - 4 * a3);
      uint64_t v49 = v48;
      uint64_t v50 = (_DWORD *)(a5 + 4 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          char v51 = v49;
          BOOL v52 = v50;
          uint64_t v53 = v45;
          do
          {
            int v54 = *v51++;
            int v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        uint64_t v50 = (_DWORD *)((char *)v50 + v47);
        uint64_t v49 = (int *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      uint64_t v57 = (_DWORD *)(a5 + 4 * (v46 + v6));
      uint64_t v58 = 4 * v44;
      uint64_t v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          int v60 = v59;
          unsigned int v61 = v57;
          uint64_t v62 = v45;
          do
          {
            int v63 = *v60++;
            int v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        uint64_t v57 = (_DWORD *)((char *)v57 + v58);
        uint64_t v59 = (int *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6F0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0CA2558(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = (1 << a1);
    unsigned int v6 = __clz(__rbit32(a2));
    if (v6 < 9) {
      uint64_t v7 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 + 18 + v6]) * a3 - 1;
    }
    else {
      uint64_t v7 = byte_1D0D7FB44[9 * a1 + 9 + v6] - a3;
    }
    LODWORD(v8) = (int)v5 >> 2;
    unsigned int v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 2 << a1;
      uint64_t v12 = a5 + 4 * v11;
      if ((int)v8 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v8;
      }
      uint64_t v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        uint64_t v15 = v10 + 1;
        if ((a2 >> v10))
        {
          uint64_t v16 = -4;
          uint64_t v17 = (unsigned int *)v14;
          do
          {
            unsigned int v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        uint64_t v10 = v15;
      }
      while (v15 != v13);
      uint64_t v18 = 0;
      uint64_t v19 = a5 + 4 * v5;
      uint64_t v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        uint64_t v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          uint64_t v22 = -4;
          uint64_t v23 = (unsigned int *)v20;
          do
          {
            unsigned int v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        uint64_t v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v9 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      uint64_t v24 = 0;
      int v25 = 2 << a1;
      if ((int)v8 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v8;
      }
      uint64_t v26 = a5 + 4 * v25;
      uint64_t v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * (v25 + (unint64_t)v5);
      uint64_t v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6F0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0CA27E8(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 + 9 + v8] - a3;
    }
    unsigned int v10 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v11 = 0;
      LODWORD(v12) = ((int)v6 + 4) >> 3;
      int v13 = 2 << a1;
      if ((int)v12 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v12;
      }
      if ((int)v6 >= 8) {
        int v14 = 8;
      }
      else {
        int v14 = 1 << a1;
      }
      uint64_t v15 = v14;
      uint64_t v16 = a5 + 4 * v13;
      uint64_t v17 = -4 * v14;
      uint64_t v18 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v19 = a3 * v14;
      uint64_t v20 = (unsigned int *)(v16 - 4);
      uint64_t v21 = (unsigned int *)(v18 - 4);
      uint64_t v22 = v7 + 1;
      uint64_t v23 = -(uint64_t)v14;
      do
      {
        if ((a2 >> v11))
        {
          uint64_t v24 = v22;
          int v25 = v21;
          uint64_t v26 = v20;
          do
          {
            unsigned int v10 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v16 + 4 * v27) = v10;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v11;
        uint64_t v20 = (unsigned int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v12);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v15;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (unsigned int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v19;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v15;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (unsigned int *)v34;
          uint64_t v40 = v33;
          do
          {
            unsigned int v10 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v10;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (unsigned int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v12);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v10 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      LODWORD(v43) = (int)v6 >> 2;
      uint64_t v44 = 2 << a1;
      if ((int)v6 >> 2 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v43;
      }
      uint64_t v45 = a4 - 4 * a3;
      uint64_t v46 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v10 = *(_DWORD *)(v45 + i);
            *(_DWORD *)(v46 + i) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v44 + 4 * v42)) = vdupq_n_s32(v10);
        }
        ++v42;
        v46 += 16;
        v45 += 16;
      }
      while (v42 != v43);
      uint64_t v48 = 0;
      uint64_t v49 = a5 + 4 * (v44 + v6);
      uint64_t v50 = a4 - 4 * a3 + 4 * v6;
      do
      {
        if (((a2 >> v48) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v10 = *(_DWORD *)(v50 + j);
            *(_DWORD *)(v49 + j) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v6 + 4 * v48 + v44)) = vdupq_n_s32(v10);
        }
        ++v48;
        v49 += 16;
        v50 += 16;
      }
      while (v48 != v43);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F6F0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0CA2AE8(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6 = a1;
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &a5[v10];
        int v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      int v15 = *(_DWORD *)(a4 + 4 * v14);
      uint64_t v16 = v10;
      uint64_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        uint64_t v19 = (_DWORD *)(a4 - 4);
        uint64_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      int v22 = a5[v10];
      uint64_t v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v24 = a5;
    }
    int v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      uint64_t v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      uint64_t v29 = &a5[3 << v6];
      int v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F6F0, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

uint64_t sub_1D0CA2D20(uint64_t result)
{
  *(void *)__n128 result = sub_1D0CA3554;
  *(void *)(result + 16) = sub_1D0CA322C;
  int v1 = *(unsigned __int8 *)(result + 537);
  *(void *)(result + 312) = sub_1D0C9E828;
  *(void *)(result + 200) = sub_1D0CA320C;
  *(void *)(result + 208) = sub_1D0CA31E8;
  *(void *)(result + 216) = sub_1D0CA31C4;
  *(void *)(result + 224) = sub_1D0CA3198;
  *(void *)(result + 232) = sub_1D0CA315C;
  *(void *)(result + 120) = sub_1D0CA3134;
  *(void *)(result + 128) = sub_1D0CA310C;
  *(void *)(result + 136) = sub_1D0CA30E0;
  *(void *)(result + 144) = sub_1D0CA30A8;
  *(void *)(result + 152) = sub_1D0CA3070;
  *(void *)(result + 520) = sub_1D0CA2FD0;
  *(void *)(result + 32) = sub_1D0CDBE90;
  *(void *)(result + 40) = sub_1D0CDBDCC;
  BOOL v2 = v1 == 0;
  uint64_t v3 = sub_1D0CDC29C;
  if (v2) {
    uint64_t v3 = sub_1D0CDBD08;
  }
  *(void *)(result + 48) = v3;
  *(void *)(result + 320) = sub_1D0CDBB9C;
  *(void *)(result + 328) = sub_1D0CDBAC0;
  *(void *)(result + 280) = sub_1D0CDBA28;
  *(void *)(result + 288) = sub_1D0CDB990;
  *(void *)(result + 160) = sub_1D0CDC234;
  *(void *)(result + 168) = sub_1D0CDC160;
  *(void *)(result + 176) = sub_1D0CDC0B0;
  *(void *)(result + 184) = sub_1D0CDB778;
  *(void *)(result + 192) = sub_1D0CDB73C;
  *(void *)(result + 80) = sub_1D0CDC054;
  *(void *)(result + 88) = sub_1D0CDBFBC;
  *(void *)(result + 96) = sub_1D0CDBF18;
  *(void *)(result + 104) = sub_1D0CDB574;
  *(void *)(result + 112) = sub_1D0CDB53C;
  *(void *)(result + 240) = sub_1D0CDB3AC;
  *(void *)(result + 248) = sub_1D0CDB130;
  *(void *)(result + 256) = sub_1D0CDAE08;
  *(void *)(result + 264) = sub_1D0CDAA30;
  *(void *)(result + 272) = sub_1D0CDA614;
  *(void *)(result + 336) = sub_1D0CDA4B0;
  *(void *)(result + 352) = sub_1D0CDA414;
  *(void *)(result + 296) = sub_1D0CDA374;
  *(void *)(result + 344) = sub_1D0CDA314;
  *(void *)(result + 304) = sub_1D0CDA214;
  return result;
}

uint64_t sub_1D0CA2FD0(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 >= 1)
  {
    uint64_t v8 = result;
    int v9 = 0;
    char v10 = 9 - a3;
    uint64_t v11 = 2 * a2;
    uint64_t v12 = 2 * a4;
    do
    {
      uint64_t v13 = 0;
      do
      {
        __n128 result = sub_1D0C51880(v8, a3);
        *(_WORD *)(a5 + v13) = result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_1D0CA3070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 64; ++i)
  {
    uint64_t v5 = 0;
    char v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

void sub_1D0CA30A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v5 = 0;
    char v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

int16x8_t sub_1D0CA30E0(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a4 + 1;
  do
  {
    char v6 = (const __int16 *)(a2 + v4);
    int16x8_t result = vld1q_dup_s16(v6);
    v5[-1] = result;
    int16x8_t *v5 = result;
    v4 += 2;
    uint64_t v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

int16x8_t sub_1D0CA310C(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  for (uint64_t i = 0; i != 16; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x8_t result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x4_t sub_1D0CA3134(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  for (uint64_t i = 0; i != 8; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x4_t result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

__n128 sub_1D0CA315C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 64;
  do
  {
    long long v5 = *(_OWORD *)(a2 + 256);
    long long v6 = *(_OWORD *)(a2 + 272);
    long long v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    __n128 result = *(__n128 *)(a2 + 320);
    long long v9 = *(_OWORD *)(a2 + 336);
    long long v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0CA3198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 32;
  do
  {
    __n128 result = *(__n128 *)(a2 + 128);
    long long v6 = *(_OWORD *)(a2 + 144);
    long long v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0CA31C4(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 4;
  int v5 = 16;
  do
  {
    __n128 result = *v4;
    __n128 v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1D0CA31E8(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 2;
  int v5 = 8;
  do
  {
    __n128 result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

void sub_1D0CA320C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = 4;
  do
  {
    *a4 = *(void *)(a2 + 16);
    a4 = (void *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

void sub_1D0CA322C(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    __int16 v11 = *(_WORD *)(a4 + 2 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 2 * v13;
      uint64_t v18 = -2 * v15;
      uint64_t v19 = a4 + 2 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      uint64_t v21 = (__int16 *)(v17 - 2);
      int v22 = (__int16 *)(v19 - 2);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          int v25 = v22;
          uint64_t v26 = v21;
          do
          {
            __int16 v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_WORD *)(v17 + 2 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        uint64_t v21 = (__int16 *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 2 * v6;
      uint64_t v31 = -2 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (__int16 *)(v30 - 2);
      uint64_t v34 = a4 + 2 * a3 * (v6 - 1) - 2;
      uint64_t v35 = -2 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (__int16 *)v34;
          uint64_t v40 = v33;
          do
          {
            __int16 v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_WORD *)(v30 + 2 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (__int16 *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      __int16 v11 = *(_WORD *)(a4 + 2 * ~a3);
    }
    *(_WORD *)(a5 - 2) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 2 * (int)v7;
      uint64_t v48 = (__int16 *)(a4 - 2 * a3);
      uint64_t v49 = v48;
      uint64_t v50 = (_WORD *)(a5 + 2 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          char v51 = v49;
          BOOL v52 = v50;
          uint64_t v53 = v45;
          do
          {
            __int16 v54 = *v51++;
            __int16 v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        uint64_t v50 = (_WORD *)((char *)v50 + v47);
        uint64_t v49 = (__int16 *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      uint64_t v57 = (_WORD *)(a5 + 2 * (v46 + v6));
      uint64_t v58 = 2 * v44;
      uint64_t v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          int v60 = v59;
          unsigned int v61 = v57;
          uint64_t v62 = v45;
          do
          {
            __int16 v63 = *v60++;
            __int16 v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        uint64_t v57 = (_WORD *)((char *)v57 + v58);
        uint64_t v59 = (__int16 *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1D0D7F6F0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1D0CA3554(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6 = a1;
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &a5[v10];
        int v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      __int16 v15 = *(_WORD *)(a4 + 2 * v14);
      uint64_t v16 = v10;
      uint64_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        uint64_t v19 = (_WORD *)(a4 - 2);
        uint64_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      __int16 v22 = a5[v10];
      uint64_t v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v24 = a5;
    }
    __int16 v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      uint64_t v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      uint64_t v29 = &a5[3 << v6];
      __int16 v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F6F0, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

uint64_t sub_1D0CA3790(uint64_t result)
{
  *(void *)(result + 8) = sub_1D0CA4324;
  int v1 = *(unsigned __int8 *)(result + 538);
  BOOL v2 = sub_1D0CA3D94;
  if (v1 == 2) {
    BOOL v2 = sub_1D0CA4024;
  }
  if (v1 == 3) {
    BOOL v2 = sub_1D0CA3A70;
  }
  *(void *)(result + 24) = v2;
  *(void *)(result + 56) = sub_1D0C9D5C4;
  *(void *)(result + 64) = sub_1D0C9D51C;
  *(void *)(result + 72) = sub_1D0C9D474;
  *(void *)(result + 528) = sub_1D0CA3964;
  *(void *)(result + 456) = sub_1D0CDF3B8;
  *(void *)(result + 464) = sub_1D0CDF36C;
  *(void *)(result + 360) = sub_1D0CDF2BC;
  *(void *)(result + 368) = sub_1D0CDF21C;
  *(void *)(result + 392) = sub_1D0CDF1F4;
  *(void *)(result + 400) = sub_1D0CDF1C4;
  *(void *)(result + 408) = sub_1D0CDF198;
  *(void *)(result + 416) = sub_1D0CDF15C;
  *(void *)(result + 424) = sub_1D0CDF11C;
  *(void *)(result + 432) = sub_1D0CDF0DC;
  *(void *)(result + 440) = sub_1D0CDF0AC;
  *(void *)(result + 448) = sub_1D0CDF074;
  *(void *)(result + 488) = sub_1D0CDEE68;
  *(void *)(result + 496) = sub_1D0CDEB60;
  *(void *)(result + 504) = sub_1D0CDE810;
  *(void *)(result + 512) = sub_1D0CDE488;
  *(void *)(result + 472) = sub_1D0CDE42C;
  *(void *)(result + 376) = sub_1D0CDE32C;
  *(void *)(result + 480) = sub_1D0CDE298;
  *(void *)(result + 384) = sub_1D0CDE15C;
  return result;
}

uint64_t sub_1D0CA3964(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 >= 1)
  {
    uint64_t v6 = a6;
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = a6 + 2;
    uint64_t v18 = a2;
    char v12 = 8 - a4;
    uint64_t v13 = 4 * a2;
    uint64_t v14 = 2 * a5;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v15 = 0;
        do
        {
          __n128 result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v6 + v15) = result << v12;
          v15 += 4;
        }
        while (v13 != v15);
      }
      ++v10;
      v6 += v14;
    }
    while (v10 != a3);
    int v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v17 = 0;
        do
        {
          __n128 result = sub_1D0C51880(v9, a4);
          *(_WORD *)(v11 + v17) = result << v12;
          v17 += 4;
        }
        while (4 * v18 != v17);
      }
      ++v16;
      v11 += v14;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1D0CA3A70(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    int v11 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 4 * v13;
      uint64_t v18 = -4 * v15;
      uint64_t v19 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      uint64_t v21 = (int *)(v17 - 4);
      __int16 v22 = (int *)(v19 - 4);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          __int16 v25 = v22;
          uint64_t v26 = v21;
          do
          {
            int v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v17 + 4 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        uint64_t v21 = (int *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (int *)v34;
          uint64_t v40 = v33;
          do
          {
            int v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      int v11 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 4 * (int)v7;
      uint64_t v48 = (int *)(a4 - 4 * a3);
      uint64_t v49 = v48;
      uint64_t v50 = (_DWORD *)(a5 + 4 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          char v51 = v49;
          BOOL v52 = v50;
          uint64_t v53 = v45;
          do
          {
            int v54 = *v51++;
            int v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        uint64_t v50 = (_DWORD *)((char *)v50 + v47);
        uint64_t v49 = (int *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      uint64_t v57 = (_DWORD *)(a5 + 4 * (v46 + v6));
      uint64_t v58 = 4 * v44;
      uint64_t v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          int v60 = v59;
          unsigned int v61 = v57;
          uint64_t v62 = v45;
          do
          {
            int v63 = *v60++;
            int v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        uint64_t v57 = (_DWORD *)((char *)v57 + v58);
        uint64_t v59 = (int *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F700, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0CA3D94(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = (1 << a1);
    unsigned int v6 = __clz(__rbit32(a2));
    if (v6 < 9) {
      uint64_t v7 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 + 18 + v6]) * a3 - 1;
    }
    else {
      uint64_t v7 = byte_1D0D7FB44[9 * a1 + 9 + v6] - a3;
    }
    LODWORD(v8) = (int)v5 >> 2;
    unsigned int v9 = *(_DWORD *)(a4 + 4 * v7);
    if ((int)v5 >= 4)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 2 << a1;
      uint64_t v12 = a5 + 4 * v11;
      if ((int)v8 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v8;
      }
      uint64_t v14 = a4 + 4 * a3 * (v11 - 1) - 4;
      do
      {
        uint64_t v15 = v10 + 1;
        if ((a2 >> v10))
        {
          uint64_t v16 = -4;
          uint64_t v17 = (unsigned int *)v14;
          do
          {
            unsigned int v9 = *v17;
            *(_DWORD *)(v12 + v16) = *v17;
            v16 -= 4;
            v17 -= a3;
          }
          while (v16 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v11 - 4 * v15)) = vdupq_n_s32(v9);
        }
        v12 -= 16;
        v14 -= 16 * a3;
        uint64_t v10 = v15;
      }
      while (v15 != v13);
      uint64_t v18 = 0;
      uint64_t v19 = a5 + 4 * v5;
      uint64_t v20 = a4 + 4 * a3 * (v5 - 1) - 4;
      do
      {
        uint64_t v21 = v18 + 1;
        if (((a2 >> v18) & 0x10) != 0)
        {
          uint64_t v22 = -4;
          uint64_t v23 = (unsigned int *)v20;
          do
          {
            unsigned int v9 = *v23;
            *(_DWORD *)(v19 + v22) = *v23;
            v22 -= 4;
            v23 -= a3;
          }
          while (v22 != -20);
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 - 4 * v21)) = vdupq_n_s32(v9);
        }
        v19 -= 16;
        v20 -= 16 * a3;
        uint64_t v18 = v21;
      }
      while (v21 != v13);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v9 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v9;
    if ((int)v5 >= 4)
    {
      uint64_t v24 = 0;
      int v25 = 2 << a1;
      if ((int)v8 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v8;
      }
      uint64_t v26 = a5 + 4 * v25;
      uint64_t v27 = a4 - 4 * a3;
      do
      {
        if (((a2 >> v24) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v9 = *(_DWORD *)(v27 + i);
            *(_DWORD *)(v26 + i) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v25 + 4 * v24)) = vdupq_n_s32(v9);
        }
        ++v24;
        v26 += 16;
        v27 += 16;
      }
      while (v24 != v8);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * (v25 + (unint64_t)v5);
      uint64_t v31 = a4 - 4 * a3 + 4 * v5;
      do
      {
        if (((a2 >> v29) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v9 = *(_DWORD *)(v31 + j);
            *(_DWORD *)(v30 + j) = v9;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v5 + 4 * v29 + (2 << a1))) = vdupq_n_s32(v9);
        }
        ++v29;
        v30 += 16;
        v31 += 16;
      }
      while (v29 != v8);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F700, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

void sub_1D0CA4024(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 + 9 + v8] - a3;
    }
    unsigned int v10 = *(_DWORD *)(a4 + 4 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v11 = 0;
      LODWORD(v12) = ((int)v6 + 4) >> 3;
      int v13 = 2 << a1;
      if ((int)v12 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v12;
      }
      if ((int)v6 >= 8) {
        int v14 = 8;
      }
      else {
        int v14 = 1 << a1;
      }
      uint64_t v15 = v14;
      uint64_t v16 = a5 + 4 * v13;
      uint64_t v17 = -4 * v14;
      uint64_t v18 = a4 + 4 * a3 * (v13 - 1);
      uint64_t v19 = a3 * v14;
      uint64_t v20 = (unsigned int *)(v16 - 4);
      uint64_t v21 = (unsigned int *)(v18 - 4);
      uint64_t v22 = v7 + 1;
      uint64_t v23 = -(uint64_t)v14;
      do
      {
        if ((a2 >> v11))
        {
          uint64_t v24 = v22;
          int v25 = v21;
          uint64_t v26 = v20;
          do
          {
            unsigned int v10 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_DWORD *)(v16 + 4 * v27) = v10;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v11;
        uint64_t v20 = (unsigned int *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v12);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 4 * v6;
      uint64_t v31 = -4 * v15;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      uint64_t v33 = (unsigned int *)(v30 - 4);
      uint64_t v34 = a4 + 4 * a3 * (v6 - 1) - 4;
      uint64_t v35 = -4 * v19;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v15;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          uint64_t v39 = (unsigned int *)v34;
          uint64_t v40 = v33;
          do
          {
            unsigned int v10 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_DWORD *)(v30 + 4 * v41) = v10;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        uint64_t v33 = (unsigned int *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v12);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v10 = *(_DWORD *)(a4 + 4 * ~a3);
    }
    *(_DWORD *)(a5 - 4) = v10;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      LODWORD(v43) = (int)v6 >> 2;
      uint64_t v44 = 2 << a1;
      if ((int)v6 >> 2 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v43;
      }
      uint64_t v45 = a4 - 4 * a3;
      uint64_t v46 = a5 + 4 * (2 << a1);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 16; i += 4)
          {
            unsigned int v10 = *(_DWORD *)(v45 + i);
            *(_DWORD *)(v46 + i) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v44 + 4 * v42)) = vdupq_n_s32(v10);
        }
        ++v42;
        v46 += 16;
        v45 += 16;
      }
      while (v42 != v43);
      uint64_t v48 = 0;
      uint64_t v49 = a5 + 4 * (v44 + v6);
      uint64_t v50 = a4 - 4 * a3 + 4 * v6;
      do
      {
        if (((a2 >> v48) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 16; j += 4)
          {
            unsigned int v10 = *(_DWORD *)(v50 + j);
            *(_DWORD *)(v49 + j) = v10;
          }
        }
        else
        {
          *(int32x4_t *)(a5 + 4 * (v6 + 4 * v48 + v44)) = vdupq_n_s32(v10);
        }
        ++v48;
        v49 += 16;
        v50 += 16;
      }
      while (v48 != v43);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 4), &unk_1D0D7F700, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}