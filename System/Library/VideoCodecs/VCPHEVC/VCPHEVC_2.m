void sub_1D0CFD900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;

  if (v26) {
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0CFD950(int32x2_t *a1)
{
  int32x2_t v2 = a1[72];
  int v54 = *(char *)(*(void *)&v2 + 480);
  int32x2_t v56 = v2;
  if (*(unsigned char *)(*(void *)&v2 + 897))
  {
    bzero(*(void **)(*(void *)&v2 + 192), 32 * *(unsigned int *)(*(void *)&v2 + 220));
    int32x2_t v2 = v56;
  }
  if (!a1[807].i8[1])
  {
    if (*(char *)(*(void *)&v2 + 444) >= 2)
    {
      __int32 v3 = a1[100].i32[0];
      __int32 v55 = *(unsigned __int8 *)(*(void *)(*(void *)&a1[379] + 576) + 538);
      if (v3 < v55)
      {
        int v4 = a1[691].i32[0];
        int v5 = a1[691].i32[1];
        __int32 v6 = *(unsigned __int8 *)(*(void *)(*(void *)&a1[379] + 576) + 538);
        do
        {
          if (v5 >= 1)
          {
            int v7 = 0;
            int v8 = 1 << v6;
            unsigned int v58 = ((1 << v6) + v4 - 1) >> v6;
            unsigned int v9 = (1 << v6) >> 1;
            uint64_t v10 = (1 << (2 * v6 - 3));
            char v11 = 2 * v6 - 2;
            uint64_t v59 = (1 << (2 * v6 - 1));
            char v60 = 2 * v6;
            uint64_t v12 = (1 << v6) >> (v3 + 1);
            v57 = &a1[3 * (v55 - v6) + 740];
            __int32 v61 = v6;
            do
            {
              unsigned int v13 = v7 + v8;
              if (v4 >= 1)
              {
                int v14 = 0;
                int v15 = (v7 >> v6) * v58;
                int32x2_t v16 = *v57;
                int v62 = v7;
                do
                {
                  unsigned int v17 = v14 + v8;
                  if (v14 + v8 <= v4 && v13 <= a1[691].i32[1])
                  {
                    if (v7 >= v13)
                    {
                      uint64_t v21 = 0;
                      uint64_t v20 = 0;
                      uint64_t v19 = 0;
                    }
                    else
                    {
                      uint64_t v19 = 0;
                      uint64_t v20 = 0;
                      uint64_t v21 = 0;
                      do
                      {
                        if (v14 < v17)
                        {
                          __int32 v22 = a1[100].i32[0];
                          int32x2_t v23 = a1[704];
                          uint64_t v24 = *(void *)&v23 * (v7 >> v22);
                          uint64_t v25 = 4 * *(void *)&v23;
                          uint64_t v26 = 8 * *(void *)&v23;
                          int v27 = v14;
                          do
                          {
                            if ((int)v12 < 1)
                            {
                              unsigned int v29 = 0;
                              unsigned int v37 = 0;
                            }
                            else
                            {
                              uint64_t v28 = 0;
                              unsigned int v29 = 0;
                              uint64_t v30 = v24 + (v27 >> v22);
                              uint64_t v31 = *(void *)&a1[722] + 4 * v30;
                              uint64_t v32 = *(void *)&a1[725] + 8 * v30;
                              do
                              {
                                v33 = (int *)v31;
                                uint64_t v34 = v12;
                                do
                                {
                                  int v35 = *v33++;
                                  v29 += v35;
                                  --v34;
                                }
                                while (v34);
                                ++v28;
                                v31 += v25;
                              }
                              while (v28 != v12);
                              uint64_t v36 = 0;
                              unsigned int v37 = 0;
                              do
                              {
                                v38 = (int *)v32;
                                uint64_t v39 = v12;
                                do
                                {
                                  int v40 = *v38;
                                  v38 += 2;
                                  v37 += v40;
                                  --v39;
                                }
                                while (v39);
                                ++v36;
                                v32 += v26;
                              }
                              while (v36 != v12);
                            }
                            v19 += (v10 + v37 - ((v29 * (unint64_t)v29) >> v11)) >> v11;
                            v21 += v29;
                            v20 += v37;
                            v27 += v9;
                          }
                          while (v27 < v17);
                        }
                        v7 += v9;
                      }
                      while (v7 < v13);
                    }
                    unint64_t v41 = (v20 + v59 - ((unint64_t)(v21 * v21) >> v60)) >> v60;
                    int v18 = (v41 - ((unint64_t)(v19 + 2) >> 2)) & ~((int)(v41 - ((unint64_t)(v19 + 2) >> 2)) >> 31);
                    __int32 v6 = v61;
                    int v7 = v62;
                  }
                  else
                  {
                    int v18 = 0;
                  }
                  *(_DWORD *)(*(void *)&v16 + 4 * ((v14 >> v6) + v15)) = v18;
                  int v4 = a1[691].i32[0];
                  v14 += v8;
                }
                while ((int)v17 < v4);
                int v5 = a1[691].i32[1];
              }
              int v7 = v13;
            }
            while ((int)v13 < v5);
            __int32 v3 = a1[100].i32[0];
          }
          --v6;
        }
        while (v6 > v3);
      }
    }
    if (*(unsigned char *)(*(void *)&v56 + 870))
    {
      v42 = *(int32x2_t **)(*(void *)&a1[127] + 632);
      a1[300].i32[0] = v42[145].i32[0];
      int32x2_t v43 = v42[144];
      a1[299] = v43;
      a1[298] = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmul_s32(a1[298], (int32x2_t)0xA0000000DLL), v43, (int32x2_t)0x600000003), (int32x2_t)0x800000008), 4uLL);
    }
  }
  int32x2_t v44 = a1[79];
  *(_DWORD *)(*(void *)&v44 + 1168) = 0;
  if (v54 < 1) {
    return 0;
  }
  uint64_t v45 = 0;
  while (1)
  {
    *(unsigned char *)(*(void *)&v44 + 48) = *(unsigned char *)(*(void *)&v44 + 40) != 0;
    atomic_store(0x80000000, (unsigned int *)(*(void *)&v44 + 1032));
    std::condition_variable::notify_all((std::condition_variable *)(*(void *)&v44 + 1104));
    sub_1D0D4E620(*(void **)(*(void *)&a1[804] + 8 * v45), (uint64_t)a1, v45, 0);
    if (v46)
    {
      uint64_t v48 = v46;
      if (dword_1EB671A40 < 3) {
        return v48;
      }
      v49 = (FILE *)*MEMORY[0x1E4F143C8];
      v50 = "Slice initialization failed\n";
      v51 = "Slice initialization failed\n";
      size_t v52 = 28;
      goto LABEL_51;
    }
    uint64_t v47 = sub_1D0D50BB0(*(void *)(*(void *)&a1[804] + 8 * v45), *(unsigned __int8 *)(*(void *)&v56 + 428));
    if (v47) {
      break;
    }
    int32x2_t v44 = a1[79];
    *(_DWORD *)(*(void *)&v44 + 1168) += *(_DWORD *)(*(void *)(*(void *)&a1[804] + 8 * v45++) + 5424);
    if (v54 == v45) {
      return 0;
    }
  }
  uint64_t v48 = v47;
  if (dword_1EB671A40 < 3) {
    return v48;
  }
  v49 = (FILE *)*MEMORY[0x1E4F143C8];
  v50 = "Slice encode failed\n";
  v51 = "Slice encode failed\n";
  size_t v52 = 20;
LABEL_51:
  fwrite(v51, v52, 1uLL, v49);
  syslog(27, v50);
  return v48;
}

uint64_t sub_1D0CFDDA0(unsigned __int8 *a1)
{
  uint64_t v197 = *MEMORY[0x1E4F143B8];
  int32x2_t v2 = (unsigned char *)*((void *)a1 + 72);
  uint64_t v3 = (char)v2[480];
  if (a1[648]) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = a1[757] != 0;
  }
  unint64_t v5 = (char)v2[480];
  int v6 = v2[481];
  if (v6 == 1)
  {
    int32x2_t v7 = (int32x2_t)0x300000003;
LABEL_6:
    *((int32x2_t *)a1 + 57) = v7;
    goto LABEL_16;
  }
  if (v2[486])
  {
    if (*(unsigned char *)(*((void *)a1 + 79) + 528) == 10) {
      sub_1D0CFF7F0((uint64_t)a1);
    }
    else {
      sub_1D0CFFDA8((uint64_t)a1);
    }
  }
  else if (*(unsigned char *)(*((void *)a1 + 7) + 16))
  {
    if (!v2[481]) {
      goto LABEL_14;
    }
    if (v6 == 3)
    {
      int32x2_t v7 = (int32x2_t)0xFFFFFFF800000000;
      goto LABEL_6;
    }
    if (v6 == 2)
    {
LABEL_14:
      float v8 = *((float *)a1 + 1619) * -0.46 + 9.26;
      int32x2_t v7 = vmax_s32(vmin_s32(vcvt_s32_f32(vmul_n_f32((float32x2_t)0x3FB1EB853F851EB8, v8)), 0), (int32x2_t)0xB0000000BLL);
      goto LABEL_6;
    }
  }
LABEL_16:
  unsigned int v9 = (uint64_t *)*((void *)a1 + 805);
  uint64_t v10 = (void *)*((void *)a1 + 804);
  unint64_t v11 = v9 - v10;
  v183 = v2;
  uint64_t v191 = v3;
  if ((int)v3 <= v11)
  {
    if ((int)v3 >= v11)
    {
      uint64_t v25 = (uint64_t *)*((void *)a1 + 805);
    }
    else
    {
      uint64_t v25 = &v10[(int)v3];
      while (v9 != v25)
      {
        uint64_t v27 = *--v9;
        uint64_t v26 = v27;
        *unsigned int v9 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
        }
      }
      *((void *)a1 + 805) = v25;
    }
    goto LABEL_46;
  }
  unint64_t v12 = (int)v3 - v11;
  uint64_t v13 = *((void *)a1 + 806);
  if (v5 - v11 <= (v13 - (uint64_t)v9) >> 3)
  {
    bzero(v9, 8 * v12);
    uint64_t v25 = &v9[v12];
    *((void *)a1 + 805) = v25;
    uint64_t v3 = v191;
    goto LABEL_46;
  }
  if ((v5 & 0x80000000) != 0) {
    sub_1D0C8D71C();
  }
  uint64_t v14 = v13 - (void)v10;
  uint64_t v15 = v14 >> 2;
  if (v14 >> 2 <= v5) {
    uint64_t v15 = v5;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >> 61) {
    sub_1D0C6AC2C();
  }
  unsigned int v17 = (char *)operator new(8 * v16);
  int v18 = &v17[8 * v11];
  uint64_t v19 = &v17[8 * v16];
  bzero(v18, 8 * v12);
  uint64_t v20 = &v18[8 * v12];
  if (v9 != v10)
  {
    uint64_t v3 = v191;
    do
    {
      uint64_t v21 = *--v9;
      *unsigned int v9 = 0;
      *((void *)v18 - 1) = v21;
      v18 -= 8;
    }
    while (v9 != v10);
    __int32 v22 = (uint64_t *)*((void *)a1 + 804);
    unsigned int v9 = (uint64_t *)*((void *)a1 + 805);
    *((void *)a1 + 804) = v18;
    *((void *)a1 + 805) = v20;
    *((void *)a1 + 806) = v19;
    if (v9 == v22)
    {
      int32x2_t v2 = v183;
      if (!v9) {
        goto LABEL_45;
      }
    }
    else
    {
      int32x2_t v2 = v183;
      do
      {
        uint64_t v24 = *--v9;
        uint64_t v23 = v24;
        *unsigned int v9 = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
        }
      }
      while (v9 != v22);
      unsigned int v9 = v22;
      if (!v22) {
        goto LABEL_45;
      }
    }
    goto LABEL_44;
  }
  *((void *)a1 + 804) = v18;
  *((void *)a1 + 805) = v20;
  *((void *)a1 + 806) = v19;
  int32x2_t v2 = v183;
  uint64_t v3 = v191;
  if (v9) {
LABEL_44:
  }
    operator delete(v9);
LABEL_45:
  uint64_t v25 = (uint64_t *)*((void *)a1 + 805);
LABEL_46:
  for (i = (uint64_t *)*((void *)a1 + 804); i != v25; ++i)
  {
    if (!*i)
    {
      unsigned int v29 = operator new(0x1580uLL, (std::align_val_t)0x40uLL);
      double v30 = sub_1D0D4E470((uint64_t)v29);
      uint64_t v31 = *i;
      uint64_t *i = (uint64_t)v29;
      if (v31) {
        (*(void (**)(uint64_t, double))(*(void *)v31 + 16))(v31, v30);
      }
    }
  }
  if (v4)
  {
    a1[648] = 4;
    uint64_t v32 = sub_1D0CFD950((int32x2_t *)a1);
    if (v32) {
      return v32;
    }
    sub_1D0D0030C((void *)a1 + 77, (uint64_t)(a1 + 632), 0);
    uint64_t v33 = *((void *)a1 + 79);
    bzero(*(void **)(v33 + 944), *(void *)(v33 + 928) * *(void *)(v33 + 760));
    bzero(*(void **)(v33 + 968), *(void *)(v33 + 936) * *(void *)(v33 + 752));
    bzero(*(void **)(v33 + 800), 2 * *(void *)(v33 + 760) * *(void *)(v33 + 768));
    bzero(*(void **)(v33 + 880), 16 * *(void *)(v33 + 840) * *(void *)(v33 + 848));
    a1[648] = 0;
    if (*((_DWORD *)v2 + 114) == 34) {
      *((float *)a1 + 1619) = *((float *)a1 + 1619) + -6.0;
    }
  }
  unint64_t v190 = 0;
  uint64_t v34 = a1 + 6457;
  int v35 = (unint64_t *)(a1 + 6664);
  float v36 = 1.0;
  int v189 = v5;
  while (1)
  {
    uint64_t v37 = sub_1D0CFD950((int32x2_t *)a1);
    if (v37) {
      return v37;
    }
    uint64_t v38 = *((void *)a1 + 808);
    if (v38) {
      break;
    }
    unint64_t v47 = *((void *)a1 + 18);
    if (!v47) {
      goto LABEL_153;
    }
    *int v35 = 0;
    v35[1] = 0;
    if ((int)v3 < 1)
    {
      unint64_t v49 = 0;
    }
    else
    {
      uint64_t v48 = 0;
      unint64_t v49 = 0;
      v50 = (void *)*((void *)a1 + 804);
      uint64_t v51 = v3;
      do
      {
        size_t v52 = (void *)*v50++;
        v49 += 8 * (v52[205] - v52[204]);
        v48 += v52[677] >> 8;
        --v51;
      }
      while (v51);
      *((void *)a1 + 833) = v49;
      *((void *)a1 + 834) = v48;
    }
    if (v47 >= v49 >> 3) {
      goto LABEL_153;
    }
    if (*v34)
    {
      BOOL v75 = v190 <= v49 || v190 > 32 * (v190 - v49);
      if (dword_1EB671A40 >= 6)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Stop-recompress - last_bits=%zu, curr_bits=%zu\n", v190, v49);
        syslog(30, "Stop-recompress - last_bits=%zu, curr_bits=%zu\n", v190, *v35);
        uint64_t v3 = v191;
        int v35 = (unint64_t *)(a1 + 6664);
      }
    }
    else
    {
      BOOL v75 = 0;
    }
    float v76 = *((float *)a1 + 1619);
    if (v76 >= 51.0 || v75)
    {
LABEL_153:
      ++*v34;
      int v84 = *a1;
      goto LABEL_156;
    }
    *((float *)a1 + 1674) = v76;
    *(_OWORD *)(a1 + 6680) = *(_OWORD *)(a1 + 6664);
    uint64_t v77 = *((void *)a1 + 79);
    bzero(*(void **)(v77 + 944), *(void *)(v77 + 928) * *(void *)(v77 + 760));
    bzero(*(void **)(v77 + 968), *(void *)(v77 + 936) * *(void *)(v77 + 752));
    bzero(*(void **)(v77 + 800), 2 * *(void *)(v77 + 760) * *(void *)(v77 + 768));
    bzero(*(void **)(v77 + 880), 16 * *(void *)(v77 + 840) * *(void *)(v77 + 848));
    *((float *)a1 + 1619) = *((float *)a1 + 1619) + v36;
    if (dword_1EB671A40 >= 6)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Recompressing, try %d (encoded %zu with limit %zu)\n", *v34 + 1, *((void *)a1 + 833) >> 3, *((void *)a1 + 18));
      syslog(30, "Recompressing, try %d (encoded %zu with limit %zu)\n", *v34 + 1, *((void *)a1 + 833) >> 3, *((void *)a1 + 18));
      uint64_t v3 = v191;
      int v35 = (unint64_t *)(a1 + 6664);
    }
    unint64_t v190 = *v35;
LABEL_152:
    ++*v34;
  }
  float v39 = *((float *)a1 + 1619);
  unsigned int v40 = *v34;
  float v41 = v39;
  if (*v34) {
    float v41 = *((float *)a1 + 1674);
  }
  *int v35 = 0;
  v35[1] = 0;
  if ((int)v5 < 1)
  {
    unint64_t v42 = 0;
    unint64_t v43 = 0;
  }
  else
  {
    unint64_t v42 = 0;
    unint64_t v43 = 0;
    int32x2_t v44 = (void *)*((void *)a1 + 804);
    uint64_t v45 = v3;
    do
    {
      uint64_t v46 = (void *)*v44++;
      v43 += 8 * (v46[205] - v46[204]);
      v42 += v46[677] >> 8;
      --v45;
    }
    while (v45);
    *((void *)a1 + 833) = v43;
    *((void *)a1 + 834) = v42;
  }
  double v53 = *(double *)(v38 + 320);
  uint64_t v54 = *(void *)(v38 + 1688);
  if (*(unsigned char *)(v38 + 1776)) {
    double v55 = *(double *)(*(void *)(*(void *)(*(void *)(v38 + 1800)
  }
                                            + 8 * (*((_DWORD *)a1 + 150) % *(_DWORD *)(v38 + 1780)))
                                + 8)
                    + 56 * *((int *)a1 + 151)
                    + 16);
  else {
    double v55 = *(double *)(v38 + 512) / *(double *)(v38 + 520);
  }
  int v56 = *((_DWORD *)a1 + 163);
  double v57 = (double)v43;
  int v58 = (int)((*(double *)(v38 + 696) + 1.0) * (double)v43 + (double)*(int *)(v38 + 704));
  *a1 = 0;
  int v59 = *(unsigned __int8 *)(v54 + 446);
  if (*(unsigned char *)(v54 + 446))
  {
    int v59 = 0;
    if (v40 <= 1)
    {
      int v60 = *(_DWORD *)(*(void *)(v38 + 1760) + 28);
      if (v43 > v60)
      {
        double v184 = v53;
        int v185 = v58;
        double v186 = v55;
        float v187 = v41;
        float v188 = v39;
        int v61 = (int)(v39 + 0.5);
        float v62 = (float)v61;
        float v63 = (float)v61 + v36;
        double v64 = v63;
        if (v63 < 50.0)
        {
          unint64_t v65 = v43 - v42;
          double v66 = exp2((v62 + -12.0) / 6.0) * 0.850000024;
          double v67 = (double)v65;
          uint64_t v3 = v191;
          double v68 = (float)(v62 + 3.0);
          while (1)
          {
            double v69 = exp2((v64 + -12.0) / 6.0) * 0.850000024;
            if (v69 < 0.100000001) {
              double v69 = 0.100000001;
            }
            double v70 = v66 / v69;
            double v71 = pow(v66 / v69, 1.1) * (double)v42;
            double v72 = fabs(sqrt(v70));
            if (v70 == -INFINITY) {
              double v72 = INFINITY;
            }
            BOOL v73 = v71 + v72 * v67 >= (double)v60 && v64 < v68;
            if (!v73) {
              break;
            }
            double v64 = v64 + 1.0;
            if (v64 >= 50.0) {
              goto LABEL_109;
            }
          }
          if (v64 > v68) {
            double v64 = v68;
          }
        }
LABEL_109:
        double v78 = 51.0;
        if (v64 <= 51.0) {
          double v78 = v64;
        }
        float v79 = v78;
        int v59 = (int)v79;
        if (*(unsigned char *)(v54 + 447))
        {
          *(unsigned char *)(v38 + 1629) = *(unsigned char *)(v38 + 1628);
          float v36 = 1.0;
          float v41 = v187;
          float v39 = v188;
          double v55 = v186;
          int v58 = v185;
          double v53 = v184;
          if (v56 >= 1)
          {
            int v80 = *(_DWORD *)(v38 + 1668);
            if (v80 < v59)
            {
              *(unsigned char *)(v38 + 1628) = 1;
              int v59 = v80;
            }
          }
        }
        else
        {
          float v36 = 1.0;
          float v41 = v187;
          float v39 = v188;
          double v55 = v186;
          int v58 = v185;
          double v53 = v184;
        }
        if (v59 > v61)
        {
          *((float *)a1 + 1619) = (float)v59;
          int v81 = 1;
          int v35 = (unint64_t *)(a1 + 6664);
          goto LABEL_128;
        }
        int v35 = (unint64_t *)(a1 + 6664);
      }
    }
  }
  int v81 = 0;
  if (*(unsigned char *)(v54 + 447))
  {
    v82 = *(_DWORD **)(v38 + 1760);
    if ((float)v59 >= (float)*(int *)(v38 + 1668) || v82[3]) {
      unsigned int v83 = v82[7];
    }
    else {
      unsigned int v83 = v82[7] - v82[8];
    }
    int v81 = 0;
    if (v83 < v58 && v56 >= 1)
    {
      LODWORD(v5) = v189;
      if (a1[648] == 3)
      {
        *a1 = 1;
        int v81 = 0;
        if (v82[6] >= v58)
        {
          *(unsigned char *)(v38 + 1653) = 0;
          int v84 = 1;
        }
        else
        {
          int v84 = 1;
          *(unsigned char *)(v38 + 1653) = 1;
        }
      }
      else
      {
        int v84 = 0;
        int v81 = 0;
      }
      goto LABEL_148;
    }
  }
LABEL_128:
  if (*(_DWORD *)(v38 + 312) | v56)
  {
    int v84 = 0;
    LODWORD(v5) = v189;
  }
  else
  {
    BOOL v85 = v53 * 1.3 >= v57;
    if (v39 >= 30.0) {
      BOOL v85 = 1;
    }
    BOOL v86 = v53 * 0.7 <= v57;
    if (v39 <= 12.0) {
      BOOL v86 = 1;
    }
    if (v39 < v41) {
      BOOL v85 = 1;
    }
    if (v39 > v41) {
      BOOL v86 = 1;
    }
    int v87 = v86 && v85;
    if (!v87) {
      int v81 = 1;
    }
    LODWORD(v5) = v189;
    if (v87)
    {
      int v84 = 0;
    }
    else
    {
      int v84 = 0;
      float v88 = -1.0;
      if (v86) {
        float v88 = v36;
      }
      *((float *)a1 + 1619) = v39 + v88;
    }
  }
LABEL_148:
  if (!*(unsigned char *)(v38 + 1776)) {
    *(unsigned char *)(v38 + 1652) = (int)v55 + ((int)v55 >> 2) < v58;
  }
  if (v81)
  {
    *(_OWORD *)(a1 + 6680) = *(_OWORD *)(a1 + 6664);
    *((float *)a1 + 1674) = v39;
    uint64_t v89 = *((void *)a1 + 79);
    bzero(*(void **)(v89 + 944), *(void *)(v89 + 928) * *(void *)(v89 + 760));
    bzero(*(void **)(v89 + 968), *(void *)(v89 + 936) * *(void *)(v89 + 752));
    bzero(*(void **)(v89 + 800), 2 * *(void *)(v89 + 760) * *(void *)(v89 + 768));
    bzero(*(void **)(v89 + 880), 16 * *(void *)(v89 + 840) * *(void *)(v89 + 848));
    goto LABEL_152;
  }
  *uint64_t v34 = v40 + 1;
LABEL_156:
  v90 = v183;
  if (!v84)
  {
    if (v183[424])
    {
      uint64_t v32 = sub_1D0C8EA3C(*((void *)a1 + 79), *((void *)a1 + 79) + 598);
      *(unsigned char *)(*((void *)a1 + 79) + 597) = v32 == 0;
    }
    else
    {
      uint64_t v32 = 0;
    }
    int v91 = *((_DWORD *)a1 + 191);
    int v92 = *((_DWORD *)a1 + 163);
    if (v91 != v92)
    {
      if (a1[768] == 2) {
        *((_DWORD *)a1 + 190) = v91;
      }
      ++*((_DWORD *)a1 + 193);
    }
    if (v183[481] > 1u)
    {
LABEL_189:
      if ((int)v3 < 1)
      {
        uint64_t v103 = 0;
      }
      else
      {
        uint64_t v103 = 0;
        v104 = (uint64_t *)*((void *)a1 + 804);
        uint64_t v105 = v3;
        do
        {
          uint64_t v106 = *v104++;
          uint64_t v103 = v103 + *(void *)(v106 + 1640) - *(void *)(v106 + 1632);
          --v105;
        }
        while (v105);
      }
      unsigned int v107 = v90[481];
      if (v107 >= 2)
      {
        int v108 = v3;
      }
      else
      {
        v103 += 10;
        int v108 = v3 + 1;
      }
      if (v90[424]) {
        v103 += 54;
      }
      if (v90[780]) {
        v103 += 29;
      }
      if (v90[812]) {
        v103 += 9;
      }
      unint64_t v109 = ((unint64_t)(3 * v103) >> 1)
           + 6 * (v108 + v90[424] + v90[780] + v90[812])
           + 64;
      if (v109 <= *((void *)a1 + 17) + 8) {
        unint64_t v109 = *((void *)a1 + 17) + 8;
      }
      uint64_t v110 = *((void *)a1 + 845);
      unint64_t v111 = *((void *)a1 + 846) - v110;
      if (v109 <= v111)
      {
        if (v109 < v111) {
          *((void *)a1 + 846) = v110 + v109;
        }
      }
      else
      {
        sub_1D0C4CCE0((unint64_t *)a1 + 845, v109 - v111);
        unsigned int v107 = v90[481];
      }
      if (v107 < 2)
      {
        WORD4(v194) = 0;
        *(void *)&long long v194 = 0;
        int v112 = *(unsigned __int8 *)(**((void **)a1 + 804) + 58);
        *(_OWORD *)__p = 0uLL;
        if (v112 == 1) {
          int v113 = 0x20000000;
        }
        else {
          int v113 = 0x40000000;
        }
        if (v112 == 2) {
          unsigned int v114 = 0;
        }
        else {
          unsigned int v114 = v113;
        }
        LOWORD(v194) = 326;
        *(_DWORD *)((char *)&v194 + 2) = HIBYTE(v114);
        __p[2] = 0;
        __p[3] = (char *)&v194 + 2;
        LOBYTE(__p[7]) = 0;
        __p[4] = (char *)&v194 + 2;
        __p[5] = (char *)&v194 + 3;
        __p[6] = (void *)(v114 | 0x300000000);
        sub_1D0C9798C((uint64_t)__p);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        *((void *)a1 + 16) += off_1EB671A48((void *)(*((void *)a1 + 845) + *((void *)a1 + 16)));
        v90 = v183;
        if (v183[481] <= 1u)
        {
          uint64_t v115 = *((void *)a1 + 72);
          v116 = *(unsigned __int8 **)(v115 + 8408);
          int v117 = v116[v116[1] + 233];
          int v118 = *((_DWORD *)a1 + 163);
          if (*(unsigned char *)(**((void **)a1 + 804) + 58) == 2)
          {
            long long v195 = 0u;
            memset(v196, 0, sizeof(v196));
            long long v194 = 0u;
            uint64_t v192 = 57;
            memset(&__p[3], 255, 0x3FCuLL);
            WORD2(__p[0]) = 0;
            BYTE6(__p[0]) = 0;
            HIBYTE(__p[0]) = *((_DWORD *)a1 + 193) == 0;
            __p[1] = 0;
            LODWORD(__p[2]) = 0;
            if (!v116[2032] || v116[2033] || v116[2034]) {
              return 4294954394;
            }
            float v119 = (float)(*((_DWORD *)a1 + 197) + *((_DWORD *)a1 + 196)) / (float)*((int *)a1 + 194);
            float v120 = v119 * 90000.0;
            if (v119 >= 1.0) {
              float v120 = 90000.0;
            }
            BOOL v73 = v119 > 0.0;
            float v121 = 0.0;
            if (v73) {
              float v121 = v120;
            }
            float v122 = *((float *)a1 + 198);
            HIDWORD(__p[2]) = (int)(float)(v122 * v121);
            HIDWORD(__p[34]) = (int)(float)((float)(v122 * 90000.0) - (float)SHIDWORD(__p[2]));
            sub_1D0D65038((uint64_t)__p, (uint64_t)&v194, &v192, v115 + 8152);
            *((void *)a1 + 16) += off_1EB671A48((void *)(*((void *)a1 + 845) + *((void *)a1 + 16)));
            uint64_t v115 = *((void *)a1 + 72);
          }
          long long v195 = 0u;
          memset(v196, 0, sizeof(v196));
          long long v194 = 0u;
          int v123 = *((_DWORD *)a1 + 193);
          int v124 = *((_DWORD *)a1 + 190);
          memset(__p, 0, 24);
          memset(&__p[4], 0, 24);
          LOWORD(v194) = 334;
          BYTE2(v194) = 1;
          if (!sub_1D0C4CAD0((uint64_t)__p, (unsigned int *)&v194 + 1, 53))
          {
            v125 = *(unsigned char **)(v115 + 8408);
            if (v125[398] && v125[2028])
            {
              if (v125[1999])
              {
                *(_DWORD *)__p[4] = bswap32(__p[6]);
                unint64_t v126 = SHIDWORD(__p[6]) + 4;
                unsigned int v127 = LODWORD(__p[6]) << (v126 & 0xF8);
                v128 = (char *)__p[4] + (v126 >> 3);
                HIDWORD(__p[6]) = v126 & 7;
                __p[4] = v128;
                if (v128 >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                  v128 = __p[5];
                }
                LODWORD(__p[6]) <<= v126 & 0xF8;
                _DWORD *v128 = bswap32(v127);
                unint64_t v129 = SHIDWORD(__p[6]) + 2;
                unsigned int v130 = LODWORD(__p[6]) << (v129 & 0xF8);
                v131 = (char *)__p[4] + (v129 >> 3);
                HIDWORD(__p[6]) = v129 & 7;
                __p[4] = v131;
                if (v131 >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                  v131 = __p[5];
                }
                LODWORD(__p[6]) <<= v129 & 0xF8;
                _DWORD *v131 = bswap32(v130);
                unint64_t v132 = SHIDWORD(__p[6]) + 1;
                __p[4] = (char *)__p[4] + (v132 >> 3);
                LODWORD(__p[6]) <<= v132 & 0xF8;
                HIDWORD(__p[6]) = v132 & 7;
                if (__p[4] >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                }
              }
              if (v125[2032] || v125[2033])
              {
                uint64_t v133 = v125[2043] + 1;
                LODWORD(__p[6]) |= (v123 + ~v124) << (-BYTE4(__p[6]) - v133);
                *(_DWORD *)__p[4] = bswap32(__p[6]);
                unint64_t v134 = SHIDWORD(__p[6]) + v133;
                v135 = (char *)__p[4] + (v134 >> 3);
                __p[4] = v135;
                HIDWORD(__p[6]) = v134 & 7;
                if (v135 >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                  v135 = __p[5];
                }
                uint64_t v136 = v125[2044] + 1;
                LODWORD(__p[6]) = ((v118 + v117 - v123) << (-(char)v136 - (v134 & 7))) | (LODWORD(__p[6]) << (v134 & 0xF8));
                _DWORD *v135 = bswap32(__p[6]);
                unint64_t v137 = SHIDWORD(__p[6]) + v136;
                unsigned int v138 = LODWORD(__p[6]) << (v137 & 0xF8);
                v139 = (char *)__p[4] + (v137 >> 3);
                __p[4] = v139;
                unsigned int v140 = v137 & 7;
                __p[6] = (void *)__PAIR64__(v140, v138);
                if (v139 >= __p[5])
                {
                  LOBYTE(__p[7]) = 1;
                  __p[4] = __p[5];
                  v139 = __p[5];
                }
                if (v125[2034])
                {
                  uint64_t v141 = v125[2038] + 1;
                  LODWORD(__p[6]) = (-1 << (-(char)v141 - v140)) | v138;
                  _DWORD *v139 = bswap32(__p[6]);
                  unint64_t v142 = SHIDWORD(__p[6]) + v141;
                  __p[4] = (char *)__p[4] + (v142 >> 3);
                  LODWORD(__p[6]) <<= v142 & 0xF8;
                  HIDWORD(__p[6]) = v142 & 7;
                  if (__p[4] >= __p[5])
                  {
                    LOBYTE(__p[7]) = 1;
                    __p[4] = __p[5];
                  }
                  if (v125[2034] && v125[2037])
                  {
                    unint64_t v143 = SHIDWORD(__p[6]) - 1;
                    unsigned int v144 = LODWORD(__p[6]) << (v143 & 0xF8);
                    v145 = (char *)__p[4] + (v143 >> 3);
                    __p[4] = v145;
                    HIDWORD(__p[6]) = v143 & 7;
                    if (v145 >= __p[5])
                    {
                      LOBYTE(__p[7]) = 1;
                      __p[4] = __p[5];
                      v145 = __p[5];
                    }
                    LODWORD(__p[6]) <<= v143 & 0xF8;
                    _DWORD *v145 = bswap32(v144);
                    unint64_t v146 = SHIDWORD(__p[6]) + 1;
                    __p[4] = (char *)__p[4] + (v146 >> 3);
                    LODWORD(__p[6]) <<= v146 & 0xF8;
                    HIDWORD(__p[6]) = v146 & 7;
                    if (__p[4] >= __p[5])
                    {
                      LOBYTE(__p[7]) = 1;
                      __p[4] = __p[5];
                    }
                  }
                }
              }
            }
            if ((BYTE4(__p[6]) & 7) != 0) {
              sub_1D0C9798C((uint64_t)__p);
            }
            sub_1D0C9798C((uint64_t)__p);
            BYTE3(v194) = LOBYTE(__p[4]) - LOBYTE(__p[3]) - 1;
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          *((void *)a1 + 16) += off_1EB671A48((void *)(*((void *)a1 + 845) + *((void *)a1 + 16)));
          v90 = v183;
        }
      }
      if (v90[780] && *(unsigned char *)(**((void **)a1 + 804) + 58) == 2)
      {
        memset(__p, 0, 32);
        *(void *)&long long v194 = 32;
        sub_1D0D65738((uint64_t)(v90 + 784), (uint64_t)__p, &v194);
        *((void *)a1 + 16) += off_1EB671A48((void *)(*((void *)a1 + 845) + *((void *)a1 + 16)));
        v90 = v183;
      }
      if (v90[812] && *(unsigned char *)(**((void **)a1 + 804) + 58) == 2)
      {
        LODWORD(__p[1]) = 0;
        __p[0] = 0;
        *(void *)&long long v194 = 12;
        sub_1D0D655D0((uint64_t)(v183 + 816), (uint64_t)__p, &v194);
        *((void *)a1 + 16) += off_1EB671A48((void *)(*((void *)a1 + 845) + *((void *)a1 + 16)));
      }
      if ((int)v5 >= 1)
      {
        uint64_t v147 = 0;
        do
        {
          uint64_t v148 = *(void *)(*((void *)a1 + 804) + 8 * v147);
          uint64_t v149 = *((void *)a1 + 1);
          if (*(unsigned char *)(v149 + 33)) {
            BOOL v150 = v191 - 1 == v147;
          }
          else {
            BOOL v150 = 0;
          }
          if (v150)
          {
            v151 = (unsigned __int8 *)*((void *)a1 + 2);
            if (*(__int16 *)(v149 + 36) != -1) {
              *((_WORD *)v151 + 8) = sub_1D0C75CC0(*((void *)a1 + 79));
            }
            if (*v151 == 255)
            {
              int v152 = 0;
            }
            else
            {
              sub_1D0C9775C(v148 + 1608, *((int *)v151 + 2) >> 3, 8);
              sub_1D0C9775C(v148 + 1608, *((int *)v151 + 3) >> 3, 8);
              int v152 = (1 << *v151);
            }
            if (v151[3] != 255)
            {
              sub_1D0C9775C(v148 + 1608, *((int *)v151 + 5) >> 4, 8);
              sub_1D0C9775C(v148 + 1608, *((int *)v151 + 6) >> 4, 8);
              sub_1D0C9775C(v148 + 1608, *((int *)v151 + 7) >> 4, 8);
              sub_1D0C9775C(v148 + 1608, *((int *)v151 + 8) >> 4, 8);
              v152 |= (1 << v151[3]);
            }
            if (v151[2] != 255)
            {
              sub_1D0C9775C(v148 + 1608, *((unsigned __int16 *)v151 + 8), 16);
              v152 |= (1 << v151[2]);
            }
            int v153 = v151[4];
            if (v153 != 255)
            {
              int v154 = v152 | (1 << v153);
              if (v151[52]) {
                int v152 = v154;
              }
            }
            sub_1D0C9775C(v148 + 1608, v152, 8);
          }
          *((void *)a1 + 16) += off_1EB671A48((void *)(*((void *)a1 + 845) + *((void *)a1 + 16)));
          ++v147;
        }
        while (v191 != v147);
      }
      v155 = v183;
      if (*(unsigned char *)(*((void *)a1 + 1) + 33))
      {
        uint64_t v156 = *((void *)a1 + 845);
        uint64_t v157 = *((void *)a1 + 17);
        if (*((void *)a1 + 846) - v156 > (unint64_t)(v157 + 2))
        {
          uint64_t v158 = *((void *)a1 + 16);
          uint64_t v159 = v157 - v158;
          size_t v160 = v157 - v158 - 1;
          if (v157 - v158 < 1)
          {
            uint64_t v164 = 0;
          }
          else
          {
            char v161 = *(unsigned char *)(v158 + v156 - 1);
            if (*(unsigned __int8 *)(v158 + v156 - 3) | *(unsigned __int8 *)(v158 + v156 - 2))
            {
              char v163 = 0;
              uint64_t v162 = *((void *)a1 + 16);
            }
            else
            {
              *(unsigned char *)(v156 + v158) = 0;
              uint64_t v162 = v158 + 1;
              char v163 = 3;
            }
            *(unsigned char *)(v156 + v158 - 1) = v163;
            memset((void *)(v156 + v162), 128, v160);
            *(unsigned char *)(v156 + v162 + v160) = v161 | 0x80;
            uint64_t v164 = v159 - v158 + v162;
            uint64_t v158 = *((void *)a1 + 16);
            v155 = v183;
          }
          *((void *)a1 + 16) = v158 + v164;
        }
      }
      if (v155[424])
      {
        uint64_t v165 = *((void *)a1 + 79);
        if (*(unsigned char *)(v165 + 597))
        {
          v166 = (_OWORD *)(v165 + 598);
          LODWORD(__p[0]) = 830734672;
          long long v167 = v166[1];
          *(_OWORD *)((char *)__p + 5) = *v166;
          BYTE4(__p[0]) = 0;
          *(_OWORD *)((char *)&__p[2] + 5) = v167;
          *(_OWORD *)((char *)&__p[4] + 5) = v166[2];
          BYTE5(__p[6]) = 0x80;
          uint64_t v32 = 0;
          *((void *)a1 + 16) += off_1EB671A48((void *)(*((void *)a1 + 845) + *((void *)a1 + 16)));
        }
      }
      *((void *)a1 + 833) = 8 * *((void *)a1 + 16);
      uint64_t v168 = *((void *)a1 + 808);
      if (!v168 || !*(unsigned char *)(v168 + 1776))
      {
LABEL_318:
        a1[768] = *(unsigned char *)(**((void **)a1 + 804) + 58);
        *((_DWORD *)a1 + 191) = *((_DWORD *)a1 + 163);
        goto LABEL_319;
      }
      int v169 = *((_DWORD *)a1 + 163);
      int v170 = *((_DWORD *)a1 + 150);
      if (v170 < 0
        || (uint64_t v171 = *(void *)(*(void *)(v168 + 1800) + 8 * (v170 % *(_DWORD *)(v168 + 1780)))) == 0
        || ((signed int v172 = *((_DWORD *)a1 + 151),
             uint64_t v173 = *(void *)(v171 + 8),
             v172 < (int)(-1227133513 * ((unint64_t)(*(void *)(v171 + 16) - v173) >> 3)))
          ? (BOOL v174 = v173 == 0)
          : (BOOL v174 = 1),
            v174))
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: Unable to access RcMptFrameInfo buffer for frame %d\n", *((_DWORD *)a1 + 163));
          syslog(27, "mpt_rc: Unable to access RcMptFrameInfo buffer for frame %d\n", v169);
          goto LABEL_310;
        }
      }
      else
      {
        v175 = (_DWORD *)(v173 + 56 * v172);
        if (*v175 == 1)
        {
          float v176 = *((float *)a1 + 1619);
          uint64_t v177 = v173 + 56 * v172;
          *(float *)(v177 + 4) = v176;
          *(_OWORD *)(v177 + 40) = *(_OWORD *)(a1 + 6664);
          if (v169)
          {
LABEL_317:
            _DWORD *v175 = 2;
            std::mutex::lock((std::mutex *)(v171 + 40));
            --*(_DWORD *)(v171 + 32);
            std::condition_variable::notify_all((std::condition_variable *)(v171 + 104));
            std::mutex::unlock((std::mutex *)(v171 + 40));
            uint64_t v32 = 0;
            goto LABEL_318;
          }
          *(float *)(v168 + 1792) = v176;
          if (*(void *)(v168 + 488) == 1)
          {
            *(float *)(*(void *)(*(void *)(v168 + 456) + 8 * (*(void *)(v168 + 480) / 0x155uLL))
                     + 12 * (*(void *)(v168 + 480) % 0x155uLL)) = v176;
            *(double *)(v168 + 584) = v176;
            goto LABEL_317;
          }
          if (dword_1EB671A40 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: Invalid rc_frame_stats_ queue size %d for the first IDR\n", *(void *)(v168 + 488));
            syslog(27, "mpt_rc: Invalid rc_frame_stats_ queue size %d for the first IDR\n", *(void *)(v168 + 488));
LABEL_310:
            if (dword_1EB671A40 >= 3)
            {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: Error storing frame coding results for frame %d\n", *((_DWORD *)a1 + 163));
              syslog(27, "mpt_rc: Error storing frame coding results for frame %d\n", *((_DWORD *)a1 + 163));
            }
          }
        }
        else if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: Invalid RcMptFrameInfo buffer state %d for frame %d\n", *v175, v169);
          syslog(27, "mpt_rc: Invalid RcMptFrameInfo buffer state %d for frame %d\n", *v175, v169);
          goto LABEL_310;
        }
      }
      return 4294954385;
    }
    if (v91 < 0)
    {
      int v93 = *((_DWORD *)a1 + 194);
    }
    else
    {
      if (v91 == v92)
      {
        int v93 = *((_DWORD *)a1 + 195);
LABEL_184:
        if (v93 < 0)
        {
          if (dword_1EB671A40 >= 7)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Buffer underflow!!! Display idx %d, bp_cpb_size_prev %d,  bp_cpb_size_ %d \n", v92, *((_DWORD *)a1 + 196), v93);
            syslog(31, "Buffer underflow!!! Display idx %d, bp_cpb_size_prev %d,  bp_cpb_size_ %d \n", *((_DWORD *)a1 + 163), *((_DWORD *)a1 + 196), *((_DWORD *)a1 + 195));
            v90 = v183;
            uint64_t v3 = v191;
          }
          int v93 = 0;
          *((_DWORD *)a1 + 195) = 0;
        }
        *((_DWORD *)a1 + 196) = v93;
        goto LABEL_189;
      }
      if ((int)v5 < 1)
      {
        int v94 = 0;
      }
      else
      {
        int v94 = 0;
        v95 = (uint64_t *)*((void *)a1 + 804);
        uint64_t v96 = v3;
        do
        {
          uint64_t v97 = *v95++;
          v94 += *(_DWORD *)(v97 + 1640) - *(_DWORD *)(v97 + 1632);
          --v96;
        }
        while (v96);
      }
      int v98 = *((_DWORD *)a1 + 194);
      int v99 = *((_DWORD *)a1 + 196);
      int v100 = v98 - v99;
      int v101 = *((_DWORD *)a1 + 197);
      int v102 = v101 + v99;
      if (v100 > v101) {
        int v98 = v102;
      }
      int v93 = v98 - 8 * v94;
    }
    *((_DWORD *)a1 + 195) = v93;
    goto LABEL_184;
  }
  if (dword_1EB671A40 >= 7)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Frame %d: dropped after encoding\n", *((_DWORD *)a1 + 163));
    syslog(31, "Frame %d: dropped after encoding\n", *((_DWORD *)a1 + 163));
  }
  uint64_t v32 = 0;
LABEL_319:
  uint64_t v178 = *((void *)a1 + 808);
  if (v178 && !*(unsigned char *)(v178 + 1776))
  {
    uint64_t v179 = *(int *)(v178 + 1608);
    unsigned int v180 = vcvts_n_s32_f32(flt_1D0DA54EC[v179], 8uLL);
    uint64_t v181 = *(void *)(v178 + 8);
    *(unsigned char *)(v181 + 1) = 1;
    *(unsigned char *)uint64_t v181 = (unint64_t)(v179 - 4) < 0x13;
    *(_DWORD *)(v181 + 4) = v180;
  }
  return v32;
}

void sub_1D0CFF7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0CFF7F0(uint64_t a1)
{
  v108[1] = *MEMORY[0x1E4F143B8];
  unsigned int v2 = 2 * (0x20uLL >> *(_DWORD *)(a1 + 804)) * (0x20uLL >> *(_DWORD *)(a1 + 804));
  unsigned int v3 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 2096);
  unsigned int v4 = 10 - v3;
  BOOL v5 = v3 >= 0xA;
  unsigned int v6 = v3 - 10;
  if (!v5) {
    unsigned int v6 = v4;
  }
  unsigned int v93 = v6;
  int v7 = *(_DWORD *)(*(void *)(a1 + 632) + 520);
  uint64_t result = MEMORY[0x1F4188790]((4 * v2 + 15) & 0x7FFFFFFF0);
  uint64_t v15 = (char *)&v73 - result;
  int v74 = v16;
  if (v16 >= 1)
  {
    int v94 = 0;
    int v102 = 1 << v9;
    int v17 = 1 << v9 >> 1;
    char v18 = 2 * v9 - 2;
    int v19 = 1 << (2 * v9 - 3);
    unsigned int v85 = 0x1FCu >> v93;
    unsigned int v78 = 0x40u >> v93;
    unsigned int v77 = 0x3ACu >> v93;
    uint64_t v75 = *(void *)(v14 + 408);
    size_t v87 = (8 * v13);
    uint64_t result = 2 * v10;
    if (v11 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v11;
    }
    uint64_t v76 = v20;
    int v92 = v7 - 1;
    uint64_t v73 = 32 * v12;
    v82 = v15;
    uint64_t v95 = a1;
    uint64_t v103 = v9;
    int v83 = v7;
    int v81 = 1 << v9 >> 1;
    int v80 = 2 * v9 - 2;
    int v79 = 1 << (2 * v9 - 3);
    unsigned int v88 = 0x204u >> v93;
    uint64_t v99 = result;
    uint64_t v86 = 2 * v12;
    while (v7 < 1)
    {
LABEL_65:
      v75 += v73;
      v94 += 32;
      if (v94 >= v74) {
        return result;
      }
    }
    uint64_t v21 = 0;
    int v22 = v74 - v94;
    int v84 = v74 - v94;
    if (v74 - v94 >= 32) {
      int v22 = 32;
    }
    int v100 = v22;
    int v23 = v22 >> 1;
    if (v23 <= 1) {
      int v24 = 1;
    }
    else {
      int v24 = v23;
    }
    uint64_t v91 = v75;
    int v25 = v7;
    int v89 = v24;
    while (1)
    {
      int v90 = v25 - 32;
      if (v25 >= 32) {
        int v25 = 32;
      }
      uint64_t v26 = v25 <= 1 ? 1 : v25;
      int v107 = 0;
      uint64_t v97 = v21;
      int v27 = v7 - v21;
      int v28 = v7 - (int)v21 >= 32 ? 32 : v7 - v21;
      int v96 = v28;
      bzero(v15, v87);
      unsigned int v31 = v88;
      int v30 = v89;
      uint64_t v32 = v86;
      uint64_t result = v99;
      unsigned int v33 = v103;
      if (v100 >= 2) {
        break;
      }
LABEL_64:
      uint64_t v21 = v97 + 32;
      v91 += 64;
      int v25 = v90;
      if (v7 <= (int)v97 + 32) {
        goto LABEL_65;
      }
    }
    int v34 = v27;
    int v35 = 0;
    int v36 = 0;
    uint64_t v37 = v91;
    uint64_t v38 = v15;
    unsigned int v39 = v85;
    while (v27 < 1)
    {
LABEL_33:
      if (v36 + 1 == v17) {
        unsigned int v44 = result;
      }
      else {
        unsigned int v44 = 0;
      }
      v38 += 4 * v44;
      if (v36 + 1 == v17) {
        int v36 = 0;
      }
      else {
        ++v36;
      }
      ++v35;
      v37 += v32;
      if (v35 == v30)
      {
        if (BYTE2(v107) && (_BYTE)v107 || HIBYTE(v107) && BYTE1(v107))
        {
          uint64_t v45 = (int *)v15;
          uint64_t v46 = v76;
          signed int v47 = v78;
          signed int v48 = v77;
          if (v33 <= 5)
          {
            do
            {
              int v49 = (*v45 + v19) >> v18;
              if (v49 >= v48) {
                int v50 = v48;
              }
              else {
                int v50 = (*v45 + v19) >> v18;
              }
              if (v49 <= v47) {
                int v51 = v47;
              }
              else {
                int v51 = v50;
              }
              *v45++ = v51;
              --v46;
            }
            while (v46);
          }
          if (v84 < 1)
          {
            int v55 = 0;
            int v54 = 0;
            int v53 = 0;
          }
          else
          {
            int v52 = 0;
            int v53 = 0;
            int v54 = 0;
            int v55 = 0;
            int v56 = v15;
            int v57 = v102;
            int v98 = v34;
            do
            {
              int v101 = v52;
              if (v34 >= 1)
              {
                int v58 = 0;
                int v59 = v52 + v94;
                uint64_t v60 = *(void *)(v95 + 5896);
                uint64_t v61 = *(void *)(v95 + 808);
                uint64_t v62 = *(unsigned int *)(*(void *)(v95 + 56) + 1636);
                char v63 = v93;
                uint64_t v105 = *(void *)(v95 + 8 * ((int)v62 - 3) + 6136)
                     + 4 * ((v92 + (1 << v62)) >> v62) * (uint64_t)(v59 >> v62);
                uint64_t v106 = v62;
                uint64_t v104 = v60 + v61 * (v59 >> v33);
                int v64 = v97;
                int v65 = v96;
                do
                {
                  LOBYTE(v29) = *(unsigned char *)(v104 + ((v64 + v58) >> v33));
                  int v66 = (int)((double)v29 * -0.46 + 9.26);
                  signed int v67 = *(_DWORD *)(v105 + 4 * ((v64 + v58) >> v106));
                  v108[0] = *(void *)&v56[8 * (v58 >> v33)];
                  v55 += sub_1D0D00458(v67, (uint64_t)v108, v66, v63, 0);
                  int v68 = v66;
                  int v57 = v102;
                  int v69 = sub_1D0D00458(v67, (uint64_t)v108, v68, v63, 1u);
                  LOBYTE(v33) = v103;
                  v54 += v69;
                  ++v53;
                  v58 += v57;
                }
                while (v58 < v65);
              }
              uint64_t result = v99;
              v56 += 4 * v99;
              int v52 = v101 + v57;
              int v34 = v98;
            }
            while (v101 + v57 < v100);
          }
          int v70 = (v55 + (v53 >> 1)) / v53;
          uint64_t v71 = v95;
          if (v70 < *(_DWORD *)(v95 + 456)) {
            *(_DWORD *)(v95 + 456) = v70;
          }
          int v72 = (v54 + (v53 >> 1)) / v53;
          int v7 = v83;
          uint64_t v15 = v82;
          int v17 = v81;
          char v18 = v80;
          int v19 = v79;
          if (v72 < *(_DWORD *)(v71 + 460)) {
            *(_DWORD *)(v71 + 460) = v72;
          }
        }
        goto LABEL_64;
      }
    }
    uint64_t v40 = 0;
    while (1)
    {
      unsigned int v41 = *(unsigned __int16 *)(v37 + 2 * v40);
      if (v31 >= v41) {
        break;
      }
      if (v39 <= v41)
      {
        unint64_t v42 = (char *)&v107;
LABEL_31:
        v42[v40 & 1] = 1;
      }
      int v43 = v40 & 1 | (2 * (v40 >> v33));
      *(_DWORD *)&v38[4 * v43] += v41;
      if (v26 == ++v40) {
        goto LABEL_33;
      }
    }
    unint64_t v42 = (char *)&v107 + 2;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_1D0CFFDA8(uint64_t a1)
{
  v104[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a1 + 804);
  unsigned int v3 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 2096);
  unsigned int v4 = 10 - v3;
  BOOL v5 = v3 >= 0xA;
  unsigned int v6 = v3 - 10;
  if (!v5) {
    unsigned int v6 = v4;
  }
  unsigned int v90 = v6;
  int v7 = *(_DWORD *)(*(void *)(a1 + 632) + 520);
  uint64_t v8 = *(void *)(*(void *)(a1 + 616) + 424);
  uint64_t result = MEMORY[0x1F4188790](v2);
  uint64_t v15 = (char *)&v71 - v14;
  int v72 = v16;
  if (v16 >= 1)
  {
    int v91 = 0;
    int v98 = 1 << result;
    int v17 = 1 << result >> 1;
    char v18 = 2 * result - 2;
    int v76 = 1 << (2 * result - 3);
    unsigned int v83 = 0x1FCu >> v90;
    unsigned int v75 = 0x40u >> v90;
    unsigned int v74 = 0x3ACu >> v90;
    uint64_t v84 = *(void *)(v13 + 408);
    size_t v85 = (8 * v12);
    uint64_t v71 = 16 * v8;
    if (v10 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    uint64_t v73 = v10;
    int v89 = v7 - 1;
    int v79 = (char *)&v71 - v14;
    uint64_t v92 = a1;
    uint64_t v99 = result;
    int v81 = v7;
    uint64_t v80 = v8;
    int v78 = 1 << result >> 1;
    int v77 = 2 * result - 2;
    unsigned int v86 = 0x204u >> v90;
    uint64_t v95 = 2 * v11;
    while (v7 < 1)
    {
LABEL_65:
      v84 += v71;
      v91 += 32;
      if (v91 >= v72) {
        return result;
      }
    }
    uint64_t v19 = 0;
    int v20 = v72 - v91;
    int v82 = v72 - v91;
    if (v72 - v91 >= 32) {
      int v20 = 32;
    }
    int v96 = v20;
    int v21 = v20 >> 1;
    if (v21 <= 1) {
      int v22 = 1;
    }
    else {
      int v22 = v21;
    }
    int v23 = v7;
    int v87 = v22;
    while (1)
    {
      uint64_t v100 = v19;
      int v88 = v23 - 32;
      if (v23 >= 32) {
        int v23 = 32;
      }
      uint64_t v24 = v23 <= 1 ? 1 : v23;
      int v103 = 0;
      int v25 = v7 - v19;
      int v26 = v7 - (int)v19 >= 32 ? 32 : v7 - v19;
      int v93 = v26;
      bzero(v15, v85);
      unsigned int v29 = v86;
      int v28 = v87;
      uint64_t result = v99;
      uint64_t v30 = v100;
      unsigned int v31 = v95;
      if (v96 >= 2) {
        break;
      }
LABEL_64:
      uint64_t v19 = v30 + 32;
      int v23 = v88;
      if (v7 <= (int)v19) {
        goto LABEL_65;
      }
    }
    int v32 = v25;
    int v33 = 0;
    int v34 = 0;
    uint64_t v35 = v84 + v100;
    int v36 = v15;
    unsigned int v37 = v83;
    while (v25 < 1)
    {
LABEL_33:
      if (v34 + 1 == v17) {
        unsigned int v42 = v31;
      }
      else {
        unsigned int v42 = 0;
      }
      v36 += 4 * v42;
      if (v34 + 1 == v17) {
        int v34 = 0;
      }
      else {
        ++v34;
      }
      v35 += v8;
      if (++v33 == v28)
      {
        if (BYTE2(v103) && (_BYTE)v103 || HIBYTE(v103) && BYTE1(v103))
        {
          int v43 = (int *)v15;
          uint64_t v44 = v73;
          int v45 = v76;
          signed int v46 = v75;
          signed int v47 = v74;
          if (result <= 5)
          {
            do
            {
              int v48 = (*v43 + v45) >> v18;
              if (v48 >= v47) {
                int v49 = v47;
              }
              else {
                int v49 = (*v43 + v45) >> v18;
              }
              if (v48 <= v46) {
                int v50 = v46;
              }
              else {
                int v50 = v49;
              }
              *v43++ = v50;
              --v44;
            }
            while (v44);
          }
          if (v82 < 1)
          {
            int v54 = 0;
            int v53 = 0;
            int v52 = 0;
          }
          else
          {
            int v51 = 0;
            int v52 = 0;
            int v53 = 0;
            int v54 = 0;
            int v55 = v15;
            int v56 = v98;
            int v94 = v32;
            do
            {
              int v97 = v51;
              if (v32 >= 1)
              {
                int v57 = 0;
                int v58 = v51 + v91;
                uint64_t v59 = *(void *)(v92 + 5896);
                uint64_t v60 = *(void *)(v92 + 808);
                uint64_t v61 = *(unsigned int *)(*(void *)(v92 + 56) + 1636);
                char v62 = v90;
                uint64_t v101 = *(void *)(v92 + 8 * ((int)v61 - 3) + 6136)
                     + 4 * ((v89 + (1 << v61)) >> v61) * (uint64_t)(v58 >> v61);
                uint64_t v102 = v61;
                uint64_t v63 = v59 + v60 * (v58 >> result);
                int v64 = v93;
                do
                {
                  LOBYTE(v27) = *(unsigned char *)(v63 + (((int)v30 + v57) >> result));
                  int v65 = (int)((double)v27 * -0.46 + 9.26);
                  signed int v66 = *(_DWORD *)(v101 + 4 * (((int)v30 + v57) >> v102));
                  v104[0] = *(void *)&v55[8 * (v57 >> result)];
                  v54 += sub_1D0D00458(v66, (uint64_t)v104, v65, v62, 0);
                  int v67 = v65;
                  int v56 = v98;
                  v53 += sub_1D0D00458(v66, (uint64_t)v104, v67, v62, 1u);
                  uint64_t result = v99;
                  uint64_t v30 = v100;
                  ++v52;
                  v57 += v56;
                }
                while (v57 < v64);
              }
              v55 += 4 * v95;
              int v51 = v97 + v56;
              int v32 = v94;
            }
            while (v97 + v56 < v96);
          }
          int v68 = (v54 + (v52 >> 1)) / v52;
          uint64_t v69 = v92;
          if (v68 < *(_DWORD *)(v92 + 456)) {
            *(_DWORD *)(v92 + 456) = v68;
          }
          int v70 = (v53 + (v52 >> 1)) / v52;
          int v7 = v81;
          uint64_t v8 = v80;
          uint64_t v15 = v79;
          int v17 = v78;
          char v18 = v77;
          if (v70 < *(_DWORD *)(v69 + 460)) {
            *(_DWORD *)(v69 + 460) = v70;
          }
        }
        goto LABEL_64;
      }
    }
    uint64_t v38 = 0;
    while (1)
    {
      unsigned int v39 = *(unsigned __int8 *)(v35 + v38);
      if (v29 >= v39) {
        break;
      }
      if (v37 <= v39)
      {
        uint64_t v40 = (char *)&v103;
LABEL_31:
        v40[v38 & 1] = 1;
        unsigned int v39 = *(unsigned __int8 *)(v35 + v38);
      }
      int v41 = v38 & 1 | (2 * (v38 >> result));
      *(_DWORD *)&v36[4 * v41] += v39;
      if (v24 == ++v38) {
        goto LABEL_33;
      }
    }
    uint64_t v40 = (char *)&v103 + 2;
    goto LABEL_31;
  }
  return result;
}

void *sub_1D0D0030C(void *result, uint64_t a2, int a3)
{
  unsigned int v4 = result;
  if (a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    char v7 = 1;
    do
    {
      char v8 = v7;
      if (*(int *)(v6 + 524) >> v5 >= 1)
      {
        uint64_t v9 = 0;
        do
        {
          uint64_t result = memcpy((void *)(*(void *)(v6 + 8 * v5 + 400) + *(void *)(v6 + 8 * v5 + 416) * v9), (const void *)(*(void *)(*(void *)a2 + 8 * v5 + 472)+ *(void *)(*(void *)a2 + 8 * v5 + 416) * v9), *(int *)(v6 + 520));
          ++v9;
          uint64_t v6 = *v4;
        }
        while (v9 < *(int *)(*v4 + 524) >> v5);
      }
      char v7 = 0;
      uint64_t v5 = 1;
    }
    while ((v8 & 1) != 0);
  }
  else
  {
    uint64_t v10 = 0;
    char v11 = *(unsigned char *)(*(void *)a2 + 531) == 1;
    uint64_t v12 = *result;
    char v13 = 1;
    do
    {
      char v14 = v13;
      if (*(int *)(v12 + 524) >> v10 >= 1)
      {
        uint64_t v15 = 0;
        do
        {
          uint64_t result = memcpy((void *)(*(void *)(v12 + 8 * v10 + 400) + ((*(void *)(v12 + 8 * v10 + 416) * v15) << v11)), (const void *)(*(void *)(*(void *)a2 + 8 * v10 + 400)+ ((*(void *)(*(void *)a2 + 8 * v10 + 416) * v15) << v11)), (int)(*(_DWORD *)(v12 + 520) << v11));
          ++v15;
          uint64_t v12 = *v4;
        }
        while (v15 < *(int *)(*v4 + 524) >> v10);
      }
      char v13 = 0;
      uint64_t v10 = 1;
    }
    while ((v14 & 1) != 0);
  }
  return result;
}

uint64_t sub_1D0D00458(signed int a1, uint64_t a2, int a3, char a4, unsigned int a5)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  signed int v5 = 0x200u >> a4;
  double v6 = (double)(1 << a4);
  v24[0] = vshl_u32((uint32x2_t)0xC80000012CLL, (uint32x2_t)vneg_s32(vdup_n_s32(a4)));
  float v7 = v6 * 0.01;
  float v8 = v6 * 0.03125;
  signed int v9 = *(_DWORD *)(a2 + 4 * (1 - a5));
  if ((int)(0x200u >> a4) <= a1)
  {
    float v11 = (float)(int)(a1 - (0x2BCu >> a4));
    float v10 = v8;
  }
  else
  {
    float v10 = (float)(*((_DWORD *)v24 + a5) - a1);
    float v11 = v7;
  }
  BOOL v12 = v9 < v5;
  if (v9 >= v5) {
    float v7 = v8;
  }
  unsigned int v13 = 0x172u >> a4;
  if (!v12)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 4 * (1 - a5));
    signed int v9 = 0x226u >> a4;
  }
  double v14 = 1.0;
  double v15 = 1.0 - (float)(v7 * (float)(int)(v13 - v9));
  if (v15 < 1.0) {
    double v16 = v15;
  }
  else {
    double v16 = 1.0;
  }
  BOOL v12 = v15 > 0.0;
  double v17 = 0.0;
  if (!v12) {
    double v16 = 0.0;
  }
  double v18 = 1.0 - (float)(v11 * v10);
  if (v18 < 1.0) {
    double v14 = v18;
  }
  if (v18 > 0.0) {
    double v17 = v14;
  }
  float v19 = v16;
  float v20 = v17;
  float v21 = *((float *)&qword_1D0D7EF90 + a5)
      * (float)((float)((float)(dword_1D0DA1664[877 * a5 + ((*(_DWORD *)(a2 + 4 * a5) - (0x40u >> a4)) << a4)] + a3)
                      * v19)
              * v20);
  int v22 = (int)v21 & ((int)v21 >> 31);
  if (v22 <= -12) {
    return 4294967284;
  }
  else {
    return v22;
  }
}

void sub_1D0D005F8(uint64_t a1, uint64_t a2, double a3, double a4, uint8x8_t a5)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 576);
  if (a2)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 616) + 536);
    uint64_t v7 = *(void *)(a1 + 576);
    goto LABEL_94;
  }
  uint64_t v8 = *(void *)(a1 + 576);
  if (*(unsigned char *)(v5 + 570))
  {
    uint64_t v9 = mach_absolute_time();
    if (*(unsigned char *)(v5 + 288))
    {
      *(unsigned char *)(v5 + 288) = 0;
      *(double *)(v5 + 272) = *(double *)(v5 + 272)
                            + (double)((v9 - *(void *)(v5 + 280))
                                     * qword_1EA6433C8
                                     / HIDWORD(qword_1EA6433C8))
                            / 1000000000.0;
    }
    uint64_t v8 = *(void *)(a1 + 576);
  }
  if (*(unsigned char *)(v8 + 482) || *(unsigned char *)(v8 + 450))
  {
    uint64_t v10 = *(void *)(a1 + 632);
    int v11 = *(unsigned __int8 *)(v10 + 531);
    uint64_t v12 = 504;
    if (!*(unsigned char *)(v10 + 432)) {
      uint64_t v12 = 520;
    }
    int v13 = *(_DWORD *)(v10 + v12);
    uint64_t v14 = 508;
    if (!*(unsigned char *)(v10 + 432)) {
      uint64_t v14 = 524;
    }
    int v91 = *(_DWORD *)(v10 + v14);
    uint64_t v15 = *(void *)(a1 + 616);
    uint64_t v16 = *(void *)(v15 + 400);
    uint64_t v17 = *(void *)(v15 + 416);
    *(_OWORD *)(a1 + 248) = 0u;
    int v96 = (int)*(float *)(a1 + 6476);
    int v97 = v13;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *(_OWORD *)(a1 + 440) = 0u;
    uint64_t v98 = v8;
    uint64_t v88 = v5;
    if (v11 == 1)
    {
      if (*(unsigned char *)(v8 + 482))
      {
        for (uint64_t i = 0; i != 22; i += 2)
          *(_WORD *)(a1 + i + 224) = -32641;
      }
      if (v91 >= 1)
      {
        int v19 = 0;
        int v99 = 0;
        unint64_t v94 = 0;
        uint64_t v89 = (uint64_t)(v13 + 7) >> 3;
        do
        {
          uint64_t v92 = v16;
          if (v13 >= 1)
          {
            unint64_t v20 = 0;
            uint64_t v21 = *(void *)(a1 + 5752);
            do
            {
              int v22 = *(__int16 *)(*(void *)(*(void *)(a1 + 632) + 800)
                               + 2 * (*(void *)(*(void *)(a1 + 632) + 768) * (v94 >> 3) + (v20 >> 3)));
              uint64_t v23 = *(int *)(v21 + 4 * ((*(int *)(a1 + 5528) >> 3) * ((int)v94 >> 3) + ((int)v20 >> 3)));
              unsigned int v24 = *(_DWORD *)(a1 + 4 * v23 + 152);
              if ((int)v23 <= 3 && v24 == 0)
              {
                unsigned int v24 = sub_1D0D250EC(a1 + 800, v20, v94);
                int v13 = v97;
                uint64_t v8 = v98;
              }
              if (v24 <= 0x1F)
              {
                int v26 = v96 - (v22 >> 9) + dword_1D0DA51D4[v24];
                if (v26 >= 51) {
                  int v26 = 51;
                }
                uint64_t v27 = a1 + 4 * (v26 & ~(v26 >> 31));
                ++*(_DWORD *)(v27 + 248);
                if (v24 <= 0xA && *(unsigned char *)(v8 + 482) != 0)
                {
                  int v29 = *(char *)(*(void *)(*(void *)(a1 + 576) + 10784)
                                + *(int *)(*(void *)(a1 + 6136)
                                         + 4 * (int)v89 * (uint64_t)((int)v94 >> 3)
                                         + 4 * ((int)v20 >> 3)));
                  if (v29 < 0)
                  {
                    int v30 = *(unsigned __int8 *)(*(void *)(a1 + 5896)
                                             + *(void *)(a1 + 808) * (v94 >> *(_DWORD *)(a1 + 804))
                                             + ((unint64_t)v20 >> *(_DWORD *)(a1 + 804)))
                        - (int)(*(float *)(a1 + 6476) + 0.5);
                    unsigned __int8 v31 = ~(_BYTE)v29;
                    uint64_t v32 = a1 + 2 * v31;
                    int v34 = *(char *)(v32 + 224);
                    int v33 = (unsigned char *)(v32 + 224);
                    if (v30 < v34) {
                      unsigned char *v33 = v30;
                    }
                    uint64_t v35 = a1 + 2 * v31;
                    int v37 = *(char *)(v35 + 225);
                    int v36 = (unsigned char *)(v35 + 225);
                    if (v30 > v37) {
                      *int v36 = v30;
                    }
                  }
                }
              }
              uint64_t v38 = 0;
              LODWORD(v39) = 0;
              unsigned int v40 = 0;
              char v41 = 1;
              do
              {
                uint64_t v42 = 0;
                char v43 = v41;
                uint64_t v39 = (int)v39;
                int v44 = v39 + 2;
                uint64_t v45 = v17 * v38;
                do
                {
                  unsigned int v46 = 0;
                  signed int v47 = (uint16x4_t *)(v16 + 2 * (v45 + v42));
                  uint64_t v48 = 4;
                  do
                  {
                    unsigned int v46 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v46, *v47));
                    unsigned int v40 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v40, *v47));
                    signed int v47 = (uint16x4_t *)((char *)v47 + 2 * v17);
                    --v48;
                  }
                  while (v48);
                  v101.i32[v39++] = v46;
                  uint64_t v42 = 4;
                }
                while (v44 != v39);
                char v41 = 0;
                uint64_t v38 = 4;
              }
              while ((v43 & 1) != 0);
              ++v99;
              if (vaddvq_s32(vabdq_s32(v101, vdupq_n_s32((int)(v40 + 2) >> 2))) < 0x82) {
                ++v19;
              }
              v20 += 8;
              v16 += 16;
            }
            while (v13 > (int)v20);
          }
          uint64_t v16 = v92 + 16 * v17;
          v94 += 8;
        }
        while (v91 > (int)v94);
        goto LABEL_87;
      }
    }
    else
    {
      if (*(unsigned char *)(v8 + 482))
      {
        for (uint64_t j = 0; j != 22; j += 2)
          *(_WORD *)(a1 + j + 224) = -32641;
      }
      if (v91 >= 1)
      {
        int v19 = 0;
        int v99 = 0;
        unint64_t v95 = 0;
        uint64_t v90 = (uint64_t)(v13 + 7) >> 3;
        do
        {
          uint64_t v93 = v16;
          if (v13 >= 1)
          {
            unint64_t v50 = 0;
            unint64_t v51 = v95 >> 3;
            uint64_t v52 = *(void *)(a1 + 5752);
            uint64_t v53 = v16;
            do
            {
              int v54 = *(__int16 *)(*(void *)(*(void *)(a1 + 632) + 800)
                               + 2 * (*(void *)(*(void *)(a1 + 632) + 768) * v51 + (v50 >> 3)));
              uint64_t v55 = *(int *)(v52 + 4 * ((*(int *)(a1 + 5528) >> 3) * ((int)v95 >> 3) + ((int)v50 >> 3)));
              unsigned int v56 = *(_DWORD *)(a1 + 4 * v55 + 152);
              if ((int)v55 <= 3 && v56 == 0)
              {
                uint64_t v58 = v52;
                int v59 = v19;
                int v60 = *(__int16 *)(*(void *)(*(void *)(a1 + 632) + 800)
                                 + 2 * (*(void *)(*(void *)(a1 + 632) + 768) * v51 + (v50 >> 3)));
                unsigned int v56 = sub_1D0D250EC(a1 + 800, v50, v95);
                int v54 = v60;
                int v19 = v59;
                uint64_t v52 = v58;
                int v13 = v97;
                uint64_t v8 = v98;
              }
              if (v56 <= 0x1F)
              {
                int v61 = v96 - (v54 >> 9) + dword_1D0DA51D4[v56];
                if (v61 >= 51) {
                  int v61 = 51;
                }
                uint64_t v62 = a1 + 4 * (v61 & ~(v61 >> 31));
                ++*(_DWORD *)(v62 + 248);
                if (v56 <= 0xA && *(unsigned char *)(v8 + 482) != 0)
                {
                  int v64 = *(char *)(*(void *)(*(void *)(a1 + 576) + 10784)
                                + *(int *)(*(void *)(a1 + 6136)
                                         + 4 * (int)v90 * (uint64_t)((int)v95 >> 3)
                                         + 4 * ((int)v50 >> 3)));
                  if (v64 < 0)
                  {
                    int v65 = *(unsigned __int8 *)(*(void *)(a1 + 5896)
                                             + *(void *)(a1 + 808) * (v95 >> *(_DWORD *)(a1 + 804))
                                             + ((unint64_t)v50 >> *(_DWORD *)(a1 + 804)))
                        - (int)(*(float *)(a1 + 6476) + 0.5);
                    unsigned __int8 v66 = ~(_BYTE)v64;
                    uint64_t v67 = a1 + 2 * v66;
                    int v69 = *(char *)(v67 + 224);
                    int v68 = (unsigned char *)(v67 + 224);
                    if (v65 < v69) {
                      *int v68 = v65;
                    }
                    uint64_t v70 = a1 + 2 * v66;
                    int v72 = *(char *)(v70 + 225);
                    uint64_t v71 = (unsigned char *)(v70 + 225);
                    if (v65 > v72) {
                      *uint64_t v71 = v65;
                    }
                  }
                }
              }
              uint64_t v73 = 0;
              LODWORD(v74) = 0;
              unsigned int v75 = 0;
              char v76 = 1;
              do
              {
                uint64_t v77 = 0;
                char v78 = v76;
                uint64_t v74 = (int)v74;
                int v79 = v74 + 2;
                uint64_t v80 = v53 + v17 * v73;
                do
                {
                  unsigned int v81 = 0;
                  int v82 = (__int32 *)(v80 + v77);
                  uint64_t v83 = 4;
                  do
                  {
                    a5.i32[0] = *v82;
                    a5 = (uint8x8_t)vmovl_u8(a5).u64[0];
                    unsigned int v81 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v81, (uint16x4_t)a5));
                    unsigned int v75 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v75, (uint16x4_t)a5));
                    int v82 = (__int32 *)((char *)v82 + v17);
                    --v83;
                  }
                  while (v83);
                  v101.i32[v74++] = v81;
                  uint64_t v77 = 4;
                }
                while (v79 != v74);
                char v76 = 0;
                uint64_t v73 = 4;
              }
              while ((v78 & 1) != 0);
              ++v99;
              if (vaddvq_s32(vabdq_s32(v101, vdupq_n_s32((int)(v75 + 2) >> 2))) < 0x82) {
                ++v19;
              }
              v50 += 8;
              v53 += 8;
            }
            while (v13 > (int)v50);
          }
          uint64_t v16 = v93 + 8 * v17;
          v95 += 8;
        }
        while (v91 > (int)v95);
        goto LABEL_87;
      }
    }
    int v99 = 0;
    int v19 = 0;
LABEL_87:
    *(_DWORD *)(a1 + 220) = v19 <= v99 >> 3;
    uint64_t v5 = v88;
  }
  uint64_t v84 = *(void *)(a1 + 632);
  if (v84)
  {
    *(_DWORD *)(v84 + 1164) = (int)*(float *)(a1 + 6476);
    uint64_t v85 = *(void *)(a1 + 616);
    long long v86 = *(_OWORD *)(v85 + 664);
    *(void *)(v84 + 680) = *(void *)(v85 + 680);
    *(_OWORD *)(v84 + 664) = v86;
    sub_1D0D23384(a1 + 800);
  }
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a1 + 648);
  *(unsigned char *)(a1 + 545) = *(_DWORD *)(a1 + 220);
  if (*(unsigned char *)(v5 + 482)) {
    uint64_t v87 = a1 + 224;
  }
  else {
    uint64_t v87 = 0;
  }
  *(void *)(a1 + 552) = v87;
  *(void *)(a1 + 560) = a1 + 248;
  uint64_t v7 = *(void *)(a1 + 576);
  uint64_t v6 = *(void *)(*(void *)(a1 + 616) + 536);
  a2 = 0;
LABEL_94:
  sub_1D0CEDF7C(v7, a2, a1, v6);
}

void sub_1D0D00E00(unsigned __int8 *a1, void (*a2)(void, void, void, void, void, void, void), uint64_t a3)
{
  uint64_t v6 = a1 + 6292;
  uint64_t v7 = (uint64_t *)(a1 + 616);
  uint64_t v8 = *((void *)a1 + 72);
  if (*(unsigned char *)(v8 + 426)) {
    goto LABEL_2;
  }
  if (*((_DWORD *)a1 + 148))
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Error %d encoding frame\n", *((_DWORD *)a1 + 148));
      syslog(27, "Error %d encoding frame\n", *((_DWORD *)a1 + 148));
    }
    goto LABEL_2;
  }
  __stream = *(FILE **)(v8 + 248);
  long long v194 = (unsigned char *)(v8 + 360);
  v192[0] = &v194;
  v192[1] = &__stream;
  if (atomic_load_explicit((atomic_ullong *volatile)qword_1EA6433D0, memory_order_acquire) != -1)
  {
    v196 = v192;
    long long v195 = &v196;
    std::__call_once(qword_1EA6433D0, &v195, (void (__cdecl *)(void *))sub_1D0D02268);
  }
  if (v194[377])
  {
    if (dword_1EB671A40 < 6) {
      goto LABEL_23;
    }
    uint64_t v17 = *((void *)a1 + 77);
    int v18 = *(_DWORD *)(v17 + 32);
    if (!v18) {
      int v18 = 1;
    }
    fprintf(__stream, "%10.3f ", (double)*(uint64_t *)(v17 + 16) / (double)v18);
  }
  if (dword_1EB671A40 >= 6) {
    fprintf(__stream, "%6d", *((_DWORD *)a1 + 163));
  }
LABEL_23:
  uint64_t v190 = a3;
  uint64_t v191 = v6;
  if (!*a1)
  {
    uint64_t v48 = *((void *)a1 + 79);
    uint64_t v49 = 520;
    if (*(unsigned char *)(v48 + 432)) {
      uint64_t v49 = 504;
    }
    uint64_t v50 = 508;
    if (!*(unsigned char *)(v48 + 432)) {
      uint64_t v50 = 524;
    }
    unint64_t v51 = *(unsigned int *)(v48 + v50);
    unint64_t v52 = a1[648];
    if (v52 > 5) {
      uint64_t v53 = "???";
    }
    else {
      uint64_t v53 = off_1E6899BC8[v52];
    }
    int v54 = *(_DWORD *)(v48 + v49);
    if ((int)v51 < 1)
    {
      uint64_t v56 = 0;
    }
    else
    {
      unint64_t v55 = 0;
      uint64_t v56 = 0;
      int v57 = *(__int16 **)(v48 + 800);
      LODWORD(v58) = (v54 + 7) >> 3;
      if ((int)v58 <= 1) {
        uint64_t v58 = 1;
      }
      else {
        uint64_t v58 = v58;
      }
      do
      {
        if (v54 >= 1) {
          v56 += ((uint64_t)*v57 >> 9) * v58;
        }
        v55 += 8;
        v57 += *(void *)(v48 + 768);
      }
      while (v55 < v51);
    }
    if (dword_1EB671A40 >= 6)
    {
      fprintf(__stream, " (%6d) %4dx%4d %4s", *(_DWORD *)(v48 + 1024), v54, v51, v53);
      int v69 = dword_1EB671A40;
      if (dword_1EB671A40 <= 6) {
        goto LABEL_142;
      }
      if (*v6) {
        BOOL v70 = 1;
      }
      else {
        BOOL v70 = v6[1] != 0;
      }
      fprintf(__stream, " %4d", v70);
      if (dword_1EB671A40 >= 6)
      {
        fprintf(__stream, " (%4.1f, %4d, %4d)", *((double *)a1 + 787), *((_DWORD *)a1 + 1568), *((_DWORD *)a1 + 1569));
        int v69 = dword_1EB671A40;
LABEL_142:
        if (v69 < 6) {
          goto LABEL_165;
        }
        uint64_t v73 = *((void *)a1 + 808);
        if (v73)
        {
          uint64_t v74 = *(void *)(v73 + 1760);
          if (v74) {
            int v75 = (int)((double)(1000 * *(_DWORD *)(v74 + 12)) / *(double *)(v73 + 512));
          }
          else {
            int v75 = -1;
          }
          double v79 = (double)*(int *)(*((void *)a1 + 77) + 32) / (double)*(uint64_t *)(*((void *)a1 + 77) + 24);
          if (!*(unsigned char *)(v73 + 1776))
          {
            uint64_t v80 = (double *)(v73 + 520);
            goto LABEL_164;
          }
        }
        else
        {
          double v79 = (double)*(int *)(*((void *)a1 + 77) + 32) / (double)*(uint64_t *)(*((void *)a1 + 77) + 24);
          int v75 = -1;
        }
        uint64_t v80 = (double *)(*((void *)a1 + 72) + 472);
LABEL_164:
        fprintf(__stream, " %5.1f/%5.1f %6lu %4d %5.1f/%5.1f", *((float *)a1 + 1619), (double)v56 / (double)((((int)v51 + 7) >> 3) * ((v54 + 7) >> 3)), *((void *)a1 + 16), v75, v79, *v80);
      }
    }
LABEL_165:
    if (!v194[65]) {
      goto LABEL_262;
    }
    uint64_t v81 = *((void *)a1 + 79);
    if (*(unsigned char *)(v81 + 432))
    {
      uint64_t v82 = 0;
      uint64_t v83 = *((void *)a1 + 77);
      char v84 = 1;
      do
      {
        char v85 = v84;
        *(void *)(v83 + 8 * v82 + 400) = *(void *)(v83 + 8 * v82 + 440);
        uint64_t v83 = *((void *)a1 + 77);
        *(void *)(v83 + 8 * v82 + 416) = *(void *)(v83 + 8 * v82 + 456);
        uint64_t v82 = 1;
        char v84 = 0;
      }
      while ((v85 & 1) != 0);
      uint64_t v81 = *((void *)a1 + 79);
      int v86 = *(_DWORD *)(v81 + 520);
      if (*(_DWORD *)(v81 + 504) == v86 && *(_DWORD *)(v81 + 508) == *(_DWORD *)(v81 + 524))
      {
        uint64_t v87 = 0;
        char v88 = 1;
        do
        {
          char v89 = v88;
          *(void *)(v81 + 8 * v87 + 400) = *(void *)(v81 + 8 * v87 + 440);
          uint64_t v81 = *((void *)a1 + 79);
          *(void *)(v81 + 8 * v87 + 416) = *(void *)(v81 + 8 * v87 + 456);
          uint64_t v87 = 1;
          char v88 = 0;
        }
        while ((v89 & 1) != 0);
      }
      else
      {
        if (*(_DWORD *)(v81 + 512) != v86 || *(_DWORD *)(v81 + 516) != *(_DWORD *)(v81 + 524))
        {
          int v93 = sub_1D0C8E178(*((void *)a1 + 79), *((void *)a1 + 3));
          int v94 = dword_1EB671A40;
          if (v93 && dword_1EB671A40 >= 3)
          {
            fwrite("ScaleReconFrameToInputDimension failed for PSNR\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(27, "ScaleReconFrameToInputDimension failed for PSNR\n");
            int v94 = dword_1EB671A40;
          }
          else if (!v93)
          {
            uint64_t v81 = *((void *)a1 + 79);
            goto LABEL_186;
          }
          if (v94 >= 6) {
            fprintf(__stream, "%-24s");
          }
          goto LABEL_262;
        }
        uint64_t v90 = 0;
        char v91 = 1;
        do
        {
          char v92 = v91;
          *(void *)(v81 + 8 * v90 + 400) = *(void *)(v81 + 8 * v90 + 472);
          uint64_t v81 = *((void *)a1 + 79);
          *(void *)(v81 + 8 * v90 + 416) = *(void *)(v81 + 8 * v90 + 488);
          uint64_t v90 = 1;
          char v91 = 0;
        }
        while ((v92 & 1) != 0);
      }
    }
LABEL_186:
    uint64_t v95 = *((void *)a1 + 77);
    if (*(unsigned char *)(v81 + 531) == 1)
    {
      if (*(unsigned char *)(v81 + 534))
      {
        if (dword_1EB671A40 < 3)
        {
LABEL_190:
          uint64_t v96 = *(unsigned int *)(v95 + 524);
          if ((int)v96 < 1)
          {
            unint64_t v98 = 0;
          }
          else
          {
            uint64_t v97 = 0;
            unint64_t v98 = 0;
            int v99 = *(unsigned __int16 **)(v81 + 400);
            uint64_t v100 = *(unsigned __int16 **)(v95 + 400);
            do
            {
              if (*(int *)(v95 + 520) >= 1)
              {
                int32x4_t v101 = v100;
                uint64_t v102 = v99;
                uint64_t v103 = *(unsigned int *)(v95 + 520);
                do
                {
                  int v105 = *v101++;
                  int v104 = v105;
                  int v106 = *v102++;
                  v98 += ((v104 - v106) * (v104 - v106));
                  --v103;
                }
                while (v103);
              }
              ++v97;
              v99 += *(void *)(v81 + 416);
              v100 += *(void *)(v95 + 416);
            }
            while (v97 != v96);
          }
          if (*(unsigned char *)(v95 + 532) && (int)v96 >= 2)
          {
            uint64_t v119 = 0;
            unint64_t v120 = 0;
            unint64_t v121 = 0;
            unsigned int v122 = v96 >> 1;
            int v123 = *(_DWORD *)(v95 + 520);
            if (v123 >= 0) {
              int v124 = *(_DWORD *)(v95 + 520);
            }
            else {
              int v124 = v123 + 1;
            }
            uint64_t v125 = (v124 >> 1);
            uint64_t v126 = *(void *)(v81 + 408) + 2;
            uint64_t v127 = *(void *)(v95 + 408) + 2;
            do
            {
              if (v123 >= 2)
              {
                v128 = (unsigned __int16 *)v127;
                unint64_t v129 = (unsigned __int16 *)v126;
                uint64_t v130 = v125;
                do
                {
                  int v131 = *(v128 - 1) - *(v129 - 1);
                  int v133 = *v128;
                  v128 += 2;
                  int v132 = v133;
                  int v134 = *v129;
                  v129 += 2;
                  v121 += (v131 * v131);
                  v120 += ((v132 - v134) * (v132 - v134));
                  --v130;
                }
                while (v130);
              }
              ++v119;
              v126 += 2 * *(void *)(v81 + 424);
              v127 += 2 * *(void *)(v95 + 424);
            }
            while (v119 != v122);
          }
          else
          {
            unint64_t v121 = 0;
            unint64_t v120 = 0;
          }
          *((double *)a1 + 9) = (double)v98;
          *((double *)a1 + 10) = (double)v121;
          *((double *)a1 + 11) = (double)v120;
          goto LABEL_245;
        }
      }
      else
      {
        if (*(unsigned char *)(v95 + 534)) {
          BOOL v118 = dword_1EB671A40 <= 2;
        }
        else {
          BOOL v118 = 1;
        }
        if (v118) {
          goto LABEL_190;
        }
      }
      fwrite("SSE calculation on MSB-aligned buffers not implemented\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "SSE calculation on MSB-aligned buffers not implemented\n");
      goto LABEL_190;
    }
    if (*(unsigned char *)(v81 + 534))
    {
      if (dword_1EB671A40 < 3)
      {
LABEL_200:
        uint64_t v107 = *(unsigned int *)(v95 + 524);
        if ((int)v107 < 1)
        {
          unint64_t v109 = 0;
        }
        else
        {
          uint64_t v108 = 0;
          unint64_t v109 = 0;
          uint64_t v110 = *(unsigned __int8 **)(v81 + 400);
          unint64_t v111 = *(unsigned __int8 **)(v95 + 400);
          do
          {
            if (*(int *)(v95 + 520) >= 1)
            {
              int v112 = v111;
              int v113 = v110;
              uint64_t v114 = *(unsigned int *)(v95 + 520);
              do
              {
                int v116 = *v112++;
                int v115 = v116;
                int v117 = *v113++;
                v109 += ((v115 - v117) * (v115 - v117));
                --v114;
              }
              while (v114);
            }
            ++v108;
            v110 += *(void *)(v81 + 416);
            v111 += *(void *)(v95 + 416);
          }
          while (v108 != v107);
        }
        uint64x2_t v136 = 0uLL;
        if (*(unsigned char *)(v95 + 532) && (int)v107 >= 2)
        {
          uint64_t v137 = 0;
          unsigned int v138 = *(unsigned __int8 **)(v81 + 408);
          v139 = *(unsigned __int8 **)(v95 + 408);
          unsigned int v140 = v107 >> 1;
          int v141 = *(_DWORD *)(v95 + 520);
          if (v141 >= 0) {
            int v142 = *(_DWORD *)(v95 + 520);
          }
          else {
            int v142 = v141 + 1;
          }
          uint64_t v143 = (v142 >> 1);
          do
          {
            if (v141 >= 2)
            {
              unsigned int v144 = v139;
              v145 = v138;
              uint64_t v146 = v143;
              do
              {
                v147.i32[0] = *v144;
                v147.i32[1] = v144[1];
                v148.i32[0] = *v145;
                v148.i32[1] = v145[1];
                int32x2_t v149 = vsub_s32(v147, v148);
                uint64x2_t v136 = vaddw_u32(v136, (uint32x2_t)vmul_s32(v149, v149));
                v145 += 2;
                v144 += 2;
                --v146;
              }
              while (v146);
            }
            ++v137;
            v138 += *(void *)(v81 + 424);
            v139 += *(void *)(v95 + 424);
          }
          while (v137 != v140);
        }
        *((double *)a1 + 9) = (double)v109;
        *((float64x2_t *)a1 + 5) = vcvtq_f64_u64(v136);
LABEL_245:
        uint64_t v150 = *((void *)a1 + 79);
        unsigned int v151 = *(unsigned __int8 *)(v150 + 528);
        int v152 = *(unsigned __int8 *)(v150 + 529);
        if (v151 == v152)
        {
          if (v151 < 0xB || dword_1EB671A40 <= 3)
          {
LABEL_254:
            ((void (*)(uint64_t, unsigned __int8 *, unsigned __int8 *))off_1F26F1BD0[v151 - 8])(v150, a1 + 72, a1 + 96);
            uint64_t v154 = 0;
            v155 = a1 + 96;
            do
            {
              double v156 = *(double *)&v155[v154];
              if ((*(void *)&v156 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                if (v156 > 99.99) {
                  double v156 = 99.99;
                }
                *(double *)&v155[v154] = v156;
              }
              v154 += 8;
            }
            while (v154 != 32);
            int v157 = dword_1EB671A40;
            if (dword_1EB671A40 <= 5)
            {
LABEL_263:
              uint64_t v77 = v194;
              if (!v194[64]) {
                goto LABEL_284;
              }
              uint64_t v158 = a2;
              if (v157 >= 6) {
                fwrite(" [", 2uLL, 1uLL, __stream);
              }
              uint64_t v159 = *((void *)a1 + 79);
              if (*(unsigned char *)(v159 + 597))
              {
                unint64_t v160 = 0;
                if (*(unsigned char *)(v159 + 532)) {
                  uint64_t v161 = 3;
                }
                else {
                  uint64_t v161 = 1;
                }
                int v162 = dword_1EB671A40;
                uint64_t v163 = 598;
                do
                {
                  for (uint64_t i = 0; i != 16; ++i)
                  {
                    if (v162 >= 6)
                    {
                      fprintf(__stream, "%02x", *(unsigned __int8 *)(*((void *)a1 + 79) + v163 + i));
                      int v162 = dword_1EB671A40;
                    }
                  }
                  if (v160 < (v161 - 1) && v162 > 5)
                  {
                    fputc(44, __stream);
                    int v162 = dword_1EB671A40;
                  }
                  ++v160;
                  v163 += 16;
                }
                while (v160 != v161);
              }
              else
              {
                if (dword_1EB671A40 < 6) {
                  goto LABEL_289;
                }
                fprintf(__stream, "-%32s", "MD5 calculation error");
                int v162 = dword_1EB671A40;
              }
              uint64_t v6 = v191;
              if (v162 >= 6)
              {
                fputc(93, __stream);
                int v157 = dword_1EB671A40;
                uint64_t v77 = v194;
                a2 = v158;
LABEL_284:
                if (v77[377]) {
                  BOOL v165 = v157 < 6;
                }
                else {
                  BOOL v165 = 1;
                }
                if (!v165)
                {
                  fprintf(__stream, " %3d/%5d %3d %4d/%4d", v6[461], v6[460], *(unsigned char *)(*((void *)a1 + 79) + 40) & 2, *((_DWORD *)a1 + 1625), *((_DWORD *)a1 + 1626));
                  uint64_t v77 = v194;
                }
                goto LABEL_290;
              }
LABEL_289:
              uint64_t v77 = v194;
              a2 = v158;
LABEL_290:
              if (v77[65])
              {
                uint64_t v166 = *((void *)a1 + 79);
                if (*(unsigned char *)(v166 + 432))
                {
                  uint64_t v167 = *((void *)a1 + 77);
                  long long v168 = *(_OWORD *)(v166 + 456);
                  *(_OWORD *)(v166 + 400) = *(_OWORD *)(v166 + 440);
                  *(_OWORD *)(v166 + 416) = v168;
                  *(void *)(v166 + 512) = 0;
                  if (v167)
                  {
                    if (*(int *)(v167 + 512) >= 1)
                    {
                      long long v169 = *(_OWORD *)(v167 + 488);
                      *(_OWORD *)(v167 + 400) = *(_OWORD *)(v167 + 472);
                      *(_OWORD *)(v167 + 416) = v169;
                    }
                  }
                }
              }
              goto LABEL_295;
            }
            fprintf(__stream, " %5.2f/%5.2f/%5.2f/%5.2f");
LABEL_262:
            int v157 = dword_1EB671A40;
            goto LABEL_263;
          }
        }
        else if (dword_1EB671A40 < 4)
        {
          goto LABEL_254;
        }
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "PSNR calculation for bitdepth %d/%d not supported\n", *(unsigned __int8 *)(v150 + 528), v152);
        syslog(28, "PSNR calculation for bitdepth %d/%d not supported\n", *(unsigned __int8 *)(v150 + 528), *(unsigned __int8 *)(v150 + 529));
        unsigned int v151 = *(unsigned __int8 *)(v150 + 528);
        goto LABEL_254;
      }
    }
    else
    {
      if (*(unsigned char *)(v95 + 534)) {
        BOOL v135 = dword_1EB671A40 <= 2;
      }
      else {
        BOOL v135 = 1;
      }
      if (v135) {
        goto LABEL_200;
      }
    }
    fwrite("SSE calculation on MSB-aligned buffers not implemented\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "SSE calculation on MSB-aligned buffers not implemented\n");
    goto LABEL_200;
  }
  if (dword_1EB671A40 < 6
    || (v6[165] ? (int v19 = " AFTER") : (int v19 = "BEFORE"),
        fprintf(__stream, " -------- dropped: %s encoding --------", v19),
        dword_1EB671A40 < 6))
  {
LABEL_158:
    uint64_t v77 = v194;
    goto LABEL_295;
  }
  uint64_t v20 = *((void *)a1 + 808);
  if (v20)
  {
    uint64_t v21 = *(void *)(v20 + 1760);
    if (v21) {
      int v22 = (int)((double)(1000 * *(_DWORD *)(v21 + 12)) / *(double *)(v20 + 512));
    }
    else {
      int v22 = -1;
    }
    double v71 = (double)*(int *)(*((void *)a1 + 77) + 32) / (double)*(uint64_t *)(*((void *)a1 + 77) + 24);
    if (!*(unsigned char *)(v20 + 1776))
    {
      int v72 = (double *)(v20 + 520);
      goto LABEL_147;
    }
  }
  else
  {
    double v71 = (double)*(int *)(*((void *)a1 + 77) + 32) / (double)*(uint64_t *)(*((void *)a1 + 77) + 24);
    int v22 = -1;
  }
  int v72 = (double *)(*((void *)a1 + 72) + 472);
LABEL_147:
  fprintf(__stream, " %4d %4.1f/%4.1f", v22, v71, *v72);
  int v76 = dword_1EB671A40;
  uint64_t v77 = v194;
  if (v194[65] && dword_1EB671A40 >= 6)
  {
    fwrite(" --.--/--.--/--.--/--.--", 0x18uLL, 1uLL, __stream);
    uint64_t v77 = v194;
    int v76 = dword_1EB671A40;
  }
  if (v77[64] && v76 >= 6)
  {
    fwrite(" --------------------------------", 0x21uLL, 1uLL, __stream);
    uint64_t v77 = v194;
    int v76 = dword_1EB671A40;
  }
  if (v77[377] && v76 >= 6)
  {
    int v78 = v6[165];
    if (v6[165]) {
      int v78 = *(unsigned char *)(*((void *)a1 + 79) + 40) & 2;
    }
    fprintf(__stream, " %3d/%5d %3d %4d/%4d", v6[461], v6[460], v78, *((_DWORD *)a1 + 1625), *((_DWORD *)a1 + 1626));
    goto LABEL_158;
  }
LABEL_295:
  int v170 = v77[210];
  int v171 = dword_1EB671A40;
  if (v170 && dword_1EB671A40 >= 6)
  {
    fprintf(__stream, " %8.0f", *(double *)(*((void *)a1 + 72) + 272) * 1000.0);
    int v171 = dword_1EB671A40;
  }
  signed int v172 = a2;
  if (v171 >= 6) {
    fwrite(" [", 2uLL, 1uLL, __stream);
  }
  if (*((int *)a1 + 764) <= 0)
  {
    int v174 = dword_1EB671A40;
  }
  else
  {
    int v173 = *((_DWORD *)a1 + 765);
    int v174 = dword_1EB671A40;
    BOOL v175 = v173 < 1;
    if (v173 >= 1)
    {
      uint64_t v176 = 0;
      uint64_t v177 = a1 + 3080;
      uint64_t v178 = "%d";
      int v179 = *((_DWORD *)a1 + 765);
      do
      {
        if (v174 >= 6)
        {
          fprintf(__stream, v178, *(unsigned int *)(*(void *)v177 + 1024));
          int v174 = dword_1EB671A40;
          int v179 = *((_DWORD *)a1 + 765);
        }
        ++v176;
        v177 += 16;
        uint64_t v178 = ";%d";
      }
      while (v176 < v179);
    }
    int v180 = *((_DWORD *)a1 + 766);
    if (v180 >= 1)
    {
      uint64_t v181 = 0;
      if (v173 >= 1) {
        v182 = ";%d";
      }
      else {
        v182 = "%d";
      }
      v183 = a1 + 3336;
      do
      {
        if (v174 >= 6)
        {
          fprintf(__stream, v182, *(unsigned int *)(*(void *)v183 + 1024));
          int v174 = dword_1EB671A40;
          int v180 = *((_DWORD *)a1 + 766);
        }
        ++v181;
        v183 += 16;
        v182 = ";%d";
      }
      while (v181 < v180);
      BOOL v175 = 0;
    }
    int v184 = *((_DWORD *)a1 + 767);
    if (v184 >= 1)
    {
      uint64_t v185 = 0;
      double v186 = a1 + 3592;
      do
      {
        if (v174 >= 6)
        {
          if (v175) {
            fprintf(__stream, "%d");
          }
          else {
            fprintf(__stream, ";%d");
          }
          int v174 = dword_1EB671A40;
          int v184 = *((_DWORD *)a1 + 767);
        }
        BOOL v175 = 0;
        ++v185;
        v186 += 16;
      }
      while (v185 < v184);
    }
  }
  a2 = v172;
  a3 = v190;
  uint64_t v6 = v191;
  if (v174 >= 6)
  {
    fputc(93, __stream);
    int v187 = dword_1EB671A40;
    if (dword_1EB671A40 <= 6) {
      goto LABEL_336;
    }
    if (!v194[192] || !*(void *)(*((void *)a1 + 72) + 10400))
    {
LABEL_337:
      fputc(10, __stream);
      goto LABEL_2;
    }
    fprintf(__stream, "         %8.3f", *((double *)a1 + 71));
    unsigned int v188 = a1[648];
    BOOL v189 = v188 == 4;
    if (v188 >= 4)
    {
      int v187 = dword_1EB671A40;
      if (!v189 || dword_1EB671A40 <= 5)
      {
LABEL_336:
        if (v187 < 6) {
          goto LABEL_2;
        }
        goto LABEL_337;
      }
    }
    else if (dword_1EB671A40 < 6)
    {
      goto LABEL_2;
    }
    fprintf(__stream, "            %8.3f            %8.3f", *(double *)(*(void *)(*((void *)a1 + 72) + 10400) + 440), *(double *)(*(void *)(*((void *)a1 + 72) + 10400)+ 8 * *(int *)(*(void *)(*((void *)a1 + 72) + 10400) + 432)+ 408));
    int v187 = dword_1EB671A40;
    goto LABEL_336;
  }
LABEL_2:
  uint64_t v9 = v7 + 2;
  a2(a3, *(void *)(*((void *)a1 + 77) + 536), *((unsigned int *)a1 + 148), *((void *)a1 + 845), *((void *)a1 + 16), a1 + 544, v7 + 2);
  uint64_t v10 = *((void *)a1 + 72);
  if (*((_DWORD *)a1 + 148))
  {
    int v11 = *a1;
    if (*a1) {
      goto LABEL_85;
    }
    goto LABEL_81;
  }
  uint64_t v12 = *((void *)a1 + 808);
  if (v12)
  {
    if (*(unsigned char *)(v12 + 1776)) {
      int v13 = (double *)(v10 + 472);
    }
    else {
      int v13 = (double *)(v12 + 520);
    }
    double v14 = *v13;
    uint64_t v15 = *(void *)(v12 + 1760);
    if (v15)
    {
      int v16 = (int)((double)(1000 * *(_DWORD *)(v15 + 12)) / *(double *)(v12 + 512));
      goto LABEL_34;
    }
  }
  else
  {
    double v14 = *(double *)(v10 + 472);
  }
  int v16 = -1;
LABEL_34:
  float v23 = *((float *)a1 + 1619);
  unsigned int v24 = v6[165];
  *(unsigned char *)(v10 + 10434) = 0;
  int v11 = *a1;
  if (*a1)
  {
    ++*(_DWORD *)(v10 + 10468);
    if (!v24)
    {
      int v33 = (_DWORD *)(v10 + 10476);
      goto LABEL_80;
    }
    ++*(_DWORD *)(v10 + 10472);
    if (v24 != 1) {
      ++*(_DWORD *)(v10 + 10484);
    }
    *(unsigned char *)(v10 + 10434) = 1;
  }
  else
  {
    ++*(_DWORD *)(v10 + 10464);
  }
  if (v24 >= 2) {
    ++*(_DWORD *)(v10 + 10480);
  }
  if (v11)
  {
    int v25 = *(FILE **)(v10 + 264);
    goto LABEL_86;
  }
  int v26 = (int)(v23 + 0.5);
  uint64_t v27 = *v9;
  uint64_t v28 = 504;
  if (!*(unsigned char *)(*v9 + 432)) {
    uint64_t v28 = 520;
  }
  unsigned int v29 = *(_DWORD *)(v27 + v28);
  uint64_t v30 = 508;
  if (!*(unsigned char *)(*v9 + 432)) {
    uint64_t v30 = 524;
  }
  unsigned int v31 = *(_DWORD *)(v27 + v30);
  *(double *)(v10 + 10496) = *(double *)(v10 + 10496) + (double)v29;
  *(double *)(v10 + 10504) = *(double *)(v10 + 10504) + (double)v31;
  *(uint32x2_t *)(v10 + 10512) = vmin_u32(*(uint32x2_t *)(v10 + 10512), (uint32x2_t)__PAIR64__(v31, v29));
  *(uint32x2_t *)(v10 + 10520) = vmax_u32((uint32x2_t)__PAIR64__(v31, v29), *(uint32x2_t *)(v10 + 10520));
  if (v29 == *(_DWORD *)(v10 + 10744) && v31 == *(_DWORD *)(v10 + 10748))
  {
    int v32 = *(_DWORD *)(v10 + 10752) + 1;
  }
  else
  {
    ++*(_DWORD *)(v10 + 10488);
    if (*((int *)a1 + 163) >= 1)
    {
      unsigned int v34 = *(_DWORD *)(v10 + 10492);
      if (v34 >= *(_DWORD *)(v10 + 10752)) {
        unsigned int v34 = *(_DWORD *)(v10 + 10752);
      }
      *(_DWORD *)(v10 + 10492) = v34;
    }
    int v32 = 1;
  }
  *(_DWORD *)(v10 + 10752) = v32;
  *(_DWORD *)(v10 + 10744) = v29;
  *(_DWORD *)(v10 + 10748) = v31;
  *(double *)(v10 + 10528) = *(double *)(v10 + 10528) + (double)v26;
  int v35 = *(_DWORD *)(v10 + 10536);
  if (v35 >= v26) {
    int v35 = (int)(v23 + 0.5);
  }
  *(_DWORD *)(v10 + 10536) = v35;
  if (*(_DWORD *)(v10 + 10540) > v26) {
    int v26 = *(_DWORD *)(v10 + 10540);
  }
  *(_DWORD *)(v10 + 10540) = v26;
  *(double *)(v10 + 10544) = v14 + *(double *)(v10 + 10544);
  double v36 = *(double *)(v10 + 10552);
  if (v36 >= v14) {
    double v36 = v14;
  }
  *(double *)(v10 + 10552) = v36;
  if (v14 < *(double *)(v10 + 10560)) {
    double v14 = *(double *)(v10 + 10560);
  }
  *(double *)(v10 + 10560) = v14;
  *(double *)(v10 + 10568) = *(double *)(v10 + 10568) + (double)v16;
  int v37 = *(_DWORD *)(v10 + 10576);
  if (v37 >= v16) {
    int v37 = v16;
  }
  *(_DWORD *)(v10 + 10576) = v37;
  int v38 = *(_DWORD *)(v10 + 10580);
  if (v16 > v38) {
    int v38 = v16;
  }
  *(_DWORD *)(v10 + 10580) = v38;
  if (*(int *)(v27 + 1024) >= 10)
  {
    *(double *)(v10 + 10584) = *(double *)(v10 + 10584) + (double)v16;
    int v39 = *(_DWORD *)(v10 + 10592);
    if (v39 >= v16) {
      int v39 = v16;
    }
    *(_DWORD *)(v10 + 10592) = v39;
    if (v16 <= *(_DWORD *)(v10 + 10596)) {
      int v16 = *(_DWORD *)(v10 + 10596);
    }
    *(_DWORD *)(v10 + 10596) = v16;
  }
  for (uint64_t j = 0; j != 24; j += 8)
    *(double *)(v10 + 10600 + j) = *(double *)&a1[j + 72] + *(double *)(v10 + 10600 + j);
  for (uint64_t k = 0; k != 32; k += 8)
    *(double *)(v10 + 10624 + k) = *(double *)&a1[k + 96] + *(double *)(v10 + 10624 + k);
  uint64_t v42 = *((void *)a1 + 16);
  *(void *)(v10 + 10656) += v42;
  uint64_t v43 = (char)a1[648];
  *(void *)(v10 + 10464 + 8 * v43 + 208) += v42;
  int v33 = (_DWORD *)(v10 + 10464 + 4 * v43 + 256);
LABEL_80:
  ++*v33;
  if (v11) {
    goto LABEL_85;
  }
LABEL_81:
  int v44 = *(FILE **)(v10 + 240);
  if (v44)
  {
    if (fwrite(*((const void **)a1 + 845), 1uLL, *((void *)a1 + 16), v44) != *((void *)a1 + 16)) {
      __error();
    }
    int v11 = *a1;
    uint64_t v10 = *((void *)a1 + 72);
  }
LABEL_85:
  int v25 = *(FILE **)(v10 + 264);
  if (!v11)
  {
    if (!v25) {
      goto LABEL_125;
    }
    sub_1D0C8E29C(*v9, *(FILE **)(v10 + 264), *(void *)(v10 + 168), 0);
    if (*(unsigned char *)(v10 + 575))
    {
      if (!*((void *)a1 + 848)) {
        sub_1D0CF17A4(*((void *)a1 + 72));
      }
      unsigned int v46 = (_DWORD *)*v9;
      if (*(unsigned char *)(*v9 + 432) && *(void *)(v10 + 168)) {
        int v47 = v46[126] != v46[130] || v46[127] != v46[131];
      }
      else {
        int v47 = 0;
      }
      sub_1D0D0030C((void *)a1 + 848, (uint64_t)(v7 + 2), v47);
    }
    goto LABEL_117;
  }
LABEL_86:
  if (*(unsigned char *)(v10 + 575))
  {
    uint64_t v45 = *((void *)a1 + 848);
    if (v45) {
      sub_1D0C8E29C(v45, v25, 0, 0);
    }
  }
  if (v25)
  {
LABEL_117:
    uint64_t v59 = *v9;
    if (*v9)
    {
      if (*(unsigned char *)(v59 + 432))
      {
        uint64_t v60 = 0;
        char v61 = 1;
        do
        {
          char v62 = v61;
          *(void *)(v59 + 8 * v60 + 400) = *(void *)(v59 + 8 * v60 + 440);
          uint64_t v59 = *v9;
          *(void *)(*v9 + 8 * v60 + 416) = *(void *)(*v9 + 8 * v60 + 456);
          uint64_t v60 = 1;
          char v61 = 0;
        }
        while ((v62 & 1) != 0);
        *(void *)(v59 + 512) = 0;
        uint64_t v63 = *v7;
        if (*v7)
        {
          if (*(int *)(v63 + 512) >= 1)
          {
            uint64_t v64 = 0;
            char v65 = 1;
            do
            {
              char v66 = v65;
              *(void *)(v63 + 8 * v64 + 400) = *(void *)(v63 + 8 * v64 + 472);
              uint64_t v63 = *v7;
              *(void *)(*v7 + 8 * v64 + 416) = *(void *)(*v7 + 8 * v64 + 488);
              uint64_t v64 = 1;
              char v65 = 0;
            }
            while ((v66 & 1) != 0);
          }
        }
      }
    }
  }
LABEL_125:
  uint64_t v67 = (std::__shared_weak_count *)*((void *)a1 + 80);
  *uint64_t v9 = 0;
  v7[3] = 0;
  if (v67) {
    sub_1D0C4C984(v67);
  }
  int v68 = (std::__shared_weak_count *)*((void *)a1 + 78);
  *uint64_t v7 = 0;
  v7[1] = 0;
  if (v68) {
    sub_1D0C4C984(v68);
  }
  *((void *)a1 + 16) = 0;
  *((_WORD *)a1 + 330) = -1;
  *((_DWORD *)a1 + 167) = 0;
  *((_DWORD *)a1 + 171) = 0;
  a1[596] = 0;
  atomic_store(0, (unsigned int *)a1 + 147);
}

size_t sub_1D0D02268(size_t result)
{
  v1 = **(FILE *****)result;
  int v2 = dword_1EB671A40;
  if (BYTE1((**v1)[2]._seek)) {
    BOOL v3 = dword_1EB671A40 < 6;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t result = fprintf(*v1[1], "%10s ", "Time stamp");
    int v2 = dword_1EB671A40;
  }
  if (v2 < 6) {
    goto LABEL_49;
  }
  uint64_t result = fprintf(*v1[1], "%10s%15s%5s", "Frame", "Dimension", "Type");
  int v2 = dword_1EB671A40;
  if (dword_1EB671A40 > 6)
  {
    uint64_t result = fprintf(*v1[1], "%5s %18s", "SC", "Complexities");
    int v2 = dword_1EB671A40;
  }
  if (v2 < 6) {
    goto LABEL_49;
  }
  uint64_t result = fprintf(*v1[1], "%8s%11s%5s%8s    ", "QP", "Bytes", "Dlay", "FPS");
  int v2 = dword_1EB671A40;
  unsigned int v4 = **v1;
  if (BYTE1(v4->_read)) {
    BOOL v5 = dword_1EB671A40 < 6;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t result = fwrite("           PSNR         ", 0x18uLL, 1uLL, *v1[1]);
    unsigned int v4 = **v1;
    int v2 = dword_1EB671A40;
  }
  if (LOBYTE(v4->_read)) {
    BOOL v6 = v2 < 6;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t result = fprintf(*v1[1], "%15s%s%15s", (const char *)&unk_1D0DB7035, "MD5", (const char *)&unk_1D0DB7035);
    unsigned int v4 = **v1;
    int v2 = dword_1EB671A40;
  }
  if (BYTE1(v4[2]._seek)) {
    BOOL v7 = v2 < 6;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t result = fprintf(*v1[1], " %-9s%12s  ", "force", "Bits");
    unsigned int v4 = **v1;
    int v2 = dword_1EB671A40;
  }
  if (BYTE2(v4[1]._close)) {
    BOOL v8 = v2 < 6;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t result = fwrite(" Enc Time", 9uLL, 1uLL, *v1[1]);
    int v2 = dword_1EB671A40;
  }
  if (v2 < 6) {
    goto LABEL_49;
  }
  uint64_t result = fwrite(" Ref POCs", 9uLL, 1uLL, *v1[1]);
  int v2 = dword_1EB671A40;
  if (dword_1EB671A40 > 6)
  {
    if (!LOBYTE((**v1)[1]._lbfsize)) {
      goto LABEL_37;
    }
    uint64_t result = fwrite("    BitErrRatio", 0xFuLL, 1uLL, *v1[1]);
    int v2 = dword_1EB671A40;
    if (dword_1EB671A40 < 6
      || (result = fwrite("    PrevRcFrameBitRatio", 0x17uLL, 1uLL, *v1[1]), int v2 = dword_1EB671A40, dword_1EB671A40 < 6))
    {
LABEL_49:
      uint64_t v10 = **v1;
      goto LABEL_50;
    }
    uint64_t result = fwrite("    WAvgRcFrameBitRatio", 0x17uLL, 1uLL, *v1[1]);
    int v2 = dword_1EB671A40;
  }
  if (v2 < 6) {
    goto LABEL_49;
  }
LABEL_37:
  uint64_t result = fputc(10, *v1[1]);
  int v2 = dword_1EB671A40;
  if (BYTE1((**v1)[2]._seek)) {
    BOOL v9 = dword_1EB671A40 < 6;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t result = fprintf(*v1[1], "%10s ", "(seconds)");
    int v2 = dword_1EB671A40;
  }
  if (v2 < 6) {
    goto LABEL_49;
  }
  uint64_t result = fprintf(*v1[1], "%6s (%6s) %4sx%-4s%4s%4s", "Src #", "POC", "W", "H", (const char *)&unk_1D0DB7035, (const char *)&unk_1D0DB7035);
  int v2 = dword_1EB671A40;
  if (dword_1EB671A40 > 6)
  {
    uint64_t result = fprintf(*v1[1], "%5s %-18s", (const char *)&unk_1D0DB7035, "Frm/Intra/Inter");
    int v2 = dword_1EB671A40;
  }
  if (v2 < 6) {
    goto LABEL_49;
  }
  uint64_t result = fprintf(*v1[1], "%7s%12s%6s/%5s", "Frm/  avg", "(ms)", "cur", "targ");
  int v2 = dword_1EB671A40;
  uint64_t v10 = **v1;
  if (BYTE1(v10->_read) && dword_1EB671A40 >= 6)
  {
    uint64_t result = fprintf(*v1[1], " %5s/%5s/%5s/%5s", "Y", "Cb", "Cr", "comp");
    uint64_t v10 = **v1;
    int v2 = dword_1EB671A40;
  }
LABEL_50:
  if (!BYTE1(v10[2]._seek))
  {
LABEL_58:
    if (BYTE2(v10[1]._close)) {
      BOOL v12 = v2 < 6;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t result = fwrite("     (ms)", 9uLL, 1uLL, *v1[1]);
      int v2 = dword_1EB671A40;
    }
    if (v2 >= 6)
    {
      int v13 = *v1[1];
      return fputc(10, v13);
    }
    return result;
  }
  if (LOBYTE(v10->_read)) {
    BOOL v11 = v2 < 6;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t result = fprintf(*v1[1], " %14s%3s%15s", (const char *)&unk_1D0DB7035, (const char *)&unk_1D0DB7035, (const char *)&unk_1D0DB7035);
    int v2 = dword_1EB671A40;
  }
  if (v2 >= 6)
  {
    uint64_t result = fprintf(*v1[1], " %3s/%5s %3s %4s/%4s", "IDR", "Rfrsh", "LTR", "FEC", "Hdr");
    int v2 = dword_1EB671A40;
    uint64_t v10 = **v1;
    goto LABEL_58;
  }
  return result;
}

void sub_1D0D027DC(char *a1, uint64_t a2, int a3, int a4, __int16 *a5, int a6)
{
  sub_1D0D02B68(v53, a6 * a4);
  sub_1D0D02B68(__p, (int)((a6 & 0xFFFFFFFE) + a4));
  int v11 = a6 >> 1;
  int v48 = a6 >> 1;
  uint64_t v49 = a2;
  if (a6 < 0)
  {
    int v47 = 0;
  }
  else
  {
    uint64_t v12 = v11;
    uint64_t v13 = ((a6 >> 1) & ~(a6 >> 31)) + 1;
    uint64_t v14 = v11 * (uint64_t)a4;
    uint64_t v15 = a1;
    do
    {
      memcpy((char *)v53[0] + v14, v15, a4);
      v15 += a2;
      v14 += a4;
      --v13;
    }
    while (v13);
    if (a6 <= 1)
    {
      int v47 = 0;
    }
    else
    {
      uint64_t v16 = 0;
      if (v48 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v48;
      }
      int v18 = &a1[a2 * v12];
      do
      {
        memcpy((char *)v53[0] + v16, v18, a4);
        v18 -= a2;
        v16 += a4;
        --v17;
      }
      while (v17);
      int v47 = 1;
    }
    int v11 = a6 >> 1;
  }
  if (a3 >= 1)
  {
    uint64_t v19 = 0;
    int v20 = 0;
    uint64_t v21 = v11;
    uint64_t v22 = v11 + (uint64_t)a4;
    if (v11 >= 0) {
      int v23 = v11;
    }
    else {
      int v23 = -v11;
    }
    uint64_t v45 = ~v11 + a3;
    if (v11 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v11;
    }
    int v46 = v11 + 1;
    int v25 = v11 + 1 + v23;
    do
    {
      if (a4 >= 1)
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unsigned __int8 *)v53[0];
        uint64_t v28 = __p[0];
        do
        {
          if (a6 < 1)
          {
            LOBYTE(v31) = 0;
          }
          else
          {
            uint64_t v29 = 0;
            int v30 = 0;
            do
            {
              v30 += v27[v26 + (v20 + (int)v29) % a6 * a4] * a5[v29];
              ++v29;
            }
            while (a6 != v29);
            if (v30 > 32639) {
              LOBYTE(v31) = -1;
            }
            else {
              int v31 = (v30 >> 7) & ~(v30 >> 31);
            }
          }
          v28[v26 + v21] = v31;
          ++v26;
        }
        while (v26 != a4);
      }
      if (v47)
      {
        uint64_t v32 = 0;
        int v33 = a6 - 1;
        int v34 = v22 - 2;
        do
        {
          *((unsigned char *)__p[0] + v32) = *((unsigned char *)__p[0] + v33);
          *((unsigned char *)__p[0] + v22 + v32++) = *((unsigned char *)__p[0] + v34--);
          --v33;
        }
        while (v24 != v32);
      }
      if (a4 >= 1)
      {
        int v35 = (unsigned __int8 *)__p[0];
        uint64_t v36 = v21;
        do
        {
          int v37 = 0;
          if ((a6 & 0x80000000) == 0)
          {
            int v38 = a5;
            int v39 = v35;
            int v40 = v25;
            do
            {
              int v42 = *v38++;
              int v41 = v42;
              int v43 = *v39++;
              v37 += v43 * v41;
              --v40;
            }
            while (v40);
            if (v37 > 32639) {
              LOBYTE(v37) = -1;
            }
            else {
              int v37 = (v37 >> 7) & ~(v37 >> 31);
            }
          }
          a1[v19 * v49 + v36 - v21] = v37;
          ++v36;
          ++v35;
        }
        while (v36 < v22);
      }
      int v44 = v46 + v19;
      if (v19 >= v45) {
        int v44 = 2 * a3 - 3 - (v11 + v19);
      }
      uint64_t v51 = v19;
      memcpy((char *)v53[0] + a4 * (uint64_t)v20, &a1[v44 * v49], a4);
      int v11 = a6 >> 1;
      int v20 = (v20 + 1) % a6;
      uint64_t v19 = v51 + 1;
    }
    while (v51 + 1 != a3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
}

void sub_1D0D02B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1D0D02B68(void *a1, size_t __sz)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      sub_1D0C8D71C();
    }
    unsigned int v4 = (char *)operator new(__sz);
    *a1 = v4;
    BOOL v5 = &v4[__sz];
    a1[2] = &v4[__sz];
    bzero(v4, __sz);
    a1[1] = v5;
  }
  return a1;
}

void sub_1D0D02BD0(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1D0D02BEC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  int v3 = *(_DWORD *)(a2 + 20);
  if (v2 < 0 && v3 < 0) {
    return *(_DWORD *)(a1 + 16) > *(_DWORD *)(a2 + 16);
  }
  BOOL v6 = v3 < 0 || v2 < v3;
  return v2 >= 0 && v6;
}

void sub_1D0D02C28(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 128), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 128));
  if (*(void *)(a1 + 80))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    int v2 = *(uint64_t **)(a1 + 72);
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    *(void *)(a1 + 80) = 0;
    if (v2 != (uint64_t *)(a1 + 64))
    {
      do
      {
        BOOL v5 = (uint64_t *)v2[1];
        operator delete(v2);
        int v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 64));
    }
  }
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_1D0D02CBC(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_1D0D02C28(result);
    JUMPOUT(0x1D25F0220);
  }
  return result;
}

uint64_t sub_1D0D02D04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_1D0D02C28(result);
    JUMPOUT(0x1D25F0220);
  }
  return result;
}

void sub_1D0D02D40(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F0230);
}

void sub_1D0D02D7C()
{
  sub_1D0C65DAC();
  sub_1D0C3FD20(&v0, dword_1EB671A20 + 2, 0);
}

uint64_t sub_1D0D02DF0(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1D0C4C984(v2);
  }
  return a1;
}

void sub_1D0D02E20(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v12 = (std::mutex *)a1;
  char v13 = 1;
  std::mutex::lock((std::mutex *)a1);
  BOOL v8 = operator new(0x28uLL);
  v8[2] = a4;
  v8[3] = sub_1D0C91934;
  *((_DWORD *)v8 + 8) = a2;
  *((_DWORD *)v8 + 9) = a3;
  uint64_t v9 = *(void *)(a1 + 64);
  *BOOL v8 = v9;
  v8[1] = a1 + 64;
  *(void *)(v9 + 8) = v8;
  *(void *)(a1 + 64) = v8;
  unint64_t v10 = *(void *)(a1 + 80) + 1;
  *(void *)(a1 + 80) = v10;
  if (*(unsigned char *)(a1 + 148))
  {
    uint64_t v14 = sub_1D0D02BEC;
    sub_1D0D02F50(*(uint64_t ***)(a1 + 72), (uint64_t *)(a1 + 64), v10, (unsigned int (**)(uint64_t, uint64_t))&v14);
  }
  int v11 = *(_DWORD *)(a1 + 112);
  if (*(_DWORD *)(a1 + 144) - v11 < a2) {
    a2 = *(_DWORD *)(a1 + 144) - v11;
  }
  if (a2 >= 1) {
    *(_DWORD *)(a1 + 112) = a2 + v11;
  }
  sub_1D0C615D8((uint64_t)&v12);
  if (a2 >= 1)
  {
    do
    {
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 128), *(dispatch_queue_t *)(a1 + 136), (void *)a1, (dispatch_function_t)sub_1D0D03160);
      --a2;
    }
    while (a2);
  }
  if (v13) {
    std::mutex::unlock(v12);
  }
}

void sub_1D0D02F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11)
{
  if (a11) {
    std::mutex::unlock(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1D0D02F50(uint64_t **a1, uint64_t *a2, unint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t v4 = a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      BOOL v7 = (uint64_t *)*a2;
      if ((*a4)(*a2 + 16, (uint64_t)(a1 + 2)))
      {
        uint64_t v8 = *v7;
        *(void *)(v8 + 8) = v7[1];
        *(void *)v7[1] = v8;
        uint64_t v9 = *v4;
        v9[1] = (uint64_t)v7;
        *BOOL v7 = (uint64_t)v9;
        *uint64_t v4 = v7;
        v7[1] = (uint64_t)v4;
        return v7;
      }
    }
    else
    {
      unint64_t v11 = a3 >> 1;
      unint64_t v12 = (a3 >> 1) + 1;
      char v13 = a1;
      do
      {
        char v13 = (uint64_t **)v13[1];
        --v12;
      }
      while (v12 > 1);
      uint64_t v14 = (uint64_t **)sub_1D0D02F50(a1, v13, a3 >> 1, a4);
      uint64_t v4 = (uint64_t **)sub_1D0D02F50(v13, a2, a3 - v11, a4);
      if ((*a4)((uint64_t)(v4 + 2), (uint64_t)(v14 + 2)))
      {
        for (uint64_t i = v4[1]; i != a2; uint64_t i = (uint64_t *)i[1])
        {
          if (!(*a4)((uint64_t)(i + 2), (uint64_t)(v14 + 2))) {
            goto LABEL_14;
          }
        }
        uint64_t i = a2;
LABEL_14:
        uint64_t v17 = *i;
        int v18 = *v4;
        v18[1] = *(void *)(*i + 8);
        **(void **)(v17 + 8) = v18;
        uint64_t v19 = *v14;
        uint64_t v16 = v14[1];
        v19[1] = (uint64_t)v4;
        *uint64_t v4 = v19;
        *uint64_t v14 = (uint64_t *)v17;
        *(void *)(v17 + 8) = v14;
      }
      else
      {
        uint64_t v16 = v14[1];
        uint64_t i = (uint64_t *)v4;
        uint64_t v4 = v14;
      }
      if (v16 != i && i != a2)
      {
        int v20 = i;
        do
        {
          if ((*a4)((uint64_t)(i + 2), (uint64_t)(v16 + 2)))
          {
            for (uint64_t j = (uint64_t *)i[1]; j != a2; uint64_t j = (uint64_t *)j[1])
            {
              if (!(*a4)((uint64_t)(j + 2), (uint64_t)(v16 + 2))) {
                goto LABEL_25;
              }
            }
            uint64_t j = a2;
LABEL_25:
            uint64_t v22 = *j;
            uint64_t v23 = *i;
            *(void *)(v23 + 8) = *(void *)(*j + 8);
            **(void **)(v22 + 8) = v23;
            if (v20 == i) {
              int v20 = j;
            }
            uint64_t v25 = *v16;
            uint64_t v24 = (uint64_t *)v16[1];
            *(void *)(v25 + 8) = i;
            uint64_t *i = v25;
            *uint64_t v16 = v22;
            *(void *)(v22 + 8) = v16;
            uint64_t v16 = v24;
            uint64_t i = j;
          }
          else
          {
            uint64_t v16 = (uint64_t *)v16[1];
          }
        }
        while (v16 != v20 && i != a2);
      }
    }
  }
  return (uint64_t *)v4;
}

void sub_1D0D03160(std::mutex *this)
{
  int v2 = &this[1].__m_.__opaque[16];
  while (1)
  {
    unint64_t v12 = this;
    char v13 = 1;
    std::mutex::lock(this);
    int v3 = *(_DWORD *)&this[1].__m_.__opaque[32];
    if (v3 <= 0)
    {
      uint64_t v4 = *(void *)&this[1].__m_.__opaque[8];
      if (!v4) {
        break;
      }
      BOOL v5 = *(void **)this[1].__m_.__opaque;
      uint64_t v6 = v5[4];
      *(_OWORD *)int v2 = *((_OWORD *)v5 + 1);
      *((void *)v2 + 2) = v6;
      uint64_t v7 = *v5;
      *(void *)(v7 + 8) = v5[1];
      *(void *)v5[1] = v7;
      *(void *)&this[1].__m_.__opaque[8] = v4 - 1;
      operator delete(v5);
      int v3 = *(_DWORD *)&this[1].__m_.__opaque[32];
      if (v3 < 1) {
        break;
      }
    }
    uint64_t v8 = (v3 - 1);
    *(_DWORD *)&this[1].__m_.__opaque[32] = v8;
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))&this[1].__m_.__opaque[24];
    if (!v9) {
      break;
    }
    uint64_t v10 = *(void *)&this[1].__m_.__opaque[16];
    sub_1D0C615D8((uint64_t)&v12);
    v9(v10, v8);
    if (v13) {
      std::mutex::unlock(v12);
    }
  }
  --*(_DWORD *)&this[1].__m_.__opaque[40];
  unint64_t v11 = v12;
  std::mutex::unlock(v11);
}

void sub_1D0D0325C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0D03278(uint64_t a1, const std::string *a2)
{
  uint64_t v4 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v7 = a1 + 24;
  uint64_t v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v10;
  *(void *)(a1 + *(void *)(v10 - 24)) = v9;
  *(void *)(a1 + 8) = 0;
  unint64_t v11 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  uint64_t v12 = MEMORY[0x1E4FBA488] + 24;
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  uint64_t v13 = v8[5];
  uint64_t v14 = v8[4];
  *(void *)(a1 + 16) = v14;
  *(void *)(v5 + *(void *)(v14 - 24)) = v13;
  uint64_t v15 = v8[1];
  *(void *)a1 = v15;
  *(void *)(a1 + *(void *)(v15 - 24)) = v8[6];
  *(void *)a1 = v12;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 16) = v6;
  std::streambuf::basic_streambuf();
  uint64_t v16 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 24) = v16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  std::string::operator=((std::string *)(a1 + 88), a2);
  sub_1D0D04114(v7);
  return a1;
}

void sub_1D0D03544(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1D25F01B0](v1);
  _Unwind_Resume(a1);
}

void *sub_1D0D0358C(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x1D25F0020](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1D0D036EC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1D0D036ACLL);
  }
  __cxa_rethrow();
}

void sub_1D0D03768(_Unwind_Exception *a1)
{
}

uint64_t *sub_1D0D0377C(uint64_t *a1, uint64_t a2)
{
  MEMORY[0x1D25F0020](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  int v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    char v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    uint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1D0D0399C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1D0D03958);
  }
  __cxa_rethrow();
}

void sub_1D0D03A38(_Unwind_Exception *a1)
{
}

void sub_1D0D03A4C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      uint64_t v21 = v4 + 72 * a2;
      while (v5 != v21)
      {
        if (*(char *)(v5 - 41) < 0) {
          operator delete(*(void **)(v5 - 64));
        }
        v5 -= 72;
      }
      a1[1] = v21;
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    if (0x8E38E38E38E38E39 * ((v8 - v5) >> 3) >= v7)
    {
      unint64_t v22 = v5 + 72 * v7;
      uint64_t v23 = 72 * a2 - 8 * ((v5 - *a1) >> 3);
      do
      {
        sub_1D0D04084(v5);
        v5 += 72;
        v23 -= 72;
      }
      while (v23);
      a1[1] = v22;
    }
    else
    {
      if (a2 > 0x38E38E38E38E38ELL) {
        sub_1D0C8D71C();
      }
      uint64_t v29 = a1 + 2;
      unint64_t v9 = 0x8E38E38E38E38E39 * ((v8 - v4) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x1C71C71C71C71C7) {
        unint64_t v11 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = (char *)sub_1D0D044FC(v11);
      uint64_t v13 = (uint64_t)&v12[72 * v6];
      uint64_t v27 = v12;
      *(void *)uint64_t v28 = v13;
      *(void *)&v28[8] = v13;
      *(void *)&v28[16] = &v12[72 * v14];
      uint64_t v15 = 9 * a2;
      int v16 = &v12[72 * a2];
      uint64_t v17 = 8 * v15 - 72 * v6;
      do
      {
        sub_1D0D04084(v13);
        v13 += 72;
        v17 -= 72;
      }
      while (v17);
      *(void *)&v28[8] = v16;
      uint64_t v19 = *a1;
      uint64_t v18 = a1[1];
      uint64_t v20 = *(void *)v28;
      *(void *)&long long v33 = *(void *)v28;
      *((void *)&v33 + 1) = *(void *)v28;
      long long v32 = v33;
      v30[0] = a1 + 2;
      v30[1] = &v32;
      v30[2] = &v33;
      char v31 = 0;
      while (v18 != v19)
      {
        v18 -= 72;
        sub_1D0D043FC(v20 - 72, v18);
        uint64_t v20 = *((void *)&v33 + 1) - 72;
        *((void *)&v33 + 1) -= 72;
      }
      char v31 = 1;
      sub_1D0D045AC((uint64_t)v30);
      uint64_t v24 = a1[2];
      long long v25 = *(_OWORD *)&v28[8];
      long long v26 = *(_OWORD *)a1;
      *a1 = v20;
      *(_OWORD *)uint64_t v28 = v26;
      *(_OWORD *)(a1 + 1) = v25;
      *(void *)&v28[16] = v24;
      uint64_t v27 = (char *)v26;
      sub_1D0D04548((uint64_t)&v27);
    }
  }
}

void sub_1D0D03C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_1D0D045AC((uint64_t)va1);
  sub_1D0D04548((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0D03C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t result = sub_1D0D0428C(v3 + 8, *(void *)(a2 + 8), *(void *)(a2 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  *(void *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_1D0D03CF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D0D03CFC(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1->i64[1] - a1->i64[0]) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    sub_1D0C8D71C();
  }
  uint64_t v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v23 = a1 + 1;
  if (v7)
  {
    if (v7 >> 59) {
      sub_1D0C6AC2C();
    }
    uint64_t v8 = (char *)operator new(32 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = &v8[32 * v2];
  uint64_t v20 = v8;
  v21.i64[0] = (uint64_t)v9;
  v21.i64[1] = (uint64_t)v9;
  unint64_t v22 = &v8[32 * v7];
  *(_DWORD *)unint64_t v9 = *(_DWORD *)a2;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 1) = 0;
  sub_1D0D0428C((uint64_t)(v9 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  uint64_t v10 = v21.i64[0];
  uint64_t v11 = v21.i64[1] + 32;
  v21.i64[1] += 32;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v10 + v14;
      uint64_t v16 = v12 + v14;
      *(_DWORD *)(v15 - 32) = *(_DWORD *)(v12 + v14 - 32);
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 8) = 0;
      *(void *)(v15 - 24) = 0;
      *(_OWORD *)(v15 - 24) = *(_OWORD *)(v12 + v14 - 24);
      *(void *)(v15 - 8) = *(void *)(v12 + v14 - 8);
      *(void *)(v16 - 24) = 0;
      *(void *)(v16 - 16) = 0;
      *(void *)(v16 - 8) = 0;
      v14 -= 32;
    }
    while (v12 + v14 != v13);
    v10 += v14;
    int64x2_t v17 = *a1;
    uint64_t v11 = v21.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v21 = v17;
  uint64_t v18 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v22;
  unint64_t v22 = v18;
  uint64_t v20 = (char *)v17.i64[0];
  sub_1D0D04398((uint64_t)&v20);
  return v11;
}

void sub_1D0D03E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D0D04398((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1D0D03E8C(void *a1, unsigned char *a2)
{
  MEMORY[0x1D25F0020](&v8, a1, 0);
  if (v8)
  {
    uint64_t v4 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v5 = (unsigned char *)v4[3];
    if (v5 == (unsigned char *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(void *))(*v4 + 80))(v4);
      if (v4 == -1)
      {
        int v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    int v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_1D0D03F6C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1D0D03F2CLL);
  }
  __cxa_rethrow();
}

void sub_1D0D03FE4(_Unwind_Exception *a1)
{
}

void sub_1D0D03FF8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1D0D04084(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)a1 = -1;
  std::string::erase((std::string *)(a1 + 8), 0, 0xFFFFFFFFFFFFFFFFLL);
  *(_WORD *)(a1 + 32) = 257;
  *(unsigned char *)(a1 + 34) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 60) = -1;
  *(_DWORD *)(a1 + 68) = -1;
  return a1;
}

void sub_1D0D040F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0D04114(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t sub_1D0D04228(uint64_t a1)
{
  char v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1D0D0428C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x38E38E38E38E38FLL) {
      sub_1D0C8D71C();
    }
    int v6 = (void *)result;
    std::string::size_type v7 = (char *)sub_1D0D044FC(a4);
    uint64_t v8 = v7;
    *int v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[72 * v9];
    uint64_t v14 = v7;
    uint64_t v13 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    v11[2] = &v14;
    char v12 = 0;
    if (a2 != a3)
    {
      do
      {
        sub_1D0D043FC((uint64_t)v7, a2);
        a2 += 72;
        unint64_t v10 = v14;
        std::string::size_type v7 = v14 + 72;
        v14 += 72;
      }
      while (a2 != a3);
      uint64_t v8 = v10 + 72;
    }
    char v12 = 1;
    uint64_t result = sub_1D0D0449C((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_1D0D04370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_1D0D04398(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    unint64_t v5 = (void **)(i - 24);
    sub_1D0CE9790(&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1D0D043FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D0D04084(a1);
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  std::string::operator=((std::string *)(v4 + 8), (const std::string *)(a2 + 8));
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 60) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

void sub_1D0D04480(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0D0449C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 41) < 0) {
        operator delete(*(void **)(v3 - 64));
      }
      v3 -= 72;
    }
  }
  return a1;
}

void *sub_1D0D044FC(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    sub_1D0C6AC2C();
  }
  return operator new(72 * a1);
}

uint64_t sub_1D0D04548(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 72;
      *(void *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 41) < 0)
      {
        operator delete(*(void **)(v2 - 64));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1D0D045AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 31) < 0) {
        operator delete(*(void **)(v3 + 8));
      }
      v3 += 72;
    }
  }
  return a1;
}

uint64_t sub_1D0D0460C(uint64_t a1, int a2, int a3, char *__str)
{
  unint64_t v5 = (_DWORD *)(a1 + 533);
  if (__str)
  {
    if (*__str)
    {
      std::string::size_type v7 = __str + 1;
      while (*v7++)
        ;
    }
    unint64_t v9 = 0xEDB2D39755161F73;
    unint64_t v10 = (char *)&unk_1E6899C00;
    while (1)
    {
      unint64_t v11 = 0xCBF29CE484222325;
      if (*__str)
      {
        char v12 = __str + 1;
        char v13 = *__str;
        do
        {
          unint64_t v11 = 0x100000001B3 * (v11 ^ v13);
          int v14 = *v12++;
          char v13 = v14;
        }
        while (v14);
      }
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      if (v9 == v11) {
        break;
      }
      unint64_t v15 = *((void *)v10 + 3);
      v10 += 24;
      unint64_t v9 = v15;
      if (!v15) {
        goto LABEL_15;
      }
    }
    int v16 = *((_DWORD *)v10 + 4);
    if (v16 != -1) {
      goto LABEL_18;
    }
LABEL_15:
    __endptr = 0;
    int v17 = strtol(__str, &__endptr, 10);
    if (__endptr == __str) {
      int v16 = -1;
    }
    else {
      int v16 = v17;
    }
LABEL_18:
    int v18 = *(_DWORD *)(a1 + 96);
    BOOL v19 = v18 == 3 || v16 == -1;
    if (!v19 && v18 != v16 && dword_1EB671A40 >= 4)
    {
      fwrite("Multiple usage modes specified, this might not result in the options you expect!\n", 0x51uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(28, "Multiple usage modes specified, this might not result in the options you expect!\n");
    }
    switch(v16)
    {
      case '!':
        *(_DWORD *)(a1 + 96) = 33;
        char v24 = 0;
        sub_1D0C636C0(a1, 0x89E9C01960F4C582, "ref", "1:0:2:1", 0xFFFFFFFFLL, (uint64_t)&v24);
        uint64_t result = 0;
        *(unsigned char *)(a1 + 132) = 5;
        *(unsigned char *)(a1 + 136) = 3;
        *(unsigned char *)(a1 + 212) = 0;
        *(unsigned char *)(a1 + 234) = 1;
        *(unsigned char *)(a1 + 223) = 1;
        *(unsigned char *)(a1 + 239) = 1;
        *(unsigned char *)(a1 + 92) = 1;
        *(unsigned char *)(a1 + 90) = 1;
        break;
      case '""':
        sub_1D0D04D30(a1);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 96) = 34;
        *(unsigned char *)(a1 + 552) = 1;
        *(_WORD *)(a1 + 541) = 0;
        *(_DWORD *)(a1 + 544) = 2;
        *(unsigned char *)(a1 + 554) = 3;
        *(_DWORD *)(a1 + 556) = 0x40000000;
        *(unsigned char *)(a1 + 227) = 0;
        break;
      case '#':
        sub_1D0D04D30(a1);
        char v25 = 0;
        sub_1D0C636C0(a1, 0x571BB01944827A3EuLL, "tuh", "0:0", 0xFFFFFFFFLL, (uint64_t)&v25);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 72) = 0;
        *(unsigned char *)(a1 + 227) = 0;
        *(unsigned char *)(a1 + 554) = 3;
        *(_DWORD *)(a1 + 556) = 0x40000000;
        *(_DWORD *)(a1 + 544) = 5;
        *(_DWORD *)(a1 + 96) = 35;
        break;
      case '$':
        sub_1D0D04D30(a1);
        char v26 = 0;
        sub_1D0C636C0(a1, 0x571BB01944827A3EuLL, "tuh", "1:0", 0xFFFFFFFFLL, (uint64_t)&v26);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 504) = 6;
        *(unsigned char *)(a1 + 508) = 6;
        *(_DWORD *)(a1 + 72) = 4;
        *(unsigned char *)(a1 + 548) = 1;
        *(_DWORD *)(a1 + 96) = 36;
        *(unsigned char *)(a1 + 132) = 5;
        *(unsigned char *)(a1 + 136) = 2;
        *(unsigned char *)(a1 + 223) = 0;
        *(unsigned char *)(a1 + 239) = 0;
        *(unsigned char *)(a1 + 90) = 0;
        *(_WORD *)(a1 + 550) = 0;
        *(unsigned char *)(a1 + 528) = 0;
        *(unsigned char *)(a1 + 530) = 0;
        *(unsigned char *)(a1 + 532) = 0;
        *(_WORD *)(a1 + 94) = 0;
        break;
      case '%':
        *(unsigned char *)(a1 + 205) = 1;
        *(_DWORD *)(a1 + 96) = 34;
        char v27 = 0;
        sub_1D0C636C0(a1, 0x89E9C01960F4C582, "ref", "1:0:2:1", 0xFFFFFFFFLL, (uint64_t)&v27);
        char v28 = 0;
        sub_1D0C636C0(a1, 0x571BB01944827A3EuLL, "tuh", "1:1", 0xFFFFFFFFLL, (uint64_t)&v28);
        uint64_t result = 0;
        *(unsigned char *)(a1 + 132) = 5;
        *(unsigned char *)(a1 + 234) = 1;
        *(_DWORD *)(a1 + 504) = 5;
        *(_WORD *)(a1 + 212) = 771;
        *(unsigned char *)(a1 + 236) = 2;
        *(unsigned char *)(a1 + 89) = 1;
        *(unsigned char *)(a1 + 148) = 0;
        *(unsigned char *)(a1 + 92) = 1;
        *(unsigned char *)(a1 + 238) = 1;
        *(unsigned char *)(a1 + 527) = 0;
        *(unsigned char *)(a1 + 136) = 2;
        *(unsigned char *)(a1 + 224) = 1;
        break;
      case '&':
      case '\'':
LABEL_31:
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Usage %s is un-supported\n", __str);
          syslog(27, "Usage %s is un-supported\n", __str);
        }
        uint64_t result = 4294954394;
        break;
      case '(':
        sub_1D0D04C8C(a1);
        char v23 = 0;
        sub_1D0C636C0(a1, 0x89E9C01960F4C582, "ref", "0:0:0:0", 0xFFFFFFFFLL, (uint64_t)&v23);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 96) = 40;
        *(unsigned char *)(a1 + 192) = 0;
        *(unsigned char *)(a1 + 69) = 1;
        *(unsigned char *)(a1 + 136) = 3;
        *(unsigned char *)(a1 + 224) = 0;
        *(unsigned char *)(a1 + 496) = 2;
        break;
      default:
        switch(v16)
        {
          case 0:
            sub_1D0D04C8C(a1);
            return 0;
          case 1:
            *(_DWORD *)(a1 + 96) = 1;
            char v22 = 0;
            sub_1D0C636C0(a1, 0x571BB01944827A3EuLL, "tuh", "0:0", 0xFFFFFFFFLL, (uint64_t)&v22);
            uint64_t result = 0;
            *(unsigned char *)(a1 + 202) = 1;
            *(unsigned char *)(a1 + 192) = 1;
            *(void *)(a1 + 112) = 0x402E000000000000;
            *(_WORD *)(a1 + 87) = 257;
            *(unsigned char *)(a1 + 234) = 0;
            *(unsigned char *)(a1 + 236) = 1;
            *(unsigned char *)(a1 + 232) = 0;
            *(_WORD *)(a1 + 135) = 512;
            *(unsigned char *)(a1 + 148) = 0;
            *(_WORD *)(a1 + 496) = 258;
            *(_DWORD *)(a1 + 504) = 6;
            *(unsigned char *)(a1 + 500) = 1;
            *(unsigned char *)(a1 + 529) = 4;
            *(void *)(a1 + 72) = 0x100000000;
            *(_WORD *)(a1 + 525) = 257;
            *unint64_t v5 = 16843009;
            *(_DWORD *)(a1 + 80) = 2;
            *(unsigned char *)(a1 + 84) = 2;
            *(_DWORD *)((char *)v5 + 5) = 65793;
            *(unsigned char *)(a1 + 213) = 1;
            *(unsigned char *)(a1 + 222) = 1;
            *(_WORD *)(a1 + 548) = 257;
            *(unsigned char *)(a1 + 230) = 1;
            *(_WORD *)(a1 + 237) = 7;
            *(unsigned char *)(a1 + 564) = 1;
            *(unsigned char *)(a1 + 233) = 0;
            goto LABEL_41;
          case 2:
            uint64_t result = 0;
            *(_DWORD *)(a1 + 96) = 2;
            *unint64_t v5 = 16843009;
            *(unsigned char *)(a1 + 496) = 3;
            *(unsigned char *)(a1 + 84) = 2;
            *(unsigned char *)(a1 + 538) = 1;
            *(unsigned char *)(a1 + 204) = 0;
            *(unsigned char *)(a1 + 232) = 0;
            *(unsigned char *)(a1 + 135) = 0;
            *(_DWORD *)(a1 + 504) = 6;
            *(unsigned char *)(a1 + 500) = 1;
            *(unsigned char *)(a1 + 529) = 0;
            *(unsigned char *)(a1 + 541) = 0;
            *(unsigned char *)(a1 + 238) = 0;
            *(void *)(a1 + 72) = 0;
            *(_DWORD *)(a1 + 80) = 3;
LABEL_41:
            *(unsigned char *)(a1 + 220) = 0;
            break;
          case 3:
            goto LABEL_29;
          default:
            goto LABEL_31;
        }
        break;
    }
  }
  else
  {
LABEL_29:
    uint64_t result = 0;
    *(_DWORD *)(a1 + 96) = 3;
    *(unsigned char *)(a1 + 238) = 1;
    *(_WORD *)(a1 + 525) = 256;
    *(_WORD *)(a1 + 539) = 0;
    *(unsigned char *)(a1 + 549) = 0;
    *(_WORD *)(a1 + 564) = 0;
    *unint64_t v5 = 0;
  }
  return result;
}

uint64_t sub_1D0D04C8C(uint64_t a1)
{
  sub_1D0D04D30(a1);
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 192) = *(_DWORD *)(a1 + 188) != 0;
  *(_WORD *)(a1 + 212) = 771;
  *(_WORD *)(a1 + 94) = 0;
  *(_WORD *)(a1 + 223) = 256;
  *(unsigned char *)(a1 + 239) = 0;
  *(unsigned char *)(a1 + 90) = 0;
  *(unsigned char *)(a1 + 136) = 2;
  *(_WORD *)(a1 + 576) = 257;
  *(unsigned char *)(a1 + 176) = 0;
  char v3 = 0;
  return sub_1D0C636C0(a1, 0x571BB01944827A3EuLL, "tuh", "1:1", 0xFFFFFFFFLL, (uint64_t)&v3);
}

double sub_1D0D04D30(uint64_t a1)
{
  char v3 = 0;
  sub_1D0C636C0(a1, 0x89E9C01960F4C582, "ref", "1:0:2:1", 0xFFFFFFFFLL, (uint64_t)&v3);
  char v4 = 0;
  sub_1D0C636C0(a1, 0x571BB01944827A3EuLL, "tuh", "1:1", 0xFFFFFFFFLL, (uint64_t)&v4);
  *(unsigned char *)(a1 + 132) = 5;
  *(unsigned char *)(a1 + 136) = 3;
  *(unsigned char *)(a1 + 212) = 0;
  *(unsigned char *)(a1 + 234) = 1;
  *(unsigned char *)(a1 + 236) = 2;
  *(unsigned char *)(a1 + 89) = 1;
  *(unsigned char *)(a1 + 148) = 0;
  *(_WORD *)(a1 + 94) = 0;
  *(_DWORD *)(a1 + 496) = 33685764;
  *(_DWORD *)(a1 + 504) = 5;
  *(unsigned char *)(a1 + 508) = 5;
  char v5 = 0;
  sub_1D0C636C0(a1, 0x8A24307B54A0265uLL, "cu", "3:6", 0xFFFFFFFFLL, (uint64_t)&v5);
  *(unsigned char *)(a1 + 542) = 1;
  *(unsigned char *)(a1 + 238) = 2;
  *(unsigned char *)(a1 + 205) = 1;
  *(_WORD *)(a1 + 550) = 258;
  *(void *)&double result = 17498368;
  *(_DWORD *)(a1 + 527) = 17498368;
  *(unsigned char *)(a1 + 532) = 1;
  *(unsigned char *)(a1 + 92) = 1;
  *(unsigned char *)(a1 + 136) = 2;
  *(unsigned char *)(a1 + 224) = 1;
  return result;
}

uint64_t sub_1D0D04E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 7776);
  *(void *)(a1 + 7776) = 0;
  if (v6) {
    sub_1D0CE981C(v6);
  }
  if (a4) {
    operator new();
  }
  return 0;
}

void sub_1D0D05228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  a57 = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)&a57 + *(void *)(a57 - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1D25F0010](&a59);
  std::istream::~istream();
  MEMORY[0x1D25F01B0](&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0D0541C(uint64_t a1, int a2, int a3, char *__s1)
{
  uint64_t v6 = *(void *)(a1 + 7776);
  *(void *)(a1 + 7776) = 0;
  if (v6) {
    sub_1D0CE981C(v6);
  }
  if (!__s1) {
    return 0;
  }
  uint64_t result = strcmp(__s1, "flat");
  if (result) {
    operator new();
  }
  return result;
}

uint64_t sub_1D0D05568(uint64_t a1, int a2, int a3, char *a4)
{
  *(unsigned char *)(a1 + 464) = 0;
  if (!a4) {
    return 0;
  }
  if (sscanf(a4, "%u:%hu:%hu", a1 + 472, a1 + 476, a1 + 478) != 3) {
    return 4294954394;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 464) = 1;
  return result;
}

uint64_t sub_1D0D055E4(uint64_t a1, int a2, int a3, char *a4)
{
  *(unsigned char *)(a1 + 420) = 0;
  if (!a4) {
    return 0;
  }
  if (sscanf(a4, "%hu:%hu:%hu:%hu:%hu:%hu:%hu:%hu:%u:%u", a1 + 428, a1 + 434, a1 + 430, a1 + 436, a1 + 432, a1 + 438, a1 + 440, a1 + 442, a1 + 444, a1 + 448) != 10)return 4294954394; {
  uint64_t result = 0;
  }
  *(unsigned char *)(a1 + 420) = 1;
  return result;
}

uint64_t sub_1D0D05688(uint64_t a1, int a2, int a3, char *__s1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 240);
  long long v62 = 0u;
  memset(v63, 0, sizeof(v63));
  *(_OWORD *)__s = 0u;
  long long v61 = 0u;
  if (!__s1) {
    return 0;
  }
  uint64_t v6 = (unsigned __int8 *)(a1 + 108 * v4 + 596);
  *(unsigned char *)(a1 + 592) = 1;
  std::string::size_type v7 = strdup(__s1);
  uint64_t v8 = 0;
  __stringp = v7;
  while (1)
  {
    unint64_t v9 = strsep(&__stringp, ", \t");
    if (!v9) {
      break;
    }
    if (*v9)
    {
      __s[v8++] = v9;
      if (v8 == 57) {
        goto LABEL_8;
      }
    }
  }
  __s[v8] = 0;
LABEL_8:
  unsigned int v58 = 0;
  while (v9)
  {
    if (*v9)
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Too many parameters to ref-struct\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Too many parameters to ref-struct\n");
      }
      goto LABEL_24;
    }
    unint64_t v9 = strsep(&__stringp, ", \t");
  }
  unint64_t v11 = __s[0];
  uint64_t v10 = sub_1D0D06178(__s[0], v6);
  if (v10)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid frame_idx_in_gop '%s'\n", v11);
      syslog(27, "Invalid frame_idx_in_gop '%s'\n", v11);
    }
    goto LABEL_16;
  }
  int v14 = __s[1];
  if (!__s[1] || strlen(__s[1]) >= 2)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid frame_type '%s'\n", __s[1]);
      syslog(27, "Invalid frame_type '%s'\n", v14);
    }
LABEL_24:
    uint64_t v10 = 0;
LABEL_25:
    char v12 = 0;
    goto LABEL_26;
  }
  uint64_t v16 = a1 + 108 * v4;
  *(unsigned char *)(v16 + 597) = *__s[1];
  int v17 = (const char *)v61;
  uint64_t v10 = sub_1D0D06178((const char *)v61, (unsigned char *)(v16 + 599));
  if (v10)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid poc '%s'\n", v17);
      syslog(27, "Invalid poc '%s'\n", v17);
    }
    goto LABEL_16;
  }
  int v18 = (const char *)*((void *)&v61 + 1);
  int v57 = (char *)(a1 + 108 * v4 + 600);
  uint64_t v10 = sub_1D0D061FC(*((const char **)&v61 + 1), v57);
  if (v10)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid qp_offset '%s'\n", v18);
      syslog(27, "Invalid qp_offset '%s'\n", v18);
    }
    goto LABEL_16;
  }
  BOOL v19 = (const char *)v62;
  uint64_t v56 = (char *)(a1 + 108 * v4 + 598);
  uint64_t v10 = sub_1D0D061FC((const char *)v62, v56);
  if (v10)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid hbf_layer_id '%s'\n", v19);
      syslog(27, "Invalid hbf_layer_id '%s'\n", v19);
    }
    goto LABEL_16;
  }
  uint64_t v20 = (const char *)*((void *)&v62 + 1);
  int64x2_t v21 = (unsigned char *)(a1 + 108 * v4 + 601);
  uint64_t v10 = sub_1D0D06178(*((const char **)&v62 + 1), v21);
  if (v10 || *v21 >= 0x11u)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid number_ref_all '%s'\n", v20);
      syslog(27, "Invalid number_ref_all '%s'\n", v20);
    }
    goto LABEL_25;
  }
  char v22 = *(const char **)&v63[0];
  unint64_t v52 = (unsigned __int8 *)(a1 + 108 * v4 + 602);
  uint64_t v10 = sub_1D0D06178(*(const char **)&v63[0], v52);
  if (v10 || *v52 > *v21)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid number_ref_active '%s'\n", v22);
      syslog(27, "Invalid number_ref_active '%s'\n", v22);
    }
    goto LABEL_25;
  }
  uint64_t v53 = (unsigned __int8 *)(a1 + 108 * v4 + 601);
  if (*v21)
  {
    char v23 = (const char **)v63 + 1;
    char v24 = (_DWORD *)(a1 + 108 * v4 + 604);
    uint64_t v54 = 7;
    do
    {
      char v25 = *v23;
      uint64_t v10 = sub_1D0D06284(*v23, v24);
      if (v10)
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid ref.ref_frames[%d] '%s'\n", v54 - 7, v25);
          syslog(27, "Invalid ref.ref_frames[%d] '%s'\n", v54 - 7, v25);
        }
        goto LABEL_16;
      }
      ++v23;
      ++v54;
      ++v24;
    }
    while (v54 - 7 < (unint64_t)*v53);
    if (!*v53) {
      goto LABEL_59;
    }
    unint64_t v26 = 0;
    while (1)
    {
      char v27 = *v23;
      uint64_t v10 = sub_1D0D06178(*v23, (unsigned char *)(a1 + 108 * v4 + 668 + v26));
      if (v10) {
        break;
      }
      ++v26;
      ++v23;
      if (v26 >= *v53)
      {
        int v28 = v54 + v26;
        goto LABEL_58;
      }
    }
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid ref.ref_used[%d] '%s'\n", v26, v27);
      syslog(27, "Invalid ref.ref_used[%d] '%s'\n", v26, v27);
    }
LABEL_16:
    char v12 = 0;
    uint64_t v13 = v10;
    if (!v7) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v28 = 7;
LABEL_58:
  LODWORD(v54) = v28;
LABEL_59:
  uint64_t v29 = __s[v54];
  uint64_t v10 = sub_1D0D06308(v29, &v58);
  unsigned int v30 = v58;
  if (v10) {
    BOOL v31 = 1;
  }
  else {
    BOOL v31 = v58 >= 3;
  }
  if (v31)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid rps scheme '%s'\n", v29);
      syslog(27, "Invalid rps scheme '%s'\n", v29);
    }
    goto LABEL_25;
  }
  int v32 = v54 + 1;
  uint64_t v51 = a1 + 108 * v4;
  *(unsigned char *)(v51 + 684) = v58 != 0;
  if (v30)
  {
    long long v33 = __s[v32];
    uint64_t v10 = sub_1D0D061FC(v33, (unsigned char *)(a1 + 108 * v4 + 685));
    if (v10)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid delta_rps '%s'\n", v33);
        syslog(27, "Invalid delta_rps '%s'\n", v33);
      }
      goto LABEL_16;
    }
    uint64_t v34 = v54;
    int v35 = __s[(v54 + 2)];
    unint64_t v55 = (unsigned char *)(a1 + 108 * v4 + 686);
    uint64_t v10 = sub_1D0D06178(v35, v55);
    if (v10 || *v55 > 0x10u)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid num_ref_predict '%s'\n", v35);
        syslog(27, "Invalid num_ref_predict '%s'\n", v35);
      }
      goto LABEL_25;
    }
    if (*v55)
    {
      uint64_t v36 = 0;
      uint64_t v50 = a1 + 108 * v4 + 687;
      while (1)
      {
        int v37 = (const char *)*((void *)&v61 + v34 + v36 + 1);
        uint64_t v10 = sub_1D0D06178(v37, (unsigned char *)(v50 + v36));
        if (v10) {
          break;
        }
        if (*(unsigned __int8 *)(v50 + v36) >= 3u)
        {
          uint64_t v10 = 0;
          break;
        }
        if (++v36 >= (unint64_t)*v55)
        {
          int v32 = v34 + 3 + v36;
          goto LABEL_85;
        }
      }
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid ref.predict_flag[%d] '%s'\n", v36, v37);
        syslog(27, "Invalid ref.predict_flag[%d] '%s'\n", v36, v37);
      }
      goto LABEL_25;
    }
    int v32 = v34 + 3;
  }
LABEL_85:
  int v38 = __s[v32];
  int v39 = dword_1EB671A40;
  if (v38)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Trailing parameters in reference structure, starting with '%s'\n", v38);
      syslog(27, "Trailing parameters in reference structure, starting with '%s'\n", v38);
    }
    goto LABEL_24;
  }
  int v40 = (FILE **)MEMORY[0x1E4F143D8];
  if (dword_1EB671A40 >= 6)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143D8], "ref-struct: %d %c %d %d %d %d %d ", *v6, *(char *)(v16 + 597), *(unsigned __int8 *)(v16 + 599), *v57, *v56, *v53, *v52);
    int v39 = dword_1EB671A40;
  }
  int v41 = (unsigned __int8 *)(v51 + 684);
  unsigned int v42 = *v53;
  if (*v53)
  {
    unint64_t v43 = 0;
    do
    {
      if (v39 >= 6)
      {
        fprintf(*v40, " %d", *(_DWORD *)(a1 + 108 * v4 + 604 + 4 * v43));
        int v39 = dword_1EB671A40;
        unsigned int v42 = *v53;
      }
      ++v43;
    }
    while (v43 < v42);
    if (v42)
    {
      for (unint64_t i = 0; i < v42; ++i)
      {
        if (v39 >= 6)
        {
          fprintf(*v40, " %d", *(unsigned __int8 *)(a1 + 108 * v4 + 668 + i));
          int v39 = dword_1EB671A40;
          unsigned int v42 = *v53;
        }
      }
    }
  }
  int v45 = *v41;
  if (v39 > 5)
  {
    fprintf(*v40, " %d", *v41);
    int v45 = *v41;
    int v39 = dword_1EB671A40;
  }
  if (v45)
  {
    if (v39 >= 6)
    {
      fprintf(*v40, " %d %d", *(char *)(a1 + 108 * v4 + 685), *(unsigned __int8 *)(a1 + 108 * v4 + 686));
      int v39 = dword_1EB671A40;
    }
    uint64_t v46 = a1 + 108 * v4;
    unsigned int v47 = *(unsigned __int8 *)(v46 + 686);
    if (*(unsigned char *)(v46 + 686))
    {
      unint64_t v48 = 0;
      uint64_t v49 = (unsigned __int8 *)(v46 + 686);
      do
      {
        if (v39 >= 6)
        {
          fprintf(*v40, " %d", *(unsigned __int8 *)(a1 + 108 * v4 + 687 + v48));
          int v39 = dword_1EB671A40;
          unsigned int v47 = *v49;
        }
        ++v48;
      }
      while (v48 < v47);
    }
  }
  if (v39 >= 6) {
    fputc(10, *v40);
  }
  uint64_t v10 = 0;
  ++*(_DWORD *)(a1 + 240);
  char v12 = 1;
LABEL_26:
  uint64_t v13 = 4294954394;
  if (!v7) {
    goto LABEL_28;
  }
LABEL_27:
  free(v7);
LABEL_28:
  if (v12) {
    return v10;
  }
  return v13;
}

void sub_1D0D06110(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0D06178(const char *a1, unsigned char *a2)
{
  __endptr = 0;
  if (!a1 || !*a1) {
    return 4294954394;
  }
  unint64_t v3 = strtoimax(a1, &__endptr, 0);
  unint64_t v4 = v3;
  if (!__endptr)
  {
    if (v3 <= 0xFF)
    {
LABEL_10:
      uint64_t result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  uint64_t result = 4294954394;
  if (!*__endptr && (v4 & 0x8000000000000000) == 0 && v4 <= 0xFF) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1D0D061FC(const char *a1, unsigned char *a2)
{
  __endptr = 0;
  if (!a1 || !*a1) {
    return 4294954394;
  }
  intmax_t v3 = strtoimax(a1, &__endptr, 0);
  uint64_t v4 = v3;
  if (!__endptr)
  {
    if (v3 == (char)v3)
    {
LABEL_10:
      uint64_t result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  uint64_t result = 4294954394;
  if (!*__endptr && v4 >= -128 && v4 <= 127) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1D0D06284(const char *a1, _DWORD *a2)
{
  __endptr = 0;
  if (a1 && *a1)
  {
    intmax_t v3 = strtoimax(a1, &__endptr, 0);
    int v4 = v3;
    if (__endptr)
    {
      if (*__endptr) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = v3 < (uint64_t)0xFFFFFFFF80000000;
      }
      if (v5 || v3 > 0x7FFFFFFF) {
        return 4294954394;
      }
LABEL_14:
      uint64_t result = 0;
      *a2 = v4;
      return result;
    }
    if (v3 == (int)v3) {
      goto LABEL_14;
    }
  }
  return 4294954394;
}

uint64_t sub_1D0D06308(const char *a1, _DWORD *a2)
{
  __endptr = 0;
  if (!a1 || !*a1) {
    return 4294954394;
  }
  unint64_t v3 = strtoimax(a1, &__endptr, 0);
  unint64_t v4 = v3;
  if (!__endptr)
  {
    if (!HIDWORD(v3))
    {
LABEL_10:
      uint64_t result = 0;
      *a2 = v4;
      return result;
    }
    return 4294954394;
  }
  uint64_t result = 4294954394;
  if (!*__endptr && (v4 & 0x8000000000000000) == 0 && !HIDWORD(v4)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1D0D0638C(int *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  a1[1878] = 0;
  a1[70] = 0;
  if (a4)
  {
    uint64_t v10 = 0;
    if (a1[61] >= 1)
    {
      BOOL v5 = a4;
      uint64_t v6 = 0;
      for (unint64_t i = a1 + 62; !sub_1D0D06488(v5, i, &v10, 0) && (*v10 == 58 || v6 >= a1[61] - 1); ++i)
      {
        a1[1878] += *i;
        if (*i > a1[70]) {
          a1[70] = *i;
        }
        ++v6;
        v5 += 2;
        if (v6 >= a1[61]) {
          return 0;
        }
      }
    }
    return 4294954394;
  }
  else
  {
    uint64_t result = 0;
    a1[62] = 1;
    unint64_t v9 = a1 + 62;
    *(void *)(v9 + 1) = 0;
    *(void *)(v9 + 5) = 0;
    *(void *)(v9 + 3) = 0;
    *(void *)(v9 + 7) = 0x100000000;
  }
  return result;
}

uint64_t sub_1D0D06488(const char *a1, _DWORD *a2, char **a3, int a4)
{
  *__error() = 0;
  uint64_t v8 = strtol(a1, a3, 10);
  if (v8)
  {
    uint64_t result = 4294954394;
    if (v8 < a4 || v8 > 0x7FFFFFFF) {
      return result;
    }
LABEL_7:
    uint64_t result = 0;
    *a2 = v8;
    return result;
  }
  uint64_t v10 = __error();
  uint64_t result = 4294954394;
  if (a4 <= 0 && !*v10) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1D0D0651C(unsigned char *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if (a2 != 0x81C3B0CF315BC925)
  {
    if (a2 != 0x8C49EF6ED9F28EA0) {
      return 4294954394;
    }
    std::string::size_type v7 = a1 + 290;
    uint64_t v8 = a1 + 291;
    if (a4) {
      goto LABEL_3;
    }
LABEL_10:
    *std::string::size_type v7 = 0;
    *uint64_t v8 = 0;
    goto LABEL_11;
  }
  std::string::size_type v7 = a1 + 292;
  uint64_t v8 = a1 + 293;
  if (!a4) {
    goto LABEL_10;
  }
LABEL_3:
  char v12 = 0;
  if (sub_1D0D066A8(a4, v7, &v12, 8, 0xEu)) {
    return 4294954394;
  }
  if (!*v12)
  {
    *uint64_t v8 = *v7;
    goto LABEL_11;
  }
  if (*v12 != 58 || sub_1D0D066A8(a4, v8, &v12, 8, 0xEu)) {
    return 4294954394;
  }
LABEL_11:
  if (a2 == 0x81C3B0CF315BC925) {
    return 0;
  }
  int v9 = a1[290];
  int v10 = a1[291];
  if (v9 == v10 && (a1[290] | 2) == 0xA) {
    return 0;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bit depths %d/%d not supported; luma and chroma must match and be 8 or 10\n",
      (char)v9,
      (char)v10);
    syslog(27, "Bit depths %d/%d not supported; luma and chroma must match and be 8 or 10\n",
      (char)a1[290],
      (char)a1[291]);
  }
  return 4294954386;
}

uint64_t sub_1D0D066A8(const char *a1, unsigned char *a2, char **a3, int a4, unsigned __int8 a5)
{
  *__error() = 0;
  uint64_t v10 = strtol(a1, a3, 10);
  if (v10)
  {
    uint64_t result = 4294954394;
    if (v10 < a4) {
      return result;
    }
    goto LABEL_6;
  }
  char v12 = __error();
  uint64_t result = 4294954394;
  if (a4 <= 0 && !*v12)
  {
LABEL_6:
    if (v10 <= a5)
    {
      uint64_t result = 0;
      *a2 = v10;
    }
  }
  return result;
}

uint64_t sub_1D0D06748(unsigned char *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if (a4)
  {
    uint64_t v6 = 0;
    if (sub_1D0D066A8(a4, a1 + 168, &v6, 0, 0x7Fu)
      || *v6 != 58
      || sub_1D0D066A8(v6 + 1, a1 + 169, &v6, 0, 0x7Fu)
      || *v6 != 58
      || sub_1D0D066A8(v6 + 1, a1 + 170, &v6, 0, 0x7Fu)
      || *v6 != 58
      || sub_1D0D066A8(v6 + 1, a1 + 171, &v6, 0, 0x7Fu)
      || *v6)
    {
      return 4294954394;
    }
  }
  else
  {
    *((_DWORD *)a1 + 42) = 16842753;
  }
  return 0;
}

uint64_t sub_1D0D0683C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if (!a4) {
    return 4294954394;
  }
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  if (sub_1D0D06488(a4, (_DWORD *)&v12 + 1, &v11, 0x80000000)) {
    return 4294954394;
  }
  int v7 = *v11;
  if (v7 == 47)
  {
    if (sub_1D0D06488(v11 + 1, &v12, &v11, 0x80000000) || *v11) {
      return 4294954394;
    }
    int v9 = v12;
    int v10 = HIDWORD(v12);
    *(_DWORD *)(a1 + 568) = v12;
    double v8 = (double)v10 / (double)v9;
  }
  else if (v7 == 46)
  {
    *__error() = 0;
    double v8 = strtod(a4, 0);
    if (*__error() || v8 < 2.22507386e-308 || v8 > 1.79769313e308) {
      return 4294954394;
    }
  }
  else
  {
    if (*v11) {
      return 4294954394;
    }
    double v8 = (double)SHIDWORD(v12);
  }
  uint64_t result = 0;
  *(double *)(a1 + 112) = v8;
  return result;
}

uint64_t sub_1D0D06954(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if (a4)
  {
    uint64_t v6 = 0;
    if (sub_1D0D069D8(a4, (_WORD *)(a1 + 106), &v6)
      || *v6 != 120
      || sub_1D0D069D8(v6 + 1, (_WORD *)(a1 + 108), &v6)
      || *v6)
    {
      return 4294954394;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 106) = 0;
  }
  return 0;
}

uint64_t sub_1D0D069D8(const char *a1, _WORD *a2, char **a3)
{
  *__error() = 0;
  uint64_t v6 = strtol(a1, a3, 10);
  if (v6)
  {
    __int16 v7 = v6;
    if ((unint64_t)(v6 - 0x8000) >= 0xFFFFFFFFFFFF8001)
    {
      uint64_t result = 0;
      *a2 = v7;
      return result;
    }
  }
  else
  {
    __error();
  }
  return 4294954394;
}

uint64_t sub_1D0D06A4C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v8 = 0;
  if (a4)
  {
    int v9 = 0;
    if (sub_1D0D06488(a4, (_DWORD *)&v8 + 1, &v9, 0x80000000)
      || *v9 != 58
      || sub_1D0D06488(v9 + 1, &v8, &v9, 0x80000000)
      || *v9)
    {
      return 4294954394;
    }
  }
  uint64_t result = 0;
  if (a2 <= 0x8C84307B56AD1A1)
  {
    if (a2 == 0x3DC4253E192FDEDLL)
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 452) = a4 != 0;
      *(_WORD *)(a1 + 460) = WORD2(v8);
      *(_WORD *)(a1 + 462) = v8;
    }
    else if (a2 == 0x8A24307B54A0265)
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 177) = BYTE4(v8);
      *(unsigned char *)(a1 + 178) = v8;
    }
  }
  else
  {
    switch(a2)
    {
      case 0x8C84307B56AD1A2:
        uint64_t result = 0;
        *(unsigned char *)(a1 + 179) = BYTE4(v8);
        *(unsigned char *)(a1 + 180) = v8;
        break;
      case 0x4179B3C137C3CEB0:
        uint64_t result = 0;
        *(_DWORD *)(a1 + 412) = HIDWORD(v8);
        *(_DWORD *)(a1 + 416) = v8;
        break;
      case 0x571BB01944827A3ELL:
        uint64_t result = 0;
        *(unsigned char *)(a1 + 181) = BYTE4(v8);
        *(unsigned char *)(a1 + 182) = v8;
        break;
    }
  }
  return result;
}

void *sub_1D0D06BF8(void *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < a4)
  {
    int v7 = a3;
    uint64_t v9 = *(void *)(a2 + 416);
    int v10 = (unsigned __int8 *)(a6 + a3 * a5 - 5);
    unint64_t v11 = (uint8x8_t *)(*(void *)(a2 + 400) + ((v9 * (a3 - 3) - 8) << *(unsigned char *)(a2 + 531)));
    uint64_t v12 = -3 - (int)result;
    size_t v13 = (int)result - 2;
    int v14 = result + 7;
    v15.i64[0] = 0xA000A000A000ALL;
    v15.i64[1] = 0xA000A000A000ALL;
    v16.i64[0] = 0xA000A000A000ALL;
    v16.i64[1] = 0xA000A000A000ALL;
    do
    {
      int v17 = (uint8x8_t *)((char *)v11 + v9);
      if (*(int *)(a2 + 520) < -7)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        unint64_t v18 = 0;
        int16x8_t v19 = vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v11 + 7 * v9), *v11)), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v11 + 5 * v9), *(uint8x8_t *)((char *)v11 + 2 * v9)), v15), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v11 + 6 * v9), *v17), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v11 + 4 * v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *(uint8x8_t *)((char *)v11 + 3 * v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL));
        do
        {
          uint64_t v20 = v18;
          v18 += 8;
          int64x2_t v21 = (uint8x8_t *)((char *)&v11[v18 / 8] + v9);
          uint8x8_t v22 = *v21;
          char v23 = (uint8x8_t *)((char *)v21 + v9);
          int8x16_t v24 = (int8x16_t)vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v9 + v9 + v9 + v9 + v9), v11[v18 / 8])), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v9 + v9 + v9), *v23), v15), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v23 + v9 + v9 + v9 + v9), v22), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v23 + v9 + v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *(uint8x8_t *)((char *)v23 + v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL));
          int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 2uLL);
          int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 4uLL);
          int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 6uLL);
          int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 8uLL);
          int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 0xAuLL);
          int16x8_t v30 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 0xCuLL);
          int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v19, v24, 0xEuLL);
          *(int8x8_t *)&v10[v20] = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vaddq_s32(vsubq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v29.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v26.i8, (int16x4_t)0xA000A000A000ALL), vaddl_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v19.i8)), vshlq_n_s32(vaddq_s32(vaddl_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v25.i8), vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v27.i8, (int16x4_t)0xA000A000A000ALL)), 2uLL)), 6uLL), vaddq_s32(
                                         vsubq_s32(vmlal_high_s16(vmull_high_s16(v29, v15), v26, v15), vaddl_high_s16(v31, v19)), vshlq_n_s32(vaddq_s32(vaddl_high_s16(v30, v25), vmlal_high_s16(vmull_high_s16(v28, v16), v27, v16)), 2uLL)), 6uLL), 6uLL);
          int16x8_t v19 = (int16x8_t)v24;
        }
        while (v20 < *(int *)(a2 + 520));
      }
      memset(&v10[v12 + 5], *v10, v13);
      uint64_t result = memset(&v10[v18], v10[(int)v18 - 1], v14 - (int)v18 + *(_DWORD *)(a2 + 520));
      ++v7;
      v10 += a5;
      unint64_t v11 = v17;
      v15.i64[0] = 0xA000A000A000ALL;
      v15.i64[1] = 0xA000A000A000ALL;
      v16.i64[0] = 0xA000A000A000ALL;
      v16.i64[1] = 0xA000A000A000ALL;
    }
    while (v7 != a4);
  }
  return result;
}

void *sub_1D0D06EB8(void *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < a4)
  {
    int v7 = a3;
    uint64_t v9 = *(void *)(a2 + 416);
    int v10 = (unsigned __int8 *)(a6 + a3 * a5);
    uint64_t v11 = *(void *)(a2 + 400) + ((v9 * (a3 - 3)) << *(unsigned char *)(a2 + 531));
    size_t v12 = (int)result + 3;
    int v13 = result + 2;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    do
    {
      if (*(int *)(a2 + 520) < 1)
      {
        LODWORD(v15) = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          int16x8_t v16 = (uint8x8_t *)(v11 + v15 + v9);
          uint8x8_t v17 = *v16;
          unint64_t v18 = (uint8x8_t *)((char *)v16 + v9);
          uint8x8_t v19 = *v18;
          uint64_t v20 = (uint8x8_t *)((char *)v18 + v9);
          *(int8x8_t *)&v10[v15] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v20 + v9 + v9 + v9 + v9), *(uint8x8_t *)(v11 + v15))), (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v20 + v9 + v9), v19), v14), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v20 + v9 + v9 + v9), v17), (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v20 + v9), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), *v20, (uint8x8_t)0xA0A0A0A0A0A0A0ALL)), 2uLL)), 6uLL);
          v15 += 8;
        }
        while (v15 < *(int *)(a2 + 520));
      }
      memset(&v10[-v12], *v10, v12);
      uint64_t result = memset(&v10[v15], v10[(int)v15 - 1], v13 - (int)v15 + *(_DWORD *)(a2 + 520));
      ++v7;
      v11 += v9;
      v10 += a5;
      v14.i64[0] = 0xA000A000A000ALL;
      v14.i64[1] = 0xA000A000A000ALL;
    }
    while (v7 != a4);
  }
  return result;
}

void *sub_1D0D07044(void *result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < a4)
  {
    int v7 = a3;
    uint64_t v9 = *(void *)(a2 + 416);
    int v10 = (unsigned __int8 *)(a6 + a3 * a5 - 5);
    uint64_t v11 = (int8x8_t *)(*(void *)(a2 + 400) + ((v9 * a3 - 8) << *(unsigned char *)(a2 + 531)));
    uint64_t v12 = -3 - (int)result;
    size_t v13 = (int)result - 2;
    int v14 = result + 7;
    v15.i64[0] = 0xA000A000A000ALL;
    v15.i64[1] = 0xA000A000A000ALL;
    do
    {
      if (*(int *)(a2 + 520) < -7)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        unint64_t v16 = 0;
        int8x8_t v17 = *v11;
        do
        {
          uint64_t v18 = v16;
          int8x8_t v19 = v11[v16 / 8 + 1];
          *(int8x8_t *)&v10[v16] = vqrshrun_n_s16(vaddq_s16(vmlaq_s16(vnegq_s16((int16x8_t)vaddl_u8((uint8x8_t)vext_s8(v17, v19, 7uLL), (uint8x8_t)v17)), (int16x8_t)vaddl_u8((uint8x8_t)vext_s8(v17, v19, 5uLL), (uint8x8_t)vext_s8(v17, v19, 2uLL)), v15), vshlq_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)vext_s8(v17, v19, 6uLL), (uint8x8_t)vext_s8(v17, v19, 1uLL)), (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v17, v19, 4uLL), (uint8x8_t)0xA0A0A0A0A0A0A0ALL), (uint8x8_t)vext_s8(v17, v19, 3uLL),
                                                        (uint8x8_t)0xA0A0A0A0A0A0A0ALL)),
                                         2uLL)),
                                     6uLL);
          v16 += 8;
          int8x8_t v17 = v19;
        }
        while (v18 < *(int *)(a2 + 520));
      }
      memset(&v10[v12 + 5], *v10, v13);
      uint64_t result = memset(&v10[v16], v10[(int)v16 - 1], v14 - (int)v16 + *(_DWORD *)(a2 + 520));
      ++v7;
      uint64_t v11 = (int8x8_t *)((char *)v11 + v9);
      v10 += a5;
      v15.i64[0] = 0xA000A000A000ALL;
      v15.i64[1] = 0xA000A000A000ALL;
    }
    while (v7 != a4);
  }
  return result;
}

uint64_t sub_1D0D071CC(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < a4)
  {
    uint64_t v6 = *(void *)(a2 + 416);
    uint64_t v7 = *(int *)(a2 + 520);
    uint64_t v8 = a3 * a5;
    uint64_t v9 = (__int16 *)(a6 + 2 * v8 - 10);
    uint64_t v10 = 2 * v6;
    uint64_t v11 = (int)result - 2;
    int v12 = result + v7 + 7;
    uint64_t v13 = 2 * a5;
    uint64_t v14 = *(void *)(a2 + 400) + ((v6 * a3 - 8) << *(unsigned char *)(a2 + 531)) - 6 * v6;
    uint64_t v15 = a6 - 2 * (int)result + 2 * v8 - 6;
    v16.i64[0] = 0xA000A000A000ALL;
    v16.i64[1] = 0xA000A000A000ALL;
    v17.i64[0] = 0x28002800280028;
    v17.i64[1] = 0x28002800280028;
    v18.i64[0] = 0xFC00FC00FC00FC00;
    v18.i64[1] = 0xFC00FC00FC00FC00;
    while ((int)v7 < -7)
    {
      unsigned int v83 = 0;
      if (v11) {
        goto LABEL_9;
      }
LABEL_11:
      LODWORD(v86) = v12 - v83;
      if (v12 != v83)
      {
        uint64_t v86 = (int)v86;
        uint64_t result = (unsigned __int16)v9[v83 - 1];
        uint64_t v87 = v83;
        do
        {
          v9[v87++] = result;
          --v86;
        }
        while (v86);
      }
      ++a3;
      uint64_t v9 = (__int16 *)((char *)v9 + v13);
      v14 += v10;
      v15 += v13;
      if (a3 == a4) {
        return result;
      }
    }
    unint64_t v19 = 0;
    uint64_t result = -8;
    do
    {
      int16x8_t v20 = *(int16x8_t *)(v14 + v19);
      int8x16_t v21 = *(int8x16_t *)(v14 + v19 + 16);
      int16x8_t v22 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 2uLL);
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 4uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 6uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 8uLL);
      uint64_t v26 = result;
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xCuLL);
      int16x8_t v29 = vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xEuLL), v20);
      int16x8_t v30 = vaddq_s16(v28, v22);
      int16x8_t v31 = vaddq_s16(v27, v23);
      int16x8_t v32 = vaddq_s16(v25, v24);
      int16x8_t v33 = vmlaq_s16(vshlq_n_s16(v30, 2uLL), v31, v16);
      int32x4_t v34 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v32.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v29.i8), *(int16x4_t *)v33.i8);
      int32x4_t v35 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v32, v17), v29), v33);
      *(int16x4_t *)v33.i8 = vqshrn_n_s32(v34, 2uLL);
      uint64_t v36 = (int8x16_t *)(v14 + v19 + v10);
      int8x16_t v37 = v36[1];
      int16x8_t v38 = vaddq_s16((int16x8_t)vextq_s8(*v36, v37, 0xEuLL), *(int16x8_t *)v36);
      int16x8_t v39 = vaddq_s16((int16x8_t)vextq_s8(*v36, v37, 8uLL), (int16x8_t)vextq_s8(*v36, v37, 6uLL));
      int16x8_t v40 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v36, v37, 0xCuLL), (int16x8_t)vextq_s8(*v36, v37, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v36, v37, 0xAuLL), (int16x8_t)vextq_s8(*v36, v37, 4uLL)), v16);
      int32x4_t v41 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v39.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v38.i8), *(int16x4_t *)v40.i8);
      int32x4_t v42 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v39, v17), v38), v40);
      *(int16x4_t *)v38.i8 = vqshrn_n_s32(v41, 2uLL);
      unint64_t v43 = (int8x16_t *)((char *)v36 + v10);
      int8x16_t v44 = v43[1];
      int16x8_t v45 = vaddq_s16((int16x8_t)vextq_s8(*v43, v44, 0xEuLL), *(int16x8_t *)v43);
      int16x8_t v46 = vaddq_s16((int16x8_t)vextq_s8(*v43, v44, 8uLL), (int16x8_t)vextq_s8(*v43, v44, 6uLL));
      int16x8_t v47 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v43, v44, 0xCuLL), (int16x8_t)vextq_s8(*v43, v44, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v43, v44, 0xAuLL), (int16x8_t)vextq_s8(*v43, v44, 4uLL)), v16);
      int32x4_t v48 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v46.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v45.i8), *(int16x4_t *)v47.i8);
      int32x4_t v49 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v46, v17), v45), v47);
      *(int16x4_t *)v47.i8 = vqshrn_n_s32(v48, 2uLL);
      uint64_t v50 = (int8x16_t *)((char *)v43 + v10);
      int8x16_t v51 = v50[1];
      int16x8_t v52 = vaddq_s16((int16x8_t)vextq_s8(*v50, v51, 0xEuLL), *(int16x8_t *)v50);
      int16x8_t v53 = vaddq_s16((int16x8_t)vextq_s8(*v50, v51, 8uLL), (int16x8_t)vextq_s8(*v50, v51, 6uLL));
      int16x8_t v54 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v50, v51, 0xCuLL), (int16x8_t)vextq_s8(*v50, v51, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v50, v51, 0xAuLL), (int16x8_t)vextq_s8(*v50, v51, 4uLL)), v16);
      int32x4_t v55 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v53.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v52.i8), *(int16x4_t *)v54.i8);
      int32x4_t v56 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v53, v17), v52), v54);
      *(int16x4_t *)v54.i8 = vqshrn_n_s32(v55, 2uLL);
      int v57 = (int8x16_t *)((char *)v50 + v10);
      int8x16_t v58 = v57[1];
      int16x8_t v59 = vaddq_s16((int16x8_t)vextq_s8(*v57, v58, 0xEuLL), *(int16x8_t *)v57);
      int16x8_t v60 = vaddq_s16((int16x8_t)vextq_s8(*v57, v58, 8uLL), (int16x8_t)vextq_s8(*v57, v58, 6uLL));
      int16x8_t v61 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v57, v58, 0xCuLL), (int16x8_t)vextq_s8(*v57, v58, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v57, v58, 0xAuLL), (int16x8_t)vextq_s8(*v57, v58, 4uLL)), v16);
      int32x4_t v62 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v60.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v59.i8), *(int16x4_t *)v61.i8);
      int32x4_t v63 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v60, v17), v59), v61);
      *(int16x4_t *)v61.i8 = vqshrn_n_s32(v62, 2uLL);
      uint64_t v64 = (int8x16_t *)((char *)v57 + v10);
      int8x16_t v65 = v64[1];
      int16x8_t v66 = vaddq_s16((int16x8_t)vextq_s8(*v64, v65, 0xEuLL), *(int16x8_t *)v64);
      int16x8_t v67 = vaddq_s16((int16x8_t)vextq_s8(*v64, v65, 8uLL), (int16x8_t)vextq_s8(*v64, v65, 6uLL));
      int16x8_t v68 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v64, v65, 0xCuLL), (int16x8_t)vextq_s8(*v64, v65, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v64, v65, 0xAuLL), (int16x8_t)vextq_s8(*v64, v65, 4uLL)), v16);
      int32x4_t v69 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v67.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v66.i8), *(int16x4_t *)v68.i8);
      int32x4_t v70 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v67, v17), v66), v68);
      *(int16x4_t *)v68.i8 = vqshrn_n_s32(v69, 2uLL);
      double v71 = (int8x16_t *)((char *)v64 + v10);
      int8x16_t v72 = v71[1];
      int16x8_t v73 = vaddq_s16((int16x8_t)vextq_s8(*v71, v72, 0xEuLL), *(int16x8_t *)v71);
      int16x8_t v74 = vaddq_s16((int16x8_t)vextq_s8(*v71, v72, 8uLL), (int16x8_t)vextq_s8(*v71, v72, 6uLL));
      int16x8_t v75 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v71, v72, 0xCuLL), (int16x8_t)vextq_s8(*v71, v72, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v71, v72, 0xAuLL), (int16x8_t)vextq_s8(*v71, v72, 4uLL)), v16);
      int32x4_t v76 = vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v74.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v73.i8), *(int16x4_t *)v75.i8);
      int32x4_t v77 = vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v74, v17), v73), v75);
      *(int16x4_t *)v75.i8 = vqshrn_n_s32(v76, 2uLL);
      int v78 = (int8x16_t *)((char *)v71 + v10);
      int8x16_t v79 = v78[1];
      int16x8_t v80 = vaddq_s16((int16x8_t)vextq_s8(*v78, v79, 0xEuLL), *(int16x8_t *)v78);
      int16x8_t v81 = vaddq_s16((int16x8_t)vextq_s8(*v78, v79, 8uLL), (int16x8_t)vextq_s8(*v78, v79, 6uLL));
      int16x8_t v82 = vmlaq_s16(vshlq_n_s16(vaddq_s16((int16x8_t)vextq_s8(*v78, v79, 0xCuLL), (int16x8_t)vextq_s8(*v78, v79, 2uLL)), 2uLL), vaddq_s16((int16x8_t)vextq_s8(*v78, v79, 0xAuLL), (int16x8_t)vextq_s8(*v78, v79, 4uLL)), v16);
      *(uint16x8_t *)&v9[v19 / 2] = vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vsubw_s16(vaddq_s32(vsubw_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v54.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v33.i8), vaddq_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, (int16x4_t)0xA000A000A000ALL), *(int16x4_t *)v47.i8, (int16x4_t)0xA000A000A000ALL),
                                                            vshlq_n_s32(vaddl_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v38.i8), 2uLL))), vqshrn_n_s32(vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v81.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v80.i8), *(int16x4_t *)v82.i8), 2uLL)), 0xAuLL), vsubw_s16(vaddq_s32(vsubw_s16(vmlal_s16(vmull_s16(vqshrn_n_s32(v63, 2uLL), (int16x4_t)0x28002800280028),
                                                            vqshrn_n_s32(v56, 2uLL),
                                                            (int16x4_t)0x28002800280028),
                                                          vqshrn_n_s32(v35, 2uLL)),
                                                        vaddq_s32(vmlal_s16(vmull_s16(vqshrn_n_s32(v70, 2uLL), (int16x4_t)0xA000A000A000ALL), vqshrn_n_s32(v49, 2uLL), (int16x4_t)0xA000A000A000ALL), vshlq_n_s32(vaddl_s16(vqshrn_n_s32(v77, 2uLL), vqshrn_n_s32(v42, 2uLL)), 2uLL))), vqshrn_n_s32(vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v81, v17), v80), v82), 2uLL)), 0xAuLL), v18);
      uint64_t result = v26 + 8;
      v19 += 16;
    }
    while (v26 + 8 < v7);
    unsigned int v83 = v26 + 16;
    if (!v11) {
      goto LABEL_11;
    }
LABEL_9:
    __int16 v84 = *v9;
    uint64_t result = v15;
    uint64_t v85 = v11;
    do
    {
      *(_WORD *)uint64_t result = v84;
      result += 2;
      --v85;
    }
    while (v85);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1D0D0762C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < a4)
  {
    uint64_t v6 = *(void *)(a2 + 416);
    uint64_t v7 = *(int *)(a2 + 520);
    uint64_t v8 = (unsigned __int16 *)(a6 + 2 * a3 * a5);
    uint64_t v9 = *(void *)(a2 + 400) + ((v6 * (a3 - 3)) << *(unsigned char *)(a2 + 531));
    uint64_t v10 = 2 * v6;
    int v11 = result + 3;
    uint64_t v12 = (int)result + 2;
    uint64_t v13 = 2 * a5;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0x28002800280028;
    v15.i64[1] = 0x28002800280028;
    v16.i64[0] = 0xFC00FC00FC00FC00;
    v16.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      if ((int)v7 >= 1)
      {
        uint64_t v17 = 0;
        for (uint64_t i = 0; i < v7; i += 8)
        {
          unint64_t v19 = (int16x8_t *)(v9 + v17 * 2 + v10);
          int16x8_t v20 = *v19;
          int8x16_t v21 = (int16x8_t *)((char *)v19 + v10);
          int16x8_t v22 = *v21;
          int16x8_t v23 = (int16x8_t *)((char *)v21 + v10);
          int16x8_t v24 = *v23;
          int16x8_t v25 = (int16x8_t *)((char *)v23 + v10);
          int16x8_t v26 = *v25;
          int16x8_t v27 = (int16x8_t *)((char *)v25 + v10);
          int16x8_t v28 = *v27;
          int16x8_t v29 = (int16x8_t *)((char *)v27 + v10);
          int16x8_t v30 = vaddq_s16(*(int16x8_t *)((char *)v29 + v10), *(int16x8_t *)(v9 + v17 * 2));
          int16x8_t v31 = vaddq_s16(v26, v24);
          int16x8_t v32 = vmlaq_s16(vshlq_n_s16(vaddq_s16(*v29, v20), 2uLL), vaddq_s16(v28, v22), v14);
          *(uint16x8_t *)&v8[v17] = vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v31.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v30.i8), *(int16x4_t *)v32.i8), 6uLL), vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v31, v15), v30), v32), 6uLL), v16);
          v17 += 8;
        }
      }
      if (!v11) {
        goto LABEL_11;
      }
      uint64_t result = *v8;
      uint64_t v33 = -(uint64_t)v11;
      do
        v8[v33] = result;
      while (!__CFADD__(v33++, 1));
      if (v12)
      {
LABEL_11:
        uint64_t result = v8[v7 - 1];
        uint64_t v35 = v7;
        uint64_t v36 = v12;
        do
        {
          v8[v35++] = result;
          --v36;
        }
        while (v36);
      }
      ++a3;
      uint64_t v8 = (unsigned __int16 *)((char *)v8 + v13);
      v9 += v10;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t sub_1D0D07784(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < a4)
  {
    uint64_t v6 = *(void *)(a2 + 416);
    uint64_t v7 = *(int *)(a2 + 520);
    uint64_t v8 = a3 * a5;
    uint64_t v9 = (__int16 *)(a6 + 2 * v8 - 10);
    uint64_t v10 = (int16x8_t *)(*(void *)(a2 + 400) + ((v6 * a3 - 8) << *(unsigned char *)(a2 + 531)));
    uint64_t v11 = (int)result - 2;
    int v12 = result + v7 + 7;
    uint64_t v13 = 2 * a5;
    uint64_t v14 = 2 * v6;
    uint64_t v15 = a6 - 2 * (int)result + 2 * v8 - 6;
    v16.i64[0] = 0xA000A000A000ALL;
    v16.i64[1] = 0xA000A000A000ALL;
    v17.i64[0] = 0x28002800280028;
    v17.i64[1] = 0x28002800280028;
    v18.i64[0] = 0xFC00FC00FC00FC00;
    v18.i64[1] = 0xFC00FC00FC00FC00;
    while ((int)v7 < -7)
    {
      unsigned int v32 = 0;
      if (v11) {
        goto LABEL_9;
      }
LABEL_11:
      LODWORD(v35) = v12 - v32;
      if (v12 != v32)
      {
        uint64_t v35 = (int)v35;
        uint64_t result = (unsigned __int16)v9[v32 - 1];
        uint64_t v36 = v32;
        do
        {
          v9[v36++] = result;
          --v35;
        }
        while (v35);
      }
      ++a3;
      uint64_t v10 = (int16x8_t *)((char *)v10 + v14);
      uint64_t v9 = (__int16 *)((char *)v9 + v13);
      v15 += v13;
      if (a3 == a4) {
        return result;
      }
    }
    unint64_t v19 = 0;
    int16x8_t v20 = *v10;
    for (uint64_t result = -8; result < v7; result += 8)
    {
      int v21 = result;
      int8x16_t v22 = (int8x16_t)v10[v19 / 8 + 1];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 2uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 6uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 8uLL);
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v20, v22, 0xCuLL);
      int16x8_t v29 = vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v20, v22, 0xEuLL), v20);
      int16x8_t v30 = vaddq_s16(v26, v25);
      int16x8_t v31 = vmlaq_s16(vshlq_n_s16(vaddq_s16(v28, v23), 2uLL), vaddq_s16(v27, v24), v16);
      *(uint16x8_t *)&v9[v19] = vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vaddw_s16(vsubw_s16(vmull_s16(*(int16x4_t *)v30.i8, (int16x4_t)0x28002800280028), *(int16x4_t *)v29.i8), *(int16x4_t *)v31.i8), 6uLL), vaddw_high_s16(vsubw_high_s16(vmull_high_s16(v30, v17), v29), v31), 6uLL), v18);
      v19 += 8;
      int16x8_t v20 = (int16x8_t)v22;
    }
    unsigned int v32 = v21 + 16;
    if (!v11) {
      goto LABEL_11;
    }
LABEL_9:
    __int16 v33 = *v9;
    uint64_t result = v15;
    uint64_t v34 = v11;
    do
    {
      *(_WORD *)uint64_t result = v33;
      result += 2;
      --v34;
    }
    while (v34);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1D0D078F4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 40) = *(void *)(v2 + 400);
  *(void *)(a1 + 72) = *(void *)(v2 + 416);
  *(_DWORD *)(a1 + 104) = a2;
  int v3 = *(unsigned __int8 *)(v2 + 528);
  if (v3 != *(unsigned __int8 *)(v2 + 529))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Bitdepth mismatch not supported\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Bitdepth mismatch not supported\n");
    }
    return 4294954386;
  }
  if (v3 == 10)
  {
    uint64_t v15 = (uint64_t *)(a1 + 16);
    uint64_t v14 = *(void *)(a1 + 16);
    *(unsigned char *)(a1 + 108) = 1;
    int v16 = a2 + 3;
    int v17 = a2 + a2 + 3 + 2;
    uint64_t v18 = (int)((v17 + *(_DWORD *)(v2 + 520) + 7) & 0xFFFFFFF8);
    signed int v19 = (a2 + 10) & 0xFFFFFFF8;
    uint64_t v20 = v18 * (*(int *)(v2 + 524) + (uint64_t)v17);
    unint64_t v21 = 2 * (3 * v20 + (v19 | 5));
    unint64_t v22 = *(void *)(a1 + 24) - v14;
    if (v21 <= v22)
    {
      if (v21 < v22) {
        *(void *)(a1 + 24) = v14 + v21;
      }
    }
    else
    {
      sub_1D0C4CCE0((unint64_t *)(a1 + 16), v21 - v22);
      uint64_t v14 = *v15;
    }
    uint64_t result = 0;
    uint64_t v27 = v14 + 2 * v19 + 2 * (int)v18 * (uint64_t)v16;
    uint64_t v28 = v27 + 2 * v20 + 10;
    *(void *)(a1 + 48) = v28;
    *(void *)(a1 + 56) = v27;
    *(void *)(a1 + 64) = v28 + 2 * v20;
    *(void *)(a1 + 88) = v18;
    *(void *)(a1 + 96) = v18;
    *(void *)(a1 + 80) = v18;
    *(void *)(a1 + 136) = sub_1D0D07BE0;
    *(void *)(a1 + 112) = sub_1D0D07784;
    *(void *)(a1 + 120) = sub_1D0D0762C;
    int16x8_t v26 = sub_1D0D071CC;
    goto LABEL_19;
  }
  if (v3 != 8)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bit depth %d not supported\n", v3);
      syslog(27, "Bit depth %d not supported\n");
    }
    return 4294954386;
  }
  uint64_t v6 = (uint64_t *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(unsigned char *)(a1 + 108) = 0;
  int v7 = a2 + 3;
  int v8 = a2 + a2 + 3 + 2;
  uint64_t v9 = (int)((v8 + *(_DWORD *)(v2 + 520) + 15) & 0xFFFFFFF0);
  signed int v10 = (a2 + 18) & 0xFFFFFFF0;
  uint64_t v11 = v9 * (*(int *)(v2 + 524) + (uint64_t)v8);
  unint64_t v12 = 3 * v11 + (v10 | 0xD);
  unint64_t v13 = *(void *)(a1 + 24) - v5;
  if (v12 <= v13)
  {
    if (v12 < v13) {
      *(void *)(a1 + 24) = v5 + v12;
    }
  }
  else
  {
    sub_1D0C4CCE0((unint64_t *)(a1 + 16), v12 - v13);
    uint64_t v5 = *v6;
  }
  uint64_t result = 0;
  uint64_t v24 = v5 + v10 + (int)v9 * (uint64_t)v7;
  uint64_t v25 = v24 + v11 + 13;
  *(void *)(a1 + 48) = v25;
  *(void *)(a1 + 56) = v24;
  *(void *)(a1 + 64) = v25 + v11;
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 136) = sub_1D0D07C7C;
  *(void *)(a1 + 112) = sub_1D0D07044;
  *(void *)(a1 + 120) = sub_1D0D06EB8;
  int16x8_t v26 = sub_1D0D06BF8;
LABEL_19:
  *(void *)(a1 + 128) = v26;
  return result;
}

void *sub_1D0D07BE0(void *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    uint64_t v6 = (const void *)(a6 + 2 * (-3 - (int)result) + 2 * a3 * a5);
    size_t v7 = 2 * (a2 + 2 * (int)result + 5);
    uint64_t v8 = (a4 + 1) - 1;
    uint64_t v9 = (char *)(a5 * (2 * a3 + 2) - 2 * (int)result + a6 - 6);
    uint64_t v10 = 2 * a5;
    do
    {
      uint64_t result = memcpy(v9, v6, v7);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void *sub_1D0D07C7C(void *result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    size_t v7 = (const void *)(a6 + -3 - (int)result + a3 * a5);
    size_t v8 = a2 + 2 * (int)result + 5;
    uint64_t v9 = (a4 + 1) - 1;
    uint64_t v10 = (char *)(a5 + a5 * a3 - (int)result + a6 - 3);
    do
    {
      uint64_t result = memcpy(v10, v7, v8);
      v10 += a5;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1D0D07D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  int v4 = a2;
  (*(void (**)(void, void, uint64_t, uint64_t, void, void))(a1 + 112))(*(unsigned int *)(a1 + 104), *(void *)(a1 + 8), a2, a3, *(void *)(a1 + 80), *(void *)(a1 + 48));
  int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 524);
  if (v6 <= v3) {
    uint64_t v7 = (v6 + 3);
  }
  else {
    uint64_t v7 = (v3 - 4);
  }
  (*(void (**)(void))(a1 + 120))(*(unsigned int *)(a1 + 104));
  uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, void, void))(a1 + 128))(*(unsigned int *)(a1 + 104), *(void *)(a1 + 8), (v4 - 4), v7, *(void *)(a1 + 96), *(void *)(a1 + 64));
  if (!v4)
  {
    (*(void (**)(void, void, void, void, void, void))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(*(void *)(a1 + 8) + 520), 0, (*(_DWORD *)(a1 + 104) + 3), -*(void *)(a1 + 80), *(void *)(a1 + 48));
    (*(void (**)(void, void, uint64_t, void, void, void))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(*(void *)(a1 + 8) + 520), 4, (*(_DWORD *)(a1 + 104) - 1), -*(void *)(a1 + 88), *(void *)(a1 + 56));
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void, void, void))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(*(void *)(a1 + 8) + 520), 4, (*(_DWORD *)(a1 + 104) - 1), -*(void *)(a1 + 96), *(void *)(a1 + 64));
  }
  uint64_t v9 = *(void *)(a1 + 8);
  int v10 = *(_DWORD *)(v9 + 524);
  if (v7 == v10 + 3)
  {
    (*(void (**)(void, void, void, void, void, void))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(v9 + 520), (v10 - 1), (*(_DWORD *)(a1 + 104) + 2), *(void *)(a1 + 80), *(void *)(a1 + 48));
    (*(void (**)(void, void, void, void, void, void))(a1 + 136))(*(unsigned int *)(a1 + 104), *(unsigned int *)(*(void *)(a1 + 8) + 520), (*(_DWORD *)(*(void *)(a1 + 8) + 524) + 2), (*(_DWORD *)(a1 + 104) - 1), *(void *)(a1 + 88), *(void *)(a1 + 56));
    uint64_t v11 = *(uint64_t (**)(void))(a1 + 136);
    return v11();
  }
  return result;
}

uint64_t sub_1D0D07ED0(_DWORD *a1, int a2, int a3, int a4, int a5, __CVBuffer *a6, __CVBuffer *a7)
{
  uint64_t result = sub_1D0D07F2C(a1, a2, a3, a4, a5, a6, a7);
  if (!result)
  {
    uint64_t v11 = sub_1D0D080E0((uint64_t)a1, a6, a7);
    CVBufferPropagateAttachments(a6, a7);
    return v11;
  }
  return result;
}

uint64_t sub_1D0D07F2C(_DWORD *a1, int a2, int a3, int a4, int a5, CVPixelBufferRef pixelBuffer, __CVBuffer *a7)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if ((PixelFormatType & 0xFFFFFFEF) != 0x34323066)
  {
    if (dword_1EB671A40 >= 3)
    {
      uint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
      int v16 = "LanczosScaling only supports 4:2:0 biplanar\n";
      int v17 = "LanczosScaling only supports 4:2:0 biplanar\n";
      size_t v18 = 44;
LABEL_17:
      fwrite(v17, v18, 1uLL, v15);
      syslog(27, v16);
    }
    return 4294954394;
  }
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a7))
  {
    if (dword_1EB671A40 >= 3)
    {
      uint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
      int v16 = "Pixel format mismatch between src and dst!\n";
      int v17 = "Pixel format mismatch between src and dst!\n";
      size_t v18 = 43;
      goto LABEL_17;
    }
    return 4294954394;
  }
  if (a2 < 16
    || a3 < 16
    || a4 < 16
    || a5 < 16
    || CVPixelBufferGetWidth(pixelBuffer) < a2
    || CVPixelBufferGetHeight(pixelBuffer) < a3
    || CVPixelBufferGetWidth(a7) < a4
    || CVPixelBufferGetHeight(a7) < a5)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Invalid scaling dimensions %dx%d -> %dx%d\n", a2, a3, a4, a5);
      syslog(27, "Invalid scaling dimensions %dx%d -> %dx%d\n");
    }
    return 4294954394;
  }
  uint64_t result = 0;
  a1[18] = a2;
  a1[19] = a3;
  a1[20] = a4;
  a1[21] = a5;
  return result;
}

uint64_t sub_1D0D080E0(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  uint64_t v6 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  if (!v6)
  {
    uint64_t v7 = CVPixelBufferLockBaseAddress(a3, 0);
    if (v7)
    {
      uint64_t v6 = v7;
      size_t v8 = pixelBuffer;
      CVPixelBufferLockFlags v9 = 1;
    }
    else
    {
      *(void *)(a1 + 8) = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      *(void *)(a1 + 16) = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      *(void *)(a1 + 24) = CVPixelBufferGetBaseAddressOfPlane(a3, 0);
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a3, 1uLL);
      *(void *)(a1 + 32) = BaseAddressOfPlane;
      if (*(void *)(a1 + 8) && *(void *)(a1 + 16) && *(void *)(a1 + 24) && BaseAddressOfPlane)
      {
        *(void *)(a1 + 40) = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
        *(void *)(a1 + 48) = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
        *(void *)(a1 + 56) = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
        *(void *)(a1 + 64) = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL);
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = *(void *)(a1 + 24);
        if (v11 == v12 || *(void *)(a1 + 16) == *(void *)(a1 + 32))
        {
          if (dword_1EB671A40 >= 3)
          {
            fwrite("source and dst buffer cannot be the same so far!", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(27, "source and dst buffer cannot be the same so far!");
          }
          uint64_t v6 = 0xFFFFFFFFLL;
        }
        else
        {
          uint64_t v13 = *(unsigned int *)(a1 + 80);
          uint64_t v14 = *(unsigned int *)(a1 + 72);
          int v15 = 8 * (int)v13 / (int)v14;
          if (v15 >= 8) {
            int v15 = 8;
          }
          if (v15 <= 1) {
            int v15 = 1;
          }
          uint64_t v16 = a1 + ((unint64_t)(v15 - 1) << 8);
          uint64_t v17 = v16 + 144;
          uint64_t v18 = v16 + 2192;
          sub_1D0D4B20C(0, v11, *(void *)(a1 + 40), v14, *(_DWORD *)(a1 + 76), v12, *(void *)(a1 + 56), v13, *(_DWORD *)(a1 + 84), v16 + 144, v16 + 2192, *(_DWORD *)(a1 + 4240), *(void (**)(char *, long long *, uint64_t, uint64_t, void))(a1 + 112), *(void (**)(uint64_t, char *, void, uint64_t, char *, void *, void))(a1 + 128));
          sub_1D0D4B20C(1, *(void *)(a1 + 16), *(void *)(a1 + 48), *(unsigned int *)(a1 + 72), *(int *)(a1 + 76) >> 1, *(void *)(a1 + 32), *(void *)(a1 + 64), *(unsigned int *)(a1 + 80), *(int *)(a1 + 84) >> 1, v17, v18, *(_DWORD *)(a1 + 4240), *(void (**)(char *, long long *, uint64_t, uint64_t, void))(a1 + 112), *(void (**)(uint64_t, char *, void, uint64_t, char *, void *, void))(a1 + 136));
          uint64_t v6 = 0;
        }
      }
      else
      {
        if (dword_1EB671A40 >= 3)
        {
          fwrite("NULL plane!\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "NULL plane!\n");
        }
        uint64_t v6 = 4294954394;
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      size_t v8 = a3;
      CVPixelBufferLockFlags v9 = 0;
    }
    CVPixelBufferUnlockBaseAddress(v8, v9);
  }
  return v6;
}

uint64_t sub_1D0D08364(uint64_t a1, int a2, int a3, int a4, int a5, __CVBuffer *a6, __CVBuffer *a7)
{
  uint64_t v10 = sub_1D0D07F2C((_DWORD *)a1, a2, a3, a4, a5, a6, a7);
  if (!v10)
  {
    if (*(unsigned char *)(a1 + 4244)
      && (*(void *)(a1 + 4248) || !IOSurfaceAcceleratorCreate())
      && (IOSurface = CVPixelBufferGetIOSurface(a6), IOSurfaceRef v12 = CVPixelBufferGetIOSurface(a7), IOSurface)
      && v12
      && !IOSurfaceAcceleratorTransformSurface())
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = sub_1D0D080E0(a1, a6, a7);
    }
    CVBufferPropagateAttachments(a6, a7);
  }
  return v10;
}

void sub_1D0D0845C(void *a1)
{
  sub_1D0D08494(a1);
  JUMPOUT(0x1D25F0230);
}

void *sub_1D0D08494(void *a1)
{
  *a1 = &unk_1F26F1350;
  uint64_t v2 = (const void *)a1[531];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1D0D084E8(int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 14840);
  int v5 = *(unsigned __int8 *)(*(void *)(v4 + 16) + 2113) - a3;
  uint64_t v6 = *(void *)(v4 + 5320);
  int v11 = a1;
  int v9 = v5;
  int v10 = a2;
  uint64_t v7 = *(void *)(v6 + 536);
  if (!v7) {
    sub_1D0C9987C();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, int *))(*(void *)v7 + 48))(v7, &v11, &v10, &v9);
}

uint64_t sub_1D0D0855C(int a1, int a2, char a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 976);
  int v5 = *(_DWORD *)(v4 + 4);
  int v6 = 1 << (*(unsigned char *)(*(void *)(*(void *)(a4 + 14840) + 16) + 2113) - a3);
  int v7 = *(_DWORD *)(a4 + 20) - a2;
  if (v6 < v7) {
    int v7 = 1 << (*(unsigned char *)(*(void *)(*(void *)(a4 + 14840) + 16) + 2113) - a3);
  }
  uint64_t v8 = (v7 >> v5);
  if ((int)v8 < 1) {
    return 51;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)(v4 + 5096);
  uint64_t v11 = *(void *)(v4 + 8);
  IOSurfaceRef v12 = (unsigned __int8 *)(v10 + v11 * (a2 >> v5) + (a1 >> v5));
  if (v6 >= *(_DWORD *)(a4 + 16) - a1) {
    int v6 = *(_DWORD *)(a4 + 16) - a1;
  }
  uint64_t v13 = (v6 >> v5);
  uint64_t result = 51;
  do
  {
    int v15 = v12;
    uint64_t v16 = v13;
    if ((int)v13 >= 1)
    {
      do
      {
        int v18 = *v15++;
        unsigned int v17 = v18;
        if ((int)result >= v18) {
          uint64_t result = v17;
        }
        else {
          uint64_t result = result;
        }
        --v16;
      }
      while (v16);
    }
    ++v9;
    v12 += v11;
  }
  while (v9 != v8);
  return result;
}

uint64_t sub_1D0D08610(int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 14840);
  int v6 = *(int **)(a4 + 976);
  int v7 = v6[1210];
  uint64_t v8 = *(char *)(v5 + 653);
  if (!v7) {
    return *(char *)(v5 + 653);
  }
  uint64_t v12 = *(void *)(v5 + 4760);
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(v5 + 16) + 2113) - (uint64_t)a3;
  int v47 = *(unsigned __int8 *)(v12 + 124);
  uint64_t v46 = *(void *)(v5 + 5320);
  char v45 = *(unsigned char *)(*(void *)(v46 + 40) + 2096);
  int v14 = sub_1D0D252CC(v6, a1, a2, v13, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(char *)(v12 + 133));
  uint64_t v15 = *(void *)(a4 + 976);
  if (*(unsigned char *)(v15 + 17)) {
    uint64_t v8 = sub_1D0D2597C(*(void *)(a4 + 976), a1, a2, v13) + v8;
  }
  int v16 = sub_1D0D25A48(a1, a2, a3, v8, v14, v7, *(void *)(v5 + 4760), v15);
  uint64_t v17 = *(void *)(a4 + 14840);
  uint64_t v18 = *(void *)(v17 + 5248);
  if (v18)
  {
    char v19 = *(unsigned char *)(*(void *)(v17 + 16) + 2113) - a3;
    signed int v20 = *(_DWORD *)(v17 + 5256);
    uint64_t v21 = *(int *)(v17 + 5260);
    char v22 = __clz(__rbit32(v20));
    int v23 = a2 >> v22;
    int v24 = a1 >> v22;
    if (1 << v19 > v20)
    {
      int v25 = 1 << (v19 - (v22 & 0x1F));
      int v26 = *(_DWORD *)(a4 + 20) / v20;
      if (v25 + v23 >= v26) {
        int v27 = v26;
      }
      else {
        int v27 = v25 + v23;
      }
      int v28 = v47;
      char v29 = 0;
      if (v23 < v27)
      {
        int v30 = v25 + v24;
        if (v30 >= (int)v21) {
          int v30 = v21;
        }
        uint64_t v31 = v23;
        unsigned int v32 = (char *)(v18 + v24 + (int)v21 * (uint64_t)v23);
        do
        {
          __int16 v33 = v32;
          uint64_t v34 = v30 - (uint64_t)v24;
          if (v24 < v30)
          {
            do
            {
              int v36 = *v33++;
              char v35 = v36;
              if (v29 >= v36) {
                char v29 = v35;
              }
              --v34;
            }
            while (v34);
          }
          ++v31;
          v32 += v21;
        }
        while (v31 != v27);
      }
      goto LABEL_23;
    }
    char v29 = *(unsigned char *)(v18 + v24 + v23 * (int)v21);
  }
  else
  {
    char v29 = 0;
  }
  int v28 = v47;
LABEL_23:
  int v38 = v16 + v29;
  if (v28)
  {
    int v39 = *(unsigned __int8 *)(*(void *)(v5 + 16) + 2097);
    int v40 = v38
        + *(char *)(*(void *)(*(void *)(v46 + 576) + 10784)
                  + *(int *)(*(void *)(*(void *)(a4 + 976) + 8 * v13 + 5312)
                           + 4 * ((*(_DWORD *)(a4 + 16) + (1 << v13) - 1) >> v13) * (uint64_t)(a2 >> v13)
                           + 4 * (a1 >> v13)));
    if (v40 >= 51) {
      int v41 = 51;
    }
    else {
      int v41 = v38
    }
          + *(char *)(*(void *)(*(void *)(v46 + 576) + 10784)
                    + *(int *)(*(void *)(*(void *)(a4 + 976) + 8 * v13 + 5312)
                             + 4 * ((*(_DWORD *)(a4 + 16) + (1 << v13) - 1) >> v13) * (uint64_t)(a2 >> v13)
                             + 4 * (a1 >> v13)));
    if (v40 <= -v39) {
      int v38 = -v39;
    }
    else {
      int v38 = v41;
    }
  }
  else
  {
    if (*(unsigned char *)(*(void *)(v5 + 4760) + 127)) {
      BOOL v42 = v13 == 4;
    }
    else {
      BOOL v42 = 0;
    }
    if (v42)
    {
      int v43 = *(unsigned __int8 *)(*(void *)(v5 + 16) + 2097);
      int v38 = sub_1D0D256E0(*(void *)(a4 + 976), a1, a2, v38, *(_DWORD *)(a4 + 16), v45, v43, -v43);
    }
  }
  int v44 = *(_DWORD *)(v5 + 5428);
  if (v44 >= v38) {
    return v38;
  }
  else {
    return v44;
  }
}

void sub_1D0D088B8(char **a1, unint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    int v16 = &v3[2 * a2];
    goto LABEL_17;
  }
  unint64_t v6 = a2 - v5;
  int v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    int v16 = &v4[2 * v6];
LABEL_17:
    a1[1] = v16;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    sub_1D0C8D71C();
  }
  unint64_t v8 = v7 - v3;
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v10 < 0) {
    sub_1D0C6AC2C();
  }
  uint64_t v11 = (char *)operator new(2 * v10);
  uint64_t v12 = &v11[2 * v5];
  uint64_t v13 = &v11[2 * v10];
  bzero(v12, 2 * v6);
  int v14 = &v12[2 * v6];
  while (v4 != v3)
  {
    __int16 v15 = *((_WORD *)v4 - 1);
    v4 -= 2;
    *((_WORD *)v12 - 1) = v15;
    v12 -= 2;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

uint64_t sub_1D0D089C8(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, int a7, int a8, int a9, char *__dst)
{
  uint64_t v10 = result;
  int v11 = a9;
  if (!a8)
  {
    uint64_t v32 = (8 << a9) | 2;
    int v33 = 128 << *(unsigned char *)(*(void *)(result + 14848) + 223);
    uint64_t v34 = __dst - 4;
    do
    {
      *(_WORD *)uint64_t v34 = v33;
      v34 += 2;
      --v32;
    }
    while (v32);
    return result;
  }
  int v12 = a8;
  int v14 = a3;
  uint64_t v16 = result + 24524;
  if (!*(unsigned char *)(result + 24793) && (*(_DWORD *)v16 == a2 || *(_DWORD *)(result + 24528) == a3)) {
    uint64_t result = sub_1D0D09818(result, 1u);
  }
  int v17 = 4 << a9;
  int v18 = 2 << (a9 + 1);
  int v19 = *(_DWORD *)(v10 + 16);
  int v20 = v18 + a2 - v19;
  int v21 = v18 + v14 - *(_DWORD *)(v10 + 20);
  int v204 = v12 & 0x1E000;
  BOOL v22 = v20 > 1 && (v12 & 0x1E000) != 0;
  BOOL v23 = (v12 & 0xF) != 0;
  BOOL v24 = v21 > 1 && (v12 & 0xF) != 0;
  if (v22 || v24)
  {
    int v25 = *(_DWORD *)v16;
    if (v22)
    {
      int v26 = *(_DWORD *)(v10 + 24528);
      int v27 = v14 - v26;
      if (v14 != v26)
      {
        uint64_t v28 = (v20 >> 1);
        int v29 = v19 - 2;
        int v30 = v14 - 1;
        if (*(unsigned char *)(v10 + 8) && *((_DWORD *)a5 + 2) == v14)
        {
          uint64_t v31 = (uint64_t *)(v10 + 24552);
        }
        else
        {
          int v35 = v29 - v25;
          int v36 = v30 - v26;
          int v37 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
          if (a4 < 0)
          {
LABEL_27:
            int v40 = -1;
          }
          else
          {
            int v38 = v37 - a4;
            while ((a2 - v25) >> v38 != v35 >> v38 || v27 >> v38 != v36 >> v38)
            {
              BOOL v39 = v38++ < v37;
              if (!v39) {
                goto LABEL_27;
              }
            }
            int v40 = v37 - v38;
            if (v37 - v38 < a4) {
              ++v40;
            }
          }
          uint64_t result = (v37 - v40);
          uint64_t v31 = (uint64_t *)(v10
                          + 32 * v40
                          + 8 * ((v35 >> result) & 1 | (2 * ((v36 >> result) & 1)))
                          + 24552);
        }
        uint64_t v41 = *v31;
        BOOL v42 = (int *)(**(void **)(*(void *)(v41 + 136) + 72)
                    + (*(void *)(*(void *)(v41 + 136) + 80)
                     - *(int *)(v41 + 4)
                     + v29
                     + 2
                     * *(unsigned __int8 *)(*(void *)(v41 + 136) + 1)
                     * (uint64_t)((v30 - *(_DWORD *)(v41 + 8)) >> 1))
                    * *(int *)(*(void *)(*(void *)(v41 + 136) + 72) + 16));
        int v45 = *v42;
        int v43 = v42 + 1;
        int v44 = v45;
        do
        {
          *v43++ = v44;
          --v28;
        }
        while (v28);
      }
    }
    if (a2 == v25) {
      BOOL v24 = 0;
    }
    if (v24)
    {
      uint64_t v46 = (v21 >> 1);
      int v47 = a2 - 2;
      int v48 = *(_DWORD *)(v10 + 20) - 1;
      if (*(unsigned char *)(v10 + 8) && *((_DWORD *)a5 + 1) == a2)
      {
        int32x4_t v49 = (uint64_t *)(v10 + 24552);
      }
      else
      {
        int v50 = *(_DWORD *)(v10 + 24528);
        int v51 = v47 - *(_DWORD *)v16;
        int v52 = v48 - v50;
        int v53 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_44:
          int v56 = -1;
        }
        else
        {
          int v54 = v14 - v50;
          int v55 = v53 - a4;
          while (1)
          {
            if ((a2 - *(_DWORD *)v16) >> v55 == v51 >> v55)
            {
              uint64_t result = (v54 >> v55);
              if (result == v52 >> v55) {
                break;
              }
            }
            uint64_t result = (v55 + 1);
            BOOL v39 = v55++ < v53;
            if (!v39) {
              goto LABEL_44;
            }
          }
          int v56 = v53 - v55;
          if (v53 - v55 < a4) {
            ++v56;
          }
        }
        int32x4_t v49 = (uint64_t *)(v10
                        + 32 * v56
                        + 8
                        * ((v51 >> (v53 - v56)) & 1 | (2 * ((v52 >> (v53 - v56)) & 1)))
                        + 24552);
      }
      uint64_t v57 = *v49;
      uint64_t v58 = *(void *)(v57 + 136);
      uint64_t v59 = *(unsigned __int8 *)(v58 + 1);
      int16x8_t v60 = (_DWORD *)(**(void **)(v58 + 72)
                     + (*(void *)(v58 + 80) - *(int *)(v57 + 4) + v47 + 2 * v59 * ((v48 - *(_DWORD *)(v57 + 8)) >> 1))
                     * *(int *)(*(void *)(v58 + 72) + 16));
      int16x8_t v61 = &v60[v59];
      do
      {
        *int16x8_t v61 = *v60;
        v61 += v59;
        --v46;
      }
      while (v46);
    }
  }
  int32x4_t v62 = &__dst[2 * v17];
  uint64_t v63 = *(void *)(v10 + 14848);
  uint64_t v202 = *(unsigned __int8 *)(v63 + 2117);
  uint64_t v208 = *(void *)(v10 + 24768);
  int v209 = *(_DWORD *)(v10 + 24528);
  int v212 = v14 - v209;
  int v201 = *(_DWORD *)v16;
  int v64 = a2 - *(_DWORD *)v16;
  int v205 = v64;
  if (a2 == *(_DWORD *)v16)
  {
    BOOL v203 = (v12 & 0xF0) != 0;
    if ((v12 & 0xF0) != 0)
    {
      uint64_t result = (uint64_t)memcpy(__dst, (const void *)(v208 + 2 * v212), 2 * (2 << a9));
      int v64 = v205;
    }
    if ((v12 & 0xF) != 0)
    {
      uint64_t result = (uint64_t)memcpy(&__dst[2 * (2 << a9)], (const void *)(v208 + 2 * v212 + 2 * (2 << a9)), 2 * (2 << a9));
      int v64 = v205;
      BOOL v23 = 1;
    }
    else
    {
      BOOL v23 = 0;
    }
  }
  else
  {
    if ((v12 & 0xF) != 0)
    {
      uint64_t v65 = a2 - 2;
      int v66 = 2 << a9;
      int v67 = (2 << a9) + v14;
      int v68 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(v10 + 8) && v68 == a2)
      {
        unsigned int v69 = 0;
        int32x4_t v70 = *(unsigned __int8 **)(v10 + 24552);
      }
      else
      {
        if (v68 > (int)v65
          || (int v71 = *a5, v68 + v71 <= (int)v65)
          || (int v72 = *((_DWORD *)a5 + 2), v72 > v67)
          || (v73 = v72 + v71, int32x4_t v70 = a5, v73 <= v67))
        {
          int v74 = v65 - v201;
          int v75 = v67 - v209;
          int v76 = *(unsigned __int8 *)(v63 + 2113);
          if (a4 < 0)
          {
LABEL_67:
            int v78 = -1;
          }
          else
          {
            int v77 = v76 - a4;
            while (1)
            {
              uint64_t result = (v74 >> v77);
              if (v64 >> v77 == result)
              {
                uint64_t result = (v75 >> v77);
                if (v212 >> v77 == result) {
                  break;
                }
              }
              BOOL v39 = v77++ < v76;
              if (!v39) {
                goto LABEL_67;
              }
            }
            int v78 = v76 - v77;
            if (v78 < a4) {
              ++v78;
            }
          }
          int32x4_t v70 = *(unsigned __int8 **)(v10
                                    + 32 * v78
                                    + 8
                                    * ((v74 >> (v76 - v78)) & 1 | (2
                                                                               * ((v75 >> (v76 - v78)) & 1)))
                                    + 24552);
        }
        unsigned int v69 = a6;
        if (v70 != a5) {
          unsigned int v69 = 0;
        }
      }
      if (v66 < v17)
      {
        uint64_t v79 = *(unsigned __int8 *)(*((void *)v70 + 17) + 1);
        uint64_t v80 = *(void *)&v70[8 * v69 + 136];
        uint64_t v81 = *(void *)(v80 + 72);
        uint64_t result = *(void *)v81;
        uint64_t v82 = *(void *)(v80 + 80)
            + v65
            - *((int *)v70 + 1)
            + 2 * *(unsigned __int8 *)(v80 + 1) * (uint64_t)((v67 - *((_DWORD *)v70 + 2)) >> 1);
        uint64_t v83 = v66;
        __int16 v84 = (_WORD *)(*(void *)v81 + v82 * *(int *)(v81 + 16) + 2);
        uint64_t v85 = &__dst[2 * v66 + 2];
        do
        {
          *((_WORD *)v85 - 1) = *(v84 - 1);
          *(_WORD *)uint64_t v85 = *v84;
          v85 += 4;
          v83 += 2;
          v84 += 2 * v79;
        }
        while (v83 < v17);
      }
    }
    if ((v12 & 0xF0) != 0)
    {
      uint64_t v86 = a2 - 2;
      int v87 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(v10 + 8)) {
        BOOL v88 = v87 == a2;
      }
      else {
        BOOL v88 = 0;
      }
      if (v88)
      {
        unsigned int v97 = 0;
        char v92 = *(unsigned __int8 **)(v10 + 24552);
      }
      else
      {
        if (v87 > (int)v86
          || (int v89 = *a5, v87 + v89 <= (int)v86)
          || (int v90 = *((_DWORD *)a5 + 2), v90 > v14)
          || (int v91 = v90 + v89, v92 = a5, v91 <= v14))
        {
          int v93 = v86 - v201;
          int v94 = *(unsigned __int8 *)(v63 + 2113);
          if (a4 < 0)
          {
LABEL_92:
            int v96 = -1;
          }
          else
          {
            int v95 = v94 - a4;
            while (v64 >> v95 != v93 >> v95)
            {
              BOOL v39 = v95++ < v94;
              if (!v39) {
                goto LABEL_92;
              }
            }
            int v96 = v94 - v95;
            if (v96 < a4) {
              ++v96;
            }
          }
          char v92 = *(unsigned __int8 **)(v10
                                    + 32 * v96
                                    + 8
                                    * ((v93 >> (v94 - v96)) & 1 | (2
                                                                               * ((v212 >> (v94 - v96)) & 1)))
                                    + 24552);
        }
        if (v92 == a5) {
          unsigned int v97 = a6;
        }
        else {
          unsigned int v97 = 0;
        }
      }
      unint64_t v98 = (2 << a9);
      if ((int)v98 >= 1)
      {
        unint64_t v99 = 0;
        uint64_t v100 = *(void *)&v92[8 * v97 + 136];
        int32x4_t v101 = (_WORD *)(**(void **)(v100 + 72)
                       + (*(void *)(v100 + 80)
                        + v86
                        - *((int *)v92 + 1)
                        + 2 * *(unsigned __int8 *)(v100 + 1) * (uint64_t)((v14 - *((_DWORD *)v92 + 2)) >> 1))
                       * *(int *)(*(void *)(v100 + 72) + 16)
                       + 2);
        uint64_t v102 = 4 * *(unsigned __int8 *)(*((void *)v92 + 17) + 1);
        do
        {
          uint64_t v103 = &__dst[2 * v99];
          *(_WORD *)uint64_t v103 = *(v101 - 1);
          *((_WORD *)v103 + 1) = *v101;
          v99 += 2;
          int32x4_t v101 = (_WORD *)((char *)v101 + v102);
        }
        while (v99 < v98);
      }
      BOOL v203 = 1;
    }
    else
    {
      BOOL v203 = 0;
    }
  }
  int v210 = a2;
  int v104 = v12 & 0x1E00;
  if (v14 != v209)
  {
    int v206 = a9;
    uint64_t v107 = a5;
    if ((v12 & 0x1E00) != 0)
    {
      int v116 = v14 - 1;
      if (*(unsigned char *)(v10 + 8) && *((_DWORD *)a5 + 2) == v14)
      {
        int v117 = a5;
        int v118 = v14;
        int v119 = v12 & 0x1E00;
        __int16 v120 = v12;
        int v12 = a4;
        uint64_t v121 = v10 + 24524;
        BOOL v122 = v23;
        unsigned int v123 = 0;
        int v124 = *(unsigned __int8 **)(v10 + 24552);
      }
      else
      {
        int v125 = *((_DWORD *)a5 + 1);
        if (v125 > a2
          || (int v126 = *a5, v125 + v126 <= a2)
          || (int v127 = *((_DWORD *)a5 + 2), v127 >= v14)
          || (v128 = v127 + v126, int v124 = a5, v128 < v14))
        {
          int v129 = *(_DWORD *)(v10 + 24528);
          int v130 = v116 - v129;
          int v131 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
          if (a4 < 0)
          {
LABEL_122:
            int v134 = -1;
          }
          else
          {
            int v132 = v14 - v129;
            int v133 = v131 - a4;
            while (v132 >> v133 != v130 >> v133)
            {
              BOOL v39 = v133++ < v131;
              if (!v39) {
                goto LABEL_122;
              }
            }
            int v134 = v131 - v133;
            if (v131 - v133 < a4) {
              ++v134;
            }
          }
          int v124 = *(unsigned __int8 **)(v10
                                     + 32 * v134
                                     + 8
                                     * (((a2 - *(_DWORD *)v16) >> (v131 - v134)) & 1 | (2 * ((v130 >> (v131 - v134)) & 1)))
                                     + 24552);
        }
        int v118 = v14;
        int v119 = v12 & 0x1E00;
        __int16 v120 = v12;
        int v12 = a4;
        uint64_t v121 = v10 + 24524;
        BOOL v122 = v23;
        int v117 = a5;
        unsigned int v123 = a6;
        if (v124 != a5) {
          unsigned int v123 = 0;
        }
      }
      int v136 = *((_DWORD *)v124 + 2);
      uint64_t v137 = *((int *)v124 + 1);
      uint64_t v138 = *(void *)&v124[8 * v123 + 136];
      uint64_t result = (uint64_t)memcpy(v62, (const void *)(**(void **)(v138 + 72)+ (*(void *)(v138 + 80)- v137+ v210+ 2 * *(unsigned __int8 *)(v138 + 1) * (uint64_t)((v116 - v136) >> 1))* *(int *)(*(void *)(v138 + 72) + 16)), 2 * (2 << a9));
      BOOL v23 = v122;
      uint64_t v16 = v121;
      a4 = v12;
      LOWORD(v12) = v120;
      int v104 = v119;
      int v14 = v118;
      uint64_t v107 = v117;
    }
    char v108 = v204;
    if (!v204)
    {
      int v135 = v210;
LABEL_152:
      int v11 = v206;
      goto LABEL_153;
    }
    LODWORD(v114) = 2 << a9;
    int v139 = (2 << a9) + v210;
    int v140 = v14 - 1;
    if (*(unsigned char *)(v10 + 8) && *((_DWORD *)v107 + 2) == v14)
    {
      int v105 = v14;
      int v110 = v104;
      __int16 v111 = v12;
      int v12 = a4;
      uint64_t v112 = v16;
      unsigned int v141 = 0;
      int v142 = *(unsigned __int8 **)(v10 + 24552);
    }
    else
    {
      int v143 = *((_DWORD *)v107 + 1);
      if (v143 > v139
        || (int v144 = *v107, v143 + v144 <= v139)
        || (int v145 = *((_DWORD *)v107 + 2), v145 >= v14)
        || (v146 = v145 + v144, int v142 = v107, v146 < v14))
      {
        int v147 = *(_DWORD *)(v16 + 4);
        int v148 = v139 - *(_DWORD *)v16;
        int v149 = v140 - v147;
        int v150 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_143:
          int v153 = -1;
        }
        else
        {
          int v151 = v14 - v147;
          int v152 = v150 - a4;
          while ((v210 - *(_DWORD *)v16) >> v152 != v148 >> v152 || v151 >> v152 != v149 >> v152)
          {
            BOOL v39 = v152++ < v150;
            if (!v39) {
              goto LABEL_143;
            }
          }
          int v153 = v150 - v152;
          if (v150 - v152 < a4) {
            ++v153;
          }
        }
        int v142 = *(unsigned __int8 **)(v10
                                   + 32 * v153
                                   + 8
                                   * ((v148 >> (v150 - v153)) & 1 | (2
                                                                                 * ((v149 >> (v150 - v153)) & 1)))
                                   + 24552);
      }
      int v105 = v14;
      int v110 = v104;
      __int16 v111 = v12;
      int v12 = a4;
      uint64_t v112 = v16;
      unsigned int v141 = a6;
      if (v142 != v107) {
        unsigned int v141 = 0;
      }
    }
    unint64_t v109 = v107;
    BOOL v113 = v23;
    int v154 = *((_DWORD *)v142 + 2);
    uint64_t v155 = *((int *)v142 + 1);
    uint64_t v156 = *(void *)&v142[8 * v141 + 136];
    int v115 = (const void *)(**(void **)(v156 + 72)
                        + (*(void *)(v156 + 80)
                         - v155
                         + v139
                         + 2 * *(unsigned __int8 *)(v156 + 1) * (uint64_t)((v140 - v154) >> 1))
                        * *(int *)(*(void *)(v156 + 72) + 16));
    uint64_t v114 = (int)v114;
LABEL_151:
    uint64_t result = (uint64_t)memcpy(&v62[2 * v114], v115, 2 * v114);
    char v108 = 1;
    BOOL v23 = v113;
    uint64_t v16 = v112;
    a4 = v12;
    LOWORD(v12) = v111;
    int v104 = v110;
    int v14 = v105;
    int v135 = v210;
    uint64_t v107 = v109;
    goto LABEL_152;
  }
  int v105 = v14;
  if ((v12 & 0x1E00) != 0)
  {
    BOOL v106 = v23;
    uint64_t result = (uint64_t)memcpy(v62, (const void *)(v208 + 4 * v202 + 2 * v64), 2 * (2 << a9));
    int v104 = v12 & 0x1E00;
    int v64 = v205;
    BOOL v23 = v106;
  }
  uint64_t v107 = a5;
  char v108 = 0;
  if (v204)
  {
    unint64_t v109 = a5;
    int v110 = v104;
    __int16 v111 = v12;
    int v12 = a4;
    uint64_t v112 = v10 + 24524;
    BOOL v113 = v23;
    int v206 = a9;
    uint64_t v114 = 2 << a9;
    int v115 = (const void *)(v208 + 4 * v202 + 2 * v64 + 2 * v114);
    goto LABEL_151;
  }
  int v135 = v210;
LABEL_153:
  if ((v12 & 0x100) != 0)
  {
    if (v135 == v201 || v14 == v209)
    {
      int v162 = v205 + 2 * v202;
      if (v205 <= 0) {
        int v162 = 0;
      }
      uint64_t v163 = v208 + 2 * v212 + 2 * v162;
      *((_WORD *)__dst - 2) = *(_WORD *)(v163 - 4);
      uint64_t v164 = (_WORD *)(v163 - 2);
    }
    else
    {
      uint64_t v157 = v135 - 2;
      int v158 = v14 - 1;
      int v159 = *((_DWORD *)v107 + 1);
      if (*(unsigned char *)(v10 + 8) && (v159 == v135 || *((_DWORD *)v107 + 2) == v14))
      {
        uint64_t v160 = 0;
        uint64_t v161 = *(unsigned __int8 **)(v10 + 24552);
      }
      else
      {
        if (v159 > (int)v157
          || (int v165 = *v107, v159 + v165 <= (int)v157)
          || (int v166 = *((_DWORD *)v107 + 2), v166 >= v14)
          || (v167 = v166 + v165, uint64_t v161 = v107, v167 < v14))
        {
          int v168 = *(_DWORD *)(v16 + 4);
          int v169 = v157 - *(_DWORD *)v16;
          int v170 = v158 - v168;
          int v171 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
          if (a4 < 0)
          {
LABEL_172:
            int v175 = -1;
          }
          else
          {
            int v172 = v135 - *(_DWORD *)v16;
            int v173 = v14 - v168;
            int v174 = v171 - a4;
            while (1)
            {
              if (v172 >> v174 == v169 >> v174)
              {
                uint64_t result = (v173 >> v174);
                if (result == v170 >> v174) {
                  break;
                }
              }
              uint64_t result = (v174 + 1);
              BOOL v39 = v174++ < v171;
              if (!v39) {
                goto LABEL_172;
              }
            }
            int v175 = v171 - v174;
            if (v171 - v174 < a4) {
              ++v175;
            }
          }
          uint64_t v161 = *(unsigned __int8 **)(v10
                                     + 32 * v175
                                     + 8
                                     * ((v169 >> (v171 - v175)) & 1 | (2
                                                                                   * ((v170 >> (v171 - v175)) & 1)))
                                     + 24552);
        }
        uint64_t v160 = a6;
        if (v161 != v107) {
          uint64_t v160 = 0;
        }
      }
      int v176 = *((_DWORD *)v161 + 2);
      uint64_t v177 = *((int *)v161 + 1);
      uint64_t v178 = *(void *)&v161[8 * v160 + 136];
      int v179 = (__int16 *)(**(void **)(v178 + 72)
                       + (*(void *)(v178 + 80)
                        + v157
                        - v177
                        + 2 * *(unsigned __int8 *)(v178 + 1) * (uint64_t)((v158 - v176) >> 1))
                       * *(int *)(*(void *)(v178 + 72) + 16));
      __int16 v180 = *v179;
      uint64_t v164 = v179 + 1;
      *((_WORD *)__dst - 2) = v180;
    }
    *((_WORD *)__dst - 1) = *v164;
  }
  int v181 = 1 << v11;
  if (!v23)
  {
    if (v203)
    {
      v182 = &__dst[2 * (2 << v11) - 4];
    }
    else if ((v12 & 0x100) != 0)
    {
      v182 = __dst - 4;
    }
    else
    {
      v182 = v62;
      if (!v104) {
        v182 = &v62[2 * (2 << v11)];
      }
    }
    if (v181 < 2 << v11)
    {
      uint64_t v183 = (2 << v11) - (uint64_t)v181;
      int v184 = 2 * v181;
      do
      {
        *(_WORD *)&__dst[2 * v184] = *(_WORD *)v182;
        *(_WORD *)&__dst[2 * v184 + 2] = *((_WORD *)v182 + 1);
        v184 += 2;
        --v183;
      }
      while (v183);
    }
  }
  char v185 = v11 == 31 || v203;
  if ((v185 & 1) == 0)
  {
    uint64_t v186 = 0;
    uint64_t v187 = 0;
    uint64_t v188 = 2 << v11;
    if (v181 <= 1) {
      unsigned int v189 = 1;
    }
    else {
      unsigned int v189 = 1 << v11;
    }
    uint64_t v190 = 2 * v189;
    do
    {
      *(_WORD *)&__dst[v186 >> 31] = *(_WORD *)&__dst[2 * v188];
      *(_WORD *)&__dst[2 * (int)v187 + 2] = *(_WORD *)&__dst[2 * (v188 | 1)];
      v187 += 2;
      v186 += 0x200000000;
    }
    while (v190 != v187);
  }
  if ((v12 & 0x100) == 0) {
    *((_DWORD *)__dst - 1) = *(_DWORD *)__dst;
  }
  if (v11 != 31 && !v104)
  {
    uint64_t v191 = 0;
    uint64_t v192 = 0;
    if (v181 <= 1) {
      unsigned int v193 = 1;
    }
    else {
      unsigned int v193 = 1 << v11;
    }
    uint64_t v194 = 2 * v193;
    do
    {
      *(_WORD *)&v62[v191 >> 31] = *((_WORD *)__dst - 2);
      *(_WORD *)&v62[2 * (int)v192 + 2] = *((_WORD *)__dst - 1);
      v192 += 2;
      v191 += 0x200000000;
    }
    while (v194 != v192);
  }
  if ((v108 & 1) == 0)
  {
    int v195 = 2 << v11;
    if (v181 < 2 << v11)
    {
      uint64_t v196 = v195;
      uint64_t v197 = v195 - 2;
      uint64_t v198 = v196 - 1;
      uint64_t v199 = v196 - v181;
      int v200 = 2 * v181;
      do
      {
        *(_WORD *)&v62[2 * v200] = *(_WORD *)&v62[2 * v197];
        *(_WORD *)&v62[2 * v200 + 2] = *(_WORD *)&v62[2 * v198];
        v200 += 2;
        --v199;
      }
      while (v199);
    }
  }
  *(unsigned char *)(v16 + 271) = 1;
  return result;
}

uint64_t sub_1D0D09818(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (int *)(a1 + 24524);
  char v5 = *(unsigned char *)(*(void *)(a1 + 14848) + 2113);
  unsigned __int8 v6 = v5 - a2;
  ((void (*)(void, void, void, BOOL, BOOL))*(&off_1F26F1DC8[2
                                                                           * *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 14840) + 8)
                                                                                                + 531)]
                                                            + a2))((*(int *)(a1 + 24524) >> a2), (*(int *)(a1 + 24528) >> a2), (2 << (v5 - a2)), (*(_DWORD *)(a1 + 24532) & 0xF) != 0, (*(_DWORD *)(a1 + 24532) & 0x1E000) != 0);
  ((void (*)(void, void, void, BOOL, BOOL))*(&off_1F26F1DC8[2
                                                                           * *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 14840) + 8)
                                                                                                + 531)]
                                                            + a2))((*v4 >> a2), (v4[1] >> a2), (1 << v6), (v4[2] & 0xF0) != 0, (v4[2] & 0x1E00) != 0);
  uint64_t v7 = *(void *)(a1 + 14840);
  uint64_t v8 = v7 + 8 * a2;
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, unint64_t, void))(v8 + 2280))(v6, v4[2], *(uint64_t *)(v9 + 8 * a2 + 416) >> a2, *(void *)(v9 + 8 * a2 + 400)+ (((*v4 & (unint64_t)(-1 << a2)) + *(void *)(v9 + 8 * a2 + 416) * (v4[1] >> a2)) << *(unsigned char *)(v9 + 531)), *(void *)(a1 + 8 * a2 + 24760));
  *(unsigned char *)(a1 + a2 + 24792) = 1;
  return result;
}

uint64_t sub_1D0D09954(uint64_t result, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8, char *a9)
{
  uint64_t v10 = result;
  if (!a7)
  {
    uint64_t v24 = (4 << a8) | 1;
    int v25 = 128 << *(unsigned char *)(*(void *)(result + 14848) + 222);
    int v26 = a9 - 2;
    do
    {
      *(_WORD *)int v26 = v25;
      v26 += 2;
      --v24;
    }
    while (v24);
    return result;
  }
  __int16 v15 = (int *)(result + 24524);
  int v16 = 2 << a8;
  int v136 = (unsigned __int8 *)a5;
  if (!*(unsigned char *)(result + 24792) && (*v15 == a2 || *(_DWORD *)(result + 24528) == a3))
  {
    sub_1D0D09818(result, 0);
    a5 = (uint64_t)v136;
  }
  int v17 = 1 << a8;
  uint64_t result = sub_1D0D0A26C(v10, a2, a3, a4, a5, a8, a7, 0);
  uint64_t v18 = *(void *)(v10 + 14848);
  uint64_t v129 = *(unsigned __int8 *)(v18 + 2117);
  int v135 = (_DWORD *)(v10 + 24524);
  uint64_t v19 = *(void *)(v10 + 24760);
  int v134 = *(_DWORD *)(v10 + 24528);
  int v132 = *v15;
  int v133 = a3 - v134;
  int v20 = a2 - *v15;
  uint64_t v128 = v19;
  if (a2 == v132)
  {
    BOOL v131 = (a7 & 0xF0) != 0;
    if ((a7 & 0xF0) != 0) {
      uint64_t result = (uint64_t)memcpy(a9, (const void *)(v19 + 2 * v133), 2 * v17);
    }
    int v21 = &a9[2 * v16];
    if ((a7 & 0xF) != 0)
    {
      BOOL v22 = (const void *)(v19 + 2 * v133 + 2 * v17);
      BOOL v23 = a9;
      uint64_t result = (uint64_t)memcpy(&a9[2 * v17], v22, 2 * v17);
      BOOL v130 = 1;
    }
    else
    {
      BOOL v130 = 0;
      BOOL v23 = a9;
    }
    int v27 = v136;
  }
  else
  {
    int v27 = v136;
    if ((a7 & 0xF) != 0)
    {
      int v28 = a2 - 1;
      int v29 = v17 + a3;
      int v30 = *((_DWORD *)v136 + 1);
      if (v30 >= a2 || (int v31 = *v136, v30 + v31 < a2) || (v38 = *((_DWORD *)v136 + 2), v38 > v29) || v38 + v31 <= v29)
      {
        int v32 = v28 - v132;
        int v33 = v29 - v134;
        int v34 = *(unsigned __int8 *)(v18 + 2113);
        if (a4 < 0)
        {
LABEL_22:
          int v37 = -1;
        }
        else
        {
          int v35 = v34 - a4;
          uint64_t result = v133;
          while (v20 >> v35 != v32 >> v35 || v133 >> v35 != v33 >> v35)
          {
            BOOL v36 = v35++ < v34;
            if (!v36) {
              goto LABEL_22;
            }
          }
          int v41 = v34 - v35;
          if (v41 >= a4) {
            int v37 = v41;
          }
          else {
            int v37 = v41 + 1;
          }
        }
        BOOL v39 = 0;
        int v40 = *(unsigned __int8 **)(v10
                                  + 32 * v37
                                  + 8
                                  * ((v32 >> (v34 - v37)) & 1 | (2
                                                                             * ((v33 >> (v34 - v37)) & 1)))
                                  + 24552);
        int v30 = *((_DWORD *)v40 + 1);
        int v38 = *((_DWORD *)v40 + 2);
      }
      else
      {
        BOOL v39 = a6 != 3;
        int v40 = v136;
      }
      if (v17 < v16)
      {
        uint64_t v42 = **((unsigned __int8 **)v40 + 17);
        int v43 = *(unsigned __int8 **)&v40[8 * v39 + 136];
        uint64_t v44 = *((void *)v43 + 7);
        uint64_t result = *(void *)v44;
        int v45 = (_WORD *)(*(void *)v44
                      + (*((void *)v43 + 8) + v28 - v30 + *v43 * (uint64_t)(v29 - v38)) * *(int *)(v44 + 16));
        uint64_t v46 = v16 - (uint64_t)v17;
        int v47 = &a9[2 * v17];
        do
        {
          *(_WORD *)int v47 = *v45;
          v47 += 2;
          v45 += v42;
          --v46;
        }
        while (v46);
      }
    }
    BOOL v130 = (a7 & 0xF) != 0;
    if ((a7 & 0xF0) != 0)
    {
      int v48 = a2 - 1;
      int v49 = *((_DWORD *)v136 + 1);
      int v21 = &a9[2 * v16];
      if (v49 >= a2 || (v50 = *v136, v49 + v50 < a2) || (int v58 = *((_DWORD *)v136 + 2), v58 > a3) || v58 + v50 <= a3)
      {
        int v51 = v48 - v132;
        int v52 = *(unsigned __int8 *)(v18 + 2113);
        if (a4 < 0)
        {
          int v54 = -1;
          BOOL v23 = a9;
        }
        else
        {
          int v53 = v52 - a4;
          BOOL v23 = a9;
          while (v20 >> v53 != v51 >> v53)
          {
            BOOL v36 = v53++ < v52;
            if (!v36)
            {
              int v54 = -1;
              goto LABEL_48;
            }
          }
          int v55 = v52 - v53;
          if (v55 >= a4) {
            int v54 = v55;
          }
          else {
            int v54 = v55 + 1;
          }
        }
LABEL_48:
        BOOL v56 = 0;
        uint64_t v57 = *(unsigned __int8 **)(v10
                                  + 32 * v54
                                  + 8
                                  * ((v51 >> (v52 - v54)) & 1 | (2
                                                                             * ((v133 >> (v52 - v54)) & 1)))
                                  + 24552);
        int v49 = *((_DWORD *)v57 + 1);
        int v58 = *((_DWORD *)v57 + 2);
      }
      else
      {
        BOOL v56 = a6 != 3;
        uint64_t v57 = v136;
        BOOL v23 = a9;
      }
      if (a8 != 31)
      {
        uint64_t v59 = **((unsigned __int8 **)v57 + 17);
        int16x8_t v60 = *(unsigned __int8 **)&v57[8 * v56 + 136];
        int16x8_t v61 = (_WORD *)(**((void **)v60 + 7)
                      + (*((void *)v60 + 8) + v48 - v49 + *v60 * (uint64_t)(a3 - v58))
                      * *(int *)(*((void *)v60 + 7) + 16));
        if (v17 <= 1) {
          uint64_t v62 = 1;
        }
        else {
          uint64_t v62 = v17;
        }
        uint64_t v63 = v23;
        do
        {
          *v63++ = *v61;
          v61 += v59;
          --v62;
        }
        while (v62);
      }
      BOOL v131 = 1;
    }
    else
    {
      BOOL v131 = 0;
      int v21 = &a9[2 * v16];
      BOOL v23 = a9;
    }
  }
  if (a3 == v134)
  {
    if ((a7 & 0x1E00) != 0)
    {
      uint64_t result = (uint64_t)memcpy(v21, (const void *)(v128 + 4 * v129 + 2 * v20), 2 * v17);
      int v27 = v136;
    }
    if ((a7 & 0x1E000) != 0)
    {
      uint64_t v64 = v17;
      uint64_t v65 = (const void *)(v128 + 4 * v129 + 2 * v20 + 2 * v17);
      goto LABEL_99;
    }
LABEL_83:
    char v87 = 0;
    if ((a7 & 0x100) != 0) {
      goto LABEL_100;
    }
    goto LABEL_122;
  }
  if ((a7 & 0x1E00) != 0)
  {
    int v66 = a3 - 1;
    int v67 = *((_DWORD *)v27 + 1);
    if (v67 > a2 || (int v68 = *v27, v67 + v68 <= a2) || (v69 = *((_DWORD *)v27 + 2), v69 >= a3) || v69 + v68 < a3)
    {
      int v72 = *(_DWORD *)(v10 + 24528);
      int v73 = v66 - v72;
      int v74 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
      if (a4 < 0)
      {
LABEL_71:
        int v77 = -1;
      }
      else
      {
        int v75 = a3 - v72;
        int v76 = v74 - a4;
        while (v75 >> v76 != v73 >> v76)
        {
          BOOL v36 = v76++ < v74;
          if (!v36) {
            goto LABEL_71;
          }
        }
        if (v74 - v76 >= a4) {
          int v77 = v74 - v76;
        }
        else {
          int v77 = v74 - v76 + 1;
        }
      }
      BOOL v70 = 0;
      int v71 = *(unsigned __int8 **)(v10
                                + 32 * v77
                                + 8
                                * (((a2 - *v135) >> (v74 - v77)) & 1 | (2
                                                                                    * ((v73 >> (v74 - v77)) & 1)))
                                + 24552);
      int v67 = *((_DWORD *)v71 + 1);
      int v69 = *((_DWORD *)v71 + 2);
    }
    else
    {
      BOOL v70 = a6 != 3;
      int v71 = v27;
    }
    int v78 = v66 - v69;
    uint64_t v79 = *(unsigned __int8 **)&v71[8 * v70 + 136];
    uint64_t result = (uint64_t)memcpy(v21, (const void *)(**((void **)v79 + 7)+ (*((void *)v79 + 8) + a2 - v67 + *v79 * (uint64_t)v78)* *(int *)(*((void *)v79 + 7) + 16)), 2 * v17);
    int v27 = v136;
  }
  if ((a7 & 0x1E000) == 0) {
    goto LABEL_83;
  }
  int v80 = v17 + a2;
  int v81 = a3 - 1;
  int v82 = *((_DWORD *)v27 + 1);
  if (v82 > v17 + a2 || (int v83 = *v27, v82 + v83 <= v80) || (v84 = *((_DWORD *)v27 + 2), v84 >= a3) || v84 + v83 < a3)
  {
    int v88 = *(_DWORD *)(v10 + 24528);
    int v89 = v80 - *v135;
    int v90 = v81 - v88;
    int v91 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
    if (a4 < 0)
    {
LABEL_90:
      int v94 = -1;
    }
    else
    {
      int v92 = a3 - v88;
      int v93 = v91 - a4;
      while ((a2 - *v135) >> v93 != v89 >> v93 || v92 >> v93 != v90 >> v93)
      {
        BOOL v36 = v93++ < v91;
        if (!v36) {
          goto LABEL_90;
        }
      }
      if (v91 - v93 >= a4) {
        int v94 = v91 - v93;
      }
      else {
        int v94 = v91 - v93 + 1;
      }
    }
    BOOL v85 = 0;
    uint64_t v86 = *(unsigned __int8 **)(v10
                              + 32 * v94
                              + 8
                              * ((v89 >> (v91 - v94)) & 1 | (2 * ((v90 >> (v91 - v94)) & 1)))
                              + 24552);
    int v82 = *((_DWORD *)v86 + 1);
    int v84 = *((_DWORD *)v86 + 2);
  }
  else
  {
    BOOL v85 = a6 != 3;
    uint64_t v86 = v27;
  }
  int v95 = v80 - v82;
  int v96 = *(unsigned __int8 **)&v86[8 * v85 + 136];
  uint64_t v65 = (const void *)(**((void **)v96 + 7)
                     + (*((void *)v96 + 8) + v95 + *v96 * (uint64_t)(v81 - v84))
                     * *(int *)(*((void *)v96 + 7) + 16));
  uint64_t v64 = v17;
LABEL_99:
  uint64_t result = (uint64_t)memcpy(&v21[2 * v64], v65, 2 * v64);
  char v87 = 1;
  int v27 = v136;
  if ((a7 & 0x100) != 0)
  {
LABEL_100:
    if (a2 == v132 || a3 == v134)
    {
      int v103 = v20 + 2 * v129;
      if (v20 <= 0) {
        int v103 = 0;
      }
      int v104 = (_WORD *)(v128 + 2 * v133 + 2 * v103 - 2);
    }
    else
    {
      int v97 = a2 - 1;
      int v98 = a3 - 1;
      int v99 = *((_DWORD *)v27 + 1);
      if (v99 >= a2 || (int v100 = *v27, v99 + v100 < a2) || (v101 = *((_DWORD *)v27 + 2), v101 >= a3) || v101 + v100 < a3)
      {
        int v105 = *(_DWORD *)(v10 + 24528);
        int v106 = v97 - *v135;
        int v107 = v98 - v105;
        int v108 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_115:
          int v111 = -1;
        }
        else
        {
          int v109 = a3 - v105;
          int v110 = v108 - a4;
          while (1)
          {
            uint64_t result = (v106 >> v110);
            if ((a2 - *v135) >> v110 == result)
            {
              uint64_t result = (v107 >> v110);
              if (v109 >> v110 == result) {
                break;
              }
            }
            BOOL v36 = v110++ < v108;
            if (!v36) {
              goto LABEL_115;
            }
          }
          if (v108 - v110 >= a4) {
            int v111 = v108 - v110;
          }
          else {
            int v111 = v108 - v110 + 1;
          }
        }
        BOOL v102 = 0;
        int v27 = *(unsigned __int8 **)(v10
                                  + 32 * v111
                                  + 8
                                  * ((v106 >> (v108 - v111)) & 1 | (2
                                                                                * ((v107 >> (v108 - v111)) & 1)))
                                  + 24552);
        int v99 = *((_DWORD *)v27 + 1);
        int v101 = *((_DWORD *)v27 + 2);
      }
      else
      {
        BOOL v102 = a6 != 3;
      }
      int v112 = v97 - v99;
      BOOL v113 = *(unsigned __int8 **)&v27[8 * v102 + 136];
      int v104 = (_WORD *)(**((void **)v113 + 7)
                     + (*((void *)v113 + 8) + v112 + *v113 * (uint64_t)(v98 - v101))
                     * *(int *)(*((void *)v113 + 7) + 16));
    }
    *(v23 - 1) = *v104;
  }
LABEL_122:
  if (!v130)
  {
    if (v131)
    {
      uint64_t v114 = (char *)&v23[v17 - 1];
    }
    else if ((a7 & 0x100) != 0)
    {
      uint64_t v114 = (char *)(v23 - 1);
    }
    else
    {
      uint64_t v114 = v21;
      if ((a7 & 0x1E00) == 0) {
        uint64_t v114 = &v21[2 * v17];
      }
    }
    __int16 v115 = *(_WORD *)v114;
    uint64_t v116 = v17;
    int v117 = &v23[v17];
    do
    {
      *v117++ = v115;
      --v116;
    }
    while (v116);
  }
  if (!v131)
  {
    uint64_t v118 = v17;
    __int16 v119 = v23[v17];
    __int16 v120 = v23;
    do
    {
      *v120++ = v119;
      --v118;
    }
    while (v118);
  }
  if ((a7 & 0x100) == 0) {
    *(v23 - 1) = *v23;
  }
  if ((a7 & 0x1E00) == 0)
  {
    uint64_t v121 = v17;
    __int16 v122 = *(v23 - 1);
    unsigned int v123 = v21;
    do
    {
      *(_WORD *)unsigned int v123 = v122;
      v123 += 2;
      --v121;
    }
    while (v121);
  }
  if ((v87 & 1) == 0)
  {
    uint64_t v124 = v17;
    int v125 = &v21[2 * v17];
    __int16 v126 = *((_WORD *)v125 - 1);
    do
    {
      *(_WORD *)int v125 = v126;
      v125 += 2;
      --v124;
    }
    while (v124);
  }
  *(unsigned char *)(v10 + 24794) = 1;
  return result;
}

uint64_t sub_1D0D0A26C(uint64_t result, int a2, int a3, int a4, uint64_t a5, char a6, int a7, unsigned int a8)
{
  int v9 = *(_DWORD *)(result + 16);
  int v8 = *(_DWORD *)(result + 20);
  uint64_t v10 = (((2 << a6) + a2 - v9) >> a8);
  uint64_t v11 = (((2 << a6) + a3 - v8) >> a8);
  BOOL v12 = (a7 & 0x1E000) == 0 || (int)v10 <= 0;
  int v13 = !v12;
  BOOL v15 = (a7 & 0xF) != 0 && (int)v11 > 0;
  if ((v13 & 1) != 0 || v15)
  {
    int v16 = *(_DWORD *)(result + 24524);
    if (v13)
    {
      int v17 = *(_DWORD *)(result + 24528);
      int v18 = a3 - v17;
      if (a3 != v17)
      {
        int v19 = v9 + (-1 << a8);
        int v20 = a3 - 1;
        if (a8 && *(unsigned char *)(result + 8) && *(_DWORD *)(a5 + 8) == a3)
        {
          int v21 = (uint64_t *)(result + 24552);
        }
        else
        {
          int v22 = v19 - v16;
          int v23 = v20 - v17;
          int v24 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113);
          if (a4 < 0)
          {
LABEL_26:
            int v26 = -1;
          }
          else
          {
            int v25 = v24 - a4;
            while ((a2 - v16) >> v25 != v22 >> v25 || v18 >> v25 != v23 >> v25)
            {
              BOOL v12 = v25++ < v24;
              if (!v12) {
                goto LABEL_26;
              }
            }
            int v26 = v24 - v25;
            if (v24 - v25 < a4) {
              ++v26;
            }
          }
          int v21 = (uint64_t *)(result
                          + 32 * v26
                          + 8
                          * ((v22 >> (v24 - v26)) & 1 | (2 * ((v23 >> (v24 - v26)) & 1)))
                          + 24552);
        }
        uint64_t v27 = *v21;
        uint64_t v28 = *(int *)(v27 + 4);
        int v29 = v20 - *(_DWORD *)(v27 + 8);
        uint64_t v30 = *(void *)(v27 + 136);
        int v31 = (__int16 *)(**(void **)(v30 + 16 * a8 + 56)
                        + (*(void *)(v30 + 16 * a8 + 64)
                         - v28
                         + v19
                         + (*(unsigned __int8 *)(v30 + a8) << a8) * (uint64_t)(v29 >> a8))
                        * *(int *)(*(void *)(v30 + 16 * a8 + 56) + 16));
        __int16 v34 = *v31;
        int v32 = v31 + 1;
        __int16 v33 = v34;
        do
        {
          *v32++ = v33;
          --v10;
        }
        while (v10);
      }
    }
    int v35 = a2 - v16;
    if (a2 != v16 && v15)
    {
      int v37 = (-1 << a8) + a2;
      int v38 = v8 - 1;
      if (a8 && *(unsigned char *)(result + 8) && *(_DWORD *)(a5 + 4) == a2)
      {
        BOOL v39 = (uint64_t *)(result + 24552);
      }
      else
      {
        int v40 = *(_DWORD *)(result + 24528);
        int v41 = v37 - v16;
        int v42 = v38 - v40;
        int v43 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_45:
          int v46 = -1;
        }
        else
        {
          int v44 = a3 - v40;
          int v45 = v43 - a4;
          while (v35 >> v45 != v41 >> v45 || v44 >> v45 != v42 >> v45)
          {
            BOOL v12 = v45++ < v43;
            if (!v12) {
              goto LABEL_45;
            }
          }
          int v46 = v43 - v45;
          if (v43 - v45 < a4) {
            ++v46;
          }
        }
        BOOL v39 = (uint64_t *)(result
                        + 32 * v46
                        + 8
                        * ((v41 >> (v43 - v46)) & 1 | (2 * ((v42 >> (v43 - v46)) & 1)))
                        + 24552);
      }
      uint64_t v47 = *v39;
      uint64_t v48 = *(void *)(v47 + 136);
      unint64_t v49 = *(unsigned __int8 *)(v48 + a8) << a8;
      int v50 = (_WORD *)(**(void **)(v48 + 16 * a8 + 56)
                    + (*(void *)(v48 + 16 * a8 + 64)
                     - *(int *)(v47 + 4)
                     + v37
                     + v49 * ((v38 - *(_DWORD *)(v47 + 8)) >> a8))
                    * *(int *)(*(void *)(v48 + 16 * a8 + 56) + 16));
      int v51 = &v50[v49 >> a8];
      do
      {
        _WORD *v51 = *v50;
        v51 += v49 >> a8;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_1D0D0A524(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >= 1)
  {
    for (int i = 0; i != a2; ++i)
    {
      if ((int)result >= 1)
      {
        uint64_t v7 = 0;
        do
        {
          *(_WORD *)(a6 + 2 * v7) = *(_WORD *)(a4 + 2 * v7);
          v7 += 2;
        }
        while (v7 < (int)result);
      }
      a6 += 2 * a5;
      a4 += 2 * a3;
    }
  }
  return result;
}

void *sub_1D0D0A574(void *result, int a2, uint64_t a3, char *__src, uint64_t a5, char *__dst)
{
  if (a2)
  {
    uint64_t v8 = 2 * a5;
    uint64_t v9 = 2 * a3;
    size_t v10 = 2 * (int)result;
    uint64_t v11 = a2;
    do
    {
      --v11;
      uint64_t result = memcpy(__dst, __src, v10);
      __dst += v8;
      __src += v9;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1D0D0A5E0(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7, int a8, int a9, _WORD *a10)
{
  if (!a8)
  {
    int v23 = 128 << *(unsigned char *)(*(void *)(a1 + 14848) + 223);
    return (uint64_t)memset(a10 - 1, v23, (8 << a9) | 2);
  }
  BOOL v15 = (int *)(a1 + 24524);
  int v16 = 4 << a9;
  int v152 = a4;
  if (!*(unsigned char *)(a1 + 24793) && (*v15 == a2 || *(_DWORD *)(a1 + 24528) == a3))
  {
    sub_1D0D09818(a1, 1u);
    a4 = v152;
  }
  int v17 = (char *)a10 + v16;
  uint64_t result = sub_1D0D0A26C(a1, a2, a3, a4, (uint64_t)a5, a9 + 1, a8, 1u);
  uint64_t v19 = *(void *)(a1 + 14848);
  uint64_t v146 = *(unsigned __int8 *)(v19 + 2117);
  uint64_t v20 = *v15;
  uint64_t v150 = *(void *)(a1 + 24768);
  uint64_t v151 = *(int *)(a1 + 24528);
  int v148 = (_DWORD *)(a1 + 24524);
  uint64_t v149 = a2 - v20;
  uint64_t v153 = a3 - v151;
  int v144 = *v15;
  if (v20 == a2)
  {
    BOOL v21 = (a8 & 0xF0) != 0;
    if ((a8 & 0xF0) != 0) {
      uint64_t result = (uint64_t)memcpy(a10, (const void *)(v150 + (int)v153), 2 << a9);
    }
    int v22 = a5;
    if ((a8 & 0xF) != 0)
    {
      uint64_t result = (uint64_t)memcpy((char *)a10 + (2 << a9), (const void *)(v150 + v153 + (2 << a9)), 2 << a9);
      BOOL v147 = 1;
    }
    else
    {
      BOOL v147 = 0;
    }
    uint64_t v31 = a1 + 24524;
    int v24 = v152;
  }
  else
  {
    BOOL v147 = (a8 & 0xF) != 0;
    int v22 = a5;
    int v24 = v152;
    if ((a8 & 0xF) != 0)
    {
      uint64_t v25 = a2 - 2;
      LODWORD(v26) = 2 << a9;
      int v27 = (2 << a9) + a3;
      int v28 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(a1 + 8) && v28 == a2)
      {
        unsigned int v29 = 0;
        uint64_t v30 = *(unsigned __int8 **)(a1 + 24552);
      }
      else
      {
        uint64_t result = a6;
        if (v28 > (int)v25
          || (int v32 = *a5, v28 + v32 <= (int)v25)
          || (int v33 = *((_DWORD *)a5 + 2), v33 > v27)
          || (v34 = v33 + v32, uint64_t v30 = a5, v34 <= v27))
        {
          int v35 = v25 - v144;
          int v36 = v27 - v151;
          int v37 = *(unsigned __int8 *)(v19 + 2113);
          if (v152 < 0)
          {
LABEL_29:
            int v40 = -1;
          }
          else
          {
            int v38 = v37 - v152;
            while ((int)v149 >> v38 != v35 >> v38 || (int)v153 >> v38 != v36 >> v38)
            {
              BOOL v39 = v38++ < v37;
              if (!v39) {
                goto LABEL_29;
              }
            }
            int v40 = v37 - v38;
            if (v40 < v152) {
              ++v40;
            }
          }
          uint64_t v30 = *(unsigned __int8 **)(a1
                                    + 32 * v40
                                    + 8
                                    * ((v35 >> (v37 - v40)) & 1 | (2
                                                                               * ((v36 >> (v37 - v40)) & 1)))
                                    + 24552);
        }
        if (v30 == a5) {
          unsigned int v29 = a6;
        }
        else {
          unsigned int v29 = 0;
        }
      }
      if ((int)v26 < v16)
      {
        uint64_t v41 = 2 * *(unsigned __int8 *)(*((void *)v30 + 17) + 1);
        uint64_t v42 = *(void *)&v30[8 * v29 + 136];
        uint64_t result = *((int *)v30 + 1);
        uint64_t v26 = (int)v26;
        int v43 = (unsigned char *)(**(void **)(v42 + 72)
                      + (*(void *)(v42 + 80)
                       + v25
                       - (int)result
                       + 2 * *(unsigned __int8 *)(v42 + 1) * (uint64_t)((v27 - *((_DWORD *)v30 + 2)) >> 1))
                      * *(int *)(*(void *)(v42 + 72) + 16)
                      + 1);
        do
        {
          int v44 = (char *)a10 + v26;
          *int v44 = *(v43 - 1);
          v44[1] = *v43;
          v26 += 2;
          v43 += v41;
        }
        while (v26 < v16);
      }
    }
    if ((a8 & 0xF0) != 0)
    {
      uint64_t v45 = a2 - 2;
      int v46 = *((_DWORD *)a5 + 1);
      if (*(unsigned char *)(a1 + 8)) {
        BOOL v47 = v46 == a2;
      }
      else {
        BOOL v47 = 0;
      }
      if (v47)
      {
        unsigned int v55 = 0;
        int v50 = *(unsigned __int8 **)(a1 + 24552);
        uint64_t v31 = a1 + 24524;
      }
      else
      {
        uint64_t v31 = a1 + 24524;
        if (v46 > (int)v45
          || (int v48 = *v22, v46 + v48 <= (int)v45)
          || (int v49 = *((_DWORD *)v22 + 2), v49 > a3)
          || (int v50 = v22, v49 + v48 <= a3))
        {
          int v51 = v45 - *v148;
          int v52 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
          if (v152 < 0)
          {
LABEL_52:
            int v54 = -1;
          }
          else
          {
            int v53 = v52 - v152;
            while ((a2 - *v148) >> v53 != v51 >> v53)
            {
              BOOL v39 = v53++ < v52;
              if (!v39) {
                goto LABEL_52;
              }
            }
            int v54 = v52 - v53;
            if (v52 - v53 < v152) {
              ++v54;
            }
          }
          int v50 = *(unsigned __int8 **)(a1
                                    + 32 * v54
                                    + 8
                                    * ((v51 >> (v52 - v54)) & 1 | (2
                                                                               * (((a3
                                                                                                - *(_DWORD *)(a1 + 24528)) >> (v52 - v54)) & 1)))
                                    + 24552);
        }
        if (v50 == v22) {
          unsigned int v55 = a6;
        }
        else {
          unsigned int v55 = 0;
        }
      }
      unint64_t v56 = (2 << a9);
      if ((int)v56 >= 1)
      {
        unint64_t v57 = 0;
        uint64_t v58 = 2 * *(unsigned __int8 *)(*((void *)v50 + 17) + 1);
        uint64_t v59 = *(void *)&v50[8 * v55 + 136];
        int16x8_t v60 = (unsigned char *)(**(void **)(v59 + 72)
                      + (*(void *)(v59 + 80)
                       + v45
                       - *((int *)v50 + 1)
                       + 2 * *(unsigned __int8 *)(v59 + 1) * (uint64_t)((a3 - *((_DWORD *)v50 + 2)) >> 1))
                      * *(int *)(*(void *)(v59 + 72) + 16)
                      + 1);
        do
        {
          int16x8_t v61 = &a10[v57 / 2];
          *int16x8_t v61 = *(v60 - 1);
          v61[1] = *v60;
          v57 += 2;
          v60 += v58;
        }
        while (v57 < v56);
      }
      BOOL v21 = 1;
    }
    else
    {
      BOOL v21 = 0;
      uint64_t v31 = a1 + 24524;
    }
  }
  if (v151 == a3)
  {
    if ((a8 & 0x1E00) != 0) {
      uint64_t result = (uint64_t)memcpy(v17, (const void *)(v150 + 2 * v146 + (int)v149), 2 << a9);
    }
    if ((a8 & 0x1E000) != 0)
    {
      size_t v62 = 2 << a9;
      uint64_t v63 = (const void *)(v150 + 2 * v146 + v149 + v62);
      uint64_t v64 = &v17[v62];
LABEL_110:
      uint64_t result = (uint64_t)memcpy(v64, v63, v62);
      char v86 = 1;
      goto LABEL_111;
    }
  }
  else
  {
    if ((a8 & 0x1E00) != 0)
    {
      int v65 = a3 - 1;
      if (*(unsigned char *)(a1 + 8) && *((_DWORD *)v22 + 2) == a3)
      {
        unsigned int v66 = 0;
        int v67 = *(unsigned __int8 **)(a1 + 24552);
      }
      else
      {
        int v68 = *((_DWORD *)v22 + 1);
        if (v68 > a2
          || (int v69 = *v22, v68 + v69 <= a2)
          || (int v70 = *((_DWORD *)v22 + 2), v70 >= a3)
          || (v71 = v70 + v69, int v67 = v22, v71 < a3))
        {
          int v72 = *(_DWORD *)(v31 + 4);
          int v73 = v65 - v72;
          int v74 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
          if (v24 < 0)
          {
LABEL_82:
            int v77 = -1;
          }
          else
          {
            int v75 = a3 - v72;
            int v76 = v74 - v24;
            while (v75 >> v76 != v73 >> v76)
            {
              BOOL v39 = v76++ < v74;
              if (!v39) {
                goto LABEL_82;
              }
            }
            int v77 = v74 - v76;
            if (v74 - v76 < v24) {
              ++v77;
            }
          }
          int v67 = *(unsigned __int8 **)(a1
                                    + 32 * v77
                                    + 8
                                    * (((a2 - *(_DWORD *)v31) >> (v74 - v77)) & 1 | (2
                                                                                                 * ((v73 >> (v74 - v77)) & 1)))
                                    + 24552);
        }
        unsigned int v66 = a6;
        if (v67 != v22) {
          unsigned int v66 = 0;
        }
      }
      int v78 = *((_DWORD *)v67 + 2);
      uint64_t v79 = *((int *)v67 + 1);
      uint64_t v80 = *(void *)&v67[8 * v66 + 136];
      uint64_t result = (uint64_t)memcpy(v17, (const void *)(**(void **)(v80 + 72)+ (*(void *)(v80 + 80)- v79+ a2+ 2 * *(unsigned __int8 *)(v80 + 1) * (uint64_t)((v65 - v78) >> 1))* *(int *)(*(void *)(v80 + 72) + 16)), 2 << a9);
      int v24 = v152;
    }
    if ((a8 & 0x1E000) != 0)
    {
      int v81 = 2 << a9;
      int v82 = (2 << a9) + a2;
      int v83 = a3 - 1;
      if (*(unsigned char *)(a1 + 8) && *((_DWORD *)v22 + 2) == a3)
      {
        unsigned int v84 = 0;
        BOOL v85 = *(unsigned __int8 **)(a1 + 24552);
      }
      else
      {
        int v87 = *((_DWORD *)v22 + 1);
        if (v87 > v82
          || (int v88 = *v22, v87 + v88 <= v82)
          || (int v89 = *((_DWORD *)v22 + 2), v89 >= a3)
          || (v90 = v89 + v88, BOOL v85 = v22, v90 < a3))
        {
          int v91 = *(_DWORD *)(v31 + 4);
          int v92 = v82 - *(_DWORD *)v31;
          int v93 = v83 - v91;
          int v94 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
          if (v24 < 0)
          {
LABEL_103:
            int v97 = -1;
          }
          else
          {
            int v95 = a3 - v91;
            int v96 = v94 - v24;
            while ((a2 - *(_DWORD *)v31) >> v96 != v92 >> v96 || v95 >> v96 != v93 >> v96)
            {
              BOOL v39 = v96++ < v94;
              if (!v39) {
                goto LABEL_103;
              }
            }
            int v97 = v94 - v96;
            if (v94 - v96 < v24) {
              ++v97;
            }
          }
          BOOL v85 = *(unsigned __int8 **)(a1
                                    + 32 * v97
                                    + 8
                                    * ((v92 >> (v94 - v97)) & 1 | (2
                                                                               * ((v93 >> (v94 - v97)) & 1)))
                                    + 24552);
        }
        unsigned int v84 = a6;
        if (v85 != v22) {
          unsigned int v84 = 0;
        }
      }
      int v98 = *((_DWORD *)v85 + 2);
      uint64_t v99 = *((int *)v85 + 1);
      uint64_t v100 = *(void *)&v85[8 * v84 + 136];
      uint64_t v63 = (const void *)(**(void **)(v100 + 72)
                         + (*(void *)(v100 + 80)
                          - v99
                          + v82
                          + 2 * *(unsigned __int8 *)(v100 + 1) * (uint64_t)((v83 - v98) >> 1))
                         * *(int *)(*(void *)(v100 + 72) + 16));
      size_t v62 = v81;
      uint64_t v64 = &v17[v81];
      goto LABEL_110;
    }
  }
  char v86 = 0;
LABEL_111:
  if ((a8 & 0x100) != 0)
  {
    if (v144 == a2 || v151 == a3)
    {
      int v106 = v149 + 2 * v146;
      if ((int)v149 <= 0) {
        int v106 = 0;
      }
      uint64_t v107 = v150 + (int)v153 + v106;
      *((unsigned char *)a10 - 2) = *(unsigned char *)(v107 - 2);
      int v108 = (unsigned char *)(v107 - 1);
    }
    else
    {
      uint64_t v101 = a2 - 2;
      int v102 = a3 - 1;
      int v103 = *((_DWORD *)v22 + 1);
      if (*(unsigned char *)(a1 + 8) && (v103 == a2 || *((_DWORD *)v22 + 2) == a3))
      {
        uint64_t v104 = 0;
        int v105 = *(unsigned __int8 **)(a1 + 24552);
      }
      else
      {
        if (v103 > (int)v101
          || (int v109 = *v22, v103 + v109 <= (int)v101)
          || (int v110 = *((_DWORD *)v22 + 2), v110 >= a3)
          || (v111 = v110 + v109, int v105 = v22, v111 < a3))
        {
          int v112 = *(_DWORD *)(v31 + 4);
          int v113 = v101 - *(_DWORD *)v31;
          int v114 = v102 - v112;
          int v115 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
          if (v152 < 0)
          {
LABEL_130:
            int v118 = -1;
          }
          else
          {
            int v116 = a3 - v112;
            int v117 = v115 - v152;
            while (1)
            {
              if ((a2 - *(_DWORD *)v31) >> v117 == v113 >> v117)
              {
                uint64_t result = (v116 >> v117);
                if (result == v114 >> v117) {
                  break;
                }
              }
              uint64_t result = (v117 + 1);
              BOOL v39 = v117++ < v115;
              if (!v39) {
                goto LABEL_130;
              }
            }
            int v118 = v115 - v117;
            if (v115 - v117 < v152) {
              ++v118;
            }
          }
          int v105 = *(unsigned __int8 **)(a1
                                     + 32 * v118
                                     + 8
                                     * ((v113 >> (v115 - v118)) & 1 | (2
                                                                                   * ((v114 >> (v115 - v118)) & 1)))
                                     + 24552);
        }
        uint64_t v104 = a6;
        if (v105 != v22) {
          uint64_t v104 = 0;
        }
      }
      int v119 = *((_DWORD *)v105 + 2);
      uint64_t v120 = *((int *)v105 + 1);
      uint64_t v121 = *(void *)&v105[8 * v104 + 136];
      __int16 v122 = (char *)(**(void **)(v121 + 72)
                    + (*(void *)(v121 + 80)
                     + v101
                     - v120
                     + 2 * *(unsigned __int8 *)(v121 + 1) * (uint64_t)((v102 - v119) >> 1))
                    * *(int *)(*(void *)(v121 + 72) + 16));
      char v123 = *v122;
      int v108 = v122 + 1;
      *((unsigned char *)a10 - 2) = v123;
    }
    *((unsigned char *)a10 - 1) = *v108;
  }
  int v124 = 1 << a9;
  if (!v147)
  {
    if (v21)
    {
      int v125 = (char *)a10 + (2 << a9) - 2;
    }
    else if ((a8 & 0x100) != 0)
    {
      int v125 = (char *)(a10 - 1);
    }
    else
    {
      int v125 = v17;
      if ((a8 & 0x1E00) == 0) {
        int v125 = &v17[2 << a9];
      }
    }
    if (v124 < 2 << a9)
    {
      uint64_t v126 = (2 << a9) - (uint64_t)v124;
      int v127 = v124;
      do
      {
        LOBYTE(a10[v127]) = *v125;
        HIBYTE(a10[v127++]) = v125[1];
        --v126;
      }
      while (v126);
    }
  }
  char v128 = a9 == 31 || v21;
  if ((v128 & 1) == 0)
  {
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 2 << a9;
    if (v124 <= 1) {
      unsigned int v132 = 1;
    }
    else {
      unsigned int v132 = 1 << a9;
    }
    uint64_t v133 = 2 * v132;
    do
    {
      *((unsigned char *)a10 + (v129 >> 32)) = *((unsigned char *)a10 + v131);
      *((unsigned char *)a10 + (int)v130 + 1) = *((unsigned char *)a10 + (v131 | 1));
      v130 += 2;
      v129 += 0x200000000;
    }
    while (v133 != v130);
  }
  if ((a8 & 0x100) == 0) {
    *(a10 - 1) = *a10;
  }
  if (a9 != 31 && (a8 & 0x1E00) == 0)
  {
    uint64_t v134 = 0;
    uint64_t v135 = 0;
    if (v124 <= 1) {
      unsigned int v136 = 1;
    }
    else {
      unsigned int v136 = 1 << a9;
    }
    uint64_t v137 = 2 * v136;
    do
    {
      v17[v134 >> 32] = *((unsigned char *)a10 - 2);
      v17[(int)v135 + 1] = *((unsigned char *)a10 - 1);
      v135 += 2;
      v134 += 0x200000000;
    }
    while (v137 != v135);
  }
  if ((v86 & 1) == 0)
  {
    int v138 = 2 << a9;
    if (v124 < 2 << a9)
    {
      uint64_t v139 = v138;
      uint64_t v140 = v138 - 2;
      uint64_t v141 = v139 - 1;
      uint64_t v142 = v139 - v124;
      int v143 = 2 * v124;
      do
      {
        v17[v143] = v17[v140];
        v17[v143 + 1] = v17[v141];
        v143 += 2;
        --v142;
      }
      while (v142);
    }
  }
  *(unsigned char *)(v31 + 271) = 1;
  return result;
}

uint64_t sub_1D0D0B11C(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, unsigned char *a9)
{
  uint64_t v10 = result;
  if (a7)
  {
    int v14 = (int *)(result + 24524);
    int v15 = 2 << a8;
    uint64_t v16 = 2 << a8;
    unsigned int v155 = a4;
    uint64_t v156 = a5;
    if (!*(unsigned char *)(result + 24792) && (*v14 == a2 || *(_DWORD *)(result + 24528) == a3))
    {
      uint64_t result = sub_1D0D09818(result, 0);
      a5 = v156;
      a4 = v155;
    }
    int v17 = *(_DWORD *)(v10 + 16);
    uint64_t v18 = (v16 + a2 - v17);
    uint64_t v19 = (v16 + a3 - *(_DWORD *)(v10 + 20));
    int v153 = a7 & 0x1E000;
    BOOL v20 = (int)v18 > 0 && (a7 & 0x1E000) != 0;
    BOOL v21 = (a7 & 0xF) != 0;
    BOOL v22 = (int)v19 > 0 && (a7 & 0xF) != 0;
    if (v20 || v22)
    {
      int v23 = *v14;
      if (v20)
      {
        int v24 = *(_DWORD *)(v10 + 24528);
        uint64_t result = (a3 - v24);
        if (a3 != v24)
        {
          int v25 = v17 - 1;
          uint64_t v26 = a3 - 1;
          int v27 = v25 - v23;
          int v28 = v26 - v24;
          int v29 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
          if (a4 < 0)
          {
LABEL_21:
            int v32 = -1;
          }
          else
          {
            int v30 = v29 - a4;
            while ((a2 - v23) >> v30 != v27 >> v30 || (int)result >> v30 != v28 >> v30)
            {
              BOOL v31 = v30++ < v29;
              if (!v31) {
                goto LABEL_21;
              }
            }
            int v32 = v29 - v30;
            if (v29 - v30 < a4) {
              ++v32;
            }
          }
          uint64_t v34 = *(void *)(v10
                          + 32 * v32
                          + 8
                          * ((v27 >> (v29 - v32)) & 1 | (2 * ((v28 >> (v29 - v32)) & 1)))
                          + 24552);
          uint64_t v35 = *(int *)(v34 + 4);
          uint64_t v36 = v26 - *(int *)(v34 + 8);
          int v37 = *(unsigned __int8 **)(v34 + 136);
          uint64_t result = *((void *)v37 + 7);
          int v38 = (char *)(*(void *)result + (*((void *)v37 + 8) - v35 + v25 + *v37 * v36) * *(int *)(result + 16));
          char v41 = *v38;
          BOOL v39 = v38 + 1;
          char v40 = v41;
          do
          {
            *v39++ = v40;
            --v18;
          }
          while (v18);
        }
      }
      if (a2 != v23 && v22)
      {
        uint64_t v43 = *(int *)(v10 + 20) - 1;
        int v44 = *(_DWORD *)(v10 + 24528);
        int v45 = a2 - 1 - *v14;
        int v46 = v43 - v44;
        int v47 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
        if (a4 < 0)
        {
LABEL_38:
          int v50 = -1;
        }
        else
        {
          int v48 = a3 - v44;
          int v49 = v47 - a4;
          while (1)
          {
            if ((a2 - *v14) >> v49 == v45 >> v49)
            {
              uint64_t result = (v48 >> v49);
              if (result == v46 >> v49) {
                break;
              }
            }
            uint64_t result = (v49 + 1);
            BOOL v31 = v49++ < v47;
            if (!v31) {
              goto LABEL_38;
            }
          }
          int v50 = v47 - v49;
          if (v47 - v49 < a4) {
            ++v50;
          }
        }
        uint64_t v51 = *(void *)(v10
                        + 32 * v50
                        + 8
                        * ((v45 >> (v47 - v50)) & 1 | (2 * ((v46 >> (v47 - v50)) & 1)))
                        + 24552);
        int v52 = *(unsigned __int8 **)(v51 + 136);
        uint64_t v53 = *v52;
        int v54 = (unsigned char *)(**((void **)v52 + 7)
                      + (*((void *)v52 + 8) - *(int *)(v51 + 4) + a2 - 1 + v53 * (v43 - *(int *)(v51 + 8)))
                      * *(int *)(*((void *)v52 + 7) + 16));
        unsigned int v55 = &v54[v53];
        do
        {
          *unsigned int v55 = *v54;
          v55 += v53;
          --v19;
        }
        while (v19);
      }
    }
    int v56 = 1 << a8;
    int v154 = &a9[v15];
    uint64_t v57 = *(void *)(v10 + 14848);
    uint64_t v151 = *(unsigned __int8 *)(v57 + 2117);
    uint64_t v58 = *v14;
    uint64_t v157 = *(void *)(v10 + 24760);
    uint64_t v158 = *(int *)(v10 + 24528);
    uint64_t v59 = a2 - v58;
    uint64_t v159 = a3 - v158;
    int v150 = *v14;
    if (v58 == a2)
    {
      BOOL v152 = (a7 & 0xF0) != 0;
      int16x8_t v60 = a9;
      if ((a7 & 0xF0) != 0)
      {
        uint64_t result = (uint64_t)memcpy(a9, (const void *)(v157 + (int)v159), v56);
        a5 = v156;
        a4 = v155;
      }
      int16x8_t v61 = v154;
      if ((a7 & 0xF) != 0)
      {
        uint64_t result = (uint64_t)memcpy(&a9[v56], (const void *)(v157 + v159 + v56), v56);
        a5 = v156;
        a4 = v155;
        BOOL v21 = 1;
      }
      else
      {
        BOOL v21 = 0;
      }
LABEL_88:
      if (v158 == a3)
      {
        if ((a7 & 0x1E00) != 0)
        {
          BOOL v95 = v21;
          uint64_t result = (uint64_t)memcpy(v61, (const void *)(v157 + 2 * v151 + (int)v59), v56);
          BOOL v21 = v95;
        }
        if (v153)
        {
          BOOL v96 = v21;
          uint64_t result = (uint64_t)memcpy(&v61[v56], (const void *)(v157 + 2 * v151 + v59 + v56), v56);
          BOOL v21 = v96;
          char v97 = 1;
          if ((a7 & 0x100) == 0) {
            goto LABEL_157;
          }
          goto LABEL_132;
        }
      }
      else
      {
        if ((a7 & 0x1E00) != 0)
        {
          int v98 = a3 - 1;
          int v99 = *((_DWORD *)a5 + 1);
          if (v99 > a2
            || (int v100 = *a5, v99 + v100 <= a2)
            || (int v101 = *((_DWORD *)a5 + 2), v101 >= a3)
            || v101 + v100 < a3)
          {
            int v105 = *(_DWORD *)(v10 + 24528);
            int v106 = v98 - v105;
            int v107 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
            if (a4 < 0)
            {
LABEL_104:
              int v110 = -1;
            }
            else
            {
              int v108 = a3 - v105;
              int v109 = v107 - a4;
              while (v108 >> v109 != v106 >> v109)
              {
                BOOL v31 = v109++ < v107;
                if (!v31) {
                  goto LABEL_104;
                }
              }
              if (v107 - v109 >= a4) {
                int v110 = v107 - v109;
              }
              else {
                int v110 = v107 - v109 + 1;
              }
            }
            BOOL v102 = v21;
            BOOL v103 = 0;
            uint64_t v104 = *(unsigned __int8 **)(v10
                                       + 32 * v110
                                       + 8
                                       * (((a2 - *v14) >> (v107 - v110)) & 1 | (2
                                                                                            * ((v106 >> (v107 - v110)) & 1)))
                                       + 24552);
            int v99 = *((_DWORD *)v104 + 1);
            int v101 = *((_DWORD *)v104 + 2);
          }
          else
          {
            BOOL v102 = v21;
            BOOL v103 = a6 != 3;
            uint64_t v104 = a5;
          }
          int v111 = v98 - v101;
          int v112 = *(unsigned __int8 **)&v104[8 * v103 + 136];
          uint64_t result = (uint64_t)memcpy(v61, (const void *)(**((void **)v112 + 7)+ (*((void *)v112 + 8) + a2 - v99 + *v112 * (uint64_t)v111)* *(int *)(*((void *)v112 + 7) + 16)), v56);
          BOOL v21 = v102;
          a4 = v155;
          a5 = v156;
        }
        if (v153)
        {
          int v113 = v56 + a2;
          int v114 = a3 - 1;
          int v115 = *((_DWORD *)a5 + 1);
          BOOL v148 = v21;
          if (v115 > v56 + a2
            || (int v116 = *a5, v115 + v116 <= v113)
            || (int v117 = *((_DWORD *)a5 + 2), v117 >= a3)
            || v117 + v116 < a3)
          {
            int v120 = *(_DWORD *)(v10 + 24528);
            int v121 = v113 - *v14;
            int v122 = v114 - v120;
            int v123 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
            if (a4 < 0)
            {
LABEL_123:
              int v126 = -1;
            }
            else
            {
              int v124 = a3 - v120;
              int v125 = v123 - a4;
              while ((a2 - *v14) >> v125 != v121 >> v125 || v124 >> v125 != v122 >> v125)
              {
                BOOL v31 = v125++ < v123;
                if (!v31) {
                  goto LABEL_123;
                }
              }
              if (v123 - v125 >= a4) {
                int v126 = v123 - v125;
              }
              else {
                int v126 = v123 - v125 + 1;
              }
            }
            BOOL v118 = 0;
            int v119 = *(unsigned __int8 **)(v10
                                       + 32 * v126
                                       + 8
                                       * ((v121 >> (v123 - v126)) & 1 | (2
                                                                                     * ((v122 >> (v123 - v126)) & 1)))
                                       + 24552);
            int v115 = *((_DWORD *)v119 + 1);
            int v117 = *((_DWORD *)v119 + 2);
          }
          else
          {
            BOOL v118 = a6 != 3;
            int v119 = a5;
          }
          int v127 = v113 - v115;
          char v128 = *(unsigned __int8 **)&v119[8 * v118 + 136];
          int16x8_t v61 = v154;
          uint64_t result = (uint64_t)memcpy(&v154[v56], (const void *)(**((void **)v128 + 7)+ (*((void *)v128 + 8) + v127 + *v128 * (uint64_t)(v114 - v117))* *(int *)(*((void *)v128 + 7) + 16)), v56);
          char v97 = 1;
          BOOL v21 = v148;
          if ((a7 & 0x100) == 0)
          {
LABEL_157:
            if (v21)
            {
              if (v152) {
                goto LABEL_159;
              }
            }
            else
            {
              if (v152)
              {
                BOOL v147 = &v60[v56 - 1];
              }
              else if ((a7 & 0x100) != 0)
              {
                BOOL v147 = v60 - 1;
              }
              else
              {
                BOOL v147 = v61;
                if ((a7 & 0x1E00) == 0) {
                  BOOL v147 = &v61[v56];
                }
              }
              uint64_t result = (uint64_t)memset(&v60[v56], *v147, v56);
              if (v152)
              {
LABEL_159:
                if ((a7 & 0x100) != 0) {
                  goto LABEL_161;
                }
                goto LABEL_160;
              }
            }
            uint64_t result = (uint64_t)memset(v60, v60[v56], v56);
            if ((a7 & 0x100) != 0)
            {
LABEL_161:
              if ((a7 & 0x1E00) != 0)
              {
                if (v97)
                {
LABEL_164:
                  *((unsigned char *)v14 + 270) = 1;
                  return result;
                }
              }
              else
              {
                uint64_t result = (uint64_t)memset(v61, *(v60 - 1), v56);
                if (v97) {
                  goto LABEL_164;
                }
              }
              uint64_t result = (uint64_t)memset(&v61[v56], v61[v56 - 1], v56);
              goto LABEL_164;
            }
LABEL_160:
            *(v60 - 1) = *v60;
            goto LABEL_161;
          }
LABEL_132:
          if (v150 == a2 || v158 == a3)
          {
            int v136 = v59 + 2 * v151;
            if ((int)v59 <= 0) {
              int v136 = 0;
            }
            uint64_t v137 = (unsigned char *)(v157 + (int)v159 + v136 - 1);
          }
          else
          {
            int v129 = a2 - 1;
            int v130 = a3 - 1;
            uint64_t v131 = v156;
            int v132 = *((_DWORD *)v156 + 1);
            if (v132 >= a2
              || (int v133 = *v156, v132 + v133 < a2)
              || (int v134 = *((_DWORD *)v156 + 2), v134 >= a3)
              || v134 + v133 < a3)
            {
              int v138 = *(_DWORD *)(v10 + 24528);
              int v139 = v129 - *v14;
              int v140 = v130 - v138;
              int v141 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
              uint64_t result = v155;
              if ((v155 & 0x80000000) != 0)
              {
LABEL_147:
                int v144 = -1;
              }
              else
              {
                int v142 = a3 - v138;
                int v143 = v141 - v155;
                while ((a2 - *v14) >> v143 != v139 >> v143 || v142 >> v143 != v140 >> v143)
                {
                  BOOL v31 = v143++ < v141;
                  if (!v31) {
                    goto LABEL_147;
                  }
                }
                if (v141 - v143 >= (int)v155) {
                  int v144 = v141 - v143;
                }
                else {
                  int v144 = v141 - v143 + 1;
                }
              }
              BOOL v135 = 0;
              uint64_t v131 = *(unsigned __int8 **)(v10
                                         + 32 * v144
                                         + 8
                                         * ((v139 >> (v141 - v144)) & 1 | (2
                                                                                       * ((v140 >> (v141 - v144)) & 1)))
                                         + 24552);
              int v132 = *((_DWORD *)v131 + 1);
              int v134 = *((_DWORD *)v131 + 2);
            }
            else
            {
              BOOL v135 = a6 != 3;
            }
            int v145 = v129 - v132;
            uint64_t v146 = *(unsigned __int8 **)&v131[8 * v135 + 136];
            uint64_t v137 = (unsigned char *)(**((void **)v146 + 7)
                           + (*((void *)v146 + 8) + v145 + *v146 * (uint64_t)(v130 - v134))
                           * *(int *)(*((void *)v146 + 7) + 16));
          }
          *(v60 - 1) = *v137;
          goto LABEL_157;
        }
      }
      char v97 = 0;
      if ((a7 & 0x100) == 0) {
        goto LABEL_157;
      }
      goto LABEL_132;
    }
    if ((a7 & 0xF) != 0)
    {
      int v62 = a2 - 1;
      int v63 = v56 + a3;
      int v64 = *((_DWORD *)a5 + 1);
      if (v64 >= a2 || (int v65 = *a5, v64 + v65 < a2) || (v71 = *((_DWORD *)a5 + 2), v71 > v63) || v71 + v65 <= v63)
      {
        int v66 = v62 - v150;
        int v67 = v63 - v158;
        int v68 = *(unsigned __int8 *)(v57 + 2113);
        if (a4 < 0)
        {
LABEL_54:
          int v70 = -1;
        }
        else
        {
          int v69 = v68 - a4;
          while ((int)v59 >> v69 != v66 >> v69 || (int)v159 >> v69 != v67 >> v69)
          {
            BOOL v31 = v69++ < v68;
            if (!v31) {
              goto LABEL_54;
            }
          }
          int v74 = v68 - v69;
          if (v74 >= a4) {
            int v70 = v74;
          }
          else {
            int v70 = v74 + 1;
          }
        }
        BOOL v72 = 0;
        int v73 = *(unsigned __int8 **)(v10
                                  + 32 * v70
                                  + 8
                                  * ((v66 >> (v68 - v70)) & 1 | (2
                                                                             * ((v67 >> (v68 - v70)) & 1)))
                                  + 24552);
        int v64 = *((_DWORD *)v73 + 1);
        int v71 = *((_DWORD *)v73 + 2);
      }
      else
      {
        BOOL v72 = a6 != 3;
        int v73 = a5;
      }
      if (v56 < (int)v16)
      {
        uint64_t v75 = **((unsigned __int8 **)v73 + 17);
        int v76 = *(unsigned __int8 **)&v73[8 * v72 + 136];
        int v77 = (unsigned char *)(**((void **)v76 + 7)
                      + (*((void *)v76 + 8) + v62 - v64 + *v76 * (uint64_t)(v63 - v71))
                      * *(int *)(*((void *)v76 + 7) + 16));
        uint64_t v78 = v16 - v56;
        uint64_t v79 = &a9[v56];
        do
        {
          *v79++ = *v77;
          v77 += v75;
          --v78;
        }
        while (v78);
      }
    }
    if ((a7 & 0xF0) != 0)
    {
      int v80 = a2 - 1;
      int v81 = *((_DWORD *)a5 + 1);
      if (v81 >= a2 || (v82 = *a5, v81 + v82 < a2) || (int v89 = *((_DWORD *)a5 + 2), v89 > a3) || v89 + v82 <= a3)
      {
        int v83 = v80 - *v14;
        int v84 = *(unsigned __int8 *)(*(void *)(v10 + 14848) + 2113);
        int16x8_t v60 = a9;
        if (a4 < 0)
        {
LABEL_73:
          int v86 = -1;
        }
        else
        {
          int v85 = v84 - a4;
          while ((a2 - *v14) >> v85 != v83 >> v85)
          {
            BOOL v31 = v85++ < v84;
            if (!v31) {
              goto LABEL_73;
            }
          }
          if (v84 - v85 >= a4) {
            int v86 = v84 - v85;
          }
          else {
            int v86 = v84 - v85 + 1;
          }
        }
        BOOL v87 = 0;
        int v88 = *(unsigned __int8 **)(v10
                                  + 32 * v86
                                  + 8
                                  * ((v83 >> (v84 - v86)) & 1 | (2
                                                                             * (((a3
                                                                                              - *(_DWORD *)(v10 + 24528)) >> (v84 - v86)) & 1)))
                                  + 24552);
        int v81 = *((_DWORD *)v88 + 1);
        int v89 = *((_DWORD *)v88 + 2);
      }
      else
      {
        BOOL v87 = a6 != 3;
        int v88 = a5;
        int16x8_t v60 = a9;
      }
      if (a8 != 31)
      {
        uint64_t v90 = **((unsigned __int8 **)v88 + 17);
        int v91 = *(unsigned __int8 **)&v88[8 * v87 + 136];
        int v92 = (unsigned char *)(**((void **)v91 + 7)
                      + (*((void *)v91 + 8) + v80 - v81 + *v91 * (uint64_t)(a3 - v89))
                      * *(int *)(*((void *)v91 + 7) + 16));
        if (v56 <= 1) {
          uint64_t v93 = 1;
        }
        else {
          uint64_t v93 = v56;
        }
        int v94 = v60;
        int16x8_t v61 = v154;
        do
        {
          *v94++ = *v92;
          v92 += v90;
          --v93;
        }
        while (v93);
        BOOL v152 = 1;
        goto LABEL_88;
      }
      BOOL v152 = 1;
    }
    else
    {
      BOOL v152 = 0;
      int16x8_t v60 = a9;
    }
    int16x8_t v61 = v154;
    goto LABEL_88;
  }
  int v33 = 128 << *(unsigned char *)(*(void *)(result + 14848) + 222);
  return (uint64_t)memset(a9 - 1, v33, (4 << a8) | 1);
}

uint64_t sub_1D0D0BC74(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >= 1)
  {
    for (int i = 0; i != a2; ++i)
    {
      if ((int)result >= 1)
      {
        uint64_t v7 = 0;
        do
        {
          *(unsigned char *)(a6 + v7) = *(unsigned char *)(a4 + v7);
          v7 += 2;
        }
        while (v7 < (int)result);
      }
      a4 += a3;
      a6 += a5;
    }
  }
  return result;
}

void *sub_1D0D0BCBC(void *result, int a2, uint64_t a3, char *__src, uint64_t a5, char *__dst)
{
  if (a2)
  {
    size_t v10 = (int)result;
    uint64_t v11 = a2;
    do
    {
      --v11;
      uint64_t result = memcpy(__dst, __src, v10);
      __dst += a5;
      __src += a3;
    }
    while (v11);
  }
  return result;
}

void sub_1D0D0BD28(uint64_t a1, unsigned __int8 *a2, int a3, int a4, char a5, __int16 a6)
{
  int v10 = a3 - *(_DWORD *)(a1 + 24524);
  int v11 = a4 - *(_DWORD *)(a1 + 24528);
  *((_DWORD *)a2 + 1) = a3;
  *((_DWORD *)a2 + 2) = a4;
  bzero(*((void **)a2 + 11), 2 * ((unint64_t)*a2 >> 3) * ((unint64_t)*a2 >> 3));
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0xFFFC | a5 & 3;
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0x1FF | (a6 << 9);
  sub_1D0D0BE7C((void **)a2, *(unsigned __int8 *)(*(void *)(a1 + 14840) + 58) < 2u);
  int v12 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117);
  int v13 = v10 + v11 * v12;
  uint64_t v14 = *(void *)(a1 + 25008) + v13;
  *((void *)a2 + 3) = *(void *)(a1 + 25000);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *(void *)(a1 + 25040) + v13;
  *((void *)a2 + 7) = *(void *)(a1 + 25032);
  *((void *)a2 + 8) = v15;
  int v16 = v10 + (v11 >> 1) * v12;
  uint64_t v17 = *(void *)(a1 + 25024) + v16;
  *((void *)a2 + 5) = *(void *)(a1 + 25016);
  *((void *)a2 + 6) = v17;
  uint64_t v18 = *(void *)(a1 + 25056) + v16;
  *((void *)a2 + 9) = *(void *)(a1 + 25048);
  *((void *)a2 + 10) = v18;
  **((unsigned char **)a2 + 17) = *a2;
  if (1 << *(unsigned char *)(*(void *)(a1 + 14848) + 2116) <= *a2 >> 1) {
    char v19 = *a2 >> 1;
  }
  else {
    char v19 = 1 << *(unsigned char *)(*(void *)(a1 + 14848) + 2116);
  }
  *(unsigned char *)(*((void *)a2 + 17) + 1) = v19;
  *((_DWORD *)a2 + 48) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = -1;
  *((_WORD *)a2 + 98) = 2;
  *((_DWORD *)a2 + 56) = 0;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = -1;
  *((_WORD *)a2 + 114) = 0;
}

void sub_1D0D0BE7C(void **a1, int a2)
{
  bzero(a1[12], 16 * ((unint64_t)*(unsigned __int8 *)a1 >> 2) * ((unint64_t)*(unsigned __int8 *)a1 >> 2));
  if (a2)
  {
    LODWORD(v4) = *(unsigned __int8 *)a1;
    if (v4 >= 4)
    {
      unsigned int v5 = 0;
      unsigned __int8 v6 = (char *)a1[12];
      do
      {
        if (v4 >= 4)
        {
          unint64_t v8 = 0;
          uint64_t v9 = v6 + 8;
          do
          {
            *uint64_t v9 = -1;
            v9 += 8;
            ++v8;
            unint64_t v4 = *(unsigned __int8 *)a1;
          }
          while (v8 < v4 >> 2);
          unint64_t v7 = v4 >> 2;
        }
        else
        {
          LODWORD(v7) = 0;
        }
        v6 += 16 * v7;
        ++v5;
      }
      while (v5 < v7);
    }
  }
}

void sub_1D0D0BF14(uint64_t a1, unsigned __int8 *a2, int a3, int a4, char a5, char a6, __int16 a7)
{
  sub_1D0D0BD28(a1, a2, a3, a4, a5, a7);
  **((_WORD **)a2 + 11) = **((_WORD **)a2 + 11) & 0xFFF3 | (4 * (a6 & 3));
  unint64_t v9 = *a2;
  if (v9 >= 8)
  {
    uint64_t v10 = 0;
    int v11 = (_WORD *)*((void *)a2 + 11);
    unint64_t v12 = v9 >> 3;
    int v13 = v11;
    do
    {
      uint64_t v14 = v13;
      unint64_t v15 = v12;
      do
      {
        *v14++ = *v11;
        --v15;
      }
      while (v15);
      ++v10;
      v13 += v12;
    }
    while (v10 != v12);
  }
}

void *sub_1D0D0BFA0(void *result, _WORD *a2, char a3, char a4, int a5, uint64_t a6, __int16 a7)
{
  if (a5) {
    __int16 v7 = 128;
  }
  else {
    __int16 v7 = 0;
  }
  __int16 v8 = v7 & 0xFF8C | a3 & 3 | (16 * (a4 & 7)) | *a2 & 0x10C | (a7 << 9);
  *a2 = v8;
  __int16 v9 = *(unsigned __int8 *)(result[1857] + 19);
  if (*(unsigned char *)(result[1857] + 19)) {
    __int16 v9 = *(unsigned __int8 *)(result[121] + 70) << 8;
  }
  *a2 = v9 | v8 & 0xFEFF;
  unsigned int v10 = *(unsigned __int8 *)(result[1856] + 2117) >> a3;
  if (v10 >= 8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v10 >> 3;
    int v13 = a2;
    do
    {
      uint64_t v14 = v13;
      uint64_t v15 = v12;
      do
      {
        *v14++ = *a2;
        --v15;
      }
      while (v15);
      ++v11;
      v13 += a6;
    }
    while (v11 != v12);
  }
  return result;
}

void *sub_1D0D0C040(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5, int a6)
{
  uint64_t result = sub_1D0D0C1D8(a2, a3, a4, a5, a6);
  if (a6 >= 4)
  {
    unsigned int v13 = a6 >> 2;
    uint64_t v14 = (char *)(*((void *)a2 + 12)
                 + 16
                 * (((uint64_t)(a4 - *((_DWORD *)a2 + 1)) >> 2)
                  + ((unint64_t)*a2 >> 2) * ((a5 - *((_DWORD *)a2 + 2)) >> 2)));
    uint64_t v15 = (char *)(*((void *)a3 + 12)
                 + 16
                 * (((uint64_t)(a4 - *((_DWORD *)a3 + 1)) >> 2)
                  + ((unint64_t)*a3 >> 2) * ((a5 - *((_DWORD *)a3 + 2)) >> 2)));
    size_t v16 = 16 * v13;
    do
    {
      uint64_t result = memcpy(v14, v15, v16);
      v14 += (4 * *a2) & 0x3F0;
      v15 += (4 * *a3) & 0x3F0;
      --v13;
    }
    while (v13);
  }
  if (!*(unsigned char *)(a1 + 27684))
  {
    uint64_t result = sub_1D0D0C2A8(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 29752), *((void ***)a2 + 17), *((const void ***)a3 + 17), a4 - *((_DWORD *)a2 + 1), a5 - *((_DWORD *)a2 + 2), a4 - *((_DWORD *)a3 + 1), a5 - *((_DWORD *)a3 + 2), **((unsigned __int8 **)a3 + 17));
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t v17 = (void **)*((void *)a2 + 17);
      uint64_t v18 = *((void *)a3 + 17);
      int v19 = a4 - *((_DWORD *)a2 + 1);
      int v20 = a5 - *((_DWORD *)a2 + 2);
      int v21 = a4 - *((_DWORD *)a3 + 1);
      int v22 = a5 - *((_DWORD *)a3 + 2);
      uint64_t v23 = *(unsigned __int8 *)(v18 + 1);
      int v24 = *(uint64_t (**)(void, uint64_t))(a1 + 29752);
      return sub_1D0D0C498(v24, v17, (const void **)v18, v19, v20, v21, v22, v23);
    }
  }
  return result;
}

unsigned __int8 *sub_1D0D0C1D8(unsigned __int8 *result, unsigned __int8 *a2, int a3, int a4, int a5)
{
  if (a5 >= 8)
  {
    unsigned __int8 v6 = result;
    unsigned int v7 = a5 >> 3;
    __int16 v8 = (char *)(*((void *)a2 + 11)
                + 2
                * (((uint64_t)(a3 - *((_DWORD *)a2 + 1)) >> 3)
                 + ((unint64_t)*a2 >> 3) * ((a4 - *((_DWORD *)a2 + 2)) >> 3)));
    __int16 v9 = (char *)(*((void *)result + 11)
                + 2
                * (((uint64_t)(a3 - *((_DWORD *)result + 1)) >> 3)
                 + ((unint64_t)*result >> 3) * ((a4 - *((_DWORD *)result + 2)) >> 3)));
    size_t v10 = 2 * (a5 >> 3);
    do
    {
      uint64_t result = (unsigned __int8 *)memcpy(v9, v8, v10);
      v9 += ((unint64_t)*v6 >> 2) & 0x3E;
      v8 += ((unint64_t)*a2 >> 2) & 0x3E;
      --v7;
    }
    while (v7);
  }
  return result;
}

void *sub_1D0D0C2A8(uint64_t (*a1)(uint64_t, uint64_t), void **a2, const void **a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  int v8 = a8;
  uint64_t result = (void *)a1(a8, a8);
  unint64_t v16 = *(unsigned __int8 *)a2;
  unint64_t v17 = *(unsigned __int8 *)a3;
  int v18 = v8 >> 2;
  if (v16 == v8 && v17 == v16)
  {
    memcpy(a2[1], a3[1], (v18 * v18));
    int v19 = a2[4];
    int v20 = a3[4];
    return memcpy(v19, v20, (2 * v8 * v8));
  }
  else
  {
    if (v8 >= 4)
    {
      unint64_t v21 = v16 >> 2;
      unint64_t v22 = v17 >> 2;
      size_t v23 = v18;
      int v34 = a5;
      int v35 = a7;
      int v33 = a6;
      int v24 = (char *)a3[1] + ((uint64_t)a6 >> 2) + (int)(v17 >> 2) * (uint64_t)(a7 >> 2);
      int v25 = (char *)a2[1] + ((uint64_t)a4 >> 2) + (int)(v16 >> 2) * (uint64_t)(a5 >> 2);
      uint64_t v26 = v18;
      do
      {
        --v26;
        uint64_t result = memcpy(v25, v24, v23);
        v25 += v21;
        v24 += v22;
      }
      while (v26);
      unint64_t v16 = *(unsigned __int8 *)a2;
      LODWORD(v17) = *(unsigned __int8 *)a3;
      a5 = v34;
      a7 = v35;
      a6 = v33;
    }
    if (v8)
    {
      uint64_t v27 = v8;
      uint64_t v28 = 2 * v16;
      uint64_t v29 = 2 * v17;
      size_t v30 = 2 * v8;
      BOOL v31 = (char *)a3[4] + 2 * a6 + 2 * (int)v17 * (uint64_t)a7;
      int v32 = (char *)a2[4] + 2 * a4 + 2 * (int)v16 * (uint64_t)a5;
      do
      {
        --v27;
        uint64_t result = memcpy(v32, v31, v30);
        v32 += v28;
        v31 += v29;
      }
      while (v27);
    }
  }
  return result;
}

void *sub_1D0D0C498(uint64_t (*a1)(void, uint64_t), void **a2, const void **a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  unsigned int v8 = a8;
  int v15 = 2 * a8;
  uint64_t result = (void *)a1((2 * a8), a8);
  int v17 = *(unsigned __int8 *)a2;
  if (v17 == v8 && *(unsigned __int8 *)a3 == v17)
  {
    memcpy(a2[2], a3[2], (v8 >> 2) * (v8 >> 2));
    memcpy(a2[3], a3[3], (v8 >> 2) * (v8 >> 2));
    size_t v18 = v15 * v8;
    memcpy(a2[5], a3[5], v18);
    int v19 = a2[6];
    int v20 = a3[6];
    return memcpy(v19, v20, v18);
  }
  else
  {
    unint64_t v21 = *((unsigned __int8 *)a2 + 1);
    unint64_t v22 = *((unsigned __int8 *)a3 + 1);
    if (v8 >= 4)
    {
      int v52 = a5;
      uint64_t v23 = (uint64_t)a5 >> 3;
      unint64_t v24 = v21 >> 2;
      int v54 = a4;
      int v56 = a6;
      uint64_t v25 = (uint64_t)a4 >> 3;
      unint64_t v26 = v22 >> 2;
      uint64_t v27 = (uint64_t)a6 >> 3;
      uint64_t v49 = (uint64_t)a7 >> 3;
      uint64_t v50 = v25;
      int v51 = v23;
      uint64_t v28 = (char *)a3[2] + v27 + (int)(v22 >> 2) * (uint64_t)(int)v49;
      uint64_t v29 = (char *)a2[2] + v25 + (int)v24 * (uint64_t)(int)v23;
      uint64_t v30 = v8 >> 2;
      do
      {
        --v30;
        memcpy(v29, v28, v8 >> 2);
        v29 += v24;
        v28 += v26;
      }
      while (v30);
      unint64_t v31 = (unint64_t)*((unsigned __int8 *)a2 + 1) >> 2;
      unint64_t v32 = (unint64_t)*((unsigned __int8 *)a3 + 1) >> 2;
      int v33 = (char *)a3[3] + v27 + (int)v32 * (uint64_t)(int)v49;
      int v34 = (char *)a2[3] + v50 + (int)v31 * (uint64_t)v51;
      uint64_t v35 = v8 >> 2;
      do
      {
        --v35;
        uint64_t result = memcpy(v34, v33, v8 >> 2);
        v34 += v31;
        v33 += v32;
      }
      while (v35);
      LODWORD(v21) = *((unsigned __int8 *)a2 + 1);
      LODWORD(v22) = *((unsigned __int8 *)a3 + 1);
      a4 = v54;
      a6 = v56;
      a5 = v52;
    }
    if (v8)
    {
      uint64_t v36 = v8;
      uint64_t v37 = (uint64_t)a7 >> 1;
      uint64_t v38 = 2 * v21;
      uint64_t v39 = (uint64_t)a6 >> 1;
      uint64_t v40 = 2 * v22;
      int v55 = v37;
      uint64_t v57 = (uint64_t)a5 >> 1;
      uint64_t v53 = (uint64_t)a4 >> 1;
      char v41 = (char *)a3[5] + 2 * v39 + 2 * (int)v22 * (uint64_t)(int)v37;
      uint64_t v42 = (char *)a2[5] + 2 * v53 + 2 * (int)v21 * (uint64_t)(int)v57;
      uint64_t v43 = v8;
      size_t v44 = 2 * v8;
      do
      {
        --v43;
        memcpy(v42, v41, v44);
        v42 += v38;
        v41 += v40;
      }
      while (v43);
      uint64_t v45 = 2 * *((unsigned __int8 *)a2 + 1);
      uint64_t v46 = 2 * *((unsigned __int8 *)a3 + 1);
      int v47 = (char *)a3[6] + 2 * v39 + 2 * *((unsigned __int8 *)a3 + 1) * (uint64_t)v55;
      int v48 = (char *)a2[6] + 2 * v53 + 2 * *((unsigned __int8 *)a2 + 1) * (uint64_t)(int)v57;
      do
      {
        --v36;
        uint64_t result = memcpy(v48, v47, v44);
        v48 += v45;
        v47 += v46;
      }
      while (v36);
    }
  }
  return result;
}

int *sub_1D0D0C790(int *result, int a2)
{
  int v2 = a2;
  int v3 = result;
  unint64_t v4 = (unsigned __int8 *)*((void *)result + 3069);
  uint64_t v5 = *(void *)(*((void *)result + 1855) + 8);
  uint64_t v6 = *(void *)(v5 + 768);
  uint64_t v7 = *(void *)(v5 + 848);
  int v8 = result[6131];
  int v9 = result[6132];
  if ((v9 | v8) < 0 || *(_DWORD *)(v5 + 520) <= v8 || *(_DWORD *)(v5 + 524) <= v9)
  {
    size_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    size_t v10 = (char *)(*(void *)(v5 + 800) + 2 * (v6 * ((uint64_t)v9 >> 3) + (v8 >> 3)));
    uint64_t v11 = (char *)(*(void *)(v5 + 880) + 16 * (v7 * ((uint64_t)v9 >> 2) + (v8 >> 2)));
  }
  int v12 = v4[1];
  int v13 = v8 + v12;
  if (result[4] < v8 + v12) {
    int v13 = result[4];
  }
  int v14 = v9 + v12;
  if (result[5] < v14) {
    int v14 = result[5];
  }
  int v15 = v14 - v9 + 7;
  if (v15 >= 8)
  {
    uint64_t v30 = v7;
    int v16 = v9 - *((_DWORD *)v4 + 2);
    unint64_t v17 = *v4;
    int v18 = v8 - *((_DWORD *)v4 + 1);
    int v19 = (char *)(*((void *)v4 + 12) + 16 * (((uint64_t)v18 >> 2) + (int)(v17 >> 2) * (uint64_t)(v16 >> 2)));
    int v20 = (v13 - v8 + 7) >> 3;
    int v28 = 2 * v20;
    int v29 = 2 * (v15 >> 3);
    unint64_t v21 = (char *)(*((void *)v4 + 11) + 2 * (((uint64_t)v18 >> 3) + (int)(v17 >> 3) * (uint64_t)(v16 >> 3)));
    size_t v22 = 2 * v20;
    if (v15 >> 3 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v15 >> 3;
    }
    uint64_t v24 = 2 * v6;
    do
    {
      memcpy(v10, v21, v22);
      v21 += ((unint64_t)*v4 >> 2) & 0x3E;
      v10 += v24;
      --v23;
    }
    while (v23);
    if (v29 <= 1) {
      int v25 = 1;
    }
    else {
      int v25 = v29;
    }
    int v2 = a2;
    do
    {
      uint64_t result = (int *)memcpy(v11, v19, 16 * v28);
      v19 += (4 * *v4) & 0x3F0;
      v11 += 16 * v30;
      --v25;
    }
    while (v25);
  }
  if (v2)
  {
    char v26 = 0;
    char v27 = 1;
    do
    {
      uint64_t result = (int *)(*((uint64_t (**)(void, void))v3 + 3719))(v4[1], v4[1] >> v26);
      if ((v27 & 1) == 0) {
        break;
      }
      char v27 = 0;
      char v26 = 1;
    }
    while (*(unsigned char *)(*((void *)v3 + 1856) + 201));
  }
  return result;
}

uint64_t sub_1D0D0CA2C(uint64_t result, int a2, int a3, unsigned __int8 a4)
{
  switch(a2)
  {
    case 0:
      if ((((result & 0xF0) != 0) & a4) != 0) {
        int v4 = 15;
      }
      else {
        int v4 = 0;
      }
      if ((((result & 0x1E00) != 0) & a3) != 0) {
        int v5 = 122880;
      }
      else {
        int v5 = 0;
      }
      uint64_t result = v5 | v4 | result;
      break;
    case 1:
      uint64_t result = result & 0xFFFFFF00 | (((result & 0x1E00) != 0) << 8) | 0xF0;
      break;
    case 2:
      if (a3) {
        int v6 = 122880;
      }
      else {
        int v6 = 0;
      }
      uint64_t result = v6 | (((result & 0xF0) != 0) << 8) | result | 0x1E00;
      break;
    case 3:
      uint64_t result = result & 0xFFFE0000 | 0x1FF0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D0D0CAE4(uint64_t a1, int a2, int a3)
{
  int v3 = a2 - 1;
  if (((a2 - 1) | a3) < 0 || (uint64_t v4 = *(void *)(a1 + 8), *(_DWORD *)(v4 + 520) < a2) || *(_DWORD *)(v4 + 524) <= a3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 880) + 16 * (*(void *)(v4 + 848) * ((uint64_t)a3 >> 2) + (v3 >> 2));
  }
  int v6 = a3 - 1;
  if (((a3 - 1) | a2) < 0 || (uint64_t v7 = *(void *)(a1 + 8), *(_DWORD *)(v7 + 520) <= a2) || *(_DWORD *)(v7 + 524) < a3) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(v7 + 880) + 16 * (*(void *)(v7 + 848) * ((uint64_t)v6 >> 2) + (a2 >> 2));
  }
  if ((v6 | v3) < 0 || (uint64_t v9 = *(void *)(a1 + 8), *(_DWORD *)(v9 + 520) < a2) || *(_DWORD *)(v9 + 524) < a3)
  {
    uint64_t v10 = 0;
    if (v5) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 880) + 16 * (*(void *)(v9 + 848) * ((uint64_t)v6 >> 2) + (v3 >> 2));
    if (v5)
    {
LABEL_14:
      BOOL v11 = *(unsigned char *)(v5 + 10) == 1;
      if (v8) {
        goto LABEL_15;
      }
LABEL_20:
      BOOL v12 = 1;
      if (v10) {
        goto LABEL_16;
      }
      goto LABEL_21;
    }
  }
  BOOL v11 = 1;
  if (!v8) {
    goto LABEL_20;
  }
LABEL_15:
  BOOL v12 = *(unsigned __int8 *)(v8 + 10) == 1;
  if (v10)
  {
LABEL_16:
    BOOL v13 = *(unsigned __int8 *)(v10 + 10) == 1;
    goto LABEL_22;
  }
LABEL_21:
  BOOL v13 = 1;
LABEL_22:
  unsigned int v14 = v12 || v13;
  if (v11) {
    return 1;
  }
  else {
    return v14;
  }
}

uint64_t sub_1D0D0CC20(uint64_t result, int a2, int a3, unsigned __int8 *a4, int a5, int a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(result + 14848);
  int v9 = 1 << (*(unsigned char *)(v8 + 2112) - 1);
  int v10 = a5 + a2;
  int v11 = a6 + a3;
  int v12 = a6 + a3 - 1;
  int v13 = *((_DWORD *)a4 + 1);
  if (a2 == v13)
  {
    int v14 = *((_DWORD *)a4 + 2);
    *a7 = *((void *)a4 + 15) + 16 * ((v11 - v14) >> 2);
    uint64_t v15 = *((void *)a4 + 15) + 16 * ((v12 - v14) >> 2);
  }
  else
  {
    if ((word_1D0DBB0A0[(((*(unsigned __int8 *)(v8 + 2117) - 1) & v12) - *(unsigned __int8 *)(v8 + 2117) + 64) >> 2] >> (((*(unsigned __int8 *)(v8 + 2117) - 1) & a2) >> 2)))
    {
      int v14 = *((_DWORD *)a4 + 2);
      int v16 = (v11 - v14) >> 2;
      unint64_t v17 = (unint64_t)*a4 >> 2;
      uint64_t v18 = (uint64_t)(~v13 + a2) >> 2;
      uint64_t v19 = *((void *)a4 + 12) + 16 * (v18 + (int)v17 * (uint64_t)v16);
    }
    else
    {
      uint64_t v19 = 0;
      int v14 = *((_DWORD *)a4 + 2);
      unint64_t v17 = (unint64_t)*a4 >> 2;
      uint64_t v18 = (uint64_t)(~v13 + a2) >> 2;
    }
    *a7 = v19;
    uint64_t v15 = *((void *)a4 + 12) + 16 * (v18 + (int)v17 * (uint64_t)((v12 - v14) >> 2));
  }
  int v20 = v10 - v9;
  a7[1] = v15;
  if (v14 == a3)
  {
    *a8 = *((void *)a4 + 16) + 16 * ((v10 - v13) >> 2);
    a8[1] = *((void *)a4 + 16) + 16 * ((v20 - v13) >> 2);
    uint64_t v21 = *((void *)a4 + 16) + 16 * (((a2 - v13) >> 2) - 1);
  }
  else
  {
    int v22 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2117);
    int v23 = (((v22 - 1) & (v10 - 1)) - v22 + 64) >> 2;
    unsigned int v24 = word_1D0DAE244[((v22 - 1) & a3) >> 2];
    unint64_t v25 = *a4;
    if ((v24 >> v23))
    {
      int v26 = v10 - v13;
      int v27 = ~v14 + a3;
      int v28 = v27 >> 2;
      uint64_t v29 = (uint64_t)v27 >> 2;
      uint64_t v30 = (v25 >> 2) * (uint64_t)v28;
      uint64_t v31 = *((void *)a4 + 12) + 16 * (((uint64_t)v26 >> 2) + v30);
    }
    else
    {
      uint64_t v31 = 0;
      int v32 = ~v14 + a3;
      int v33 = v32 >> 2;
      uint64_t v29 = (uint64_t)v32 >> 2;
      uint64_t v30 = (int)(v25 >> 2) * (uint64_t)v33;
    }
    *a8 = v31;
    a8[1] = *((void *)a4 + 12) + 16 * (v30 + ((v20 - v13) >> 2));
    if (a2 == v13) {
      uint64_t v21 = *((void *)a4 + 15) + 16 * v29;
    }
    else {
      uint64_t v21 = *((void *)a4 + 12) + 16 * (v30 + ((a2 - v13 - v9) >> 2));
    }
  }
  a8[2] = v21;
  return result;
}

uint64_t sub_1D0D0CE3C(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8)
{
  if (*(unsigned char *)(a1 + 824)) {
    return sub_1D0D0CEB0(a1, a2, a3, *(unsigned __int8 **)(a1 + 872), a4, a5, a6, a7, a8);
  }
  uint64_t v9 = *(void *)(a1 + 14840);
  return sub_1D0D5769C(v9, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1D0D0CEB0(uint64_t a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7, int a8, __int32 *a9)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  v18[0] = 0;
  v18[1] = 0;
  memset(v17, 0, sizeof(v17));
  sub_1D0D0CC20(a1, a2, a3, a4, a7, a8, v18, v17);
  return sub_1D0C95660(*(void *)(a1 + 14840), a2, a3, a5, a6, a7, a8, a9, v18, (uint64_t)v17, 1);
}

uint64_t sub_1D0D0CF98(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, uint64_t a7)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  v15[0] = 0;
  v15[1] = 0;
  memset(v14, 0, sizeof(v14));
  sub_1D0D0CC20(a1, a2, a3, a4, a5, a6, v15, v14);
  return sub_1D0C95CB8(*(void *)(a1 + 14840), a2, a3, a5, a6, a7, 5u, v15, v14, 1);
}

uint64_t sub_1D0D0D064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5, unsigned __int8 **a6, unsigned int a7, int *a8, char *a9, int a10)
{
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  v554[1] = *MEMORY[0x1E4F143B8];
  v515 = (int *)(a1 + 24524);
  uint64_t v15 = *(void *)(a1 + 14848);
  char v16 = *(unsigned char *)(v15 + 2113) - a4;
  int v519 = *(unsigned __int8 *)(v15 + 2113) - a4;
  char v17 = v16 - 1;
  int v529 = 1 << v16;
  BOOL v518 = (1 << v16) + (int)a2 <= *(_DWORD *)(a1 + 16) && (1 << v16) + (int)a3 <= *(_DWORD *)(a1 + 20);
  int v532 = 1 << v17;
  uint64_t v526 = (int)a4;
  uint64_t v537 = (int)a4 + 1;
  int v522 = *(unsigned __int8 *)(v15 + 2112);
  sub_1D0D0BD28(a1, *a5, a2, a3, a4, a10);
  sub_1D0D0BD28(a1, *a6, v13, v12, a4, a10);
  v533 = (void ***)a6;
  *((_WORD *)*a6 + 115) = a10;
  v531 = a5;
  uint64_t v18 = *a5;
  *((_WORD *)v18 + 115) = a10;
  uint64_t v539 = v12;
  uint64_t v540 = v13;
  if ((int)a4 >= 1)
  {
    int v19 = v12;
    int v21 = *v515;
    int v20 = v515[1];
    int v22 = v13 - *v515;
    int v23 = v19 - v20;
    unint64_t v24 = *v18;
    unint64_t v25 = v24 >> 3;
    int v26 = v13;
    unint64_t v27 = v24 >> 2;
    int v527 = *v18;
    if (v26 == *v515)
    {
      memcpy(*((void **)v18 + 13), (const void *)(*(void *)(a1 + 24800) + 2 * (v23 >> 3)), 2 * v25);
      memcpy(*((void **)v18 + 15), (const void *)(*(void *)(a1 + 24816) + 16 * (v23 >> 2)), 16 * v27 + 32);
      if (v19 == v20) {
        uint64_t v28 = *(void *)(a1 + 24824);
      }
      else {
        uint64_t v28 = *(void *)(a1 + 24816) + 16 * ((uint64_t)v23 >> 2);
      }
      uint64_t v48 = *((void *)v18 + 16);
      uint64_t v49 = *(void *)(v28 - 16);
      *(void *)(v48 - 10) = *(void *)(v28 - 10);
      *(void *)(v48 - 16) = v49;
    }
    else
    {
      int v29 = v26 - 1;
      int v30 = v26 - 1 - v21;
      int v31 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
      int v32 = v31 - a4;
      while (v22 >> v32 != v30 >> v32)
      {
        BOOL v100 = v32++ < v31;
        if (!v100)
        {
          int v33 = -1;
          goto LABEL_14;
        }
      }
      int v33 = v31 - v32;
      if (v33 < (int)a4) {
        ++v33;
      }
LABEL_14:
      int v34 = *(unsigned __int8 **)(a1
                                + 32 * v33
                                + 8
                                * ((v30 >> (v31 - v33)) & 1 | (2 * ((v23 >> (v31 - v33)) & 1)))
                                + 24552);
      unint64_t v35 = *v34;
      if (v24 >= 8)
      {
        uint64_t v36 = 0;
        uint64_t v37 = (_WORD *)(*((void *)v34 + 11)
                      + 2
                      * (((uint64_t)(v29 - *((_DWORD *)v34 + 1)) >> 3)
                       + (int)(v35 >> 3) * (uint64_t)(((int)v539 - *((_DWORD *)v34 + 2)) >> 3)));
        if (v25 <= 1) {
          unsigned int v38 = 1;
        }
        else {
          unsigned int v38 = v24 >> 3;
        }
        uint64_t v39 = 2 * v38;
        do
        {
          *(_WORD *)(*((void *)v18 + 13) + v36) = *v37;
          LODWORD(v35) = *v34;
          v37 += v35 >> 3;
          v36 += 2;
        }
        while (v39 != v36);
      }
      uint64_t v40 = (uint64_t *)(*((void *)v34 + 12)
                      + 16
                      * (((uint64_t)(v29 - *((_DWORD *)v34 + 1)) >> 2)
                       + (v35 >> 2) * (uint64_t)(((int)v539 - *((_DWORD *)v34 + 2)) >> 2)));
      if (v24 >= 4)
      {
        uint64_t v41 = 0;
        if (v27 <= 1) {
          unsigned int v42 = 1;
        }
        else {
          unsigned int v42 = v24 >> 2;
        }
        uint64_t v43 = 16 * v42;
        do
        {
          size_t v44 = (void *)(*((void *)v18 + 15) + v41);
          uint64_t v45 = *v40;
          *(void *)((char *)v44 + 6) = *(uint64_t *)((char *)v40 + 6);
          *size_t v44 = v45;
          uint64_t v40 = (uint64_t *)((char *)v40 + ((4 * *v34) & 0x3F0));
          v41 += 16;
        }
        while (v43 != v41);
      }
      if ((a7 & 0xF) != 0)
      {
        uint64_t v46 = (void *)(*((void *)v18 + 15) + 16 * v27);
        uint64_t v47 = *v40;
        *(void *)((char *)v46 + 6) = *(uint64_t *)((char *)v40 + 6);
        *uint64_t v46 = v47;
      }
      else
      {
        uint64_t v50 = (void *)(*((void *)v18 + 15) + 16 * v27);
        uint64_t v51 = *(void *)(a1 + 24536);
        *(void *)((char *)v50 + 6) = *(void *)(a1 + 24542);
        void *v50 = v51;
      }
    }
    size_t v52 = (2 * v25);
    if (v539 == v20)
    {
      memcpy(*((void **)v18 + 14), (const void *)(*(void *)(a1 + 24808) + 2 * (v22 >> 3)), v52);
      memcpy(*((void **)v18 + 16), (const void *)(*(void *)(a1 + 24824) + 16 * (v22 >> 2)), (16 * v27 + 32));
      uint64_t v13 = v540;
      BOOL v262 = v540 == v21;
      uint64_t v12 = v539;
      if (!v262)
      {
        uint64_t v53 = *(void *)(a1 + 24824) + 16 * ((uint64_t)v22 >> 2);
        uint64_t v54 = *((void *)v18 + 16);
        uint64_t v55 = *(void *)(v53 - 16);
        *(void *)(v54 - 10) = *(void *)(v53 - 10);
        *(void *)(v54 - 16) = v55;
      }
    }
    else
    {
      int v56 = v539 - 1;
      int v57 = v515[1];
      int v58 = v539 - v57;
      int v59 = v539 - 1 - v57;
      int v60 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
      int v61 = v60 - a4;
      while (v58 >> v61 != v59 >> v61)
      {
        BOOL v100 = v61++ < v60;
        if (!v100)
        {
          int v62 = -1;
          goto LABEL_40;
        }
      }
      int v62 = v60 - v61;
      if (v60 - v61 < (int)a4) {
        ++v62;
      }
LABEL_40:
      int v63 = *(unsigned __int8 **)(a1
                                + 32 * v62
                                + 8
                                * (((v540 - *v515) >> (v60 - v62)) & 1 | (2
                                                                                      * ((v59 >> (v60 - v62)) & 1)))
                                + 24552);
      memcpy(*((void **)v18 + 14), (const void *)(*((void *)v63 + 11)+ 2* (((uint64_t)((int)v540 - *((_DWORD *)v63 + 1)) >> 3)+ ((unint64_t)*v63 >> 3) * ((v56 - *((_DWORD *)v63 + 2)) >> 3))), v52);
      int v64 = (const void *)(*((void *)v63 + 12)
                         + 16
                         * (((uint64_t)((int)v540 - *((_DWORD *)v63 + 1)) >> 2)
                          + ((unint64_t)*v63 >> 2) * ((v56 - *((_DWORD *)v63 + 2)) >> 2)));
      uint64_t v65 = v27;
      size_t v66 = 16 * v27;
      uint64_t v13 = v540;
      memcpy(*((void **)v18 + 16), v64, v66);
      BOOL v262 = v540 == v21;
      uint64_t v12 = v539;
      if (!v262)
      {
        int v67 = v515[1];
        int v68 = v539 - v67;
        int v69 = v540 - 1 - *v515;
        int v70 = v56 - v67;
        int v71 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
        int v72 = v71 - a4;
        while (((int)v540 - *v515) >> v72 != v69 >> v72 || v68 >> v72 != v70 >> v72)
        {
          BOOL v100 = v72++ < v71;
          if (!v100)
          {
            int v73 = -1;
            goto LABEL_48;
          }
        }
        int v73 = v71 - v72;
        if (v71 - v72 < (int)a4) {
          ++v73;
        }
LABEL_48:
        int v74 = *(unsigned __int8 **)(a1
                                  + 32 * v73
                                  + 8
                                  * ((v69 >> (v71 - v73)) & 1 | (2
                                                                             * ((v70 >> (v71 - v73)) & 1)))
                                  + 24552);
        uint64_t v75 = (uint64_t *)(*((void *)v74 + 12)
                        + 16
                        * (((uint64_t)((int)v540 - 1 - *((_DWORD *)v74 + 1)) >> 2)
                         + ((unint64_t)*v74 >> 2) * ((v56 - *((_DWORD *)v74 + 2)) >> 2)));
        uint64_t v76 = *((void *)v18 + 16);
        uint64_t v77 = *v75;
        *(void *)(v76 - 10) = *(uint64_t *)((char *)v75 + 6);
        *(void *)(v76 - 16) = v77;
      }
      if ((a7 & 0x1E000) != 0)
      {
        int v78 = v515[1];
        int v79 = v539 - v78;
        int v80 = v527 + v540 - *v515;
        int v81 = v56 - v78;
        int v82 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
        int v83 = v82 - a4;
        while (((int)v540 - *v515) >> v83 != v80 >> v83 || v79 >> v83 != v81 >> v83)
        {
          BOOL v100 = v83++ < v82;
          if (!v100)
          {
            int v84 = -1;
            goto LABEL_58;
          }
        }
        int v84 = v82 - v83;
        if (v82 - v83 < (int)a4) {
          ++v84;
        }
LABEL_58:
        int v88 = *(unsigned __int8 **)(a1
                                  + 32 * v84
                                  + 8
                                  * ((v80 >> (v82 - v84)) & 1 | (2
                                                                             * ((v81 >> (v82 - v84)) & 1)))
                                  + 24552);
        int v89 = (uint64_t *)(*((void *)v88 + 12)
                        + 16
                        * (((uint64_t)(v527 + (int)v540 - *((_DWORD *)v88 + 1)) >> 2)
                         + ((unint64_t)*v88 >> 2) * ((v56 - *((_DWORD *)v88 + 2)) >> 2)));
        uint64_t v87 = *v89;
        uint64_t v86 = *(uint64_t *)((char *)v89 + 6);
        int v85 = (void *)(*((void *)v18 + 16) + 16 * v65);
      }
      else
      {
        int v85 = (void *)(*((void *)v18 + 16) + 16 * v65);
        uint64_t v86 = *(void *)(a1 + 24542);
        uint64_t v87 = *(void *)(a1 + 24536);
      }
      *(void *)((char *)v85 + 6) = v86;
      *int v85 = v87;
    }
  }
  for (uint64_t i = 0; i != 32; i += 8)
  {
    int v91 = &v542[i + 1];
    v91[38] = 0;
    *((void *)v91 + 16) = 0;
    *((void *)v91 + 17) = 0;
    *((void *)v91 + 18) = -1;
    *((_WORD *)v91 + 78) = 0;
  }
  DWORD2(v548) = 0;
  int64x2_t v547 = 0uLL;
  *(void *)&long long v548 = -1;
  WORD6(v548) = 2;
  DWORD2(v550) = 0;
  int64x2_t v549 = 0uLL;
  *(void *)&long long v550 = -1;
  WORD6(v550) = 0;
  v542[0] = *a8;
  int v92 = *a9;
  char v541 = *a9;
  uint64_t v93 = *(void *)(a1 + 14856);
  uint64_t v94 = v526;
  BOOL v95 = v518;
  if (*(unsigned char *)(v93 + 12))
  {
    int v96 = *(_DWORD *)(v93 + 1636);
    BOOL v512 = v519 >= v96;
    BOOL v514 = v519 == v96;
  }
  else
  {
    BOOL v512 = 0;
    BOOL v514 = 0;
  }
  uint64_t v97 = *(void *)(a1 + 968);
  int v98 = a10;
  int v528 = *(unsigned __int8 *)(v97 + 537);
  if (v518)
  {
    int v99 = *(_DWORD *)(a1 + 220);
    BOOL v100 = v519 <= v522 || *(_DWORD *)(a1 + 224) <= (int)a4;
    BOOL v101 = !v100;
    BOOL v102 = v99 <= (int)a4;
    if (v99 <= (int)a4 && v101)
    {
      if (*(unsigned char *)(v97 + 534))
      {
        BOOL v103 = *(unsigned __int8 **)(a1 + 14848);
        uint64_t v104 = v103[2113] - (uint64_t)(int)a4;
        if ((int)v104 <= v103[2112])
        {
          int v112 = 0;
        }
        else if (*(unsigned char *)(*(void *)(a1 + 14840) + 58) == 2)
        {
          int v105 = *(_DWORD *)(a1 + 24) + v103[2097];
          int v106 = word_1D0DA5254[2 * (6 - v104) + 1] + v105 * word_1D0DA5254[2 * (6 - v104)];
          unsigned int v107 = v106 & ~(v106 >> 31);
          int v108 = (__int16 *)((char *)&unk_1D0DA5260 + 4 * (6 - v104));
          int v109 = *v108;
          int v110 = v108[1];
          int v111 = sub_1D0D251F8(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 976) + 184), *(void *)(*(void *)(a1 + 976) + 4920), v13, v12, v104, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
          if (v111 * v111 >= v107)
          {
            if (v111 * v111 > ((v110 + v105 * v109) & ~((v110 + v105 * v109) >> 31))) {
              int v112 = 1;
            }
            else {
              int v112 = 2;
            }
          }
          else
          {
            int v112 = 0;
          }
          uint64_t v94 = v526;
          BOOL v95 = v518;
        }
        else
        {
          int v112 = 2;
        }
        BOOL v102 = v112 != 1;
        BOOL v101 = v112 != 0;
      }
      else
      {
        BOOL v101 = 1;
        BOOL v102 = 1;
      }
    }
  }
  else
  {
    BOOL v102 = 0;
    BOOL v101 = 1;
  }
  BOOL v113 = v101;
  uint64_t v114 = sub_1D0CE07F0(a1 + 1592, v13, v12, v529);
  int v115 = v113;
  uint64_t v116 = v114;
  if (!v102 || !v113 || !v114 || (uint64_t v117 = *(void *)(a1 + 968), !*(unsigned char *)(v117 + 532)))
  {
    int v513 = v95 && !v102;
    if (!v102)
    {
      int v119 = 0;
      int v118 = v528;
      goto LABEL_109;
    }
    uint64_t v117 = *(void *)(a1 + 968);
    goto LABEL_105;
  }
  if (!*(void *)(v114 + 128))
  {
    int v513 = 0;
LABEL_105:
    int v118 = v528;
    goto LABEL_106;
  }
  int v118 = v528;
  if (*(unsigned char *)(v114 + 136) && *(void *)(v114 + 8))
  {
    int v119 = 0;
    unint64_t v120 = *(void *)(v114 + 112) + (*(void *)(v114 + 112) >> 4);
    unint64_t v121 = *(void *)(*(void *)(v114 + 88) + 16);
    BOOL v122 = v120 >= v121;
    int v123 = v120 < v121 && v95;
    int v513 = v123;
    if (!v122)
    {
      int v115 = 1;
      goto LABEL_109;
    }
    int v513 = 0;
  }
  else
  {
    int v513 = 0;
  }
LABEL_106:
  if (*(_DWORD *)(v117 + 96) == 36) {
    int v115 = 0;
  }
  int v119 = 1;
LABEL_109:
  v509 = (unsigned int *)(a1 + 4 * v94 + 27648);
  unsigned int *v509 = -1;
  *(unsigned char *)(a1 + 812) = 0;
  uint64_t v520 = v114;
  if (v95 && *(unsigned char *)(a1 + 813))
  {
    int v124 = v115;
    int v125 = sub_1D0D3A85C(*(_DWORD **)(a1 + 992), v13, v12, v529);
    if (v125 == 1)
    {
      int v291 = *(_DWORD *)(a1 + 224);
      int v115 = v291 > (int)a4;
      int v126 = v291 <= (int)a4;
      uint64_t v116 = v520;
      int v118 = v528;
      if (!v528) {
        goto LABEL_121;
      }
      goto LABEL_117;
    }
    int v126 = v119;
    uint64_t v116 = v520;
    int v115 = v124;
    int v118 = v528;
    if (!v125)
    {
      int v115 = 0;
      int v126 = 1;
      *(unsigned char *)(a1 + 812) = 1;
      if (!v528) {
        goto LABEL_121;
      }
      goto LABEL_117;
    }
  }
  else
  {
    int v126 = v119;
  }
  if (!v118) {
    goto LABEL_121;
  }
LABEL_117:
  uint64_t v127 = a1 + 32 * v94;
  *(_OWORD *)(v127 + 32) = 0u;
  *(_OWORD *)(v127 + 48) = 0u;
  if (v126) {
    char v128 = 0x80;
  }
  else {
    char v128 = 0;
  }
  *(unsigned char *)(v127 + 58) = v128 & 0x80 | *(unsigned char *)(v127 + 58) & 0x7F;
LABEL_121:
  if (v512)
  {
    int v129 = v115;
    int v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 984))(v13, v12, a4, a1);
    int v98 = v130;
    unint64_t v131 = ((uint64_t)((int)v13 - *((_DWORD *)*v533 + 1)) >> 3)
         + ((unint64_t)*(unsigned __int8 *)*v533 >> 3) * (((int)v12 - *((_DWORD *)*v533 + 2)) >> 3);
    *((_WORD *)(*v533)[11] + v131) = ((_WORD)v130 << 9) | *((_WORD *)(*v533)[11] + v131) & 0x1FF;
    unint64_t v132 = ((uint64_t)((int)v13 - *((_DWORD *)*v531 + 1)) >> 3)
         + ((unint64_t)**v531 >> 3) * (((int)v12 - *((_DWORD *)*v531 + 2)) >> 3);
    *(_WORD *)(*((void *)*v531 + 11) + 2 * v132) = ((_WORD)v130 << 9) | *(_WORD *)(*((void *)*v531 + 11) + 2 * v132) & 0x1FF;
    int v133 = *(_DWORD *)(a1 + 12);
    if (v133 == 5 || v133 == 3)
    {
      *((_WORD *)*v533 + 115) = v130;
      *((_WORD *)*v531 + 115) = v130;
      if (!a4) {
        *(_DWORD *)(a1 + 28) = v130;
      }
    }
    else if (v133 < 2)
    {
LABEL_129:
      BOOL v508 = 1;
      uint64_t v116 = v520;
      int v115 = v129;
      goto LABEL_130;
    }
    sub_1D0D3C9DC(a1 + 1000, v130, *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2097));
    goto LABEL_129;
  }
  BOOL v508 = v92 != 0;
LABEL_130:
  int v134 = *v533;
  *((_DWORD *)v134 + 3) = v98;
  BOOL v135 = *v531;
  *((_DWORD *)v135 + 3) = v98;
  *((_DWORD *)v134 + 4) = *a8;
  *((_DWORD *)v135 + 4) = *a8;
  *((_DWORD *)v134 + 5) = *a8;
  *((_DWORD *)v135 + 5) = *a8;
  uint64_t v136 = *(void *)(a1 + 14840);
  int v538 = v98;
  if (*(unsigned char *)(v136 + 5264) && ((v126 ^ 1) & 1) == 0 && ((v115 ^ 1) & 1) == 0)
  {
    int v516 = v115;
    int v523 = v126;
    LODWORD(v551) = *(char *)(*(void *)(v136 + 5320) + 648);
    *(void *)((char *)&v551 + 4) = __PAIR64__(v98, a4);
    uint64_t v137 = *(void *)(a1 + 976);
    int v138 = *(_DWORD *)(v137 + 4728);
    int v139 = v138 >> 3;
    int v140 = v13;
    uint64_t v141 = (uint64_t)v138 >> 3;
    int v142 = 1 << (*(unsigned char *)(*(void *)(*(void *)(v137 + 2232) + 40) + 2113) - a4 - 3);
    int v143 = (*(_DWORD *)(v137 + 4732) - (int)v12) >> 3;
    if (v143 >= v142) {
      uint64_t v144 = v142;
    }
    else {
      uint64_t v144 = v143;
    }
    int v145 = (v138 - v140) >> 3;
    if (v145 >= v142) {
      uint64_t v146 = v142;
    }
    else {
      uint64_t v146 = v145;
    }
    uint64_t v147 = *(void *)(v137 + 4920) + 4 * v139 * (uint64_t)((int)v12 >> 3) + 4 * (v140 >> 3);
    int v148 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 184))(v147, v141, v146, v144);
    unsigned int v149 = v144 * v146;
    unsigned int v150 = (v144 * v146) >> 1;
    unsigned int v151 = (v148 + (v149 >> 1)) / v149;
    if (((v146 | v144) & 3) != 0)
    {
      if ((int)v144 < 1)
      {
        unsigned int v153 = 0;
        uint64_t v160 = 0;
        int v161 = v540;
      }
      else
      {
        uint64_t v152 = 0;
        unsigned int v153 = 0;
        uint64_t v154 = 4 * v141;
        unsigned int v155 = (int *)v147;
        do
        {
          uint64_t v156 = v155;
          uint64_t v157 = v146;
          if ((int)v146 >= 1)
          {
            do
            {
              int v158 = *v156++;
              v153 += v158;
              --v157;
            }
            while (v157);
          }
          ++v152;
          unsigned int v155 = (int *)((char *)v155 + v154);
        }
        while (v152 != v144);
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        int v161 = v540;
        do
        {
          int v162 = (int *)v147;
          uint64_t v163 = v146;
          if ((int)v146 >= 1)
          {
            do
            {
              int v164 = *v162++;
              v160 += (v164 * v164);
              --v163;
            }
            while (v163);
          }
          ++v159;
          v147 += v154;
        }
        while (v159 != v144);
      }
      uint64_t v167 = v160 - (uint64_t)(((uint64_t)(int)v149 >> 1) + v153 * (unint64_t)v153) / (int)v149;
    }
    else
    {
      int v165 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 176);
      unsigned int v166 = (v148 + (v149 >> 1)) / v149;
      uint64_t v167 = v165(v147, v141, v146, v144);
      unsigned int v150 = v149 >> 1;
      unsigned int v151 = v166;
      int v161 = v540;
    }
    HIDWORD(v551) = v151;
    LODWORD(v552) = (uint64_t)((sqrt((double)v167) + (double)v150) / (double)v149);
    uint64_t v168 = *(void *)(a1 + 976);
    int v169 = *(unsigned __int8 *)(*(void *)(*(void *)(v168 + 2232) + 40) + 2113) - a4;
    int v170 = *(_DWORD *)(v168 + 5456);
    if (v170 > v169) {
      LOBYTE(v169) = *(_DWORD *)(v168 + 5456);
    }
    if (v170 <= 3) {
      char v171 = 3;
    }
    else {
      char v171 = *(_DWORD *)(v168 + 5456);
    }
    char v172 = v171 - 3;
    int v173 = 1 << (v169 - v170);
    int v174 = (*(_DWORD *)(v168 + 4732) - (int)v539) >> v170;
    if (v174 >= v173) {
      uint64_t v175 = v173;
    }
    else {
      uint64_t v175 = v174;
    }
    int v176 = (*(_DWORD *)(v168 + 4728) - v161) >> v170;
    if (v176 >= v173) {
      uint64_t v177 = v173;
    }
    else {
      uint64_t v177 = v176;
    }
    uint64_t v178 = *(void *)(v168 + 5368) + 4 * *(void *)(v168 + 5416) * ((int)v539 >> v170) + 4 * (v161 >> v170);
    unsigned int v179 = (v175 << v172) * (v177 << v172);
    unsigned int v180 = ((*(unsigned int (**)(uint64_t))(v168 + 184))(v178) + (v179 >> 1)) / v179;
    if (((v177 | v175) & 3) != 0)
    {
      if ((int)v175 < 1)
      {
        unsigned int v182 = 0;
        uint64_t v189 = 0;
      }
      else
      {
        uint64_t v181 = 0;
        unsigned int v182 = 0;
        uint64_t v183 = 4 * *(void *)(v168 + 5416);
        int v184 = (int *)v178;
        do
        {
          char v185 = v184;
          uint64_t v186 = v177;
          if ((int)v177 >= 1)
          {
            do
            {
              int v187 = *v185++;
              v182 += v187;
              --v186;
            }
            while (v186);
          }
          ++v181;
          int v184 = (int *)((char *)v184 + v183);
        }
        while (v181 != v175);
        uint64_t v188 = 0;
        uint64_t v189 = 0;
        do
        {
          uint64_t v190 = (int *)v178;
          uint64_t v191 = v177;
          if ((int)v177 >= 1)
          {
            do
            {
              int v192 = *v190++;
              v189 += (v192 * v192);
              --v191;
            }
            while (v191);
          }
          ++v188;
          v178 += v183;
        }
        while (v188 != v175);
      }
      uint64_t v196 = v189
           - (uint64_t)(((uint64_t)((int)v175 * (int)v177) >> 1) + v182 * (unint64_t)v182)
           / ((int)v175
            * (int)v177);
    }
    else
    {
      unsigned int v193 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 176);
      uint64_t v194 = *(void *)(v168 + 5416);
      unsigned int v195 = v180;
      uint64_t v196 = v193(v178, v194, v177, v175);
      unsigned int v180 = v195;
    }
    DWORD1(v552) = v180;
    DWORD2(v552) = (uint64_t)((sqrt((double)v196) + (double)(v179 >> 1)) / (double)v179);
    uint64_t v197 = *(void *)(a1 + 976);
    int v198 = *(unsigned __int8 *)(*(void *)(*(void *)(v197 + 2232) + 40) + 2113) - a4;
    int v199 = *(_DWORD *)(v197 + 5456);
    if (v199 > v198) {
      LOBYTE(v198) = *(_DWORD *)(v197 + 5456);
    }
    if (v199 <= 3) {
      char v200 = 3;
    }
    else {
      char v200 = *(_DWORD *)(v197 + 5456);
    }
    char v201 = v200 - 3;
    int v202 = 1 << (v198 - v199);
    int v203 = (*(_DWORD *)(v197 + 4732) - (int)v539) >> v199;
    if (v203 >= v202) {
      uint64_t v204 = v202;
    }
    else {
      uint64_t v204 = v203;
    }
    int v205 = (*(_DWORD *)(v197 + 4728) - (int)v540) >> v199;
    if (v205 >= v202) {
      uint64_t v206 = v202;
    }
    else {
      uint64_t v206 = v205;
    }
    uint64_t v207 = *(void *)(v197 + 5432) + 4 * *(void *)(v197 + 5416) * ((int)v539 >> v199) + 4 * ((int)v540 >> v199);
    unsigned int v208 = (v204 << v201) * (v206 << v201);
    unsigned int v209 = ((*(unsigned int (**)(uint64_t))(v197 + 184))(v207) + (v208 >> 1)) / v208;
    if (((v206 | v204) & 3) != 0)
    {
      if ((int)v204 < 1)
      {
        unsigned int v211 = 0;
        uint64_t v218 = 0;
        int v219 = v523;
      }
      else
      {
        uint64_t v210 = 0;
        unsigned int v211 = 0;
        uint64_t v212 = 4 * *(void *)(v197 + 5416);
        v213 = (int *)v207;
        do
        {
          v214 = v213;
          uint64_t v215 = v206;
          if ((int)v206 >= 1)
          {
            do
            {
              int v216 = *v214++;
              v211 += v216;
              --v215;
            }
            while (v215);
          }
          ++v210;
          v213 = (int *)((char *)v213 + v212);
        }
        while (v210 != v204);
        uint64_t v217 = 0;
        uint64_t v218 = 0;
        int v219 = v523;
        do
        {
          v220 = (int *)v207;
          uint64_t v221 = v206;
          if ((int)v206 >= 1)
          {
            do
            {
              int v222 = *v220++;
              v218 += (v222 * v222);
              --v221;
            }
            while (v221);
          }
          ++v217;
          v207 += v212;
        }
        while (v217 != v204);
      }
      uint64_t v226 = v218
           - (uint64_t)(((uint64_t)((int)v204 * (int)v206) >> 1) + v211 * (unint64_t)v211)
           / ((int)v204
            * (int)v206);
      uint64_t v12 = v539;
    }
    else
    {
      v223 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v197 + 176);
      uint64_t v224 = *(void *)(v197 + 5416);
      unsigned int v225 = v209;
      uint64_t v226 = v223(v207, v224, v206, v204);
      unsigned int v209 = v225;
      uint64_t v12 = v539;
      int v219 = v523;
    }
    HIDWORD(v552) = v209;
    int v553 = (uint64_t)((sqrt((double)v226) + (double)(v208 >> 1)) / (double)v208);
    uint64_t v136 = *(void *)(a1 + 14840);
    uint64_t v227 = *(void *)(*(void *)(*(void *)(v136 + 5320) + 576) + 336);
    uint64_t v228 = *(void *)(*(void *)(*(void *)(v136 + 5320) + 576) + 344);
    uint64_t v229 = v228 - v227;
    int v98 = v538;
    if (v228 == v227)
    {
      double v232 = 0.0;
      uint64_t v13 = v540;
    }
    else
    {
      uint64_t v230 = 0;
      unint64_t v231 = v229 >> 5;
      if (v231 <= 1) {
        unint64_t v231 = 1;
      }
      double v232 = 0.0;
      uint64_t v13 = v540;
      do
      {
        uint64_t v233 = *(void *)(v227 + 32 * v230 + 8);
        if (*(unsigned char *)(v233 + 56))
        {
          LODWORD(v234) = 0;
        }
        else
        {
          uint64_t v234 = 0;
          do
          {
            v235 = (int *)(v233 + 72 * v234);
            v236 = v235 + 8;
            if (*((double *)v235 + 5) <= (double)*((int *)&v551 + *v235)) {
              v236 = (char *)v235 + 33;
            }
            v237 = v235 + 15;
            v238 = v235 + 16;
            if (*v236) {
              v238 = v237;
            }
            uint64_t v234 = *v238;
          }
          while (!*(unsigned char *)(v233 + 72 * (int)v234 + 56));
        }
        double v232 = v232 + *(double *)(v233 + 72 * (int)v234 + 48);
        ++v230;
      }
      while (v230 != v231);
    }
    float v239 = 1.0 / (exp(-v232) + 1.0);
    BOOL v240 = v239 < 0.85;
    if (v239 > 0.25) {
      int v115 = v516;
    }
    else {
      int v115 = 0;
    }
    if (v239 <= 0.25) {
      BOOL v240 = 1;
    }
    int v126 = v240 & v219;
    uint64_t v116 = v520;
  }
  int v517 = 0;
  v241 = (_DWORD *)(a1 + 4 * v94 + 27668);
  _DWORD *v241 = 0;
  v242 = (unsigned char *)(a1 + v94);
  v242[27664] = 0;
  v242[205] = *(unsigned char *)(a1 + 204);
  v242[27685] = 0;
  *(_DWORD *)(a1 + 212) = 0;
  if (*(unsigned char *)(v136 + 5432) && v126)
  {
    if (v98 > *(char *)(v136 + 653)) {
      goto LABEL_254;
    }
    uint64_t v243 = *(void *)(a1 + 976);
    int v244 = *(unsigned __int8 *)(*(void *)(v136 + 16) + 2113) - a4;
    int v245 = *(unsigned __int8 *)(*(void *)(*(void *)(v243 + 2232) + 40) + 2096);
    if (v244 == 34)
    {
      int v246 = 0;
    }
    else
    {
      int v247 = 0;
      int v246 = 0;
      int v248 = 1 << (v244 - 3);
      int v249 = *(int *)(v243 + 4728) >> 3;
      uint64_t v250 = *(void *)(v243 + 4848) + 4 * v249 * ((int)v12 >> 3) + 4 * ((int)v13 >> 3);
      if (v248 <= 1) {
        int v248 = 1;
      }
      uint64_t v251 = 4 * v249;
      do
      {
        uint64_t v252 = 0;
        do
        {
          v246 += *(_DWORD *)(v250 + v252);
          v252 += 4;
        }
        while (4 * v248 != v252);
        ++v247;
        v250 += v251;
      }
      while (v247 != v248);
    }
    if (v245 == 10) {
      LOBYTE(v244) = v244 + 1;
    }
    uint64_t v253 = *(unsigned int *)(*(void *)(v136 + 5320)
                           + 4 * ((v246 + (1 << (2 * v244 - 1))) >> (2 * v244) >> 4)
                           + 152);
    if (v253 > 0x1F)
    {
LABEL_254:
      int v517 = 0;
    }
    else
    {
      int v254 = dword_1D0DA51D4[v253];
      int v255 = v254 + 3;
      int v256 = v98 - (v254 + 3);
      int v257 = v254 - 3 - v98;
      BOOL v258 = v254 - 3 < v98 && v98 <= v254 + 3;
      int v259 = v254 + 6;
      BOOL v260 = v98 >= v254 - 6 && v254 - 3 > v98;
      BOOL v261 = v98 > v259 || v98 <= v255;
      int v517 = v258;
      *(_DWORD *)(a1 + 212) = v258;
      BOOL v262 = v261 && !v260;
      if (!v262)
      {
        if (v260) {
          int v256 = v257;
        }
        int v517 = v256 + 1;
        *(_DWORD *)(a1 + 212) = v256 + 1;
      }
    }
  }
  int v511 = *(_DWORD *)(a1 + 4);
  if (v126)
  {
    if (*(unsigned char *)(a1 + 197))
    {
      unsigned int v263 = 257;
    }
    else
    {
      if (*(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4 != 3
        || *(unsigned __int8 *)(v136 + 58) > 1u)
      {
        goto LABEL_264;
      }
      unsigned int v264 = *v509;
      if (!*(unsigned char *)(*(void *)(a1 + 968) + 227))
      {
        v264 &= 0xFFFFFFF9;
        *v241 |= 6u;
      }
      unsigned int v263 = v264 & 0xFFFFFFF7;
    }
    unsigned int *v509 = v263;
LABEL_264:
    if (*(unsigned __int8 *)(v136 + 58) <= 1u)
    {
      int v265 = v115;
      if (*(unsigned char *)(a1 + 812) || *(_DWORD *)(*(void *)(v136 + 4760) + 96) == 36) {
        unsigned int *v509 = 256;
      }
      sub_1D0D18D5C(a1, v13, v12, a4, v531, v533, a7, 0);
      uint64_t v116 = v520;
      int v115 = v265;
    }
    if (!*(unsigned char *)(a1 + 196)
      && *((unsigned char *)(*v533)[12]
         + 16 * ((uint64_t)((int)v13 - *((_DWORD *)*v533 + 1)) >> 2)
         + 16 * ((unint64_t)*(unsigned __int8 *)*v533 >> 2) * (((int)v12 - *((_DWORD *)*v533 + 2)) >> 2)
         + 10) == 2)
    {
      int v115 = 0;
    }
  }
  uint64_t v266 = *(void *)(a1 + 968);
  v267 = (unsigned char *)(v266 + 500);
  if (*(unsigned char *)(v266 + 530)) {
    int v268 = v126;
  }
  else {
    int v268 = 0;
  }
  if ((v268 & v115 & (v116 != 0)) != 0) {
    v269 = (unsigned char *)(v116 + 136);
  }
  else {
    v269 = v267;
  }
  int v270 = *v269;
  if (!*v269)
  {
    if (v126)
    {
      int v273 = v115;
      if (*(int *)(a1 + 12) >= 2) {
        sub_1D0D3C9DC(a1 + 1000, v98, *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2097));
      }
      v274 = v533;
      int v275 = sub_1D0D13324(a1, v13, v12, a4, a7, v531, v533, 0);
      uint64_t v116 = v520;
      int v115 = v273;
      int v118 = v528;
    }
    else
    {
      int v275 = 0;
      v274 = v533;
    }
    int v521 = *((_DWORD *)*v274 + 4);
    if (v118)
    {
      uint64_t v277 = a1 + 32 * v94;
      v276 = *v274;
      char v278 = *(unsigned char *)(v277 + 58) & 0xE7 | (8
                                           * (*((unsigned char *)v276[12]
                                              + 16 * ((uint64_t)((int)v13 - *((_DWORD *)v276 + 1)) >> 2)
                                              + 16
                                              * ((unint64_t)*(unsigned __int8 *)v276 >> 2)
                                              * (((int)v12 - *((_DWORD *)v276 + 2)) >> 2)
                                              + 10) & 3));
      *(unsigned char *)(v277 + 58) = v278;
      *(unsigned char *)(v277 + 58) = v278 & 0xF8 | (*((unsigned __int16 *)(*v274)[11]
                                             + ((uint64_t)((int)v13 - *((_DWORD *)*v274 + 1)) >> 3)
                                             + ((unint64_t)*(unsigned __int8 *)*v274 >> 3)
                                             * (((int)v12 - *((_DWORD *)*v274 + 2)) >> 3)) >> 4) & 7;
      *(void *)(v277 + 40) = (*v274)[4 * (v511 > 2) + 23];
      uint64_t v279 = *(void *)(a1 + 14840);
      uint64_t v280 = *(void *)(v279 + 16);
      char v281 = *(unsigned char *)(v280 + 2113);
      v282 = (_OWORD *)(*(void *)(v279 + 5400)
                      + 32
                      * ((((*(unsigned __int8 *)(v280 + 2117) - 1) & v13) >> (v281 - a4))
                       + (((*(unsigned __int8 *)(v280 + 2117) - 1) & v12) >> (v281 - a4))
                       * byte_1D0DA530C[v94]
                       + *(_DWORD *)(v279 + 5408)
                       * ((v13 >> v281) + (v12 >> v281) * *(_DWORD *)(v280 + 2120))
                       + byte_1D0DA5308[v94]));
      long long v283 = *(_OWORD *)(v277 + 48);
      _OWORD *v282 = *(_OWORD *)(v277 + 32);
      v282[1] = v283;
    }
    if (!v115) {
      goto LABEL_302;
    }
    v284 = *v533;
    v285 = (*v533)[12];
    unsigned int v286 = v285[10];
    v287 = *(unsigned char **)(a1 + 968);
    unsigned __int8 v288 = v287[529];
    if (v286 == 2 || (v288 & 1) == 0)
    {
      int v290 = (v286 == 2) & v288;
      goto LABEL_299;
    }
    if ((v287[527] & 1) == 0) {
      goto LABEL_298;
    }
    int v290 = 0;
    if (v286 == 3 && *((unsigned char *)v284 + 232))
    {
      if (v285[11])
      {
LABEL_298:
        int v290 = 0;
        goto LABEL_299;
      }
      int v290 = (*(_WORD *)v284[11] & 0x70) == 0;
    }
LABEL_299:
    int v115 = v290 ^ 1;
    if ((v275 & (v290 ^ 1)) == 1)
    {
      if (v286 < 2)
      {
        int v115 = 1;
        if (v116) {
          goto LABEL_303;
        }
        goto LABEL_280;
      }
      int v115 = (v287[554] & 2) == 0;
    }
LABEL_302:
    if (v116) {
      goto LABEL_303;
    }
    goto LABEL_280;
  }
  int v521 = 0;
  if (!v116)
  {
LABEL_280:
    int v271 = v115;
    uint64_t v272 = sub_1D0CE07F0(a1 + 1592, v13, v12, v529);
    int v115 = v271;
    uint64_t v116 = v272;
  }
LABEL_303:
  if ((v126 & v115) == 1 && *(unsigned char *)(*(void *)(a1 + 968) + 531) && v116)
  {
    if (*(void *)(v116 + 128)
      && !*(unsigned char *)(v116 + 136)
      && *(void *)(*(void *)(v116 + 88) + 16) + (*(void *)(*(void *)(v116 + 88) + 16) >> 2) < *(void *)(v116 + 112))
    {
      int v292 = 0;
      int v126 = 1;
      goto LABEL_447;
    }
  }
  else if (!v115)
  {
    int v292 = 0;
    goto LABEL_447;
  }
  int v510 = v270;
  int v524 = v126;
  if (v514) {
    char v541 = 1;
  }
  int v293 = v532 + v13;
  int v294 = v532 + v12;
  uint64_t v295 = a1 + 32 * v537 + 24552;
  int v296 = 1;
  uint64_t v297 = -4;
  do
  {
    unsigned int v298 = v297 + 4;
    uint64_t v299 = (((v297 + 4) & 1) << v17) + v13;
    int v300 = *(_DWORD *)(a1 + 16);
    if ((int)v299 >= v300)
    {
      int v296 = 0;
    }
    else
    {
      uint64_t v301 = (v298 >> 1 << v17) + v539;
      int v302 = *(_DWORD *)(a1 + 20);
      if ((int)v301 >= v302)
      {
        int v296 = 0;
      }
      else
      {
        uint64_t v303 = sub_1D0D0CA2C(a7, v298, v293 < v300, v294 < v302);
        v296 &= sub_1D0D0D064(a1, v299, v301, v537, a1 + 8 * v537 + 24680, v295, v303, v542, &v541, v538);
        uint64_t v304 = *(void *)v295;
        int64x2_t v547 = vaddq_s64(v547, *(int64x2_t *)(*(void *)v295 + 168));
        DWORD2(v548) += *(_DWORD *)(v304 + 192);
        *(void *)&long long v548 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v548)) * (unint64_t)DWORD2(v548)) >> (8 * (WORD6(v548) == 0)))
                         + v547.i64[0];
        int64x2_t v549 = vaddq_s64(v549, *(int64x2_t *)(v304 + 200));
        DWORD2(v550) += *(_DWORD *)(v304 + 224);
        *(void *)&long long v550 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v550)) * (unint64_t)DWORD2(v550)) >> (8 * (WORD6(v550) == 0)))
                         + v549.i64[0];
      }
      uint64_t v13 = v540;
    }
    v295 += 8;
    BOOL v122 = __CFADD__(v297++, 1);
  }
  while (!v122);
  uint64_t v305 = *(void *)(a1 + 968);
  int v306 = *(unsigned __int8 *)(v305 + 550);
  if (!*(unsigned char *)(v305 + 550))
  {
    uint64_t v12 = v539;
    int v98 = v538;
    uint64_t v94 = v526;
    BOOL v307 = v518;
    int v126 = v524;
    int v270 = v510;
    goto LABEL_344;
  }
  int v98 = v538;
  uint64_t v94 = v526;
  int v126 = v524;
  int v270 = v510;
  if ((v513 ^ 1) & 1) != 0 || ((v296 ^ 1))
  {
    uint64_t v12 = v539;
    BOOL v307 = v518;
    goto LABEL_344;
  }
  BOOL v307 = v518;
  if (*(int *)(a1 + 12) < 2
    || (sub_1D0D3C9DC(a1 + 1000, v538, *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2097)),
        uint64_t v305 = *(void *)(a1 + 968),
        int v306 = *(unsigned __int8 *)(v305 + 550),
        *(unsigned char *)(v305 + 550)))
  {
    if (*(unsigned __int8 *)(*(void *)(a1 + 14840) + 58) <= 1u)
    {
      int v308 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4;
      if (v308 > *(unsigned __int8 *)(v305 + 177))
      {
        uint64_t v309 = 0;
        long long v551 = 0u;
        long long v552 = 0u;
        char v310 = 1;
        LOBYTE(v311) = 1;
        do
        {
          uint64_t v312 = *(void *)(*(void *)(a1 + 32 * v537 + 24552 + v309) + 96);
          *(void *)((char *)&v551 + v309) = v312;
          LODWORD(v312) = *(unsigned __int8 *)(v312 + 10);
          int v311 = v311 & (v312 == 2);
          v310 &= v312 > 1;
          v309 += 8;
        }
        while (v309 != 32);
        if (v310)
        {
          int v313 = *(unsigned __int8 *)(v551 + 11);
          int v314 = *(unsigned __int8 *)(v552 + 11);
          if (((v314 ^ v313) & 0x40) == 0
            && (int v315 = *(unsigned __int8 *)(v551 + 8) >> 4, v315 == *(unsigned __int8 *)(v552 + 8) >> 4)
            && (v315 == 15 || *(_DWORD *)v551 == *(_DWORD *)v552)
            && (int v316 = *(unsigned __int8 *)(v551 + 9) >> 4, v316 == *(unsigned __int8 *)(v552 + 9) >> 4))
          {
            BOOL v317 = v316 == 15 || *(_DWORD *)(v551 + 4) == *(_DWORD *)(v552 + 4);
          }
          else
          {
            BOOL v317 = 0;
          }
          int v362 = *(unsigned __int8 *)(*((void *)&v551 + 1) + 11);
          int v363 = *(unsigned __int8 *)(*((void *)&v552 + 1) + 11);
          if (((v363 ^ v362) & 0x40) == 0
            && (int v364 = *(unsigned __int8 *)(*((void *)&v551 + 1) + 8) >> 4,
                v364 == *(unsigned __int8 *)(*((void *)&v552 + 1) + 8) >> 4)
            && (v364 == 15 || **((_DWORD **)&v551 + 1) == **((_DWORD **)&v552 + 1))
            && (int v365 = *(unsigned __int8 *)(*((void *)&v551 + 1) + 9) >> 4,
                v365 == *(unsigned __int8 *)(*((void *)&v552 + 1) + 9) >> 4))
          {
            BOOL v366 = v365 == 15 || *(_DWORD *)(*((void *)&v551 + 1) + 4) == *(_DWORD *)(*((void *)&v552 + 1) + 4);
          }
          else
          {
            BOOL v366 = 0;
          }
          if (((v362 ^ v313) & 0x40) == 0
            && (int v367 = *(unsigned __int8 *)(v551 + 8) >> 4,
                v367 == *(unsigned __int8 *)(*((void *)&v551 + 1) + 8) >> 4)
            && (v367 == 15 || *(_DWORD *)v551 == **((_DWORD **)&v551 + 1))
            && (int v368 = *(unsigned __int8 *)(v551 + 9) >> 4,
                v368 == *(unsigned __int8 *)(*((void *)&v551 + 1) + 9) >> 4))
          {
            BOOL v369 = v368 == 15 || *(_DWORD *)(v551 + 4) == *(_DWORD *)(*((void *)&v551 + 1) + 4);
            HIDWORD(v506) = v369;
          }
          else
          {
            HIDWORD(v506) = 0;
          }
          int v370 = 1 << v308;
          if (((v363 ^ v314) & 0x40) == 0
            && (int v371 = *(unsigned __int8 *)(v552 + 8) >> 4,
                v371 == *(unsigned __int8 *)(*((void *)&v552 + 1) + 8) >> 4)
            && (v371 == 15 || *(_DWORD *)v552 == **((_DWORD **)&v552 + 1))
            && (int v372 = *(unsigned __int8 *)(v552 + 9) >> 4,
                v372 == *(unsigned __int8 *)(*((void *)&v552 + 1) + 9) >> 4))
          {
            BOOL v373 = v372 == 15 || *(_DWORD *)(v552 + 4) == *(_DWORD *)(*((void *)&v552 + 1) + 4);
            LODWORD(v506) = v373;
          }
          else
          {
            LODWORD(v506) = 0;
          }
          uint64_t v500 = v552;
          uint64_t v501 = *((void *)&v551 + 1);
          uint64_t v503 = v551;
          int v502 = v317 && v366;
          int v507 = v370;
          if (((v317 && v366) & HIDWORD(v506)) == 1)
          {
            BOOL v504 = v366;
            if (sub_1D0D17234(a1, v13, v539, v370, v370, v311, v551, v531)) {
              BOOL v374 = sub_1D0D17678(a1, v13, v539, a4, a7, 0, v531, v533);
            }
            else {
              BOOL v374 = 0;
            }
            uint64_t v94 = v526;
            int v126 = v524;
            int v370 = v507;
            BOOL v366 = v504;
          }
          else
          {
            BOOL v374 = 0;
          }
          int v490 = v374;
          BOOL v505 = v374;
          if (!v374)
          {
            int v490 = 0;
            if (v317 || v366)
            {
              int v490 = 0;
              if (v506)
              {
                int v491 = sub_1D0D17234(a1, v540, v539, v370, v370, v311, *(void *)((unint64_t)&v551 | (8 * (v366 & v506))), v531);
                BOOL v374 = 0;
                int v370 = v507;
                int v490 = 0;
                if (v491)
                {
                  BOOL v492 = sub_1D0D17678(a1, v540, v539, a4, a7, 0, v531, v533);
                  BOOL v374 = 0;
                  int v370 = v507;
                  int v490 = v492;
                }
              }
            }
          }
          int v493 = v370 >> 1;
          if (v306 == 1) {
            char v494 = v490;
          }
          else {
            char v494 = 0;
          }
          if ((v494 & 1) == 0 && ((v311 ^ 1) & 1) == 0)
          {
            int v495 = sub_1D0D17AD8(a1, v540, v539, a4, v531, v533, v370, v507, a7, 1);
            BOOL v374 = v505;
            int v370 = v507;
            v490 |= v495;
          }
          if (v306 == 1) {
            int v496 = v490;
          }
          else {
            int v496 = 0;
          }
          if ((v374 | v496) & 1) != 0 || ((HIDWORD(v506) & v506 ^ 1))
          {
            int v498 = v502;
          }
          else
          {
            int v497 = v370;
            if (sub_1D0D17234(a1, v540, v539, v370, v493, 0, v503, v531))
            {
              if (sub_1D0D17234(a1, v540, v493 + (int)v539, v497, v493, 0, v500, v531)) {
                v490 |= sub_1D0D17678(a1, v540, v539, a4, a7, 1, v531, v533);
              }
              uint64_t v94 = v526;
              int v126 = v524;
              int v370 = v507;
            }
            else
            {
              uint64_t v94 = v526;
              int v126 = v524;
              int v370 = v497;
            }
            int v498 = v502;
            BOOL v374 = v505;
          }
          if (v306 == 1) {
            int v499 = v490;
          }
          else {
            int v499 = 0;
          }
          uint64_t v12 = v539;
          if (((v499 | v498 ^ 1 | v374) & 1) == 0
            && sub_1D0D17234(a1, v540, v539, v493, v370, 0, v503, v531)
            && sub_1D0D17234(a1, v493 + (int)v540, v539, v493, v507, 0, v501, v531))
          {
            if (((v490 | sub_1D0D17678(a1, v540, v539, a4, a7, 2, v531, v533)) & 1) == 0)
            {
LABEL_651:
              int v318 = 0;
              LODWORD(v13) = v540;
LABEL_654:
              int v270 = v510;
              goto LABEL_341;
            }
          }
          else if (!v490)
          {
            goto LABEL_651;
          }
          LODWORD(v13) = v540;
          sub_1D0D17F94(a1, v540, v539, a4, a7, v531, (unsigned __int8 **)v533, 0);
          int v318 = 1;
          goto LABEL_654;
        }
      }
    }
  }
  int v318 = 0;
  uint64_t v12 = v539;
LABEL_341:
  v126 |= v318;
LABEL_344:
  int v319 = *(_DWORD *)(a1 + 12);
  if (v319 >= 2)
  {
    sub_1D0D3C9DC(a1 + 1000, v98, *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2097));
    uint64_t v320 = 0;
    signed int v321 = *(_DWORD *)(a1 + 16);
    v322 = &v543;
    do
    {
      if ((int)(((v320 & 1) << v17) + v13) < v321
        && (signed int)((v320 >> 1 << v17) + v12) < *(_DWORD *)(a1 + 20))
      {
        uint64_t v323 = *(void *)(a1 + 32 * v537 + 24552 + 8 * v320);
        *(void *)(v323 + 184) = ((*(unsigned __int16 *)(a1 + 1152 + 2 * *(__int16 *)(v323 + 196))
                                  * (unint64_t)*(unsigned int *)(v323 + 192)) >> (8
                                                                                       * (*(_WORD *)(v323 + 196) == 0)))
                                + *(void *)(v323 + 168);
        v324 = (int64x2_t *)(v323 + 200);
        *(void *)(v323 + 216) = ((*(unsigned __int16 *)(a1 + 1152 + 2 * *(__int16 *)(v323 + 228))
                                  * (unint64_t)*(unsigned int *)(v323 + 224)) >> (8
                                                                                       * (*(_WORD *)(v323 + 228) == 0)))
                                + *(void *)(v323 + 200);
        int v325 = *(_DWORD *)(a1 + 12);
        if (v325 == 5)
        {
          if (!*(unsigned char *)(a1 + 27684))
          {
            int64x2_t v328 = *(int64x2_t *)(v323 + 216);
            int64x2_t *v322 = *v324;
            v322[1] = v328;
          }
        }
        else if (v325 == 3)
        {
          if (v126)
          {
            int64x2_t v326 = *(int64x2_t *)(v323 + 216);
            int64x2_t *v322 = *v324;
            v322[1] = v326;
            int v327 = *(__int16 *)(v323 + 230) - v98;
            if (v327)
            {
              if (v327 >= 16) {
                int v327 = 16;
              }
              if (v327 <= -15) {
                int v327 = -15;
              }
              v322->i64[0] = (v322->i64[0] * (unint64_t)word_1D0DA5C48[v327 + 15] + 128) >> 8;
            }
          }
          v322[1].i16[7] = v98;
          *(_WORD *)(v323 + 230) = v98;
        }
      }
      ++v320;
      v322 += 2;
    }
    while (v320 != 4);
    *(void *)&long long v548 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v548)) * (unint64_t)DWORD2(v548)) >> (8 * (WORD6(v548) == 0)))
                     + v547.i64[0];
    *(void *)&long long v550 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v550)) * (unint64_t)DWORD2(v550)) >> (8 * (WORD6(v550) == 0)))
                     + v549.i64[0];
    int v319 = *(_DWORD *)(a1 + 12);
  }
  if ((v319 == 5 || v319 == 3) && v126 && !*(unsigned char *)(a1 + 27684))
  {
    uint64_t v329 = 0;
    uint64_t v330 = v543.i64[0];
    int v331 = DWORD2(v544);
    do
    {
      v330 += *(void *)&v545[v329];
      v331 += *(_DWORD *)&v545[v329 + 24];
      v329 += 32;
    }
    while (v329 != 96);
    v543.i64[0] = v330;
    DWORD2(v544) = v331;
  }
  if (v307 && v519 > *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2112))
  {
    sub_1D0D1076C(a1, v13, v12, (unsigned __int8 *)*v533, 1, 0, 0, 0, 0);
    unsigned int v332 = ++DWORD2(v548);
    uint64_t v333 = *(void *)(a1 + 944);
    int v334 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2112);
    if ((int)v13 - (1 << v334) < 0)
    {
      BOOL v336 = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 824)) {
        v335 = *(_WORD **)(*(void *)(a1 + 872) + 104);
      }
      else {
        v335 = (_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 800)
      }
                       + 2
                       * (((v13 - (1 << v334)) >> 3)
                        + *(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 768) * ((uint64_t)(int)v12 >> 3)));
      BOOL v336 = (*v335 & 3) > (int)a4;
    }
    int v337 = v12 - (1 << v334);
    if (v337 < 0)
    {
      BOOL v343 = 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 824))
      {
        BOOL v338 = v334 == 31;
        uint64_t v339 = 112;
        if (v338) {
          uint64_t v339 = 104;
        }
        uint64_t v340 = *(void *)(*(void *)(a1 + 872) + v339);
        uint64_t v341 = -536870912;
        if (!v338) {
          uint64_t v341 = 0;
        }
        v342 = (_WORD *)(v340 + v341);
      }
      else
      {
        v342 = (_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 800)
                       + 2
                       * (*(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 768) * (v337 >> 3)
                        + ((int)v13 >> 3)));
      }
      BOOL v343 = (*v342 & 3) > (int)a4;
    }
    uint64_t v344 = v333 + v343 + v336;
    uint64_t v345 = *(void *)(v333 + 16);
    unint64_t v346 = *(unsigned __int8 *)(v344 + 50);
    if (v346) {
      unint64_t v347 = v345 - byte_1D0D7FCB3[(v345 & 0xC0) + (v346 >> 1)];
    }
    else {
      unint64_t v347 = byte_1D0D7FCB3[(v345 & 0xC0) + (v346 >> 1)];
    }
    int v348 = __clz(v347);
    int v349 = v345 - (v347 << (v348 - 55)) + ((v348 - 55) << 8);
    DWORD2(v544) += v349;
    DWORD2(v550) += v349;
    *(void *)&long long v548 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v548)) * (unint64_t)v332) >> (8 * (WORD6(v548) == 0)))
                     + v547.i64[0];
    *(void *)&long long v550 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v550)) * (unint64_t)DWORD2(v550)) >> (8 * (WORD6(v550) == 0)))
                     + v549.i64[0];
  }
  if (!v514)
  {
    int v292 = 1;
    int v118 = v528;
    goto LABEL_447;
  }
  int v525 = v126;
  uint64_t v350 = 0;
  int v351 = *(_DWORD *)(a1 + 16);
  do
  {
    int v352 = ((v350 & 1) << v17) + v13;
    if (v352 < v351)
    {
      int v353 = (v350 >> 1 << v17) + v12;
      if (v353 < *(_DWORD *)(a1 + 20))
      {
        v354 = *(unsigned __int8 **)(a1 + 32 * v537 + 24552 + 8 * v350);
        char v355 = sub_1D0D12D84(((v350 & 1) << v17) + (int)v13, v353, v532, v354, 0);
        if (*(unsigned char *)(a1 + 8) || (v355 & 1) != 0)
        {
          uint64_t v12 = v539;
          if ((v355 & 1) == 0) {
            goto LABEL_408;
          }
LABEL_416:
          int v292 = 1;
LABEL_446:
          uint64_t v94 = v526;
          int v118 = v528;
          int v126 = v525;
          int v270 = v510;
          goto LABEL_447;
        }
        int v292 = 1;
        if (sub_1D0D12D84(v352, v353, v532, v354, 1u))
        {
          uint64_t v12 = v539;
          int v98 = v538;
          goto LABEL_446;
        }
        char v356 = sub_1D0D12D84(v352, v353, v532, v354, 2u);
        uint64_t v12 = v539;
        LODWORD(v13) = v540;
        int v98 = v538;
        if (v356) {
          goto LABEL_416;
        }
      }
    }
LABEL_408:
    ++v350;
  }
  while (v350 != 4);
  int v357 = sub_1D0D130D0(a1, v13, v12, a4, (unsigned __int8 *)*v533, *a8, 1);
  __int16 v358 = v357;
  uint64_t v359 = 0;
  v542[0] = v357;
  int v118 = v528;
  int v270 = v510;
  do
  {
    int v360 = ((v359 & 1) << v17) + v13;
    if (v360 < *(_DWORD *)(a1 + 16))
    {
      int v361 = (v359 >> 1 << v17) + v12;
      if (v361 < *(_DWORD *)(a1 + 20)) {
        sub_1D0D11A38(*(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117), v360, v361, v537, *(unsigned __int8 **)(a1 + 32 * v537 + 24552 + 8 * v359), v358);
      }
    }
    ++v359;
  }
  while (v359 != 4);
  int v292 = 1;
  uint64_t v94 = v526;
  int v126 = v525;
LABEL_447:
  *(_DWORD *)(a1 + 212) = v517;
  if (v270)
  {
    if (((v126 ^ 1 | v513) & 1) == 0)
    {
      if (*(int *)(a1 + 12) >= 2) {
        sub_1D0D3C9DC(a1 + 1000, v98, *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2097));
      }
      if (v292) {
        v375 = &v547 + 2 * (v511 > 2);
      }
      else {
        v375 = 0;
      }
      sub_1D0D13324(a1, v540, v12, a4, a7, v531, v533, (uint64_t)v375);
    }
    int v521 = *((_DWORD *)*v533 + 4);
    if (v118)
    {
      uint64_t v377 = a1 + 32 * v94;
      v376 = *v533;
      char v378 = *(unsigned char *)(v377 + 58) & 0xE7 | (8
                                           * (*((unsigned char *)v376[12]
                                              + 16 * ((uint64_t)((int)v540 - *((_DWORD *)v376 + 1)) >> 2)
                                              + 16
                                              * ((unint64_t)*(unsigned __int8 *)v376 >> 2)
                                              * (((int)v12 - *((_DWORD *)v376 + 2)) >> 2)
                                              + 10) & 3));
      *(unsigned char *)(v377 + 58) = v378;
      *(unsigned char *)(v377 + 58) = v378 & 0xF8 | (*((unsigned __int16 *)(*v533)[11]
                                             + ((uint64_t)((int)v540 - *((_DWORD *)*v533 + 1)) >> 3)
                                             + ((unint64_t)*(unsigned __int8 *)*v533 >> 3)
                                             * (((int)v12 - *((_DWORD *)*v533 + 2)) >> 3)) >> 4) & 7;
      *(void *)(v377 + 40) = (*v533)[4 * (v511 > 2) + 23];
      uint64_t v379 = *(void *)(a1 + 14840);
      uint64_t v380 = *(void *)(v379 + 16);
      char v381 = *(unsigned char *)(v380 + 2113);
      v382 = (_OWORD *)(*(void *)(v379 + 5400)
                      + 32
                      * ((((*(unsigned __int8 *)(v380 + 2117) - 1) & v540) >> (v381 - a4))
                       + (((*(unsigned __int8 *)(v380 + 2117) - 1) & v12) >> (v381 - a4))
                       * byte_1D0DA530C[v94]
                       + *(_DWORD *)(v379 + 5408)
                       * ((v540 >> v381) + (v12 >> v381) * *(_DWORD *)(v380 + 2120))
                       + byte_1D0DA5308[v94]));
      long long v383 = *(_OWORD *)(v377 + 48);
      _OWORD *v382 = *(_OWORD *)(v377 + 32);
      v382[1] = v383;
    }
  }
  if ((v126 & 1) == 0)
  {
    for (uint64_t j = 0; j != 4; ++j)
    {
      int v400 = ((j & 1) << v17) + v540;
      if (v400 < *(_DWORD *)(a1 + 16))
      {
        int v401 = (j >> 1 << v17) + v12;
        if (v401 < *(_DWORD *)(a1 + 20)) {
          sub_1D0D0C040(a1, (unsigned __int8 *)*v533, *(unsigned __int8 **)(a1 + 32 * (int)v537 + 24552 + 8 * j), v400, v401, v532);
        }
      }
    }
    v402 = *v533;
    long long v403 = v548;
    *(int64x2_t *)(v402 + 21) = v547;
    *(_OWORD *)(v402 + 23) = v403;
    v404 = *v533;
    long long v405 = v550;
    *(int64x2_t *)(v404 + 25) = v549;
    *(_OWORD *)(v404 + 27) = v405;
    if (!*(unsigned char *)(a1 + 27684))
    {
LABEL_600:
      uint64_t result = 0;
      *a8 = v542[0];
      *a9 = v541;
      return result;
    }
    return 0;
  }
  int v384 = *(_DWORD *)(a1 + 200);
  char v385 = v292 ^ 1;
  if (v384 != 1) {
    char v385 = 1;
  }
  if ((v385 & 1) == 0)
  {
    char v386 = *(unsigned char *)(*(void *)(a1 + 14848) + 222);
    int v387 = 500 << v386;
    int v388 = 1 << (v519 - 3);
    if ((*(_DWORD *)(a1 + 20) - (int)v12) >> 3 >= v388) {
      int v389 = 1 << (v519 - 3);
    }
    else {
      int v389 = (*(_DWORD *)(a1 + 20) - (int)v12) >> 3;
    }
    if (v389 < 1)
    {
      int v391 = 0;
      v397 = v533;
    }
    else
    {
      int v390 = 0;
      int v391 = 0;
      int v392 = *(_DWORD *)(a1 + 16);
      uint64_t v393 = (uint64_t)v392 >> 3;
      uint64_t v394 = *(void *)(*(void *)(a1 + 976) + 4872)
           + 4 * (((uint64_t)(int)v540 >> 3) + (int)v393 * (uint64_t)((int)v12 >> 3));
      int v395 = (v392 - (int)v540) >> 3;
      if (v395 < v388) {
        int v388 = v395;
      }
      uint64_t v396 = 4 * v393;
      v397 = v533;
      do
      {
        if (v388 >= 1)
        {
          uint64_t v398 = 0;
          do
          {
            if (*(_DWORD *)(v394 + v398) > v391) {
              int v391 = *(_DWORD *)(v394 + v398);
            }
            v398 += 4;
          }
          while (4 * v388 != v398);
        }
        ++v390;
        v394 += v396;
      }
      while (v390 != v389);
    }
    if (v391 > v387)
    {
      int v433 = v387 + (v387 >> 1);
      if (v391 < 400 << v386) {
        int v434 = 2;
      }
      else {
        int v434 = 3;
      }
      if (v391 >= v433) {
        int v432 = v434;
      }
      else {
        int v432 = 3;
      }
      goto LABEL_519;
    }
LABEL_518:
    int v432 = -1;
    goto LABEL_519;
  }
  v397 = v533;
  if (v384 != 2) {
    goto LABEL_518;
  }
  uint64_t v407 = 0;
  int v408 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4;
  char v409 = 1;
  int v410 = 1 << (*(unsigned char *)(*(void *)(a1 + 14848) + 2113) - a4);
  *(void *)&long long v551 = 0;
  v554[0] = 0;
  uint64_t v411 = *(void *)(a1 + 976);
  int v412 = *(_DWORD *)(v411 + 4);
  int v413 = (int)v12 >> v412;
  int v414 = v410 + v540;
  if (*(_DWORD *)(a1 + 16) < v410 + (int)v540) {
    int v414 = *(_DWORD *)(a1 + 16);
  }
  int v415 = v414 >> v412;
  int v416 = v410 + v12;
  if (*(_DWORD *)(a1 + 20) < v416) {
    int v416 = *(_DWORD *)(a1 + 20);
  }
  uint64_t v417 = v416 >> v412;
  uint64_t v418 = *(void *)(v411 + 8);
  do
  {
    char v419 = v409;
    int v420 = v407 + v413;
    if (v407 + v413 < v417)
    {
      int v421 = ((int)v540 >> v412) + (v419 & 1);
      uint64_t v422 = *(void *)(v411 + 24 * v407 + 5192) + 2 * v418 * (v420 << v412 >> v412);
      uint64_t v423 = v421;
      int v424 = v415 - v421;
      do
      {
        if ((int)v423 < v415)
        {
          int v425 = *((_DWORD *)&v551 + v407);
          int v426 = *((_DWORD *)v554 + v407);
          uint64_t v427 = v423;
          do
          {
            int v428 = *(__int16 *)(v422 + 2 * v427);
            if (v428 < 0) {
              int v428 = -v428;
            }
            if ((unsigned __int16)v428 > 5u) {
              ++v425;
            }
            ++v427;
          }
          while (v415 != v427);
          *((_DWORD *)&v551 + v407) = v425;
          *((_DWORD *)v554 + v407) = v424 + v426;
        }
        ++v420;
        v422 += 2 * v418;
      }
      while (v420 < (int)v417);
    }
    char v409 = 0;
    uint64_t v407 = 1;
  }
  while ((v419 & 1) != 0);
  if ((DWORD1(v551) + (int)v551 < 0) ^ __OFADD__(DWORD1(v551), v551) | (DWORD1(v551) + v551 == 0))
  {
    if (v408 != v412) {
      goto LABEL_569;
    }
    uint64_t v446 = v418 * ((int)v12 >> v408);
    int v447 = (int)v540 >> v408;
    int v448 = *(__int16 *)(*(void *)(v411 + 5192) + 2 * v446 + 2 * v447);
    if (v448 < 0) {
      int v448 = -v448;
    }
    if ((unsigned __int16)v448 > 5u) {
      goto LABEL_536;
    }
    int v449 = *(__int16 *)(*(void *)(v411 + 5216) + 2 * v446 + 2 * v447);
    if (v449 < 0) {
      int v449 = -v449;
    }
    if ((unsigned __int16)v449 >= 6u) {
LABEL_536:
    }
      int v432 = 4;
    else {
LABEL_569:
    }
      int v432 = 0;
  }
  else
  {
    if ((int)v551 <= SDWORD1(v551)) {
      int v429 = DWORD1(v551);
    }
    else {
      int v429 = v551;
    }
    int v430 = 8 * v429;
    if (v430 >= SLODWORD(v554[0]) >> 1) {
      int v431 = 2;
    }
    else {
      int v431 = 3;
    }
    if (v430 >= SLODWORD(v554[0])) {
      int v432 = 1;
    }
    else {
      int v432 = v431;
    }
  }
LABEL_519:
  v435 = *v397;
  int v436 = v540 - *((_DWORD *)*v397 + 1);
  int v437 = v12 - *((_DWORD *)*v397 + 2);
  unint64_t v438 = *(unsigned __int8 *)*v397;
  uint64_t v439 = (uint64_t)(*v397)[12] + 16 * ((uint64_t)v436 >> 2) + 16 * (int)(v438 >> 2) * (uint64_t)(v437 >> 2);
  v440 = (unsigned char *)(a1 + 27684);
  if (*(unsigned char *)(a1 + 27684))
  {
    unsigned int v441 = 0;
    goto LABEL_545;
  }
  int v442 = *((__int16 *)v435[11] + ((uint64_t)v436 >> 3) + (int)(v438 >> 3) * (uint64_t)(v437 >> 3));
  unsigned int v441 = *(_DWORD *)(a1 + 192);
  if (*(_DWORD *)(a1 + 4) == 2 && *(unsigned __int8 *)(v439 + 10) >= 2u)
  {
    if (*(unsigned char *)(*(void *)(a1 + 968) + 549))
    {
      char v443 = (unint64_t)v435[23] >= (unint64_t)v548 + ((unint64_t)v548 >> 3) ? v292 : 0;
      if (v443)
      {
        int v444 = 0;
        int v445 = 0;
        *((_DWORD *)v435 + 56) = 0;
        v435[25] = 0;
        v435[26] = 0;
        v435[27] = (void *)-1;
        *((_WORD *)v435 + 114) = 0;
        v435 = *v533;
        goto LABEL_551;
      }
    }
    sub_1D0D14154(a1, v540, v12, a4, *v531, (unsigned __int8 *)v435, a7, v550);
    v435 = *v533;
    int v521 = *((_DWORD *)*v533 + 4);
  }
  if (v508)
  {
    int v450 = sub_1D0D12D84(v540, v12, v529, (unsigned __int8 *)v435, 0);
    if (*(unsigned char *)(a1 + 8) || (v450 & 1) != 0)
    {
      if (!v450) {
        goto LABEL_543;
      }
    }
    else if ((sub_1D0D12D84(v540, v12, v529, (unsigned __int8 *)v435, 1u) & 1) == 0 {
           && (sub_1D0D12D84(v540, v12, v529, (unsigned __int8 *)v435, 2u) & 1) == 0)
    }
    {
LABEL_543:
      int v444 = 0;
      BOOL v508 = 1;
      goto LABEL_546;
    }
    int v521 = v442 >> 9;
    signed int v462 = (v442 >> 9) - *a8;
    if (v462)
    {
      if (v462 < 0) {
        signed int v462 = *a8 - (v442 >> 9);
      }
      unsigned int v463 = 63 - 2 * __clz(v462);
    }
    else
    {
      unsigned int v463 = 1;
    }
    BOOL v508 = 0;
    unsigned int v464 = *((_DWORD *)v435 + 48) + v463;
    *((_DWORD *)v435 + 48) = v464;
    unsigned int v465 = *((_DWORD *)v435 + 56) + (v463 << 8);
    *((_DWORD *)v435 + 56) = v465;
    v435[23] = (char *)v435[21]
             + ((*(unsigned __int16 *)(a1 + 1152 + 2 * *((__int16 *)v435 + 98)) * (unint64_t)v464) >> (8 * (*((_WORD *)v435 + 98) == 0)));
    v435[27] = (char *)v435[25]
             + ((*(unsigned __int16 *)(a1 + 1152 + 2 * *((__int16 *)v435 + 114)) * (unint64_t)v465) >> (8 * (*((_WORD *)v435 + 114) == 0)));
    int v444 = 1;
  }
  else
  {
    BOOL v508 = 0;
LABEL_545:
    int v444 = 0;
  }
LABEL_546:
  char v451 = v292 ^ 1;
  int v445 = 1;
  if (*(int *)(a1 + 200) < 1) {
    char v451 = 1;
  }
  if ((v451 & 1) != 0 || v432 < 0)
  {
LABEL_551:
    unint64_t v454 = 0;
    uint64_t v452 = v441;
    unint64_t v453 = (unint64_t)v435[4 * v441 + 23];
  }
  else
  {
    uint64_t v452 = v441;
    unint64_t v453 = (unint64_t)v435[4 * v441 + 23];
    unint64_t v454 = v453 >> v432;
  }
  int v455 = *(_DWORD *)(a1 + 12);
  if (v445 && v455 >= 3 && !*v440)
  {
    int v457 = *(_DWORD *)(a1 + 28) + *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2097);
    if (v457 >= 63) {
      int v457 = 63;
    }
    __int16 v458 = dword_1D0DA667C[70 * *(unsigned __int8 *)(a1 + 1172) + (v457 & ~(v457 >> 31))];
    *(_WORD *)(a1 + 1144) = v458;
    *(_WORD *)(a1 + 1152) = v458;
    unint64_t v456 = ((*(unsigned __int16 *)(a1 + 1152 + 2 * SWORD6(v544)) * (unint64_t)DWORD2(v544)) >> (8 * (WORD6(v544) == 0)))
         + v543.i64[0];
    *(void *)&long long v544 = v456;
LABEL_556:
    if (v455 == 5)
    {
      if (*v440)
      {
        int v455 = 5;
        if (v292) {
          goto LABEL_588;
        }
        goto LABEL_592;
      }
      v459 = v435[26];
      unint64_t v460 = (unsigned char *)v435[25] - v459;
      if (v292)
      {
        int v535 = v444;
        int v461 = *(_DWORD *)(a1 + 28);
        if (*(unsigned char *)(*(void *)(a1 + 14848) + 2096) == 8) {
          sub_1D0D149B0(a1, (uint64_t)v435, v461, a4, v540, v539);
        }
        else {
          sub_1D0D14D0C(a1, (uint64_t)v435, v461, a4, v540, v539);
        }
        v435 = *v533;
        unint64_t v453 = (unint64_t)(*v533)[25]
             + ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)*v533 + 114) + 1152)
               * (unint64_t)*((unsigned int *)*v533 + 56)) >> (8 * (*((_WORD *)*v533 + 114) == 0)));
        (*v533)[27] = (void *)v453;
        int v444 = v535;
      }
      else
      {
        unint64_t v453 = (unint64_t)v435[27];
      }
      int v466 = v538 - *(_DWORD *)(a1 + 28);
      if (v466)
      {
        if (v466 >= 16) {
          int v466 = 16;
        }
        if (v466 <= -15) {
          int v466 = -15;
        }
        unint64_t v460 = (v460 * word_1D0DA5CC8[v466 + 15] + 128) >> 8;
      }
      v435[25] = (void *)((unint64_t)&v459[v460] & ~((uint64_t)&v459[v460] >> 63));
      v435[26] = v459;
      int v455 = *(_DWORD *)(a1 + 12);
    }
    if (v455 < 3 || *v440) {
      goto LABEL_587;
    }
    int v488 = v538 + *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2097);
    if (v488 >= 63) {
      int v488 = 63;
    }
    int v489 = dword_1D0DA667C[70 * *(unsigned __int8 *)(a1 + 1172) + (v488 & ~(v488 >> 31))];
    *(_WORD *)(a1 + 1144) = v489;
    *(_WORD *)(a1 + 1152) = v489;
    if (!v292) {
      goto LABEL_592;
    }
LABEL_588:
    if (v453 + v454 < v456) {
      int v467 = v445;
    }
    else {
      int v467 = 0;
    }
    if (v467 == 1) {
      goto LABEL_592;
    }
    int v473 = v532 + v540;
    int v474 = v532 + v539;
    if (v455 == 3)
    {
      int64x2_t v549 = v543;
      long long v550 = v544;
    }
    v475 = (unsigned __int8 **)(a1 + 32 * (int)v537);
    sub_1D0D0C040(a1, (unsigned __int8 *)v435, v475[3069], v540, v539, v532);
    sub_1D0D0C040(a1, (unsigned __int8 *)*v533, v475[3070], v473, v539, v532);
    sub_1D0D0C040(a1, (unsigned __int8 *)*v533, v475[3071], v540, v474, v532);
    sub_1D0D0C040(a1, (unsigned __int8 *)*v533, v475[3072], v473, v474, v532);
    v476 = *v533;
    long long v477 = v548;
    *(int64x2_t *)(v476 + 21) = v547;
    *(_OWORD *)(v476 + 23) = v477;
    v478 = *v533;
    int64x2_t v479 = v549;
    *(_OWORD *)(v478 + 27) = v550;
    *(int64x2_t *)(v478 + 25) = v479;
    if (*(_DWORD *)(a1 + 12) == 5)
    {
      v480 = *v533;
      *((_WORD *)v480 + 99) = HIWORD(v544);
      *((_WORD *)v480 + 115) = v546;
    }
    if (!*v440) {
      goto LABEL_600;
    }
    return 0;
  }
  unint64_t v456 = *((void *)&v547 + 4 * v452 + 2);
  if (v445) {
    goto LABEL_556;
  }
LABEL_587:
  if (v292) {
    goto LABEL_588;
  }
LABEL_592:
  if (!*v440)
  {
    uint64_t v468 = v439;
    BOOL v469 = v508;
    if ((v444 | !v508))
    {
      uint64_t v471 = v539;
      uint64_t v470 = v540;
      int v472 = v521;
    }
    else
    {
      uint64_t v471 = v539;
      uint64_t v470 = v540;
      int v481 = sub_1D0D130D0(a1, v540, v539, a4, (unsigned __int8 *)v435, *a8, 1);
      sub_1D0D11A38(*(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117), v540, v539, a4, (unsigned __int8 *)v435, v481);
      int v472 = v521;
      if (v512) {
        int v472 = v481;
      }
      BOOL v469 = v508;
    }
    if (*(int *)(a1 + 4) <= 1 && *(unsigned __int8 *)(v468 + 10) >= 2u) {
      sub_1D0D1507C(a1, v470, v471, a4, (unsigned __int8 *)*v533, 0, 0, 1, 0);
    }
    *a8 = v472;
    *a9 = v469;
    int v455 = *(_DWORD *)(a1 + 12);
  }
  if (v455 == 5 && v529 >= 8)
  {
    int v482 = 0;
    int v483 = *((_DWORD *)*v533 + 3);
    uint64_t v484 = a1 + (((int)v540 - *v515) >> 3) + 748;
    int v485 = v539 - v515[1];
    do
    {
      v486 = (unsigned char *)(v484 + (int)(v485 & 0xFFFFFFF8));
      uint64_t v487 = v529 >> 3;
      do
      {
        *v486++ = v483;
        --v487;
      }
      while (v487);
      ++v482;
      v485 += 8;
    }
    while (v482 != v529 >> 3);
  }
  return 1;
}

uint64_t sub_1D0D101F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, unsigned char *a7)
{
  int v11 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4;
  uint64_t v12 = *(void *)(a1 + 14856);
  if (*(unsigned char *)(v12 + 12))
  {
    int v13 = *(_DWORD *)(v12 + 1636);
    BOOL v14 = v11 >= v13;
    BOOL v50 = v11 == v13;
  }
  else
  {
    BOOL v14 = 0;
    BOOL v50 = 0;
  }
  uint64_t v15 = *(unsigned __int8 **)(a1 + 24552);
  uint64_t result = sub_1D0D130D0(a1, a2, a3, a4, 0, *a6, 0);
  int v17 = result;
  if (((a3 | a2) & 0x80000000) != 0
    || (uint64_t v18 = *(void *)(*(void *)(a1 + 14840) + 8), *(_DWORD *)(v18 + 520) <= (int)a2)
    || *(_DWORD *)(v18 + 524) <= (int)a3)
  {
    int v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    int v19 = (unsigned __int16 *)(*(void *)(v18 + 800)
                             + 2 * (*(void *)(v18 + 768) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    uint64_t v20 = *(void *)(v18 + 880) + 16 * (*(void *)(v18 + 848) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  if ((*v19 & 3) <= (int)a4)
  {
    if (v14)
    {
      *a7 = 1;
      __int16 v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 984))(a2, a3, a4, a1);
      sub_1D0D11B74(a1, a2, a3, a4, 0, v28, 0);
    }
    uint64_t result = sub_1D0D125BC(a1, a2, a3, a4, 0, 1, 1, 0, 0);
    unsigned int v29 = *v19;
    if ((v29 & 0x80) == 0)
    {
      int v52 = v11;
      uint64_t v30 = (1 << v11);
      BOOL v48 = v14;
      if (*(unsigned char *)(*(void *)(a1 + 968) + 204))
      {
        char v31 = 0;
        char v32 = 1;
        do
        {
          char v33 = v32;
          (*(void (**)(uint64_t, void))(a1 + 29752))(v30, ((int)v30 >> v31));
          char v32 = 0;
          char v31 = 1;
        }
        while ((v33 & 1) != 0);
        unsigned int v29 = *v19;
      }
      sub_1D0D3CAE0(a1 + 14912, a1, a2, a3, a4, *(unsigned __int8 *)(v20 + 10), (v29 >> 4) & 7);
      if (*(unsigned char *)(a1 + 29745))
      {
        int v34 = *(unsigned __int8 *)(*(void *)(a1 + 968) + 229);
        if (v34 != 3)
        {
          int v56 = 0;
          v55[0] = 0;
          v55[1] = 0;
          v55[2] = -1;
          __int16 v57 = 2;
          if (v34 == 2) {
            sub_1D0D450C4(a1 + 14912, a2, a3, v15, v52, 0, (uint64_t)v55, 1);
          }
          else {
            sub_1D0D45758(a1 + 14912, a2, a3, v15, v52, 0, 0, v55, 1);
          }
        }
      }
      uint64_t result = sub_1D0D48F48((int *)(a1 + 14912), a2, a3, 0, v15, 0, 1, 1, 0, 0);
      __int16 v35 = *v19;
      if (result)
      {
        *a6 = v35 >> 9;
        goto LABEL_34;
      }
      BOOL v14 = v48;
      if (v35 & 0x70) == 0 && (*(unsigned char *)(v20 + 11))
      {
        *int v19 = v35 | 0x80;
        *(unsigned char *)(v20 + 11) &= ~1u;
        *(unsigned char *)(v20 + 10) = 2;
        uint64_t v36 = *(void *)(*(void *)(a1 + 14840) + 8);
        if ((int)v30 >= 8)
        {
          uint64_t v37 = 0;
          uint64_t v38 = 2 * *(void *)(v36 + 768);
          uint64_t v39 = v19;
          do
          {
            uint64_t v40 = v39;
            uint64_t v41 = v30 >> 3;
            do
            {
              *v40++ = *v19;
              --v41;
            }
            while (v41);
            ++v37;
            uint64_t v39 = (_WORD *)((char *)v39 + v38);
          }
          while (v37 != v30 >> 3);
          uint64_t v36 = *(void *)(*(void *)(a1 + 14840) + 8);
        }
        if ((int)v30 >= 4)
        {
          uint64_t v42 = 0;
          uint64_t v43 = 16 * *(void *)(v36 + 848);
          size_t v44 = (void *)v20;
          do
          {
            uint64_t v45 = v44;
            uint64_t v46 = v30 >> 2;
            do
            {
              uint64_t v47 = *(void *)v20;
              *(void *)((char *)v45 + 6) = *(void *)(v20 + 6);
              *uint64_t v45 = v47;
              v45 += 2;
              --v46;
            }
            while (v46);
            ++v42;
            size_t v44 = (void *)((char *)v44 + v43);
          }
          while (v42 != v30 >> 2);
        }
      }
    }
    if (*a7) {
      uint64_t result = sub_1D0D11B74(a1, a2, a3, a4, 0, v17, 0);
    }
    if (v14) {
      *a6 = v17;
    }
  }
  else
  {
    int v49 = result;
    char v21 = v11 - 1;
    if (v50)
    {
      *a7 = 1;
      __int16 v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 984))(a2, a3, a4, a1);
      uint64_t result = sub_1D0D11B74(a1, a2, a3, a4, 0, v22, 0);
    }
    unsigned int v23 = 0;
    uint64_t v24 = (a4 + 1);
    do
    {
      int v25 = *(_DWORD *)(a1 + 16);
      if ((int)(((v23 & 1) << v21) + a2) < v25)
      {
        int v26 = *(_DWORD *)(a1 + 20);
        if ((int)((v23 >> 1 << v21) + a3) < v26)
        {
          uint64_t v27 = sub_1D0D0CA2C(a5, v23, (1 << (v11 - 1)) + (int)a2 < v25, (1 << (v11 - 1)) + (int)a3 < v26);
          uint64_t result = sub_1D0D101F4(a1, ((v23 & 1) << v21) + (int)a2, (v23 >> 1 << v21) + a3, v24, v27, a6, a7);
        }
      }
      ++v23;
    }
    while (v23 != 4);
    if (v50 && *a7)
    {
      *a6 = v49;
LABEL_34:
      *a7 = 0;
    }
  }
  return result;
}

uint64_t sub_1D0D1076C(uint64_t result, int a2, int a3, unsigned __int8 *a4, int a5, char a6, char a7, char a8, int a9)
{
  *(unsigned char *)(result + 824) = a5;
  *(unsigned char *)(result + 825) = a6;
  *(unsigned char *)(result + 826) = a7;
  *(unsigned char *)(result + 827) = a8;
  *(_DWORD *)(result + 832) = a2;
  *(_DWORD *)(result + 836) = a3;
  if (a5)
  {
    *(void *)(result + 872) = a4;
    uint64_t v9 = (unsigned __int8 *)*((void *)a4 + 17);
    *(void *)(result + 840) = *v9;
    *(void *)(result + 848) = v9[1];
    unint64_t v10 = *a4;
    unint64_t v11 = v10 >> 3;
    *(void *)(result + 856) = v10 >> 3;
    unint64_t v12 = v10 >> 2;
    *(void *)(result + 864) = v10 >> 2;
    int v13 = a2 - *((_DWORD *)a4 + 1);
    int v14 = a3 - *((_DWORD *)a4 + 2);
    uint64_t v15 = (uint64_t)v14 >> 3;
    uint64_t v16 = (uint64_t)v13 >> 3;
    uint64_t v17 = *((void *)a4 + 12);
    *(void *)(result + 880) = *((void *)a4 + 11) + 2 * (v16 + (int)v11 * (uint64_t)(v14 >> 3));
    uint64_t v18 = (uint64_t)v14 >> 2;
    uint64_t v19 = (uint64_t)v13 >> 2;
    *(void *)(result + 888) = v17 + 16 * (v19 + (int)v12 * (uint64_t)(v14 >> 2));
    int v20 = v14;
  }
  else
  {
    *(void *)(result + 872) = 0;
    unint64_t v21 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2117);
    *(void *)(result + 840) = v21;
    *(void *)(result + 848) = v21 >> 1;
    uint64_t v22 = *(void *)(*(void *)(result + 14840) + 8);
    uint64_t v23 = *(void *)(v22 + 768);
    *(void *)(result + 856) = v23;
    uint64_t v24 = *(void *)(v22 + 848);
    *(void *)(result + 864) = v24;
    if ((a3 | a2) < 0 || *(_DWORD *)(v22 + 520) <= a2 || *(_DWORD *)(v22 + 524) <= a3)
    {
      uint64_t v25 = 0;
      *(void *)(result + 880) = 0;
    }
    else
    {
      *(void *)(result + 880) = *(void *)(v22 + 800) + 2 * (v23 * ((uint64_t)a3 >> 3) + (a2 >> 3));
      uint64_t v25 = *(void *)(v22 + 880) + 16 * (v24 * ((uint64_t)a3 >> 2) + (a2 >> 2));
    }
    int v20 = a3 - *((_DWORD *)a4 + 2);
    uint64_t v18 = (uint64_t)v20 >> 2;
    int v13 = a2 - *((_DWORD *)a4 + 1);
    uint64_t v19 = (uint64_t)v13 >> 2;
    *(void *)(result + 888) = v25;
    uint64_t v15 = (uint64_t)v20 >> 3;
    uint64_t v16 = (uint64_t)v13 >> 3;
  }
  int v26 = &a4[8 * a9];
  *(void *)(result + 896) = *(void *)(*((void *)v26 + 17) + 32)
                            + 2 * (v13 + **((unsigned __int8 **)v26 + 17) * (uint64_t)v20);
  int v27 = v20 >> 1;
  uint64_t v28 = (uint64_t)v13 >> 1;
  *(void *)(result + 904) = *(void *)(*((void *)v26 + 17) + 40)
                            + 2 * (v28 + *(unsigned __int8 *)(*((void *)v26 + 17) + 1) * (uint64_t)v27);
  *(void *)(result + 912) = *(void *)(*((void *)v26 + 17) + 48)
                            + 2 * (v28 + *(unsigned __int8 *)(*((void *)v26 + 17) + 1) * (uint64_t)v27);
  *(void *)(result + 920) = *(void *)(*((void *)v26 + 17) + 8)
                            + v19
                            + (int)v18 * (uint64_t)((unint64_t)**((unsigned __int8 **)v26 + 17) >> 2);
  *(void *)(result + 928) = *(void *)(*((void *)v26 + 17) + 16)
                            + v16
                            + (int)v15
                            * (uint64_t)((unint64_t)*(unsigned __int8 *)(*((void *)v26 + 17) + 1) >> 2);
  *(void *)(result + 936) = *(void *)(*((void *)v26 + 17) + 24)
                            + v16
                            + (int)v15
                            * (uint64_t)((unint64_t)*(unsigned __int8 *)(*((void *)v26 + 17) + 1) >> 2);
  return result;
}

void sub_1D0D10960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int *a7, unsigned char *a8)
{
  uint64_t v11 = a2;
  int v13 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4;
  int v14 = *(unsigned __int8 **)(a1 + 24552);
  uint64_t v15 = *(unsigned __int8 **)(a1 + 8 * a4 + 24680);
  int v16 = a2 - *((_DWORD *)v14 + 1);
  int v17 = a3 - *((_DWORD *)v14 + 2);
  unint64_t v18 = *v14;
  uint64_t v19 = (_WORD *)(*((void *)v14 + 11) + 2 * (((uint64_t)v16 >> 3) + (int)(v18 >> 3) * (uint64_t)(v17 >> 3)));
  unsigned int v20 = (unsigned __int16)*v19;
  unsigned int v78 = a3;
  int v70 = v15;
  if ((v20 & 3) <= (int)a4)
  {
    uint64_t v26 = *((void *)v14 + 12) + 16 * (((uint64_t)v16 >> 2) + (int)(v18 >> 2) * (uint64_t)(v17 >> 2));
    uint64_t v27 = *(void *)(a1 + 14856);
    if (*(unsigned char *)(v27 + 12) && v13 >= *(_DWORD *)(v27 + 1636))
    {
      int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 984))(a2, a3, a4, a1);
      int v72 = 1;
      *a8 = 1;
      uint64_t v28 = v14;
      sub_1D0D11A38(*(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117), a2, v78, a4, v14, v43);
      uint64_t v11 = a2;
      LODWORD(a6) = v43;
      a3 = v78;
      unsigned int v20 = (unsigned __int16)*v19;
    }
    else
    {
      uint64_t v28 = *(unsigned __int8 **)(a1 + 24552);
      int v72 = 0;
    }
    uint64_t v44 = a3;
    int v69 = a6;
    uint64_t v45 = v11;
    sub_1D0D0BF14(a1, v15, v11, a3, a4, (v20 >> 2) & 3, a6);
    if (*(unsigned char *)(v26 + 10) == 1)
    {
      *(unsigned char *)(a1 + 24795) = 0;
      uint64_t v46 = *(unsigned __int8 **)(a1 + 872);
      sub_1D0D3CAE0(a1 + 14912, a1, v45, v44, a4, 1, ((unsigned __int16)*v19 >> 4) & 7);
      unsigned int v47 = v44;
      BOOL v48 = v28;
      sub_1D0D11CAC(a1, v45, v47, a4, v15, v28, a5, ((unsigned __int16)*v19 >> 4) & 7);
      sub_1D0D1076C(a1, *(_DWORD *)(a1 + 24524), *(_DWORD *)(a1 + 24528), v46, 1, 0, 0, 0, 0);
      uint64_t v38 = a7;
    }
    else
    {
      uint64_t v49 = v44;
      BOOL v48 = v28;
      sub_1D0D125BC(a1, v45, v49, a4, v28, 0, 1, 0, 0);
      unsigned int v50 = (unsigned __int16)*v19;
      uint64_t v38 = a7;
      if ((v50 & 0x80) == 0)
      {
        int v75 = 1 << v13;
        if (*(unsigned char *)(*(void *)(a1 + 968) + 204))
        {
          uint64_t v51 = a2;
          uint64_t v52 = v78;
          (*(void (**)(void, void))(a1 + 29752))((1 << v13), (1 << v13 >> 1));
          unsigned int v50 = (unsigned __int16)*v19;
        }
        else
        {
          uint64_t v52 = v78;
          uint64_t v51 = a2;
        }
        sub_1D0D3CAE0(a1 + 14912, a1, v51, v52, a4, *(unsigned __int8 *)(v26 + 10), (v50 >> 4) & 7);
        char v53 = sub_1D0D49FC0(a1 + 14912, v51, v52, 0);
        char v54 = sub_1D0D47BD4((void *)(a1 + 14912), v51, v52, 0, v28, 0);
        BOOL v48 = v28;
        if (v53 & 1) == 0 && (v54 & 1) == 0 && (*v19 & 0x70) == 0 && (*(unsigned char *)(v26 + 11))
        {
          *v19 |= 0x80u;
          *(unsigned char *)(v26 + 11) &= ~1u;
          *(unsigned char *)(v26 + 10) = 2;
          unsigned int v55 = *v28;
          if (v75 >= 8)
          {
            uint64_t v56 = 0;
            __int16 v57 = v19;
            do
            {
              int v58 = v57;
              uint64_t v59 = v75 >> 3;
              do
              {
                *v58++ = *v19;
                --v59;
              }
              while (v59);
              ++v56;
              v57 += v55 >> 3;
            }
            while (v56 != v75 >> 3);
            unsigned int v55 = *v28;
          }
          if (v75 >= 4)
          {
            uint64_t v60 = 0;
            int v61 = (void *)v26;
            do
            {
              int v62 = v61;
              uint64_t v63 = v75 >> 2;
              do
              {
                uint64_t v64 = *(void *)v26;
                *(void *)((char *)v62 + 6) = *(void *)(v26 + 6);
                *int v62 = v64;
                v62 += 2;
                --v63;
              }
              while (v63);
              ++v60;
              v61 += 2 * (v55 >> 2);
            }
            while (v60 != v75 >> 2);
          }
        }
      }
    }
    if (*(unsigned char *)(*(void *)(a1 + 14856) + 12) && *a8)
    {
      uint64_t v65 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117);
      if ((sub_1D0D12D84(a2, v78, v65 >> a4, v48, 0) & 1) != 0
        || (sub_1D0D12D84(a2, v78, v65 >> a4, v48, 1u) & 1) != 0
        || sub_1D0D12D84(a2, v78, v65 >> a4, v48, 2u))
      {
        __int16 v66 = v69;
        int *v38 = v69;
        *a8 = 0;
      }
      else
      {
        __int16 v66 = sub_1D0D11AB4(a1, a2, v78, a4, v48, *v38);
      }
      sub_1D0D11A38(v65, a2, v78, a4, v70, v66);
      sub_1D0D11A38(*(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117), a2, v78, a4, v48, v66);
    }
    if (v72 && *a8)
    {
      int v42 = sub_1D0D11AB4(a1, a2, v78, a4, v48, *v38);
      sub_1D0D11A38(*(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117), a2, v78, a4, v70, v42);
      sub_1D0D11A38(*(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117), a2, v78, a4, v48, v42);
      goto LABEL_49;
    }
  }
  else
  {
    int v68 = *(unsigned __int8 **)(a1 + 24552);
    char v21 = v13 - 1;
    int v22 = 1 << (v13 - 1);
    uint64_t v23 = *(void *)(a1 + 14856);
    unsigned int v71 = a4;
    if (*(unsigned char *)(v23 + 12) && v13 == *(_DWORD *)(v23 + 1636))
    {
      uint64_t v24 = a7;
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 984))(a2, a3, v71, a1);
      char v67 = 1;
      *a8 = 1;
      sub_1D0D11A38(*(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117), a2, v78, v71, v68, v25);
      LODWORD(v11) = a2;
      a6 = v25;
      LODWORD(a3) = v78;
      unsigned int v20 = (unsigned __int16)*v19;
    }
    else
    {
      uint64_t v24 = a7;
      char v67 = 0;
    }
    uint64_t v29 = a6;
    sub_1D0D0BF14(a1, v15, v11, a3, v71, (v20 >> 2) & 3, a6);
    int v30 = a2;
    int v31 = v78;
    for (unsigned int i = 0; i != 4; ++i)
    {
      uint64_t v33 = ((i & 1) << v21) + v30;
      int v34 = *(_DWORD *)(a1 + 16);
      if ((int)v33 < v34)
      {
        uint64_t v35 = (i >> 1 << v21) + v31;
        int v36 = *(_DWORD *)(a1 + 20);
        if ((int)v35 < v36)
        {
          uint64_t v37 = sub_1D0D0CA2C(a5, i, v22 + (int)a2 < v34, (int)(v22 + v78) < v36);
          sub_1D0D10960(a1, v33, v35, v71 + 1, v37, v29, v24, a8);
          int v30 = a2;
          int v31 = v78;
        }
      }
    }
    if ((v67 & 1) != 0 && *a8)
    {
      uint64_t v38 = v24;
      int v39 = *v24;
      int v40 = v31;
      int v41 = v30;
      int v42 = sub_1D0D11AB4(a1, v30, v31, v71, *(unsigned __int8 **)(a1 + 872), v39);
      sub_1D0D11B74(a1, v41, v40, v71, v70, v42, 1);
      sub_1D0D11B74(a1, v41, v40, v71, v68, v42, 1);
LABEL_49:
      int *v38 = v42;
      *a8 = 0;
    }
  }
}

int8x8_t sub_1D0D110E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int8x8_t result)
{
  while (1)
  {
    int v9 = a2 - *(_DWORD *)(a1 + 832);
    int v10 = a3 - *(_DWORD *)(a1 + 836);
    uint64_t v11 = *(void *)(a1 + 880);
    uint64_t v12 = *(void *)(a1 + 856) * ((uint64_t)v10 >> 3) + (v9 >> 3);
    unsigned int v13 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117) >> a4;
    uint64_t v14 = a2 + (v13 >> 1);
    uint64_t v15 = a3 + (v13 >> 1);
    unsigned int v16 = *(unsigned __int16 *)(v11 + 2 * v12);
    if (a4 >= (v16 & 3)) {
      break;
    }
    sub_1D0D110E4(a1, a2, a3, (a4 + 1));
    int v17 = *(_DWORD *)(a1 + 16);
    if ((int)v14 < v17 && *(_DWORD *)(a1 + 20) > (int)a3)
    {
      sub_1D0D110E4(a1, v14, a3, (a4 + 1));
      int v17 = *(_DWORD *)(a1 + 16);
    }
    if (v17 > (int)a2 && (int)v15 < *(_DWORD *)(a1 + 20))
    {
      sub_1D0D110E4(a1, a2, v15, (a4 + 1));
      int v17 = *(_DWORD *)(a1 + 16);
    }
    if ((int)v14 < v17)
    {
      ++a4;
      a2 = a2 + (v13 >> 1);
      a3 = a3 + (v13 >> 1);
      if ((int)v15 < *(_DWORD *)(a1 + 20)) {
        continue;
      }
    }
    return result;
  }
  if (((a3 | a2) & 0x80000000) != 0)
  {
    uint64_t v18 = 0;
    if (!v13)
    {
LABEL_13:
      if ((v16 & 0x80) == 0) {
        goto LABEL_14;
      }
LABEL_24:
      uint64_t v29 = *(void *)(a1 + 14840);
      if (!*(unsigned char *)(v29 + 564))
      {
        sub_1D0D11588(v29, v18, a2, a3, v13, v13);
      }
      return result;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 888) + 16 * (*(void *)(a1 + 864) * ((uint64_t)v10 >> 2) + (v9 >> 2));
    if (!v13) {
      goto LABEL_13;
    }
  }
  for (unsigned int i = 0; i < v13; i += 4)
  {
    for (unsigned int j = 0; j < v13; j += 4)
    {
      uint64_t v27 = *(void *)(a1 + 888)
          + 16
          * (*(void *)(a1 + 864) * ((uint64_t)(int)(i + a3 - *(_DWORD *)(a1 + 836)) >> 2)
           + ((int)(a2 + j - *(_DWORD *)(a1 + 832)) >> 2));
      uint64_t v28 = *(void *)(a1 + 14840) + 520;
      *(unsigned char *)(v27 + 8) = (*(unsigned char *)(v27 + 8) & 0xF0)
                          + *(unsigned char *)(v28 + ((unint64_t)*(unsigned __int8 *)(v27 + 8) >> 4));
      *(unsigned char *)(v27 + 9) = (*(unsigned char *)(v27 + 9) & 0xF0)
                          + *(unsigned char *)(v28 + ((unint64_t)*(unsigned __int8 *)(v27 + 9) >> 4) + 16);
    }
  }
  unsigned int v16 = *(unsigned __int16 *)(v11 + 2 * v12);
  if ((v16 & 0x80) != 0) {
    goto LABEL_24;
  }
LABEL_14:
  if (*(unsigned char *)(v18 + 10) != 1)
  {
    uint64_t v19 = *(void *)(a1 + 14840);
    if (!*(unsigned char *)(v19 + 564))
    {
      int v20 = v13 >> 1;
      switch((v16 >> 4) & 7)
      {
        case 0u:
          uint64_t v21 = v18;
          int v22 = a2;
          int v23 = a3;
          int v24 = v13;
          goto LABEL_30;
        case 1u:
          sub_1D0D11588(v19, v18, a2, a3, v13, v13 >> 1);
          uint64_t v34 = *(void *)(a1 + 14840);
          uint64_t v21 = sub_1D0D11730(a1 + 824, a2, a3 + (v13 >> 1));
          uint64_t v19 = v34;
          int v22 = a2;
          int v23 = a3 + (v13 >> 1);
          int v24 = v13;
          goto LABEL_32;
        case 2u:
          sub_1D0D11588(v19, v18, a2, a3, v13 >> 1, v13);
          uint64_t v35 = *(void *)(a1 + 14840);
          uint64_t v21 = sub_1D0D11730(a1 + 824, a2 + (v13 >> 1), a3);
          uint64_t v19 = v35;
          int v22 = a2 + (v13 >> 1);
          int v23 = a3;
          int v24 = v13 >> 1;
LABEL_30:
          int v30 = v13;
          goto LABEL_33;
        case 3u:
          sub_1D0D11588(v19, v18, a2, a3, v13 >> 1, v13 >> 1);
          uint64_t v36 = *(void *)(a1 + 14840);
          uint64_t v31 = sub_1D0D11730(a1 + 824, v14, a3);
          sub_1D0D11588(v36, v31, v14, a3, v20, v20);
          uint64_t v37 = *(void *)(a1 + 14840);
          uint64_t v32 = sub_1D0D11730(a1 + 824, a2, v15);
          sub_1D0D11588(v37, v32, a2, v15, v20, v20);
          uint64_t v38 = *(void *)(a1 + 14840);
          uint64_t v21 = sub_1D0D11730(a1 + 824, v14, v15);
          uint64_t v19 = v38;
          int v22 = a2 + (v13 >> 1);
          int v23 = a3 + (v13 >> 1);
          int v24 = v13 >> 1;
LABEL_32:
          int v30 = v13 >> 1;
LABEL_33:
          sub_1D0D11588(v19, v21, v22, v23, v24, v30);
          break;
        default:
          break;
      }
    }
  }
  if (!*(unsigned char *)(*(void *)(a1 + 14848) + 278) && !*(unsigned char *)(*(void *)(a1 + 14840) + 564))
  {
    if (*(unsigned char *)(v18 + 10) == 1)
    {
      BOOL v39 = 1;
      return sub_1D0D1177C(a1, a2, a3, 0, &v39, 1, result);
    }
    if (*(unsigned char *)(v18 + 11))
    {
      int v33 = *(_WORD *)(v11 + 2 * v12) & 0x70;
      BOOL v39 = (*(_WORD *)(v11 + 2 * v12) & 0x70) == 0;
      if (!v33) {
        return sub_1D0D1177C(a1, a2, a3, 0, &v39, 1, result);
      }
    }
    else
    {
      BOOL v39 = 0;
    }
    uint64_t result = sub_1D0D1177C(a1, a2, a3, 0, &v39, 0, result);
    if (!v39) {
      return result;
    }
    return sub_1D0D1177C(a1, a2, a3, 0, &v39, 1, result);
  }
  return result;
}

uint64_t sub_1D0D11588(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v10 = (void *)result;
  uint64_t v11 = *(void **)(result + 8);
  uint64_t v12 = v11[106];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    unsigned int v13 = (unsigned __int8 *)(v11[118] + v11[116] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    uint64_t v14 = a5 >> 2;
    uint64_t v15 = a2 - 16 * v12;
    do
    {
      unsigned int v16 = (uint64_t (*)(void *, uint64_t, uint64_t))v10[659];
      uint64_t v17 = v10[660];
      uint64_t v18 = (void *)((char *)v10 + (v17 >> 1));
      if (v17) {
        unsigned int v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v18 + v16);
      }
      uint64_t result = v16(v18, a2, v15);
      unsigned int v19 = *v13;
      if (v19 <= result) {
        LOBYTE(v19) = result;
      }
      *v13++ = v19;
      v15 += 16;
      --v14;
    }
    while (v14);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    int v20 = (unsigned __int8 *)(*(void *)(v10[1] + 968) + *(void *)(v10[1] + 936) * ((uint64_t)a3 >> 3) + (a4 >> 2));
    uint64_t v21 = a6 >> 2;
    uint64_t v22 = a2 - 16;
    do
    {
      int v23 = (uint64_t (*)(void *, uint64_t, uint64_t))v10[659];
      uint64_t v24 = v10[660];
      uint64_t v25 = (void *)((char *)v10 + (v24 >> 1));
      if (v24) {
        int v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v25 + v23);
      }
      uint64_t result = v23(v25, a2, v22);
      unsigned int v26 = *v20;
      if (v26 <= result) {
        LOBYTE(v26) = result;
      }
      *v20++ = v26;
      v22 += 16 * v12;
      --v21;
    }
    while (v21);
  }
  return result;
}

uint64_t sub_1D0D11730(uint64_t a1, int a2, int a3)
{
  if (((a3 | a2) & 0x80000000) == 0
    && ((int v3 = a2 - *(_DWORD *)(a1 + 8), v4 = a3 - *(_DWORD *)(a1 + 12), v5 = *(unsigned __int8 *)(a1 + 4), v3 < v5)
      ? (BOOL v6 = v4 < v5)
      : (BOOL v6 = 0),
        v6))
  {
    return *(void *)(a1 + 64) + 16 * (*(void *)(a1 + 40) * ((uint64_t)v4 >> 2) + (v3 >> 2));
  }
  else
  {
    return 0;
  }
}

int8x8_t sub_1D0D1177C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, BOOL *a5, uint64_t a6, int8x8_t result)
{
  LODWORD(v9) = a4;
  int v13 = -a4;
  if ((a6 & 1) == 0)
  {
LABEL_2:
    if (!*a5) {
      goto LABEL_3;
    }
    return result;
  }
LABEL_3:
  while (1)
  {
    int v14 = a2 - *(_DWORD *)(a1 + 832);
    int v15 = a3 - *(_DWORD *)(a1 + 836);
    uint64_t v16 = (uint64_t)v15 >> 3;
    unsigned int v17 = *(unsigned __int16 *)(*(void *)(a1 + 880) + 2 * (*(void *)(a1 + 856) * v16 + (v14 >> 3)));
    char v18 = *(unsigned char *)(*(void *)(a1 + 14848) + 2113) - (v17 & 3);
    if ((int)v9 >= (int)((v17 >> 2) & 3)) {
      break;
    }
    LOBYTE(v13) = v13 - 1;
    int v19 = 1 << (v13 + v18);
    uint64_t v20 = (v19 + a2);
    uint64_t v21 = (v19 + a3);
    uint64_t v9 = (v9 + 1);
    sub_1D0D1177C(a1, a2, a3, v9, a5, a6);
    sub_1D0D1177C(a1, v20, a3, v9, a5, a6);
    sub_1D0D1177C(a1, a2, v21, v9, a5, a6);
    a2 = v20;
    a3 = v21;
    if ((a6 & 1) == 0) {
      goto LABEL_2;
    }
  }
  uint64_t v22 = (uint64_t)v15 >> 2;
  int v23 = *(unsigned __int8 *)(*(void *)(a1 + 920) + (*(uint64_t *)(a1 + 840) >> 2) * v22 + (v14 >> 2));
  BOOL v25 = *a5 | v23
     || (uint64_t v24 = ((uint64_t)v14 >> 3) + (*(uint64_t *)(a1 + 848) >> 2) * v16, *(unsigned char *)(*(void *)(a1 + 928) + v24))
     || *(unsigned char *)(*(void *)(a1 + 936) + v24) != 0;
  *a5 = v25;
  if (a6)
  {
    char v26 = v13 + v18;
    if (*(unsigned char *)(*(void *)(a1 + 888) + 16 * (((uint64_t)v14 >> 2) + *(void *)(a1 + 864) * v22) + 10) == 1)
    {
      uint64_t v27 = *(void **)(*(void *)(a1 + 14840) + 8);
      int v28 = 1 << v26;
      int8x8_t v29 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(void *)&vdup_n_s32((2 << v26) - 64));
      uint64_t v30 = v27[117];
      uint64_t v31 = (uint64_t)(int)a3 >> 2;
      uint64_t v32 = v27[121];
      uint64_t v33 = v27[116];
      uint64_t v34 = (uint64_t)(int)a2 >> 2;
      uint64_t v35 = v27[118];
      if (v28 > 4)
      {
LABEL_12:
        uint64_t v36 = v34 + v33 * ((uint64_t)(int)a3 >> 3);
        int8x8_t v37 = vmax_s8(*(int8x8_t *)(v35 + v36), v29);
        *(int8x8_t *)(v32 + v31 + v30 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v32+ v31+ v30 * ((uint64_t)(int)a2 >> 3)), v29);
        *(int8x8_t *)(v35 + v36) = v37;
      }
    }
    else
    {
      if (!v23) {
        return result;
      }
      int v41 = *(void **)(*(void *)(a1 + 14840) + 8);
      int v28 = 1 << v26;
      int8x8_t v29 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(void *)&vdup_n_s32((2 << v26) - 64));
      uint64_t v30 = v41[117];
      uint64_t v31 = (uint64_t)(int)a3 >> 2;
      uint64_t v32 = v41[121];
      uint64_t v33 = v41[116];
      uint64_t v34 = (uint64_t)(int)a2 >> 2;
      uint64_t v35 = v41[118];
      if (v28 >= 5) {
        goto LABEL_12;
      }
    }
    uint64_t v38 = v34 + v33 * ((uint64_t)(v28 + (int)a3) >> 3);
    uint64_t v39 = v31 + v30 * ((uint64_t)(v28 + (int)a2) >> 3);
    int8x8_t v40 = vmax_s8(*(int8x8_t *)(v32 + v39), v29);
    uint64_t result = vmax_s8(*(int8x8_t *)(v35 + v38), v29);
    *(int8x8_t *)(v32 + v39) = v40;
    *(int8x8_t *)(v35 + v38) = result;
  }
  return result;
}

uint64_t sub_1D0D11A38(uint64_t result, int a2, int a3, char a4, unsigned __int8 *a5, __int16 a6)
{
  uint64_t v6 = result >> (a4 + 3);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *((void *)a5 + 11)
       + 2
       * (((uint64_t)(a2 - *((_DWORD *)a5 + 1)) >> 3) + ((unint64_t)*a5 >> 3) * ((a3 - *((_DWORD *)a5 + 2)) >> 3));
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v10 = i + v7 * ((unint64_t)*a5 >> 3);
        *(_WORD *)(v8 + 2 * v10) = *(_WORD *)(v8 + 2 * v10) & 0x1FF | (a6 << 9);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t sub_1D0D11AB4(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v6 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4;
  if (v6 <= *(_DWORD *)(*(void *)(a1 + 14856) + 1636)) {
    LOBYTE(v6) = *(_DWORD *)(*(void *)(a1 + 14856) + 1636);
  }
  int v7 = -1 << v6;
  int v8 = v7 & a2;
  int v9 = v7 & a3;
  int v10 = a6;
  if (v8 != *(_DWORD *)(a1 + 24524)) {
    int v10 = *(__int16 *)(*((void *)a5 + 11)
  }
                     + 2
                     * (((uint64_t)(v8 + ~*((_DWORD *)a5 + 1)) >> 3)
                      + ((unint64_t)*a5 >> 3) * ((v9 - *((_DWORD *)a5 + 2)) >> 3))) >> 9;
  if (v9 != *(_DWORD *)(a1 + 24528)) {
    a6 = *(__int16 *)(*((void *)a5 + 11)
  }
                    + 2
                    * (((uint64_t)(v8 - *((_DWORD *)a5 + 1)) >> 3)
                     + ((unint64_t)*a5 >> 3) * ((v9 + ~*((_DWORD *)a5 + 2)) >> 3))) >> 9;
  return ((v10 + a6 + 1) >> 1);
}

uint64_t sub_1D0D11B74(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, __int16 a6, int a7)
{
  if (*(unsigned __int8 *)(*(void *)(result + 14848) + 2113) - a4 <= *(_DWORD *)(*(void *)(result + 14856)
                                                                                    + 1636))
    int v7 = *(_DWORD *)(*(void *)(result + 14856) + 1636);
  else {
    int v7 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113) - a4;
  }
  int v8 = 1 << v7;
  int v9 = -(1 << v7) & a2;
  int v10 = -(1 << v7) & a3;
  if (a7)
  {
    char v11 = v7 - 3;
    if (v7 != 34)
    {
      uint64_t v12 = 0;
      unint64_t v13 = (unint64_t)*a5 >> 3;
      uint64_t v14 = *((void *)a5 + 11)
          + 2 * (((uint64_t)(v9 - *((_DWORD *)a5 + 1)) >> 3) + (int)v13 * (uint64_t)((v10 - *((_DWORD *)a5 + 2)) >> 3));
      LODWORD(v15) = 1 << v11;
      if ((int)v15 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v15;
      }
      uint64_t v16 = 2 * v13;
      do
      {
        unsigned int v17 = (_WORD *)v14;
        uint64_t v18 = v15;
        do
        {
          *unsigned int v17 = *v17 & 0x1FF | (a6 << 9);
          ++v17;
          --v18;
        }
        while (v18);
        ++v12;
        v14 += v16;
      }
      while (v12 != v15);
    }
  }
  else
  {
    int v19 = v9 + v8;
    if (v9 + v8 >= *(_DWORD *)(result + 16)) {
      int v19 = *(_DWORD *)(result + 16);
    }
    int v20 = v10 + v8;
    if (v20 >= *(_DWORD *)(result + 20)) {
      int v20 = *(_DWORD *)(result + 20);
    }
    for (; v10 < v20; v10 += 8)
    {
      if (v9 < v19)
      {
        int v21 = v9;
        do
        {
          uint64_t v22 = *(void *)(*(void *)(result + 14840) + 8);
          uint64_t v23 = *(void *)(v22 + 800);
          uint64_t v24 = *(void *)(v22 + 768) * ((uint64_t)v10 >> 3) + (v21 >> 3);
          *(_WORD *)(v23 + 2 * v24) = *(_WORD *)(v23 + 2 * v24) & 0x1FF | (a6 << 9);
          v21 += 8;
        }
        while (v21 < v19);
      }
    }
  }
  return result;
}

uint64_t sub_1D0D11CAC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned int a7, unsigned int a8)
{
  char v11 = (unsigned char *)a1;
  uint64_t v12 = 0;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  char v13 = *(unsigned char *)(*(void *)(a1 + 14848) + 2113) - a4;
  int v14 = *(unsigned __int8 *)(a1 + 196);
  int v15 = a2 - *((_DWORD *)a6 + 1);
  int v16 = a3 - *((_DWORD *)a6 + 2);
  int v91 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4;
  char v98 = 35;
  int v17 = *(unsigned __int8 *)(*((void *)a6 + 12)
                           + 16 * (((uint64_t)v15 >> 2) + ((unint64_t)*a6 >> 2) * (v16 >> 2)));
  int v96 = 0;
  int v97 = 17439232;
  if (a8 == 3) {
    uint64_t v18 = 4;
  }
  else {
    uint64_t v18 = 1;
  }
  char v19 = v13 - (a8 == 3);
  do
  {
    v99[v12 + 4] = ((v12 & 1) << v19) + a2;
    v99[v12] = (v12 >> 1 << v19) + a3;
    ++v12;
  }
  while (v18 != v12);
  uint64_t v20 = 0;
  BOOL v84 = a8 == 3;
  int v21 = 1 << v19;
  while (*((unsigned __int8 *)&v97 + v20) != v17)
  {
    if (++v20 == 4) {
      goto LABEL_11;
    }
  }
  *((unsigned char *)&v97 + v20) = 34;
LABEL_11:
  int v22 = *(char *)(*(void *)(a1 + 968) + 499);
  int v81 = (void **)*((void *)a6 + 17);
  int v85 = v17;
  if (v22 != 2)
  {
    if (v22 == 1)
    {
      int v80 = (uint64_t *)(a1 + 8 * a4 + 24712);
      *((void *)a5 + 18) = *v80;
      int v82 = (uint64_t *)(a5 + 144);
      goto LABEL_14;
    }
LABEL_18:
    char v89 = 0;
    int v80 = (uint64_t *)(a1 + 8 * a4 + 24712);
    *((void *)a5 + 18) = *v80;
    int v82 = (uint64_t *)(a5 + 144);
    __int16 v23 = 2 * (v14 == 0);
    goto LABEL_19;
  }
  if (!v14) {
    goto LABEL_18;
  }
  uint64_t v24 = *(void *)(a1 + 14840);
  if (*(unsigned __int8 *)(*(void *)(v24 + 5320) + 648) <= 2u)
  {
    char v89 = 0;
    __int16 v23 = 0;
    int v80 = (uint64_t *)&v11[8 * a4 + 24712];
    *((void *)a5 + 18) = *v80;
    int v82 = (uint64_t *)(a5 + 144);
    goto LABEL_19;
  }
  int v72 = v11;
  char v73 = sub_1D0D0CAE4(v24, a2, a3);
  char v11 = v72;
  int v80 = (uint64_t *)&v72[8 * a4 + 24712];
  *((void *)a5 + 18) = *v80;
  int v82 = (uint64_t *)(a5 + 144);
  if (v73)
  {
    char v89 = 0;
    __int16 v23 = 0;
    goto LABEL_19;
  }
LABEL_14:
  __int16 v23 = 2;
  char v89 = 1;
LABEL_19:
  uint64_t v25 = 0;
  LODWORD(v26) = 0;
  uint64_t v27 = *((void *)a5 + 17);
  *(_DWORD *)(v27 + 112) = 0;
  *(void *)(v27 + 88) = 0;
  *(void *)(v27 + 96) = 0;
  *(void *)(v27 + 104) = -1;
  *(_WORD *)(v27 + 116) = v23;
  uint64_t v28 = v21 >> 2;
  uint64_t v88 = (uint64_t)(v11 + 14912);
  uint64_t v29 = *((void *)a5 + 18);
  __int16 v83 = v23;
  uint64_t v94 = (uint64_t)v11;
  do
  {
    unsigned int v93 = v26;
    uint64_t v30 = 0;
    *(_DWORD *)(v29 + 112) = 0;
    *(void *)(v29 + 88) = 0;
    *(void *)(v29 + 96) = 0;
    *(void *)(v29 + 104) = -1;
    *(_WORD *)(v29 + 116) = v23;
    uint64_t v95 = v25;
    uint64_t v26 = *((unsigned __int8 *)&v97 + v25);
    do
    {
      unint64_t v31 = *((void *)a5 + 12)
          + 16
          * (((uint64_t)(v99[v30 + 4] - *((_DWORD *)a5 + 1)) >> 2)
           + ((unint64_t)*a5 >> 2) * ((v99[v30] - *((_DWORD *)a5 + 2)) >> 2));
      *(unsigned char *)(v31 + 1) = v26;
      if (v21 >= 4)
      {
        uint64_t v32 = 0;
        unint64_t v33 = 16 * ((unint64_t)*a5 >> 2);
        uint64_t v34 = (void *)v31;
        do
        {
          uint64_t v35 = v34;
          uint64_t v36 = v21 >> 2;
          do
          {
            uint64_t v37 = *(void *)v31;
            *(void *)((char *)v35 + 6) = *(void *)(v31 + 6);
            *uint64_t v35 = v37;
            v35 += 2;
            --v36;
          }
          while (v36);
          ++v32;
          uint64_t v34 = (void *)((char *)v34 + v33);
        }
        while (v32 != v28);
      }
      ++v30;
    }
    while (v30 != v18);
    char v38 = v89;
    if (!v11[196]) {
      char v38 = 1;
    }
    if (v38)
    {
      uint64_t v39 = sub_1D0D440B0(v88, a2, a3, a5, a6, a8, v26, v91, 0, 0, a7);
      uint64_t v29 = *((void *)a5 + 18);
      *(void *)(v29 + 88) = v39;
      if (v26 == 35) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = 3;
      }
    }
    else
    {
      *(void *)(*((void *)a5 + 18) + 88) = sub_1D0D4480C(v88, a2, a3, a5, a6, 1u, a8, v26, v91, v84, 0, a7, &v96);
      __int16 v23 = v83;
      uint64_t result = sub_1D0D12E40(v94, a2, a3, a4, (uint64_t)a5, v26, v85);
      uint64_t v29 = *((void *)a5 + 18);
      uint64_t v39 = *(void *)(v29 + 88);
    }
    *(_DWORD *)(v29 + 112) = result;
    char v11 = (unsigned char *)v94;
    unint64_t v41 = ((*(unsigned __int16 *)(v94 + 2 * *(__int16 *)(v29 + 116) + 1152) * (unint64_t)result) >> (8 * (*(_WORD *)(v29 + 116) == 0)))
        + v39;
    *(void *)(v29 + 104) = v41;
    uint64_t v42 = *((void *)a5 + 17);
    if (v41 >= *(void *)(v42 + 104))
    {
      uint64_t v26 = v93;
    }
    else
    {
      *((void *)a5 + 17) = v29;
      *((void *)a5 + 18) = v42;
      uint64_t v29 = v42;
    }
    uint64_t v25 = v95 + 1;
  }
  while (v95 != 4);
  uint64_t v43 = *((void *)a5 + 17);
  if (v89)
  {
    uint64_t v44 = 0;
    *(_DWORD *)(v43 + 112) = 0;
    *(void *)(v43 + 88) = 0;
    *(void *)(v43 + 96) = 0;
    *(void *)(v43 + 104) = -1;
    *(_WORD *)(v43 + 116) = 0;
    uint64_t v45 = *v82;
    *(_DWORD *)(v45 + 112) = 0;
    *(void *)(v45 + 88) = 0;
    *(void *)(v45 + 96) = 0;
    *(void *)(v45 + 104) = -1;
    *(_WORD *)(v45 + 116) = 0;
    uint64_t v46 = a3;
    do
    {
      unint64_t v47 = *((void *)a5 + 12)
          + 16
          * (((uint64_t)(v99[v44 + 4] - *((_DWORD *)a5 + 1)) >> 2)
           + ((unint64_t)*a5 >> 2) * ((v99[v44] - *((_DWORD *)a5 + 2)) >> 2));
      *(unsigned char *)(v47 + 1) = v26;
      if (v21 >= 4)
      {
        uint64_t v48 = 0;
        unint64_t v49 = 16 * ((unint64_t)*a5 >> 2);
        unsigned int v50 = (void *)v47;
        do
        {
          uint64_t v51 = v50;
          uint64_t v52 = v21 >> 2;
          do
          {
            uint64_t v53 = *(void *)v47;
            *(void *)((char *)v51 + 6) = *(void *)(v47 + 6);
            void *v51 = v53;
            v51 += 2;
            --v52;
          }
          while (v52);
          ++v48;
          unsigned int v50 = (void *)((char *)v50 + v49);
        }
        while (v48 != v28);
      }
      ++v44;
    }
    while (v44 != v18);
    *(void *)(*((void *)a5 + 18) + 88) = sub_1D0D4480C(v88, a2, a3, a5, a6, 1u, a8, v26, v91, v84, 0, a7, &v96);
    uint64_t result = sub_1D0D12E40(v94, a2, a3, a4, (uint64_t)a5, v26, v85);
    char v11 = (unsigned char *)v94;
    uint64_t v54 = *((void *)a5 + 18);
    *(_DWORD *)(v54 + 112) = result;
    unint64_t v55 = ((*(unsigned __int16 *)(v94 + 2 * *(__int16 *)(v54 + 116) + 1152) * (unint64_t)result) >> (8 * (*(_WORD *)(v54 + 116) == 0)))
        + *(void *)(v54 + 88);
    *(void *)(v54 + 104) = v55;
    uint64_t v43 = *((void *)a5 + 17);
    uint64_t v56 = v81;
    if (v55 < *(void *)(v43 + 104))
    {
      *((void *)a5 + 17) = v54;
      *((void *)a5 + 18) = v43;
      uint64_t v43 = v54;
    }
  }
  else
  {
    uint64_t v46 = a3;
    uint64_t v56 = v81;
  }
  uint64_t v57 = 0;
  int v58 = &a5[32 * v11[196]];
  *((void *)v58 + 21) += *(void *)(v43 + 88);
  *((_DWORD *)v58 + 48) += *(_DWORD *)(v43 + 112);
  do
  {
    unint64_t v59 = *((void *)a6 + 12)
        + 16
        * (((uint64_t)(v99[v57 + 4] - *((_DWORD *)a6 + 1)) >> 2)
         + ((unint64_t)*a6 >> 2) * ((v99[v57] - *((_DWORD *)a6 + 2)) >> 2));
    *(unsigned char *)(v59 + 1) = v26;
    if (v21 >= 4)
    {
      uint64_t v60 = 0;
      unint64_t v61 = 16 * ((unint64_t)*a6 >> 2);
      int v62 = (void *)v59;
      do
      {
        uint64_t v63 = v62;
        uint64_t v64 = v21 >> 2;
        do
        {
          uint64_t v65 = *(void *)v59;
          uint64_t result = *(void *)(v59 + 6);
          *(void *)((char *)v63 + 6) = result;
          *uint64_t v63 = v65;
          v63 += 2;
          --v64;
        }
        while (v64);
        ++v60;
        int v62 = (void *)((char *)v62 + v61);
      }
      while (v60 != v28);
    }
    ++v57;
  }
  while (v57 != v18);
  int v96 = 0;
  if (v11[196])
  {
    uint64_t v66 = *((void *)a5 + 17);
    goto LABEL_63;
  }
  if ((*(_WORD *)(*((void *)a6 + 11)
                 + 2
                 * (((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                  + ((unint64_t)*a6 >> 3) * (((int)v46 - *((_DWORD *)a6 + 2)) >> 3))) & 0xC) == 0
    || v11[29744])
  {
    char v67 = v11;
    uint64_t result = sub_1D0D4480C(v88, a2, v46, a5, a6, 0, a8, v26, v91, 0, 0, a7, &v96);
    char v11 = v67;
    uint64_t v66 = *((void *)a5 + 17);
    if (!*v67) {
      goto LABEL_63;
    }
    uint64_t v68 = result;
    *(void *)(v66 + 88) = result;
    int v69 = *(_DWORD *)(v66 + 112) + v96;
    *(_DWORD *)(v66 + 112) = v69;
LABEL_62:
    *((void *)a5 + 25) += v68;
    *((_DWORD *)a5 + 56) += v69;
    goto LABEL_63;
  }
  uint64_t v66 = *((void *)a5 + 17);
  if (*v11)
  {
    uint64_t v74 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    int v75 = ((int)v46 - *((_DWORD *)a5 + 2)) >> 1;
    uint64_t v76 = *(unsigned __int8 *)(v66 + 1);
    uint64_t v77 = **(void **)(v66 + 72)
        + (*(void *)(v66 + 80) + v74 + 2 * (int)v76 * (uint64_t)v75) * *(int *)(*(void *)(v66 + 72) + 16);
    uint64_t v78 = ((uint64_t)(int)v74 >> 1) + v76 * v75;
    int v79 = v11;
    uint64_t result = sub_1D0D44CC4(v88, a2, v46, a5, v77, 2 * v76, *(void *)(v66 + 40) + 2 * v78, *(void *)(v66 + 48) + 2 * v78, v76, 1 << v91 >> 1, &v96);
    char v11 = v79;
    uint64_t v68 = result;
    uint64_t v66 = *((void *)a5 + 17);
    *(void *)(v66 + 88) = result;
    int v69 = *(_DWORD *)(v66 + 112) + v96;
    *(_DWORD *)(v66 + 112) = v69;
    if (*v79) {
      goto LABEL_62;
    }
  }
LABEL_63:
  if (v56 != (void **)v66)
  {
    int v70 = v11;
    uint64_t result = (uint64_t)sub_1D0D0C498(*((uint64_t (**)(void, uint64_t))v11 + 3719), v56, (const void **)v66, (int)a2 - *((_DWORD *)a6 + 1), (int)v46 - *((_DWORD *)a6 + 2), (int)a2 - *((_DWORD *)a5 + 1), (int)v46 - *((_DWORD *)a5 + 2), *a5 >> 1);
    if (!v70[8])
    {
      uint64_t v71 = *((void *)a5 + 17);
      *((void *)a5 + 17) = *((void *)a5 + 18);
      *((void *)a5 + 18) = v71;
    }
  }
  *int v80 = *v82;
  return result;
}

uint64_t sub_1D0D125BC(uint64_t a1, int a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, unsigned int *a9)
{
  uint64_t v11 = a3;
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - (uint64_t)a4;
  int v13 = 1 << (v12 - 1);
  int v99 = v13 + a2;
  unsigned int v97 = v13;
  uint64_t v14 = (v13 + a3);
  if (a5)
  {
    int v15 = *((_DWORD *)a5 + 1);
    int v16 = *((_DWORD *)a5 + 2);
    int v17 = a2 - v15;
    int v18 = a3 - v16;
    unint64_t v19 = *a5;
    uint64_t v20 = *((void *)a5 + 12);
    int v21 = (unsigned __int16 *)(*((void *)a5 + 11)
                             + 2 * (((uint64_t)(a2 - v15) >> 3) + (int)(v19 >> 3) * (uint64_t)(((int)a3 - v16) >> 3)));
    v19 >>= 2;
    uint64_t v22 = (uint64_t)(a2 - v15) >> 2;
    __int16 v23 = (unsigned int *)(v20 + 16 * (v22 + (int)v19 * (uint64_t)(((int)a3 - v16) >> 2)));
    int v24 = v99 - v15;
    uint64_t v25 = (uint64_t)(v99 - v15) >> 2;
    uint64_t v95 = (unsigned int *)(v20 + 16 * (v25 + (int)v19 * (uint64_t)(v18 >> 2)));
    int v26 = v14 - v16;
    uint64_t v27 = (unsigned int *)(v20 + 16 * (v22 + (int)v19 * (uint64_t)(((int)v14 - v16) >> 2)));
    uint64_t v28 = v20 + 16 * (v25 + (int)v19 * (uint64_t)(((int)v14 - v16) >> 2));
    uint64_t v29 = (unsigned __int8 *)*((void *)a5 + 17);
    uint64_t v30 = *v29;
    uint64_t v31 = 2 * v29[1];
    if ((a6 & 1) == 0)
    {
      if (a8 || (a7 & 1) != 0)
      {
        uint64_t v38 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v32 = v17;
        uint64_t v39 = v24;
LABEL_39:
        int v60 = v18 >> 1;
        int v62 = (uint64_t *)*((void *)v29 + 9);
        uint64_t v61 = *((void *)v29 + 10);
        uint64_t v63 = v61 + v32;
        uint64_t v64 = *((int *)v62 + 4);
        uint64_t v65 = *v62;
        uint64_t v52 = v65 + (v63 + (int)v31 * (uint64_t)v60) * v64;
        uint64_t v66 = v61 + v39;
        uint64_t v53 = v65 + (v66 + (int)v31 * (uint64_t)v60) * v64;
        uint64_t v54 = v65 + (v63 + (int)v31 * (uint64_t)(v26 >> 1)) * v64;
        uint64_t v55 = v65 + (v66 + (int)v31 * (uint64_t)(v26 >> 1)) * v64;
        goto LABEL_40;
      }
      char v45 = 0;
      uint64_t v43 = 0;
      uint64_t v42 = 0;
      uint64_t v41 = 0;
      uint64_t v38 = 0;
LABEL_36:
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      goto LABEL_41;
    }
    uint64_t v32 = v17;
    unint64_t v33 = (uint64_t *)*((void *)v29 + 7);
    uint64_t v34 = *((void *)v29 + 8);
    uint64_t v35 = v34 + v17;
    uint64_t v36 = *((int *)v33 + 4);
    uint64_t v37 = *v33;
    uint64_t v38 = v37 + (v35 + *v29 * (uint64_t)v18) * v36;
    uint64_t v39 = v24;
    uint64_t v40 = v34 + v24;
    uint64_t v41 = v37 + (v40 + *v29 * (uint64_t)v18) * v36;
    uint64_t v42 = v37 + (v35 + *v29 * (uint64_t)v26) * v36;
    uint64_t v43 = v37 + (v40 + *v29 * (uint64_t)v26) * v36;
    if (a8 || (a7 & 1) != 0) {
      goto LABEL_39;
    }
LABEL_35:
    char v45 = 0;
    goto LABEL_36;
  }
  if (((a3 | a2) & 0x80000000) != 0
    || (uint64_t v44 = *(void *)(*(void *)(a1 + 14840) + 8), *(_DWORD *)(v44 + 520) <= a2))
  {
    int v21 = 0;
  }
  else
  {
    if (*(_DWORD *)(v44 + 524) <= (int)a3) {
      int v21 = 0;
    }
    else {
      int v21 = (unsigned __int16 *)(*(void *)(v44 + 800)
    }
                               + 2 * (*(void *)(v44 + 768) * ((uint64_t)(int)a3 >> 3) + (a2 >> 3)));
    if (*(_DWORD *)(v44 + 524) > (int)a3)
    {
      __int16 v23 = (unsigned int *)(*(void *)(v44 + 880) + 16
                                                    * (*(void *)(v44 + 848) * ((uint64_t)(int)a3 >> 2) + (a2 >> 2)));
      goto LABEL_15;
    }
  }
  __int16 v23 = 0;
LABEL_15:
  if (((v99 | a3) & 0x80000000) != 0
    || (uint64_t v46 = *(void *)(*(void *)(a1 + 14840) + 8), *(_DWORD *)(v46 + 520) <= v99)
    || *(_DWORD *)(v46 + 524) <= (int)a3)
  {
    uint64_t v95 = 0;
  }
  else
  {
    uint64_t v95 = (unsigned int *)(*(void *)(v46 + 880) + 16 * (*(void *)(v46 + 848) * ((uint64_t)(int)a3 >> 2) + (v99 >> 2)));
  }
  uint64_t v47 = *(void *)(*(void *)(a1 + 14840) + 8);
  if (((v14 | a2) & 0x80000000) != 0
    || *(_DWORD *)(v47 + 520) <= a2
    || *(_DWORD *)(v47 + 524) <= (int)v14)
  {
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = (unsigned int *)(*(void *)(v47 + 880) + 16 * (*(void *)(v47 + 848) * ((uint64_t)(int)v14 >> 2) + (a2 >> 2)));
  }
  if (((v14 | v99) & 0x80000000) != 0
    || *(_DWORD *)(v47 + 520) <= v99
    || *(_DWORD *)(v47 + 524) <= (int)v14)
  {
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = *(void *)(v47 + 880) + 16 * (*(void *)(v47 + 848) * ((uint64_t)(int)v14 >> 2) + (v99 >> 2));
  }
  uint64_t v30 = *(void *)(v47 + 416);
  uint64_t v31 = *(void *)(v47 + 424);
  if (a6)
  {
    uint64_t v48 = v30 * (int)a3;
    uint64_t v49 = *(void *)(v47 + 400);
    char v50 = *(unsigned char *)(v47 + 531);
    uint64_t v38 = v49 + ((v48 + a2) << v50);
    uint64_t v41 = v49 + ((v48 + v99) << v50);
    uint64_t v51 = v30 * (int)v14;
    uint64_t v42 = v49 + ((v51 + a2) << v50);
    uint64_t v43 = v49 + ((v51 + v99) << v50);
    if (a8) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    if (a8) {
      goto LABEL_37;
    }
  }
  if ((a7 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_37:
  uint64_t v56 = v31 * ((uint64_t)(int)v11 >> 1);
  uint64_t v57 = *(void *)(v47 + 408);
  char v58 = *(unsigned char *)(v47 + 531);
  uint64_t v52 = v57 + ((v56 + (int)(a2 & 0xFFFFFFFE)) << v58);
  uint64_t v53 = v57 + ((v56 + (int)(v99 & 0xFFFFFFFE)) << v58);
  uint64_t v59 = v31 * ((uint64_t)(int)v14 >> 1);
  uint64_t v54 = v57 + ((v59 + (int)(a2 & 0xFFFFFFFE)) << v58);
  uint64_t v55 = v57 + ((v59 + (int)(v99 & 0xFFFFFFFE)) << v58);
LABEL_40:
  char v45 = 1;
LABEL_41:
  uint64_t v67 = (1 << v12);
  switch((*v21 >> 4) & 7)
  {
    case 0:
      uint64_t v68 = v12;
      sub_1D0D57784(*(void *)(a1 + 14840), v23, a2, v11, v67, v67, v30, v38, v31, v52);
      uint64_t v12 = v68;
      break;
    case 1:
      uint64_t v90 = v42;
      uint64_t v100 = v14;
      uint64_t v94 = v12;
      uint64_t v69 = v54;
      int v92 = v11;
      sub_1D0D57784(*(void *)(a1 + 14840), v23, a2, v11, (1 << v12), v97, v30, v38, v31, v52);
      sub_1D0D57784(*(void *)(a1 + 14840), v27, a2, v100, v67, v97, v30, v90, v31, v69);
      goto LABEL_46;
    case 2:
      uint64_t v94 = v12;
      uint64_t v70 = v41;
      sub_1D0D57784(*(void *)(a1 + 14840), v23, a2, v11, v97, v67, v30, v38, v31, v52);
      sub_1D0D57784(*(void *)(a1 + 14840), v95, v99, v11, v97, v67, v30, v70, v31, v53);
      goto LABEL_47;
    case 3:
      uint64_t v91 = v42;
      uint64_t v85 = v52;
      uint64_t v88 = (unsigned int *)v28;
      uint64_t v89 = v43;
      uint64_t v86 = v27;
      uint64_t v94 = v12;
      uint64_t v71 = v97;
      uint64_t v72 = v41;
      uint64_t v73 = v53;
      uint64_t v74 = v54;
      int v92 = v11;
      uint64_t v87 = v55;
      sub_1D0D57784(*(void *)(a1 + 14840), v23, a2, v11, v97, v97, v30, v38, v31, v85);
      sub_1D0D57784(*(void *)(a1 + 14840), v95, v99, v11, v71, v71, v30, v72, v31, v73);
      sub_1D0D57784(*(void *)(a1 + 14840), v86, a2, v14, v71, v71, v30, v91, v31, v74);
      sub_1D0D57784(*(void *)(a1 + 14840), v88, v99, v14, v97, v97, v30, v89, v31, v87);
LABEL_46:
      LODWORD(v11) = v92;
LABEL_47:
      uint64_t v12 = v94;
      break;
    default:
      break;
  }
  char v75 = v45 ^ 1;
  if (!a5) {
    char v75 = 1;
  }
  if (v75) {
    return 0;
  }
  uint64_t v76 = **((void **)a5 + 5)
      + (*((void *)a5 + 6) - *((int *)a5 + 1) + a2 + a5[1] * (uint64_t)(((int)v11 - *((_DWORD *)a5 + 2)) >> 1))
      * *(int *)(*((void *)a5 + 5) + 16);
  uint64_t v77 = *(unsigned int (**)(void, void, uint64_t))(a1 + 8 * v12 + 1416);
  if (a8 == 1)
  {
    unint64_t v78 = (*(unsigned __int16 *)(a1 + 1164) * (unint64_t)v77(v97, v97, v76)) >> 8;
    unsigned int v79 = *a9;
    int v80 = *(char *)(*(void *)(a1 + 968) + 203);
    unsigned int v81 = v79 + (v79 >> 1);
    unsigned int v82 = v79 - (v79 >> 2);
    if (v80 == 1) {
      unsigned int v79 = *a9 >> 1;
    }
    if (v80 == 2) {
      unsigned int v79 = v82;
    }
    if (v80 == 4) {
      unsigned int v79 = v81;
    }
    return (v79 <= v78) | (2 * (v78 >= v79 >> 1));
  }
  else
  {
    uint64_t result = 0;
    if (a9 && a7)
    {
      unsigned int v84 = v77(v97, v97, v76);
      uint64_t result = 0;
      *(void *)a9 += ((*(unsigned __int16 *)(a1 + 1164) * (unint64_t)v84) >> 8);
    }
  }
  return result;
}

uint64_t sub_1D0D12D84(int a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (a3 >= 1)
  {
    int v5 = a3 + a2;
    if (a5) {
      char v6 = 3;
    }
    else {
      char v6 = 2;
    }
    uint64_t v7 = a5;
    BOOL v8 = (int)a5 > 0;
    int v9 = *((_DWORD *)a4 + 2);
    while (2)
    {
      int v10 = a1;
      do
      {
        if (*(unsigned char *)(*((void *)a4 + 12)
                      + 16 * (((unint64_t)*a4 >> 2) * ((a2 - v9) >> 2) + ((v10 - *((_DWORD *)a4 + 1)) >> 2))
                      + 10) != 2
          && *(unsigned char *)(*(void *)(*((void *)a4 + 17) + 8 * v7 + 8)
                      + ((unint64_t)*(unsigned __int8 *)(*((void *)a4 + 17) + v8) >> 2) * ((a2 - v9) >> v6)
                      + ((v10 - *((_DWORD *)a4 + 1)) >> v6)))
        {
          return 1;
        }
        v10 += 4;
      }
      while (v10 < a3 + a1);
      a2 += 4;
      if (a2 < v5) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t sub_1D0D12E40(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  char v17 = 0;
  (*(void (**)(void))(**(void **)(a1 + 944) + 88))(*(void *)(a1 + 944));
  int v16 = *(_DWORD *)(a5 + 20);
  sub_1D0D12F84(*(uint64_t (****)(void))(a1 + 944), a7, a6);
  sub_1D0D1076C(a1, a2, a3, (unsigned __int8 *)a5, 1, 0, 0, 0, 1);
  sub_1D0D3FBE4(a1 + 14912, a2, a3, a4, &v16, &v17, 0);
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 80))(*(void *)(a1 + 944));
  (*(void (**)(void))(**(void **)(a1 + 944) + 96))(*(void *)(a1 + 944));
  return v14;
}

uint64_t sub_1D0D12F84(uint64_t (***a1)(void), int a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int v5 = **a1;
  if (a3 == 35)
  {
    return v5();
  }
  else
  {
    ((void (*)(uint64_t (***)(void), uint64_t, char *))v5)(a1, 1, (char *)a1 + 65);
    uint64_t v8 = 0;
    char v12 = 35;
    int v11 = 17439232;
    while (*((unsigned __int8 *)&v11 + v8) != a2)
    {
      if (++v8 == 4) {
        goto LABEL_10;
      }
    }
    *((unsigned char *)&v11 + v8) = 34;
LABEL_10:
    uint64_t v9 = 0;
    while (*((unsigned __int8 *)&v11 + v9) != v3)
    {
      if (++v9 == 4) {
        goto LABEL_15;
      }
    }
    uint64_t v3 = v9;
LABEL_15:
    int v10 = (*a1)[3];
    return ((uint64_t (*)(uint64_t (***)(void), uint64_t, uint64_t))v10)(a1, v3, 2);
  }
}

uint64_t sub_1D0D130D0(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7)
{
  int v7 = a6;
  uint64_t v9 = (int *)(a1 + 24524);
  int v10 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4;
  if (v10 <= *(_DWORD *)(*(void *)(a1 + 14856) + 1636)) {
    LOBYTE(v10) = *(_DWORD *)(*(void *)(a1 + 14856) + 1636);
  }
  int v11 = -1 << v10;
  int v12 = v11 & a2;
  int v13 = v11 & a3;
  int v14 = *v9;
  if (a7)
  {
    int v17 = a6;
    if (v12 != v14) {
      int v17 = sub_1D0D13230(a1, v12, v13, a4, a5, v12 - 1, v13);
    }
    if (v13 != v9[1]) {
      int v7 = sub_1D0D13230(a1, v12, v13, a4, a5, v12, v13 - 1);
    }
  }
  else
  {
    int v17 = a6;
    if (v12 != v14) {
      int v17 = *(__int16 *)(*(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 800)
    }
                       + 2
                       * (*(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 768) * ((uint64_t)v13 >> 3)
                        + ((v12 - 1) >> 3))) >> 9;
    if (v13 != *(_DWORD *)(a1 + 24528)) {
      int v7 = *(__int16 *)(*(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 800)
    }
                      + 2
                      * (*(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 768) * ((uint64_t)(v13 - 1) >> 3)
                       + (v12 >> 3))) >> 9;
  }
  return ((v17 + v7 + 1) >> 1);
}

uint64_t sub_1D0D13230(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7)
{
  int v7 = *((_DWORD *)a5 + 1);
  if (v7 > a6
    || (unsigned int v8 = *a5, (int)(v7 + v8) <= a6)
    || ((int v9 = *((_DWORD *)a5 + 2), v9 <= a7) ? (v10 = (int)(v9 + v8) <= a7) : (v10 = 1), v10))
  {
    int v11 = *(_DWORD *)(a1 + 24524);
    int v12 = *(_DWORD *)(a1 + 24528);
    int v13 = a6 - v11;
    int v14 = a7 - v12;
    int v15 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
    if (a4 < 0)
    {
LABEL_13:
      int v19 = -1;
    }
    else
    {
      int v16 = a2 - v11;
      int v17 = a3 - v12;
      int v18 = v15 - a4;
      while (v16 >> v18 != v13 >> v18 || v17 >> v18 != v14 >> v18)
      {
        BOOL v10 = v18++ < v15;
        if (!v10) {
          goto LABEL_13;
        }
      }
      int v19 = v15 - v18;
      if (v15 - v18 < a4) {
        ++v19;
      }
    }
    a5 = *(unsigned __int8 **)(a1
                             + 32 * v19
                             + 8
                             * ((v13 >> (v15 - v19)) & 1 | (2 * ((v14 >> (v15 - v19)) & 1)))
                             + 24552);
    int v7 = *((_DWORD *)a5 + 1);
    int v9 = *((_DWORD *)a5 + 2);
    unsigned int v8 = *a5;
  }
  return (*(__int16 *)(*((void *)a5 + 11)
                                   + 2 * (((uint64_t)(a6 - v7) >> 3) + (v8 >> 3) * (uint64_t)((a7 - v9) >> 3))) >> 9);
}

uint64_t sub_1D0D13324(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned __int8 **a6, void ***a7, uint64_t a8)
{
  unsigned int v8 = a7;
  int v9 = a6;
  int v11 = a4;
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  int v134 = (unsigned char *)(a1 + 29744);
  int v15 = *(unsigned __int8 **)(a1 + 14848);
  int v16 = v15[2113] - a4;
  int v136 = 0;
  if (*(unsigned __int8 *)(*(void *)(a1 + 14840) + 58) >= 2u)
  {
    uint64_t v21 = a4;
    goto LABEL_34;
  }
  char v17 = *(unsigned char *)(a1 + 197);
  if (v17)
  {
    int v18 = *a7;
    int v19 = (*a7)[12];
    unint64_t v20 = (unint64_t)*(unsigned __int8 *)*a7 >> 2;
    if (v19[16 * ((uint64_t)((int)a2 - *((_DWORD *)*a7 + 1)) >> 2)
           + 10
           + 16 * (int)v20 * (uint64_t)(((int)a3 - *((_DWORD *)*a7 + 2)) >> 2)] == 2)
    {
      char v17 = 0;
      goto LABEL_32;
    }
    uint64_t v22 = (int *)(a1 + 4 * a4 + 27648);
    int v23 = *v22;
    unsigned int v24 = *v22 | 6;
    *uint64_t v22 = v24;
    if (v16 < 4)
    {
      if (v16 == 3)
      {
        char v17 = *(unsigned char *)(*(void *)(a1 + 968) + 227);
        if (!v17)
        {
          unsigned int v24 = v23 & 0xFFFFFFF9;
          *(_DWORD *)(a1 + 4 * a4 + 27668) |= 6u;
          goto LABEL_31;
        }
      }
    }
    else
    {
      unsigned int v24 = v23 | 0xE;
      *uint64_t v22 = v23 | 0xE;
    }
    char v17 = 0;
    if (!a8 || v16 <= v15[2112]) {
      goto LABEL_31;
    }
    int v125 = v16;
    uint64_t v26 = 0;
    int v27 = 0;
    unsigned int v28 = 0;
    int v29 = 0;
    uint64_t v30 = a4 + 1;
    unsigned int v31 = v15[2117] >> a4;
    int v144 = a2;
    int v145 = a2 + (v31 >> 1);
    int v146 = a2;
    int v147 = v145;
    uint64_t v32 = ((uint64_t)((int)a2 - *((_DWORD *)v18 + 1)) >> 2) + (int)v20 * (uint64_t)(((int)a3 - *((_DWORD *)v18 + 2)) >> 2);
    v141[0] = a3;
    v141[1] = a3;
    unint64_t v33 = (__int16 *)&v19[16 * v32];
    int v142 = a3 + (v31 >> 1);
    int v143 = v142;
    long long v139 = 0u;
    long long v140 = 0u;
    long long v137 = 0u;
    long long v138 = 0u;
    do
    {
      uint64_t v34 = *(unsigned __int8 **)(a1 + 32 * v30 + 24552 + 8 * v26);
      int v35 = *(&v144 + v26) - *((_DWORD *)v34 + 1);
      int v36 = v141[v26] - *((_DWORD *)v34 + 2);
      unint64_t v37 = *v34;
      uint64_t v39 = *((void *)v34 + 11);
      uint64_t v38 = *((void *)v34 + 12);
      uint64_t v40 = (_WORD *)(v39 + 2 * (((uint64_t)v35 >> 3) + (int)(v37 >> 3) * (uint64_t)(v36 >> 3)));
      *((void *)&v139 + v26) = v40;
      if ((int)v30 < (*v40 & 3)) {
        ++v29;
      }
      uint64_t v41 = v38 + 16 * (((uint64_t)v35 >> 2) + (int)(v37 >> 2) * (uint64_t)(v36 >> 2));
      *((void *)&v137 + v26) = v41;
      int v42 = *(unsigned __int8 *)(v41 + 10);
      if (v42 == 2) {
        ++v28;
      }
      if (v42 == 1) {
        ++v27;
      }
      ++v26;
    }
    while (v26 != 4);
    unint64_t v43 = *(void *)(a8 + 16);
    if ((unint64_t)v18[21] + *(unsigned __int16 *)(a1 + 1156) * (unint64_t)(*(_DWORD *)(a8 + 24) >> 2) < v43)
    {
      v24 &= 0xFFFFFFF9;
LABEL_22:
      int v9 = a6;
      goto LABEL_30;
    }
    int v9 = a6;
    if ((*((unsigned char *)v33 + 11) & 1) != 0 && v28 >= 4 && (unint64_t)v18[23] < v43)
    {
      v24 &= 0xFFFFFFF9;
      goto LABEL_30;
    }
    if (v29)
    {
      if (v43 < (unint64_t)v18[23]) {
        v24 &= 0xFFFFFFF9;
      }
      goto LABEL_30;
    }
    if (v27 == 1)
    {
LABEL_30:
      char v17 = 1;
      int v16 = v125;
LABEL_31:
      *uint64_t v22 = v24 | 0x1200;
      goto LABEL_32;
    }
    if (v27)
    {
      if (v43 > (unint64_t)v18[23]) {
        v24 &= 0xFFFFFFF9;
      }
      goto LABEL_30;
    }
    uint64_t v131 = v13;
    __int16 v95 = *(_WORD *)v139;
    int v96 = *(_WORD *)v139 & 0x70;
    if (v96 == 16)
    {
      if ((**((_WORD **)&v139 + 1) & 0x70) == 0x10)
      {
LABEL_145:
        v24 &= ~4u;
LABEL_151:
        uint64_t v13 = v131;
        goto LABEL_22;
      }
    }
    else if (!v96)
    {
      __int16 v97 = **((_WORD **)&v139 + 1);
      if ((**((_WORD **)&v139 + 1) & 0x70) == 0
        && (*(_WORD *)v140 & 0x70) == 0
        && (**((_WORD **)&v140 + 1) & 0x70) == 0)
      {
        char v121 = *(_WORD *)v140;
        uint64_t v119 = v12;
        int v114 = v11;
        uint64_t v98 = v137;
        int v99 = (__int16 *)&v19[16 * v32];
        BOOL v100 = sub_1D0D20780(v33, (__int16 *)v137, 0);
        uint64_t v133 = *((void *)&v137 + 1);
        if (v100
          && sub_1D0D20780(v99, *((__int16 **)&v137 + 1), 0)
          && (uint64_t v116 = v138, sub_1D0D20780(v99, (__int16 *)v138, 0))
          && sub_1D0D20780(v99, *((__int16 **)&v138 + 1), 0)
          && ((v95 & 0x80) != 0
           || ((*(unsigned __int8 *)(v98 + 11) | ((v97 & 0x80) >> 7)) & 1) != 0
           || ((*(unsigned __int8 *)(v133 + 11) | ((v121 & 0x80) >> 7)) & 1) != 0
           || (*(unsigned char *)(v116 + 11) & 1) != 0))
        {
          v24 &= 0xFFFFFFF9;
        }
        else
        {
          BOOL v101 = sub_1D0D20780((__int16 *)v98, (__int16 *)v133, 1u);
          BOOL v102 = (__int16 *)v138;
          if (v101
            && sub_1D0D20780((__int16 *)v138, *((__int16 **)&v138 + 1), 1u)
            && !sub_1D0D20780((__int16 *)v98, v102, 1u))
          {
            unsigned int v24 = v24 & 0xFFFFFFF9 | 2;
          }
          else if (sub_1D0D20780((__int16 *)v98, v102, 1u) {
                 && ((v101 | !sub_1D0D20780((__int16 *)v133, *((__int16 **)&v138 + 1), 1u)) & 1) == 0)
          }
          {
            unsigned int v24 = v24 & 0xFFFFFFF9 | 4;
          }
          else if (!sub_1D0D20780((__int16 *)v98, (__int16 *)v133, 3u) && !sub_1D0D20780((__int16 *)v98, v102, 3u))
          {
            BOOL v103 = (__int16 *)*((void *)&v138 + 1);
            if (!sub_1D0D20780((__int16 *)v98, *((__int16 **)&v138 + 1), 3u)
              && !sub_1D0D20780((__int16 *)v133, v102, 3u)
              && !sub_1D0D20780((__int16 *)v133, v103, 3u)
              && !sub_1D0D20780(v102, v103, 3u))
            {
              v24 &= 0xFFFFFFF9;
            }
          }
        }
        int v11 = v114;
        uint64_t v12 = v119;
        goto LABEL_151;
      }
    }
    int v107 = *(_WORD *)v140 & 0x70;
    if (v107 == 16)
    {
      if ((**((_WORD **)&v140 + 1) & 0x70) == 0x10) {
        goto LABEL_145;
      }
    }
    else if (v96 == 32 && v107 == 32)
    {
LABEL_150:
      v24 &= ~2u;
      goto LABEL_151;
    }
    if ((**((_WORD **)&v139 + 1) & 0x70) != 0x20 || (**((_WORD **)&v140 + 1) & 0x70) != 0x20) {
      goto LABEL_151;
    }
    goto LABEL_150;
  }
LABEL_32:
  sub_1D0D18D5C(a1, v13, v12, v11, v9, v8, a5, v17);
  uint64_t v21 = v11;
  if (*(_DWORD *)(a1 + 4 * v11 + 27668))
  {
    sub_1D0D17F94(a1, v13, v12, v11, a5, v9, (unsigned __int8 **)v8, &v136);
    uint64_t v21 = v11;
  }
LABEL_34:
  *(void *)(a1 + 32 * v21 + 32) = 0xFFFFFFFFLL;
  uint64_t v44 = *(void *)(a1 + 14840);
  if (*(unsigned __int8 *)(v44 + 58) > 1u || (char v45 = *(unsigned char *)(*(void *)(a1 + 968) + 554)) == 0)
  {
    uint64_t v69 = 0;
    goto LABEL_69;
  }
  int v126 = v16;
  int v46 = *(_DWORD *)(v44 + 5440);
  if (v46 < 1)
  {
    uint64_t v69 = 0;
LABEL_68:
    int v16 = v126;
    goto LABEL_69;
  }
  int v47 = (1 << v126) + v12;
  int v48 = *(_DWORD *)(a1 + 20);
  int v120 = v47;
  if (v47 >= v48) {
    int v47 = *(_DWORD *)(a1 + 20);
  }
  if (v47 > (int)v12)
  {
    uint64_t v112 = v21;
    BOOL v122 = v9;
    unsigned int v110 = a5;
    int v111 = v8;
    uint64_t v49 = *v8;
    uint64_t v50 = *((unsigned __int8 *)*v8 + 1);
    uint64_t v51 = *(unsigned __int8 *)(*v8)[17];
    int v52 = (1 << v126) + v13;
    uint64_t v129 = v13;
    int v53 = *(_DWORD *)(a1 + 16);
    uint64_t v117 = v12;
    uint64_t v12 = (int)v12;
    uint64_t v115 = (int)v13;
    while (1)
    {
      int v54 = v52 >= v53 ? v53 : v52;
      uint64_t v55 = v115;
      if (v54 > (int)v129) {
        break;
      }
LABEL_59:
      v12 += 8;
      int v68 = v120;
      if (v120 >= v48) {
        int v68 = v48;
      }
      if ((int)v12 >= v68)
      {
        char v45 = *(unsigned char *)(*(void *)(a1 + 968) + 554);
        unsigned int v8 = v111;
        uint64_t v21 = v112;
        a5 = v110;
        uint64_t v12 = v117;
        uint64_t v13 = v129;
        int v9 = v122;
        goto LABEL_63;
      }
    }
    while (1)
    {
      uint64_t v56 = *((int *)v49 + 1);
      uint64_t v57 = *((int *)v49 + 2);
      int v58 = v55 - v56;
      uint64_t v59 = (int)v12 - v57;
      if ((v45 & 0x10) != 0
        || *((unsigned __int8 *)v49[12]
                         + 16 * ((uint64_t)v58 >> 2)
                         + 16 * ((unint64_t)*(unsigned __int8 *)v49 >> 2) * ((int)v59 >> 2)
                         + 10)
         - 1 < 2
        || !v134[1])
      {
        int v60 = 1;
        uint64_t v61 = v51;
      }
      else
      {
        int v60 = 0;
        uint64_t v61 = v50;
      }
      uint64_t v62 = *((unsigned __int8 *)v49 + 1);
      uint64_t v63 = v12 - v57;
      if (v60)
      {
        uint64_t v64 = (unsigned __int8 *)v49[17];
        uint64_t v65 = v64 + 56;
        uint64_t v66 = (char *)(v55 + *((void *)v64 + 8) + v63 * *v64 - v56);
      }
      else
      {
        uint64_t v66 = (char *)v49[8] + v59 * v62 + v58;
        uint64_t v65 = (unsigned __int8 *)(v49 + 7);
      }
      if ((int)sub_1D0D24EBC(*(void *)(a1 + 976), *(void *)v49[3] + ((void)v49[4] + v63 * v62 - v56 + v55) * *((int *)v49[3] + 4), v50, **(void **)v65 + (void)v66 * *(int *)(*(void *)v65 + 16), v61, 3) > v46)break; {
      v55 += 8;
      }
      int v53 = *(_DWORD *)(a1 + 16);
      if (v52 >= v53) {
        int v67 = *(_DWORD *)(a1 + 16);
      }
      else {
        int v67 = v52;
      }
      if ((int)v55 >= v67)
      {
        int v48 = *(_DWORD *)(a1 + 20);
        goto LABEL_59;
      }
    }
    uint64_t v69 = 0;
    unsigned int v8 = v111;
    uint64_t v21 = v112;
    a5 = v110;
    uint64_t v12 = v117;
    uint64_t v13 = v129;
    int v9 = v122;
    goto LABEL_68;
  }
LABEL_63:
  uint64_t v69 = 1;
  int v16 = v126;
  if (v45) {
    return v69;
  }
LABEL_69:
  uint64_t v70 = *(void *)(a1 + 14840);
  if (*(_DWORD *)(*(void *)(v70 + 4760) + 96) == 36 && *(unsigned __int8 *)(v70 + 58) < 2u) {
    return v69;
  }
  if (*(_DWORD *)(a1 + 228) > v11) {
    return v69;
  }
  uint64_t v130 = v13;
  uint64_t v71 = *(char **)(a1 + 968);
  int v72 = v71[498];
  if (v72 >= 2 && (v71[529] & 8) != 0)
  {
    if (v72 != 3
      || *(unsigned char *)(*(void *)(v70 + 5320) + 648) == 5
      && (v113 = v21, v73 = sub_1D0D0CAE4(v70, v130, v12), uint64_t v21 = v113, (v73 & 1) == 0))
    {
      if ((*((_WORD *)(*v8)[11]
            + ((uint64_t)((int)v130 - *((_DWORD *)*v8 + 1)) >> 3)
            + ((unint64_t)*(unsigned __int8 *)*v8 >> 3) * (((int)v12 - *((_DWORD *)*v8 + 2)) >> 3)) & 0x80) != 0)
        return v69;
    }
  }
  int v123 = v9;
  if (*(unsigned char *)(a1 + 196))
  {
    int v136 = 3;
LABEL_90:
    *(_DWORD *)(a1 + 4 * v21 + 27648) |= 0x1200u;
    goto LABEL_91;
  }
  if (v136) {
    goto LABEL_90;
  }
  int v127 = v16;
  uint64_t v74 = (unsigned int *)(a1 + 4 * v21 + 27648);
  unsigned int v75 = *v74;
  if ((*v74 & 0x1200) == 0) {
    return v69;
  }
  if (*(unsigned __int8 *)(v70 + 58) <= 1u && *(_DWORD *)(a1 + 4 * v21 + 27668))
  {
    if (v71[536] && v127 > 4
      || (uint64_t v76 = *v8,
          (*((_WORD *)(*v8)[11]
           + ((uint64_t)((int)v130 - *((_DWORD *)*v8 + 1)) >> 3)
           + ((unint64_t)*(unsigned __int8 *)*v8 >> 3) * (((int)v12 - *((_DWORD *)*v8 + 2)) >> 3)) & 0x80) != 0))
    {
      LOBYTE(v104) = 0;
    }
    else
    {
      if (v71[538])
      {
        uint64_t v77 = v130;
        BOOL v78 = sub_1D0D19A0C(a1, v130, v12, v11, a5) || sub_1D0D19C9C(a1, v130, v12, v11, (unsigned __int8 *)v76, a5);
      }
      else
      {
        BOOL v78 = 1;
        uint64_t v77 = v130;
      }
      int v106 = 3;
      if (v127 <= *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2115) && v78)
      {
        int v108 = (unsigned __int8 *)v76;
        BOOL v109 = v78;
        sub_1D0D3CA98(a1 + 14912, a1, v77, v12, v11, v108);
        int v106 = sub_1D0D4613C(a1 + 14912, v77, v12, v127, (unsigned __int8 *)*v8);
        BOOL v78 = v109;
        unsigned int v75 = *v74;
      }
      if (v78) {
        unsigned int v104 = v106;
      }
      else {
        unsigned int v104 = 0;
      }
      if (v104 >= 2)
      {
        unsigned int v105 = v75 | 0x200;
        goto LABEL_137;
      }
    }
    unsigned int v105 = v75 & 0xFFFFFDFF;
    LOBYTE(v106) = v104;
LABEL_137:
    *uint64_t v74 = v105 & 0xFFFFEFFF | ((v106 & 1) << 12);
  }
LABEL_91:
  unsigned int v79 = (_WORD *)(a1 + 24794);
  int v80 = (unsigned int *)(a1 + 4 * v11 + 27648);
  unsigned int v81 = *v80;
  if (*(unsigned __int8 *)(*(void *)(a1 + 14848) + 269) == v11)
  {
    *unsigned int v79 = 0;
    if ((v81 & 0x200) == 0) {
      goto LABEL_97;
    }
    int v82 = (v81 >> 12) & 1;
  }
  else
  {
    int v82 = 0;
    *unsigned int v79 = 0;
    if ((v81 & 0x200) == 0) {
      goto LABEL_99;
    }
  }
  sub_1D0D19DD0((unsigned __int8 *)a1, v130, v12, v11, v123, v8, a5, 0);
  if (v82)
  {
    unsigned int v81 = *v80;
LABEL_97:
    if ((v81 & 0x1000) != 0)
    {
      *(unsigned char *)(a1 + 24795) = 0;
      sub_1D0D19DD0((unsigned __int8 *)a1, v130, v12, v11, v123, v8, a5, 3);
      *(unsigned char *)unsigned int v79 = 0;
    }
  }
LABEL_99:
  if (*(_DWORD *)(a1 + 4) == 2)
  {
    uint64_t v83 = v12;
    unsigned int v84 = *v8;
    int v85 = v130 - *((_DWORD *)*v8 + 1);
    uint64_t v118 = v83;
    int v86 = v83 - *((_DWORD *)*v8 + 2);
    uint64_t v87 = (*v8)[12];
    unint64_t v88 = *(unsigned __int8 *)*v8;
    uint64_t v89 = ((uint64_t)v85 >> 2) + (int)(v88 >> 2) * (uint64_t)(v86 >> 2);
    if (v87[16 * v89 + 10] == 1)
    {
      if (*v134)
      {
        if ((*((_WORD *)v84[11] + ((uint64_t)v85 >> 3) + (int)(v88 >> 3) * (uint64_t)(v86 >> 3)) & 0x70) != 0x30)
        {
          unsigned int v128 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - v11;
          uint64_t v90 = &v87[16 * v89];
          int v135 = *v90;
          unsigned int v124 = v90[1];
          *((_DWORD *)v84 + 56) = 0;
          v84[25] = 0;
          v84[26] = 0;
          v84[27] = (void *)-1;
          *((_WORD *)v84 + 114) = 0;
          uint64_t v132 = a1 + 8 * v11;
          v84[18] = *(void **)(v132 + 24712);
          sub_1D0D3CAE0(a1 + 14912, a1, v130, v118, v11, 1, 0);
          sub_1D0D40574(a1 + 14912, v130, v118, (unsigned __int8 *)v84, v128, 0, v135, 0, a5, (int64x2_t *)(v84 + 25));
          int8x16_t v91 = *(int8x16_t *)(v84 + 17);
          *(int8x16_t *)(v84 + 17) = vextq_s8(v91, v91, 8uLL);
          *(void *)(v132 + 24712) = v91.i64[0];
          if (!*(unsigned char *)(a1 + 8))
          {
            *(unsigned char *)(a1 + 24795) = 0;
            v84[25] = (char *)v84[25]
                    + sub_1D0D4480C(a1 + 14912, v130, v118, (unsigned __int8 *)v84, (unsigned __int8 *)v84, 1u, 0, v124, v128, 0, 0, a5, &v139);
            sub_1D0D0C498(*(uint64_t (**)(void, uint64_t))(a1 + 29752), (void **)v84[17], (const void **)v84[18], v130 - *((_DWORD *)v84 + 1), v118 - *((_DWORD *)v84 + 2), v130 - *((_DWORD *)v84 + 1), v118 - *((_DWORD *)v84 + 2), *(unsigned __int8 *)v84 >> 1);
          }
        }
      }
      LOBYTE(v139) = 0;
      (*(void (**)(void))(**(void **)(a1 + 944) + 88))(*(void *)(a1 + 944));
      sub_1D0D1076C(a1, v130, v118, (unsigned __int8 *)*v8, 1, 0, 0, 0, 0);
      int v92 = *v8;
      *((_DWORD *)v92 + 4) = *((_DWORD *)*v8 + 5);
      sub_1D0D157FC(a1, v130, v118, v11, a5, (int *)v92 + 4, &v139, v93);
      *((_DWORD *)*v8 + 56) = (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 80))(*(void *)(a1 + 944));
      (*(void (**)(void))(**(void **)(a1 + 944) + 96))(*(void *)(a1 + 944));
      (*v8)[27] = (char *)(*v8)[25]
                + ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)*v8 + 114) + 1152)
                  * (unint64_t)*((unsigned int *)*v8 + 56)) >> (8 * (*((_WORD *)*v8 + 114) == 0)));
    }
  }
  return v69;
}

uint64_t sub_1D0D14154(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned int a7, unint64_t a8)
{
  char v68 = *(unsigned char *)(*(void *)(a1 + 14848) + 2113) - a4;
  *((void *)a6 + 25) = 0;
  uint64_t v15 = (uint64_t)(a6 + 200);
  int v72 = 0;
  v71[0] = 0;
  v71[1] = 0;
  v71[2] = -1;
  __int16 v73 = 0;
  *((_DWORD *)a6 + 56) = 0;
  *((void *)a6 + 26) = 0;
  *((void *)a6 + 27) = -1;
  *((_WORD *)a6 + 114) = 0;
  DWORD2(v75) = 0;
  long long v74 = 0uLL;
  *(void *)&long long v75 = -1;
  WORD6(v75) = 0;
  HIWORD(v75) = *((_WORD *)a6 + 115);
  sub_1D0D11A38(*(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117), a2, a3, a4, a6, *((_DWORD *)a6 + 3));
  if (*(unsigned char *)(a1 + 196) || !*(unsigned char *)(a1 + 29745) || *(char *)(*(void *)(a1 + 968) + 229) >= 1)
  {
    uint64_t result = sub_1D0D1507C(a1, a2, a3, a4, a6, v15, (uint64_t)&v74, 1, (uint64_t)v71);
    goto LABEL_3;
  }
  uint64_t result = sub_1D0D1507C(a1, a2, a3, a4, a6, v15, (uint64_t)&v74, 0, (uint64_t)v71);
  int v17 = result;
  *((_DWORD *)a6 + 56) = v72;
  int v31 = a2 - *((_DWORD *)a6 + 1);
  int v32 = a3 - *((_DWORD *)a6 + 2);
  unint64_t v33 = *a6;
  if (*(unsigned char *)(*((void *)a6 + 12) + 16 * (((uint64_t)v31 >> 2) + (int)(v33 >> 2) * (uint64_t)(v32 >> 2)) + 10) != 2)
  {
    if (!*(unsigned char *)(a1 + 29745) || !*(unsigned char *)(*(void *)(a1 + 968) + 228)) {
      goto LABEL_4;
    }
    *((_DWORD *)a6 + 56) = 0;
    *(void *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = 0;
    *((void *)a6 + 27) = -1;
    *((_WORD *)a6 + 114) = 0;
    DWORD2(v75) = 0;
    long long v74 = 0uLL;
    *(void *)&long long v75 = -1;
    WORD6(v75) = 0;
    uint64_t result = sub_1D0D482FC(a1 + 14912, a2, a3, 0, a6, 0, v15, (uint64_t)&v74);
LABEL_3:
    int v17 = result;
    goto LABEL_4;
  }
  uint64_t v34 = *((void *)a6 + 11);
  uint64_t v35 = ((uint64_t)v31 >> 3) + (int)(v33 >> 3) * (uint64_t)(v32 >> 3);
  __int16 v36 = *(_WORD *)(v34 + 2 * v35);
  if ((v36 & 0x80) == 0)
  {
    *(_WORD *)(v34 + 2 * v35) = v36 | 0x80;
    if (1 << v68 >= 8)
    {
      uint64_t v37 = 0;
      unint64_t v38 = (unint64_t)*a6 >> 3;
      uint64_t v39 = (_WORD *)(*((void *)a6 + 11)
                    + 2
                    * (((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                     + (int)v38 * (uint64_t)(((int)a3 - *((_DWORD *)a6 + 2)) >> 3)));
      uint64_t v40 = 2 * v38;
      uint64_t v41 = v39;
      do
      {
        int v42 = v41;
        uint64_t v43 = (1 << v68) >> 3;
        do
        {
          *v42++ = *v39;
          --v43;
        }
        while (v43);
        ++v37;
        uint64_t v41 = (_WORD *)((char *)v41 + v40);
      }
      while (v37 != (1 << v68) >> 3);
    }
  }
LABEL_4:
  uint64_t v18 = *(void *)v15;
  if (*(void *)v15 >= a8)
  {
    *((_DWORD *)a6 + 56) = 1;
    *((void *)a6 + 27) = ((unint64_t)*(unsigned __int16 *)(a1 + 2 * *((__int16 *)a6 + 114) + 1152) >> (8 * (*((_WORD *)a6 + 114) == 0)))
                         + v18;
    return result;
  }
  char v70 = 0;
  (*(void (**)(void))(**(void **)(a1 + 944) + 88))(*(void *)(a1 + 944));
  sub_1D0D1076C(a1, a2, a3, a6, 1, 0, 0, 1, 0);
  *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
  sub_1D0D157FC(a1, a2, a3, a4, a7, (int *)a6 + 4, &v70, v19);
  *((_DWORD *)a6 + 56) += (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 80))(*(void *)(a1 + 944));
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 96))(*(void *)(a1 + 944));
  unint64_t v20 = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)a6 + 114) + 1152) * (unint64_t)*((unsigned int *)a6 + 56)) >> (8 * (*((_WORD *)a6 + 114) == 0)))
      + *((void *)a6 + 25);
  *((void *)a6 + 27) = v20;
  if (*(unsigned char *)(*(void *)(a1 + 968) + 204))
  {
    int v21 = (unint64_t)v74 < v20 ? v17 : 0;
    if (v21 == 1)
    {
      if (*(unsigned char *)(*(void *)(a1 + 14856) + 12)) {
        sub_1D0D0C1D8(a5, a6, a2, a3, *a6);
      }
      (*(void (**)(void))(**(void **)(a1 + 944) + 88))(*(void *)(a1 + 944));
      sub_1D0D1076C(a1, a2, a3, a6, 1, 1, 0, 1, 0);
      *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
      sub_1D0D157FC(a1, a2, a3, a4, a7, (int *)a6 + 4, &v70, v22);
      int v23 = (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 80))(*(void *)(a1 + 944));
      DWORD2(v75) += v23;
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 96))(*(void *)(a1 + 944));
      *(void *)&long long v75 = ((*(unsigned __int16 *)(a1 + 2 * SWORD6(v75) + 1152) * (unint64_t)DWORD2(v75)) >> (8 * (WORD6(v75) == 0)))
                      + v74;
      if ((unint64_t)v75 >= *((void *)a6 + 27))
      {
        if (!*(unsigned char *)(*(void *)(a1 + 14856) + 12)) {
          return result;
        }
        uint64_t result = (uint64_t)sub_1D0D0C1D8(a6, a5, a2, a3, *a5);
        goto LABEL_56;
      }
      int v24 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4;
      int v25 = 1 << (*(unsigned char *)(*(void *)(a1 + 14848) + 2113) - a4 - 2);
      uint64_t v26 = (unsigned __int8 *)*((void *)a6 + 17);
      unint64_t v27 = (unint64_t)*v26 >> 2;
      unsigned int v28 = (char *)(*((void *)v26 + 1)
                   + ((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 2)
                   + (int)v27 * (uint64_t)(((int)a3 - *((_DWORD *)a6 + 2)) >> 2));
      size_t v29 = v25;
      uint64_t v30 = v25;
      do
      {
        --v30;
        bzero(v28, v29);
        v28 += v27;
      }
      while (v30);
      if (!*(unsigned char *)(a1 + 8))
      {
        if (v24 <= 2)
        {
          if ((a2 & 7) == 0 || (a3 & 7) == 0) {
            goto LABEL_40;
          }
        }
        else
        {
          size_t v29 = (uint64_t)(int)v29 >> 1;
        }
        uint64_t v44 = *((void *)a6 + 17);
        unint64_t v45 = (unint64_t)*(unsigned __int8 *)(v44 + 1) >> 2;
        int v46 = (char *)(*(void *)(v44 + 16)
                     + ((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                     + (int)v45 * (uint64_t)(((int)a3 - *((_DWORD *)a6 + 2)) >> 3));
        size_t v47 = v29;
        do
        {
          --v47;
          bzero(v46, v29);
          v46 += v45;
        }
        while (v47);
        int v48 = (char *)(*(void *)(*((void *)a6 + 17) + 24)
                     + ((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((void *)a6 + 17) + 1) >> 2)
                     * (((int)a3 - *((_DWORD *)a6 + 2)) >> 3));
        size_t v49 = v29;
        do
        {
          --v49;
          bzero(v48, v29);
          v48 += v45;
        }
        while (v49);
      }
LABEL_40:
      int v50 = a2 - *((_DWORD *)a6 + 1);
      int v51 = a3 - *((_DWORD *)a6 + 2);
      unint64_t v52 = *a6;
      int v53 = (_WORD *)(*((void *)a6 + 11) + 2 * (((uint64_t)v50 >> 3) + (int)(v52 >> 3) * (uint64_t)(v51 >> 3)));
      if ((*v53 & 0x70) == 0)
      {
        uint64_t v54 = *((void *)a6 + 12) + 16 * (((uint64_t)v50 >> 2) + (int)(v52 >> 2) * (uint64_t)(v51 >> 2));
        if (*(unsigned char *)(v54 + 11))
        {
          *v53 |= 0x80u;
          *(unsigned char *)(v54 + 10) = 2;
          *(unsigned char *)(v54 + 11) &= ~1u;
          unint64_t v55 = *a6;
          if (v55 >= 8)
          {
            uint64_t v56 = 0;
            unint64_t v57 = v55 >> 3;
            int v58 = v53;
            do
            {
              uint64_t v59 = v58;
              unint64_t v60 = v57;
              do
              {
                *v59++ = *v53;
                --v60;
              }
              while (v60);
              ++v56;
              v58 += v57;
            }
            while (v56 != v57);
            LODWORD(v55) = *a6;
          }
          if (v55 >= 4)
          {
            uint64_t v61 = 0;
            uint64_t v62 = v55 >> 2;
            uint64_t v63 = (void *)v54;
            do
            {
              uint64_t v64 = v63;
              uint64_t v65 = v55 >> 2;
              do
              {
                uint64_t v66 = *(void *)v54;
                *(void *)((char *)v64 + 6) = *(void *)(v54 + 6);
                *uint64_t v64 = v66;
                v64 += 2;
                --v65;
              }
              while (v65);
              ++v61;
              v63 += 2 * v62;
            }
            while (v61 != v62);
          }
        }
      }
      uint64_t result = (*(uint64_t (**)(void, void))(a1 + 29752))((1 << v68), (1 << v68));
      if (!*(unsigned char *)(a1 + 8)) {
        uint64_t result = (*(uint64_t (**)(void, void))(a1 + 29752))((1 << v68), (1 << v68 >> 1));
      }
      long long v67 = v75;
      *(_OWORD *)uint64_t v15 = v74;
      *(_OWORD *)(v15 + 16) = v67;
LABEL_56:
      *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
    }
  }
  return result;
}

uint64_t sub_1D0D149B0(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6 = result;
  int v7 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113) - a4;
  if (v7 >= *(_DWORD *)(*(void *)(result + 14856) + 1636)) {
    int v8 = *(_DWORD *)(*(void *)(result + 14856) + 1636);
  }
  else {
    int v8 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113) - a4;
  }
  if (v7 == 31)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = a6;
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    uint64_t v12 = (1 << v8);
    int v36 = *(_DWORD *)(a2 + 12) & ~(*(int *)(a2 + 12) >> 31);
    uint64_t v13 = a5 - (uint64_t)*(int *)(a2 + 4);
    uint64_t v14 = (int)a6 - (uint64_t)*(int *)(a2 + 8);
    uint64_t v15 = **(void **)(a2 + 24)
        + (*(void *)(a2 + 32) + v13 + v14 * *(unsigned __int8 *)(a2 + 1)) * *(int *)(*(void *)(a2 + 24) + 16);
    int v16 = *(unsigned __int8 **)(a2 + 136);
    uint64_t v17 = **((void **)v16 + 7) + (*((void *)v16 + 8) + v13 + *v16 * v14) * *(int *)(*((void *)v16 + 7) + 16);
    LODWORD(v14) = (int)v14 >> 1;
    uint64_t v29 = **(void **)(a2 + 40)
        + (v13 + *(unsigned __int8 *)(a2 + 1) * (uint64_t)(int)v14 + *(void *)(a2 + 48))
        * *(int *)(*(void *)(a2 + 40) + 16);
    uint64_t v28 = **((void **)v16 + 9)
        + (*((void *)v16 + 10) + v13 + 2 * v16[1] * (uint64_t)(int)v14) * *(int *)(*((void *)v16 + 9) + 16);
    uint64_t v44 = (1 << v7);
    int v37 = v8;
    uint64_t v38 = result + 1176;
    uint64_t v39 = v8 - 2;
    uint64_t v40 = *v16;
    uint64_t v41 = *(unsigned __int8 *)(a2 + 1);
    int v30 = a5;
    do
    {
      uint64_t v18 = 0;
      uint64_t v35 = v29 + v11;
      uint64_t v34 = v28 + v11;
      uint64_t v32 = v15;
      uint64_t v33 = v11;
      int v19 = v11 + a5;
      uint64_t v31 = v17;
      do
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 8 * v39))(v12, v12, v15, v41, v17, v40);
        unint64_t v47 = result;
        uint64_t v20 = v10;
        int v21 = v10 + v18;
        int v22 = *(char *)(v6
                      + (int)(((v10 + v18 - *(_DWORD *)(v6 + 24528)) & 0xFFFFFFF8)
                            + ((v19 - *(_DWORD *)(v6 + 24524)) >> 3))
                      + 748);
        if (*(unsigned char *)(*(void *)(v6 + 14840) + 5432)) {
          uint64_t result = sub_1D0D15538(v6, a2, v36, *(char *)(v6+ (int)(((v21 - *(_DWORD *)(v6 + 24528)) & 0xFFFFFFF8)+ ((v19 - *(_DWORD *)(v6 + 24524)) >> 3))+ 748), v19, v21, v37, (uint64_t *)&v47);
        }
        if (*(unsigned char *)(v6 + 8))
        {
          unint64_t v23 = v47;
        }
        else
        {
          uint64_t v24 = *(unsigned __int8 *)(a2 + 1);
          uint64_t v25 = *(void *)(a2 + 136);
          uint64_t v26 = v34 + 2 * *(unsigned __int8 *)(v25 + 1) * (uint64_t)((int)v18 >> 1);
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t *, uint64_t *))(v6 + 1568))(v35 + v24 * ((int)v18 >> 1), v24, v26, 2 * *(unsigned __int8 *)(v25 + 1), ((int)v12 >> 1), ((int)v12 >> 1), &v46, &v45);
          unint64_t v23 = v47
              + ((v46 * (unint64_t)*(unsigned __int16 *)(v6 + 1162)) >> 8)
              + ((v45 * (unint64_t)*(unsigned __int16 *)(v6 + 1166)) >> 8);
          unint64_t v47 = v23;
        }
        int v27 = v22 - a3;
        if (v22 != a3)
        {
          if (v27 >= 16) {
            int v27 = 16;
          }
          if (v27 <= -15) {
            int v27 = -15;
          }
          unint64_t v23 = (v23 * word_1D0DA5CC8[v27 + 15] + 128) >> 8;
          unint64_t v47 = v23;
        }
        uint64_t v10 = v20;
        v9 += v23;
        v18 += (int)v12;
        v17 += v40 * (int)v12;
        v15 += v41 * (int)v12;
      }
      while (v18 < v44);
      uint64_t v11 = v33 + (int)v12;
      a5 = v30;
      uint64_t v17 = v31 + (int)v12;
      uint64_t v15 = v32 + (int)v12;
    }
    while (v11 < v44);
  }
  *(void *)(a2 + 200) = v9;
  if (*(unsigned char *)(*(void *)(v6 + 14840) + 5433)) {
    *(void *)(a2 + 200) = *(void *)(a2 + 208) + v9;
  }
  return result;
}

uint64_t sub_1D0D14D0C(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6 = result;
  int v7 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113) - a4;
  if (v7 >= *(_DWORD *)(*(void *)(result + 14856) + 1636)) {
    int v8 = *(_DWORD *)(*(void *)(result + 14856) + 1636);
  }
  else {
    int v8 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113) - a4;
  }
  if (v7 == 31)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = a6;
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    uint64_t v12 = (1 << v8);
    int v37 = *(_DWORD *)(a2 + 12) & ~(*(int *)(a2 + 12) >> 31);
    uint64_t v13 = a5 - (uint64_t)*(int *)(a2 + 4);
    uint64_t v14 = (int)a6 - (uint64_t)*(int *)(a2 + 8);
    uint64_t v15 = **(void **)(a2 + 24)
        + (*(void *)(a2 + 32) + v13 + v14 * *(unsigned __int8 *)(a2 + 1)) * *(int *)(*(void *)(a2 + 24) + 16);
    int v16 = *(unsigned __int8 **)(a2 + 136);
    uint64_t v17 = **((void **)v16 + 7) + (*((void *)v16 + 8) + v13 + *v16 * v14) * *(int *)(*((void *)v16 + 7) + 16);
    LODWORD(v14) = (int)v14 >> 1;
    uint64_t v30 = **(void **)(a2 + 40)
        + (v13 + *(unsigned __int8 *)(a2 + 1) * (uint64_t)(int)v14 + *(void *)(a2 + 48))
        * *(int *)(*(void *)(a2 + 40) + 16);
    uint64_t v29 = **((void **)v16 + 9)
        + (*((void *)v16 + 10) + v13 + 2 * v16[1] * (uint64_t)(int)v14) * *(int *)(*((void *)v16 + 9) + 16);
    uint64_t v45 = (1 << v7);
    int v38 = v8;
    uint64_t v39 = result + 1176;
    uint64_t v40 = v8 - 2;
    uint64_t v28 = 2 * (int)v12;
    uint64_t v41 = *v16;
    uint64_t v42 = *(unsigned __int8 *)(a2 + 1);
    int v31 = a5;
    do
    {
      uint64_t v18 = 0;
      int v19 = v11 + a5;
      uint64_t v32 = v17;
      uint64_t v33 = v15;
      uint64_t v34 = v11;
      uint64_t v35 = v29 + 2 * v11;
      uint64_t v36 = v30 + 2 * v11;
      do
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 8 * v40))(v12, v12, v15, v42, v17, v41);
        unint64_t v48 = result;
        uint64_t v20 = v10;
        int v21 = v10 + v18;
        int v22 = *(char *)(v6
                      + (int)(((v10 + v18 - *(_DWORD *)(v6 + 24528)) & 0xFFFFFFF8)
                            + ((v19 - *(_DWORD *)(v6 + 24524)) >> 3))
                      + 748);
        if (*(unsigned char *)(*(void *)(v6 + 14840) + 5432)) {
          uint64_t result = sub_1D0D15538(v6, a2, v37, *(char *)(v6+ (int)(((v21 - *(_DWORD *)(v6 + 24528)) & 0xFFFFFFF8)+ ((v19 - *(_DWORD *)(v6 + 24524)) >> 3))+ 748), v19, v21, v38, (uint64_t *)&v48);
        }
        if (*(unsigned char *)(v6 + 8))
        {
          unint64_t v23 = v48;
        }
        else
        {
          uint64_t v24 = *(unsigned __int8 *)(a2 + 1);
          uint64_t v25 = *(void *)(a2 + 136);
          uint64_t v26 = v35 + 4 * *(unsigned __int8 *)(v25 + 1) * (uint64_t)((int)v18 >> 1);
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t *, uint64_t *))(v6 + 1568))(v36 + 2 * v24 * ((int)v18 >> 1), v24, v26, 2 * *(unsigned __int8 *)(v25 + 1), ((int)v12 >> 1), ((int)v12 >> 1), &v47, &v46);
          unint64_t v23 = v48
              + ((v47 * (unint64_t)*(unsigned __int16 *)(v6 + 1162)) >> 8)
              + ((v46 * (unint64_t)*(unsigned __int16 *)(v6 + 1166)) >> 8);
          unint64_t v48 = v23;
        }
        int v27 = v22 - a3;
        if (v22 != a3)
        {
          if (v27 >= 16) {
            int v27 = 16;
          }
          if (v27 <= -15) {
            int v27 = -15;
          }
          unint64_t v23 = (v23 * word_1D0DA5CC8[v27 + 15] + 128) >> 8;
          unint64_t v48 = v23;
        }
        uint64_t v10 = v20;
        v9 += v23;
        v18 += (int)v12;
        v17 += 2 * v41 * (int)v12;
        v15 += 2 * v42 * (int)v12;
      }
      while (v18 < v45);
      uint64_t v11 = v34 + (int)v12;
      a5 = v31;
      uint64_t v17 = v32 + v28;
      uint64_t v15 = v33 + v28;
    }
    while (v11 < v45);
  }
  *(void *)(a2 + 200) = v9;
  if (*(unsigned char *)(*(void *)(v6 + 14840) + 5433)) {
    *(void *)(a2 + 200) = *(void *)(a2 + 208) + v9;
  }
  return result;
}

uint64_t sub_1D0D1507C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - (uint64_t)a4;
  uint64_t v16 = (1 << v15);
  uint64_t v17 = (int)a2 - (uint64_t)*((int *)a5 + 1);
  uint64_t v18 = (int)a3 - (uint64_t)*((int *)a5 + 2);
  unint64_t v19 = *a5;
  uint64_t v20 = *((void *)a5 + 12) + 16 * (((uint64_t)(int)v17 >> 2) + (int)(v19 >> 2) * (uint64_t)((int)v18 >> 2));
  if (*(unsigned char *)(v20 + 10) == 2)
  {
    uint64_t result = 0;
    if (a6 && a7)
    {
      *(void *)a7 = (*(unsigned int (**)(void, void, uint64_t))(a1 + 8 * v15 + 1160))((1 << v15), (1 << v15), **((void **)a5 + 3)+ (*((void *)a5 + 4) + v17 + a5[1] * v18) * *(int *)(*((void *)a5 + 3) + 16));
      if (!*(unsigned char *)(a1 + 8))
      {
        v41.i64[0] = 0;
        uint64_t v45 = 0;
        (*(void (**)(uint64_t))(a1 + 1568))(**((void **)a5 + 5)+ (*((void *)a5 + 6)+ (int)a2- (uint64_t)*((int *)a5 + 1)+ a5[1] * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*((void *)a5 + 5) + 16));
        *(void *)a7 = *(void *)a7;
      }
      *(_DWORD *)(a7 + 24) = 0;
      long long v22 = *(_OWORD *)(a7 + 16);
      *(_OWORD *)a6 = *(_OWORD *)a7;
      *(_OWORD *)(a6 + 16) = v22;
      if (a9)
      {
        uint64_t result = 0;
        long long v23 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)a9 = *(_OWORD *)a7;
        *(_OWORD *)(a9 + 16) = v23;
        return result;
      }
      return 0;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 29745)) {
      a8 = 1;
    }
    uint64_t v26 = (_WORD *)(*((void *)a5 + 11) + 2 * (((uint64_t)(int)v17 >> 3) + (int)(v19 >> 3) * (uint64_t)((int)v18 >> 3)));
    if (a8 != 1 || *(unsigned char *)(*(void *)(a1 + 968) + 204) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(a1 + 29752))(v16, v16);
      if (!*(unsigned char *)(a1 + 8)) {
        (*(void (**)(uint64_t, void))(a1 + 29752))(v16, ((int)v16 >> 1));
      }
    }
    sub_1D0D3CAE0(a1 + 14912, a1, a2, a3, a4, *(unsigned __int8 *)(v20 + 10), ((unsigned __int16)*v26 >> 4) & 7);
    if (a8)
    {
      uint64_t result = sub_1D0D48F48((int *)(a1 + 14912), a2, a3, 0, a5, 0, *(unsigned char *)(a1 + 8) == 0, 0, a6, a7);
    }
    else if (a9)
    {
      uint64_t result = sub_1D0D462A0((int *)(a1 + 14912), a2, a3, 0, a5, 0, (int64x2_t *)a6, (int64x2_t *)a9, (int64x2_t *)a7);
    }
    else
    {
      int v43 = 0;
      int64x2_t v41 = 0uLL;
      uint64_t v42 = -1;
      __int16 v44 = 0;
      uint64_t result = sub_1D0D462A0((int *)(a1 + 14912), a2, a3, 0, a5, 0, (int64x2_t *)a6, &v41, (int64x2_t *)a7);
    }
    if (!*(unsigned char *)(a1 + 8) || *(char *)(*(void *)(a1 + 968) + 203) <= 0)
    {
      char v28 = *(unsigned char *)(v20 + 10) == 3 ? result : 1;
      if ((v28 & 1) == 0)
      {
        if ((*v26 & 0x70) != 0) {
          return 0;
        }
        char v29 = *(unsigned char *)(v20 + 11);
        if ((v29 & 1) == 0) {
          return 0;
        }
        *(unsigned char *)(v20 + 10) = 2;
        *(unsigned char *)(v20 + 11) = v29 & 0xFE;
        *v26 |= 0x80u;
        *(_DWORD *)(a6 + 24) = 0;
        unsigned int v30 = *a5;
        if ((int)v16 >= 8)
        {
          uint64_t v31 = 0;
          uint64_t v32 = v26;
          do
          {
            uint64_t v33 = v32;
            uint64_t v34 = v16 >> 3;
            do
            {
              *v33++ = *v26;
              --v34;
            }
            while (v34);
            ++v31;
            v32 += v30 >> 3;
          }
          while (v31 != v16 >> 3);
          unsigned int v30 = *a5;
        }
        if ((int)v16 < 4) {
          return 0;
        }
        uint64_t v35 = 0;
        uint64_t v36 = (void *)v20;
        do
        {
          int v37 = v36;
          uint64_t v38 = v16 >> 2;
          do
          {
            uint64_t v39 = *(void *)v20;
            *(void *)((char *)v37 + 6) = *(void *)(v20 + 6);
            *int v37 = v39;
            v37 += 2;
            --v38;
          }
          while (v38);
          uint64_t result = 0;
          ++v35;
          v36 += 2 * (v30 >> 2);
        }
        while (v35 != v16 >> 2);
      }
    }
  }
  return result;
}

BOOL sub_1D0D15538(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, uint64_t *a8)
{
  v42[1] = *(int32x2_t *)MEMORY[0x1E4F143B8];
  uint64_t v8 = *a8;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 14840) + 8) + 528) == 8) {
    char v9 = 10;
  }
  else {
    char v9 = 8;
  }
  uint64_t v29 = *a8;
  if (a7 != 31)
  {
    int v14 = 0;
    int v37 = (_DWORD *)(a1 + 24524);
    char v38 = v9;
    unsigned int v36 = (1 << v9) >> 1;
    int v41 = 1 << a7;
    uint64_t v35 = **(unsigned __int8 **)(a2 + 136);
    uint64_t v40 = a6;
    uint64_t v33 = a3 + 12;
    uint64_t v34 = a5;
    uint64_t v32 = (char *)&dword_1D0DA31D4[32 * a4 + 384];
    int v30 = a6;
    do
    {
      uint64_t v16 = 0;
      int v31 = v14;
      int v17 = v14 + a6;
      int v18 = (v14 + a6) >> 3;
      do
      {
        uint64_t v19 = *(void *)(a1 + 976);
        uint64_t v20 = *(int *)(*(void *)(v19 + 4952) + 4 * ((*(int *)(v19 + 4728) >> 3) * v18 + ((a5 + (int)v16) >> 3)));
        unsigned int v21 = *(_DWORD *)(*(void *)(*(void *)(a1 + 14840) + 5320) + 4 * v20 + 152);
        if ((int)v20 <= 3 && v21 == 0) {
          unsigned int v21 = sub_1D0D250EC(v19, a5 + (int)v16, v17);
        }
        if (a3 == a4)
        {
          if ((v21 & 0x80000000) != 0) {
            goto LABEL_28;
          }
          int v23 = dword_1D0DA31D4[32 * v33 + v21];
        }
        else
        {
          if ((v21 & 0x80000000) != 0)
          {
            int v23 = 0;
            int v24 = 0;
LABEL_21:
            if (v24 <= v23 || a3 >= a4) {
              int v23 = v24;
            }
            goto LABEL_26;
          }
          int v24 = dword_1D0DA31D4[32 * v33 + v21];
          int v23 = *(_DWORD *)&v32[4 * v21];
          if (a3 <= a4 || v24 >= v23) {
            goto LABEL_21;
          }
        }
LABEL_26:
        if (v23 >= 1)
        {
          uint64_t v26 = (int32x2_t *)(a1 + ((uint64_t)(a5 + (int)v16 - *v37) >> 3 << 8) + 32 * ((uint64_t)(v17 - v37[1]) >> 3));
          int v27 = *(unsigned __int8 **)(a2 + 136);
          (*(void (**)(uint64_t, uint64_t, int32x2_t *))(a1 + 1000))(**((void **)v27 + 7)+ (v34 + v16 + *((void *)v27 + 8) + (v40 - *(int *)(a2 + 8)) * *v27 - *(int *)(a2 + 4))* *(int *)(*((void *)v27 + 7) + 16), v35, v42);
          uint64_t v8 = *a8
             + ((int)(v36 + vaba_s32(vdup_lane_s32(vabd_s32(v26[3462], v42[0]), 1), v26[3462], v42[0]).u32[0] * v23) >> v38);
          *a8 = v8;
        }
LABEL_28:
        v16 += 8;
      }
      while ((int)v16 < v41);
      int v14 = v31 + 8;
      v40 += 8;
      a6 = v30;
    }
    while (v31 + 8 < v41);
  }
  return v8 != v29;
}

uint64_t sub_1D0D157FC(uint64_t result, int a2, int a3, int a4, unsigned int a5, int *a6, unsigned char *a7, __n128 a8)
{
  uint64_t v11 = result;
  uint64_t v12 = *(unsigned __int8 **)(result + 14848);
  int v13 = v12[2113] - a4;
  int v14 = 1 << (v12[2113] - a4);
  int v15 = v12[2112];
  int v16 = v14 + a2;
  if (v14 + a2 > *(_DWORD *)(result + 16)
    || (v14 + a3 <= *(_DWORD *)(result + 20) ? (BOOL v17 = v13 <= v15) : (BOOL v17 = 1), v17))
  {
    if (v13 > v15)
    {
LABEL_45:
      char v36 = v13 - 1;
      int v37 = 1 << (v13 - 1);
      uint64_t v38 = *(void *)(v11 + 14856);
      int v49 = a4;
      if (*(unsigned char *)(v38 + 12) && v13 == *(_DWORD *)(v38 + 1636))
      {
        char v48 = 1;
        *a7 = 1;
      }
      else
      {
        char v48 = 0;
      }
      unsigned int v39 = 0;
      int v40 = v37 + a2;
      int v41 = v37 + a3;
      do
      {
        signed int v42 = *(_DWORD *)(v11 + 16);
        if ((int)(((v39 & 1) << v36) + a2) < v42)
        {
          signed int v43 = *(_DWORD *)(v11 + 20);
          if ((int)((v39 >> 1 << v36) + a3) < v43)
          {
            uint64_t v44 = sub_1D0D0CA2C(a5, v39, v40 < v42, v41 < v43);
            uint64_t result = sub_1D0D157FC(v11, ((v39 & 1) << v36) + a2, (v39 >> 1 << v36) + a3, (v49 + 1), v44, a6, a7);
          }
        }
        ++v39;
      }
      while (v39 != 4);
      if (v48)
      {
        if (*a7)
        {
          uint64_t v45 = *(unsigned __int8 **)(v11 + 872);
          int v46 = *(unsigned __int8 *)(v11 + 824);
          int v47 = sub_1D0D130D0(v11, a2, a3, v49, v45, *a6, v46);
          *a6 = v47;
          uint64_t result = sub_1D0D11B74(v11, a2, a3, v49, v45, v47, v46);
          *a7 = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (a2 - (1 << v15) < 0)
    {
      BOOL v24 = 0;
    }
    else
    {
      if (*(unsigned char *)(result + 824)) {
        unsigned int v21 = *(_WORD **)(*(void *)(result + 872) + 104);
      }
      else {
        unsigned int v21 = (_WORD *)(*(void *)(*(void *)(*(void *)(result + 14840) + 8) + 800)
      }
                      + 2
                      * (((a2 - (1 << v15)) >> 3)
                       + *(void *)(*(void *)(*(void *)(result + 14840) + 8) + 768) * ((uint64_t)a3 >> 3)));
      BOOL v24 = (*v21 & 3) > a4;
    }
    int v25 = v12[269];
    int v26 = a3 - (1 << v15);
    if (v26 < 0)
    {
      BOOL v32 = 0;
    }
    else
    {
      if (*(unsigned char *)(result + 824))
      {
        BOOL v27 = v15 == 31;
        uint64_t v28 = 112;
        if (v27) {
          uint64_t v28 = 104;
        }
        uint64_t v29 = *(void *)(*(void *)(result + 872) + v28);
        uint64_t v30 = -536870912;
        if (!v27) {
          uint64_t v30 = 0;
        }
        int v31 = (_WORD *)(v29 + v30);
      }
      else
      {
        int v31 = (_WORD *)(*(void *)(*(void *)(*(void *)(result + 14840) + 8) + 800)
                      + 2
                      * (*(void *)(*(void *)(*(void *)(result + 14840) + 8) + 768) * (v26 >> 3)
                       + (a2 >> 3)));
      }
      BOOL v32 = (*v31 & 3) > a4;
    }
    BOOL v33 = v32 + v24;
    BOOL v35 = (*(_WORD *)(*(void *)(result + 880)
                    + 2
                    * (*(void *)(result + 856) * ((uint64_t)(a3 - *(_DWORD *)(result + 836)) >> 3)
                     + ((a2 - *(_DWORD *)(result + 832)) >> 3))) & 3) > a4
       && v25 > a4;
    uint64_t result = (***(uint64_t (****)(void, BOOL, uint64_t))(result + 944))(*(void *)(result + 944), v35, *(void *)(result + 944) + v33 + 50);
    if (v35) {
      goto LABEL_45;
    }
  }
  uint64_t v18 = *(void *)(v11 + 14856);
  if (*(unsigned char *)(v18 + 12) && v13 >= *(_DWORD *)(v18 + 1636)) {
    *a7 = 1;
  }
  uint64_t result = sub_1D0D15C20(v11, a2, a3, a4, a6, a7, 0, a8);
  int v19 = *(unsigned __int8 *)(*(void *)(v11 + 14848) + 2117) - 1;
  BOOL v20 = (v19 & v16) != 0 && v16 < *(_DWORD *)(v11 + 16);
  BOOL v22 = (v19 & (v14 + a3)) != 0 && v14 + a3 < *(_DWORD *)(v11 + 20);
  if (!v20 && !v22 && *(_DWORD *)(v11 + 24512) != *(_DWORD *)(*(void *)(v11 + 14840) + 5412))
  {
    int v23 = *(uint64_t (**)(void))(**(void **)(v11 + 944) + 16);
    return v23();
  }
  return result;
}

uint64_t sub_1D0D15C20(uint64_t a1, int a2, int a3, int a4, int *a5, unsigned char *a6, char a7, __n128 a8)
{
  int v14 = a3 | a2;
  if (((a3 | a2) & 0x80000000) == 0
    && ((int v15 = a2 - *(_DWORD *)(a1 + 832),
         int v16 = a3 - *(_DWORD *)(a1 + 836),
         int v17 = *(unsigned __int8 *)(a1 + 828),
         v15 < v17)
      ? (BOOL v18 = v16 < v17)
      : (BOOL v18 = 0),
        v18))
  {
    uint64_t v117 = (_WORD *)(*(void *)(a1 + 880) + 2 * (*(void *)(a1 + 856) * ((uint64_t)v16 >> 3) + (v15 >> 3)));
    uint64_t v116 = *(void *)(a1 + 888) + 16 * (*(void *)(a1 + 864) * ((uint64_t)v16 >> 2) + (v15 >> 2));
  }
  else
  {
    uint64_t v116 = 0;
    uint64_t v117 = 0;
  }
  int v19 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113);
  uint64_t v20 = *(void *)(a1 + 944);
  if (*(unsigned char *)(*(void *)(a1 + 14856) + 19)) {
    (**(void (***)(void, void, uint64_t))v20)(*(void *)(a1 + 944), HIBYTE(*v117) & 1, v20 + 53);
  }
  int v21 = v19 - a4;
  uint64_t v22 = *(void *)(a1 + 14840);
  int v114 = v19 - a4;
  if (*(unsigned __int8 *)(v22 + 58) > 1u) {
    goto LABEL_64;
  }
  if (a2 < 1)
  {
    unsigned int v24 = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 824)) {
      int v23 = *(unsigned __int16 **)(*(void *)(a1 + 872) + 104);
    }
    else {
      int v23 = (unsigned __int16 *)(*(void *)(*(void *)(v22 + 8) + 800)
    }
                               + 2
                               * (((a2 - 1) >> 3)
                                + *(void *)(*(void *)(v22 + 8) + 768) * ((uint64_t)a3 >> 3)));
    unsigned int v24 = (*v23 >> 7) & 1;
  }
  if (a3 < 1)
  {
    unsigned int v26 = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 824)) {
      int v25 = *(unsigned __int16 **)(*(void *)(a1 + 872) + 112);
    }
    else {
      int v25 = (unsigned __int16 *)(*(void *)(*(void *)(v22 + 8) + 800)
    }
                               + 2
                               * (*(void *)(*(void *)(v22 + 8) + 768) * ((a3 - 1) >> 3) + (a2 >> 3)));
    unsigned int v26 = (*v25 >> 7) & 1;
  }
  unint64_t v27 = v26 + (unint64_t)v24;
  if (*(unsigned char *)(a1 + 824))
  {
    if (*(unsigned char *)(a1 + 8)) {
      BOOL v28 = *(char *)(*(void *)(a1 + 968) + 203) < 1;
    }
    else {
      BOOL v28 = 1;
    }
    if ((*v117 & 0x80) == 0)
    {
      uint64_t v29 = 0;
      if ((*v117 & 0x70) == 0 && *(unsigned char *)(a1 + 825)) {
        uint64_t v29 = *(unsigned char *)(v116 + 11) & v28;
      }
      goto LABEL_36;
    }
LABEL_35:
    uint64_t v29 = 1;
    goto LABEL_36;
  }
  if ((*v117 & 0x80) != 0) {
    goto LABEL_35;
  }
  uint64_t v29 = 0;
  if ((*v117 & 0x70) == 0 && *(unsigned char *)(a1 + 825)) {
    uint64_t v29 = *(unsigned char *)(v116 + 11) & 1;
  }
LABEL_36:
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v20)(v20, v29, v20 + v27 + 54);
  uint64_t v31 = *(void *)(a1 + 14840);
  if (!v29)
  {
    if (*(unsigned __int8 *)(v31 + 58) <= 1u)
    {
      (**(void (***)(uint64_t, BOOL, uint64_t))v20)(v20, *(unsigned char *)(v116 + 10) == 1, v20 + 59);
      if (*(unsigned char *)(v116 + 10) != 1)
      {
        int v35 = ((unsigned __int16)*v117 >> 4) & 7;
        if (!v35)
        {
          uint64_t v42 = 0;
LABEL_63:
          (**(void (***)(uint64_t, uint64_t, uint64_t))v20)(v20, 1, v20 + v42 + 60);
          goto LABEL_64;
        }
        uint64_t v112 = a6;
        int v111 = a4;
        char v36 = a5;
        if (v21 != *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2112) || v21 <= 3) {
          unsigned int v38 = 2;
        }
        else {
          unsigned int v38 = 3;
        }
        unint64_t v39 = v38 - 1;
        unint64_t v40 = (v35 - 1);
        if (v39 >= v40) {
          unsigned int v41 = v40;
        }
        else {
          unsigned int v41 = v38 - 1;
        }
        uint64_t v42 = v41 + 1;
        if (v39 >= v40) {
          unint64_t v43 = v40;
        }
        else {
          unint64_t v43 = v38 - 1;
        }
        for (uint64_t i = -1; i != v43; ++i)
          (**(void (***)(uint64_t, void, uint64_t))v20)(v20, 0, v20 + i + 61);
        BOOL v45 = v42 >= v38;
        a5 = v36;
        a4 = v111;
        a6 = v112;
        int v21 = v114;
        if (!v45) {
          goto LABEL_63;
        }
      }
    }
LABEL_64:
    int v46 = *(unsigned __int8 **)(a1 + 14848);
    if (*(unsigned char *)(v116 + 10) != 1)
    {
      uint64_t v113 = a6;
      unint64_t v57 = a5;
      int v58 = a4;
      char v59 = v46[2113] - a4;
      int v60 = 1 << (v59 - 1);
      int v61 = v60 + a2;
      int v62 = v60 + a3;
      char v63 = v59 - 2;
      int v64 = 1 << v59;
      int v65 = 1 << (v59 - 2);
      switch((*(unsigned __int16 *)(*(void *)(a1 + 880)
                                    + 2
                                    * (*(void *)(a1 + 856) * ((uint64_t)(a3 - *(_DWORD *)(a1 + 836)) >> 3)
                                     + ((a2 - *(_DWORD *)(a1 + 832)) >> 3))) >> 4) & 7)
      {
        case 0:
          uint64_t v66 = a1;
          int v67 = a2;
          int v68 = a3;
          int v69 = 1 << v59;
          int v70 = 1 << v59;
          a4 = v58;
          int v71 = v58;
          goto LABEL_119;
        case 1:
          a4 = v58;
          sub_1D0D168C0(a1, a2, a3, 1 << v59, 1 << (v59 - 1), v58);
          uint64_t v66 = a1;
          int v67 = a2;
          int v68 = v60 + a3;
          int v69 = v64;
          goto LABEL_111;
        case 2:
          a4 = v58;
          sub_1D0D168C0(a1, a2, a3, 1 << (v59 - 1), 1 << v59, v58);
          uint64_t v66 = a1;
          int v67 = v60 + a2;
          int v68 = a3;
          int v69 = v60;
          goto LABEL_117;
        case 4:
          int v96 = v62 - v65;
          int v97 = v58;
          sub_1D0D168C0(a1, a2, a3, 1 << v59, 1 << (v59 - 2), v58);
          int v70 = 3 << v63;
          a4 = v97;
          uint64_t v66 = a1;
          int v67 = a2;
          int v68 = v96;
          int v69 = v64;
          goto LABEL_115;
        case 5:
          int v98 = 3 << v63;
          a4 = v58;
          sub_1D0D168C0(a1, a2, a3, v64, v98, v58);
          uint64_t v66 = a1;
          int v67 = a2;
          int v68 = v62 + v65;
          int v69 = v64;
          int v70 = v65;
          goto LABEL_118;
        case 6:
          int v99 = v61 - v65;
          int v97 = v58;
          sub_1D0D168C0(a1, a2, a3, 1 << (v59 - 2), 1 << v59, v58);
          int v69 = 3 << v63;
          a4 = v97;
          uint64_t v66 = a1;
          int v67 = v99;
          int v68 = a3;
          int v70 = v64;
LABEL_115:
          int v71 = v97;
          goto LABEL_119;
        case 7:
          int v100 = 3 << v63;
          a4 = v58;
          sub_1D0D168C0(a1, a2, a3, v100, v64, v58);
          uint64_t v66 = a1;
          int v67 = v61 + v65;
          int v68 = a3;
          int v69 = v65;
LABEL_117:
          int v70 = v64;
          goto LABEL_118;
        default:
          a4 = v58;
          sub_1D0D168C0(a1, a2, a3, 1 << (v59 - 1), 1 << (v59 - 1), v58);
          sub_1D0D168C0(a1, v60 + a2, a3, v60, v60, a4);
          sub_1D0D168C0(a1, a2, v60 + a3, v60, v60, a4);
          uint64_t v66 = a1;
          int v67 = v60 + a2;
          int v68 = v60 + a3;
          int v69 = v60;
LABEL_111:
          int v70 = v60;
LABEL_118:
          int v71 = a4;
LABEL_119:
          uint64_t result = sub_1D0D168C0(v66, v67, v68, v69, v70, v71);
          a5 = v57;
          a6 = v113;
          break;
      }
      goto LABEL_128;
    }
    if (v21 == v46[2112])
    {
      (**(void (***)(uint64_t, BOOL, uint64_t))v20)(v20, (*v117 & 0x70) == 0, v20 + 60);
      int v46 = *(unsigned __int8 **)(a1 + 14848);
    }
    int v47 = *(_DWORD *)(a1 + 832);
    int v48 = a2 - v47;
    int v49 = *(_DWORD *)(a1 + 836);
    int v50 = a3 - v49;
    int v51 = 0;
    if ((v14 & 0x80000000) == 0)
    {
      int v52 = *(unsigned __int8 *)(a1 + 828);
      if (v48 < v52 && v50 < v52) {
        int v51 = (unsigned __int8 *)(*(void *)(a1 + 888) + 16
      }
                                                        * (*(void *)(a1 + 864) * ((uint64_t)v50 >> 2) + (v48 >> 2)));
    }
    int v53 = v46[2113];
    v121[0] = 1;
    int v54 = *(unsigned __int8 *)(a1 + 824);
    if (((v46[2117] - 1) & a3) == 0) {
      goto LABEL_82;
    }
    if (*(unsigned char *)(a1 + 824))
    {
      unint64_t v55 = *(unsigned char **)(*(void *)(a1 + 872) + 128);
      if (!v55) {
        goto LABEL_82;
      }
    }
    else
    {
      if (((a3 - 1) | a2) < 0) {
        goto LABEL_82;
      }
      uint64_t v72 = *(void *)(*(void *)(a1 + 14840) + 8);
      if (*(_DWORD *)(v72 + 520) <= a2) {
        goto LABEL_82;
      }
      if (*(_DWORD *)(v72 + 524) < a3) {
        goto LABEL_82;
      }
      unint64_t v55 = (unsigned char *)(*(void *)(v72 + 880) + 16 * (*(void *)(v72 + 848) * ((uint64_t)(a3 - 1) >> 2) + (a2 >> 2)));
      if (!v55) {
        goto LABEL_82;
      }
    }
    if (v55[10] == 1)
    {
      uint64_t v56 = 0;
      goto LABEL_83;
    }
LABEL_82:
    unint64_t v55 = v121;
    uint64_t v56 = v121;
LABEL_83:
    int v73 = a2 - 1;
    if (*(unsigned char *)(a1 + 824))
    {
      long long v74 = *(unsigned char **)(*(void *)(a1 + 872) + 120);
      if (!v74) {
        goto LABEL_91;
      }
    }
    else
    {
      if ((v73 | a3) < 0) {
        goto LABEL_91;
      }
      uint64_t v76 = *(void *)(*(void *)(a1 + 14840) + 8);
      if (*(_DWORD *)(v76 + 520) < a2) {
        goto LABEL_91;
      }
      if (*(_DWORD *)(v76 + 524) <= a3) {
        goto LABEL_91;
      }
      long long v74 = (unsigned char *)(*(void *)(v76 + 880) + 16 * (*(void *)(v76 + 848) * ((uint64_t)a3 >> 2) + (v73 >> 2)));
      if (!v74) {
        goto LABEL_91;
      }
    }
    if (v74[10] == 1)
    {
      long long v75 = 0;
      goto LABEL_92;
    }
LABEL_91:
    long long v74 = v121;
    long long v75 = v121;
LABEL_92:
    if ((*(_WORD *)(*(void *)(a1 + 880) + 2 * (*(void *)(a1 + 856) * ((uint64_t)v50 >> 3) + (v48 >> 3))) & 0x70) != 0x30)
    {
      v120[0] = *v51;
      v119[0] = *v55;
      v118[0] = *v74;
      uint64_t v92 = *(void *)(a1 + 944);
      unsigned int v93 = 1;
      goto LABEL_126;
    }
    int v77 = ~a4 + v53;
    uint64_t v78 = *(void *)(a1 + 888);
    uint64_t v79 = *(void *)(a1 + 864);
    uint64_t v80 = v79 * ((uint64_t)v50 >> 2);
    int v81 = v48 >> 2;
    char v82 = *(unsigned char *)(v78 + 16 * (v80 + (v48 >> 2)));
    int v83 = 1 << v77;
    v120[0] = v82;
    int v84 = (1 << v77) + a2;
    int v85 = (v84 - v47) >> 2;
    char v86 = *(unsigned char *)(v78 + 16 * (v80 + v85));
    v120[1] = v86;
    int v87 = (1 << v77) + a3;
    uint64_t v88 = v79 * ((uint64_t)(v87 - v49) >> 2);
    char v89 = *(unsigned char *)(v78 + 16 * (v88 + v81));
    v120[2] = v89;
    v120[3] = *(unsigned char *)(v78 + 16 * (v88 + v85));
    if (!v56)
    {
      if (v54)
      {
        uint64_t v90 = *(void *)(a1 + 872);
        int v91 = v83 >> 2;
        if (v77 == 31) {
          int v94 = -1;
        }
        else {
          int v94 = v91;
        }
        uint64_t v56 = (unsigned char *)(*(void *)(v90 + 128) + 16 * v94);
        if (!v75) {
          goto LABEL_103;
        }
        goto LABEL_125;
      }
      if ((v84 | (a3 - 1)) < 0
        || (uint64_t v101 = *(void *)(*(void *)(a1 + 14840) + 8), *(_DWORD *)(v101 + 520) <= v84)
        || *(_DWORD *)(v101 + 524) < a3)
      {
        uint64_t v56 = 0;
      }
      else
      {
        uint64_t v56 = (unsigned char *)(*(void *)(v101 + 880) + 16 * (*(void *)(v101 + 848) * ((uint64_t)(a3 - 1) >> 2) + (v84 >> 2)));
      }
    }
    if (!v75)
    {
      if (v54)
      {
        uint64_t v90 = *(void *)(a1 + 872);
        int v91 = v83 >> 2;
LABEL_103:
        if (v77 == 31) {
          int v91 = -1;
        }
        uint64_t v95 = 120;
        if (v77 == 31) {
          uint64_t v95 = 128;
        }
        long long v75 = (unsigned char *)(*(void *)(v90 + v95) + 16 * v91);
        goto LABEL_125;
      }
      long long v75 = (unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 880)
                    + 16
                    * (*(void *)(*(void *)(*(void *)(a1 + 14840) + 8) + 848) * ((uint64_t)v87 >> 2) + (v73 >> 2)));
    }
LABEL_125:
    v119[0] = *v55;
    v119[1] = *v56;
    v119[2] = v82;
    v119[3] = v86;
    v118[0] = *v74;
    v118[1] = v82;
    v118[2] = *v75;
    v118[3] = v89;
    uint64_t v92 = *(void *)(a1 + 944);
    unsigned int v93 = 4;
LABEL_126:
    uint64_t result = sub_1D0D16FF0(v92, (uint64_t)v120, (uint64_t)v119, (uint64_t)v118, v93, a8);
    if (!*(unsigned char *)(a1 + 8)) {
      uint64_t result = sub_1D0D12F84(*(uint64_t (****)(void))(a1 + 944), *v51, v51[1]);
    }
LABEL_128:
    if (a7) {
      return result;
    }
    if (!*(unsigned char *)(*(void *)(a1 + 14848) + 278) && !*(unsigned char *)(a1 + 826))
    {
      sub_1D0D3CAE0(a1 + 14912, a1, a2, a3, a4, *(unsigned __int8 *)(v116 + 10), ((unsigned __int16)*v117 >> 4) & 7);
      int v102 = *(unsigned __int8 *)(*(void *)(a1 + 24384) + 2113) - *(_DWORD *)(a1 + 24432);
      int v103 = *(unsigned char *)(a1 + 24416) ? 1 : 3;
      *(_DWORD *)(a1 + 24420) = v103;
      uint64_t v104 = *(unsigned char *)(*(void *)(a1 + 24400) + 825)
           ? 0
           : sub_1D0D3EA6C(a1 + 14912, *(unsigned int *)(a1 + 24424), *(unsigned int *)(a1 + 24428), v102, 0, 0);
      if (*(unsigned char *)(v116 + 10) == 1
        || (*(unsigned char *)(v116 + 11) & 1) != 0 && !*(_DWORD *)(a1 + 14920)
        || (uint64_t result = (***(uint64_t (****)(void, uint64_t, uint64_t))(*(void *)(a1 + 24400) + 944))(*(void *)(*(void *)(a1 + 24400) + 944), v104, *(void *)(*(void *)(a1 + 24400) + 944) + 78), v104))
      {
        *(_DWORD *)(a1 + 14932) = *a5;
        *(unsigned char *)(a1 + 14928) = *a6;
        uint64_t result = sub_1D0D3EE0C(a1 + 14912, *(unsigned int *)(a1 + 24424), *(unsigned int *)(a1 + 24428), v102, 0, 0);
        *a5 = *(_DWORD *)(a1 + 14932);
        *a6 = *(unsigned char *)(a1 + 14928);
      }
    }
    goto LABEL_142;
  }
  unsigned int v32 = *(unsigned __int8 *)(v31 + 652);
  uint64_t v33 = v32 - 2;
  if (v32 >= 2)
  {
    int v34 = (*(unsigned __int8 *)(v116 + 11) >> 1) & 7;
    uint64_t result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))v20)(v20, v34 != 0, v20 + 67);
    if (v34) {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v20 + 40))(v20, (v34 - 1), v33);
    }
  }
  if ((a7 & 1) == 0)
  {
LABEL_142:
    uint64_t v105 = *(void *)(a1 + 14856);
    if (*(unsigned char *)(v105 + 12) && v114 >= *(_DWORD *)(v105 + 1636))
    {
      if (*a6)
      {
        *a6 = 0;
        int v106 = *(unsigned __int8 **)(a1 + 872);
        int v107 = *(unsigned __int8 *)(a1 + 824);
        int v108 = sub_1D0D130D0(a1, a2, a3, a4, v106, *a5, v107);
        int v109 = a4;
        int v110 = v108;
        uint64_t result = sub_1D0D11B74(a1, a2, a3, v109, v106, v108, v107);
        *a5 = v110;
      }
    }
  }
  return result;
}

uint64_t sub_1D0D168C0(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  if (((a3 | a2) & 0x80000000) == 0
    && ((int v12 = a2 - *(_DWORD *)(a1 + 832),
         int v13 = a3 - *(_DWORD *)(a1 + 836),
         int v14 = *(unsigned __int8 *)(a1 + 828),
         v12 < v14)
      ? (BOOL v15 = v13 < v14)
      : (BOOL v15 = 0),
        v15))
  {
    uint64_t v16 = *(void *)(a1 + 888) + 16 * (*(void *)(a1 + 864) * ((uint64_t)v13 >> 2) + (v12 >> 2));
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t result = (***(uint64_t (****)(void))(a1 + 944))();
  unsigned int v18 = *(unsigned __int8 *)(v16 + 11);
  if ((v18 & 1) == 0)
  {
    if (*(unsigned char *)(*(void *)(a1 + 14840) + 58))
    {
      char v19 = 1;
    }
    else
    {
      if (a5 + a4 != 12)
      {
        (***(void (****)(void, void, uint64_t))(a1 + 944))(*(void *)(a1 + 944), (v18 >> 6) & 1, *(void *)(a1 + 944) + a6 + 68);
        LOBYTE(v18) = *(unsigned char *)(v16 + 11);
      }
      if ((v18 & 0x40) != 0)
      {
        char v19 = 0;
      }
      else
      {
        unsigned int v25 = *(unsigned __int8 *)(v16 + 8);
        (***(void (****)(void, BOOL, uint64_t))(a1 + 944))(*(void *)(a1 + 944), v25 > 0xEF, *(void *)(a1 + 944) + 72);
        char v19 = 1;
        char v26 = 1;
        if (v25 > 0xEF)
        {
LABEL_23:
          int v30 = *(_DWORD *)(v16 + 4);
          sub_1D0D0CE3C(a1, a2, a3, 1u, *(unsigned __int8 *)(v16 + 9) >> 4, a4, a5, v34);
          uint64_t v31 = &v34[((unint64_t)*(unsigned __int8 *)(v16 + 11) >> 5) & 1];
          __int16 v32 = *(_WORD *)v31;
          __int16 v33 = *((_WORD *)v31 + 1);
          sub_1D0D16C84(a1, *(unsigned __int8 *)(v16 + 9) >> 4, *(char *)(*(void *)(a1 + 14840) + 517));
          if ((v26 & 1) != 0 || !*(unsigned char *)(*(void *)(a1 + 14840) + 552)) {
            sub_1D0D16D94(*(void *)(a1 + 944), (unsigned __int16)(v30 - v32) | ((unsigned __int16)(HIWORD(v30) - v33) << 16));
          }
          return (***(uint64_t (****)(void, void, uint64_t))(a1 + 944))(*(void *)(a1 + 944), (*(unsigned __int8 *)(v16 + 11) >> 5) & 1, *(void *)(a1 + 944) + 77);
        }
      }
    }
    int v27 = *(_DWORD *)v16;
    sub_1D0D0CE3C(a1, a2, a3, 0, *(unsigned __int8 *)(v16 + 8) >> 4, a4, a5, v34);
    BOOL v28 = &v34[((unint64_t)*(unsigned __int8 *)(v16 + 11) >> 4) & 1];
    int v29 = (unsigned __int16)(v27 - *(_WORD *)v28) | ((unsigned __int16)(HIWORD(v27) - *((_WORD *)v28 + 1)) << 16);
    sub_1D0D16C84(a1, *(unsigned __int8 *)(v16 + 8) >> 4, *(char *)(*(void *)(a1 + 14840) + 516));
    sub_1D0D16D94(*(void *)(a1 + 944), v29);
    uint64_t result = (***(uint64_t (****)(void))(a1 + 944))();
    char v26 = 0;
    if (v19) {
      return result;
    }
    goto LABEL_23;
  }
  unsigned int v20 = *(unsigned __int8 *)(*(void *)(a1 + 14840) + 652);
  uint64_t v21 = v20 - 2;
  if (v20 >= 2)
  {
    uint64_t v22 = *(void *)(a1 + 944);
    int v23 = (v18 >> 1) & 7;
    uint64_t result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))v22)(v22, v23 != 0, v22 + 67);
    if (v23)
    {
      unsigned int v24 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v22 + 40);
      return v24(v22, (v23 - 1), v21);
    }
  }
  return result;
}

uint64_t sub_1D0D16C84(uint64_t result, signed int a2, int a3)
{
  if (a3 >= 2)
  {
    unsigned int v4 = a2;
    uint64_t v5 = result;
    uint64_t result = (***(uint64_t (****)(void, BOOL, uint64_t))(result + 944))(*(void *)(result + 944), a2 > 0, *(void *)(result + 944) + 73);
    if ((int)v4 >= 1)
    {
      unsigned int v6 = a3 - 2;
      if (a3 != 2)
      {
        uint64_t result = (***(uint64_t (****)(void, BOOL, uint64_t))(v5 + 944))(*(void *)(v5 + 944), v4 > 1, *(void *)(v5 + 944) + 74);
        if (v4 >= 2 && a3 >= 4)
        {
          do
          {
            uint64_t result = (*(uint64_t (**)(void, BOOL))(**(void **)(v5 + 944) + 8))(*(void *)(v5 + 944), v4 > 2);
            if (v4 < 3) {
              break;
            }
            --v4;
          }
          while (v6-- > 2);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D0D16D94(uint64_t a1, int a2)
{
  if ((a2 & 0x8000u) == 0) {
    int v4 = (__int16)a2;
  }
  else {
    int v4 = -(__int16)a2;
  }
  if (a2 >> 16 >= 0) {
    int v5 = a2 >> 16;
  }
  else {
    int v5 = -(a2 >> 16);
  }
  int v6 = v4 << 16;
  int v7 = v5 << 16;
  uint64_t v8 = a1 + 75;
  (**(void (***)(uint64_t, BOOL, uint64_t))a1)(a1, v4 << 16 > 0, a1 + 75);
  uint64_t result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))a1)(a1, v5 << 16 > 0, v8);
  if (v4 << 16 >= 1) {
    uint64_t result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))a1)(a1, v6 > 0x10000, a1 + 76);
  }
  if (v7 >= 1) {
    uint64_t result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))a1)(a1, v7 > 0x10000, a1 + 76);
  }
  if (v6 >= 1)
  {
    if (v6 > 0x10000) {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 56))(a1, ((__int16)v4 - 2), 1);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 8))(a1, (unsigned __int16)a2 >> 15);
  }
  if (v7 >= 1)
  {
    if (v7 > 0x10000) {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 56))(a1, ((__int16)v5 - 2), 1);
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, void))(*(void *)a1 + 8);
    return v10(a1, a2 >> 31);
  }
  return result;
}

uint64_t sub_1D0D16FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __n128 a6)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v23 = 0;
  uint64_t v10 = a5;
  a6.n128_u64[0] = 0x100000000;
  do
  {
    unsigned int v11 = *(unsigned __int8 *)(a4 + v7);
    int v12 = *(unsigned __int8 *)(a3 + v7);
    if (v11 == v12)
    {
      if (v11 < 2)
      {
        unsigned int v11 = 0;
        unint64_t v24 = 0x100000000;
        int v12 = 1;
        int v13 = 26;
      }
      else
      {
        int v12 = (((_BYTE)v11 + 29) & 0x1F) + 2;
        LODWORD(v24) = *(unsigned __int8 *)(a4 + v7);
        HIDWORD(v24) = v12;
        int v13 = (((_BYTE)v11 - 1) & 0x1F) + 2;
      }
    }
    else
    {
      LODWORD(v24) = *(unsigned __int8 *)(a4 + v7);
      HIDWORD(v24) = v12;
      if (v12 + v11 > 1) {
        int v14 = 1;
      }
      else {
        int v14 = 26;
      }
      if (v11) {
        BOOL v15 = v12 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15) {
        int v13 = v14;
      }
      else {
        int v13 = 0;
      }
    }
    uint64_t v16 = 0;
    int v25 = v13;
    int v17 = *(unsigned __int8 *)(a2 + v7);
    do
    {
      if (*((_DWORD *)&v24 + v16) == v17)
      {
        if (v16) {
          uint64_t v9 = (v16 + 4 * v9 + 1);
        }
        else {
          uint64_t v9 = (2 * v9);
        }
        if (v16) {
          uint64_t v8 = (v8 + 2);
        }
        else {
          uint64_t v8 = (v8 + 1);
        }
        *((unsigned char *)&v23 + v7) = 1;
        goto LABEL_37;
      }
      ++v16;
    }
    while (v16 != 3);
    if (!*((unsigned char *)&v23 + v7))
    {
      if ((int)v11 <= v12)
      {
        int v18 = v12;
        int v12 = v11;
      }
      else
      {
        unint64_t v24 = __PAIR64__(v11, v12);
        int v18 = v11;
      }
      if (v12 <= v13)
      {
        int v12 = v13;
      }
      else
      {
        LODWORD(v24) = v13;
        int v25 = v12;
      }
      if (v18 > v12)
      {
        HIDWORD(v24) = v12;
        int v25 = v18;
      }
      for (uint64_t i = 8; i != -4; i -= 4)
        v17 -= v17 > *(_DWORD *)((char *)&v24 + i);
      uint64_t v9 = (v17 + 32 * v9);
      uint64_t v8 = (v8 + 5);
    }
LABEL_37:
    ++v7;
  }
  while (v7 != a5);
  uint64_t v20 = 0;
  do
    (**(void (***)(uint64_t, void, uint64_t, __n128))a1)(a1, *((unsigned __int8 *)&v23 + v20++), a1 + 64, a6);
  while (v10 != v20);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);
  return v21(a1, v9, v8);
}

uint64_t sub_1D0D17234(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned __int8 **a8)
{
  uint64_t v9 = a8;
  int v13 = a4;
  v61[2] = *MEMORY[0x1E4F143B8];
  BOOL v15 = (unsigned __int8 *)(a1 + 25064);
  unint64_t v16 = *((void *)*a8 + 12)
      + 16
      * (((uint64_t)(a2 - *((_DWORD *)*a8 + 1)) >> 2) + ((unint64_t)**a8 >> 2)
                                                     * ((a3 - *((_DWORD *)*a8 + 2)) >> 2));
  *(unsigned char *)(v16 + 11) = *(unsigned char *)(v16 + 11) & 0xBF | *(unsigned char *)(a7 + 11) & 0x40;
  sub_1D0D0CF98(a1, a2, a3, *a8, a4, a5, a1 + 25064);
  if (v15[60])
  {
    uint64_t v17 = 0;
    int v18 = *(unsigned __int8 *)(a7 + 8) >> 4;
    int v19 = *(unsigned __int8 *)(a7 + 9) >> 4;
    uint64_t v20 = v15;
    while (v18 != *v20
         || v18 != 15 && *((_DWORD *)v20 + 1) != *(_DWORD *)a7
         || v19 != v20[1]
         || v19 != 15 && *((_DWORD *)v20 + 2) != *(_DWORD *)(a7 + 4))
    {
      ++v17;
      v20 += 12;
      if (v15[60] == v17) {
        goto LABEL_10;
      }
    }
    char v45 = *(unsigned char *)(v16 + 11);
    if (a6) {
      char v46 = 2;
    }
    else {
      char v46 = 3;
    }
    *(unsigned char *)(v16 + 10) = v46;
    *(unsigned char *)(v16 + 11) = v45 & 0xF0 | (2 * (v17 & 7)) | 1;
    *(unsigned char *)(v16 + 8) = 16 * *v20;
    *(unsigned char *)(v16 + 9) = 16 * v20[1];
    int v47 = &v15[12 * v17];
    *(_DWORD *)unint64_t v16 = *((_DWORD *)v47 + 1);
    *(_DWORD *)(v16 + 4) = *((_DWORD *)v47 + 2);
  }
  else
  {
LABEL_10:
    *(unsigned char *)(v16 + 10) = 3;
    *(unsigned char *)(v16 + 11) &= 0xF0u;
    *(unsigned char *)(v16 + 8) = *(unsigned char *)(a7 + 8) & 0xF0;
    *(unsigned char *)(v16 + 9) = *(unsigned char *)(a7 + 9) & 0xF0;
    *(_DWORD *)unint64_t v16 = *(_DWORD *)a7;
    *(_DWORD *)(v16 + 4) = *(_DWORD *)(a7 + 4);
    v61[0] = 0;
    v61[1] = 0;
    memset(v60, 0, sizeof(v60));
    unint64_t v55 = v9;
    int v56 = v13;
    sub_1D0D0CC20(a1, a2, a3, *v9, v13, a5, v61, v60);
    uint64_t v21 = 0;
    int v22 = *(unsigned __int8 *)(a1 + 204);
    __int16 v59 = 0;
    char v23 = 1;
    while (1)
    {
      unint64_t v24 = (unint64_t)*(unsigned __int8 *)(v16 + v21 + 8) >> 4;
      if (v24 != 15)
      {
        uint64_t v25 = a1 + 208 * v21 + 52 * v24 + 25128;
        sub_1D0C95660(*(void *)(a1 + 14840), a2, a3, v21, v24, v56, a5, (__int32 *)v25, v61, (uint64_t)v60, 1);
        uint64_t v26 = *(unsigned __int8 *)(v25 + 48);
        if (*(unsigned char *)(v25 + 48))
        {
          uint64_t v27 = 0;
          int v28 = *(_DWORD *)(v16 + 4 * v21);
          unsigned int v30 = -1;
          do
          {
            int v31 = *(_DWORD *)(v25 + 4 * v27);
            int v32 = (__int16)v28 - (__int16)v31;
            if ((v32 + 64) >= 0x80)
            {
              if (v32 >= 0) {
                int v34 = (__int16)v28 - (__int16)v31;
              }
              else {
                int v34 = (__int16)v31 - (__int16)v28;
              }
              unsigned int v33 = 63 - 2 * __clz((v32 < 1) | (2 * v34));
            }
            else
            {
              unsigned int v33 = byte_1D0DA5D08[v32 + 64];
            }
            int v29 = v28 >> 16;
            int v35 = (v28 >> 16) - (v31 >> 16);
            if ((v35 + 64) >= 0x80)
            {
              if (v35 >= 0) {
                int v37 = v29 - (v31 >> 16);
              }
              else {
                int v37 = (v31 >> 16) - v29;
              }
              unsigned int v36 = 63 - 2 * __clz((v35 < 1) | (2 * v37));
            }
            else
            {
              unsigned int v36 = byte_1D0DA5D08[v35 + 64];
            }
            unsigned int v38 = v36 + v33;
            if (v38 < v30)
            {
              *((unsigned char *)&v59 + v21) = v27;
              unsigned int v8 = (v28 - (v31 & 0xFFFF0000)) & 0xFFFF0000 | (unsigned __int16)(v28 - v31);
              unsigned int v30 = v38;
            }
            ++v27;
          }
          while (v26 != v27);
        }
        if ((v23 & 1) == 0) {
          break;
        }
      }
      char v39 = (v22 != 0) & v23;
      uint64_t v21 = 1;
      char v23 = 0;
      if ((v39 & 1) == 0)
      {
        char v40 = *(unsigned char *)(v16 + 11);
        int v41 = 1;
        goto LABEL_41;
      }
    }
    char v40 = *(unsigned char *)(v16 + 11);
    BOOL v43 = (v40 & 0x40) == 0 || v8 == 0;
    if (*(unsigned char *)(*(void *)(a1 + 14840) + 552)) {
      int v41 = v43;
    }
    else {
      int v41 = 1;
    }
LABEL_41:
    *(unsigned char *)(v16 + 11) = (32 * (HIBYTE(v59) & 1)) | v40 & 0xCF | (16 * (v59 & 1));
    int v13 = v56;
    uint64_t v9 = v55;
    if (!v41) {
      return 0;
    }
  }
  if (a5 >= 4)
  {
    uint64_t v48 = 0;
    LODWORD(v49) = v13 >> 2;
    if (v13 >> 2 <= 1) {
      uint64_t v49 = 1;
    }
    else {
      uint64_t v49 = v49;
    }
    unint64_t v50 = 16 * ((unint64_t)**v9 >> 2);
    int v51 = (void *)v16;
    do
    {
      int v52 = v51;
      uint64_t v53 = v49;
      if (v13 >= 4)
      {
        do
        {
          uint64_t v54 = *(void *)v16;
          *(void *)((char *)v52 + 6) = *(void *)(v16 + 6);
          *int v52 = v54;
          v52 += 2;
          --v53;
        }
        while (v53);
      }
      ++v48;
      int v51 = (void *)((char *)v51 + v50);
    }
    while (v48 != a5 >> 2);
  }
  return 1;
}

BOOL sub_1D0D17678(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6, unsigned __int8 **a7, void ***a8)
{
  int v13 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4;
  int v14 = *a7;
  uint64_t v15 = (int)a2 - (uint64_t)*((int *)*a7 + 1);
  int v16 = a2 - *((_DWORD *)*a7 + 1);
  uint64_t v17 = (int)a3 - (uint64_t)*((int *)*a7 + 2);
  unint64_t v18 = **a7;
  int v19 = (_WORD *)(*((void *)*a7 + 11) + 2 * (((uint64_t)v16 >> 3) + (int)(v18 >> 3) * (uint64_t)((int)v17 >> 3)));
  uint64_t v20 = (unsigned __int8 *)*((void *)*a7 + 17);
  uint64_t v21 = *((void *)*a7 + 12) + 16 * (((uint64_t)v16 >> 2) + (int)(v18 >> 2) * (uint64_t)((int)v17 >> 2));
  int v22 = (uint64_t *)*((void *)v20 + 7);
  char v23 = (uint64_t *)*((void *)v20 + 9);
  char v63 = (char *)(a1 + 29745);
  if (*(unsigned char *)(a1 + 29745))
  {
    __int16 v24 = 0;
  }
  else
  {
    int v25 = *(unsigned __int8 *)(*(void *)(a1 + 968) + 180);
    BOOL v26 = __OFSUB__(v13, v25);
    int v28 = v13 - v25;
    char v27 = (v28 < 0) ^ v26 | (v28 == 0);
    __int16 v24 = 4 * (v28 & 3);
    if (v27) {
      __int16 v24 = 0;
    }
  }
  uint64_t v29 = v20[1];
  uint64_t v30 = *v20;
  uint64_t v31 = *((void *)v20 + 8);
  uint64_t v32 = *((void *)v20 + 10);
  uint64_t v33 = *((int *)v22 + 4);
  uint64_t v34 = *v22;
  uint64_t v35 = (1 << v13);
  uint64_t v36 = *((int *)v23 + 4);
  uint64_t v37 = *v23;
  __int16 v38 = *v19 & 0xFFF3 | v24;
  *int v19 = v38;
  __int16 v59 = (unsigned int *)v21;
  uint64_t v60 = v15;
  uint64_t v57 = v29;
  uint64_t v58 = v30;
  uint64_t v55 = v37;
  uint64_t v56 = v36;
  uint64_t v53 = v32;
  uint64_t v54 = v33;
  uint64_t v51 = v31;
  uint64_t v52 = v34;
  if (a6) {
    int v39 = 0;
  }
  else {
    int v39 = (*(unsigned char *)(v21 + 10) == 2) << 7;
  }
  char v40 = v14 + 200;
  *int v19 = v39 | v38 & 0xFF7F;
  sub_1D0D0BFA0((void *)a1, v19, a4, a6, v39 != 0, (unint64_t)**a7 >> 3, *((_DWORD *)*a7 + 3));
  if ((int)v35 >= 8)
  {
    uint64_t v41 = 0;
    unint64_t v42 = 2 * ((unint64_t)**a7 >> 3);
    BOOL v43 = v19;
    do
    {
      uint64_t v44 = v43;
      uint64_t v45 = v35 >> 3;
      do
      {
        *v44++ = *v19;
        --v45;
      }
      while (v45);
      ++v41;
      BOOL v43 = (_WORD *)((char *)v43 + v42);
    }
    while (v41 != v35 >> 3);
  }
  if (a6)
  {
    *((_DWORD *)v14 + 56) = 0;
    *char v40 = 0;
    *((void *)v14 + 26) = 0;
    *((void *)v14 + 27) = -1;
    *((_WORD *)v14 + 114) = 2;
    int v46 = a4;
    sub_1D0D125BC(a1, a2, a3, a4, *a7, 1, *(unsigned char *)(a1 + 8) == 0, 0, (unsigned int *)v14 + 50);
    int v47 = a8;
    if (!*v63)
    {
      *((_DWORD *)v14 + 56) = 0;
      *char v40 = 0;
      *((void *)v14 + 26) = 0;
      *((void *)v14 + 27) = -1;
      *((_WORD *)v14 + 114) = 2;
      sub_1D0D185B8(a1, a2, a3, a4, *a7, (uint64_t)(v14 + 200));
    }
  }
  else
  {
    sub_1D0D57784(*(void *)(a1 + 14840), v59, a2, a3, v35, v35, v58, v52 + (v51 + v60 + v58 * v17) * v54, 2 * v57, v55 + (v53 + v60 + 2 * (int)v57 * (uint64_t)((int)v17 >> 1)) * v56);
    int v47 = a8;
    int v46 = a4;
  }
  int v67 = 0;
  v66[0] = 0;
  v66[1] = 0;
  v66[2] = -1;
  __int16 v68 = 0;
  *((_DWORD *)v14 + 56) = 0;
  *char v40 = 0;
  *((void *)v14 + 26) = 0;
  *((void *)v14 + 27) = -1;
  *((_WORD *)v14 + 114) = 0;
  sub_1D0D1507C(a1, a2, a3, v46, *a7, (uint64_t)(v14 + 200), (uint64_t)v66, 0, 0);
  char v65 = 0;
  (*(void (**)(void))(**(void **)(a1 + 944) + 88))(*(void *)(a1 + 944));
  sub_1D0D1076C(a1, a2, a3, *a7, 1, 0, *v63, 1, 0);
  uint64_t v48 = *a7;
  *((_DWORD *)v48 + 4) = *((_DWORD *)*a7 + 5);
  sub_1D0D157FC(a1, a2, a3, v46, a5, (int *)v48 + 4, &v65, v49);
  *((_DWORD *)v14 + 56) += (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 80))(*(void *)(a1 + 944));
  (*(void (**)(void))(**(void **)(a1 + 944) + 96))(*(void *)(a1 + 944));
  sub_1D0D182CC(a1, a2, a3, v46, (uint64_t)*a7);
  *((void *)v14 + 27) = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)v14 + 114) + 1152)
                          * (unint64_t)*((unsigned int *)v14 + 56)) >> (8 * (*((_WORD *)v14 + 114) == 0)))
                        + *((void *)v14 + 25);
  return sub_1D0D18C68(a1, (void ***)a7, v47, 1u);
}

uint64_t sub_1D0D17AD8(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned __int8 **a5, void ***a6, int a7, int a8, unsigned int a9, char a10)
{
  v62[1] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a1 + 25064;
  int v14 = *a6;
  *((_DWORD *)v14 + 56) = 0;
  v14[25] = 0;
  v14[26] = 0;
  v14[27] = (void *)-1;
  *((_WORD *)v14 + 114) = 0;
  sub_1D0D0CF98(a1, a2, a3, *a5, a7, a8, a1 + 25064);
  unsigned int v52 = a7;
  uint64_t v56 = a1;
  int v15 = *(_DWORD *)(a1 + 4 * a4 + 27648);
  if ((a7 < 8 || a8 <= 7) && *(unsigned __int8 *)(*(void *)(v56 + 14848) + 2113) - a4 == 3)
  {
    uint64_t v16 = *(unsigned __int8 *)(v13 + 60);
    if (*(unsigned char *)(v13 + 60))
    {
      uint64_t v17 = v13;
      do
      {
        if (*(unsigned char *)v17 != 15 && *(unsigned char *)(v17 + 1) != 15)
        {
          *(unsigned char *)(v17 + 1) = 15;
          *(_DWORD *)(v17 + 8) = 0;
        }
        v17 += 12;
        --v16;
      }
      while (v16);
    }
  }
  v62[0] = 0x300000002;
  uint64_t v18 = *(void *)(v56 + 968);
  if (*(unsigned char *)(v18 + 541)) {
    v62[0] = 0x200000003;
  }
  unint64_t v61 = -1;
  LODWORD(v18) = *(_DWORD *)(v18 + 544);
  if ((int)v18 >= *(unsigned __int8 *)(v13 + 60)) {
    uint64_t v18 = *(unsigned __int8 *)(v13 + 60);
  }
  else {
    uint64_t v18 = v18;
  }
  uint64_t v50 = v18;
  if ((int)v18 < 1)
  {
    char v55 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    char v20 = 0;
    char v21 = 0;
    char v55 = 0;
    uint64_t v48 = v56 + 1576;
    uint64_t v49 = v13;
    do
    {
      BOOL v60 = 0;
      if (!sub_1D0D187D0(v13, v19))
      {
        if (!*(unsigned char *)(*(void *)(v56 + 968) + 232)) {
          goto LABEL_23;
        }
        uint64_t v22 = *(char *)(v13 + 12 * v19);
        if (v22 == 15
          || (uint64_t v23 = *(void *)(*(void *)(v56 + 14520) + 16 * v22 + 1672),
              *(unsigned char *)(v56 + 14266) = *(unsigned char *)(v13 + 12 * v19),
              *(_DWORD *)(v56 + 14268) = *(_DWORD *)(v23 + 520),
              *(_DWORD *)(v56 + 14276) = *(_DWORD *)(v23 + 524),
              *(_DWORD *)__int16 v59 = *(_DWORD *)(v13 + 12 * v19 + 4),
              int v24 = *(_DWORD *)v59,
              sub_1D0CE65EC(v48, a2, a3, v52, a8, 0, v59),
              *(_DWORD *)v59 == v24))
        {
          uint64_t v25 = *(char *)(v13 + 12 * v19 + 1);
          if (v25 == 15
            || (uint64_t v26 = *(void *)(*(void *)(v56 + 14520) + 16 * v25 + 1928),
                *(unsigned char *)(v56 + 14267) = *(unsigned char *)(v13 + 12 * v19 + 1),
                *(_DWORD *)(v56 + 14272) = *(_DWORD *)(v26 + 520),
                *(_DWORD *)(v56 + 14280) = *(_DWORD *)(v26 + 524),
                *(_DWORD *)__int16 v59 = *(_DWORD *)(v13 + 12 * v19 + 8),
                int v27 = *(_DWORD *)v59,
                sub_1D0CE65EC(v48, a2, a3, v52, a8, 1u, v59),
                *(_DWORD *)v59 == v27))
          {
LABEL_23:
            uint64_t v28 = 0;
            BOOL v29 = 0;
            uint64_t v30 = v13 + 12 * v19;
            uint64_t v31 = (unsigned char *)(v30 + 1);
            char v32 = 1;
            do
            {
              char v33 = v32;
              int v34 = *((_DWORD *)v62 + v28);
              if (((v15 & 0x100) != 0 || v34 != 2) && (!a10 || v34 == 2))
              {
                if ((v21 & 1) != 0 && (*(unsigned char *)(*(void *)(v56 + 968) + 541) ? (BOOL v35 = v34 == 3) : (BOOL v35 = 0), v35))
                {
                  char v21 = 1;
                }
                else
                {
                  signed int v36 = a2 - *((_DWORD *)*a5 + 1);
                  int v37 = a3 - *((_DWORD *)*a5 + 2);
                  unint64_t v38 = **a5;
                  uint64_t v39 = *((void *)*a5 + 11);
                  uint64_t v40 = *((void *)*a5 + 12) + 16 * (((uint64_t)v36 >> 2) + (int)(v38 >> 2) * (uint64_t)(v37 >> 2));
                  char v41 = *(unsigned char *)(v40 + 11);
                  *(unsigned char *)(v40 + 10) = v34;
                  char v42 = v41 & 0xF0 | (2 * (v20 & 7)) | 1;
                  *(unsigned char *)(v40 + 11) = v42;
                  *(_DWORD *)uint64_t v40 = *(_DWORD *)(v30 + 4);
                  *(unsigned char *)(v40 + 8) = 16 * *(unsigned char *)v30;
                  *(_DWORD *)(v40 + 4) = *(_DWORD *)(v30 + 8);
                  *(unsigned char *)(v40 + 9) = 16 * *v31;
                  if (*(unsigned char *)v30 == 15) {
                    char v43 = 0;
                  }
                  else {
                    char v43 = (*v31 != 15) << 6;
                  }
                  uint64_t v44 = ((uint64_t)v36 >> 3) + (int)(v38 >> 3) * (uint64_t)(v37 >> 3);
                  *(unsigned char *)(v40 + 11) = v43 | v42 & 0xBF;
                  *(_WORD *)(v39 + 2 * v44) = *(_WORD *)(v39 + 2 * v44) & 0xFF73 | ((v34 == 2) << 7);
                  BOOL v29 = sub_1D0D1886C(v56, a2, a3, a4, a5, a6, v52, a8, a9, (v32 | v29) & 1 | (v34 == 2), &v60, &v61);
                  v55 |= v29;
                  BOOL v46 = v34 != 2 && v60;
                  v21 |= v46;
                }
              }
              char v32 = 0;
              uint64_t v28 = 1;
            }
            while ((v33 & 1) != 0);
          }
        }
      }
      ++v19;
      ++v20;
      uint64_t v13 = v49;
    }
    while (v19 != v50);
  }
  return v55 & 1;
}

uint64_t sub_1D0D17F94(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned __int8 **a6, unsigned __int8 **a7, _DWORD *a8)
{
  unsigned int v11 = a5;
  uint64_t v15 = result;
  uint64_t v16 = (unsigned char *)(result + 27684);
  uint64_t v17 = *a7;
  uint64_t v18 = *(unsigned __int8 *)(result + 196);
  if (!*(unsigned char *)(result + 196) || *(unsigned char *)(result + 29745))
  {
    if (*(unsigned char *)(result + 8))
    {
      if (*(char *)(*(void *)(result + 968) + 203) >= 1) {
        int v19 = v18 ^ 1;
      }
      else {
        int v19 = 0;
      }
    }
    else
    {
      int v19 = 0;
    }
    int v20 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113) - a4;
    int v21 = a2 - *((_DWORD *)v17 + 1);
    int v22 = a3 - *((_DWORD *)v17 + 2);
    unint64_t v23 = *v17;
    int v24 = *(unsigned __int8 *)(*((void *)v17 + 12)
                             + 16 * (((uint64_t)v21 >> 2) + (int)(v23 >> 2) * (uint64_t)(v22 >> 2))
                             + 10);
    if (v24 == 2 || (*(unsigned char *)(*(void *)(result + 968) + 536) ? (BOOL v25 = v20 < 5) : (BOOL v25 = 1), !v25)) {
      int v19 = 0;
    }
    if (*v16 && *(unsigned char *)(*(void *)(result + 968) + 229) != 3)
    {
      BOOL v29 = (_WORD *)(*((void *)v17 + 11) + 2 * (((uint64_t)v21 >> 3) + (int)(v23 >> 3) * (uint64_t)(v22 >> 3)));
      if (v24 == 2)
      {
        if ((*v29 & 0x80) == 0)
        {
          *v29 |= 0x80u;
          if (1 << v20 >= 8)
          {
            uint64_t v30 = 0;
            unint64_t v31 = 2 * ((unint64_t)*v17 >> 3);
            char v32 = v29;
            do
            {
              char v33 = v32;
              uint64_t v34 = (1 << v20) >> 3;
              do
              {
                *v33++ = *v29;
                --v34;
              }
              while (v34);
              ++v30;
              char v32 = (_WORD *)((char *)v32 + v31);
            }
            while (v30 != (1 << v20) >> 3);
          }
        }
      }
      else
      {
        sub_1D0D3CAE0(result + 14912, result, a2, a3, a4, v24, ((unsigned __int16)*v29 >> 4) & 7);
        return sub_1D0D44EC4(v15 + 14912, a2, a3, 0, v20, v17);
      }
    }
    else
    {
      if (v24 != 2 || !*(unsigned char *)(result + 8) || *(unsigned char *)(result + 812))
      {
        uint64_t result = sub_1D0D125BC(result, a2, a3, a4, v17, 1, *(unsigned __int8 *)(result + 8) == 0, v19, (unsigned int *)&v17[32 * v18 + 168]);
        unsigned int v11 = a5;
        if (a8) {
          *a8 = result;
        }
      }
      if (*(int *)(v15 + 4) < 3)
      {
        if (!v16[2061] || *(char *)(*(void *)(v15 + 968) + 229) >= 1)
        {
          int v27 = *a7;
          uint64_t v28 = (uint64_t)(*a7 + 168);
          return sub_1D0D185B8(v15, a2, a3, a4, v27, v28);
        }
      }
      else
      {
        sub_1D0D14154(v15, a2, a3, a4, *a6, *a7, v11, 0xFFFFFFFFuLL);
        uint64_t result = sub_1D0D182CC(v15, a2, a3, a4, (uint64_t)*a7);
        if (result) {
          *((void *)*a7 + 27) = ((*(unsigned __int16 *)(v15 + 2 * *((__int16 *)*a7 + 114) + 1152)
        }
                                  * (unint64_t)*((unsigned int *)*a7 + 56)) >> (8 * (*((_WORD *)*a7 + 114) == 0)))
                                + *((void *)*a7 + 25);
      }
    }
  }
  return result;
}

uint64_t sub_1D0D182CC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  LODWORD(v6) = a3;
  uint64_t v7 = a2;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 14840);
  int v10 = *(unsigned __int8 *)(*(void *)(v9 + 16) + 2113) - a4;
  if (*(unsigned char *)(v9 + 5432))
  {
    int v11 = *(_DWORD *)(a5 + 12) & ~(*(int *)(a5 + 12) >> 31);
    uint64_t result = sub_1D0D15538(a1, a5, v11, v11, a2, a3, v10, (uint64_t *)(a5 + 200));
    uint64_t v9 = *(void *)(a1 + 14840);
  }
  else
  {
    uint64_t result = 0;
  }
  if (*(unsigned char *)(v9 + 5433))
  {
    int v37 = result;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643408, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EA643408))
    {
      dword_1EA643400 = 10;
      __cxa_guard_release(&qword_1EA643408);
    }
    int v39 = v10;
    int v13 = 1 << v10;
    uint64_t v14 = *(void *)(a1 + 14840);
    int v15 = *(_DWORD *)(v14 + 5456);
    int v16 = *(_DWORD *)(v14 + 5460);
    if (v16 >= v15) {
      int v16 = v15;
    }
    uint64_t v38 = v16 * (uint64_t)v16;
    int v17 = v13 + v6;
    int v18 = *(_DWORD *)(a1 + 20);
    int v41 = v13 + v6;
    if (v13 + (int)v6 >= v18) {
      int v17 = *(_DWORD *)(a1 + 20);
    }
    if (v17 <= (int)v6)
    {
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = **(unsigned __int8 **)(a5 + 136);
      int v21 = v13 + v7;
      int v22 = *(_DWORD *)(a1 + 16);
      uint64_t v6 = (int)v6;
      uint64_t v40 = (int)v7;
      do
      {
        if (v21 >= v22) {
          int v23 = v22;
        }
        else {
          int v23 = v21;
        }
        uint64_t v24 = v40;
        uint64_t v25 = v7;
        if (v23 > (int)v7)
        {
          do
          {
            uint64_t v42 = *(int *)(*(void *)(*(void *)(*(void *)(a1 + 14840) + 5320) + 616) + 672);
            uint64_t v43 = 0;
            uint64_t v26 = *(unsigned __int8 **)(a5 + 136);
            uint64_t v27 = *(void *)(a1
                            + ((uint64_t)((int)v24 - *(_DWORD *)(a1 + 24524)) >> 3 << 8)
                            + 32 * ((uint64_t)((int)v6 - *(_DWORD *)(a1 + 24528)) >> 3)
                            + 27712);
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(a1 + 1008))(**((void **)v26 + 7)+ (v24 + *((void *)v26 + 8) + (v6 - *(int *)(a5 + 8)) * *v26 - *(int *)(a5 + 4))* *(int *)(*((void *)v26 + 7) + 16), v20, &v42);
            uint64_t v28 = v27 - v43;
            if (v27 - v43 < 0) {
              uint64_t v28 = v43 - v27;
            }
            v19 += v28;
            v24 += 8;
            int v22 = *(_DWORD *)(a1 + 16);
            if (v21 >= v22) {
              int v29 = *(_DWORD *)(a1 + 16);
            }
            else {
              int v29 = v21;
            }
          }
          while ((int)v24 < v29);
          int v18 = *(_DWORD *)(a1 + 20);
        }
        v6 += 8;
        int v30 = v41;
        if (v41 >= v18) {
          int v30 = v18;
        }
        uint64_t v7 = v25;
      }
      while ((int)v6 < v30);
    }
    uint64_t v31 = v38 << 6;
    uint64_t v32 = (v19 + 32) >> 6;
    if (v39 == 3)
    {
      v32 += 2 * (v31 >> dword_1EA643400);
      LODWORD(result) = v37;
    }
    else
    {
      LODWORD(result) = v37;
      if (v39 == 4) {
        v32 += 4 * (v31 >> dword_1EA643400);
      }
    }
    uint64_t v33 = v32 * *(int *)(*(void *)(a1 + 14840) + 5444);
    uint64_t v34 = *(void *)(a5 + 200);
    if ((v33 + 512) >> 10 <= -v34) {
      uint64_t v35 = -v34;
    }
    else {
      uint64_t v35 = (v33 + 512) >> 10;
    }
    if (v33 >= -512) {
      uint64_t v36 = (v33 + 512) >> 10;
    }
    else {
      uint64_t v36 = v35;
    }
    *(void *)(a5 + 200) = v34 + v36;
    *(void *)(a5 + 208) = v36;
    if (v36) {
      return 1;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t sub_1D0D185B8(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8 = result;
  int v9 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113) - a4;
  int v10 = a2 - *((_DWORD *)a5 + 1);
  int v11 = a3 - *((_DWORD *)a5 + 2);
  unint64_t v12 = *a5;
  int v13 = (_WORD *)(*((void *)a5 + 11) + 2 * (((uint64_t)v10 >> 3) + (int)(v12 >> 3) * (uint64_t)(v11 >> 3)));
  int v14 = *(unsigned __int8 *)(*((void *)a5 + 12)
                           + 16 * (((uint64_t)v10 >> 2) + (int)(v12 >> 2) * (uint64_t)(v11 >> 2))
                           + 10);
  if (v14 == 2)
  {
    *(void *)(a6 + 16) = ((*(unsigned __int16 *)(result + 2 * *(__int16 *)(a6 + 28) + 1152)
                           * (unint64_t)*(unsigned int *)(a6 + 24)) >> (8 * (*(_WORD *)(a6 + 28) == 0)))
                         + *(void *)a6;
    if ((*v13 & 0x80) == 0)
    {
      *v13 |= 0x80u;
      if (1 << v9 >= 8)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 2 * ((unint64_t)*a5 >> 3);
        int v17 = v13;
        do
        {
          int v18 = v17;
          uint64_t v19 = (1 << v9) >> 3;
          do
          {
            *v18++ = *v13;
            --v19;
          }
          while (v19);
          ++v15;
          int v17 = (_WORD *)((char *)v17 + v16);
        }
        while (v15 != (1 << v9) >> 3);
      }
    }
  }
  else
  {
    sub_1D0D3CAE0(result + 14912, result, a2, a3, a4, v14, ((unsigned __int16)*v13 >> 4) & 7);
    if (*(unsigned char *)(v8 + 29745) && *(char *)(*(void *)(v8 + 968) + 229) >= 2)
    {
      __int16 v22 = *(_WORD *)(a6 + 28);
      int v24 = 0;
      v23[0] = 0;
      v23[1] = 0;
      v23[2] = -1;
      __int16 v25 = v22;
      uint64_t result = sub_1D0D450C4(v8 + 14912, a2, a3, a5, v9, 0, (uint64_t)v23, 0);
      *(void *)(a6 + 16) = ((*(unsigned __int16 *)(v8 + 2 * *(__int16 *)(a6 + 28) + 1152)
                             * (unint64_t)*(unsigned int *)(a6 + 24)) >> (8 * (*(_WORD *)(a6 + 28) == 0)))
                           + *(void *)a6;
    }
    else
    {
      *(void *)a6 = 0;
      return sub_1D0D45758(v8 + 14912, a2, a3, a5, v9, 0, 0, (uint64_t *)a6, 0);
    }
  }
  return result;
}

BOOL sub_1D0D187D0(uint64_t a1, int a2)
{
  if (a2 < 1)
  {
    return 0;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = (unsigned __int8 *)(a1 + 12 * a2);
    int v4 = v3 + 4;
    int v7 = *v3;
    int v5 = v3 + 1;
    int v6 = v7;
    uint64_t v8 = (_DWORD *)(a1 + 4);
    BOOL v9 = 1;
    do
    {
      if (v6 == *((unsigned __int8 *)v8 - 4)
        && *v4 == *v8
        && *v5 == *((unsigned __int8 *)v8 - 3)
        && *(_DWORD *)(a1 + 12 * a2 + 8) == v8[1])
      {
        break;
      }
      BOOL v9 = ++v2 < a2;
      v8 += 3;
    }
    while (a2 != v2);
  }
  return v9;
}

BOOL sub_1D0D1886C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, uint64_t a7, int a8, unsigned int a9, char a10, BOOL *a11, unint64_t *a12)
{
  int v18 = *a5;
  int v19 = *((_DWORD *)*a5 + 3);
  __int16 v53 = v19;
  int v20 = a2 - *((_DWORD *)v18 + 1);
  int v21 = a3 - *((_DWORD *)v18 + 2);
  unint64_t v22 = *v18;
  uint64_t v23 = v22 >> 3;
  int v24 = (_WORD *)(*((void *)v18 + 11) + 2 * (((uint64_t)v20 >> 3) + (int)(v22 >> 3) * (uint64_t)(v21 >> 3)));
  uint64_t v25 = *((void *)v18 + 12) + 16 * (((uint64_t)v20 >> 2) + (int)(v22 >> 2) * (uint64_t)(v21 >> 2));
  int v26 = *v24 & 0x80;
  if (a8 < 4)
  {
    int v34 = *v24 & 0x80;
  }
  else
  {
    uint64_t v27 = 0;
    LODWORD(v28) = (int)a7 >> 2;
    if ((int)a7 >> 2 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v28;
    }
    uint64_t v29 = 16 * (v22 >> 2);
    int v30 = (void *)v25;
    do
    {
      uint64_t v31 = v30;
      uint64_t v32 = v28;
      if ((int)a7 >= 4)
      {
        do
        {
          uint64_t v33 = *(void *)v25;
          *(void *)((char *)v31 + 6) = *(void *)(v25 + 6);
          *uint64_t v31 = v33;
          v31 += 2;
          --v32;
        }
        while (v32);
      }
      ++v27;
      int v30 = (void *)((char *)v30 + v29);
    }
    while (v27 != a8 >> 2);
    int v19 = *((_DWORD *)*a5 + 3);
    int v34 = *v24 & 0x80;
    uint64_t v23 = (unint64_t)**a5 >> 3;
  }
  sub_1D0D0BFA0((void *)a1, v24, a4, 0, v34 != 0, v23, v19);
  if (a10)
  {
    uint64_t v35 = (unsigned __int8 *)*((void *)*a5 + 17);
    uint64_t v36 = (int)a2 - (uint64_t)*((int *)*a5 + 1);
    uint64_t v37 = (int)a3 - (uint64_t)*((int *)*a5 + 2);
    sub_1D0D57784(*(void *)(a1 + 14840), (unsigned int *)v25, a2, a3, a7, a7, *v35, **((void **)v35 + 7) + (*((void *)v35 + 8) + v36 + *v35 * v37) * *(int *)(*((void *)v35 + 7) + 16), 2 * v35[1], **((void **)v35 + 9)+ (*((void *)v35 + 10) + v36 + 2 * v35[1] * (uint64_t)((int)v37 >> 1)) * *(int *)(*((void *)v35 + 9) + 16));
  }
  uint64_t v38 = *a5;
  *((_DWORD *)v38 + 56) = 0;
  *((void *)v38 + 25) = 0;
  *((void *)v38 + 26) = 0;
  *((void *)v38 + 27) = -1;
  *((_WORD *)v38 + 114) = 0;
  if (!*(unsigned char *)(a1 + 29745))
  {
    int v51 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = -1;
    __int16 v52 = 2;
    sub_1D0D185B8(a1, a2, a3, a4, *a5, (uint64_t)&v48);
  }
  int v51 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = -1;
  __int16 v52 = 0;
  sub_1D0D1507C(a1, a2, a3, a4, *a5, (uint64_t)(*a5 + 200), (uint64_t)&v48, 0, 0);
  sub_1D0D182CC(a1, a2, a3, a4, (uint64_t)*a5);
  if (a11) {
    *a11 = (*(_WORD *)(*((void *)*a5 + 11)
  }
                     + 2
                     * (((uint64_t)((int)a2 - *((_DWORD *)*a5 + 1)) >> 3)
                      + ((unint64_t)**a5 >> 3) * (((int)a3 - *((_DWORD *)*a5 + 2)) >> 3))) & 0x80) != 0;
  if (!a12 || !v26) {
    goto LABEL_21;
  }
  unint64_t v39 = *((void *)*a5 + 25);
  if (v39 < *a12)
  {
    *a12 = v39;
LABEL_21:
    char v47 = 0;
    (*(void (**)(void))(**(void **)(a1 + 944) + 88))(*(void *)(a1 + 944));
    sub_1D0D1076C(a1, a2, a3, *a5, 1, 0, *(unsigned char *)(a1 + 29745), 1, 0);
    uint64_t v40 = *a5;
    *((_DWORD *)v40 + 4) = *((_DWORD *)*a5 + 5);
    sub_1D0D157FC(a1, a2, a3, a4, a9, (int *)v40 + 4, &v47, v41);
    int v42 = (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 80))(*(void *)(a1 + 944));
    uint64_t v43 = *a5;
    unsigned int v44 = *((_DWORD *)*a5 + 56) + v42;
    *((_DWORD *)v43 + 56) = v44;
    *((void *)v43 + 27) = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)v43 + 114) + 1152) * (unint64_t)v44) >> (8 * (*((_WORD *)v43 + 114) == 0)))
                          + *((void *)v43 + 25);
    (*(void (**)(void))(**(void **)(a1 + 944) + 96))(*(void *)(a1 + 944));
    return sub_1D0D18C68(a1, (void ***)a5, a6, 1u);
  }
  return 0;
}

BOOL sub_1D0D18C68(uint64_t a1, void ***a2, void ***a3, unsigned int a4)
{
  int v6 = *a2;
  int v7 = (*a2)[4 * a4 + 23];
  uint64_t v8 = (*a3)[4 * a4 + 23];
  if (v7 < v8)
  {
    *a2 = *a3;
    *a3 = v6;
    int v6 = *a2;
  }
  BOOL v9 = v7 < v8;
  int v10 = (__int16 *)v6[11];
  __int16 v11 = *v10;
  bzero(v10, 2 * ((unint64_t)*(unsigned __int8 *)v6 >> 3) * ((unint64_t)*(unsigned __int8 *)v6 >> 3));
  *(_WORD *)v6[11] = *(_WORD *)v6[11] & 0xFFFC | v11 & 3;
  *(_WORD *)v6[11] = v11 & 0xFE00 | *(_WORD *)v6[11] & 0x1FF;
  sub_1D0D0BE7C(*a2, *(unsigned __int8 *)(*(void *)(a1 + 14840) + 58) < 2u);
  unint64_t v12 = *a2;
  *((_DWORD *)v12 + 48) = 0;
  v12[21] = 0;
  v12[22] = 0;
  v12[23] = (void *)-1;
  *((_WORD *)v12 + 98) = 2;
  int v13 = *a2;
  *((_DWORD *)v13 + 56) = 0;
  v13[25] = 0;
  v13[26] = 0;
  v13[27] = (void *)-1;
  *((_WORD *)v13 + 114) = 0;
  return v9;
}

uint64_t sub_1D0D18D5C(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, unsigned int a7, char a8)
{
  unsigned int v9 = a7;
  __int16 v11 = a5;
  int v12 = a4;
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v15 = result;
  int v16 = *(unsigned __int8 *)(*(void *)(result + 14848) + 2113);
  uint64_t v17 = a4;
  uint64_t v105 = (_DWORD *)(result + 4 * a4 + 27648);
  if ((*v105 & 0x101) != 0)
  {
    uint64_t v102 = a4;
    LOBYTE(v18) = 1;
    uint64_t result = sub_1D0D1C78C(result, a2, a3, a4, a5, a6, 0, a7, 1u);
    uint64_t v24 = *(void *)(v15 + 968);
    if (*(unsigned char *)(v24 + 234) && (*(unsigned char *)(v24 + 237) & 1) != 0) {
      int v18 = (*((unsigned __int8 *)(*a6)[12]
    }
             + 16 * ((uint64_t)((int)a2 - *((_DWORD *)*a6 + 1)) >> 2)
             + 16 * ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * (((int)a3 - *((_DWORD *)*a6 + 2)) >> 2)
             + 11) >> 6) & 1;
    *(unsigned char *)(v15 + v102 + 205) = v18;
    __int16 v11 = a5;
    uint64_t v13 = a3;
    uint64_t v14 = a2;
    unsigned int v9 = a7;
    int v12 = a4;
    uint64_t v17 = v102;
  }
  int v25 = v16 - v12;
  if (a8) {
    goto LABEL_7;
  }
  uint64_t v27 = *(void *)(v15 + 968);
  BOOL v29 = (*(unsigned char *)(v27 + 529) & 6) == 0;
  int v28 = *(unsigned __int8 *)(v27 + 528);
  BOOL v29 = !v29
     && *((unsigned char *)(*a6)[12]
        + 16 * ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 2)
        + 16 * ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 2)
        + 10) == 2;
  BOOL v30 = !v29;
  if (!v28) {
    goto LABEL_7;
  }
  int v31 = *(_DWORD *)(v15 + 4 * v17 + 27668);
  if ((v31 & 6) == 6 || !v30) {
    goto LABEL_7;
  }
  if ((v31 & 2) == 0)
  {
    uint64_t v32 = v105;
    BOOL v33 = (*(unsigned char *)v105 & 2) == 0;
    if ((v31 & 4) != 0) {
      goto LABEL_22;
    }
LABEL_37:
    BOOL v34 = (*v32 & 4) == 0;
    if (!v33) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  BOOL v33 = 0;
  uint64_t v32 = v105;
  if ((v31 & 4) == 0) {
    goto LABEL_37;
  }
LABEL_22:
  BOOL v34 = 0;
  if (v33) {
LABEL_38:
  }
    *(_DWORD *)v32 |= 2u;
LABEL_39:
  if (v34) {
    *(_DWORD *)v32 |= 4u;
  }
  uint64_t result = sub_1D0CE07F0(v15 + 1592, v14, v13, 1 << v25);
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v38 = result;
  uint64_t v39 = *(void *)(result + 8);
  if (!v39) {
    goto LABEL_7;
  }
  uint64_t v103 = *(void *)(result + 16);
  if (!v103) {
    goto LABEL_7;
  }
  uint64_t v99 = *(void *)(result + 24);
  if (!v99) {
    goto LABEL_7;
  }
  uint64_t v94 = *(void *)(result + 32);
  if (!v94) {
    goto LABEL_7;
  }
  int v97 = (unsigned __int8 *)(v39 + 40);
  char v89 = (unsigned __int16 *)((char *)(*a6)[12]
                           + 16 * ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 2)
                           + 16
                           * ((unint64_t)*(unsigned __int8 *)*a6 >> 2)
                           * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 2));
  uint64_t v92 = *(void *)(result + 8);
  if (sub_1D0CE0230((unsigned __int8 *)(v39 + 40), v89))
  {
    if (sub_1D0CE0230((unsigned __int8 *)(v103 + 40), v89))
    {
      if (sub_1D0CE0230((unsigned __int8 *)(v99 + 40), v89))
      {
        uint64_t result = sub_1D0CE0230((unsigned __int8 *)(v94 + 40), v89);
        if (result)
        {
LABEL_67:
          int v42 = v105;
          *v105 &= ~2u;
          int v43 = -5;
LABEL_104:
          *v42 &= v43;
          goto LABEL_7;
        }
      }
    }
  }
  uint64_t v90 = (unsigned __int8 *)(v103 + 40);
  int v87 = sub_1D0CE0170(v97, (unsigned __int8 *)(v103 + 40), 1u);
  if (v87)
  {
    if (sub_1D0CE0170((unsigned __int8 *)(v99 + 40), (unsigned __int8 *)(v94 + 40), 1u))
    {
      uint64_t result = sub_1D0CE0170(v97, (unsigned __int8 *)(v99 + 40), 1u);
      if (!result)
      {
        int v43 = -5;
        goto LABEL_103;
      }
    }
  }
  int v85 = (unsigned __int8 *)(v99 + 40);
  if (sub_1D0CE0170(v97, (unsigned __int8 *)(v99 + 40), 1u))
  {
    uint64_t result = sub_1D0CE0170(v90, (unsigned __int8 *)(v94 + 40), 1u);
    if ((v87 | result ^ 1) != 1)
    {
      int v43 = -3;
LABEL_103:
      int v42 = v105;
      goto LABEL_104;
    }
  }
  uint64_t result = sub_1D0CE0170(v97, v90, 3u);
  uint64_t v40 = v92;
  if ((result & 1) == 0)
  {
    uint64_t result = sub_1D0CE0170(v97, v85, 3u);
    uint64_t v40 = v92;
    if ((result & 1) == 0)
    {
      __n128 v41 = v97;
      int v98 = (unsigned __int8 *)(v94 + 40);
      uint64_t result = sub_1D0CE0170(v41, (unsigned __int8 *)(v94 + 40), 3u);
      uint64_t v40 = v92;
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1D0CE0170(v90, v85, 3u);
        uint64_t v40 = v92;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1D0CE0170(v90, v98, 3u);
          uint64_t v40 = v92;
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1D0CE0170(v85, v98, 3u);
            uint64_t v40 = v92;
            if (!result) {
              goto LABEL_67;
            }
          }
        }
      }
    }
  }
  if (*(void *)(v38 + 112) > **(void **)(v38 + 88)
                              + *(unsigned __int16 *)(v15 + 1154) * (unint64_t)(*(_DWORD *)(v38 + 120) >> 2)
    || (*(unsigned char *)(v40 + 136) || *(unsigned char *)(v103 + 136) || *(unsigned char *)(v99 + 136) || *(unsigned char *)(v94 + 136))
    && *(unsigned char *)(v38 + 136))
  {
    goto LABEL_67;
  }
LABEL_7:
  int v26 = *v105;
  if ((*v105 & 2) == 0)
  {
    if ((v26 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_28:
    if (*(unsigned char *)(v15 + 197)) {
      unsigned __int8 v36 = *(unsigned char *)(v15 + v17 + 27685) != 0;
    }
    else {
      unsigned __int8 v36 = 1;
    }
    uint64_t result = sub_1D0D1C78C(v15, v14, v13, v12, v11, a6, 2, v9, v36);
    if ((*v105 & 8) == 0) {
      goto LABEL_70;
    }
    goto LABEL_32;
  }
  if (*(unsigned char *)(v15 + 197)) {
    unsigned __int8 v35 = *(unsigned char *)(v15 + v17 + 27685) != 0;
  }
  else {
    unsigned __int8 v35 = 1;
  }
  uint64_t result = sub_1D0D1C78C(v15, v14, v13, v12, v11, a6, 1, v9, v35);
  int v26 = *v105;
  if ((*v105 & 4) != 0) {
    goto LABEL_28;
  }
LABEL_9:
  if ((v26 & 8) == 0) {
    goto LABEL_70;
  }
LABEL_32:
  if (v25 >= 4 && v25 == *(unsigned __int8 *)(*(void *)(v15 + 14848) + 2112))
  {
    if (*(unsigned char *)(v15 + 197)) {
      unsigned __int8 v37 = *(unsigned char *)(v15 + v17 + 27685) != 0;
    }
    else {
      unsigned __int8 v37 = 1;
    }
    uint64_t result = sub_1D0D1C78C(v15, v14, v13, v12, v11, a6, 3, v9, v37);
  }
LABEL_70:
  if (!*(unsigned char *)(v15 + 197)) {
    return result;
  }
  if (*(unsigned char *)(v15 + v17 + 27685)) {
    return result;
  }
  unsigned int v44 = *a6;
  if ((*((_WORD *)(*a6)[11]
        + ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 3)
        + ((unint64_t)*(unsigned __int8 *)*a6 >> 3) * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 3)) & 0x70) == 0
    || *(unsigned char *)(v15 + v17 + 27664))
  {
    return result;
  }
  int v100 = (unsigned char *)(v15 + v17 + 27664);
  unsigned int v106 = v9;
  *((_DWORD *)v44 + 48) = 0;
  v44[21] = 0;
  v44[22] = 0;
  v44[23] = (void *)-1;
  *((_WORD *)v44 + 98) = 2;
  int v45 = (*((unsigned __int16 *)(*a6)[11]
         + ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 3)
         + ((unint64_t)*(unsigned __int8 *)*a6 >> 3) * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 3)) >> 4) & 7;
  int v46 = 1 << (*(unsigned char *)(*(void *)(v15 + 14848) + 2113) - v12);
  unsigned int v95 = v46 >> 1;
  char v47 = *v11;
  int v88 = v13 - *((_DWORD *)*v11 + 2);
  unint64_t v84 = **v11;
  int v91 = v14 - *((_DWORD *)*v11 + 1);
  uint64_t v86 = *((void *)*v11 + 12);
  unsigned int v93 = (_WORD *)(*((void *)*v11 + 11) + 2 * (((uint64_t)v91 >> 3) + (int)(v84 >> 3) * (uint64_t)(v88 >> 3)));
  sub_1D0D0BFA0((void *)v15, v93, v12, (*((unsigned __int16 *)(*a6)[11]+ ((uint64_t)((int)v14 - *((_DWORD *)*a6 + 1)) >> 3)+ ((unint64_t)*(unsigned __int8 *)*a6 >> 3) * (((int)v13 - *((_DWORD *)*a6 + 2)) >> 3)) >> 4) & 7, 0, v84 >> 3, *((_DWORD *)*v11 + 3));
  *((void *)v47 + 21) = 0;
  *((_DWORD *)v47 + 48) = 0;
  *((void *)v47 + 22) = 0;
  *((void *)v47 + 23) = -1;
  uint64_t v48 = (v14 + (v46 >> 1));
  unsigned int v101 = v13;
  unsigned int v104 = v46;
  unsigned int v49 = v13 + (v46 >> 1);
  *((_WORD *)v47 + 98) = 2;
  unsigned int v96 = v14;
  switch(v45)
  {
    case 3:
      uint64_t v58 = v13;
      uint64_t v59 = v48;
      unsigned int v82 = v49;
      unsigned int v83 = v48;
      uint64_t v50 = v95;
      sub_1D0D1D1D0(v15, v96, v58, v12, v11, a6, v95, v95, 3, v106, (uint64_t)(v47 + 168), 1, 0);
      sub_1D0D1D1D0(v15, v59, v58, v12, v11, a6, v50, v50, 3, v106, (uint64_t)(v47 + 168), 1, 0);
      sub_1D0D1D1D0(v15, v96, v82, v12, v11, a6, v50, v50, 3, v106, (uint64_t)(v47 + 168), 1, 0);
      uint64_t v80 = (uint64_t)(v47 + 168);
      HIDWORD(v79) = v106;
      LODWORD(v79) = 3;
      uint64_t v51 = v15;
      uint64_t v52 = v83;
      uint64_t v53 = v82;
      int v54 = v12;
      char v55 = v11;
      uint64_t v56 = a6;
      uint64_t v57 = v95;
      goto LABEL_80;
    case 2:
      sub_1D0D1D1D0(v15, v14, v13, v12, v11, a6, v95, v46, 2, v106, (uint64_t)(v47 + 168), 1, 0);
      uint64_t v80 = (uint64_t)(v47 + 168);
      HIDWORD(v79) = v106;
      LODWORD(v79) = 2;
      uint64_t v51 = v15;
      uint64_t v52 = (v14 + (v46 >> 1));
      uint64_t v53 = v13;
      int v54 = v12;
      char v55 = v11;
      uint64_t v56 = a6;
      uint64_t v57 = v95;
      int v60 = v46;
      goto LABEL_82;
    case 1:
      unsigned int v81 = v13 + (v46 >> 1);
      LODWORD(v50) = v46 >> 1;
      sub_1D0D1D1D0(v15, v14, v13, v12, v11, a6, v104, v95, 1, v106, (uint64_t)(v47 + 168), 1, 0);
      uint64_t v80 = (uint64_t)(v47 + 168);
      LODWORD(v79) = 1;
      HIDWORD(v79) = v106;
      uint64_t v51 = v15;
      uint64_t v52 = v14;
      uint64_t v53 = v81;
      int v54 = v12;
      char v55 = v11;
      uint64_t v56 = a6;
      uint64_t v57 = v104;
LABEL_80:
      int v60 = v50;
LABEL_82:
      sub_1D0D1D1D0(v51, v52, v53, v54, v55, v56, v57, v60, v79, HIDWORD(v79), v80, 1, 0);
      break;
  }
  if (*(unsigned char *)(v15 + 196))
  {
    unsigned int v61 = v101;
    if (v45)
    {
      int v62 = v47 + 200;
      *((_DWORD *)v47 + 56) = 0;
      *((void *)v47 + 25) = 0;
      *((void *)v47 + 26) = 0;
      *((void *)v47 + 27) = -1;
      *((_WORD *)v47 + 114) = 2;
      sub_1D0D125BC(v15, v96, v101, v12, *v11, 1, *(unsigned char *)(v15 + 8) == 0, 0, (unsigned int *)v47 + 50);
      if (!*(unsigned char *)(v15 + 29745))
      {
        *((_DWORD *)v47 + 56) = 0;
        *int v62 = 0;
        *((void *)v47 + 26) = 0;
        *((void *)v47 + 27) = -1;
        *((_WORD *)v47 + 114) = 2;
        sub_1D0D185B8(v15, v96, v101, v12, *v11, (uint64_t)(v47 + 200));
      }
      int v109 = 0;
      v108[0] = 0;
      v108[1] = 0;
      v108[2] = -1;
      __int16 v110 = 0;
      *((_DWORD *)v47 + 56) = 0;
      *int v62 = 0;
      *((void *)v47 + 26) = 0;
      *((void *)v47 + 27) = -1;
      *((_WORD *)v47 + 114) = 0;
      sub_1D0D1507C(v15, v96, v101, v12, *v11, (uint64_t)(v47 + 200), (uint64_t)v108, 0, 0);
      char v107 = 0;
      (*(void (**)(void))(**(void **)(v15 + 944) + 88))(*(void *)(v15 + 944));
      sub_1D0D1076C(v15, v96, v101, *v11, 1, 0, *(unsigned char *)(v15 + 29745), 1, 0);
      char v63 = *v11;
      *((_DWORD *)v63 + 4) = *((_DWORD *)*v11 + 5);
      sub_1D0D157FC(v15, v96, v101, v12, v106, (int *)v63 + 4, &v107, v64);
      *((_DWORD *)v47 + 56) += (*(uint64_t (**)(void))(**(void **)(v15 + 944) + 80))(*(void *)(v15 + 944));
      (*(void (**)(void))(**(void **)(v15 + 944) + 96))(*(void *)(v15 + 944));
      *((void *)v47 + 27) = ((*(unsigned __int16 *)(v15 + 2 * *((__int16 *)v47 + 114) + 1152)
                              * (unint64_t)*((unsigned int *)v47 + 56)) >> (8 * (*((_WORD *)v47 + 114) == 0)))
                            + *((void *)v47 + 25);
      unsigned int v65 = *(unsigned __int8 *)(v15 + 196);
    }
    else
    {
      unsigned int v65 = 1;
    }
  }
  else
  {
    unsigned int v65 = 0;
    int v66 = *(unsigned __int8 *)(*(void *)(v15 + 14848) + 269);
    uint64_t v67 = *(unsigned __int8 *)(v86 + 16 * (((uint64_t)v91 >> 2) + (int)(v84 >> 2) * (uint64_t)(v88 >> 2)) + 10) - 1;
    int v68 = *((_DWORD *)v47 + 48) + byte_1D0DA5D88[3 * *(unsigned __int8 *)(*(void *)(v15 + 14840) + 58) + v67];
    *((_DWORD *)v47 + 48) = v68;
    int v69 = byte_1D0DA5D91[12 * (v66 == v12) + 4 * v67 + (((unint64_t)(unsigned __int16)*v93 >> 4) & 7)];
    if (v66 <= v12) {
      int v70 = v68;
    }
    else {
      int v70 = v68 + 1;
    }
    unsigned int v71 = v70 + v69;
    *((_DWORD *)v47 + 48) = v71;
    *((void *)v47 + 23) = ((*(unsigned __int16 *)(v15 + 2 * *((__int16 *)v47 + 98) + 1152) * (unint64_t)v71) >> (8 * (*((_WORD *)v47 + 98) == 0)))
                          + *((void *)v47 + 21);
    unsigned int v61 = v101;
  }
  uint64_t result = sub_1D0D18C68(v15, (void ***)v11, a6, v65);
  if (result && !*(unsigned char *)(v15 + 196) && (int)v104 >= 8)
  {
    uint64_t v72 = 0;
    unint64_t v73 = (unint64_t)*(unsigned __int8 *)*a6 >> 3;
    long long v74 = (char *)(*a6)[11]
        + 2 * ((uint64_t)(int)(v96 - *((_DWORD *)*a6 + 1)) >> 3)
        + 2 * (int)v73 * (uint64_t)((int)(v61 - *((_DWORD *)*a6 + 2)) >> 3);
    uint64_t v75 = 2 * v73;
    uint64_t v76 = v74;
    do
    {
      int v77 = v76;
      uint64_t v78 = v104 >> 3;
      do
      {
        *v77++ = *v74;
        --v78;
      }
      while (v78);
      ++v72;
      uint64_t v76 = (_WORD *)((char *)v76 + v75);
    }
    while (v72 != v104 >> 3);
  }
  *int v100 = 1;
  return result;
}

BOOL sub_1D0D19A0C(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5)
{
  int v5 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117) >> a4;
  if ((a5 & 0xF0) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 14840);
    uint64_t v7 = *(void *)(v6 + 16);
    char v8 = *(unsigned char *)(v7 + 2113);
    if ((*(unsigned char *)(*(void *)(v6 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v7 + 2117) - 1) & (a2 - v5)) >> (v8 - a4))
                    + (((*(unsigned __int8 *)(v7 + 2117) - 1) & a3) >> (v8 - a4)) * byte_1D0DA530C[a4]
                    + *(_DWORD *)(v6 + 5408) * (((a2 - v5) >> v8) + (a3 >> v8) * *(_DWORD *)(v7 + 2120))
                    + byte_1D0DA5308[a4])
                   + 26) & 0x98) == 0x88)
      return 1;
  }
  if ((a5 & 0x1E00) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 14840);
    uint64_t v10 = *(void *)(v9 + 16);
    char v11 = *(unsigned char *)(v10 + 2113);
    if ((*(unsigned char *)(*(void *)(v9 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v10 + 2117) - 1) & a2) >> (v11 - a4))
                    + (((*(unsigned __int8 *)(v10 + 2117) - 1) & (a3 - v5)) >> (v11 - a4)) * byte_1D0DA530C[a4]
                    + *(_DWORD *)(v9 + 5408) * ((a2 >> v11) + ((a3 - v5) >> v11) * *(_DWORD *)(v10 + 2120))
                    + byte_1D0DA5308[a4])
                   + 26) & 0x98) == 0x88)
      return 1;
  }
  if ((a5 & 0x1E000) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 14840);
    uint64_t v13 = *(void *)(v12 + 16);
    char v14 = *(unsigned char *)(v13 + 2113);
    if ((*(unsigned char *)(*(void *)(v12 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v13 + 2117) - 1) & (v5 + a2)) >> (v14 - a4))
                    + (((*(unsigned __int8 *)(v13 + 2117) - 1) & (a3 - v5)) >> (v14 - a4)) * byte_1D0DA530C[a4]
                    + *(_DWORD *)(v12 + 5408) * (((v5 + a2) >> v14) + ((a3 - v5) >> v14) * *(_DWORD *)(v13 + 2120))
                    + byte_1D0DA5308[a4])
                   + 26) & 0x98) == 0x88)
      return 1;
  }
  if ((a5 & 0x100) != 0)
  {
    uint64_t v15 = *(void *)(a1 + 14840);
    uint64_t v16 = *(void *)(v15 + 16);
    char v17 = *(unsigned char *)(v16 + 2113);
    if ((*(unsigned char *)(*(void *)(v15 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v16 + 2117) - 1) & (a2 - v5)) >> (v17 - a4))
                    + (((*(unsigned __int8 *)(v16 + 2117) - 1) & (a3 - v5)) >> (v17 - a4)) * byte_1D0DA530C[a4]
                    + *(_DWORD *)(v15 + 5408) * (((a2 - v5) >> v17) + ((a3 - v5) >> v17) * *(_DWORD *)(v16 + 2120))
                    + byte_1D0DA5308[a4])
                   + 26) & 0x98) == 0x88)
      return 1;
  }
  if ((a5 & 0xF) == 0) {
    return 0;
  }
  uint64_t v19 = *(void *)(a1 + 14840);
  uint64_t v20 = *(void *)(v19 + 16);
  char v21 = *(unsigned char *)(v20 + 2113);
  return (*(unsigned char *)(*(void *)(v19 + 5400)
                   + 32
                   * ((((*(unsigned __int8 *)(v20 + 2117) - 1) & (a2 - v5)) >> (v21 - a4))
                    + (((*(unsigned __int8 *)(v20 + 2117) - 1) & (v5 + a3)) >> (v21 - a4)) * byte_1D0DA530C[a4]
                    + *(_DWORD *)(v19 + 5408) * (((a2 - v5) >> v21) + ((v5 + a3) >> v21) * *(_DWORD *)(v20 + 2120))
                    + byte_1D0DA5308[a4])
                   + 26) & 0x98) == 136;
}

BOOL sub_1D0D19C9C(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v12 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117) >> a4;
  if (((a6 & 0xF0) == 0 || (BOOL result = sub_1D0D1C4D4(a1, a2, a3, a4, a2 - v12, a3, a5)))
    && ((a6 & 0x1E00) == 0 || (BOOL result = sub_1D0D1C4D4(a1, a2, a3, a4, a2, a3 - v12, a5)))
    && ((a6 & 0x1E000) == 0 || (BOOL result = sub_1D0D1C4D4(a1, a2, a3, a4, v12 + a2, a3 - v12, a5)))
    && ((a6 & 0x100) == 0 || (BOOL result = sub_1D0D1C4D4(a1, a2, a3, a4, a2 - v12, a3 - v12, a5))))
  {
    if ((a6 & 0xF) == 0) {
      return 1;
    }
    BOOL result = sub_1D0D1C4D4(a1, a2, a3, a4, a2 - v12, v12 + a3, a5);
    if (result) {
      return 1;
    }
  }
  return result;
}

void sub_1D0D19DD0(unsigned __int8 *a1, int a2, int a3, int a4, unsigned __int8 **a5, void ***a6, unsigned int a7, uint64_t a8)
{
  uint64_t v8 = a8;
  int v11 = a2;
  uint64_t v431 = *MEMORY[0x1E4F143B8];
  int v353 = (unsigned int *)(a1 + 24432);
  unint64_t v12 = (unint64_t)**a5 >> 3;
  uint64_t v13 = (_WORD *)(*((void *)*a5 + 11)
                + 2
                * (((uint64_t)(a2 - *((_DWORD *)*a5 + 1)) >> 3) + (int)v12 * (uint64_t)((a3 - *((_DWORD *)*a5 + 2)) >> 3)));
  sub_1D0D0BFA0(a1, v13, a4, a8, 0, v12, *((_DWORD *)*a5 + 3));
  signed int v343 = a3;
  unint64_t v14 = *((void *)*a5 + 12)
      + 16
      * (((uint64_t)(v11 - *((_DWORD *)*a5 + 1)) >> 2)
       + ((unint64_t)**a5 >> 2) * ((a3 - *((_DWORD *)*a5 + 2)) >> 2));
  int v15 = 1;
  *(unsigned char *)(v14 + 10) = 1;
  *(unsigned char *)(v14 + 11) &= ~0x40u;
  unint64_t v16 = **a5;
  if (v16 >= 4)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 >> 2;
    uint64_t v19 = (void *)v14;
    do
    {
      uint64_t v20 = v19;
      unint64_t v21 = v18;
      do
      {
        uint64_t v22 = *(void *)v14;
        *(void *)((char *)v20 + 6) = *(void *)(v14 + 6);
        *uint64_t v20 = v22;
        v20 += 2;
        --v21;
      }
      while (v21);
      ++v17;
      v19 += 2 * v18;
    }
    while (v17 != v18);
    int v15 = *(unsigned __int8 *)(v14 + 10);
  }
  sub_1D0D3CAE0((uint64_t)(a1 + 14912), (uint64_t)a1, v11, a3, a4, v15, ((unsigned __int16)*v13 >> 4) & 7);
  if (a1[198]) {
    int v23 = (*(_DWORD *)&a1[4 * a4 + 27648] >> 12) & 1;
  }
  else {
    LOBYTE(v23) = 0;
  }
  uint64_t v24 = 0;
  *((unsigned char *)v353 + 48) = v23;
  int v25 = *a5;
  *((_DWORD *)v25 + 48) = 0;
  *((void *)v25 + 21) = 0;
  *((void *)v25 + 22) = 0;
  *((void *)v25 + 23) = -1;
  *((_WORD *)v25 + 98) = 2;
  int v26 = *a5;
  *((_DWORD *)v26 + 56) = 0;
  *((void *)v26 + 25) = 0;
  *((void *)v26 + 26) = 0;
  *((void *)v26 + 27) = -1;
  *((_WORD *)v26 + 114) = 0;
  uint64_t v27 = *((void *)a1 + 1856);
  LODWORD(v26) = byte_1D0DA5D91[12 * (*(unsigned __int8 *)(v27 + 269) == a4) + v8]
               + byte_1D0DA5D88[3 * *(unsigned __int8 *)(*((void *)a1 + 1855) + 58)];
  int v28 = *a5;
  *((_DWORD *)v28 + 48) = *((_DWORD *)*a5 + 48) + v26;
  *((_DWORD *)v28 + 56) += v26 << 8;
  int v348 = *a6;
  char v29 = 1;
  uint64_t v385 = *(unsigned __int8 *)(v27 + 2113) - a4 - (v8 == 3);
  int v340 = *(unsigned __int8 *)(*((void *)a1 + 121) + 497);
  int v327 = &a1[8 * a4 + 24712];
  *((void *)v28 + 18) = *(void *)v327;
  long long v415 = 0u;
  long long v416 = 0u;
  long long v413 = 0u;
  long long v414 = 0u;
  int v412 = 0;
  unint64_t v411 = 0;
  *((void *)&v410 + 1) = -1;
  *(void *)&long long v410 = -1;
  uint64_t v409 = 0;
  uint64_t v408 = 0;
  uint64_t v407 = 0;
  *(_DWORD *)&v406[8] = 0;
  int v405 = v11;
  int v333 = (1 << v385) + v11;
  *(void *)v406 = v333;
  unsigned int v30 = a3;
  unsigned int v386 = 1 << v385;
  v404[0] = a3;
  int v332 = (1 << v385) + a3;
  v404[1] = v332;
  int v31 = (uint64_t *)(v28 + 128);
  uint64_t v32 = a1 + 24536;
  unsigned int v33 = v353[24];
  do
  {
    int v34 = v404[v24];
    BOOL v35 = v34 < a3;
    int v36 = (v34 - a3) >> 2;
    if (v35) {
      int v36 = -1;
    }
    if (v35) {
      unsigned __int8 v37 = (uint64_t *)(v28 + 128);
    }
    else {
      unsigned __int8 v37 = (uint64_t *)(v28 + 120);
    }
    uint64_t v38 = *v37;
    uint64_t v39 = v38 + 16 * v36;
    *(&v408 + v24) = v39;
    if (!v38 || *(unsigned char *)(v39 + 10) != 1) {
      *(&v408 + v24) = (uint64_t)v32;
    }
    if (v33 == a3)
    {
      uint64_t v40 = (uint64_t *)&v406[8 * v24 + 4];
LABEL_27:
      *uint64_t v40 = (uint64_t)v32;
      goto LABEL_28;
    }
    int v41 = *(_DWORD *)&v406[4 * v24 - 4];
    BOOL v35 = v41 < v11;
    int v42 = (v41 - v11) >> 2;
    if (v35) {
      int v42 = -1;
    }
    uint64_t v43 = *v31;
    uint64_t v44 = *v31 + 16 * v42;
    uint64_t v40 = (uint64_t *)&v406[8 * v24 + 4];
    *uint64_t v40 = v44;
    if (!v43 || *(unsigned char *)(v44 + 10) != 1) {
      goto LABEL_27;
    }
LABEL_28:
    char v45 = (v8 == 3) & v29;
    uint64_t v24 = 1;
    char v29 = 0;
  }
  while ((v45 & 1) != 0);
  *(void *)&long long v413 = v408;
  *((void *)&v413 + 1) = *(void *)&v406[4];
  int64x2_t v326 = a5;
  if (v8 == 3)
  {
    int v46 = *((_DWORD *)v28 + 1);
    int v47 = *((_DWORD *)v28 + 2);
    uint64_t v48 = *((void *)v28 + 12);
    int v49 = (a3 - v47) >> 2;
    unint64_t v50 = (unint64_t)*v28 >> 2;
    uint64_t v51 = (uint64_t)(v11 - v46) >> 2;
    *(void *)&long long v414 = v48 + 16 * (v51 + (int)v50 * (uint64_t)v49);
    *((void *)&v414 + 1) = v407;
    *(void *)&long long v415 = v409;
    *((void *)&v415 + 1) = v414;
    *(void *)&long long v416 = v48 + 16 * (v51 + (int)v50 * (uint64_t)((v332 - v47) >> 2));
    *((void *)&v416 + 1) = v48 + 16 * (((uint64_t)(v333 - v46) >> 2) + (int)v50 * (uint64_t)v49);
    uint64_t v52 = 4;
  }
  else
  {
    uint64_t v52 = 1;
  }
  uint64_t v335 = v52;
  uint64_t v53 = 0;
  char v344 = 0;
  BOOL v355 = v8 == 3;
  uint64_t v339 = (int)v385 - 2;
  int v338 = **(unsigned __int8 **)(*((void *)a1 + 1855) + 1568);
  uint64_t v341 = (v385 - 3);
  unsigned int v351 = v385 == 2;
  if (v385 == 2) {
    uint64_t v54 = 2;
  }
  else {
    uint64_t v54 = 8;
  }
  uint64_t v354 = v54;
  unsigned int v330 = v54 >> 1;
  uint64_t v337 = (uint64_t)(a1 + 14976);
  int v334 = v28 + 168;
  LODWORD(v54) = (int)v386 >> 2;
  if ((int)v386 >> 2 <= 1) {
    uint64_t v54 = 1;
  }
  else {
    uint64_t v54 = v54;
  }
  uint64_t v361 = v54;
  uint64_t v329 = a1 + 14978;
  unsigned int v350 = v8;
  uint64_t v380 = v28;
  int v336 = v11;
  do
  {
    if (v340)
    {
      unsigned int v55 = **((unsigned __int8 **)&v413 + 2 * v53);
      unsigned int v56 = **(unsigned __int8 **)((char *)&v413 + ((16 * v53) | 8));
      long long v410 = xmmword_1D0D7F4D0;
      if (v55) {
        unsigned int v57 = 0;
      }
      else {
        unsigned int v57 = v55;
      }
      if (v55 <= 1 || v8 != 3) {
        unsigned int v57 = v55;
      }
      if (v56) {
        unsigned int v58 = 0;
      }
      else {
        unsigned int v58 = v56;
      }
      if (v56 > 1 && v8 == 3) {
        unsigned int v59 = v58;
      }
      else {
        unsigned int v59 = v56;
      }
      if (v57 < 2)
      {
        uint64_t v60 = 2;
      }
      else
      {
        DWORD2(v410) = v57;
        uint64_t v60 = 3;
      }
      if (v59 >= 2 && v57 != v59) {
        *(_DWORD *)((unint64_t)&v410 | (4 * v60)) = v59;
      }
    }
    else
    {
      unsigned int v55 = **((unsigned __int8 **)&v413 + 2 * v53);
      unsigned int v56 = **(unsigned __int8 **)((char *)&v413 + ((16 * v53) | 8));
    }
    if (v55 == v56)
    {
      if (v56 < 2)
      {
        unint64_t v411 = 0x100000000;
        int v62 = 26;
        unsigned int v56 = 1;
      }
      else
      {
        unsigned int v56 = (((_BYTE)v55 + 29) & 0x1F) + 2;
        unint64_t v411 = __PAIR64__(v56, v55);
        int v62 = (((_BYTE)v55 - 1) & 0x1F) + 2;
      }
    }
    else
    {
      unint64_t v411 = __PAIR64__(v56, v55);
      if (v56 + v55 > 1) {
        int v63 = 1;
      }
      else {
        int v63 = 26;
      }
      if (v55) {
        BOOL v64 = v56 == 0;
      }
      else {
        BOOL v64 = 1;
      }
      if (v64) {
        int v62 = v63;
      }
      else {
        int v62 = 0;
      }
    }
    int v347 = v62;
    int v412 = v62;
    unsigned int v356 = a7;
    if (v8 == 3)
    {
      *((unsigned char *)v353 + 362) = 0;
      unsigned int v65 = v56;
      unsigned int v66 = sub_1D0D0CA2C(a7, v53, v333 < *((_DWORD *)a1 + 4), v332 < *((_DWORD *)a1 + 5));
      unsigned int v56 = v65;
      unsigned int v30 = v343;
      unsigned int v356 = v66;
    }
    uint64_t v67 = *((void *)a1 + 1855);
    if (v338 != 255)
    {
      if (*(unsigned char *)(v67 + 58) != 1) {
        goto LABEL_85;
      }
      uint64_t v68 = *(void *)(v67 + 1568);
      uint64_t v69 = *((void *)a1 + 1856);
      int v71 = *(_DWORD *)(v68 + 8);
      int v70 = *(_DWORD *)(v68 + 12);
      int v72 = *(_DWORD *)(v69 + 204);
      int v73 = *(_DWORD *)(v69 + 208);
      int v74 = *(unsigned __int8 *)(v69 + 2113) - a4;
      BOOL v75 = v71 < v72 && v70 < v73;
      if (!v75 || v74 < 4)
      {
LABEL_85:
        char v344 = 0;
      }
      else
      {
        long long v410 = xmmword_1D0D7F4D0;
        char v344 = 1;
      }
    }
    if (*(_DWORD *)(*(void *)(v67 + 4760) + 96) == 36)
    {
      long long v410 = xmmword_1D0D7F1E0;
      char v344 = 1;
    }
    uint64_t v78 = *((int *)v28 + 1);
    uint64_t v77 = *((int *)v28 + 2);
    unint64_t v79 = *v28;
    uint64_t v81 = *((void *)v28 + 11);
    uint64_t v80 = *((void *)v28 + 12);
    uint64_t v374 = v28[1];
    unsigned int v82 = (unsigned __int8 *)*((void *)v28 + 17);
    uint64_t v383 = *v82;
    unint64_t v84 = (uint64_t *)*((void *)v28 + 3);
    uint64_t v83 = *((void *)v28 + 4);
    uint64_t v85 = *((int *)v84 + 4);
    uint64_t v86 = *v84;
    int v87 = (uint64_t *)*((void *)v82 + 7);
    uint64_t v88 = *((void *)v82 + 8);
    uint64_t v89 = *((int *)v87 + 4);
    uint64_t v90 = *v87;
    int v91 = (unsigned char *)*((void *)a1 + 3049);
    if (v91[206] == 1) {
      uint64_t v92 = 4;
    }
    else {
      uint64_t v92 = 2;
    }
    uint64_t v373 = v92;
    uint64_t v93 = v91[497];
    uint64_t v94 = (unsigned __int8 *)*((void *)a1 + 3050);
    int v376 = *v94;
    if (*((unsigned char *)v353 + 48))
    {
      uint64_t v95 = *((void *)a1 + 3048);
      BOOL v364 = *((_DWORD *)a1 + 3728) == *(unsigned __int8 *)(v95 + 2112) && *((_DWORD *)a1 + 3730) == 0;
    }
    else
    {
      BOOL v364 = 0;
      uint64_t v95 = *((void *)a1 + 3048);
    }
    int v367 = (char)v91[501];
    char v401 = -1;
    int v400 = -1;
    unsigned int v349 = v56;
    if (*(unsigned char *)(v95 + 273)) {
      BOOL v346 = *((_DWORD *)v94 + 1) > 2;
    }
    else {
      BOOL v346 = 0;
    }
    uint64_t v96 = 0;
    uint64_t v365 = (v53 >> 1 << v385) + v30;
    uint64_t v366 = ((v53 & 1) << v385) + v11;
    uint64_t v97 = (int)v366 - v78;
    uint64_t v98 = (int)v365 - v77;
    int v352 = (_WORD *)(v81 + 2 * (((uint64_t)(int)v97 >> 3) + (int)(v79 >> 3) * (uint64_t)((int)v98 >> 3)));
    uint64_t v99 = (void *)(v80 + 16 * (((uint64_t)(int)v97 >> 2) + (int)(v79 >> 2) * (uint64_t)((int)v98 >> 2)));
    uint64_t v372 = v86 + (v97 + v374 * v98 + v83) * v85;
    uint64_t v381 = v90 + (v88 + v97 + v383 * v98) * v89;
    do
    {
      int v100 = &v430[v96];
      *((_DWORD *)v100 + 6) = 0;
      *(void *)int v100 = 0;
      *((void *)v100 + 1) = 0;
      *((void *)v100 + 2) = -1;
      v96 += 32;
      *((_WORD *)v100 + 14) = 2;
    }
    while (v96 != 160);
    int v418 = 0;
    v417[1] = 0;
    v417[0] = 0;
    v417[2] = -1;
    __int16 v419 = 2;
    int v423 = 0;
    uint64_t v420 = 0;
    uint64_t v421 = 0;
    uint64_t v422 = -1;
    __int16 v424 = 2;
    int v428 = 0;
    uint64_t v425 = 0;
    uint64_t v426 = 0;
    uint64_t v427 = -1;
    __int16 v429 = 2;
    if (!v94[24794])
    {
      unsigned int v101 = (void (*)(unsigned __int8 *, uint64_t, uint64_t, void, unsigned __int8 *, uint64_t, void, uint64_t, void))*((void *)v94 + 3721);
      uint64_t v102 = *((void *)v94 + 3722);
      uint64_t v103 = &v94[v102 >> 1];
      if (v102) {
        unsigned int v101 = *(void (**)(unsigned __int8 *, uint64_t, uint64_t, void, unsigned __int8 *, uint64_t, void, uint64_t, void))(*(void *)v103 + v101);
      }
      v101(v103, v366, v365, *v353, v28, v8, v356, v385, *((void *)v28 + 19));
    }
    if (v341 <= 2) {
      (*(void (**)(void, void))(*((void *)a1 + 3047) + 8 * v341 + 2312))(*((void *)v28 + 19), *((void *)v28 + 20));
    }
    if (*(unsigned char *)(*((void *)a1 + 3049) + 525)) {
      int v363 = 2 * ((*((unsigned int (**)(void))a1 + 3015))() < 0xA);
    }
    else {
      int v363 = 0;
    }
    uint64_t v345 = v53;
    if (v93)
    {
      uint64_t v104 = 0;
      unint64_t v105 = 0;
      while (1)
      {
        int v106 = *((_DWORD *)&v410 + v104);
        if (v106 < 0) {
          break;
        }
        v105 |= 1 << v106;
        if (++v104 == 4)
        {
          BOOL v369 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)a1 + 3051)
                                                                                              + 8 * v339
                                                                                              + 256);
          LODWORD(v104) = 4;
          goto LABEL_160;
        }
      }
      BOOL v369 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)a1 + 3051)
                                                                                          + 8 * v339
                                                                                          + 256);
      if (!v104)
      {
        int v368 = 0;
        LODWORD(v120) = 0;
        unint64_t v362 = 0;
        uint64_t v371 = 0;
        unint64_t v378 = -1;
        goto LABEL_192;
      }
LABEL_160:
      uint64_t v132 = 0;
      uint64_t v371 = 0;
      unint64_t v362 = 0;
      LODWORD(v120) = 0;
      int v368 = 0;
      unint64_t v378 = -1;
      uint64_t v358 = v104;
      do
      {
        int v133 = *((_DWORD *)&v410 + v132);
        uint64_t v134 = *((void *)a1 + 3047);
        if (v133 != 1 && *(unsigned char *)(v134 + 2816) == 0)
        {
          int v137 = 10 - v133;
          if (v133 >= 10) {
            int v137 = v133 - 10;
          }
          int v138 = 26 - v133;
          if (v133 >= 26) {
            int v138 = v133 - 26;
          }
          if (v137 >= v138) {
            int v137 = v138;
          }
          BOOL v136 = v137 > byte_1D0DA768A[(int)v385];
        }
        else
        {
          BOOL v136 = 0;
        }
        sub_1D0CA6124(v134 + 2280, *((unsigned int *)&v410 + v132), v385, *(void *)&v380[8 * v136 + 152], v383, v381);
        unsigned int v139 = v369(v386, v386, v372, v374, v381, v383);
        uint64_t v140 = 0;
        char v141 = v363;
        if (v363 == 0 || v133 != 0) {
          char v141 = 0;
        }
        unint64_t v142 = (unint64_t)v139 >> v141;
        uint64_t v143 = v371;
        if (v363 != 0 && v133 == 0) {
          uint64_t v143 = v139;
        }
        uint64_t v371 = v143;
        while (*((_DWORD *)&v411 + v140) != v133)
        {
          if (++v140 == 3)
          {
            unsigned int v144 = 6;
            goto LABEL_184;
          }
        }
        if (v140) {
          unsigned int v144 = 3;
        }
        else {
          unsigned int v144 = 2;
        }
LABEL_184:
        unint64_t v145 = v142 + *(unsigned __int16 *)(*((void *)a1 + 3051) + 2 * v373 + 152) * (unint64_t)v144;
        if (v376)
        {
          v397[0] = v142;
          v397[1] = 0;
          v397[2] = v145;
          unsigned int v398 = v144;
          __int16 v399 = 2;
          sub_1D0D3FD00((uint64_t)v397, v133, v367, (uint64_t)v430, &v400);
        }
        if (v145 < v378)
        {
          if (v364) {
            (*(void (**)(void, void, uint64_t, uint64_t))(*((void *)a1 + 3050) + 29752))(v386, v386, v383, v381);
          }
          int v368 = v133;
          LODWORD(v120) = v144;
          unint64_t v378 = v145;
          unint64_t v362 = v142;
        }
        ++v132;
      }
      while (v132 != v358);
      int v28 = v380;
LABEL_192:
      if (v344)
      {
        unsigned __int8 v146 = 0;
      }
      else
      {
        unsigned __int8 v146 = 0;
        unint64_t v147 = 2;
        int v148 = 2;
        do
        {
          if (((v105 >> v147) & 1) == 0)
          {
            uint64_t v149 = *((void *)a1 + 3047);
            if (*(unsigned char *)(v149 + 2816))
            {
              BOOL v150 = 0;
            }
            else
            {
              int v151 = 10 - v148;
              if (v147 >= 0xA) {
                int v151 = v147 - 10;
              }
              int v152 = 26 - v148;
              if (v147 >= 0x1A) {
                int v152 = v147 - 26;
              }
              if (v151 >= v152) {
                int v151 = v152;
              }
              BOOL v150 = v151 > byte_1D0DA768A[(int)v385];
            }
            sub_1D0CA6124(v149 + 2280, v147, v385, *(void *)&v28[8 * v150 + 152], v383, v381);
            unsigned int v153 = v369(v386, v386, v372, v374, v381, v383);
            uint64_t v154 = 0;
            unint64_t v155 = v153;
            while (v147 != *((_DWORD *)&v411 + v154))
            {
              if (++v154 == 3)
              {
                unsigned int v156 = 6;
                goto LABEL_212;
              }
            }
            if (v154) {
              unsigned int v156 = 3;
            }
            else {
              unsigned int v156 = 2;
            }
LABEL_212:
            unint64_t v157 = v153 + *(unsigned __int16 *)(*((void *)a1 + 3051) + 2 * v373 + 152) * (unint64_t)v156;
            if (v376)
            {
              v394[0] = v153;
              v394[1] = 0;
              v394[2] = v157;
              unsigned int v395 = v156;
              __int16 v396 = 2;
              sub_1D0D3FD00((uint64_t)v394, v147, v367, (uint64_t)v430, &v400);
            }
            if (v157 < v378)
            {
              if (v364) {
                (*(void (**)(void, void, uint64_t, uint64_t))(*((void *)a1 + 3050) + 29752))(v386, v386, v383, v381);
              }
              int v368 = v147;
              LODWORD(v120) = v156;
              unint64_t v378 = v157;
              unint64_t v362 = v155;
            }
            v146 |= v147 == 34;
            int v28 = v380;
          }
          v147 += v354;
          v148 += v354;
        }
        while (v147 < 0x23);
      }
      if (v368 >= 2 && (int)v386 >= 5)
      {
        unsigned int v158 = v330;
        if (v330 > v351)
        {
          int v359 = v120;
          do
          {
            uint64_t v159 = 0;
            char v160 = v158 + v368;
            if ((int)(v158 + v368) >= 34) {
              char v160 = 34;
            }
            char v357 = v160;
            LOBYTE(v402) = v160;
            char v161 = v368 - v158;
            if ((int)(v368 - v158) <= 2) {
              char v161 = 2;
            }
            BYTE1(v402) = v161;
            char v162 = 1;
            do
            {
              char v163 = v162;
              uint64_t v164 = *((char *)&v402 + v159);
              if (((v105 >> *((unsigned char *)&v402 + v159)) & 1) == 0
                && v164 != 2
                && (v146 & (v164 == 34)) == 0)
              {
                uint64_t v165 = *((void *)a1 + 3047);
                if (v164 != 1 && *(unsigned char *)(v165 + 2816) == 0)
                {
                  int v168 = 10 - v164;
                  if ((int)v164 >= 10) {
                    int v168 = v164 - 10;
                  }
                  int v169 = 26 - v164;
                  if ((int)v164 >= 26) {
                    int v169 = v164 - 26;
                  }
                  if (v168 >= v169) {
                    int v168 = v169;
                  }
                  BOOL v167 = v168 > byte_1D0DA768A[(int)v385];
                }
                else
                {
                  BOOL v167 = 0;
                }
                sub_1D0CA6124(v165 + 2280, v164, v385, *(void *)&v380[8 * v167 + 152], v383, v381);
                unsigned int v170 = v369(v386, v386, v372, v374, v381, v383);
                uint64_t v171 = 0;
                unint64_t v172 = v170;
                while (*((_DWORD *)&v411 + v171) != v164)
                {
                  if (++v171 == 3)
                  {
                    unsigned int v173 = 6;
                    goto LABEL_253;
                  }
                }
                if (v171) {
                  unsigned int v173 = 3;
                }
                else {
                  unsigned int v173 = 2;
                }
LABEL_253:
                unint64_t v174 = v170 + *(unsigned __int16 *)(*((void *)a1 + 3051) + 2 * v373 + 152) * (unint64_t)v173;
                if (v376)
                {
                  v391[0] = v170;
                  v391[1] = 0;
                  v391[2] = v174;
                  unsigned int v392 = v173;
                  __int16 v393 = 2;
                  sub_1D0D3FD00((uint64_t)v391, v164, v367, (uint64_t)v430, &v400);
                }
                if (v174 < v378)
                {
                  if (v364) {
                    (*(void (**)(void, void, uint64_t, uint64_t))(*((void *)a1 + 3050) + 29752))(v386, v386, v383, v381);
                  }
                  int v368 = v164;
                  int v359 = v173;
                  unint64_t v378 = v174;
                  unint64_t v362 = v172;
                }
              }
              char v162 = 0;
              uint64_t v159 = 1;
            }
            while ((v163 & 1) != 0);
            v146 |= v357 == 34;
            v158 >>= 1;
          }
          while (v158 > v351);
          int v28 = v380;
          LODWORD(v120) = v359;
        }
      }
      unint64_t v129 = v362;
    }
    else
    {
      unint64_t v107 = 0;
      int v368 = 0;
      uint64_t v108 = 0;
      int v370 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)a1 + 3051)
                                                                                          + 8 * v339
                                                                                          + 256);
      uint64_t v371 = 0;
      unint64_t v109 = -1;
      int v110 = 1;
      do
      {
        BOOL v111 = 0;
        uint64_t v112 = *((void *)a1 + 3047);
        unint64_t v377 = v107;
        if (v108 != 1 && !*(unsigned char *)(v112 + 2816))
        {
          int v113 = 10 - v108;
          if ((int)v108 >= 10) {
            int v113 = v108 - 10;
          }
          int v114 = 26 - v108;
          if ((int)v108 >= 26) {
            int v114 = v108 - 26;
          }
          if (v113 >= v114) {
            int v113 = v114;
          }
          BOOL v111 = v113 > byte_1D0DA768A[(int)v385];
        }
        sub_1D0CA6124(v112 + 2280, v108, v385, *(void *)&v28[8 * v111 + 152], v383, v381);
        unsigned int v115 = v370(v386, v386, v372, v374, v381, v383);
        uint64_t v116 = 0;
        char v117 = v363;
        if (v363 == 0 || v108 != 0) {
          char v117 = 0;
        }
        unint64_t v118 = (unint64_t)v115 >> v117;
        uint64_t v119 = v371;
        if (v363 != 0 && v108 == 0) {
          uint64_t v119 = v115;
        }
        uint64_t v371 = v119;
        while (*((_DWORD *)&v411 + v116) != v108)
        {
          if (++v116 == 3)
          {
            uint64_t v120 = 6;
            goto LABEL_136;
          }
        }
        if (v116) {
          uint64_t v120 = 3;
        }
        else {
          uint64_t v120 = 2;
        }
LABEL_136:
        uint64_t v121 = *((void *)a1 + 3051);
        unint64_t v122 = v118 + *(unsigned __int16 *)(v121 + 2 * v373 + 152) * (unint64_t)v120;
        if (v376)
        {
          v388[0] = v118;
          v388[1] = 0;
          v388[2] = v122;
          int v389 = v120;
          __int16 v390 = 2;
          sub_1D0D3FD00((uint64_t)v388, v108, v367, (uint64_t)v430, &v400);
        }
        uint64_t v123 = *((void *)a1 + 3050);
        int v124 = *(unsigned __int8 *)(v123 + 196);
        if (*(unsigned char *)(v123 + 196))
        {
          uint64_t v125 = 0;
          while (v108 != *((_DWORD *)&v411 + v125))
          {
            if (++v125 == 3) {
              goto LABEL_144;
            }
          }
          int v126 = &v417[4 * v125];
          unint64_t v127 = *v126 + v118;
          *int v126 = v127;
          unsigned int v128 = *((_DWORD *)v126 + 6) + v120;
          *((_DWORD *)v126 + 6) = v128;
          v126[2] = ((*(unsigned __int16 *)(v121 + 2 * *((__int16 *)v126 + 14) + 152) * (unint64_t)v128) >> (8 * (*((_WORD *)v126 + 14) == 0)))
                  + v127;
        }
LABEL_144:
        if (v122 >= v109)
        {
          uint64_t v120 = v93;
          unint64_t v122 = v109;
          unint64_t v129 = v377;
        }
        else
        {
          if (v364)
          {
            (*(void (**)(void, void, uint64_t, uint64_t))(v123 + 29752))(v386, v386, v383, v381);
            int v124 = *(unsigned __int8 *)(*((void *)a1 + 3050) + 196);
          }
          int v368 = v108;
          unint64_t v129 = v118;
        }
        if (v124) {
          BOOL v130 = 0;
        }
        else {
          BOOL v130 = v108 == 2;
        }
        if (v130 && v385 == 2) {
          int v110 = 2;
        }
        uint64_t v108 = (v110 + v108);
        unint64_t v107 = v129;
        unint64_t v109 = v122;
        uint64_t v93 = v120;
        int v28 = v380;
      }
      while ((int)v108 < 35);
    }
    unint64_t v175 = v129;
    int v360 = v120;
    if (*(unsigned char *)(*((void *)a1 + 3050) + 196))
    {
      uint64_t v176 = 0;
      uint64_t v177 = (int *)(a1 + 14912);
      int v178 = v367;
      do
      {
        int v179 = *((_DWORD *)&v411 + v176);
        if (v178 < 1)
        {
LABEL_268:
          *((unsigned char *)&v400 + v178) = v179;
          uint64_t v183 = *((void *)a1 + 3051);
          int v184 = (int64x2_t *)&v430[32 * v178];
          char v185 = (int64x2_t *)&v417[4 * v176];
          int64x2_t v186 = vaddq_s64(*v184, *v185);
          *int v184 = v186;
          LODWORD(v185) = v184[1].i32[2] + v185[1].i32[2];
          v184[1].i32[2] = (int)v185;
          v184[1].i64[0] = ((*(unsigned __int16 *)(v183 + 2 * v184[1].i16[6] + 152)
                           * (unint64_t)v185) >> (8 * (v184[1].i16[6] == 0)))
                         + v186.i64[0];
          ++v178;
        }
        else
        {
          uint64_t v180 = v178;
          uint64_t v181 = &v400;
          while (1)
          {
            int v182 = *(unsigned __int8 *)v181;
            uint64_t v181 = (int *)((char *)v181 + 1);
            if (v179 == v182) {
              break;
            }
            if (!--v180) {
              goto LABEL_268;
            }
          }
        }
        ++v176;
      }
      while (v176 != 3);
    }
    else
    {
      uint64_t v177 = (int *)(a1 + 14912);
      int v178 = v367;
    }
    if (v364)
    {
      int v187 = *((_DWORD *)a1 + 3728);
      uint64_t v188 = (int)v366 - (uint64_t)*((int *)v28 + 1);
      uint64_t v189 = (int)v365 - (uint64_t)*((int *)v28 + 2);
      uint64_t v191 = *((void *)a1 + 3047) + 8 * (v187 - 2);
      int v192 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v191 + 2896);
      unsigned int v193 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v191 + 3136);
      if ((*(_WORD *)(*((void *)v28 + 11)
                     + 2 * (((uint64_t)(int)v188 >> 3) + ((unint64_t)*v28 >> 3) * ((int)v189 >> 3))) & 0x100) != 0)
        uint64_t v194 = v193;
      else {
        uint64_t v194 = v192;
      }
      uint64_t v190 = v28[1];
      (*v194)(**((void **)v28 + 3) + (v188 + v189 * v190 + *((void *)v28 + 4)) * *(int *)(*((void *)v28 + 3) + 16), v190, **((void **)v28 + 7) + (v188 + v189 * v190 + *((void *)v28 + 8)) * *(int *)(*((void *)v28 + 7) + 16), v190, v337);
      uint64_t v195 = *((void *)a1 + 3050);
      int v196 = *v353;
      char v197 = *(unsigned char *)(*(void *)(v195 + 14848) + 2113) - *v353;
      uint64_t v198 = (1 << v197);
      if ((int)v198 < 2)
      {
        unsigned int v200 = 0;
      }
      else
      {
        uint64_t v199 = 0;
        unsigned int v200 = 0;
        do
        {
          int v201 = *(__int16 *)&v329[2 * v199];
          if (v201 < 0) {
            int v201 = -v201;
          }
          unsigned int v202 = v200 + v201;
          int v203 = *(__int16 *)(v337 + 2 * (int)(++v199 << v197));
          if (v203 < 0) {
            int v203 = -v203;
          }
          unsigned int v200 = v202 + v203;
        }
        while (v198 - 1 != v199);
        if ((int)v198 >= 4)
        {
          unsigned int v204 = v198 >> 1;
          int v205 = 1;
          do
          {
            uint64_t v206 = &v329[2 * (v205 << v197)];
            uint64_t v207 = v204 - 1;
            do
            {
              int v209 = *(__int16 *)v206;
              v206 += 2;
              int v208 = v209;
              if (v209 < 0) {
                int v208 = -v208;
              }
              v200 += v208;
              --v207;
            }
            while (v207);
            ++v205;
          }
          while (v205 != v204);
        }
      }
      uint64_t v210 = *((void *)v28 + 11);
      unint64_t v211 = (unint64_t)*v28 >> 3;
      int v212 = *(__int16 *)(v210
                        + 2
                        * (((uint64_t)((int)v366 - *((_DWORD *)v28 + 1)) >> 3)
                         + (int)v211 * (uint64_t)(((int)v365 - *((_DWORD *)v28 + 2)) >> 3))) >> 9;
      int v213 = 173 * v212;
      if (173 * v212 >= 7865) {
        int v213 = 7865;
      }
      if (v213 <= 2865) {
        int v213 = 2865;
      }
      int v214 = v213 - 2865;
      int v215 = 200 * v212;
      if (v215 >= 8404) {
        int v215 = 8404;
      }
      if (v215 <= 3404) {
        int v215 = 3404;
      }
      unsigned int v216 = v215 - 3404;
      if (!*(unsigned char *)(*(void *)(v195 + 968) + 212)) {
        unsigned int v216 = v214;
      }
      if (v200 < v216)
      {
        *(_DWORD *)(v195 + 4 * v196 + 27648) &= ~0x1000u;
        int v196 = *v353;
      }
      if ((*(_DWORD *)(v195 + 4 * v196 + 27648) & 0x1000) != 0)
      {
        uint64_t v217 = (__int16 *)(v210
                         + 2
                         * (((uint64_t)((int)v366 - *((_DWORD *)v28 + 1)) >> 3)
                          + (int)v211 * (uint64_t)(((int)v365 - *((_DWORD *)v28 + 2)) >> 3)));
        __int16 v218 = *v217;
        int v219 = *v217 >> 9;
        if (v219 >= 47) {
          LOWORD(v219) = 47;
        }
        *uint64_t v217 = (v218 & 0x1FF | ((_WORD)v219 << 9)) + 2048;
        char v220 = sub_1D0D42E88((uint64_t)v177, v366, v365, (uint64_t)v217, v337, 1 << v187, v337, 1 << v187, *v177, 0, 0, 0);
        *uint64_t v217 = v218 & 0xFE00 | *v217 & 0x1FF;
        if ((v220 & 1) == 0)
        {
          uint64_t v221 = *((void *)a1 + 3050) + 4 * (int)*v353;
          *(_DWORD *)(v221 + 27648) &= ~0x1000u;
        }
      }
    }
    uint64_t v8 = v350;
    uint64_t v223 = v361;
    uint64_t v222 = v386 >> 2;
    if (*(int *)(*((void *)a1 + 3050) + 4) <= 2)
    {
      BOOL v224 = *(unsigned __int8 *)(*((void *)a1 + 3047) + 58) > 1u
          || *((unsigned char *)v348[12]
             + 16 * ((uint64_t)((int)v366 - *((_DWORD *)v348 + 1)) >> 2)
             + 16 * ((unint64_t)*(unsigned __int8 *)v348 >> 2) * (((int)v365 - *((_DWORD *)v348 + 2)) >> 2)
             + 10) == 1;
      if (!v224
        && *((void *)v28 + 21)
         + v175
         + (*((_DWORD *)v28 + 48) + v360) * *(unsigned __int16 *)(*((void *)a1 + 3051) + 146) >= (unint64_t)v348[23])
      {
LABEL_401:
        *(void *)int v327 = *((void *)v28 + 18);
        return;
      }
    }
    if (!v376)
    {
      int v379 = 0;
      LOBYTE(v375) = 0;
      goto LABEL_375;
    }
    uint64_t v225 = *((void *)v28 + 17);
    *(_DWORD *)(v225 + 112) = 0;
    *(void *)(v225 + 88) = 0;
    *(void *)(v225 + 96) = 0;
    *(void *)(v225 + 104) = -1;
    *(_WORD *)(v225 + 116) = 0;
    if (*(char *)(*((void *)a1 + 3049) + 498) > 1
      && *(unsigned char *)(*(void *)(*((void *)a1 + 3047) + 5320) + 648) == 5
      && !sub_1D0D0CAE4(*(void *)(*((void *)a1 + 3050) + 14840), v366, v365))
    {
      int v178 = 1;
LABEL_320:
      uint64_t v226 = 0;
      LOBYTE(v375) = 0;
      int v379 = 0;
      int v382 = v411;
      uint64_t v227 = v178;
      uint64_t v223 = v361;
      uint64_t v222 = v386 >> 2;
      while (1)
      {
        uint64_t v228 = *((void *)v28 + 18);
        *(_DWORD *)(v228 + 112) = 0;
        *(void *)(v228 + 88) = 0;
        *(void *)(v228 + 96) = 0;
        *(void *)(v228 + 104) = -1;
        *(_WORD *)(v228 + 116) = 0;
        int v229 = *((unsigned __int8 *)&v400 + v226);
        *(unsigned char *)uint64_t v99 = v229;
        if ((int)v386 >= 4)
        {
          uint64_t v230 = 0;
          unint64_t v231 = 16 * ((unint64_t)*v28 >> 2);
          double v232 = v99;
          do
          {
            uint64_t v233 = v232;
            uint64_t v234 = v223;
            do
            {
              uint64_t v235 = *v99;
              *(void *)((char *)v233 + 6) = *(void *)((char *)v99 + 6);
              *uint64_t v233 = v235;
              v233 += 2;
              --v234;
            }
            while (v234);
            ++v230;
            double v232 = (void *)((char *)v232 + v231);
          }
          while (v230 != v222);
        }
        sub_1D0D3FE30((uint64_t)v177, v366, v365, v28, v385, v355, v229, v8, v356, *((void *)v28 + 18) + 88);
        uint64_t v236 = *((void *)v28 + 17);
        uint64_t v237 = *((void *)v28 + 18);
        unint64_t v238 = *(void *)(v237 + 88);
        if (v238 < *(void *)(v236 + 104))
        {
          uint64_t v239 = *((void *)a1 + 3050);
          if (*(unsigned char *)(v239 + 196))
          {
            int v384 = *v353;
            char v403 = 0;
            BOOL v240 = *(uint64_t **)(v239 + 944);
            (*(void (**)(uint64_t *))(*v240 + 88))(v240);
            int v402 = *((_DWORD *)v28 + 5);
            if (v382 == v229)
            {
              uint64_t v241 = 0;
              uint64_t v242 = 1;
              uint64_t v243 = 1;
              uint64_t v244 = v382;
            }
            else
            {
              uint64_t v244 = v349;
              if (v349 == v229)
              {
                uint64_t v243 = 0;
                uint64_t v242 = 1;
                uint64_t v241 = 1;
              }
              else
              {
                int v248 = v347;
                if (v347 == v229)
                {
                  uint64_t v242 = 1;
                  uint64_t v243 = 1;
                  uint64_t v241 = 1;
                  uint64_t v244 = v347;
                }
                else
                {
                  if (v382 <= (int)v349)
                  {
                    int v249 = v349;
                    LODWORD(v244) = v382;
                  }
                  else
                  {
                    unint64_t v411 = __PAIR64__(v382, v349);
                    int v249 = v382;
                  }
                  if ((int)v244 <= v347)
                  {
                    int v250 = v244;
                  }
                  else
                  {
                    LODWORD(v411) = v347;
                    int v412 = v244;
                    int v248 = v244;
                    int v250 = v347;
                  }
                  if (v249 <= v248)
                  {
                    int v347 = v248;
                    int v248 = v249;
                  }
                  else
                  {
                    HIDWORD(v411) = v248;
                    int v412 = v249;
                    int v347 = v249;
                  }
                  uint64_t v251 = 8;
                  LODWORD(v244) = v229;
                  do
                  {
                    uint64_t v244 = v244 - ((int)v244 > *(_DWORD *)((char *)&v411 + v251));
                    v251 -= 4;
                  }
                  while (v251 != -4);
                  int v382 = v250;
                  uint64_t v242 = 0;
                  uint64_t v241 = 0;
                  uint64_t v243 = 1;
                  unsigned int v349 = v248;
                }
              }
            }
            (*(void (**)(uint64_t *, uint64_t, uint64_t *))*v240)(v240, v242, v240 + 8);
            uint64_t v252 = *v240;
            if (v242)
            {
              (*(void (**)(uint64_t *, uint64_t))(v252 + 8))(v240, v241);
              if (v241) {
                (*(void (**)(uint64_t *, uint64_t))(*v240 + 8))(v240, v243);
              }
            }
            else
            {
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v252 + 24))(v240, v244, 5);
            }
            sub_1D0D1076C(*((void *)a1 + 3050), v366, v365, v28, 1, 0, 0, 0, 1);
            uint64_t v177 = (int *)(a1 + 14912);
            sub_1D0D3FBE4((uint64_t)(a1 + 14912), v366, v365, v384, &v402, &v403, 1);
            unsigned int v247 = (*(uint64_t (**)(uint64_t *))(*v240 + 80))(v240);
            (*(void (**)(uint64_t *))(*v240 + 96))(v240);
            uint64_t v237 = *((void *)v28 + 18);
            *(_DWORD *)(v237 + 112) = v247;
            unint64_t v238 = *(void *)(v237 + 88);
            uint64_t v236 = *((void *)v28 + 17);
            uint64_t v8 = v350;
            uint64_t v223 = v361;
            uint64_t v222 = v386 >> 2;
            uint64_t v227 = v178;
          }
          else
          {
            uint64_t v245 = 0;
            uint64_t v223 = v361;
            uint64_t v222 = v386 >> 2;
            while (*((_DWORD *)&v411 + v245) != v229)
            {
              if (++v245 == 3)
              {
                int v246 = 1536;
                goto LABEL_339;
              }
            }
            if (v245) {
              int v246 = 768;
            }
            else {
              int v246 = 512;
            }
LABEL_339:
            unsigned int v247 = *(_DWORD *)(v237 + 112) + v246;
            *(_DWORD *)(v237 + 112) = v247;
          }
          unint64_t v253 = ((*(unsigned __int16 *)(*((void *)a1 + 3051) + 2 * *(__int16 *)(v237 + 116) + 152)
                 * (unint64_t)v247) >> (8 * (*(_WORD *)(v237 + 116) == 0)))
               + v238;
          *(void *)(v237 + 104) = v253;
          if (v253 < *(void *)(v236 + 104))
          {
            int v375 = ((unsigned __int16)*v352 >> 2) & 3;
            if (v8 == 3)
            {
              sub_1D0D0C2A8(*(uint64_t (**)(uint64_t, uint64_t))(*((void *)a1 + 3050) + 29752), (void **)v236, (const void **)v237, v366 - *((_DWORD *)v28 + 1), v365 - *((_DWORD *)v28 + 2), v366 - *((_DWORD *)v28 + 1), v365 - *((_DWORD *)v28 + 2), v386);
              uint64_t v223 = v361;
              uint64_t v222 = v386 >> 2;
              uint64_t v254 = *((void *)v28 + 17);
              uint64_t v255 = *((void *)v28 + 18);
              long long v256 = *(_OWORD *)(v255 + 88);
              *(_OWORD *)(v254 + 104) = *(_OWORD *)(v255 + 104);
              *(_OWORD *)(v254 + 88) = v256;
            }
            else
            {
              *((void *)v28 + 17) = v237;
              *((void *)v28 + 18) = v236;
            }
            int v368 = v229;
            int v379 = v226;
          }
          if (v226) {
            goto LABEL_371;
          }
          int v257 = *(char *)(*((void *)a1 + 3049) + 498);
          if (v257 < 1) {
            goto LABEL_371;
          }
          if (v257 != 3
            || *(unsigned char *)(*(void *)(*((void *)a1 + 3047) + 5320) + 648) == 5
            && (sub_1D0D0CAE4(*(void *)(*((void *)a1 + 3050) + 14840), v366, v365) & 1) == 0)
          {
            uint64_t v223 = v361;
            uint64_t v222 = v386 >> 2;
            if (*(void *)(*((void *)v28 + 17) + 104) > (unint64_t)v348[27]) {
              goto LABEL_401;
            }
            goto LABEL_371;
          }
        }
        uint64_t v223 = v361;
        uint64_t v222 = v386 >> 2;
LABEL_371:
        if (++v226 == v227) {
          goto LABEL_375;
        }
      }
    }
    if (v178 >= 1) {
      goto LABEL_320;
    }
    int v379 = 0;
    LOBYTE(v375) = 0;
    uint64_t v223 = v361;
    uint64_t v222 = v386 >> 2;
LABEL_375:
    if ((*v352 & 0xC) != 0) {
      *(unsigned char *)(*((void *)a1 + 3050) + 24794) = 0;
    }
    *(unsigned char *)uint64_t v99 = v368;
    if ((int)v386 >= 4)
    {
      uint64_t v258 = 0;
      unint64_t v259 = 16 * ((unint64_t)*v28 >> 2);
      BOOL v260 = v99;
      do
      {
        BOOL v261 = v260;
        uint64_t v262 = v223;
        do
        {
          uint64_t v263 = *v99;
          *(void *)((char *)v261 + 6) = *(void *)((char *)v99 + 6);
          *BOOL v261 = v263;
          v261 += 2;
          --v262;
        }
        while (v262);
        ++v258;
        BOOL v260 = (void *)((char *)v260 + v259);
      }
      while (v258 != v222);
    }
    if (v8 != 3 && v346)
    {
      uint64_t v264 = *((void *)v28 + 18);
      *(_DWORD *)(v264 + 112) = 0;
      *(void *)(v264 + 88) = 0;
      *(void *)(v264 + 96) = 0;
      *(void *)(v264 + 104) = -1;
      *(_WORD *)(v264 + 116) = 0;
      sub_1D0D40574((uint64_t)v177, v366, v365, v28, v385, 0, v368, v8, v356, (int64x2_t *)(*((void *)v28 + 18) + 88));
      *(int8x16_t *)(v28 + 136) = vextq_s8(*(int8x16_t *)(v28 + 136), *(int8x16_t *)(v28 + 136), 8uLL);
    }
    int v11 = v336;
    if (v376)
    {
      if (!v363 || v368)
      {
        uint64_t v266 = v379;
        uint64_t v265 = *v334 + *(void *)&v430[32 * v379];
        unsigned int v30 = v343;
        uint64_t v267 = v345;
        uint64_t v268 = v386 >> 3;
      }
      else
      {
        uint64_t v265 = *v334 + v371;
        uint64_t v266 = v379;
        unsigned int v30 = v343;
        uint64_t v267 = v345;
        uint64_t v268 = v386 >> 3;
      }
      *((void *)v28 + 21) = v265;
      *((_DWORD *)v28 + 48) += *(_DWORD *)&v430[32 * v266 + 24];
      uint64_t v269 = *((void *)v28 + 17);
      *((void *)v28 + 25) += *(void *)(v269 + 88);
      *((_DWORD *)v28 + 56) += *(_DWORD *)(v269 + 112);
      if (!v346)
      {
        *int v352 = *v352 & 0xFFF3 | (4 * (v375 & 3));
        if ((int)v386 >= 8)
        {
          uint64_t v270 = 0;
          unint64_t v271 = 2 * ((unint64_t)*v28 >> 3);
          uint64_t v272 = v352;
          do
          {
            int v273 = v272;
            uint64_t v274 = v268;
            do
            {
              *v273++ = *v352;
              --v274;
            }
            while (v274);
            ++v270;
            uint64_t v272 = (_WORD *)((char *)v272 + v271);
          }
          while (v270 != v268);
        }
      }
    }
    else
    {
      *((_DWORD *)v28 + 48) += v360;
      sub_1D0D40DAC((uint64_t)v177, v366, v365, v28, 0, v385, 0, v8, v356, (uint64_t)v334);
      unsigned int v30 = v343;
      uint64_t v267 = v345;
    }
    uint64_t v53 = v267 + 1;
  }
  while (v53 != v335);
  *(void *)int v327 = *((void *)v28 + 18);
  if (!a1[8])
  {
    sub_1D0D11CAC((uint64_t)a1, v336, v30, a4, *v326, *v326, a7, v8);
    unsigned int v30 = v343;
  }
  if (*((int *)a1 + 1) < 3)
  {
    int v281 = *(unsigned __int8 *)(*((void *)a1 + 1856) + 269);
    BOOL v35 = v281 <= a4;
    int v282 = v281 > a4;
    char v278 = *v326;
    unsigned int v279 = *((_DWORD *)*v326 + 48);
    if (!v35) {
      ++v279;
    }
    *((_DWORD *)v278 + 48) = v279;
    unsigned int v280 = *((_DWORD *)v278 + 56) + (v282 << 8);
    *((_DWORD *)v278 + 56) = v280;
  }
  else
  {
    v430[0] = 0;
    int v275 = v30;
    (*(void (**)(void))(**((void **)a1 + 118) + 88))(*((void *)a1 + 118));
    sub_1D0D1076C((uint64_t)a1, v336, v275, *v326, 1, 0, 0, 0, 0);
    v276 = *v326;
    *((_DWORD *)v276 + 4) = *((_DWORD *)*v326 + 5);
    sub_1D0D157FC((uint64_t)a1, v336, v275, a4, a7, (int *)v276 + 4, v430, v277);
    *((_DWORD *)*v326 + 56) = (*(uint64_t (**)(void))(**((void **)a1 + 118) + 80))(*((void *)a1 + 118));
    (*(void (**)(void))(**((void **)a1 + 118) + 96))(*((void *)a1 + 118));
    sub_1D0D182CC((uint64_t)a1, v336, v275, a4, (uint64_t)*v326);
    char v278 = *v326;
    unsigned int v279 = *((_DWORD *)*v326 + 48);
    unsigned int v280 = *((_DWORD *)*v326 + 56);
  }
  *((void *)v278 + 23) = ((*(unsigned __int16 *)&a1[2 * *((__int16 *)v278 + 98) + 1152] * (unint64_t)v279) >> (8 * (*((_WORD *)v278 + 98) == 0)))
                         + *((void *)v278 + 21);
  *((void *)v278 + 27) = ((*(unsigned __int16 *)&a1[2 * *((__int16 *)v278 + 114) + 1152] * (unint64_t)v280) >> (8 * (*((_WORD *)v278 + 114) == 0)))
                         + *((void *)v278 + 25);
  long long v283 = &a1[32 * a4];
  unint64_t v286 = *((void *)v283 + 4);
  v284 = v283 + 32;
  unint64_t v285 = v286;
  if (v8) {
    char v287 = 64;
  }
  else {
    char v287 = 32;
  }
  v284[26] |= v287;
  unsigned __int8 v288 = *v326;
  unint64_t v289 = *((void *)*v326 + 23);
  if (v289 < v285) {
    *(void *)v284 = v289;
  }
  int v290 = *a6;
  if (a1[1] || a1[196])
  {
    unsigned int v291 = 1;
  }
  else if (*((unsigned char *)v290[12] {
            + 16 * ((uint64_t)(v336 - *((_DWORD *)v290 + 1)) >> 2)
  }
            + 16 * ((unint64_t)*(unsigned __int8 *)v290 >> 2) * ((v343 - *((_DWORD *)v290 + 2)) >> 2)
            + 10) == 1)
  {
    unsigned int v291 = *a1;
  }
  else
  {
    unsigned int v291 = 0;
  }
  int v292 = *((_DWORD *)a1 + 54);
  if (v292 < 1)
  {
    sub_1D0D18C68((uint64_t)a1, (void ***)v326, a6, v291);
  }
  else
  {
    if (*(void *)&v288[32 * v291 + 184] < (unint64_t)v290[4 * v291 + 23])
    {
      *int64x2_t v326 = (unsigned __int8 *)v290;
      *a6 = (void **)v288;
      int v293 = *v326;
      unint64_t v294 = **v326;
      uint64_t v295 = v294 >> 2;
      uint64_t v296 = *((void *)*v326 + 12)
           + 16
           * (((uint64_t)(v336 - *((_DWORD *)*v326 + 1)) >> 2)
            + (int)(v294 >> 2) * (uint64_t)((v343 - *((_DWORD *)*v326 + 2)) >> 2));
      unint64_t v297 = *((void *)v288 + 12)
           + 16
           * (((uint64_t)(v336 - *((_DWORD *)v288 + 1)) >> 2)
            + ((unint64_t)*v288 >> 2) * ((v343 - *((_DWORD *)v288 + 2)) >> 2));
      int v298 = *(unsigned __int8 *)(v296 + 10);
      if (v292 == 2)
      {
        if (v298 == 1)
        {
          if (v294 >= 4)
          {
            int v299 = 0;
            if (v295 <= 1) {
              uint64_t v295 = 1;
            }
            else {
              uint64_t v295 = v295;
            }
            do
            {
              int v300 = (char *)(v296 + 13);
              uint64_t v301 = (unsigned char *)(v297 + 13);
              uint64_t v302 = v295;
              do
              {
                *(_DWORD *)(v301 - 9) = *(_DWORD *)(v300 - 9);
                *(v301 - 1) = *(v300 - 1);
                char v303 = *v300;
                v300 += 16;
                *uint64_t v301 = v303;
                v301 += 16;
                --v302;
              }
              while (v302);
              v297 += (4 * *v288) & 0x3F0;
              v296 += (4 * *v293) & 0x3F0;
              ++v299;
            }
            while (v299 != v295);
          }
        }
        else
        {
          uint64_t v309 = *(void *)(*((void *)a1 + 1855) + 8);
          if ((v343 | v336) < 0 || *(_DWORD *)(v309 + 520) <= v336 || *(_DWORD *)(v309 + 524) <= v343) {
            uint64_t v310 = 0;
          }
          else {
            uint64_t v310 = *(void *)(v309 + 904) + 4 * (*(void *)(v309 + 848) * ((uint64_t)v343 >> 2) + (v336 >> 2));
          }
          if (v294 >= 4)
          {
            int v316 = 0;
            if (v295 <= 1) {
              LODWORD(v295) = 1;
            }
            uint64_t v317 = 4 * *(void *)(v309 + 848);
            do
            {
              uint64_t v318 = 0;
              int v319 = (unsigned __int8 *)(v296 + 9);
              uint64_t v320 = (unsigned char *)(v297 + 12);
              do
              {
                *((_DWORD *)v320 - 2) = *(_DWORD *)(v319 - 9);
                *(_DWORD *)(v310 + v318) = *(_DWORD *)(v319 - 5);
                *uint64_t v320 = *(v319 - 1) >> 4;
                unsigned int v321 = *v319;
                v319 += 16;
                v320[1] = v321 >> 4;
                v318 += 4;
                v320 += 16;
              }
              while (4 * v295 != v318);
              v297 += (4 * *v288) & 0x3F0;
              v296 += (4 * *v293) & 0x3F0;
              ++v316;
              v310 += v317;
            }
            while (v316 != v295);
          }
        }
      }
      else if (v298 == 1)
      {
        if (v294 >= 4)
        {
          int v304 = 0;
          if (v295 <= 1) {
            uint64_t v295 = 1;
          }
          else {
            uint64_t v295 = v295;
          }
          do
          {
            uint64_t v305 = (char *)(v296 + 13);
            int v306 = (unsigned char *)(v297 + 13);
            uint64_t v307 = v295;
            do
            {
              *(_DWORD *)(v306 - 9) = *(_DWORD *)(v305 - 9);
              *(v306 - 1) = *(v305 - 1);
              char v308 = *v305;
              v305 += 16;
              *int v306 = v308;
              v306 += 16;
              --v307;
            }
            while (v307);
            v297 += (4 * *v288) & 0x3F0;
            v296 += (4 * *v293) & 0x3F0;
            ++v304;
          }
          while (v304 != v295);
        }
      }
      else if (v294 >= 4)
      {
        int v311 = 0;
        if (v295 <= 1) {
          uint64_t v295 = 1;
        }
        else {
          uint64_t v295 = v295;
        }
        do
        {
          uint64_t v312 = (unsigned __int8 *)(v296 + 9);
          int v313 = (unsigned char *)(v297 + 12);
          uint64_t v314 = v295;
          do
          {
            *((_DWORD *)v313 - 2) = *(_DWORD *)(v312 - 9);
            *int v313 = *(v312 - 1) >> 4;
            unsigned int v315 = *v312;
            v312 += 16;
            v313[1] = v315 >> 4;
            v313 += 16;
            --v314;
          }
          while (v314);
          v297 += (4 * *v288) & 0x3F0;
          v296 += (4 * *v293) & 0x3F0;
          ++v311;
        }
        while (v311 != v295);
      }
      unsigned __int8 v288 = *v326;
    }
    v322 = (__int16 *)*((void *)v288 + 11);
    __int16 v323 = *v322;
    bzero(v322, 2 * ((unint64_t)*v288 >> 3) * ((unint64_t)*v288 >> 3));
    **((_WORD **)v288 + 11) = **((_WORD **)v288 + 11) & 0xFFFC | v323 & 3;
    **((_WORD **)v288 + 11) = v323 & 0xFE00 | **((_WORD **)v288 + 11) & 0x1FF;
    sub_1D0D0BE7C((void **)*v326, *(unsigned __int8 *)(*((void *)a1 + 1855) + 58) < 2u);
    v324 = *v326;
    *((_DWORD *)v324 + 48) = 0;
    *((void *)v324 + 21) = 0;
    *((void *)v324 + 22) = 0;
    *((void *)v324 + 23) = -1;
    *((_WORD *)v324 + 98) = 2;
    int v325 = *v326;
    *((_DWORD *)v325 + 56) = 0;
    *((void *)v325 + 25) = 0;
    *((void *)v325 + 26) = 0;
    *((void *)v325 + 27) = -1;
    *((_WORD *)v325 + 114) = 0;
  }
  *(_DWORD *)&a1[4 * a4 + 27648] &= ~(512 << v8);
}

BOOL sub_1D0D1C4D4(uint64_t a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned __int8 *a7)
{
  uint64_t v7 = *(void *)(a1 + 14840);
  uint64_t v8 = *(void *)(v7 + 16);
  char v9 = *(unsigned char *)(v8 + 2113);
  char v10 = v9 - a4;
  int v11 = *(unsigned __int8 *)(v8 + 2117) - 1;
  int v12 = (a5 >> v9) + (a6 >> v9) * *(_DWORD *)(v8 + 2120);
  uint64_t v13 = *(void *)(v7 + 5400);
  uint64_t v14 = ((v11 & a5) >> v10)
      + ((v11 & a6) >> v10) * byte_1D0DA530C[a4]
      + *(_DWORD *)(v7 + 5408) * v12
      + byte_1D0DA5308[a4];
  uint64_t v15 = v13 + 32 * v14;
  uint64_t v16 = 1;
  if ((*(unsigned char *)(v15 + 26) & 0x80) != 0 && (*(unsigned char *)(v15 + 26) & 0x18) != 8)
  {
    unint64_t v18 = *((void *)a7 + 23);
    unint64_t v19 = *(void *)(v13 + 32 * v14 + 8);
    BOOL v20 = v18 >= v19;
    unint64_t v21 = 100 * (v18 - v19);
    if (!v20) {
      unint64_t v21 = 0;
    }
    if (v21 / (v18 + 1) > 0x22) {
      return 1;
    }
    char v22 = a4;
    int v23 = a3;
    unsigned int v25 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2117);
    if (sub_1D0D1C69C(a2, a3, a7, v15)) {
      return 0;
    }
    unsigned int v26 = v25 >> (v22 + 1);
    int v27 = (*(unsigned __int16 *)(*((void *)a7 + 11)
                               + 2
                               * (((uint64_t)(a2 - *((_DWORD *)a7 + 1)) >> 3)
                                + ((unint64_t)*a7 >> 3) * ((v23 - *((_DWORD *)a7 + 2)) >> 3))) >> 4) & 7;
    switch(v27)
    {
      case 3:
        if (sub_1D0D1C69C(v26 + a2, v23, a7, v15)) {
          return 0;
        }
        v23 += v26;
        if (sub_1D0D1C69C(a2, v23, a7, v15)) {
          return 0;
        }
        int v29 = v26 + a2;
        break;
      case 2:
        int v29 = v26 + a2;
        break;
      case 1:
        int v28 = v26 + v23;
        int v29 = a2;
        return !sub_1D0D1C69C(v29, v28, a7, v15);
      default:
        return 1;
    }
    int v28 = v23;
    return !sub_1D0D1C69C(v29, v28, a7, v15);
  }
  return v16;
}

BOOL sub_1D0D1C69C(int a1, int a2, unsigned __int8 *a3, uint64_t a4)
{
  int v4 = (__int16 *)(*((void *)a3 + 12)
                 + 16
                 * (((uint64_t)(a1 - *((_DWORD *)a3 + 1)) >> 2)
                  + ((unint64_t)*a3 >> 2) * ((a2 - *((_DWORD *)a3 + 2)) >> 2)));
  int v5 = *(unsigned __int8 *)(a4 + 24);
  if (v5 != *((unsigned __int8 *)v4 + 8) >> 4) {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a4 + 25);
  if (v6 != *((unsigned __int8 *)v4 + 9) >> 4) {
    return 0;
  }
  if (v5 == 15) {
    goto LABEL_10;
  }
  int v7 = *(__int16 *)(a4 + 16) - *v4;
  if (v7 < 0) {
    int v7 = *v4 - *(__int16 *)(a4 + 16);
  }
  if (v7 > 5)
  {
LABEL_10:
    BOOL v9 = 0;
  }
  else
  {
    int v8 = *(__int16 *)(a4 + 18) - v4[1];
    if (v8 < 0) {
      int v8 = v4[1] - *(__int16 *)(a4 + 18);
    }
    BOOL v9 = v8 < 6;
  }
  if (v5 != 15 && !v9) {
    return 0;
  }
  if (v6 == 15) {
    goto LABEL_23;
  }
  int v11 = *(__int16 *)(a4 + 20) - v4[2];
  if (v11 < 0) {
    int v11 = v4[2] - *(__int16 *)(a4 + 20);
  }
  if (v11 > 5)
  {
LABEL_23:
    BOOL v13 = 0;
  }
  else
  {
    int v12 = *(__int16 *)(a4 + 22) - v4[3];
    if (v12 < 0) {
      int v12 = -v12;
    }
    BOOL v13 = v12 < 6;
  }
  int v15 = v6 == 15 || v13;
  return v15 != 0;
}

BOOL sub_1D0D1C78C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, int a7, unsigned int a8, unsigned __int8 a9)
{
  int v9 = a7;
  int v11 = a4;
  uint64_t v15 = (1 << (*(unsigned char *)(*(void *)(a1 + 14848) + 2113) - a4));
  int v16 = a2 - *((_DWORD *)*a5 + 1);
  int v17 = a3 - *((_DWORD *)*a5 + 2);
  unint64_t v18 = **a5;
  uint64_t v19 = *((void *)*a5 + 12) + 16 * (((uint64_t)v16 >> 2) + (int)(v18 >> 2) * (uint64_t)(v17 >> 2));
  uint64_t v80 = (_WORD *)(*((void *)*a5 + 11) + 2 * (((uint64_t)v16 >> 3) + (int)(v18 >> 3) * (uint64_t)(v17 >> 3)));
  sub_1D0D0BFA0((void *)a1, v80, a4, a7, 0, v18 >> 3, *((_DWORD *)*a5 + 3));
  BOOL v20 = *a5;
  unint64_t v21 = *a5;
  *((void *)v21 + 21) = 0;
  char v22 = v21 + 168;
  *((_DWORD *)v20 + 48) = 0;
  *((void *)v20 + 22) = 0;
  *((void *)v20 + 23) = -1;
  *((_WORD *)v20 + 98) = 2;
  int v85 = v9;
  unsigned int v86 = a2 + ((int)v15 >> 1);
  unsigned int v81 = a3 + ((int)v15 >> 1);
  int v23 = a5;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a9;
  int v27 = (unsigned __int8 **)((int)v15 >> 1);
  switch(v9)
  {
    case 0:
      uint64_t v26 = v25;
      uint64_t v25 = v24;
      int v27 = v23;
      sub_1D0D1D1D0(a1, v24, v26, v11, v23, a6, v15, v15, 0, a8, (uint64_t)v22, a9, 1u);
      uint64_t v28 = a1 + 32 * v11;
      *(_DWORD *)(v28 + 48) = *(_DWORD *)v19;
      *(unsigned char *)(v28 + 56) = *(unsigned char *)(v19 + 8) >> 4;
      *(_DWORD *)(v28 + 52) = *(_DWORD *)(v19 + 4);
      *(unsigned char *)(v28 + 57) = *(unsigned char *)(v19 + 9) >> 4;
      break;
    case 1:
      int v29 = v11;
      uint64_t v30 = v24;
      uint64_t v82 = v19;
      int v31 = v23;
      sub_1D0D1D1D0(a1, v24, v25, v29, v23, a6, v15, (int)v15 >> 1, 1, a8, (uint64_t)v22, a9, 1u);
      uint64_t v26 = v25;
      uint64_t v25 = v30;
      int v11 = v29;
      int v9 = v85;
      uint64_t v32 = v31;
      int v27 = v31;
      uint64_t v19 = v82;
      sub_1D0D1D1D0(a1, v25, v81, v11, v32, a6, v15, (int)v15 >> 1, 1, a8, (uint64_t)v22, a9, 1u);
      break;
    case 2:
      uint64_t v83 = v19;
      int v84 = v11;
      uint64_t v33 = v24;
      int v34 = v23;
      sub_1D0D1D1D0(a1, v24, v25, v84, v23, a6, ((int)v15 >> 1), v15, 2, a8, (uint64_t)v22, a9, 1u);
      uint64_t v26 = v25;
      uint64_t v25 = v33;
      int v11 = v84;
      BOOL v35 = v34;
      int v27 = v34;
      uint64_t v19 = v83;
      sub_1D0D1D1D0(a1, v86, v26, v84, v35, a6, ((int)v15 >> 1), v15, 2, a8, (uint64_t)v22, a9, 1u);
      break;
    case 3:
      uint64_t v79 = v24;
      uint64_t v36 = v25;
      uint64_t v37 = v25;
      uint64_t v38 = v23;
      sub_1D0D1D1D0(a1, v24, v37, v11, v23, a6, ((int)v15 >> 1), (int)v15 >> 1, 3, a8, (uint64_t)v22, a9, 1u);
      sub_1D0D1D1D0(a1, v86, v36, v11, v38, a6, ((int)v15 >> 1), (int)v15 >> 1, 3, a8, (uint64_t)v22, a9, 1u);
      sub_1D0D1D1D0(a1, v79, v81, v11, v38, a6, ((int)v15 >> 1), (int)v15 >> 1, 3, a8, (uint64_t)v22, a9, 1u);
      uint64_t v26 = v78;
      int v9 = v85;
      uint64_t v39 = v38;
      int v27 = v38;
      uint64_t v25 = v79;
      sub_1D0D1D1D0(a1, v86, v81, v11, v39, a6, ((int)v15 >> 1), (int)v15 >> 1, 3, a8, (uint64_t)v22, a9, 1u);
      break;
    default:
      break;
  }
  if (!*(unsigned char *)(a1 + 8) && !*(unsigned char *)(a1 + 196))
  {
    sub_1D0D125BC(a1, v25, v26, v11, *v27, 0, 1, 0, 0);
    uint64_t v40 = *v27;
    int v41 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) + ~v11;
    *v22 += ((*(unsigned __int16 *)(a1 + 1164)
                          * (unint64_t)(*(unsigned int (**)(void, void, uint64_t))(a1 + 8 * v41 + 1424))((1 << v41), (1 << v41), **((void **)v40 + 5)+ (*((void *)v40 + 6)+ (int)v25- (uint64_t)*((int *)v40 + 1)+ v40[1] * (uint64_t)(((int)v26 - *((_DWORD *)v40 + 2)) >> 1))* *(int *)(*((void *)v40 + 5) + 16))) >> 8);
  }
  if (*(unsigned char *)(a1 + 196))
  {
    if (v9)
    {
      int v42 = v20 + 200;
      int v43 = *((_DWORD *)*v27 + 1);
      int v44 = *((_DWORD *)*v27 + 2);
      uint64_t v45 = *((void *)*v27 + 12);
      int v46 = ((int)v26 - v44) >> 2;
      unint64_t v47 = (unint64_t)**v27 >> 2;
      uint64_t v48 = (uint64_t)((int)v25 - v43) >> 2;
      uint64_t v49 = v45 + 16 * (v48 + (int)v47 * (uint64_t)v46);
      uint64_t v50 = (uint64_t)(int)(v86 - v43) >> 2;
      uint64_t v51 = v45 + 16 * (v50 + (int)v47 * (uint64_t)v46);
      int v52 = *(unsigned __int8 *)(v49 + 11);
      if (((*(unsigned __int8 *)(v51 + 11) ^ v52) & 0x40) == 0
        && (int v53 = *(unsigned __int8 *)(v49 + 8) >> 4, v53 == *(unsigned __int8 *)(v51 + 8) >> 4)
        && (v53 == 15 || *(_DWORD *)v49 == *(_DWORD *)v51)
        && (int v54 = *(unsigned __int8 *)(v49 + 9) >> 4, v54 == *(unsigned __int8 *)(v51 + 9) >> 4)
        && (v54 == 15 || *(_DWORD *)(v49 + 4) == *(_DWORD *)(v51 + 4))
        && (int v55 = (int)(v81 - v44) >> 2,
            uint64_t v56 = v45 + 16 * (v48 + (int)v47 * (uint64_t)v55),
            ((*(unsigned __int8 *)(v56 + 11) ^ v52) & 0x40) == 0)
        && v53 == *(unsigned __int8 *)(v56 + 8) >> 4
        && (v53 == 15 || *(_DWORD *)v49 == *(_DWORD *)v56)
        && v54 == *(unsigned __int8 *)(v56 + 9) >> 4
        && (v54 == 15 || *(_DWORD *)(v49 + 4) == *(_DWORD *)(v56 + 4))
        && (uint64_t v57 = v45 + 16 * ((int)v47 * (uint64_t)v55 + v50), ((*(unsigned __int8 *)(v57 + 11) ^ v52) & 0x40) == 0)
        && v53 == *(unsigned __int8 *)(v57 + 8) >> 4
        && (v53 == 15 || *(_DWORD *)v49 == *(_DWORD *)v57)
        && v54 == *(unsigned __int8 *)(v57 + 9) >> 4
        && (v54 != 15 ? (BOOL v58 = *(_DWORD *)(v49 + 4) != *(_DWORD *)(v57 + 4)) : (BOOL v58 = 0),
            *(unsigned char *)(*(void *)(a1 + 968) + 551) && !v58))
      {
        *((_DWORD *)v20 + 56) = 0;
        void *v42 = 0;
        *((void *)v20 + 26) = 0;
        *((void *)v20 + 27) = -1;
        *((_WORD *)v20 + 114) = 2;
      }
      else
      {
        *((_DWORD *)v20 + 56) = 0;
        void *v42 = 0;
        *((void *)v20 + 26) = 0;
        *((void *)v20 + 27) = -1;
        *((_WORD *)v20 + 114) = 2;
        sub_1D0D125BC(a1, v25, v26, v11, *v27, 1, *(unsigned char *)(a1 + 8) == 0, 0, (unsigned int *)v20 + 50);
        if (!*(unsigned char *)(a1 + 29745))
        {
          *((_DWORD *)v20 + 56) = 0;
          void *v42 = 0;
          *((void *)v20 + 26) = 0;
          *((void *)v20 + 27) = -1;
          *((_WORD *)v20 + 114) = 2;
          sub_1D0D185B8(a1, v25, v26, v11, *v27, (uint64_t)(v20 + 200));
        }
        int v91 = 0;
        v90[0] = 0;
        v90[1] = 0;
        v90[2] = -1;
        __int16 v92 = 0;
        *((_DWORD *)v20 + 56) = 0;
        void *v42 = 0;
        *((void *)v20 + 26) = 0;
        *((void *)v20 + 27) = -1;
        *((_WORD *)v20 + 114) = 0;
        sub_1D0D1507C(a1, v25, v26, v11, *v27, (uint64_t)(v20 + 200), (uint64_t)v90, 0, 0);
        char v89 = 0;
        (*(void (**)(void))(**(void **)(a1 + 944) + 88))(*(void *)(a1 + 944));
        sub_1D0D1076C(a1, v25, v26, *v27, 1, 0, *(unsigned char *)(a1 + 29745), 1, 0);
        unsigned int v66 = *v27;
        *((_DWORD *)v66 + 4) = *((_DWORD *)*v27 + 5);
        sub_1D0D157FC(a1, v25, v26, v11, a8, (int *)v66 + 4, &v89, v67);
        *((_DWORD *)v20 + 56) += (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 80))(*(void *)(a1 + 944));
        (*(void (**)(void))(**(void **)(a1 + 944) + 96))(*(void *)(a1 + 944));
        sub_1D0D182CC(a1, v25, v26, v11, (uint64_t)*v27);
        *((void *)v20 + 27) = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)v20 + 114) + 1152)
                                * (unint64_t)*((unsigned int *)v20 + 56)) >> (8 * (*((_WORD *)v20 + 114) == 0)))
                              + *((void *)v20 + 25);
        int v9 = v85;
      }
    }
  }
  else
  {
    int v59 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 269);
    uint64_t v60 = *(unsigned __int8 *)(v19 + 10) - 1;
    BOOL v61 = v59 <= v11;
    int v62 = *((_DWORD *)v20 + 48) + byte_1D0DA5D88[3 * *(unsigned __int8 *)(*(void *)(a1 + 14840) + 58) + v60];
    *((_DWORD *)v20 + 48) = v62;
    int v63 = byte_1D0DA5D91[12 * (v59 == v11) + 4 * v60 + (((unint64_t)(unsigned __int16)*v80 >> 4) & 7)];
    if (v61) {
      int v64 = v62;
    }
    else {
      int v64 = v62 + 1;
    }
    unsigned int v65 = v64 + v63;
    *((_DWORD *)v20 + 48) = v65;
    *((void *)v20 + 23) = ((*(unsigned __int16 *)(a1 + 2 * *((__int16 *)v20 + 98) + 1152) * (unint64_t)v65) >> (8 * (*((_WORD *)v20 + 98) == 0)))
                          + *((void *)v20 + 21);
  }
  BOOL result = sub_1D0D18C68(a1, (void ***)v27, a6, *(unsigned __int8 *)(a1 + 196));
  if (result && !*(unsigned char *)(a1 + 196) && (int)v15 >= 8)
  {
    uint64_t v69 = 0;
    unint64_t v70 = (unint64_t)*(unsigned __int8 *)*a6 >> 3;
    int v71 = (char *)(*a6)[11]
        + 2 * ((uint64_t)((int)v25 - *((_DWORD *)*a6 + 1)) >> 3)
        + 2 * (int)v70 * (uint64_t)(((int)v26 - *((_DWORD *)*a6 + 2)) >> 3);
    uint64_t v72 = 2 * v70;
    int v73 = v71;
    do
    {
      int v74 = v73;
      uint64_t v75 = v15 >> 3;
      do
      {
        *v74++ = *v71;
        --v75;
      }
      while (v75);
      ++v69;
      int v73 = (_WORD *)((char *)v73 + v72);
    }
    while (v69 != v15 >> 3);
  }
  uint64_t v76 = a1 + 4 * v11;
  int v77 = *(_DWORD *)(v76 + 27648) & ~(1 << v9);
  if (!v9) {
    v77 &= ~0x100u;
  }
  *(_DWORD *)(v76 + 27648) = v77;
  *(_DWORD *)(v76 + 27668) |= 1 << v9;
  return result;
}

uint64_t sub_1D0D1D1D0(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, uint64_t a7, int a8, int a9, unsigned int a10, uint64_t a11, char a12, unsigned __int8 a13)
{
  int v13 = a8;
  int v16 = a4;
  uint64_t v17 = a3;
  uint64_t v18 = a2;
  uint64_t v19 = result;
  int v20 = a13;
  char v21 = a9;
  unsigned int v22 = a10;
  unsigned int v137 = 0;
  v135[0] = 0;
  v135[1] = 0;
  unint64_t v136 = -1;
  __int16 v138 = 2;
  DWORD2(v134) = 0;
  long long v133 = 0uLL;
  *(void *)&long long v134 = -1;
  WORD6(v134) = 2;
  int v23 = *a5;
  int v117 = *((_DWORD *)v23 + 1);
  int v119 = *((_DWORD *)v23 + 2);
  uint64_t v24 = *((void *)v23 + 12);
  unint64_t v118 = *v23;
  char v131 = 3;
  __int16 v130 = -1;
  BYTE10(v128) = 3;
  if (a9) {
    BOOL v25 = 1;
  }
  else {
    BOOL v25 = *(unsigned char *)(result + 196) == 0;
  }
  int v26 = !v25;
  WORD4(v128) = -1;
  int v125 = v26;
  if (a12)
  {
    if (v26)
    {
      if (*(unsigned char *)(*(void *)(result + 968) + 542))
      {
        if (sub_1D0D1DF94(result, a2, a3, a4, v23, a7, a8, (uint64_t)&v129, (uint64_t)v135)) {
          char v27 = *(unsigned char *)(v19 + 812) != 0;
        }
        else {
          char v27 = 1;
        }
        int v64 = v18 - *((_DWORD *)*a5 + 1);
        int v65 = v17 - *((_DWORD *)*a5 + 2);
        unint64_t v66 = **a5;
        uint64_t v67 = ((uint64_t)v64 >> 3) + (int)(v66 >> 3) * (uint64_t)(v65 >> 3);
        uint64_t v68 = *((void *)*a5 + 12) + 16 * (((uint64_t)v64 >> 2) + (int)(v66 >> 2) * (uint64_t)(v65 >> 2));
        LOBYTE(v64) = v131;
        *(_WORD *)(*((void *)*a5 + 11) + 2 * v67) = *(_WORD *)(*((void *)*a5 + 11) + 2 * v67) & 0xFF73 | ((v131 == 2) << 7);
        LOBYTE(v65) = *(unsigned char *)(v68 + 11);
        *(unsigned char *)(v68 + 10) = v64;
        LOBYTE(v64) = v65 & 0xB0 | v132 & 0x4E;
        *(unsigned char *)(v68 + 8) = v130 & 0xF0;
        *(void *)uint64_t v68 = v129;
        *(unsigned char *)(v68 + 9) = HIBYTE(v130) & 0xF0;
        *(unsigned char *)(v68 + 11) = v64 | 1;
        sub_1D0D1886C(v19, v18, v17, v16, a5, a6, a7, v13, a10, v27, 0, 0);
      }
      else
      {
        sub_1D0D17AD8(result, a2, a3, a4, a5, a6, a7, a8, a10, 0);
      }
      BOOL result = sub_1D0D1E71C(v19, v16, *((unsigned __int8 *)(*a6)[12]+ 16 * ((uint64_t)((int)v18 - *((_DWORD *)*a6 + 1)) >> 2)+ 16 * ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * (((int)v17 - *((_DWORD *)*a6 + 2)) >> 2)+ 10) == 2);
      int v26 = v125;
      if (!a13) {
        goto LABEL_50;
      }
      goto LABEL_14;
    }
    uint64_t v28 = v24;
    BOOL result = sub_1D0D1DF94(result, a2, a3, a4, v23, a7, a8, (uint64_t)&v129, (uint64_t)v135);
    int v20 = a13;
    int v26 = 0;
    int v13 = a8;
    unsigned int v22 = a10;
    int v16 = a4;
    uint64_t v18 = a2;
    uint64_t v24 = v28;
    char v21 = a9;
    uint64_t v17 = a3;
    unint64_t v136 = ((*(unsigned __int16 *)(v19 + 2 * v138 + 1152) * (unint64_t)v137) >> (8 * (v138 == 0))) + v135[0];
  }
  if (!v20)
  {
LABEL_50:
    uint64_t v69 = v24;
    unsigned int v124 = v13;
    uint64_t v70 = v19 + 14266;
    long long v128 = *((_OWORD *)(*a6)[12]
           + ((uint64_t)((int)v18 - *((_DWORD *)*a6 + 1)) >> 2)
           + ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * (((int)v17 - *((_DWORD *)*a6 + 2)) >> 2));
    int v71 = *a5;
    uint64_t v72 = (unsigned __int8 *)*((void *)*a5 + 17);
    uint64_t v73 = *v72;
    uint64_t v122 = v18;
    uint64_t v115 = **((void **)v72 + 7)
         + (*((void *)v72 + 8) - *((int *)*a5 + 1) + (int)v18 + v73 * ((int)v17 - (uint64_t)*((int *)*a5 + 2)))
         * *(int *)(*((void *)v72 + 7) + 16);
    uint64_t v74 = *(void *)(v19 + 14840);
    int v112 = *(char *)(v74 + 516);
    int v114 = *(char *)(v74 + 517);
    unint64_t v75 = (unint64_t)BYTE8(v128) >> 4;
    unsigned int v76 = BYTE9(v128);
    unint64_t v77 = (unint64_t)BYTE9(v128) >> 4;
    LOBYTE(v140) = BYTE8(v128) >> 4;
    if (v75 != 15)
    {
      sub_1D0D0CEB0(v19, v122, a3, v71, 0, (unint64_t)BYTE8(v128) >> 4, a7, v124, (__int32 *)(v19 + 52 * v75 + 25128));
      uint64_t v70 = v19 + 14266;
      HIDWORD(v140) = v128;
      uint64_t v78 = *(void *)(*(void *)(v19 + 14520) + 16 * v75 + 1672);
      *(unsigned char *)(v19 + 14266) = BYTE8(v128) >> 4;
      *(_DWORD *)(v19 + 14268) = *(_DWORD *)(v78 + 520);
      *(_DWORD *)(v19 + 14276) = *(_DWORD *)(v78 + 524);
    }
    unsigned int v79 = v76 >> 4;
    BYTE1(v140) = v79;
    if (v77 != 15)
    {
      uint64_t v80 = v70;
      unsigned int v81 = (__int32 *)(v19 + 52 * v77 + 25336);
      sub_1D0D0CEB0(v19, v122, a3, v71, 1u, v77, a7, v124, v81);
      if (v75 == 15 || !*(unsigned char *)(*(void *)(v19 + 14840) + 552))
      {
        __int32 v82 = DWORD1(v128);
      }
      else
      {
        __int32 v82 = v81[((unint64_t)BYTE11(v128) >> 5) & 1];
        DWORD1(v128) = v82;
      }
      LODWORD(v141) = v82;
      uint64_t v83 = *(void *)(*(void *)(v19 + 14520) + 16 * v77 + 1928);
      *(unsigned char *)(v80 + 1) = v79;
      *(_DWORD *)(v19 + 14272) = *(_DWORD *)(v83 + 520);
      *(_DWORD *)(v19 + 14280) = *(_DWORD *)(v83 + 524);
    }
    DWORD2(v143) = 0;
    long long v142 = 0uLL;
    *(void *)&long long v143 = -1;
    WORD6(v143) = 2;
    sub_1D0CE6CF0((void *)(v19 + 1576), (char *)&v140, v122, a3, a7, v124, v73, v115);
    if ((int)v124 >= (int)a7) {
      unsigned int v84 = a7;
    }
    else {
      unsigned int v84 = v124;
    }
    BOOL result = (*(uint64_t (**)(uint64_t, void, uint64_t))(v19 + 8 * __clz(__rbit32(v84)) + 1240))(a7, v124, **((void **)v71 + 3)+ (*((void *)v71 + 4) - *((int *)v71 + 1) + (int)v122 + ((int)a3 - (uint64_t)*((int *)v71 + 2)) * v71[1])* *(int *)(*((void *)v71 + 3) + 16));
    *(void *)&long long v142 = v142 + result;
    if ((BYTE11(v128) & 0x40) != 0) {
      int v85 = 2;
    }
    else {
      int v85 = 3;
    }
    if (*(unsigned char *)(v19 + 204)) {
      int v86 = v85;
    }
    else {
      int v86 = 1;
    }
    unsigned int v87 = DWORD2(v143) + v86;
    DWORD2(v143) = v87;
    if (v75 != 15)
    {
      BOOL result = sub_1D0CE6B7C(v19 + 52 * v75 + 25128, (uint64_t)&v140, 0, 0xFFFFFFFFLL);
      BYTE11(v128) = (16 * (result & 1)) | BYTE11(v128) & 0xEF;
      if (v112 - 1 == v75) {
        int v88 = v75;
      }
      else {
        int v88 = v75 + 1;
      }
      unsigned int v87 = v88 + DWORD2(v143);
      DWORD2(v143) = v87;
    }
    uint64_t v24 = v69;
    if (v77 != 15)
    {
      if (v75 == 15 || !*(unsigned char *)(*(void *)(v19 + 14840) + 552))
      {
        BOOL result = sub_1D0CE6B7C(v19 + 52 * v77 + 25336, (uint64_t)&v140, 1u, 0xFFFFFFFFLL);
        BYTE11(v128) = (32 * (result & 1)) | BYTE11(v128) & 0xDF;
        unsigned int v87 = DWORD2(v143);
      }
      if (v114 - 1 == v77) {
        int v89 = v77;
      }
      else {
        int v89 = v77 + 1;
      }
      v87 += v89;
      DWORD2(v143) = v87;
    }
    int v13 = v124;
    LODWORD(v18) = v122;
    *(void *)&long long v143 = ((*(unsigned __int16 *)(v19 + 2 * SWORD6(v143) + 1152) * (unint64_t)v87) >> (8 * (WORD6(v143) == 0)))
                     + v142;
    long long v133 = v142;
    long long v134 = v143;
    LODWORD(v17) = a3;
    goto LABEL_84;
  }
LABEL_14:
  if (((*(_DWORD *)(v19 + 4 * v16 + 27648) >> v21) & 1) == 0) {
    goto LABEL_85;
  }
  if (v26)
  {
    uint64_t v123 = a6;
    uint64_t v116 = v24;
    sub_1D0CE0524(v19 + 1592, v18, v17, a7);
    uint64_t v32 = *a5;
    uint64_t v111 = (int)v18 - (uint64_t)*((int *)*a5 + 1);
    uint64_t v33 = (int)v17 - (uint64_t)*((int *)*a5 + 2);
    unint64_t v34 = **a5;
    uint64_t v35 = *((void *)*a5 + 12) + 16 * (((uint64_t)(int)v111 >> 2) + (int)(v34 >> 2) * (uint64_t)((int)v33 >> 2));
    uint64_t v120 = (_WORD *)(*((void *)*a5 + 11) + 2
                                           * (((uint64_t)(int)v111 >> 3) + (int)(v34 >> 3) * (uint64_t)((int)v33 >> 3)));
    uint64_t v36 = (unsigned __int8 *)*((void *)*a5 + 17);
    uint64_t v110 = *v36;
    uint64_t v37 = (uint64_t *)*((void *)v36 + 7);
    uint64_t v107 = *v37;
    uint64_t v108 = *((int *)v37 + 4);
    uint64_t v109 = v36[1];
    uint64_t v38 = (uint64_t *)*((void *)v36 + 9);
    uint64_t v103 = *((void *)v36 + 8);
    uint64_t v104 = *((void *)v36 + 10);
    uint64_t v105 = *v38;
    uint64_t v106 = *((int *)v38 + 4);
    BOOL v113 = sub_1D0D1E780(v19, v18, v17, v16, *a5, a7, v13, v35, (uint64_t)&v140, v22);
    unsigned int v39 = *v32;
    if (v13 >= 4)
    {
      uint64_t v40 = 0;
      LODWORD(v41) = (int)a7 >> 2;
      if ((int)a7 >> 2 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = v41;
      }
      int v42 = (void *)v35;
      do
      {
        int v43 = v42;
        uint64_t v44 = v41;
        if ((int)a7 >= 4)
        {
          do
          {
            uint64_t v45 = *(void *)v35;
            *(void *)((char *)v43 + 6) = *(void *)(v35 + 6);
            *int v43 = v45;
            v43 += 2;
            --v44;
          }
          while (v44);
        }
        ++v40;
        v42 += 2 * (v39 >> 2);
      }
      while (v40 != v13 >> 2);
      unsigned int v39 = *v32;
    }
    sub_1D0D0BFA0((void *)v19, v120, v16, 0, 0, v39 >> 3, *((_DWORD *)v32 + 3));
    if (*(unsigned char *)(*(void *)(v19 + 968) + 551)
      && (unint64_t v46 = (unint64_t)(*v123)[12]
              + 16 * ((uint64_t)((int)v18 - *((_DWORD *)*v123 + 1)) >> 2)
              + 16 * ((unint64_t)*(unsigned __int8 *)*v123 >> 2) * (((int)v17 - *((_DWORD *)*v123 + 2)) >> 2),
          ((*(unsigned __int8 *)(v46 + 11) ^ *(unsigned __int8 *)(v35 + 11)) & 0x40) == 0)
      && (int v47 = *(unsigned __int8 *)(v35 + 8) >> 4, v47 == *(unsigned __int8 *)(v46 + 8) >> 4)
      && (v47 == 15 || *(_DWORD *)v35 == *(_DWORD *)v46)
      && (int v48 = *(unsigned __int8 *)(v35 + 9) >> 4, v48 == *(unsigned __int8 *)(v46 + 9) >> 4)
      && (v48 == 15 || *(_DWORD *)(v35 + 4) == *(_DWORD *)(v46 + 4))
      && (int v121 = sub_1D0D2066C(v19, v18, v17, v16, v32),
          v121 >= (int)sub_1D0D2066C(v19, v18, v17, v16, (unsigned __int8 *)*v123)))
    {
      BOOL v51 = 0;
      int v53 = (unsigned char *)(v19 + 1592);
      uint64_t v24 = v116;
    }
    else
    {
      sub_1D0D57784(*(void *)(v19 + 14840), (unsigned int *)v35, v18, v17, a7, a7, v110, v107 + (v103 + v111 + v110 * v33) * v108, 2 * v109, v105 + (v104 + v111 + 2 * (int)v109 * (uint64_t)((int)v33 >> 1)) * v106);
      if (!*(unsigned char *)(v19 + 29745))
      {
        DWORD2(v142) = 0;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        *(void *)&long long v142 = -1;
        WORD6(v142) = 2;
        sub_1D0D185B8(v19, v18, v17, v16, v32, (uint64_t)&v140);
      }
      DWORD2(v142) = 0;
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      *(void *)&long long v142 = -1;
      WORD6(v142) = 0;
      *((_DWORD *)v32 + 56) = 0;
      *((void *)v32 + 25) = 0;
      *((void *)v32 + 26) = 0;
      *((void *)v32 + 27) = -1;
      *((_WORD *)v32 + 114) = 0;
      sub_1D0D1507C(v19, v18, v17, v16, v32, (uint64_t)(v32 + 200), (uint64_t)&v140, 0, 0);
      char v139 = 0;
      (*(void (**)(void))(**(void **)(v19 + 944) + 88))(*(void *)(v19 + 944));
      sub_1D0D1076C(v19, v18, v17, v32, 1, 0, *(unsigned char *)(v19 + 29745), 1, 0);
      *((_DWORD *)v32 + 4) = *((_DWORD *)v32 + 5);
      sub_1D0D157FC(v19, v18, v17, v16, v22, (int *)v32 + 4, &v139, v49);
      *((_DWORD *)v32 + 56) += (*(uint64_t (**)(void))(**(void **)(v19 + 944) + 80))(*(void *)(v19 + 944));
      (*(void (**)(void))(**(void **)(v19 + 944) + 96))(*(void *)(v19 + 944));
      sub_1D0D182CC(v19, v18, v17, v16, (uint64_t)v32);
      *((void *)v32 + 27) = ((*(unsigned __int16 *)(v19 + 2 * *((__int16 *)v32 + 114) + 1152)
                              * (unint64_t)*((unsigned int *)v32 + 56)) >> (8 * (*((_WORD *)v32 + 114) == 0)))
                            + *((void *)v32 + 25);
      BOOL v50 = sub_1D0D18C68(v19, (void ***)a5, v123, 1u);
      BOOL v51 = 0;
      int v52 = *v123;
      int v53 = (unsigned char *)(v19 + 1592);
      uint64_t v24 = v116;
      if (v50 && v113)
      {
        int v54 = v18 - *((_DWORD *)v52 + 1);
        int v55 = a3 - *((_DWORD *)v52 + 2);
        uint64_t v56 = (unsigned __int8 *)v52[17];
        int v57 = *(unsigned __int8 *)(*((void *)v56 + 1)
                                 + ((uint64_t)v54 >> 2)
                                 + ((unint64_t)*v56 >> 2) * (v55 >> 2));
        if (!*(unsigned char *)(v19 + 8))
        {
          unint64_t v58 = ((uint64_t)v54 >> 3) + ((unint64_t)v56[1] >> 2) * (v55 >> 3);
          v57 |= *(unsigned __int8 *)(*((void *)v56 + 2) + v58) | *(unsigned __int8 *)(*((void *)v56 + 3) + v58);
        }
        BOOL v51 = v57 == 0;
      }
      *((unsigned char *)v52 + 232) = v51;
    }
    if (*v53) {
      sub_1D0CE02D8(v19 + 144 * *(int *)(v19 + 1648) + 1656, *(void *)(v19 + 14256));
    }
    if (v51) {
      int v59 = *(unsigned char *)(*(void *)(v19 + 968) + 527) & 1;
    }
    else {
      int v59 = 0;
    }
    BOOL result = sub_1D0D1E71C(v19, v16, v59);
    uint64_t v60 = 0;
    unsigned int v61 = 0;
    char v62 = 0;
    uint64_t v63 = 2;
    LODWORD(v17) = a3;
  }
  else
  {
    BOOL result = sub_1D0D1E780(v19, v18, v17, v16, *a5, a7, v13, (uint64_t)&v128, (uint64_t)&v133, v22);
    uint64_t v60 = v133;
    unsigned int v61 = DWORD2(v134);
    char v62 = 8 * (WORD6(v134) == 0);
    uint64_t v63 = SWORD6(v134);
  }
  *(void *)&long long v134 = ((v61 * (unint64_t)*(unsigned __int16 *)(v19 + 2 * v63 + 1152)) >> v62) + v60;
LABEL_84:
  LOBYTE(v26) = v125;
LABEL_85:
  if ((v26 & 1) == 0)
  {
    uint64_t v90 = (uint64_t *)(v24
                    + 16 * (((uint64_t)((int)v18 - v117) >> 2) + (int)(v118 >> 2) * (uint64_t)(((int)v17 - v119) >> 2)));
    BOOL v91 = v136 >= (unint64_t)v134;
    if (v136 >= (unint64_t)v134) {
      __int16 v92 = (uint64_t *)&v133;
    }
    else {
      __int16 v92 = v135;
    }
    uint64_t v93 = *v92;
    uint64_t v94 = (uint64_t *)&v128;
    if (v136 < (unint64_t)v134) {
      uint64_t v94 = &v129;
    }
    *(void *)a11 += v93;
    uint64_t v95 = (unsigned int *)&v134 + 2;
    if (!v91) {
      uint64_t v95 = &v137;
    }
    *(_DWORD *)(a11 + 24) += *v95;
    *(_OWORD *)uint64_t v90 = *(_OWORD *)v94;
    if (v13 >= 4)
    {
      uint64_t v96 = 0;
      LODWORD(v97) = (int)a7 >> 2;
      if ((int)a7 >> 2 <= 1) {
        uint64_t v97 = 1;
      }
      else {
        uint64_t v97 = v97;
      }
      unint64_t v98 = 16 * ((unint64_t)**a5 >> 2);
      uint64_t v99 = (void *)(v24
                     + 16 * (((uint64_t)((int)v18 - v117) >> 2) + (int)(v118 >> 2) * (uint64_t)(((int)v17 - v119) >> 2)));
      do
      {
        int v100 = v99;
        uint64_t v101 = v97;
        if ((int)a7 >= 4)
        {
          do
          {
            uint64_t v102 = *v90;
            *(void *)((char *)v100 + 6) = *(uint64_t *)((char *)v90 + 6);
            *int v100 = v102;
            v100 += 2;
            --v101;
          }
          while (v101);
        }
        ++v96;
        uint64_t v99 = (void *)((char *)v99 + v98);
      }
      while (v96 != v13 >> 2);
    }
  }
  return result;
}

uint64_t sub_1D0D1DF94(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a1 + 25064;
  int v12 = (unsigned __int8 *)*((void *)a5 + 17);
  int v13 = (uint64_t *)*((void *)v12 + 7);
  if (*(unsigned char *)(a1 + 27684)) {
    BOOL v62 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4 == *(unsigned __int8 *)(*(void *)(a1 + 14848)
  }
                                                                                            + 2112);
  else {
    BOOL v62 = 0;
  }
  uint64_t v14 = *v12;
  uint64_t v15 = *((int *)a5 + 1);
  uint64_t v16 = *((int *)a5 + 2);
  uint64_t v17 = *((void *)v12 + 8);
  uint64_t v18 = *((int *)v13 + 4);
  uint64_t v19 = *v13;
  int v74 = *(unsigned __int8 *)(*(void *)(a1 + 14840) + 558);
  unint64_t v63 = *a5;
  uint64_t v64 = *((void *)a5 + 11);
  sub_1D0D0CF98(a1, a2, a3, a5, a6, a7, a1 + 25064);
  if (*(unsigned char *)(a1 + 812))
  {
    *(unsigned char *)(a8 + 10) = 2;
    *(unsigned char *)(a8 + 11) &= 0xF0u;
    if (*(unsigned char *)v11 != 15
      && *(unsigned char *)(v11 + 1) != 15
      && (a6 < 8 || a7 <= 7)
      && *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4 == 3)
    {
      *(unsigned char *)(v11 + 1) = 15;
      *(_DWORD *)(v11 + 8) = 0;
    }
    *(_DWORD *)a8 = *(_DWORD *)(v11 + 4);
    *(unsigned char *)(a8 + 8) = 16 * *(unsigned char *)v11;
    *(_DWORD *)(a8 + 4) = *(_DWORD *)(v11 + 8);
    *(unsigned char *)(a8 + 9) = 16 * *(unsigned char *)(v11 + 1);
    *(void *)a9 = 0;
    *(_DWORD *)(a9 + 24) = 0;
    *(_DWORD *)(a1 + 4 * a4 + 27648) = 0;
  }
  else
  {
    uint64_t v21 = v19 + (v17 + (int)a2 - v15 + v14 * ((int)a3 - v16)) * v18;
    uint64_t v22 = *(unsigned __int8 *)(v11 + 60);
    uint64_t v23 = a6;
    if (*(unsigned char *)(a1 + 204) && (a6 < 8 || a7 <= 7))
    {
      BOOL v24 = *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4 != 3 || v22 == 0;
      if (!v24)
      {
        uint64_t v25 = v11;
        uint64_t v26 = *(unsigned __int8 *)(v11 + 60);
        do
        {
          if (*(unsigned char *)v25 != 15 && *(unsigned char *)(v25 + 1) != 15)
          {
            *(unsigned char *)(v25 + 1) = 15;
            *(_DWORD *)(v25 + 8) = 0;
          }
          v25 += 12;
          --v26;
        }
        while (v26);
      }
    }
    uint64_t v73 = v14;
    int v60 = a3 - v16;
    int v61 = a2 - v15;
    if (v22)
    {
      uint64_t v27 = 0;
      unsigned int v76 = (unsigned char *)(a1 + 14266);
      unint64_t v77 = (void *)(a1 + 1576);
      if (a7 >= a6) {
        unsigned int v28 = a6;
      }
      else {
        unsigned int v28 = a7;
      }
      uint64_t v70 = (4 - v74);
      int v71 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8 * __clz(__rbit32(v28)) + 1240);
      int v29 = (_DWORD *)(v11 + 8);
      int v68 = -1;
      int v69 = 0;
      unint64_t v75 = -1;
      uint64_t v67 = -1;
      uint64_t v30 = v21;
      uint64_t v72 = v22;
      do
      {
        if (!sub_1D0D187D0(v11, v27))
        {
          uint64_t v31 = *((char *)v29 - 8);
          int v32 = *((unsigned __int8 *)v29 - 8);
          if (!*(unsigned char *)(*(void *)(a1 + 968) + 232)) {
            goto LABEL_38;
          }
          if (v32 == 15) {
            goto LABEL_37;
          }
          uint64_t v33 = *(void *)(*(void *)(a1 + 14520) + 16 * v31 + 1672);
          *unsigned int v76 = v32;
          *(_DWORD *)(a1 + 14268) = *(_DWORD *)(v33 + 520);
          *(_DWORD *)(a1 + 14276) = *(_DWORD *)(v33 + 524);
          int v82 = *(v29 - 1);
          int v34 = v82;
          sub_1D0CE65EC((uint64_t)v77, a2, a3, a6, a7, 0, (__int16 *)&v82);
          BOOL v24 = v82 == v34;
          uint64_t v23 = a6;
          if (v24)
          {
LABEL_37:
            uint64_t v35 = *((char *)v29 - 7);
            if (v35 == 15) {
              goto LABEL_38;
            }
            uint64_t v36 = *(void *)(*(void *)(a1 + 14520) + 16 * v35 + 1928);
            *(unsigned char *)(a1 + 14267) = *((unsigned char *)v29 - 7);
            *(_DWORD *)(a1 + 14272) = *(_DWORD *)(v36 + 520);
            *(_DWORD *)(a1 + 14280) = *(_DWORD *)(v36 + 524);
            int v82 = *v29;
            int v37 = v82;
            sub_1D0CE65EC((uint64_t)v77, a2, a3, a6, a7, 1u, (__int16 *)&v82);
            BOOL v24 = v82 == v37;
            uint64_t v23 = a6;
            if (v24)
            {
LABEL_38:
              int v85 = *(v29 - 1);
              char v83 = v32;
              if (v32 != 15)
              {
                uint64_t v38 = *(void *)(*(void *)(a1 + 14520) + 16 * v31 + 1672);
                *unsigned int v76 = v32;
                *(_DWORD *)(a1 + 14268) = *(_DWORD *)(v38 + 520);
                *(_DWORD *)(a1 + 14276) = *(_DWORD *)(v38 + 524);
              }
              if (*(unsigned char *)(a1 + 204))
              {
                int v86 = *v29;
                char v84 = *((unsigned char *)v29 - 7);
                if (v84 != 15)
                {
                  uint64_t v39 = *(void *)(*(void *)(a1 + 14520) + 16 * v84 + 1928);
                  *(unsigned char *)(a1 + 14267) = v84;
                  *(_DWORD *)(a1 + 14272) = *(_DWORD *)(v39 + 520);
                  *(_DWORD *)(a1 + 14280) = *(_DWORD *)(v39 + 524);
                }
                int v40 = a2;
                uint64_t v41 = v23;
                uint64_t v42 = v23;
                uint64_t v43 = a7;
                sub_1D0CE6CF0(v77, &v83, a2, a3, v41, a7, v73, v30);
              }
              else
              {
                int v40 = a2;
                uint64_t v44 = v23;
                uint64_t v42 = v23;
                uint64_t v43 = a7;
                sub_1D0CE32EC((uint64_t)v77, (uint64_t)&v83, a2, a3, v44, a7, v73, v30, 0);
              }
              unsigned int v45 = (*v71)(v42, v43, **((void **)a5 + 3)+ (*((void *)a5 + 4) - *((int *)a5 + 1) + v40 + ((int)a3 - (uint64_t)*((int *)a5 + 2)) * a5[1])* *(int *)(*((void *)a5 + 3) + 16));
              if (v70 == v27) {
                uint64_t v46 = v27;
              }
              else {
                uint64_t v46 = v27 + 1;
              }
              uint64_t v23 = v42;
              uint64_t v22 = v72;
              if (*(unsigned __int16 *)(a1 + 1156) * v46 + (unint64_t)v45 < v75)
              {
                int v68 = v46;
                int v69 = v27;
                unint64_t v75 = *(unsigned __int16 *)(a1 + 1156) * v46 + v45;
                uint64_t v67 = v45;
              }
            }
          }
        }
        ++v27;
        v29 += 3;
      }
      while (v22 != v27);
    }
    else
    {
      int v68 = -1;
      int v69 = 0;
      uint64_t v67 = -1;
      unint64_t v75 = -1;
      uint64_t v30 = v21;
    }
    *(void *)a9 = v67;
    *(_DWORD *)(a9 + 24) = v68 + 1;
    *(unsigned char *)(a8 + 10) = 3;
    char v47 = *(unsigned char *)(a8 + 11) & 0xF0 | (2 * (v69 & 7)) | 1;
    *(unsigned char *)(a8 + 11) = v47;
    int v48 = (unsigned __int8 *)(v11 + 12 * v69);
    *(_DWORD *)a8 = *((_DWORD *)v48 + 1);
    int v49 = *v48;
    *(unsigned char *)(a8 + 8) = 16 * v49;
    *(_DWORD *)(a8 + 4) = *((_DWORD *)v48 + 2);
    LODWORD(v48) = v48[1];
    *(unsigned char *)(a8 + 9) = 16 * (_BYTE)v48;
    int v50 = ~v49 & 0xF;
    if ((~v48 & 0xF) == 0 || v50 == 0) {
      char v52 = 0;
    }
    else {
      char v52 = 64;
    }
    *(unsigned char *)(a8 + 11) = v52 | v47 & 0xBF;
    uint64_t v53 = *(void *)(a1 + 968);
    if (!*(unsigned char *)(v53 + 85)
      || (*(_WORD *)(v64 + 2 * (((uint64_t)v61 >> 3) + (int)(v63 >> 3) * (uint64_t)(v60 >> 3))) & 0x70) != 0)
    {
      return 0;
    }
    char v54 = v62;
    if ((*(_DWORD *)(a1 + 4 * a4 + 27648) & 0x100) == 0) {
      char v54 = 1;
    }
    if (v54) {
      return 0;
    }
    int v55 = *(unsigned __int8 *)(v53 + 533);
    uint64_t v56 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    int v57 = a3 - *((_DWORD *)a5 + 2);
    if (v55)
    {
      if (v75 > (unsigned __int16)a12344566777777[(*(__int16 *)(*((void *)a5 + 11)
                                                               + 2
                                                               * (((uint64_t)(int)v56 >> 3)
                                                                + ((unint64_t)*a5 >> 3) * (v57 >> 3))) >> 9)
                                                 + 12] << (*(unsigned char *)(*(void *)(a1 + 14848) + 2113) - a4))
        return 0;
    }
    uint64_t v59 = *((void *)a5 + 17);
    sub_1D0D57784(*(void *)(a1 + 14840), (unsigned int *)a8, a2, a3, v23, v23, v73, v30, 2 * *(unsigned __int8 *)(v59 + 1), **(void **)(v59 + 72)+ (*(void *)(v59 + 80) + v56 + 2 * *(unsigned __int8 *)(v59 + 1) * (uint64_t)(v57 >> 1))* *(int *)(*(void *)(v59 + 72) + 16));
    sub_1D0D3CA98(a1 + 14912, a1, a2, a3, a4, a5);
    if (sub_1D0D45CC4((void *)(a1 + 14912), a2, a3, 0, a5, *(unsigned __int8 *)(*(void *)(a1 + 14848) + 2113) - a4))
    {
      *(unsigned char *)(a8 + 10) = 2;
      *(unsigned char *)(a8 + 11) &= ~1u;
      --*(_DWORD *)(a9 + 24);
      uint64_t v20 = 1;
      sub_1D0D1E71C(a1, a4, 1);
      return v20;
    }
  }
  return 1;
}

uint64_t sub_1D0D1E71C(uint64_t result, int a2, int a3)
{
  if (a3)
  {
    if ((*(unsigned char *)(*(void *)(result + 968) + 529) & 4) != 0)
    {
      uint64_t v3 = a2;
      *(_DWORD *)(result + 4 * a2 + 27648) = 0;
      int v4 = 15;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)(result + 968) + 529) & 2) == 0) {
        return result;
      }
      uint64_t v3 = a2;
      *(_DWORD *)(result + 4 * a2 + 27648) &= 0xFFFFFFF1;
      int v4 = 14;
    }
    *(_DWORD *)(result + 4 * v3 + 27668) |= v4;
  }
  return result;
}

BOOL sub_1D0D1E780(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v10 = a6;
  uint64_t v11 = a1;
  uint64_t v364 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 14840);
  int v13 = *(char *)(v12 + 517);
  uint64_t v236 = *(char *)(v12 + 516);
  v363[0] = *(char *)(v12 + 516);
  v363[1] = v13;
  int v228 = v13;
  uint64_t v232 = a5[1];
  uint64_t v14 = (unsigned __int8 *)*((void *)a5 + 17);
  uint64_t v308 = *v14;
  int v15 = *((_DWORD *)a5 + 1);
  int v16 = *((_DWORD *)a5 + 2);
  uint64_t v17 = a3;
  uint64_t v18 = (int)(a2 - v15);
  uint64_t v20 = (uint64_t *)*((void *)v14 + 7);
  uint64_t v19 = *((void *)v14 + 8);
  uint64_t v21 = *((int *)v20 + 4);
  uint64_t v22 = *v20;
  uint64_t v23 = sub_1D0CE65AC;
  if (a6 == a7)
  {
    uint64_t v23 = sub_1D0CE65AC;
    if (*(unsigned char *)(v11 + 1592)) {
      uint64_t v23 = sub_1D0CE6524;
    }
  }
  int v24 = 0;
  unint64_t v242 = 0;
  *(void *)(v11 + 14824) = v23;
  *(void *)(v11 + 14832) = 0;
  uint64_t v25 = v19 + (int)(a2 - v15);
  *(void *)(v11 + 14432) = **((void **)a5 + 3)
                           + (*((void *)a5 + 4) + v18 + ((int)a3 - v16) * (uint64_t)(int)v232)
                           * *(int *)(*((void *)a5 + 3) + 16);
  *(void *)(v11 + 14440) = v232;
  int v235 = *(unsigned __int8 *)(v11 + 204);
  uint64_t v26 = *(unsigned char **)(v11 + 968);
  char v239 = v26[237];
  int v251 = v26[238];
  int v248 = *(unsigned __int8 *)(v12 + 5184);
  int v234 = *(unsigned __int8 *)(v12 + 552);
  int v316 = 0;
  int v315 = 0;
  memset(v362, 0, sizeof(v362));
  uint64_t v361 = 0;
  uint64_t v27 = *(void *)(v11 + 1576);
  int v353 = 0;
  v351[1] = 0;
  v351[0] = 0;
  unint64_t v352 = -1;
  unint64_t v357 = -1;
  __int16 v354 = 2;
  int v358 = 0;
  uint64_t v356 = 0;
  uint64_t v355 = 0;
  __int16 v359 = 2;
  long long v336 = 0uLL;
  long long v334 = 0uLL;
  uint64_t v335 = 0;
  long long v333 = 0uLL;
  long long v331 = 0uLL;
  uint64_t v332 = 0;
  uint64_t v330 = 0;
  uint64_t v329 = 0;
  uint64_t v327 = 0;
  uint64_t v326 = 0;
  uint64_t v328 = 0;
  int v28 = v26[537];
  unsigned int v29 = v26[527];
  uint64_t v291 = v27;
  if (v28 && (v29 & 6) != 0)
  {
    uint64_t v30 = 0;
    int v31 = 0;
    int v32 = 0;
    unint64_t v242 = 0;
    int v33 = *(unsigned __int8 *)(*(void *)(v11 + 14848) + 2117) >> a4;
    v337[0] = 240;
    v337[1] = -v33;
    uint64_t v338 = 0x1E0000000000;
    int v339 = 0;
    int v340 = -v33;
    int v341 = 122880;
    int v342 = v33;
    int v343 = -v33;
    int v344 = 256;
    int v345 = -v33;
    int v346 = -v33;
    int v347 = 15;
    int v348 = -v33;
    int v349 = v33;
    do
    {
      if ((v337[v30] & a10) != 0)
      {
        unsigned int v34 = v337[v30 + 1] + a2;
        unsigned int v35 = v337[v30 + 2] + v17;
        if (((v35 | v34) & 0x80000000) == 0)
        {
          uint64_t v36 = v10;
          uint64_t v37 = *(void *)(v12 + 16);
          if (*(_DWORD *)(v37 + 204) > (signed int)v34
            && *(_DWORD *)(v37 + 208) > (signed int)v35
            && (uint64_t v38 = *(void *)(v12 + 5400)) != 0)
          {
            char v39 = *(unsigned char *)(v37 + 2113);
            int v40 = (unint64_t *)(v38
                                     + 32
                                     * ((((*(unsigned __int8 *)(v37 + 2117) - 1) & v34) >> (v39 - a4))
                                      + (((*(unsigned __int8 *)(v37 + 2117) - 1) & v35) >> (v39 - a4))
                                      * byte_1D0DA530C[a4]
                                      + *(_DWORD *)(v12 + 5408)
                                      * ((v34 >> v39) + (v35 >> v39) * *(_DWORD *)(v37 + 2120))
                                      + byte_1D0DA5308[a4]));
            ++v31;
            if ((*((unsigned char *)v40 + 26) & 0x98) == 0x88)
            {
              ++v32;
              unint64_t v41 = *v40;
              unint64_t v42 = v242;
              if (v41 > v242) {
                unint64_t v42 = v41;
              }
              unint64_t v242 = v42;
            }
            uint64_t v10 = a6;
            uint64_t v17 = a3;
            uint64_t v27 = v291;
          }
          else
          {
            uint64_t v10 = v36;
          }
        }
      }
      v30 += 3;
    }
    while (v30 != 15);
    BOOL v43 = v31 > 1 && v32 == v31;
    int v24 = v43;
  }
  uint64_t v44 = v25 + (int)v308 * (uint64_t)((int)a3 - v16);
  uint64_t v305 = (void *)(v11 + 1576);
  int v249 = v24 & (v29 >> 1);
  int v241 = v24 & (v29 >> 2);
  int v45 = *(_DWORD *)(v11 + 216);
  uint64_t v309 = v11;
  if (v45 < 1)
  {
    sub_1D0D0CC20(v11, a2, v17, a5, v10, a7, (uint64_t *)&v333, (uint64_t *)&v331);
  }
  else
  {
    uint64_t v46 = *(void *)(v11 + 14848);
    int v47 = 1 << (*(unsigned char *)(v46 + 2112) - 1);
    int v48 = v10 + a2;
    int v49 = a7 + v17;
    int v50 = a7 + v17 - 1;
    if (a2 == v15)
    {
      uint64_t v51 = *((void *)a5 + 15);
      *(void *)&long long v336 = v51 + 16 * ((v49 - v16) >> 2);
      uint64_t v52 = v51 + 16 * ((v50 - v16) >> 2);
    }
    else
    {
      if ((word_1D0DBB0A0[(((*(unsigned __int8 *)(v46 + 2117) - 1) & v50) - *(unsigned __int8 *)(v46 + 2117) + 64) >> 2] >> ((int)((*(unsigned __int8 *)(v46 + 2117) - 1) & a2) >> 2)))
      {
        uint64_t v54 = *((void *)a5 + 12);
        unint64_t v55 = (unint64_t)*a5 >> 2;
        uint64_t v56 = (uint64_t)(int)(~v15 + a2) >> 2;
        uint64_t v57 = v54 + 16 * (v56 + (int)v55 * (uint64_t)((v49 - v16) >> 2));
      }
      else
      {
        uint64_t v57 = 0;
        unint64_t v55 = (unint64_t)*a5 >> 2;
        uint64_t v56 = (uint64_t)(int)(~v15 + a2) >> 2;
        uint64_t v54 = *((void *)a5 + 12);
      }
      *(void *)&long long v336 = v57;
      uint64_t v52 = v54 + 16 * (v56 + (int)v55 * (uint64_t)((v50 - v16) >> 2));
    }
    int v58 = v48 - v47;
    *((void *)&v336 + 1) = v52;
    if (v17 == v16)
    {
      uint64_t v59 = *((void *)a5 + 16);
      *(void *)&long long v334 = v59 + 16 * ((v48 - v15) >> 2);
      *((void *)&v334 + 1) = v59 + 16 * ((v58 - v15) >> 2);
      uint64_t v60 = v59 + 16 * (((int)v18 >> 2) - 1);
    }
    else
    {
      int v61 = *(unsigned __int8 *)(v46 + 2117);
      int v62 = (((v61 - 1) & (v48 - 1)) - v61 + 64) >> 2;
      unsigned int v63 = word_1D0DAE244[(int)((v61 - 1) & v17) >> 2];
      unint64_t v64 = *a5;
      if ((v63 >> v62))
      {
        int v65 = ~v16 + v17;
        uint64_t v66 = *((void *)a5 + 12);
        int v67 = v65 >> 2;
        uint64_t v68 = (uint64_t)v65 >> 2;
        uint64_t v69 = (v64 >> 2) * (uint64_t)v67;
        uint64_t v70 = v66 + 16 * (((uint64_t)(v48 - v15) >> 2) + v69);
      }
      else
      {
        uint64_t v70 = 0;
        int v71 = ~v16 + v17;
        int v72 = v71 >> 2;
        uint64_t v68 = (uint64_t)v71 >> 2;
        uint64_t v69 = (int)(v64 >> 2) * (uint64_t)v72;
        uint64_t v66 = *((void *)a5 + 12);
      }
      *(void *)&long long v334 = v70;
      *((void *)&v334 + 1) = v66 + 16 * (v69 + ((v58 - v15) >> 2));
      if (a2 == v15) {
        uint64_t v60 = *((void *)a5 + 15) + 16 * v68;
      }
      else {
        uint64_t v60 = *((void *)a5 + 12) + 16 * (v69 + ((int)(a2 - v15 - v47) >> 2));
      }
    }
    uint64_t v335 = v60;
    if (v45 == 2)
    {
      uint64_t v73 = 0;
      int v74 = *(unsigned __int8 *)(v46 + 2117);
      int v75 = v17 - 1;
      int v76 = v74 - 1;
      int v77 = a2 - 1;
      if (((word_1D0DBB0A0[(int)((v76 & (v17 - 1 + a7)) - v74 + 64) >> 2] >> ((int)(v76 & a2) >> 2)) & 1) != 0
        && ((v49 | v77) & 0x80000000) == 0)
      {
        uint64_t v78 = *(void *)(v12 + 8);
        if (*(_DWORD *)(v78 + 520) < (signed int)a2 || *(_DWORD *)(v78 + 524) <= v49) {
          uint64_t v73 = 0;
        }
        else {
          uint64_t v73 = *(void *)(v78 + 904) + 4 * (*(void *)(v78 + 848) * ((uint64_t)v49 >> 2) + (v77 >> 2));
        }
      }
      uint64_t v329 = v73;
      if ((v50 | v77) < 0
        || (uint64_t v79 = *(void *)(v12 + 8), *(_DWORD *)(v79 + 520) < (signed int)a2)
        || *(_DWORD *)(v79 + 524) < v49)
      {
        uint64_t v80 = 0;
      }
      else
      {
        uint64_t v80 = *(void *)(v79 + 904) + 4 * (*(void *)(v79 + 848) * ((uint64_t)v50 >> 2) + (v77 >> 2));
      }
      uint64_t v81 = 0;
      uint64_t v330 = v80;
      if (((word_1D0DAE244[(int)(v76 & v17) >> 2] >> (((v76 & (v77 + (int)v10)) - v74 + 64) >> 2)) & 1) != 0
        && ((v48 | v75) & 0x80000000) == 0)
      {
        uint64_t v82 = *(void *)(v12 + 8);
        if (*(_DWORD *)(v82 + 520) <= v48 || *(_DWORD *)(v82 + 524) <= v75) {
          uint64_t v81 = 0;
        }
        else {
          uint64_t v81 = *(void *)(v82 + 904) + 4 * (*(void *)(v82 + 848) * ((uint64_t)v75 >> 2) + (v48 >> 2));
        }
      }
      int v83 = a2 - v47;
      uint64_t v326 = v81;
      if ((v58 | v75) < 0
        || (uint64_t v84 = *(void *)(v12 + 8), *(_DWORD *)(v84 + 520) <= v58)
        || *(_DWORD *)(v84 + 524) <= v75)
      {
        uint64_t v85 = 0;
      }
      else
      {
        uint64_t v85 = *(void *)(v84 + 904) + 4 * (*(void *)(v84 + 848) * ((uint64_t)v75 >> 2) + (v58 >> 2));
      }
      uint64_t v327 = v85;
      if ((v83 | v75) < 0
        || (uint64_t v86 = *(void *)(v12 + 8), *(_DWORD *)(v86 + 520) <= v83)
        || *(_DWORD *)(v86 + 524) <= v75)
      {
        uint64_t v87 = 0;
      }
      else
      {
        uint64_t v87 = *(void *)(v86 + 904) + 4 * (*(void *)(v86 + 848) * ((uint64_t)v75 >> 2) + (v83 >> 2));
      }
      uint64_t v328 = v87;
    }
    long long v333 = v336;
    HIDWORD(v53) = DWORD1(v334);
    long long v331 = v334;
    uint64_t v332 = v60;
  }
  char v253 = 0;
  signed int v256 = 0;
  int v244 = 0;
  uint64_t v88 = v22 + v44 * v21;
  uint64_t v89 = 0;
  uint64_t v307 = v88;
  uint64_t v240 = v11 + 25128;
  uint64_t v286 = v11 + 25544;
  unsigned __int8 v288 = (void *)(v27 + 16);
  uint64_t v229 = __clz(__rbit32(v10));
  uint64_t v269 = v229 - 2;
  unint64_t v285 = &v319;
  BOOL v91 = (int)v10 > 4 && v10 == a7;
  BOOL v255 = v91;
  uint64_t v245 = (unsigned int *)(v11 + 13896);
  uint64_t v246 = v11 + 1592;
  int v238 = -1;
  int v92 = v235;
  char v257 = 1;
  int v247 = -1;
  unint64_t v254 = -1;
  do
  {
    long long v313 = 0uLL;
    *(void *)&long long v314 = -1;
    uint64_t v93 = v12 + 24 * v89;
    uint64_t v94 = *(unsigned int **)(v93 + 5192);
    if (v94 == *(unsigned int **)(v93 + 5200))
    {
      unint64_t v170 = 0;
      unsigned int v131 = 0;
      char v277 = 0;
      goto LABEL_182;
    }
    unint64_t v274 = 0;
    unint64_t v252 = 0;
    unsigned int v275 = 0;
    char v277 = 0;
    uint64_t v267 = v89 ^ 1;
    v284 = (int *)(v27 + 4 * v89 + 4);
    int v250 = (int *)&v312 + v89 + 1;
    uint64_t v263 = (unsigned char *)(v11 + 1576 + v89 + 12690);
    uint64_t v95 = v11 + 1576 + 4 * v89;
    BOOL v261 = (_DWORD *)(v95 + 12692);
    unint64_t v259 = (_DWORD *)(v95 + 12700);
    unint64_t v271 = -1;
    uint64_t v273 = -1;
    uint64_t v278 = v89;
    while ((v277 & 1) == 0 || (int)v94[2] <= v256)
    {
      unsigned int v280 = v94;
      uint64_t v96 = *v94;
      *(_DWORD *)(v27 + 40) = 0;
      *unsigned __int8 v288 = 0;
      v288[1] = 0;
      *(void *)(v27 + 32) = -1;
      *(_WORD *)(v27 + 44) = 2;
      uint64_t v97 = *(void *)(*(void *)(v11 + 14520) + (v89 << 8) + 16 * (int)v96 + 1672);
      *uint64_t v263 = v96;
      *BOOL v261 = *(_DWORD *)(v97 + 520);
      *unint64_t v259 = *(_DWORD *)(v97 + 524);
      *(unsigned char *)(*(void *)(v11 + 1584) + v89) = v96;
      uint64_t v98 = (int)v96;
      *(unsigned char *)(*(void *)(v11 + 1584) + v267) = 15;
      *(unsigned char *)(v27 + v89) = v96;
      *(unsigned char *)(v27 + v267) = 15;
      uint64_t v99 = v17;
      uint64_t v289 = v96;
      char v303 = (__int32 *)(v11 + 208 * v89 + 52 * (int)v96 + 25128);
      sub_1D0C95660(*(void *)(v11 + 14840), a2, v17, v89, v96, v10, a7, v303, &v333, (uint64_t)&v331, 1);
      uint64_t v282 = v98;
      if (((v234 != 0) & v253) != 0)
      {
        char v318 = *(unsigned char *)(v27 + 1);
        uint64_t v295 = *(void *)(v11 + 14440);
        uint64_t v297 = *(void *)(v11 + 14432);
        int v292 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 14528)
                                                                                             + 8 * v269
                                                                                             + 216);
        uint64_t v320 = 0;
        uint64_t v321 = 0;
        unint64_t v322 = -1;
        __int16 v324 = 1;
        int v100 = (unsigned char *)(v11 + 208 * v89 + 52 * (int)v98 + 25176);
        uint64_t v101 = v11;
        if (*v100)
        {
          uint64_t v102 = 0;
          int v103 = 0;
          uint64_t v104 = (_DWORD *)(v240 + 52 * (int)v98);
          uint64_t v105 = (uint64_t *)&v337[24 * (int)v98];
          uint64_t v106 = (uint64_t)v303;
          while (1)
          {
            int v107 = *(_DWORD *)(v106 + 4 * v102);
            int v319 = v107;
            int v323 = 1;
            if (v107 == *v104)
            {
              uint64_t v108 = *v105;
            }
            else
            {
              if (v107 != v104[1])
              {
                int v300 = v103;
                uint64_t v110 = v100;
                sub_1D0CE65EC((uint64_t)v305, a2, a3, a6, a7, 1u, (__int16 *)&v319);
                sub_1D0CE32EC((uint64_t)v305, (uint64_t)&v317, a2, a3, a6, a7, v308, v307, 1);
                uint64_t v106 = (uint64_t)v303;
                uint64_t v27 = v291;
                unsigned int v111 = v292(a6, a7, v297, v295, v307, v308);
                int v100 = v110;
                int v103 = v300;
                uint64_t v101 = v309;
                uint64_t v108 = v111;
                uint64_t v320 = v111;
                unsigned int v109 = v323;
                goto LABEL_90;
              }
              uint64_t v108 = v105[1];
            }
            uint64_t v320 = v108;
            unsigned int v109 = 1;
LABEL_90:
            unint64_t v322 = ((*(unsigned __int16 *)(*(void *)(v101 + 14528) + 2 * v324 + 152) * (unint64_t)v109) >> (8 * (v324 == 0)))
                 + v108;
            if (v322 < *(void *)(v27 + 32))
            {
              int v319 = v107;
              *(unsigned char *)(v27 + 1) = v318;
              *(_DWORD *)(v27 + 8) = v107;
              *(void *)(v27 + 16) = v320;
              *(_DWORD *)(v27 + 40) = v323;
              *(void *)(v27 + 32) = v322;
              int v103 = v102;
            }
            if (++v102 >= (unint64_t)*v100) {
              goto LABEL_96;
            }
          }
        }
        int v103 = 0;
        uint64_t v106 = (uint64_t)v303;
LABEL_96:
        if (*(void *)(v27 + 32) < v254)
        {
          char v243 = *(unsigned char *)(v27 + 1);
          int v237 = *(_DWORD *)(v27 + 8);
          int v238 = v103;
          unint64_t v254 = *(void *)(v27 + 32);
        }
        *(_DWORD *)(v27 + 40) = 0;
        *unsigned __int8 v288 = 0;
        v288[1] = 0;
        *(void *)(v27 + 32) = -1;
        *(_WORD *)(v27 + 44) = 2;
        uint64_t v10 = a6;
        uint64_t v99 = a3;
        uint64_t v89 = v278;
        uint64_t v98 = v282;
      }
      else
      {
        uint64_t v101 = v11;
        uint64_t v106 = (uint64_t)v303;
      }
      long long v112 = *(_OWORD *)v106;
      long long v113 = *(_OWORD *)(v106 + 16);
      long long v114 = *(_OWORD *)(v106 + 32);
      *(_DWORD *)(v286 + 48) = *(_DWORD *)(v106 + 48);
      *(_OWORD *)(v286 + 16) = v113;
      *(_OWORD *)(v286 + 32) = v114;
      *(_OWORD *)uint64_t v286 = v112;
      int v115 = *(_DWORD *)(v101 + 216);
      if (((v251 != 0) & v253) != 0)
      {
        if (v115 == 2)
        {
          uint64_t v116 = *(void *)(v309 + 14840);
          int v117 = *(void (**)(void *, void, uint64_t, uint64_t, uint64_t, void, long long *, long long *, uint64_t *, uint64_t *, uint64_t))(v116 + 5304);
          uint64_t v118 = *(void *)(v116 + 5312);
          int v119 = (void *)(v116 + (v118 >> 1));
          if (v118) {
            int v117 = *(void (**)(void *, void, uint64_t, uint64_t, uint64_t, void, long long *, long long *, uint64_t *, uint64_t *, uint64_t))(*v119 + v117);
          }
          v117(v119, a2, v99, v289, v10, a7, &v336, &v334, &v329, &v326, v286);
        }
        sub_1D0CE6670(v305, a2, v99, v10, a7, 1u, v286, v106, v308, v307, v27, &v316, 0);
        unsigned int v125 = *v284;
        uint64_t v126 = v316;
        int v127 = *(_DWORD *)(v106 + 4 * v316);
        *(_DWORD *)(v27 + 40) = 0;
        *unsigned __int8 v288 = 0;
        v288[1] = 0;
        *(void *)(v27 + 32) = -1;
        *(_WORD *)(v27 + 44) = 2;
        *(_DWORD *)(*(void *)(v309 + 1584) + 4 * v89 + 4) = (((v125 - ((v125 >> 15) & 0x10001)) & 0xFFFEFFFE) + 131074) & 0xFFFCFFFC;
        if (v248)
        {
          if (v251 == 2)
          {
            LODWORD(v128) = v289;
          }
          else
          {
            if (*(_DWORD *)(*(void *)(v309 + 1584) + 4 * v89 + 4) != v325[v98 + 16]) {
              goto LABEL_133;
            }
            LODWORD(v128) = v289;
            if (v127 != v325[v98]) {
              goto LABEL_133;
            }
          }
        }
        else
        {
          if ((int)v236 < 1) {
            goto LABEL_133;
          }
          uint64_t v128 = 0;
          uint64_t v134 = *(void *)(v309 + 14840);
          int v135 = *(_DWORD *)(*(void *)(v134 + 16 * v98 + 1928) + 1024);
          uint64_t v136 = v134 + 1672;
          while (*(_DWORD *)(*(void *)v136 + 1024) != v135
               || v251 != 2
               && (*(_DWORD *)(*(void *)(v309 + 1584) + 4 * v89 + 4) != v325[v128 + 16] || v127 != v325[v128]))
          {
            ++v128;
            v136 += 16;
            if (v236 == v128) {
              goto LABEL_133;
            }
          }
        }
        if ((v128 & 0x80000000) == 0)
        {
          int *v284 = *(_DWORD *)&v360[64 * v267 + 4 * v128];
          *(void *)(v27 + 16) = *(void *)&v350[128 * v267 + 8 * v128];
          int v129 = sub_1D0CE6B7C(v106, v27, v89, v126);
          uint64_t v11 = v309;
          int v130 = v363[v89];
          int v316 = v129;
          BOOL v43 = v130 - 1 == v289;
          unsigned int v131 = *(_DWORD *)(v27 + 40) + v289;
          if (!v43) {
            ++v131;
          }
          *(_DWORD *)(v27 + 40) = v131;
          unint64_t v132 = *(void *)(v27 + 16);
          unint64_t v133 = ((*(unsigned __int16 *)(v309 + 2 * *(__int16 *)(v27 + 44) + 1152) * (unint64_t)v131) >> (8 * (*(_WORD *)(v27 + 44) == 0)))
               + v132;
          *(void *)(v27 + 32) = v133;
          uint64_t v10 = a6;
          uint64_t v17 = a3;
          goto LABEL_162;
        }
      }
      else
      {
        if (v115 == 2 || (v257 & (v115 == 1)) != 0)
        {
          uint64_t v120 = *(void *)(v309 + 14840);
          uint64_t v121 = v120 + 16 * v89;
          uint64_t v122 = *(void (**)(void *, void, uint64_t, uint64_t, uint64_t, void, long long *, long long *, uint64_t *, uint64_t *, uint64_t))(v121 + 5288);
          uint64_t v123 = *(void *)(v121 + 5296);
          unsigned int v124 = (void *)(v120 + (v123 >> 1));
          if (v123) {
            uint64_t v122 = *(void (**)(void *, void, uint64_t, uint64_t, uint64_t, void, long long *, long long *, uint64_t *, uint64_t *, uint64_t))(*v124 + v122);
          }
          v122(v124, a2, v99, v289, v10, a7, &v336, &v334, &v329, &v326, v286);
        }
        unsigned int v137 = &v337[24 * (int)v98];
        if (v253) {
          unsigned int v137 = 0;
        }
        sub_1D0CE6670(v305, a2, v99, v10, a7, v89, v286, v106, v308, v307, v27, &v316, (uint64_t)v137);
        unsigned int v138 = *v284;
        int v127 = *(_DWORD *)(v106 + 4 * v316);
        *(_DWORD *)(v27 + 40) = 0;
        *unsigned __int8 v288 = 0;
        v288[1] = 0;
        *(void *)(v27 + 32) = -1;
        *(_WORD *)(v27 + 44) = 2;
        *(_DWORD *)(*(void *)(v309 + 1584) + 4 * v89 + 4) = (((v138 - ((v138 >> 15) & 0x10001)) & 0xFFFEFFFE) + 131074) & 0xFFFCFFFC;
        if (v257)
        {
          v325[v98 + 16] = *(_DWORD *)(*(void *)(v309 + 1584) + 4);
          v325[v98] = v127;
        }
      }
LABEL_133:
      uint64_t v298 = *(void *)(v309 + 14432);
      uint64_t v301 = *(void *)(v309 + 14440);
      uint64_t v139 = *(void *)(v309 + 14528) + 8 * v269;
      int v293 = *(unsigned int (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 216);
      uint64_t v296 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v139 + 528);
      uint64_t v140 = *(void *)(v309 + 1584);
      *(_DWORD *)(v140 + 40) = 0;
      *(void *)(v140 + 16) = 0;
      *(void *)(v140 + 24) = 0;
      *(void *)(v140 + 32) = -1;
      *(_WORD *)(v140 + 44) = 1;
      uint64_t v141 = (__int16 *)(*(void *)(v309 + 1584) + 4 * v89);
      int v142 = v141[2];
      v141 += 2;
      int v143 = v141[1];
      sub_1D0CE65EC((uint64_t)v305, a2, a3, a6, a7, v89, v141);
      sub_1D0CE32EC((uint64_t)v305, *(void *)(v309 + 1584), a2, a3, a6, a7, v308, v307, v89);
      __int16 v144 = v142;
      int v145 = v142 - (__int16)v127;
      if ((v145 + 64) >= 0x80)
      {
        if (v145 >= 0) {
          int v147 = v145;
        }
        else {
          int v147 = -v145;
        }
        unsigned int v146 = 63 - 2 * __clz((v145 < 1) | (2 * v147));
      }
      else
      {
        unsigned int v146 = byte_1D0DA5D08[v145 + 64];
      }
      int v148 = v143 - (v127 >> 16);
      if ((v148 + 64) >= 0x80)
      {
        if (v148 >= 0) {
          int v150 = v143 - (v127 >> 16);
        }
        else {
          int v150 = (v127 >> 16) - v143;
        }
        unsigned int v149 = 63 - 2 * __clz((v148 < 1) | (2 * v150));
      }
      else
      {
        unsigned int v149 = byte_1D0DA5D08[v148 + 64];
      }
      *(_DWORD *)(*(void *)(v309 + 1584) + 40) = v149 + v146;
      if (v255)
      {
        if (*(void *)(v309 + 14240)) {
          int v151 = *(unsigned int **)(v309 + 14240);
        }
        else {
          int v151 = v245;
        }
        unsigned int v152 = v296(v298, v301, v307, v308, v151);
        uint64_t v153 = *(void *)(v309 + 1584);
        *(void *)(v153 + 16) = v152;
        if (*(void *)(v309 + 14240)) {
          uint64_t v154 = *(unsigned int **)(v309 + 14240);
        }
        else {
          uint64_t v154 = v245;
        }
        sub_1D0CE06C0(v246, (char *)v153, v154);
        uint64_t v155 = *(void *)(v309 + 1584);
        uint64_t v156 = *(void *)(v155 + 16);
      }
      else
      {
        uint64_t v156 = v293(a6, a7, v298, v301, v307, v308);
        uint64_t v155 = *(void *)(v309 + 1584);
        *(void *)(v155 + 16) = v156;
      }
      uint64_t v17 = a3;
      unint64_t v157 = ((*(unsigned __int16 *)(*(void *)(v309 + 14528) + 2 * *(__int16 *)(v155 + 44) + 152)
             * (unint64_t)*(unsigned int *)(v155 + 40)) >> (8 * (*(_WORD *)(v155 + 44) == 0)))
           + v156;
      *(void *)(v155 + 32) = v157;
      uint64_t v98 = v282;
      if (v157 < *(void *)(*(void *)(v309 + 1576) + 32))
      {
        uint64_t v158 = v155 + 4 * v278;
        *(_WORD *)(v158 + 4) = v144;
        *(_WORD *)(v158 + 6) = v143;
        uint64_t v159 = *(void *)(v309 + 1584);
        uint64_t v160 = *(void *)(v309 + 1576);
        *(unsigned char *)(v160 + v278) = *(unsigned char *)(v159 + v278);
        *(_DWORD *)(v160 + 4 * v278 + 4) = *(_DWORD *)(v159 + 4 * v278 + 4);
        *(void *)(v160 + 16) = *(void *)(v159 + 16);
        *(_DWORD *)(v160 + 40) = *(_DWORD *)(v159 + 40);
        *(void *)(v160 + 32) = *(void *)(v159 + 32);
      }
      char v161 = *(void (**)(void *, void, uint64_t))(v309 + 14760);
      uint64_t v162 = *(void *)(v309 + 14768);
      char v163 = (void *)((char *)v305 + (v162 >> 1));
      if (v162) {
        char v161 = *(void (**)(void *, void, uint64_t))(*v163 + v161);
      }
      uint64_t v89 = v278;
      v161(v163, a2, a3);
      sub_1D0CE6A5C(*(void *)(v309 + 14528), (uint64_t)v303, v27, (unsigned int *)&v316, v278);
      uint64_t v11 = v309;
      unsigned int v131 = *(_DWORD *)(v27 + 40) + v289;
      if (v363[v278] - 1 != v289) {
        ++v131;
      }
      *(_DWORD *)(v27 + 40) = v131;
      unint64_t v132 = *(void *)(v27 + 16);
      unint64_t v133 = ((*(unsigned __int16 *)(v309 + 2 * *(__int16 *)(v27 + 44) + 1152) * (unint64_t)v131) >> (8 * (*(_WORD *)(v27 + 44) == 0)))
           + v132;
      *(void *)(v27 + 32) = v133;
      if (*(unsigned char *)(v309 + 204))
      {
        LOBYTE(v129) = v316;
        uint64_t v10 = a6;
LABEL_162:
        uint64_t v164 = v280;
        *((unsigned char *)&v362[v89] + v98) = v129;
        *(_DWORD *)&v360[64 * v89 + 4 * v98] = *v284;
        *(void *)&v350[128 * v89 + 8 * v98] = v132;
        goto LABEL_164;
      }
      uint64_t v10 = a6;
      uint64_t v164 = v280;
LABEL_164:
      if (v133 >= v271)
      {
        unint64_t v133 = v273;
        unint64_t v132 = v274;
        unsigned int v131 = v275;
      }
      else
      {
        *((_DWORD *)&v361 + v89) = v131;
        *((unsigned char *)&v312 + v89) = *(unsigned char *)(v27 + v89);
        int v165 = *v284;
        *int v250 = *v284;
        *((unsigned char *)&v315 + v89 + 2) = v316;
        BOOL v166 = v249;
        if (v249)
        {
          int v167 = *(_DWORD *)(v309 + 14320);
          if ((__int16)v165 > v167 >> 16) {
            goto LABEL_176;
          }
          if ((__int16)v165 < (__int16)v167) {
            goto LABEL_176;
          }
          int v168 = *(_DWORD *)(v309 + 14324);
          if (v165 >> 16 < (__int16)v168) {
            goto LABEL_176;
          }
          BOOL v166 = v165 >> 16 > v168 >> 16;
        }
        int v169 = v241;
        if (v132 < v242) {
          int v169 = 0;
        }
        if (v166 || v169)
        {
LABEL_176:
          int v247 = v164[1];
          signed int v256 = v164[2];
          char v277 = 1;
          unint64_t v252 = v132;
          unint64_t v271 = v133;
          int v244 = v165;
          goto LABEL_177;
        }
        char v277 = 0;
        unint64_t v252 = v132;
        unint64_t v271 = v133;
      }
LABEL_177:
      uint64_t v94 = v164 + 3;
      uint64_t v12 = *(void *)(v309 + 14840);
      uint64_t v273 = v133;
      unint64_t v274 = v132;
      unsigned int v275 = v131;
      if (v94 == *(unsigned int **)(v12 + 24 * v89 + 5200)) {
        goto LABEL_181;
      }
    }
    char v277 = 1;
    unint64_t v133 = v273;
    unint64_t v132 = v274;
    unsigned int v131 = v275;
LABEL_181:
    *(void *)&long long v313 = v132;
    *(void *)&long long v314 = v133;
    int v92 = *(unsigned __int8 *)(v11 + 204);
    unint64_t v170 = v252;
LABEL_182:
    if (v92) {
      unsigned int v171 = v131 + 3;
    }
    else {
      unsigned int v171 = v131 + 1;
    }
    unint64_t v172 = &v351[4 * v89];
    unint64_t v173 = *v172 + v170;
    *unint64_t v172 = v173;
    unsigned int v174 = *((_DWORD *)v172 + 6) + v171;
    *((_DWORD *)v172 + 6) = v174;
    v172[2] = ((*(unsigned __int16 *)(v11 + 2 * *((__int16 *)v172 + 14) + 1152) * (unint64_t)v174) >> (8 * (*((_WORD *)v172 + 14) == 0)))
            + v173;
    if ((v235 == 0) | v253 & 1) {
      break;
    }
    char v257 = 0;
    char v253 = 1;
    uint64_t v89 = 1;
  }
  while ((v277 & 1) == 0);
  WORD6(v314) = 2;
  DWORD2(v314) = v171;
  unint64_t v175 = v357;
  unint64_t v176 = v352;
  if (v234) {
    BOOL v177 = 0;
  }
  else {
    BOOL v177 = v357 >= v352;
  }
  int v178 = !v177;
  if (!v92)
  {
LABEL_208:
    uint64_t v287 = 0;
    unsigned int v181 = 0;
LABEL_213:
    unint64_t v182 = -1;
    int v183 = v237;
    goto LABEL_214;
  }
  if ((int)v10 >= 8 && (int)a7 > 7)
  {
    if (v234)
    {
      int v179 = 1;
      goto LABEL_201;
    }
LABEL_200:
    int v179 = *(char *)(*(void *)(v12 + 4760) + 235);
    goto LABEL_201;
  }
  int v180 = *(unsigned __int8 *)(*(void *)(v11 + 14848) + 2113) - a4;
  int v179 = v180 != 3;
  if (!v234 && v180 != 3) {
    goto LABEL_200;
  }
LABEL_201:
  if (v179 >= 1 && (v239 & 1) != 0 && !*(unsigned char *)(v11 + a4 + 205)) {
    int v179 = 0;
  }
  if (v179 < 1 || (v239 & 2) == 0)
  {
    if (v179 >= 1) {
      goto LABEL_210;
    }
    goto LABEL_208;
  }
  if (9 * v351[4 * (v357 < v352)] / 0xAuLL
     + *(unsigned __int16 *)(v11 + 1156)
     * (unint64_t)(2 * *(_DWORD *)((unint64_t)&v361 | (4 * (v357 < v352))) + 2) >= v351[4 * (v357 < v352) + 2])
    goto LABEL_208;
LABEL_210:
  if (v234 && v238 < 0)
  {
    uint64_t v287 = 0;
    unsigned int v181 = 0;
    LOBYTE(v315) = BYTE2(v315);
    BYTE1(v315) = v238;
    goto LABEL_213;
  }
  unint64_t v258 = v357;
  unint64_t v260 = v352;
  if (v234)
  {
    *(unsigned char *)(v27 + 1) = v243;
    int v196 = v237;
    *(_DWORD *)(v27 + 8) = v237;
    *(void *)(v27 + 16) = 0;
    *(_DWORD *)(v27 + 40) = 0;
    *(void *)(v27 + 32) = -1;
    int v197 = v243;
    if (v228 - 1 != v243) {
      int v197 = v243 + 1;
    }
    HIDWORD(v361) = v197 + 1;
  }
  else
  {
    long long v198 = v313;
    *(_OWORD *)uint64_t v27 = v312;
    *(_OWORD *)(v27 + 16) = v198;
    HIDWORD(v53) = DWORD1(v314);
    *(_OWORD *)(v27 + 32) = v314;
    int v196 = v237;
  }
  int v199 = 0;
  uint64_t v287 = 0;
  uint64_t v276 = 0;
  unsigned int v281 = 0;
  char v200 = HIBYTE(v315);
  if (v234) {
    char v200 = v238;
  }
  LOBYTE(v315) = BYTE2(v315);
  unsigned int v270 = v178 ^ 1;
  LODWORD(v53) = v196;
  uint64_t v283 = v53;
  BYTE1(v315) = v200;
  int v201 = v229 - 3;
  if (!v10) {
    int v201 = -3;
  }
  uint64_t v266 = (void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(v11 + 8 * v201 + 14792);
  uint64_t v268 = (int)v10;
  uint64_t v262 = v11 + 25128;
  uint64_t v265 = (int)v17;
  __int16 v279 = 2;
  unint64_t v304 = -1;
  int v264 = v179;
  while (2)
  {
    int v272 = v199;
    uint64_t v202 = v27;
    if (v179 == 1) {
      uint64_t v203 = v270;
    }
    else {
      uint64_t v203 = v199 & 1;
    }
    uint64_t v204 = v10;
    uint64_t v205 = v203 ^ 1;
    uint64_t v206 = (_DWORD *)((unint64_t)&v361 | (4 * (v203 ^ 1)));
    *(_DWORD *)(v11 + 14248) = *v206;
    sub_1D0CE32EC((uint64_t)v305, v202, a2, v17, v204, a7, v308, v307, v203 ^ 1);
    (*v266)(a7, v232, **((void **)a5 + 3)+ (*((void *)a5 + 4) - *((int *)a5 + 1) + (int)a2 + (v265 - *((int *)a5 + 2)) * a5[1])* *(int *)(*((void *)a5 + 3) + 16), v308, v307, v268, *(void *)(v309 + 14448));
    uint64_t v11 = v309;
    *(void *)(v309 + 14432) = *(void *)(v309 + 14448);
    *(void *)(v309 + 14440) = v268;
    *(unsigned char *)(*(void *)(v309 + 1584) + v205) = *(unsigned char *)(v202 + v205);
    *(_DWORD *)(*(void *)(v309 + 1584) + 4 * v205 + 4) = *(_DWORD *)(v202 + 4 * v205 + 4);
    uint64_t v207 = v363[v203];
    if ((int)v207 >= 1)
    {
      uint64_t v208 = 0;
      int v299 = (_DWORD *)(v202 + 4 * v203 + 4);
      uint64_t v209 = v309 + 1576 + 4 * v203;
      unint64_t v294 = (_DWORD *)(v209 + 12692);
      int v290 = (_DWORD *)(v209 + 12700);
      uint64_t v210 = (v203 << 8) | 0x688;
      uint64_t v211 = v262 + 208 * v203;
      int v212 = &v362[v203];
      int v213 = &v360[64 * v203];
      do
      {
        if ((v239 & 4) == 0 || !v208 || v208 == *(char *)((unint64_t)&v312 | v203))
        {
          unsigned int v214 = *(_DWORD *)&v213[4 * v208];
          if (!(v249 | v241)) {
            goto LABEL_249;
          }
          int v215 = *(_DWORD *)(*(void *)(*(void *)(v309 + 14840) + v210) + 1024);
          if (v277)
          {
            unsigned int v214 = v244;
            if (v215 == v247) {
              goto LABEL_249;
            }
          }
          else if (v215 != v247)
          {
LABEL_249:
            *(_DWORD *)(v291 + 40) = 0;
            *unsigned __int8 v288 = 0;
            v288[1] = 0;
            *(void *)(v291 + 32) = -1;
            *(_WORD *)(v291 + 44) = 2;
            uint64_t v216 = *(void *)(*(void *)(v309 + 14520) + v210);
            *(unsigned char *)(v309 + 14266 + v203) = v208;
            *unint64_t v294 = *(_DWORD *)(v216 + 520);
            *int v290 = *(_DWORD *)(v216 + 524);
            *(unsigned char *)(*(void *)(v309 + 1584) + v203) = v208;
            *(unsigned char *)(v291 + v203) = v208;
            uint64_t v217 = *(unsigned int *)(v211 + 4 * *((unsigned __int8 *)v212 + v208));
            int v316 = *((unsigned __int8 *)v212 + v208);
            *(_DWORD *)(*(void *)(v309 + 1584) + 4 * v203 + 4) = (((v214 - ((v214 >> 15) & 0x10001)) & 0xFFFEFFFE)
                                                                  + 131074) & 0xFFFCFFFC;
            __int16 v218 = *(void (**)(void *, void, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, int))(v309 + 14776);
            uint64_t v219 = *(void *)(v309 + 14784);
            char v220 = (void *)((char *)v305 + (v219 >> 1));
            if (v219) {
              __int16 v218 = *(void (**)(void *, void, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, int))(*v220 + v218);
            }
            LOBYTE(v227) = 1;
            v218(v220, a2, a3, a6, a7, v203, v217, v308, v307, v227);
            sub_1D0CE6A5C(*(void *)(v309 + 14528), v211, v291, (unsigned int *)&v316, v203);
            uint64_t v11 = v309;
            if (v207 - 1 == v208) {
              int v221 = *(_DWORD *)(v291 + 40);
            }
            else {
              int v221 = *(_DWORD *)(v291 + 40) + 1;
            }
            unsigned int v222 = v208 + v221 + *v206;
            *(_DWORD *)(v291 + 40) = v222;
            uint64_t v223 = *(void *)(v291 + 16);
            uint64_t v224 = *(__int16 *)(v291 + 44);
            unint64_t v225 = ((*(unsigned __int16 *)(v309 + 2 * v224 + 1152) * (unint64_t)v222) >> (8
                                                                                               * (*(_WORD *)(v291 + 44) == 0)))
                 + v223;
            *(void *)(v291 + 32) = v225;
            char v226 = v316;
            *((unsigned char *)v212 + v208) = v316;
            *(_DWORD *)&v213[4 * v208] = *v299;
            if (v225 < v304)
            {
              *(_DWORD *)((unint64_t)&v361 | (4 * v203)) = v208 + v221;
              __int16 v279 = v224;
              LOBYTE(v285) = *(unsigned char *)v291;
              char v243 = *(unsigned char *)(v291 + 1);
              LOWORD(v274) = *(_WORD *)(v291 + 2);
              LODWORD(v284) = *(_DWORD *)(v291 + 4);
              uint64_t v283 = *(void *)(v291 + 8);
              uint64_t v276 = *(void *)(v291 + 24);
              LOWORD(v273) = *(_WORD *)(v291 + 46);
              unsigned int v281 = v222;
              unint64_t v304 = v225;
              uint64_t v287 = v223;
              *(unsigned char *)((unint64_t)&v315 | v203) = v226;
            }
          }
        }
        ++v208;
        v210 += 16;
        v211 += 52;
      }
      while (v207 != v208);
    }
    uint64_t v27 = v291;
    *(unsigned char *)uint64_t v291 = (_BYTE)v285;
    *(unsigned char *)(v291 + 1) = v243;
    *(_WORD *)(v291 + 2) = v274;
    *(_DWORD *)(v291 + 4) = v284;
    *(void *)(v291 + 8) = v283;
    *(void *)(v291 + 16) = v287;
    *(void *)(v291 + 24) = v276;
    uint64_t v17 = a3;
    *(void *)(v291 + 32) = v304;
    *(_DWORD *)(v291 + 40) = v281;
    *(_WORD *)(v291 + 44) = v279;
    int v199 = v272 + 1;
    *(_WORD *)(v291 + 46) = v273;
    int v179 = v264;
    uint64_t v10 = a6;
    if (v272 + 1 != v264) {
      continue;
    }
    break;
  }
  unsigned int v181 = v281 + 2;
  unint64_t v182 = ((*(unsigned __int16 *)(v309 + 2 * v279 + 1152) * (unint64_t)(v281 + 2)) >> (8 * (v279 == 0))) + v287;
  int v183 = v283;
  unint64_t v175 = v258;
  unint64_t v176 = v260;
LABEL_214:
  BOOL v184 = v175 < v176;
  *(_DWORD *)(v11 + 14248) = 0;
  *(unsigned char *)(a8 + 10) = 3;
  char v185 = &v351[4 * v184];
  unint64_t v186 = v185[2];
  BOOL v177 = v182 >= v186;
  char v187 = *(unsigned char *)(a8 + 11) & 0xBE | ((v182 < v186) << 6);
  if (v177)
  {
    if (v175 >= v176)
    {
      char v192 = 16 * (BYTE2(v315) & 1);
      char v193 = -18;
    }
    else
    {
      char v192 = 32 * (HIBYTE(v315) & 1);
      char v193 = -34;
    }
    *(unsigned char *)(a8 + 11) = v192 | v187 & v193;
    *(unsigned char *)(a8 + 8 + v184) = 16 * *(unsigned char *)((unint64_t)&v312 | v184);
    uint64_t v188 = (_DWORD *)(a8 + 4 * v184);
    *uint64_t v188 = *(_DWORD *)(((unint64_t)&v312 | (4 * v184)) + 4);
    *(_DWORD *)(a8 + 4 * (v175 >= v176)) = 0;
    uint64_t v195 = (unsigned char *)(a8 + 9);
    if (v175 < v176) {
      uint64_t v195 = (unsigned char *)(a8 + 8);
    }
    *uint64_t v195 = -16;
    *(void *)a9 = *v185;
    *(_DWORD *)(a9 + 24) = *(&v353 + 8 * v184);
    unint64_t v190 = v11 + 208 * (v175 < v176) + 52 * ((unint64_t)*(unsigned __int8 *)(a8 + 8 + v184) >> 4) + 25128;
    unsigned int v191 = *(unsigned __int8 *)(((unint64_t)&v315 + 2) | v184);
    return *v188 == *(_DWORD *)(v190 + 4 * v191);
  }
  else
  {
    *(unsigned char *)(a8 + 11) = v187 & 0xCE | (16 * (v315 & 1)) & 0xDF | (32 * (BYTE1(v315) & 1));
    *(unsigned char *)(a8 + 8) = 16 * (_BYTE)v285;
    *(unsigned char *)(a8 + 9) = 16 * v243;
    *(_DWORD *)a8 = v284;
    *(_DWORD *)(a8 + 4) = v183;
    uint64_t v188 = (_DWORD *)(a8 + 4);
    *(void *)a9 = v287;
    *(_DWORD *)(a9 + 24) = v181;
    unint64_t v189 = *(unsigned __int8 *)(a8 + 11);
    if (*(_DWORD *)a8 == *(_DWORD *)(v240
                                    + 52 * ((unint64_t)*(unsigned __int8 *)(a8 + 8) >> 4)
                                    + 4 * ((v189 >> 4) & 1)))
    {
      unint64_t v190 = v11 + 52 * ((unint64_t)*(unsigned __int8 *)(a8 + 9) >> 4) + 25336;
      unsigned int v191 = (v189 >> 5) & 1;
      return *v188 == *(_DWORD *)(v190 + 4 * v191);
    }
    return 0;
  }
}

uint64_t sub_1D0D2066C(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5)
{
  (*(void (**)(void))(**(void **)(a1 + 944) + 88))(*(void *)(a1 + 944));
  sub_1D0D1076C(a1, a2, a3, a5, 1, 0, *(unsigned char *)(a1 + 29745), 1, 0);
  sub_1D0D15C20(a1, a2, a3, a4, 0, 0, 1, v10);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 944) + 80))(*(void *)(a1 + 944));
  (*(void (**)(void))(**(void **)(a1 + 944) + 96))(*(void *)(a1 + 944));
  return v11;
}

BOOL sub_1D0D20780(__int16 *a1, __int16 *a2, unsigned int a3)
{
  int v3 = *((unsigned __int8 *)a1 + 8) >> 4;
  if (v3 != *((unsigned __int8 *)a2 + 8) >> 4) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)a1 + 9) >> 4;
  if (v4 != *((unsigned __int8 *)a2 + 9) >> 4) {
    return 0;
  }
  if (v3 == 15) {
    goto LABEL_7;
  }
  int v5 = *a1 - *a2;
  if (v5 < 0) {
    int v5 = *a2 - *a1;
  }
  if (v5 > a3)
  {
LABEL_7:
    BOOL v6 = 0;
  }
  else
  {
    int v7 = a1[1] - a2[1];
    if (v7 < 0) {
      int v7 = a2[1] - a1[1];
    }
    BOOL v6 = v7 <= a3;
  }
  if (v3 != 15 && !v6) {
    return 0;
  }
  if (v4 == 15) {
    goto LABEL_19;
  }
  int v9 = a1[2] - a2[2];
  if (v9 < 0) {
    int v9 = a2[2] - a1[2];
  }
  if (v9 > a3)
  {
LABEL_19:
    BOOL v10 = 0;
  }
  else
  {
    int v12 = a1[3] - a2[3];
    if (v12 < 0) {
      int v12 = a2[3] - a1[3];
    }
    BOOL v10 = v12 <= a3;
  }
  int v13 = v4 == 15 || v10;
  return v13 != 0;
}

uint64_t sub_1D0D20850(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v49 = 0;
  int v8 = 0;
  if (a8) {
    uint64_t v9 = (a8 - 1);
  }
  else {
    uint64_t v9 = 0;
  }
  if (a8) {
    char v10 = 3;
  }
  else {
    char v10 = 2;
  }
  unsigned int v11 = a3 >> v10;
  uint64_t v12 = a4 >> v10;
  uint64_t v13 = v11 * v12;
  unint64_t v14 = v11 << (a8 != 0);
  if (a8) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 1;
  }
  uint64_t v16 = a1 + 2 * v9;
  uint64_t v17 = 2 * v14;
  uint64_t result = 2 * a5;
  uint64_t v19 = a2 + 2 * v9;
  uint64_t v45 = 2 * a6 * v12;
  uint64_t v20 = 2 * a6;
  do
  {
    int v48 = v8;
    uint64_t v21 = v49;
    v49 += 4;
    uint64_t v46 = v19;
    uint64_t v47 = v16;
    do
    {
      uint64_t v22 = (uint64_t *)(a7 + 48 * v21);
      uint64_t v23 = v22 + 3;
      int v24 = v22 + 2;
      uint64_t v25 = v22 + 1;
      uint64_t v26 = v22 + 4;
      if (v12)
      {
        int v27 = 0;
        uint64_t v28 = v19;
        uint64_t v29 = v16;
        do
        {
          if (v14 > v9)
          {
            uint64_t v30 = 0;
            uint64_t v31 = *v25;
            uint64_t v32 = *v22;
            uint64_t v33 = *v24;
            uint64_t v34 = *v23;
            uint64_t v35 = *v26;
            do
            {
              uint64_t v36 = *(unsigned __int16 *)(v28 + 2 * v30);
              v31 += v36;
              uint64_t v37 = *(unsigned __int16 *)(v29 + 2 * v30);
              v32 += v37;
              v33 += (v37 * v37);
              v34 += (v36 * v36);
              v35 += v37 * v36;
              v30 += v15;
            }
            while (v9 + v30 < v14);
            *uint64_t v25 = v31;
            *uint64_t v22 = v32;
            *int v24 = v33;
            *uint64_t v23 = v34;
            *uint64_t v26 = v35;
          }
          ++v27;
          v29 += result;
          v28 += v20;
        }
        while (v27 != v12);
      }
      uint64_t v38 = *v25;
      uint64_t v39 = *v23 * v13 - v38 * v38;
      uint64_t v40 = *v22;
      uint64_t v41 = *v24 * v13 - v40 * v40;
      if (v39 < 1 || *v24 * v13 - v40 * v40 <= 0)
      {
        if (v41 <= 0 && *v23 * v13 - v38 * v38 <= 0) {
          float v44 = 1.0;
        }
        else {
          float v44 = 0.0;
        }
      }
      else
      {
        float v44 = (double)(*v26 * v13 - v40 * v38) / sqrt((double)v39 * (double)v41);
      }
      *(float *)(a7 + 48 * v21++ + 40) = v44;
      v16 += v17;
      v19 += v17;
    }
    while (v21 != v49);
    int v8 = v48 + 1;
    uint64_t v16 = v47 + 2 * a5 * v12;
    uint64_t v19 = v46 + v45;
  }
  while (v48 != 3);
  return result;
}

uint64_t sub_1D0D20A6C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v43 = 0;
  int v42 = 0;
  LODWORD(v8) = a8 - 1;
  if (a8) {
    unint64_t v8 = v8;
  }
  else {
    unint64_t v8 = 0;
  }
  if (a8) {
    char v9 = 3;
  }
  else {
    char v9 = 2;
  }
  unsigned int v10 = a3 >> v9;
  uint64_t v11 = a4 >> v9;
  uint64_t v12 = v10 * v11;
  unint64_t v13 = v10 << (a8 != 0);
  if (a8) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 1;
  }
  uint64_t v15 = result + v8;
  uint64_t v16 = a2 + v8;
  do
  {
    uint64_t v17 = v43;
    v43 += 4;
    uint64_t v40 = v16;
    uint64_t v41 = v15;
    do
    {
      uint64_t v18 = (uint64_t *)(a7 + 48 * v17);
      uint64_t v19 = v18 + 3;
      uint64_t v20 = v18 + 2;
      uint64_t v21 = v18 + 1;
      uint64_t v22 = v18 + 4;
      if (v11)
      {
        int v23 = 0;
        uint64_t v24 = v16;
        uint64_t v25 = v15;
        do
        {
          if (v13 > v8)
          {
            uint64_t v26 = 0;
            uint64_t v27 = *v21;
            uint64_t v28 = *v18;
            uint64_t v29 = *v20;
            uint64_t v30 = *v19;
            unint64_t v31 = v8;
            uint64_t v32 = *v22;
            do
            {
              v27 += *(unsigned __int8 *)(v24 + v26);
              *uint64_t v21 = v27;
              v28 += *(unsigned __int8 *)(v25 + v26);
              *uint64_t v18 = v28;
              v29 += *(unsigned __int8 *)(v25 + v26) * *(unsigned __int8 *)(v25 + v26);
              *uint64_t v20 = v29;
              v30 += *(unsigned __int8 *)(v24 + v26) * *(unsigned __int8 *)(v24 + v26);
              *uint64_t v19 = v30;
              uint64_t result = *(unsigned __int8 *)(v25 + v26);
              v32 += *(unsigned __int8 *)(v24 + v26) * result;
              *uint64_t v22 = v32;
              v31 += v14;
              v26 += v14;
            }
            while (v31 < v13);
          }
          ++v23;
          v25 += a5;
          v24 += a6;
        }
        while (v23 != v11);
      }
      uint64_t v33 = *v21;
      uint64_t v34 = *v19 * v12 - v33 * v33;
      uint64_t v35 = *v18;
      uint64_t v36 = *v20 * v12 - v35 * v35;
      if (v34 < 1 || *v20 * v12 - v35 * v35 <= 0)
      {
        if (v36 <= 0 && *v19 * v12 - v33 * v33 <= 0) {
          float v39 = 1.0;
        }
        else {
          float v39 = 0.0;
        }
      }
      else
      {
        float v39 = (double)(*v22 * v12 - v35 * v33) / sqrt((double)v34 * (double)v36);
      }
      *(float *)(a7 + 48 * v17++ + 40) = v39;
      v15 += v13;
      v16 += v13;
    }
    while (v17 != v43);
    uint64_t v15 = v41 + v11 * a5;
    uint64_t v16 = v40 + v11 * a6;
    ++v42;
  }
  while (v42 != 4);
  return result;
}

uint64_t sub_1D0D20C80(int *a1, uint64_t a2, int a3, int a4)
{
  if (a4 < 1)
  {
    unsigned int v5 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 4 * a2;
    int v7 = a1;
    do
    {
      unint64_t v8 = v7;
      uint64_t v9 = a3;
      if (a3 >= 1)
      {
        do
        {
          int v10 = *v8++;
          v5 += v10;
          --v9;
        }
        while (v9);
      }
      ++v4;
      int v7 = (int *)((char *)v7 + v6);
    }
    while (v4 != a4);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = a1;
      uint64_t v14 = a3;
      if (a3 >= 1)
      {
        do
        {
          int v15 = *v13++;
          v12 += (v15 * v15);
          --v14;
        }
        while (v14);
      }
      ++v11;
      a1 = (int *)((char *)a1 + v6);
    }
    while (v11 != a4);
  }
  return v12 - (uint64_t)(((uint64_t)(a4 * a3) >> 1) + v5 * (unint64_t)v5) / (a4 * a3);
}

uint64_t sub_1D0D20D34(int *a1, uint64_t a2, int a3, int a4)
{
  if (a4 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t result = 0;
  do
  {
    int v7 = a1;
    uint64_t v8 = a3;
    if (a3 >= 1)
    {
      do
      {
        int v9 = *v7++;
        uint64_t result = (v9 + result);
        --v8;
      }
      while (v8);
    }
    ++v5;
    a1 += a2;
  }
  while (v5 != a4);
  return result;
}

uint64_t sub_1D0D20D90(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 >= 1)
  {
    int v4 = 0;
    LODWORD(v5) = 0;
    if ((int)((a2 + 15) >> 4) >= ((int)result + 15) >> 4) {
      unsigned int v6 = ((int)result + 15) >> 4;
    }
    else {
      unsigned int v6 = (a2 + 15) >> 4;
    }
    int v7 = -v6;
    do
    {
      if ((int)result >= 1)
      {
        uint64_t v8 = 0;
        LODWORD(v9) = v4 + v6;
        if ((int)(v4 + v6) >= a2) {
          uint64_t v9 = a2;
        }
        else {
          uint64_t v9 = v9;
        }
        uint64_t v5 = (int)v5;
        int v10 = -v6;
        int v11 = v6;
        do
        {
          if ((int)result >= v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = result;
          }
          if ((int)((v4 - v6) & ~((int)(v4 - v6) >> 31)) >= (int)v9)
          {
            int v14 = 0;
            unsigned int v13 = 0;
          }
          else
          {
            unsigned int v13 = 0;
            int v14 = 0;
            uint64_t v15 = v10 & ~(v10 >> 31);
            uint64_t v16 = v12 - v15;
            uint64_t v17 = (int *)(a3 + 4 * ((int)result * (unint64_t)(v7 & ~(v7 >> 31)) + v15));
            int v18 = v6 + v8;
            if ((int)(v6 + v8) >= (int)result) {
              int v18 = result;
            }
            int v19 = (v8 - v6) & ~((int)(v8 - v6) >> 31);
            uint64_t v20 = (v4 - v6) & ~((int)(v4 - v6) >> 31);
            do
            {
              if (v18 > v19)
              {
                uint64_t v21 = v17;
                uint64_t v22 = v16;
                do
                {
                  int v23 = *v21++;
                  v14 += v23;
                  --v22;
                }
                while (v22);
                v13 += v18 - v19;
              }
              ++v20;
              v17 += (int)result;
            }
            while (v20 != v9);
          }
          signed int v24 = ((*(_DWORD *)(a3 + 4 * v5) + 32) >> 6) - (((v14 + (v13 >> 1)) / v13 + 32) >> 6);
          if (v24 < 0) {
            signed int v24 = (((v14 + (v13 >> 1)) / v13 + 32) >> 6) - ((*(_DWORD *)(a3 + 4 * v5) + 32) >> 6);
          }
          *(_DWORD *)(a4 + 4 * (v4 * result + v8)) = v24;
          ++v5;
          ++v8;
          ++v11;
          ++v10;
        }
        while (v8 != result);
      }
      ++v4;
      ++v7;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t sub_1D0D20F28(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 < 1) {
    return result;
  }
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = ~result;
  unsigned int v8 = -(int)result;
  do
  {
    if ((int)result < 1) {
      goto LABEL_18;
    }
    uint64_t v9 = 0;
    int v10 = v6;
    uint64_t v11 = a3 + 4 * v6;
    do
    {
      int v12 = *(_DWORD *)(v11 + 4 * v9);
      long long v20 = xmmword_1D0D7F710;
      if (v9)
      {
        LODWORD(v20) = (*(_DWORD *)(a3 + 4 * (v4 + v9 - 1)) + 32) >> 6;
        __int32 v13 = v20 + 2;
        if (v5)
        {
          int v14 = v8 + v9;
          unsigned int v15 = (*(_DWORD *)(a3 + 4 * (v8 + v9)) + 32) >> 6;
          DWORD2(v20) = v15;
          unsigned int v16 = (*(_DWORD *)(a3 + 4 * (v7 + v9)) + 32) >> 6;
          uint64_t v17 = 1;
          int v18 = v16;
          goto LABEL_10;
        }
        unsigned int v19 = 128;
LABEL_15:
        unsigned int v15 = 128;
        int v18 = 128;
        goto LABEL_16;
      }
      if (!v5)
      {
        unsigned int v19 = 128;
        __int32 v13 = 130;
        goto LABEL_15;
      }
      int v14 = v5 * result - result;
      unsigned int v16 = (*(_DWORD *)(a3 + 4 * v8) + 32) >> 6;
      int v18 = 128;
      __int32 v13 = 130;
      uint64_t v17 = 2;
      unsigned int v15 = v16;
LABEL_10:
      *(_DWORD *)((unint64_t)&v20 | (4 * v17)) = v16;
      if (v9 >= (int)result - 1)
      {
        unsigned int v19 = 128;
      }
      else
      {
        unsigned int v19 = (*(_DWORD *)(a3 + 4 * (v14 + 1)) + 32) >> 6;
        HIDWORD(v20) = v19;
      }
LABEL_16:
      *(_DWORD *)(a4 + 4 * (v4 + v9++)) = vminvq_s32(vminq_s32(vabdq_s32((int32x4_t)v20, vdupq_n_s32((v12 + 32) >> 6)), vdupq_n_s32(((v19 + v18 + v13 + v15) >> 2)- ((v12 + 32) >> 6))));
    }
    while (result != v9);
    int v6 = v10 + v9;
LABEL_18:
    ++v5;
    v4 += result;
    v7 += result;
    v8 += result;
  }
  while (v5 != a2);
  return result;
}

uint64_t sub_1D0D2110C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = 0;
    int64x2_t v8 = (int64x2_t)(unint64_t)v5;
    int64x2_t v9 = 0uLL;
    int64x2_t v10 = (int64x2_t)(unint64_t)v6;
    int64x2_t v11 = 0uLL;
    int64x2_t v12 = 0uLL;
    int64x2_t v13 = 0uLL;
    int64x2_t v14 = 0uLL;
    int64x2_t v15 = 0uLL;
    int64x2_t v16 = 0uLL;
    int64x2_t v17 = 0uLL;
    int64x2_t v18 = 0uLL;
    int64x2_t v19 = 0uLL;
    int64x2_t v20 = 0uLL;
    int64x2_t v21 = 0uLL;
    int64x2_t v22 = 0uLL;
    int64x2_t v23 = 0uLL;
    do
    {
      uint8x16_t v24 = *(uint8x16_t *)(a1 + v7);
      uint8x16_t v25 = *(uint8x16_t *)(a3 + v7);
      int16x8_t v26 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v25.i8);
      int32x4_t v27 = vmovl_s16(*(int16x4_t *)v26.i8);
      int16x8_t v28 = (int16x8_t)vsubl_high_u8(v24, v25);
      int32x4_t v29 = vmovl_high_s16(v28);
      int32x4_t v30 = vmovl_high_s16(v26);
      int32x4_t v31 = vmovl_s16(*(int16x4_t *)v28.i8);
      int64x2_t v19 = vaddw_high_s32(v19, v30);
      int64x2_t v21 = vaddw_high_s32(v21, v31);
      int64x2_t v20 = vaddw_s32(v20, *(int32x2_t *)v31.i8);
      int64x2_t v18 = vaddw_s32(v18, *(int32x2_t *)v30.i8);
      int64x2_t v17 = vaddw_high_s32(v17, v27);
      int64x2_t v22 = vaddw_s32(v22, *(int32x2_t *)v29.i8);
      int64x2_t v10 = vaddw_s32(v10, *(int32x2_t *)v27.i8);
      int64x2_t v23 = vaddw_high_s32(v23, v29);
      int64x2_t v12 = vmlal_high_s32(v12, v30, v30);
      int64x2_t v14 = vmlal_high_s32(v14, v31, v31);
      int64x2_t v13 = vmlal_s32(v13, *(int32x2_t *)v31.i8, *(int32x2_t *)v31.i8);
      int64x2_t v11 = vmlal_s32(v11, *(int32x2_t *)v30.i8, *(int32x2_t *)v30.i8);
      int64x2_t v9 = vmlal_high_s32(v9, v27, v27);
      int64x2_t v15 = vmlal_s32(v15, *(int32x2_t *)v29.i8, *(int32x2_t *)v29.i8);
      int64x2_t v8 = vmlal_s32(v8, *(int32x2_t *)v27.i8, *(int32x2_t *)v27.i8);
      int64x2_t v16 = vmlal_high_s32(v16, v29, v29);
      v7 += 16;
    }
    while (v7 != 64);
    uint64_t v32 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v10, v20), vaddq_s64(v18, v22)), vaddq_s64(vaddq_s64(v17, v21), vaddq_s64(v19, v23))));
    uint64_t v6 = v32;
    uint64_t v33 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v8, v13), vaddq_s64(v11, v15)), vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v12, v16))));
    uint64_t v5 = v33;
    ++v4;
    a3 += a4;
    a1 += a2;
  }
  while (v4 != 64);
  return v33 - ((unint64_t)(v32 * v32 + 2048) >> 12);
}

uint64_t sub_1D0D21240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = 0;
    int64x2_t v8 = (int64x2_t)(unint64_t)v5;
    int64x2_t v9 = (int64x2_t)(unint64_t)v6;
    int64x2_t v10 = 0uLL;
    int64x2_t v11 = 0uLL;
    int64x2_t v12 = 0uLL;
    int64x2_t v13 = 0uLL;
    int64x2_t v14 = 0uLL;
    int64x2_t v15 = 0uLL;
    do
    {
      uint16x8_t v16 = *(uint16x8_t *)(a1 + v7);
      uint16x8_t v17 = *(uint16x8_t *)(a3 + v7);
      int32x4_t v18 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8);
      int32x4_t v19 = (int32x4_t)vsubl_high_u16(v16, v17);
      int64x2_t v15 = vaddw_high_s32(v15, v19);
      int64x2_t v14 = vaddw_s32(v14, *(int32x2_t *)v19.i8);
      int64x2_t v13 = vaddw_high_s32(v13, v18);
      int64x2_t v9 = vaddw_s32(v9, *(int32x2_t *)v18.i8);
      int64x2_t v12 = vmlal_high_s32(v12, v19, v19);
      int64x2_t v11 = vmlal_s32(v11, *(int32x2_t *)v19.i8, *(int32x2_t *)v19.i8);
      int64x2_t v10 = vmlal_high_s32(v10, v18, v18);
      int64x2_t v8 = vmlal_s32(v8, *(int32x2_t *)v18.i8, *(int32x2_t *)v18.i8);
      v7 += 16;
    }
    while (v7 != 128);
    uint64_t v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v13, v15)));
    uint64_t v6 = v20;
    uint64_t v21 = vaddvq_s64(vaddq_s64(vaddq_s64(v8, v11), vaddq_s64(v10, v12)));
    uint64_t v5 = v21;
    ++v4;
    a3 += 2 * a4;
    a1 += 2 * a2;
  }
  while (v4 != 64);
  return v21 - ((unint64_t)(v20 * v20 + 2048) >> 12);
}

uint64_t sub_1D0D2130C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = 0;
    int64x2_t v8 = (int64x2_t)(unint64_t)v5;
    int64x2_t v9 = 0uLL;
    int64x2_t v10 = (int64x2_t)(unint64_t)v6;
    int64x2_t v11 = 0uLL;
    int64x2_t v12 = 0uLL;
    int64x2_t v13 = 0uLL;
    int64x2_t v14 = 0uLL;
    int64x2_t v15 = 0uLL;
    int64x2_t v16 = 0uLL;
    int64x2_t v17 = 0uLL;
    int64x2_t v18 = 0uLL;
    int64x2_t v19 = 0uLL;
    int64x2_t v20 = 0uLL;
    int64x2_t v21 = 0uLL;
    int64x2_t v22 = 0uLL;
    int64x2_t v23 = 0uLL;
    do
    {
      uint8x16_t v24 = *(uint8x16_t *)(a1 + v7);
      uint8x16_t v25 = *(uint8x16_t *)(a3 + v7);
      int16x8_t v26 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v25.i8);
      int32x4_t v27 = vmovl_s16(*(int16x4_t *)v26.i8);
      int16x8_t v28 = (int16x8_t)vsubl_high_u8(v24, v25);
      int32x4_t v29 = vmovl_high_s16(v28);
      int32x4_t v30 = vmovl_high_s16(v26);
      int32x4_t v31 = vmovl_s16(*(int16x4_t *)v28.i8);
      int64x2_t v19 = vaddw_high_s32(v19, v30);
      int64x2_t v21 = vaddw_high_s32(v21, v31);
      int64x2_t v20 = vaddw_s32(v20, *(int32x2_t *)v31.i8);
      int64x2_t v18 = vaddw_s32(v18, *(int32x2_t *)v30.i8);
      int64x2_t v17 = vaddw_high_s32(v17, v27);
      int64x2_t v22 = vaddw_s32(v22, *(int32x2_t *)v29.i8);
      int64x2_t v10 = vaddw_s32(v10, *(int32x2_t *)v27.i8);
      int64x2_t v23 = vaddw_high_s32(v23, v29);
      int64x2_t v12 = vmlal_high_s32(v12, v30, v30);
      int64x2_t v14 = vmlal_high_s32(v14, v31, v31);
      int64x2_t v13 = vmlal_s32(v13, *(int32x2_t *)v31.i8, *(int32x2_t *)v31.i8);
      int64x2_t v11 = vmlal_s32(v11, *(int32x2_t *)v30.i8, *(int32x2_t *)v30.i8);
      int64x2_t v9 = vmlal_high_s32(v9, v27, v27);
      int64x2_t v15 = vmlal_s32(v15, *(int32x2_t *)v29.i8, *(int32x2_t *)v29.i8);
      int64x2_t v8 = vmlal_s32(v8, *(int32x2_t *)v27.i8, *(int32x2_t *)v27.i8);
      int64x2_t v16 = vmlal_high_s32(v16, v29, v29);
      v7 += 16;
    }
    while (v7 != 32);
    uint64_t v32 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v10, v20), vaddq_s64(v18, v22)), vaddq_s64(vaddq_s64(v17, v21), vaddq_s64(v19, v23))));
    uint64_t v6 = v32;
    uint64_t v33 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v8, v13), vaddq_s64(v11, v15)), vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v12, v16))));
    uint64_t v5 = v33;
    ++v4;
    a3 += a4;
    a1 += a2;
  }
  while (v4 != 32);
  return v33 - ((unint64_t)(v32 * v32 + 512) >> 10);
}

uint64_t sub_1D0D21440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = 0;
    int64x2_t v8 = (int64x2_t)(unint64_t)v5;
    int64x2_t v9 = (int64x2_t)(unint64_t)v6;
    int64x2_t v10 = 0uLL;
    int64x2_t v11 = 0uLL;
    int64x2_t v12 = 0uLL;
    int64x2_t v13 = 0uLL;
    int64x2_t v14 = 0uLL;
    int64x2_t v15 = 0uLL;
    do
    {
      uint16x8_t v16 = *(uint16x8_t *)(a1 + v7);
      uint16x8_t v17 = *(uint16x8_t *)(a3 + v7);
      int32x4_t v18 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8);
      int32x4_t v19 = (int32x4_t)vsubl_high_u16(v16, v17);
      int64x2_t v15 = vaddw_high_s32(v15, v19);
      int64x2_t v14 = vaddw_s32(v14, *(int32x2_t *)v19.i8);
      int64x2_t v13 = vaddw_high_s32(v13, v18);
      int64x2_t v9 = vaddw_s32(v9, *(int32x2_t *)v18.i8);
      int64x2_t v12 = vmlal_high_s32(v12, v19, v19);
      int64x2_t v11 = vmlal_s32(v11, *(int32x2_t *)v19.i8, *(int32x2_t *)v19.i8);
      int64x2_t v10 = vmlal_high_s32(v10, v18, v18);
      int64x2_t v8 = vmlal_s32(v8, *(int32x2_t *)v18.i8, *(int32x2_t *)v18.i8);
      v7 += 16;
    }
    while (v7 != 64);
    uint64_t v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v13, v15)));
    uint64_t v6 = v20;
    uint64_t v21 = vaddvq_s64(vaddq_s64(vaddq_s64(v8, v11), vaddq_s64(v10, v12)));
    uint64_t v5 = v21;
    ++v4;
    a3 += 2 * a4;
    a1 += 2 * a2;
  }
  while (v4 != 32);
  return v21 - ((unint64_t)(v20 * v20 + 512) >> 10);
}

uint64_t sub_1D0D2150C(uint8x16_t *a1, uint64_t a2, uint8x16_t *a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 16;
  do
  {
    int16x8_t v7 = (int16x8_t)vsubl_high_u8(*a1, *a3);
    int32x4_t v8 = vmovl_s16(*(int16x4_t *)v7.i8);
    int32x4_t v9 = vmovl_high_s16(v7);
    int16x8_t v10 = (int16x8_t)vsubl_u8(*(uint8x8_t *)a1->i8, *(uint8x8_t *)a3->i8);
    int32x4_t v11 = vmovl_high_s16(v10);
    int32x4_t v12 = vmovl_s16(*(int16x4_t *)v10.i8);
    uint64_t v5 = vaddvq_s64(vaddq_s64(vaddw_s32(vaddw_s32((int64x2_t)(unint64_t)v5, *(int32x2_t *)v12.i8), *(int32x2_t *)v8.i8), vaddq_s64(vaddl_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v9.i8), vaddq_s64(vaddl_high_s32(v12, v8), vaddl_high_s32(v11, v9)))));
    uint64_t v13 = vaddvq_s64(vaddq_s64(vaddq_s64(vmlal_s32(vmlal_s32((int64x2_t)(unint64_t)v4, *(int32x2_t *)v12.i8, *(int32x2_t *)v12.i8), *(int32x2_t *)v8.i8, *(int32x2_t *)v8.i8), vmlal_s32(vmull_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v9.i8, *(int32x2_t *)v9.i8)), vaddq_s64(vmlal_high_s32(vmull_high_s32(v12, v12), v8, v8), vmlal_high_s32(vmull_high_s32(v11, v11), v9, v9))));
    uint64_t v4 = v13;
    a3 = (uint8x16_t *)((char *)a3 + a4);
    a1 = (uint8x16_t *)((char *)a1 + a2);
    --v6;
  }
  while (v6);
  return v13 - ((unint64_t)(v5 * v5 + 128) >> 8);
}

uint64_t sub_1D0D215C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = 0;
    int64x2_t v8 = (int64x2_t)(unint64_t)v5;
    int64x2_t v9 = (int64x2_t)(unint64_t)v6;
    int64x2_t v10 = 0uLL;
    int64x2_t v11 = 0uLL;
    int64x2_t v12 = 0uLL;
    int64x2_t v13 = 0uLL;
    int64x2_t v14 = 0uLL;
    int64x2_t v15 = 0uLL;
    do
    {
      uint16x8_t v16 = *(uint16x8_t *)(a1 + v7);
      uint16x8_t v17 = *(uint16x8_t *)(a3 + v7);
      int32x4_t v18 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v17.i8);
      int32x4_t v19 = (int32x4_t)vsubl_high_u16(v16, v17);
      int64x2_t v15 = vaddw_high_s32(v15, v19);
      int64x2_t v14 = vaddw_s32(v14, *(int32x2_t *)v19.i8);
      int64x2_t v13 = vaddw_high_s32(v13, v18);
      int64x2_t v9 = vaddw_s32(v9, *(int32x2_t *)v18.i8);
      int64x2_t v12 = vmlal_high_s32(v12, v19, v19);
      int64x2_t v11 = vmlal_s32(v11, *(int32x2_t *)v19.i8, *(int32x2_t *)v19.i8);
      int64x2_t v10 = vmlal_high_s32(v10, v18, v18);
      int64x2_t v8 = vmlal_s32(v8, *(int32x2_t *)v18.i8, *(int32x2_t *)v18.i8);
      v7 += 16;
    }
    while (v7 != 32);
    uint64_t v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v9, v14), vaddq_s64(v13, v15)));
    uint64_t v6 = v20;
    uint64_t v21 = vaddvq_s64(vaddq_s64(vaddq_s64(v8, v11), vaddq_s64(v10, v12)));
    uint64_t v5 = v21;
    ++v4;
    a3 += 2 * a4;
    a1 += 2 * a2;
  }
  while (v4 != 16);
  return v21 - ((unint64_t)(v20 * v20 + 128) >> 8);
}

uint64_t sub_1D0D21694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  do
  {
    for (uint64_t i = 0; i != 8; ++i)
    {
      unint64_t v8 = *(unsigned __int8 *)(a1 + i) - (unint64_t)*(unsigned __int8 *)(a3 + i);
      v6 += v8;
      v5 += v8 * v8;
    }
    ++v4;
    a3 += a4;
    a1 += a2;
  }
  while (v4 != 8);
  return v5 - ((unint64_t)(v6 * v6 + 32) >> 6);
}

uint64_t sub_1D0D216EC(uint16x8_t *a1, uint64_t a2, uint16x8_t *a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 8;
  do
  {
    int32x4_t v7 = (int32x4_t)vsubl_high_u16(*a1, *a3);
    int32x4_t v8 = (int32x4_t)vsubl_u16(*(uint16x4_t *)a1->i8, *(uint16x4_t *)a3->i8);
    uint64_t v9 = vaddvq_s64(vaddq_s64(vaddw_s32(vaddw_s32((int64x2_t)(unint64_t)v5, *(int32x2_t *)v8.i8), *(int32x2_t *)v7.i8), vaddl_high_s32(v8, v7)));
    uint64_t v5 = v9;
    uint64_t v10 = vaddvq_s64(vaddq_s64(vmlal_s32(vmlal_s32((int64x2_t)(unint64_t)v4, *(int32x2_t *)v8.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v7.i8, *(int32x2_t *)v7.i8), vmlal_high_s32(vmull_high_s32(v8, v8), v7, v7)));
    uint64_t v4 = v10;
    a3 = (uint16x8_t *)((char *)a3 + 2 * a4);
    a1 = (uint16x8_t *)((char *)a1 + 2 * a2);
    --v6;
  }
  while (v6);
  return v10 - ((unint64_t)(v9 * v9 + 32) >> 6);
}

uint64_t sub_1D0D21778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  do
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      unint64_t v8 = *(unsigned __int8 *)(a1 + i) - (unint64_t)*(unsigned __int8 *)(a3 + i);
      v6 += v8;
      v5 += v8 * v8;
    }
    ++v4;
    a3 += a4;
    a1 += a2;
  }
  while (v4 != 4);
  return v5 - ((unint64_t)(v6 * v6 + 8) >> 4);
}

uint64_t sub_1D0D217D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  do
  {
    for (uint64_t i = 0; i != 8; i += 2)
    {
      unint64_t v8 = *(unsigned __int16 *)(a1 + i) - (unint64_t)*(unsigned __int16 *)(a3 + i);
      v6 += v8;
      v5 += v8 * v8;
    }
    ++v4;
    a3 += 2 * a4;
    a1 += 2 * a2;
  }
  while (v4 != 4);
  return v5 - ((unint64_t)(v6 * v6 + 8) >> 4);
}

uint64_t sub_1D0D21830(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = 0;
  uint64_t v4 = a1;
  do
  {
    uint64_t v5 = 0;
    int32x4_t v6 = 0uLL;
    int32x4_t v7 = (int32x4_t)v3;
    int32x4_t v8 = 0uLL;
    int32x4_t v9 = 0uLL;
    do
    {
      uint8x16_t v10 = *(uint8x16_t *)(v4 + v5);
      uint16x8_t v11 = vmovl_u8(*(uint8x8_t *)v10.i8);
      uint16x8_t v12 = vmovl_high_u8(v10);
      int32x4_t v9 = (int32x4_t)vaddw_high_u16((uint32x4_t)v9, v12);
      int32x4_t v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v12.i8);
      int32x4_t v6 = (int32x4_t)vaddw_high_u16((uint32x4_t)v6, v11);
      int32x4_t v7 = (int32x4_t)vaddw_u16((uint32x4_t)v7, *(uint16x4_t *)v11.i8);
      v5 += 16;
    }
    while (v5 != 64);
    unsigned int v3 = vaddvq_s32(vaddq_s32(vaddq_s32(v7, v8), vaddq_s32(v6, v9)));
    ++v2;
    v4 += a2;
  }
  while (v2 != 64);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  do
  {
    uint64_t v15 = 0;
    int64x2_t v16 = 0uLL;
    int64x2_t v17 = (int64x2_t)(unint64_t)v14;
    int64x2_t v18 = 0uLL;
    int64x2_t v19 = 0uLL;
    int64x2_t v20 = 0uLL;
    int64x2_t v21 = 0uLL;
    int64x2_t v22 = 0uLL;
    int64x2_t v23 = 0uLL;
    do
    {
      uint8x16_t v24 = *(uint8x16_t *)(a1 + v15);
      uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v24.i8);
      uint16x8_t v26 = vmovl_high_u8(v24);
      uint32x4_t v27 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v26.i8);
      uint32x4_t v28 = vmull_high_u16(v25, v25);
      uint32x4_t v29 = vmull_high_u16(v26, v26);
      uint32x4_t v30 = vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v25.i8);
      int64x2_t v19 = (int64x2_t)vaddw_high_u32((uint64x2_t)v19, v28);
      int64x2_t v21 = (int64x2_t)vaddw_high_u32((uint64x2_t)v21, v27);
      int64x2_t v20 = (int64x2_t)vaddw_u32((uint64x2_t)v20, *(uint32x2_t *)v27.i8);
      int64x2_t v18 = (int64x2_t)vaddw_u32((uint64x2_t)v18, *(uint32x2_t *)v28.i8);
      int64x2_t v16 = (int64x2_t)vaddw_high_u32((uint64x2_t)v16, v30);
      int64x2_t v22 = (int64x2_t)vaddw_u32((uint64x2_t)v22, *(uint32x2_t *)v29.i8);
      int64x2_t v17 = (int64x2_t)vaddw_u32((uint64x2_t)v17, *(uint32x2_t *)v30.i8);
      int64x2_t v23 = (int64x2_t)vaddw_high_u32((uint64x2_t)v23, v29);
      v15 += 16;
    }
    while (v15 != 64);
    uint64_t v31 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v17, v20), vaddq_s64(v18, v22)), vaddq_s64(vaddq_s64(v16, v21), vaddq_s64(v19, v23))));
    uint64_t v14 = v31;
    ++v13;
    a1 += a2;
  }
  while (v13 != 64);
  return v31 - ((v3 * (unint64_t)v3 + 2048) >> 12);
}

uint64_t sub_1D0D21960(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = 0;
  uint64_t v4 = 2 * a2;
  uint64_t v5 = a1;
  do
  {
    uint64_t v6 = 0;
    int32x4_t v7 = 0uLL;
    int32x4_t v8 = (int32x4_t)v3;
    do
    {
      uint16x8_t v9 = *(uint16x8_t *)(v5 + v6);
      int32x4_t v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v9);
      int32x4_t v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v9.i8);
      v6 += 16;
    }
    while (v6 != 128);
    unsigned int v3 = vaddvq_s32(vaddq_s32(v8, v7));
    ++v2;
    v5 += v4;
  }
  while (v2 != 64);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = 0;
    int64x2_t v13 = 0uLL;
    int64x2_t v14 = (int64x2_t)(unint64_t)v11;
    int64x2_t v15 = 0uLL;
    int64x2_t v16 = 0uLL;
    do
    {
      uint16x8_t v17 = *(uint16x8_t *)(a1 + v12);
      uint32x4_t v18 = vmull_high_u16(v17, v17);
      uint32x4_t v19 = vmull_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v17.i8);
      int64x2_t v16 = (int64x2_t)vaddw_high_u32((uint64x2_t)v16, v18);
      int64x2_t v15 = (int64x2_t)vaddw_u32((uint64x2_t)v15, *(uint32x2_t *)v18.i8);
      int64x2_t v13 = (int64x2_t)vaddw_high_u32((uint64x2_t)v13, v19);
      int64x2_t v14 = (int64x2_t)vaddw_u32((uint64x2_t)v14, *(uint32x2_t *)v19.i8);
      v12 += 16;
    }
    while (v12 != 128);
    uint64_t v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v14, v15), vaddq_s64(v13, v16)));
    uint64_t v11 = v20;
    ++v10;
    a1 += v4;
  }
  while (v10 != 64);
  return v20 - ((v3 * (unint64_t)v3 + 2048) >> 12);
}

uint64_t sub_1D0D21A34(uint8x8_t *a1, uint64_t a2)
{
  unsigned int v2 = 0;
  unsigned int v3 = a1 + 2;
  uint64_t v4 = 32;
  do
  {
    uint8x16_t v5 = *(uint8x16_t *)v3[-2].i8;
    uint16x8_t v6 = vmovl_high_u8(v5);
    uint16x8_t v7 = vmovl_u8(*(uint8x8_t *)v5.i8);
    uint16x8_t v8 = vmovl_u8(*v3);
    uint16x8_t v9 = vmovl_high_u8(*(uint8x16_t *)v3->i8);
    unsigned int v2 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v2, *(uint16x4_t *)v7.i8), *(uint16x4_t *)v8.i8), vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v6.i8, *(uint16x4_t *)v9.i8), vaddq_s32((int32x4_t)vaddl_high_u16(v7, v8), (int32x4_t)vaddl_high_u16(v6, v9)))));
    unsigned int v3 = (uint8x8_t *)((char *)v3 + a2);
    --v4;
  }
  while (v4);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = 0;
    int64x2_t v13 = 0uLL;
    int64x2_t v14 = (int64x2_t)(unint64_t)v11;
    int64x2_t v15 = 0uLL;
    int64x2_t v16 = 0uLL;
    int64x2_t v17 = 0uLL;
    int64x2_t v18 = 0uLL;
    int64x2_t v19 = 0uLL;
    int64x2_t v20 = 0uLL;
    do
    {
      uint8x16_t v21 = *(uint8x16_t *)a1[v12].i8;
      uint16x8_t v22 = vmovl_u8(*(uint8x8_t *)v21.i8);
      uint16x8_t v23 = vmovl_high_u8(v21);
      uint32x4_t v24 = vmull_u16(*(uint16x4_t *)v23.i8, *(uint16x4_t *)v23.i8);
      uint32x4_t v25 = vmull_high_u16(v22, v22);
      uint32x4_t v26 = vmull_high_u16(v23, v23);
      uint32x4_t v27 = vmull_u16(*(uint16x4_t *)v22.i8, *(uint16x4_t *)v22.i8);
      int64x2_t v16 = (int64x2_t)vaddw_high_u32((uint64x2_t)v16, v25);
      int64x2_t v18 = (int64x2_t)vaddw_high_u32((uint64x2_t)v18, v24);
      int64x2_t v17 = (int64x2_t)vaddw_u32((uint64x2_t)v17, *(uint32x2_t *)v24.i8);
      int64x2_t v15 = (int64x2_t)vaddw_u32((uint64x2_t)v15, *(uint32x2_t *)v25.i8);
      int64x2_t v13 = (int64x2_t)vaddw_high_u32((uint64x2_t)v13, v27);
      int64x2_t v19 = (int64x2_t)vaddw_u32((uint64x2_t)v19, *(uint32x2_t *)v26.i8);
      int64x2_t v14 = (int64x2_t)vaddw_u32((uint64x2_t)v14, *(uint32x2_t *)v27.i8);
      int64x2_t v20 = (int64x2_t)vaddw_high_u32((uint64x2_t)v20, v26);
      v12 += 2;
    }
    while (v12 != 4);
    uint64_t v28 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v14, v17), vaddq_s64(v15, v19)), vaddq_s64(vaddq_s64(v13, v18), vaddq_s64(v16, v20))));
    uint64_t v11 = v28;
    ++v10;
    a1 = (uint8x8_t *)((char *)a1 + a2);
  }
  while (v10 != 32);
  return v28 - ((v2 * (unint64_t)v2 + 512) >> 10);
}

uint64_t sub_1D0D21B50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = 0;
  uint64_t v4 = 2 * a2;
  uint64_t v5 = a1;
  do
  {
    uint64_t v6 = 0;
    int32x4_t v7 = 0uLL;
    int32x4_t v8 = (int32x4_t)v3;
    do
    {
      uint16x8_t v9 = *(uint16x8_t *)(v5 + v6);
      int32x4_t v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v9);
      int32x4_t v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v9.i8);
      v6 += 16;
    }
    while (v6 != 64);
    unsigned int v3 = vaddvq_s32(vaddq_s32(v8, v7));
    ++v2;
    v5 += v4;
  }
  while (v2 != 32);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = 0;
    int64x2_t v13 = 0uLL;
    int64x2_t v14 = (int64x2_t)(unint64_t)v11;
    int64x2_t v15 = 0uLL;
    int64x2_t v16 = 0uLL;
    do
    {
      uint16x8_t v17 = *(uint16x8_t *)(a1 + v12);
      uint32x4_t v18 = vmull_high_u16(v17, v17);
      uint32x4_t v19 = vmull_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v17.i8);
      int64x2_t v16 = (int64x2_t)vaddw_high_u32((uint64x2_t)v16, v18);
      int64x2_t v15 = (int64x2_t)vaddw_u32((uint64x2_t)v15, *(uint32x2_t *)v18.i8);
      int64x2_t v13 = (int64x2_t)vaddw_high_u32((uint64x2_t)v13, v19);
      int64x2_t v14 = (int64x2_t)vaddw_u32((uint64x2_t)v14, *(uint32x2_t *)v19.i8);
      v12 += 16;
    }
    while (v12 != 64);
    uint64_t v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v14, v15), vaddq_s64(v13, v16)));
    uint64_t v11 = v20;
    ++v10;
    a1 += v4;
  }
  while (v10 != 32);
  return v20 - ((v3 * (unint64_t)v3 + 512) >> 10);
}

uint64_t sub_1D0D21C24(uint8x16_t *a1, uint64_t a2)
{
  unsigned int v2 = 0;
  uint64_t v3 = 16;
  uint64_t v4 = a1;
  do
  {
    uint16x8_t v5 = vmovl_high_u8(*v4);
    uint16x8_t v6 = vmovl_u8(*(uint8x8_t *)v4->i8);
    unsigned int v2 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v2, *(uint16x4_t *)v6.i8), *(uint16x4_t *)v5.i8), (int32x4_t)vaddl_high_u16(v6, v5)));
    uint64_t v4 = (uint8x16_t *)((char *)v4 + a2);
    --v3;
  }
  while (v3);
  uint64_t v7 = 0;
  uint64_t v8 = 16;
  do
  {
    uint16x8_t v9 = vmovl_high_u8(*a1);
    uint16x8_t v10 = vmovl_u8(*(uint8x8_t *)a1->i8);
    uint32x4_t v11 = vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v10.i8);
    uint32x4_t v12 = vmull_high_u16(v10, v10);
    uint32x4_t v13 = vmull_high_u16(v9, v9);
    uint32x4_t v14 = vmull_u16(*(uint16x4_t *)v9.i8, *(uint16x4_t *)v9.i8);
    uint64_t v15 = vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v7, *(uint32x2_t *)v11.i8), *(uint32x2_t *)v14.i8), (int64x2_t)vaddl_u32(*(uint32x2_t *)v12.i8, *(uint32x2_t *)v13.i8)), vaddq_s64((int64x2_t)vaddl_high_u32(v11, v14), (int64x2_t)vaddl_high_u32(v12, v13))));
    uint64_t v7 = v15;
    a1 = (uint8x16_t *)((char *)a1 + a2);
    --v8;
  }
  while (v8);
  return v15 - ((v2 * (unint64_t)v2 + 128) >> 8);
}

uint64_t sub_1D0D21CDC(uint16x4_t *a1, uint64_t a2)
{
  unsigned int v2 = 0;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = 2 * a2;
  uint64_t v5 = 16;
  do
  {
    unsigned int v2 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v2, v3[-2]), *v3), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)v3[-2].i8, *(uint16x8_t *)v3->i8)));
    uint64_t v3 = (uint16x4_t *)((char *)v3 + v4);
    --v5;
  }
  while (v5);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = 0;
    int64x2_t v9 = 0uLL;
    int64x2_t v10 = (int64x2_t)(unint64_t)v7;
    int64x2_t v11 = 0uLL;
    int64x2_t v12 = 0uLL;
    do
    {
      uint16x8_t v13 = *(uint16x8_t *)a1[v8].i8;
      uint32x4_t v14 = vmull_high_u16(v13, v13);
      uint32x4_t v15 = vmull_u16(*(uint16x4_t *)v13.i8, *(uint16x4_t *)v13.i8);
      int64x2_t v12 = (int64x2_t)vaddw_high_u32((uint64x2_t)v12, v14);
      int64x2_t v11 = (int64x2_t)vaddw_u32((uint64x2_t)v11, *(uint32x2_t *)v14.i8);
      int64x2_t v9 = (int64x2_t)vaddw_high_u32((uint64x2_t)v9, v15);
      int64x2_t v10 = (int64x2_t)vaddw_u32((uint64x2_t)v10, *(uint32x2_t *)v15.i8);
      v8 += 2;
    }
    while (v8 != 4);
    uint64_t v16 = vaddvq_s64(vaddq_s64(vaddq_s64(v10, v11), vaddq_s64(v9, v12)));
    uint64_t v7 = v16;
    ++v6;
    a1 = (uint16x4_t *)((char *)a1 + v4);
  }
  while (v6 != 16);
  return v16 - ((v2 * (unint64_t)v2 + 128) >> 8);
}

uint64_t sub_1D0D21D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = 0;
  uint64_t v4 = a1;
  do
  {
    for (uint64_t i = 0; i != 8; ++i)
      v3 += *(unsigned __int8 *)(v4 + i);
    ++v2;
    v4 += a2;
  }
  while (v2 != 8);
  uint64_t v6 = 0;
  int v7 = 0;
  do
  {
    for (uint64_t j = 0; j != 8; ++j)
      v7 += *(unsigned __int8 *)(a1 + j) * *(unsigned __int8 *)(a1 + j);
    ++v6;
    a1 += a2;
  }
  while (v6 != 8);
  return v7 - ((v3 * (unint64_t)v3 + 32) >> 6);
}

uint64_t sub_1D0D21E18(uint16x4_t *a1, uint64_t a2)
{
  unsigned int v2 = 0;
  uint64_t v3 = 2 * a2;
  uint64_t v4 = 8;
  uint64_t v5 = a1;
  do
  {
    unsigned int v2 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v2, *v5), *(uint16x8_t *)v5->i8));
    uint64_t v5 = (uint16x4_t *)((char *)v5 + v3);
    --v4;
  }
  while (v4);
  uint64_t v6 = 0;
  uint64_t v7 = 8;
  do
  {
    uint16x8_t v8 = *(uint16x8_t *)a1->i8;
    uint32x4_t v9 = vmull_u16(*(uint16x4_t *)v8.i8, *(uint16x4_t *)v8.i8);
    uint32x4_t v10 = vmull_high_u16(v8, v8);
    uint64_t v11 = vaddvq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v6, *(uint32x2_t *)v9.i8), *(uint32x2_t *)v10.i8), (int64x2_t)vaddl_high_u32(v9, v10)));
    uint64_t v6 = v11;
    a1 = (uint16x4_t *)((char *)a1 + v3);
    --v7;
  }
  while (v7);
  return v11 - ((v2 * (unint64_t)v2 + 32) >> 6);
}

uint64_t sub_1D0D21EA4(__int32 *a1, uint64_t a2, double a3, uint8x8_t a4)
{
  unsigned int v4 = 0;
  uint64_t v5 = 4;
  uint64_t v6 = a1;
  do
  {
    a4.i32[0] = *v6;
    a4 = (uint8x8_t)vmovl_u8(a4).u64[0];
    unsigned int v4 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v4, (uint16x4_t)a4));
    uint64_t v6 = (__int32 *)((char *)v6 + a2);
    --v5;
  }
  while (v5);
  for (uint64_t i = 0; i != 4; ++i)
  {
    for (uint64_t j = 0; j != 4; ++j)
      LODWORD(v5) = v5 + *((unsigned __int8 *)a1 + j) * *((unsigned __int8 *)a1 + j);
    a1 = (__int32 *)((char *)a1 + a2);
  }
  return v5 - ((v4 * (unint64_t)v4 + 8) >> 4);
}

uint64_t sub_1D0D21F1C(uint16x4_t *a1, uint64_t a2)
{
  unsigned int v2 = 0;
  uint64_t v3 = 2 * a2;
  uint64_t v4 = 4;
  uint64_t v5 = a1;
  do
  {
    unsigned int v2 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v2, *v5));
    uint64_t v5 = (uint16x4_t *)((char *)v5 + v3);
    --v4;
  }
  while (v4);
  for (uint64_t i = 0; i != 4; ++i)
  {
    for (uint64_t j = 0; j != 4; ++j)
      LODWORD(v4) = v4 + a1->u16[j] * a1->u16[j];
    a1 = (uint16x4_t *)((char *)a1 + v3);
  }
  return v4 - ((v2 * (unint64_t)v2 + 8) >> 4);
}

unint64_t sub_1D0D21F94(uint8x16_t *a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, uint64_t *a7)
{
  if (a4 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)a3 >> 3;
    uint64_t v10 = 8 * v9;
    uint64_t v11 = 4 * v9;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v12 = 0;
        LODWORD(v13) = (a4 - (int)v7) >> 3;
        if ((int)v13 >= 2) {
          uint64_t v13 = 2;
        }
        else {
          uint64_t v13 = v13;
        }
        uint32x4_t v14 = a1;
        uint32x4_t v15 = a5;
        do
        {
          if (a4 - (int)v7 < 8)
          {
            int v17 = 0;
          }
          else
          {
            uint64_t v16 = 0;
            int v17 = 0;
            LODWORD(v18) = (a3 - (int)v12) >> 3;
            if ((int)v18 >= 2) {
              uint64_t v18 = 2;
            }
            else {
              uint64_t v18 = v18;
            }
            uint32x4_t v19 = v15;
            do
            {
              uint64_t v20 = v19;
              uint64_t v21 = v18;
              if (a3 - (int)v12 >= 8)
              {
                do
                {
                  int v22 = *v20++;
                  v17 += v22;
                  --v21;
                }
                while (v21);
              }
              ++v16;
              uint32x4_t v19 = (int *)((char *)v19 + v11);
            }
            while (v16 != v13);
          }
          uint64_t v23 = 0;
          uint32x4_t v24 = v14;
          uint64_t v25 = 16;
          do
          {
            uint16x8_t v26 = vmovl_high_u8(*v24);
            uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v24->i8);
            uint32x4_t v28 = vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v27.i8);
            uint32x4_t v29 = vmull_high_u16(v27, v27);
            uint32x4_t v30 = vmull_high_u16(v26, v26);
            uint32x4_t v31 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v26.i8);
            uint64_t v32 = vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v23, *(uint32x2_t *)v28.i8), *(uint32x2_t *)v31.i8), (int64x2_t)vaddl_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v30.i8)), vaddq_s64((int64x2_t)vaddl_high_u32(v28, v31), (int64x2_t)vaddl_high_u32(v29, v30))));
            uint64_t v23 = v32;
            uint32x4_t v24 = (uint8x16_t *)((char *)v24 + a2);
            --v25;
          }
          while (v25);
          *a6++ = v17;
          *a7++ = v32;
          v8 += (v32 - (unint64_t)((v17 * v17) >> 8) + 128) >> 8;
          v12 += 16;
          v15 += 2;
          ++v14;
        }
        while (v12 < a3);
      }
      a1 += a2;
      v7 += 16;
      a5 = (int *)((char *)a5 + v10);
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

unint64_t sub_1D0D22134(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, uint64_t *a7)
{
  if (a4 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)a3 >> 3;
    uint64_t v10 = 8 * v9;
    uint64_t v11 = 4 * v9;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v12 = 0;
        LODWORD(v13) = (a4 - (int)v7) >> 3;
        if ((int)v13 >= 2) {
          uint64_t v13 = 2;
        }
        else {
          uint64_t v13 = v13;
        }
        uint64_t v14 = a1;
        uint32x4_t v15 = a5;
        do
        {
          if (a4 - (int)v7 < 8)
          {
            int v17 = 0;
          }
          else
          {
            uint64_t v16 = 0;
            int v17 = 0;
            LODWORD(v18) = (a3 - (int)v12) >> 3;
            if ((int)v18 >= 2) {
              uint64_t v18 = 2;
            }
            else {
              uint64_t v18 = v18;
            }
            uint32x4_t v19 = v15;
            do
            {
              uint64_t v20 = v19;
              uint64_t v21 = v18;
              if (a3 - (int)v12 >= 8)
              {
                do
                {
                  int v22 = *v20++;
                  v17 += v22;
                  --v21;
                }
                while (v21);
              }
              ++v16;
              uint32x4_t v19 = (int *)((char *)v19 + v11);
            }
            while (v16 != v13);
          }
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = v14;
          do
          {
            uint64_t v26 = 0;
            int64x2_t v27 = 0uLL;
            int64x2_t v28 = (int64x2_t)(unint64_t)v24;
            int64x2_t v29 = 0uLL;
            int64x2_t v30 = 0uLL;
            do
            {
              uint16x8_t v31 = *(uint16x8_t *)(v25 + v26);
              uint32x4_t v32 = vmull_high_u16(v31, v31);
              uint32x4_t v33 = vmull_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v31.i8);
              int64x2_t v30 = (int64x2_t)vaddw_high_u32((uint64x2_t)v30, v32);
              int64x2_t v29 = (int64x2_t)vaddw_u32((uint64x2_t)v29, *(uint32x2_t *)v32.i8);
              int64x2_t v27 = (int64x2_t)vaddw_high_u32((uint64x2_t)v27, v33);
              int64x2_t v28 = (int64x2_t)vaddw_u32((uint64x2_t)v28, *(uint32x2_t *)v33.i8);
              v26 += 16;
            }
            while (v26 != 32);
            uint64_t v34 = vaddvq_s64(vaddq_s64(vaddq_s64(v28, v29), vaddq_s64(v27, v30)));
            uint64_t v24 = v34;
            ++v23;
            v25 += 2 * a2;
          }
          while (v23 != 16);
          *a6++ = v17;
          *a7++ = v34;
          v8 += (v34 - (unint64_t)((v17 * v17) >> 8) + 128) >> 8;
          v12 += 16;
          v15 += 2;
          v14 += 32;
        }
        while (v12 < a3);
      }
      v7 += 16;
      a5 = (int *)((char *)a5 + v10);
      a1 += 32 * a2;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

unint64_t sub_1D0D222E4(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, void *a7)
{
  if (a4 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a1;
        uint64_t v11 = a5;
        do
        {
          if (a4 - (int)v7 < 8
            || ((LODWORD(v12) = (a3 - (int)v9) >> 3, (int)v12 >= 1) ? (uint64_t v12 = 1) : (uint64_t v12 = v12),
                a3 - (int)v9 < 8))
          {
            int v13 = 0;
          }
          else
          {
            int v13 = 0;
            uint64_t v14 = v11;
            do
            {
              int v15 = *v14++;
              v13 += v15;
              --v12;
            }
            while (v12);
          }
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = v10;
          do
          {
            for (uint64_t i = 0; i != 8; ++i)
              v17 += *(unsigned __int8 *)(v18 + i) * *(unsigned __int8 *)(v18 + i);
            ++v16;
            v18 += a2;
          }
          while (v16 != 8);
          *a6++ = v13;
          *a7++ = v17;
          v8 += (v17 - (unint64_t)((v13 * v13) >> 6) + 32) >> 6;
          v9 += 8;
          ++v11;
          v10 += 8;
        }
        while (v9 < a3);
      }
      a1 += 8 * a2;
      v7 += 8;
      a5 += (uint64_t)a3 >> 3;
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 7)) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

unint64_t sub_1D0D22418(uint16x8_t *a1, uint64_t a2, int a3, int a4, int *a5, _DWORD *a6, uint64_t *a7)
{
  if (a4 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 16 * a2;
    uint64_t v10 = 2 * a2;
    do
    {
      if (a3 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a1;
        int v13 = a5;
        do
        {
          if (a4 - (int)v7 < 8
            || ((LODWORD(v14) = (a3 - (int)v11) >> 3, (int)v14 >= 1) ? (uint64_t v14 = 1) : (uint64_t v14 = v14),
                a3 - (int)v11 < 8))
          {
            int v15 = 0;
          }
          else
          {
            int v15 = 0;
            uint64_t v16 = v13;
            do
            {
              int v17 = *v16++;
              v15 += v17;
              --v14;
            }
            while (v14);
          }
          uint64_t v18 = 0;
          uint32x4_t v19 = v12;
          uint64_t v20 = 8;
          do
          {
            uint16x8_t v21 = *v19;
            uint32x4_t v22 = vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v21.i8);
            uint32x4_t v23 = vmull_high_u16(v21, v21);
            uint64_t v24 = vaddvq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v18, *(uint32x2_t *)v22.i8), *(uint32x2_t *)v23.i8), (int64x2_t)vaddl_high_u32(v22, v23)));
            uint64_t v18 = v24;
            uint32x4_t v19 = (uint16x8_t *)((char *)v19 + v10);
            --v20;
          }
          while (v20);
          *a6++ = v15;
          *a7++ = v24;
          v8 += (v24 - (unint64_t)((v15 * v15) >> 6) + 32) >> 6;
          v11 += 8;
          ++v13;
          ++v12;
        }
        while (v11 < a3);
      }
      v7 += 8;
      a5 += (uint64_t)a3 >> 3;
      a1 = (uint16x8_t *)((char *)a1 + v9);
    }
    while (v7 < a4);
  }
  return (v8 + ((a4 * a3) >> 7)) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

uint64_t sub_1D0D22554(uint16x4_t *a1, uint64_t a2, int a3, int a4, unsigned int *a5, _DWORD *a6, unsigned int *a7, uint64_t a8)
{
  if (a4 < 1) {
    return 0;
  }
  int v9 = 0;
  uint64_t result = 0;
  uint64_t v11 = 16 * a2;
  uint64_t v12 = 2 * a2;
  do
  {
    if (a3 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = a1;
      do
      {
        unsigned int v15 = 0;
        uint64_t v16 = v14;
        uint64_t v17 = 8;
        do
        {
          unsigned int v15 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v15, *v16), *(uint16x8_t *)v16->i8));
          uint64_t v16 = (uint16x4_t *)((char *)v16 + v12);
          --v17;
        }
        while (v17);
        unsigned int v18 = (v15 + 32) >> 6;
        uint32x4_t v19 = (uint32x4_t)vdupq_n_s32(v18);
        uint64_t v20 = v14;
        uint64_t v21 = 8;
        do
        {
          LODWORD(v17) = vaddvq_s32((int32x4_t)vabaq_u32(vabaq_u32((uint32x4_t)v17, v19, vmovl_u16(*v20)), v19, vmovl_high_u16(*(uint16x8_t *)v20->i8)));
          uint64_t v20 = (uint16x4_t *)((char *)v20 + v12);
          --v21;
        }
        while (v21);
        *a5++ = v15;
        *a6++ = v17;
        uint64_t result = (v17 + result);
        *a7++ = (v17 * *(unsigned __int16 *)(a8 + 2 * v18)) >> 8;
        v13 += 8;
        v14 += 2;
      }
      while (v13 < a3);
    }
    v9 += 8;
    a1 = (uint16x4_t *)((char *)a1 + v11);
  }
  while (v9 < a4);
  return result;
}

uint64_t sub_1D0D2264C(uint16x4_t *a1, uint64_t a2, int a3, int a4, unsigned int *a5, unsigned int *a6)
{
  if (a4 < 1) {
    return 0;
  }
  int v7 = 0;
  uint64_t result = 0;
  uint64_t v9 = 16 * a2;
  uint64_t v10 = 2 * a2;
  do
  {
    if (a3 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = a1;
      do
      {
        unsigned int v13 = 0;
        uint64_t v14 = v12;
        uint64_t v15 = 8;
        do
        {
          unsigned int v13 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v13, *v14), *(uint16x8_t *)v14->i8));
          uint64_t v14 = (uint16x4_t *)((char *)v14 + v10);
          --v15;
        }
        while (v15);
        unsigned int v16 = 0;
        uint32x4_t v17 = (uint32x4_t)vdupq_n_s32((v13 + 32) >> 6);
        unsigned int v18 = v12;
        uint64_t v19 = 8;
        do
        {
          unsigned int v16 = vaddvq_s32((int32x4_t)vabaq_u32(vabaq_u32((uint32x4_t)v16, v17, vmovl_u16(*v18)), v17, vmovl_high_u16(*(uint16x8_t *)v18->i8)));
          unsigned int v18 = (uint16x4_t *)((char *)v18 + v10);
          --v19;
        }
        while (v19);
        *a5++ = v13;
        *a6++ = v16;
        uint64_t result = v16 + result;
        v11 += 8;
        v12 += 2;
      }
      while (v11 < a3);
    }
    v7 += 8;
    a1 = (uint16x4_t *)((char *)a1 + v9);
  }
  while (v7 < a4);
  return result;
}

uint64_t sub_1D0D22730(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, int *a6, _DWORD *a7, uint64_t a8)
{
  if (a4 < 1) {
    return 0;
  }
  int v9 = 0;
  uint64_t result = 0;
  uint64_t v11 = 2 * a2;
  do
  {
    if (a3 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = a1;
      do
      {
        uint64_t v14 = 0;
        *a5 = 0;
        *a6 = 0;
        char v15 = 1;
        *a7 = 0;
        do
        {
          uint64_t v16 = 0;
          char v17 = v15;
          uint64_t v18 = v14 * a2;
          char v19 = 1;
          do
          {
            unsigned int v20 = 0;
            char v21 = v19;
            uint64_t v22 = 2 * (v16 + v18);
            uint32x4_t v23 = (uint16x4_t *)(v13 + v22);
            uint64_t v24 = 4;
            do
            {
              unsigned int v20 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v20, *v23));
              uint32x4_t v23 = (uint16x4_t *)((char *)v23 + v11);
              --v24;
            }
            while (v24);
            signed int v25 = (int)(v20 + 8) >> 4;
            int32x4_t v26 = vdupq_n_s32(v25);
            uint64_t v27 = 4;
            do
            {
              LODWORD(v24) = vaddvq_s32(vabaq_s32((int32x4_t)v24, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v13 + v22)), v26));
              v22 += v11;
              --v27;
            }
            while (v27);
            char v19 = 0;
            *a6 += v24;
            int v28 = *(unsigned __int16 *)(a8 + 2 * v25);
            *a5 += v20;
            *a7 += (v24 * v28) >> 8;
            uint64_t v16 = 4;
          }
          while ((v21 & 1) != 0);
          char v15 = 0;
          uint64_t v14 = 4;
        }
        while ((v17 & 1) != 0);
        ++a5;
        ++a7;
        int v29 = *a6++;
        uint64_t result = (v29 + result);
        v12 += 8;
        v13 += 16;
      }
      while (v12 < a3);
    }
    v9 += 8;
    a1 += 16 * a2;
  }
  while (v9 < a4);
  return result;
}

uint64_t sub_1D0D22890(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, int *a6)
{
  if (a4 < 1) {
    return 0;
  }
  int v7 = 0;
  uint64_t result = 0;
  uint64_t v9 = 2 * a2;
  do
  {
    if (a3 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = a1;
      do
      {
        uint64_t v12 = 0;
        *a5 = 0;
        *a6 = 0;
        char v13 = 1;
        do
        {
          uint64_t v14 = 0;
          char v15 = v13;
          uint64_t v16 = v12 * a2;
          char v17 = 1;
          do
          {
            unsigned int v18 = 0;
            char v19 = v17;
            uint64_t v20 = 2 * (v14 + v16);
            char v21 = (uint16x4_t *)(v11 + v20);
            uint64_t v22 = 4;
            do
            {
              unsigned int v18 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v18, *v21));
              char v21 = (uint16x4_t *)((char *)v21 + v9);
              --v22;
            }
            while (v22);
            unsigned int v23 = 0;
            int32x4_t v24 = vdupq_n_s32((int)(v18 + 8) >> 4);
            uint64_t v25 = 4;
            do
            {
              unsigned int v23 = vaddvq_s32(vabaq_s32((int32x4_t)v23, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v11 + v20)), v24));
              v20 += v9;
              --v25;
            }
            while (v25);
            char v17 = 0;
            *a6 += v23;
            *a5 += v18;
            uint64_t v14 = 4;
          }
          while ((v19 & 1) != 0);
          char v13 = 0;
          uint64_t v12 = 4;
        }
        while ((v15 & 1) != 0);
        ++a5;
        int v26 = *a6++;
        uint64_t result = (v26 + result);
        v10 += 8;
        v11 += 16;
      }
      while (v10 < a3);
    }
    v7 += 8;
    a1 += 16 * a2;
  }
  while (v7 < a4);
  return result;
}

uint64_t sub_1D0D229C8(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, _DWORD *a6, unsigned int *a7, uint64_t a8)
{
  if (a4 < 1) {
    return 0;
  }
  int v9 = 0;
  uint64_t result = 0;
  do
  {
    if (a3 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = a1;
      do
      {
        uint64_t v13 = 0;
        int v14 = 0;
        uint64_t v15 = v12;
        do
        {
          for (uint64_t i = 0; i != 8; ++i)
            v14 += *(unsigned __int8 *)(v15 + i);
          ++v13;
          v15 += a2;
        }
        while (v13 != 8);
        uint64_t v17 = 0;
        int v18 = 0;
        unsigned int v19 = (v14 + 32) >> 6;
        uint64_t v20 = v12;
        do
        {
          for (uint64_t j = 0; j != 8; ++j)
          {
            int v22 = *(unsigned __int8 *)(v20 + j) - v19;
            if (v22 < 0) {
              int v22 = v19 - *(unsigned __int8 *)(v20 + j);
            }
            v18 += v22;
          }
          ++v17;
          v20 += a2;
        }
        while (v17 != 8);
        *a5++ = v14;
        *a6++ = v18;
        uint64_t result = (v18 + result);
        *a7++ = (v18 * *(unsigned __int16 *)(a8 + 2 * v19)) >> 8;
        v11 += 8;
        v12 += 8;
      }
      while (v11 < a3);
    }
    a1 += 8 * a2;
    v9 += 8;
  }
  while (v9 < a4);
  return result;
}

uint64_t sub_1D0D22AC4(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, _DWORD *a6)
{
  if (a4 < 1) {
    return 0;
  }
  int v7 = 0;
  uint64_t result = 0;
  do
  {
    if (a3 >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a1;
      do
      {
        uint64_t v11 = 0;
        int v12 = 0;
        uint64_t v13 = v10;
        do
        {
          for (uint64_t i = 0; i != 8; ++i)
            v12 += *(unsigned __int8 *)(v13 + i);
          ++v11;
          v13 += a2;
        }
        while (v11 != 8);
        uint64_t v15 = 0;
        int v16 = 0;
        uint64_t v18 = v10;
        do
        {
          for (uint64_t j = 0; j != 8; ++j)
          {
            unsigned int v17 = (v12 + 32) >> 6;
            int v20 = *(unsigned __int8 *)(v18 + j) - v17;
            if (v20 < 0) {
              int v20 = v17 - *(unsigned __int8 *)(v18 + j);
            }
            v16 += v20;
          }
          ++v15;
          v18 += a2;
        }
        while (v15 != 8);
        *a5++ = v12;
        *a6++ = v16;
        uint64_t result = (v16 + result);
        v9 += 8;
        v10 += 8;
      }
      while (v9 < a3);
    }
    a1 += 8 * a2;
    v7 += 8;
  }
  while (v7 < a4);
  return result;
}

uint64_t sub_1D0D22BA8(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, int *a6, _DWORD *a7, uint64_t a8, double a9, int32x4_t a10, int32x4_t a11)
{
  if (a4 < 1) {
    return 0;
  }
  int v12 = 0;
  uint64_t result = 0;
  do
  {
    if (a3 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = a1;
      do
      {
        uint64_t v16 = 0;
        *a5 = 0;
        *a6 = 0;
        char v17 = 1;
        *a7 = 0;
        do
        {
          uint64_t v18 = 0;
          char v19 = v17;
          uint64_t v20 = v16 * a2;
          char v21 = 1;
          do
          {
            unsigned int v22 = 0;
            char v23 = v21;
            uint64_t v24 = v18 + v20;
            uint64_t v25 = (unsigned __int32 *)(v15 + v20 + v18);
            uint64_t v26 = 4;
            do
            {
              a10.i32[0] = *v25;
              a10.i64[0] = vmovl_u8(*(uint8x8_t *)a10.i8).u64[0];
              unsigned int v22 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v22, *(uint16x4_t *)a10.i8));
              uint64_t v25 = (unsigned __int32 *)((char *)v25 + a2);
              --v26;
            }
            while (v26);
            signed int v27 = (int)(v22 + 8) >> 4;
            int32x4_t v28 = vdupq_n_s32(v27);
            uint64_t v29 = 4;
            do
            {
              a11.i32[0] = *(_DWORD *)(v15 + v24);
              a11 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a11.i8));
              a10 = vabaq_s32((int32x4_t)v26, a11, v28);
              LODWORD(v26) = vaddvq_s32(a10);
              v24 += a2;
              --v29;
            }
            while (v29);
            char v21 = 0;
            *a6 += v26;
            int v30 = *(unsigned __int16 *)(a8 + 2 * v27);
            *a5 += v22;
            *a7 += (v26 * v30) >> 8;
            uint64_t v18 = 4;
          }
          while ((v23 & 1) != 0);
          char v17 = 0;
          uint64_t v16 = 4;
        }
        while ((v19 & 1) != 0);
        ++a5;
        ++a7;
        int v31 = *a6++;
        uint64_t result = (v31 + result);
        v14 += 8;
        v15 += 8;
      }
      while (v14 < a3);
    }
    a1 += 8 * a2;
    v12 += 8;
  }
  while (v12 < a4);
  return result;
}

uint64_t sub_1D0D22D0C(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, int *a6, double a7, int32x4_t a8, int32x4_t a9)
{
  if (a4 < 1) {
    return 0;
  }
  int v10 = 0;
  uint64_t result = 0;
  do
  {
    if (a3 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = a1;
      do
      {
        uint64_t v14 = 0;
        *a5 = 0;
        *a6 = 0;
        char v15 = 1;
        do
        {
          uint64_t v16 = 0;
          char v17 = v15;
          uint64_t v18 = v14 * a2;
          char v19 = 1;
          do
          {
            unsigned int v20 = 0;
            char v21 = v19;
            uint64_t v22 = v16 + v18;
            char v23 = (unsigned __int32 *)(v13 + v18 + v16);
            uint64_t v24 = 4;
            do
            {
              a8.i32[0] = *v23;
              a8.i64[0] = vmovl_u8(*(uint8x8_t *)a8.i8).u64[0];
              unsigned int v20 = vaddvq_s32((int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)a8.i8));
              char v23 = (unsigned __int32 *)((char *)v23 + a2);
              --v24;
            }
            while (v24);
            int32x4_t v25 = vdupq_n_s32((int)(v20 + 8) >> 4);
            uint64_t v26 = 4;
            do
            {
              a9.i32[0] = *(_DWORD *)(v13 + v22);
              a9 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a9.i8));
              a8 = vabaq_s32((int32x4_t)v24, a9, v25);
              LODWORD(v24) = vaddvq_s32(a8);
              v22 += a2;
              --v26;
            }
            while (v26);
            char v19 = 0;
            *a6 += v24;
            *a5 += v20;
            uint64_t v16 = 4;
          }
          while ((v21 & 1) != 0);
          char v15 = 0;
          uint64_t v14 = 4;
        }
        while ((v17 & 1) != 0);
        ++a5;
        int v27 = *a6++;
        uint64_t result = (v27 + result);
        v12 += 8;
        v13 += 8;
      }
      while (v12 < a3);
    }
    a1 += 8 * a2;
    v10 += 8;
  }
  while (v10 < a4);
  return result;
}

int *sub_1D0D22E44(int *result, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)a2 + 748) & 1) == 0)
  {
    uint64_t v2 = (uint64_t)result;
    *(unsigned char *)(*(void *)a2 + 748) |= 1u;
    sub_1D0D23080(result, a2);
    int v3 = *(_DWORD *)(v2 + 4728);
    uint64_t v4 = (v3 >> 3);
    int v5 = *(_DWORD *)(v2 + 4732);
    uint64_t v6 = (v5 >> 3);
    if (*(unsigned char *)(v2 + 17))
    {
      if (*(int *)(v2 + 5548) >= 1 && v5 >= 8)
      {
        int v8 = 0;
        int v9 = 0;
        int v10 = 0;
        if ((int)v4 <= 1) {
          int v11 = 1;
        }
        else {
          int v11 = v3 >> 3;
        }
        if ((int)v6 <= 1) {
          int v12 = 1;
        }
        else {
          int v12 = v6;
        }
        int v13 = 8 * v11;
        do
        {
          if (v3 >= 8)
          {
            int v14 = 0;
            do
            {
              if (!sub_1D0D24F64(v2, v14, 8 * v8, 8))
              {
                v10 += **(_DWORD **)(v2 + 4872);
                ++v9;
              }
              v14 += 8;
            }
            while (v13 != v14);
          }
          ++v8;
        }
        while (v8 != v12);
        uint64_t v4 = (v3 >> 3);
        if (v9 >= 1)
        {
          unsigned int v15 = (int)(v10 + (v9 >> 1)) / v9;
          if (v15 >= 2)
          {
            unsigned int v16 = __clz(v15);
            unsigned int v17 = ((byte_1D0DAE264[(unint64_t)(v15 << (v16 + 1)) >> 24] << 12) | 0x200000u) >> ((v16 + 1) >> 1);
            if ((v16 & 1) == 0) {
              unsigned int v17 = (11585 * v17) >> 14;
            }
            unsigned int v15 = (v17 + 16) >> 5;
          }
          *(_DWORD *)(v2 + 5544) = v15;
        }
      }
    }
    uint64_t result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, void, void))(v2 + 200))(v4, v6, *(void *)(v2 + 4848), *(void *)(v2 + 4928));
    uint64_t v18 = *(void *)(v2 + 2232);
    uint64_t v19 = *(void *)(v18 + 576);
    switch(*(unsigned char *)(v19 + 493))
    {
      case 0:
      case 1:
        unsigned int v20 = *(_DWORD *)(v2 + 4820);
        goto LABEL_33;
      case 2:
      case 4:
        unsigned int v20 = *(_DWORD *)(v2 + 4824);
        goto LABEL_33;
      case 3:
        unsigned int v20 = *(_DWORD *)(v2 + 4824);
        if (v20 >= 2)
        {
          unsigned int v21 = __clz(v20);
          unsigned int v22 = ((byte_1D0DAE264[(unint64_t)(v20 << (v21 + 1)) >> 24] << 12) | 0x200000u) >> ((v21 + 1) >> 1);
          if ((v21 & 1) == 0) {
            unsigned int v22 = (11585 * v22) >> 14;
          }
          unsigned int v20 = (v22 + 16) >> 5;
        }
LABEL_33:
        *(_DWORD *)(v2 + 4840) = v20;
        break;
      default:
        break;
    }
    if (*(unsigned char *)(v19 + 870)) {
      *(_DWORD *)(*(void *)(v18 + 632) + 1152) = *(_DWORD *)(v2 + 4812);
    }
  }
  return result;
}

void sub_1D0D23080(int *a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)a2 + 748) & 4) == 0)
  {
    *(unsigned char *)(*(void *)a2 + 748) |= 4u;
    uint64_t v2 = *(unsigned char **)(*((void *)a1 + 279) + 576);
    uint64_t v24 = *(void *)(*(void *)a2 + 416);
    uint64_t v25 = *(void *)(*(void *)a2 + 400);
    int v3 = (*(uint64_t (**)(void))&a1[2 * (v2[493] != 0) + 16])();
    uint64_t v4 = a1;
    int v26 = v3;
    if (v2[484] || v2[487])
    {
      int v5 = a1[1182];
      int v29 = a1[1183];
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643418, memory_order_acquire) & 1) == 0)
      {
        int v23 = __cxa_guard_acquire(&qword_1EA643418);
        uint64_t v4 = a1;
        if (v23)
        {
          dword_1EA643410 = *(unsigned __int8 *)(*(void *)(*((void *)a1 + 279) + 40) + 2113) - 3;
          __cxa_guard_release(&qword_1EA643418);
          uint64_t v4 = a1;
        }
      }
      int v6 = dword_1EA643410;
      if ((dword_1EA643410 & 0x80000000) == 0)
      {
        uint64_t v7 = 0;
        do
        {
          if (v29 >= 1)
          {
            int v30 = 0;
            int v8 = 8 << v7;
            char v9 = v7 + 3;
            uint64_t v27 = v7;
            int v28 = (v5 - 1 + (8 << v7)) >> (v7 + 3);
            int v10 = 1 << v7;
            int v11 = &v4[2 * v7 + 1334];
            do
            {
              if (v5 >= 1)
              {
                int v12 = 0;
                if ((v29 - v30) >> 3 >= v10) {
                  int v13 = v10;
                }
                else {
                  int v13 = (v29 - v30) >> 3;
                }
                unsigned int v33 = v13;
                int v32 = v13 << 6;
                int v14 = v5;
                do
                {
                  if (v14 >> 3 >= v10) {
                    uint64_t v15 = v10;
                  }
                  else {
                    uint64_t v15 = (v14 >> 3);
                  }
                  int v16 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v4 + 23))(*((void *)v4 + 606) + 4 * (v5 >> 3) * (uint64_t)(v30 >> 3) + 4 * (v12 >> 3), (uint64_t)v5 >> 3, v15, v33);
                  uint64_t v4 = a1;
                  *(_DWORD *)(*(void *)v11 + 4 * v28 * (uint64_t)(v30 >> v9) + 4 * (v12 >> v9)) = (v16 + ((v32 * v15) >> 1)) / (v32 * (int)v15);
                  v12 += v8;
                  v14 -= v8;
                }
                while (v12 < v5);
              }
              v30 += v8;
            }
            while (v30 < v29);
            int v6 = dword_1EA643410;
            uint64_t v7 = v27;
          }
        }
        while (v7++ < v6);
      }
    }
    if (*((unsigned char *)v4 + 16))
    {
      int v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void))&v4[2 * *v4 + 14])(v25, v24, v4[1182], v4[1183], *((void *)v4 + 606), *((void *)v4 + 622), *((void *)v4 + 625));
      uint64_t v4 = a1;
      a1[1206] = v18;
    }
    int v19 = (v4[1183] >> 3) * (v4[1182] >> 3);
    unsigned int v20 = (v26 + (v19 >> 1)) / v19;
    v4[1203] = v20;
    if (v20 >= 2)
    {
      unsigned int v21 = __clz(v20);
      unsigned int v22 = ((byte_1D0DAE264[(unint64_t)(v20 << (v21 + 1)) >> 24] << 12) | 0x200000u) >> ((v21 + 1) >> 1);
      if ((v21 & 1) == 0) {
        unsigned int v22 = (11585 * v22) >> 14;
      }
      unsigned int v20 = (v22 + 16) >> 5;
    }
    v4[1205] = v20;
  }
}

void sub_1D0D23384(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v4 = v2;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(*(void *)(v1 + 2232) + 576) + 913))
  {
    uint64_t v19 = *v2;
    *(void *)(v19 + 672) = -1;
    *(void *)(v19 + 664) = -1;
    *(unsigned char *)(v19 + 680) = 0;
    return;
  }
  int v5 = v3;
  uint64_t v6 = v1;
  sub_1D0D23080((int *)v1, (uint64_t)v2);
  uint64_t v7 = *(char **)(v6 + 4976);
  int v8 = *(int **)(v6 + 5000);
  char v9 = *(char **)(v6 + 4984);
  bzero(v41, 0x2000uLL);
  uint64_t v10 = v9 - v7;
  if (v9 == v7)
  {
    int v18 = 0;
  }
  else
  {
    uint64_t v11 = v10 >> 2;
    do
    {
      unsigned int v12 = *(_DWORD *)v7;
      v7 += 4;
      unint64_t v13 = (v12 * (unint64_t)v12 + 32) >> 6;
      int v14 = *v8;
      v8 += 2;
      unsigned int v15 = (16 * (v14 - v13) + 512) & 0xFFFFFC00;
      if (v15)
      {
        unsigned int v16 = __clz(v15);
        unsigned int v17 = ((byte_1D0DAE264[(unint64_t)(v15 << (v16 + 1)) >> 24] << 12) | 0x200000u) >> ((v16 + 1) >> 1);
        if ((v16 & 1) == 0) {
          unsigned int v17 = (11585 * v17) >> 14;
        }
        unsigned int v15 = (v17 + 16) >> 5;
      }
      if (v15 >= 0x7FF) {
        unsigned int v15 = 2047;
      }
      ++v41[v15];
      --v11;
    }
    while (v11);
    int v18 = v41[0];
  }
  int v20 = 30 * ((unint64_t)v10 >> 2);
  if (v18 >= v20 >> 7)
  {
    int v23 = 0;
    if (v5)
    {
LABEL_19:
      *(_DWORD *)(*v4 + 676) = v23;
      return;
    }
  }
  else
  {
    unint64_t v21 = 0;
    int v22 = v20 >> 7;
    do
    {
      int v23 = v21 + 1;
      if (v21 > 0x7FD) {
        break;
      }
      v18 += v41[++v21];
    }
    while (v18 < v22);
    if (v5) {
      goto LABEL_19;
    }
  }
  if (*(unsigned __int8 *)(*(void *)(v6 + 2232) + 648) >= 3u)
  {
    uint64_t v25 = *(unsigned int *)(v6 + 5424);
    uint64_t v26 = *(unsigned int *)(v6 + 5428);
    uint64_t v27 = *(void *)(v6 + 5416);
    bzero(v41, 0x2000uLL);
    if (v26)
    {
      uint64_t v28 = 0;
      int v29 = *(unsigned int **)(v6 + 5392);
      do
      {
        int v30 = v29;
        uint64_t v31 = v25;
        if (v25)
        {
          do
          {
            unsigned int v33 = *v30++;
            int v32 = v33;
            if (v33 >= 0x7FF) {
              int v32 = 2047;
            }
            ++v41[v32];
            --v31;
          }
          while (v31);
        }
        ++v28;
        v29 += v27;
      }
      while (v28 != v26);
      int v34 = v41[0];
    }
    else
    {
      int v34 = 0;
    }
    int v35 = 30 * v25 * v26;
    if (v34 >= v35 >> 7)
    {
      int v38 = 0;
    }
    else
    {
      unint64_t v36 = 0;
      int v37 = v35 >> 7;
      do
      {
        int v38 = v36 + 1;
        if (v36 > 0x7FD) {
          break;
        }
        v34 += v41[++v36];
      }
      while (v34 < v37);
    }
    float v39 = (_DWORD *)*v4;
    if (v38 >= v23) {
      int v40 = v23;
    }
    else {
      int v40 = v38;
    }
    v39[166] = v23;
    v39[167] = v38;
    v39[168] = v40;
  }
  else
  {
    uint64_t v24 = (_DWORD *)*v4;
    v24[166] = v23;
    v24[167] = -1;
    v24[168] = v23;
  }
}

uint64_t sub_1D0D23668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = -1;
  int v4 = a3;
  while (1)
  {
    int v4 = *(_DWORD *)(a2 + 4 * v4);
    if (!v4) {
      break;
    }
    if (v4 >= (int)a3) {
      a3 = a3;
    }
    else {
      a3 = v4;
    }
    if (++v3 >= *(_DWORD *)(a1 + 4808))
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("FindMinInd Fails!\n", 0x12uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "FindMinInd Fails!\n");
      }
      return 0;
    }
  }
  return a3;
}

void sub_1D0D236F4(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  int v5 = *(_DWORD *)(a2 + 4 * a5);
  if (a5 == a4) {
    int v6 = 0;
  }
  else {
    int v6 = a4;
  }
  *(_DWORD *)(a2 + 4 * a5) = v6;
  if (a3 >= 2)
  {
    uint64_t v7 = a3 - 1;
    int v8 = (int *)(a2 + 4);
    do
    {
      int v9 = *v8;
      if (*v8 && (v9 == a5 || v9 == *(_DWORD *)(a2 + 4 * a5))) {
        *int v8 = a4;
      }
      ++v8;
      --v7;
    }
    while (v7);
  }
  int v10 = 0;
  while (v5)
  {
    int v11 = *(_DWORD *)(a2 + 4 * v5);
    if (v5 == a4) {
      int v12 = 0;
    }
    else {
      int v12 = a4;
    }
    *(_DWORD *)(a2 + 4 * v5) = v12;
    if (a3 >= 2)
    {
      unint64_t v13 = (int *)(a2 + 4);
      uint64_t v14 = a3 - 1;
      do
      {
        int v15 = *v13;
        if (*v13 && (v15 == v5 || v15 == *(_DWORD *)(a2 + 4 * v5))) {
          *unint64_t v13 = a4;
        }
        ++v13;
        --v14;
      }
      while (v14);
    }
    int v5 = v11;
    if (v10++ >= *(_DWORD *)(a1 + 4808))
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("InsertNewInd Fails!\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "InsertNewInd Fails!\n");
      }
      return;
    }
  }
}

uint64_t sub_1D0D2381C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2248);
  sub_1D0D078F4(*(void *)(a1 + 2216) + 48, *(unsigned __int8 *)(v2[2] + 2117));
  uint64_t v3 = *(void *)(a1 + 2216);
  (*(void (**)(uint64_t, void, void, void))(*(void *)v3 + 16))(v3, 0, *(unsigned int *)(v3 + 524), 0);
  sub_1D0D07D0C(v3 + 48, 0, *(unsigned int *)(v3 + 524));
  uint64_t v96 = (std::mutex *)(v3 + 1040);
  char v97 = 1;
  std::mutex::lock((std::mutex *)(v3 + 1040));
  atomic_store(0x7FFFFFFFu, (unsigned int *)(v3 + 1032));
  sub_1D0C615D8((uint64_t)&v96);
  std::condition_variable::notify_all((std::condition_variable *)(v3 + 1104));
  if (v97) {
    std::mutex::unlock(v96);
  }
  uint64_t v4 = v2[209];
  v2[209] = *(void *)(a1 + 2216);
  *(void *)(a1 + 2216) = v4;
  uint64_t v5 = v2[210];
  v2[210] = *(void *)(a1 + 2224);
  *(void *)(a1 + 2224) = v5;
  uint64_t v6 = *(void *)(a1 + 2248);
  uint64_t result = sub_1D0D3A8F0(a1 + 4000, *(_DWORD *)(*(void *)(v6 + 4760) + 216), *(unsigned char *)(*(void *)(v6 + 4760) + 220), *(unsigned __int8 *)(*(void *)(v6 + 16) + 2096), *(_DWORD *)(*(void *)(v6 + 4760) + 96), *(unsigned __int8 *)(*(void *)(v6 + 16) + 2099), *(char *)(*(void *)(a1 + 2232) + 648), 0, v6 + 657);
  if (!result)
  {
    *(void *)(a1 + 4152) = 0;
    *(void *)(a1 + 4144) = 0;
    *(void *)(a1 + 4162) = 0x100010001000100;
    *(_WORD *)(a1 + 4160) = 0;
    uint64_t v8 = *(void *)(*(void *)(a1 + 2248) + 4760);
    int v9 = *(_DWORD *)(v8 + 160);
    *(_DWORD *)(a1 + 4600) = v9;
    if ((*(unsigned char *)(v8 + 184) & 4) != 0)
    {
      int v9 = *(_DWORD *)(v8 + 164);
      *(_DWORD *)(a1 + 4600) = v9;
    }
    if (*(unsigned char *)(a1 + 17))
    {
      int v9 = 1;
      *(_DWORD *)(a1 + 4600) = 1;
    }
    if (*(_DWORD *)(a1 + 4740) < v9) {
      int v9 = *(_DWORD *)(a1 + 4740);
    }
    *(_DWORD *)(a1 + 4600) = v9;
    unint64_t v10 = v9;
    uint64_t v11 = *(void *)(a1 + 4584);
    uint64_t v12 = *(void *)(a1 + 4576);
    unint64_t v13 = 0x4EC4EC4EC4EC4EC5 * ((v11 - v12) >> 10);
    unint64_t v14 = v10 - v13;
    if (v10 <= v13)
    {
      if (v10 < v13)
      {
        uint64_t v34 = v12 + 13312 * (int)v10;
        while (v11 != v34)
        {
          v11 -= 13312;
          sub_1D0CE9E1C(v11);
        }
        *(void *)(a1 + 4584) = v34;
      }
      goto LABEL_41;
    }
    uint64_t v15 = *(void *)(a1 + 4592);
    if (0x4EC4EC4EC4EC4EC5 * ((v15 - v11) >> 10) >= v14)
    {
      unint64_t v35 = v11 + 13312 * v14;
      uint64_t v36 = v11 + 16;
      do
      {
        bzero((void *)(v36 - 16), 0x3400uLL);
        sub_1D0CE0408(v36);
        int v37 = (_OWORD *)(v36 + 12856);
        *(void *)(v36 + 12920) = 0;
        *(_OWORD *)(v36 + 12888) = 0u;
        *(_OWORD *)(v36 + 12904) = 0u;
        uint64_t v38 = v36 + 13296;
        v36 += 13312;
        *int v37 = 0u;
        v37[1] = 0u;
      }
      while (v38 != v35);
      *(void *)(a1 + 4584) = v35;
LABEL_41:
      if (*(int *)(a1 + 4600) <= 0)
      {
        *(void *)(a1 + 5536) = 0;
        char v45 = *(unsigned char *)(*(void *)(*(void *)(a1 + 2232) + 40) + 2113);
        *(_DWORD *)(a1 + 5464) = 0;
      }
      else
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = *(void *)(a1 + 4576);
        do
        {
          sub_1D0CE0894(v41 + v39, *(void *)(a1 + 2248), a1 + 4000, 0, 0, 1, 0, 0);
          uint64_t v42 = *(void *)(a1 + 4576) + v39;
          uint64_t v43 = *(void *)(*(void *)(v42 + 12944) + 1672);
          *(unsigned char *)(v42 + 12690) = 0;
          *(_DWORD *)(v42 + 12692) = *(_DWORD *)(v43 + 520);
          *(_DWORD *)(v42 + 12700) = *(_DWORD *)(v43 + 524);
          uint64_t v41 = *(void *)(a1 + 4576);
          *(void *)(v41 + v39 + 13264) = 0;
          ++v40;
          uint64_t v44 = *(int *)(a1 + 4600);
          v39 += 13312;
        }
        while (v40 < v44);
        *(void *)(a1 + 5536) = 0;
        char v45 = *(unsigned char *)(*(void *)(*(void *)(a1 + 2232) + 40) + 2113);
        *(_DWORD *)(a1 + 5464) = 0;
        if ((int)v44 > 1) {
          sub_1D0C9153C((_DWORD *)(*(void *)(a1 + 2248) + 4800), *(void *)(*(void *)(a1 + 2248) + 16));
        }
      }
      unsigned int v46 = *(_DWORD *)(a1 + 4740);
      if (v46)
      {
        unsigned int v47 = 0;
        unsigned int v48 = *(_DWORD *)(a1 + 4736);
        do
        {
          if (v48)
          {
            for (unsigned int i = 0; i < v48; ++i)
            {
              *(_DWORD *)(a1 + 5464) += sub_1D0D241B8(a1, i << v45, v47 << v45, 0, *(void *)(a1 + 4576));
              unsigned int v48 = *(_DWORD *)(a1 + 4736);
            }
            unsigned int v46 = *(_DWORD *)(a1 + 4740);
          }
          ++v47;
        }
        while (v47 < v46);
      }
      uint64_t v50 = *(void *)(a1 + 2232);
      int v51 = 1 << (*(unsigned char *)(*(void *)(v50 + 40) + 2113) - *(_DWORD *)(a1 + 5460));
      int v52 = (v51 - 1 + *(_DWORD *)(a1 + 4732)) / v51 * ((v51 - 1 + *(_DWORD *)(a1 + 4728)) / v51);
      if (v52 < 1)
      {
        *(void *)(a1 + 5472) = 0;
        *(_DWORD *)(a1 + 5468) = 0;
      }
      else
      {
        int v53 = *(_DWORD *)(a1 + 5464);
        *(_DWORD *)(a1 + 5468) = fabs(sqrt((double)((v53 + (v52 >> 1)) / v52)));
        int v54 = v52 << (2 * *(unsigned char *)(a1 + 5456) - 6);
        unsigned int v55 = (v53 + (v54 >> 1)) / v54;
        unsigned int v56 = *(_DWORD *)(a1 + 4812);
        *(_DWORD *)(a1 + 5472) = fabs(sqrt((double)v56));
        *(_DWORD *)(a1 + 5476) = fabs(sqrt((double)v55));
        if (v55 >= 3 * v56) {
          *(unsigned char *)(*(void *)(v50 + 616) + 1172) = 1;
        }
      }
      uint64_t v57 = *(void *)(v50 + 576);
      if (*(unsigned char *)(v57 + 937))
      {
        uint64_t v58 = *(void *)(a1 + 5432);
        unsigned int v59 = *(_DWORD *)(a1 + 5428);
        if (v59)
        {
          unint64_t v60 = 0;
          int v61 = 0;
          int v62 = 0;
          uint64_t v63 = *(unsigned int *)(a1 + 5424);
          uint64_t v64 = *(void *)(a1 + 5432);
          do
          {
            if (v63)
            {
              uint64_t v65 = 0;
              do
              {
                int v66 = *(_DWORD *)(v64 + v65);
                v62 += v66;
                v60 += (v66 * v66);
                v65 += 4;
              }
              while (4 * v63 != v65);
            }
            ++v61;
            v64 += 4 * *(void *)(a1 + 5416);
          }
          while (v61 != v59);
          unint64_t v67 = v63 * v59;
          if ((int)v67 > 0)
          {
            int v62 = (int)(v62 + (v67 >> 1)) / (int)v67;
            unint64_t v60 = (v60 + (v67 >> 1)) / v67 - (v62 * v62);
          }
          if (v62 <= 1) {
            int v62 = 1;
          }
          if (v60 >= 2)
          {
            unsigned int v68 = __clz(v60);
            unsigned int v69 = ((byte_1D0DAE264[(unint64_t)(v60 << (v68 + 1)) >> 24] << 12) | 0x200000u) >> ((v68 + 1) >> 1);
            if ((v68 & 1) == 0) {
              unsigned int v69 = (11585 * v69) >> 14;
            }
            LODWORD(v60) = (v69 + 16) >> 5;
          }
        }
        else
        {
          LODWORD(v60) = 0;
          int v62 = 1;
        }
        float v70 = (float)v60;
        uint64_t v71 = *(void *)(a1 + 5368);
        float v72 = v70 / (float)v62;
        if (*(unsigned char *)(*(void *)(v50 + 616) + 1172))
        {
          int v73 = 0;
          int v74 = 0;
          *(void *)(v57 + 312) = 1092616192;
          *(_DWORD *)(v57 + 320) = 0;
          float v75 = 10.0;
        }
        else
        {
          float v75 = *(float *)(v57 + 312);
          int v74 = *(_DWORD *)(v57 + 320);
          int v73 = *(_DWORD *)(v57 + 316);
        }
        int v76 = v74 + 1;
        float v77 = (float)(v72 + (float)(v75 * (float)v74)) / (float)(v74 + 1);
        *(float *)(v57 + 312) = v77;
        int v78 = (v62 + (v76 >> 1) + v73 * v74) / v76;
        *(_DWORD *)(v57 + 316) = v78;
        *(_DWORD *)(v57 + 320) = v76;
        if (v78 >= 90) {
          int v79 = 90;
        }
        else {
          int v79 = v78;
        }
        if (v79 <= 30) {
          int v79 = 30;
        }
        *(_DWORD *)(a1 + 52) = v78;
        float v80 = 1.0;
        float v81 = (float)((float)(v79 - 30) * -0.005) + 1.0;
        *(unsigned char *)(a1 + 56) = v77 > v81;
        float v82 = (float)(v77 - v81) * 10.0;
        if (v82 < 1.0) {
          float v80 = (float)(v77 - v81) * 10.0;
        }
        if (v82 <= 0.0) {
          float v80 = 0.0;
        }
        *(float *)(a1 + 60) = v80;
        if (v59 && !*(unsigned char *)(v50 + 648) && v77 > v81)
        {
          unsigned int v83 = 0;
          unint64_t v84 = *(unsigned int *)(a1 + 5424);
          uint64_t v85 = 4 * *(void *)(a1 + 5416);
          unint64_t v86 = v84;
          do
          {
            if (v86)
            {
              unint64_t v87 = 0;
              do
              {
                unsigned int v88 = *(_DWORD *)(v58 + 4 * v87);
                BOOL v89 = v62 >= v88;
                int v90 = v62 - v88;
                if (v90 != 0 && v89)
                {
                  if (v90 >= 21) {
                    int v90 = 21;
                  }
                  *(_DWORD *)(v71 + 4 * v87) -= (*(_DWORD *)(v71 + 4 * v87) * v90) >> 6;
                  unint64_t v84 = *(unsigned int *)(a1 + 5424);
                }
                ++v87;
              }
              while (v87 < v84);
              unsigned int v59 = *(_DWORD *)(a1 + 5428);
              unint64_t v86 = v84;
            }
            ++v83;
            v71 += v85;
            v58 += v85;
          }
          while (v83 < v59);
        }
      }
      uint64_t v91 = *(void *)(a1 + 2216);
      if (!v91) {
        return 0;
      }
      uint64_t result = 0;
      uint64_t v92 = v2[209];
      v2[209] = v91;
      *(void *)(a1 + 2216) = v92;
      uint64_t v93 = v2[210];
      v2[210] = *(void *)(a1 + 2224);
      *(void *)(a1 + 2224) = v93;
      return result;
    }
    if ((v10 & 0x80000000) != 0) {
      sub_1D0C8D71C();
    }
    uint64_t v95 = v2;
    unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((v15 - v12) >> 10);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v10) {
      uint64_t v17 = v10;
    }
    if (v16 >= 0x2762762762762) {
      unint64_t v18 = 0x4EC4EC4EC4EC4;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18 > 0x4EC4EC4EC4EC4) {
      sub_1D0C6AC2C();
    }
    uint64_t v19 = (char *)operator new(13312 * v18, (std::align_val_t)0x40uLL);
    int v20 = &v19[13312 * v13];
    unint64_t v21 = &v19[13312 * (int)v10];
    uint64_t v22 = (uint64_t)(v20 + 16);
    do
    {
      bzero((void *)(v22 - 16), 0x3400uLL);
      sub_1D0CE0408(v22);
      int v23 = (_OWORD *)(v22 + 12856);
      *(void *)(v22 + 12920) = 0;
      *(_OWORD *)(v22 + 12888) = 0u;
      *(_OWORD *)(v22 + 12904) = 0u;
      uint64_t v24 = v22 + 13296;
      v22 += 13312;
      *int v23 = 0u;
      v23[1] = 0u;
    }
    while ((char *)v24 != v21);
    uint64_t v25 = &v19[13312 * v18];
    uint64_t v26 = *(void *)(a1 + 4584);
    uint64_t v27 = *(void *)(a1 + 4576);
    if (v26 == v27)
    {
      *(void *)(a1 + 4576) = v20;
      *(void *)(a1 + 4584) = v21;
      *(void *)(a1 + 4592) = v25;
    }
    else
    {
      uint64_t v94 = v25;
      do
      {
        uint64_t v28 = v20 - 13312;
        uint64_t v29 = v26 - 13312;
        memcpy(v20 - 13312, (const void *)(v26 - 13312), 0x3248uLL);
        uint64_t v30 = 0;
        *((void *)v28 + 1609) = 0;
        *((_OWORD *)v28 + 805) = 0u;
        *(_OWORD *)(v28 + 12872) = *(_OWORD *)(v26 - 440);
        *((void *)v28 + 1611) = *(void *)(v26 - 424);
        *(_OWORD *)(v26 - 440) = 0u;
        *(void *)(v26 - 424) = 0;
        do
        {
          uint64_t v31 = &v20[v30 - 416];
          uint64_t v32 = v26 + v30 - 416;
          *(void *)&v20[v30 - 408] = 0;
          *(void *)uint64_t v31 = 0;
          *((void *)v31 + 2) = 0;
          *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
          *(void *)&v20[v30 - 400] = *(void *)(v26 + v30 - 400);
          *(void *)(v26 + v30 - 408) = 0;
          *(void *)uint64_t v32 = 0;
          *(void *)(v32 + 16) = 0;
          v30 += 24;
        }
        while (v30 != 48);
        memcpy(v20 - 368, (const void *)(v26 - 368), 0x148uLL);
        v20 -= 13312;
        v26 -= 13312;
      }
      while (v29 != v27);
      uint64_t v33 = *(void *)(a1 + 4576);
      uint64_t v26 = *(void *)(a1 + 4584);
      *(void *)(a1 + 4576) = v28;
      *(void *)(a1 + 4584) = v21;
      *(void *)(a1 + 4592) = v94;
      if (v26 != v33)
      {
        uint64_t v2 = v95;
        do
        {
          v26 -= 13312;
          sub_1D0CE9E1C(v26);
        }
        while (v26 != v33);
        uint64_t v26 = v33;
LABEL_39:
        if (v26) {
          MEMORY[0x1D25F0220](v26, 64);
        }
        goto LABEL_41;
      }
    }
    uint64_t v2 = v95;
    goto LABEL_39;
  }
  return result;
}

void sub_1D0D2419C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a14) {
    std::mutex::unlock(a13);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D0D241B8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  int v154 = a2;
  if (*(_DWORD *)(a1 + 4728) <= a2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v5) = a4;
    uint64_t v7 = 0;
    int v8 = -a4;
    while (*(_DWORD *)(a1 + 4732) > (int)a3)
    {
      unint64_t v10 = *(void **)(a1 + 2232);
      int v11 = *(unsigned __int8 *)(v10[5] + 2113);
      int v12 = v8 + v11;
      int v13 = 1 << (v8 + v11);
      uint64_t v153 = v7;
      if (v8 + v11 <= *(_DWORD *)(a1 + 5456))
      {
        int v18 = a3 | v154;
        if ((((1 << (v11 - *(_DWORD *)(a1 + 5460))) - 1) & (a3 | v154)) != 0) {
          break;
        }
        int v136 = 1 << (v11 - *(_DWORD *)(a1 + 5460));
        *(_DWORD *)(a5 + 12852) = 5;
        uint64_t v19 = v10[77];
        uint64_t v20 = *(void *)(v19 + 416);
        uint64_t v21 = v10[79];
        uint64_t v22 = *(void *)(v21 + 416);
        uint64_t v23 = *(void *)(v19 + 400);
        uint64_t v24 = (v20 * (int)a3 + v154) << *(unsigned char *)(v19 + 531);
        char v25 = *(unsigned char *)(v21 + 531);
        unsigned int v139 = v13;
        if (v18 < 0
          || (uint64_t v26 = *(void *)(*(void *)(a1 + 2248) + 8), *(_DWORD *)(v26 + 520) <= v154)
          || *(_DWORD *)(v26 + 524) <= (int)a3)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v27 = *(void *)(v26 + 800) + 2 * (*(void *)(v26 + 768) * ((uint64_t)(int)a3 >> 3) + (v154 >> 3));
          uint64_t v28 = (__int16 *)(*(void *)(v26 + 880)
                          + 16 * (*(void *)(v26 + 848) * ((uint64_t)(int)a3 >> 2) + (v154 >> 2)));
        }
        uint64_t v29 = *(void *)(v21 + 400);
        uint64_t v30 = (v22 * (int)a3 + v154) << v25;
        uint64_t v31 = v23 + v24;
        unsigned int v32 = v5 & 3 | (*(unsigned __int8 *)(v27 + 1) << 8);
        *(_WORD *)uint64_t v27 = v32;
        uint64_t v33 = *(void *)(a1 + 2248);
        uint64_t v34 = *(void *)(v33 + 16);
        uint64_t v35 = *(void *)(*(void *)(v33 + 8) + 768);
        int16x8_t v36 = vdupq_n_s16(v32);
        unsigned int v37 = *(unsigned __int8 *)(v34 + 2113) - v139;
        uint64_t v149 = v22;
        switch(v37)
        {
          case 6u:
            *(int16x8_t *)uint64_t v27 = v36;
            *(int16x8_t *)(v27 + 2 * v35) = v36;
            *(int16x8_t *)(v27 + 4 * v35) = v36;
            *(int16x8_t *)(v27 + 6 * v35) = v36;
            *(int16x8_t *)(v27 + 8 * v35) = v36;
            *(int16x8_t *)(v27 + 10 * v35) = v36;
            *(int16x8_t *)(v27 + 12 * v35) = v36;
            *(int16x8_t *)(v27 + 14 * v35) = v36;
            break;
          case 5u:
            *(void *)uint64_t v27 = v36.i64[0];
            *(void *)(v27 + 2 * v35) = v36.i64[0];
            *(void *)(v27 + 4 * v35) = v36.i64[0];
            *(void *)(v27 + 6 * v35) = v36.i64[0];
            break;
          case 4u:
            *(_DWORD *)uint64_t v27 = v36.i32[0];
            *(_DWORD *)(v27 + 2 * v35) = v36.i32[0];
            break;
        }
        uint64_t v38 = v29 + v30;
        *(void *)(a5 + 12856) = v31;
        uint64_t v134 = v31;
        uint64_t v135 = v20;
        *(void *)(a5 + 12864) = v20;
        if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 2232) + 576) + 591))
        {
          sub_1D0D5769C(*(void *)(a1 + 2248), v154, a3, 0, 0, v139, v139, (__int32 *)v157);
          if (v18 < 0)
          {
            uint64_t v50 = 0;
            uint64_t v49 = v149;
          }
          else
          {
            uint64_t v48 = *(void *)(*(void *)(a5 + 12944) + 8);
            uint64_t v49 = v149;
            if (*(_DWORD *)(v48 + 520) <= v154 || *(_DWORD *)(v48 + 524) <= (int)a3) {
              uint64_t v50 = 0;
            }
            else {
              uint64_t v50 = *(void *)(v48 + 880) + 16 * (*(void *)(v48 + 848) * ((uint64_t)(int)a3 >> 2) + (v154 >> 2));
            }
          }
          LODWORD(v156[0]) = 0;
          uint64_t v141 = *(void *)(a5 + 12864);
          uint64_t v143 = *(void *)(a5 + 12856);
          unsigned int v138 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 12952)
                                                                                              + 8 * v12
                                                                                              + 200);
          unint64_t v67 = *(unsigned char **)a5;
          *((_DWORD *)v67 + 10) = 0;
          *((void *)v67 + 2) = 0;
          *((void *)v67 + 3) = 0;
          *((void *)v67 + 4) = -1;
          *((_WORD *)v67 + 22) = 1;
          uint64_t v68 = *(void *)(a5 + 8);
          *(_DWORD *)(v68 + 40) = 0;
          *(void *)(v68 + 16) = 0;
          *(void *)(v68 + 24) = 0;
          *(void *)(v68 + 32) = -1;
          *(_WORD *)(v68 + 44) = 1;
          **(unsigned char **)a5 = 0;
          *(unsigned char *)(*(void *)a5 + 1) = 15;
          **(unsigned char **)(a5 + 8) = 0;
          *(unsigned char *)(*(void *)(a5 + 8) + 1) = 15;
          sub_1D0CE6670((void *)a5, v154, a3, v139, v139, 0, (uint64_t)v157, (uint64_t)v157, v49, v38, *(void *)a5, v156, 0);
          uint64_t v69 = *(void *)a5;
          if (*(void *)(*(void *)a5 + 32) >= 0x4B1uLL)
          {
            int v70 = *(_DWORD *)(a5 + 12852);
          }
          else
          {
            int v70 = 3;
            *(_DWORD *)(a5 + 12852) = 3;
          }
          int v71 = 4 * *(_DWORD *)(a5 + 12708);
          while (1)
          {
            int v72 = *(__int16 *)(v69 + 4);
            if (v72 >= 0) {
              int v73 = *(__int16 *)(v69 + 4);
            }
            else {
              int v73 = -v72;
            }
            if ((1 << v70) + v73 <= v71)
            {
              int v74 = *(__int16 *)(v69 + 6);
              if (v74 < 0) {
                int v74 = -v74;
              }
              int v75 = (1 << v70) + v74;
              int v76 = 4 * *(_DWORD *)(a5 + 12712);
              if (v70 < 3 || v75 <= v76)
              {
                if (v75 > v76) {
                  goto LABEL_71;
                }
                int v110 = 0;
                uint64_t v148 = v38;
                uint64_t v133 = v50;
LABEL_109:
                uint64_t v111 = 0;
                int v151 = *(_DWORD *)(v69 + 4);
                if (v70 <= 2) {
                  long long v112 = (char *)&unk_1D0D8085F;
                }
                else {
                  long long v112 = (char *)&unk_1D0D8084F;
                }
                long long v113 = (char *)&unk_1D0D80867;
                if (v70 > 2) {
                  long long v113 = (char *)&unk_1D0D80857;
                }
                int v145 = v113;
                unsigned int v146 = v112;
                do
                {
                  *(_WORD *)(*(void *)(a5 + 8) + 4) = (v146[v111] << v70) + v151;
                  *(_WORD *)(*(void *)(a5 + 8) + 6) = (v145[v111] << v70) + HIWORD(v151);
                  long long v114 = *(char **)(a5 + 8);
                  if (v110 <= 0)
                  {
                    int v117 = *((_DWORD *)v114 + 1);
LABEL_124:
                    v159[v110++ & 0x3F] = v117;
                    uint64_t v119 = *v114;
                    uint64_t v120 = *(void *)(*(void *)(a5 + 12944) + 16 * v119 + 1672);
                    *(unsigned char *)(a5 + 12690) = v119;
                    *(_DWORD *)(a5 + 12692) = *(_DWORD *)(v120 + 520);
                    *(_DWORD *)(a5 + 12700) = *(_DWORD *)(v120 + 524);
                    v114[1] = 15;
                    sub_1D0CE32EC(a5, *(void *)(a5 + 8), v154, a3, v139, v139, v149, v148, 0);
                    unsigned int v121 = v138(v139, v139, v143, v141, v148, v149);
                    uint64_t v122 = *(long long **)(a5 + 8);
                    *((void *)v122 + 2) = v121;
                    unint64_t v123 = ((*(unsigned __int16 *)(*(void *)(a5 + 12952) + 2 * *((__int16 *)v122 + 22) + 152)
                           * (unint64_t)*((unsigned int *)v122 + 10)) >> (8 * (*((_WORD *)v122 + 22) == 0)))
                         + v121;
                    *((void *)v122 + 4) = v123;
                    unsigned int v124 = *(_OWORD **)a5;
                    if (v123 < *(void *)(*(void *)a5 + 32))
                    {
                      long long v125 = *v122;
                      long long v126 = v122[2];
                      v124[1] = v122[1];
                      v124[2] = v126;
                      *unsigned int v124 = v125;
                    }
                  }
                  else
                  {
                    int v115 = 0;
                    if (v110 >= 64) {
                      int v116 = 64;
                    }
                    else {
                      int v116 = v110;
                    }
                    int v117 = *((_DWORD *)v114 + 1);
                    int v118 = -v116;
                    while (v117 != v159[((_BYTE)v110 + (_BYTE)v115 - 1) & 0x3F])
                    {
                      if (v118 == --v115) {
                        goto LABEL_124;
                      }
                    }
                  }
                  ++v111;
                }
                while (v111 != 8);
                uint64_t v69 = *(void *)a5;
                int v70 = *(_DWORD *)(a5 + 12852);
                uint64_t v50 = v133;
                uint64_t v38 = v148;
                uint64_t v49 = v149;
                if (v151 == *(_DWORD *)(*(void *)a5 + 4))
                {
                  if (v70 == 2) {
                    goto LABEL_71;
                  }
                  *(_DWORD *)(a5 + 12852) = --v70;
                }
                int v127 = 4 * *(_DWORD *)(a5 + 12708);
                while (1)
                {
                  int v128 = *(__int16 *)(v69 + 4);
                  if (v128 >= 0) {
                    int v129 = *(__int16 *)(v69 + 4);
                  }
                  else {
                    int v129 = -v128;
                  }
                  if ((1 << v70) + v129 <= v127)
                  {
                    int v130 = *(__int16 *)(v69 + 6);
                    if (v130 < 0) {
                      int v130 = -v130;
                    }
                    int v131 = (1 << v70) + v130;
                    int v132 = 4 * *(_DWORD *)(a5 + 12712);
                    if (v70 < 3 || v131 <= v132)
                    {
                      if (v131 > v132)
                      {
LABEL_71:
                        *(unsigned char *)(v50 + 10) = 3;
                        *(unsigned char *)(v50 + 11) = *(unsigned char *)(v50 + 11) & 0xAE | (16 * (v156[0] & 1));
                        *(unsigned char *)(v50 + 8) = 16 * **(unsigned char **)a5;
                        *(_DWORD *)uint64_t v50 = *(_DWORD *)(*(void *)a5 + 4);
                        *(_DWORD *)(v50 + 4) = 0;
                        *(unsigned char *)(v50 + 9) = -16;
                        unint64_t v66 = *(void *)(*(void *)a5 + 32);
                        goto LABEL_72;
                      }
                      goto LABEL_109;
                    }
                  }
                  else if (v70 < 3)
                  {
                    goto LABEL_71;
                  }
                  *(_DWORD *)(a5 + 12852) = --v70;
                }
              }
            }
            else if (v70 < 3)
            {
              goto LABEL_71;
            }
            *(_DWORD *)(a5 + 12852) = --v70;
          }
        }
        uint64_t v147 = v29 + v30;
        uint64_t v39 = *(void *)(a1 + 2248);
        v156[0] = 0;
        v156[1] = 0;
        memset(v157, 0, 24);
        sub_1D0D57470(v39, v154, a3, v139, v139, v156, v157);
        sub_1D0C95CB8(v39, v154, a3, v139, v139, (uint64_t)v159, 5u, v156, v157, 1);
        if (v18 < 0
          || (uint64_t v40 = *(void *)(*(void *)(a5 + 12944) + 8), *(_DWORD *)(v40 + 520) <= v154)
          || *(_DWORD *)(v40 + 524) <= (int)a3)
        {
          uint64_t v41 = 0;
        }
        else
        {
          uint64_t v41 = *(void *)(v40 + 880) + 16 * (*(void *)(v40 + 848) * ((uint64_t)(int)a3 >> 2) + (v154 >> 2));
        }
        unsigned __int8 v158 = 0;
        uint64_t v42 = v160;
        if (v160)
        {
          unsigned __int8 v43 = 0;
          uint64_t v44 = 0;
          do
          {
            if (!LOBYTE(v159[3 * v44]))
            {
              *((_DWORD *)v157 + v43) = v159[3 * v44 + 1] & 0xFFFEFFFE;
              unsigned __int8 v43 = v158;
              if (v158)
              {
                char v45 = v157;
                uint64_t v46 = v158;
                while (1)
                {
                  int v47 = *(_DWORD *)v45;
                  char v45 = (uint64_t *)((char *)v45 + 4);
                  if (v47 == *((_DWORD *)v157 + v158)) {
                    break;
                  }
                  if (!--v46) {
                    goto LABEL_35;
                  }
                }
              }
              else
              {
LABEL_35:
                unsigned __int8 v43 = ++v158;
              }
            }
            ++v44;
          }
          while (v44 != v42);
        }
        else
        {
          unsigned __int8 v43 = 0;
        }
        uint64_t v51 = *(void *)(a5 + 12856);
        uint64_t v52 = *(void *)(a5 + 12864);
        int v53 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 12952)
                                                                                           + 8 * v12
                                                                                           + 200);
        uint64_t v54 = *(void *)(a5 + 8);
        *(_DWORD *)(v54 + 40) = 0;
        *(void *)(v54 + 16) = 0;
        *(void *)(v54 + 24) = 0;
        *(void *)(v54 + 32) = -1;
        *(_WORD *)(v54 + 44) = 1;
        **(unsigned char **)(a5 + 8) = 0;
        if (v43)
        {
          uint64_t v137 = v41;
          int v55 = 0;
          uint64_t v144 = v51;
          uint64_t v56 = v43;
          uint64_t v57 = *(void *)(a5 + 8);
          unint64_t v58 = -1;
          unsigned int v59 = v157;
          uint64_t v140 = v52;
          int v142 = v53;
          do
          {
            int v60 = *(_DWORD *)v59;
            unsigned int v59 = (uint64_t *)((char *)v59 + 4);
            int v150 = v60;
            *(_DWORD *)(v57 + 4) = v60;
            int v61 = *(char **)(a5 + 8);
            uint64_t v62 = *v61;
            uint64_t v63 = *(void *)(*(void *)(a5 + 12944) + 16 * v62 + 1672);
            *(unsigned char *)(a5 + 12690) = v62;
            *(_DWORD *)(a5 + 12692) = *(_DWORD *)(v63 + 520);
            *(_DWORD *)(a5 + 12700) = *(_DWORD *)(v63 + 524);
            v61[1] = 15;
            sub_1D0CE6CF0((void *)a5, *(char **)(a5 + 8), v154, a3, v139, v139, v149, v147);
            unsigned int v64 = v142(v139, v139, v144, v140, v147, v149);
            uint64_t v57 = *(void *)(a5 + 8);
            *(void *)(v57 + 16) = v64;
            BOOL v65 = v58 > v64;
            if (v58 >= v64) {
              unint64_t v58 = v64;
            }
            if (v65) {
              int v55 = v150;
            }
            --v56;
          }
          while (v56);
          unint64_t v66 = (29 * v58) >> 5;
          uint64_t v41 = v137;
        }
        else
        {
          int v55 = 0;
          unint64_t v66 = 0x7FFFFFFFFFFFFFFLL;
        }
        *(unsigned char *)(v41 + 11) &= 0xAEu;
        *(unsigned char *)(v41 + 8) = 0;
        *(_DWORD *)uint64_t v41 = v55;
        *(_DWORD *)(v41 + 4) = 0;
        *(_WORD *)(v41 + 9) = 1008;
        uint64_t v38 = v147;
        uint64_t v49 = v149;
LABEL_72:
        if (v136 >= 4)
        {
          uint64_t v77 = 0;
          LODWORD(v78) = v136 >> 2;
          if (v136 >> 2 <= 1) {
            uint64_t v78 = 1;
          }
          else {
            uint64_t v78 = v78;
          }
          uint64_t v79 = 16 * *(void *)(*(void *)(*(void *)(a1 + 2248) + 8) + 848);
          float v80 = v28;
          do
          {
            float v81 = v80;
            uint64_t v82 = v78;
            do
            {
              uint64_t v83 = *(void *)v28;
              *(void *)((char *)v81 + 6) = *(void *)(v28 + 3);
              *float v81 = v83;
              v81 += 2;
              --v82;
            }
            while (v82);
            ++v77;
            float v80 = (void *)((char *)v80 + v79);
          }
          while (v77 != v136 >> 2);
        }
        int v84 = *(_DWORD *)(a1 + 5456);
        if (v84 == 34)
        {
          uint64_t v85 = v38;
          unsigned int v86 = 0;
        }
        else
        {
          uint64_t v87 = 0;
          int v88 = 0;
          uint64_t v89 = (*(int *)(a1 + 4728) >> 3);
          uint64_t v90 = (int)v89 * ((int)a3 >> 3) + (v154 >> 3);
          uint64_t v91 = *(void *)(a1 + 4928) + 4 * v90;
          uint64_t v92 = (1 << (v84 - 3));
          uint64_t v93 = 4 * v89;
          do
          {
            uint64_t v94 = (int *)v91;
            uint64_t v95 = (1 << (v84 - 3));
            do
            {
              int v96 = *v94++;
              v88 += v96;
              --v95;
            }
            while (v95);
            ++v87;
            v91 += v93;
          }
          while (v87 != v92);
          uint64_t v97 = 0;
          int v98 = 0;
          uint64_t v99 = *(void *)(a1 + 4872) + 4 * v90;
          do
          {
            int v100 = (int *)v99;
            uint64_t v101 = (1 << (v84 - 3));
            do
            {
              int v102 = *v100++;
              v98 += v102;
              --v101;
            }
            while (v101);
            ++v97;
            v99 += v93;
          }
          while (v97 != v92);
          uint64_t v85 = v38;
          unsigned int v86 = v98 + (v88 << 7);
        }
        uint64_t v103 = (v154 >> v84) + ((int)a3 >> v84) * *(_DWORD *)(a1 + 5416);
        *(_DWORD *)(*(void *)(a1 + 5368) + 4 * v103) = v66;
        uint64_t v104 = *(unsigned char **)(*(void *)(a1 + 2232) + 576);
        uint64_t v7 = v153;
        if (v104[752] || v104[937])
        {
          unsigned int v105 = *v28 * *v28 + v28[1] * v28[1];
          if (v105 >= 2)
          {
            unsigned int v106 = __clz(v105);
            unsigned int v107 = ((byte_1D0DAE264[(unint64_t)(v105 << (v106 + 1)) >> 24] << 12) | 0x200000u) >> ((v106 + 1) >> 1);
            if ((v106 & 1) == 0) {
              unsigned int v107 = (11585 * v107) >> 14;
            }
            unsigned int v105 = (v107 + 16) >> 5;
          }
          *(_DWORD *)(*(void *)(a1 + 5432) + 4 * v103) = v105;
        }
        if (v104[913])
        {
          uint64_t v108 = v85;
          sub_1D0CE32EC(a5, *(void *)a5, v154, a3, v139, v139, v49, v85, 0);
          int v109 = sub_1D0D24EBC(a1, v134, v135, v108, v49, *(_DWORD *)(a1 + 5456));
          uint64_t v7 = v153;
          *(_DWORD *)(*(void *)(a1 + 5392) + 4 * v103) = v109;
        }
        if (v66 <= 3 * v86) {
          unint64_t v16 = v66;
        }
        else {
          unint64_t v16 = v86;
        }
        if (*(unsigned char *)(a1 + 17))
        {
          if (sub_1D0D24F64(a1, v154, a3, v139)) {
            *(_DWORD *)(a1 + 5536) += v16;
          }
          else {
            *(_DWORD *)(a1 + 5540) += v16;
          }
          uint64_t v7 = v153;
        }
        return v16 + v7;
      }
      uint64_t v5 = (v5 + 1);
      uint64_t v14 = sub_1D0D241B8(a1, v154, a3, v5, a5);
      uint64_t v15 = sub_1D0D241B8(a1, (v154 + (v13 >> 1)), a3, v5, a5);
      a3 = (a3 + (v13 >> 1));
      uint64_t v7 = v14 + v153 + v15 + sub_1D0D241B8(a1, v154, a3, v5, a5);
      --v8;
      v154 += v13 >> 1;
      if (*(_DWORD *)(a1 + 4728) <= v154) {
        break;
      }
    }
  }
  unint64_t v16 = 0;
  return v16 + v7;
}

uint64_t sub_1D0D24EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6 = ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a6 + 120))(a2, a3, a4, a5)
      + (1 << (2 * a6 - 1))) >> (2 * a6) << 10;
  if (!v6) {
    return 0;
  }
  unsigned int v7 = __clz(v6);
  unsigned int v8 = ((byte_1D0DAE264[(unint64_t)(v6 << (v7 + 1)) >> 24] << 12) | 0x200000u) >> ((v7 + 1) >> 1);
  if ((v7 & 1) == 0) {
    unsigned int v8 = (11585 * v8) >> 14;
  }
  return (v8 + 16) >> 5;
}

BOOL sub_1D0D24F64(uint64_t a1, int a2, int a3, int a4)
{
  unint64_t v4 = *(unsigned int *)(a1 + 5548);
  if ((int)v4 < 1)
  {
    return 0;
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = a2 + (a4 >> 1);
    unsigned int v7 = (int *)(a1 + 5564);
    BOOL v8 = 1;
    int v9 = a3 + (a4 >> 1);
    do
    {
      float v10 = (float)*(v7 - 1);
      int v11 = (*(v7 - 3) - (int)(float)((float)(v10 * 0.4) * 0.5)) & ~((*(v7 - 3) - (int)(float)((float)(v10 * 0.4) * 0.5)) >> 31);
      if (v6 > v11)
      {
        float v12 = (float)*v7;
        int v13 = (*(v7 - 2) - (int)(float)((float)(v12 * 0.0) * 0.5)) & ~((*(v7 - 2)
                                                                      - (int)(float)((float)(v12 * 0.0) * 0.5)) >> 31);
        BOOL v14 = v6 >= v11 + (int)(float)(v10 * 1.4) || v9 <= v13;
        if (!v14 && v9 < v13 + (int)v12) {
          break;
        }
      }
      v7 += 4;
      BOOL v8 = ++v5 < v4;
    }
    while (v4 != v5);
  }
  return v8;
}

BOOL sub_1D0D25034(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  char v8 = *(unsigned char *)(*(void *)(*(void *)(a1 + 2232) + 40) + 2113);
  unint64_t v9 = sub_1D0D241B8(a1, *a3 << v8, (*a4 << v8), 0, *(void *)(a1 + 4576) + 13312 * a2);
  uint64_t v10 = *(void *)(a1 + 4576) + 13312 * a2;
  *(void *)(v10 + 13264) += v9;
  LODWORD(v10) = *a3 + 1;
  *a3 = v10;
  if ((int)v10 >= *(_DWORD *)(a1 + 4736))
  {
    ++*a4;
    *a3 = 0;
  }
  return *a4 < *(_DWORD *)(a1 + 4740);
}

uint64_t sub_1D0D250EC(uint64_t a1, int a2, int a3)
{
  signed int v3 = a2 & 0xFFFFFFF0;
  signed int v4 = a3 & 0xFFFFFFF0;
  int v5 = *(_DWORD *)(a1 + 4728);
  signed int v6 = (a3 & 0xFFFFFFF0) + 16;
  signed int v7 = *(_DWORD *)(a1 + 4732);
  BOOL v8 = v7 < v6;
  if (v7 >= v6) {
    signed int v9 = (a3 & 0xFFFFFFF0) + 16;
  }
  else {
    signed int v9 = *(_DWORD *)(a1 + 4732);
  }
  if (v5 >= v3 + 16) {
    int v10 = v3 + 16;
  }
  else {
    int v10 = *(_DWORD *)(a1 + 4728);
  }
  char v11 = v5 < v3 + 16 || v8;
  int v12 = v9 - v4;
  if (v9 <= v4)
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    if (v11)
    {
LABEL_17:
      unint64_t v21 = (v13 + ((v12 * (v10 - v3)) >> 1) - v14 * v14 / (unint64_t)(v12 * (v10 - v3))) / (v12 * (v10 - v3));
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = v5 + 15;
    int v16 = ((v5 + 15) >> 4) * (a3 >> 4) + (a2 >> 4);
    uint64_t v17 = *(void *)(a1 + 5048) + 8 * v16;
    uint64_t v18 = *(void *)(a1 + 5024) + 4 * v16;
    uint64_t v19 = (uint64_t)v15 >> 4;
    do
    {
      if (v10 > v3)
      {
        int v20 = 0;
        do
        {
          v14 += *(unsigned int *)(v18 + 4 * (v20 >> 4));
          v13 += *(void *)(v17 + 8 * (v20 >> 4));
          v20 += 16;
        }
        while (v3 + v20 < v10);
      }
      v18 += 4 * v19;
      v17 += 8 * v19;
      v4 += 16;
    }
    while (v4 < v9);
    if (v11) {
      goto LABEL_17;
    }
  }
  unint64_t v21 = (v13 - ((unint64_t)(v14 * v14) >> 8) + 128) >> 8;
LABEL_20:
  unsigned int v22 = (int)sqrt((double)v21);
  if (v21 > 0x3C1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v22;
  }
}

uint64_t sub_1D0D251F8(unsigned int (*a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, int a4, char a5, int a6, int a7)
{
  int v7 = 1 << (a5 - 3);
  int v8 = (a7 - a4) >> 3;
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  int v10 = (a6 - a3) >> 3;
  if (v10 >= v7) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t result = (a1(a2 + 4 * (a6 >> 3) * (uint64_t)(a4 >> 3) + 4 * (a3 >> 3), (uint64_t)a6 >> 3, v11, v9)
          + ((v9 * v11) >> 1))
         / ((int)v9
          * (int)v11);
  if (result >= 2)
  {
    unsigned int v13 = __clz(result);
    if (v13) {
      unsigned int v14 = ((byte_1D0DAE264[(unint64_t)(result << (v13 + 1)) >> 24] << 12) | 0x200000u) >> ((v13 + 1) >> 1);
    }
    else {
      unsigned int v14 = (11585
    }
           * (((byte_1D0DAE264[(unint64_t)(result << (v13 + 1)) >> 24] << 12) | 0x200000u) >> ((v13 + 1) >> 1))) >> 14;
    return (v14 + 16) >> 5;
  }
  return result;
}

unint64_t sub_1D0D252CC(int *a1, int a2, int a3, char a4, int a5, int a6, int a7)
{
  switch(a7)
  {
    case 0:
      return sub_1D0D251F8(*((unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))a1 + 23), *((void *)a1 + 615), a2, a3, a4, a5, a6);
    case 1:
      int v8 = 1 << (a4 - 3);
      int v9 = (a6 - a3) >> 3;
      if (v9 >= v8) {
        int v9 = 1 << (a4 - 3);
      }
      if (v9 < 1)
      {
        LODWORD(result) = -1;
LABEL_63:
        unsigned int v62 = __clz(result);
        unsigned int v63 = v62 + 1;
        unint64_t v64 = (result << (v62 + 1));
        goto LABEL_67;
      }
      int v10 = 0;
      uint64_t v11 = (uint64_t)a5 >> 3;
      if ((a5 - a2) >> 3 < v8) {
        int v8 = (a5 - a2) >> 3;
      }
      uint64_t v12 = *((void *)a1 + 609) + 4 * (((uint64_t)a2 >> 3) + (int)v11 * (uint64_t)(a3 >> 3));
      uint64_t v13 = 4 * v11;
      unint64_t result = 0xFFFFFFFFLL;
      do
      {
        if (v8 >= 1)
        {
          uint64_t v14 = 0;
          do
          {
            unsigned int v15 = *(_DWORD *)(v12 + v14);
            if (v15 >= result) {
              unint64_t result = result;
            }
            else {
              unint64_t result = v15;
            }
            v14 += 4;
          }
          while (4 * v8 != v14);
        }
        ++v10;
        v12 += v13;
      }
      while (v10 != v9);
      if (result >= 2) {
        goto LABEL_63;
      }
      return result;
    case 2:
      int v16 = *a1;
      LODWORD(v17) = 1 << (a4 - *a1);
      int v18 = (a6 - a3) >> *a1;
      if (v18 >= (int)v17) {
        int v18 = 1 << (a4 - *a1);
      }
      if (v18 < 1) {
        return -1;
      }
      int v19 = 0;
      char v20 = 2 * v16;
      int v21 = (a5 - a2) >> v16;
      if (v21 >= (int)v17) {
        uint64_t v17 = v17;
      }
      else {
        uint64_t v17 = v21;
      }
      uint64_t v22 = a5 >> v16;
      uint64_t v23 = (a2 >> v16) + (int)v22 * (uint64_t)(a3 >> v16);
      uint64_t v24 = *((void *)a1 + 625) + 8 * v23;
      uint64_t v25 = *((void *)a1 + 622) + 4 * v23;
      uint64_t v26 = 1 << (v20 - 1);
      uint64_t v27 = 4 * v22;
      unint64_t result = -1;
      uint64_t v28 = 8 * v22;
      do
      {
        if ((int)v17 >= 1)
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            uint64_t v30 = (*(_DWORD *)(v25 + 4 * i) * *(_DWORD *)(v25 + 4 * i)) >> v20;
            if ((unint64_t)(*(void *)(v24 + 8 * i) + (int)v26 - v30) >> v20 < result) {
              unint64_t result = (unint64_t)(*(void *)(v24 + 8 * i) + v26 - v30) >> v20;
            }
          }
        }
        ++v19;
        v25 += v27;
        v24 += v28;
      }
      while (v19 != v18);
      return result;
    case 3:
      int v31 = *a1;
      LODWORD(v32) = 1 << (a4 - *a1);
      int v33 = (a6 - a3) >> *a1;
      if (v33 >= (int)v32) {
        int v33 = 1 << (a4 - *a1);
      }
      if (v33 < 1)
      {
        LODWORD(v43) = -1;
      }
      else
      {
        int v34 = 0;
        char v35 = 2 * v31;
        int v36 = (a5 - a2) >> v31;
        if (v36 >= (int)v32) {
          uint64_t v32 = v32;
        }
        else {
          uint64_t v32 = v36;
        }
        uint64_t v37 = a5 >> v31;
        uint64_t v38 = (a2 >> v31) + (int)v37 * (uint64_t)(a3 >> v31);
        uint64_t v39 = *((void *)a1 + 625) + 8 * v38;
        uint64_t v40 = *((void *)a1 + 622) + 4 * v38;
        uint64_t v41 = 1 << (v35 - 1);
        uint64_t v42 = 4 * v37;
        unint64_t v43 = -1;
        uint64_t v44 = 8 * v37;
        do
        {
          if ((int)v32 >= 1)
          {
            for (uint64_t j = 0; j != v32; ++j)
            {
              uint64_t v46 = (*(_DWORD *)(v40 + 4 * j) * *(_DWORD *)(v40 + 4 * j)) >> v35;
              if ((unint64_t)(*(void *)(v39 + 8 * j) + (int)v41 - v46) >> v35 < v43) {
                unint64_t v43 = (unint64_t)(*(void *)(v39 + 8 * j) + v41 - v46) >> v35;
              }
            }
          }
          ++v34;
          v40 += v42;
          v39 += v44;
        }
        while (v34 != v33);
        unint64_t result = v43;
        if (v43 < 2) {
          return result;
        }
      }
      unsigned int v62 = __clz(v43);
      unsigned int v63 = v62 + 1;
      unint64_t v64 = (v43 << (v62 + 1));
LABEL_67:
      unsigned int v65 = ((byte_1D0DAE264[v64 >> 24] << 12) | 0x200000u) >> (v63 >> 1);
      if (v62) {
        unsigned int v66 = v65;
      }
      else {
        unsigned int v66 = (11585 * v65) >> 14;
      }
      return (v66 + 16) >> 5;
    case 4:
      int v47 = *a1;
      LODWORD(v48) = 1 << (a4 - *a1);
      if ((a6 - a3) >> *a1 >= (int)v48) {
        int v49 = 1 << (a4 - *a1);
      }
      else {
        int v49 = (a6 - a3) >> *a1;
      }
      if (v49 < 1) {
        return 0;
      }
      int v50 = 0;
      uint64_t v51 = 0;
      char v52 = 2 * v47;
      int v53 = (a5 - a2) >> v47;
      uint64_t v48 = v53 >= (int)v48 ? v48 : v53;
      uint64_t v54 = a5 >> v47;
      uint64_t v55 = (a2 >> v47) + v54 * (a3 >> v47);
      uint64_t v56 = *((void *)a1 + 625) + 8 * v55;
      uint64_t v57 = *((void *)a1 + 622) + 4 * v55;
      uint64_t v58 = 4 * v54;
      uint64_t v59 = 8 * v54;
      do
      {
        if ((int)v48 >= 1)
        {
          for (uint64_t k = 0; k != v48; ++k)
            v51 += (*(void *)(v56 + 8 * k)
                  + (1 << (v52 - 1))
                  - (unint64_t)((*(_DWORD *)(v57 + 4 * k) * *(_DWORD *)(v57 + 4 * k)) >> v52)) >> v52;
        }
        ++v50;
        v57 += v58;
        v56 += v59;
      }
      while (v50 != v49);
      unint64_t v61 = (v48 & ~((int)v48 >> 31)) * v49;
      if (!v61) {
        return 0;
      }
      return (v51 + (unint64_t)(v61 >> 1)) / v61;
    default:
      return 0;
  }
}

uint64_t sub_1D0D256E0(uint64_t a1, int a2, int a3, int a4, int a5, char a6, int a7, unsigned int a8)
{
  unsigned int v11 = (*(_DWORD *)(*(void *)(a1 + 5344) + 4 * ((a5 + 15) >> 4) * (uint64_t)(a3 >> 4) + 4 * (a2 >> 4))
                     + (1 << (a6 - 8) >> 1)) >> (a6 - 8);
  if (v11 <= 0xBE)
  {
    if (v11 <= 0x9D)
    {
      if (v11 <= 0x7C)
      {
        if (v11 <= 0x6B)
        {
          if (v11 <= 0x4A)
          {
            uint64_t v13 = v11 > 0x31;
            if (v11 > 0x31) {
              int v12 = 5;
            }
            else {
              int v12 = 6;
            }
          }
          else
          {
            int v12 = 4;
            uint64_t v13 = 2;
          }
        }
        else
        {
          int v12 = 3;
          uint64_t v13 = 3;
        }
      }
      else
      {
        int v12 = 2;
        uint64_t v13 = 4;
      }
    }
    else
    {
      int v12 = 1;
      uint64_t v13 = 5;
    }
  }
  else
  {
    int v12 = 0;
    uint64_t v13 = 6;
  }
  unsigned int v14 = (sub_1D0D2585C((int *)a1, a2, a3, 4) + ((1 << (2 * (a6 - 8))) >> 1)) >> (2 * (a6 - 8));
  if (v14 >= 2)
  {
    if (v14 >= 6)
    {
      if (v14 >= 0x1E)
      {
        if (v14 > 0x31) {
          goto LABEL_27;
        }
        uint64_t v15 = 3;
      }
      else
      {
        uint64_t v15 = 2;
      }
    }
    else
    {
      uint64_t v15 = 1;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  int v16 = dword_1D0DA5338[4 * v13 + v15] + a7;
  int v17 = v16 - a4;
  if (v16 - a4 >= v12) {
    int v17 = v12;
  }
  BOOL v18 = __OFSUB__(v16, a4);
  int v19 = v16 - a4;
  if (v19 < 0 != v18) {
    int v12 = v19;
  }
  else {
    int v12 = v17;
  }
LABEL_27:
  if (v12 + a4 >= 51) {
    unsigned int v20 = 51;
  }
  else {
    unsigned int v20 = v12 + a4;
  }
  if (v12 + a4 <= (int)a8) {
    return a8;
  }
  else {
    return v20;
  }
}

unint64_t sub_1D0D2585C(int *a1, int a2, int a3, char a4)
{
  int v4 = *a1;
  int v5 = 1 << *a1;
  unsigned int v6 = 1 << a4;
  unsigned int v7 = v5 + ~a3 + a1[1183];
  if (v7 >= 1 << a4) {
    unsigned int v7 = 1 << a4;
  }
  uint64_t v8 = v7 >> v4;
  if ((int)v8 < 1)
  {
    int v10 = 0;
    unsigned int v21 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = *((void *)a1 + 604);
    uint64_t v12 = v11 * (a3 >> v4) + (a2 >> v4);
    uint64_t v13 = *((void *)a1 + 622) + 4 * v12;
    uint64_t v14 = *((void *)a1 + 625) + 8 * v12;
    unsigned int v15 = v5 + ~a2 + a1[1182];
    if (v15 < v6) {
      unsigned int v6 = v15;
    }
    uint64_t v16 = v6 >> v4;
    do
    {
      int v17 = (int *)v13;
      uint64_t v18 = v16;
      if ((int)v16 >= 1)
      {
        do
        {
          int v19 = *v17++;
          v10 += v19;
          --v18;
        }
        while (v18);
      }
      ++v9;
      v13 += 4 * v11;
    }
    while (v9 != v8);
    uint64_t v20 = 0;
    unsigned int v21 = 0;
    uint64_t v22 = 8 * v11;
    do
    {
      uint64_t v23 = (int *)v14;
      uint64_t v24 = v16;
      if ((int)v16 >= 1)
      {
        do
        {
          int v25 = *v23;
          v23 += 2;
          v21 += v25;
          --v24;
        }
        while (v24);
      }
      ++v20;
      v14 += v22;
    }
    while (v20 != v8);
  }
  return ((1 << (2 * a4 - 1)) + (unint64_t)v21 - ((v10 * v10) >> (2 * a4))) >> (2 * a4);
}

uint64_t sub_1D0D2597C(uint64_t a1, signed int a2, signed int a3, int a4)
{
  signed int v4 = a2 & 0xFFFFFFF8;
  if (a4 >= 3) {
    signed int v5 = a3;
  }
  else {
    signed int v5 = a3 & 0xFFFFFFF8;
  }
  if (a4 <= 3) {
    char v6 = 3;
  }
  else {
    char v6 = a4;
  }
  if (a4 >= 3) {
    signed int v4 = a2;
  }
  int v7 = 1 << v6;
  uint64_t v8 = *(void *)(a1 + 2240);
  int v9 = *(unsigned __int8 *)(v8 + 504);
  uint64_t v10 = v8 + 8 * *(int *)(v8 + 44);
  uint64_t v11 = (__int16 *)(v10 + 54);
  uint64_t v12 = (__int16 *)(v10 + 52);
  if (!v9) {
    uint64_t v11 = v12;
  }
  signed int v13 = *(_DWORD *)(a1 + 4732);
  if (v13 >= v5 + v7) {
    signed int v13 = v5 + v7;
  }
  if (v5 >= v13)
  {
    int v14 = 0;
  }
  else
  {
    int v14 = 0;
    int v15 = *v11 >> 3;
    int v16 = v4 + v7;
    if (*(_DWORD *)(a1 + 4728) < v16) {
      int v16 = *(_DWORD *)(a1 + 4728);
    }
    do
    {
      if (v4 < v16)
      {
        int v17 = v4;
        do
        {
          v14 += *(_DWORD *)(*(void *)(a1 + 5512) + 4 * ((v5 >> 3) * v15 + (v17 >> 3)));
          v17 += 8;
        }
        while (v17 < v16);
      }
      v5 += 8;
    }
    while (v5 < v13);
  }
  return (v14 >> (2 * v6 - 6));
}

uint64_t sub_1D0D25A48(int a1, int a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4;
  if (a6 < 1) {
    return v8;
  }
  if ((int)a4 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a4;
  }
  int v13 = a5;
  int v14 = v11 << 6;
  switch(*(unsigned char *)(a7 + 134))
  {
    case 0:
      int v18 = *(_DWORD *)(a7 + 96);
      uint64_t v19 = *(void *)(a8 + 2232);
      if (*(unsigned char *)(v19 + 648) || !*(unsigned char *)(v19 + 757))
      {
        float v20 = *(float *)(a8 + 60) * 0.5;
        if (!v18) {
          goto LABEL_24;
        }
LABEL_25:
        int v31 = 4;
        goto LABEL_26;
      }
      float v20 = *(float *)(a8 + 60);
      if (v18) {
        goto LABEL_25;
      }
LABEL_24:
      if (*(unsigned char *)(*(void *)(v19 + 616) + 1172) || !*(unsigned char *)(a8 + 56)) {
        goto LABEL_25;
      }
      if ((int)a4 >= 38) {
        int v95 = 38;
      }
      else {
        int v95 = a4;
      }
      if (v95 <= 22) {
        int v95 = 22;
      }
      int v31 = (int)((1.0 - v20) * 4.0 + (float)(v20 * (float)(v95 - 18)));
LABEL_26:
      if (*(unsigned char *)(a7 + 92))
      {
        signed int v32 = a2 & 0xFFFFFFF0;
        int v33 = 1 << (*(unsigned char *)(*(void *)(v19 + 576) + 538) - a3);
        signed int v34 = *(_DWORD *)(a8 + 4732);
        signed int v35 = (int)(v33 - 1 + (a2 & 0xFFFFFFF0)) <= v34
            ? 1 << (*(unsigned char *)(*(void *)(v19 + 576) + 538) - a3)
            : v34 - (a2 & 0xFFFFFFF0);
        if (v35 >= 1)
        {
          int v36 = 0;
          signed int v37 = v35 + v32;
          signed int v38 = *(_DWORD *)(a8 + 4728);
          if ((int)(v33 - 1 + (a1 & 0xFFFFFFF0)) > v38) {
            int v33 = v38 - (a1 & 0xFFFFFFF0);
          }
          int v39 = v33 >> 4;
          int v40 = (v38 + 15) >> 4;
          uint64_t v41 = *(void *)(a8 + 24) + 4 * (v40 * (a2 >> 4) + (a1 >> 4));
          if (v39 <= 1) {
            int v39 = 1;
          }
          uint64_t v42 = 4 * v39;
          uint64_t v43 = 4 * v40;
          int v44 = 4;
          do
          {
            uint64_t v45 = 0;
            do
            {
              int v46 = *(_DWORD *)(v41 + v45);
              if (v46 >= v44) {
                int v47 = v44;
              }
              else {
                int v47 = *(_DWORD *)(v41 + v45);
              }
              if (v46 > 0)
              {
                int v44 = v47;
                ++v36;
              }
              v45 += 4;
            }
            while (v42 != v45);
            v32 += 16;
            v41 += v43;
          }
          while (v32 < v37);
          unsigned int v48 = v44 - 1;
          if (v36) {
            BOOL v49 = v48 >= 3;
          }
          else {
            BOOL v49 = 1;
          }
          if (!v49)
          {
            int v50 = dword_1D0DA53A8[v48] * a6;
            int v52 = v50 + 4;
            BOOL v51 = v50 < -4;
            int v53 = v50 + 11;
            if (!v51) {
              int v53 = v52;
            }
            int v13 = (a5 - (v53 >> 3)) & ~((a5 - (v53 >> 3)) >> 31);
          }
        }
      }
      if (!v18)
      {
        BOOL v54 = *(unsigned __int8 *)(v19 + 648) <= 2u && *(_DWORD *)(a8 + 48) == *(_DWORD *)(v19 + 652) - 1;
        BOOL v55 = !v54;
        if (!*(unsigned char *)(*(void *)(v19 + 616) + 1172) && v55)
        {
          int v57 = *(unsigned __int8 *)(*(void *)(v19 + 40) + 2113) - a3;
          int v58 = *(_DWORD *)(a8 + 5456);
          if (v58 > v57) {
            LOBYTE(v57) = *(_DWORD *)(a8 + 5456);
          }
          if (v58 <= 3) {
            LOBYTE(v59) = 3;
          }
          else {
            int v59 = *(_DWORD *)(a8 + 5456);
          }
          int v96 = v31;
          int v60 = 1 << (v57 - v58);
          if ((*(_DWORD *)(a8 + 4732) - a2) >> v58 >= v60) {
            int v61 = v60;
          }
          else {
            int v61 = (*(_DWORD *)(a8 + 4732) - a2) >> v58;
          }
          if ((*(_DWORD *)(a8 + 4728) - a1) >> v58 >= v60) {
            int v62 = v60;
          }
          else {
            int v62 = (*(_DWORD *)(a8 + 4728) - a1) >> v58;
          }
          unsigned int v63 = ((*(unsigned int (**)(uint64_t))(a8 + 184))(*(void *)(a8 + 5368)
                                                                    + 4 * *(void *)(a8 + 5416) * (a2 >> v58) + 4 * (a1 >> v58))
               + (((v61 << (v59 - 3)) * (v62 << (v59 - 3))) >> 1))
              / ((v61 << (v59 - 3))
               * (v62 << (v59 - 3)));
          if (v63 >= 2)
          {
            unsigned int v64 = __clz(v63);
            unsigned int v65 = ((byte_1D0DAE264[(unint64_t)(v63 << (v64 + 1)) >> 24] << 12) | 0x200000u) >> ((v64 + 1) >> 1);
            if ((v64 & 1) == 0) {
              unsigned int v65 = (11585 * v65) >> 14;
            }
            unsigned int v63 = (v65 + 16) >> 5;
          }
          if (v13 < (int)v63) {
            unsigned int v63 = v13;
          }
          int v13 = (int)((1.0 - v20) * (float)v13 + (float)(v20 * (float)v63));
          uint64_t v19 = *(void *)(a8 + 2232);
          int v31 = v96;
          if (!*(unsigned char *)(v19 + 648) && v13 < a6 && *(unsigned char *)(v19 + 757)) {
            int v31 = (int)(float)((float)v96 + 6.0);
          }
        }
      }
      if (*(unsigned char *)(v19 + 465))
      {
        int v66 = *(unsigned __int8 *)(*(void *)(v19 + 40) + 2113) - a3;
        if (v66 <= 3) {
          LOBYTE(v66) = 3;
        }
        LODWORD(v67) = 1 << (v66 - 3);
        LODWORD(v68) = (*(_DWORD *)(a8 + 4732) - a2) >> 3;
        if ((int)v68 >= (int)v67) {
          uint64_t v68 = v67;
        }
        else {
          uint64_t v68 = v68;
        }
        int v69 = (*(_DWORD *)(a8 + 4728) - a1) >> 3;
        if (v69 >= (int)v67) {
          uint64_t v67 = v67;
        }
        else {
          uint64_t v67 = v69;
        }
        if ((int)v68 < 1)
        {
          int v71 = 0;
        }
        else
        {
          uint64_t v70 = 0;
          int v71 = 0;
          uint64_t v72 = *(int *)(a8 + 4744);
          uint64_t v73 = *(void *)(v19 + 480) + 2 * (int)v72 * (a2 >> 3) + 2 * (a1 >> 3);
          uint64_t v74 = 2 * v72;
          do
          {
            int v75 = (unsigned __int16 *)v73;
            uint64_t v76 = v67;
            if ((int)v67 >= 1)
            {
              do
              {
                int v77 = *v75++;
                v71 += v77;
                --v76;
              }
              while (v76);
            }
            ++v70;
            v73 += v74;
          }
          while (v70 != v68);
        }
        signed int v78 = (v71 + ((v68 * v67) >> 1)) / ((int)v68 * (int)v67);
        if (v78 < v13)
        {
          v13 *= v78;
          if (v13 >= 2)
          {
            unsigned int v79 = __clz(v13);
            if (v79) {
              unsigned int v80 = ((byte_1D0DAE264[(unint64_t)(v13 << (v79 + 1)) >> 24] << 12) | 0x200000u) >> ((v79 + 1) >> 1);
            }
            else {
              unsigned int v80 = (11585
            }
                   * (((byte_1D0DAE264[(unint64_t)(v13 << (v79 + 1)) >> 24] << 12) | 0x200000u) >> ((v79 + 1) >> 1))) >> 14;
            int v13 = (v80 + 16) >> 5;
          }
        }
      }
      BOOL v81 = *(unsigned char *)(a7 + 135) != 0;
      BOOL v82 = v13 < a6;
      if (v31 <= 8) {
        int v83 = 8;
      }
      else {
        int v83 = v31;
      }
      BOOL v84 = !v81 || !v82;
      if (v81 && v82) {
        int v85 = v83;
      }
      else {
        int v85 = v31;
      }
      if (v84) {
        int v86 = v11 << 6;
      }
      else {
        int v86 = v11 << 7;
      }
      int v87 = (((v13 - a6) * v85) << 8) / a6;
      if (v87 >= v86) {
        int v88 = v86;
      }
      else {
        int v88 = v87;
      }
      if (v87 <= -v86) {
        int v89 = -v86;
      }
      else {
        int v89 = v88;
      }
      int v90 = (v89 > 0) | (v89 >> 31);
      if (v89 < 0) {
        int v89 = -v89;
      }
      signed int v21 = v90 * ((v89 + 128) >> 8);
LABEL_123:
      int v91 = *(unsigned __int8 *)(*(void *)(*(void *)(a8 + 2232) + 40) + 2097);
      int v92 = v21 + v8;
      if (v92 >= 51) {
        unsigned int v93 = 51;
      }
      else {
        unsigned int v93 = v92;
      }
      if (v92 <= -v91) {
        return -v91;
      }
      else {
        return v93;
      }
    case 1:
      double v22 = (double)v14 * 0.00390625;
      long double v23 = exp2(v22 / 6.0);
      double v24 = log2((v23 * (double)(v13 + 1) + (double)a6 + 1.0) / (v23 * (double)(a6 + 1) + (double)(v13 + 1))) * 6.0;
      int v25 = (((int)v24 > 0) | ((int)v24 >> 31)) * (((int)fabs(v24) + 1) >> 1);
      int v26 = (int)v22;
      if (v25 < (int)v22) {
        int v26 = v25;
      }
      if (v25 <= (int)-((double)v14 * 0.00390625)) {
        signed int v21 = (int)-((double)v14 * 0.00390625);
      }
      else {
        signed int v21 = v26;
      }
      goto LABEL_123;
    case 2:
      double v27 = (double)v14 * 0.00390625;
      signed int v21 = (int)-v27;
      int v28 = (int)v27;
      double v29 = (double)(a5 - a6)
          / (double)a6
          * ((double)(a5 - a6)
           / (double)a6)
          * (v27
           * (double)(((int)((double)(a5 - a6) / (double)a6) > 0) | ((int)((double)(a5 - a6) / (double)a6) >> 31)));
      goto LABEL_17;
    case 3:
      double v30 = (double)v14 * 0.00390625;
      signed int v21 = (int)-v30;
      int v28 = (int)v30;
      double v29 = v30 * ((double)(a5 - a6) / (double)a6 * ((double)(a5 - a6) / (double)a6 * ((double)(a5 - a6) / (double)a6)));
LABEL_17:
      if ((int)v29 < v28) {
        int v28 = (int)v29;
      }
      if ((int)v29 > v21) {
        signed int v21 = v28;
      }
      goto LABEL_123;
    default:
      signed int v21 = 0;
      goto LABEL_123;
  }
}

uint64_t sub_1D0D26128(uint64_t a1)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1 != *(void *)(a1 + 8) && *(void *)(a1 + 32) != *(void *)(a1 + 16))
  {
    uint64_t v88 = *(void *)(a1 + 8);
    int v89 = v87;
    uint64_t v2 = *(void *)(a1 + 56);
    signed int v3 = (unsigned char *)*(unsigned int *)(a1 + 80);
    int v4 = *(_DWORD *)(a1 + 84);
    uint64_t v5 = *(void *)(a1 + 40);
    LODWORD(v92) = *(_DWORD *)(a1 + 76);
    int v7 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 88);
    char v6 = *(void (**)(uint64_t, unint64_t, unsigned char *, uint64_t, char *))(a1 + 96);
    uint64_t v8 = MEMORY[0x1F4188790](a1);
    int v91 = (char *)v87 - v9;
    uint64_t v10 = MEMORY[0x1F4188790](v8);
    uint64_t v11 = MEMORY[0x1F4188790](v10);
    int v15 = (unsigned char *)(((unint64_t)&v87[1] - ((v13 + 15) & 0x1FFFFFFF0) + 7) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v90 = v11;
    if ((int)v3 < 1)
    {
      unint64_t v19 = ((unint64_t)&v87[1] - ((v13 + 15) & 0x1FFFFFFF0) + 7) & 0xFFFFFFFFFFFFFFF0;
      int v26 = v12;
      uint64_t v18 = v14;
      if ((int)v3 < -15)
      {
LABEL_13:
        unsigned int v93 = (char *)v19;
        uint64_t v94 = (uint64_t)v26;
        int v95 = v6;
        int v96 = v3;
        uint64_t v27 = v2;
        uint64_t v28 = v88;
        if (v4 >= 1)
        {
          uint64_t v29 = v18;
          unsigned int v30 = 0;
          int v31 = v92 << 16;
          unint64_t v32 = (unint64_t)(v91 + 30) & 0xFFFFFFFFFFFFFFF0;
          int v33 = v92 - 1;
          uint64_t v92 = (int)v18 - 1;
          LODWORD(v91) = v31 / v4;
          do
          {
            uint64_t v34 = HIWORD(v30);
            uint64_t v35 = (unsigned __int16)v30 >> 12;
            v30 += v91;
            uint64_t v36 = v28 + v5 * v34;
            if (v33 >= (int)v34 + 1) {
              int v37 = v34 + 1;
            }
            else {
              int v37 = v33;
            }
            uint64_t v38 = v27;
            v7(v32, v36, v28 + v5 * v37, v29, v35);
            int v39 = v93;
            *(_WORD *)(v32 + 2 * v29) = *(_WORD *)(v32 + 2 * v92);
            v95(v1, v32, v96, v94, v39);
            uint64_t v27 = v38;
            v1 += v38;
            --v4;
          }
          while (v4);
        }
        v87[1] = v87;
        uint64_t v40 = *(void *)(v90 + 32);
        int v41 = *(int *)(v90 + 80) >> 1;
        int v42 = *(_DWORD *)(v90 + 76);
        uint64_t v43 = MEMORY[0x1F4188790](*(void *)(v90 + 64));
        uint64_t v45 = (char *)v87 - v44;
        uint64_t v46 = MEMORY[0x1F4188790](v43);
        unsigned int v48 = (char *)v87 - ((v47 + 15) & 0x1FFFFFFF0);
        uint64_t v49 = MEMORY[0x1F4188790](v46);
        int v59 = (unsigned char *)(((unint64_t)&v87[1] - ((v58 + 15) & 0x1FFFFFFF0) + 7) & 0xFFFFFFFFFFFFFFF0);
        int v96 = v59;
        if (v60 <= 1)
        {
          uint64_t v67 = v53;
          uint64_t v68 = v50;
          LODWORD(v63) = 0;
        }
        else
        {
          unsigned int v61 = 0;
          char v62 = 0;
          if (v41 <= 1) {
            uint64_t v63 = 1;
          }
          else {
            uint64_t v63 = v41;
          }
          unsigned int v64 = v48;
          uint64_t v65 = v63;
          do
          {
            unsigned int v66 = HIWORD(v61);
            *v59++ = (unsigned __int16)v61 >> 12;
            v61 += (int)((v55 << 15) & 0xFFFF0000) / v41;
            *v64++ = 2 * (v66 - v62);
            char v62 = v66;
            --v65;
          }
          while (v65);
          uint64_t v67 = v53;
          uint64_t v68 = v50;
        }
        int v95 = (void (*)(uint64_t, unint64_t, unsigned char *, uint64_t, char *))v48;
        if ((int)v63 < v57)
        {
          unsigned int v93 = v45;
          uint64_t v94 = v49;
          int v69 = &v48[v63];
          uint64_t v70 = v51;
          uint64_t v71 = v54;
          uint64_t v72 = v52;
          uint64_t v73 = v55;
          int v74 = v56;
          bzero(v69, (v41 - v63 + 15) + 1);
          int v56 = v74;
          uint64_t v55 = v73;
          uint64_t v52 = v72;
          uint64_t v54 = v71;
          uint64_t v51 = v70;
          uint64_t v45 = v93;
          uint64_t v49 = v94;
        }
        LODWORD(v94) = v41;
        unsigned int v93 = v67;
        if (v56 >= 2)
        {
          int v75 = v68;
          unsigned int v76 = 0;
          unint64_t v77 = (unint64_t)(v45 + 30) & 0xFFFFFFFFFFFFFFF0;
          int v78 = (v42 >> 1) - 1;
          int v91 = (char *)(int)v52;
          uint64_t v92 = v52 - 2;
          int v89 = (void *)((int)v52 - 1);
          uint64_t v90 = v55 | 1;
          LODWORD(v88) = (v42 >> 1 << 16) / (v56 >> 1);
          if (v56 >> 1 <= 1) {
            int v79 = 1;
          }
          else {
            int v79 = v56 >> 1;
          }
          do
          {
            uint64_t v80 = HIWORD(v76);
            v76 += v88;
            uint64_t v81 = v51 + v54 * v80;
            if (v78 >= (int)v80 + 1) {
              int v82 = v80 + 1;
            }
            else {
              int v82 = v78;
            }
            uint64_t v83 = v51;
            uint64_t v84 = v49;
            uint64_t v85 = v54;
            uint64_t v86 = v52;
            v75(v77, v81, v51 + v54 * v82);
            *(_WORD *)(v77 + 2 * (void)v91) = *(_WORD *)(v77 + 2 * v92);
            *(_WORD *)(v77 + 2 * v90) = *(_WORD *)(v77 + 2 * (void)v89);
            ((void (*)(uint64_t, unint64_t, void, void, unsigned char *))v93)(v40, v77, v94, v95, v96);
            uint64_t v52 = v86;
            uint64_t v54 = v85;
            uint64_t v51 = v83;
            uint64_t v49 = v84;
            v40 += v84;
            --v79;
          }
          while (v79);
        }
        return 0;
      }
      int v24 = 0;
    }
    else
    {
      unsigned int v16 = 0;
      char v17 = 0;
      uint64_t v18 = v14;
      unint64_t v19 = (unint64_t)v15;
      float v20 = v12;
      signed int v21 = v3;
      int v22 = (v14 << 16) / (int)v3;
      do
      {
        unsigned int v23 = HIWORD(v16);
        *v15++ = (unsigned __int16)v16 >> 12;
        v16 += v22;
        *v20++ = v23 - v17;
        char v17 = v23;
        --v21;
      }
      while (v21);
      int v24 = (int)v3;
    }
    int v26 = v12;
    bzero(&v12[v24], (v3 - v24 + 15) + 1);
    goto LABEL_13;
  }
  if (dword_1EB671A40 >= 3)
  {
    fwrite("src and dst being the same buffer not supported so far!", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "src and dst being the same buffer not supported so far!");
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1D0D26678(uint64_t result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = a3;
    char v6 = (unsigned char *)(result + 1);
    do
    {
      __int16 v8 = *a5++;
      __int16 v7 = v8;
      unsigned int v9 = *a4++;
      a2 += v9;
      *(v6 - 1) = (unsigned __int16)(a2[2] * v7 + (16 - v7) * *a2 + 128) >> 8;
      *char v6 = (unsigned __int16)(a2[3] * v7 + (16 - v7) * a2[1] + 128) >> 8;
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  return result;
}

unsigned char *sub_1D0D266E0(unsigned char *result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = a3;
    do
    {
      __int16 v7 = *a5++;
      __int16 v6 = v7;
      __int16 v8 = 16 - v7;
      unsigned int v9 = *a4++;
      a2 += v9;
      *result++ = (unsigned __int16)(a2[1] * v6 + v8 * *a2 + 128) >> 8;
      --v5;
    }
    while (v5);
  }
  return result;
}

_WORD *sub_1D0D26728(_WORD *result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, __int16 a5)
{
  if (a4 >= 1)
  {
    uint64_t v5 = a4;
    do
    {
      __int16 v6 = *a2++;
      __int16 v7 = (16 - a5) * v6;
      __int16 v8 = *a3++;
      *result++ = v7 + v8 * a5;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D0D2675C(void (**a1)(uint64_t), CVBufferRef buffer, unint64_t a3, __CVBuffer *a4, unint64_t a5)
{
  uint64_t valuePtr = 0;
  CFNumberRef Attachment = (const __CFNumber *)CVBufferGetAttachment(buffer, @"VPImageBufferLSBAligned", 0);
  if (Attachment)
  {
    CFNumberRef v8 = Attachment;
    CFTypeID v9 = CFGetTypeID(Attachment);
    if (v9 == CFNumberGetTypeID()) {
      CFNumberGetValue(v8, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    }
  }
  CFNumberRef v10 = (const __CFNumber *)CVBufferGetAttachment(a4, @"VPImageBufferLSBAligned", 0);
  if (v10)
  {
    CFNumberRef v11 = v10;
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 == CFNumberGetTypeID()) {
      CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
    }
  }
  if (CVPixelBufferGetPixelFormatType(buffer) == 1496395842) {
    HIDWORD(valuePtr) = 10;
  }
  unint64_t v50 = HIDWORD(a5);
  unint64_t v51 = HIDWORD(a3);
  if (CVPixelBufferGetPixelFormatType(a4) == 1496395842)
  {
    int v13 = 10;
    LODWORD(valuePtr) = 10;
  }
  else
  {
    int v13 = valuePtr;
  }
  int v14 = HIDWORD(valuePtr);
  CVPixelBufferLockBaseAddress(buffer, 1uLL);
  CVPixelBufferLockBaseAddress(a4, 0);
  uint64_t v57 = (int)a3;
  uint64_t v54 = (int)a5;
  if (v14 == v13)
  {
    size_t v15 = 0;
    for (char i = 1; ; char i = 0)
    {
      char v56 = i;
      size_t v17 = CVPixelBufferGetWidth(buffer) - v57;
      size_t v18 = CVPixelBufferGetWidth(a4) - v54;
      size_t v19 = CVPixelBufferGetHeightOfPlane(buffer, v15) - ((int)v51 >> v15);
      int v20 = (int)v50 >> v15;
      size_t v21 = CVPixelBufferGetHeightOfPlane(a4, v15) - ((int)v50 >> v15);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, v15);
      unsigned int v23 = (char *)CVPixelBufferGetBaseAddressOfPlane(a4, v15);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(buffer, v15);
      size_t v25 = CVPixelBufferGetBytesPerRowOfPlane(a4, v15);
      if (v18 >= v17) {
        size_t v26 = v17;
      }
      else {
        size_t v26 = v18;
      }
      if (v21 >= v19) {
        size_t v27 = v19;
      }
      else {
        size_t v27 = v21;
      }
      if (v23 && BaseAddressOfPlane)
      {
        if (v27)
        {
          uint64_t v28 = &BaseAddressOfPlane[2 * (BytesPerRowOfPlane >> 1) * ((int)v51 >> v15) + 2 * v57];
          uint64_t v29 = &v23[2 * (v25 >> 1) * v20 + 2 * v54];
          size_t v30 = 2 * v26;
          uint64_t v31 = 2 * (v25 >> 1);
          uint64_t v32 = 2 * (BytesPerRowOfPlane >> 1);
          do
          {
            memcpy(v29, v28, v30);
            v29 += v31;
            v28 += v32;
            --v27;
          }
          while (v27);
        }
      }
      else if (v23)
      {
        if (dword_1EB671A40 >= 3)
        {
          fwrite("10bit mono to 420 copy not implemented", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "10bit mono to 420 copy not implemented");
        }
        return 4294954386;
      }
      size_t v15 = 1;
      if ((v56 & 1) == 0)
      {
        CVPixelBufferUnlockBaseAddress(a4, 0);
        CVPixelBufferUnlockBaseAddress(buffer, 1uLL);
        return 0;
      }
    }
  }
  size_t v34 = 0;
  unsigned int v47 = 0;
  char v35 = 1;
  uint64_t v36 = (int)a5;
  do
  {
    char v55 = v35;
    CVPixelBufferGetWidth(buffer);
    size_t Width = CVPixelBufferGetWidth(a4);
    size_t v38 = Width - v36;
    CVPixelBufferGetHeightOfPlane(buffer, v34);
    uint64_t v39 = (int)v50 >> v34;
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a4, v34);
    uint64_t v40 = CVPixelBufferGetBaseAddressOfPlane(buffer, v34);
    int v41 = CVPixelBufferGetBaseAddressOfPlane(a4, v34);
    CVPixelBufferGetBytesPerRowOfPlane(buffer, v34);
    size_t v42 = CVPixelBufferGetBytesPerRowOfPlane(a4, v34) >> 1;
    uint64_t v36 = v54;
    uint64_t v43 = (uint64_t)v41 + 2 * v42 * v39 + 2 * v54;
    if (v41 && v40)
    {
      if (valuePtr)
      {
        if (HIDWORD(valuePtr))
        {
          if (dword_1EB671A40 >= 3)
          {
            fwrite("Conversion between bitdepths not supported\n", 0x2BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            syslog(27, "Conversion between bitdepths not supported\n");
          }
          unsigned int v47 = -12910;
        }
        else if (valuePtr == 10)
        {
          a1[3](v43);
        }
        else if (valuePtr == 9)
        {
          a1[2](v43);
        }
      }
      else if (HIDWORD(valuePtr) == 10)
      {
        a1[1](v43);
      }
      else if (HIDWORD(valuePtr) == 9)
      {
        (*a1)(v43);
      }
    }
    else if (v41 && HeightOfPlane != v39)
    {
      uint64_t v44 = 0;
      if (valuePtr) {
        __int16 v45 = 1 << (valuePtr - 1);
      }
      else {
        __int16 v45 = 0x8000;
      }
      do
      {
        if (Width != v54)
        {
          uint64_t v46 = 0;
          do
            *(_WORD *)(v43 + 2 * v46++) = v45;
          while (v38 != v46);
        }
        ++v44;
        v43 += 2 * v42;
      }
      while (v44 != HeightOfPlane - v39);
    }
    char v35 = 0;
    size_t v34 = 1;
  }
  while ((v55 & 1) != 0);
  CVPixelBufferUnlockBaseAddress(a4, 0);
  CVPixelBufferUnlockBaseAddress(buffer, 1uLL);
  return v47;
}

uint64_t sub_1D0D26C90(uint64_t a1, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(a3, 0);
  int Width = CVPixelBufferGetWidth(pixelBuffer);
  int Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t v8 = CVPixelBufferGetBytesPerRow(pixelBuffer) >> 1;
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  v14[0] = CVPixelBufferGetBytesPerRowOfPlane(a3, 0) >> 1;
  v14[1] = CVPixelBufferGetBytesPerRowOfPlane(a3, 1uLL) >> 1;
  v13[0] = CVPixelBufferGetBaseAddressOfPlane(a3, 0);
  v13[1] = CVPixelBufferGetBaseAddressOfPlane(a3, 1uLL);
  (*(void (**)(void *, void *, void *, size_t, void, void))(a1 + 40))(v13, v14, BaseAddress, v8, Width, Height);
  int valuePtr = 10;
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CVBufferSetAttachment(a3, @"VPImageBufferLSBAligned", v10, kCVAttachmentMode_ShouldNotPropagate);
  CFRelease(v10);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  return CVPixelBufferUnlockBaseAddress(a3, 0);
}

uint64_t sub_1D0D26E08(void (**a1)(uint64_t), CVPixelBufferRef pixelBuffer, __CVBuffer *a3, int64_t a4)
{
  unsigned int Width = CVPixelBufferGetWidth(pixelBuffer);
  int Height = CVPixelBufferGetHeight(pixelBuffer);
  return sub_1D0D26E88(a1, pixelBuffer, 0, Width, Height, a3, a4, 0);
}

uint64_t sub_1D0D26E88(void (**a1)(uint64_t), CVPixelBufferRef pixelBuffer, unint64_t a3, unsigned int a4, int a5, __CVBuffer *a6, int64_t a7, int a8)
{
  LODWORD(v10) = a5;
  unint64_t v14 = HIDWORD(a3);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  OSType v67 = CVPixelBufferGetPixelFormatType(a6);
  size_t Width = CVPixelBufferGetWidth(a6);
  uint64_t v81 = a6;
  size_t Height = CVPixelBufferGetHeight(a6);
  unsigned int v18 = CVPixelBufferGetWidth(pixelBuffer) - a3;
  if ((int)v18 >= (int)a4) {
    unint64_t v19 = a4;
  }
  else {
    unint64_t v19 = v18;
  }
  uint64_t v80 = pixelBuffer;
  int v79 = v14;
  int v20 = CVPixelBufferGetHeight(pixelBuffer) - v14;
  if (v20 >= (int)v10) {
    int64_t v10 = v10;
  }
  else {
    int64_t v10 = v20;
  }
  if ((v19 & 0x80000000) != 0
    || (v10 & 0x80000000) != 0
    || (uint64_t v21 = Width - (int)a7, v21 < 0)
    || (int64_t v22 = Height - (a7 >> 32), v22 < 0))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Invalid offset\n", 0xFuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Invalid offset\n");
    }
    return 4294954394;
  }
  if ((sub_1D0D27688(PixelFormatType) & 1) == 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Source format 0x%x not supported\n", PixelFormatType);
      syslog(27, "Source format 0x%x not supported\n");
    }
    return 4294954386;
  }
  int v23 = v67;
  if ((sub_1D0D27688(v67) & 1) == 0)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Destination format 0x%x not supported\n", v67);
      syslog(27, "Destination format 0x%x not supported\n");
    }
    return 4294954386;
  }
  unint64_t v74 = HIDWORD(a7);
  int v24 = sub_1D0C50E9C(PixelFormatType);
  unsigned int v25 = sub_1D0C50E9C(v67);
  if (v24 != 8)
  {
    if (v25 == 8)
    {
      if (a7)
      {
        if (dword_1EB671A40 >= 3)
        {
          uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
          __int16 v45 = "Dither doesn't support dstoffset\n";
LABEL_67:
          int v59 = v45;
          size_t v60 = 33;
LABEL_77:
          fwrite(v59, v60, 1uLL, v44);
          syslog(27, v45);
          return 4294954386;
        }
        return 4294954386;
      }
      if (a3 | v79)
      {
        if (dword_1EB671A40 >= 3)
        {
          uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
          __int16 v45 = "Dither doesn't support srcoffset\n";
          goto LABEL_67;
        }
        return 4294954386;
      }
      uint64_t result = sub_1D0C75498((uint64_t)(a1 + 6), pixelBuffer, v81);
    }
    else
    {
      if (PixelFormatType == 1983000886 && v25 >= 9)
      {
        if (a7)
        {
          if (dword_1EB671A40 < 3) {
            return 4294954386;
          }
          uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
          __int16 v45 = "v216 doesn't support dstoffset\n";
        }
        else
        {
          if (!(a3 | v79))
          {
            sub_1D0D26C90((uint64_t)a1, pixelBuffer, v81);
            uint64_t result = 0;
            goto LABEL_81;
          }
          if (dword_1EB671A40 < 3) {
            return 4294954386;
          }
          uint64_t v44 = (FILE *)*MEMORY[0x1E4F143C8];
          __int16 v45 = "v216 doesn't support srcoffset\n";
        }
        int v59 = v45;
        size_t v60 = 31;
        goto LABEL_77;
      }
      if (v25 < 9)
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unsupported conversion from pixfmt 0x%x to 0x%x\n", PixelFormatType, v67);
          syslog(27, "Unsupported conversion from pixfmt 0x%x to 0x%x\n");
        }
        return 4294954394;
      }
      uint64_t result = sub_1D0D2675C(a1, pixelBuffer, a3, v81, a7);
    }
LABEL_81:
    int v58 = a8;
    if (result) {
      return result;
    }
    goto LABEL_82;
  }
  uint64_t v73 = (int)a7;
  if (v25 != 8)
  {
    if (v25 >= 9)
    {
      int64_t v62 = v22;
      uint64_t v63 = v21;
      int64_t v64 = v10;
      unint64_t v65 = v19;
      char v46 = 1;
      CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
      CVPixelBufferLockBaseAddress(v81, 0);
      size_t v47 = 0;
      uint64_t v72 = (int)a3;
      do
      {
        char v76 = v46;
        size_t v48 = CVPixelBufferGetWidth(v80) - v72;
        size_t v49 = CVPixelBufferGetWidth(v81) - v73;
        CVPixelBufferGetHeightOfPlane(v80, v47);
        uint64_t v50 = (int)v74 >> v47;
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v81, v47);
        size_t v51 = HeightOfPlane - v50;
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v80, v47);
        int v53 = (char *)CVPixelBufferGetBaseAddressOfPlane(v81, v47);
        CVPixelBufferGetBytesPerRowOfPlane(v80, v47);
        size_t v54 = CVPixelBufferGetBytesPerRowOfPlane(v81, v47) >> 1;
        if (v49 >= v48) {
          size_t v49 = v48;
        }
        char v55 = &v53[2 * v54 * v50 + 2 * v73];
        if (v53 && BaseAddressOfPlane)
        {
          a1[4]((uint64_t)v55);
          char v56 = v76;
        }
        else
        {
          char v56 = v76;
          if (v53 && HeightOfPlane != v50)
          {
            uint64_t v57 = 2 * v54;
            do
            {
              if (v49) {
                memset_pattern16(v55, &unk_1D0D7F6E0, 2 * v49);
              }
              v55 += v57;
              --v51;
            }
            while (v51);
          }
        }
        char v46 = 0;
        size_t v47 = 1;
      }
      while ((v56 & 1) != 0);
      goto LABEL_58;
    }
    return 4294954394;
  }
  int64_t v62 = v22;
  uint64_t v63 = v21;
  int64_t v64 = v10;
  unint64_t v65 = v19;
  char v26 = 1;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(v81, 0);
  size_t v27 = 0;
  uint64_t v70 = (int)a3;
  do
  {
    char v75 = v26;
    *(void *)int v78 = CVPixelBufferGetWidth(v80) - v70;
    size_t v28 = CVPixelBufferGetWidth(v81) - v73;
    int v68 = v79 >> v27;
    size_t v29 = CVPixelBufferGetHeightOfPlane(v80, v27) - (v79 >> v27);
    size_t v71 = CVPixelBufferGetHeightOfPlane(v81, v27);
    size_t v30 = v71 - ((int)v74 >> v27);
    uint64_t v31 = (char *)CVPixelBufferGetBaseAddressOfPlane(v80, v27);
    uint64_t v32 = (char *)CVPixelBufferGetBaseAddressOfPlane(v81, v27);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v80, v27);
    size_t v34 = CVPixelBufferGetBytesPerRowOfPlane(v81, v27);
    uint64_t v35 = (int)v74 >> v27;
    size_t v36 = v34;
    int v37 = v31;
    if (v28 >= *(void *)v78) {
      size_t v38 = *(void *)v78;
    }
    else {
      size_t v38 = v28;
    }
    if (v30 >= v29) {
      size_t v39 = v29;
    }
    else {
      size_t v39 = v71 - ((int)v74 >> v27);
    }
    uint64_t v40 = &v32[v34 * v35 + v73];
    if (v32 && v37)
    {
      char v41 = v75;
      if (v39)
      {
        size_t v42 = &v37[BytesPerRowOfPlane * v68 + v70];
        do
        {
          memcpy(v40, v42, v38);
          v42 += BytesPerRowOfPlane;
          v40 += v36;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      char v41 = v75;
      if (v32 && v71 != v35)
      {
        do
        {
          memset(v40, 128, v28);
          v40 += v36;
          --v30;
        }
        while (v30);
      }
    }
    char v26 = 0;
    size_t v27 = 1;
  }
  while ((v41 & 1) != 0);
LABEL_58:
  CVPixelBufferUnlockBaseAddress(v81, 0);
  CVPixelBufferUnlockBaseAddress(v80, 1uLL);
  uint64_t result = 0;
  int v23 = v67;
  int v58 = a8;
  int64_t v10 = v64;
  unint64_t v19 = v65;
  int64_t v22 = v62;
  uint64_t v21 = v63;
LABEL_82:
  if (v58)
  {
    if (v21 >= v19) {
      unint64_t v61 = v19;
    }
    else {
      unint64_t v61 = v21;
    }
    if (v22 >= v10) {
      int64_t v22 = v10;
    }
    if (v23 == 1278226488)
    {
      return sub_1D0D27750(v81, v61, v22);
    }
    else if ((v23 & 0xFFFFFFFD) == 0x4C303130)
    {
      return sub_1D0D2788C(0, v81, v61, v22);
    }
    else if (sub_1D0C50E9C(v23) == 8)
    {
      return sub_1D0D279E4(v81, v61, v22);
    }
    else
    {
      return sub_1D0D27A4C(v81, v61, v22);
    }
  }
  return result;
}

uint64_t sub_1D0D27688(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1278226737)
  {
    if (a1 > 1278226487)
    {
      if (a1 == 1278226488) {
        return result;
      }
      int v3 = 1278226736;
    }
    else
    {
      if (a1 == 875704422) {
        return result;
      }
      int v3 = 875704438;
    }
    goto LABEL_13;
  }
  if (a1 <= 1983000885)
  {
    if (a1 == 1278226738) {
      return result;
    }
    int v3 = 1496395842;
    goto LABEL_13;
  }
  if (a1 != 1983000886 && a1 != 2016686640)
  {
    int v3 = 2019963440;
LABEL_13:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1D0D27750(__CVBuffer *a1, unint64_t a2, size_t a3)
{
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (BaseAddressOfPlane)
  {
    __int16 v7 = BaseAddressOfPlane;
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
    size_t v11 = HeightOfPlane;
    if (WidthOfPlane > a2 || HeightOfPlane > a3)
    {
      size_t v12 = WidthOfPlane - a2;
      if (WidthOfPlane > a2 && a3)
      {
        int v13 = &v7[a2];
        size_t v14 = a3;
        do
        {
          memset(v13, *(v13 - 1), v12);
          v13 += BytesPerRowOfPlane;
          --v14;
        }
        while (v14);
      }
      BOOL v15 = v11 > a3;
      size_t v16 = v11 - a3;
      if (v15)
      {
        size_t v17 = &v7[BytesPerRowOfPlane * (a3 - 1)];
        unsigned int v18 = &v7[BytesPerRowOfPlane * a3];
        do
        {
          memcpy(v18, v17, WidthOfPlane);
          v18 += BytesPerRowOfPlane;
          --v16;
        }
        while (v16);
      }
    }
    return 0;
  }
  else
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n");
    }
    return 4294954385;
  }
}

uint64_t sub_1D0D2788C(size_t planeIndex, CVPixelBufferRef pixelBuffer, unint64_t a3, unint64_t a4)
{
  size_t v7 = planeIndex;
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, planeIndex);
  if (BaseAddressOfPlane)
  {
    CFTypeID v9 = BaseAddressOfPlane;
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v7);
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v7);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, v7);
    if (WidthOfPlane > a3 || HeightOfPlane > a4)
    {
      if (WidthOfPlane > a3 && a4)
      {
        uint64_t v13 = 0;
        size_t v14 = &v9[2 * a3];
        do
        {
          __int16 v15 = *(_WORD *)&v9[2 * a3 - 2 + v13 * BytesPerRowOfPlane];
          size_t v16 = v14;
          size_t v17 = WidthOfPlane - a3;
          do
          {
            *(_WORD *)size_t v16 = v15;
            v16 += 2;
            --v17;
          }
          while (v17);
          ++v13;
          v14 += BytesPerRowOfPlane;
        }
        while (v13 != a4);
      }
      size_t v18 = HeightOfPlane - a4;
      if (HeightOfPlane > a4)
      {
        unint64_t v19 = &v9[BytesPerRowOfPlane * (a4 - 1)];
        size_t v20 = 2 * WidthOfPlane;
        uint64_t v21 = &v9[BytesPerRowOfPlane * a4];
        do
        {
          memcpy(v21, v19, v20);
          v21 += BytesPerRowOfPlane;
          --v18;
        }
        while (v18);
      }
    }
    return 0;
  }
  else
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n");
    }
    return 4294954385;
  }
}

uint64_t sub_1D0D279E4(__CVBuffer *a1, unint64_t a2, size_t a3)
{
  uint64_t result = sub_1D0D27750(a1, a2, a3);
  if (!result)
  {
    return sub_1D0D2788C(1uLL, a1, a2 >> 1, a3 >> 1);
  }
  return result;
}

uint64_t sub_1D0D27A4C(CVPixelBufferRef pixelBuffer, unint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1D0D2788C(0, pixelBuffer, a2, a3);
  if (!result)
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    if (BaseAddressOfPlane)
    {
      size_t v8 = BaseAddressOfPlane;
      unint64_t v9 = a2 >> 1;
      unint64_t v10 = a3 >> 1;
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
      size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
      if (WidthOfPlane > v9 || HeightOfPlane > v10)
      {
        if (a3 >= 2 && WidthOfPlane > v9)
        {
          uint64_t v14 = 0;
          __int16 v15 = &v8[4 * v9];
          do
          {
            int v16 = *(_DWORD *)&v8[4 * v9 - 4 + v14 * BytesPerRowOfPlane];
            size_t v17 = v15;
            size_t v18 = WidthOfPlane - v9;
            do
            {
              *(_DWORD *)size_t v17 = v16;
              v17 += 4;
              --v18;
            }
            while (v18);
            ++v14;
            v15 += BytesPerRowOfPlane;
          }
          while (v14 != v10);
        }
        size_t v19 = HeightOfPlane - v10;
        if (HeightOfPlane > v10)
        {
          size_t v20 = &v8[BytesPerRowOfPlane * (v10 - 1)];
          size_t v21 = 4 * WidthOfPlane;
          int64_t v22 = &v8[BytesPerRowOfPlane * v10];
          do
          {
            memcpy(v22, v20, v21);
            v22 += BytesPerRowOfPlane;
            --v19;
          }
          while (v19);
        }
      }
      return 0;
    }
    else
    {
      if (dword_1EB671A40 >= 3)
      {
        fwrite("NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "NULL returned from CVPixelBufferGetBaseAddress (not locked?)\n");
      }
      return 4294954385;
    }
  }
  return result;
}

uint64_t *sub_1D0D27BC4(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a6 >= 2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a6 >> 1;
    uint64_t v8 = a5 >> 1;
    uint64_t v9 = a4;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    uint64_t v12 = *result;
    uint64_t v13 = result[1];
    if (a5 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    uint64_t v14 = 4 * a4;
    __int16 v15 = (unsigned __int16 *)(a3 + 6);
    uint64_t v16 = v12 + 2 * v11;
    uint64_t v17 = 4 * v11;
    uint64_t v18 = 2 * v10;
    do
    {
      if (a5 >= 2)
      {
        uint64_t v19 = 0;
        size_t v20 = v15;
        uint64_t v21 = v8;
        do
        {
          unsigned int v22 = *(v20 - 2);
          if (v22 >= 0xFFDF) {
            unsigned int v22 = 65503;
          }
          *(_WORD *)(v12 + v19) = (v22 + 32) >> 6;
          unsigned int v23 = *v20;
          if (v23 >= 0xFFDF) {
            unsigned int v23 = 65503;
          }
          *(_WORD *)(v12 + v19 + 2) = (v23 + 32) >> 6;
          unsigned int v24 = *(v20 - 3);
          if (v24 >= 0xFFDF) {
            unsigned int v24 = 65503;
          }
          *(_WORD *)(v13 + v19) = (v24 + 32) >> 6;
          unsigned int v25 = *(v20 - 1);
          if (v25 >= 0xFFDF) {
            unsigned int v25 = 65503;
          }
          *(_WORD *)(v13 + v19 + 2) = (v25 + 32) >> 6;
          unsigned int v26 = v20[v9 - 2];
          if (v26 >= 0xFFDF) {
            unsigned int v26 = 65503;
          }
          *(_WORD *)(v16 + v19) = (v26 + 32) >> 6;
          unsigned int v27 = v20[v9];
          if (v27 >= 0xFFDF) {
            unsigned int v27 = 65503;
          }
          *(_WORD *)(v16 + v19 + 2) = (v27 + 32) >> 6;
          v20 += 4;
          v19 += 4;
          --v21;
        }
        while (v21);
      }
      ++v6;
      v12 += v17;
      v13 += v18;
      __int16 v15 = (unsigned __int16 *)((char *)v15 + v14);
      v16 += v17;
    }
    while (v6 != v7);
    *uint64_t result = v12;
    result[1] = v13;
  }
  return result;
}

uint64_t sub_1D0D27CF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    for (uint64_t i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (uint64_t j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = 4 * *(unsigned __int8 *)(a3 + j);
      }
      a3 += a4;
      result += 2 * a2;
    }
  }
  return result;
}

uint64_t sub_1D0D27D38(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    for (uint64_t i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (uint64_t j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = *(_WORD *)(a3 + 2 * j) >> 7;
      }
      result += 2 * a2;
      a3 += 2 * a4;
    }
  }
  return result;
}

uint64_t sub_1D0D27D80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    for (uint64_t i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (uint64_t j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = *(_WORD *)(a3 + 2 * j) << 7;
      }
      result += 2 * a2;
      a3 += 2 * a4;
    }
  }
  return result;
}

void *sub_1D0D27DC8(void *result)
{
  result[33] = sub_1D0D28C00;
  result[29] = sub_1D0C8D410;
  result[30] = sub_1D0C8D324;
  result[31] = sub_1D0C8D1AC;
  result[32] = sub_1D0C8D048;
  result[34] = sub_1D0C8CF48;
  result[35] = sub_1D0C8CE38;
  result[36] = sub_1D0C8CC80;
  result[37] = sub_1D0C8CADC;
  result[39] = sub_1D0C8C964;
  result[40] = sub_1D0C8C7D4;
  result[41] = sub_1D0C8C58C;
  result[42] = sub_1D0C8C360;
  result[44] = sub_1D0C8BF10;
  result[45] = sub_1D0C8BB9C;
  result[46] = sub_1D0C8B758;
  result[47] = sub_1D0C8B324;
  result[38] = sub_1D0C8C2A4;
  result[43] = sub_1D0C8C194;
  result[48] = sub_1D0C8B074;
  result[49] = sub_1D0C8BE60;
  result[50] = sub_1D0C8BADC;
  result[51] = sub_1D0C8B698;
  result[52] = sub_1D0C8B264;
  result[53] = sub_1D0C8B00C;
  result[55] = sub_1D0C7FD8C;
  return result;
}

_WORD *sub_1D0D27F6C(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = a6;
    unint64_t v7 = &result[2 * a5 - 2];
    uint64_t v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      unint64_t v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      uint64_t v9 = result;
      uint64_t v10 = a5;
      do
      {
        int v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 7)) + (unsigned __int16)*v9;
        if (v11 >= 4095) {
          int v11 = 4095;
        }
        *uint64_t v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      uint64_t result = (_WORD *)((char *)result + v8);
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1D0D27FE8(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = 2 * a7;
  uint64_t v16 = a8;
  uint64_t v107 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[2 * v15 - 4];
    uint64_t v18 = v110;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  int v20 = ~a4 & 5;
  unsigned int v105 = ((a4 >> 1) & 1) + a7;
  uint64_t __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v21 = (unsigned __int16)a5[2];
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(unsigned __int16 *)(a6 + 4);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    BOOL v24 = __OFSUB__(v22, v21);
    int v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0)) {
      int v29 = 0;
    }
    else {
      int v29 = 1;
    }
    int v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 4095) {
      int v30 = 4095;
    }
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  uint64_t result = a4;
  if ((a4 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    int v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    BOOL v24 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v24 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 4095) {
      int v40 = 4095;
    }
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = 0;
    uint64_t v42 = (a7 - 1) - 1;
    int v43 = 4;
    do
    {
      int v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      int v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      int v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      BOOL v24 = __OFSUB__(v45, v46);
      int v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = v48 | (v47 >> 31);
      BOOL v24 = __OFSUB__(v45, v44);
      int v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0)) {
        int v51 = 0;
      }
      else {
        int v51 = 1;
      }
      int v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 4095) {
        int v52 = 4095;
      }
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  uint64_t v102 = (a7 - 1);
  int v53 = &__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v57 = (int *)__dst;
  }
  else
  {
    size_t v54 = &v109;
    char v55 = (int *)__dst;
    uint64_t v56 = 1;
    do
    {
      uint64_t v57 = v54;
      uint64_t result = (uint64_t)memcpy(v54, v53, __n);
      int v58 = (a4 & 1) == 0;
      uint64_t v59 = (a4 & 1) == 0;
      do
      {
        size_t v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59) {
          size_t v60 = (char *)&a5[2 * (int)v56 + 2];
        }
        int v61 = *(unsigned __int16 *)v60;
        int v62 = *(unsigned __int16 *)&v53[1 * v58];
        int v63 = LOWORD(v55[v58 + 1]);
        BOOL v24 = __OFSUB__(v62, v63);
        int v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0)) {
          int v65 = 0;
        }
        else {
          int v65 = 1;
        }
        int v66 = v65 | (v64 >> 31);
        BOOL v24 = __OFSUB__(v62, v61);
        int v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0)) {
          int v68 = 0;
        }
        else {
          int v68 = 1;
        }
        int v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 4095) {
          int v69 = 4095;
        }
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      size_t v54 = v55;
      char v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    int v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    int v71 = *(unsigned __int16 *)v53;
    int v72 = *((unsigned __int16 *)v57 + 2);
    BOOL v24 = __OFSUB__(v71, v72);
    int v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0)) {
      int v74 = 0;
    }
    else {
      int v74 = 1;
    }
    int v75 = v74 | (v73 >> 31);
    BOOL v24 = __OFSUB__(v71, v70);
    int v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0)) {
      int v77 = 0;
    }
    else {
      int v77 = 1;
    }
    int v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 4095) {
      int v78 = 4095;
    }
    *(_WORD *)int v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    int v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    int v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    int v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    BOOL v24 = __OFSUB__(v80, v81);
    int v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0)) {
      int v83 = 0;
    }
    else {
      int v83 = 1;
    }
    int v84 = v83 | (v82 >> 31);
    BOOL v24 = __OFSUB__(v80, v79);
    int v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0)) {
      int v86 = 0;
    }
    else {
      int v86 = 1;
    }
    int v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 4095) {
      int v87 = 4095;
    }
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v88 = 0;
    uint64_t v89 = v102 - 1;
    int v90 = 2;
    do
    {
      int v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      int v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      int v93 = LOWORD(v57[v90]);
      BOOL v24 = __OFSUB__(v92, v93);
      int v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0)) {
        int v95 = 0;
      }
      else {
        int v95 = 1;
      }
      int v96 = v95 | (v94 >> 31);
      BOOL v24 = __OFSUB__(v92, v91);
      int v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 4095) {
        int v99 = 4095;
      }
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    int v100 = (__int16 *)v110;
    do
    {
      __int16 v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D28448(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v107;
  uint64_t v16 = a8;
  uint64_t v104 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[4 * a7 - 4];
    uint64_t v18 = v109;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  uint64_t v105 = 2 * a2;
  uint64_t v98 = 2 * a7;
  int v20 = a4 & 6;
  uint64_t __n = 4 * a7;
  memcpy(v107, __src, __n);
  uint64_t result = a4;
  __int16 v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 2);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 4095) {
      int v31 = 4095;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    int v33 = a6[(v98 - 4)];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 4095) {
      int v40 = 4095;
    }
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    uint64_t v43 = 0x400000000;
    do
    {
      int v44 = (unsigned __int16)*v42;
      int v45 = *a6;
      a6 += 2;
      int v46 = (v44 > v45) | ((v44 - v45) >> 31);
      int v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      BOOL v24 = __OFSUB__(v44, v47);
      int v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0)) {
        int v49 = 0;
      }
      else {
        int v49 = 1;
      }
      int v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 4095) {
        int v50 = 4095;
      }
      _WORD *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  int v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    char v55 = (unsigned __int16 *)v107;
  }
  else
  {
    int v52 = (unsigned __int16 *)&v108;
    uint64_t v53 = (a4 & 1) == 0;
    uint64_t v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    uint64_t v100 = 4 * v53;
    uint64_t v101 = (v53 << 33) + 0x200000000;
    uint64_t v54 = 1;
    do
    {
      char v55 = v52;
      uint64_t result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      uint64_t v56 = v100;
      uint64_t v57 = v101;
      uint64_t v58 = v102;
      do
      {
        int v59 = *(unsigned __int16 *)&v51[v56];
        int v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        BOOL v24 = __OFSUB__(v59, v60);
        int v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0)) {
          int v62 = 0;
        }
        else {
          int v62 = 1;
        }
        int v63 = v62 | (v61 >> 31);
        int v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        BOOL v24 = __OFSUB__(v59, v64);
        int v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0)) {
          int v66 = 0;
        }
        else {
          int v66 = 1;
        }
        int v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 4095) {
          int v67 = 4095;
        }
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      int v52 = v15;
      unsigned int v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    int v68 = *(unsigned __int16 *)v51;
    int v69 = *(v55 - 2);
    BOOL v24 = __OFSUB__(v68, v69);
    int v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0)) {
      int v71 = 0;
    }
    else {
      int v71 = 1;
    }
    int v72 = v71 | (v70 >> 31);
    int v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v68, v73);
    int v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0)) {
      int v75 = 0;
    }
    else {
      int v75 = 1;
    }
    int v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 4095) {
      int v76 = 4095;
    }
    *(_WORD *)int v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    int v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    int v78 = v55[(v98 - 4)];
    BOOL v24 = __OFSUB__(v77, v78);
    int v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0)) {
      int v80 = 0;
    }
    else {
      int v80 = 1;
    }
    int v81 = v80 | (v79 >> 31);
    int v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v77, v82);
    int v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0)) {
      int v84 = 0;
    }
    else {
      int v84 = 1;
    }
    int v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 4095) {
      int v85 = 4095;
    }
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v86 = a7 - 1 - 1;
    int v87 = v51 + 4;
    uint64_t v88 = 0x400000000;
    do
    {
      int v89 = (unsigned __int16)*v87;
      int v90 = *v55;
      v55 += 2;
      int v91 = (v89 > v90) | ((v89 - v90) >> 31);
      int v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      BOOL v24 = __OFSUB__(v89, v92);
      int v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0)) {
        int v94 = 0;
      }
      else {
        int v94 = 1;
      }
      int v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 4095) {
        int v95 = 4095;
      }
      *int v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    int v96 = (__int16 *)v109;
    do
    {
      __int16 v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D288B8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D27FE8(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1D0D27FE8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

uint64_t sub_1D0D28944(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D28448(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1D0D28448(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1D0D289D0(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D27FE8(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1D0D27FE8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1D0D28A5C(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D28448(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1D0D28448(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1D0D28AE8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D27FE8(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1D0D27FE8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1D0D28B74(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D28448(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1D0D28448(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

_WORD *sub_1D0D28C00(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D27F6C(a1, a2, a3, a5, 4u, a7);
  return sub_1D0D27F6C(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1D0D28C78(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D27FE8(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1D0D27FE8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

uint64_t sub_1D0D28D04(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D28448(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1D0D28448(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

void *sub_1D0D28D90(void *result)
{
  result[9] = sub_1D0C81C4C;
  result[10] = sub_1D0C81B78;
  result[11] = sub_1D0C81A10;
  result[12] = sub_1D0C818BC;
  result[13] = sub_1D0C81870;
  result[14] = sub_1D0C8177C;
  result[15] = sub_1D0C81680;
  result[16] = sub_1D0C814D4;
  result[17] = sub_1D0C8133C;
  result[18] = sub_1D0C812DC;
  result[19] = sub_1D0C81170;
  result[20] = sub_1D0C80FF4;
  result[21] = sub_1D0C80DB8;
  result[22] = sub_1D0C80B98;
  result[23] = sub_1D0C80B0C;
  result[24] = sub_1D0C80894;
  result[25] = sub_1D0C805E4;
  result[26] = sub_1D0C80268;
  result[27] = sub_1D0C7FEFC;
  result[28] = sub_1D0C7FE14;
  result[54] = sub_1D0C7FD8C;
  return result;
}

void *sub_1D0D28EE4(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11 = a4;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = ((a4 >> 1) & 1) + a7;
  uint64_t v16 = 2 * a2;
  uint64_t v106 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = ~a4 & 5;
  uint64_t __n = 2 * (((a4 >> 1) & 1) + a7);
  uint64_t result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v22 = a5[1];
    int v23 = *(unsigned __int16 *)__src;
    int v24 = *(unsigned __int16 *)(a6 + 2);
    BOOL v25 = __OFSUB__(v23, v24);
    int v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0)) {
      int v27 = 0;
    }
    else {
      int v27 = 1;
    }
    int v28 = v27 | (v26 >> 31);
    BOOL v25 = __OFSUB__(v23, v22);
    int v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 4095) {
      int v31 = 4095;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    BOOL v25 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v25 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 4095) {
      int v40 = 4095;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = (unsigned __int16 *)(a6 + 4);
    uint64_t v43 = __src;
    do
    {
      int v44 = (unsigned __int16)v43[a2];
      int v46 = (unsigned __int16)v43[1];
      ++v43;
      int v45 = v46;
      int v47 = *v42++;
      int v48 = (v45 > v47) | ((v45 - v47) >> 31);
      BOOL v25 = __OFSUB__(v45, v44);
      int v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0)) {
        int v50 = 0;
      }
      else {
        int v50 = 1;
      }
      int v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 4095) {
        int v51 = 4095;
      }
      *uint64_t v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  uint64_t v100 = a7 - 1;
  unsigned int v101 = a7;
  char v102 = v11;
  int v52 = (unsigned __int16 *)&__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    uint64_t v53 = (unsigned __int16 *)&v109;
    uint64_t v54 = v15 - 1;
    BOOL v104 = (v11 & 1) == 0;
    char v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    uint64_t v56 = (unsigned __int16 *)__dst;
    uint64_t v57 = 1;
    do
    {
      uint64_t v58 = v56;
      uint64_t v56 = v53;
      int v59 = v58 + 1;
      uint64_t v53 = v58;
      uint64_t result = memcpy(v56, v52, __n);
      ++v57;
      int v60 = (unsigned __int16 *)v55;
      uint64_t v61 = v104;
      do
      {
        if (v61) {
          int v62 = v60;
        }
        else {
          int v62 = &a5[v57];
        }
        int v63 = *v62;
        int v64 = v52[v61];
        int v65 = v59[v61];
        BOOL v25 = __OFSUB__(v64, v65);
        int v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0)) {
          int v67 = 0;
        }
        else {
          int v67 = 1;
        }
        int v68 = v67 | (v66 >> 31);
        BOOL v25 = __OFSUB__(v64, v63);
        int v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0)) {
          int v70 = 0;
        }
        else {
          int v70 = 1;
        }
        int v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 4095) {
          int v71 = 4095;
        }
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      int v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    int v72 = v52[a2 - 1];
    int v73 = *v52;
    int v74 = v56[1];
    BOOL v25 = __OFSUB__(v73, v74);
    int v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0)) {
      int v76 = 0;
    }
    else {
      int v76 = 1;
    }
    int v77 = v76 | (v75 >> 31);
    BOOL v25 = __OFSUB__(v73, v72);
    int v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0)) {
      int v79 = 0;
    }
    else {
      int v79 = 1;
    }
    int v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 4095) {
      int v80 = 4095;
    }
    *int v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    int v81 = v52[v101 - 2 + a2];
    int v82 = v52[v100];
    int v83 = v56[v101];
    BOOL v25 = __OFSUB__(v82, v83);
    int v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0)) {
      int v85 = 0;
    }
    else {
      int v85 = 1;
    }
    int v86 = v85 | (v84 >> 31);
    BOOL v25 = __OFSUB__(v82, v81);
    int v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0)) {
      int v88 = 0;
    }
    else {
      int v88 = 1;
    }
    int v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 4095) {
      int v89 = 4095;
    }
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    uint64_t v90 = v100 - 1;
    int v91 = v56 + 2;
    do
    {
      int v92 = v52[a2];
      int v94 = v52[1];
      ++v52;
      int v93 = v94;
      int v95 = *v91++;
      int v96 = (v93 > v95) | ((v93 - v95) >> 31);
      BOOL v25 = __OFSUB__(v93, v92);
      int v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 4095) {
        int v99 = 4095;
      }
      *int v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1) {
    return memcpy(a5, __srca, 2 * v103);
  }
  return result;
}

void *sub_1D0D29308(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v104;
  uint64_t v16 = 2 * a2;
  uint64_t v101 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = a4 & 6;
  uint64_t v95 = a7;
  uint64_t __n = 2 * a7;
  uint64_t result = memcpy(v104, __src, __n);
  __int16 v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 1);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 4095) {
      int v31 = 4095;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v33 = a6[a7 - 2];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 4095) {
      int v40 = 4095;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    do
    {
      int v43 = *((unsigned __int16 *)v42 - 1);
      int v44 = *a6++;
      int v45 = (v43 > v44) | ((v43 - v44) >> 31);
      int v46 = *(unsigned __int16 *)&v42[2 * a2];
      BOOL v24 = __OFSUB__(v43, v46);
      int v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 4095) {
        int v49 = 4095;
      }
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  uint64_t v94 = a7 - 1;
  int v93 = a4 & 9;
  int v50 = &__src[2 * a2];
  uint64_t v98 = a2;
  char v97 = a4;
  unsigned int v96 = a7;
  if (a8 >= 3)
  {
    int v51 = __src;
    int v52 = (unsigned __int16 *)&v105;
    uint64_t v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    BOOL v99 = (a4 & 1) == 0;
    uint64_t v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    uint64_t v55 = 1;
    do
    {
      uint64_t v56 = v15;
      unsigned int v15 = v52;
      uint64_t v57 = (char *)(v56 - 1);
      int v52 = v56;
      uint64_t result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      uint64_t v58 = (unsigned __int16 *)v54;
      uint64_t v59 = v99;
      do
      {
        int v60 = *(unsigned __int16 *)&v50[2 * v59];
        int v61 = *(unsigned __int16 *)&v57[2 * v59];
        BOOL v24 = __OFSUB__(v60, v61);
        int v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0)) {
          int v63 = 0;
        }
        else {
          int v63 = 1;
        }
        int v64 = *v58++;
        int v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 4095) {
          int v65 = 4095;
        }
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    int v66 = *(unsigned __int16 *)v50;
    int v67 = *(v15 - 1);
    BOOL v24 = __OFSUB__(v66, v67);
    int v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0)) {
      int v69 = 0;
    }
    else {
      int v69 = 1;
    }
    int v70 = v69 | (v68 >> 31);
    int v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    BOOL v24 = __OFSUB__(v66, v71);
    int v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0)) {
      int v73 = 0;
    }
    else {
      int v73 = 1;
    }
    int v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 4095) {
      int v74 = 4095;
    }
    *(_WORD *)int v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    int v75 = *(unsigned __int16 *)&v50[2 * v94];
    int v76 = v15[v96 - 2];
    BOOL v24 = __OFSUB__(v75, v76);
    int v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0)) {
      int v78 = 0;
    }
    else {
      int v78 = 1;
    }
    int v79 = v78 | (v77 >> 31);
    int v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    BOOL v24 = __OFSUB__(v75, v80);
    int v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0)) {
      int v82 = 0;
    }
    else {
      int v82 = 1;
    }
    int v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 4095) {
      int v83 = 4095;
    }
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    uint64_t v84 = v94 - 1;
    int v85 = v50 + 4;
    do
    {
      int v86 = (unsigned __int16)*(v85 - 1);
      int v87 = *v15++;
      int v88 = (v86 > v87) | ((v86 - v87) >> 31);
      int v89 = (unsigned __int16)v85[v98];
      BOOL v24 = __OFSUB__(v86, v89);
      int v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0)) {
        int v91 = 0;
      }
      else {
        int v91 = 1;
      }
      int v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 4095) {
        int v92 = 4095;
      }
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1) {
    return memcpy(a5, __srca, 2 * a8);
  }
  return result;
}

void *sub_1D0D29758(void *result)
{
  result[33] = sub_1D0D2A590;
  result[29] = sub_1D0C8AF4C;
  result[30] = sub_1D0C8AE60;
  result[31] = sub_1D0C8ACE8;
  result[32] = sub_1D0C8AB84;
  result[34] = sub_1D0C8AA84;
  result[35] = sub_1D0C8A974;
  result[36] = sub_1D0C8A7BC;
  result[37] = sub_1D0C8A618;
  result[39] = sub_1D0C8A4A0;
  result[40] = sub_1D0C8A310;
  result[41] = sub_1D0C8A0C8;
  result[42] = sub_1D0C89E9C;
  result[44] = sub_1D0C89A4C;
  result[45] = sub_1D0C896D8;
  result[46] = sub_1D0C89294;
  result[47] = sub_1D0C88E60;
  result[38] = sub_1D0C89DE0;
  result[43] = sub_1D0C89CD0;
  result[48] = sub_1D0C88BB0;
  result[49] = sub_1D0C8999C;
  result[50] = sub_1D0C89618;
  result[51] = sub_1D0C891D4;
  result[52] = sub_1D0C88DA0;
  result[53] = sub_1D0C88B48;
  result[55] = sub_1D0C7DE1C;
  return result;
}

_WORD *sub_1D0D298FC(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = a6;
    unint64_t v7 = &result[2 * a5 - 2];
    uint64_t v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      unint64_t v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      uint64_t v9 = result;
      uint64_t v10 = a5;
      do
      {
        int v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 6)) + (unsigned __int16)*v9;
        if (v11 >= 2047) {
          int v11 = 2047;
        }
        *uint64_t v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      uint64_t result = (_WORD *)((char *)result + v8);
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1D0D29978(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = 2 * a7;
  uint64_t v16 = a8;
  uint64_t v107 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[2 * v15 - 4];
    uint64_t v18 = v110;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  int v20 = ~a4 & 5;
  unsigned int v105 = ((a4 >> 1) & 1) + a7;
  uint64_t __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v21 = (unsigned __int16)a5[2];
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(unsigned __int16 *)(a6 + 4);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    BOOL v24 = __OFSUB__(v22, v21);
    int v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0)) {
      int v29 = 0;
    }
    else {
      int v29 = 1;
    }
    int v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 2047) {
      int v30 = 2047;
    }
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  uint64_t result = a4;
  if ((a4 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    int v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    BOOL v24 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v24 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 2047) {
      int v40 = 2047;
    }
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = 0;
    uint64_t v42 = (a7 - 1) - 1;
    int v43 = 4;
    do
    {
      int v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      int v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      int v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      BOOL v24 = __OFSUB__(v45, v46);
      int v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = v48 | (v47 >> 31);
      BOOL v24 = __OFSUB__(v45, v44);
      int v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0)) {
        int v51 = 0;
      }
      else {
        int v51 = 1;
      }
      int v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 2047) {
        int v52 = 2047;
      }
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  uint64_t v102 = (a7 - 1);
  uint64_t v53 = &__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v57 = (int *)__dst;
  }
  else
  {
    uint64_t v54 = &v109;
    uint64_t v55 = (int *)__dst;
    uint64_t v56 = 1;
    do
    {
      uint64_t v57 = v54;
      uint64_t result = (uint64_t)memcpy(v54, v53, __n);
      int v58 = (a4 & 1) == 0;
      uint64_t v59 = (a4 & 1) == 0;
      do
      {
        int v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59) {
          int v60 = (char *)&a5[2 * (int)v56 + 2];
        }
        int v61 = *(unsigned __int16 *)v60;
        int v62 = *(unsigned __int16 *)&v53[1 * v58];
        int v63 = LOWORD(v55[v58 + 1]);
        BOOL v24 = __OFSUB__(v62, v63);
        int v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0)) {
          int v65 = 0;
        }
        else {
          int v65 = 1;
        }
        int v66 = v65 | (v64 >> 31);
        BOOL v24 = __OFSUB__(v62, v61);
        int v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0)) {
          int v68 = 0;
        }
        else {
          int v68 = 1;
        }
        int v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 2047) {
          int v69 = 2047;
        }
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      uint64_t v54 = v55;
      uint64_t v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    int v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    int v71 = *(unsigned __int16 *)v53;
    int v72 = *((unsigned __int16 *)v57 + 2);
    BOOL v24 = __OFSUB__(v71, v72);
    int v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0)) {
      int v74 = 0;
    }
    else {
      int v74 = 1;
    }
    int v75 = v74 | (v73 >> 31);
    BOOL v24 = __OFSUB__(v71, v70);
    int v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0)) {
      int v77 = 0;
    }
    else {
      int v77 = 1;
    }
    int v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 2047) {
      int v78 = 2047;
    }
    *(_WORD *)uint64_t v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    int v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    int v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    int v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    BOOL v24 = __OFSUB__(v80, v81);
    int v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0)) {
      int v83 = 0;
    }
    else {
      int v83 = 1;
    }
    int v84 = v83 | (v82 >> 31);
    BOOL v24 = __OFSUB__(v80, v79);
    int v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0)) {
      int v86 = 0;
    }
    else {
      int v86 = 1;
    }
    int v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 2047) {
      int v87 = 2047;
    }
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v88 = 0;
    uint64_t v89 = v102 - 1;
    int v90 = 2;
    do
    {
      int v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      int v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      int v93 = LOWORD(v57[v90]);
      BOOL v24 = __OFSUB__(v92, v93);
      int v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0)) {
        int v95 = 0;
      }
      else {
        int v95 = 1;
      }
      int v96 = v95 | (v94 >> 31);
      BOOL v24 = __OFSUB__(v92, v91);
      int v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 2047) {
        int v99 = 2047;
      }
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    uint64_t v100 = (__int16 *)v110;
    do
    {
      __int16 v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D29DD8(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v107;
  uint64_t v16 = a8;
  uint64_t v104 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[4 * a7 - 4];
    uint64_t v18 = v109;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  uint64_t v105 = 2 * a2;
  uint64_t v98 = 2 * a7;
  int v20 = a4 & 6;
  uint64_t __n = 4 * a7;
  memcpy(v107, __src, __n);
  uint64_t result = a4;
  __int16 v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 2);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 2047) {
      int v31 = 2047;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    int v33 = a6[(v98 - 4)];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 2047) {
      int v40 = 2047;
    }
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    uint64_t v43 = 0x400000000;
    do
    {
      int v44 = (unsigned __int16)*v42;
      int v45 = *a6;
      a6 += 2;
      int v46 = (v44 > v45) | ((v44 - v45) >> 31);
      int v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      BOOL v24 = __OFSUB__(v44, v47);
      int v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0)) {
        int v49 = 0;
      }
      else {
        int v49 = 1;
      }
      int v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 2047) {
        int v50 = 2047;
      }
      _WORD *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  int v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    uint64_t v55 = (unsigned __int16 *)v107;
  }
  else
  {
    int v52 = (unsigned __int16 *)&v108;
    uint64_t v53 = (a4 & 1) == 0;
    uint64_t v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    uint64_t v100 = 4 * v53;
    uint64_t v101 = (v53 << 33) + 0x200000000;
    uint64_t v54 = 1;
    do
    {
      uint64_t v55 = v52;
      uint64_t result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      uint64_t v56 = v100;
      uint64_t v57 = v101;
      uint64_t v58 = v102;
      do
      {
        int v59 = *(unsigned __int16 *)&v51[v56];
        int v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        BOOL v24 = __OFSUB__(v59, v60);
        int v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0)) {
          int v62 = 0;
        }
        else {
          int v62 = 1;
        }
        int v63 = v62 | (v61 >> 31);
        int v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        BOOL v24 = __OFSUB__(v59, v64);
        int v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0)) {
          int v66 = 0;
        }
        else {
          int v66 = 1;
        }
        int v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 2047) {
          int v67 = 2047;
        }
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      int v52 = v15;
      unsigned int v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    int v68 = *(unsigned __int16 *)v51;
    int v69 = *(v55 - 2);
    BOOL v24 = __OFSUB__(v68, v69);
    int v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0)) {
      int v71 = 0;
    }
    else {
      int v71 = 1;
    }
    int v72 = v71 | (v70 >> 31);
    int v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v68, v73);
    int v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0)) {
      int v75 = 0;
    }
    else {
      int v75 = 1;
    }
    int v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 2047) {
      int v76 = 2047;
    }
    *(_WORD *)int v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    int v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    int v78 = v55[(v98 - 4)];
    BOOL v24 = __OFSUB__(v77, v78);
    int v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0)) {
      int v80 = 0;
    }
    else {
      int v80 = 1;
    }
    int v81 = v80 | (v79 >> 31);
    int v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v77, v82);
    int v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0)) {
      int v84 = 0;
    }
    else {
      int v84 = 1;
    }
    int v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 2047) {
      int v85 = 2047;
    }
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v86 = a7 - 1 - 1;
    int v87 = v51 + 4;
    uint64_t v88 = 0x400000000;
    do
    {
      int v89 = (unsigned __int16)*v87;
      int v90 = *v55;
      v55 += 2;
      int v91 = (v89 > v90) | ((v89 - v90) >> 31);
      int v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      BOOL v24 = __OFSUB__(v89, v92);
      int v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0)) {
        int v94 = 0;
      }
      else {
        int v94 = 1;
      }
      int v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 2047) {
        int v95 = 2047;
      }
      *int v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    int v96 = (__int16 *)v109;
    do
    {
      __int16 v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D2A248(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D29978(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1D0D29978(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

uint64_t sub_1D0D2A2D4(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D29DD8(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1D0D29DD8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1D0D2A360(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D29978(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1D0D29978(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1D0D2A3EC(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D29DD8(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1D0D29DD8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1D0D2A478(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D29978(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1D0D29978(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1D0D2A504(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D29DD8(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1D0D29DD8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

_WORD *sub_1D0D2A590(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D298FC(a1, a2, a3, a5, 4u, a7);
  return sub_1D0D298FC(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1D0D2A608(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D29978(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1D0D29978(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

uint64_t sub_1D0D2A694(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D29DD8(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1D0D29DD8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

void *sub_1D0D2A720(void *result)
{
  result[9] = sub_1D0C7FCDC;
  result[10] = sub_1D0C7FC08;
  result[11] = sub_1D0C7FAA0;
  result[12] = sub_1D0C7F94C;
  result[13] = sub_1D0C7F900;
  result[14] = sub_1D0C7F80C;
  result[15] = sub_1D0C7F710;
  result[16] = sub_1D0C7F564;
  result[17] = sub_1D0C7F3CC;
  result[18] = sub_1D0C7F36C;
  result[19] = sub_1D0C7F200;
  result[20] = sub_1D0C7F084;
  result[21] = sub_1D0C7EE48;
  result[22] = sub_1D0C7EC28;
  result[23] = sub_1D0C7EB9C;
  result[24] = sub_1D0C7E924;
  result[25] = sub_1D0C7E674;
  result[26] = sub_1D0C7E2F8;
  result[27] = sub_1D0C7DF8C;
  result[28] = sub_1D0C7DEA4;
  result[54] = sub_1D0C7DE1C;
  return result;
}

void *sub_1D0D2A874(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11 = a4;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = ((a4 >> 1) & 1) + a7;
  uint64_t v16 = 2 * a2;
  uint64_t v106 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = ~a4 & 5;
  uint64_t __n = 2 * (((a4 >> 1) & 1) + a7);
  uint64_t result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v22 = a5[1];
    int v23 = *(unsigned __int16 *)__src;
    int v24 = *(unsigned __int16 *)(a6 + 2);
    BOOL v25 = __OFSUB__(v23, v24);
    int v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0)) {
      int v27 = 0;
    }
    else {
      int v27 = 1;
    }
    int v28 = v27 | (v26 >> 31);
    BOOL v25 = __OFSUB__(v23, v22);
    int v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 2047) {
      int v31 = 2047;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    BOOL v25 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v25 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 2047) {
      int v40 = 2047;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = (unsigned __int16 *)(a6 + 4);
    uint64_t v43 = __src;
    do
    {
      int v44 = (unsigned __int16)v43[a2];
      int v46 = (unsigned __int16)v43[1];
      ++v43;
      int v45 = v46;
      int v47 = *v42++;
      int v48 = (v45 > v47) | ((v45 - v47) >> 31);
      BOOL v25 = __OFSUB__(v45, v44);
      int v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0)) {
        int v50 = 0;
      }
      else {
        int v50 = 1;
      }
      int v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 2047) {
        int v51 = 2047;
      }
      *uint64_t v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  uint64_t v100 = a7 - 1;
  unsigned int v101 = a7;
  char v102 = v11;
  int v52 = (unsigned __int16 *)&__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    uint64_t v53 = (unsigned __int16 *)&v109;
    uint64_t v54 = v15 - 1;
    BOOL v104 = (v11 & 1) == 0;
    uint64_t v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    uint64_t v56 = (unsigned __int16 *)__dst;
    uint64_t v57 = 1;
    do
    {
      uint64_t v58 = v56;
      uint64_t v56 = v53;
      int v59 = v58 + 1;
      uint64_t v53 = v58;
      uint64_t result = memcpy(v56, v52, __n);
      ++v57;
      int v60 = (unsigned __int16 *)v55;
      uint64_t v61 = v104;
      do
      {
        if (v61) {
          int v62 = v60;
        }
        else {
          int v62 = &a5[v57];
        }
        int v63 = *v62;
        int v64 = v52[v61];
        int v65 = v59[v61];
        BOOL v25 = __OFSUB__(v64, v65);
        int v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0)) {
          int v67 = 0;
        }
        else {
          int v67 = 1;
        }
        int v68 = v67 | (v66 >> 31);
        BOOL v25 = __OFSUB__(v64, v63);
        int v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0)) {
          int v70 = 0;
        }
        else {
          int v70 = 1;
        }
        int v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 2047) {
          int v71 = 2047;
        }
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      int v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    int v72 = v52[a2 - 1];
    int v73 = *v52;
    int v74 = v56[1];
    BOOL v25 = __OFSUB__(v73, v74);
    int v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0)) {
      int v76 = 0;
    }
    else {
      int v76 = 1;
    }
    int v77 = v76 | (v75 >> 31);
    BOOL v25 = __OFSUB__(v73, v72);
    int v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0)) {
      int v79 = 0;
    }
    else {
      int v79 = 1;
    }
    int v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 2047) {
      int v80 = 2047;
    }
    *int v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    int v81 = v52[v101 - 2 + a2];
    int v82 = v52[v100];
    int v83 = v56[v101];
    BOOL v25 = __OFSUB__(v82, v83);
    int v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0)) {
      int v85 = 0;
    }
    else {
      int v85 = 1;
    }
    int v86 = v85 | (v84 >> 31);
    BOOL v25 = __OFSUB__(v82, v81);
    int v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0)) {
      int v88 = 0;
    }
    else {
      int v88 = 1;
    }
    int v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 2047) {
      int v89 = 2047;
    }
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    uint64_t v90 = v100 - 1;
    int v91 = v56 + 2;
    do
    {
      int v92 = v52[a2];
      int v94 = v52[1];
      ++v52;
      int v93 = v94;
      int v95 = *v91++;
      int v96 = (v93 > v95) | ((v93 - v95) >> 31);
      BOOL v25 = __OFSUB__(v93, v92);
      int v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 2047) {
        int v99 = 2047;
      }
      *int v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1) {
    return memcpy(a5, __srca, 2 * v103);
  }
  return result;
}

void *sub_1D0D2AC98(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v104;
  uint64_t v16 = 2 * a2;
  uint64_t v101 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = a4 & 6;
  uint64_t v95 = a7;
  uint64_t __n = 2 * a7;
  uint64_t result = memcpy(v104, __src, __n);
  __int16 v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 1);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 2047) {
      int v31 = 2047;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v33 = a6[a7 - 2];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 2047) {
      int v40 = 2047;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    do
    {
      int v43 = *((unsigned __int16 *)v42 - 1);
      int v44 = *a6++;
      int v45 = (v43 > v44) | ((v43 - v44) >> 31);
      int v46 = *(unsigned __int16 *)&v42[2 * a2];
      BOOL v24 = __OFSUB__(v43, v46);
      int v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 2047) {
        int v49 = 2047;
      }
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  uint64_t v94 = a7 - 1;
  int v93 = a4 & 9;
  int v50 = &__src[2 * a2];
  uint64_t v98 = a2;
  char v97 = a4;
  unsigned int v96 = a7;
  if (a8 >= 3)
  {
    int v51 = __src;
    int v52 = (unsigned __int16 *)&v105;
    uint64_t v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    BOOL v99 = (a4 & 1) == 0;
    uint64_t v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    uint64_t v55 = 1;
    do
    {
      uint64_t v56 = v15;
      unsigned int v15 = v52;
      uint64_t v57 = (char *)(v56 - 1);
      int v52 = v56;
      uint64_t result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      uint64_t v58 = (unsigned __int16 *)v54;
      uint64_t v59 = v99;
      do
      {
        int v60 = *(unsigned __int16 *)&v50[2 * v59];
        int v61 = *(unsigned __int16 *)&v57[2 * v59];
        BOOL v24 = __OFSUB__(v60, v61);
        int v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0)) {
          int v63 = 0;
        }
        else {
          int v63 = 1;
        }
        int v64 = *v58++;
        int v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 2047) {
          int v65 = 2047;
        }
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    int v66 = *(unsigned __int16 *)v50;
    int v67 = *(v15 - 1);
    BOOL v24 = __OFSUB__(v66, v67);
    int v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0)) {
      int v69 = 0;
    }
    else {
      int v69 = 1;
    }
    int v70 = v69 | (v68 >> 31);
    int v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    BOOL v24 = __OFSUB__(v66, v71);
    int v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0)) {
      int v73 = 0;
    }
    else {
      int v73 = 1;
    }
    int v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 2047) {
      int v74 = 2047;
    }
    *(_WORD *)int v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    int v75 = *(unsigned __int16 *)&v50[2 * v94];
    int v76 = v15[v96 - 2];
    BOOL v24 = __OFSUB__(v75, v76);
    int v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0)) {
      int v78 = 0;
    }
    else {
      int v78 = 1;
    }
    int v79 = v78 | (v77 >> 31);
    int v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    BOOL v24 = __OFSUB__(v75, v80);
    int v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0)) {
      int v82 = 0;
    }
    else {
      int v82 = 1;
    }
    int v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 2047) {
      int v83 = 2047;
    }
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    uint64_t v84 = v94 - 1;
    int v85 = v50 + 4;
    do
    {
      int v86 = (unsigned __int16)*(v85 - 1);
      int v87 = *v15++;
      int v88 = (v86 > v87) | ((v86 - v87) >> 31);
      int v89 = (unsigned __int16)v85[v98];
      BOOL v24 = __OFSUB__(v86, v89);
      int v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0)) {
        int v91 = 0;
      }
      else {
        int v91 = 1;
      }
      int v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 2047) {
        int v92 = 2047;
      }
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1) {
    return memcpy(a5, __srca, 2 * a8);
  }
  return result;
}

void *sub_1D0D2B0E8(void *result)
{
  result[33] = sub_1D0D2BF20;
  result[29] = sub_1D0C88A88;
  result[30] = sub_1D0C8899C;
  result[31] = sub_1D0C88824;
  result[32] = sub_1D0C886C0;
  result[34] = sub_1D0C885C0;
  result[35] = sub_1D0C884B0;
  result[36] = sub_1D0C882F8;
  result[37] = sub_1D0C88154;
  result[39] = sub_1D0C87FDC;
  result[40] = sub_1D0C87E4C;
  result[41] = sub_1D0C87C04;
  result[42] = sub_1D0C879D8;
  result[44] = sub_1D0C87588;
  result[45] = sub_1D0C87214;
  result[46] = sub_1D0C86DD0;
  result[47] = sub_1D0C8699C;
  result[38] = sub_1D0C8791C;
  result[43] = sub_1D0C8780C;
  result[48] = sub_1D0C866EC;
  result[49] = sub_1D0C874D8;
  result[50] = sub_1D0C87154;
  result[51] = sub_1D0C86D10;
  result[52] = sub_1D0C868DC;
  result[53] = sub_1D0C86684;
  result[55] = sub_1D0C7BEAC;
  return result;
}

_WORD *sub_1D0D2B28C(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = a6;
    unint64_t v7 = &result[2 * a5 - 2];
    uint64_t v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      unint64_t v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      uint64_t v9 = result;
      uint64_t v10 = a5;
      do
      {
        int v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 5)) + (unsigned __int16)*v9;
        if (v11 >= 1023) {
          int v11 = 1023;
        }
        *uint64_t v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      uint64_t result = (_WORD *)((char *)result + v8);
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1D0D2B308(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = 2 * a7;
  uint64_t v16 = a8;
  uint64_t v107 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[2 * v15 - 4];
    uint64_t v18 = v110;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  int v20 = ~a4 & 5;
  unsigned int v105 = ((a4 >> 1) & 1) + a7;
  uint64_t __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v21 = (unsigned __int16)a5[2];
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(unsigned __int16 *)(a6 + 4);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    BOOL v24 = __OFSUB__(v22, v21);
    int v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0)) {
      int v29 = 0;
    }
    else {
      int v29 = 1;
    }
    int v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 1023) {
      int v30 = 1023;
    }
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  uint64_t result = a4;
  if ((a4 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    int v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    BOOL v24 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v24 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 1023) {
      int v40 = 1023;
    }
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = 0;
    uint64_t v42 = (a7 - 1) - 1;
    int v43 = 4;
    do
    {
      int v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      int v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      int v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      BOOL v24 = __OFSUB__(v45, v46);
      int v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = v48 | (v47 >> 31);
      BOOL v24 = __OFSUB__(v45, v44);
      int v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0)) {
        int v51 = 0;
      }
      else {
        int v51 = 1;
      }
      int v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 1023) {
        int v52 = 1023;
      }
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  uint64_t v102 = (a7 - 1);
  uint64_t v53 = &__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v57 = (int *)__dst;
  }
  else
  {
    uint64_t v54 = &v109;
    uint64_t v55 = (int *)__dst;
    uint64_t v56 = 1;
    do
    {
      uint64_t v57 = v54;
      uint64_t result = (uint64_t)memcpy(v54, v53, __n);
      int v58 = (a4 & 1) == 0;
      uint64_t v59 = (a4 & 1) == 0;
      do
      {
        int v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59) {
          int v60 = (char *)&a5[2 * (int)v56 + 2];
        }
        int v61 = *(unsigned __int16 *)v60;
        int v62 = *(unsigned __int16 *)&v53[1 * v58];
        int v63 = LOWORD(v55[v58 + 1]);
        BOOL v24 = __OFSUB__(v62, v63);
        int v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0)) {
          int v65 = 0;
        }
        else {
          int v65 = 1;
        }
        int v66 = v65 | (v64 >> 31);
        BOOL v24 = __OFSUB__(v62, v61);
        int v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0)) {
          int v68 = 0;
        }
        else {
          int v68 = 1;
        }
        int v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 1023) {
          int v69 = 1023;
        }
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      uint64_t v54 = v55;
      uint64_t v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    int v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    int v71 = *(unsigned __int16 *)v53;
    int v72 = *((unsigned __int16 *)v57 + 2);
    BOOL v24 = __OFSUB__(v71, v72);
    int v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0)) {
      int v74 = 0;
    }
    else {
      int v74 = 1;
    }
    int v75 = v74 | (v73 >> 31);
    BOOL v24 = __OFSUB__(v71, v70);
    int v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0)) {
      int v77 = 0;
    }
    else {
      int v77 = 1;
    }
    int v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 1023) {
      int v78 = 1023;
    }
    *(_WORD *)uint64_t v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    int v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    int v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    int v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    BOOL v24 = __OFSUB__(v80, v81);
    int v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0)) {
      int v83 = 0;
    }
    else {
      int v83 = 1;
    }
    int v84 = v83 | (v82 >> 31);
    BOOL v24 = __OFSUB__(v80, v79);
    int v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0)) {
      int v86 = 0;
    }
    else {
      int v86 = 1;
    }
    int v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 1023) {
      int v87 = 1023;
    }
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v88 = 0;
    uint64_t v89 = v102 - 1;
    int v90 = 2;
    do
    {
      int v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      int v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      int v93 = LOWORD(v57[v90]);
      BOOL v24 = __OFSUB__(v92, v93);
      int v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0)) {
        int v95 = 0;
      }
      else {
        int v95 = 1;
      }
      int v96 = v95 | (v94 >> 31);
      BOOL v24 = __OFSUB__(v92, v91);
      int v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 1023) {
        int v99 = 1023;
      }
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    uint64_t v100 = (__int16 *)v110;
    do
    {
      __int16 v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D2B768(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v107;
  uint64_t v16 = a8;
  uint64_t v104 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[4 * a7 - 4];
    uint64_t v18 = v109;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  uint64_t v105 = 2 * a2;
  uint64_t v98 = 2 * a7;
  int v20 = a4 & 6;
  uint64_t __n = 4 * a7;
  memcpy(v107, __src, __n);
  uint64_t result = a4;
  __int16 v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 2);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 1023) {
      int v31 = 1023;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    int v33 = a6[(v98 - 4)];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 1023) {
      int v40 = 1023;
    }
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    uint64_t v43 = 0x400000000;
    do
    {
      int v44 = (unsigned __int16)*v42;
      int v45 = *a6;
      a6 += 2;
      int v46 = (v44 > v45) | ((v44 - v45) >> 31);
      int v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      BOOL v24 = __OFSUB__(v44, v47);
      int v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0)) {
        int v49 = 0;
      }
      else {
        int v49 = 1;
      }
      int v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 1023) {
        int v50 = 1023;
      }
      _WORD *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  int v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    uint64_t v55 = (unsigned __int16 *)v107;
  }
  else
  {
    int v52 = (unsigned __int16 *)&v108;
    uint64_t v53 = (a4 & 1) == 0;
    uint64_t v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    uint64_t v100 = 4 * v53;
    uint64_t v101 = (v53 << 33) + 0x200000000;
    uint64_t v54 = 1;
    do
    {
      uint64_t v55 = v52;
      uint64_t result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      uint64_t v56 = v100;
      uint64_t v57 = v101;
      uint64_t v58 = v102;
      do
      {
        int v59 = *(unsigned __int16 *)&v51[v56];
        int v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        BOOL v24 = __OFSUB__(v59, v60);
        int v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0)) {
          int v62 = 0;
        }
        else {
          int v62 = 1;
        }
        int v63 = v62 | (v61 >> 31);
        int v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        BOOL v24 = __OFSUB__(v59, v64);
        int v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0)) {
          int v66 = 0;
        }
        else {
          int v66 = 1;
        }
        int v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 1023) {
          int v67 = 1023;
        }
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      int v52 = v15;
      unsigned int v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    int v68 = *(unsigned __int16 *)v51;
    int v69 = *(v55 - 2);
    BOOL v24 = __OFSUB__(v68, v69);
    int v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0)) {
      int v71 = 0;
    }
    else {
      int v71 = 1;
    }
    int v72 = v71 | (v70 >> 31);
    int v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v68, v73);
    int v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0)) {
      int v75 = 0;
    }
    else {
      int v75 = 1;
    }
    int v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 1023) {
      int v76 = 1023;
    }
    *(_WORD *)int v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    int v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    int v78 = v55[(v98 - 4)];
    BOOL v24 = __OFSUB__(v77, v78);
    int v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0)) {
      int v80 = 0;
    }
    else {
      int v80 = 1;
    }
    int v81 = v80 | (v79 >> 31);
    int v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v77, v82);
    int v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0)) {
      int v84 = 0;
    }
    else {
      int v84 = 1;
    }
    int v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 1023) {
      int v85 = 1023;
    }
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v86 = a7 - 1 - 1;
    int v87 = v51 + 4;
    uint64_t v88 = 0x400000000;
    do
    {
      int v89 = (unsigned __int16)*v87;
      int v90 = *v55;
      v55 += 2;
      int v91 = (v89 > v90) | ((v89 - v90) >> 31);
      int v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      BOOL v24 = __OFSUB__(v89, v92);
      int v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0)) {
        int v94 = 0;
      }
      else {
        int v94 = 1;
      }
      int v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 1023) {
        int v95 = 1023;
      }
      *int v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    int v96 = (__int16 *)v109;
    do
    {
      __int16 v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D2BBD8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2B308(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1D0D2B308(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

uint64_t sub_1D0D2BC64(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2B768(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1D0D2B768(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1D0D2BCF0(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2B308(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1D0D2B308(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1D0D2BD7C(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2B768(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1D0D2B768(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1D0D2BE08(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2B308(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1D0D2B308(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1D0D2BE94(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2B768(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1D0D2B768(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

_WORD *sub_1D0D2BF20(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2B28C(a1, a2, a3, a5, 4u, a7);
  return sub_1D0D2B28C(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1D0D2BF98(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2B308(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1D0D2B308(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

uint64_t sub_1D0D2C024(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2B768(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1D0D2B768(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

void *sub_1D0D2C0B0(void *result)
{
  result[9] = sub_1D0C7DD6C;
  result[10] = sub_1D0C7DC98;
  result[11] = sub_1D0C7DB30;
  result[12] = sub_1D0C7D9DC;
  result[13] = sub_1D0C7D990;
  result[14] = sub_1D0C7D89C;
  result[15] = sub_1D0C7D7A0;
  result[16] = sub_1D0C7D5F4;
  result[17] = sub_1D0C7D45C;
  result[18] = sub_1D0C7D3FC;
  result[19] = sub_1D0C7D290;
  result[20] = sub_1D0C7D114;
  result[21] = sub_1D0C7CED8;
  result[22] = sub_1D0C7CCB8;
  result[23] = sub_1D0C7CC2C;
  result[24] = sub_1D0C7C9B4;
  result[25] = sub_1D0C7C704;
  result[26] = sub_1D0C7C388;
  result[27] = sub_1D0C7C01C;
  result[28] = sub_1D0C7BF34;
  result[54] = sub_1D0C7BEAC;
  return result;
}

void *sub_1D0D2C204(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11 = a4;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = ((a4 >> 1) & 1) + a7;
  uint64_t v16 = 2 * a2;
  uint64_t v106 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = ~a4 & 5;
  uint64_t __n = 2 * (((a4 >> 1) & 1) + a7);
  uint64_t result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v22 = a5[1];
    int v23 = *(unsigned __int16 *)__src;
    int v24 = *(unsigned __int16 *)(a6 + 2);
    BOOL v25 = __OFSUB__(v23, v24);
    int v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0)) {
      int v27 = 0;
    }
    else {
      int v27 = 1;
    }
    int v28 = v27 | (v26 >> 31);
    BOOL v25 = __OFSUB__(v23, v22);
    int v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 1023) {
      int v31 = 1023;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    BOOL v25 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v25 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 1023) {
      int v40 = 1023;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = (unsigned __int16 *)(a6 + 4);
    uint64_t v43 = __src;
    do
    {
      int v44 = (unsigned __int16)v43[a2];
      int v46 = (unsigned __int16)v43[1];
      ++v43;
      int v45 = v46;
      int v47 = *v42++;
      int v48 = (v45 > v47) | ((v45 - v47) >> 31);
      BOOL v25 = __OFSUB__(v45, v44);
      int v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0)) {
        int v50 = 0;
      }
      else {
        int v50 = 1;
      }
      int v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 1023) {
        int v51 = 1023;
      }
      *uint64_t v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  uint64_t v100 = a7 - 1;
  unsigned int v101 = a7;
  char v102 = v11;
  int v52 = (unsigned __int16 *)&__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    uint64_t v53 = (unsigned __int16 *)&v109;
    uint64_t v54 = v15 - 1;
    BOOL v104 = (v11 & 1) == 0;
    uint64_t v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    uint64_t v56 = (unsigned __int16 *)__dst;
    uint64_t v57 = 1;
    do
    {
      uint64_t v58 = v56;
      uint64_t v56 = v53;
      int v59 = v58 + 1;
      uint64_t v53 = v58;
      uint64_t result = memcpy(v56, v52, __n);
      ++v57;
      int v60 = (unsigned __int16 *)v55;
      uint64_t v61 = v104;
      do
      {
        if (v61) {
          int v62 = v60;
        }
        else {
          int v62 = &a5[v57];
        }
        int v63 = *v62;
        int v64 = v52[v61];
        int v65 = v59[v61];
        BOOL v25 = __OFSUB__(v64, v65);
        int v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0)) {
          int v67 = 0;
        }
        else {
          int v67 = 1;
        }
        int v68 = v67 | (v66 >> 31);
        BOOL v25 = __OFSUB__(v64, v63);
        int v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0)) {
          int v70 = 0;
        }
        else {
          int v70 = 1;
        }
        int v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 1023) {
          int v71 = 1023;
        }
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      int v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    int v72 = v52[a2 - 1];
    int v73 = *v52;
    int v74 = v56[1];
    BOOL v25 = __OFSUB__(v73, v74);
    int v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0)) {
      int v76 = 0;
    }
    else {
      int v76 = 1;
    }
    int v77 = v76 | (v75 >> 31);
    BOOL v25 = __OFSUB__(v73, v72);
    int v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0)) {
      int v79 = 0;
    }
    else {
      int v79 = 1;
    }
    int v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 1023) {
      int v80 = 1023;
    }
    *int v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    int v81 = v52[v101 - 2 + a2];
    int v82 = v52[v100];
    int v83 = v56[v101];
    BOOL v25 = __OFSUB__(v82, v83);
    int v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0)) {
      int v85 = 0;
    }
    else {
      int v85 = 1;
    }
    int v86 = v85 | (v84 >> 31);
    BOOL v25 = __OFSUB__(v82, v81);
    int v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0)) {
      int v88 = 0;
    }
    else {
      int v88 = 1;
    }
    int v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 1023) {
      int v89 = 1023;
    }
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    uint64_t v90 = v100 - 1;
    int v91 = v56 + 2;
    do
    {
      int v92 = v52[a2];
      int v94 = v52[1];
      ++v52;
      int v93 = v94;
      int v95 = *v91++;
      int v96 = (v93 > v95) | ((v93 - v95) >> 31);
      BOOL v25 = __OFSUB__(v93, v92);
      int v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 1023) {
        int v99 = 1023;
      }
      *int v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1) {
    return memcpy(a5, __srca, 2 * v103);
  }
  return result;
}

void *sub_1D0D2C628(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v104;
  uint64_t v16 = 2 * a2;
  uint64_t v101 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = a4 & 6;
  uint64_t v95 = a7;
  uint64_t __n = 2 * a7;
  uint64_t result = memcpy(v104, __src, __n);
  __int16 v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 1);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 1023) {
      int v31 = 1023;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v33 = a6[a7 - 2];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 1023) {
      int v40 = 1023;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    do
    {
      int v43 = *((unsigned __int16 *)v42 - 1);
      int v44 = *a6++;
      int v45 = (v43 > v44) | ((v43 - v44) >> 31);
      int v46 = *(unsigned __int16 *)&v42[2 * a2];
      BOOL v24 = __OFSUB__(v43, v46);
      int v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 1023) {
        int v49 = 1023;
      }
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  uint64_t v94 = a7 - 1;
  int v93 = a4 & 9;
  int v50 = &__src[2 * a2];
  uint64_t v98 = a2;
  char v97 = a4;
  unsigned int v96 = a7;
  if (a8 >= 3)
  {
    int v51 = __src;
    int v52 = (unsigned __int16 *)&v105;
    uint64_t v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    BOOL v99 = (a4 & 1) == 0;
    uint64_t v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    uint64_t v55 = 1;
    do
    {
      uint64_t v56 = v15;
      unsigned int v15 = v52;
      uint64_t v57 = (char *)(v56 - 1);
      int v52 = v56;
      uint64_t result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      uint64_t v58 = (unsigned __int16 *)v54;
      uint64_t v59 = v99;
      do
      {
        int v60 = *(unsigned __int16 *)&v50[2 * v59];
        int v61 = *(unsigned __int16 *)&v57[2 * v59];
        BOOL v24 = __OFSUB__(v60, v61);
        int v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0)) {
          int v63 = 0;
        }
        else {
          int v63 = 1;
        }
        int v64 = *v58++;
        int v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 1023) {
          int v65 = 1023;
        }
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    int v66 = *(unsigned __int16 *)v50;
    int v67 = *(v15 - 1);
    BOOL v24 = __OFSUB__(v66, v67);
    int v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0)) {
      int v69 = 0;
    }
    else {
      int v69 = 1;
    }
    int v70 = v69 | (v68 >> 31);
    int v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    BOOL v24 = __OFSUB__(v66, v71);
    int v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0)) {
      int v73 = 0;
    }
    else {
      int v73 = 1;
    }
    int v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 1023) {
      int v74 = 1023;
    }
    *(_WORD *)int v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    int v75 = *(unsigned __int16 *)&v50[2 * v94];
    int v76 = v15[v96 - 2];
    BOOL v24 = __OFSUB__(v75, v76);
    int v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0)) {
      int v78 = 0;
    }
    else {
      int v78 = 1;
    }
    int v79 = v78 | (v77 >> 31);
    int v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    BOOL v24 = __OFSUB__(v75, v80);
    int v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0)) {
      int v82 = 0;
    }
    else {
      int v82 = 1;
    }
    int v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 1023) {
      int v83 = 1023;
    }
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    uint64_t v84 = v94 - 1;
    int v85 = v50 + 4;
    do
    {
      int v86 = (unsigned __int16)*(v85 - 1);
      int v87 = *v15++;
      int v88 = (v86 > v87) | ((v86 - v87) >> 31);
      int v89 = (unsigned __int16)v85[v98];
      BOOL v24 = __OFSUB__(v86, v89);
      int v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0)) {
        int v91 = 0;
      }
      else {
        int v91 = 1;
      }
      int v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 1023) {
        int v92 = 1023;
      }
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1) {
    return memcpy(a5, __srca, 2 * a8);
  }
  return result;
}

void *sub_1D0D2CA78(void *result)
{
  result[33] = sub_1D0D2D8B0;
  result[29] = sub_1D0C865C4;
  result[30] = sub_1D0C864D8;
  result[31] = sub_1D0C86360;
  result[32] = sub_1D0C861FC;
  result[34] = sub_1D0C860FC;
  result[35] = sub_1D0C85FEC;
  result[36] = sub_1D0C85E34;
  result[37] = sub_1D0C85C90;
  result[39] = sub_1D0C85B18;
  result[40] = sub_1D0C85988;
  result[41] = sub_1D0C85740;
  result[42] = sub_1D0C85514;
  result[44] = sub_1D0C850C4;
  result[45] = sub_1D0C84D50;
  result[46] = sub_1D0C8490C;
  result[47] = sub_1D0C844D8;
  result[38] = sub_1D0C85458;
  result[43] = sub_1D0C85348;
  result[48] = sub_1D0C84228;
  result[49] = sub_1D0C85014;
  result[50] = sub_1D0C84C90;
  result[51] = sub_1D0C8484C;
  result[52] = sub_1D0C84418;
  result[53] = sub_1D0C841C0;
  result[55] = sub_1D0C79F3C;
  return result;
}

_WORD *sub_1D0D2CC1C(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = a6;
    unint64_t v7 = &result[2 * a5 - 2];
    uint64_t v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      unint64_t v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      uint64_t v9 = result;
      uint64_t v10 = a5;
      do
      {
        int v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 4)) + (unsigned __int16)*v9;
        if (v11 >= 511) {
          int v11 = 511;
        }
        *uint64_t v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      uint64_t result = (_WORD *)((char *)result + v8);
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1D0D2CC98(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = 2 * a7;
  uint64_t v16 = a8;
  uint64_t v107 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[2 * v15 - 4];
    uint64_t v18 = v110;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  int v20 = ~a4 & 5;
  unsigned int v105 = ((a4 >> 1) & 1) + a7;
  uint64_t __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v21 = (unsigned __int16)a5[2];
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(unsigned __int16 *)(a6 + 4);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    BOOL v24 = __OFSUB__(v22, v21);
    int v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0)) {
      int v29 = 0;
    }
    else {
      int v29 = 1;
    }
    int v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 511) {
      int v30 = 511;
    }
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  uint64_t result = a4;
  if ((a4 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    int v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    BOOL v24 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v24 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 511) {
      int v40 = 511;
    }
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = 0;
    uint64_t v42 = (a7 - 1) - 1;
    int v43 = 4;
    do
    {
      int v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      int v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      int v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      BOOL v24 = __OFSUB__(v45, v46);
      int v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = v48 | (v47 >> 31);
      BOOL v24 = __OFSUB__(v45, v44);
      int v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0)) {
        int v51 = 0;
      }
      else {
        int v51 = 1;
      }
      int v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 511) {
        int v52 = 511;
      }
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  uint64_t v102 = (a7 - 1);
  uint64_t v53 = &__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v57 = (int *)__dst;
  }
  else
  {
    uint64_t v54 = &v109;
    uint64_t v55 = (int *)__dst;
    uint64_t v56 = 1;
    do
    {
      uint64_t v57 = v54;
      uint64_t result = (uint64_t)memcpy(v54, v53, __n);
      int v58 = (a4 & 1) == 0;
      uint64_t v59 = (a4 & 1) == 0;
      do
      {
        int v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59) {
          int v60 = (char *)&a5[2 * (int)v56 + 2];
        }
        int v61 = *(unsigned __int16 *)v60;
        int v62 = *(unsigned __int16 *)&v53[1 * v58];
        int v63 = LOWORD(v55[v58 + 1]);
        BOOL v24 = __OFSUB__(v62, v63);
        int v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0)) {
          int v65 = 0;
        }
        else {
          int v65 = 1;
        }
        int v66 = v65 | (v64 >> 31);
        BOOL v24 = __OFSUB__(v62, v61);
        int v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0)) {
          int v68 = 0;
        }
        else {
          int v68 = 1;
        }
        int v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 511) {
          int v69 = 511;
        }
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      uint64_t v54 = v55;
      uint64_t v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    int v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    int v71 = *(unsigned __int16 *)v53;
    int v72 = *((unsigned __int16 *)v57 + 2);
    BOOL v24 = __OFSUB__(v71, v72);
    int v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0)) {
      int v74 = 0;
    }
    else {
      int v74 = 1;
    }
    int v75 = v74 | (v73 >> 31);
    BOOL v24 = __OFSUB__(v71, v70);
    int v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0)) {
      int v77 = 0;
    }
    else {
      int v77 = 1;
    }
    int v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 511) {
      int v78 = 511;
    }
    *(_WORD *)uint64_t v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    int v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    int v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    int v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    BOOL v24 = __OFSUB__(v80, v81);
    int v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0)) {
      int v83 = 0;
    }
    else {
      int v83 = 1;
    }
    int v84 = v83 | (v82 >> 31);
    BOOL v24 = __OFSUB__(v80, v79);
    int v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0)) {
      int v86 = 0;
    }
    else {
      int v86 = 1;
    }
    int v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 511) {
      int v87 = 511;
    }
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v88 = 0;
    uint64_t v89 = v102 - 1;
    int v90 = 2;
    do
    {
      int v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      int v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      int v93 = LOWORD(v57[v90]);
      BOOL v24 = __OFSUB__(v92, v93);
      int v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0)) {
        int v95 = 0;
      }
      else {
        int v95 = 1;
      }
      int v96 = v95 | (v94 >> 31);
      BOOL v24 = __OFSUB__(v92, v91);
      int v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 511) {
        int v99 = 511;
      }
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    uint64_t v100 = (__int16 *)v110;
    do
    {
      __int16 v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D2D0F8(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v107;
  uint64_t v16 = a8;
  uint64_t v104 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[4 * a7 - 4];
    uint64_t v18 = v109;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  uint64_t v105 = 2 * a2;
  uint64_t v98 = 2 * a7;
  int v20 = a4 & 6;
  uint64_t __n = 4 * a7;
  memcpy(v107, __src, __n);
  uint64_t result = a4;
  __int16 v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 2);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 511) {
      int v31 = 511;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    int v33 = a6[(v98 - 4)];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 511) {
      int v40 = 511;
    }
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    uint64_t v43 = 0x400000000;
    do
    {
      int v44 = (unsigned __int16)*v42;
      int v45 = *a6;
      a6 += 2;
      int v46 = (v44 > v45) | ((v44 - v45) >> 31);
      int v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      BOOL v24 = __OFSUB__(v44, v47);
      int v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0)) {
        int v49 = 0;
      }
      else {
        int v49 = 1;
      }
      int v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 511) {
        int v50 = 511;
      }
      _WORD *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  int v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    uint64_t v55 = (unsigned __int16 *)v107;
  }
  else
  {
    int v52 = (unsigned __int16 *)&v108;
    uint64_t v53 = (a4 & 1) == 0;
    uint64_t v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    uint64_t v100 = 4 * v53;
    uint64_t v101 = (v53 << 33) + 0x200000000;
    uint64_t v54 = 1;
    do
    {
      uint64_t v55 = v52;
      uint64_t result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      uint64_t v56 = v100;
      uint64_t v57 = v101;
      uint64_t v58 = v102;
      do
      {
        int v59 = *(unsigned __int16 *)&v51[v56];
        int v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        BOOL v24 = __OFSUB__(v59, v60);
        int v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0)) {
          int v62 = 0;
        }
        else {
          int v62 = 1;
        }
        int v63 = v62 | (v61 >> 31);
        int v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        BOOL v24 = __OFSUB__(v59, v64);
        int v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0)) {
          int v66 = 0;
        }
        else {
          int v66 = 1;
        }
        int v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 511) {
          int v67 = 511;
        }
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      int v52 = v15;
      unsigned int v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    int v68 = *(unsigned __int16 *)v51;
    int v69 = *(v55 - 2);
    BOOL v24 = __OFSUB__(v68, v69);
    int v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0)) {
      int v71 = 0;
    }
    else {
      int v71 = 1;
    }
    int v72 = v71 | (v70 >> 31);
    int v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v68, v73);
    int v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0)) {
      int v75 = 0;
    }
    else {
      int v75 = 1;
    }
    int v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 511) {
      int v76 = 511;
    }
    *(_WORD *)int v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    int v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    int v78 = v55[(v98 - 4)];
    BOOL v24 = __OFSUB__(v77, v78);
    int v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0)) {
      int v80 = 0;
    }
    else {
      int v80 = 1;
    }
    int v81 = v80 | (v79 >> 31);
    int v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v77, v82);
    int v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0)) {
      int v84 = 0;
    }
    else {
      int v84 = 1;
    }
    int v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 511) {
      int v85 = 511;
    }
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v86 = a7 - 1 - 1;
    int v87 = v51 + 4;
    uint64_t v88 = 0x400000000;
    do
    {
      int v89 = (unsigned __int16)*v87;
      int v90 = *v55;
      v55 += 2;
      int v91 = (v89 > v90) | ((v89 - v90) >> 31);
      int v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      BOOL v24 = __OFSUB__(v89, v92);
      int v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0)) {
        int v94 = 0;
      }
      else {
        int v94 = 1;
      }
      int v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 511) {
        int v95 = 511;
      }
      *int v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    int v96 = (__int16 *)v109;
    do
    {
      __int16 v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D2D568(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2CC98(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1D0D2CC98(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

uint64_t sub_1D0D2D5F4(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2D0F8(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1D0D2D0F8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1D0D2D680(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2CC98(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1D0D2CC98(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1D0D2D70C(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2D0F8(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1D0D2D0F8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1D0D2D798(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2CC98(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1D0D2CC98(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1D0D2D824(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2D0F8(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1D0D2D0F8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

_WORD *sub_1D0D2D8B0(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2CC1C(a1, a2, a3, a5, 4u, a7);
  return sub_1D0D2CC1C(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1D0D2D928(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2CC98(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1D0D2CC98(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

uint64_t sub_1D0D2D9B4(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2D0F8(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1D0D2D0F8(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

void *sub_1D0D2DA40(void *result)
{
  result[9] = sub_1D0C7BDFC;
  result[10] = sub_1D0C7BD28;
  result[11] = sub_1D0C7BBC0;
  result[12] = sub_1D0C7BA6C;
  result[13] = sub_1D0C7BA20;
  result[14] = sub_1D0C7B92C;
  result[15] = sub_1D0C7B830;
  result[16] = sub_1D0C7B684;
  result[17] = sub_1D0C7B4EC;
  result[18] = sub_1D0C7B48C;
  result[19] = sub_1D0C7B320;
  result[20] = sub_1D0C7B1A4;
  result[21] = sub_1D0C7AF68;
  result[22] = sub_1D0C7AD48;
  result[23] = sub_1D0C7ACBC;
  result[24] = sub_1D0C7AA44;
  result[25] = sub_1D0C7A794;
  result[26] = sub_1D0C7A418;
  result[27] = sub_1D0C7A0AC;
  result[28] = sub_1D0C79FC4;
  result[54] = sub_1D0C79F3C;
  return result;
}

void *sub_1D0D2DB94(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11 = a4;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = ((a4 >> 1) & 1) + a7;
  uint64_t v16 = 2 * a2;
  uint64_t v106 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = ~a4 & 5;
  uint64_t __n = 2 * (((a4 >> 1) & 1) + a7);
  uint64_t result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v22 = a5[1];
    int v23 = *(unsigned __int16 *)__src;
    int v24 = *(unsigned __int16 *)(a6 + 2);
    BOOL v25 = __OFSUB__(v23, v24);
    int v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0)) {
      int v27 = 0;
    }
    else {
      int v27 = 1;
    }
    int v28 = v27 | (v26 >> 31);
    BOOL v25 = __OFSUB__(v23, v22);
    int v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 511) {
      int v31 = 511;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    BOOL v25 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v25 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 511) {
      int v40 = 511;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = (unsigned __int16 *)(a6 + 4);
    uint64_t v43 = __src;
    do
    {
      int v44 = (unsigned __int16)v43[a2];
      int v46 = (unsigned __int16)v43[1];
      ++v43;
      int v45 = v46;
      int v47 = *v42++;
      int v48 = (v45 > v47) | ((v45 - v47) >> 31);
      BOOL v25 = __OFSUB__(v45, v44);
      int v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0)) {
        int v50 = 0;
      }
      else {
        int v50 = 1;
      }
      int v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 511) {
        int v51 = 511;
      }
      *uint64_t v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  uint64_t v100 = a7 - 1;
  unsigned int v101 = a7;
  char v102 = v11;
  int v52 = (unsigned __int16 *)&__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    uint64_t v53 = (unsigned __int16 *)&v109;
    uint64_t v54 = v15 - 1;
    BOOL v104 = (v11 & 1) == 0;
    uint64_t v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    uint64_t v56 = (unsigned __int16 *)__dst;
    uint64_t v57 = 1;
    do
    {
      uint64_t v58 = v56;
      uint64_t v56 = v53;
      int v59 = v58 + 1;
      uint64_t v53 = v58;
      uint64_t result = memcpy(v56, v52, __n);
      ++v57;
      int v60 = (unsigned __int16 *)v55;
      uint64_t v61 = v104;
      do
      {
        if (v61) {
          int v62 = v60;
        }
        else {
          int v62 = &a5[v57];
        }
        int v63 = *v62;
        int v64 = v52[v61];
        int v65 = v59[v61];
        BOOL v25 = __OFSUB__(v64, v65);
        int v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0)) {
          int v67 = 0;
        }
        else {
          int v67 = 1;
        }
        int v68 = v67 | (v66 >> 31);
        BOOL v25 = __OFSUB__(v64, v63);
        int v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0)) {
          int v70 = 0;
        }
        else {
          int v70 = 1;
        }
        int v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 511) {
          int v71 = 511;
        }
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      int v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    int v72 = v52[a2 - 1];
    int v73 = *v52;
    int v74 = v56[1];
    BOOL v25 = __OFSUB__(v73, v74);
    int v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0)) {
      int v76 = 0;
    }
    else {
      int v76 = 1;
    }
    int v77 = v76 | (v75 >> 31);
    BOOL v25 = __OFSUB__(v73, v72);
    int v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0)) {
      int v79 = 0;
    }
    else {
      int v79 = 1;
    }
    int v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 511) {
      int v80 = 511;
    }
    *int v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    int v81 = v52[v101 - 2 + a2];
    int v82 = v52[v100];
    int v83 = v56[v101];
    BOOL v25 = __OFSUB__(v82, v83);
    int v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0)) {
      int v85 = 0;
    }
    else {
      int v85 = 1;
    }
    int v86 = v85 | (v84 >> 31);
    BOOL v25 = __OFSUB__(v82, v81);
    int v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0)) {
      int v88 = 0;
    }
    else {
      int v88 = 1;
    }
    int v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 511) {
      int v89 = 511;
    }
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    uint64_t v90 = v100 - 1;
    int v91 = v56 + 2;
    do
    {
      int v92 = v52[a2];
      int v94 = v52[1];
      ++v52;
      int v93 = v94;
      int v95 = *v91++;
      int v96 = (v93 > v95) | ((v93 - v95) >> 31);
      BOOL v25 = __OFSUB__(v93, v92);
      int v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 511) {
        int v99 = 511;
      }
      *int v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1) {
    return memcpy(a5, __srca, 2 * v103);
  }
  return result;
}

void *sub_1D0D2DFB8(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v104;
  uint64_t v16 = 2 * a2;
  uint64_t v101 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = a4 & 6;
  uint64_t v95 = a7;
  uint64_t __n = 2 * a7;
  uint64_t result = memcpy(v104, __src, __n);
  __int16 v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 1);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 511) {
      int v31 = 511;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v33 = a6[a7 - 2];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 511) {
      int v40 = 511;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    do
    {
      int v43 = *((unsigned __int16 *)v42 - 1);
      int v44 = *a6++;
      int v45 = (v43 > v44) | ((v43 - v44) >> 31);
      int v46 = *(unsigned __int16 *)&v42[2 * a2];
      BOOL v24 = __OFSUB__(v43, v46);
      int v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 511) {
        int v49 = 511;
      }
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  uint64_t v94 = a7 - 1;
  int v93 = a4 & 9;
  int v50 = &__src[2 * a2];
  uint64_t v98 = a2;
  char v97 = a4;
  unsigned int v96 = a7;
  if (a8 >= 3)
  {
    int v51 = __src;
    int v52 = (unsigned __int16 *)&v105;
    uint64_t v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    BOOL v99 = (a4 & 1) == 0;
    uint64_t v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    uint64_t v55 = 1;
    do
    {
      uint64_t v56 = v15;
      unsigned int v15 = v52;
      uint64_t v57 = (char *)(v56 - 1);
      int v52 = v56;
      uint64_t result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      uint64_t v58 = (unsigned __int16 *)v54;
      uint64_t v59 = v99;
      do
      {
        int v60 = *(unsigned __int16 *)&v50[2 * v59];
        int v61 = *(unsigned __int16 *)&v57[2 * v59];
        BOOL v24 = __OFSUB__(v60, v61);
        int v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0)) {
          int v63 = 0;
        }
        else {
          int v63 = 1;
        }
        int v64 = *v58++;
        int v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 511) {
          int v65 = 511;
        }
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    int v66 = *(unsigned __int16 *)v50;
    int v67 = *(v15 - 1);
    BOOL v24 = __OFSUB__(v66, v67);
    int v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0)) {
      int v69 = 0;
    }
    else {
      int v69 = 1;
    }
    int v70 = v69 | (v68 >> 31);
    int v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    BOOL v24 = __OFSUB__(v66, v71);
    int v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0)) {
      int v73 = 0;
    }
    else {
      int v73 = 1;
    }
    int v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 511) {
      int v74 = 511;
    }
    *(_WORD *)int v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    int v75 = *(unsigned __int16 *)&v50[2 * v94];
    int v76 = v15[v96 - 2];
    BOOL v24 = __OFSUB__(v75, v76);
    int v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0)) {
      int v78 = 0;
    }
    else {
      int v78 = 1;
    }
    int v79 = v78 | (v77 >> 31);
    int v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    BOOL v24 = __OFSUB__(v75, v80);
    int v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0)) {
      int v82 = 0;
    }
    else {
      int v82 = 1;
    }
    int v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 511) {
      int v83 = 511;
    }
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    uint64_t v84 = v94 - 1;
    int v85 = v50 + 4;
    do
    {
      int v86 = (unsigned __int16)*(v85 - 1);
      int v87 = *v15++;
      int v88 = (v86 > v87) | ((v86 - v87) >> 31);
      int v89 = (unsigned __int16)v85[v98];
      BOOL v24 = __OFSUB__(v86, v89);
      int v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0)) {
        int v91 = 0;
      }
      else {
        int v91 = 1;
      }
      int v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 511) {
        int v92 = 511;
      }
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1) {
    return memcpy(a5, __srca, 2 * a8);
  }
  return result;
}

void *sub_1D0D2E408(void *result)
{
  result[33] = sub_1D0D2F240;
  result[29] = sub_1D0C84100;
  result[30] = sub_1D0C84014;
  result[31] = sub_1D0C83E9C;
  result[32] = sub_1D0C83D38;
  result[34] = sub_1D0C83C38;
  result[35] = sub_1D0C83B28;
  result[36] = sub_1D0C83970;
  result[37] = sub_1D0C837CC;
  result[39] = sub_1D0C83654;
  result[40] = sub_1D0C834C4;
  result[41] = sub_1D0C8327C;
  result[42] = sub_1D0C83050;
  result[44] = sub_1D0C82C00;
  result[45] = sub_1D0C8288C;
  result[46] = sub_1D0C82448;
  result[47] = sub_1D0C82014;
  result[38] = sub_1D0C82F94;
  result[43] = sub_1D0C82E84;
  result[48] = sub_1D0C81D64;
  result[49] = sub_1D0C82B50;
  result[50] = sub_1D0C827CC;
  result[51] = sub_1D0C82388;
  result[52] = sub_1D0C81F54;
  result[53] = sub_1D0C81CFC;
  result[55] = sub_1D0C77FCC;
  return result;
}

_WORD *sub_1D0D2E5AC(_WORD *result, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = a6;
    unint64_t v7 = &result[2 * a5 - 2];
    uint64_t v8 = 2 * a2;
    do
    {
      *a4 = *v7;
      a4 += 2;
      unint64_t v7 = (_WORD *)((char *)v7 + v8);
      --v6;
    }
    while (v6);
    do
    {
      uint64_t v9 = result;
      uint64_t v10 = a5;
      do
      {
        int v11 = *(char *)(a3 + ((unint64_t)(unsigned __int16)*v9 >> 3)) + (unsigned __int16)*v9;
        if (v11 >= 255) {
          int v11 = 255;
        }
        *uint64_t v9 = v11 & ~(unsigned __int16)(v11 >> 31);
        v9 += 2;
        --v10;
      }
      while (v10);
      LODWORD(v6) = v6 + 1;
      uint64_t result = (_WORD *)((char *)result + v8);
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1D0D2E628(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = 2 * a7;
  uint64_t v16 = a8;
  uint64_t v107 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[2 * v15 - 4];
    uint64_t v18 = v110;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  int v20 = ~a4 & 5;
  unsigned int v105 = ((a4 >> 1) & 1) + a7;
  uint64_t __n = 4 * v105;
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v21 = (unsigned __int16)a5[2];
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(unsigned __int16 *)(a6 + 4);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    BOOL v24 = __OFSUB__(v22, v21);
    int v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0)) {
      int v29 = 0;
    }
    else {
      int v29 = 1;
    }
    int v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 255) {
      int v30 = 255;
    }
    *(_WORD *)__src = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  uint64_t result = a4;
  if ((a4 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * v15 - 8 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * v15 - 4];
    int v34 = *(unsigned __int16 *)(a6 + 2 * v15);
    BOOL v24 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v24 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 255) {
      int v40 = 255;
    }
    *(_WORD *)&__src[2 * v15 - 4] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = 0;
    uint64_t v42 = (a7 - 1) - 1;
    int v43 = 4;
    do
    {
      int v44 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v41 >> 32)];
      int v45 = *(unsigned __int16 *)&__src[2 * v43 - 4];
      int v46 = *(unsigned __int16 *)(a6 + 2 * v43);
      BOOL v24 = __OFSUB__(v45, v46);
      int v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = v48 | (v47 >> 31);
      BOOL v24 = __OFSUB__(v45, v44);
      int v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0)) {
        int v51 = 0;
      }
      else {
        int v51 = 1;
      }
      int v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 255) {
        int v52 = 255;
      }
      *(_WORD *)&__src[2 * v43 - 4] = v52 & ~(unsigned __int16)(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  uint64_t v102 = (a7 - 1);
  uint64_t v53 = &__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v57 = (int *)__dst;
  }
  else
  {
    uint64_t v54 = &v109;
    uint64_t v55 = (int *)__dst;
    uint64_t v56 = 1;
    do
    {
      uint64_t v57 = v54;
      uint64_t result = (uint64_t)memcpy(v54, v53, __n);
      int v58 = (a4 & 1) == 0;
      uint64_t v59 = (a4 & 1) == 0;
      do
      {
        int v60 = &v53[2 * a2 - 4 + 1 * v58];
        if (!v59) {
          int v60 = (char *)&a5[2 * (int)v56 + 2];
        }
        int v61 = *(unsigned __int16 *)v60;
        int v62 = *(unsigned __int16 *)&v53[1 * v58];
        int v63 = LOWORD(v55[v58 + 1]);
        BOOL v24 = __OFSUB__(v62, v63);
        int v64 = v62 - v63;
        if ((v64 < 0) ^ v24 | (v64 == 0)) {
          int v65 = 0;
        }
        else {
          int v65 = 1;
        }
        int v66 = v65 | (v64 >> 31);
        BOOL v24 = __OFSUB__(v62, v61);
        int v67 = v62 - v61;
        if ((v67 < 0) ^ v24 | (v67 == 0)) {
          int v68 = 0;
        }
        else {
          int v68 = 1;
        }
        int v69 = *(char *)(a3 + (v68 | (v67 >> 31)) + v66 + 2) + v62;
        if (v69 >= 255) {
          int v69 = 255;
        }
        *(_WORD *)&v53[1 * v58] = v69 & ~(unsigned __int16)(v69 >> 31);
        ++v59;
        ++v58;
      }
      while (v105 - 1 != v59);
      ++v56;
      v53 += 2 * a2;
      uint64_t v54 = v55;
      uint64_t v55 = v57;
    }
    while (v56 != v107);
  }
  if ((a4 & 0x40) != 0)
  {
    int v70 = *(unsigned __int16 *)&v53[2 * a2 - 4];
    int v71 = *(unsigned __int16 *)v53;
    int v72 = *((unsigned __int16 *)v57 + 2);
    BOOL v24 = __OFSUB__(v71, v72);
    int v73 = v71 - v72;
    if ((v73 < 0) ^ v24 | (v73 == 0)) {
      int v74 = 0;
    }
    else {
      int v74 = 1;
    }
    int v75 = v74 | (v73 >> 31);
    BOOL v24 = __OFSUB__(v71, v70);
    int v76 = v71 - v70;
    if ((v76 < 0) ^ v24 | (v76 == 0)) {
      int v77 = 0;
    }
    else {
      int v77 = 1;
    }
    int v78 = *(char *)(a3 + (v77 | (v76 >> 31)) + v75 + 2) + v71;
    if (v78 >= 255) {
      int v78 = 255;
    }
    *(_WORD *)uint64_t v53 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    int v79 = *(unsigned __int16 *)&v53[2 * (2 * v102 - 2) + 2 * a2];
    int v80 = *(unsigned __int16 *)&v53[2 * (2 * v102)];
    int v81 = *((unsigned __int16 *)v57 + (2 * v102 + 2));
    BOOL v24 = __OFSUB__(v80, v81);
    int v82 = v80 - v81;
    if ((v82 < 0) ^ v24 | (v82 == 0)) {
      int v83 = 0;
    }
    else {
      int v83 = 1;
    }
    int v84 = v83 | (v82 >> 31);
    BOOL v24 = __OFSUB__(v80, v79);
    int v85 = v80 - v79;
    if ((v85 < 0) ^ v24 | (v85 == 0)) {
      int v86 = 0;
    }
    else {
      int v86 = 1;
    }
    int v87 = *(char *)(a3 + (v86 | (v85 >> 31)) + v84 + 2) + v80;
    if (v87 >= 255) {
      int v87 = 255;
    }
    *(_WORD *)&v53[2 * (2 * v102)] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v88 = 0;
    uint64_t v89 = v102 - 1;
    int v90 = 2;
    do
    {
      int v91 = *(unsigned __int16 *)&v53[2 * a2 + 2 * (v88 >> 32)];
      int v92 = *(unsigned __int16 *)&v53[1 * v90 - 4];
      int v93 = LOWORD(v57[v90]);
      BOOL v24 = __OFSUB__(v92, v93);
      int v94 = v92 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0)) {
        int v95 = 0;
      }
      else {
        int v95 = 1;
      }
      int v96 = v95 | (v94 >> 31);
      BOOL v24 = __OFSUB__(v92, v91);
      int v97 = v92 - v91;
      if ((v97 < 0) ^ v24 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v92;
      if (v99 >= 255) {
        int v99 = 255;
      }
      *(_WORD *)&v53[1 * v90++ - 4] = v99 & ~(unsigned __int16)(v99 >> 31);
      v88 += 0x200000000;
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1)
  {
    uint64_t v100 = (__int16 *)v110;
    do
    {
      __int16 v101 = *v100++;
      *a5 = v101;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D2EA88(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v107;
  uint64_t v16 = a8;
  uint64_t v104 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = &__src[4 * a7 - 4];
    uint64_t v18 = v109;
    uint64_t v19 = a8;
    do
    {
      *v18++ = *(_WORD *)v17;
      v17 += 2 * a2;
      --v19;
    }
    while (v19);
  }
  uint64_t v105 = 2 * a2;
  uint64_t v98 = 2 * a7;
  int v20 = a4 & 6;
  uint64_t __n = 4 * a7;
  memcpy(v107, __src, __n);
  uint64_t result = a4;
  __int16 v106 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 2);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 255) {
      int v31 = 255;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * (v98 - 2)];
    int v33 = a6[(v98 - 4)];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 255) {
      int v40 = 255;
    }
    *(_WORD *)&__src[2 * (v98 - 2)] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    uint64_t v43 = 0x400000000;
    do
    {
      int v44 = (unsigned __int16)*v42;
      int v45 = *a6;
      a6 += 2;
      int v46 = (v44 > v45) | ((v44 - v45) >> 31);
      int v47 = *(unsigned __int16 *)&__src[2 * a2 + 2 * (v43 >> 32)];
      BOOL v24 = __OFSUB__(v44, v47);
      int v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0)) {
        int v49 = 0;
      }
      else {
        int v49 = 1;
      }
      int v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 255) {
        int v50 = 255;
      }
      _WORD *v42 = v50 & ~(unsigned __int16)(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  int v51 = &__src[2 * a2];
  if (a8 < 3)
  {
    uint64_t v55 = (unsigned __int16 *)v107;
  }
  else
  {
    int v52 = (unsigned __int16 *)&v108;
    uint64_t v53 = (a4 & 1) == 0;
    uint64_t v102 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    uint64_t v100 = 4 * v53;
    uint64_t v101 = (v53 << 33) + 0x200000000;
    uint64_t v54 = 1;
    do
    {
      uint64_t v55 = v52;
      uint64_t result = (uint64_t)memcpy(v52, v51, __n);
      *(v55 - 2) = a5[2 * v54];
      uint64_t v56 = v100;
      uint64_t v57 = v101;
      uint64_t v58 = v102;
      do
      {
        int v59 = *(unsigned __int16 *)&v51[v56];
        int v60 = *(unsigned __int16 *)((char *)v15 + v56 - 4);
        BOOL v24 = __OFSUB__(v59, v60);
        int v61 = v59 - v60;
        if ((v61 < 0) ^ v24 | (v61 == 0)) {
          int v62 = 0;
        }
        else {
          int v62 = 1;
        }
        int v63 = v62 | (v61 >> 31);
        int v64 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v57 >> 32)];
        BOOL v24 = __OFSUB__(v59, v64);
        int v65 = v59 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0)) {
          int v66 = 0;
        }
        else {
          int v66 = 1;
        }
        int v67 = *(char *)(a3 + v63 + (v66 | (v65 >> 31)) + 2) + v59;
        if (v67 >= 255) {
          int v67 = 255;
        }
        *(_WORD *)&v51[v56] = v67 & ~(unsigned __int16)(v67 >> 31);
        v57 += 0x200000000;
        v56 += 4;
        --v58;
      }
      while (v58);
      ++v54;
      v51 += v105;
      int v52 = v15;
      unsigned int v15 = v55;
    }
    while (v54 != v104);
  }
  if ((a4 & 9) == 9)
  {
    int v68 = *(unsigned __int16 *)v51;
    int v69 = *(v55 - 2);
    BOOL v24 = __OFSUB__(v68, v69);
    int v70 = v68 - v69;
    if ((v70 < 0) ^ v24 | (v70 == 0)) {
      int v71 = 0;
    }
    else {
      int v71 = 1;
    }
    int v72 = v71 | (v70 >> 31);
    int v73 = *(unsigned __int16 *)&v51[2 * a2 + 4];
    BOOL v24 = __OFSUB__(v68, v73);
    int v74 = v68 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0)) {
      int v75 = 0;
    }
    else {
      int v75 = 1;
    }
    int v76 = *(char *)(a3 + v72 + (v75 | (v74 >> 31)) + 2) + v68;
    if (v76 >= 255) {
      int v76 = 255;
    }
    *(_WORD *)int v51 = v76 & ~(unsigned __int16)(v76 >> 31);
  }
  if ((a4 & 0x80) != 0)
  {
    int v77 = *(unsigned __int16 *)&v51[2 * (v98 - 2)];
    int v78 = v55[(v98 - 4)];
    BOOL v24 = __OFSUB__(v77, v78);
    int v79 = v77 - v78;
    if ((v79 < 0) ^ v24 | (v79 == 0)) {
      int v80 = 0;
    }
    else {
      int v80 = 1;
    }
    int v81 = v80 | (v79 >> 31);
    int v82 = *(unsigned __int16 *)&v51[2 * v98 + 2 * a2];
    BOOL v24 = __OFSUB__(v77, v82);
    int v83 = v77 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0)) {
      int v84 = 0;
    }
    else {
      int v84 = 1;
    }
    int v85 = *(char *)(a3 + v81 + (v84 | (v83 >> 31)) + 2) + v77;
    if (v85 >= 255) {
      int v85 = 255;
    }
    *(_WORD *)&v51[2 * (v98 - 2)] = v85 & ~(unsigned __int16)(v85 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v86 = a7 - 1 - 1;
    int v87 = v51 + 4;
    uint64_t v88 = 0x400000000;
    do
    {
      int v89 = (unsigned __int16)*v87;
      int v90 = *v55;
      v55 += 2;
      int v91 = (v89 > v90) | ((v89 - v90) >> 31);
      int v92 = *(unsigned __int16 *)&v51[2 * a2 + 2 * (v88 >> 32)];
      BOOL v24 = __OFSUB__(v89, v92);
      int v93 = v89 - v92;
      if ((v93 < 0) ^ v24 | (v93 == 0)) {
        int v94 = 0;
      }
      else {
        int v94 = 1;
      }
      int v95 = *(char *)(a3 + v91 + (v94 | (v93 >> 31)) + 2) + v89;
      if (v95 >= 255) {
        int v95 = 255;
      }
      *int v87 = v95 & ~(unsigned __int16)(v95 >> 31);
      v87 += 2;
      v88 += 0x200000000;
      --v86;
    }
    while (v86);
  }
  if (a8 >= 1)
  {
    int v96 = (__int16 *)v109;
    do
    {
      __int16 v97 = *v96++;
      *a5 = v97;
      a5 += 2;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1D0D2EEF8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2E628(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1D0D2E628(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 32, a7);
}

uint64_t sub_1D0D2EF84(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2EA88(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1D0D2EA88(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1D0D2F010(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2E628(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1D0D2E628(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 16, a7);
}

uint64_t sub_1D0D2F09C(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2EA88(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1D0D2EA88(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1D0D2F128(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2E628(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1D0D2E628(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 8, a7);
}

uint64_t sub_1D0D2F1B4(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2EA88(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1D0D2EA88(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

_WORD *sub_1D0D2F240(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2E5AC(a1, a2, a3, a5, 4u, a7);
  return sub_1D0D2E5AC(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1D0D2F2B8(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _WORD *a5, uint64_t a6, int a7)
{
  sub_1D0D2E628(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1D0D2E628(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 2, 4, a7);
}

uint64_t sub_1D0D2F344(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, int a7)
{
  sub_1D0D2EA88(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1D0D2EA88(a1 + 2, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

void *sub_1D0D2F3D0(void *result)
{
  result[9] = sub_1D0C79E8C;
  result[10] = sub_1D0C79DB8;
  result[11] = sub_1D0C79C50;
  result[12] = sub_1D0C79AFC;
  result[13] = sub_1D0C79AB0;
  result[14] = sub_1D0C799BC;
  result[15] = sub_1D0C798C0;
  result[16] = sub_1D0C79714;
  result[17] = sub_1D0C7957C;
  result[18] = sub_1D0C7951C;
  result[19] = sub_1D0C793B0;
  result[20] = sub_1D0C79234;
  result[21] = sub_1D0C78FF8;
  result[22] = sub_1D0C78DD8;
  result[23] = sub_1D0C78D4C;
  result[24] = sub_1D0C78AD4;
  result[25] = sub_1D0C78824;
  result[26] = sub_1D0C784A8;
  result[27] = sub_1D0C7813C;
  result[28] = sub_1D0C78054;
  result[54] = sub_1D0C77FCC;
  return result;
}

void *sub_1D0D2F524(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11 = a4;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = ((a4 >> 1) & 1) + a7;
  uint64_t v16 = 2 * a2;
  uint64_t v106 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = ~a4 & 5;
  uint64_t __n = 2 * (((a4 >> 1) & 1) + a7);
  uint64_t result = memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v22 = a5[1];
    int v23 = *(unsigned __int16 *)__src;
    int v24 = *(unsigned __int16 *)(a6 + 2);
    BOOL v25 = __OFSUB__(v23, v24);
    int v26 = v23 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0)) {
      int v27 = 0;
    }
    else {
      int v27 = 1;
    }
    int v28 = v27 | (v26 >> 31);
    BOOL v25 = __OFSUB__(v23, v22);
    int v29 = v23 - v22;
    if ((v29 < 0) ^ v25 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + (v30 | (v29 >> 31)) + v28 + 2) + v23;
    if (v31 >= 255) {
      int v31 = 255;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 4 + 2 * a2];
    int v33 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v34 = *(unsigned __int16 *)(a6 + 2 * a7);
    BOOL v25 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v25 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v25 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v25 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 255) {
      int v40 = 255;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = (unsigned __int16 *)(a6 + 4);
    uint64_t v43 = __src;
    do
    {
      int v44 = (unsigned __int16)v43[a2];
      int v46 = (unsigned __int16)v43[1];
      ++v43;
      int v45 = v46;
      int v47 = *v42++;
      int v48 = (v45 > v47) | ((v45 - v47) >> 31);
      BOOL v25 = __OFSUB__(v45, v44);
      int v49 = v45 - v44;
      if ((v49 < 0) ^ v25 | (v49 == 0)) {
        int v50 = 0;
      }
      else {
        int v50 = 1;
      }
      int v51 = *(char *)(a3 + (v50 | (v49 >> 31)) + v48 + 2) + v45;
      if (v51 >= 255) {
        int v51 = 255;
      }
      *uint64_t v43 = v51 & ~(unsigned __int16)(v51 >> 31);
      --v41;
    }
    while (v41);
  }
  uint64_t v100 = a7 - 1;
  unsigned int v101 = a7;
  char v102 = v11;
  int v52 = (unsigned __int16 *)&__src[2 * a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v56 = (unsigned __int16 *)__dst;
  }
  else
  {
    uint64_t v53 = (unsigned __int16 *)&v109;
    uint64_t v54 = v15 - 1;
    BOOL v104 = (v11 & 1) == 0;
    uint64_t v55 = &__src[((2 * v104) | (4 * a2)) - 2];
    uint64_t v56 = (unsigned __int16 *)__dst;
    uint64_t v57 = 1;
    do
    {
      uint64_t v58 = v56;
      uint64_t v56 = v53;
      int v59 = v58 + 1;
      uint64_t v53 = v58;
      uint64_t result = memcpy(v56, v52, __n);
      ++v57;
      int v60 = (unsigned __int16 *)v55;
      uint64_t v61 = v104;
      do
      {
        if (v61) {
          int v62 = v60;
        }
        else {
          int v62 = &a5[v57];
        }
        int v63 = *v62;
        int v64 = v52[v61];
        int v65 = v59[v61];
        BOOL v25 = __OFSUB__(v64, v65);
        int v66 = v64 - v65;
        if ((v66 < 0) ^ v25 | (v66 == 0)) {
          int v67 = 0;
        }
        else {
          int v67 = 1;
        }
        int v68 = v67 | (v66 >> 31);
        BOOL v25 = __OFSUB__(v64, v63);
        int v69 = v64 - v63;
        if ((v69 < 0) ^ v25 | (v69 == 0)) {
          int v70 = 0;
        }
        else {
          int v70 = 1;
        }
        int v71 = *(char *)(a3 + (v70 | (v69 >> 31)) + v68 + 2) + v64;
        if (v71 >= 255) {
          int v71 = 255;
        }
        v52[v61] = v71 & ~(unsigned __int16)(v71 >> 31);
        ++v60;
        ++v61;
      }
      while (v54 != v61);
      int v52 = (unsigned __int16 *)((char *)v52 + v16);
      v55 += v16;
    }
    while (v57 != v106);
  }
  if ((v102 & 0x40) != 0)
  {
    int v72 = v52[a2 - 1];
    int v73 = *v52;
    int v74 = v56[1];
    BOOL v25 = __OFSUB__(v73, v74);
    int v75 = v73 - v74;
    if ((v75 < 0) ^ v25 | (v75 == 0)) {
      int v76 = 0;
    }
    else {
      int v76 = 1;
    }
    int v77 = v76 | (v75 >> 31);
    BOOL v25 = __OFSUB__(v73, v72);
    int v78 = v73 - v72;
    if ((v78 < 0) ^ v25 | (v78 == 0)) {
      int v79 = 0;
    }
    else {
      int v79 = 1;
    }
    int v80 = *(char *)(a3 + (v79 | (v78 >> 31)) + v77 + 2) + v73;
    if (v80 >= 255) {
      int v80 = 255;
    }
    *int v52 = v80 & ~(unsigned __int16)(v80 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    int v81 = v52[v101 - 2 + a2];
    int v82 = v52[v100];
    int v83 = v56[v101];
    BOOL v25 = __OFSUB__(v82, v83);
    int v84 = v82 - v83;
    if ((v84 < 0) ^ v25 | (v84 == 0)) {
      int v85 = 0;
    }
    else {
      int v85 = 1;
    }
    int v86 = v85 | (v84 >> 31);
    BOOL v25 = __OFSUB__(v82, v81);
    int v87 = v82 - v81;
    if ((v87 < 0) ^ v25 | (v87 == 0)) {
      int v88 = 0;
    }
    else {
      int v88 = 1;
    }
    int v89 = *(char *)(a3 + (v88 | (v87 >> 31)) + v86 + 2) + v82;
    if (v89 >= 255) {
      int v89 = 255;
    }
    v52[v100] = v89 & ~(unsigned __int16)(v89 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    uint64_t v90 = v100 - 1;
    int v91 = v56 + 2;
    do
    {
      int v92 = v52[a2];
      int v94 = v52[1];
      ++v52;
      int v93 = v94;
      int v95 = *v91++;
      int v96 = (v93 > v95) | ((v93 - v95) >> 31);
      BOOL v25 = __OFSUB__(v93, v92);
      int v97 = v93 - v92;
      if ((v97 < 0) ^ v25 | (v97 == 0)) {
        int v98 = 0;
      }
      else {
        int v98 = 1;
      }
      int v99 = *(char *)(a3 + (v98 | (v97 >> 31)) + v96 + 2) + v93;
      if (v99 >= 255) {
        int v99 = 255;
      }
      *int v52 = v99 & ~(unsigned __int16)(v99 >> 31);
      --v90;
    }
    while (v90);
  }
  if (v103 >= 1) {
    return memcpy(a5, __srca, 2 * v103);
  }
  return result;
}

void *sub_1D0D2F948(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, __int16 *a5, unsigned __int16 *a6, unsigned int a7, int a8)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (unsigned __int16 *)v104;
  uint64_t v16 = 2 * a2;
  uint64_t v101 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = &__src[2 * a7 - 2];
    uint64_t v19 = __srca;
    do
    {
      *v19++ = *(_WORD *)v18;
      v18 += v16;
      --v17;
    }
    while (v17);
  }
  int v20 = a4 & 6;
  uint64_t v95 = a7;
  uint64_t __n = 2 * a7;
  uint64_t result = memcpy(v104, __src, __n);
  __int16 v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *(unsigned __int16 *)__src;
    int v23 = *(a6 - 1);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = *(unsigned __int16 *)&__src[2 * a2 + 2];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 255) {
      int v31 = 255;
    }
    *(_WORD *)__src = v31 & ~(unsigned __int16)(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = *(unsigned __int16 *)&__src[2 * a7 - 2];
    int v33 = a6[a7 - 2];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = *(unsigned __int16 *)&__src[2 * v95 + 2 * a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 255) {
      int v40 = 255;
    }
    *(_WORD *)&__src[2 * a7 - 2] = v40 & ~(unsigned __int16)(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 4;
    do
    {
      int v43 = *((unsigned __int16 *)v42 - 1);
      int v44 = *a6++;
      int v45 = (v43 > v44) | ((v43 - v44) >> 31);
      int v46 = *(unsigned __int16 *)&v42[2 * a2];
      BOOL v24 = __OFSUB__(v43, v46);
      int v47 = v43 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = *(char *)(a3 + v45 + (v48 | (v47 >> 31)) + 2) + v43;
      if (v49 >= 255) {
        int v49 = 255;
      }
      *((_WORD *)v42 - 1) = v49 & ~(unsigned __int16)(v49 >> 31);
      v42 += 2;
      --v41;
    }
    while (v41);
  }
  uint64_t v94 = a7 - 1;
  int v93 = a4 & 9;
  int v50 = &__src[2 * a2];
  uint64_t v98 = a2;
  char v97 = a4;
  unsigned int v96 = a7;
  if (a8 >= 3)
  {
    int v51 = __src;
    int v52 = (unsigned __int16 *)&v105;
    uint64_t v53 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1;
    BOOL v99 = (a4 & 1) == 0;
    uint64_t v54 = (uint64_t)&v51[((2 * v99) | (4 * a2)) + 2];
    uint64_t v55 = 1;
    do
    {
      uint64_t v56 = v15;
      unsigned int v15 = v52;
      uint64_t v57 = (char *)(v56 - 1);
      int v52 = v56;
      uint64_t result = memcpy(v15, v50, __n);
      *(v15 - 1) = a5[v55];
      uint64_t v58 = (unsigned __int16 *)v54;
      uint64_t v59 = v99;
      do
      {
        int v60 = *(unsigned __int16 *)&v50[2 * v59];
        int v61 = *(unsigned __int16 *)&v57[2 * v59];
        BOOL v24 = __OFSUB__(v60, v61);
        int v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0)) {
          int v63 = 0;
        }
        else {
          int v63 = 1;
        }
        int v64 = *v58++;
        int v65 = *(char *)(a3 + (v63 | (v62 >> 31)) + ((v60 > v64) | ((v60 - v64) >> 31)) + 2) + v60;
        if (v65 >= 255) {
          int v65 = 255;
        }
        *(_WORD *)&v50[2 * v59++] = v65 & ~(unsigned __int16)(v65 >> 31);
      }
      while (v53 != v59);
      ++v55;
      v50 += v16;
      v54 += v16;
    }
    while (v55 != v101);
  }
  if (v93 == 9)
  {
    int v66 = *(unsigned __int16 *)v50;
    int v67 = *(v15 - 1);
    BOOL v24 = __OFSUB__(v66, v67);
    int v68 = v66 - v67;
    if ((v68 < 0) ^ v24 | (v68 == 0)) {
      int v69 = 0;
    }
    else {
      int v69 = 1;
    }
    int v70 = v69 | (v68 >> 31);
    int v71 = *(unsigned __int16 *)&v50[2 * v98 + 2];
    BOOL v24 = __OFSUB__(v66, v71);
    int v72 = v66 - v71;
    if ((v72 < 0) ^ v24 | (v72 == 0)) {
      int v73 = 0;
    }
    else {
      int v73 = 1;
    }
    int v74 = *(char *)(a3 + v70 + (v73 | (v72 >> 31)) + 2) + v66;
    if (v74 >= 255) {
      int v74 = 255;
    }
    *(_WORD *)int v50 = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  if (v97 < 0)
  {
    int v75 = *(unsigned __int16 *)&v50[2 * v94];
    int v76 = v15[v96 - 2];
    BOOL v24 = __OFSUB__(v75, v76);
    int v77 = v75 - v76;
    if ((v77 < 0) ^ v24 | (v77 == 0)) {
      int v78 = 0;
    }
    else {
      int v78 = 1;
    }
    int v79 = v78 | (v77 >> 31);
    int v80 = *(unsigned __int16 *)&v50[2 * v95 + 2 * v98];
    BOOL v24 = __OFSUB__(v75, v80);
    int v81 = v75 - v80;
    if ((v81 < 0) ^ v24 | (v81 == 0)) {
      int v82 = 0;
    }
    else {
      int v82 = 1;
    }
    int v83 = *(char *)(a3 + v79 + (v82 | (v81 >> 31)) + 2) + v75;
    if (v83 >= 255) {
      int v83 = 255;
    }
    *(_WORD *)&v50[2 * v94] = v83 & ~(unsigned __int16)(v83 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    uint64_t v84 = v94 - 1;
    int v85 = v50 + 4;
    do
    {
      int v86 = (unsigned __int16)*(v85 - 1);
      int v87 = *v15++;
      int v88 = (v86 > v87) | ((v86 - v87) >> 31);
      int v89 = (unsigned __int16)v85[v98];
      BOOL v24 = __OFSUB__(v86, v89);
      int v90 = v86 - v89;
      if ((v90 < 0) ^ v24 | (v90 == 0)) {
        int v91 = 0;
      }
      else {
        int v91 = 1;
      }
      int v92 = *(char *)(a3 + v88 + (v91 | (v90 >> 31)) + 2) + v86;
      if (v92 >= 255) {
        int v92 = 255;
      }
      *(v85++ - 1) = v92 & ~(unsigned __int16)(v92 >> 31);
      --v84;
    }
    while (v84);
  }
  if (a8 >= 1) {
    return memcpy(a5, __srca, 2 * a8);
  }
  return result;
}

unsigned char *sub_1D0D2FD9C(unsigned char *result, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned int a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = a6;
    unint64_t v7 = &result[2 * a5 - 2];
    do
    {
      *a4 = *v7;
      a4 += 2;
      v7 += a2;
      --v6;
    }
    while (v6);
    do
    {
      uint64_t v8 = result;
      uint64_t v9 = a5;
      do
      {
        int v10 = *(char *)(a3 + ((unint64_t)*v8 >> 3)) + *v8;
        if (v10 >= 255) {
          int v10 = 255;
        }
        *uint64_t v8 = v10 & ~(v10 >> 31);
        v8 += 2;
        --v9;
      }
      while (v9);
      result += a2;
      LODWORD(v6) = v6 + 1;
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1D0D2FE14(unsigned __int8 *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, uint64_t a6, int a7, int a8)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  int v15 = ((a4 >> 1) & 1) + a7;
  unsigned int v16 = 2 * a7;
  uint64_t v108 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = (char *)&__src[v16 - 2];
    uint64_t v19 = v111;
    do
    {
      *v19++ = *v18;
      v18 += a2;
      --v17;
    }
    while (v17);
  }
  int v20 = ~a4 & 5;
  uint64_t __n = 2 * (((a4 >> 1) & 1) + a7);
  memcpy(__dst, __src, __n);
  if (!v20)
  {
    int v21 = a5[2];
    int v22 = *__src;
    int v23 = *(unsigned __int8 *)(a6 + 2);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    BOOL v24 = __OFSUB__(v22, v21);
    int v28 = v22 - v21;
    if ((v28 < 0) ^ v24 | (v28 == 0)) {
      int v29 = 0;
    }
    else {
      int v29 = 1;
    }
    int v30 = *(char *)(a3 + (v29 | (v28 >> 31)) + v27 + 2) + v22;
    if (v30 >= 255) {
      int v30 = 255;
    }
    *__src = v30 & ~(v30 >> 31);
  }
  uint64_t result = a4;
  if ((a4 & 0x20) != 0)
  {
    int v32 = __src[v16 - 4 + a2];
    int v33 = __src[v16 - 2];
    int v34 = *(unsigned __int8 *)(a6 + v16);
    BOOL v24 = __OFSUB__(v33, v34);
    int v35 = v33 - v34;
    if ((v35 < 0) ^ v24 | (v35 == 0)) {
      int v36 = 0;
    }
    else {
      int v36 = 1;
    }
    int v37 = v36 | (v35 >> 31);
    BOOL v24 = __OFSUB__(v33, v32);
    int v38 = v33 - v32;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + (v39 | (v38 >> 31)) + v37 + 2) + v33;
    if (v40 >= 255) {
      int v40 = 255;
    }
    __src[v16 - 2] = v40 & ~(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = 0;
    uint64_t v42 = (a7 - 1) - 1;
    int v43 = 4;
    do
    {
      int v44 = __src[a2 + (v41 >> 32)];
      int v45 = __src[v43 - 2];
      int v46 = *(unsigned __int8 *)(a6 + v43);
      BOOL v24 = __OFSUB__(v45, v46);
      int v47 = v45 - v46;
      if ((v47 < 0) ^ v24 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = v48 | (v47 >> 31);
      BOOL v24 = __OFSUB__(v45, v44);
      int v50 = v45 - v44;
      if ((v50 < 0) ^ v24 | (v50 == 0)) {
        int v51 = 0;
      }
      else {
        int v51 = 1;
      }
      int v52 = *(char *)(a3 + (v51 | (v50 >> 31)) + v49 + 2) + v45;
      if (v52 >= 255) {
        int v52 = 255;
      }
      __src[v43 - 2] = v52 & ~(v52 >> 31);
      v43 += 2;
      v41 += 0x200000000;
      --v42;
    }
    while (v42);
  }
  uint64_t v104 = (a7 - 1);
  uint64_t v53 = (char *)&__src[a2];
  int v105 = a8;
  if (a8 < 3)
  {
    uint64_t v58 = (__int16 *)__dst;
  }
  else
  {
    uint64_t v54 = &v110;
    uint64_t v55 = (v15 - 1);
    uint64_t v56 = (__int16 *)__dst;
    uint64_t v57 = 1;
    do
    {
      uint64_t v58 = v54;
      uint64_t result = (uint64_t)memcpy(v54, v53, __n);
      int v59 = 2 * ((a4 & 1) == 0);
      uint64_t v60 = (a4 & 1) == 0;
      do
      {
        int v61 = &v53[a2 - 2 + v59];
        if (!v60) {
          int v61 = &a5[2 * (int)v57 + 2];
        }
        int v62 = *v61;
        int v63 = v53[v59];
        int v64 = LOBYTE(v56[v59 / 2u + 1]);
        BOOL v24 = __OFSUB__(v63, v64);
        int v65 = v63 - v64;
        if ((v65 < 0) ^ v24 | (v65 == 0)) {
          int v66 = 0;
        }
        else {
          int v66 = 1;
        }
        int v67 = v66 | (v65 >> 31);
        BOOL v24 = __OFSUB__(v63, v62);
        int v68 = v63 - v62;
        if ((v68 < 0) ^ v24 | (v68 == 0)) {
          int v69 = 0;
        }
        else {
          int v69 = 1;
        }
        int v70 = *(char *)(a3 + (v69 | (v68 >> 31)) + v67 + 2) + v63;
        if (v70 >= 255) {
          int v70 = 255;
        }
        v53[v59] = v70 & ~(v70 >> 31);
        ++v60;
        v59 += 2;
      }
      while (v55 != v60);
      ++v57;
      v53 += a2;
      uint64_t v54 = v56;
      uint64_t v56 = v58;
    }
    while (v57 != v108);
  }
  if ((a4 & 0x40) != 0)
  {
    int v71 = v53[a2 - 2];
    int v72 = *v53;
    int v73 = *((unsigned __int8 *)v58 + 2);
    BOOL v24 = __OFSUB__(v72, v73);
    int v74 = v72 - v73;
    if ((v74 < 0) ^ v24 | (v74 == 0)) {
      int v75 = 0;
    }
    else {
      int v75 = 1;
    }
    int v76 = v75 | (v74 >> 31);
    BOOL v24 = __OFSUB__(v72, v71);
    int v77 = v72 - v71;
    if ((v77 < 0) ^ v24 | (v77 == 0)) {
      int v78 = 0;
    }
    else {
      int v78 = 1;
    }
    int v79 = *(char *)(a3 + (v78 | (v77 >> 31)) + v76 + 2) + v72;
    if (v79 >= 255) {
      int v79 = 255;
    }
    *uint64_t v53 = v79 & ~(v79 >> 31);
  }
  if ((a4 & 0xA) == 0xA)
  {
    int v80 = v53[(2 * v104 - 2) + a2];
    int v81 = v53[2 * (a7 - 1)];
    int v82 = *((unsigned __int8 *)v58 + (2 * (a7 - 1)) + 2);
    BOOL v24 = __OFSUB__(v81, v82);
    int v83 = v81 - v82;
    if ((v83 < 0) ^ v24 | (v83 == 0)) {
      int v84 = 0;
    }
    else {
      int v84 = 1;
    }
    int v85 = v84 | (v83 >> 31);
    BOOL v24 = __OFSUB__(v81, v80);
    int v86 = v81 - v80;
    if ((v86 < 0) ^ v24 | (v86 == 0)) {
      int v87 = 0;
    }
    else {
      int v87 = 1;
    }
    int v88 = *(char *)(a3 + (v87 | (v86 >> 31)) + v85 + 2) + v81;
    if (v88 >= 255) {
      int v88 = 255;
    }
    v53[2 * (a7 - 1)] = v88 & ~(v88 >> 31);
  }
  if ((a4 & 8) != 0)
  {
    uint64_t v89 = 0;
    uint64_t v90 = v104 - 1;
    int v91 = 2;
    do
    {
      int v92 = v53[a2 + (v89 >> 32)];
      int v93 = v53[v91 * 2 - 2];
      int v94 = LOBYTE(v58[v91]);
      BOOL v24 = __OFSUB__(v93, v94);
      int v95 = v93 - v94;
      if ((v95 < 0) ^ v24 | (v95 == 0)) {
        int v96 = 0;
      }
      else {
        int v96 = 1;
      }
      int v97 = v96 | (v95 >> 31);
      BOOL v24 = __OFSUB__(v93, v92);
      int v98 = v93 - v92;
      if ((v98 < 0) ^ v24 | (v98 == 0)) {
        int v99 = 0;
      }
      else {
        int v99 = 1;
      }
      int v100 = *(char *)(a3 + (v99 | (v98 >> 31)) + v97 + 2) + v93;
      if (v100 >= 255) {
        int v100 = 255;
      }
      v53[v91 * 2 - 2] = v100 & ~(v100 >> 31);
      ++v91;
      v89 += 0x200000000;
      --v90;
    }
    while (v90);
  }
  if (v105 >= 1)
  {
    uint64_t v101 = v105;
    char v102 = v111;
    do
    {
      char v103 = *v102++;
      *a5 = v103;
      a5 += 2;
      --v101;
    }
    while (v101);
  }
  return result;
}

void *sub_1D0D3026C(unsigned __int8 *__src, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, unsigned int a7, int a8)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  unsigned int v16 = v109;
  uint64_t v107 = (a8 - 1);
  if (a8 >= 1)
  {
    uint64_t v17 = a8;
    uint64_t v18 = (char *)&__src[2 * a7 - 2];
    uint64_t v19 = v111;
    do
    {
      *v19++ = *v18;
      v18 += a2;
      --v17;
    }
    while (v17);
  }
  uint64_t v101 = 2 * a7;
  int v20 = a4 & 6;
  uint64_t __n = 2 * a7;
  uint64_t result = memcpy(v109, __src, __n);
  char v108 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v22 = *__src;
    int v23 = *(a6 - 2);
    BOOL v24 = __OFSUB__(v22, v23);
    int v25 = v22 - v23;
    if ((v25 < 0) ^ v24 | (v25 == 0)) {
      int v26 = 0;
    }
    else {
      int v26 = 1;
    }
    int v27 = v26 | (v25 >> 31);
    int v28 = __src[a2 + 2];
    BOOL v24 = __OFSUB__(v22, v28);
    int v29 = v22 - v28;
    if ((v29 < 0) ^ v24 | (v29 == 0)) {
      int v30 = 0;
    }
    else {
      int v30 = 1;
    }
    int v31 = *(char *)(a3 + v27 + (v30 | (v29 >> 31)) + 2) + v22;
    if (v31 >= 255) {
      int v31 = 255;
    }
    *__src = v31 & ~(v31 >> 31);
  }
  if (v20 == 6)
  {
    int v32 = __src[(v101 - 2)];
    int v33 = a6[(v101 - 4)];
    BOOL v24 = __OFSUB__(v32, v33);
    int v34 = v32 - v33;
    if ((v34 < 0) ^ v24 | (v34 == 0)) {
      int v35 = 0;
    }
    else {
      int v35 = 1;
    }
    int v36 = v35 | (v34 >> 31);
    int v37 = __src[v101 + a2];
    BOOL v24 = __OFSUB__(v32, v37);
    int v38 = v32 - v37;
    if ((v38 < 0) ^ v24 | (v38 == 0)) {
      int v39 = 0;
    }
    else {
      int v39 = 1;
    }
    int v40 = *(char *)(a3 + v36 + (v39 | (v38 >> 31)) + 2) + v32;
    if (v40 >= 255) {
      int v40 = 255;
    }
    __src[(v101 - 2)] = v40 & ~(v40 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v41 = a7 - 1 - 1;
    uint64_t v42 = __src + 2;
    uint64_t v43 = 0x400000000;
    do
    {
      int v44 = *v42;
      int v45 = *a6;
      a6 += 2;
      int v46 = (v44 > v45) | ((v44 - v45) >> 31);
      int v47 = __src[a2 + (v43 >> 32)];
      BOOL v24 = __OFSUB__(v44, v47);
      int v48 = v44 - v47;
      if ((v48 < 0) ^ v24 | (v48 == 0)) {
        int v49 = 0;
      }
      else {
        int v49 = 1;
      }
      int v50 = *(char *)(a3 + v46 + (v49 | (v48 >> 31)) + 2) + v44;
      if (v50 >= 255) {
        int v50 = 255;
      }
      unsigned char *v42 = v50 & ~(v50 >> 31);
      v42 += 2;
      v43 += 0x200000000;
      --v41;
    }
    while (v41);
  }
  int v100 = a4 & 9;
  int v51 = (char *)&__src[a2];
  int v103 = a8;
  char v102 = a4;
  if (a8 < 3)
  {
    uint64_t v56 = v109;
  }
  else
  {
    int v52 = (unsigned __int8 *)&v110;
    uint64_t v53 = (a4 & 1) == 0;
    uint64_t v105 = ((a4 >> 1) | 0xFFFFFFFE) + a7 + 1 - v53;
    uint64_t v104 = (v53 << 33) + 0x200000000;
    uint64_t v54 = 2 * v53;
    uint64_t v55 = 1;
    do
    {
      uint64_t v56 = v52;
      uint64_t result = memcpy(v52, v51, __n);
      *(v56 - 2) = a5[2 * v55];
      uint64_t v57 = v54;
      uint64_t v58 = v104;
      uint64_t v59 = v105;
      do
      {
        int v60 = v51[v57];
        int v61 = v16[v57 - 2];
        BOOL v24 = __OFSUB__(v60, v61);
        int v62 = v60 - v61;
        if ((v62 < 0) ^ v24 | (v62 == 0)) {
          int v63 = 0;
        }
        else {
          int v63 = 1;
        }
        int v64 = v63 | (v62 >> 31);
        int v65 = v51[a2 + (v58 >> 32)];
        BOOL v24 = __OFSUB__(v60, v65);
        int v66 = v60 - v65;
        if ((v66 < 0) ^ v24 | (v66 == 0)) {
          int v67 = 0;
        }
        else {
          int v67 = 1;
        }
        int v68 = *(char *)(a3 + v64 + (v67 | (v66 >> 31)) + 2) + v60;
        if (v68 >= 255) {
          int v68 = 255;
        }
        v51[v57] = v68 & ~(v68 >> 31);
        v58 += 0x200000000;
        v57 += 2;
        --v59;
      }
      while (v59);
      ++v55;
      v51 += a2;
      int v52 = v16;
      unsigned int v16 = v56;
    }
    while (v55 != v107);
  }
  if (v100 == 9)
  {
    int v69 = *v51;
    int v70 = *(v56 - 2);
    BOOL v24 = __OFSUB__(v69, v70);
    int v71 = v69 - v70;
    if ((v71 < 0) ^ v24 | (v71 == 0)) {
      int v72 = 0;
    }
    else {
      int v72 = 1;
    }
    int v73 = v72 | (v71 >> 31);
    int v74 = v51[a2 + 2];
    BOOL v24 = __OFSUB__(v69, v74);
    int v75 = v69 - v74;
    if ((v75 < 0) ^ v24 | (v75 == 0)) {
      int v76 = 0;
    }
    else {
      int v76 = 1;
    }
    int v77 = *(char *)(a3 + v73 + (v76 | (v75 >> 31)) + 2) + v69;
    if (v77 >= 255) {
      int v77 = 255;
    }
    char *v51 = v77 & ~(v77 >> 31);
  }
  if (v102 < 0)
  {
    int v78 = v51[(v101 - 2)];
    int v79 = v56[(v101 - 4)];
    BOOL v24 = __OFSUB__(v78, v79);
    int v80 = v78 - v79;
    if ((v80 < 0) ^ v24 | (v80 == 0)) {
      int v81 = 0;
    }
    else {
      int v81 = 1;
    }
    int v82 = v81 | (v80 >> 31);
    int v83 = v51[v101 + a2];
    BOOL v24 = __OFSUB__(v78, v83);
    int v84 = v78 - v83;
    if ((v84 < 0) ^ v24 | (v84 == 0)) {
      int v85 = 0;
    }
    else {
      int v85 = 1;
    }
    int v86 = *(char *)(a3 + v82 + (v85 | (v84 >> 31)) + 2) + v78;
    if (v86 >= 255) {
      int v86 = 255;
    }
    v51[(v101 - 2)] = v86 & ~(v86 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    uint64_t v87 = a7 - 1 - 1;
    int v88 = v51 + 2;
    uint64_t v89 = 0x400000000;
    do
    {
      int v90 = *v88;
      int v91 = *v56;
      v56 += 2;
      int v92 = (v90 > v91) | ((v90 - v91) >> 31);
      int v93 = v51[a2 + (v89 >> 32)];
      BOOL v24 = __OFSUB__(v90, v93);
      int v94 = v90 - v93;
      if ((v94 < 0) ^ v24 | (v94 == 0)) {
        int v95 = 0;
      }
      else {
        int v95 = 1;
      }
      int v96 = *(char *)(a3 + v92 + (v95 | (v94 >> 31)) + 2) + v90;
      if (v96 >= 255) {
        int v96 = 255;
      }
      *int v88 = v96 & ~(v96 >> 31);
      v88 += 2;
      v89 += 0x200000000;
      --v87;
    }
    while (v87);
  }
  if (v103 >= 1)
  {
    uint64_t v97 = v103;
    int v98 = v111;
    do
    {
      char v99 = *v98++;
      *a5 = v99;
      a5 += 2;
      --v97;
    }
    while (v97);
  }
  return result;
}

uint64_t sub_1D0D306D8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, uint64_t a6, int a7)
{
  sub_1D0D2FE14(a1, a2, a3, a4, a5, a6, 32, a7);
  return sub_1D0D2FE14(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 32, a7);
}

void *sub_1D0D30764(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  sub_1D0D3026C(a1, a2, a3, a4, a5, a6, 0x20u, a7);
  return sub_1D0D3026C(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x20u, a7);
}

uint64_t sub_1D0D307F0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, uint64_t a6, int a7)
{
  sub_1D0D2FE14(a1, a2, a3, a4, a5, a6, 16, a7);
  return sub_1D0D2FE14(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 16, a7);
}

void *sub_1D0D3087C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  sub_1D0D3026C(a1, a2, a3, a4, a5, a6, 0x10u, a7);
  return sub_1D0D3026C(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 0x10u, a7);
}

uint64_t sub_1D0D30908(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, uint64_t a6, int a7)
{
  sub_1D0D2FE14(a1, a2, a3, a4, a5, a6, 8, a7);
  return sub_1D0D2FE14(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8, a7);
}

void *sub_1D0D30994(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  sub_1D0D3026C(a1, a2, a3, a4, a5, a6, 8u, a7);
  return sub_1D0D3026C(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 8u, a7);
}

unsigned char *sub_1D0D30A20(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, int a7)
{
  sub_1D0D2FD9C(a1, a2, a3, a5, 4u, a7);
  return sub_1D0D2FD9C(a1 + 1, a2, a3 + 32, a5 + 1, 4u, a7);
}

uint64_t sub_1D0D30A98(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, uint64_t a6, int a7)
{
  sub_1D0D2FE14(a1, a2, a3, a4, a5, a6, 4, a7);
  return sub_1D0D2FE14(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4, a7);
}

void *sub_1D0D30B24(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, int a7)
{
  sub_1D0D3026C(a1, a2, a3, a4, a5, a6, 4u, a7);
  return sub_1D0D3026C(a1 + 1, a2, a3 + 32, a4, a5 + 1, a6 + 1, 4u, a7);
}

void *sub_1D0D30BB0(unsigned __int8 *__src, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5, uint64_t a6, unsigned int a7, int a8)
{
  char v11 = a4;
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  size_t __n = ((a4 >> 1) & 1) + a7;
  uint64_t v104 = (a8 - 1);
  if (a8 >= 1)
  {
    int v15 = (char *)&__src[a7 - 1];
    unsigned int v16 = __srca;
    uint64_t v17 = a8;
    do
    {
      *v16++ = *v15;
      v15 += a2;
      --v17;
    }
    while (v17);
  }
  size_t v99 = a8;
  int v18 = ~a4 & 5;
  uint64_t result = memcpy(__dst, __src, __n);
  if (!v18)
  {
    int v20 = a5[1];
    int v21 = *__src;
    int v22 = *(unsigned __int8 *)(a6 + 1);
    BOOL v23 = __OFSUB__(v21, v22);
    int v24 = v21 - v22;
    if ((v24 < 0) ^ v23 | (v24 == 0)) {
      int v25 = 0;
    }
    else {
      int v25 = 1;
    }
    int v26 = v25 | (v24 >> 31);
    BOOL v23 = __OFSUB__(v21, v20);
    int v27 = v21 - v20;
    if ((v27 < 0) ^ v23 | (v27 == 0)) {
      int v28 = 0;
    }
    else {
      int v28 = 1;
    }
    int v29 = *(char *)(a3 + (v28 | (v27 >> 31)) + v26 + 2) + v21;
    if (v29 >= 255) {
      int v29 = 255;
    }
    *__src = v29 & ~(v29 >> 31);
  }
  if ((v11 & 0x20) != 0)
  {
    int v30 = __src[a7 - 2 + a2];
    int v31 = __src[a7 - 1];
    int v32 = *(unsigned __int8 *)(a6 + a7);
    BOOL v23 = __OFSUB__(v31, v32);
    int v33 = v31 - v32;
    if ((v33 < 0) ^ v23 | (v33 == 0)) {
      int v34 = 0;
    }
    else {
      int v34 = 1;
    }
    int v35 = v34 | (v33 >> 31);
    BOOL v23 = __OFSUB__(v31, v30);
    int v36 = v31 - v30;
    if ((v36 < 0) ^ v23 | (v36 == 0)) {
      int v37 = 0;
    }
    else {
      int v37 = 1;
    }
    int v38 = *(char *)(a3 + (v37 | (v36 >> 31)) + v35 + 2) + v31;
    if (v38 >= 255) {
      int v38 = 255;
    }
    __src[a7 - 1] = v38 & ~(v38 >> 31);
  }
  if ((v11 & 4) != 0)
  {
    uint64_t v39 = a7 - 1 - 1;
    int v40 = (unsigned __int8 *)(a6 + 2);
    uint64_t v41 = __src;
    do
    {
      int v42 = v41[a2];
      int v44 = *++v41;
      int v43 = v44;
      int v45 = *v40++;
      int v46 = (v43 > v45) | ((v43 - v45) >> 31);
      BOOL v23 = __OFSUB__(v43, v42);
      int v47 = v43 - v42;
      if ((v47 < 0) ^ v23 | (v47 == 0)) {
        int v48 = 0;
      }
      else {
        int v48 = 1;
      }
      int v49 = *(char *)(a3 + (v48 | (v47 >> 31)) + v46 + 2) + v43;
      if (v49 >= 255) {
        int v49 = 255;
      }
      *uint64_t v41 = v49 & ~(v49 >> 31);
      --v39;
    }
    while (v39);
  }
  uint64_t v100 = a7 - 1;
  unsigned int v101 = a7;
  char v102 = v11;
  int v50 = (char *)&__src[a2];
  int v103 = a8;
  if (a8 < 3)
  {
    uint64_t v56 = __dst;
  }
  else
  {
    int v51 = &v108;
    BOOL v52 = (v11 & 1) == 0;
    uint64_t v53 = (char *)&__src[2 * a2 - 1];
    uint64_t v54 = __dst;
    uint64_t v55 = 1;
    do
    {
      uint64_t v56 = v51;
      uint64_t result = memcpy(v51, v50, __n);
      uint64_t v57 = 0;
      ++v55;
      uint64_t v58 = v54 + 1;
      uint64_t v59 = v53;
      int v60 = v50;
      do
      {
        int v61 = (unsigned __int8 *)&v59[v52];
        if (!(v52 + v57)) {
          int v61 = &a5[v55];
        }
        int v62 = *v61;
        int v63 = v60[v52];
        int v64 = v58[v52];
        BOOL v23 = __OFSUB__(v63, v64);
        int v65 = v63 - v64;
        if ((v65 < 0) ^ v23 | (v65 == 0)) {
          int v66 = 0;
        }
        else {
          int v66 = 1;
        }
        int v67 = v66 | (v65 >> 31);
        BOOL v23 = __OFSUB__(v63, v62);
        int v68 = v63 - v62;
        if ((v68 < 0) ^ v23 | (v68 == 0)) {
          int v69 = 0;
        }
        else {
          int v69 = 1;
        }
        int v70 = *(char *)(a3 + (v69 | (v68 >> 31)) + v67 + 2) + v63;
        if (v70 >= 255) {
          int v70 = 255;
        }
        v60[v52] = v70 & ~(v70 >> 31);
        ++v57;
        ++v58;
        ++v60;
        ++v59;
      }
      while (v52 - (__n - 1) + v57);
      v50 += a2;
      v53 += a2;
      int v51 = v54;
      uint64_t v54 = v56;
    }
    while (v55 != v104);
  }
  if ((v102 & 0x40) != 0)
  {
    int v71 = v50[a2 - 1];
    int v72 = *v50;
    int v73 = v56[1];
    BOOL v23 = __OFSUB__(v72, v73);
    int v74 = v72 - v73;
    if ((v74 < 0) ^ v23 | (v74 == 0)) {
      int v75 = 0;
    }
    else {
      int v75 = 1;
    }
    int v76 = v75 | (v74 >> 31);
    BOOL v23 = __OFSUB__(v72, v71);
    int v77 = v72 - v71;
    if ((v77 < 0) ^ v23 | (v77 == 0)) {
      int v78 = 0;
    }
    else {
      int v78 = 1;
    }
    int v79 = *(char *)(a3 + (v78 | (v77 >> 31)) + v76 + 2) + v72;
    if (v79 >= 255) {
      int v79 = 255;
    }
    char *v50 = v79 & ~(v79 >> 31);
  }
  if ((v102 & 0xA) == 0xA)
  {
    int v80 = v50[v101 - 2 + a2];
    int v81 = v50[v100];
    int v82 = v56[v101];
    BOOL v23 = __OFSUB__(v81, v82);
    int v83 = v81 - v82;
    if ((v83 < 0) ^ v23 | (v83 == 0)) {
      int v84 = 0;
    }
    else {
      int v84 = 1;
    }
    int v85 = v84 | (v83 >> 31);
    BOOL v23 = __OFSUB__(v81, v80);
    int v86 = v81 - v80;
    if ((v86 < 0) ^ v23 | (v86 == 0)) {
      int v87 = 0;
    }
    else {
      int v87 = 1;
    }
    int v88 = *(char *)(a3 + (v87 | (v86 >> 31)) + v85 + 2) + v81;
    if (v88 >= 255) {
      int v88 = 255;
    }
    v50[v100] = v88 & ~(v88 >> 31);
  }
  if ((v102 & 8) != 0)
  {
    uint64_t v89 = v100 - 1;
    int v90 = (unsigned __int8 *)(v56 + 2);
    do
    {
      int v91 = v50[a2];
      int v93 = *++v50;
      int v92 = v93;
      int v94 = *v90++;
      int v95 = (v92 > v94) | ((v92 - v94) >> 31);
      BOOL v23 = __OFSUB__(v92, v91);
      int v96 = v92 - v91;
      if ((v96 < 0) ^ v23 | (v96 == 0)) {
        int v97 = 0;
      }
      else {
        int v97 = 1;
      }
      int v98 = *(char *)(a3 + (v97 | (v96 >> 31)) + v95 + 2) + v92;
      if (v98 >= 255) {
        int v98 = 255;
      }
      char *v50 = v98 & ~(v98 >> 31);
      --v89;
    }
    while (v89);
  }
  if (v103 >= 1) {
    return memcpy(a5, __srca, v99);
  }
  return result;
}

void *sub_1D0D30FDC(char *__src, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, unsigned __int8 *a6, size_t __n, int a8)
{
  int v9 = __n;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  int v15 = v104;
  uint64_t v100 = (a8 - 1);
  if (a8 >= 1)
  {
    unsigned int v16 = &__src[(__n - 1)];
    uint64_t v17 = __srca;
    uint64_t v18 = a8;
    do
    {
      *v17++ = *v16;
      v16 += a2;
      --v18;
    }
    while (v18);
  }
  size_t v94 = a8;
  int v19 = a4 & 6;
  size_t __na = __n;
  uint64_t result = memcpy(v104, __src, __n);
  char v103 = *a5;
  if ((a4 & 0x10) != 0)
  {
    int v21 = *__src;
    int v22 = *(a6 - 1);
    BOOL v23 = __OFSUB__(v21, v22);
    int v24 = v21 - v22;
    if ((v24 < 0) ^ v23 | (v24 == 0)) {
      int v25 = 0;
    }
    else {
      int v25 = 1;
    }
    int v26 = v25 | (v24 >> 31);
    int v27 = __src[a2 + 1];
    BOOL v23 = __OFSUB__(v21, v27);
    int v28 = v21 - v27;
    if ((v28 < 0) ^ v23 | (v28 == 0)) {
      int v29 = 0;
    }
    else {
      int v29 = 1;
    }
    int v30 = *(char *)(a3 + v26 + (v29 | (v28 >> 31)) + 2) + v21;
    if (v30 >= 255) {
      int v30 = 255;
    }
    *__src = v30 & ~(v30 >> 31);
  }
  if (v19 == 6)
  {
    int v31 = __src[v9 - 1];
    int v32 = a6[v9 - 2];
    BOOL v23 = __OFSUB__(v31, v32);
    int v33 = v31 - v32;
    if ((v33 < 0) ^ v23 | (v33 == 0)) {
      int v34 = 0;
    }
    else {
      int v34 = 1;
    }
    int v35 = v34 | (v33 >> 31);
    int v36 = __src[__na + a2];
    BOOL v23 = __OFSUB__(v31, v36);
    int v37 = v31 - v36;
    if ((v37 < 0) ^ v23 | (v37 == 0)) {
      int v38 = 0;
    }
    else {
      int v38 = 1;
    }
    int v39 = *(char *)(a3 + v35 + (v38 | (v37 >> 31)) + 2) + v31;
    if (v39 >= 255) {
      int v39 = 255;
    }
    __src[v9 - 1] = v39 & ~(v39 >> 31);
  }
  if ((a4 & 4) != 0)
  {
    uint64_t v40 = (v9 - 1) - 1;
    uint64_t v41 = __src + 2;
    do
    {
      int v42 = *(v41 - 1);
      int v43 = *a6++;
      int v44 = (v42 > v43) | ((v42 - v43) >> 31);
      int v45 = v41[a2];
      BOOL v23 = __OFSUB__(v42, v45);
      int v46 = v42 - v45;
      if ((v46 < 0) ^ v23 | (v46 == 0)) {
        int v47 = 0;
      }
      else {
        int v47 = 1;
      }
      int v48 = *(char *)(a3 + v44 + (v47 | (v46 >> 31)) + 2) + v42;
      if (v48 >= 255) {
        int v48 = 255;
      }
      *(v41++ - 1) = v48 & ~(v48 >> 31);
      --v40;
    }
    while (v40);
  }
  uint64_t v96 = (v9 - 1);
  int v95 = a4 & 9;
  int v49 = &__src[a2];
  char v97 = a4;
  int v98 = a8;
  if (a8 >= 3)
  {
    int v50 = __src;
    int v51 = (unsigned __int8 *)&v105;
    BOOL v99 = (a4 & 1) == 0;
    uint64_t v52 = ((a4 >> 1) | 0xFFFFFFFE) + v9 + 1;
    uint64_t v53 = &v50[2 * a2];
    uint64_t v54 = 1;
    do
    {
      uint64_t v55 = v15;
      int v15 = v51;
      uint64_t v56 = (char *)(v55 - 1);
      int v51 = v55;
      uint64_t result = memcpy(v15, v49, __na);
      *(v15 - 1) = a5[v54];
      uint64_t v57 = v99;
      do
      {
        int v58 = v49[v57];
        int v59 = v56[v57];
        BOOL v23 = __OFSUB__(v58, v59);
        int v60 = v58 - v59;
        if ((v60 < 0) ^ v23 | (v60 == 0)) {
          int v61 = 0;
        }
        else {
          int v61 = 1;
        }
        int v62 = v61 | (v60 >> 31);
        int v63 = v53[v57 + 1];
        BOOL v23 = __OFSUB__(v58, v63);
        int v64 = v58 - v63;
        if ((v64 < 0) ^ v23 | (v64 == 0)) {
          int v65 = 0;
        }
        else {
          int v65 = 1;
        }
        int v66 = *(char *)(a3 + v62 + (v65 | (v64 >> 31)) + 2) + v58;
        if (v66 >= 255) {
          int v66 = 255;
        }
        v49[v57++] = v66 & ~(v66 >> 31);
      }
      while (v52 != v57);
      ++v54;
      v49 += a2;
      v53 += a2;
    }
    while (v54 != v100);
  }
  if (v95 == 9)
  {
    int v67 = *v49;
    int v68 = *(v15 - 1);
    BOOL v23 = __OFSUB__(v67, v68);
    int v69 = v67 - v68;
    if ((v69 < 0) ^ v23 | (v69 == 0)) {
      int v70 = 0;
    }
    else {
      int v70 = 1;
    }
    int v71 = v70 | (v69 >> 31);
    int v72 = v49[a2 + 1];
    BOOL v23 = __OFSUB__(v67, v72);
    int v73 = v67 - v72;
    if ((v73 < 0) ^ v23 | (v73 == 0)) {
      int v74 = 0;
    }
    else {
      int v74 = 1;
    }
    int v75 = *(char *)(a3 + v71 + (v74 | (v73 >> 31)) + 2) + v67;
    if (v75 >= 255) {
      int v75 = 255;
    }
    char *v49 = v75 & ~(v75 >> 31);
  }
  if (v97 < 0)
  {
    int v76 = v49[v96];
    int v77 = v15[v9 - 2];
    BOOL v23 = __OFSUB__(v76, v77);
    int v78 = v76 - v77;
    if ((v78 < 0) ^ v23 | (v78 == 0)) {
      int v79 = 0;
    }
    else {
      int v79 = 1;
    }
    int v80 = v79 | (v78 >> 31);
    int v81 = v49[__na + a2];
    BOOL v23 = __OFSUB__(v76, v81);
    int v82 = v76 - v81;
    if ((v82 < 0) ^ v23 | (v82 == 0)) {
      int v83 = 0;
    }
    else {
      int v83 = 1;
    }
    int v84 = *(char *)(a3 + v80 + (v83 | (v82 >> 31)) + 2) + v76;
    if (v84 >= 255) {
      int v84 = 255;
    }
    v49[v96] = v84 & ~(v84 >> 31);
  }
  if ((v97 & 8) != 0)
  {
    uint64_t v85 = v96 - 1;
    int v86 = v49 + 2;
    do
    {
      int v87 = *(v86 - 1);
      int v88 = *v15++;
      int v89 = (v87 > v88) | ((v87 - v88) >> 31);
      int v90 = v86[a2];
      BOOL v23 = __OFSUB__(v87, v90);
      int v91 = v87 - v90;
      if ((v91 < 0) ^ v23 | (v91 == 0)) {
        int v92 = 0;
      }
      else {
        int v92 = 1;
      }
      int v93 = *(char *)(a3 + v89 + (v92 | (v91 >> 31)) + 2) + v87;
      if (v93 >= 255) {
        int v93 = 255;
      }
      *(v86++ - 1) = v93 & ~(v93 >> 31);
      --v85;
    }
    while (v85);
  }
  if (v98 >= 1) {
    return memcpy(a5, __srca, v94);
  }
  return result;
}

uint64_t sub_1D0D3140C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = sub_1D0D31464;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    uint64_t v2 = sub_1D0D31DBC;
    if (*(unsigned char *)(*(void *)(a2 + 16) + 283)) {
      uint64_t v2 = sub_1D0D31464;
    }
  }
  *(void *)(result + 448) = v2;
  *(void *)(result + 456) = 0;
  return result;
}

int8x16_t sub_1D0D31464(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t __dst)
{
  uint64_t v19 = MEMORY[0x1F4188790](a1);
  int v22 = &v112;
  STACK[0x242F8] = *MEMORY[0x1E4F143B8];
  uint64_t v126 = v20;
  uint64_t v23 = *(void *)(v20 + 8);
  int v24 = *(_DWORD *)(v19 + 16);
  int v25 = *(_DWORD *)(v19 + 20);
  int v26 = (unsigned __int8 *)(*(void *)(v23 + 1000) + 16 * v24 * v21);
  uint64_t v28 = *(void *)(v23 + 416);
  uint64_t v27 = *(void *)(v23 + 424);
  int v29 = *(_DWORD *)(v19 + 8);
  uint64_t v30 = *(int *)(v19 + 12);
  uint64_t v31 = (int)v30 * (uint64_t)v21;
  char v32 = *(unsigned char *)(v23 + 531);
  uint64_t v33 = *(void *)(v23 + 400) + ((v28 * v31) << v32);
  uint64_t v34 = *(void *)(v23 + 408) + ((v27 * v31) << v32);
  uint64_t v129 = *(void *)(v19 + 48);
  uint64_t v130 = *(void *)(v19 + 32);
  if (v21) {
    uint64_t v35 = 38;
  }
  else {
    uint64_t v35 = 2;
  }
  if (v21) {
    int v36 = 17;
  }
  else {
    int v36 = 1;
  }
  unsigned int v125 = v21;
  uint64_t v123 = v19;
  uint64_t v127 = *(void *)(v23 + 408) + ((v27 * v31) << v32);
  uint64_t v114 = *(void *)(v20 + 8);
  if (v25 - 1 <= v21)
  {
    int v39 = (int8x16_t *)v19;
    unsigned int v128 = *(_DWORD *)(v23 + 524) - v31;
  }
  else
  {
    uint64_t v35 = v35 | 0x88;
    v36 |= 0x40u;
    uint64_t v37 = *(int *)(v23 + 520);
    memcpy(*(void **)(v19 + 40), (const void *)(v33 + 2 * v28 * (v30 - 1)), 2 * v37);
    size_t v38 = 4 * v37;
    int v39 = (int8x16_t *)v123;
    memcpy(*(void **)(v123 + 56), (const void *)(v34 + 2 * v27 * (*(int *)(v123 + 12) - 1)), v38);
    unsigned int v128 = *(_DWORD *)(v123 + 12);
    int v24 = *(_DWORD *)(v123 + 16);
  }
  uint64_t v122 = v28;
  uint64_t v118 = v27;
  if (v24 < 2)
  {
    uint64_t v43 = 0;
    BOOL v67 = 0;
    unsigned int vars8 = 0;
  }
  else
  {
    long long v113 = &v112;
    LODWORD(v40) = 0;
    uint64_t v41 = v39;
    BOOL v42 = 0;
    uint64_t v43 = 0;
    uint64_t v41 = (int8x16_t *)((char *)v41 + 72);
    uint64_t v115 = (uint64_t)&v41[5].i64[5 * v29];
    uint64_t v116 = v128;
    int v117 = (uint64_t *)&v41[-7] + 5 * v29 - 1;
    unsigned int vars8_4 = v36 | v35;
    uint64_t v44 = 2 * v118;
    do
    {
      uint64_t v45 = sub_1D0C5EB40(v126, v43, v125, v35);
      int v47 = v45;
      unint64_t v48 = *v26;
      BOOL v49 = (v48 & 1) == 0;
      int v124 = v49;
      if (v48)
      {
        unsigned int vars8 = v40;
        uint64_t v40 = v45;
        uint64_t v50 = (v48 >> 1) & 7;
        if (v50 > 4) {
          return result;
        }
        if (v50 == 4)
        {
          uint64_t v51 = 0;
          unsigned __int8 v52 = v26[13];
          *(_OWORD *)&STACK[0x24200] = 0u;
          *(_OWORD *)&STACK[0x24210] = 0u;
          do
          {
            *((unsigned char *)&STACK[0x24200] + ((v52 + (_BYTE)v51) & 0x1F)) = v26[v51 + 1];
            ++v51;
          }
          while (v51 != 4);
        }
        else
        {
          LOWORD(STACK[0x24200]) = *(_WORD *)(v26 + 1);
          LOWORD(STACK[0x24203]) = *(_WORD *)(v26 + 3);
          LOBYTE(STACK[0x24202]) = 0;
        }
        if (v42 && (int)v128 > 0)
        {
          uint64_t v53 = (_WORD *)(v33 - 2);
          uint64_t v54 = &STACK[0x24240];
          uint64_t v55 = v116;
          do
          {
            *(_WORD *)uint64_t v54 = *v53;
            uint64_t v54 = (unint64_t *)((char *)v54 + 2);
            v53 += v122;
            --v55;
          }
          while (v55);
        }
        sub_1D0CCC10C(&__dst, v126, v43 << *(_DWORD *)(v123 + 8), v125 << *(_DWORD *)(v123 + 8), *(_DWORD *)(v123 + 12), v128, 0);
        uint64_t v56 = (void (*)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))v117[v50];
        int v47 = v40;
        v56(v33, v122, &STACK[0x24200], v40, &STACK[0x24240], v130, v128);
        sub_1D0CCC1C0(&__dst);
        LODWORD(v48) = *v26;
        BOOL v49 = v124;
        LOBYTE(v40) = vars8;
      }
      BOOL v57 = (v48 & 0x10) == 0;
      if ((v48 & 0x10) != 0)
      {
        if (v48 > 0x9F) {
          return result;
        }
        HIDWORD(vars0) = v47;
        unsigned int vars8 = v48 >> 5;
        if (v48 >> 5 == 4)
        {
          uint64_t v58 = 0;
          unsigned __int8 v59 = v26[14];
          *(_OWORD *)&STACK[0x24200] = 0u;
          *(_OWORD *)&STACK[0x24210] = 0u;
          do
          {
            *((unsigned char *)&STACK[0x24200] + ((v59 + (_BYTE)v58) & 0x1F)) = v26[v58 + 5];
            ++v58;
          }
          while (v58 != 4);
          uint64_t v60 = 0;
          unsigned __int8 v61 = v26[15];
          *(_OWORD *)&STACK[0x24220] = 0u;
          *(_OWORD *)&STACK[0x24230] = 0u;
          do
          {
            *((unsigned char *)&STACK[0x24220] + ((v61 + (_BYTE)v60) & 0x1F)) = v26[v60 + 9];
            ++v60;
          }
          while (v60 != 4);
        }
        else
        {
          LOWORD(STACK[0x24200]) = *(_WORD *)(v26 + 5);
          LOWORD(STACK[0x24203]) = *(_WORD *)(v26 + 7);
          LOBYTE(STACK[0x24202]) = 0;
          LOWORD(STACK[0x24220]) = *(_WORD *)(v26 + 9);
          LOWORD(STACK[0x24223]) = *(_WORD *)(v26 + 11);
          LOBYTE(STACK[0x24222]) = 0;
        }
        BOOL v62 = v57;
        if ((v40 & ((int)v128 > 0)) == 1)
        {
          int v63 = (_DWORD *)(v127 - 4);
          int v64 = &STACK[0x240C0];
          uint64_t v65 = v116;
          do
          {
            *(_DWORD *)int v64 = *v63;
            int v64 = (unint64_t *)((char *)v64 + 4);
            int v63 = (_DWORD *)((char *)v63 + v44);
            --v65;
          }
          while (v65);
        }
        sub_1D0CCC10C(&__dst, v126, v43 << *(_DWORD *)(v123 + 8), v125 << *(_DWORD *)(v123 + 8), *(_DWORD *)(v123 + 12), v128, 1u);
        (*(void (**)(uint64_t, uint64_t, unint64_t *, void, unint64_t *, uint64_t, void))(v115 + 8 * vars8))(v127, v118, &STACK[0x24200], HIDWORD(vars0), &STACK[0x240C0], v129, v128);
        sub_1D0CCC1C0(&__dst);
        BOOL v57 = v62;
        BOOL v49 = v124;
      }
      uint64_t v66 = *(int *)(v123 + 12);
      v33 += 2 * v66;
      v127 += 4 * v66;
      v129 += 4 * v66;
      v130 += 2 * v66;
      v26 += 16;
      uint64_t v43 = (v43 + 1);
      uint64_t v35 = vars8_4;
      LODWORD(v40) = v57;
      BOOL v42 = v49;
    }
    while ((int)v43 < *(_DWORD *)(v123 + 16) - 1);
    BOOL v67 = v49;
    unsigned int vars8 = v57;
    LOBYTE(v35) = vars8_4;
    int v22 = v113;
    int v39 = (int8x16_t *)v123;
  }
  int v68 = sub_1D0C5EB40(v126, v43, v125, v35 & 0x5D);
  int v69 = *(_DWORD *)(v114 + 520) - (v39[1].i32[0] - 1) * v39->i32[3];
  unint64_t v70 = *v26;
  if (v70)
  {
    uint64_t v71 = (v70 >> 1) & 7;
    if (v71 > 4) {
      return result;
    }
    if (v71 == 4)
    {
      uint64_t v72 = 0;
      unsigned __int8 v73 = v26[13];
      *(_OWORD *)&STACK[0x24200] = 0u;
      *(_OWORD *)&STACK[0x24210] = 0u;
      do
      {
        *((unsigned char *)&STACK[0x24200] + ((v73 + (_BYTE)v72) & 0x1F)) = v26[v72 + 1];
        ++v72;
      }
      while (v72 != 4);
    }
    else
    {
      LOWORD(STACK[0x24200]) = *(_WORD *)(v26 + 1);
      LOWORD(STACK[0x24203]) = *(_WORD *)(v26 + 3);
      LOBYTE(STACK[0x24202]) = 0;
    }
    long long v113 = v22;
    if ((int)v128 > 0 && v67)
    {
      int v75 = (_WORD *)(v33 - 2);
      int v76 = &STACK[0x24240];
      uint64_t v77 = v128;
      do
      {
        *(_WORD *)int v76 = *v75;
        int v76 = (unint64_t *)((char *)v76 + 2);
        v75 += v122;
        --v77;
      }
      while (v77);
    }
    sub_1D0CCC10C(&__dst, v126, v43 << v39->i32[2], v125 << v39->i32[2], v69, v128, 0);
    int v78 = v39;
    if ((v68 & 4) != 0) {
      int v79 = 34;
    }
    else {
      int v79 = 2;
    }
    if ((v68 & 4) != 0) {
      int v80 = 17;
    }
    else {
      int v80 = 1;
    }
    unsigned int v81 = v79 & 0xFFFFFF7F | (((v68 & 8) != 0) << 7);
    unsigned int v82 = v80 & 0xFFFFFFBF | (((v68 & 8) != 0) << 6);
    unsigned int vars8_4 = v69;
    int v83 = v69 >> 3;
    int v84 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))&v78[12]
        + v71;
    uint64_t v85 = 4;
    int v86 = v68;
    do
    {
      if ((v83 & (1 << --v85)) != 0)
      {
        v83 -= 1 << v85;
        if (v83) {
          unsigned int v87 = v81;
        }
        else {
          unsigned int v87 = 0;
        }
        uint64_t v88 = v87 | v86;
        int v86 = v86 & 0xC | v82;
        (*v84)(v33, v122, &STACK[0x24200], v88, &STACK[0x24240], v130, v128);
        v33 += 2 * (8 << v85);
        v130 += 2 * (8 << v85);
      }
      v84 -= 5;
    }
    while (v85);
    sub_1D0CCC1C0(&__dst);
    LODWORD(v70) = *v26;
    int v22 = v113;
    int v39 = (int8x16_t *)v123;
    int v69 = vars8_4;
  }
  if ((v70 & 0x10) == 0)
  {
LABEL_96:
    int8x16_t result = vextq_s8(v39[2], v39[2], 8uLL);
    int8x16_t v111 = vextq_s8(v39[3], v39[3], 8uLL);
    v39[2] = result;
    v39[3] = v111;
    return result;
  }
  if (v70 <= 0x9F)
  {
    unsigned int v89 = v70 >> 5;
    if (v70 >> 5 == 4)
    {
      uint64_t v90 = 0;
      unsigned __int8 v91 = v26[14];
      *(_OWORD *)&STACK[0x24200] = 0u;
      *(_OWORD *)&STACK[0x24210] = 0u;
      uint64_t v92 = v127;
      unsigned int v93 = vars8;
      do
      {
        *((unsigned char *)&STACK[0x24200] + ((v91 + (_BYTE)v90) & 0x1F)) = v26[v90 + 5];
        ++v90;
      }
      while (v90 != 4);
      uint64_t v94 = 0;
      unsigned __int8 v95 = v26[15];
      *(_OWORD *)&STACK[0x24220] = 0u;
      *(_OWORD *)&STACK[0x24230] = 0u;
      do
      {
        *((unsigned char *)&STACK[0x24220] + ((v95 + (_BYTE)v94) & 0x1F)) = v26[v94 + 9];
        ++v94;
      }
      while (v94 != 4);
    }
    else
    {
      LOWORD(STACK[0x24200]) = *(_WORD *)(v26 + 5);
      LOWORD(STACK[0x24203]) = *(_WORD *)(v26 + 7);
      LOBYTE(STACK[0x24202]) = 0;
      LOWORD(STACK[0x24220]) = *(_WORD *)(v26 + 9);
      LOWORD(STACK[0x24223]) = *(_WORD *)(v26 + 11);
      LOBYTE(STACK[0x24222]) = 0;
      uint64_t v92 = v127;
      unsigned int v93 = vars8;
    }
    long long v113 = v22;
    if ((int)v128 > 0) {
      unsigned int v96 = v93;
    }
    else {
      unsigned int v96 = 0;
    }
    if (v96 == 1)
    {
      char v97 = (_DWORD *)(v92 - 4);
      uint64_t v98 = 2 * v118;
      BOOL v99 = &STACK[0x240C0];
      uint64_t v100 = v128;
      do
      {
        *(_DWORD *)BOOL v99 = *v97;
        BOOL v99 = (unint64_t *)((char *)v99 + 4);
        char v97 = (_DWORD *)((char *)v97 + v98);
        --v100;
      }
      while (v100);
    }
    sub_1D0CCC10C(&__dst, v126, v43 << v39->i32[2], v125 << v39->i32[2], v69, v128, 1u);
    if ((v68 & 4) != 0) {
      int v101 = 34;
    }
    else {
      int v101 = 2;
    }
    if ((v68 & 4) != 0) {
      int v102 = 17;
    }
    else {
      int v102 = 1;
    }
    unsigned int v103 = v101 & 0xFFFFFF7F | (((v68 & 8) != 0) << 7);
    unsigned int v104 = v102 & 0xFFFFFFBF | (((v68 & 8) != 0) << 6);
    int v105 = v69 >> 2;
    uint64_t v106 = &v39[24].i64[v89 + 1];
    uint64_t v107 = 5;
    uint64_t v108 = v118;
    do
    {
      if ((v105 & (1 << --v107)) != 0)
      {
        v105 -= 1 << v107;
        if (v105) {
          unsigned int v109 = v103;
        }
        else {
          unsigned int v109 = 0;
        }
        uint64_t v110 = v109 | v68;
        int v68 = v68 & 0xC | v104;
        ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))*v106)(v92, v108, &STACK[0x24200], v110, &STACK[0x240C0], v129, v128);
        v92 += 2 * (8 << v107);
        v129 += 2 * (8 << v107);
      }
      v106 -= 5;
    }
    while (v107);
    sub_1D0CCC1C0(&__dst);
    int v39 = (int8x16_t *)v123;
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1D0D31DBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,long long a53,long long a54,long long a55,long long a56,char a57)
{
  BOOL v57 = (int8x16_t *)a1;
  STACK[0x578] = *MEMORY[0x1E4F143B8];
  uint64_t vars0 = a2;
  uint64_t v58 = *(void *)(a2 + 8);
  int v59 = *(_DWORD *)(a1 + 16);
  int v60 = *(_DWORD *)(a1 + 20);
  unsigned __int8 v61 = (unsigned __int8 *)(*(void *)(v58 + 1000) + 16 * v59 * a3);
  uint64_t v62 = *(void *)(v58 + 416);
  uint64_t v63 = *(void *)(v58 + 424);
  int v64 = *(_DWORD *)(a1 + 8);
  uint64_t v65 = *(int *)(a1 + 12);
  uint64_t v66 = (int)v65 * (uint64_t)a3;
  char v67 = *(unsigned char *)(v58 + 531);
  uint64_t v68 = *(void *)(v58 + 400) + ((v62 * v66) << v67);
  uint64_t v69 = *(void *)(v58 + 408) + ((v63 * v66) << v67);
  uint64_t v169 = *(void *)(a1 + 48);
  uint64_t v170 = *(void *)(a1 + 32);
  if (a3) {
    uint64_t v70 = 38;
  }
  else {
    uint64_t v70 = 2;
  }
  if (a3) {
    int v71 = 17;
  }
  else {
    int v71 = 1;
  }
  HIDWORD(vars8) = a3;
  uint64_t v160 = v62;
  uint64_t v161 = v63;
  uint64_t v155 = v58;
  if (v60 - 1 <= a3)
  {
    int v168 = *(_DWORD *)(v58 + 524) - v66;
  }
  else
  {
    uint64_t v70 = v70 | 0x88;
    v71 |= 0x40u;
    uint64_t v72 = v63;
    uint64_t v73 = *(int *)(v58 + 520);
    uint64_t v74 = v68;
    memcpy(*(void **)(a1 + 40), (const void *)(v68 + 2 * v62 * (v65 - 1)), 2 * v73);
    memcpy((void *)v57[3].i64[1], (const void *)(v69 + 2 * v72 * (v57->i32[3] - 1)), 4 * v73);
    uint64_t v68 = v74;
    int v168 = v57->i32[3];
    int v59 = v57[1].i32[0];
  }
  char v163 = v57;
  uint64_t v156 = &v154;
  if (v59 < 2)
  {
    uint64_t v107 = v68;
    uint64_t v77 = 0;
    BOOL v106 = 0;
    BOOL v167 = 0;
  }
  else
  {
    BOOL v75 = 0;
    BOOL v76 = 0;
    uint64_t v77 = 0;
    uint64_t v157 = (uint64_t)&v57[9].i64[5 * v64 + 1];
    uint64_t v158 = v168;
    uint64_t v159 = (uint64_t)&v57[-3].i64[5 * v64];
    HIDWORD(v162) = v71 | v70;
    uint64_t v78 = 2 * v160;
    uint64_t v79 = 2 * v161;
    do
    {
      uint64_t v166 = v68;
      uint64_t v80 = sub_1D0C5EB40(vars0, v77, HIDWORD(vars8), v70);
      unint64_t v82 = *v61;
      BOOL v83 = (v82 & 1) == 0;
      if (v82)
      {
        uint64_t v84 = (v82 >> 1) & 7;
        if (v84 > 4) {
          return result;
        }
        if (v84 == 4)
        {
          uint64_t v85 = 0;
          unsigned __int8 v86 = v61[13];
          a53 = 0u;
          a54 = 0u;
          uint64_t v87 = v166;
          do
          {
            *((unsigned char *)&a53 + ((v86 + (_BYTE)v85) & 0x1F)) = v61[v85 + 1];
            ++v85;
          }
          while (v85 != 4);
        }
        else
        {
          LOWORD(a53) = *(_WORD *)(v61 + 1);
          *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 3);
          BYTE2(a53) = 0;
          uint64_t v87 = v166;
        }
        BOOL v88 = v83;
        if (v76 && v168 > 0)
        {
          unsigned int v89 = (_WORD *)(v87 - 2);
          uint64_t v90 = &a57;
          uint64_t v91 = v158;
          do
          {
            *(_WORD *)uint64_t v90 = *v89;
            v90 += 2;
            unsigned int v89 = (_WORD *)((char *)v89 + v78);
            --v91;
          }
          while (v91);
        }
        uint64_t v92 = v80;
        (*(void (**)(uint64_t, uint64_t, long long *))(v159 + 8 * v84))(v87, v160, &a53);
        uint64_t v80 = v92;
        LODWORD(v82) = *v61;
        BOOL v83 = v88;
      }
      BOOL v93 = (v82 & 0x10) == 0;
      uint64_t v94 = v69;
      if ((v82 & 0x10) != 0)
      {
        if (v82 > 0x9F) {
          return result;
        }
        unsigned int v95 = v82 >> 5;
        if (v95 == 4)
        {
          uint64_t v96 = 0;
          unsigned __int8 v97 = v61[14];
          a53 = 0u;
          a54 = 0u;
          do
          {
            *((unsigned char *)&a53 + ((v97 + (_BYTE)v96) & 0x1F)) = v61[v96 + 5];
            ++v96;
          }
          while (v96 != 4);
          uint64_t v98 = 0;
          unsigned __int8 v99 = v61[15];
          a55 = 0u;
          a56 = 0u;
          do
          {
            *((unsigned char *)&a55 + ((v99 + (_BYTE)v98) & 0x1F)) = v61[v98 + 9];
            ++v98;
          }
          while (v98 != 4);
        }
        else
        {
          LOWORD(a53) = *(_WORD *)(v61 + 5);
          *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 7);
          BYTE2(a53) = 0;
          LOWORD(a55) = *(_WORD *)(v61 + 9);
          *(_WORD *)((char *)&a55 + 3) = *(_WORD *)(v61 + 11);
          BYTE2(a55) = 0;
        }
        BOOL v100 = v83;
        BOOL v101 = v93;
        if (v75 && v168 > 0)
        {
          int v102 = (_DWORD *)(v94 - 4);
          unsigned int v103 = &a13;
          uint64_t v104 = v158;
          do
          {
            *(_DWORD *)unsigned int v103 = *v102;
            v103 += 4;
            int v102 = (_DWORD *)((char *)v102 + v79);
            --v104;
          }
          while (v104);
        }
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))(v157 + 8 * v95))(v94, v161, &a53, v80, &a13, v169, v168);
        BOOL v93 = v101;
        BOOL v83 = v100;
      }
      uint64_t v105 = v163->i32[3];
      uint64_t v68 = v166 + 2 * v105;
      uint64_t v69 = v94 + 4 * v105;
      v169 += 4 * v105;
      v170 += 2 * v105;
      v61 += 16;
      uint64_t v77 = (v77 + 1);
      uint64_t v70 = HIDWORD(v162);
      BOOL v75 = v93;
      BOOL v76 = v83;
    }
    while ((int)v77 < v163[1].i32[0] - 1);
    BOOL v106 = v83;
    BOOL v167 = v93;
    uint64_t v107 = v68;
    LOBYTE(v70) = BYTE4(v162);
    BOOL v57 = v163;
  }
  int v108 = sub_1D0C5EB40(vars0, v77, HIDWORD(vars8), v70 & 0x5D);
  int v109 = *(_DWORD *)(v155 + 520) - (v57[1].i32[0] - 1) * v57->i32[3];
  unint64_t v110 = *v61;
  if (v110)
  {
    uint64_t v111 = (v110 >> 1) & 7;
    if (v111 > 4) {
      return result;
    }
    HIDWORD(vars8) = v108;
    if (v111 == 4)
    {
      uint64_t v112 = 0;
      unsigned __int8 v113 = v61[13];
      int8x16_t result = 0uLL;
      a53 = 0u;
      a54 = 0u;
      uint64_t v114 = v107;
      uint64_t v115 = v160;
      do
      {
        *((unsigned char *)&a53 + ((v113 + (_BYTE)v112) & 0x1F)) = v61[v112 + 1];
        ++v112;
      }
      while (v112 != 4);
    }
    else
    {
      LOWORD(a53) = *(_WORD *)(v61 + 1);
      *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 3);
      BYTE2(a53) = 0;
      uint64_t v114 = v107;
      uint64_t v115 = v160;
    }
    uint64_t vars0 = v69;
    if (v168 > 0 && v106)
    {
      int v117 = (_WORD *)(v114 - 2);
      uint64_t v118 = &a57;
      uint64_t v119 = v168;
      do
      {
        *(_WORD *)uint64_t v118 = *v117;
        v118 += 2;
        v117 += v115;
        --v119;
      }
      while (v119);
    }
    char v120 = BYTE4(vars8);
    if ((vars8 & 0x400000000) != 0) {
      char v121 = 17;
    }
    else {
      char v121 = 1;
    }
    char v122 = v121 & 0xBF | (((vars8 & 0x800000000) != 0) << 6);
    HIDWORD(v162) = v109;
    int v123 = v109 >> 3;
    int v124 = (void (**)(void))&v57[12] + v111;
    uint64_t v125 = 4;
    do
    {
      if ((v123 & (1 << --v125)) != 0)
      {
        v123 -= 1 << v125;
        char v120 = v120 & 0xC | v122;
        uint64_t v126 = v114;
        (*v124)();
        uint64_t v114 = v126 + 2 * (8 << v125);
        v170 += 2 * (8 << v125);
      }
      v124 -= 5;
    }
    while (v125);
    LODWORD(v110) = *v61;
    uint64_t v69 = vars0;
    int v108 = HIDWORD(vars8);
    int v109 = HIDWORD(v162);
  }
  if ((v110 & 0x10) == 0)
  {
LABEL_89:
    unsigned int v152 = v163;
    int8x16_t result = vextq_s8(v163[2], v163[2], 8uLL);
    int8x16_t v153 = vextq_s8(v163[3], v163[3], 8uLL);
    v163[2] = result;
    v152[3] = v153;
    return result;
  }
  if (v110 <= 0x9F)
  {
    uint64_t v127 = v69;
    int v128 = v108;
    unsigned int v129 = v110 >> 5;
    if (v129 == 4)
    {
      uint64_t v130 = 0;
      unsigned __int8 v131 = v61[14];
      a53 = 0u;
      a54 = 0u;
      int v132 = v163;
      uint64_t v133 = v69;
      BOOL v134 = v167;
      do
      {
        *((unsigned char *)&a53 + ((v131 + (_BYTE)v130) & 0x1F)) = v61[v130 + 5];
        ++v130;
      }
      while (v130 != 4);
      uint64_t v135 = 0;
      unsigned __int8 v136 = v61[15];
      a55 = 0u;
      a56 = 0u;
      do
      {
        *((unsigned char *)&a55 + ((v136 + (_BYTE)v135) & 0x1F)) = v61[v135 + 9];
        ++v135;
      }
      while (v135 != 4);
    }
    else
    {
      LOWORD(a53) = *(_WORD *)(v61 + 5);
      *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 7);
      BYTE2(a53) = 0;
      LOWORD(a55) = *(_WORD *)(v61 + 9);
      *(_WORD *)((char *)&a55 + 3) = *(_WORD *)(v61 + 11);
      BYTE2(a55) = 0;
      int v132 = v163;
      uint64_t v133 = v69;
      BOOL v134 = v167;
    }
    if (v168 > 0 && v134)
    {
      unsigned int v138 = (_DWORD *)(v133 - 4);
      uint64_t v139 = 2 * v161;
      uint64_t v140 = &a13;
      uint64_t v141 = v168;
      do
      {
        *(_DWORD *)uint64_t v140 = *v138;
        v140 += 4;
        unsigned int v138 = (_DWORD *)((char *)v138 + v139);
        --v141;
      }
      while (v141);
    }
    if ((v128 & 4) != 0) {
      int v142 = 34;
    }
    else {
      int v142 = 2;
    }
    if ((v128 & 4) != 0) {
      int v143 = 17;
    }
    else {
      int v143 = 1;
    }
    unsigned int v144 = v142 & 0xFFFFFF7F | (((v128 & 8) != 0) << 7);
    unsigned int v145 = v143 & 0xFFFFFFBF | (((v128 & 8) != 0) << 6);
    int v146 = v109 >> 2;
    uint64_t v147 = &v132[24].i64[v129 + 1];
    uint64_t v148 = 5;
    do
    {
      if ((v146 & (1 << --v148)) != 0)
      {
        v146 -= 1 << v148;
        if (v146) {
          unsigned int v149 = v144;
        }
        else {
          unsigned int v149 = 0;
        }
        uint64_t v150 = v149 | v128;
        int v128 = v128 & 0xC | v145;
        uint64_t v151 = v127;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))*v147)(v127, v161, &a53, v150, &a13, v169, v168);
        uint64_t v127 = v151 + 2 * (8 << v148);
        v169 += 2 * (8 << v148);
      }
      v147 -= 5;
    }
    while (v148);
    goto LABEL_89;
  }
  return result;
}

uint64_t sub_1D0D325AC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = sub_1D0D32604;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    uint64_t v2 = sub_1D0D32ED0;
    if (*(unsigned char *)(*(void *)(a2 + 16) + 283)) {
      uint64_t v2 = sub_1D0D32604;
    }
  }
  *(void *)(result + 448) = v2;
  *(void *)(result + 456) = 0;
  return result;
}

int8x16_t sub_1D0D32604(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,long long a38,long long a39,long long a40,long long a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t __dst)
{
  uint64_t v56 = MEMORY[0x1F4188790](a1);
  uint64_t v58 = &v159;
  STACK[0x12218] = *MEMORY[0x1E4F143B8];
  uint64_t v173 = v59;
  uint64_t v60 = *(void *)(v59 + 8);
  int v61 = *(_DWORD *)(v56 + 16);
  int v62 = *(_DWORD *)(v56 + 20);
  uint64_t v63 = (unsigned __int8 *)(*(void *)(v60 + 1000) + 16 * v61 * v57);
  uint64_t v64 = *(void *)(v60 + 416);
  uint64_t v65 = *(void *)(v60 + 424);
  int v66 = *(_DWORD *)(v56 + 8);
  uint64_t v67 = *(int *)(v56 + 12);
  uint64_t v68 = (int)v67 * (uint64_t)v57;
  char v69 = *(unsigned char *)(v60 + 531);
  uint64_t v70 = *(void *)(v60 + 400) + ((v64 * v68) << v69);
  uint64_t v71 = *(void *)(v60 + 408) + ((v65 * v68) << v69);
  uint64_t v72 = *(void *)(v56 + 32);
  uint64_t v73 = *(void *)(v56 + 48);
  if (v57) {
    uint64_t v74 = 38;
  }
  else {
    uint64_t v74 = 2;
  }
  if (v57) {
    int v75 = 17;
  }
  else {
    int v75 = 1;
  }
  unsigned int vars8_4 = v57;
  uint64_t v169 = v64;
  uint64_t vars0 = (int8x16_t *)v56;
  uint64_t v166 = v65;
  uint64_t v174 = v73;
  uint64_t v175 = v71;
  uint64_t v161 = v60;
  if (v62 - 1 <= v57)
  {
    int vars8 = v75;
    unsigned int v176 = *(_DWORD *)(v60 + 524) - v68;
  }
  else
  {
    uint64_t v76 = v56;
    uint64_t v74 = v74 | 0x88;
    int vars8 = v75 | 0x40;
    size_t v77 = *(int *)(v60 + 520);
    memcpy(*(void **)(v56 + 40), (const void *)(v70 + v64 * (v67 - 1)), v77);
    memcpy(*(void **)(v76 + 56), (const void *)(v71 + v65 * (*(int *)(v76 + 12) - 1)), 2 * v77);
    unsigned int v176 = *(_DWORD *)(v76 + 12);
    int v61 = *(_DWORD *)(v76 + 16);
  }
  if (v61 < 2)
  {
    uint64_t v80 = 0;
    BOOL v109 = 0;
    BOOL v168 = 0;
  }
  else
  {
    uint64_t v160 = &v159;
    LODWORD(v78) = 0;
    BOOL v79 = 0;
    uint64_t v80 = 0;
    uint64_t v162 = (uint64_t)&vars0[9].i64[5 * v66 + 1];
    uint64_t v163 = v176;
    uint64_t v164 = (uint64_t)&vars0[-3].i64[5 * v66];
    unsigned int v167 = vars8 | v74;
    do
    {
      uint64_t v81 = sub_1D0C5EB40(v173, v80, vars8_4, v74);
      int v83 = v81;
      unint64_t v84 = *v63;
      BOOL v85 = (v84 & 1) == 0;
      int vars8 = v85;
      if (v84)
      {
        BOOL v168 = v78;
        BOOL v78 = v72;
        uint64_t v86 = v81;
        uint64_t v87 = (v84 >> 1) & 7;
        if (v87 > 4) {
          return result;
        }
        if (v87 == 4)
        {
          uint64_t v88 = 0;
          unsigned __int8 v89 = v63[13];
          a38 = 0u;
          a39 = 0u;
          uint64_t v90 = v169;
          do
          {
            *((unsigned char *)&a38 + ((v89 + (_BYTE)v88) & 0x1F)) = v63[v88 + 1];
            ++v88;
          }
          while (v88 != 4);
        }
        else
        {
          LOWORD(a38) = *(_WORD *)(v63 + 1);
          *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 3);
          BYTE2(a38) = 0;
          uint64_t v90 = v169;
        }
        if (v79 && (int)v176 > 0)
        {
          uint64_t v91 = (char *)(v70 - 1);
          uint64_t v92 = &a42;
          uint64_t v93 = v163;
          do
          {
            *v92++ = *v91;
            v91 += v90;
            --v93;
          }
          while (v93);
        }
        sub_1D0CCD9E4(&__dst, v173, v80 << vars0->i32[2], vars8_4 << vars0->i32[2], vars0->i32[3], v176, 0);
        uint64_t v94 = *(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, BOOL, void))(v164 + 8 * v87);
        int v83 = v86;
        uint64_t v95 = v86;
        uint64_t v72 = v78;
        v94(v70, v90, &a38, v95, &a42, v78, v176);
        sub_1D0CCDA90(&__dst);
        LODWORD(v84) = *v63;
        BOOL v85 = vars8;
        LOBYTE(v78) = v168;
      }
      BOOL v96 = (v84 & 0x10) == 0;
      unsigned __int8 v97 = vars0;
      if ((v84 & 0x10) != 0)
      {
        if (v84 > 0x9F) {
          return result;
        }
        unsigned int v98 = v84 >> 5;
        if (v84 >> 5 == 4)
        {
          uint64_t v99 = 0;
          unsigned __int8 v100 = v63[14];
          a38 = 0u;
          a39 = 0u;
          do
          {
            *((unsigned char *)&a38 + ((v100 + (_BYTE)v99) & 0x1F)) = v63[v99 + 5];
            ++v99;
          }
          while (v99 != 4);
          uint64_t v101 = 0;
          unsigned __int8 v102 = v63[15];
          a40 = 0u;
          a41 = 0u;
          do
          {
            *((unsigned char *)&a40 + ((v102 + (_BYTE)v101) & 0x1F)) = v63[v101 + 9];
            ++v101;
          }
          while (v101 != 4);
        }
        else
        {
          LOWORD(a38) = *(_WORD *)(v63 + 5);
          *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 7);
          BYTE2(a38) = 0;
          LOWORD(a40) = *(_WORD *)(v63 + 9);
          *(_WORD *)((char *)&a40 + 3) = *(_WORD *)(v63 + 11);
          BYTE2(a40) = 0;
        }
        HIDWORD(v165) = v83;
        BOOL v168 = v96;
        int v103 = v78 && (int)v176 > 0;
        uint64_t v104 = v166;
        if (v103 == 1)
        {
          uint64_t v105 = (_WORD *)(v175 - 2);
          BOOL v106 = &a14;
          uint64_t v107 = v163;
          do
          {
            *(_WORD *)BOOL v106 = *v105;
            v106 += 2;
            uint64_t v105 = (_WORD *)((char *)v105 + v104);
            --v107;
          }
          while (v107);
        }
        sub_1D0CCD9E4(&__dst, v173, v80 << v97->i32[2], vars8_4 << v97->i32[2], v97->i32[3], v176, 1u);
        (*(void (**)(uint64_t, uint64_t, long long *, void, char *, uint64_t, void))(v162 + 8 * v98))(v175, v104, &a38, HIDWORD(v165), &a14, v174, v176);
        sub_1D0CCDA90(&__dst);
        BOOL v96 = v168;
        BOOL v85 = vars8;
      }
      uint64_t v108 = v97->i32[3];
      v70 += v108;
      v72 += v108;
      v174 += 2 * v108;
      v175 += 2 * v108;
      v63 += 16;
      uint64_t v80 = (v80 + 1);
      LODWORD(v108) = v97[1].i32[0] - 1;
      uint64_t v74 = v167;
      LODWORD(v78) = v96;
      BOOL v79 = v85;
    }
    while ((int)v80 < (int)v108);
    BOOL v109 = v85;
    BOOL v168 = v96;
    LOBYTE(v74) = v167;
    uint64_t v58 = v160;
  }
  uint64_t v110 = v166;
  int v111 = sub_1D0C5EB40(v173, v80, vars8_4, v74 & 0x5D);
  int v112 = *(_DWORD *)(v161 + 520) - (vars0[1].i32[0] - 1) * vars0->i32[3];
  unint64_t v113 = *v63;
  uint64_t v114 = v58;
  if (v113)
  {
    uint64_t v115 = (v113 >> 1) & 7;
    if (v115 > 4) {
      return result;
    }
    if (v115 == 4)
    {
      uint64_t v116 = 0;
      unsigned __int8 v117 = v63[13];
      a38 = 0u;
      a39 = 0u;
      uint64_t v118 = v169;
      do
      {
        *((unsigned char *)&a38 + ((v117 + (_BYTE)v116) & 0x1F)) = v63[v116 + 1];
        ++v116;
      }
      while (v116 != 4);
    }
    else
    {
      LOWORD(a38) = *(_WORD *)(v63 + 1);
      *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 3);
      BYTE2(a38) = 0;
      uint64_t v118 = v169;
    }
    uint64_t v160 = v114;
    if ((int)v176 > 0 && v109)
    {
      char v120 = (char *)(v70 - 1);
      uint64_t v121 = v176;
      char v122 = &a42;
      do
      {
        *v122++ = *v120;
        v120 += v118;
        --v121;
      }
      while (v121);
    }
    int v123 = vars0;
    sub_1D0CCD9E4(&__dst, v173, v80 << vars0->i32[2], vars8_4 << vars0->i32[2], v112, v176, 0);
    if ((v111 & 4) != 0) {
      int v124 = 34;
    }
    else {
      int v124 = 2;
    }
    if ((v111 & 4) != 0) {
      int v125 = 17;
    }
    else {
      int v125 = 1;
    }
    unsigned int v126 = v124 & 0xFFFFFF7F | (((v111 & 8) != 0) << 7);
    unsigned int v127 = v125 & 0xFFFFFFBF | (((v111 & 8) != 0) << 6);
    unsigned int v167 = v112;
    int v128 = v112 >> 3;
    unsigned int v129 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))&v123[12] + v115;
    int v130 = v111;
    uint64_t v131 = 4;
    int vars8 = v130;
    do
    {
      if ((v128 & (1 << --v131)) != 0)
      {
        v128 -= 1 << v131;
        if (v128) {
          unsigned int v132 = v126;
        }
        else {
          unsigned int v132 = 0;
        }
        uint64_t v133 = v132 | v130;
        int v130 = v130 & 0xC | v127;
        (*v129)(v70, v169, &a38, v133, &a42, v72, v176);
        v70 += 8 << v131;
        v72 += 8 << v131;
      }
      v129 -= 5;
    }
    while (v131);
    sub_1D0CCDA90(&__dst);
    LODWORD(v113) = *v63;
    uint64_t v114 = v160;
    uint64_t v110 = v166;
    int v111 = vars8;
    int v112 = v167;
  }
  if ((v113 & 0x10) == 0)
  {
LABEL_96:
    uint64_t v157 = vars0;
    int8x16_t result = vextq_s8(vars0[2], vars0[2], 8uLL);
    int8x16_t v158 = vextq_s8(vars0[3], vars0[3], 8uLL);
    vars0[2] = result;
    v157[3] = v158;
    return result;
  }
  if (v113 <= 0x9F)
  {
    unsigned int v134 = v113 >> 5;
    if (v113 >> 5 == 4)
    {
      uint64_t v135 = 0;
      unsigned __int8 v136 = v63[14];
      a38 = 0u;
      a39 = 0u;
      uint64_t v137 = v175;
      BOOL v138 = v168;
      do
      {
        *((unsigned char *)&a38 + ((v136 + (_BYTE)v135) & 0x1F)) = v63[v135 + 5];
        ++v135;
      }
      while (v135 != 4);
      uint64_t v139 = 0;
      unsigned __int8 v140 = v63[15];
      a40 = 0u;
      a41 = 0u;
      do
      {
        *((unsigned char *)&a40 + ((v140 + (_BYTE)v139) & 0x1F)) = v63[v139 + 9];
        ++v139;
      }
      while (v139 != 4);
    }
    else
    {
      LOWORD(a38) = *(_WORD *)(v63 + 5);
      *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 7);
      BYTE2(a38) = 0;
      LOWORD(a40) = *(_WORD *)(v63 + 9);
      *(_WORD *)((char *)&a40 + 3) = *(_WORD *)(v63 + 11);
      BYTE2(a40) = 0;
      uint64_t v137 = v175;
      BOOL v138 = v168;
    }
    uint64_t v160 = v114;
    if ((int)v176 > 0 && v138)
    {
      int v142 = (_WORD *)(v137 - 2);
      uint64_t v143 = v176;
      unsigned int v144 = &a14;
      do
      {
        *(_WORD *)unsigned int v144 = *v142;
        v144 += 2;
        int v142 = (_WORD *)((char *)v142 + v110);
        --v143;
      }
      while (v143);
    }
    unsigned int v145 = vars0;
    sub_1D0CCD9E4(&__dst, v173, v80 << vars0->i32[2], vars8_4 << vars0->i32[2], v112, v176, 1u);
    if ((v111 & 4) != 0) {
      int v146 = 34;
    }
    else {
      int v146 = 2;
    }
    int v147 = v112;
    if ((v111 & 4) != 0) {
      int v148 = 17;
    }
    else {
      int v148 = 1;
    }
    unsigned int v149 = v146 & 0xFFFFFF7F | (((v111 & 8) != 0) << 7);
    unsigned int v150 = v148 & 0xFFFFFFBF | (((v111 & 8) != 0) << 6);
    int v151 = v147 >> 2;
    unsigned int v152 = &v145[24].i64[v134 + 1];
    uint64_t v153 = 5;
    uint64_t v154 = v174;
    do
    {
      if ((v151 & (1 << --v153)) != 0)
      {
        v151 -= 1 << v153;
        if (v151) {
          unsigned int v155 = v149;
        }
        else {
          unsigned int v155 = 0;
        }
        uint64_t v156 = v155 | v111;
        int v111 = v111 & 0xC | v150;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))*v152)(v137, v166, &a38, v156, &a14, v154, v176);
        v137 += 8 << v153;
        v154 += 8 << v153;
      }
      v152 -= 5;
    }
    while (v153);
    sub_1D0CCDA90(&__dst);
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1D0D32ED0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,long long a37,long long a38,long long a39,long long a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  a56 = *MEMORY[0x1E4F143B8];
  uint64_t vars0 = a2;
  uint64_t v57 = *(void *)(a2 + 8);
  int v58 = *(_DWORD *)(a1 + 16);
  int v59 = *(_DWORD *)(a1 + 20);
  uint64_t v60 = (unsigned __int8 *)(*(void *)(v57 + 1000) + 16 * v58 * a3);
  uint64_t v61 = *(void *)(v57 + 416);
  uint64_t v62 = *(void *)(v57 + 424);
  int v63 = *(_DWORD *)(a1 + 8);
  uint64_t v64 = *(int *)(a1 + 12);
  uint64_t v65 = (int)v64 * (uint64_t)a3;
  char v66 = *(unsigned char *)(v57 + 531);
  uint64_t v67 = *(void *)(v57 + 400) + ((v61 * v65) << v66);
  uint64_t v68 = *(void *)(v57 + 408) + ((v62 * v65) << v66);
  uint64_t v69 = *(void *)(a1 + 32);
  uint64_t v158 = *(void *)(a1 + 48);
  uint64_t v159 = v68;
  if (a3) {
    uint64_t v70 = 38;
  }
  else {
    uint64_t v70 = 2;
  }
  if (a3) {
    int v71 = 17;
  }
  else {
    int v71 = 1;
  }
  HIDWORD(vars8) = a3;
  uint64_t v152 = v62;
  uint64_t v146 = v57;
  if (v59 - 1 <= a3)
  {
    HIDWORD(v153) = v71;
    int v160 = *(_DWORD *)(v57 + 524) - v65;
  }
  else
  {
    uint64_t v70 = v70 | 0x88;
    HIDWORD(v153) = v71 | 0x40;
    size_t v72 = *(int *)(v57 + 520);
    int v156 = v63;
    memcpy(*(void **)(a1 + 40), (const void *)(v67 + v61 * (v64 - 1)), v72);
    memcpy(*(void **)(a1 + 56), (const void *)(v68 + v62 * (*(int *)(a1 + 12) - 1)), 2 * v72);
    int v63 = v156;
    int v160 = *(_DWORD *)(a1 + 12);
    int v58 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v157 = (int8x16_t *)a1;
  int v147 = &v145;
  if (v58 < 2)
  {
    uint64_t v75 = 0;
    BOOL v101 = 0;
    LODWORD(v151) = 0;
  }
  else
  {
    BOOL v73 = 0;
    BOOL v74 = 0;
    uint64_t v75 = 0;
    uint64_t v148 = (uint64_t)&v157[9].i64[5 * v63 + 1];
    uint64_t v149 = v160;
    uint64_t v150 = (uint64_t)&v157[-3].i64[5 * v63];
    HIDWORD(v153) |= v70;
    do
    {
      uint64_t v76 = sub_1D0C5EB40(vars0, v75, HIDWORD(vars8), v70);
      unint64_t v78 = *v60;
      BOOL v79 = (v78 & 1) == 0;
      if (v78)
      {
        uint64_t v80 = (v78 >> 1) & 7;
        if (v80 > 4) {
          return result;
        }
        if (v80 == 4)
        {
          uint64_t v81 = 0;
          unsigned __int8 v82 = v60[13];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((unsigned char *)&a37 + ((v82 + (_BYTE)v81) & 0x1F)) = v60[v81 + 1];
            ++v81;
          }
          while (v81 != 4);
        }
        else
        {
          LOWORD(a37) = *(_WORD *)(v60 + 1);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 3);
          BYTE2(a37) = 0;
        }
        BOOL v83 = v79;
        if (v74 && v160 > 0)
        {
          unint64_t v84 = (char *)(v67 - 1);
          BOOL v85 = &a41;
          uint64_t v86 = v149;
          do
          {
            *v85++ = *v84;
            v84 += v61;
            --v86;
          }
          while (v86);
        }
        uint64_t v87 = v76;
        (*(void (**)(uint64_t, uint64_t, long long *))(v150 + 8 * v80))(v67, v61, &a37);
        uint64_t v76 = v87;
        LODWORD(v78) = *v60;
        BOOL v79 = v83;
      }
      BOOL v88 = (v78 & 0x10) == 0;
      if ((v78 & 0x10) != 0)
      {
        if (v78 > 0x9F) {
          return result;
        }
        unsigned int v89 = v78 >> 5;
        uint64_t v151 = v69;
        if (v89 == 4)
        {
          uint64_t v90 = 0;
          unsigned __int8 v91 = v60[14];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((unsigned char *)&a37 + ((v91 + (_BYTE)v90) & 0x1F)) = v60[v90 + 5];
            ++v90;
          }
          while (v90 != 4);
          uint64_t v92 = 0;
          unsigned __int8 v93 = v60[15];
          a39 = 0u;
          a40 = 0u;
          uint64_t v94 = v152;
          do
          {
            *((unsigned char *)&a39 + ((v93 + (_BYTE)v92) & 0x1F)) = v60[v92 + 9];
            ++v92;
          }
          while (v92 != 4);
        }
        else
        {
          LOWORD(a37) = *(_WORD *)(v60 + 5);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 7);
          BYTE2(a37) = 0;
          LOWORD(a39) = *(_WORD *)(v60 + 9);
          *(_WORD *)((char *)&a39 + 3) = *(_WORD *)(v60 + 11);
          BYTE2(a39) = 0;
          uint64_t v94 = v152;
        }
        BOOL v95 = v79;
        BOOL v96 = v88;
        if (v73 && v160 > 0)
        {
          unsigned __int8 v97 = (_WORD *)(v159 - 2);
          unsigned int v98 = &a13;
          uint64_t v99 = v149;
          do
          {
            *(_WORD *)unsigned int v98 = *v97;
            v98 += 2;
            unsigned __int8 v97 = (_WORD *)((char *)v97 + v94);
            --v99;
          }
          while (v99);
        }
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))(v148 + 8 * v89))(v159, v94, &a37, v76, &a13, v158, v160);
        BOOL v88 = v96;
        BOOL v79 = v95;
        uint64_t v69 = v151;
      }
      uint64_t v100 = v157->i32[3];
      v67 += v100;
      v69 += v100;
      v158 += 2 * v100;
      v159 += 2 * v100;
      v60 += 16;
      uint64_t v75 = (v75 + 1);
      uint64_t v70 = HIDWORD(v153);
      BOOL v73 = v88;
      BOOL v74 = v79;
    }
    while ((int)v75 < v157[1].i32[0] - 1);
    BOOL v101 = v79;
    LODWORD(v151) = v88;
    LOBYTE(v70) = BYTE4(v153);
  }
  HIDWORD(vars8) = sub_1D0C5EB40(vars0, v75, HIDWORD(vars8), v70 & 0x5D);
  unsigned __int8 v102 = v157;
  int v103 = *(_DWORD *)(v146 + 520) - (v157[1].i32[0] - 1) * v157->i32[3];
  unint64_t v104 = *v60;
  if (v104)
  {
    uint64_t v105 = (v104 >> 1) & 7;
    if (v105 > 4) {
      return result;
    }
    if (v105 == 4)
    {
      uint64_t v106 = 0;
      unsigned __int8 v107 = v60[13];
      int8x16_t result = 0uLL;
      a37 = 0u;
      a38 = 0u;
      do
      {
        *((unsigned char *)&a37 + ((v107 + (_BYTE)v106) & 0x1F)) = v60[v106 + 1];
        ++v106;
      }
      while (v106 != 4);
    }
    else
    {
      LOWORD(a37) = *(_WORD *)(v60 + 1);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 3);
      BYTE2(a37) = 0;
    }
    if (v160 > 0 && v101)
    {
      BOOL v109 = (char *)(v67 - 1);
      uint64_t v110 = v160;
      int v111 = &a41;
      do
      {
        *v111++ = *v109;
        v109 += v61;
        --v110;
      }
      while (v110);
    }
    if ((vars8 & 0x400000000) != 0) {
      int v112 = 34;
    }
    else {
      int v112 = 2;
    }
    if ((vars8 & 0x400000000) != 0) {
      int v113 = 17;
    }
    else {
      int v113 = 1;
    }
    unsigned int v114 = v112 & 0xFFFFFF7F | (((vars8 & 0x800000000) != 0) << 7);
    unsigned int v115 = v113 & 0xFFFFFFBF | (((vars8 & 0x800000000) != 0) << 6);
    LODWORD(vars0) = v103;
    int v116 = v103 >> 3;
    unsigned __int8 v117 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))&v157[12] + v105;
    uint64_t v118 = 4;
    int v119 = HIDWORD(vars8);
    do
    {
      if ((v116 & (1 << --v118)) != 0)
      {
        v116 -= 1 << v118;
        if (v116) {
          unsigned int v120 = v114;
        }
        else {
          unsigned int v120 = 0;
        }
        uint64_t v121 = v120 | v119;
        int v119 = v119 & 0xC | v115;
        (*v117)(v67, v61, &a37, v121, &a41, v69, v160);
        v67 += 8 << v118;
        v69 += 8 << v118;
      }
      v117 -= 5;
    }
    while (v118);
    LODWORD(v104) = *v60;
    unsigned __int8 v102 = v157;
    int v103 = vars0;
  }
  uint64_t v122 = v158;
  if ((v104 & 0x10) == 0)
  {
LABEL_93:
    int8x16_t result = vextq_s8(v102[2], v102[2], 8uLL);
    int8x16_t v144 = vextq_s8(v102[3], v102[3], 8uLL);
    v102[2] = result;
    v102[3] = v144;
    return result;
  }
  if (v104 <= 0x9F)
  {
    unsigned int v123 = v104 >> 5;
    if (v123 == 4)
    {
      uint64_t v124 = 0;
      unsigned __int8 v125 = v60[14];
      a37 = 0u;
      a38 = 0u;
      uint64_t v126 = v152;
      uint64_t v127 = v159;
      int v128 = v151;
      do
      {
        *((unsigned char *)&a37 + ((v125 + (_BYTE)v124) & 0x1F)) = v60[v124 + 5];
        ++v124;
      }
      while (v124 != 4);
      uint64_t v129 = 0;
      unsigned __int8 v130 = v60[15];
      a39 = 0u;
      a40 = 0u;
      do
      {
        *((unsigned char *)&a39 + ((v130 + (_BYTE)v129) & 0x1F)) = v60[v129 + 9];
        ++v129;
      }
      while (v129 != 4);
    }
    else
    {
      LOWORD(a37) = *(_WORD *)(v60 + 5);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 7);
      BYTE2(a37) = 0;
      LOWORD(a39) = *(_WORD *)(v60 + 9);
      *(_WORD *)((char *)&a39 + 3) = *(_WORD *)(v60 + 11);
      BYTE2(a39) = 0;
      uint64_t v126 = v152;
      uint64_t v127 = v159;
      int v128 = v151;
    }
    if (v160 > 0) {
      int v131 = v128;
    }
    else {
      int v131 = 0;
    }
    if (v131 == 1)
    {
      unsigned int v132 = (_WORD *)(v127 - 2);
      uint64_t v133 = v160;
      unsigned int v134 = &a13;
      do
      {
        *(_WORD *)unsigned int v134 = *v132;
        v134 += 2;
        unsigned int v132 = (_WORD *)((char *)v132 + v126);
        --v133;
      }
      while (v133);
    }
    if ((vars8 & 0x400000000) != 0) {
      int v135 = 34;
    }
    else {
      int v135 = 2;
    }
    if ((vars8 & 0x400000000) != 0) {
      int v136 = 17;
    }
    else {
      int v136 = 1;
    }
    unsigned int v137 = v135 & 0xFFFFFF7F | (((vars8 & 0x800000000) != 0) << 7);
    unsigned int v138 = v136 & 0xFFFFFFBF | (((vars8 & 0x800000000) != 0) << 6);
    int v139 = v103 >> 2;
    unsigned __int8 v140 = &v102[24].i64[v123 + 1];
    uint64_t v141 = 5;
    do
    {
      if ((v139 & (1 << --v141)) != 0)
      {
        v139 -= 1 << v141;
        if (v139) {
          unsigned int v142 = v137;
        }
        else {
          unsigned int v142 = 0;
        }
        uint64_t v143 = v142 | HIDWORD(vars8);
        HIDWORD(vars8) = BYTE4(vars8) & 0xC | v138;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))*v140)(v159, v152, &a37, v143, &a13, v122, v160);
        v159 += 8 << v141;
        v122 += 8 << v141;
      }
      v140 -= 5;
    }
    while (v141);
    goto LABEL_93;
  }
  return result;
}

uint64_t sub_1D0D33670(uint64_t result, uint64_t a2)
{
  uint64_t v2 = sub_1D0D336C8;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    uint64_t v2 = sub_1D0D34004;
    if (*(unsigned char *)(*(void *)(a2 + 16) + 283)) {
      uint64_t v2 = sub_1D0D336C8;
    }
  }
  *(void *)(result + 448) = v2;
  *(void *)(result + 456) = 0;
  return result;
}

int8x16_t sub_1D0D336C8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t __dst)
{
  uint64_t v19 = MEMORY[0x1F4188790](a1);
  int v22 = &v112;
  STACK[0x122F8] = *MEMORY[0x1E4F143B8];
  uint64_t v126 = v20;
  uint64_t v23 = *(void *)(v20 + 8);
  int v24 = *(_DWORD *)(v19 + 16);
  int v25 = *(_DWORD *)(v19 + 20);
  int v26 = (unsigned __int8 *)(*(void *)(v23 + 1000) + 16 * v24 * v21);
  uint64_t v27 = *(void *)(v23 + 416);
  uint64_t v28 = *(void *)(v23 + 424);
  int v30 = *(_DWORD *)(v19 + 8);
  uint64_t v29 = *(int *)(v19 + 12);
  uint64_t v31 = (int)v29 * (uint64_t)v21;
  char v32 = *(unsigned char *)(v23 + 531);
  uint64_t v33 = *(void *)(v23 + 400) + ((v27 * v31) << v32);
  uint64_t v34 = *(void *)(v23 + 408) + ((v28 * v31) << v32);
  uint64_t v129 = *(void *)(v19 + 48);
  uint64_t v130 = *(void *)(v19 + 32);
  if (v21) {
    uint64_t v35 = 38;
  }
  else {
    uint64_t v35 = 2;
  }
  if (v21) {
    int v36 = 17;
  }
  else {
    int v36 = 1;
  }
  unsigned int v125 = v21;
  uint64_t v122 = *(void *)(v23 + 416);
  unsigned int v123 = (int8x16_t *)v19;
  uint64_t v127 = *(void *)(v23 + 408) + ((v28 * v31) << v32);
  uint64_t v114 = *(void *)(v20 + 8);
  if (v25 - 1 <= v21)
  {
    unsigned int v128 = *(_DWORD *)(v23 + 524) - v31;
  }
  else
  {
    uint64_t v37 = v19;
    uint64_t v35 = v35 | 0x88;
    v36 |= 0x40u;
    size_t v38 = 2 * *(int *)(v23 + 520);
    memcpy(*(void **)(v19 + 40), (const void *)(v33 + 2 * v27 * (v29 - 1)), v38);
    memcpy(*(void **)(v37 + 56), (const void *)(v34 + 2 * v28 * (*(int *)(v37 + 12) - 1)), v38 & 0x7FFFFFFFFFFFFFFELL);
    unsigned int v128 = *(_DWORD *)(v37 + 12);
    int v24 = *(_DWORD *)(v37 + 16);
  }
  uint64_t v118 = v28;
  if (v24 < 2)
  {
    uint64_t v41 = 0;
    BOOL v66 = 0;
    unsigned int vars8 = 0;
  }
  else
  {
    int v113 = &v112;
    LODWORD(v39) = 0;
    BOOL v40 = 0;
    uint64_t v41 = 0;
    BOOL v42 = &v123->i8[40 * v30];
    unsigned int v115 = v42 + 112;
    uint64_t v116 = v128;
    unsigned __int8 v117 = v42 - 48;
    unsigned int vars8_4 = v36 | v35;
    uint64_t v43 = 2 * v118;
    do
    {
      uint64_t v44 = sub_1D0C5EB40(v126, v41, v125, v35);
      int v46 = v44;
      unint64_t v47 = *v26;
      BOOL v48 = (v47 & 1) == 0;
      int v124 = v48;
      if (v47)
      {
        unsigned int vars8 = v39;
        uint64_t v39 = v44;
        uint64_t v49 = (v47 >> 1) & 7;
        if (v49 > 4) {
          return result;
        }
        if (v49 == 4)
        {
          uint64_t v50 = 0;
          unsigned __int8 v51 = v26[13];
          *(_OWORD *)&STACK[0x12200] = 0u;
          *(_OWORD *)&STACK[0x12210] = 0u;
          do
          {
            *((unsigned char *)&STACK[0x12200] + ((v51 + (_BYTE)v50) & 0x1F)) = v26[v50 + 1];
            ++v50;
          }
          while (v50 != 4);
        }
        else
        {
          LOWORD(STACK[0x12200]) = *(_WORD *)(v26 + 1);
          LOWORD(STACK[0x12203]) = *(_WORD *)(v26 + 3);
          LOBYTE(STACK[0x12202]) = 0;
        }
        if (v40 && (int)v128 > 0)
        {
          unsigned __int8 v52 = (_WORD *)(v33 - 2);
          uint64_t v53 = &STACK[0x12240];
          uint64_t v54 = v116;
          do
          {
            *(_WORD *)uint64_t v53 = *v52;
            uint64_t v53 = (unint64_t *)((char *)v53 + 2);
            v52 += v122;
            --v54;
          }
          while (v54);
        }
        sub_1D0CCF9B0(&__dst, v126, v41 << v123->i32[2], v125 << v123->i32[2], v123->i32[3], v128, 0);
        uint64_t v55 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))&v117[8 * v49];
        int v46 = v39;
        v55(v33, v122, &STACK[0x12200], v39, &STACK[0x12240], v130, v128);
        sub_1D0CCFA64((int *)&__dst);
        LODWORD(v47) = *v26;
        BOOL v48 = v124;
        LOBYTE(v39) = vars8;
      }
      BOOL v56 = (v47 & 0x10) == 0;
      if ((v47 & 0x10) != 0)
      {
        if (v47 > 0x9F) {
          return result;
        }
        HIDWORD(vars0) = v46;
        unsigned int vars8 = v47 >> 5;
        if (v47 >> 5 == 4)
        {
          uint64_t v57 = 0;
          unsigned __int8 v58 = v26[14];
          *(_OWORD *)&STACK[0x12200] = 0u;
          *(_OWORD *)&STACK[0x12210] = 0u;
          do
          {
            *((unsigned char *)&STACK[0x12200] + ((v58 + (_BYTE)v57) & 0x1F)) = v26[v57 + 5];
            ++v57;
          }
          while (v57 != 4);
          uint64_t v59 = 0;
          unsigned __int8 v60 = v26[15];
          *(_OWORD *)&STACK[0x12220] = 0u;
          *(_OWORD *)&STACK[0x12230] = 0u;
          do
          {
            *((unsigned char *)&STACK[0x12220] + ((v60 + (_BYTE)v59) & 0x1F)) = v26[v59 + 9];
            ++v59;
          }
          while (v59 != 4);
        }
        else
        {
          LOWORD(STACK[0x12200]) = *(_WORD *)(v26 + 5);
          LOWORD(STACK[0x12203]) = *(_WORD *)(v26 + 7);
          LOBYTE(STACK[0x12202]) = 0;
          LOWORD(STACK[0x12220]) = *(_WORD *)(v26 + 9);
          LOWORD(STACK[0x12223]) = *(_WORD *)(v26 + 11);
          LOBYTE(STACK[0x12222]) = 0;
        }
        BOOL v61 = v56;
        if ((v39 & ((int)v128 > 0)) == 1)
        {
          uint64_t v62 = (_DWORD *)(v127 - 4);
          int v63 = &STACK[0x120C0];
          uint64_t v64 = v116;
          do
          {
            *(_DWORD *)int v63 = *v62;
            int v63 = (unint64_t *)((char *)v63 + 4);
            uint64_t v62 = (_DWORD *)((char *)v62 + v43);
            --v64;
          }
          while (v64);
        }
        sub_1D0CCF9B0(&__dst, v126, v41 << v123->i32[2], v125 << v123->i32[2], v123->i32[3], v128, 1u);
        (*(void (**)(uint64_t, uint64_t, unint64_t *, void, unint64_t *, uint64_t, void))&v115[8 * vars8])(v127, v118, &STACK[0x12200], HIDWORD(vars0), &STACK[0x120C0], v129, v128);
        sub_1D0CCFA64((int *)&__dst);
        BOOL v56 = v61;
        BOOL v48 = v124;
      }
      uint64_t v65 = v123->i32[3];
      v33 += 2 * v65;
      v127 += 2 * v65;
      v129 += 2 * v65;
      v130 += 2 * v65;
      v26 += 16;
      uint64_t v41 = (v41 + 1);
      uint64_t v35 = vars8_4;
      LODWORD(v39) = v56;
      BOOL v40 = v48;
    }
    while ((int)v41 < v123[1].i32[0] - 1);
    BOOL v66 = v48;
    unsigned int vars8 = v56;
    LOBYTE(v35) = vars8_4;
    int v22 = v113;
  }
  int v67 = sub_1D0C5EB40(v126, v41, v125, v35 & 0x5D);
  int v68 = *(_DWORD *)(v114 + 520) - (v123[1].i32[0] - 1) * v123->i32[3];
  unint64_t v69 = *v26;
  if (v69)
  {
    uint64_t v70 = (v69 >> 1) & 7;
    if (v70 > 4) {
      return result;
    }
    if (v70 == 4)
    {
      uint64_t v71 = 0;
      unsigned __int8 v72 = v26[13];
      *(_OWORD *)&STACK[0x12200] = 0u;
      *(_OWORD *)&STACK[0x12210] = 0u;
      uint64_t v73 = v122;
      do
      {
        *((unsigned char *)&STACK[0x12200] + ((v72 + (_BYTE)v71) & 0x1F)) = v26[v71 + 1];
        ++v71;
      }
      while (v71 != 4);
    }
    else
    {
      LOWORD(STACK[0x12200]) = *(_WORD *)(v26 + 1);
      LOWORD(STACK[0x12203]) = *(_WORD *)(v26 + 3);
      LOBYTE(STACK[0x12202]) = 0;
      uint64_t v73 = v122;
    }
    int v113 = v22;
    if ((int)v128 > 0 && v66)
    {
      uint64_t v75 = (_WORD *)(v33 - 2);
      uint64_t v76 = &STACK[0x12240];
      uint64_t v77 = v128;
      do
      {
        *(_WORD *)uint64_t v76 = *v75;
        uint64_t v76 = (unint64_t *)((char *)v76 + 2);
        v75 += v73;
        --v77;
      }
      while (v77);
    }
    sub_1D0CCF9B0(&__dst, v126, v41 << v123->i32[2], v125 << v123->i32[2], v68, v128, 0);
    if ((v67 & 4) != 0) {
      int v78 = 34;
    }
    else {
      int v78 = 2;
    }
    if ((v67 & 4) != 0) {
      int v79 = 17;
    }
    else {
      int v79 = 1;
    }
    unsigned int v80 = v78 & 0xFFFFFF7F | (((v67 & 8) != 0) << 7);
    unsigned int v81 = v79 & 0xFFFFFFBF | (((v67 & 8) != 0) << 6);
    unsigned int vars8_4 = v68;
    int v82 = v68 >> 3;
    BOOL v83 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))&v123[12]
        + v70;
    uint64_t v84 = 4;
    int v85 = v67;
    do
    {
      if ((v82 & (1 << --v84)) != 0)
      {
        v82 -= 1 << v84;
        if (v82) {
          unsigned int v86 = v80;
        }
        else {
          unsigned int v86 = 0;
        }
        uint64_t v87 = v86 | v85;
        int v85 = v85 & 0xC | v81;
        (*v83)(v33, v122, &STACK[0x12200], v87, &STACK[0x12240], v130, v128);
        v33 += 2 * (8 << v84);
        v130 += 2 * (8 << v84);
      }
      v83 -= 5;
    }
    while (v84);
    sub_1D0CCFA64((int *)&__dst);
    LODWORD(v69) = *v26;
    int v22 = v113;
    int v68 = vars8_4;
  }
  if ((v69 & 0x10) == 0)
  {
LABEL_96:
    int8x16_t result = vextq_s8(v123[2], v123[2], 8uLL);
    int8x16_t v111 = vextq_s8(v123[3], v123[3], 8uLL);
    v123[2] = result;
    v123[3] = v111;
    return result;
  }
  if (v69 <= 0x9F)
  {
    unsigned int v88 = v69 >> 5;
    if (v69 >> 5 == 4)
    {
      uint64_t v89 = 0;
      unsigned __int8 v90 = v26[14];
      *(_OWORD *)&STACK[0x12200] = 0u;
      *(_OWORD *)&STACK[0x12210] = 0u;
      uint64_t v91 = v127;
      unsigned int v92 = vars8;
      do
      {
        *((unsigned char *)&STACK[0x12200] + ((v90 + (_BYTE)v89) & 0x1F)) = v26[v89 + 5];
        ++v89;
      }
      while (v89 != 4);
      uint64_t v93 = 0;
      unsigned __int8 v94 = v26[15];
      *(_OWORD *)&STACK[0x12220] = 0u;
      *(_OWORD *)&STACK[0x12230] = 0u;
      do
      {
        *((unsigned char *)&STACK[0x12220] + ((v94 + (_BYTE)v93) & 0x1F)) = v26[v93 + 9];
        ++v93;
      }
      while (v93 != 4);
    }
    else
    {
      LOWORD(STACK[0x12200]) = *(_WORD *)(v26 + 5);
      LOWORD(STACK[0x12203]) = *(_WORD *)(v26 + 7);
      LOBYTE(STACK[0x12202]) = 0;
      LOWORD(STACK[0x12220]) = *(_WORD *)(v26 + 9);
      LOWORD(STACK[0x12223]) = *(_WORD *)(v26 + 11);
      LOBYTE(STACK[0x12222]) = 0;
      uint64_t v91 = v127;
      unsigned int v92 = vars8;
    }
    int v113 = v22;
    if ((int)v128 > 0) {
      unsigned int v95 = v92;
    }
    else {
      unsigned int v95 = 0;
    }
    if (v95 == 1)
    {
      BOOL v96 = (_DWORD *)(v91 - 4);
      uint64_t v97 = 2 * v118;
      unsigned int v98 = &STACK[0x120C0];
      uint64_t v99 = v128;
      do
      {
        *(_DWORD *)unsigned int v98 = *v96;
        unsigned int v98 = (unint64_t *)((char *)v98 + 4);
        BOOL v96 = (_DWORD *)((char *)v96 + v97);
        --v99;
      }
      while (v99);
    }
    sub_1D0CCF9B0(&__dst, v126, v41 << v123->i32[2], v125 << v123->i32[2], v68, v128, 1u);
    if ((v67 & 4) != 0) {
      int v100 = 34;
    }
    else {
      int v100 = 2;
    }
    int v101 = v68;
    if ((v67 & 4) != 0) {
      int v102 = 17;
    }
    else {
      int v102 = 1;
    }
    unsigned int v103 = v100 & 0xFFFFFF7F | (((v67 & 8) != 0) << 7);
    unsigned int v104 = v102 & 0xFFFFFFBF | (((v67 & 8) != 0) << 6);
    int v105 = v101 >> 3;
    uint64_t v106 = &v123[24].i64[v88 + 1];
    uint64_t v107 = 5;
    uint64_t v108 = v118;
    do
    {
      if ((v105 & (1 << --v107)) != 0)
      {
        v105 -= 1 << v107;
        if (v105) {
          unsigned int v109 = v103;
        }
        else {
          unsigned int v109 = 0;
        }
        uint64_t v110 = v109 | v67;
        int v67 = v67 & 0xC | v104;
        ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))*v106)(v91, v108, &STACK[0x12200], v110, &STACK[0x120C0], v129, v128);
        v91 += 2 * (8 << v107);
        v129 += 2 * (8 << v107);
      }
      v106 -= 5;
    }
    while (v107);
    sub_1D0CCFA64((int *)&__dst);
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1D0D34004(int8x16_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,long long a53,long long a54,long long a55,long long a56,char a57)
{
  uint64_t v57 = a1;
  STACK[0x578] = *MEMORY[0x1E4F143B8];
  uint64_t vars0 = a2;
  uint64_t v58 = *(void *)(a2 + 8);
  int v59 = a1[1].i32[0];
  __int32 v60 = a1[1].i32[1];
  BOOL v61 = (unsigned __int8 *)(*(void *)(v58 + 1000) + 16 * v59 * a3);
  uint64_t v62 = *(void *)(v58 + 416);
  uint64_t v63 = *(void *)(v58 + 424);
  __int32 v64 = a1->i32[2];
  uint64_t v65 = v57->i32[3];
  uint64_t v66 = (int)v65 * (uint64_t)a3;
  char v67 = *(unsigned char *)(v58 + 531);
  uint64_t v68 = *(void *)(v58 + 400) + ((v62 * v66) << v67);
  uint64_t v69 = *(void *)(v58 + 408) + ((v63 * v66) << v67);
  uint64_t v171 = v57[3].i64[0];
  uint64_t v172 = v57[2].i64[0];
  if (a3) {
    uint64_t v70 = 38;
  }
  else {
    uint64_t v70 = 2;
  }
  if (a3) {
    int v71 = 17;
  }
  else {
    int v71 = 1;
  }
  HIDWORD(vars8) = a3;
  uint64_t v162 = v62;
  uint64_t v163 = v63;
  uint64_t v157 = v58;
  if (v60 - 1 <= a3)
  {
    int v170 = *(_DWORD *)(v58 + 524) - v66;
  }
  else
  {
    uint64_t v70 = v70 | 0x88;
    v71 |= 0x40u;
    uint64_t v72 = v63;
    size_t v73 = 2 * *(int *)(v58 + 520);
    int v74 = v64;
    uint64_t v75 = v68;
    memcpy((void *)v57[2].i64[1], (const void *)(v68 + 2 * v62 * (v65 - 1)), v73);
    memcpy((void *)v57[3].i64[1], (const void *)(v69 + 2 * v72 * (v57->i32[3] - 1)), v73 & 0x7FFFFFFFFFFFFFFELL);
    __int32 v64 = v74;
    uint64_t v68 = v75;
    int v170 = v57->i32[3];
    int v59 = v57[1].i32[0];
  }
  uint64_t v165 = v57;
  uint64_t v158 = &v156;
  if (v59 < 2)
  {
    uint64_t v109 = v68;
    uint64_t v78 = 0;
    BOOL v108 = 0;
    BOOL v169 = 0;
  }
  else
  {
    BOOL v76 = 0;
    BOOL v77 = 0;
    uint64_t v78 = 0;
    int v79 = &v57->i8[40 * v64];
    uint64_t v159 = v79 + 112;
    uint64_t v160 = v170;
    uint64_t v161 = v79 - 48;
    LODWORD(v164) = v71 | v70;
    uint64_t v80 = 2 * v162;
    uint64_t v81 = 2 * v163;
    do
    {
      uint64_t v168 = v68;
      uint64_t v82 = sub_1D0C5EB40(vars0, v78, HIDWORD(vars8), v70);
      unint64_t v84 = *v61;
      BOOL v85 = (v84 & 1) == 0;
      if (v84)
      {
        uint64_t v86 = (v84 >> 1) & 7;
        if (v86 > 4) {
          return result;
        }
        if (v86 == 4)
        {
          uint64_t v87 = 0;
          unsigned __int8 v88 = v61[13];
          a53 = 0u;
          a54 = 0u;
          uint64_t v89 = v168;
          do
          {
            *((unsigned char *)&a53 + ((v88 + (_BYTE)v87) & 0x1F)) = v61[v87 + 1];
            ++v87;
          }
          while (v87 != 4);
        }
        else
        {
          LOWORD(a53) = *(_WORD *)(v61 + 1);
          *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 3);
          BYTE2(a53) = 0;
          uint64_t v89 = v168;
        }
        BOOL v90 = v85;
        if (v77 && v170 > 0)
        {
          uint64_t v91 = (_WORD *)(v89 - 2);
          unsigned int v92 = &a57;
          uint64_t v93 = v160;
          do
          {
            *(_WORD *)unsigned int v92 = *v91;
            v92 += 2;
            uint64_t v91 = (_WORD *)((char *)v91 + v80);
            --v93;
          }
          while (v93);
        }
        uint64_t v94 = v82;
        (*(void (**)(uint64_t, uint64_t, long long *))&v161[8 * v86])(v89, v162, &a53);
        uint64_t v82 = v94;
        LODWORD(v84) = *v61;
        BOOL v85 = v90;
      }
      BOOL v95 = (v84 & 0x10) == 0;
      uint64_t v96 = v69;
      if ((v84 & 0x10) != 0)
      {
        if (v84 > 0x9F) {
          return result;
        }
        unsigned int v97 = v84 >> 5;
        if (v97 == 4)
        {
          uint64_t v98 = 0;
          unsigned __int8 v99 = v61[14];
          a53 = 0u;
          a54 = 0u;
          do
          {
            *((unsigned char *)&a53 + ((v99 + (_BYTE)v98) & 0x1F)) = v61[v98 + 5];
            ++v98;
          }
          while (v98 != 4);
          uint64_t v100 = 0;
          unsigned __int8 v101 = v61[15];
          a55 = 0u;
          a56 = 0u;
          do
          {
            *((unsigned char *)&a55 + ((v101 + (_BYTE)v100) & 0x1F)) = v61[v100 + 9];
            ++v100;
          }
          while (v100 != 4);
        }
        else
        {
          LOWORD(a53) = *(_WORD *)(v61 + 5);
          *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 7);
          BYTE2(a53) = 0;
          LOWORD(a55) = *(_WORD *)(v61 + 9);
          *(_WORD *)((char *)&a55 + 3) = *(_WORD *)(v61 + 11);
          BYTE2(a55) = 0;
        }
        BOOL v102 = v85;
        BOOL v103 = v95;
        if (v76 && v170 > 0)
        {
          unsigned int v104 = (_DWORD *)(v96 - 4);
          int v105 = &a13;
          uint64_t v106 = v160;
          do
          {
            *(_DWORD *)int v105 = *v104;
            v105 += 4;
            unsigned int v104 = (_DWORD *)((char *)v104 + v81);
            --v106;
          }
          while (v106);
        }
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))&v159[8 * v97])(v96, v163, &a53, v82, &a13, v171, v170);
        BOOL v95 = v103;
        BOOL v85 = v102;
      }
      uint64_t v107 = v165->i32[3];
      uint64_t v68 = v168 + 2 * v107;
      uint64_t v69 = v96 + 2 * v107;
      v171 += 2 * v107;
      v172 += 2 * v107;
      v61 += 16;
      uint64_t v78 = (v78 + 1);
      uint64_t v70 = v164;
      BOOL v76 = v95;
      BOOL v77 = v85;
    }
    while ((int)v78 < v165[1].i32[0] - 1);
    BOOL v108 = v85;
    BOOL v169 = v95;
    uint64_t v109 = v68;
    LOBYTE(v70) = v164;
    uint64_t v57 = v165;
  }
  int v110 = sub_1D0C5EB40(vars0, v78, HIDWORD(vars8), v70 & 0x5D);
  int v111 = *(_DWORD *)(v157 + 520) - (v57[1].i32[0] - 1) * v57->i32[3];
  unint64_t v112 = *v61;
  if (v112)
  {
    uint64_t v113 = (v112 >> 1) & 7;
    if (v113 > 4) {
      return result;
    }
    HIDWORD(vars8) = v110;
    if (v113 == 4)
    {
      uint64_t v114 = 0;
      unsigned __int8 v115 = v61[13];
      int8x16_t result = 0uLL;
      a53 = 0u;
      a54 = 0u;
      uint64_t v116 = v109;
      uint64_t v117 = v162;
      do
      {
        *((unsigned char *)&a53 + ((v115 + (_BYTE)v114) & 0x1F)) = v61[v114 + 1];
        ++v114;
      }
      while (v114 != 4);
    }
    else
    {
      LOWORD(a53) = *(_WORD *)(v61 + 1);
      *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 3);
      BYTE2(a53) = 0;
      uint64_t v116 = v109;
      uint64_t v117 = v162;
    }
    LODWORD(vars0) = v111;
    uint64_t v164 = v69;
    if (v170 > 0 && v108)
    {
      int v119 = (_WORD *)(v116 - 2);
      unsigned int v120 = &a57;
      uint64_t v121 = v170;
      do
      {
        *(_WORD *)unsigned int v120 = *v119;
        v120 += 2;
        v119 += v117;
        --v121;
      }
      while (v121);
    }
    char v122 = BYTE4(vars8);
    if ((vars8 & 0x400000000) != 0) {
      char v123 = 17;
    }
    else {
      char v123 = 1;
    }
    char v124 = v123 & 0xBF | (((vars8 & 0x800000000) != 0) << 6);
    int v125 = (int)vars0 >> 3;
    uint64_t v126 = (void (**)(void))&v57[12] + v113;
    uint64_t v127 = 4;
    do
    {
      if ((v125 & (1 << --v127)) != 0)
      {
        v125 -= 1 << v127;
        char v122 = v122 & 0xC | v124;
        uint64_t v128 = v116;
        (*v126)();
        uint64_t v116 = v128 + 2 * (8 << v127);
        v172 += 2 * (8 << v127);
      }
      v126 -= 5;
    }
    while (v127);
    LODWORD(v112) = *v61;
    uint64_t v69 = v164;
    int v110 = HIDWORD(vars8);
    int v111 = vars0;
  }
  if ((v112 & 0x10) == 0)
  {
LABEL_89:
    uint64_t v154 = v165;
    int8x16_t result = vextq_s8(v165[2], v165[2], 8uLL);
    int8x16_t v155 = vextq_s8(v165[3], v165[3], 8uLL);
    v165[2] = result;
    v154[3] = v155;
    return result;
  }
  if (v112 <= 0x9F)
  {
    uint64_t v129 = v69;
    int v130 = v110;
    unsigned int v131 = v112 >> 5;
    if (v131 == 4)
    {
      uint64_t v132 = 0;
      unsigned __int8 v133 = v61[14];
      a53 = 0u;
      a54 = 0u;
      unsigned int v134 = v165;
      uint64_t v135 = v69;
      BOOL v136 = v169;
      do
      {
        *((unsigned char *)&a53 + ((v133 + (_BYTE)v132) & 0x1F)) = v61[v132 + 5];
        ++v132;
      }
      while (v132 != 4);
      uint64_t v137 = 0;
      unsigned __int8 v138 = v61[15];
      a55 = 0u;
      a56 = 0u;
      do
      {
        *((unsigned char *)&a55 + ((v138 + (_BYTE)v137) & 0x1F)) = v61[v137 + 9];
        ++v137;
      }
      while (v137 != 4);
    }
    else
    {
      LOWORD(a53) = *(_WORD *)(v61 + 5);
      *(_WORD *)((char *)&a53 + 3) = *(_WORD *)(v61 + 7);
      BYTE2(a53) = 0;
      LOWORD(a55) = *(_WORD *)(v61 + 9);
      *(_WORD *)((char *)&a55 + 3) = *(_WORD *)(v61 + 11);
      BYTE2(a55) = 0;
      unsigned int v134 = v165;
      uint64_t v135 = v69;
      BOOL v136 = v169;
    }
    if (v170 > 0 && v136)
    {
      unsigned __int8 v140 = (_DWORD *)(v135 - 4);
      uint64_t v141 = 2 * v163;
      unsigned int v142 = &a13;
      uint64_t v143 = v170;
      do
      {
        *(_DWORD *)unsigned int v142 = *v140;
        v142 += 4;
        unsigned __int8 v140 = (_DWORD *)((char *)v140 + v141);
        --v143;
      }
      while (v143);
    }
    if ((v130 & 4) != 0) {
      int v144 = 34;
    }
    else {
      int v144 = 2;
    }
    if ((v130 & 4) != 0) {
      int v145 = 17;
    }
    else {
      int v145 = 1;
    }
    unsigned int v146 = v144 & 0xFFFFFF7F | (((v130 & 8) != 0) << 7);
    unsigned int v147 = v145 & 0xFFFFFFBF | (((v130 & 8) != 0) << 6);
    int v148 = v111 >> 3;
    uint64_t v149 = &v134[24].i64[v131 + 1];
    uint64_t v150 = 5;
    do
    {
      if ((v148 & (1 << --v150)) != 0)
      {
        v148 -= 1 << v150;
        if (v148) {
          unsigned int v151 = v146;
        }
        else {
          unsigned int v151 = 0;
        }
        uint64_t v152 = v151 | v130;
        int v130 = v130 & 0xC | v147;
        uint64_t v153 = v129;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))*v149)(v129, v163, &a53, v152, &a13, v171, v170);
        uint64_t v129 = v153 + 2 * (8 << v150);
        v171 += 2 * (8 << v150);
      }
      v149 -= 5;
    }
    while (v150);
    goto LABEL_89;
  }
  return result;
}

uint64_t sub_1D0D34800(uint64_t result, uint64_t a2)
{
  uint64_t v2 = sub_1D0D34858;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    uint64_t v2 = sub_1D0D35114;
    if (*(unsigned char *)(*(void *)(a2 + 16) + 283)) {
      uint64_t v2 = sub_1D0D34858;
    }
  }
  *(void *)(result + 448) = v2;
  *(void *)(result + 456) = 0;
  return result;
}

int8x16_t sub_1D0D34858(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,long long a38,long long a39,long long a40,long long a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t __dst)
{
  uint64_t v56 = MEMORY[0x1F4188790](a1);
  uint64_t v58 = &v160;
  STACK[0x9218] = *MEMORY[0x1E4F143B8];
  uint64_t v174 = v59;
  uint64_t v60 = *(void *)(v59 + 8);
  int v61 = *(_DWORD *)(v56 + 16);
  int v62 = *(_DWORD *)(v56 + 20);
  uint64_t v63 = (unsigned __int8 *)(*(void *)(v60 + 1000) + 16 * v61 * v57);
  uint64_t v64 = *(void *)(v60 + 416);
  uint64_t v65 = *(void *)(v60 + 424);
  int v67 = *(_DWORD *)(v56 + 8);
  uint64_t v66 = *(int *)(v56 + 12);
  uint64_t v68 = (int)v66 * (uint64_t)v57;
  char v69 = *(unsigned char *)(v60 + 531);
  uint64_t v70 = *(void *)(v60 + 400) + ((v64 * v68) << v69);
  uint64_t v71 = *(void *)(v60 + 408) + ((v65 * v68) << v69);
  uint64_t v72 = *(void *)(v56 + 32);
  uint64_t v73 = *(void *)(v56 + 48);
  if (v57) {
    uint64_t v74 = 38;
  }
  else {
    uint64_t v74 = 2;
  }
  if (v57) {
    int v75 = 17;
  }
  else {
    int v75 = 1;
  }
  unsigned int vars8_4 = v57;
  uint64_t v170 = v64;
  uint64_t vars0 = (int8x16_t *)v56;
  uint64_t v167 = v65;
  uint64_t v175 = v73;
  uint64_t v176 = v71;
  uint64_t v162 = v60;
  if (v62 - 1 <= v57)
  {
    int vars8 = v75;
    unsigned int v177 = *(_DWORD *)(v60 + 524) - v68;
  }
  else
  {
    uint64_t v76 = v56;
    uint64_t v74 = v74 | 0x88;
    int vars8 = v75 | 0x40;
    size_t v77 = *(int *)(v60 + 520);
    memcpy(*(void **)(v56 + 40), (const void *)(v70 + v64 * (v66 - 1)), v77);
    memcpy(*(void **)(v76 + 56), (const void *)(v71 + v65 * (*(int *)(v76 + 12) - 1)), v77 & 0x7FFFFFFFFFFFFFFFLL);
    unsigned int v177 = *(_DWORD *)(v76 + 12);
    int v61 = *(_DWORD *)(v76 + 16);
  }
  if (v61 < 2)
  {
    uint64_t v80 = 0;
    BOOL v110 = 0;
    BOOL v169 = 0;
  }
  else
  {
    uint64_t v161 = &v160;
    LODWORD(v78) = 0;
    BOOL v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = &vars0->i8[40 * v67];
    uint64_t v163 = v81 + 112;
    uint64_t v164 = v177;
    uint64_t v165 = v81 - 48;
    unsigned int v168 = vars8 | v74;
    do
    {
      uint64_t v82 = sub_1D0C5EB40(v174, v80, vars8_4, v74);
      int v84 = v82;
      unint64_t v85 = *v63;
      BOOL v86 = (v85 & 1) == 0;
      int vars8 = v86;
      if (v85)
      {
        BOOL v169 = v78;
        BOOL v78 = v72;
        uint64_t v87 = v82;
        uint64_t v88 = (v85 >> 1) & 7;
        if (v88 > 4) {
          return result;
        }
        if (v88 == 4)
        {
          uint64_t v89 = 0;
          unsigned __int8 v90 = v63[13];
          a38 = 0u;
          a39 = 0u;
          uint64_t v91 = v170;
          do
          {
            *((unsigned char *)&a38 + ((v90 + (_BYTE)v89) & 0x1F)) = v63[v89 + 1];
            ++v89;
          }
          while (v89 != 4);
        }
        else
        {
          LOWORD(a38) = *(_WORD *)(v63 + 1);
          *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 3);
          BYTE2(a38) = 0;
          uint64_t v91 = v170;
        }
        if (v79 && (int)v177 > 0)
        {
          unsigned int v92 = (char *)(v70 - 1);
          uint64_t v93 = &a42;
          uint64_t v94 = v164;
          do
          {
            *v93++ = *v92;
            v92 += v91;
            --v94;
          }
          while (v94);
        }
        sub_1D0CD11FC(&__dst, v174, v80 << vars0->i32[2], vars8_4 << vars0->i32[2], vars0->i32[3], v177, 0);
        BOOL v95 = *(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, BOOL, void))&v165[8 * v88];
        int v84 = v87;
        uint64_t v96 = v87;
        uint64_t v72 = v78;
        v95(v70, v91, &a38, v96, &a42, v78, v177);
        sub_1D0CD12A8((int *)&__dst);
        LODWORD(v85) = *v63;
        BOOL v86 = vars8;
        LOBYTE(v78) = v169;
      }
      BOOL v97 = (v85 & 0x10) == 0;
      uint64_t v98 = vars0;
      if ((v85 & 0x10) != 0)
      {
        if (v85 > 0x9F) {
          return result;
        }
        unsigned int v99 = v85 >> 5;
        if (v85 >> 5 == 4)
        {
          uint64_t v100 = 0;
          unsigned __int8 v101 = v63[14];
          a38 = 0u;
          a39 = 0u;
          do
          {
            *((unsigned char *)&a38 + ((v101 + (_BYTE)v100) & 0x1F)) = v63[v100 + 5];
            ++v100;
          }
          while (v100 != 4);
          uint64_t v102 = 0;
          unsigned __int8 v103 = v63[15];
          a40 = 0u;
          a41 = 0u;
          do
          {
            *((unsigned char *)&a40 + ((v103 + (_BYTE)v102) & 0x1F)) = v63[v102 + 9];
            ++v102;
          }
          while (v102 != 4);
        }
        else
        {
          LOWORD(a38) = *(_WORD *)(v63 + 5);
          *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 7);
          BYTE2(a38) = 0;
          LOWORD(a40) = *(_WORD *)(v63 + 9);
          *(_WORD *)((char *)&a40 + 3) = *(_WORD *)(v63 + 11);
          BYTE2(a40) = 0;
        }
        HIDWORD(v166) = v84;
        BOOL v169 = v97;
        int v104 = v78 && (int)v177 > 0;
        uint64_t v105 = v167;
        if (v104 == 1)
        {
          uint64_t v106 = (_WORD *)(v176 - 2);
          uint64_t v107 = &a14;
          uint64_t v108 = v164;
          do
          {
            *(_WORD *)uint64_t v107 = *v106;
            v107 += 2;
            uint64_t v106 = (_WORD *)((char *)v106 + v105);
            --v108;
          }
          while (v108);
        }
        sub_1D0CD11FC(&__dst, v174, v80 << v98->i32[2], vars8_4 << v98->i32[2], v98->i32[3], v177, 1u);
        (*(void (**)(uint64_t, uint64_t, long long *, void, char *, uint64_t, void))&v163[8 * v99])(v176, v105, &a38, HIDWORD(v166), &a14, v175, v177);
        sub_1D0CD12A8((int *)&__dst);
        BOOL v97 = v169;
        BOOL v86 = vars8;
      }
      uint64_t v109 = v98->i32[3];
      v70 += v109;
      v72 += v109;
      v176 += v109;
      v175 += v109;
      v63 += 16;
      uint64_t v80 = (v80 + 1);
      LODWORD(v109) = v98[1].i32[0] - 1;
      uint64_t v74 = v168;
      LODWORD(v78) = v97;
      BOOL v79 = v86;
    }
    while ((int)v80 < (int)v109);
    BOOL v110 = v86;
    BOOL v169 = v97;
    LOBYTE(v74) = v168;
    uint64_t v58 = v161;
  }
  uint64_t v111 = v167;
  int v112 = sub_1D0C5EB40(v174, v80, vars8_4, v74 & 0x5D);
  int v113 = *(_DWORD *)(v162 + 520) - (vars0[1].i32[0] - 1) * vars0->i32[3];
  unint64_t v114 = *v63;
  unsigned __int8 v115 = v58;
  if (v114)
  {
    uint64_t v116 = (v114 >> 1) & 7;
    if (v116 > 4) {
      return result;
    }
    if (v116 == 4)
    {
      uint64_t v117 = 0;
      unsigned __int8 v118 = v63[13];
      a38 = 0u;
      a39 = 0u;
      uint64_t v119 = v170;
      do
      {
        *((unsigned char *)&a38 + ((v118 + (_BYTE)v117) & 0x1F)) = v63[v117 + 1];
        ++v117;
      }
      while (v117 != 4);
    }
    else
    {
      LOWORD(a38) = *(_WORD *)(v63 + 1);
      *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 3);
      BYTE2(a38) = 0;
      uint64_t v119 = v170;
    }
    uint64_t v161 = v115;
    if ((int)v177 > 0 && v110)
    {
      uint64_t v121 = (char *)(v70 - 1);
      uint64_t v122 = v177;
      char v123 = &a42;
      do
      {
        *v123++ = *v121;
        v121 += v119;
        --v122;
      }
      while (v122);
    }
    char v124 = vars0;
    sub_1D0CD11FC(&__dst, v174, v80 << vars0->i32[2], vars8_4 << vars0->i32[2], v113, v177, 0);
    if ((v112 & 4) != 0) {
      int v125 = 34;
    }
    else {
      int v125 = 2;
    }
    if ((v112 & 4) != 0) {
      int v126 = 17;
    }
    else {
      int v126 = 1;
    }
    unsigned int v127 = v125 & 0xFFFFFF7F | (((v112 & 8) != 0) << 7);
    unsigned int v128 = v126 & 0xFFFFFFBF | (((v112 & 8) != 0) << 6);
    unsigned int v168 = v113;
    int v129 = v113 >> 3;
    int v130 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))&v124[12] + v116;
    int v131 = v112;
    uint64_t v132 = 4;
    int vars8 = v131;
    do
    {
      if ((v129 & (1 << --v132)) != 0)
      {
        v129 -= 1 << v132;
        if (v129) {
          unsigned int v133 = v127;
        }
        else {
          unsigned int v133 = 0;
        }
        uint64_t v134 = v133 | v131;
        int v131 = v131 & 0xC | v128;
        (*v130)(v70, v170, &a38, v134, &a42, v72, v177);
        v70 += 8 << v132;
        v72 += 8 << v132;
      }
      v130 -= 5;
    }
    while (v132);
    sub_1D0CD12A8((int *)&__dst);
    LODWORD(v114) = *v63;
    unsigned __int8 v115 = v161;
    uint64_t v111 = v167;
    int v112 = vars8;
    int v113 = v168;
  }
  if ((v114 & 0x10) == 0)
  {
LABEL_96:
    uint64_t v158 = vars0;
    int8x16_t result = vextq_s8(vars0[2], vars0[2], 8uLL);
    int8x16_t v159 = vextq_s8(vars0[3], vars0[3], 8uLL);
    vars0[2] = result;
    v158[3] = v159;
    return result;
  }
  if (v114 <= 0x9F)
  {
    unsigned int v135 = v114 >> 5;
    if (v114 >> 5 == 4)
    {
      uint64_t v136 = 0;
      unsigned __int8 v137 = v63[14];
      a38 = 0u;
      a39 = 0u;
      uint64_t v138 = v176;
      BOOL v139 = v169;
      do
      {
        *((unsigned char *)&a38 + ((v137 + (_BYTE)v136) & 0x1F)) = v63[v136 + 5];
        ++v136;
      }
      while (v136 != 4);
      uint64_t v140 = 0;
      unsigned __int8 v141 = v63[15];
      a40 = 0u;
      a41 = 0u;
      do
      {
        *((unsigned char *)&a40 + ((v141 + (_BYTE)v140) & 0x1F)) = v63[v140 + 9];
        ++v140;
      }
      while (v140 != 4);
    }
    else
    {
      LOWORD(a38) = *(_WORD *)(v63 + 5);
      *(_WORD *)((char *)&a38 + 3) = *(_WORD *)(v63 + 7);
      BYTE2(a38) = 0;
      LOWORD(a40) = *(_WORD *)(v63 + 9);
      *(_WORD *)((char *)&a40 + 3) = *(_WORD *)(v63 + 11);
      BYTE2(a40) = 0;
      uint64_t v138 = v176;
      BOOL v139 = v169;
    }
    uint64_t v161 = v115;
    if ((int)v177 > 0 && v139)
    {
      uint64_t v143 = (_WORD *)(v138 - 2);
      uint64_t v144 = v177;
      int v145 = &a14;
      do
      {
        *(_WORD *)int v145 = *v143;
        v145 += 2;
        uint64_t v143 = (_WORD *)((char *)v143 + v111);
        --v144;
      }
      while (v144);
    }
    unsigned int v146 = vars0;
    sub_1D0CD11FC(&__dst, v174, v80 << vars0->i32[2], vars8_4 << vars0->i32[2], v113, v177, 1u);
    if ((v112 & 4) != 0) {
      int v147 = 34;
    }
    else {
      int v147 = 2;
    }
    int v148 = v113;
    if ((v112 & 4) != 0) {
      int v149 = 17;
    }
    else {
      int v149 = 1;
    }
    unsigned int v150 = v147 & 0xFFFFFF7F | (((v112 & 8) != 0) << 7);
    unsigned int v151 = v149 & 0xFFFFFFBF | (((v112 & 8) != 0) << 6);
    int v152 = v148 >> 3;
    uint64_t v153 = &v146[24].i64[v135 + 1];
    uint64_t v154 = 5;
    uint64_t v155 = v175;
    do
    {
      if ((v152 & (1 << --v154)) != 0)
      {
        v152 -= 1 << v154;
        if (v152) {
          unsigned int v156 = v150;
        }
        else {
          unsigned int v156 = 0;
        }
        uint64_t v157 = v156 | v112;
        int v112 = v112 & 0xC | v151;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))*v153)(v138, v167, &a38, v157, &a14, v155, v177);
        v138 += 8 << v154;
        v155 += 8 << v154;
      }
      v153 -= 5;
    }
    while (v154);
    sub_1D0CD12A8((int *)&__dst);
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1D0D35114(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,long long a37,long long a38,long long a39,long long a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  a56 = *MEMORY[0x1E4F143B8];
  uint64_t vars0 = a2;
  uint64_t v57 = *(void *)(a2 + 8);
  int v58 = *(_DWORD *)(a1 + 16);
  int v59 = *(_DWORD *)(a1 + 20);
  uint64_t v60 = (unsigned __int8 *)(*(void *)(v57 + 1000) + 16 * v58 * a3);
  uint64_t v61 = *(void *)(v57 + 416);
  uint64_t v62 = *(void *)(v57 + 424);
  int v64 = *(_DWORD *)(a1 + 8);
  uint64_t v63 = *(int *)(a1 + 12);
  uint64_t v65 = (int)v63 * (uint64_t)a3;
  char v66 = *(unsigned char *)(v57 + 531);
  uint64_t v67 = *(void *)(v57 + 400) + ((v61 * v65) << v66);
  uint64_t v68 = *(void *)(v57 + 408) + ((v62 * v65) << v66);
  uint64_t v69 = *(void *)(a1 + 32);
  uint64_t v159 = *(void *)(a1 + 48);
  uint64_t v160 = v68;
  if (a3) {
    uint64_t v70 = 38;
  }
  else {
    uint64_t v70 = 2;
  }
  if (a3) {
    int v71 = 17;
  }
  else {
    int v71 = 1;
  }
  HIDWORD(vars8) = a3;
  uint64_t v154 = v62;
  uint64_t v148 = v57;
  int v149 = &v147;
  if (v59 - 1 <= a3)
  {
    HIDWORD(v155) = v71;
    int v161 = *(_DWORD *)(v57 + 524) - v65;
  }
  else
  {
    uint64_t v70 = v70 | 0x88;
    HIDWORD(v155) = v71 | 0x40;
    size_t v72 = *(int *)(v57 + 520);
    int v73 = v64;
    memcpy(*(void **)(a1 + 40), (const void *)(v67 + v61 * (v63 - 1)), v72);
    memcpy(*(void **)(a1 + 56), (const void *)(v68 + v62 * (*(int *)(a1 + 12) - 1)), v72 & 0x7FFFFFFFFFFFFFFFLL);
    int v64 = v73;
    int v161 = *(_DWORD *)(a1 + 12);
    int v58 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v158 = (int8x16_t *)a1;
  if (v58 < 2)
  {
    uint64_t v76 = 0;
    BOOL v103 = 0;
    LODWORD(v153) = 0;
  }
  else
  {
    BOOL v74 = 0;
    BOOL v75 = 0;
    uint64_t v76 = 0;
    size_t v77 = &v158->i8[40 * v64];
    unsigned int v150 = v77 + 112;
    uint64_t v151 = v161;
    int v152 = v77 - 48;
    HIDWORD(v155) |= v70;
    do
    {
      uint64_t v78 = sub_1D0C5EB40(vars0, v76, HIDWORD(vars8), v70);
      unint64_t v80 = *v60;
      BOOL v81 = (v80 & 1) == 0;
      if (v80)
      {
        uint64_t v82 = (v80 >> 1) & 7;
        if (v82 > 4) {
          return result;
        }
        if (v82 == 4)
        {
          uint64_t v83 = 0;
          unsigned __int8 v84 = v60[13];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((unsigned char *)&a37 + ((v84 + (_BYTE)v83) & 0x1F)) = v60[v83 + 1];
            ++v83;
          }
          while (v83 != 4);
        }
        else
        {
          LOWORD(a37) = *(_WORD *)(v60 + 1);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 3);
          BYTE2(a37) = 0;
        }
        BOOL v85 = v81;
        if (v75 && v161 > 0)
        {
          BOOL v86 = (char *)(v67 - 1);
          uint64_t v87 = &a41;
          uint64_t v88 = v151;
          do
          {
            *v87++ = *v86;
            v86 += v61;
            --v88;
          }
          while (v88);
        }
        uint64_t v89 = v78;
        (*(void (**)(uint64_t, uint64_t, long long *))&v152[8 * v82])(v67, v61, &a37);
        uint64_t v78 = v89;
        LODWORD(v80) = *v60;
        BOOL v81 = v85;
      }
      BOOL v90 = (v80 & 0x10) == 0;
      if ((v80 & 0x10) != 0)
      {
        if (v80 > 0x9F) {
          return result;
        }
        unsigned int v91 = v80 >> 5;
        uint64_t v153 = v69;
        if (v91 == 4)
        {
          uint64_t v92 = 0;
          unsigned __int8 v93 = v60[14];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((unsigned char *)&a37 + ((v93 + (_BYTE)v92) & 0x1F)) = v60[v92 + 5];
            ++v92;
          }
          while (v92 != 4);
          uint64_t v94 = 0;
          unsigned __int8 v95 = v60[15];
          a39 = 0u;
          a40 = 0u;
          uint64_t v96 = v154;
          do
          {
            *((unsigned char *)&a39 + ((v95 + (_BYTE)v94) & 0x1F)) = v60[v94 + 9];
            ++v94;
          }
          while (v94 != 4);
        }
        else
        {
          LOWORD(a37) = *(_WORD *)(v60 + 5);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 7);
          BYTE2(a37) = 0;
          LOWORD(a39) = *(_WORD *)(v60 + 9);
          *(_WORD *)((char *)&a39 + 3) = *(_WORD *)(v60 + 11);
          BYTE2(a39) = 0;
          uint64_t v96 = v154;
        }
        BOOL v97 = v81;
        BOOL v98 = v90;
        if (v74 && v161 > 0)
        {
          unsigned int v99 = (_WORD *)(v160 - 2);
          uint64_t v100 = &a13;
          uint64_t v101 = v151;
          do
          {
            *(_WORD *)uint64_t v100 = *v99;
            v100 += 2;
            unsigned int v99 = (_WORD *)((char *)v99 + v96);
            --v101;
          }
          while (v101);
        }
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))&v150[8 * v91])(v160, v96, &a37, v78, &a13, v159, v161);
        BOOL v90 = v98;
        BOOL v81 = v97;
        uint64_t v69 = v153;
      }
      uint64_t v102 = v158->i32[3];
      v67 += v102;
      v69 += v102;
      v159 += v102;
      v160 += v102;
      v60 += 16;
      uint64_t v76 = (v76 + 1);
      uint64_t v70 = HIDWORD(v155);
      BOOL v74 = v90;
      BOOL v75 = v81;
    }
    while ((int)v76 < v158[1].i32[0] - 1);
    BOOL v103 = v81;
    LODWORD(v153) = v90;
    LOBYTE(v70) = BYTE4(v155);
  }
  HIDWORD(vars8) = sub_1D0C5EB40(vars0, v76, HIDWORD(vars8), v70 & 0x5D);
  int v104 = v158;
  int v105 = *(_DWORD *)(v148 + 520) - (v158[1].i32[0] - 1) * v158->i32[3];
  unint64_t v106 = *v60;
  if (v106)
  {
    uint64_t v107 = (v106 >> 1) & 7;
    if (v107 > 4) {
      return result;
    }
    if (v107 == 4)
    {
      uint64_t v108 = 0;
      unsigned __int8 v109 = v60[13];
      int8x16_t result = 0uLL;
      a37 = 0u;
      a38 = 0u;
      do
      {
        *((unsigned char *)&a37 + ((v109 + (_BYTE)v108) & 0x1F)) = v60[v108 + 1];
        ++v108;
      }
      while (v108 != 4);
    }
    else
    {
      LOWORD(a37) = *(_WORD *)(v60 + 1);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 3);
      BYTE2(a37) = 0;
    }
    if (v161 > 0 && v103)
    {
      uint64_t v111 = (char *)(v67 - 1);
      uint64_t v112 = v161;
      int v113 = &a41;
      do
      {
        *v113++ = *v111;
        v111 += v61;
        --v112;
      }
      while (v112);
    }
    if ((vars8 & 0x400000000) != 0) {
      int v114 = 34;
    }
    else {
      int v114 = 2;
    }
    if ((vars8 & 0x400000000) != 0) {
      int v115 = 17;
    }
    else {
      int v115 = 1;
    }
    unsigned int v116 = v114 & 0xFFFFFF7F | (((vars8 & 0x800000000) != 0) << 7);
    unsigned int v117 = v115 & 0xFFFFFFBF | (((vars8 & 0x800000000) != 0) << 6);
    LODWORD(vars0) = v105;
    int v118 = v105 >> 3;
    uint64_t v119 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))&v158[12] + v107;
    uint64_t v120 = 4;
    int v121 = HIDWORD(vars8);
    do
    {
      if ((v118 & (1 << --v120)) != 0)
      {
        v118 -= 1 << v120;
        if (v118) {
          unsigned int v122 = v116;
        }
        else {
          unsigned int v122 = 0;
        }
        uint64_t v123 = v122 | v121;
        int v121 = v121 & 0xC | v117;
        (*v119)(v67, v61, &a37, v123, &a41, v69, v161);
        v67 += 8 << v120;
        v69 += 8 << v120;
      }
      v119 -= 5;
    }
    while (v120);
    LODWORD(v106) = *v60;
    int v104 = v158;
    int v105 = vars0;
  }
  uint64_t v124 = v159;
  if ((v106 & 0x10) == 0)
  {
LABEL_93:
    int8x16_t result = vextq_s8(v104[2], v104[2], 8uLL);
    int8x16_t v146 = vextq_s8(v104[3], v104[3], 8uLL);
    v104[2] = result;
    void v104[3] = v146;
    return result;
  }
  if (v106 <= 0x9F)
  {
    unsigned int v125 = v106 >> 5;
    if (v125 == 4)
    {
      uint64_t v126 = 0;
      unsigned __int8 v127 = v60[14];
      a37 = 0u;
      a38 = 0u;
      uint64_t v128 = v154;
      uint64_t v129 = v160;
      int v130 = v153;
      do
      {
        *((unsigned char *)&a37 + ((v127 + (_BYTE)v126) & 0x1F)) = v60[v126 + 5];
        ++v126;
      }
      while (v126 != 4);
      uint64_t v131 = 0;
      unsigned __int8 v132 = v60[15];
      a39 = 0u;
      a40 = 0u;
      do
      {
        *((unsigned char *)&a39 + ((v132 + (_BYTE)v131) & 0x1F)) = v60[v131 + 9];
        ++v131;
      }
      while (v131 != 4);
    }
    else
    {
      LOWORD(a37) = *(_WORD *)(v60 + 5);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 7);
      BYTE2(a37) = 0;
      LOWORD(a39) = *(_WORD *)(v60 + 9);
      *(_WORD *)((char *)&a39 + 3) = *(_WORD *)(v60 + 11);
      BYTE2(a39) = 0;
      uint64_t v128 = v154;
      uint64_t v129 = v160;
      int v130 = v153;
    }
    if (v161 > 0) {
      int v133 = v130;
    }
    else {
      int v133 = 0;
    }
    if (v133 == 1)
    {
      uint64_t v134 = (_WORD *)(v129 - 2);
      uint64_t v135 = v161;
      uint64_t v136 = &a13;
      do
      {
        *(_WORD *)uint64_t v136 = *v134;
        v136 += 2;
        uint64_t v134 = (_WORD *)((char *)v134 + v128);
        --v135;
      }
      while (v135);
    }
    if ((vars8 & 0x400000000) != 0) {
      int v137 = 34;
    }
    else {
      int v137 = 2;
    }
    if ((vars8 & 0x400000000) != 0) {
      int v138 = 17;
    }
    else {
      int v138 = 1;
    }
    unsigned int v139 = v137 & 0xFFFFFF7F | (((vars8 & 0x800000000) != 0) << 7);
    unsigned int v140 = v138 & 0xFFFFFFBF | (((vars8 & 0x800000000) != 0) << 6);
    int v141 = v105 >> 3;
    unsigned int v142 = &v104[24].i64[v125 + 1];
    uint64_t v143 = 5;
    do
    {
      if ((v141 & (1 << --v143)) != 0)
      {
        v141 -= 1 << v143;
        if (v141) {
          unsigned int v144 = v139;
        }
        else {
          unsigned int v144 = 0;
        }
        uint64_t v145 = v144 | HIDWORD(vars8);
        HIDWORD(vars8) = BYTE4(vars8) & 0xC | v140;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))*v142)(v160, v154, &a37, v145, &a13, v124, v161);
        v160 += 8 << v143;
        v124 += 8 << v143;
      }
      v142 -= 5;
    }
    while (v143);
    goto LABEL_93;
  }
  return result;
}

uint64_t sub_1D0D358A0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = sub_1D0D358F8;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    uint64_t v2 = sub_1D0D36214;
    if (*(unsigned char *)(*(void *)(a2 + 16) + 283)) {
      uint64_t v2 = sub_1D0D358F8;
    }
  }
  *(void *)(result + 448) = v2;
  *(void *)(result + 456) = 0;
  return result;
}

int8x16_t sub_1D0D358F8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, int a12, int a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t __dst)
{
  uint64_t v21 = MEMORY[0x1F4188790](a1);
  int v22 = &v118;
  STACK[0x12278] = *MEMORY[0x1E4F143B8];
  uint64_t v136 = v23;
  uint64_t v24 = *(void *)(v23 + 8);
  int v25 = *(_DWORD *)(v21 + 16);
  int v26 = *(_DWORD *)(v21 + 20);
  uint64_t v27 = (unsigned __int8 *)(*(void *)(v24 + 1000) + 16 * v25 * v20);
  uint64_t v28 = *(void *)(v24 + 416);
  uint64_t v29 = *(void *)(v24 + 424);
  int v31 = *(_DWORD *)(v21 + 8);
  uint64_t v30 = *(int *)(v21 + 12);
  uint64_t v32 = (int)v30 * (uint64_t)v20;
  char v33 = *(unsigned char *)(v24 + 531);
  uint64_t v34 = *(void *)(v24 + 400) + ((v28 * v32) << v33);
  uint64_t v35 = *(void *)(v24 + 408) + ((v29 * ((uint64_t)(int)v32 >> 1)) << v33);
  uint64_t v138 = *(void *)(v21 + 48);
  uint64_t v139 = *(void *)(v21 + 32);
  if (v20) {
    uint64_t v36 = 38;
  }
  else {
    uint64_t v36 = 2;
  }
  if (v20) {
    int v37 = 17;
  }
  else {
    int v37 = 1;
  }
  unsigned int v135 = v20;
  uint64_t v137 = *(void *)(v24 + 408) + ((v29 * ((uint64_t)(int)v32 >> 1)) << v33);
  uint64_t vars0 = *(void *)(v24 + 416);
  uint64_t v120 = v24;
  if (v26 - 1 <= v20)
  {
    int v39 = *(_DWORD *)(v24 + 524) - v32;
  }
  else
  {
    uint64_t v36 = v36 | 0x88;
    v37 |= 0x40u;
    size_t v38 = 2 * *(int *)(v24 + 520);
    memcpy(*(void **)(v21 + 40), (const void *)(v34 + 2 * v28 * (v30 - 1)), v38);
    memcpy(*(void **)(v21 + 56), (const void *)(v35 + 2 * v29 * ((*(int *)(v21 + 12) >> 1) - 1)), v38 & 0x7FFFFFFFFFFFFFFELL);
    int v39 = *(_DWORD *)(v21 + 12);
    int v25 = *(_DWORD *)(v21 + 16);
  }
  uint64_t v124 = v29;
  uint64_t vars8 = (v39 >> 1);
  int v130 = (_DWORD *)v21;
  unsigned int v129 = v39;
  if (v25 < 2)
  {
    uint64_t v43 = 0;
    BOOL v71 = 0;
    BOOL v126 = 0;
  }
  else
  {
    uint64_t v119 = &v118;
    BOOL v40 = 0;
    uint64_t v41 = v21;
    BOOL v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = v41 + 40 * v31;
    uint64_t v122 = v44 + 112;
    uint64_t v123 = v44 - 48;
    uint64_t v121 = v39;
    unsigned int v125 = v37 | v36;
    uint64_t v45 = 2 * vars0;
    uint64_t v46 = 2 * v124;
    do
    {
      unsigned int v47 = sub_1D0C5EB40(v136, v43, v135, v36);
      unint64_t v49 = *v27;
      BOOL v50 = (v49 & 1) == 0;
      unsigned int v131 = v47;
      int v133 = v50;
      if (v49)
      {
        uint64_t v51 = (v49 >> 1) & 7;
        if (v51 > 4) {
          return result;
        }
        if (v51 == 4)
        {
          uint64_t v52 = 0;
          unsigned __int8 v53 = v27[13];
          *(_OWORD *)&STACK[0x12180] = 0u;
          *(_OWORD *)&STACK[0x12190] = 0u;
          uint64_t v54 = v129;
          do
          {
            *((unsigned char *)&STACK[0x12180] + ((v53 + (_BYTE)v52) & 0x1F)) = v27[v52 + 1];
            ++v52;
          }
          while (v52 != 4);
        }
        else
        {
          LOWORD(STACK[0x12180]) = *(_WORD *)(v27 + 1);
          LOWORD(STACK[0x12183]) = *(_WORD *)(v27 + 3);
          LOBYTE(STACK[0x12182]) = 0;
          uint64_t v54 = v129;
        }
        if (v42 && (int)v54 > 0)
        {
          uint64_t v55 = (_WORD *)(v34 - 2);
          uint64_t v56 = &STACK[0x121C0];
          uint64_t v57 = v121;
          do
          {
            *(_WORD *)uint64_t v56 = *v55;
            uint64_t v56 = (unint64_t *)((char *)v56 + 2);
            uint64_t v55 = (_WORD *)((char *)v55 + v45);
            --v57;
          }
          while (v57);
        }
        uint64_t v58 = v54;
        sub_1D0CD3290(&__dst, v136, v43 << v130[2], v135 << v130[2], v130[3], v54, 0);
        (*(void (**)(uint64_t, uint64_t, unint64_t *, void, unint64_t *, uint64_t, uint64_t))(v123 + 8 * v51))(v34, vars0, &STACK[0x12180], v131, &STACK[0x121C0], v139, v58);
        sub_1D0CD3348((int *)&__dst);
        LODWORD(v49) = *v27;
        BOOL v50 = v133;
      }
      BOOL v59 = (v49 & 0x10) == 0;
      uint64_t v60 = v137;
      if ((v49 & 0x10) != 0)
      {
        if (v49 > 0x9F) {
          return result;
        }
        unsigned int v61 = v49 >> 5;
        if (v49 >> 5 == 4)
        {
          uint64_t v62 = 0;
          unsigned __int8 v63 = v27[14];
          *(_OWORD *)&STACK[0x12180] = 0u;
          *(_OWORD *)&STACK[0x12190] = 0u;
          do
          {
            *((unsigned char *)&STACK[0x12180] + ((v63 + (_BYTE)v62) & 0x1F)) = v27[v62 + 5];
            ++v62;
          }
          while (v62 != 4);
          uint64_t v64 = 0;
          unsigned __int8 v65 = v27[15];
          *(_OWORD *)&STACK[0x121A0] = 0u;
          *(_OWORD *)&STACK[0x121B0] = 0u;
          do
          {
            *((unsigned char *)&STACK[0x121A0] + ((v65 + (_BYTE)v64) & 0x1F)) = v27[v64 + 9];
            ++v64;
          }
          while (v64 != 4);
        }
        else
        {
          LOWORD(STACK[0x12180]) = *(_WORD *)(v27 + 5);
          LOWORD(STACK[0x12183]) = *(_WORD *)(v27 + 7);
          LOBYTE(STACK[0x12182]) = 0;
          LOWORD(STACK[0x121A0]) = *(_WORD *)(v27 + 9);
          LOWORD(STACK[0x121A3]) = *(_WORD *)(v27 + 11);
          LOBYTE(STACK[0x121A2]) = 0;
        }
        BOOL v126 = v59;
        if (v40 && (int)v129 > 1)
        {
          char v66 = (_DWORD *)(v137 - 4);
          uint64_t v67 = &STACK[0x120C0];
          uint64_t v68 = vars8;
          do
          {
            *(_DWORD *)uint64_t v67 = *v66;
            uint64_t v67 = (unint64_t *)((char *)v67 + 4);
            char v66 = (_DWORD *)((char *)v66 + v46);
            --v68;
          }
          while (v68);
        }
        sub_1D0CD3290(&__dst, v136, v43 << v130[2], v135 << v130[2], v130[3], v129, 1u);
        uint64_t v69 = *(void (**)(uint64_t, uint64_t, unint64_t *, void, unint64_t *, uint64_t, uint64_t))(v122 + 8 * v61);
        uint64_t v60 = v137;
        v69(v137, v124, &STACK[0x12180], v131, &STACK[0x120C0], v138, vars8);
        sub_1D0CD3348((int *)&__dst);
        BOOL v59 = v126;
        BOOL v50 = v133;
      }
      uint64_t v70 = (int)v130[3];
      v34 += 2 * v70;
      uint64_t v137 = v60 + 2 * v70;
      v138 += 2 * v70;
      v139 += 2 * v70;
      v27 += 16;
      uint64_t v43 = (v43 + 1);
      uint64_t v36 = v125;
      BOOL v40 = v59;
      BOOL v42 = v50;
    }
    while ((int)v43 < v130[4] - 1);
    BOOL v71 = v50;
    BOOL v126 = v59;
    LOBYTE(v36) = v125;
    int v22 = v119;
    uint64_t v21 = (uint64_t)v130;
  }
  int v72 = sub_1D0C5EB40(v136, v43, v135, v36 & 0x5D);
  int v134 = *(_DWORD *)(v120 + 520) - (*(_DWORD *)(v21 + 16) - 1) * *(_DWORD *)(v21 + 12);
  unint64_t v73 = *v27;
  if (v73)
  {
    uint64_t v74 = (v73 >> 1) & 7;
    if (v74 > 4) {
      return result;
    }
    if (v74 == 4)
    {
      uint64_t v75 = 0;
      unsigned __int8 v76 = v27[13];
      *(_OWORD *)&STACK[0x12180] = 0u;
      *(_OWORD *)&STACK[0x12190] = 0u;
      int v77 = v129;
      uint64_t v78 = vars0;
      do
      {
        *((unsigned char *)&STACK[0x12180] + ((v76 + (_BYTE)v75) & 0x1F)) = v27[v75 + 1];
        ++v75;
      }
      while (v75 != 4);
    }
    else
    {
      LOWORD(STACK[0x12180]) = *(_WORD *)(v27 + 1);
      LOWORD(STACK[0x12183]) = *(_WORD *)(v27 + 3);
      LOBYTE(STACK[0x12182]) = 0;
      int v77 = v129;
      uint64_t v78 = vars0;
    }
    uint64_t v119 = v22;
    if (v77 > 0 && v71)
    {
      unint64_t v80 = (_WORD *)(v34 - 2);
      BOOL v81 = &STACK[0x121C0];
      uint64_t v82 = v77;
      do
      {
        *(_WORD *)BOOL v81 = *v80;
        BOOL v81 = (unint64_t *)((char *)v81 + 2);
        v80 += v78;
        --v82;
      }
      while (v82);
    }
    sub_1D0CD3290(&__dst, v136, v43 << *(_DWORD *)(v21 + 8), v135 << *(_DWORD *)(v21 + 8), v134, v77, 0);
    if ((v72 & 4) != 0) {
      int v83 = 34;
    }
    else {
      int v83 = 2;
    }
    if ((v72 & 4) != 0) {
      int v84 = 17;
    }
    else {
      int v84 = 1;
    }
    unsigned int v85 = v83 & 0xFFFFFF7F | (((v72 & 8) != 0) << 7);
    unsigned int v86 = v84 & 0xFFFFFFBF | (((v72 & 8) != 0) << 6);
    int v87 = v72;
    int v88 = v134 >> 3;
    uint64_t v89 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(v21 + 8 * v74 + 192);
    uint64_t v90 = 4;
    int v132 = v87;
    do
    {
      if ((v88 & (1 << --v90)) != 0)
      {
        v88 -= 1 << v90;
        if (v88) {
          unsigned int v91 = v85;
        }
        else {
          unsigned int v91 = 0;
        }
        uint64_t v92 = v91 | v87;
        int v87 = v87 & 0xC | v86;
        (*v89)(v34, vars0, &STACK[0x12180], v92, &STACK[0x121C0], v139, v129);
        v34 += 2 * (8 << v90);
        v139 += 2 * (8 << v90);
      }
      v89 -= 5;
    }
    while (v90);
    sub_1D0CD3348((int *)&__dst);
    LODWORD(v73) = *v27;
    int v22 = v119;
    uint64_t v21 = (uint64_t)v130;
    int v72 = v132;
  }
  uint64_t v93 = v137;
  if ((v73 & 0x10) == 0)
  {
LABEL_96:
    int8x16_t result = vextq_s8(*(int8x16_t *)(v21 + 32), *(int8x16_t *)(v21 + 32), 8uLL);
    int8x16_t v117 = vextq_s8(*(int8x16_t *)(v21 + 48), *(int8x16_t *)(v21 + 48), 8uLL);
    *(int8x16_t *)(v21 + 32) = result;
    *(int8x16_t *)(v21 + 48) = v117;
    return result;
  }
  if (v73 <= 0x9F)
  {
    unsigned int v94 = v73 >> 5;
    if (v73 >> 5 == 4)
    {
      uint64_t v95 = 0;
      unsigned __int8 v96 = v27[14];
      *(_OWORD *)&STACK[0x12180] = 0u;
      *(_OWORD *)&STACK[0x12190] = 0u;
      int v97 = v129;
      BOOL v98 = v126;
      do
      {
        *((unsigned char *)&STACK[0x12180] + ((v96 + (_BYTE)v95) & 0x1F)) = v27[v95 + 5];
        ++v95;
      }
      while (v95 != 4);
      uint64_t v99 = 0;
      unsigned __int8 v100 = v27[15];
      *(_OWORD *)&STACK[0x121A0] = 0u;
      *(_OWORD *)&STACK[0x121B0] = 0u;
      do
      {
        *((unsigned char *)&STACK[0x121A0] + ((v100 + (_BYTE)v99) & 0x1F)) = v27[v99 + 9];
        ++v99;
      }
      while (v99 != 4);
    }
    else
    {
      LOWORD(STACK[0x12180]) = *(_WORD *)(v27 + 5);
      LOWORD(STACK[0x12183]) = *(_WORD *)(v27 + 7);
      LOBYTE(STACK[0x12182]) = 0;
      LOWORD(STACK[0x121A0]) = *(_WORD *)(v27 + 9);
      LOWORD(STACK[0x121A3]) = *(_WORD *)(v27 + 11);
      LOBYTE(STACK[0x121A2]) = 0;
      int v97 = v129;
      BOOL v98 = v126;
    }
    uint64_t v119 = v22;
    if (v97 > 1 && v98)
    {
      uint64_t v102 = (_DWORD *)(v137 - 4);
      uint64_t v103 = 2 * v124;
      int v104 = &STACK[0x120C0];
      uint64_t v105 = vars8;
      do
      {
        *(_DWORD *)int v104 = *v102;
        int v104 = (unint64_t *)((char *)v104 + 4);
        uint64_t v102 = (_DWORD *)((char *)v102 + v103);
        --v105;
      }
      while (v105);
    }
    sub_1D0CD3290(&__dst, v136, v43 << *(_DWORD *)(v21 + 8), v135 << *(_DWORD *)(v21 + 8), v134, v97, 1u);
    if ((v72 & 4) != 0) {
      int v106 = 34;
    }
    else {
      int v106 = 2;
    }
    if ((v72 & 4) != 0) {
      int v107 = 17;
    }
    else {
      int v107 = 1;
    }
    int v108 = v72;
    unsigned int v109 = v106 & 0xFFFFFF7F | (((v72 & 8) != 0) << 7);
    unsigned int v110 = v107 & 0xFFFFFFBF | (((v72 & 8) != 0) << 6);
    int v111 = v134 >> 3;
    uint64_t v112 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(v21 + 8 * v94 + 392);
    uint64_t v113 = 5;
    uint64_t v114 = v124;
    do
    {
      if ((v111 & (1 << --v113)) != 0)
      {
        v111 -= 1 << v113;
        if (v111) {
          unsigned int v115 = v109;
        }
        else {
          unsigned int v115 = 0;
        }
        uint64_t v116 = v115 | v108;
        int v108 = v108 & 0xC | v110;
        (*v112)(v93, v114, &STACK[0x12180], v116, &STACK[0x120C0], v138, vars8);
        v93 += 2 * (8 << v113);
        v138 += 2 * (8 << v113);
      }
      v112 -= 5;
    }
    while (v113);
    sub_1D0CD3348((int *)&__dst);
    uint64_t v21 = (uint64_t)v130;
    goto LABEL_96;
  }
  return result;
}

int8x16_t sub_1D0D36214(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,long long a41,long long a42,long long a43,long long a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v68 = a1;
  uint64_t v160 = &v158;
  a68 = *MEMORY[0x1E4F143B8];
  uint64_t v69 = *(void *)(a2 + 8);
  int v70 = *(_DWORD *)(a1 + 16);
  int v71 = *(_DWORD *)(a1 + 20);
  int v72 = (unsigned __int8 *)(*(void *)(v69 + 1000) + 16 * (int)(v70 * a3));
  uint64_t v74 = *(void *)(v69 + 416);
  uint64_t v73 = *(void *)(v69 + 424);
  int v76 = *(_DWORD *)(a1 + 8);
  uint64_t v75 = *(int *)(a1 + 12);
  uint64_t v77 = (int)v75 * (uint64_t)(int)a3;
  char v78 = *(unsigned char *)(v69 + 531);
  uint64_t v79 = *(void *)(v69 + 400) + ((v74 * v77) << v78);
  uint64_t v80 = *(void *)(v69 + 408) + ((v73 * ((uint64_t)(int)v77 >> 1)) << v78);
  uint64_t v176 = *(void *)(a1 + 48);
  uint64_t v177 = *(void *)(a1 + 32);
  if (a3) {
    uint64_t v81 = 38;
  }
  else {
    uint64_t v81 = 2;
  }
  if (a3) {
    int v82 = 17;
  }
  else {
    int v82 = 1;
  }
  uint64_t v175 = *(void *)(v69 + 408) + ((v73 * ((uint64_t)(int)v77 >> 1)) << v78);
  uint64_t v159 = *(void *)(a2 + 8);
  if (v71 - 1 <= (int)a3)
  {
    int v84 = *(_DWORD *)(v69 + 524) - v77;
  }
  else
  {
    uint64_t v81 = v81 | 0x88;
    v82 |= 0x40u;
    size_t v83 = 2 * *(int *)(v69 + 520);
    memcpy(*(void **)(a1 + 40), (const void *)(v79 + 2 * v74 * (v75 - 1)), v83);
    memcpy(*(void **)(v68 + 56), (const void *)(v80 + 2 * v73 * ((*(int *)(v68 + 12) >> 1) - 1)), v83 & 0x7FFFFFFFFFFFFFFELL);
    int v84 = *(_DWORD *)(v68 + 12);
    int v70 = *(_DWORD *)(v68 + 16);
  }
  uint64_t v168 = v68;
  uint64_t v169 = (v84 >> 1);
  int v174 = v84;
  uint64_t vars8 = v73;
  if (v70 < 2)
  {
    uint64_t v88 = 0;
    BOOL v116 = 0;
    LODWORD(vars0) = 0;
  }
  else
  {
    BOOL v85 = 0;
    uint64_t v86 = v74;
    BOOL v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = v68 + 40 * v76;
    uint64_t v162 = v89 + 112;
    uint64_t v163 = v89 - 48;
    uint64_t v161 = v84;
    unsigned int v167 = v82 | v81;
    uint64_t v164 = v86;
    uint64_t v90 = 2 * v86;
    do
    {
      uint64_t v91 = sub_1D0C5EB40(a2, v88, a3, v81);
      unint64_t v93 = *v72;
      BOOL v94 = (v93 & 1) == 0;
      if (v93)
      {
        uint64_t v95 = (v93 >> 1) & 7;
        if (v95 > 4) {
          return result;
        }
        if (v95 == 4)
        {
          uint64_t v96 = 0;
          unsigned __int8 v97 = v72[13];
          a41 = 0u;
          a42 = 0u;
          int v98 = v174;
          do
          {
            *((unsigned char *)&a41 + ((v97 + (_BYTE)v96) & 0x1F)) = v72[v96 + 1];
            ++v96;
          }
          while (v96 != 4);
        }
        else
        {
          LOWORD(a41) = *(_WORD *)(v72 + 1);
          *(_WORD *)((char *)&a41 + 3) = *(_WORD *)(v72 + 3);
          BYTE2(a41) = 0;
          int v98 = v174;
        }
        BOOL v99 = v94;
        if (v87 && v98 > 0)
        {
          unsigned __int8 v100 = (_WORD *)(v79 - 2);
          uint64_t v101 = &a45;
          uint64_t v102 = v161;
          do
          {
            *(_WORD *)uint64_t v101 = *v100;
            v101 += 2;
            unsigned __int8 v100 = (_WORD *)((char *)v100 + v90);
            --v102;
          }
          while (v102);
        }
        uint64_t v103 = v91;
        (*(void (**)(uint64_t, uint64_t, long long *))(v163 + 8 * v95))(v79, v164, &a41);
        uint64_t v91 = v103;
        LODWORD(v93) = *v72;
        BOOL v94 = v99;
      }
      BOOL v104 = (v93 & 0x10) == 0;
      if ((v93 & 0x10) != 0)
      {
        if (v93 > 0x9F) {
          return result;
        }
        unsigned int v105 = v93 >> 5;
        uint64_t vars0 = v79;
        if (v105 == 4)
        {
          uint64_t v106 = 0;
          unsigned __int8 v107 = v72[14];
          a41 = 0u;
          a42 = 0u;
          do
          {
            *((unsigned char *)&a41 + ((v107 + (_BYTE)v106) & 0x1F)) = v72[v106 + 5];
            ++v106;
          }
          while (v106 != 4);
          uint64_t v108 = 0;
          unsigned __int8 v109 = v72[15];
          a43 = 0u;
          a44 = 0u;
          do
          {
            *((unsigned char *)&a43 + ((v109 + (_BYTE)v108) & 0x1F)) = v72[v108 + 9];
            ++v108;
          }
          while (v108 != 4);
        }
        else
        {
          LOWORD(a41) = *(_WORD *)(v72 + 5);
          *(_WORD *)((char *)&a41 + 3) = *(_WORD *)(v72 + 7);
          BYTE2(a41) = 0;
          LOWORD(a43) = *(_WORD *)(v72 + 9);
          *(_WORD *)((char *)&a43 + 3) = *(_WORD *)(v72 + 11);
          BYTE2(a43) = 0;
        }
        BOOL v110 = v94;
        BOOL v111 = v104;
        if (v85 && v174 > 1)
        {
          uint64_t v112 = (_DWORD *)(v175 - 4);
          uint64_t v113 = &a17;
          uint64_t v114 = v169;
          do
          {
            *(_DWORD *)uint64_t v113 = *v112;
            v113 += 4;
            uint64_t v112 = (_DWORD *)((char *)v112 + 2 * v73);
            --v114;
          }
          while (v114);
        }
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))(v162 + 8 * v105))(v175, vars8, &a41, v91, &a17, v176, v169);
        BOOL v104 = v111;
        BOOL v94 = v110;
        uint64_t v79 = vars0;
      }
      uint64_t v115 = *(int *)(v168 + 12);
      v79 += 2 * v115;
      v175 += 2 * v115;
      v176 += 2 * v115;
      v177 += 2 * v115;
      v72 += 16;
      uint64_t v88 = (v88 + 1);
      uint64_t v81 = v167;
      BOOL v85 = v104;
      BOOL v87 = v94;
    }
    while ((int)v88 < *(_DWORD *)(v168 + 16) - 1);
    BOOL v116 = v94;
    LODWORD(vars0) = v104;
    LOBYTE(v81) = v167;
    uint64_t v68 = v168;
    uint64_t v74 = v164;
  }
  int v173 = sub_1D0C5EB40(a2, v88, a3, v81 & 0x5D);
  int v117 = *(_DWORD *)(v159 + 520) - (*(_DWORD *)(v68 + 16) - 1) * *(_DWORD *)(v68 + 12);
  unint64_t v118 = *v72;
  if (v118)
  {
    uint64_t v119 = (v118 >> 1) & 7;
    if (v119 > 4) {
      return result;
    }
    if (v119 == 4)
    {
      uint64_t v120 = 0;
      unsigned __int8 v121 = v72[13];
      int8x16_t result = 0uLL;
      a41 = 0u;
      a42 = 0u;
      do
      {
        *((unsigned char *)&a41 + ((v121 + (_BYTE)v120) & 0x1F)) = v72[v120 + 1];
        ++v120;
      }
      while (v120 != 4);
    }
    else
    {
      LOWORD(a41) = *(_WORD *)(v72 + 1);
      *(_WORD *)((char *)&a41 + 3) = *(_WORD *)(v72 + 3);
      BYTE2(a41) = 0;
    }
    if (v174 > 0 && v116)
    {
      uint64_t v123 = (_WORD *)(v79 - 2);
      uint64_t v124 = &a45;
      uint64_t v125 = v174;
      do
      {
        *(_WORD *)uint64_t v124 = *v123;
        v124 += 2;
        v123 += v74;
        --v125;
      }
      while (v125);
    }
    uint64_t v126 = v74;
    int v127 = v173;
    if ((v173 & 4) != 0) {
      int v128 = 34;
    }
    else {
      int v128 = 2;
    }
    if ((v173 & 4) != 0) {
      int v129 = 17;
    }
    else {
      int v129 = 1;
    }
    unsigned int v130 = v128 & 0xFFFFFF7F | (((v173 & 8) != 0) << 7);
    unsigned int v131 = v129 & 0xFFFFFFBF | (((v173 & 8) != 0) << 6);
    int v171 = v117;
    int v132 = v117 >> 3;
    int v133 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))(v68 + 8 * v119 + 192);
    uint64_t v134 = 4;
    do
    {
      if ((v132 & (1 << --v134)) != 0)
      {
        v132 -= 1 << v134;
        if (v132) {
          unsigned int v135 = v130;
        }
        else {
          unsigned int v135 = 0;
        }
        uint64_t v136 = v135 | v127;
        int v127 = v127 & 0xC | v131;
        (*v133)(v79, v126, &a41, v136, &a45, v177, v174);
        v79 += 2 * (8 << v134);
        v177 += 2 * (8 << v134);
      }
      v133 -= 5;
    }
    while (v134);
    LODWORD(v118) = *v72;
    uint64_t v68 = v168;
    int v117 = v171;
  }
  if ((v118 & 0x10) == 0)
  {
LABEL_95:
    int8x16_t result = vextq_s8(*(int8x16_t *)(v68 + 32), *(int8x16_t *)(v68 + 32), 8uLL);
    int8x16_t v157 = vextq_s8(*(int8x16_t *)(v68 + 48), *(int8x16_t *)(v68 + 48), 8uLL);
    *(int8x16_t *)(v68 + 32) = result;
    *(int8x16_t *)(v68 + 48) = v157;
    return result;
  }
  if (v118 <= 0x9F)
  {
    unsigned int v137 = v118 >> 5;
    if (v137 == 4)
    {
      uint64_t v138 = 0;
      unsigned __int8 v139 = v72[14];
      a41 = 0u;
      a42 = 0u;
      uint64_t v140 = vars8;
      int v141 = vars0;
      do
      {
        *((unsigned char *)&a41 + ((v139 + (_BYTE)v138) & 0x1F)) = v72[v138 + 5];
        ++v138;
      }
      while (v138 != 4);
      uint64_t v142 = 0;
      unsigned __int8 v143 = v72[15];
      a43 = 0u;
      a44 = 0u;
      do
      {
        *((unsigned char *)&a43 + ((v143 + (_BYTE)v142) & 0x1F)) = v72[v142 + 9];
        ++v142;
      }
      while (v142 != 4);
    }
    else
    {
      LOWORD(a41) = *(_WORD *)(v72 + 5);
      *(_WORD *)((char *)&a41 + 3) = *(_WORD *)(v72 + 7);
      BYTE2(a41) = 0;
      LOWORD(a43) = *(_WORD *)(v72 + 9);
      *(_WORD *)((char *)&a43 + 3) = *(_WORD *)(v72 + 11);
      BYTE2(a43) = 0;
      uint64_t v140 = vars8;
      int v141 = vars0;
    }
    if (v174 > 1) {
      int v144 = v141;
    }
    else {
      int v144 = 0;
    }
    if (v144 == 1)
    {
      uint64_t v145 = (_DWORD *)(v175 - 4);
      int8x16_t v146 = &a17;
      uint64_t v147 = v169;
      do
      {
        *(_DWORD *)int8x16_t v146 = *v145;
        v146 += 4;
        uint64_t v145 = (_DWORD *)((char *)v145 + 2 * v140);
        --v147;
      }
      while (v147);
    }
    if ((v173 & 4) != 0) {
      int v148 = 34;
    }
    else {
      int v148 = 2;
    }
    if ((v173 & 4) != 0) {
      int v149 = 17;
    }
    else {
      int v149 = 1;
    }
    unsigned int v150 = v148 & 0xFFFFFF7F | (((v173 & 8) != 0) << 7);
    unsigned int v151 = v149 & 0xFFFFFFBF | (((v173 & 8) != 0) << 6);
    int v152 = v117 >> 3;
    uint64_t v153 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))(v68 + 8 * v137 + 392);
    uint64_t v154 = 5;
    do
    {
      if ((v152 & (1 << --v154)) != 0)
      {
        v152 -= 1 << v154;
        if (v152) {
          unsigned int v155 = v150;
        }
        else {
          unsigned int v155 = 0;
        }
        uint64_t v156 = v155 | v173;
        int v173 = v173 & 0xC | v151;
        (*v153)(v175, vars8, &a41, v156, &a17, v176, v169);
        v175 += 2 * (8 << v154);
        v176 += 2 * (8 << v154);
      }
      v153 -= 5;
    }
    while (v154);
    goto LABEL_95;
  }
  return result;
}

int8x16_t sub_1D0D369D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,long long a35,long long a36,long long a37,long long a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t __dst)
{
  uint64_t v53 = MEMORY[0x1F4188790]();
  uint64_t v55 = &v161;
  STACK[0x91F8] = *MEMORY[0x1E4F143B8];
  uint64_t v179 = v56;
  uint64_t v57 = *(void *)(v56 + 8);
  int v58 = *(_DWORD *)(v53 + 16);
  int v59 = *(_DWORD *)(v53 + 20);
  uint64_t v60 = (unsigned __int8 *)(*(void *)(v57 + 1000) + 16 * v58 * v54);
  uint64_t v61 = *(void *)(v57 + 416);
  uint64_t v62 = *(void *)(v57 + 424);
  int v64 = *(_DWORD *)(v53 + 8);
  uint64_t v63 = *(int *)(v53 + 12);
  uint64_t v65 = (int)v63 * (uint64_t)v54;
  char v66 = *(unsigned char *)(v57 + 531);
  uint64_t v67 = *(void *)(v57 + 400) + ((v61 * v65) << v66);
  uint64_t v68 = *(void *)(v57 + 408) + ((v62 * ((uint64_t)(int)v65 >> 1)) << v66);
  uint64_t v69 = *(void *)(v53 + 32);
  uint64_t v70 = *(void *)(v53 + 48);
  if (v54) {
    uint64_t v71 = 38;
  }
  else {
    uint64_t v71 = 2;
  }
  if (v54) {
    int v72 = 17;
  }
  else {
    int v72 = 1;
  }
  unsigned int v178 = v54;
  int v174 = (int8x16_t *)v53;
  uint64_t vars0 = *(void *)(v57 + 424);
  uint64_t v171 = v61;
  uint64_t v180 = v70;
  uint64_t v181 = v68;
  uint64_t v163 = v57;
  if (v59 - 1 <= v54)
  {
    int v175 = v72;
    int v75 = *(_DWORD *)(v57 + 524) - v65;
  }
  else
  {
    uint64_t v73 = v53;
    uint64_t v71 = v71 | 0x88;
    int v175 = v72 | 0x40;
    size_t v74 = *(int *)(v57 + 520);
    memcpy(*(void **)(v53 + 40), (const void *)(v67 + v61 * (v63 - 1)), v74);
    memcpy(*(void **)(v73 + 56), (const void *)(v68 + v62 * ((*(int *)(v73 + 12) >> 1) - 1)), v74 & 0x7FFFFFFFFFFFFFFFLL);
    int v75 = *(_DWORD *)(v73 + 12);
    int v58 = *(_DWORD *)(v73 + 16);
  }
  uint64_t v172 = (v75 >> 1);
  unsigned int v173 = v75;
  if (v58 < 2)
  {
    uint64_t v78 = 0;
    BOOL v110 = 0;
    BOOL v168 = 0;
  }
  else
  {
    uint64_t v162 = &v161;
    LODWORD(v76) = 0;
    BOOL v77 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = &v174->i8[40 * v64];
    uint64_t v165 = v79 + 112;
    uint64_t v166 = v79 - 48;
    uint64_t v164 = v75;
    HIDWORD(vars8) = v175 | v71;
    do
    {
      uint64_t v80 = sub_1D0C5EB40(v179, v78, v178, v71);
      unsigned int v82 = v80;
      unint64_t v83 = *v60;
      BOOL v84 = (v83 & 1) == 0;
      int v176 = v84;
      if (v83)
      {
        BOOL v168 = v76;
        BOOL v76 = v69;
        uint64_t v85 = v80;
        uint64_t v86 = (v83 >> 1) & 7;
        if (v86 > 4) {
          return result;
        }
        if (v86 == 4)
        {
          uint64_t v87 = 0;
          unsigned __int8 v88 = v60[13];
          a35 = 0u;
          a36 = 0u;
          uint64_t v89 = v173;
          uint64_t v90 = v171;
          do
          {
            *((unsigned char *)&a35 + ((v88 + (_BYTE)v87) & 0x1F)) = v60[v87 + 1];
            ++v87;
          }
          while (v87 != 4);
        }
        else
        {
          LOWORD(a35) = *(_WORD *)(v60 + 1);
          *(_WORD *)((char *)&a35 + 3) = *(_WORD *)(v60 + 3);
          BYTE2(a35) = 0;
          uint64_t v89 = v173;
          uint64_t v90 = v171;
        }
        if (v77 && (int)v89 > 0)
        {
          uint64_t v91 = (char *)(v67 - 1);
          uint64_t v92 = &a39;
          uint64_t v93 = v164;
          do
          {
            *v92++ = *v91;
            v91 += v90;
            --v93;
          }
          while (v93);
        }
        uint64_t v94 = v89;
        sub_1D0CD4C2C(&__dst, v179, v78 << v174->i32[2], v178 << v174->i32[2], v174->i32[3], v89, 0);
        uint64_t v95 = *(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, BOOL, uint64_t))&v166[8 * v86];
        unsigned int v82 = v85;
        uint64_t v96 = v85;
        uint64_t v69 = v76;
        v95(v67, v90, &a35, v96, &a39, v76, v94);
        sub_1D0CD4CDC((int *)&__dst);
        LODWORD(v83) = *v60;
        BOOL v84 = v176;
        LOBYTE(v76) = v168;
      }
      BOOL v97 = (v83 & 0x10) == 0;
      if ((v83 & 0x10) != 0)
      {
        if (v83 > 0x9F) {
          return result;
        }
        unsigned int v98 = v83 >> 5;
        unsigned int v167 = v82;
        if (v83 >> 5 == 4)
        {
          uint64_t v99 = 0;
          unsigned __int8 v100 = v60[14];
          a35 = 0u;
          a36 = 0u;
          do
          {
            *((unsigned char *)&a35 + ((v100 + (_BYTE)v99) & 0x1F)) = v60[v99 + 5];
            ++v99;
          }
          while (v99 != 4);
          uint64_t v101 = 0;
          unsigned __int8 v102 = v60[15];
          a37 = 0u;
          a38 = 0u;
          do
          {
            *((unsigned char *)&a37 + ((v102 + (_BYTE)v101) & 0x1F)) = v60[v101 + 9];
            ++v101;
          }
          while (v101 != 4);
        }
        else
        {
          LOWORD(a35) = *(_WORD *)(v60 + 5);
          *(_WORD *)((char *)&a35 + 3) = *(_WORD *)(v60 + 7);
          BYTE2(a35) = 0;
          LOWORD(a37) = *(_WORD *)(v60 + 9);
          *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 11);
          BYTE2(a37) = 0;
        }
        BOOL v103 = v97;
        int v104 = v76 && (int)v173 > 1;
        uint64_t v105 = vars0;
        if (v104 == 1)
        {
          uint64_t v106 = (_WORD *)(v181 - 2);
          unsigned __int8 v107 = &a19;
          uint64_t v108 = v172;
          do
          {
            *(_WORD *)unsigned __int8 v107 = *v106;
            v107 += 2;
            uint64_t v106 = (_WORD *)((char *)v106 + v105);
            --v108;
          }
          while (v108);
        }
        sub_1D0CD4C2C(&__dst, v179, v78 << v174->i32[2], v178 << v174->i32[2], v174->i32[3], v173, 1u);
        (*(void (**)(uint64_t, uint64_t, long long *, void, char *, uint64_t, uint64_t))&v165[8 * v98])(v181, v105, &a35, v167, &a19, v180, v172);
        sub_1D0CD4CDC((int *)&__dst);
        BOOL v97 = v103;
        BOOL v84 = v176;
      }
      uint64_t v109 = v174->i32[3];
      v67 += v109;
      v69 += v109;
      v181 += v109;
      v180 += v109;
      v60 += 16;
      uint64_t v78 = (v78 + 1);
      uint64_t v71 = HIDWORD(vars8);
      LODWORD(v76) = v97;
      BOOL v77 = v84;
    }
    while ((int)v78 < v174[1].i32[0] - 1);
    BOOL v110 = v84;
    BOOL v168 = v97;
    LOBYTE(v71) = BYTE4(vars8);
    uint64_t v55 = v162;
  }
  uint64_t v111 = vars0;
  int v112 = sub_1D0C5EB40(v179, v78, v178, v71 & 0x5D);
  int v113 = *(_DWORD *)(v163 + 520) - (v174[1].i32[0] - 1) * v174->i32[3];
  unint64_t v114 = *v60;
  uint64_t v115 = v55;
  if (v114)
  {
    uint64_t v116 = (v114 >> 1) & 7;
    if (v116 > 4) {
      return result;
    }
    if (v116 == 4)
    {
      uint64_t v117 = 0;
      unsigned __int8 v118 = v60[13];
      a35 = 0u;
      a36 = 0u;
      int v119 = v173;
      uint64_t v120 = v171;
      do
      {
        *((unsigned char *)&a35 + ((v118 + (_BYTE)v117) & 0x1F)) = v60[v117 + 1];
        ++v117;
      }
      while (v117 != 4);
    }
    else
    {
      LOWORD(a35) = *(_WORD *)(v60 + 1);
      *(_WORD *)((char *)&a35 + 3) = *(_WORD *)(v60 + 3);
      BYTE2(a35) = 0;
      int v119 = v173;
      uint64_t v120 = v171;
    }
    uint64_t v162 = v115;
    if (v119 > 0 && v110)
    {
      uint64_t v122 = (char *)(v67 - 1);
      uint64_t v123 = v119;
      uint64_t v124 = &a39;
      do
      {
        *v124++ = *v122;
        v122 += v120;
        --v123;
      }
      while (v123);
    }
    sub_1D0CD4C2C(&__dst, v179, v78 << v174->i32[2], v178 << v174->i32[2], v113, v119, 0);
    if ((v112 & 4) != 0) {
      int v125 = 34;
    }
    else {
      int v125 = 2;
    }
    if ((v112 & 4) != 0) {
      int v126 = 17;
    }
    else {
      int v126 = 1;
    }
    unsigned int v127 = v125 & 0xFFFFFF7F | (((v112 & 8) != 0) << 7);
    unsigned int v128 = v126 & 0xFFFFFFBF | (((v112 & 8) != 0) << 6);
    int v129 = v112;
    HIDWORD(vars8) = v113;
    int v130 = v113 >> 3;
    unsigned int v131 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))&v174[12] + v116;
    uint64_t v132 = 4;
    int v177 = v129;
    int v133 = v129;
    do
    {
      if ((v130 & (1 << --v132)) != 0)
      {
        v130 -= 1 << v132;
        if (v130) {
          unsigned int v134 = v127;
        }
        else {
          unsigned int v134 = 0;
        }
        uint64_t v135 = v134 | v133;
        int v133 = v133 & 0xC | v128;
        (*v131)(v67, v171, &a35, v135, &a39, v69, v173);
        v67 += 8 << v132;
        v69 += 8 << v132;
      }
      v131 -= 5;
    }
    while (v132);
    sub_1D0CD4CDC((int *)&__dst);
    LODWORD(v114) = *v60;
    uint64_t v115 = v162;
    uint64_t v111 = vars0;
    int v112 = v177;
    int v113 = HIDWORD(vars8);
  }
  if ((v114 & 0x10) == 0)
  {
LABEL_96:
    int8x16_t result = vextq_s8(v174[2], v174[2], 8uLL);
    int8x16_t v160 = vextq_s8(v174[3], v174[3], 8uLL);
    v174[2] = result;
    v174[3] = v160;
    return result;
  }
  if (v114 <= 0x9F)
  {
    unsigned int v136 = v114 >> 5;
    if (v114 >> 5 == 4)
    {
      uint64_t v137 = 0;
      unsigned __int8 v138 = v60[14];
      a35 = 0u;
      a36 = 0u;
      uint64_t v139 = v181;
      int v140 = v173;
      BOOL v141 = v168;
      do
      {
        *((unsigned char *)&a35 + ((v138 + (_BYTE)v137) & 0x1F)) = v60[v137 + 5];
        ++v137;
      }
      while (v137 != 4);
      uint64_t v142 = 0;
      unsigned __int8 v143 = v60[15];
      a37 = 0u;
      a38 = 0u;
      do
      {
        *((unsigned char *)&a37 + ((v143 + (_BYTE)v142) & 0x1F)) = v60[v142 + 9];
        ++v142;
      }
      while (v142 != 4);
    }
    else
    {
      LOWORD(a35) = *(_WORD *)(v60 + 5);
      *(_WORD *)((char *)&a35 + 3) = *(_WORD *)(v60 + 7);
      BYTE2(a35) = 0;
      LOWORD(a37) = *(_WORD *)(v60 + 9);
      *(_WORD *)((char *)&a37 + 3) = *(_WORD *)(v60 + 11);
      BYTE2(a37) = 0;
      uint64_t v139 = v181;
      int v140 = v173;
      BOOL v141 = v168;
    }
    uint64_t v162 = v115;
    if (v140 > 1 && v141)
    {
      uint64_t v145 = (_WORD *)(v139 - 2);
      int8x16_t v146 = &a19;
      uint64_t v147 = v172;
      do
      {
        *(_WORD *)int8x16_t v146 = *v145;
        v146 += 2;
        uint64_t v145 = (_WORD *)((char *)v145 + v111);
        --v147;
      }
      while (v147);
    }
    sub_1D0CD4C2C(&__dst, v179, v78 << v174->i32[2], v178 << v174->i32[2], v113, v140, 1u);
    if ((v112 & 4) != 0) {
      int v148 = 34;
    }
    else {
      int v148 = 2;
    }
    int v149 = v112;
    if ((v112 & 4) != 0) {
      int v150 = 17;
    }
    else {
      int v150 = 1;
    }
    int v151 = v149;
    unsigned int v152 = v148 & 0xFFFFFF7F | (((v149 & 8) != 0) << 7);
    unsigned int v153 = v150 & 0xFFFFFFBF | (((v149 & 8) != 0) << 6);
    int v154 = v113 >> 3;
    unsigned int v155 = &v174[24].i64[v136 + 1];
    uint64_t v156 = 5;
    uint64_t v157 = v180;
    do
    {
      if ((v154 & (1 << --v156)) != 0)
      {
        v154 -= 1 << v156;
        if (v154) {
          unsigned int v158 = v152;
        }
        else {
          unsigned int v158 = 0;
        }
        uint64_t v159 = v158 | v151;
        int v151 = v151 & 0xC | v153;
        ((void (*)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))*v155)(v139, vars0, &a35, v159, &a19, v157, v172);
        v139 += 8 << v156;
        v157 += 8 << v156;
      }
      v155 -= 5;
    }
    while (v156);
    sub_1D0CD4CDC((int *)&__dst);
    goto LABEL_96;
  }
  return result;
}

uint64_t sub_1D0D37298(uint64_t result, uint64_t a2)
{
  uint64_t v2 = sub_1D0D372F0;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    uint64_t v2 = sub_1D0D3780C;
    if (*(unsigned char *)(*(void *)(a2 + 16) + 283)) {
      uint64_t v2 = sub_1D0D372F0;
    }
  }
  *(void *)(result + 448) = v2;
  *(void *)(result + 456) = 0;
  return result;
}

int8x16_t sub_1D0D372F0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t __dst)
{
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  char v11 = &v74;
  STACK[0x12178] = *MEMORY[0x1E4F143B8];
  uint64_t v80 = v12;
  uint64_t v13 = *(void *)(v12 + 8);
  int v14 = *(_DWORD *)(v9 + 16);
  int v15 = *(_DWORD *)(v9 + 20);
  unsigned int v16 = (unsigned __int8 *)(*(void *)(v13 + 1000) + 16 * v14 * v10);
  uint64_t v17 = *(void *)(v13 + 416);
  int v19 = *(_DWORD *)(v9 + 8);
  uint64_t v18 = *(int *)(v9 + 12);
  uint64_t v20 = (int)v18 * (uint64_t)v10;
  uint64_t v21 = *(void *)(v13 + 400) + ((v17 * v20) << *(unsigned char *)(v13 + 531));
  uint64_t v22 = *(void *)(v9 + 32);
  if (v10) {
    uint64_t v23 = 38;
  }
  else {
    uint64_t v23 = 2;
  }
  if (v10) {
    int v24 = 17;
  }
  else {
    int v24 = 1;
  }
  unsigned int vars8_4 = v10;
  uint64_t v81 = (int8x16_t *)v9;
  uint64_t v75 = v13;
  if (v15 - 1 <= v10)
  {
    unsigned int vars8 = *(_DWORD *)(v13 + 524) - v20;
  }
  else
  {
    uint64_t v25 = v9;
    uint64_t v23 = v23 | 0x88;
    v24 |= 0x40u;
    memcpy(*(void **)(v9 + 40), (const void *)(v21 + 2 * v17 * (v18 - 1)), 2 * *(int *)(v13 + 520));
    unsigned int vars8 = *(_DWORD *)(v25 + 12);
    int v14 = *(_DWORD *)(v25 + 16);
  }
  uint64_t v26 = v80;
  if (v14 < 2)
  {
    uint64_t v28 = 0;
    int v48 = 0;
    uint64_t v30 = v81;
  }
  else
  {
    BOOL v76 = &v74;
    unsigned __int8 v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = &v81->i8[40 * v19];
    uint64_t v30 = v81;
    uint64_t v77 = vars8;
    uint64_t v78 = v29 - 48;
    LODWORD(vars0) = v24 | v23;
    uint64_t v79 = v17;
    do
    {
      uint64_t v31 = sub_1D0C5EB40(v26, v28, vars8_4, v23);
      unint64_t v33 = *v16;
      int v34 = (v33 & 1) == 0;
      if (v33)
      {
        uint64_t v35 = (v33 >> 1) & 7;
        if (v35 > 4) {
          return result;
        }
        uint64_t v36 = v31;
        HIDWORD(v82) = (v33 & 1) == 0;
        if (v35 == 4)
        {
          uint64_t v37 = 0;
          unsigned __int8 v38 = v16[13];
          *(_OWORD *)&STACK[0x12080] = 0u;
          *(_OWORD *)&STACK[0x12090] = 0u;
          do
          {
            *((unsigned char *)&STACK[0x12080] + ((v38 + (_BYTE)v37) & 0x1F)) = v16[v37 + 1];
            ++v37;
          }
          while (v37 != 4);
        }
        else
        {
          LOWORD(STACK[0x12080]) = *(_WORD *)(v16 + 1);
          LOWORD(STACK[0x12083]) = *(_WORD *)(v16 + 3);
          LOBYTE(STACK[0x12082]) = 0;
        }
        if ((v27 & ((int)vars8 > 0)) == 1)
        {
          int v39 = (_WORD *)(v21 - 2);
          BOOL v40 = &STACK[0x120C0];
          uint64_t v41 = v77;
          do
          {
            *(_WORD *)BOOL v40 = *v39;
            BOOL v40 = (unint64_t *)((char *)v40 + 2);
            v39 += v17;
            --v41;
          }
          while (v41);
        }
        BOOL v42 = v81;
        uint64_t v43 = v26;
        uint64_t v44 = vars8;
        sub_1D0CD65DC(&__dst, v43, v28 << v81->i32[2], vars8_4 << v81->i32[2], v81->i32[3], vars8);
        uint64_t v45 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))&v78[8 * v35];
        uint64_t v30 = v42;
        uint64_t v46 = v44;
        uint64_t v26 = v80;
        v45(v21, v79, &STACK[0x12080], v36, &STACK[0x120C0], v22, v46);
        sub_1D0CD3348((int *)&__dst);
        int v34 = HIDWORD(v82);
      }
      uint64_t v47 = v30->i32[3];
      v21 += 2 * v47;
      v22 += 2 * v47;
      v16 += 16;
      uint64_t v28 = (v28 + 1);
      uint64_t v23 = vars0;
      unsigned __int8 v27 = v34;
    }
    while ((int)v28 < v30[1].i32[0] - 1);
    int v48 = v34;
    LOBYTE(v23) = vars0;
    char v11 = v76;
    uint64_t v17 = v79;
  }
  int v49 = sub_1D0C5EB40(v26, v28, vars8_4, v23 & 0x5D);
  unint64_t v50 = *v16;
  if ((v50 & 1) == 0) {
    goto LABEL_54;
  }
  int v51 = v30[1].i32[0] - 1;
  uint64_t v52 = (v50 >> 1) & 7;
  if (v52 <= 4)
  {
    int v53 = v49;
    uint64_t vars0 = v52;
    int v54 = *(_DWORD *)(v75 + 520) - v51 * v30->i32[3];
    if (v52 == 4)
    {
      uint64_t v55 = 0;
      unsigned __int8 v56 = v16[13];
      *(_OWORD *)&STACK[0x12080] = 0u;
      *(_OWORD *)&STACK[0x12090] = 0u;
      do
      {
        *((unsigned char *)&STACK[0x12080] + ((v56 + (_BYTE)v55) & 0x1F)) = v16[v55 + 1];
        ++v55;
      }
      while (v55 != 4);
    }
    else
    {
      LOWORD(STACK[0x12080]) = *(_WORD *)(v16 + 1);
      LOWORD(STACK[0x12083]) = *(_WORD *)(v16 + 3);
      LOBYTE(STACK[0x12082]) = 0;
    }
    BOOL v76 = v11;
    if ((int)vars8 > 0) {
      int v57 = v48;
    }
    else {
      int v57 = 0;
    }
    if (v57 == 1)
    {
      int v58 = (_WORD *)(v21 - 2);
      int v59 = &STACK[0x120C0];
      uint64_t v60 = vars8;
      do
      {
        *(_WORD *)int v59 = *v58;
        int v59 = (unint64_t *)((char *)v59 + 2);
        v58 += v17;
        --v60;
      }
      while (v60);
    }
    uint64_t v61 = v17;
    int v62 = v54;
    sub_1D0CD65DC(&__dst, v26, v28 << v30->i32[2], vars8_4 << v30->i32[2], v54, vars8);
    if ((v53 & 4) != 0) {
      int v63 = 34;
    }
    else {
      int v63 = 2;
    }
    if ((v53 & 4) != 0) {
      int v64 = 17;
    }
    else {
      int v64 = 1;
    }
    unsigned int v65 = v63 & 0xFFFFFF7F | (((v53 & 8) != 0) << 7);
    unsigned int v66 = v64 & 0xFFFFFFBF | (((v53 & 8) != 0) << 6);
    uint64_t v67 = v30;
    int v68 = v62 >> 3;
    uint64_t v69 = (void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))&v67[12]
        + vars0;
    uint64_t v70 = 4;
    do
    {
      if ((v68 & (1 << --v70)) != 0)
      {
        v68 -= 1 << v70;
        if (v68) {
          unsigned int v71 = v65;
        }
        else {
          unsigned int v71 = 0;
        }
        uint64_t v72 = v71 | v53;
        int v53 = v53 & 0xC | v66;
        (*v69)(v21, v61, &STACK[0x12080], v72, &STACK[0x120C0], v22, vars8);
        v21 += 2 * (8 << v70);
        v22 += 2 * (8 << v70);
      }
      v69 -= 5;
    }
    while (v70);
    sub_1D0CD3348((int *)&__dst);
    uint64_t v30 = v81;
LABEL_54:
    int8x16_t result = vextq_s8(v30[2], v30[2], 8uLL);
    int8x16_t v73 = vextq_s8(v30[3], v30[3], 8uLL);
    v30[2] = result;
    void v30[3] = v73;
  }
  return result;
}

int8x16_t sub_1D0D3780C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  a38 = *MEMORY[0x1E4F143B8];
  uint64_t vars0 = a2;
  uint64_t v39 = *(void *)(a2 + 8);
  int v40 = *(_DWORD *)(a1 + 16);
  int v41 = *(_DWORD *)(a1 + 20);
  BOOL v42 = (unsigned __int8 *)(*(void *)(v39 + 1000) + 16 * v40 * a3);
  uint64_t v43 = *(void *)(v39 + 416);
  int v45 = *(_DWORD *)(a1 + 8);
  uint64_t v44 = *(int *)(a1 + 12);
  uint64_t v46 = (int)v44 * (uint64_t)a3;
  uint64_t v47 = *(void *)(v39 + 400) + ((v43 * v46) << *(unsigned char *)(v39 + 531));
  uint64_t v48 = *(void *)(a1 + 32);
  if (a3) {
    uint64_t v49 = 38;
  }
  else {
    uint64_t v49 = 2;
  }
  if (a3) {
    int v50 = 17;
  }
  else {
    int v50 = 1;
  }
  unsigned int vars8 = a3;
  uint64_t v92 = v39;
  if (v41 - 1 <= a3)
  {
    unsigned int vars8_4 = *(_DWORD *)(v39 + 524) - v46;
  }
  else
  {
    uint64_t v49 = v49 | 0x88;
    v50 |= 0x40u;
    memcpy(*(void **)(a1 + 40), (const void *)(v47 + 2 * v43 * (v44 - 1)), 2 * *(int *)(v39 + 520));
    unsigned int vars8_4 = *(_DWORD *)(a1 + 12);
    int v40 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v93 = &v91;
  uint64_t v96 = v43;
  if (v40 < 2)
  {
    uint64_t v52 = 0;
    BOOL v57 = 0;
  }
  else
  {
    BOOL v51 = 0;
    uint64_t v52 = 0;
    uint64_t v94 = vars8_4;
    uint64_t v95 = a1 + 40 * v45 - 48;
    HIDWORD(v97) = v50 | v49;
    uint64_t v53 = 2 * v43;
    do
    {
      uint64_t v54 = sub_1D0C5EB40(vars0, v52, vars8, v49);
      unint64_t v56 = *v42;
      BOOL v57 = (v56 & 1) == 0;
      if (v56)
      {
        uint64_t v58 = (v56 >> 1) & 7;
        if (v58 > 4) {
          return result;
        }
        if (v58 == 4)
        {
          uint64_t v59 = 0;
          unsigned __int8 v60 = v42[13];
          a9 = 0u;
          a10 = 0u;
          do
          {
            *((unsigned char *)&a9 + ((v60 + (_BYTE)v59) & 0x1F)) = v42[v59 + 1];
            ++v59;
          }
          while (v59 != 4);
        }
        else
        {
          LOWORD(a9) = *(_WORD *)(v42 + 1);
          *(_WORD *)((char *)&a9 + 3) = *(_WORD *)(v42 + 3);
          BYTE2(a9) = 0;
        }
        if (v51 && (int)vars8_4 > 0)
        {
          uint64_t v61 = (_WORD *)(v47 - 2);
          int v62 = &a15;
          uint64_t v63 = v94;
          do
          {
            *(_WORD *)int v62 = *v61;
            v62 += 2;
            uint64_t v61 = (_WORD *)((char *)v61 + v53);
            --v63;
          }
          while (v63);
        }
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))(v95 + 8 * v58))(v47, v96, &a9, v54, &a15, v48, vars8_4);
      }
      uint64_t v64 = *(int *)(a1 + 12);
      v47 += 2 * v64;
      v48 += 2 * v64;
      v42 += 16;
      uint64_t v52 = (v52 + 1);
      uint64_t v49 = HIDWORD(v97);
      BOOL v51 = v57;
    }
    while ((int)v52 < *(_DWORD *)(a1 + 16) - 1);
    LOBYTE(v49) = BYTE4(v97);
  }
  int v65 = sub_1D0C5EB40(vars0, v52, vars8, v49 & 0x5D);
  unint64_t v66 = *v42;
  if ((v66 & 1) == 0) {
    goto LABEL_52;
  }
  int v67 = *(_DWORD *)(a1 + 16) - 1;
  uint64_t v68 = (v66 >> 1) & 7;
  if (v68 <= 4)
  {
    int v69 = v65;
    int v70 = *(_DWORD *)(v92 + 520);
    int v71 = *(_DWORD *)(a1 + 12);
    if (v68 == 4)
    {
      uint64_t v72 = 0;
      int8x16_t v73 = v42 + 1;
      unsigned __int8 v74 = v42[13];
      a9 = 0u;
      a10 = 0u;
      uint64_t v75 = v96;
      do
      {
        *((unsigned char *)&a9 + ((v74 + (_BYTE)v72) & 0x1F)) = v73[v72];
        ++v72;
      }
      while (v72 != 4);
    }
    else
    {
      LOWORD(a9) = *(_WORD *)(v42 + 1);
      *(_WORD *)((char *)&a9 + 3) = *(_WORD *)(v42 + 3);
      BYTE2(a9) = 0;
      uint64_t v75 = v96;
    }
    int v76 = v70 - v67 * v71;
    if ((int)vars8_4 > 0 && v57)
    {
      uint64_t v78 = (_WORD *)(v47 - 2);
      uint64_t v79 = &a15;
      uint64_t v80 = vars8_4;
      do
      {
        *(_WORD *)uint64_t v79 = *v78;
        v79 += 2;
        v78 += v75;
        --v80;
      }
      while (v80);
    }
    if ((v65 & 4) != 0) {
      int v81 = 34;
    }
    else {
      int v81 = 2;
    }
    if ((v65 & 4) != 0) {
      int v82 = 17;
    }
    else {
      int v82 = 1;
    }
    unsigned int v83 = v81 & 0xFFFFFF7F | (((v65 & 8) != 0) << 7);
    unsigned int v84 = v82 & 0xFFFFFFBF | (((v65 & 8) != 0) << 6);
    int v85 = v76 >> 3;
    uint64_t v86 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))(a1 + 8 * v68 + 192);
    uint64_t v87 = 4;
    do
    {
      if ((v85 & (1 << --v87)) != 0)
      {
        v85 -= 1 << v87;
        if (v85) {
          unsigned int v88 = v83;
        }
        else {
          unsigned int v88 = 0;
        }
        uint64_t v89 = v88 | v69;
        int v69 = v69 & 0xC | v84;
        (*v86)(v47, v75, &a9, v89, &a15, v48, vars8_4);
        v47 += 2 * (8 << v87);
        v48 += 2 * (8 << v87);
      }
      v86 -= 5;
    }
    while (v87);
LABEL_52:
    int8x16_t result = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    int8x16_t v90 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
    *(int8x16_t *)(a1 + 32) = result;
    *(int8x16_t *)(a1 + 48) = v90;
  }
  return result;
}

uint64_t sub_1D0D37C20(uint64_t result, uint64_t a2)
{
  uint64_t v2 = sub_1D0D37C78;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    uint64_t v2 = sub_1D0D38148;
    if (*(unsigned char *)(*(void *)(a2 + 16) + 283)) {
      uint64_t v2 = sub_1D0D37C78;
    }
  }
  *(void *)(result + 448) = v2;
  *(void *)(result + 456) = 0;
  return result;
}

int8x16_t sub_1D0D37C78(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t __dst)
{
  uint64_t v29 = MEMORY[0x1F4188790](a1);
  uint64_t v31 = &v93;
  STACK[0x9138] = *MEMORY[0x1E4F143B8];
  uint64_t v98 = v32;
  uint64_t v33 = *(void *)(v32 + 8);
  int v34 = *(_DWORD *)(v29 + 16);
  int v35 = *(_DWORD *)(v29 + 20);
  uint64_t v36 = (unsigned __int8 *)(*(void *)(v33 + 1000) + 16 * v34 * v30);
  uint64_t v37 = *(void *)(v33 + 416);
  int v39 = *(_DWORD *)(v29 + 8);
  uint64_t v38 = *(int *)(v29 + 12);
  uint64_t v40 = (int)v38 * (uint64_t)v30;
  uint64_t v41 = *(void *)(v33 + 400) + ((v37 * v40) << *(unsigned char *)(v33 + 531));
  uint64_t v42 = *(void *)(v29 + 32);
  if (v30) {
    uint64_t v43 = 38;
  }
  else {
    uint64_t v43 = 2;
  }
  if (v30) {
    int v44 = 17;
  }
  else {
    int v44 = 1;
  }
  unsigned int vars8_4 = v30;
  uint64_t v99 = (int8x16_t *)v29;
  uint64_t v94 = v33;
  if (v35 - 1 <= v30)
  {
    unsigned int vars8 = *(_DWORD *)(v33 + 524) - v40;
  }
  else
  {
    uint64_t v45 = v29;
    uint64_t v43 = v43 | 0x88;
    v44 |= 0x40u;
    memcpy(*(void **)(v29 + 40), (const void *)(v41 + v37 * (v38 - 1)), *(int *)(v33 + 520));
    unsigned int vars8 = *(_DWORD *)(v45 + 12);
    int v34 = *(_DWORD *)(v45 + 16);
  }
  if (v34 < 2)
  {
    uint64_t v47 = 0;
    int v68 = 0;
    uint64_t v50 = v98;
    uint64_t v49 = v99;
  }
  else
  {
    uint64_t v95 = &v93;
    unsigned __int8 v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = &v99->i8[40 * v39];
    uint64_t v49 = v99;
    uint64_t v96 = vars8;
    uint64_t v97 = v48 - 48;
    LODWORD(vars0) = v44 | v43;
    uint64_t v50 = v98;
    do
    {
      uint64_t v51 = sub_1D0C5EB40(v50, v47, vars8_4, v43);
      unint64_t v53 = *v36;
      int v54 = (v53 & 1) == 0;
      if (v53)
      {
        uint64_t v55 = (v53 >> 1) & 7;
        if (v55 > 4) {
          return result;
        }
        uint64_t v56 = v51;
        if (v55 == 4)
        {
          uint64_t v57 = 0;
          unsigned __int8 v58 = v36[13];
          a9 = 0u;
          a10 = 0u;
          do
          {
            *((unsigned char *)&a9 + ((v58 + (_BYTE)v57) & 0x1F)) = v36[v57 + 1];
            ++v57;
          }
          while (v57 != 4);
        }
        else
        {
          LOWORD(a9) = *(_WORD *)(v36 + 1);
          *(_WORD *)((char *)&a9 + 3) = *(_WORD *)(v36 + 3);
          BYTE2(a9) = 0;
        }
        HIDWORD(v100) = v54;
        if ((v46 & ((int)vars8 > 0)) == 1)
        {
          uint64_t v59 = (char *)(v41 - 1);
          unsigned __int8 v60 = &a15;
          uint64_t v61 = v96;
          do
          {
            *v60++ = *v59;
            v59 += v37;
            --v61;
          }
          while (v61);
        }
        int v62 = v99;
        uint64_t v63 = v50;
        uint64_t v64 = vars8;
        sub_1D0CD7708(&__dst, v63, v47 << v99->i32[2], vars8_4 << v99->i32[2], v99->i32[3], vars8);
        int v65 = *(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, uint64_t))&v97[8 * v55];
        uint64_t v49 = v62;
        uint64_t v66 = v64;
        uint64_t v50 = v98;
        v65(v41, v37, &a9, v56, &a15, v42, v66);
        sub_1D0CD4CDC((int *)&__dst);
        int v54 = HIDWORD(v100);
      }
      uint64_t v67 = v49->i32[3];
      v41 += v67;
      v42 += v67;
      v36 += 16;
      uint64_t v47 = (v47 + 1);
      uint64_t v43 = vars0;
      unsigned __int8 v46 = v54;
    }
    while ((int)v47 < v49[1].i32[0] - 1);
    int v68 = v54;
    LOBYTE(v43) = vars0;
    uint64_t v31 = v95;
  }
  int v69 = sub_1D0C5EB40(v50, v47, vars8_4, v43 & 0x5D);
  unint64_t v70 = *v36;
  if ((v70 & 1) == 0) {
    goto LABEL_54;
  }
  int v71 = v49[1].i32[0] - 1;
  uint64_t v72 = (v70 >> 1) & 7;
  if (v72 <= 4)
  {
    int v73 = v69;
    uint64_t vars0 = v72;
    int v74 = *(_DWORD *)(v94 + 520) - v71 * v49->i32[3];
    if (v72 == 4)
    {
      uint64_t v75 = 0;
      unsigned __int8 v76 = v36[13];
      a9 = 0u;
      a10 = 0u;
      do
      {
        *((unsigned char *)&a9 + ((v76 + (_BYTE)v75) & 0x1F)) = v36[v75 + 1];
        ++v75;
      }
      while (v75 != 4);
    }
    else
    {
      LOWORD(a9) = *(_WORD *)(v36 + 1);
      *(_WORD *)((char *)&a9 + 3) = *(_WORD *)(v36 + 3);
      BYTE2(a9) = 0;
    }
    uint64_t v95 = v31;
    if ((int)vars8 > 0) {
      int v77 = v68;
    }
    else {
      int v77 = 0;
    }
    if (v77 == 1)
    {
      uint64_t v78 = (char *)(v41 - 1);
      uint64_t v79 = vars8;
      uint64_t v80 = &a15;
      do
      {
        *v80++ = *v78;
        v78 += v37;
        --v79;
      }
      while (v79);
    }
    int v81 = v74;
    sub_1D0CD7708(&__dst, v50, v47 << v49->i32[2], vars8_4 << v49->i32[2], v74, vars8);
    if ((v73 & 4) != 0) {
      int v82 = 34;
    }
    else {
      int v82 = 2;
    }
    if ((v73 & 4) != 0) {
      int v83 = 17;
    }
    else {
      int v83 = 1;
    }
    unsigned int v84 = v82 & 0xFFFFFF7F | (((v73 & 8) != 0) << 7);
    unsigned int v85 = v83 & 0xFFFFFFBF | (((v73 & 8) != 0) << 6);
    uint64_t v86 = v49;
    int v87 = v81 >> 3;
    unsigned int v88 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))&v86[12] + vars0;
    uint64_t v89 = 4;
    do
    {
      if ((v87 & (1 << --v89)) != 0)
      {
        v87 -= 1 << v89;
        if (v87) {
          unsigned int v90 = v84;
        }
        else {
          unsigned int v90 = 0;
        }
        uint64_t v91 = v90 | v73;
        int v73 = v73 & 0xC | v85;
        (*v88)(v41, v37, &a9, v91, &a15, v42, vars8);
        v41 += 8 << v89;
        v42 += 8 << v89;
      }
      v88 -= 5;
    }
    while (v89);
    sub_1D0CD4CDC((int *)&__dst);
    uint64_t v49 = v99;
LABEL_54:
    int8x16_t result = vextq_s8(v49[2], v49[2], 8uLL);
    int8x16_t v92 = vextq_s8(v49[3], v49[3], 8uLL);
    v49[2] = result;
    v49[3] = v92;
  }
  return result;
}

int8x16_t sub_1D0D38148(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a28 = *MEMORY[0x1E4F143B8];
  uint64_t v84 = a2;
  uint64_t v29 = *(void *)(a2 + 8);
  int v30 = *(_DWORD *)(a1 + 16);
  int v31 = *(_DWORD *)(a1 + 20);
  uint64_t v32 = (unsigned __int8 *)(*(void *)(v29 + 1000) + 16 * v30 * a3);
  uint64_t v33 = *(void *)(v29 + 416);
  int v35 = *(_DWORD *)(a1 + 8);
  uint64_t v34 = *(int *)(a1 + 12);
  uint64_t v36 = (int)v34 * (uint64_t)a3;
  uint64_t v37 = *(void *)(v29 + 400) + ((v33 * v36) << *(unsigned char *)(v29 + 531));
  uint64_t v38 = *(void *)(a1 + 32);
  if (a3) {
    uint64_t v39 = 38;
  }
  else {
    uint64_t v39 = 2;
  }
  if (a3) {
    int v40 = 17;
  }
  else {
    int v40 = 1;
  }
  unsigned int v85 = a3;
  uint64_t v79 = v29;
  if (v31 - 1 <= a3)
  {
    unsigned int v86 = *(_DWORD *)(v29 + 524) - v36;
  }
  else
  {
    uint64_t v39 = v39 | 0x88;
    v40 |= 0x40u;
    memcpy(*(void **)(a1 + 40), (const void *)(v37 + v33 * (v34 - 1)), *(int *)(v29 + 520));
    unsigned int v86 = *(_DWORD *)(a1 + 12);
    int v30 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v80 = &v78;
  if (v30 < 2)
  {
    uint64_t v42 = 0;
    BOOL v46 = 0;
  }
  else
  {
    BOOL v41 = 0;
    uint64_t v42 = 0;
    uint64_t v81 = v86;
    uint64_t v82 = a1 + 40 * v35 - 48;
    HIDWORD(v83) = v40 | v39;
    do
    {
      uint64_t v43 = sub_1D0C5EB40(v84, v42, v85, v39);
      unint64_t v45 = *v32;
      BOOL v46 = (v45 & 1) == 0;
      if (v45)
      {
        uint64_t v47 = (v45 >> 1) & 7;
        if (v47 > 4) {
          return result;
        }
        if (v47 == 4)
        {
          uint64_t v48 = 0;
          unsigned __int8 v49 = v32[13];
          long long v87 = 0u;
          long long vars0 = 0u;
          do
          {
            *((unsigned char *)&v87 + ((v49 + (_BYTE)v48) & 0x1F)) = v32[v48 + 1];
            ++v48;
          }
          while (v48 != 4);
        }
        else
        {
          LOWORD(v87) = *(_WORD *)(v32 + 1);
          *(_WORD *)((char *)&v87 + 3) = *(_WORD *)(v32 + 3);
          BYTE2(v87) = 0;
        }
        if (v41 && (int)v86 > 0)
        {
          uint64_t v50 = (char *)(v37 - 1);
          uint64_t v51 = &a13;
          uint64_t v52 = v81;
          do
          {
            *v51++ = *v50;
            v50 += v33;
            --v52;
          }
          while (v52);
        }
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))(v82 + 8 * v47))(v37, v33, &v87, v43, &a13, v38, v86);
      }
      uint64_t v53 = *(int *)(a1 + 12);
      v37 += v53;
      v38 += v53;
      v32 += 16;
      uint64_t v42 = (v42 + 1);
      uint64_t v39 = HIDWORD(v83);
      BOOL v41 = v46;
    }
    while ((int)v42 < *(_DWORD *)(a1 + 16) - 1);
    LOBYTE(v39) = BYTE4(v83);
  }
  int v54 = sub_1D0C5EB40(v84, v42, v85, v39 & 0x5D);
  unint64_t v55 = *v32;
  if ((v55 & 1) == 0) {
    goto LABEL_52;
  }
  int v56 = *(_DWORD *)(a1 + 16) - 1;
  uint64_t v57 = (v55 >> 1) & 7;
  if (v57 <= 4)
  {
    int v58 = v54;
    int v59 = *(_DWORD *)(v79 + 520);
    int v60 = *(_DWORD *)(a1 + 12);
    if (v57 == 4)
    {
      uint64_t v61 = 0;
      unsigned __int8 v62 = v32[13];
      long long v87 = 0u;
      long long vars0 = 0u;
      do
      {
        *((unsigned char *)&v87 + ((v62 + (_BYTE)v61) & 0x1F)) = v32[v61 + 1];
        ++v61;
      }
      while (v61 != 4);
    }
    else
    {
      LOWORD(v87) = *(_WORD *)(v32 + 1);
      *(_WORD *)((char *)&v87 + 3) = *(_WORD *)(v32 + 3);
      BYTE2(v87) = 0;
    }
    int v63 = v59 - v56 * v60;
    if ((int)v86 > 0 && v46)
    {
      int v65 = (char *)(v37 - 1);
      uint64_t v66 = v86;
      uint64_t v67 = &a13;
      do
      {
        *v67++ = *v65;
        v65 += v33;
        --v66;
      }
      while (v66);
    }
    if ((v54 & 4) != 0) {
      int v68 = 34;
    }
    else {
      int v68 = 2;
    }
    if ((v54 & 4) != 0) {
      int v69 = 17;
    }
    else {
      int v69 = 1;
    }
    unsigned int v70 = v68 & 0xFFFFFF7F | (((v54 & 8) != 0) << 7);
    unsigned int v71 = v69 & 0xFFFFFFBF | (((v54 & 8) != 0) << 6);
    int v72 = v63 >> 3;
    int v73 = (void (**)(uint64_t, uint64_t, long long *, uint64_t, char *, uint64_t, void))(a1 + 8 * v57 + 192);
    uint64_t v74 = 4;
    do
    {
      if ((v72 & (1 << --v74)) != 0)
      {
        v72 -= 1 << v74;
        if (v72) {
          unsigned int v75 = v70;
        }
        else {
          unsigned int v75 = 0;
        }
        uint64_t v76 = v75 | v58;
        int v58 = v58 & 0xC | v71;
        (*v73)(v37, v33, &v87, v76, &a13, v38, v86);
        v37 += 8 << v74;
        v38 += 8 << v74;
      }
      v73 -= 5;
    }
    while (v74);
LABEL_52:
    int8x16_t result = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    int8x16_t v77 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
    *(int8x16_t *)(a1 + 32) = result;
    *(int8x16_t *)(a1 + 48) = v77;
  }
  return result;
}

uint64_t sub_1D0D38544(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (a4 != a3)
  {
    uint64_t v6 = result;
    int8x16_t result = (*(uint64_t (**)(void))(result + 432))(*(void *)(a2 + 400) + ((*(void *)(a2 + 416) * a3) << *(unsigned char *)(a2 + 531)));
    if (*(unsigned char *)(a2 + 532))
    {
      uint64_t v7 = *(void *)(a2 + 408)
         + ((*(void *)(a2 + 424) * (a3 >> (*(unsigned char *)(a2 + 532) == 1))) << *(unsigned char *)(a2 + 531));
      uint64_t v8 = *(uint64_t (**)(uint64_t))(v6 + 440);
      return v8(v7);
    }
  }
  return result;
}

double sub_1D0D38620(uint64_t a1, char a2, int a3, double a4, double a5, double a6)
{
  if (*(_DWORD *)(a1 + 92))
  {
    if (a6 <= 0.0) {
      int v6 = 1;
    }
    else {
      int v6 = a3;
    }
    double v7 = *(double *)(a1 + 16);
    double v8 = *(double *)(a1 + 24);
    double v9 = v7 / a6;
    double v10 = 1.0;
    if (v6) {
      double v9 = 1.0;
    }
    *(double *)(a1 + 40) = a6;
    if (a3)
    {
      if (a6 > 0.0) {
        double v10 = v8 / a6;
      }
      return v10 * a4;
    }
    if (a2)
    {
      double v10 = v9;
      return v10 * a4;
    }
    uint64_t v27 = *(int *)(a1 + 52);
    if ((int)v27 > 6 * *(_DWORD *)(a1 + 116))
    {
      if (a5 <= 0.04)
      {
        uint64_t v28 = *(void *)(a1 + 80);
      }
      else
      {
        uint64_t v28 = *(void *)(a1 + 80);
        if (v28 <= v27)
        {
LABEL_45:
          BOOL v18 = v28 <= v27;
          uint64_t v29 = v28 - v27;
          if (v18)
          {
            double v33 = (a5 + -0.04) * a6;
          }
          else
          {
            double v30 = (double)(int)v27 / (double)v29;
            double v31 = 2.0;
            if (v30 < 2.0) {
              double v31 = (double)(int)v27 / (double)v29;
            }
            if (v30 <= 0.5) {
              double v32 = 0.5;
            }
            else {
              double v32 = v31;
            }
            double v33 = (a5 + -0.04) * a6 * v32;
          }
          double v34 = 1.0;
          if (v7 > 0.0) {
            double v34 = (v8 * 0.7 + v7 * 0.3) / v7;
          }
          if (v33 < a6)
          {
            double v35 = a6 / (a6 - v33);
            if (v34 < v35)
            {
              if (v34 <= 1.0) {
                double v34 = v35 - (1.0 - v34);
              }
              else {
                double v34 = v35;
              }
            }
          }
          goto LABEL_66;
        }
      }
      if (v28 >= 1 && (double)(int)v27 * a5 / ((double)v28 + 0.01) > 0.04) {
        goto LABEL_45;
      }
    }
    if (v8 / v7 >= 0.8)
    {
      double v34 = 1.0;
      if (v7 <= 0.0 || v8 / v7 <= 1.3) {
        goto LABEL_66;
      }
    }
    else
    {
      double v34 = 1.0;
      if (v7 <= 0.0) {
        goto LABEL_66;
      }
    }
    double v34 = (v8 * 0.7 + v7 * 0.3) / v7;
LABEL_66:
    double v36 = 2.0;
    if (v34 < 2.0) {
      double v36 = v34;
    }
    if (v34 <= 0.5) {
      double v37 = 0.5;
    }
    else {
      double v37 = v36;
    }
    double v10 = v9 * v37;
    return v10 * a4;
  }
  double v11 = *(double *)(a1 + 16);
  if (a5 > 0.01 && *(double *)(a1 + 24) > v11 * 1.5) {
    ++*(_DWORD *)(a1 + 68);
  }
  double v12 = *(double *)(a1 + 104);
  double v10 = v11 / a6;
  if (v12 < a5 && (a2 & 1) == 0 && *(int *)(a1 + 60) >= 5)
  {
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = *(int *)(a1 + 52);
    if (v13 <= v14 || v12 < (double)(int)v14 / (double)v13 * a5)
    {
      double v15 = a6;
      if (*(unsigned char *)(a1 + 96)) {
        double v15 = *(double *)(a1 + 40);
      }
      double v16 = 12.5;
      double v17 = 12.5;
      BOOL v18 = v13 <= v14;
      uint64_t v19 = v13 - v14;
      if (!v18) {
        double v17 = (double)(int)v14 / (double)v19;
      }
      if (v17 <= 12.5 || *(unsigned char *)(a1 + 88) != 0) {
        double v16 = v17;
      }
      double v21 = (a5 - v12) * v15 * v16;
      double v22 = a6 + -1.0;
      if (a6 + -1.0 >= v21) {
        double v22 = v21;
      }
      double v23 = *(double *)(a1 + 24);
      double v24 = 1.0;
      if (v23 > v11)
      {
        double v24 = (v11 + v23) * 0.5 / v11;
        double v25 = v23 / v11;
        if (*(double *)(a1 + 72) > 0.03) {
          double v24 = v25;
        }
      }
      double v26 = a6 / (a6 - v22);
      if (v24 < v26)
      {
        double v24 = v26;
        if (v26 > 2.0) {
          double v24 = 2.0;
        }
      }
      double v10 = v10 * fmax(v24, 1.0);
    }
  }
  return v10 * a4;
}

uint64_t sub_1D0D38948(uint64_t result, unint64_t a2, double a3, double a4)
{
  int v4 = *(_DWORD *)(result + 52);
  *(_DWORD *)(result + 52) = v4 + 1;
  int v5 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = v5 + 1;
  if (a4 >= 10.0)
  {
    double v6 = (double)a2 * a3 / a4;
    double v7 = v6 + *(double *)result;
    *(double *)int8x16_t result = v7;
    int v8 = *(_DWORD *)(result + 56);
    if (v4 >= v8) {
      *(double *)(result + 16) = v7 / (double)(v4 + 1 - v8);
    }
    if (*(_DWORD *)(result + 92) == 1)
    {
      int v9 = *(_DWORD *)(result + 32);
      uint64_t v10 = *(unsigned int *)(result + 116);
      uint64_t v11 = result + 32 * (v9 % (int)v10);
      *(double *)(v11 + 136) = a3;
      *(void *)(v11 + 128) = a2;
      *(double *)(v11 + 120) = a4;
      *(void *)(v11 + 144) = a2 - (int)*(double *)(result + 40);
      if ((int)v10 <= 0)
      {
        *(_DWORD *)(result + 48) = 0;
      }
      else
      {
        uint64_t v12 = 0;
        int v13 = 0;
        int v14 = 0;
        if (v9 >= -1) {
          int v15 = -1;
        }
        else {
          int v15 = v9;
        }
        uint64_t v16 = (v9 - v15);
        double v17 = 0.0;
        int v18 = v9;
        double v19 = 0.0;
        do
        {
          if (v16 == v12) {
            break;
          }
          uint64_t v20 = result + 32 * (v18 % (int)v10);
          double v21 = *(double *)(v20 + 120);
          if (v21 >= 10.0)
          {
            double v22 = dbl_1D0DA53C0[v12];
            double v19 = v19 + v22 * (*(double *)(v20 + 136) * (double)*(unint64_t *)(v20 + 128) / v21);
            double v17 = v17 + v22;
            v13 += *(_DWORD *)(v20 + 144);
            ++v14;
          }
          ++v12;
          --v18;
        }
        while (v10 != v12);
        *(_DWORD *)(result + 48) = v13 / v14;
        if (v17 > 0.0) {
          *(double *)(result + 24) = v19 / v17;
        }
      }
      *(_DWORD *)(result + 32) = v9 + 1;
    }
    else if ((v5 & 0x80000000) == 0)
    {
      double v23 = v6 + *(double *)(result + 8);
      *(double *)(result + 8) = v23;
      *(double *)(result + 24) = v23 / (double)(v5 + 1 - *(_DWORD *)(result + 64));
    }
  }
  else
  {
    ++*(_DWORD *)(result + 56);
    ++*(_DWORD *)(result + 64);
  }
  return result;
}

uint64_t sub_1D0D38AEC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(void *)(a1 + 400) = 0;
  memset_pattern16((void *)(a1 + 408), &unk_1D0D7F720, 0x18uLL);
  *(void *)(a1 + 1760) = 0;
  *(unsigned char *)(a1 + 1776) = 0;
  *(_DWORD *)(a1 + 1780) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(void *)(a1 + 1784) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 1792) = 0;
  *(void *)(a1 + 1800) = 0;
  *(void *)(a1 + 1816) = 0;
  *(void *)(a1 + 1808) = 0;
  return a1;
}

uint64_t sub_1D0D38B7C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 1688) = a2;
  *(_DWORD *)(a1 + 1624) = 0;
  *(_DWORD *)(a1 + 1608) = 0;
  double v4 = *(double *)(a2 + 472);
  *(double *)(a1 + 1616) = v4;
  *(_WORD *)(a1 + 1628) = 0;
  *(_WORD *)(a1 + 1640) = 0;
  *(_DWORD *)(a1 + 1656) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 1644) = 0;
  *(unsigned char *)(a1 + 1652) = 0;
  int v5 = *(_DWORD *)(a2 + 456);
  *(unsigned char *)(a1 + 1696) = v5;
  char v6 = *(unsigned char *)(a2 + 552);
  *(unsigned char *)(a1 + 1697) = v6;
  __int16 v7 = *(char *)(a2 + 488);
  *(_WORD *)(a1 + 1698) = v7;
  *(_WORD *)(a1 + 1700) = v7;
  *(_WORD *)(a1 + 1702) = *(char *)(a2 + 489);
  *(double *)(a1 + 1704) = v4;
  unsigned int v8 = *(_DWORD *)(a2 + 548);
  *(_DWORD *)(a1 + 1712) = v8;
  *(unsigned char *)(a1 + 1716) = 1;
  int v9 = *(_DWORD *)(a2 + 512);
  if (v9 == 0x7FFFFFFF) {
    unsigned int v10 = 300;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a2 + 512);
  }
  *(_DWORD *)(a1 + 1720) = v10;
  char v11 = v9 != 0x7FFFFFFF;
  *(unsigned char *)(a1 + 1724) = v11;
  *(_WORD *)(a1 + 1725) = 0;
  if (dword_1EB671A40 < 7)
  {
    int v13 = v5;
    int v14 = 1;
    uint64_t v12 = a2;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "\n========================\n\nSinglepassRatecontroller()\n\nrc_option_ (bps, fps, frames) = (%d, %f, %d)\n\n========================\n\n", v8, v4, v10);
    syslog(31, "\n========================\n\nSinglepassRatecontroller()\n\nrc_option_ (bps, fps, frames) = (%d, %f, %d)\n\n========================\n\n", *(_DWORD *)(a1 + 1712), *(double *)(a1 + 1704), *(_DWORD *)(a1 + 1720));
    uint64_t v12 = *(void *)(a1 + 1688);
    int v13 = *(unsigned __int8 *)(a1 + 1696);
    char v6 = *(unsigned char *)(a1 + 1697);
    __int16 v7 = *(_WORD *)(a1 + 1698);
    double v4 = *(double *)(a1 + 1704);
    unsigned int v8 = *(_DWORD *)(a1 + 1712);
    int v14 = *(unsigned __int8 *)(a1 + 1716);
    unsigned int v10 = *(_DWORD *)(a1 + 1720);
    char v11 = *(unsigned char *)(a1 + 1724);
    int v5 = *(_DWORD *)(v12 + 456);
  }
  *(void *)(a1 + 1672) = *(void *)(a2 + 688);
  *(_DWORD *)(a1 + 1680) = 0;
  *(unsigned char *)(a1 + 1727) = 0;
  *(int32x2_t *)(a1 + 1728) = vdup_n_s32(0x47C35000u);
  *(void *)(a1 + 1736) = 0x80000000800000;
  *(_DWORD *)(a1 + 1744) = 2;
  int v15 = *(unsigned __int8 *)(v12 + 34);
  *(unsigned char *)(a1 + 1748) = v15 != 255;
  int v16 = *(unsigned __int8 *)(a2 + 447);
  *(unsigned char *)(a1 + 1749) = v16;
  *(_DWORD *)(a1 + 1752) = 1;
  *(_DWORD *)(a1 + 312) = v5;
  double v17 = (double)v8;
  *(double *)(a1 + 512) = (double)v8;
  *(void *)(a1 + 520) = 0x402E000000000000;
  *(_DWORD *)(a1 + 528) = 0;
  double v18 = 15.0;
  *(double *)(a1 + 536) = (double)v8 / 15.0;
  *(void *)(a1 + 544) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 552) = 0u;
  double v19 = (double)v7;
  *(unsigned char *)a1 = v6;
  *(double *)(a1 + 576) = v19;
  *(double *)(a1 + 584) = v19;
  *(double *)(a1 + 592) = v19;
  *(_DWORD *)(a1 + 616) = 120;
  *(void *)(a1 + 1768) = 0;
  *(void *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_WORD *)(a1 + 652) = 2;
  *(unsigned char *)(a1 + 655) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 568) = 0;
  BOOL v20 = v13 == 1;
  *(_DWORD *)(a1 + 712) = v20;
  unsigned int v21 = *(unsigned __int16 *)(v12 + 466);
  *(_WORD *)(a1 + 500) = v21;
  unsigned int v22 = *(unsigned __int16 *)(v12 + 468);
  *(_WORD *)(a1 + 502) = v22;
  *(unsigned char *)(a1 + 504) = v21 < v22;
  if (v21 >= v22)
  {
    unsigned int v23 = v22;
    unsigned int v22 = v21;
  }
  else
  {
    *(_WORD *)(a1 + 500) = v22;
    *(_WORD *)(a1 + 502) = v21;
    unsigned int v23 = v21;
  }
  *(_DWORD *)(a1 + 676) = 0;
  *(void *)(a1 + 680) = 0x20000000;
  *(unsigned char *)(a1 + 708) = 0;
  *(void *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 704) = 0;
  if (v4 > 0.0 && v4 < 241.0)
  {
    *(double *)(a1 + 520) = v4;
    double v18 = v4;
  }
  if (v8) {
    *(double *)(a1 + 512) = v17;
  }
  *(unsigned char *)(a1 + 651) = v14 != 0;
  *(_DWORD *)(a1 + 528) = v10;
  *(unsigned char *)(a1 + 532) = v11;
  *(unsigned char *)(a1 + 654) = v13 != 1;
  float v24 = v4;
  *(_DWORD *)(a1 + 616) = (float)(v24 * 100000.0);
  int v25 = *(unsigned __int8 *)(a1 + 1696);
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  double v26 = v17 / v18;
  *(double *)(a1 + 760) = v26;
  *(void *)(a1 + 800) = v10;
  *(unsigned char *)(a1 + 808) = v11;
  *(_DWORD *)(a1 + 752) = 0;
  *(void *)(a1 + 832) = 0xA00000000;
  *(_OWORD *)(a1 + 768) = xmmword_1D0D7F4E0;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 812) = v20;
  *(unsigned char *)(a1 + 816) = v25;
  uint64_t v27 = qword_1D0D7F4F0[v25 == 0];
  *(void *)(a1 + 824) = v27;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(double *)(a1 + 1200) = v26;
  *(void *)(a1 + 1240) = v10;
  *(unsigned char *)(a1 + 1248) = v11;
  *(_DWORD *)(a1 + 1192) = 0;
  *(void *)(a1 + 1272) = 0xA00000000;
  *(_OWORD *)(a1 + 1208) = xmmword_1D0D7F4E0;
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1252) = v20;
  *(unsigned char *)(a1 + 1256) = v25;
  *(void *)(a1 + 1264) = v27;
  *(unsigned char *)(a1 + 1600) = 0;
  if (v16)
  {
    if (v15 == 255)
    {
      *(_DWORD *)(a1 + 1660) = 6;
      *(_OWORD *)(a1 + 240) = xmmword_1D0DA5C08;
      *(_OWORD *)(a1 + 256) = unk_1D0DA5C18;
      *(_OWORD *)(a1 + 272) = xmmword_1D0DA5C28;
      *(_OWORD *)(a1 + 288) = unk_1D0DA5C38;
      *(_OWORD *)(a1 + 176) = xmmword_1D0DA5BC8;
      *(_OWORD *)(a1 + 192) = unk_1D0DA5BD8;
      *(_OWORD *)(a1 + 208) = xmmword_1D0DA5BE8;
      *(_OWORD *)(a1 + 224) = unk_1D0DA5BF8;
      *(_OWORD *)(a1 + 112) = xmmword_1D0DA5B88;
      *(_OWORD *)(a1 + 128) = unk_1D0DA5B98;
      *(_OWORD *)(a1 + 144) = xmmword_1D0DA5BA8;
      *(_OWORD *)(a1 + 160) = unk_1D0DA5BB8;
      *(_OWORD *)(a1 + 48) = xmmword_1D0DA5B48;
      *(_OWORD *)(a1 + 64) = unk_1D0DA5B58;
      *(_OWORD *)(a1 + 80) = xmmword_1D0DA5B68;
      *(_OWORD *)(a1 + 96) = unk_1D0DA5B78;
    }
    else
    {
      *(_DWORD *)(a1 + 1660) = (fabsf((float)((float)v22 / (float)v23) + -1.33) >= fabsf((float)((float)v22 / (float)v23)+ -1.77)) | 2;
      uint64_t v28 = sub_1D0D39758(a1);
      if (v28) {
        return v28;
      }
    }
  }
  int v29 = *(_DWORD *)(a1 + 1672);
  if (v29 != -1) {
    goto LABEL_21;
  }
  int v29 = *(unsigned __int8 *)(a1 + 1748);
  if (!*(unsigned char *)(a1 + 1748)) {
    goto LABEL_21;
  }
  int v29 = 0;
  unsigned int v32 = *(unsigned __int16 *)(a1 + 500);
  if (v32 <= 0x27F)
  {
    if (v32 == 320)
    {
      int v29 = 0;
      for (uint64_t i = (float *)(a1 + 52); *(unsigned __int16 *)i > 0xC0u || *(i - 1) > 4.0; i += 2)
        ++v29;
      double v65 = *(double *)(a1 + 512);
      if (v65 <= 30000.0) {
        goto LABEL_21;
      }
      if (v65 <= 100000.0)
      {
        int v67 = (int)((double)v29 + (v65 + -30000.0) / -70000.0 * (double)v29);
        if (v67 < v29) {
          int v29 = (int)((double)v29 + (v65 + -30000.0) / -70000.0 * (double)v29);
        }
        if (v67 <= 0) {
          int v29 = 0;
        }
        goto LABEL_21;
      }
      goto LABEL_93;
    }
    if (v32 == 480)
    {
      double v58 = *(double *)(a1 + 512);
      double v34 = 300000.0;
      if (v58 <= 300000.0)
      {
        double v35 = 300000.0 - v58;
        double v36 = 14.0;
        goto LABEL_86;
      }
LABEL_93:
      int v29 = 0;
    }
  }
  else
  {
    switch(v32)
    {
      case 0x280u:
        double v62 = *(double *)(a1 + 512);
        double v34 = 420000.0;
        if (v62 <= 420000.0)
        {
          double v35 = 420000.0 - v62;
          double v36 = 15.0;
          goto LABEL_86;
        }
        goto LABEL_93;
      case 0x400u:
        double v63 = *(double *)(a1 + 512);
        double v34 = 660000.0;
        if (v63 <= 660000.0)
        {
          double v35 = 660000.0 - v63;
          double v36 = 21.0;
          goto LABEL_86;
        }
        goto LABEL_93;
      case 0x500u:
        double v33 = *(double *)(a1 + 512);
        double v34 = 650000.0;
        if (v33 <= 650000.0)
        {
          double v35 = 650000.0 - v33;
          double v36 = 22.0;
LABEL_86:
          int v29 = (int)(v35 * v36 / v34 + 1.0);
          break;
        }
        goto LABEL_93;
    }
  }
LABEL_21:
  if (v29 >= 31) {
    int v29 = 31;
  }
  *(_DWORD *)(a1 + 44) = v29;
  uint64_t v30 = *(unsigned int *)(v12 + 608);
  *(_DWORD *)(a1 + 496) = v30;
  uint64_t v31 = (4 * v30) & 0x3FFFFFFF0;
  *(void *)(a1 + 600) = (char *)&unk_1D0DA5428 + v31;
  *(void *)(a1 + 608) = (char *)&unk_1D0DA5458 + v31;
  *(_DWORD *)(a1 + 328) = v30;
  if (*(_DWORD *)(a2 + 456)) {
    goto LABEL_24;
  }
  if (!v30)
  {
    if (dword_1EB671A40 >= 3)
    {
      double v37 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v38 = "SinglepassRatecontroller RefStruct: gop size must be >= 1\n";
      uint64_t v39 = "SinglepassRatecontroller RefStruct: gop size must be >= 1\n";
      size_t v40 = 58;
      goto LABEL_96;
    }
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 712))
  {
    if (dword_1EB671A40 >= 3)
    {
      double v37 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v38 = "SinglepassRatecontroller RefStruct: only supports RC_MODE_FILESIZE_CONTROL\n";
      uint64_t v39 = "SinglepassRatecontroller RefStruct: only supports RC_MODE_FILESIZE_CONTROL\n";
      size_t v40 = 75;
      goto LABEL_96;
    }
    return 4294954394;
  }
  if (*(int *)(a2 + 604) >= 2)
  {
    if (dword_1EB671A40 > 2)
    {
      double v37 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v38 = "SinglepassRatecontroller RefStruct: only supports up to 1 gop\n";
      uint64_t v39 = "SinglepassRatecontroller RefStruct: only supports up to 1 gop\n";
      size_t v40 = 62;
      goto LABEL_96;
    }
    return 4294954394;
  }
  int v59 = *(_DWORD *)(a2 + 600);
  if (v59 < 1)
  {
LABEL_24:
    if (*(unsigned char *)(a1 + 1696) == 1) {
      operator new();
    }
    uint64_t v41 = *(void *)(a1 + 1760);
    *(void *)(a1 + 1760) = 0;
    if (v41) {
      MEMORY[0x1D25F0230](v41, 0x1000C409380FD32);
    }
    *(int8x8_t *)(a1 + 1664) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned char *)(a1 + 1748) == 0), 0x1FuLL)), (int8x8_t)0x2400000022, (int8x8_t)0x2200000020);
    int v42 = *(_DWORD *)(a2 + 544);
    *(unsigned char *)(a1 + 1776) = (v42 & 2) != 0;
    if ((v42 & 2) == 0) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 496))
    {
      *(void *)(a1 + 1784) = 0xFFFFFFFFLL;
      *(_DWORD *)(a1 + 1792) = 0;
      *(_DWORD *)(a1 + 1780) = 2;
      uint64_t v43 = *(char **)(a1 + 1808);
      int v44 = *(char **)(a1 + 1800);
      uint64_t v45 = v43 - v44;
      if ((unint64_t)(v43 - v44) > 0xF)
      {
        if (v45 == 16) {
          goto LABEL_70;
        }
        uint64_t v57 = v44 + 16;
      }
      else
      {
        unint64_t v46 = 2 - (v45 >> 3);
        uint64_t v47 = *(void *)(a1 + 1816);
        if (v46 > (v47 - (uint64_t)v43) >> 3)
        {
          uint64_t v48 = v47 - (void)v44;
          uint64_t v49 = v48 >> 2;
          if ((unint64_t)(v48 >> 2) <= 2) {
            uint64_t v49 = 2;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v49;
          }
          if (v50 >> 61) {
            sub_1D0C6AC2C();
          }
          uint64_t v51 = v45 >> 3;
          uint64_t v52 = (char *)operator new(8 * v50);
          uint64_t v53 = &v52[8 * v51];
          int v54 = &v52[8 * v50];
          bzero(v53, 8 * v46);
          unint64_t v55 = &v53[8 * v46];
          if (v43 != v44)
          {
            do
            {
              uint64_t v56 = *((void *)v43 - 1);
              v43 -= 8;
              *((void *)v53 - 1) = v56;
              v53 -= 8;
            }
            while (v43 != v44);
            uint64_t v43 = *(char **)(a1 + 1800);
          }
          *(void *)(a1 + 1800) = v53;
          *(void *)(a1 + 1808) = v55;
          *(void *)(a1 + 1816) = v54;
          if (v43)
          {
            operator delete(v43);
            if (*(int *)(a1 + 1780) <= 0) {
              return 0;
            }
          }
LABEL_70:
          operator new();
        }
        bzero(*(void **)(a1 + 1808), 8 * v46);
        uint64_t v57 = &v43[8 * v46];
      }
      *(void *)(a1 + 1808) = v57;
      goto LABEL_70;
    }
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: Invalid gop_size: %d\n", 0);
      syslog(27, "mpt_rc: Invalid gop_size: %d\n", *(_DWORD *)(a1 + 496));
      uint64_t v28 = 4294954394;
      if (dword_1EB671A40 >= 3)
      {
        uint64_t v38 = "Failed to initialize mpt rate controller.\n";
        fwrite("Failed to initialize mpt rate controller.\n", 0x2AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        goto LABEL_97;
      }
      return v28;
    }
    return 4294954394;
  }
  uint64_t v60 = 0;
  uint64_t v61 = 108 * v59;
  while (1)
  {
    if (v60)
    {
      if (*(unsigned char *)(a2 + 957 + v60) != 82) {
        break;
      }
      goto LABEL_80;
    }
    if (*(unsigned char *)(a2 + 957) != 76) {
      break;
    }
LABEL_80:
    v60 += 108;
    if (v61 == v60) {
      goto LABEL_24;
    }
  }
  if (dword_1EB671A40 < 3) {
    return 4294954394;
  }
  double v37 = (FILE *)*MEMORY[0x1E4F143C8];
  uint64_t v38 = "SinglepassRatecontroller RefStruct: only supports frame type 'L':1 and 'R':0+\n";
  uint64_t v39 = "SinglepassRatecontroller RefStruct: only supports frame type 'L':1 and 'R':0+\n";
  size_t v40 = 78;
LABEL_96:
  fwrite(v39, v40, 1uLL, v37);
  uint64_t v28 = 4294954394;
LABEL_97:
  syslog(27, v38);
  return v28;
}

uint64_t sub_1D0D39758(uint64_t a1)
{
  unint64_t v2 = 0;
  int v3 = (_WORD *)(a1 + 310);
  for (uint64_t i = (float *)((char *)&unk_1D0DA5548 + 256 * (uint64_t)*(int *)(a1 + 1660));
        *((__int16 *)i + 2) > (int)*(unsigned __int16 *)(a1 + 500);
        i += 2)
  {
    if (v2 > 0x1F) {
      goto LABEL_9;
    }
LABEL_7:
    ++v2;
    v3 -= 4;
  }
  if (v2 <= 0x1F && *(double *)(a1 + 1704) < *i) {
    goto LABEL_7;
  }
  if (v2 >= 0x20)
  {
LABEL_9:
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Resolution and Frame rate is not supported in Quality table", 0x3BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Resolution and Frame rate is not supported in Quality table");
    }
    return 4294954386;
  }
  memcpy((void *)(a1 + 48), i, (256 - 8 * v2) & 0x7FFFFFFF8);
  if (v2)
  {
    uint64_t v6 = 31 - v2;
    __int16 v7 = (char *)&unk_1D0DA5548 + 256 * (uint64_t)*(int *)(a1 + 1660);
    __int16 v8 = *((_WORD *)v7 + 126);
    __int16 v9 = *((_WORD *)v7 + 127);
    do
    {
      *(_DWORD *)(v3 - 3) = 1036831949;
      *(v3 - 1) = v8;
      *int v3 = v9;
      v3 += 4;
      ++v6;
    }
    while (v6 < 31);
  }
  return 0;
}

double sub_1D0D39884(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 676) = *(void *)(a2 + 12);
  int v3 = *(_DWORD *)(a2 + 20);
  int v2 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 688) = v2;
  *(unsigned char *)(a1 + 708) = v3 > 0;
  double result = *(double *)(a1 + 512) / *(double *)(a1 + 520);
  *(double *)(a1 + 536) = result;
  if (*(_DWORD *)(a1 + 712) == 1)
  {
    int v5 = *(_DWORD *)(a1 + 684);
    if (v5 < 1) {
      double v6 = 0.0;
    }
    else {
      double v6 = (double)v3 / (double)v5;
    }
    *(double *)(a1 + 696) = v6;
    double v7 = v6 + 1.0;
    if (v2 >= (int)(result * 0.5 / (v7 + 0.5))) {
      int v2 = (int)(result * 0.5 / (v7 + 0.5));
    }
    *(_DWORD *)(a1 + 704) = v2;
    double result = (result - (double)v2) / v7;
    *(double *)(a1 + 536) = result;
  }
  return result;
}

void sub_1D0D39920(uint64_t a1)
{
  if (*(void *)(a1 + 32) >= 0x2AAuLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 341;
  }
}

void sub_1D0D39970(void *a1, uint64_t *a2)
{
  double v4 = (char *)a1[2];
  int v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 341 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x155)
    {
      a1[4] = v8 - 341;
      uint64_t v12 = *(void *)v5;
      unsigned int v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          int v42 = (char *)sub_1D0C3FC20(v41);
          int v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          double v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            double v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            uint64_t v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)uint64_t v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          unint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            double v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          BOOL v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            unsigned int v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            unsigned int v22 = (char *)a1[1];
          }
          double v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)double v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      int v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    float v24 = (char *)a1[3];
    int v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      uint64_t v27 = operator new(0xFFCuLL);
      uint64_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          uint64_t v53 = (char *)sub_1D0C3FC20(v51);
          int v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v55 = (uint64_t *)a1[1];
          uint64_t v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            uint64_t v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            int v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)int v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            int v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        double v62 = (char *)a1[1];
        double v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v63[-*a1] >> 2;
            }
            uint64_t v99 = (char *)sub_1D0C3FC20(v98);
            uint64_t v101 = &v99[8 * (v98 >> 2)];
            unsigned __int8 v102 = (uint64_t *)a1[1];
            double v63 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              double v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              uint64_t v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)uint64_t v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            unsigned __int8 v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              double v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            unsigned int v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              double v62 = (char *)a1[1];
            }
            double v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)double v63 = v64;
      }
      else
      {
        *(void *)double v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    uint64_t v30 = (char *)sub_1D0C3FC20(v29);
    uint64_t v32 = v31;
    double v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v111 = v34;
    double v35 = operator new(0xFFCuLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v111;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      unsigned int v75 = (char *)sub_1D0C3FC20(v74);
      double v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v108 = v36;
      long long v111 = v38;
      operator delete(v30);
      long long v36 = v108;
    }
    long long v38 = v111;
LABEL_56:
    *(void *)double v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        uint64_t v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          unsigned int v86 = (char *)sub_1D0C3FC20(v85);
          uint64_t v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          unsigned int v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            unsigned int v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            uint64_t v91 = v79;
            int8x16_t v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)uint64_t v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v109 = v36;
            long long v113 = v38;
            operator delete(v78);
            long long v36 = v109;
            long long v38 = v113;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          uint64_t v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            uint64_t v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v36 + 1);
            uint64_t v112 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v110;
            *(void *)&long long v38 = v112;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        uint64_t v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    uint64_t v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  unint64_t v96 = *(void *)&v5[8 * (v9 / 0x155)] + 12 * (v9 % 0x155);
  uint64_t v97 = *a2;
  *(_DWORD *)(v96 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v96 = v97;
  ++a1[5];
}

void sub_1D0D39EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D0D39F2C(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = 0;
  LODWORD(result) = 0;
  double v4 = *(double *)(v2 + 1616);
  double v5 = *(float *)(v2 + 8 * a2 + 48);
  uint64_t v6 = &word_1D0DA548A;
  double v7 = 1.0e20;
  do
  {
    double v8 = vabdd_f64(v4 * ((double)*(v6 - 1) / (double)*v6), v5);
    if (v8 >= v7) {
      double result = result;
    }
    else {
      double result = v3;
    }
    if (v8 < v7) {
      double v7 = v8;
    }
    ++v3;
    v6 += 2;
  }
  while (v3 != 23);
  return result;
}

void sub_1D0D39F94(double *a1, double a2)
{
  double v4 = sub_1D0D3A30C((uint64_t)a1, 1, 1, a1[67], 3.0, 4.0);
  a1[40] = v4;
  double v5 = a2 * 100000.0 / v4;
  a1[79] = v5;
  double v6 = log(v5 / 0.850000024) * 6.0 / 0.693147181 + 12.0;
  double v7 = 30.0;
  if (v6 < 30.0) {
    double v7 = v6;
  }
  if (v6 <= 12.0) {
    double v8 = 12.0;
  }
  else {
    double v8 = v7;
  }
  a1[72] = v8;
}

uint64_t sub_1D0D3A034(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    if (dword_1EB671A40 >= 3)
    {
      BOOL v15 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v16 = "{CollectRefInfo} NULL pointer error\n";
      uint64_t v17 = "{CollectRefInfo} NULL pointer error\n";
      size_t v18 = 36;
      goto LABEL_16;
    }
    return 4294954394;
  }
  *(unsigned char *)(a1 + 673) = 0;
  unint64_t v4 = *(void *)(a1 + 480);
  unint64_t v5 = v4;
  if (*(unsigned char *)(a2 + 648) != 5) {
    unint64_t v5 = *(void *)(a1 + 488) + v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 456);
  unint64_t v7 = *(void *)(v6 + 8 * (v5 / 0x155)) + 12 * (v5 % 0x155);
  *(_DWORD *)(a1 + 660) = *(_DWORD *)v7;
  int v8 = *(_DWORD *)(a2 + 652) - *(_DWORD *)(v7 + 4);
  if (v8 < 0) {
    int v8 = *(_DWORD *)(v7 + 4) - *(_DWORD *)(a2 + 652);
  }
  *(unsigned char *)(a1 + 668) = v8;
  *(unsigned char *)(a1 + 670) = *(unsigned char *)(v7 + 8);
  *(unsigned char *)(a1 + 672) = 1;
  if (*(unsigned char *)(a2 + 648) == 5)
  {
    int v9 = *(_DWORD *)(v7 + 4);
    unint64_t v10 = *(void *)(v6 + 8 * ((*(void *)(a1 + 488) + v4 - 1) / 0x155))
        + 12 * ((*(void *)(a1 + 488) + v4 - 1) % 0x155);
    int v11 = *(_DWORD *)v10;
    int v12 = *(_DWORD *)(a2 + 652) - *(_DWORD *)(v10 + 4);
    if (v12 < 0) {
      int v12 = *(_DWORD *)(v10 + 4) - *(_DWORD *)(a2 + 652);
    }
    *(unsigned char *)(a1 + 669) = v12;
    *(unsigned char *)(a1 + 671) = *(unsigned char *)(v10 + 8);
    *(unsigned char *)(a1 + 673) = 1;
    int v13 = *(_DWORD *)(v10 + 4);
    *(_DWORD *)(a1 + 664) = v11;
    if (dword_1EB671A40 >= 7)
    {
      uint64_t v14 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "=== [%2d, %2d] ===\n", v9, v13);
      syslog(31, "=== [%2d, %2d] ===\n", v9, v13);
      if (!*(unsigned char *)(a1 + 672))
      {
        if (!*(unsigned char *)(a1 + 673))
        {
          if (dword_1EB671A40 >= 3)
          {
            BOOL v15 = *v14;
            uint64_t v16 = "{CollectRefInfo} No Reference Stats Found\n";
            uint64_t v17 = "{CollectRefInfo} No Reference Stats Found\n";
            size_t v18 = 42;
LABEL_16:
            fwrite(v17, v18, 1uLL, v15);
            syslog(27, v16);
            return 4294954394;
          }
          return 4294954394;
        }
        goto LABEL_25;
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 669) = 0;
    *(unsigned char *)(a1 + 671) = -1;
    *(_DWORD *)(a1 + 664) = 0;
  }
  if (!*(unsigned char *)(a1 + 673))
  {
LABEL_27:
    float v21 = *(float *)(a1 + 660);
    goto LABEL_28;
  }
  unsigned int v20 = *(unsigned __int8 *)(a1 + 671);
  if (*(unsigned __int8 *)(a1 + 670) > 2u)
  {
    if (v20 <= 2 || *(char *)(a1 + 669) >= 1)
    {
LABEL_25:
      float v21 = *(float *)(a1 + 664);
      goto LABEL_28;
    }
    if (*(char *)(a1 + 668) < 1)
    {
      double v22 = 0.0;
      if (dword_1EB671A40 >= 6) {
        fwrite("{BframeRc} Wrong ref frame info!!!!!\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143D8]);
      }
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  float v21 = *(float *)(a1 + 660);
  if (v20 > 2)
  {
LABEL_28:
    double v22 = v21;
    goto LABEL_29;
  }
  double v22 = (float)(v21 + *(float *)(a1 + 664)) * 0.5 + 2.91256094;
LABEL_29:
  uint64_t result = 0;
  *(double *)(a1 + 576) = v22 + *(float *)(*(void *)(a1 + 600) + 4 * *(int *)(a2 + 656));
  return result;
}

double sub_1D0D3A30C(uint64_t a1, int a2, int a3, double a4, double a5, double a6)
{
  uint64_t v6 = *(void *)(a1 + 1688);
  int v7 = *(_DWORD *)(v6 + 876);
  float v8 = *(float *)(v6 + 880);
  if (v7 || v8 != 0.0)
  {
    if (v7 <= 0) {
      int v7 = 0x7FFFFFFF;
    }
    if (v8 <= 0.0) {
      int v9 = 0x7FFFFFFF;
    }
    else {
      int v9 = (int)(*(double *)(a1 + 520) * v8 + 0.5);
    }
    if (v9 < v7) {
      int v7 = v9;
    }
    if (v7) {
      goto LABEL_12;
    }
  }
  int v7 = *(__int16 *)(v6 + 874);
  if (*(_WORD *)(v6 + 874))
  {
LABEL_12:
    int v10 = 1;
    signed int v11 = (v7 + *(_DWORD *)(a1 + 496) - 2) / *(_DWORD *)(a1 + 496);
  }
  else
  {
    int v10 = 0;
    int v7 = *(_DWORD *)(a1 + 496);
    signed int v11 = 1;
  }
  double v12 = (double)v11 * a6 + (double)(v7 - v10 - v11);
  double v13 = (double)v10;
  double v14 = (double)v7;
  if (v10 && !a3 && a2 && !*(_DWORD *)(a1 + 712)) {
    *(double *)(a1 + 1768) = v14 / (v13 * 4.0 * a6 + v12) * a4 * a6 * 4.0;
  }
  double v15 = v14 / (v13 * a5 * a6 + v12) * a4;
  if (!a2) {
    a5 = 1.0;
  }
  return a5 * v15 * a6;
}

uint64_t sub_1D0D3A40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 6664);
  uint64_t v7 = *(void *)(a2 + 6672);
  unsigned int v8 = *(unsigned __int8 *)(a2 + 648);
  int v9 = *(_DWORD *)(a2 + 652);
  double v10 = *(double *)(a2 + 6296);
  double v11 = *(float *)(a2 + 6476);
  double v12 = exp2((v11 + -12.0) / 6.0);
  float v13 = *(float *)(*(void *)(a1 + 608) + 4 * *(int *)(a2 + 656));
  int v14 = *(_DWORD *)(a1 + 656);
  if (v14 >= 2) {
    int v15 = 2;
  }
  else {
    int v15 = *(_DWORD *)(a1 + 656);
  }
  *(double *)(a1 + 624) = (*(double *)(a1 + 624) * (double)v15 + v11) / (double)(v15 + 1);
  *(void *)(a1 + 640) += (int)v6 - (int)*(double *)(a1 + 536);
  *(_DWORD *)(a1 + 656) = v14 + 1;
  if (!*(unsigned char *)a2)
  {
    if (*(unsigned char *)(a1 + 708)) {
      int v16 = 0;
    }
    else {
      int v16 = *(_DWORD *)(a1 + 684);
    }
    *(_DWORD *)(a1 + 684) = v16 + v6;
  }
  int v17 = *(unsigned __int8 *)(a1 + 654);
  if (*(unsigned char *)(a1 + 654))
  {
    double v18 = *(double *)(a1 + 544) * 0.95 + 1.0;
    double v19 = *(double *)(a1 + 552) * 0.95;
    *(double *)(a1 + 544) = v18;
    double v20 = v19 + (double)(v6 - v7);
    *(double *)(a1 + 552) = v20;
    *(double *)(a1 + 560) = v20 / v18;
    unint64_t v6 = v7;
  }
  double v21 = v12 * 0.850000024;
  if (v8 > 4)
  {
    double v21 = v21 / v13;
    if (a3)
    {
LABEL_22:
      unsigned int v26 = *(unsigned __int8 *)(a1 + 652);
      double v27 = exp2((*(float *)(a3 + 16) + -12.0) / 6.0) * 0.850000024;
      if (v26 >= 5) {
        double v27 = v27 / v13;
      }
      uint64_t v28 = a1 + 720;
      double v29 = (v21 + v27) * 0.5;
      unint64_t v30 = (*(void *)(a3 + 8 * (v17 != 0)) + v6) >> 1;
      double v31 = v10;
      goto LABEL_29;
    }
  }
  else
  {
    unsigned int v22 = *(unsigned __int8 *)(a1 + 652);
    BOOL v23 = v22 >= 3;
    unsigned int v24 = v22 - 3;
    BOOL v25 = !v23 || v24 <= 2 && *(unsigned char *)(a1 + 653) != 0;
    *(unsigned char *)(a1 + 649) = v25;
    if (*(_DWORD *)(a1 + 712) != 1 && *(_DWORD *)(a1 + 312) | v9)
    {
      *(void *)(a1 + 584) = *(void *)(a1 + 576);
      if (a3) {
        goto LABEL_22;
      }
    }
    else
    {
      *(double *)(a1 + 584) = v11;
      if (a3) {
        goto LABEL_22;
      }
    }
  }
  int v32 = *(unsigned __int8 *)(a1 + 1600);
  uint64_t result = sub_1D0D38948(a1 + 720, v6, v21, v10);
  if (!v32 || v9 > 1) {
    return result;
  }
  uint64_t v28 = a1 + 1160;
  double v29 = v21;
  double v31 = v10;
  unint64_t v30 = v6;
LABEL_29:
  return sub_1D0D38948(v28, v30, v29, v31);
}

uint64_t sub_1D0D3A6A8(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 8 * *(int *)(a1 + 44);
  unint64_t v5 = (__int16 *)(v4 + 54);
  unint64_t v6 = (__int16 *)(v4 + 52);
  if (*(unsigned char *)(a1 + 504)) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v6;
  }
  int v8 = *v7;
  if (*(unsigned char *)(a1 + 504)) {
    int v9 = v6;
  }
  else {
    int v9 = v5;
  }
  int v10 = *v9;
  double v11 = *(double *)(a1 + 520);
  *(_DWORD *)(a1 + 1660) = a2;
  if (sub_1D0D39758(a1) && dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Can't switch table from index %d to index %d\n", *(_DWORD *)(a1 + 1660), a2);
    syslog(27, "Can't switch table from index %d to index %d\n", *(_DWORD *)(a1 + 1660), a2);
  }
  double v12 = (__int16 *)(a1 + 54);
  uint64_t v13 = -1;
  while (v13 != 31)
  {
    double v14 = (float)(*(float *)(v12 - 3) * (float)(*v12 * *(v12 - 1)));
    ++v13;
    v12 += 4;
    if (v11 * (double)(v10 * v8) >= v14) {
      goto LABEL_15;
    }
  }
  LODWORD(v13) = 32;
LABEL_15:
  *(_DWORD *)(a1 + 44) = v13;
  *(_DWORD *)(a1 + 1624) = v13;
  uint64_t result = sub_1D0D39F2C(a1, v13);
  *(_DWORD *)(a1 + 1608) = result;
  return result;
}

char *sub_1D0D3A7D0(char *result)
{
  uint64_t v1 = *result;
  if (v1 != -1) {
    *(_DWORD *)&result[4 * v1 + 56] = 2;
  }
  uint64_t v2 = result[3];
  if (v2 != -1) {
    *(_DWORD *)&result[4 * v2 + 56] = 4;
  }
  uint64_t v3 = result[2];
  if (v3 != -1) {
    *(_DWORD *)&result[4 * v3 + 56] = 2;
  }
  uint64_t v4 = result[1];
  if (v4 != -1) {
    *(_DWORD *)&result[4 * v4 + 56] = 1;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  *((_DWORD *)result + 22) = 0;
  do
  {
    v6 += *(_DWORD *)&result[v5 + 56];
    *(_DWORD *)&result[v5 + 92] = v6;
    v5 += 4;
  }
  while (v5 != 28);
  return result;
}

uint64_t sub_1D0D3A85C(_DWORD *a1, int a2, int a3, int a4)
{
  int v4 = a1[9];
  if (v4 <= a2 && a1[11] <= a3 && a4 - 1 + a2 <= a1[10] && a4 - 1 + a3 <= a1[12]) {
    return 2;
  }
  BOOL v5 = a4 + a2 <= v4 || a1[10] < a2;
  BOOL v6 = a4 + a3 <= a1[11] || a1[12] < a3;
  return !v5 && !v6;
}

uint64_t sub_1D0D3A8F0(uint64_t a1, int a2, char a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a4 == 8)
  {
    int v70 = a8;
    *(void *)a1 = sub_1D0D3C804;
    *(void *)(a1 + 8) = sub_1D0D3C758;
    *(void *)(a1 + 528) = sub_1D0D3C70C;
    *(void *)(a1 + 216) = sub_1D0D62A98;
    *(void *)(a1 + 224) = sub_1D0D62A10;
    *(void *)(a1 + 232) = sub_1D0D62908;
    *(void *)(a1 + 240) = sub_1D0D627CC;
    *(void *)(a1 + 248) = sub_1D0D627CC;
    *(void *)(a1 + 408) = sub_1D0D62A10;
    *(void *)(a1 + 416) = sub_1D0D62908;
    *(void *)(a1 + 424) = sub_1D0D627C4;
    *(void *)(a1 + 432) = sub_1D0D627C4;
    *(void *)(a1 + 176) = sub_1D0D62744;
    *(void *)(a1 + 184) = sub_1D0D62624;
    *(void *)(a1 + 192) = sub_1D0D62508;
    *(void *)(a1 + 200) = sub_1D0D62508;
    *(void *)(a1 + 208) = sub_1D0D62508;
    *(void *)(a1 + 376) = sub_1D0D62624;
    *(void *)(a1 + 384) = sub_1D0D62500;
    *(void *)(a1 + 392) = sub_1D0D62500;
    *(void *)(a1 + 400) = sub_1D0D62500;
    *(void *)(a1 + 536) = sub_1D0D62474;
    *(void *)(a1 + 544) = sub_1D0D622B4;
    *(void *)(a1 + 552) = sub_1D0D623B0;
    *(void *)(a1 + 560) = sub_1D0D6217C;
    double v11 = sub_1D0D61E40;
    *(void *)(a1 + 256) = sub_1D0D61E40;
    double v12 = sub_1D0D61C1C;
    *(void *)(a1 + 264) = sub_1D0D61C1C;
    uint64_t v13 = sub_1D0D61A34;
    *(void *)(a1 + 272) = sub_1D0D61A34;
    double v14 = sub_1D0D61624;
    *(void *)(a1 + 280) = sub_1D0D61624;
    int v15 = (float (*)(int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D0D61398;
    *(void *)(a1 + 440) = sub_1D0D61398;
    int v16 = sub_1D0D6104C;
    *(void *)(a1 + 448) = sub_1D0D6104C;
    int v17 = sub_1D0D60D4C;
    *(void *)(a1 + 456) = sub_1D0D60D4C;
    *(void *)(a1 + 296) = sub_1D0D61E40;
    *(void *)(a1 + 304) = sub_1D0D61C1C;
    *(void *)(a1 + 472) = sub_1D0D61398;
    *(void *)(a1 + 480) = sub_1D0D6104C;
    *(void *)(a1 + 504) = sub_1D0D60B38;
    *(void *)(a1 + 512) = sub_1D0D60974;
    *(void *)(a1 + 520) = sub_1D0D6049C;
    double v18 = sub_1D0D60250;
  }
  else
  {
    if (a4 > 16) {
      return 4294954386;
    }
    int v70 = a8;
    *(void *)a1 = sub_1D0D3C5B4;
    *(void *)(a1 + 8) = sub_1D0D3C3E0;
    *(void *)(a1 + 504) = sub_1D0D3C310;
    *(void *)(a1 + 512) = sub_1D0D3C1C4;
    *(void *)(a1 + 520) = sub_1D0D3B440;
    *(void *)(a1 + 528) = sub_1D0D3B3FC;
    *(void *)(a1 + 216) = sub_1D0D64CAC;
    *(void *)(a1 + 224) = sub_1D0D64A2C;
    *(void *)(a1 + 232) = sub_1D0D64B28;
    *(void *)(a1 + 240) = sub_1D0D64B28;
    *(void *)(a1 + 248) = sub_1D0D64B28;
    *(void *)(a1 + 408) = sub_1D0D64A2C;
    *(void *)(a1 + 416) = sub_1D0D64B20;
    *(void *)(a1 + 424) = sub_1D0D64B20;
    *(void *)(a1 + 432) = sub_1D0D64B20;
    *(void *)(a1 + 176) = sub_1D0D5FF80;
    *(void *)(a1 + 184) = sub_1D0D5FE44;
    *(void *)(a1 + 192) = sub_1D0D5FCF4;
    *(void *)(a1 + 200) = sub_1D0D5FCF4;
    *(void *)(a1 + 208) = sub_1D0D5FCF4;
    *(void *)(a1 + 376) = sub_1D0D5FE44;
    *(void *)(a1 + 384) = sub_1D0D64B18;
    *(void *)(a1 + 392) = sub_1D0D64B18;
    *(void *)(a1 + 400) = sub_1D0D64B18;
    *(void *)(a1 + 536) = sub_1D0D649F0;
    *(void *)(a1 + 544) = sub_1D0D647B0;
    *(void *)(a1 + 552) = sub_1D0D64924;
    *(void *)(a1 + 560) = sub_1D0D64664;
    double v11 = sub_1D0D642B8;
    *(void *)(a1 + 256) = sub_1D0D642B8;
    double v12 = sub_1D0D64084;
    *(void *)(a1 + 264) = sub_1D0D64084;
    uint64_t v13 = sub_1D0D63CC4;
    *(void *)(a1 + 272) = sub_1D0D63CC4;
    double v14 = sub_1D0D63838;
    *(void *)(a1 + 280) = sub_1D0D63838;
    int v15 = (float (*)(int, int, uint64_t, uint64_t, uint64_t, uint64_t))sub_1D0D63574;
    *(void *)(a1 + 440) = sub_1D0D63574;
    int v16 = sub_1D0D6314C;
    *(void *)(a1 + 448) = sub_1D0D6314C;
    int v17 = sub_1D0D62DB4;
    *(void *)(a1 + 456) = sub_1D0D62DB4;
    *(void *)(a1 + 296) = sub_1D0D642B8;
    *(void *)(a1 + 304) = sub_1D0D64084;
    *(void *)(a1 + 472) = sub_1D0D63574;
    *(void *)(a1 + 480) = sub_1D0D6314C;
    double v18 = sub_1D0D62B10;
  }
  *(void *)(a1 + 568) = v18;
  *(void *)(a1 + 16) = sub_1D0D60028;
  *(void *)(a1 + 336) = sub_1D0D5FF80;
  *(void *)(a1 + 344) = sub_1D0D5FE44;
  *(void *)(a1 + 352) = sub_1D0D5FCF4;
  *(void *)(a1 + 360) = sub_1D0D5FCF4;
  *(void *)(a1 + 368) = sub_1D0D5FCF4;
  if (a2 <= 7)
  {
    *(void *)(a1 + 264) = v11;
LABEL_8:
    *(void *)(a1 + 272) = v11;
    *(void *)(a1 + 448) = v15;
    uint64_t v13 = (uint64_t (*)(int, int, uint64_t, uint64_t, uint64_t, uint64_t))v11;
LABEL_9:
    *(void *)(a1 + 280) = v13;
    *(void *)(a1 + 456) = v15;
    int v17 = v15;
    double v14 = v13;
    goto LABEL_10;
  }
  double v11 = (uint64_t (*))v12;
  if (a2 <= 0xF) {
    goto LABEL_8;
  }
  int v15 = v16;
  if (a2 <= 0x1F) {
    goto LABEL_9;
  }
LABEL_10:
  *(void *)(a1 + 288) = v14;
  *(void *)(a1 + 464) = v17;
  *(void *)(a1 + 312) = v12;
  *(void *)(a1 + 320) = v12;
  *(void *)(a1 + 328) = v12;
  *(void *)(a1 + 488) = v16;
  *(void *)(a1 + 496) = v16;
  char v19 = a3 ^ 1;
  if (a7 < 4) {
    char v19 = 1;
  }
  *(unsigned char *)(a1 + 170) = v19;
  unsigned __int8 v20 = a7 - 2;
  if (a7 <= 2) {
    unsigned __int8 v20 = 0;
  }
  uint64_t v21 = v20;
  if (v20 == 3 && a4 == 10) {
    unsigned __int8 v20 = 4;
  }
  *(unsigned char *)(a1 + 172) = v20;
  *(unsigned char *)(a1 + 171) = v20;
  if (a5 == 1 && v20 == 2) {
    *(_WORD *)(a1 + 171) = 1;
  }
  uint64_t v68 = v21;
  if (*(unsigned __int8 *)(a1 + 173) != a6 || *(unsigned __int8 *)(a1 + 174) != a4)
  {
    *(void *)(a1 + 80) = *(void *)(a1 + 72);
    *(void *)(a1 + 104) = *(void *)(a1 + 96);
    *(void *)(a1 + 128) = *(void *)(a1 + 120);
    *(unsigned char *)(a1 + 173) = a6;
    *(unsigned char *)(a1 + 174) = a4;
    goto LABEL_28;
  }
  uint64_t v24 = *(void *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 80);
  *(unsigned char *)(a1 + 173) = a6;
  *(unsigned char *)(a1 + 174) = a4;
  if (v23 == v24 || *(void *)(a1 + 104) == *(void *)(a1 + 96))
  {
LABEL_28:
    sub_1D0D3B1F0((char **)(a1 + 72));
    sub_1D0D3B1F0((char **)(a1 + 96));
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(a1 + 72);
    uint64_t v27 = *(void *)(a1 + 96);
    uint64_t v28 = -12;
    do
    {
      for (uint64_t i = 0; i != 52; ++i)
      {
        if ((int)v28 + (int)i >= 57) {
          int v30 = 57;
        }
        else {
          int v30 = v28 + i;
        }
        if (v28 + i <= -a6) {
          int v31 = -a6;
        }
        else {
          int v31 = v30;
        }
        if (v31 >= 30)
        {
          if (v31 >= 0x39) {
            int v31 = 57;
          }
          int v31 = byte_1D0DAE600[v31 - 30];
        }
        unsigned int v32 = (int)(exp2((double)((int)i - v31) / 3.0) * 256.0 + 0.5);
        *(_WORD *)(v26 + 2 * i) = v32;
        *(_WORD *)(v27 + 2 * i) = vcvtd_n_s64_f64(sqrt((double)v32), 4uLL);
      }
      ++v25;
      ++v28;
      v27 += 104;
      v26 += 104;
    }
    while (v25 != 25);
  }
  double v33 = *(char **)(a1 + 128);
  unsigned int v71 = (void *)a1;
  if (v33 == *(char **)(a1 + 120))
  {
    uint64_t v34 = 64;
    if (a4 == 8) {
      uint64_t v34 = 52;
    }
    uint64_t v73 = v34;
    uint64_t v35 = *(void *)(a1 + 136) - (void)v33;
    if ((unint64_t)v35 >> 9 >= 0x19)
    {
      bzero(v33, 0x3200uLL);
      *(void *)(a1 + 128) = v33 + 12800;
    }
    else
    {
      unint64_t v36 = v35 >> 6;
      if (v36 <= 0x64) {
        unint64_t v37 = 100;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37 >> 57) {
        sub_1D0C6AC2C();
      }
      long long v38 = (char *)operator new(v37 << 7);
      bzero(v38, 0x3200uLL);
      *(void *)(a1 + 120) = v38;
      *(void *)(a1 + 128) = v38 + 12800;
      *(void *)(a1 + 136) = &v38[128 * v37];
      if (v33) {
        operator delete(v33);
      }
    }
    uint64_t v40 = 0;
    int v41 = -a6;
    int v42 = a6 - 12;
    uint64_t v43 = *(_WORD **)(a1 + 120);
    do
    {
      uint64_t v44 = 0;
      double v45 = dbl_1D0D7F510[v40 == 0];
      int v46 = -12;
      int64_t v72 = v43;
      do
      {
        int v47 = v41;
        uint64_t v48 = v43;
        uint64_t v49 = v73;
        do
        {
          if (v46 + v47 >= 57) {
            int v50 = 57;
          }
          else {
            int v50 = v46 + v47;
          }
          if (v46 + v47 <= v41) {
            int v51 = v41;
          }
          else {
            int v51 = v50;
          }
          if (v51 >= 30)
          {
            if (v51 >= 0x39) {
              int v51 = 57;
            }
            int v51 = byte_1D0DAE600[v51 - 30];
          }
          float v52 = (double)(v47 - 12) / 6.0;
          if (v52 < 4.0) {
            float v53 = (double)(v47 - 12) / 6.0;
          }
          else {
            float v53 = 4.0;
          }
          if (v52 <= 2.0) {
            float v54 = 2.0;
          }
          else {
            float v54 = v53;
          }
          if (v40 == 3) {
            float v55 = v54;
          }
          else {
            float v55 = 1.0;
          }
          float v56 = v45 * exp2((double)(v42 + v51) / 3.0) * v55;
          float v57 = v56 + 0.5;
          if (v57 < 65535.0) {
            float v58 = v57;
          }
          else {
            float v58 = 65535.0;
          }
          if (v57 <= 1.0) {
            float v59 = 1.0;
          }
          else {
            float v59 = v58;
          }
          *v48++ = (int)v59;
          ++v47;
          --v49;
        }
        while (v49);
        ++v44;
        ++v46;
        v43 += 256;
      }
      while (v44 != 25);
      ++v40;
      uint64_t v43 = v72 + 64;
    }
    while (v40 != 4);
  }
  if (v70)
  {
    uint64_t result = 0;
    void v71[3] = &unk_1D0DA5DAA;
    v71[4] = &unk_1D0DA5E12;
    v71[5] = &unk_1D0DA5DAA;
    v71[6] = &unk_1D0DA5E12;
    uint64_t v60 = (char *)&unk_1D0DA5E7A + 1024 * (unint64_t)(a4 == 10) + 128 * v68 + 512;
    v71[7] = v60;
    v71[8] = v60;
  }
  else
  {
    uint64_t v61 = 0;
    uint64_t v62 = v71[12];
    char v63 = 1;
    uint64_t v64 = v71[15];
    do
    {
      char v65 = v63;
      int v66 = *(char *)(a9 + v61) + 12;
      uint64_t v67 = &v71[2 * v61];
      v67[3] = v71[9] + 104 * v66;
      v67[4] = v62 + 104 * v66;
      v71[v61 + 7] = v64 + ((uint64_t)((int)v68 + 4 * v66) << 7);
      uint64_t v61 = 1;
      char v63 = 0;
    }
    while ((v65 & 1) != 0);
    return 0;
  }
  return result;
}

void sub_1D0D3B1F0(char **a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = v2 - *a1;
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * (v4 >> 3);
  if (v5 > 0x18)
  {
    if (v4 == 2600) {
      return;
    }
    unsigned __int8 v20 = v3 + 2600;
    goto LABEL_19;
  }
  BOOL v6 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v2) >> 3) >= 25 - v5)
  {
    bzero(a1[1], 104 * ((2496 - v4) / 0x68uLL) + 104);
    unsigned __int8 v20 = &v2[104 * ((2496 - v4) / 0x68uLL) + 104];
LABEL_19:
    a1[1] = v20;
    return;
  }
  unint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((v6 - v3) >> 3);
  unint64_t v8 = 0x9D89D89D89D89D8ALL * ((v6 - v3) >> 3);
  if (v8 <= 0x19) {
    unint64_t v8 = 25;
  }
  if (v7 >= 0x13B13B13B13B13BLL) {
    unint64_t v9 = 0x276276276276276;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 > 0x276276276276276) {
    sub_1D0C6AC2C();
  }
  uint64_t v10 = 104 * v9;
  double v11 = (char *)operator new(104 * v9);
  double v12 = &v11[8 * (v4 >> 3)];
  uint64_t v13 = &v11[v10];
  bzero(v12, 104 * ((2496 - v4) / 0x68uLL) + 104);
  double v14 = &v12[104 * ((2496 - v4) / 0x68uLL) + 104];
  if (v2 != v3)
  {
    do
    {
      long long v15 = *(_OWORD *)(v2 - 104);
      long long v16 = *(_OWORD *)(v2 - 88);
      *(_OWORD *)(v12 - 72) = *(_OWORD *)(v2 - 72);
      *(_OWORD *)(v12 - 88) = v16;
      *(_OWORD *)(v12 - 104) = v15;
      long long v17 = *(_OWORD *)(v2 - 56);
      long long v18 = *(_OWORD *)(v2 - 40);
      long long v19 = *(_OWORD *)(v2 - 24);
      *((void *)v12 - 1) = *((void *)v2 - 1);
      *(_OWORD *)(v12 - 24) = v19;
      *(_OWORD *)(v12 - 40) = v18;
      *(_OWORD *)(v12 - 56) = v17;
      v12 -= 104;
      v2 -= 104;
    }
    while (v2 != v3);
    uint64_t v2 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v2)
  {
    operator delete(v2);
  }
}

float sub_1D0D3B3FC(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4)
{
  float v4 = 0.0;
  int v5 = 4;
  do
  {
    float result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vabal_u16((uint32x4_t)LODWORD(v4), *a1, *a3)));
    float v4 = result;
    a3 = (uint16x4_t *)((char *)a3 + 2 * a4);
    a1 = (uint16x4_t *)((char *)a1 + 2 * a2);
    --v5;
  }
  while (v5);
  return result;
}

uint64_t sub_1D0D3B440(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4, _DWORD *a5)
{
  *a5 = sub_1D0D3B610();
  uint64_t v10 = a5 + 1;
  char v11 = 1;
  do
  {
    char v12 = v11;
    char v13 = 1;
    do
    {
      char v14 = v13;
      int v15 = sub_1D0D3B6F4();
      char v13 = 0;
      *v10++ = v15;
    }
    while ((v14 & 1) != 0);
    char v11 = 0;
  }
  while ((v12 & 1) != 0);
  unint64_t v16 = 0;
  long long v17 = (uint16x8_t *)a1;
  int v30 = a3;
  long long v18 = (uint16x8_t *)a3;
  do
  {
    unint64_t v19 = -8;
    unsigned __int8 v20 = v17;
    uint64_t v21 = v18;
    do
    {
      *v10++ = sub_1D0D3B7D8(8, 8, v20, a2, v21, a4);
      v19 += 8;
      ++v21;
      ++v20;
    }
    while (v19 < 0x18);
    v18 += a4;
    v17 += a2;
    BOOL v22 = v16 >= 0x18;
    v16 += 8;
  }
  while (!v22);
  unint64_t v23 = 0;
  uint64_t v24 = v30;
  do
  {
    unint64_t v25 = 0;
    uint64_t v26 = a1;
    uint64_t v27 = v24;
    do
    {
      uint64_t result = sub_1D0D3B934(4, 4, v26, a2, v24, a4);
      v10[v25] = result;
      unint64_t v29 = v25 * 4 + 4;
      ++v24;
      ++v26;
      BOOL v22 = v25++ >= 7;
    }
    while (!v22);
    uint64_t v10 = (_DWORD *)((char *)v10 + v29);
    uint64_t v24 = &v27[a4];
    a1 += a2;
    BOOL v22 = v23 >= 0x1C;
    v23 += 4;
  }
  while (!v22);
  return result;
}

uint64_t sub_1D0D3B610()
{
  int v0 = MEMORY[0x1F4188790]();
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (uint64_t i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + 2 * i) - *(unsigned __int16 *)(v4 + 2 * i);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1D0D3BE2C(v0, v1, v11, 0x20u, v10, 1);
}

uint64_t sub_1D0D3B6F4()
{
  int v0 = MEMORY[0x1F4188790]();
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (uint64_t i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + 2 * i) - *(unsigned __int16 *)(v4 + 2 * i);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1D0D3BE2C(v0, v1, v11, 0x10u, v10, 1);
}

uint64_t sub_1D0D3B7D8(int a1, int a2, uint16x8_t *a3, uint64_t a4, uint16x8_t *a5, uint64_t a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2 < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 2 * a4;
  uint64_t v21 = a6;
  uint64_t v22 = 16 * a4;
  uint64_t v12 = 2 * a6;
  do
  {
    uint64_t v24 = a5;
    if (a1 >= 1)
    {
      uint64_t v13 = 0;
      char v14 = a3;
      do
      {
        uint64_t v15 = 0;
        unint64_t v16 = a5;
        long long v17 = v14;
        do
        {
          uint32x4_t v18 = vsubl_high_u16(*v17, *v16);
          unint64_t v19 = (uint32x4_t *)&v25[v15];
          *unint64_t v19 = vsubl_u16(*(uint16x4_t *)v17->i8, *(uint16x4_t *)v16->i8);
          v19[1] = v18;
          v15 += 32;
          long long v17 = (uint16x8_t *)((char *)v17 + v11);
          unint64_t v16 = (uint16x8_t *)((char *)v16 + v12);
        }
        while (v15 != 256);
        sub_1D0D3BC18((uint64_t)v25, (uint64_t)v26);
        sub_1D0D3BC18((uint64_t)v26, (uint64_t)v25);
        uint64_t v10 = sub_1D0D3BCF8((uint64_t)v25) + v10;
        v13 += 8;
        ++v14;
        ++a5;
      }
      while ((int)v13 < a1);
    }
    v9 += 8;
    a3 = (uint16x8_t *)((char *)a3 + v22);
    a5 = &v24[v21];
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1D0D3B934(int a1, int a2, uint16x4_t *a3, uint64_t a4, uint16x4_t *a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2 < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 2 * a4;
  uint64_t v19 = a6;
  uint64_t v20 = 8 * a4;
  uint64_t v12 = 2 * a6;
  do
  {
    uint64_t v22 = a5;
    if (a1 >= 1)
    {
      uint64_t v13 = 0;
      char v14 = a3;
      do
      {
        uint64_t v15 = 0;
        unint64_t v16 = a5;
        long long v17 = v14;
        do
        {
          *(uint32x4_t *)&v23[v15] = vsubl_u16(*v17, *v16);
          v15 += 16;
          long long v17 = (uint16x4_t *)((char *)v17 + v11);
          unint64_t v16 = (uint16x4_t *)((char *)v16 + v12);
        }
        while (v15 != 64);
        sub_1D0D3BA88((uint64_t)v23, (uint64_t)v24);
        sub_1D0D3BA88((uint64_t)v24, (uint64_t)v23);
        uint64_t v10 = sub_1D0D3BAF8((uint64_t)v23) + v10;
        v13 += 4;
        ++v14;
        ++a5;
      }
      while ((int)v13 < a1);
    }
    v9 += 4;
    a3 = (uint16x4_t *)((char *)a3 + v20);
    a5 = &v22[v19];
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1D0D3BA88(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (_DWORD *)(a2 + 32);
  uint64_t v4 = result + 12;
  do
  {
    int v5 = *(_DWORD *)(result + v2);
    *(v3 - 8) = v5;
    int v6 = *(_DWORD *)(v4 + v2 - 8);
    *(v3 - 4) = v6;
    int v7 = *(_DWORD *)(v4 + v2 - 4);
    *uint64_t v3 = v7;
    int v8 = *(_DWORD *)(v4 + v2);
    int v9 = v6 + v5;
    int v10 = v5 - v6;
    int v11 = v8 + v7;
    int v12 = v7 - v8;
    *(v3 - 8) = v11 + v9;
    *uint64_t v3 = v9 - v11;
    *(v3 - 4) = v12 + v10;
    v3[4] = v10 - v12;
    v2 += 16;
    ++v3;
  }
  while (v2 != 64);
  return result;
}

uint64_t sub_1D0D3BAF8(uint64_t a1)
{
  unint64_t v1 = 0x1EA643000uLL;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643428, memory_order_acquire) & 1) == 0)
  {
    uint64_t v10 = a1;
    int v6 = __cxa_guard_acquire(&qword_1EA643428);
    unint64_t v1 = 0x1EA643000uLL;
    int v7 = v6;
    a1 = v10;
    if (v7)
    {
      dword_1EA643420 = 1;
      __cxa_guard_release(&qword_1EA643428);
      unint64_t v1 = 0x1EA643000;
      a1 = v10;
    }
  }
  unint64_t v2 = 0x1EA643000uLL;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643438, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = a1;
    int v8 = __cxa_guard_acquire(&qword_1EA643438);
    unint64_t v2 = 0x1EA643000uLL;
    unint64_t v1 = 0x1EA643000uLL;
    int v9 = v8;
    a1 = v11;
    if (v9)
    {
      dword_1EA643430 = 1 << (dword_1EA643420 - 1);
      __cxa_guard_release(&qword_1EA643438);
      unint64_t v2 = 0x1EA643000;
      unint64_t v1 = 0x1EA643000;
      a1 = v11;
    }
  }
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  do
  {
    unsigned int v4 = vaddvq_s32(vaddq_s32(vabsq_s32(*(int32x4_t *)(a1 + v3)), (int32x4_t)v4));
    v3 += 16;
  }
  while (v3 != 64);
  return ((int)(*(_DWORD *)(v2 + 1072) + v4) >> *(_DWORD *)(v1 + 1056));
}

uint64_t sub_1D0D3BC18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (_DWORD *)(a2 + 128);
  uint64_t v4 = a1 + 28;
  do
  {
    int v5 = *(_DWORD *)(v4 + v2 - 28);
    *(v3 - 32) = v5;
    int v6 = *(_DWORD *)(v4 + v2 - 24);
    *(v3 - 24) = v6;
    int v7 = *(_DWORD *)(v4 + v2 - 20);
    *(v3 - 16) = v7;
    int v8 = *(_DWORD *)(v4 + v2 - 16);
    *(v3 - 8) = v8;
    int v9 = *(_DWORD *)(v4 + v2 - 12);
    *uint64_t v3 = v9;
    int v10 = *(_DWORD *)(v4 + v2 - 8);
    v3[8] = v10;
    int v11 = *(_DWORD *)(v4 + v2 - 4);
    v3[16] = v11;
    int v12 = v6 + v5;
    int v13 = v5 - v6;
    int v14 = v8 + v7;
    int v15 = v7 - v8;
    int v16 = v14 + v12;
    int v17 = v12 - v14;
    int v18 = v15 + v13;
    int v19 = *(_DWORD *)(v4 + v2);
    int v20 = v13 - v15;
    int v21 = v10 + v9;
    int v22 = v9 - v10;
    int v23 = v19 + v11;
    int v24 = v11 - v19;
    uint64_t result = (v23 + v21);
    int v26 = v21 - v23;
    int v27 = v24 + v22;
    int v28 = v22 - v24;
    *(v3 - 32) = result + v16;
    *uint64_t v3 = v16 - result;
    *(v3 - 24) = v27 + v18;
    v3[8] = v18 - v27;
    *(v3 - 16) = v26 + v17;
    v3[16] = v17 - v26;
    *(v3 - 8) = v28 + v20;
    v3[24] = v20 - v28;
    v2 += 32;
    ++v3;
  }
  while (v2 != 256);
  return result;
}

uint64_t sub_1D0D3BCF8(uint64_t a1)
{
  unint64_t v1 = 0x1EA643000uLL;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643448, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a1;
    int v8 = __cxa_guard_acquire(&qword_1EA643448);
    unint64_t v1 = 0x1EA643000uLL;
    int v9 = v8;
    a1 = v12;
    if (v9)
    {
      dword_1EA643440 = 2;
      __cxa_guard_release(&qword_1EA643448);
      unint64_t v1 = 0x1EA643000;
      a1 = v12;
    }
  }
  unint64_t v2 = 0x1EA643000uLL;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643458, memory_order_acquire) & 1) == 0)
  {
    uint64_t v13 = a1;
    int v10 = __cxa_guard_acquire(&qword_1EA643458);
    unint64_t v2 = 0x1EA643000uLL;
    unint64_t v1 = 0x1EA643000uLL;
    int v11 = v10;
    a1 = v13;
    if (v11)
    {
      dword_1EA643450 = 1 << (dword_1EA643440 - 1);
      __cxa_guard_release(&qword_1EA643458);
      unint64_t v2 = 0x1EA643000;
      unint64_t v1 = 0x1EA643000;
      a1 = v13;
    }
  }
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  do
  {
    uint64_t v5 = 0;
    int32x4_t v6 = (int32x4_t)v4;
    do
    {
      int32x4_t v6 = vaddq_s32(vabsq_s32(*(int32x4_t *)(a1 + v5)), v6);
      v5 += 16;
    }
    while (v5 != 32);
    unsigned int v4 = vaddvq_s32(v6);
    ++v3;
    a1 += 32;
  }
  while (v3 != 8);
  return ((int)(*(_DWORD *)(v2 + 1104) + v4) >> *(_DWORD *)(v1 + 1088));
}

uint64_t sub_1D0D3BE2C(int a1, int a2, int *a3, unsigned int a4, void *a5, int a6)
{
  *a5 = 0;
  a5[1] = 0;
  uint64_t v74 = a1;
  uint64_t v66 = a2;
  unsigned int v6 = __clz(__rbit32(a4));
  char v61 = a6;
  char v57 = v6;
  int v58 = a2 >> v6;
  if (a4 == 32) {
    int v7 = a6;
  }
  else {
    int v7 = 1;
  }
  BOOL v8 = v7 == 0;
  if (v7) {
    char v9 = 0;
  }
  else {
    char v9 = -2;
  }
  if (v8) {
    int v10 = -3;
  }
  else {
    int v10 = -1;
  }
  unsigned int v55 = v10 + v6;
  int v56 = a1 >> v6;
  int v11 = 1;
  int v54 = 1 << (v6 + v9 - 2);
  uint64_t v12 = a4;
  int v13 = -1;
  do
  {
    int v64 = v13;
    BOOL v14 = (v61 & 1) == 0 && a4 == 32 && v11 == 8;
    int v65 = 2 * v11;
    if (a2 >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v73 = &a3[65 * v11];
      uint64_t v68 = (uint64_t)v65 << 8;
      uint64_t v17 = 4 * v65;
      unsigned int v71 = a3;
      int64_t v72 = &a3[v11];
      int v70 = &a3[64 * (uint64_t)v11];
      do
      {
        uint64_t v69 = v16;
        if (a1 >= 1)
        {
          uint64_t v18 = 0;
          int v19 = v70;
          int v20 = v71;
          int v21 = v72;
          int v22 = v73;
          do
          {
            if (v11 >= 1)
            {
              uint64_t v23 = 0;
              int v24 = v20;
              uint64_t v25 = v19;
              int v26 = v21;
              int v27 = v22;
              do
              {
                int v28 = v24;
                unint64_t v29 = v25;
                int v30 = v26;
                int v31 = v27;
                uint64_t v32 = v11;
                do
                {
                  int v33 = *v29 + *v28;
                  int v34 = *v28 - *v29;
                  int v35 = *v31 + *v30;
                  int v36 = *v30 - *v31;
                  if (v14)
                  {
                    int v37 = v34 + 1;
                    int v38 = v35 + 1;
                    int v39 = v36 + 1;
                    *int v28 = (v38 >> 1) + ((v33 + 1) >> 1);
                    *unint64_t v29 = (v39 >> 1) + (v37 >> 1);
                    *int v30 = ((v33 + 1) >> 1) - (v38 >> 1);
                    *int v31 = (v37 >> 1) - (v39 >> 1);
                    *v28 >>= 1;
                    *v29 >>= 1;
                    int v40 = *v30 >> 1;
                    int v41 = *v31 >> 1;
                  }
                  else
                  {
                    *int v28 = v35 + v33;
                    *unint64_t v29 = v36 + v34;
                    int v40 = v33 - v35;
                    int v41 = v34 - v36;
                  }
                  *v30++ = v40;
                  *v31++ = v41;
                  ++v29;
                  ++v28;
                  --v32;
                }
                while (v32);
                ++v23;
                v27 += 64;
                v26 += 64;
                v25 += 64;
                v24 += 64;
              }
              while (v23 != v11);
            }
            v18 += v65;
            int v22 = (int *)((char *)v22 + v17);
            int v21 = (int *)((char *)v21 + v17);
            int v19 = (int *)((char *)v19 + v17);
            int v20 = (int *)((char *)v20 + v17);
          }
          while (v18 < v74);
        }
        v16 += v65;
        uint64_t v73 = (int *)((char *)v73 + v68);
        int64_t v72 = (int *)((char *)v72 + v68);
        int v70 = (int *)((char *)v70 + v68);
        unsigned int v71 = (int *)((char *)v71 + v68);
      }
      while (v69 + v65 < v66);
    }
    if ((v64 & 0x80000000) == 0)
    {
      if (v58 < 1)
      {
        int v43 = 0;
      }
      else
      {
        int v42 = 0;
        int v43 = 0;
        do
        {
          if (v56 >= 1)
          {
            for (int i = 0; i != v56; ++i)
            {
              uint64_t v45 = 0;
              unsigned int v46 = 0;
              uint64_t v47 = (uint64_t)&a3[64 * (uint64_t)(v42 << v57) + (i << v57)];
              do
              {
                uint64_t v48 = (int *)v47;
                uint64_t v49 = v12;
                do
                {
                  int v51 = *v48++;
                  int v50 = v51;
                  if (v51 < 0) {
                    int v50 = -v50;
                  }
                  v46 += v50;
                  --v49;
                }
                while (v49);
                ++v45;
                v47 += 256;
              }
              while (v45 != v12);
              unsigned int v52 = (v46 + v54) >> v55;
              if (!v55) {
                unsigned int v52 = v46;
              }
              v43 += v52;
            }
          }
          ++v42;
        }
        while (v42 != v58);
      }
      *((_DWORD *)a5 + v64) = v43;
    }
    int v13 = v64 + 1;
    v11 *= 2;
  }
  while (v65 < (int)a4);
  return *((unsigned int *)a5 + v64);
}

uint64_t sub_1D0D3C1C4(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4, _DWORD *a5)
{
  int v10 = sub_1D0D3B6F4();
  uint64_t v11 = 0;
  *a5 = v10;
  uint64_t v12 = a5 + 1;
  char v13 = 1;
  do
  {
    uint64_t v14 = 0;
    char v15 = v13;
    uint64_t v16 = (char *)a1 + 2 * v11 * a2;
    uint64_t v17 = (char *)a3 + 2 * v11 * a4;
    char v18 = 1;
    do
    {
      char v19 = v18;
      int v20 = sub_1D0D3B7D8(8, 8, (uint16x8_t *)&v16[2 * v14], a2, (uint16x8_t *)&v17[2 * v14], a4);
      char v18 = 0;
      *v12++ = v20;
      uint64_t v14 = 8;
    }
    while ((v19 & 1) != 0);
    char v13 = 0;
    uint64_t v11 = 8;
  }
  while ((v15 & 1) != 0);
  unint64_t v21 = 0;
  do
  {
    unint64_t v22 = 0;
    uint64_t v23 = a1;
    int v24 = a3;
    do
    {
      uint64_t result = sub_1D0D3B934(4, 4, v23, a2, v24, a4);
      v12[v22] = result;
      unint64_t v26 = v22 * 4 + 4;
      ++v24;
      ++v23;
      BOOL v27 = v22++ >= 3;
    }
    while (!v27);
    uint64_t v12 = (_DWORD *)((char *)v12 + v26);
    a3 += a4;
    a1 += a2;
    BOOL v27 = v21 >= 0xC;
    v21 += 4;
  }
  while (!v27);
  return result;
}

uint64_t sub_1D0D3C310(uint16x8_t *a1, uint64_t a2, uint16x8_t *a3, uint64_t a4, _DWORD *a5)
{
  int v10 = sub_1D0D3B7D8(8, 8, a1, a2, a3, a4);
  uint64_t v11 = 0;
  *a5 = v10;
  uint64_t v12 = a5 + 1;
  char v13 = 1;
  do
  {
    uint64_t v14 = 0;
    char v15 = v13;
    uint64_t v16 = &a1->i8[2 * v11 * a2];
    uint64_t v17 = &a3->i8[2 * v11 * a4];
    char v18 = 1;
    do
    {
      char v19 = v18;
      uint64_t result = sub_1D0D3B934(4, 4, (uint16x4_t *)&v16[2 * v14], a2, (uint16x4_t *)&v17[2 * v14], a4);
      char v18 = 0;
      *v12++ = result;
      uint64_t v14 = 4;
    }
    while ((v19 & 1) != 0);
    char v13 = 0;
    uint64_t v11 = 4;
  }
  while ((v15 & 1) != 0);
  return result;
}

int *sub_1D0D3C3E0(uint16x8_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  do
  {
    uint32x4_t v5 = vmovl_high_u16(*a1);
    unsigned int v6 = &v8[v4];
    *(uint32x4_t *)unsigned int v6 = vmovl_u16(*(uint16x4_t *)a1->i8);
    *((uint32x4_t *)v6 + 1) = v5;
    v4 += 8;
    a1 = (uint16x8_t *)((char *)a1 + 2 * a2);
  }
  while (v4 != 64);
  sub_1D0D3BC18((uint64_t)v8, (uint64_t)v9);
  sub_1D0D3BC18((uint64_t)v9, (uint64_t)v8);
  return sub_1D0D3C488(v8, a3);
}

int *sub_1D0D3C488(int *result, uint64_t a2)
{
  unint64_t v2 = 0x1EA643000uLL;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643468, memory_order_acquire) & 1) == 0)
  {
    uint64_t v23 = a2;
    int v24 = result;
    int v21 = __cxa_guard_acquire(&qword_1EA643468);
    unint64_t v2 = 0x1EA643000uLL;
    int v22 = v21;
    a2 = v23;
    uint64_t result = v24;
    if (v22)
    {
      dword_1EA643460 = 0;
      __cxa_guard_release(&qword_1EA643468);
      unint64_t v2 = 0x1EA643000;
      a2 = v23;
      uint64_t result = v24;
    }
  }
  uint64_t v3 = 0;
  signed int v4 = *(_DWORD *)a2 << *(_DWORD *)(v2 + 1120);
  int v5 = *result;
  for (uint64_t i = 1; i != 8; ++i)
  {
    int v7 = result[i];
    if (v7 >= 0) {
      int v8 = result[i];
    }
    else {
      int v8 = -v7;
    }
    int v9 = v7 * v7;
    if (v8 > v4) {
      int v9 = 0;
    }
    v3 += v9;
  }
  int32x4_t v10 = vdupq_n_s32(v4);
  uint64_t v11 = result + 8;
  for (uint64_t j = 1; j != 8; ++j)
  {
    uint64_t v13 = 0;
    int64x2_t v14 = 0uLL;
    int64x2_t v15 = (int64x2_t)(unint64_t)v3;
    do
    {
      int32x4_t v16 = (int32x4_t)vbicq_s8((int8x16_t)vmulq_s32(*(int32x4_t *)&v11[v13], *(int32x4_t *)&v11[v13]), (int8x16_t)vcgtq_s32(vabsq_s32(*(int32x4_t *)&v11[v13]), v10));
      int64x2_t v14 = vaddw_high_s32(v14, v16);
      int64x2_t v15 = vaddw_s32(v15, *(int32x2_t *)v16.i8);
      v13 += 4;
    }
    while (v13 != 8);
    uint64_t v17 = vaddvq_s64(vaddq_s64(v15, v14));
    uint64_t v3 = v17;
    v11 += 8;
  }
  if (v5 >= 0) {
    int v18 = *result;
  }
  else {
    int v18 = -v5;
  }
  int v19 = v5 * v5;
  if (v18 <= v4) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  *(void *)a2 = v20;
  *(void *)(a2 + 8) = v17;
  return result;
}

uint64_t sub_1D0D3C5B4(uint16x8_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  do
  {
    uint32x4_t v5 = vmovl_high_u16(*a1);
    unsigned int v6 = (uint32x4_t *)&v22[v4];
    *unsigned int v6 = vmovl_u16(*(uint16x4_t *)a1->i8);
    v6[1] = v5;
    v4 += 32;
    a1 = (uint16x8_t *)((char *)a1 + 2 * a2);
  }
  while (v4 != 256);
  int v7 = v22;
  sub_1D0D3BC18((uint64_t)v22, (uint64_t)v23);
  uint64_t result = sub_1D0D3BC18((uint64_t)v23, (uint64_t)v22);
  unint64_t v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64x2_t v12 = (uint64x2_t)vdupq_n_s64(7uLL);
  int64x2_t v13 = vdupq_n_s64(4uLL);
  do
  {
    uint64_t v14 = 0;
    int32x4_t v15 = (int32x4_t)v10;
    int32x4_t v16 = (int32x4_t)v11;
    int64x2_t v17 = vdupq_n_s64(v9);
    int64x2_t v18 = (int64x2_t)xmmword_1D0D7F530;
    int64x2_t v19 = (int64x2_t)xmmword_1D0D7F520;
    do
    {
      int8x16_t v20 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v12, (uint64x2_t)vaddq_s64(v18, v17)), (int32x4_t)vcgtq_u64(v12, (uint64x2_t)vaddq_s64(v19, v17)));
      int8x16_t v21 = (int8x16_t)vabsq_s32(*(int32x4_t *)&v7[v14]);
      int32x4_t v16 = vaddq_s32((int32x4_t)vbicq_s8(v21, v20), v16);
      int32x4_t v15 = vaddq_s32((int32x4_t)vandq_s8(v21, v20), v15);
      int64x2_t v19 = vaddq_s64(v19, v13);
      int64x2_t v18 = vaddq_s64(v18, v13);
      v14 += 16;
    }
    while (v14 != 32);
    unsigned int v11 = vaddvq_s32(v16);
    unsigned int v10 = vaddvq_s32(v15);
    ++v9;
    v7 += 32;
  }
  while (v9 != 8);
  *a3 = v10;
  a3[1] = v11;
  return result;
}

float sub_1D0D3C70C(unsigned __int32 *a1, uint64_t a2, unsigned __int32 *a3, uint64_t a4, double a5, uint32x4_t a6, uint32x4_t a7)
{
  float v7 = 0.0;
  int v8 = 4;
  do
  {
    a6.i32[0] = *a1;
    a6 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8));
    a7.i32[0] = *a3;
    a7 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a7.i8));
    float result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vabaq_u32((uint32x4_t)LODWORD(v7), a6, a7)));
    float v7 = result;
    a1 = (unsigned __int32 *)((char *)a1 + a2);
    a3 = (unsigned __int32 *)((char *)a3 + a4);
    --v8;
  }
  while (v8);
  return result;
}

int *sub_1D0D3C758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint32x4_t v5 = v8;
  do
  {
    for (uint64_t i = 0; i != 8; ++i)
      v5[i] = *(unsigned __int8 *)(a1 + i);
    ++v4;
    a1 += a2;
    v5 += 8;
  }
  while (v4 != 8);
  sub_1D0D3BC18((uint64_t)v8, (uint64_t)v9);
  sub_1D0D3BC18((uint64_t)v9, (uint64_t)v8);
  return sub_1D0D3C488(v8, a3);
}

uint64_t sub_1D0D3C804(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint32x4_t v5 = v22;
  do
  {
    for (uint64_t i = 0; i != 8; ++i)
      *(_DWORD *)&v5[4 * i] = *(unsigned __int8 *)(a1 + i);
    ++v4;
    a1 += a2;
    v5 += 32;
  }
  while (v4 != 8);
  float v7 = v22;
  sub_1D0D3BC18((uint64_t)v22, (uint64_t)v23);
  uint64_t result = sub_1D0D3BC18((uint64_t)v23, (uint64_t)v22);
  unint64_t v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64x2_t v12 = (uint64x2_t)vdupq_n_s64(7uLL);
  int64x2_t v13 = vdupq_n_s64(4uLL);
  do
  {
    uint64_t v14 = 0;
    int32x4_t v15 = (int32x4_t)v10;
    int32x4_t v16 = (int32x4_t)v11;
    int64x2_t v17 = vdupq_n_s64(v9);
    int64x2_t v18 = (int64x2_t)xmmword_1D0D7F530;
    int64x2_t v19 = (int64x2_t)xmmword_1D0D7F520;
    do
    {
      int8x16_t v20 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v12, (uint64x2_t)vaddq_s64(v18, v17)), (int32x4_t)vcgtq_u64(v12, (uint64x2_t)vaddq_s64(v19, v17)));
      int8x16_t v21 = (int8x16_t)vabsq_s32(*(int32x4_t *)&v7[v14]);
      int32x4_t v16 = vaddq_s32((int32x4_t)vbicq_s8(v21, v20), v16);
      int32x4_t v15 = vaddq_s32((int32x4_t)vandq_s8(v21, v20), v15);
      int64x2_t v19 = vaddq_s64(v19, v13);
      int64x2_t v18 = vaddq_s64(v18, v13);
      v14 += 16;
    }
    while (v14 != 32);
    unsigned int v11 = vaddvq_s32(v16);
    unsigned int v10 = vaddvq_s32(v15);
    ++v9;
    v7 += 32;
  }
  while (v9 != 8);
  *a3 = v10;
  a3[1] = v11;
  return result;
}

uint64_t sub_1D0D3C960(uint64_t result, int a2, int a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  if (a2 > 51)
  {
    int v8 = 0;
    int v9 = 0;
    int v10 = 0;
    int v12 = 0;
    int v13 = 0;
  }
  else
  {
    int v6 = a3 + a2;
    if (a3 + a2 >= 63) {
      int v6 = 63;
    }
    unsigned int v7 = v6 & ~(v6 >> 31);
    int v8 = dword_1D0DA667C[70 * *(unsigned __int8 *)(result + 172) + v7];
    int v9 = *(unsigned __int16 *)(*(void *)(result + 56) + 2 * v7);
    int v10 = *(unsigned __int16 *)(*(void *)(result + 64) + 2 * v7);
    unsigned int v11 = a2 & ~(a2 >> 31);
    int v12 = *(unsigned __int16 *)(*(void *)(result + 24) + 2 * v11);
    int v13 = *(unsigned __int16 *)(*(void *)(result + 40) + 2 * v11);
  }
  *a4 = v8;
  *a5 = v9;
  a5[1] = v10;
  *a6 = v12;
  a6[1] = v13;
  return result;
}

uint64_t sub_1D0D3C9DC(uint64_t result, int a2, int a3)
{
  int v3 = a3 + a2;
  if (a3 + a2 >= 63) {
    int v3 = 63;
  }
  unsigned int v4 = v3 & ~(v3 >> 31);
  int v5 = dword_1D0DA667C[70 * *(unsigned __int8 *)(result + 172) + v4];
  *(_WORD *)(result + 144) = v5;
  int v6 = (__int16 *)((char *)&unk_1D0DA6BF4 + 700 * *(unsigned __int8 *)(result + 170) + 2 * v4);
  __int16 v7 = v6[70 * *(unsigned __int8 *)(result + 171)];
  *(_WORD *)(result + 146) = v7;
  __int16 v8 = *v6;
  *(_WORD *)(result + 148) = *v6;
  *(_WORD *)(result + 150) = v6[70];
  if (a2 >= 51) {
    int v9 = 51;
  }
  else {
    int v9 = a2;
  }
  unsigned int v10 = v9 & ~(v9 >> 31);
  uint64_t v11 = *(void *)(result + 32);
  *(_WORD *)(result + 162) = *(_WORD *)(*(void *)(result + 24) + 2 * v10);
  uint64_t v12 = *(void *)(result + 48);
  *(_WORD *)(result + 166) = *(_WORD *)(*(void *)(result + 40) + 2 * v10);
  *(_WORD *)(result + 164) = *(_WORD *)(v11 + 2 * v10);
  *(_WORD *)(result + 168) = *(_WORD *)(v12 + 2 * v10);
  *(_WORD *)(result + 154) = v7;
  *(_WORD *)(result + 156) = v7;
  *(_WORD *)(result + 158) = v7;
  *(_WORD *)(result + 152) = v5;
  *(_WORD *)(result + 160) = v8;
  return result;
}

uint64_t sub_1D0D3CA98(uint64_t a1, uint64_t a2, int a3, int a4, int a5, unsigned __int8 *a6)
{
  return sub_1D0D3CAE0(a1, a2, a3, a4, a5, *(unsigned __int8 *)(*((void *)a6 + 12)+ 16* (((uint64_t)(a3 - *((_DWORD *)a6 + 1)) >> 2)+ ((unint64_t)*a6 >> 2) * ((a4 - *((_DWORD *)a6 + 2)) >> 2))+ 10), (*(unsigned __int16 *)(*((void *)a6 + 11)+ 2* (((uint64_t)(a3 - *((_DWORD *)a6 + 1)) >> 3)+ ((unint64_t)*a6 >> 3) * ((a4 - *((_DWORD *)a6 + 2)) >> 3))) >> 4) & 7);
}

uint64_t sub_1D0D3CAE0(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7 = *(void *)(result + 9464);
  int v8 = *(unsigned __int8 *)(*(void *)(result + 9472) + 2113);
  *(void *)(result + 32) = v7;
  int v9 = v8 - a5;
  *(_DWORD *)uint64_t result = v9;
  *(_DWORD *)(result + 4) = a6;
  *(_DWORD *)(result + 8) = a7;
  if (a6 == 1)
  {
    unsigned int v10 = *(unsigned __int8 *)(*(void *)(v7 + 16) + 273);
    if (a7) {
      ++v10;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(v7 + 16);
    unsigned int v10 = (v9 - *(unsigned __int8 *)(v11 + 2114)) & ~((v9 - *(unsigned __int8 *)(v11 + 2114)) >> 31);
    unsigned int v12 = *(unsigned __int8 *)(v11 + 272);
    if (v10 >= v12) {
      unsigned int v10 = v12;
    }
  }
  *(_DWORD *)(result + 12) = v10;
  *(void *)(result + 6344) = 0;
  *(_OWORD *)(result + 6264) = 0u;
  *(_OWORD *)(result + 6280) = 0u;
  *(_OWORD *)(result + 6296) = 0u;
  *(_OWORD *)(result + 6312) = 0u;
  *(_OWORD *)(result + 6328) = 0u;
  *(void *)(result + 9488) = a2;
  *(_DWORD *)(result + 9512) = a3;
  *(_DWORD *)(result + 9516) = a4;
  *(_DWORD *)(result + 9520) = a5;
  *(void *)(result + 9496) = a2 + 1000;
  *(unsigned char *)(result + 9504) = *(unsigned char *)(a2 + 8);
  uint64_t v13 = *(void *)(v7 + 5320);
  uint64_t v14 = 664;
  if (a6 == 1) {
    uint64_t v14 = 662;
  }
  *(unsigned char *)(result + 9569) = *(unsigned __int16 *)(v13 + v14) != 0;
  return result;
}

unint64_t sub_1D0D3CBA4(uint64_t a1, __int16 *a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,uint64_t a33)
{
  int v33 = a5;
  a33 = *MEMORY[0x1E4F143B8];
  uint64_t v38 = a4;
  uint64_t v95 = a4 - 2;
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, char *))(a1 + 8 * v95 + 9432))(a3, a5, &a31, &a13);
  unsigned int v40 = result;
  if ((result & 0x80000000) == 0)
  {
    uint64_t v92 = v38;
    uint64_t v41 = *(void *)(*(void *)(a1 + 9488) + 944);
    uint64_t v96 = v41 + 48;
    uint64_t vars0 = v41;
    int v42 = *(__int16 *)(a3 + 2 * ((a32 << a4) + a31));
    LODWORD(vars8) = *(_DWORD *)(v41 + 228);
    if (v42 >= 0) {
      LOWORD(v43) = v42;
    }
    else {
      int v43 = -v42;
    }
    a9 = v43;
    unsigned int v44 = (unsigned __int16)v43 > 1u;
    __int16 v45 = *a2;
    if (v33 == 2) {
      int v46 = a31;
    }
    else {
      int v46 = a32;
    }
    if (v33 == 2) {
      int v47 = a32;
    }
    else {
      int v47 = a31;
    }
    sub_1D0D3D188((uint64_t)&v96, v47, a4, a6, v41 + 91);
    sub_1D0D3D188((uint64_t)&v96, v46, a4, a6, v96 + 61);
    unsigned int v48 = vars8;
    if (v47 >= 4) {
      unsigned int v48 = vars8 + (byte_1D0DA76C5[v47 - 4] << 8);
    }
    if (v46 >= 4) {
      v48 += byte_1D0DA76C5[v46 - 4] << 8;
    }
    unint64_t v49 = 0;
    uint64_t v50 = 27;
    if (a6 <= 0) {
      uint64_t v50 = 0;
    }
    int v51 = 4 * v33;
    if (a4 != 3) {
      int v51 = 0;
    }
    BOOL v55 = (v45 & 0x100) == 0;
    uint64_t v87 = v96 + 16 * (a6 > 0) + 127;
    uint64_t v88 = v96 + 2 * (a6 > 0) + 79;
    uint64_t v86 = v96 + 4 * (a6 > 0) + 151;
    uint64_t v52 = v96 + v50 + 83;
    uint64_t v94 = (char *)*(&off_1E689A008 + v95) + v51;
    float v53 = &byte_1D0DAF020[64 * (uint64_t)v33];
    int v54 = v40 & 0xF;
    BOOL v55 = !v55 || *(unsigned char *)(*(void *)(*(void *)(a1 + 9464) + 32) + 5) == 0;
    int v56 = !v55;
    unsigned int v89 = v56;
    uint64_t v57 = (uint64_t)&unk_1D0DAFDA0 + 384 * (a6 > 0) + 128 * v92 - 384;
    if (v33) {
      uint64_t v57 = (uint64_t)&unk_1D0DAFD20;
    }
    uint64_t v93 = v57;
    int v58 = (1 << v95) - 1;
    int v91 = 4 << a4;
    uint64_t v59 = v40 >> 4;
    LODWORD(v57) = 1;
    uint64_t v60 = 1;
    while (1)
    {
      unint64_t result = v94[v59];
      signed int v61 = result >> v95;
      if ((int)(v58 & result) >= v58) {
        int v62 = 0;
      }
      else {
        int v62 = (v49 >> result) & 2;
      }
      uint64_t v63 = (v49 >> ((1 << v95) + result)) & 1;
      if (v61 >= v58) {
        LODWORD(v63) = 0;
      }
      uint64_t v64 = v63 | v62;
      unsigned int v65 = *((unsigned __int16 *)&a13 + v59);
      if (v59 != v40 >> 4 && v59)
      {
        uint64_t v66 = (unsigned char *)(v64 ? v88 + 1 : v88);
        v48 += dword_1D0DAE36C[(*v66 ^ (v65 != 0))];
        if (!*((_WORD *)&a13 + v59)) {
          goto LABEL_105;
        }
      }
      uint64_t v67 = (unsigned __int8 *)(v93 + 32 * v64 + 16 * (v59 != 0));
      int v68 = v61 * v91 + 4 * (result & ~(-1 << v95));
      if (v54 > 1)
      {
        uint64_t v69 = v54;
        do
        {
          if ((v65 >> --v69))
          {
            int v70 = *(__int16 *)(a3 + 2 * (v68 + v53[16 * v95 + v69]));
            if (v70 < 0) {
              int v70 = -v70;
            }
            *(&a9 + (int)v57) = v70;
            v44 += ((unsigned __int16)v70 > 1u) << v57;
            LODWORD(v57) = v57 + 1;
          }
          v48 += dword_1D0DAE36C[*(unsigned char *)(v52 + v67[v53[v69]]) ^ (v65 >> v69) & 1];
        }
        while ((unint64_t)(v69 + 1) > 2);
      }
      unint64_t result = 1 << result;
      v49 |= result;
      if (v54 >= 1)
      {
        unint64_t result = v65 & 1;
        if (v59 && (int)v57 < 1)
        {
          if (v65) {
            goto LABEL_53;
          }
        }
        else
        {
          v48 += dword_1D0DAE36C[*(unsigned char *)(v52 + *v67) ^ v65 & 1];
          if (v65)
          {
LABEL_53:
            int v71 = *(__int16 *)(a3 + 2 * v68);
            if (v71 < 0) {
              int v71 = -v71;
            }
            *(&a9 + (int)v57) = v71;
            v44 += ((unsigned __int16)v71 > 1u) << v57;
            LODWORD(v57) = v57 + 1;
            goto LABEL_56;
          }
        }
      }
      if (!v65) {
        goto LABEL_104;
      }
LABEL_56:
      if (__clz(v65) + __clz(__rbit32(v65)) < 0x1C) {
        unint64_t result = v89;
      }
      else {
        unint64_t result = 0;
      }
      if (v59) {
        BOOL v72 = a6 <= 0;
      }
      else {
        BOOL v72 = 0;
      }
      if (v72) {
        int v73 = 2;
      }
      else {
        int v73 = 0;
      }
      if ((int)v57 > 0)
      {
        uint64_t v74 = v73 | (v60 == 0);
        if ((int)v57 >= 8) {
          int v75 = 8;
        }
        else {
          int v75 = v57;
        }
        uint64_t v76 = 1;
        unsigned int v77 = v44;
        do
        {
          if ((unint64_t)(v76 - 1) >= 2) {
            uint64_t v60 = v76;
          }
          else {
            uint64_t v60 = v76 + 1;
          }
          char v78 = *(unsigned char *)(v87 + 4 * v74 + v76);
          if (v77) {
            uint64_t v76 = 0;
          }
          else {
            uint64_t v76 = v60;
          }
          v48 += dword_1D0DAE36C[(v78 ^ v77 & 1)];
          v77 >>= 1;
          --v75;
        }
        while (v75);
        if (v76)
        {
          v48 += (v57 - result) << 8;
          if ((int)v57 < 9)
          {
LABEL_103:
            LODWORD(v57) = 0;
            unsigned int v44 = 0;
LABEL_104:
            int v54 = 16;
            goto LABEL_105;
          }
        }
        else
        {
          uint64_t v60 = 0;
          v48 += dword_1D0DAE36C[(*(unsigned char *)(v86 + v74) ^ ((unsigned __int16)*(&a9
                                                                                              + __clz(__rbit32(v44))) > 2u))]
               + ((v57 - result) << 8);
        }
        unint64_t result = 0;
        int v79 = 0;
        if ((int)v57 <= 1) {
          uint64_t v57 = 1;
        }
        else {
          uint64_t v57 = v57;
        }
        int v80 = 3;
        do
        {
          int v81 = (unsigned __int16)*(&a9 + result);
          unsigned int v82 = v48 - ((__clz(v81 - v80 + (-2 << v79)) << 9) + (v79 << 8)) + 16896;
          if (v81 - v80 < 3 << v79) {
            unsigned int v83 = v48 + ((v79 + ((v81 - v80) >> v79)) << 8) + 256;
          }
          else {
            unsigned int v83 = v82;
          }
          if (3 << v79 >= v81) {
            int v84 = v79;
          }
          else {
            int v84 = v79 + 1;
          }
          if (v84 >= 4) {
            int v84 = 4;
          }
          if (v81 >= v80)
          {
            unsigned int v48 = v83;
            int v79 = v84;
          }
          if (v81 <= 1) {
            int v85 = v80;
          }
          else {
            int v85 = 2;
          }
          if (result > 6) {
            int v80 = 1;
          }
          else {
            int v80 = v85;
          }
          ++result;
        }
        while (v57 != result);
        goto LABEL_103;
      }
      unsigned int v44 = 0;
      v48 += (v57 - result) << 8;
      int v54 = 16;
      uint64_t v60 = 1;
      LODWORD(v57) = 0;
LABEL_105:
      BOOL v72 = v59-- <= 0;
      if (v72)
      {
        *(_DWORD *)(vars0 + 228) = v48;
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1D0D3D188(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  unsigned int v5 = byte_1D0DA7660[a2];
  if (a2)
  {
    int v6 = *(_DWORD *)(result + 16);
    if (v5 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = byte_1D0DA7660[a2];
    }
    int v8 = &byte_1D0DA76FD[36 * (a4 > 0) - 18 + 9 * a3];
    uint64_t v9 = v7;
    do
    {
      unsigned int v10 = *v8++;
      v6 += dword_1D0DAE36C[*(unsigned __int8 *)(a5 + v10) ^ 1];
      *(_DWORD *)(result + 16) = v6;
      --v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v5 < byte_1D0DA7660[~(-1 << a3)]) {
    *(_DWORD *)(result + 16) += dword_1D0DAE36C[*(unsigned __int8 *)(a5
  }
                                                                   + byte_1D0DA76FD[36 * (a4 > 0) - 18 + 9 * a3 + v7])];
  return result;
}

uint64_t sub_1D0D3D254(uint64_t a1, __int16 *a2, __int16 *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21)
{
  int v22 = a5;
  a21 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(__int16 *, uint64_t, int *, uint64_t *))(a1 + 9432))(a3, a5, &a19, &vars0);
  int v27 = result;
  if ((result & 0x80000000) == 0)
  {
    uint64_t v28 = *(void *)(*(void *)(a1 + 9488) + 944);
    uint64_t v60 = v28 + 48;
    uint64_t v61 = v28;
    int v29 = a3[4 * a20 + a19];
    LODWORD(v62) = *(_DWORD *)(v28 + 228);
    if (v29 >= 0) {
      LOWORD(v30) = v29;
    }
    else {
      int v30 = -v29;
    }
    a15 = v30;
    unsigned int v31 = (unsigned __int16)v30 > 1u;
    __int16 v32 = *a2;
    if (v22 == 2) {
      int v33 = a19;
    }
    else {
      int v33 = a20;
    }
    if (v22 == 2) {
      int v34 = a20;
    }
    else {
      int v34 = a19;
    }
    sub_1D0D3D188((uint64_t)&v60, v34, 2, a6, v28 + 91);
    uint64_t result = sub_1D0D3D188((uint64_t)&v60, v33, 2, a6, v60 + 61);
    uint64_t v35 = 27;
    if (a6 <= 0) {
      uint64_t v35 = 0;
    }
    uint64_t v36 = v60;
    int v37 = (unsigned char *)(v60 + v35 + 83);
    BOOL v39 = (v32 & 0x100) == 0 && *(unsigned char *)(*(void *)(*(void *)(a1 + 9464) + 32) + 5) != 0;
    unsigned int v40 = (unsigned __int16)vars0;
    unsigned int v41 = v62;
    if (v27 < 2)
    {
      LODWORD(v43) = 1;
    }
    else
    {
      uint64_t v42 = v27;
      LODWORD(v43) = 1;
      uint64_t result = (uint64_t)byte_1D0DAFCD0;
      do
      {
        uint64_t v44 = byte_1D0DAF020[64 * (uint64_t)v22 + --v42];
        if ((v40 >> v42))
        {
          int v45 = a3[v44];
          if (v45 < 0) {
            int v45 = -v45;
          }
          *(&a15 + (int)v43) = v45;
          v31 += ((unsigned __int16)v45 > 1u) << v43;
          LODWORD(v43) = v43 + 1;
        }
        v41 += dword_1D0DAE36C[v37[byte_1D0DAFCD0[v44 + 64]] ^ (v40 >> v42) & 1];
      }
      while ((unint64_t)(v42 + 1) > 2);
    }
    if (v27 > 0 && (v41 += dword_1D0DAE36C[*v37 ^ v40 & 1], (v40 & 1) != 0))
    {
      int v46 = *a3;
      if (v46 < 0) {
        int v46 = -v46;
      }
      *(&a15 + (int)v43) = v46;
      v31 += ((unsigned __int16)v46 > 1u) << v43;
      LODWORD(v43) = v43 + 1;
    }
    else if (!v40)
    {
      goto LABEL_74;
    }
    if (__clz(v40) + __clz(__rbit32(v40)) >= 0x1C) {
      BOOL v39 = 0;
    }
    if ((int)v43 > 0)
    {
      uint64_t v47 = v36 + 16 * (a6 > 0) + 127;
      uint64_t v48 = v36 + 151;
      if ((int)v43 >= 8) {
        int v49 = 8;
      }
      else {
        int v49 = v43;
      }
      uint64_t v50 = 1;
      unsigned int v51 = v31;
      do
      {
        if ((unint64_t)(v50 - 1) >= 2) {
          uint64_t v52 = v50;
        }
        else {
          uint64_t v52 = v50 + 1;
        }
        char v53 = *(unsigned char *)(v47 + v50);
        if (v51) {
          uint64_t v50 = 0;
        }
        else {
          uint64_t v50 = v52;
        }
        uint64_t result = dword_1D0DAE36C[(v53 ^ v51 & 1)];
        v41 += result;
        v51 >>= 1;
        --v49;
      }
      while (v49);
      if (v50)
      {
        v41 += (v43 - v39) << 8;
        if ((int)v43 < 9) {
          goto LABEL_74;
        }
      }
      else
      {
        v41 += dword_1D0DAE36C[(*(unsigned char *)(v48 + 4 * (a6 > 0)) ^ ((unsigned __int16)*(&a15 + __clz(__rbit32(v31))) > 2u))]
             + ((v43 - v39) << 8);
      }
      unint64_t v54 = 0;
      int v55 = 0;
      if ((int)v43 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v43;
      }
      LODWORD(result) = 3;
      do
      {
        int v56 = (unsigned __int16)*(&a15 + v54);
        unsigned int v57 = v41 - ((__clz(v56 - result + (-2 << v55)) << 9) + (v55 << 8)) + 16896;
        if (v56 - (int)result < 3 << v55) {
          unsigned int v58 = v41 + ((v55 + ((v56 - result) >> v55)) << 8) + 256;
        }
        else {
          unsigned int v58 = v57;
        }
        if (3 << v55 >= v56) {
          int v59 = v55;
        }
        else {
          int v59 = v55 + 1;
        }
        if (v59 >= 4) {
          int v59 = 4;
        }
        if (v56 >= (int)result)
        {
          unsigned int v41 = v58;
          int v55 = v59;
        }
        if (v56 > 1) {
          LODWORD(result) = 2;
        }
        if (v54 > 6) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = result;
        }
        ++v54;
      }
      while (v43 != v54);
      goto LABEL_74;
    }
    v41 += (v43 - v39) << 8;
LABEL_74:
    *(_DWORD *)(v61 + 228) = v41;
  }
  return result;
}

uint64_t sub_1D0D3D624(uint64_t a1, __int16 *a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,uint64_t a41)
{
  int v41 = a5;
  a41 = *MEMORY[0x1E4F143B8];
  uint64_t v45 = a4;
  uint64_t vars0 = a4 - 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, char *))(a1 + 8 * vars0 + 9432))(a3, a5, &a39, &a21);
  if ((result & 0x80000000) == 0)
  {
    unsigned int v47 = result;
    uint64_t v112 = a1;
    uint64_t v48 = *(void *)(*(void *)(a1 + 9488) + 944);
    unsigned int v49 = *(unsigned __int16 *)(a3 + 2 * ((a40 << a4) + a39));
    LOWORD(v50) = v49;
    if ((v49 & 0x8000u) != 0) {
      int v50 = -(__int16)v49;
    }
    a17 = v50;
    LODWORD(v116) = (unsigned __int16)v50 > 1u;
    __int16 v114 = *a2;
    if (v41 == 2) {
      int v51 = a39;
    }
    else {
      int v51 = a40;
    }
    if (v41 == 2) {
      int v52 = a40;
    }
    else {
      int v52 = a39;
    }
    sub_1D0D3DDE4(v48, v52, a4, a6, v48 + 91);
    uint64_t result = sub_1D0D3DDE4(v48, v51, a4, a6, v48 + 109);
    if (v52 >= 4) {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v48 + 32))(v48, byte_1D0DA76E1[v52 - 4], byte_1D0DA76C5[v52 - 4]);
    }
    HIDWORD(v116) = v49 >> 15;
    if (v51 > 3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v48 + 32))(v48, byte_1D0DA76E1[v51 - 4], byte_1D0DA76C5[v51 - 4]);
    }
    unint64_t v110 = 0;
    uint64_t v53 = 27;
    if (a6 <= 0) {
      uint64_t v53 = 0;
    }
    int v54 = 4 * v41;
    if (a4 != 3) {
      int v54 = 0;
    }
    BOOL v57 = (v114 & 0x100) == 0;
    uint64_t v115 = v48 + v53 + 131;
    uint64_t v104 = (char *)*(&off_1E689A008 + vars0) + v54;
    uint64_t v55 = v41;
    uint64_t v56 = v47 & 0xF;
    BOOL v57 = !v57 || *(unsigned char *)(*(void *)(*(void *)(v112 + 9464) + 32) + 5) == 0;
    int v58 = !v57;
    int v98 = v58;
    int v59 = (char *)&unk_1D0DAFDA0 + 384 * (a6 > 0) + 128 * v45 - 384;
    if (v41) {
      int v59 = (char *)&unk_1D0DAFD20;
    }
    uint64_t v101 = v59;
    int v102 = (1 << vars0) - 1;
    int v100 = 4 << a4;
    uint64_t v103 = v47 >> 4;
    uint64_t v60 = v103;
    LODWORD(v61) = 1;
    uint64_t v62 = 1;
    long long v113 = &byte_1D0DAF020[64 * v55];
    do
    {
      unsigned int v63 = v104[v60];
      int v64 = v63 >> vars0;
      if ((int)(v102 & v63) >= v102) {
        int v65 = 0;
      }
      else {
        int v65 = (v110 >> v63) & 2;
      }
      uint64_t v66 = (v110 >> ((1 << vars0) + v63)) & 1;
      if (v64 >= v102) {
        LODWORD(v66) = 0;
      }
      uint64_t v67 = v66 | v65;
      unsigned int v68 = *((unsigned __int16 *)&a21 + v60);
      uint64_t v69 = v60 - 1;
      if (v60 != v103 && v60)
      {
        uint64_t v70 = v67 ? v48 + 2 * (a6 > 0) + 128 : v48 + 2 * (a6 > 0) + 127;
        uint64_t v71 = v56;
        uint64_t result = (**(uint64_t (***)(uint64_t, BOOL, uint64_t))v48)(v48, v68 != 0, v70);
        uint64_t v56 = v71;
        if (!v68) {
          goto LABEL_104;
        }
      }
      uint64_t v108 = v60 - 1;
      uint64_t v109 = v60;
      BOOL v72 = &v101[32 * v67 + 16 * (v60 != 0)];
      int v73 = v64 * v100 + 4 * (v63 & ~(-1 << vars0));
      int vars8_4 = v56;
      if ((int)v56 > 1)
      {
        uint64_t v74 = v56;
        do
        {
          int v75 = v113[16 * vars0 + --v74];
          uint64_t result = (**(uint64_t (***)(uint64_t, void, uint64_t))v48)(v48, (v68 >> v74) & 1, v115 + v72[v113[v74]]);
          if ((v68 >> v74))
          {
            unsigned int v76 = *(unsigned __int16 *)(a3 + 2 * (v73 + v75));
            LOWORD(v77) = v76;
            if ((v76 & 0x8000u) != 0) {
              int v77 = -(__int16)v76;
            }
            *(&a17 + (int)v61) = v77;
            LODWORD(v116) = (((unsigned __int16)v77 > 1u) << v61) + v116;
            HIDWORD(v116) = (v76 >> 15) | (2 * HIDWORD(v116));
            LODWORD(v61) = v61 + 1;
          }
        }
        while ((unint64_t)(v74 + 1) > 2);
      }
      v110 |= 1 << v63;
      if (vars8_4 >= 1)
      {
        if (v60 && (int)v61 < 1)
        {
          if (v68) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t result = (**(uint64_t (***)(uint64_t, void, uint64_t))v48)(v48, v68 & 1, v115 + *v72);
          if (v68)
          {
LABEL_52:
            unsigned int v78 = *(unsigned __int16 *)(a3 + 2 * v73);
            LOWORD(v79) = v78;
            if ((v78 & 0x8000u) != 0) {
              int v79 = -(__int16)v78;
            }
            *(&a17 + (int)v61) = v79;
            LODWORD(v116) = (((unsigned __int16)v79 > 1u) << v61) + v116;
            HIDWORD(v116) = (v78 >> 15) | (2 * HIDWORD(v116));
            LODWORD(v61) = v61 + 1;
LABEL_55:
            if (__clz(v68) + __clz(__rbit32(v68)) < 0x1C) {
              int v80 = v98;
            }
            else {
              int v80 = 0;
            }
            if (v60) {
              BOOL v81 = a6 <= 0;
            }
            else {
              BOOL v81 = 0;
            }
            if (v81) {
              int v82 = 2;
            }
            else {
              int v82 = 0;
            }
            BOOL v83 = v62 == 0;
            if ((int)v61 <= 0)
            {
              uint64_t v62 = 1;
            }
            else
            {
              unsigned int vars8_4a = v82 | v83;
              uint64_t v84 = v48 + 16 * (a6 > 0) + 175 + 4 * (v82 | v83);
              if ((int)v61 >= 8) {
                int v85 = 8;
              }
              else {
                int v85 = v61;
              }
              uint64_t v86 = 1;
              unsigned int v87 = v116;
              do
              {
                uint64_t v88 = v84 + v86;
                if ((unint64_t)(v86 - 1) >= 2) {
                  uint64_t v62 = v86;
                }
                else {
                  uint64_t v62 = v86 + 1;
                }
                if (v87) {
                  uint64_t v86 = 0;
                }
                else {
                  uint64_t v86 = v62;
                }
                (**(void (***)(uint64_t, void, uint64_t))v48)(v48, v87 & 1, v88);
                v87 >>= 1;
                --v85;
              }
              while (v85);
              if (!v86)
              {
                (**(void (***)(uint64_t, BOOL, uint64_t))v48)(v48, (unsigned __int16)*(&a17 + __clz(__rbit32(v116))) > 2u, v48 + 4 * (a6 > 0) + 199 + vars8_4a);
                uint64_t v62 = 0;
                BOOL v89 = 1;
LABEL_80:
                uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v48 + 32))(v48, (HIDWORD(v116) >> v80), (v61 - v80));
                if (v89)
                {
                  unint64_t v90 = 0;
                  int v91 = 0;
                  if ((int)v61 <= 1) {
                    uint64_t v61 = 1;
                  }
                  else {
                    uint64_t v61 = v61;
                  }
                  int v92 = 3;
                  do
                  {
                    int v93 = (unsigned __int16)*(&a17 + v90);
                    int v94 = v93 - v92;
                    if (v93 >= v92)
                    {
                      if (v94 >= 3 << v91)
                      {
                        unsigned int v95 = __clz(v94 + (-2 << v91));
                        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v48 + 24))(v48, ((((-1 << (31 - v95 - v91)) - 2) << v91) + v94) | (-2 << ~(_BYTE)v95), 31 - v95 - (v91 + v95) + 35);
                      }
                      else
                      {
                        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 48))(v48);
                      }
                      if (3 << v91 >= v93) {
                        int v96 = v91;
                      }
                      else {
                        int v96 = v91 + 1;
                      }
                      if (v96 >= 4) {
                        int v91 = 4;
                      }
                      else {
                        int v91 = v96;
                      }
                    }
                    if (v93 <= 1) {
                      int v97 = v92;
                    }
                    else {
                      int v97 = 2;
                    }
                    if (v90 > 6) {
                      int v92 = 1;
                    }
                    else {
                      int v92 = v97;
                    }
                    ++v90;
                  }
                  while (v61 != v90);
                }
                LODWORD(v61) = 0;
                uint64_t v116 = 0;
                uint64_t v56 = 16;
                uint64_t v60 = v109;
                goto LABEL_103;
              }
            }
            BOOL v89 = (int)v61 > 8;
            goto LABEL_80;
          }
        }
      }
      if (v68) {
        goto LABEL_55;
      }
      uint64_t v56 = 16;
LABEL_103:
      uint64_t v69 = v108;
LABEL_104:
      BOOL v81 = v60 <= 0;
      uint64_t v60 = v69;
    }
    while (!v81);
  }
  return result;
}

uint64_t sub_1D0D3DDE4(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  int v8 = (uint64_t (***)(void, uint64_t, uint64_t))result;
  unsigned int v9 = byte_1D0DA7660[a2];
  if (a2)
  {
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = byte_1D0DA7660[a2];
    }
    uint64_t v11 = &byte_1D0DA76FD[36 * (a4 > 0) - 18 + 9 * a3];
    uint64_t v12 = v10;
    do
    {
      unsigned int v13 = *v11++;
      uint64_t result = (**v8)(v8, 1, a5 + v13);
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (v9 < byte_1D0DA7660[~(-1 << a3)])
  {
    uint64_t v14 = a5 + byte_1D0DA76FD[36 * (a4 > 0) - 18 + 9 * a3 + v10];
    int32x4_t v15 = **v8;
    return v15(v8, 0, v14);
  }
  return result;
}

uint64_t sub_1D0D3DF4C(uint64_t a1, __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17)
{
  int v18 = a5;
  a17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, int *, uint64_t *))(a1 + 9432))(a3, a5, &a15, &v64);
  if ((result & 0x80000000) == 0)
  {
    int v23 = result;
    uint64_t v24 = *(void *)(*(void *)(a1 + 9488) + 944);
    uint64_t v62 = a3;
    unsigned int v25 = a3[4 * a16 + a15];
    LOWORD(v26) = v25;
    if ((v25 & 0x8000u) != 0) {
      int v26 = -(__int16)v25;
    }
    a11 = v26;
    unsigned int v27 = (unsigned __int16)v26 > 1u;
    unsigned int v63 = v25 >> 15;
    __int16 v28 = *a2;
    if (v18 == 2) {
      int v29 = a15;
    }
    else {
      int v29 = a16;
    }
    if (v18 == 2) {
      int v30 = a16;
    }
    else {
      int v30 = a15;
    }
    sub_1D0D3DDE4(v24, v30, 2, a6, v24 + 91);
    uint64_t result = sub_1D0D3DDE4(v24, v29, 2, a6, v24 + 109);
    BOOL v31 = a6 > 0;
    uint64_t v32 = 27;
    if (a6 <= 0) {
      uint64_t v32 = 0;
    }
    uint64_t v33 = v24 + v32 + 131;
    BOOL v35 = (v28 & 0x100) == 0 && *(unsigned char *)(*(void *)(*(void *)(a1 + 9464) + 32) + 5) != 0;
    BOOL v60 = v31;
    BOOL v61 = v35;
    unsigned int v36 = (unsigned __int16)v64;
    if (v23 < 2)
    {
      LODWORD(v39) = 1;
    }
    else
    {
      int v37 = &byte_1D0DAF020[64 * (uint64_t)v18];
      uint64_t v38 = v23;
      LODWORD(v39) = 1;
      do
      {
        uint64_t v40 = v37[--v38];
        uint64_t result = (**(uint64_t (***)(uint64_t, void, uint64_t))v24)(v24, (v36 >> v38) & 1, v33 + byte_1D0DAFCD0[v40 + 64]);
        if ((v36 >> v38))
        {
          unsigned int v41 = v62[v40];
          LOWORD(v42) = v41;
          if ((v41 & 0x8000u) != 0) {
            int v42 = -(__int16)v41;
          }
          *(&a11 + (int)v39) = v42;
          unsigned int v63 = (v41 >> 15) | (2 * v63);
          v27 += ((unsigned __int16)v42 > 1u) << v39;
          LODWORD(v39) = v39 + 1;
        }
      }
      while ((unint64_t)(v38 + 1) > 2);
    }
    if (v23 > 0
      && (uint64_t result = (**(uint64_t (***)(uint64_t, void, uint64_t))v24)(v24, v36 & 1, v33), (v36 & 1) != 0))
    {
      unsigned int v43 = *v62;
      LOWORD(v44) = v43;
      if ((v43 & 0x8000u) != 0) {
        int v44 = -(__int16)v43;
      }
      *(&a11 + (int)v39) = v44;
      unsigned int v63 = (v43 >> 15) | (2 * v63);
      v27 += ((unsigned __int16)v44 > 1u) << v39;
      LODWORD(v39) = v39 + 1;
    }
    else if (!v36)
    {
      return result;
    }
    int v45 = __clz(v36) + __clz(__rbit32(v36)) < 0x1C && v61;
    if ((int)v39 <= 0) {
      goto LABEL_51;
    }
    int v46 = (int)v39 >= 8 ? 8 : v39;
    uint64_t v47 = 1;
    unsigned int v48 = v27;
    do
    {
      uint64_t v49 = v24 + 16 * v60 + 175 + v47;
      if ((unint64_t)(v47 - 1) >= 2) {
        uint64_t v50 = v47;
      }
      else {
        uint64_t v50 = v47 + 1;
      }
      if (v48) {
        uint64_t v47 = 0;
      }
      else {
        uint64_t v47 = v50;
      }
      (**(void (***)(uint64_t, void, uint64_t))v24)(v24, v48 & 1, v49);
      v48 >>= 1;
      --v46;
    }
    while (v46);
    if (v47)
    {
LABEL_51:
      BOOL v51 = (int)v39 > 8;
    }
    else
    {
      (**(void (***)(uint64_t, BOOL, uint64_t))v24)(v24, (unsigned __int16)*(&a11 + __clz(__rbit32(v27))) > 2u, v24 + 4 * v60 + 199);
      BOOL v51 = 1;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v24 + 32))(v24, v63 >> v45, (v39 - v45));
    if (v51)
    {
      unint64_t v52 = 0;
      int v53 = 0;
      if ((int)v39 <= 1) {
        uint64_t v39 = 1;
      }
      else {
        uint64_t v39 = v39;
      }
      int v54 = 3;
      do
      {
        int v55 = (unsigned __int16)*(&a11 + v52);
        int v56 = v55 - v54;
        if (v55 >= v54)
        {
          if (v56 >= 3 << v53)
          {
            unsigned int v57 = __clz(v56 + (-2 << v53));
            uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v24 + 24))(v24, ((((-1 << (31 - v57 - v53)) - 2) << v53) + v56) | (-2 << ~(_BYTE)v57), 31 - v57 - (v53 + v57) + 35);
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24);
          }
          if (3 << v53 >= v55) {
            int v58 = v53;
          }
          else {
            int v58 = v53 + 1;
          }
          if (v58 >= 4) {
            int v53 = 4;
          }
          else {
            int v53 = v58;
          }
        }
        if (v55 <= 1) {
          int v59 = v54;
        }
        else {
          int v59 = 2;
        }
        if (v52 > 6) {
          int v54 = 1;
        }
        else {
          int v54 = v59;
        }
        ++v52;
      }
      while (v39 != v52);
    }
  }
  return result;
}

uint64_t sub_1D0D3E424(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v4 = (char *)&unk_1D0DAF020 + 64 * (uint64_t)a2 + 63;
  uint64_t v5 = 0xFFFFFFFFLL;
  uint64_t v6 = 0x3Fu;
  int v7 = 1023;
  char v8 = 1;
  do
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = v6;
    unsigned int v12 = byte_1D0DAEFE0[v6];
    unsigned int v13 = v12 >> 3;
    int v14 = 4 * (v12 & 7);
    uint64_t v15 = a1 + 2 * (v14 | (v13 << 7));
    int v16 = 4 * v13;
    do
    {
      uint64_t v17 = v4[v9];
      if (*(_WORD *)(v15 + 2 * v17))
      {
        v10 |= 1 << (v9 + 15);
        if (v8)
        {
          char v8 = 0;
          *a3 = v17 & 3 | v14;
          a3[1] = v16 + (v17 >> 5);
          uint64_t v5 = (v7 + v9);
        }
        else
        {
          char v8 = 0;
        }
      }
      --v9;
    }
    while (v9 != -16);
    *(_WORD *)(a4 + 2 * v11) = v10;
    uint64_t v6 = v11 - 1;
    v7 -= 16;
  }
  while (v11);
  return v5;
}

uint64_t sub_1D0D3E4D8(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v4 = (char *)&unk_1D0DAF020 + 64 * (uint64_t)a2 + 47;
  uint64_t v5 = 0xFFFFFFFFLL;
  uint64_t v6 = 0xFu;
  int v7 = 255;
  char v8 = 1;
  do
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = v6;
    int v12 = byte_1D0DAEFB8[v6];
    int v13 = 4 * (v12 & 3);
    uint64_t v14 = a1 + 2 * ((16 * v12) & 0xFC0 | v13);
    int v15 = v12 & 0xFC;
    do
    {
      uint64_t v16 = v4[v9];
      if (*(_WORD *)(v14 + 2 * v16))
      {
        v10 |= 1 << (v9 + 15);
        if (v8)
        {
          char v8 = 0;
          *a3 = v16 & 3 | v13;
          a3[1] = v15 + (v16 >> 4);
          uint64_t v5 = (v7 + v9);
        }
        else
        {
          char v8 = 0;
        }
      }
      --v9;
    }
    while (v9 != -16);
    *(_WORD *)(a4 + 2 * v11) = v10;
    uint64_t v6 = v11 - 1;
    v7 -= 16;
  }
  while (v11);
  return v5;
}

uint64_t sub_1D0D3E590(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v4 = (char *)&unk_1D0DAEFAC + 4 * a2;
  uint64_t v5 = (char *)&unk_1D0DAF020 + 64 * (uint64_t)a2 + 31;
  uint64_t v6 = 0xFFFFFFFFLL;
  uint64_t v7 = 3;
  int v8 = 63;
  char v9 = 1;
  do
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = v7;
    unsigned int v13 = v4[v7];
    unsigned int v14 = v13 >> 1;
    int v15 = 4 * (v13 & 1);
    uint64_t v16 = a1 + 2 * (v15 | (32 * v14));
    int v17 = 4 * v14;
    do
    {
      uint64_t v18 = v5[v10];
      if (*(_WORD *)(v16 + 2 * v18))
      {
        v11 |= 1 << (v10 + 15);
        if (v9)
        {
          char v9 = 0;
          *a3 = v18 & 3 | v15;
          a3[1] = v17 + (v18 >> 3);
          uint64_t v6 = (v8 + v10);
        }
        else
        {
          char v9 = 0;
        }
      }
      --v10;
    }
    while (v10 != -16);
    *(_WORD *)(a4 + 2 * v12) = v11;
    uint64_t v7 = v12 - 1;
    v8 -= 16;
  }
  while (v12);
  return v6;
}

uint64_t sub_1D0D3E648(uint64_t a1, int a2, _DWORD *a3, _WORD *a4)
{
  int v4 = 0;
  uint64_t v5 = 0xFFFFFFFFLL;
  uint64_t v6 = 15;
  char v7 = 1;
  do
  {
    uint64_t v8 = *((unsigned __int8 *)&unk_1D0DAF020 + 64 * (uint64_t)a2 + v6);
    if (*(_WORD *)(a1 + 2 * v8))
    {
      v4 |= 1 << v6;
      if (v7)
      {
        char v7 = 0;
        *a3 = v8 & 3;
        a3[1] = v8 >> 2;
        uint64_t v5 = v6;
      }
      else
      {
        char v7 = 0;
      }
    }
    --v6;
  }
  while (v6 != -1);
  *a4 = v4;
  return v5;
}

uint64_t sub_1D0D3E6B8(uint64_t result, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  *a4 = 0;
  *a5 = 0;
  if ((int)result >= 1)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = 0;
      do
      {
        int v7 = *(__int16 *)(a3 + v6);
        int v8 = *a4;
        if (*(_WORD *)(a3 + v6)) {
          ++v8;
        }
        *a4 = v8;
        if (v7 < 0) {
          int v7 = -v7;
        }
        *a5 += v7;
        v6 += 2;
      }
      while (2 * result != v6);
      ++v5;
      a3 += 2 * a2;
    }
    while (v5 != result);
  }
  return result;
}

uint64_t sub_1D0D3E71C(int a1)
{
  return (a1 + 8) >> 4;
}

uint64_t sub_1D0D3E72C(int a1)
{
  return (a1 + 32) >> 6;
}

uint64_t sub_1D0D3E738(int a1)
{
  return (a1 + 2) >> 2;
}

uint64_t sub_1D0D3E744(int a1)
{
  return (a1 + 128) >> 8;
}

uint64_t sub_1D0D3E750(int a1)
{
  return (a1 + 8) >> 4;
}

uint64_t sub_1D0D3E75C(int a1)
{
  return (a1 + 512) >> 10;
}

uint64_t sub_1D0D3E768(int a1)
{
  return (a1 + 32) >> 6;
}

uint64_t sub_1D0D3E774(uint64_t a1, uint64_t a2, int a3)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  if (a3 < 4) {
    return 0xFFFFFFFFLL;
  }
  LODWORD(v4) = 1 << a3;
  if (a3 == 31)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    int v8 = 0;
    LODWORD(v7) = 0;
    LODWORD(v6) = 0;
    LODWORD(v5) = 0;
    if ((int)v4 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v4;
    }
    uint64_t v10 = a2;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        int v12 = *(unsigned __int8 *)(v10 + i);
        uint64_t v5 = (v5 + i * v12);
        uint64_t v6 = (v6 + v8 * v12);
        uint64_t v7 = (v7 + v12);
      }
      v10 += a1;
      ++v8;
    }
    while (v8 != v9);
  }
  uint64_t v13 = 0;
  unsigned int v14 = (int *)((char *)&unk_1D0DAEE9C + 36 * (a3 - 2) + 8);
  do
  {
    v21[v13++] = v5 * *(v14 - 2) + v6 * *(v14 - 1) + v7 * *v14;
    v14 += 3;
  }
  while (v13 != 3);
  if (a3 == 31)
  {
    unsigned int v15 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    unsigned int v15 = 0;
    unint64_t v17 = v21[2];
    if ((int)v4 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v4;
    }
    do
    {
      uint64_t v18 = 0;
      unint64_t v19 = v17;
      do
      {
        unsigned int v20 = *(unsigned __int8 *)(a2 + v18) - (v19 >> 24);
        v15 += v20 * v20;
        ++v18;
        v19 += v21[0];
      }
      while (v4 != v18);
      a2 += a1;
      ++v16;
      v17 += v21[1];
    }
    while (v16 != v4);
  }
  return v15 >> (2 * a3);
}

uint64_t sub_1D0D3E8EC(uint64_t a1, uint64_t a2, int a3)
{
  v22[3] = *MEMORY[0x1E4F143B8];
  if (a3 < 4) {
    return 0xFFFFFFFFLL;
  }
  LODWORD(v4) = 1 << a3;
  uint64_t v5 = 2 * a1;
  if (a3 == 31)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    int v9 = 0;
    LODWORD(v8) = 0;
    LODWORD(v7) = 0;
    LODWORD(v6) = 0;
    if ((int)v4 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v4;
    }
    uint64_t v11 = a2;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        int v13 = *(unsigned __int16 *)(v11 + 2 * i);
        uint64_t v6 = (v6 + i * v13);
        uint64_t v7 = (v7 + v9 * v13);
        uint64_t v8 = (v8 + v13);
      }
      ++v9;
      v11 += v5;
    }
    while (v9 != v10);
  }
  uint64_t v14 = 0;
  unsigned int v15 = (int *)((char *)&unk_1D0DAEE9C + 36 * (a3 - 2) + 8);
  do
  {
    v22[v14++] = v6 * *(v15 - 2) + v7 * *(v15 - 1) + v8 * *v15;
    v15 += 3;
  }
  while (v14 != 3);
  if (a3 == 31)
  {
    unsigned int v16 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    unsigned int v16 = 0;
    unint64_t v18 = v22[2];
    if ((int)v4 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v4;
    }
    do
    {
      uint64_t v19 = 0;
      unint64_t v20 = v18;
      do
      {
        unsigned int v21 = *(unsigned __int16 *)(a2 + v19) - (v20 >> 24);
        v16 += v21 * v21;
        v19 += 2;
        v20 += v22[0];
      }
      while (2 * v4 != v19);
      ++v17;
      a2 += v5;
      v18 += v22[1];
    }
    while (v17 != v4);
  }
  return v16 >> (2 * a3);
}

uint64_t sub_1D0D3EA6C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  uint64_t v10 = *(void *)(a1 + 9488);
  int v11 = a2 - *(_DWORD *)(v10 + 832);
  int v12 = a3 - *(_DWORD *)(v10 + 836);
  uint64_t v13 = (uint64_t)v12 >> 3;
  if (((*(unsigned __int16 *)(*(void *)(v10 + 880) + 2 * (*(void *)(v10 + 856) * v13 + (v11 >> 3))) >> 2) & 3) <= (int)a5)
  {
    int v41 = *(_DWORD *)(a1 + 9508);
    if (v41)
    {
      uint64_t result = *(unsigned __int8 *)(*(void *)(v10 + 920)
                                  + (*(uint64_t *)(v10 + 840) >> 2) * ((uint64_t)v12 >> 2)
                                  + (v11 >> 2)) != 0;
      if ((v41 & 2) == 0) {
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((v41 & 2) == 0) {
        return result;
      }
    }
    if (a6 == 3 || *(unsigned __int8 *)(*(void *)(a1 + 9472) + 2116) < a4)
    {
      uint64_t v42 = ((uint64_t)v11 >> 3) + (*(uint64_t *)(v10 + 848) >> 2) * v13;
      int v43 = *(unsigned __int8 *)(*(void *)(v10 + 928) + v42);
      int v44 = *(unsigned __int8 *)(*(void *)(v10 + 936) + v42);
      unsigned int v45 = ((a2 & 0x3F) >> (*(_DWORD *)a1 - a5))
          + byte_1D0DA76C0[a5]
          + ((a3 & 0x3F) >> (*(_DWORD *)a1 - a5) << a5);
      uint64_t v46 = a1 + 4 * (v45 >> 5);
      *(_DWORD *)(v46 + 6264) |= (v43 != 0) << (((a2 & 0x3F) >> (*(_DWORD *)a1 - a5))
                                              + byte_1D0DA76C0[a5]
                                              + ((a3 & 0x3F) >> (*(_DWORD *)a1 - a5) << a5));
      *(_DWORD *)(v46 + 6308) |= (v44 != 0) << v45;
      if (v43 | v44) {
        return 1;
      }
      else {
        return result;
      }
    }
  }
  else
  {
    uint64_t v14 = (a4 - 1);
    int v15 = 1 << (a4 - 1);
    uint64_t v16 = (v15 + a2);
    uint64_t v17 = (v15 + a3);
    uint64_t v18 = a5 + 1;
    int v19 = sub_1D0D3EA6C(a1, a2, a3, v14, v18, 0);
    int v20 = v19 | sub_1D0D3EA6C(a1, v16, a3, v14, a5 + 1, 1);
    int v21 = sub_1D0D3EA6C(a1, a2, v17, v14, a5 + 1, 2);
    uint64_t result = v20 | v21 | sub_1D0D3EA6C(a1, v16, v17, v14, a5 + 1, 3);
    if ((*(unsigned char *)(a1 + 9508) & 2) != 0)
    {
      char v23 = *(_DWORD *)a1 - v18;
      int v24 = byte_1D0DA76C0[v18];
      int v25 = (a3 & 0x3F) >> v23 << v18;
      int v26 = ((a2 & 0x3F) >> v23) + v24;
      uint64_t v27 = (v26 + v25) >> 5;
      int v28 = 1;
      int v29 = 1 << (((a2 & 0x3F) >> v23) + v24 + v25);
      if ((v29 & *(_DWORD *)(a1 + 4 * v27 + 6264)) == 0)
      {
        int v30 = ((v16 & 0x3F) >> v23) + v24;
        if (((*(_DWORD *)(a1 + 4 * ((v30 + v25) >> 5) + 6264) >> (((v16 & 0x3F) >> v23)
                                                                                 + v24
                                                                                 + v25)) & 1) != 0
          || (int v31 = (v17 & 0x3F) >> v23 << v18,
              ((*(_DWORD *)(a1 + 4 * ((v26 + v31) >> 5) + 6264) >> (v26 + v31)) & 1) != 0))
        {
          int v28 = 1;
        }
        else
        {
          int v28 = (*(_DWORD *)(a1 + 4 * ((v30 + v31) >> 5) + 6264) >> (v30 + v31)) & 1;
        }
      }
      char v32 = *(_DWORD *)a1 - a5;
      int v33 = (a2 & 0x3F) >> v32;
      int v34 = (a3 & 0x3F) >> v32 << a5;
      int v35 = v33 + byte_1D0DA76C0[a5];
      uint64_t v36 = a1 + 4 * ((v34 + v35) >> 5);
      *(_DWORD *)(v36 + 6264) |= v28 << (v34 + v33 + byte_1D0DA76C0[a5]);
      if ((v29 & *(_DWORD *)(a1 + 4 * v27 + 6308)) != 0
        || (int v37 = ((v16 & 0x3F) >> v23) + v24,
            ((*(_DWORD *)(a1 + 4 * ((v37 + v25) >> 5) + 6308) >> (v37 + v25)) & 1) != 0)
        || (int v38 = (v17 & 0x3F) >> v23 << v18,
            ((*(_DWORD *)(a1 + 4 * ((v26 + v38) >> 5) + 6308) >> (v26 + v38)) & 1) != 0))
      {
        int v39 = 1;
      }
      else
      {
        int v39 = (*(_DWORD *)(a1 + 4 * ((v37 + v38) >> 5) + 6308) >> (v37 + v38)) & 1;
      }
      uint64_t v40 = a1 + 4 * ((v35 + v34) >> 5);
      *(_DWORD *)(v40 + 6308) |= v39 << (v35 + v34);
    }
  }
  return result;
}

uint64_t sub_1D0D3EE0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v130 = a4;
  uint64_t v136 = (int)a5;
  char v121 = a5 - 1;
  int v11 = -(int)a5;
  uint64_t v134 = a5 << 32;
  uint64_t v128 = (a4 - 1);
  uint64_t v116 = a1 + 6264;
  uint64_t v115 = a1 + 6308;
  int v133 = a5;
  uint64_t v114 = 84 - a4;
  int v12 = &byte_1D0DA76C0[(int)a5];
  int v132 = -(int)a5;
  unsigned int v131 = v12;
  while (1)
  {
    int64_t v13 = v136 + v10;
    uint64_t v14 = v130 + v9;
    uint64_t v15 = *(void *)(a1 + 9488);
    uint64_t v16 = *(void (****)(void))(v15 + 944);
    int v17 = *(_DWORD *)(a1 + 4);
    if (v17 != 3)
    {
      BOOL v19 = v17 == 1 && v136 == v9 && *(_DWORD *)(a1 + 8) != 0;
LABEL_15:
      uint64_t v20 = 1;
      goto LABEL_16;
    }
    BOOL v19 = 0;
    if (v136 != v9) {
      goto LABEL_15;
    }
    uint64_t v20 = 1;
    if (*(_DWORD *)(a1 + 8))
    {
      uint64_t v21 = *(void *)(a1 + 9472);
      if (!*(unsigned char *)(v21 + 272))
      {
        BOOL v22 = v14 > *(unsigned __int8 *)(v21 + 2114);
        goto LABEL_23;
      }
      BOOL v19 = 0;
    }
LABEL_16:
    BOOL v22 = 1;
    if (!v19)
    {
      uint64_t v23 = *(void *)(a1 + 9472);
      if (v14 <= *(unsigned __int8 *)(v23 + 2115))
      {
        if (v14 <= *(unsigned __int8 *)(v23 + 2114) || v13 >= *(int *)(a1 + 12))
        {
          BOOL v22 = 0;
        }
        else
        {
          int64_t v24 = ((unint64_t)*(unsigned __int16 *)(*(void *)(v15 + 880)
                                                       + 2
                                                       * (*(void *)(v15 + 856)
                                                        * ((uint64_t)((int)a3 - *(_DWORD *)(v15 + 836)) >> 3)
                                                        + (((int)a2 - *(_DWORD *)(v15 + 832)) >> 3))) >> 2) & 3;
          BOOL v22 = v13 < v24;
          if (*(unsigned char *)(a1 + 9508))
          {
            int v25 = a6;
            ((void (*)(void (***)(void), BOOL, char *))**v16)(v16, v13 < v24, (char *)v16 + v114 + v10);
            a6 = v25;
            int v12 = v131;
            uint64_t v20 = 1;
            LOBYTE(v11) = v132;
          }
        }
      }
    }
LABEL_23:
    int v26 = a4 + v9;
    if ((*(unsigned char *)(a1 + 9508) & 2) == 0) {
      goto LABEL_42;
    }
    if (v14 <= 2 && v136 != v9)
    {
      char v27 = v11 + v9 + *(_DWORD *)a1;
      int v28 = v12[v10 - 1];
      int v29 = ((a2 & 0x3F) >> (v27 + 1))
          + v28
          + ((a3 & 0x3F) >> (v27 + 1) << (v121 + v10));
      int v30 = v12[v10];
      int v31 = ((a3 & 0x3F) >> v27 << (v133 + v10)) + ((a2 & 0x3F) >> v27) + v30;
      *(_DWORD *)(v116 + 4 * (v31 >> 5)) |= ((*(_DWORD *)(v116 + 4 * (v29 >> 5)) >> v29) & 1) << v31;
      LOBYTE(v31) = v11 + v9 + *(_DWORD *)a1;
      int v32 = ((a2 & 0x3F) >> (v31 + 1))
          + v28
          + ((a3 & 0x3F) >> (v31 + 1) << (v121 + v10));
      int v33 = ((a2 & 0x3F) >> v31) + v30 + ((a3 & 0x3F) >> v31 << (v133 + v10));
      *(_DWORD *)(v115 + 4 * (v33 >> 5)) |= ((*(_DWORD *)(v115 + 4 * (v32 >> 5)) >> v32) & 1) << v33;
      goto LABEL_42;
    }
    int v34 = a2 & ~(1 << v26);
    int v35 = a3 & ~(1 << v26);
    int v36 = *(_DWORD *)a1;
    uint64_t v37 = v134 >> 32;
    unsigned int v123 = a3;
    unsigned int v125 = a2;
    int v126 = a6;
    if (v136 == v9
      || (int v38 = v12[v10 - 1],
          int v39 = ((v34 & 0x3F) >> (v11 + v9 + v36 + 1))
              + v38
              + ((v35 & 0x3F) >> (v11 + v9 + v36 + 1) << (v121 + v10)),
          int v40 = 1 << (((v34 & 0x3F) >> (v11 + v9 + v36 + 1))
                    + v38
                    + ((v35 & 0x3F) >> (v11 + v9 + v36 + 1) << (v121 + v10))),
          (v40 & *(_DWORD *)(a1 + 4 * (v39 >> 5) + 6264)) != 0))
    {
      int v118 = a2 & ~(1 << v26);
      int v119 = a3 & ~(1 << v26);
      unsigned int v117 = a2 & 0x3F;
      unsigned int v41 = a3 & 0x3F;
      int v42 = v12[v10];
      if (v14 <= 2) {
        uint64_t v43 = 0;
      }
      else {
        uint64_t v43 = v134 >> 32;
      }
      int v44 = **v16;
      unsigned int v45 = v16;
      char v46 = v11;
      uint64_t v120 = v45;
      v44();
      int v36 = *(_DWORD *)a1;
      if (v136 == v9)
      {
        char v47 = 0;
        uint64_t v16 = v120;
        unsigned int v48 = v117;
        goto LABEL_41;
      }
      LODWORD(v13) = v136 + v10;
      int v49 = ((v118 & 0x3F) >> (v46 + v9 + v36 + 1))
          + v12[v10 - 1]
          + ((v119 & 0x3F) >> (v46 + v9 + v36 + 1) << (v121 + v10));
      uint64_t v50 = (uint64_t)v49 >> 5;
      uint64_t v20 = 1;
      int v40 = 1 << v49;
      a3 = v123;
      a2 = v125;
      a6 = v126;
      int v26 = a4 + v9;
      uint64_t v16 = v120;
      uint64_t v37 = v134 >> 32;
    }
    else
    {
      uint64_t v50 = (uint64_t)v39 >> 5;
    }
    if ((v40 & *(_DWORD *)(a1 + 4 * v50 + 6308)) == 0) {
      goto LABEL_42;
    }
    int v42 = v12[v10];
    unsigned int v48 = a2 & 0x3F;
    char v47 = v133 + v10;
    unsigned int v41 = a3 & 0x3F;
    uint64_t v43 = v14 <= 2 ? 0 : v37;
LABEL_41:
    int v51 = (v48 >> (v36 - v47)) + v42 + (v41 >> (v36 - v47) << v47);
    ((void (*)(void (***)(void), void, uint64_t))**v16)(v16, (*(_DWORD *)(a1 + 4 * (v51 >> 5) + 6308) >> v51) & 1, (uint64_t)v16 + v43 + 84);
    a3 = v123;
    a2 = v125;
    LODWORD(v13) = v136 + v10;
    int v26 = a4 + v9;
    a6 = v126;
    uint64_t v20 = 1;
LABEL_42:
    if (!v22) {
      break;
    }
    int v52 = 1 << (v128 + v9);
    uint64_t v53 = (v52 + a2);
    uint64_t v54 = (v52 + a3);
    uint64_t v55 = (v133 + v10 + 1);
    sub_1D0D3EE0C(a1, a2, a3, v128 + v9, v55, 0);
    sub_1D0D3EE0C(a1, v53, a3, v128 + v9, v55, 1);
    sub_1D0D3EE0C(a1, a2, v54, v128 + v9, v55, 2);
    int v12 = v131;
    LOBYTE(v11) = v132;
    ++v10;
    --v9;
    v134 += 0x100000000;
    a6 = 3;
    a2 = v53;
    a3 = v54;
  }
  uint64_t v56 = *(void *)(a1 + 9488);
  int v57 = a2 - *(_DWORD *)(v56 + 832);
  int v58 = a3 - *(_DWORD *)(v56 + 836);
  int v59 = *(unsigned __int8 *)(v56 + 828);
  int v60 = *(_DWORD *)(a1 + 9508);
  if ((v60 & 2) != 0)
  {
    int v62 = ((a2 & 0x3F) >> (*(_DWORD *)a1 - v13))
        + byte_1D0DA76C0[(int)v13]
        + ((a3 & 0x3F) >> (*(_DWORD *)a1 - v13) << v13);
    BOOL v61 = 1;
    int v63 = 1 << (((a2 & 0x3F) >> (*(_DWORD *)a1 - v13))
              + byte_1D0DA76C0[(int)v13]
              + ((a3 & 0x3F) >> (*(_DWORD *)a1 - v13) << v13));
    if ((v63 & *(_DWORD *)(a1 + 4 * (v62 >> 5) + 6264)) == 0) {
      BOOL v61 = (*(_DWORD *)(a1 + 4 * ((uint64_t)v62 >> 5) + 6308) & v63) != 0;
    }
  }
  else
  {
    BOOL v61 = 0;
  }
  int v64 = *(unsigned __int8 *)(*(void *)(v56 + 920) + (*(uint64_t *)(v56 + 840) >> 2) * ((uint64_t)v58 >> 2) + (v57 >> 2));
  if (v60)
  {
    BOOL v65 = v13 || *(_DWORD *)(a1 + 4) == 1;
    int v66 = v65 || v61;
    if (v66 == 1)
    {
      uint64_t v67 = (void (***)(void))((char *)v16 + 1);
      unsigned int v68 = *v16;
      if (v13) {
        uint64_t v67 = v16;
      }
      uint64_t v69 = v16;
      int v70 = v26;
      int v71 = a6;
      ((void (*)(void (***)(void), BOOL, uint64_t))*v68)(v69, v64 != 0, (uint64_t)v67 + 82);
      a6 = v71;
      int v26 = v70;
      uint64_t v56 = *(void *)(a1 + 9488);
      int v59 = *(unsigned __int8 *)(v56 + 828);
      int v57 = a2 - *(_DWORD *)(v56 + 832);
      int v58 = a3 - *(_DWORD *)(v56 + 836);
    }
  }
  BOOL v72 = 0;
  int v127 = a6;
  int v73 = v26;
  int v74 = v13;
  int v75 = a3;
  if (v57 < v59 && v58 < v59) {
    BOOL v72 = (__int16 *)(*(void *)(v56 + 880) + 2 * (*(void *)(v56 + 856) * ((uint64_t)v58 >> 3) + (v57 >> 3)));
  }
  uint64_t v135 = (unsigned __int8 *)(*(void *)(v56 + 888) + 16 * (*(void *)(v56 + 864) * ((uint64_t)v58 >> 2) + (v57 >> 2)));
  uint64_t v76 = *v135;
  uint64_t v77 = *(void *)(v56 + 944);
  int v137 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v77 + 80))(v77, v20);
  uint64_t v78 = 0;
  int v79 = v73;
  if (v73 <= 3 && *(_DWORD *)(a1 + 4) == 1) {
    uint64_t v78 = byte_1D0DA7278[v76];
  }
  int v80 = *(_DWORD *)(a1 + 9508);
  if ((v80 & 2) == 0)
  {
    BOOL v81 = 0;
    int v82 = v75;
    goto LABEL_69;
  }
  int v82 = v75;
  int v83 = ((a2 & 0x3F) >> (*(_DWORD *)a1 - v74))
      + byte_1D0DA76C0[v74]
      + ((v75 & 0x3F) >> (*(_DWORD *)a1 - v74) << v74);
  int v84 = 1 << (((a2 & 0x3F) >> (*(_DWORD *)a1 - v74))
            + byte_1D0DA76C0[v74]
            + ((v75 & 0x3F) >> (*(_DWORD *)a1 - v74) << v74));
  if ((v84 & *(_DWORD *)(a1 + 4 * (v83 >> 5) + 6264)) == 0)
  {
    BOOL v81 = (*(_DWORD *)(a1 + 4 * ((uint64_t)v83 >> 5) + 6308) & v84) != 0;
LABEL_69:
    if (!v64 && !v81) {
      goto LABEL_114;
    }
  }
  if (v80)
  {
    if (!*(unsigned char *)(a1 + 16)) {
      goto LABEL_88;
    }
    int v122 = v73;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v86 = *(void *)(a1 + 9488);
    int v124 = v82;
    int v87 = sub_1D0D130D0(v86, a2, v82, *(_DWORD *)(a1 + 9520), *(unsigned __int8 **)(v86 + 872), *(_DWORD *)(a1 + 20), *(unsigned __int8 *)(v86 + 824));
    unsigned int v88 = *(unsigned __int8 *)(*(void *)(a1 + 9472) + 2097);
    int v89 = (int)(v88 + 52 - v87 + (*v72 >> 9) + (v88 >> 1) + 26) % (int)(v88 + 52) - (v88 >> 1);
    uint64_t v90 = *(void *)(v86 + 856) * ((uint64_t)(int)(HIDWORD(*(void *)(a1 + 9512)) - *(_DWORD *)(v86 + 836)) >> 3)
        + ((int)(*(void *)(a1 + 9512) - *(_DWORD *)(v86 + 832)) >> 3);
    *(_WORD *)(*(void *)(v86 + 880) + 2 * v90) = *v72 & 0xFE00 | *(_WORD *)(*(void *)(v86 + 880) + 2 * v90) & 0x1FF;
    if (v89 - 26 < 0) {
      unsigned int v91 = 26 - v89;
    }
    else {
      unsigned int v91 = v89 - 26;
    }
    if (v91 >= 5) {
      uint64_t v92 = 5;
    }
    else {
      uint64_t v92 = v91;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v77 + 72))(v77, v92, v77 + 57, 1, 5);
    if (v91 >= 5)
    {
      (*(void (**)(uint64_t, void, void))(*(void *)v77 + 56))(v77, v91 - 5, 0);
      goto LABEL_85;
    }
    if (v89 != 26) {
LABEL_85:
    }
      (*(void (**)(uint64_t, BOOL))(*(void *)v77 + 8))(v77, v89 < 27);
    *(_DWORD *)(a1 + 20) = *v72 >> 9;
    int v80 = *(_DWORD *)(a1 + 9508);
    int v82 = v124;
    int v79 = v122;
    if (v80)
    {
LABEL_88:
      if (v64 && !*(unsigned char *)(*(void *)(a1 + 9488) + 827))
      {
        int v97 = v79;
        sub_1D0D3FA54(a1, a2, v82, v79, v78, 0);
        int v79 = v97;
        if ((*(_DWORD *)(a1 + 9508) & 2) == 0) {
          goto LABEL_114;
        }
LABEL_90:
        uint64_t v93 = *(void *)(a1 + 9488);
        if (*(unsigned char *)(v93 + 827)) {
          goto LABEL_114;
        }
        if (*(unsigned __int8 *)(*(void *)(a1 + 9472) + 2116) >= v79)
        {
          if (v127 != 3) {
            goto LABEL_115;
          }
          int v96 = v74;
          int v94 = a2 - 2 * v79;
          int v95 = v82 - 2 * v79;
        }
        else
        {
          --v79;
          int v94 = a2;
          int v95 = v82;
          int v96 = v74;
        }
        if (*(_DWORD *)(a1 + 4) != 1) {
          goto LABEL_108;
        }
        unsigned int v98 = v135[1];
        if (v98 == 35) {
          unsigned int v98 = *(unsigned __int8 *)(*(void *)(v93 + 888)
        }
                                   + 16
                                   * (*(void *)(v93 + 864)
                                    * ((uint64_t)(int)(HIDWORD(*(void *)(a1 + 9512)) - *(_DWORD *)(v93 + 836)) >> 2)
                                    + ((int)(*(void *)(a1 + 9512) - *(_DWORD *)(v93 + 832)) >> 2)));
        if ((v79 - 1) <= 1)
        {
          char v99 = v82;
          int v100 = 26 - v98;
          if (v98 >= 0x1A) {
            int v100 = v98 - 26;
          }
          BOOL v101 = v100 < 5;
          int v102 = 10 - v98;
          BOOL v103 = v98 >= 0xA;
          int v104 = v98 - 10;
          if (!v103) {
            int v104 = v102;
          }
          if (v104 >= 5) {
            uint64_t v105 = v101;
          }
          else {
            uint64_t v105 = 2;
          }
        }
        else
        {
LABEL_108:
          char v99 = v82;
          uint64_t v105 = 0;
        }
        unsigned int v106 = a2 & 0x3F;
        unsigned int v107 = v99 & 0x3F;
        int v108 = byte_1D0DA76C0[v96];
        int v109 = (v106 >> (*(_DWORD *)a1 - v96)) + v108 + (v107 >> (*(_DWORD *)a1 - v96) << v96);
        int v110 = 1 << ((v106 >> (*(_DWORD *)a1 - v96)) + v108 + (v107 >> (*(_DWORD *)a1 - v96) << v96));
        if ((v110 & *(_DWORD *)(a1 + 4 * (v109 >> 5) + 6264)) != 0)
        {
          int v111 = v79;
          sub_1D0D3FA54(a1, v94, v95, v79, v105, 1);
          int v79 = v111;
          uint64_t v112 = (uint64_t)(int)((v106 >> (*(_DWORD *)a1 - v96)) + v108 + (v107 >> (*(_DWORD *)a1 - v96) << v96)) >> 5;
          int v110 = 1 << ((v106 >> (*(_DWORD *)a1 - v96)) + v108 + (v107 >> (*(_DWORD *)a1 - v96) << v96));
        }
        else
        {
          uint64_t v112 = (uint64_t)v109 >> 5;
        }
        if ((*(_DWORD *)(a1 + 4 * v112 + 6308) & v110) != 0) {
          sub_1D0D3FA54(a1, v94, v95, v79, v105, 2);
        }
        goto LABEL_114;
      }
    }
  }
  if ((v80 & 2) != 0) {
    goto LABEL_90;
  }
LABEL_114:
  uint64_t v93 = *(void *)(a1 + 9488);
LABEL_115:
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v93 + 944) + 80))(*(void *)(v93 + 944));
  *(_DWORD *)(*(void *)(a1 + 9488) + 236) += result - v137;
  return result;
}

uint64_t sub_1D0D3FA54(uint64_t a1, int a2, int a3, int a4, uint64_t a5, signed int a6)
{
  int v8 = 1 << a4;
  uint64_t v9 = *(void *)(a1 + 9488);
  uint64_t v10 = *(void *)(v9 + 8 * (a6 > 0) + 840);
  if (((a3 | a2) & 0x80000000) == 0
    && ((int v11 = a2 - *(_DWORD *)(v9 + 832),
         int v12 = a3 - *(_DWORD *)(v9 + 836),
         int v13 = *(unsigned __int8 *)(v9 + 828),
         v11 < v13)
      ? (BOOL v14 = v12 < v13)
      : (BOOL v14 = 0),
        v14))
  {
    uint64_t v15 = (char *)(*(void *)(v9 + 8 * a6 + 896) + 2 * (v10 * (v12 >> (a6 > 0)) + (v11 >> (a6 > 0))));
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (v10 != v8)
  {
    if (a4 != 31)
    {
      uint64_t v16 = 0;
      if (v8 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v8;
      }
      uint64_t v18 = 2 * v10;
      do
      {
        memcpy((void *)(a1 + 64 + 2 * (int)(v16++ << a4)), v15, 2 << a4);
        v15 += v18;
      }
      while (v17 != v16);
      uint64_t v9 = *(void *)(a1 + 9488);
    }
    uint64_t v15 = (char *)(a1 + 64);
  }
  uint64_t v19 = *(void *)(v9 + 880);
  return sub_1D0D3FB98(a1, v19, (uint64_t)v15, a4);
}

uint64_t sub_1D0D3FB98(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a1
     + 32 * (*(void *)(*(void *)(a1 + 9488) + 944) == *(void *)(*(void *)(a1 + 9488) + 960))
     + 16 * (a4 > 2);
  uint64_t v5 = *(uint64_t (**)(void *))(v4 + 9128);
  uint64_t v6 = *(void *)(v4 + 9136);
  uint64_t v7 = (void *)(a1 + (v6 >> 1));
  if (v6) {
    return (*(uint64_t (**)(void))(*v7 + v5))();
  }
  else {
    return v5(v7);
  }
}

uint64_t sub_1D0D3FBE4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, unsigned char *a6, int a7)
{
  if (a7)
  {
    int v12 = *(_DWORD *)(a1 + 8);
    BOOL v13 = v12 != 0;
    if (v12) {
      int v14 = -1;
    }
    else {
      int v14 = 0;
    }
    int v15 = v14 - a4 + *(unsigned __int8 *)(*(void *)(a1 + 9472) + 2113);
    int v16 = 1;
  }
  else
  {
    BOOL v13 = 0;
    *(void *)(a1 + 6344) = 0;
    *(_OWORD *)(a1 + 6312) = 0u;
    *(_OWORD *)(a1 + 6328) = 0u;
    *(_OWORD *)(a1 + 6280) = 0u;
    *(_OWORD *)(a1 + 6296) = 0u;
    *(_OWORD *)(a1 + 6264) = 0u;
    int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9472) + 2113) - a4;
    int v16 = 2 * (*(unsigned char *)(a1 + 9504) == 0);
  }
  *(_DWORD *)(a1 + 9508) = v16;
  if (!*(unsigned char *)(*(void *)(a1 + 9488) + 825)) {
    sub_1D0D3EA6C(a1, a2, a3, v15, v13, 0);
  }
  *(_DWORD *)(a1 + 20) = *a5;
  *(unsigned char *)(a1 + 16) = *a6;
  uint64_t result = sub_1D0D3EE0C(a1, a2, a3, v15, v13, 0);
  *a5 = *(_DWORD *)(a1 + 20);
  *a6 = *(unsigned char *)(a1 + 16);
  return result;
}

uint64_t sub_1D0D3FD00(uint64_t result, char a2, int a3, uint64_t a4, unsigned char *a5)
{
  unint64_t v5 = *(void *)(result + 16);
  unint64_t v6 = a3 - 1;
  if (v5 < *(void *)(a4 + 32 * v6 + 16))
  {
    if (v5 >= *(void *)(a4 + 16))
    {
      unsigned int v10 = a3 - 2;
      if (a3 >= 2)
      {
        while (1)
        {
          unsigned int v11 = v10;
          if (v5 >= *(void *)(a4 + 32 * v10 + 16)) {
            break;
          }
          BOOL v8 = (int)v10-- <= 0;
          if (v8) {
            return result;
          }
        }
        uint64_t v12 = v10 + 1;
        if ((int)v6 > (int)(v11 + 1))
        {
          do
          {
            uint64_t v13 = (v6 - 1);
            uint64_t v14 = a4 + 32 * v13;
            uint64_t v15 = a4 + 32 * v6;
            *(void *)uint64_t v15 = *(void *)v14;
            *(_DWORD *)(v15 + 24) = *(_DWORD *)(v14 + 24);
            *(void *)(v15 + 16) = *(void *)(v14 + 16);
            a5[v6] = a5[v13];
            LODWORD(v6) = v6 - 1;
          }
          while ((int)v13 > (int)v12);
          unint64_t v5 = *(void *)(result + 16);
        }
        uint64_t v16 = a4 + 32 * v12;
        *(void *)uint64_t v16 = *(void *)result;
        *(_DWORD *)(v16 + 24) = *(_DWORD *)(result + 24);
        *(void *)(v16 + 16) = v5;
        a5[v12] = a2;
      }
    }
    else
    {
      if (a3 >= 2)
      {
        unint64_t v6 = v6;
        uint64_t v7 = (_DWORD *)(a4 + 32 * v6 + 24);
        do
        {
          BOOL v8 = v6 > 1;
          uint64_t v9 = a4 + 32 * (v6 - 1);
          *((void *)v7 - 3) = *(void *)v9;
          *uint64_t v7 = *(_DWORD *)(v9 + 24);
          *((void *)v7 - 1) = *(void *)(v9 + 16);
          v7 -= 8;
          a5[v6] = a5[(v6 - 1)];
          --v6;
        }
        while (v8);
        unint64_t v5 = *(void *)(result + 16);
      }
      *(void *)a4 = *(void *)result;
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(result + 24);
      *(void *)(a4 + 16) = v5;
      *a5 = a2;
    }
  }
  return result;
}

void *sub_1D0D3FE30(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  int v10 = a6;
  int v11 = a5;
  uint64_t v12 = a4;
  signed int v13 = a3;
  uint64_t v16 = *(unsigned __int8 **)(a1 + 9472);
  int v17 = v16[273];
  if (v16[273]) {
    BOOL v18 = a8 == 3;
  }
  else {
    BOOL v18 = 1;
  }
  if (*(unsigned char *)(*(void *)(a1 + 9480) + 205)) {
    int v19 = v18;
  }
  else {
    int v19 = 1;
  }
  int v20 = v16[2114];
  int v21 = v16[2115];
  int v22 = *(_DWORD *)a1 - (a8 == 3) - v17;
  if (v22 >= v21) {
    int v23 = v21;
  }
  else {
    int v23 = *(_DWORD *)a1 - (a8 == 3) - v17;
  }
  if (v22 <= v20) {
    int v24 = v20;
  }
  else {
    int v24 = v23;
  }
  BOOL v25 = v24 >= (int)a5 || v21 >= (int)a5;
  int v26 = a2 - *((_DWORD *)a4 + 1);
  int v27 = a3 - *((_DWORD *)a4 + 2);
  int v92 = *(_DWORD *)(a1 + 9512);
  int v93 = *(_DWORD *)(a1 + 9516);
  uint64_t v28 = a10;
  uint64_t v29 = a9;
  unsigned int v108 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  unint64_t v30 = -1;
  uint64_t v107 = -1;
  __int16 v109 = 0;
  int v31 = (__int16 *)(*((void *)a4 + 11) + 2 * (((uint64_t)v26 >> 3) + ((unint64_t)*a4 >> 3) * (v27 >> 3)));
  int v32 = (unsigned __int8 *)*((void *)a4 + 18);
  unint64_t v33 = **((unsigned __int8 **)a4 + 17);
  uint64_t v34 = *((void *)v32 + 1);
  unint64_t v90 = *v32;
  unsigned __int8 v104 = 0;
  unint64_t v94 = v33;
  uint64_t v91 = v34;
  if (v21 < (int)a5)
  {
    unsigned int v88 = 0;
    uint64_t v86 = 0;
    int __c = 0;
    if (v25) {
      goto LABEL_50;
    }
  }
  else
  {
    int v99 = v19;
    signed int v101 = a3;
    BOOL v35 = 0;
    uint64_t v36 = *(void *)(a1 + 9464);
    if (a7 != 1 && !*(unsigned char *)(v36 + 2816))
    {
      int v37 = 10 - a7;
      if (a7 >= 10) {
        int v37 = a7 - 10;
      }
      int v38 = 26 - a7;
      if (a7 >= 26) {
        int v38 = a7 - 26;
      }
      if (v37 >= v38) {
        int v37 = v38;
      }
      BOOL v35 = v37 > byte_1D0DA768A[(int)a5];
    }
    BOOL v85 = v25;
    unsigned __int8 v97 = v18;
    if (a6 >= 1)
    {
      uint64_t v39 = *(void *)(a1 + 9488);
      uint64_t v40 = *(unsigned int *)(a1 + 9520);
      unsigned int v41 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, void, void, uint64_t, void))(v39 + 29768);
      uint64_t v42 = *(void *)(v39 + 29776);
      uint64_t v43 = (void *)(v39 + (v42 >> 1));
      if (v42) {
        unsigned int v41 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, void, void, uint64_t, void))(*v43 + v41);
      }
      v41(v43, a2, a3, v40, v12, a8, a9, a5, *((void *)v12 + 19));
      uint64_t v36 = *(void *)(a1 + 9464);
      if (v35)
      {
        (*(void (**)(void, void))(v36 + 8 * v11 + 2288))(*((void *)v12 + 19), *((void *)v12 + 20));
        uint64_t v36 = *(void *)(a1 + 9464);
      }
    }
    int v44 = (unsigned __int8 *)*((void *)v12 + 18);
    uint64_t v45 = **((unsigned __int8 **)v12 + 17);
    uint64_t v46 = **((void **)v44 + 7)
        + (*((void *)v44 + 8) + (int)a2 - (uint64_t)*(int *)(a1 + 9512) + *v44 * (v101 - (uint64_t)*(int *)(a1 + 9516)))
        * *(int *)(*((void *)v44 + 7) + 16);
    uint64_t v47 = v36 + 2280;
    unsigned int v48 = &v12[8 * v35];
    signed int v13 = v101;
    sub_1D0CA6124(v47, a7, v11, *((void *)v48 + 19), v45, v46);
    uint64_t v49 = **((unsigned __int8 **)v12 + 17);
    uint64_t v50 = *(void *)(*((void *)v12 + 18) + 32)
        + 2
        * ((int)a2
         - (uint64_t)*(int *)(a1 + 9512)
         + **((unsigned __int8 **)v12 + 18) * (v101 - (uint64_t)*(int *)(a1 + 9516)));
    uint64_t v51 = *(void *)(a1 + 9488);
    *(_DWORD *)(v51 + 832) = a2;
    *(_DWORD *)(v51 + 836) = v101;
    uint64_t v52 = (int)a2 - (uint64_t)*((int *)v12 + 1);
    uint64_t v53 = v101 - (uint64_t)*((int *)v12 + 2);
    *(void *)(v51 + 888) = *((void *)v12 + 12)
                           + 16 * (((uint64_t)(int)v52 >> 2) + ((unint64_t)*v12 >> 2) * ((int)v53 >> 2));
    uint64_t v87 = v49;
    uint64_t v83 = v50;
    sub_1D0D41380(a1, a2, v101, v31, **((void **)v12 + 3) + (*((void *)v12 + 4) + v52 + v12[1] * v53) * *(int *)(*((void *)v12 + 3) + 16), v12[1], v46, v45, v46, v45, v50, v49, v11, &v104, v99, v97);
    int v54 = v104;
    if (v104) {
      char v55 = 1;
    }
    else {
      char v55 = v99;
    }
    if ((v55 & 1) == 0)
    {
      *(_DWORD *)(a1 + 9120) = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 9496) + 16))((1 << v11), (1 << v11), a1 + 64, 1 << v11);
      *(_DWORD *)(a1 + 9120) = (*(uint64_t (**)(void))(a1 + 8 * v11 + 9216))();
    }
    v110[0] = 0;
    int __c = v54;
    if (v99) {
      unsigned int v56 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 9496) + 8 * v11 + 160))((1 << v11), (1 << v11), **((void **)v12 + 3)+ (*((void *)v12 + 4) - *((int *)v12 + 1) + (int)a2 + (v101 - (uint64_t)*((int *)v12 + 2)) * v12[1])* *(int *)(*((void *)v12 + 3) + 16));
    }
    else {
      unsigned int v56 = *(_DWORD *)(a1 + 9120);
    }
    int v10 = a6;
    uint64_t v29 = a9;
    BOOL v57 = v85;
    uint64_t v28 = a10;
    if (*(unsigned char *)(*(void *)(a1 + 9488) + 196))
    {
      unsigned int v58 = 0;
    }
    else
    {
      unsigned int v100 = v56;
      (*(void (**)(void, uint64_t, uint64_t, char *, void *))(a1 + 8 * (v11 > 2) + 9192))((1 << v11), v87, v83, (char *)v110 + 4, v110);
      unsigned int v56 = v100;
      BOOL v57 = v85;
      uint64_t v29 = a9;
      int v59 = &byte_1D0DA729C[*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 9464) + 16) + 2097)
                          + (uint64_t)(*(__int16 *)(*((void *)v12 + 11)
                                                 + 2
                                                 * (((uint64_t)((int)a2 - *((_DWORD *)v12 + 1)) >> 3)
                                                  + ((unint64_t)*v12 >> 3) * ((v101 - *((_DWORD *)v12 + 2)) >> 3))) >> 9)];
      unsigned int v58 = (HIDWORD(v110[0]) * *v59 + LODWORD(v110[0]) * v59[70]) << 8;
    }
    uint64_t v86 = v56;
    unsigned int v88 = v58;
    unint64_t v30 = ((*(unsigned __int16 *)(*(void *)(a1 + 9496) + 152) * (unint64_t)v58) >> 8) + v56;
    if (v57) {
      goto LABEL_50;
    }
  }
  unint64_t v84 = v30;
  unsigned int v60 = 0;
  int v61 = 1 << (v11 - 1);
  int v98 = v61 + a2;
  int v102 = v12;
  int v62 = v61 + v13;
  uint64_t v63 = (v10 + 1);
  do
  {
    int v64 = sub_1D0D0CA2C(v29, v60, v98 < *(_DWORD *)(*(void *)(a1 + 9488) + 16), v62 < *(_DWORD *)(*(void *)(a1 + 9488) + 20));
    uint64_t result = (void *)sub_1D0D3FE30(a1, ((v60 & 1) << (v11 - 1)) + (int)a2, (v60 >> 1 << (v11 - 1)) + v13, v102, (v11 - 1), v63, a7, a8, v64, &v105);
    uint64_t v29 = a9;
    ++v60;
  }
  while (v60 != 4);
  unsigned int v66 = v108;
  uint64_t v67 = *(void *)(a1 + 9496);
  uint64_t v28 = a10;
  LOBYTE(v10) = a6;
  uint64_t v12 = v102;
  if (((*(unsigned __int16 *)(v67 + 2 * v109 + 152) * (unint64_t)v108) >> (8 * (v109 == 0))) + v105 < v84)
  {
    uint64_t v68 = *(void *)a10 + v105;
    uint64_t v69 = *(void *)(a10 + 8) + v106;
    *(void *)a10 = v68;
    *(void *)(a10 + 8) = v69;
    unsigned int v70 = *(_DWORD *)(a10 + 24) + v66;
    goto LABEL_58;
  }
LABEL_50:
  int v71 = (char *)(v91 + ((uint64_t)((int)a2 - v92) >> 2) + (int)(v90 >> 2) * (uint64_t)((v13 - v93) >> 2));
  *int v31 = *v31 & 0xFFF3 | (4 * (v10 & 3));
  unint64_t v72 = *v12;
  if (v72 >> v10 >= 8)
  {
    uint64_t v73 = 0;
    unint64_t v74 = v72 >> 3;
    uint64_t v75 = v72 >> v10 >> 3;
    uint64_t v76 = 2 * v74;
    uint64_t v77 = v31;
    do
    {
      uint64_t v78 = v77;
      uint64_t v79 = v75;
      do
      {
        *v78++ = *v31;
        --v79;
      }
      while (v79);
      ++v73;
      uint64_t v77 = (__int16 *)((char *)v77 + v76);
    }
    while (v73 != v75);
  }
  int v80 = 1 << (v11 - 2);
  size_t v81 = v80;
  uint64_t v82 = v80;
  do
  {
    --v82;
    uint64_t result = memset(v71, __c, v81);
    v71 += v94 >> 2;
  }
  while (v82);
  uint64_t v67 = *(void *)(a1 + 9496);
  uint64_t v68 = *(void *)v28 + v86;
  *(void *)uint64_t v28 = v68;
  unsigned int v70 = *(_DWORD *)(v28 + 24) + v88;
LABEL_58:
  *(_DWORD *)(v28 + 24) = v70;
  *(void *)(v28 + 16) = ((*(unsigned __int16 *)(v67 + 2 * *(__int16 *)(v28 + 28) + 152) * (unint64_t)v70) >> (8 * (*(_WORD *)(v28 + 28) == 0)))
                        + v68;
  return result;
}

unint64_t sub_1D0D40574(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned int a6, int a7, uint64_t a8, unsigned int a9, int64x2_t *a10)
{
  int v10 = a5;
  int v11 = a4;
  signed int v12 = a3;
  uint64_t v13 = a2;
  uint64_t v15 = a10;
  uint64_t v16 = a9;
  int v17 = *(unsigned __int8 **)(a1 + 9472);
  int v18 = v17[2115];
  int v19 = *(_DWORD *)a1 - v17[273];
  if (v19 >= v18) {
    int v20 = v17[2115];
  }
  else {
    int v20 = *(_DWORD *)a1 - v17[273];
  }
  if (v19 <= v17[2114]) {
    int v21 = v17[2114];
  }
  else {
    int v21 = v20;
  }
  unsigned int v105 = 0;
  int64x2_t v103 = 0uLL;
  unint64_t result = -1;
  uint64_t v104 = -1;
  __int16 v106 = 0;
  int v23 = (__int16 *)(*((void *)a4 + 11)
                  + 2
                  * (((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 3)
                   + ((unint64_t)*a4 >> 3) * (((int)a3 - *((_DWORD *)a4 + 2)) >> 3)));
  unsigned __int8 v102 = 0;
  int v24 = *(void **)(a1 + 9488);
  uint64_t v94 = v24[118];
  uint64_t v93 = v17[2113] - (uint64_t)(int)a5;
  uint64_t v25 = (1 << a5);
  int v89 = v18;
  unsigned int v95 = 1 << a5;
  int v91 = a5;
  if (v18 >= (int)a5)
  {
    BOOL v27 = 0;
    if (a7 != 1 && !*(unsigned char *)(*(void *)(a1 + 9464) + 2816))
    {
      int v28 = 10 - a7;
      if (a7 >= 10) {
        int v28 = a7 - 10;
      }
      int v29 = 26 - a7;
      if (a7 >= 26) {
        int v29 = a7 - 26;
      }
      if (v28 >= v29) {
        int v28 = v29;
      }
      BOOL v27 = v28 > byte_1D0DA768A[(int)a5];
    }
    unint64_t v30 = (void (*)(void *, uint64_t, uint64_t, void, unsigned __int8 *, uint64_t, void, uint64_t, void))v24[3721];
    uint64_t v31 = v24[3722];
    int v32 = (void *)((char *)v24 + (v31 >> 1));
    int v98 = v21;
    if (v31) {
      unint64_t v30 = *(void (**)(void *, uint64_t, uint64_t, void, unsigned __int8 *, uint64_t, void, uint64_t, void))(*v32 + v30);
    }
    unsigned int v85 = a8;
    v30(v32, a2, a3, *(unsigned int *)(a1 + 9520), a4, a8, a9, a5, *((void *)a4 + 19));
    if (v27) {
      (*(void (**)(void, void))(*(void *)(a1 + 9464) + 8 * v10 + 2288))(*((void *)v11 + 19), *((void *)v11 + 20));
    }
    unint64_t v33 = *(unsigned __int8 **)(*(void *)(a1 + 9488) + 32 * v93 + 248);
    uint64_t v34 = *v33;
    uint64_t v35 = **((void **)v33 + 7) + *((void *)v33 + 8) * *(int *)(*((void *)v33 + 7) + 16);
    sub_1D0CA6124(*(void *)(a1 + 9464) + 2280, a7, v10, *(void *)&v11[8 * v27 + 152], v34, v35);
    uint64_t v36 = *(void *)(a1 + 9488);
    int v37 = *(unsigned __int8 **)(v36 + 32 * v93 + 248);
    uint64_t v38 = *v37;
    uint64_t v39 = *((void *)v37 + 4);
    *(_DWORD *)(v36 + 832) = v13;
    *(_DWORD *)(v36 + 836) = v12;
    uint64_t v40 = (int)v13;
    uint64_t v41 = (int)v13 - (uint64_t)*((int *)v11 + 1);
    int v42 = v13 - *((_DWORD *)v11 + 1);
    uint64_t v43 = v13;
    int v44 = v10;
    uint64_t v45 = v12 - (uint64_t)*((int *)v11 + 2);
    *(void *)(v36 + 888) = *((void *)v11 + 12)
                           + 16 * (((uint64_t)v42 >> 2) + ((unint64_t)*v11 >> 2) * ((int)v45 >> 2));
    uint64_t v88 = v39;
    int v96 = v43;
    sub_1D0D41380(a1, v43, v12, v23, **((void **)v11 + 3) + (*((void *)v11 + 4) + v41 + v11[1] * v45) * *(int *)(*((void *)v11 + 3) + 16), v11[1], v35, v34, v35, v34, v39, v38, v10, &v102, 1, 1u);
    uint64_t v46 = **((void **)v11 + 3)
        + (*((void *)v11 + 4) + v40 - *((int *)v11 + 1) + (v12 - (uint64_t)*((int *)v11 + 2)) * v11[1])
        * *(int *)(*((void *)v11 + 3) + 16);
    uint64_t v47 = v10 - 2;
    unsigned int v48 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 9496) + 8 * v47 + 176))(v95, v95, v46);
    uint64_t v49 = *(unsigned __int8 **)(*(void *)(a1 + 9488) + 32 * v93 + 248);
    uint64_t v50 = (char *)*((void *)v49 + 1);
    unint64_t v51 = (unint64_t)*v49 >> 2;
    LODWORD(v49) = 1 << v47;
    int v52 = v102;
    size_t v53 = 1 << v47;
    uint64_t v54 = (int)v49;
    do
    {
      --v54;
      memset(v50, v52, v53);
      v50 += v51;
    }
    while (v54);
    uint64_t v90 = v48;
    (*(void (**)(uint64_t))(*(void *)v94 + 88))(v94);
    int v10 = v91;
    if (v98 < v91) {
      (**(void (***)(uint64_t, void, uint64_t))v94)(v94, 0, v94 - v44 + 84);
    }
    uint64_t v55 = v94 + 1;
    unsigned int v26 = a6;
    if (a6) {
      uint64_t v55 = v94;
    }
    (**(void (***)(uint64_t, BOOL, uint64_t))v94)(v94, v52 != 0, v55 + 82);
    int v11 = a4;
    LODWORD(v13) = v96;
    if (v52) {
      sub_1D0D3FB98(a1, (uint64_t)v23, v88, v91);
    }
    unsigned int v56 = (*(uint64_t (**)(uint64_t))(*(void *)v94 + 80))(v94);
    (*(void (**)(uint64_t))(*(void *)v94 + 96))(v94);
    unsigned int v87 = v56;
    unint64_t result = v90 + ((*(unsigned __int16 *)(*(void *)(a1 + 9496) + 152) * (unint64_t)v56) >> 8);
    a8 = v85;
    int v21 = v98;
    uint64_t v16 = a9;
    uint64_t v25 = v95;
    uint64_t v15 = a10;
  }
  else
  {
    unsigned int v26 = a6;
    unsigned int v87 = 0;
    uint64_t v90 = 0;
  }
  if (v21 >= v10)
  {
    unint64_t v64 = v104;
  }
  else
  {
    unint64_t v86 = result;
    unsigned int v57 = 0;
    uint64_t v58 = (v10 - 1);
    int v59 = 1 << (v10 - 1);
    int v99 = v59 + v13;
    int v97 = v59 + v12;
    uint64_t v60 = v26 + 1;
    uint64_t v61 = a8;
    do
    {
      int v62 = sub_1D0D0CA2C(v16, v57, v99 < *(_DWORD *)(*(void *)(a1 + 9488) + 16), v97 < *(_DWORD *)(*(void *)(a1 + 9488) + 20));
      sub_1D0D40574(a1, ((v57 & 1) << v58) + (int)v13, (v57 >> 1 << v58) + v12, a4, v58, v60, a7, v61, v62, &v103);
      uint64_t v16 = a9;
      ++v57;
    }
    while (v57 != 4);
    int v11 = a4;
    (*(void (**)(uint64_t))(*(void *)v94 + 88))(v94);
    if (v89 >= v91) {
      (**(void (***)(uint64_t, uint64_t, uint64_t))v94)(v94, 1, v94 - v91 + 84);
    }
    int v63 = (*(uint64_t (**)(uint64_t))(*(void *)v94 + 80))(v94);
    v105 += v63;
    unsigned int v26 = v105;
    (*(void (**)(uint64_t))(*(void *)v94 + 96))(v94);
    unint64_t v64 = ((*(unsigned __int16 *)(*(void *)(a1 + 9496) + 2 * v106 + 152) * (unint64_t)v26) >> (8 * (v106 == 0)))
        + v103.i64[0];
    uint64_t v15 = a10;
    uint64_t v25 = v95;
    LOBYTE(v26) = a6;
    unint64_t result = v86;
  }
  if (v64 >= result)
  {
    *int v23 = *v23 & 0xFFF3 | (4 * (v26 & 3));
    unint64_t v68 = *v11;
    if (v68 >> v26 >= 8)
    {
      uint64_t v69 = 0;
      unint64_t v70 = v68 >> 3;
      uint64_t v71 = v68 >> v26 >> 3;
      uint64_t v72 = 2 * v70;
      uint64_t v73 = v23;
      do
      {
        unint64_t v74 = v73;
        uint64_t v75 = v71;
        do
        {
          *v74++ = *v23;
          --v75;
        }
        while (v75);
        ++v69;
        uint64_t v73 = (__int16 *)((char *)v73 + v72);
      }
      while (v69 != v71);
    }
    uint64_t v76 = *(void *)(a1 + 9496);
    uint64_t v77 = v15->i64[0] + v90;
    v15->i64[0] = v77;
    unsigned __int32 v78 = v15[1].i32[2] + v87;
    v15[1].i32[2] = v78;
    v15[1].i64[0] = ((*(unsigned __int16 *)(v76 + 2 * v15[1].i16[6] + 152) * (unint64_t)v78) >> (8 * (v15[1].i16[6] == 0)))
                  + v77;
    uint64_t v79 = *(void *)(a1 + 9488);
    int v80 = (void **)*((void *)v11 + 18);
    size_t v81 = *(const void ***)(v79 + 32 * (int)v93 + 248);
    int v82 = v13 - *(_DWORD *)(a1 + 9512);
    int v83 = v12 - *(_DWORD *)(a1 + 9516);
    unint64_t v84 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 29752);
    return (unint64_t)sub_1D0D0C2A8(v84, v80, v81, v82, v83, 0, 0, v25);
  }
  else
  {
    uint64_t v65 = *(void *)(a1 + 9496);
    int64x2_t v66 = vaddq_s64(*v15, v103);
    *uint64_t v15 = v66;
    unsigned __int32 v67 = v15[1].i32[2] + v105;
    v15[1].i32[2] = v67;
    v15[1].i64[0] = ((*(unsigned __int16 *)(v65 + 2 * v15[1].i16[6] + 152) * (unint64_t)v67) >> (8 * (v15[1].i16[6] == 0)))
                  + v66.i64[0];
  }
  return result;
}

uint64_t sub_1D0D40DAC(uint64_t a1, uint64_t a2, signed int a3, unsigned __int8 *a4, int a5, int a6, int a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  int v11 = a6;
  uint64_t v14 = a10;
  uint64_t v15 = *(unsigned __int8 **)(a1 + 9472);
  int v16 = v15[2114];
  int v17 = v15[2115];
  int v18 = *(_DWORD *)a1 - (a8 == 3) - v15[273];
  if (v18 >= v17) {
    int v19 = v15[2115];
  }
  else {
    int v19 = *(_DWORD *)a1 - (a8 == 3) - v15[273];
  }
  uint64_t v20 = *(__int16 *)(a10 + 28);
  if (v18 <= v16) {
    int v21 = v16;
  }
  else {
    int v21 = v19;
  }
  unsigned int v103 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t result = -1;
  uint64_t v102 = -1;
  __int16 v104 = v20;
  int v24 = *((_DWORD *)a4 + 1);
  int v23 = *((_DWORD *)a4 + 2);
  uint64_t v25 = *((void *)a4 + 11);
  unint64_t v26 = *a4;
  unsigned __int8 v99 = 0;
  int v90 = v21;
  int v92 = a5;
  int v91 = a7;
  if (v21 >= a6)
  {
    uint64_t v36 = a4;
    unsigned int v34 = 0;
    uint64_t v35 = 0;
  }
  else
  {
    int v75 = v24;
    unint64_t v76 = v26;
    int v78 = v23;
    uint64_t v81 = v25;
    int v83 = v17;
    uint64_t v86 = v20;
    unsigned int v27 = 0;
    char v28 = a6 - 1;
    int v29 = 1 << (a6 - 1);
    int v94 = v29 + a3;
    int v96 = v29 + a2;
    BOOL v93 = a5 == 0;
    uint64_t v30 = (a7 + 1);
    do
    {
      uint64_t v31 = ((v27 & 1) << v28) + (int)a2;
      uint64_t v32 = a2;
      int v33 = sub_1D0D0CA2C(a9, v27, v96 < *(_DWORD *)(*(void *)(a1 + 9488) + 16), v94 < *(_DWORD *)(*(void *)(a1 + 9488) + 20));
      sub_1D0D40DAC(a1, v31, (v27 >> 1 << (v11 - 1)) + a3, a4, v93, (v11 - 1), v30, a8, v33, &v100);
      a2 = v32;
      ++v27;
    }
    while (v27 != 4);
    int v11 = a6;
    int v17 = v83;
    if (v83 < a6) {
      unsigned int v34 = v103;
    }
    else {
      unsigned int v34 = v103 + 1;
    }
    uint64_t v35 = v100;
    uint64_t result = ((*(unsigned __int16 *)(*(void *)(a1 + 9496) + 2 * v104 + 152) * (unint64_t)v34) >> (8 * (v104 == 0)))
           + v100;
    uint64_t v14 = a10;
    a7 = v91;
    a5 = v92;
    uint64_t v36 = a4;
    uint64_t v20 = v86;
    uint64_t v25 = v81;
    int v23 = v78;
    unint64_t v26 = v76;
    int v24 = v75;
  }
  if (v17 < v11) {
    goto LABEL_41;
  }
  BOOL v37 = 0;
  uint64_t v38 = (__int16 *)(v25 + 2 * (((uint64_t)((int)a2 - v24) >> 3) + (int)(v26 >> 3) * (uint64_t)((a3 - v23) >> 3)));
  uint64_t v39 = (int)a2 - (uint64_t)*((int *)v36 + 1);
  unsigned int v97 = a3;
  uint64_t v40 = a3 - (uint64_t)*((int *)v36 + 2);
  uint64_t v41 = v36[1];
  int v42 = *(void **)&v36[8 * a5 + 136];
  uint64_t v43 = *(unsigned __int8 *)v42 * v40;
  int v44 = (uint64_t *)v42[7];
  uint64_t v45 = v43 + v39;
  uint64_t v46 = (unsigned __int8 *)(*((void *)v36 + 12)
                          + 16 * (((uint64_t)(int)v39 >> 2) + ((unint64_t)*v36 >> 2) * ((int)v40 >> 2)));
  uint64_t v47 = **((unsigned __int8 **)v36 + 17);
  uint64_t v48 = **((void **)v36 + 3) + (v39 + v41 * v40 + *((void *)v36 + 4)) * *(int *)(*((void *)v36 + 3) + 16);
  uint64_t v49 = v42[8] + v39 + v43;
  uint64_t v50 = *((int *)v44 + 4);
  uint64_t v51 = *v44;
  uint64_t v52 = v42[4];
  uint64_t v53 = *(void *)(a1 + 9464);
  unsigned int v54 = *v46;
  if (v54 != 1 && !*(unsigned char *)(v53 + 2816))
  {
    signed int v55 = 10 - v54;
    if (v54 >= 0xA) {
      signed int v55 = v54 - 10;
    }
    int v56 = 26 - v54;
    BOOL v57 = v54 >= 0x1A;
    int v58 = v54 - 26;
    if (!v57) {
      int v58 = v56;
    }
    if (v55 < v58) {
      int v58 = v55;
    }
    BOOL v37 = v58 > byte_1D0DA768A[v11];
  }
  uint64_t v84 = v51 + v49 * v50;
  unsigned int v95 = v34;
  uint64_t v87 = v48;
  unint64_t v89 = result;
  uint64_t v85 = a2;
  uint64_t v82 = v52 + 2 * v45;
  if (a7 < 1)
  {
    uint64_t v63 = (1 << v11);
  }
  else
  {
    BOOL v79 = v37;
    uint64_t v59 = *(void *)(a1 + 9488);
    uint64_t v60 = *(void (**)(void *))(v59 + 29768);
    uint64_t v61 = *(void *)(v59 + 29776);
    int v62 = (void *)(v59 + (v61 >> 1));
    uint64_t v63 = (1 << v11);
    if (v61) {
      uint64_t v60 = *(void (**)(void *))(*v62 + v60);
    }
    v60(v62);
    uint64_t v36 = a4;
    uint64_t v53 = *(void *)(a1 + 9464);
    BOOL v37 = v79;
    if (v79)
    {
      (*(void (**)(void, void))(v53 + 8 * v11 + 2288))(*((void *)a4 + 19), *((void *)a4 + 20));
      BOOL v37 = v79;
      uint64_t v36 = a4;
      uint64_t v53 = *(void *)(a1 + 9464);
    }
  }
  sub_1D0CA6124(v53 + 2280, *v46, v11, *(void *)&v36[8 * v37 + 152], v47, v84);
  unsigned int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 9496)
                                                                                        + 8 * v11
                                                                                        + 240))(v63, v63, v87, v41, v84, v47);
  unint64_t v65 = *(unsigned __int16 *)(*(void *)(a1 + 9496) + 2 * v20 + 152);
  if (v90 >= v11) {
    unint64_t v65 = 0;
  }
  unsigned int v77 = v64;
  unint64_t v80 = (v65 >> (8 * (v20 == 0))) + v64;
  uint64_t result = sub_1D0D41380(a1, v85, v97, v38, v87, v41, v84, v47, v84, v47, v82, v47, v11, &v99, 1, 0);
  uint64_t v36 = a4;
  unsigned int v34 = v95;
  uint64_t v14 = a10;
  if (v80 >= v89)
  {
LABEL_41:
    *(int8x16_t *)(v36 + 136) = vextq_s8(*(int8x16_t *)(v36 + 136), *(int8x16_t *)(v36 + 136), 8uLL);
    uint64_t v71 = *(void *)(a1 + 9496);
    uint64_t v72 = *(void *)v14 + v35;
    uint64_t v74 = *(void *)(v14 + 8) + v101;
    *(void *)uint64_t v14 = v72;
    *(void *)(v14 + 8) = v74;
    unsigned int v73 = *(_DWORD *)(v14 + 24) + v34;
  }
  else
  {
    __int16 *v38 = *v38 & 0xFFF3 | (4 * (v91 & 3));
    if ((int)v63 >= 8)
    {
      uint64_t v66 = 0;
      unint64_t v67 = 2 * ((unint64_t)*a4 >> 3);
      unint64_t v68 = v38;
      do
      {
        uint64_t v69 = v68;
        uint64_t v70 = v63 >> 3;
        do
        {
          *v69++ = *v38;
          --v70;
        }
        while (v70);
        ++v66;
        unint64_t v68 = (__int16 *)((char *)v68 + v67);
      }
      while (v66 != v63 >> 3);
    }
    uint64_t result = (uint64_t)sub_1D0D7B228(a4, v85, v97, (int)v63 >> 2, 0, v99, v92);
    uint64_t v71 = *(void *)(a1 + 9496);
    uint64_t v72 = *(void *)a10 + v77;
    *(void *)a10 = v72;
    unsigned int v73 = *(_DWORD *)(a10 + 24) + (v90 < v11);
  }
  *(_DWORD *)(v14 + 24) = v73;
  *(void *)(v14 + 16) = ((*(unsigned __int16 *)(v71 + 2 * *(__int16 *)(v14 + 28) + 152) * (unint64_t)v73) >> (8 * (*(_WORD *)(v14 + 28) == 0)))
                        + v72;
  return result;
}

uint64_t sub_1D0D41380(uint64_t a1, uint64_t a2, unsigned int a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned char *a14, char a15, unsigned __int8 a16)
{
  uint64_t v36 = a13 - 2;
  uint64_t v19 = (1 << a13);
  uint64_t v35 = a1 + 8 * (5 - a13);
  uint64_t v37 = *(void *)(v35 + 6352);
  BOOL v21 = a13 == 2 && *(_DWORD *)(a1 + 4) == 1;
  BOOL v34 = v21;
  sub_1D0C9B040(*(void *)(a1 + 9464) + 2824, a5, a6, a7, a8, a1 + 64, a13, HIBYTE(*a4) & 1, v21);
  __int16 v22 = *a4;
  int v23 = *(unsigned __int8 *)(*(void *)(a1 + 9480) + 137);
  if (v23 != 2 || a16 == 0)
  {
    BOOL v25 = 0;
    uint64_t v26 = a3;
    uint64_t v27 = a2;
  }
  else
  {
    uint64_t v26 = a3;
    uint64_t v27 = a2;
    if (*(unsigned char *)(*(void *)(a1 + 9464) + 58) == 2) {
      goto LABEL_19;
    }
    BOOL v25 = (v22 & 0x70) != 48;
  }
  if (v23 == 1 || v25)
  {
LABEL_19:
    uint64_t v28 = (int)v19;
    uint64_t result = sub_1D0D41660(a1, v27, v26, (uint64_t)a4, a1 + 64, (int)v19, a11, a12, a13, *(unsigned __int8 *)(*(void *)(a1 + 9472) + 2113) - ((v22 & 3u) + a13), 0);
    *a14 = result;
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  uint64_t v28 = (int)v19;
  uint64_t result = sub_1D0D42E88(a1, v27, v26, (uint64_t)a4, a1 + 64, (int)v19, a11, a12, a13, 0, 1, a16);
  *a14 = result;
  if ((result & 1) == 0) {
    return result;
  }
LABEL_20:
  sub_1D0D43530(a1, *a4, a11, a12, v37, v28, a13, 0);
  if (a15)
  {
    uint64_t v30 = *(void *)(a1 + 9464) + 2824;
    uint64_t v31 = *(void *)(v35 + 6352);
    if ((*a4 & 0x100) != 0)
    {
      int v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v30 + 8 * v36 + 248);
      return v33(a9, a10, v31, 0);
    }
    else
    {
      uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v30 + 16 * v36 + 8 * v34);
      return v32(a9, a10, v31, 0, 1024);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 9120) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 9496) + 8 * a13 + 320))(v19, v19, v37, v28, a1 + 64, v28);
    uint64_t result = (*(uint64_t (**)(void))(a1 + 8 * a13 + 9216))();
    *(_DWORD *)(a1 + 9120) = result;
  }
  return result;
}

uint64_t sub_1D0D41660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, BOOL a10, int a11)
{
  uint64_t v11 = MEMORY[0x1F4188790]();
  uint64_t v282 = v17;
  uint64_t v19 = v18;
  uint64_t v20 = v16;
  int v21 = a9;
  v303[3446] = *MEMORY[0x1E4F143B8];
  int v299 = 0;
  uint64_t v245 = v15;
  if (((v13 | v12) & 0x80000000) == 0
    && ((uint64_t v22 = *(void *)(v11 + 9488),
         int v23 = v12 - *(_DWORD *)(v22 + 832),
         int v24 = v13 - *(_DWORD *)(v22 + 836),
         int v25 = *(unsigned __int8 *)(v22 + 828),
         v23 < v25)
      ? (BOOL v26 = v24 < v25)
      : (BOOL v26 = 0),
        v26))
  {
    uint64_t v27 = (unsigned __int8 *)(*(void *)(v22 + 888) + 16 * (*(void *)(v22 + 864) * ((uint64_t)v24 >> 2) + (v23 >> 2)));
  }
  else
  {
    uint64_t v27 = 0;
  }
  int v28 = 1 << a9;
  __int16 v29 = *v14;
  if ((*v14 & 0x100) != 0)
  {
    if (a9 != 31)
    {
      int v38 = 0;
      char v37 = 0;
      if (v28 <= 1) {
        unsigned int v39 = 1;
      }
      else {
        unsigned int v39 = 1 << a9;
      }
      uint64_t v40 = v15;
      do
      {
        uint64_t v41 = 0;
        do
        {
          int v42 = *(unsigned __int16 *)(v40 + v41);
          *(_WORD *)(v19 + v41) = v42;
          v37 |= v42 != 0;
          v41 += 2;
        }
        while (2 * v39 != v41);
        ++v38;
        v19 += 2 * v17;
        v40 += 2 * v16;
      }
      while (v38 != v39);
      return v37 & 1;
    }
LABEL_19:
    char v37 = 0;
    return v37 & 1;
  }
  v301[0] = 0;
  int v300 = 0;
  unint64_t v242 = v27;
  int v241 = v29 >> 9;
  uint64_t v30 = (void *)v11;
  sub_1D0D436F8(v11, v27, v241, a9, a11, (int *)v301 + 1, &v300, v301, &v299, 1);
  uint64_t v31 = a9 - 2;
  uint64_t v243 = v299;
  int v32 = 4 * v299;
  if (a9 != 3) {
    int v32 = 0;
  }
  uint64_t v33 = 144;
  if (*(unsigned char *)(v30[1183] + 58) == 2) {
    uint64_t v33 = 140;
  }
  char v253 = (char *)*(&off_1E689A008 + v31) + v32;
  uint64_t v254 = a9 - 2;
  int v34 = SHIDWORD(v301[0]) % 6;
  uint64_t v297 = v30;
  char v287 = v300;
  uint64_t v244 = v20;
  unint64_t v250 = ((uint64_t (*)(void))v30[v31 + 1174])((*(_DWORD *)(v30[1185] + v33) << (v300 - 9)));
  if (!v250) {
    goto LABEL_19;
  }
  if (a9 == 3)
  {
    uint64_t v268 = (char *)&unk_1D0DAFAE0 + 128 * v243;
    uint64_t v35 = (uint64_t)v30;
    goto LABEL_32;
  }
  uint64_t v35 = (uint64_t)v30;
  if (a9 == 5)
  {
    uint64_t v36 = (char *)&unk_1D0DAF0E0;
    goto LABEL_30;
  }
  if (a9 == 4)
  {
    uint64_t v36 = (char *)&unk_1D0DAF8E0;
LABEL_30:
    uint64_t v268 = v36;
    goto LABEL_32;
  }
  uint64_t v268 = 0;
LABEL_32:
  uint64_t v43 = 0;
  unint64_t v251 = 0;
  int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
  double v45 = dbl_1D0DA74E0[24 * (SLODWORD(v301[0]) > 0) + 6 * v254 + v34];
  uint64_t v46 = __clz(v250) ^ 0x3F;
  int v249 = 1 << v254;
  int v247 = (1 << v254) - 1;
  int v47 = v28 - 1;
  if (v243) {
    int v48 = 15;
  }
  else {
    int v48 = 9;
  }
  if (a9 == 3) {
    int v49 = 9;
  }
  else {
    int v49 = 12;
  }
  uint64_t v50 = 0xFFFFFFFFLL;
  int v256 = v49;
  int v257 = ~(-1 << a9);
  if (a9 != 3) {
    int v48 = 21;
  }
  int v255 = v48;
  if (a11 <= 0) {
    int v51 = 0;
  }
  else {
    int v51 = 27;
  }
  int v261 = v51;
  uint64_t v259 = (a11 - 1);
  double v52 = 0.0;
  int v53 = 1;
  unsigned int v54 = v46;
  double v260 = 0.0;
  uint64_t v270 = v19;
  uint64_t v267 = &byte_1D0DAF020[64 * v243 + 16 * v254];
  int v265 = v28 - 1;
  while (2)
  {
    double v55 = v52;
    uint64_t v56 = v43;
    while (2)
    {
      uint64_t v57 = 16 * v46;
      if (v28 < 5) {
        uint64_t v246 = 0;
      }
      else {
        uint64_t v246 = *(unsigned __int16 *)&v268[32 * v46];
      }
      unsigned int v293 = 0;
      int v295 = 0;
      int v262 = 0;
      int v272 = 0;
      int v58 = 0;
      unsigned __int8 v59 = v253[v46];
      uint64_t v60 = (v251 >> v59) & 2;
      if ((v247 & v59) >= v247) {
        LODWORD(v60) = 0;
      }
      char v248 = v253[v46];
      uint64_t v61 = (v251 >> (v249 + v59)) & 1;
      if (v59 >> v254 >= v247) {
        LODWORD(v61) = 0;
      }
      if (v46) {
        BOOL v62 = a11 <= 0;
      }
      else {
        BOOL v62 = 0;
      }
      uint64_t v258 = v60 | v61;
      int v291 = 1;
      uint64_t v63 = (1 << v46) & v250;
      if (v62) {
        int v64 = 2;
      }
      else {
        int v64 = 0;
      }
      unsigned int v289 = v64 | (v53 == 0);
      double v271 = 0.0;
      uint64_t v65 = 15;
      double v66 = 0.0;
      double v67 = 0.0;
      int v252 = v56;
      uint64_t v43 = v56;
      int v53 = 1;
      uint64_t v266 = v46;
      uint64_t v263 = (1 << v46) & v250;
      uint64_t v264 = 16 * v46;
      do
      {
        uint64_t v68 = v65;
        uint64_t v69 = v65 + v57;
        if (v28 < 5) {
          unsigned int v70 = v44[v69];
        }
        else {
          unsigned int v70 = *(unsigned __int16 *)&v268[2 * v69];
        }
        uint64_t v71 = v70 >> v21;
        if (!v63)
        {
          LOWORD(v73) = 0;
          goto LABEL_76;
        }
        int v72 = *(unsigned __int16 *)(v19 + 2 * (v71 * v282 + (v70 & v47)));
        LOWORD(v73) = v72;
        if ((v72 & 0x8000u) != 0) {
          int v73 = -(__int16)v72;
        }
        if (*(_WORD *)(v19 + 2 * (v71 * v282 + (v70 & v47))) || (v50 & 0x80000000) == 0 || v46 != v54)
        {
          if ((int)v50 < 0 && v72 != 0) {
            LODWORD(v50) = v69;
          }
          if ((v50 & 0x80000000) == 0)
          {
            unsigned int v75 = *((_DWORD *)&v303[16 * (int)v71 + 2422] + (v70 & v47));
            double v76 = v45 * ((double)(int)v75 * (double)(int)v75);
            double v260 = v260 + v76;
            goto LABEL_77;
          }
LABEL_76:
          unsigned int v75 = 0;
          double v76 = 0.0;
LABEL_77:
          int v77 = (unsigned __int16)v73;
          *((_WORD *)&v301[1] + v70) = v73;
          if ((unsigned __int16)v73 != 0 && (int)v50 < 0)
          {
            unsigned int v54 = v46;
            uint64_t v50 = v69;
          }
          else
          {
            uint64_t v50 = v50;
          }
          if ((v50 & 0x80000000) != 0)
          {
            double v55 = v76 + v55;
            goto LABEL_152;
          }
          int v285 = v43;
          int v276 = v58;
          uint64_t v274 = v70;
          uint64_t v275 = v68;
          if (v21 == 2)
          {
            unsigned int v70 = byte_1D0DAFCD0[v70 + 64];
          }
          else if (v70)
          {
            int v78 = byte_1D0DAFCD0[16 * v258 + (v70 & 3 | (4 * ((v70 >> v21) & 3)))];
            if (a11)
            {
              unsigned int v70 = v256 + v78;
            }
            else
            {
              if ((v71 >> 2) + ((v70 & v257) >> 2)) {
                int v79 = v78 + 3;
              }
              else {
                int v79 = byte_1D0DAFCD0[16 * v258 + (v70 & 3 | (4 * ((v70 >> v21) & 3)))];
              }
              unsigned int v70 = v79 + v255;
            }
          }
          int v80 = v75 >> 31;
          int v278 = v53;
          int v81 = v53 + 4 * v289;
          unsigned int v82 = v70 + v261;
          int v83 = &v298[(int)v43];
          v83[1024] = v76;
          uint64_t v84 = (int64_t *)(v83 + 2048);
          uint64_t v85 = *(void *)(*(void *)(v35 + 9488) + 944);
          v83[2048] = 0.0;
          unsigned int v283 = v50;
          int v273 = v69;
          unsigned int v280 = v54;
          unsigned int v269 = v82;
          if ((unsigned __int16)v77 > 2u || v50 == v69)
          {
            int64_t v88 = 0;
            v298[(int)v43] = 1.79769313e308;
            double v89 = 1.79769313e308;
          }
          else
          {
            (*(void (**)(uint64_t))(*(void *)v85 + 88))(v85);
            (**(void (***)(uint64_t, void, uint64_t))v85)(v85, 0, v85 + v82 + 131);
            uint64_t v86 = *(void *)(v35 + 9496);
            unsigned int v87 = (*(uint64_t (**)(uint64_t))(*(void *)v85 + 80))(v85);
            if (a11) {
              int64_t v88 = ((v87 * (unint64_t)*(unsigned __int16 *)(v86 + 152)) << 15)
            }
                  / *(unsigned __int16 *)(v86 + 4 * v259 + 162);
            else {
              int64_t v88 = (v87 * (unint64_t)*(unsigned __int16 *)(v86 + 152)) << 7;
            }
            *uint64_t v84 = v88;
            (*(void (**)(uint64_t))(*(void *)v85 + 96))(v85);
            double v89 = v76 + (double)v88;
            v298[v285] = v89;
            if (!(_WORD)v77) {
              goto LABEL_109;
            }
            uint64_t v35 = (uint64_t)v297;
            LODWORD(v50) = v283;
            LODWORD(v69) = v273;
          }
          if (v50 == v69)
          {
            int64_t v90 = 0;
          }
          else
          {
            (*(void (**)(uint64_t))(*(void *)v85 + 88))(v85);
            (**(void (***)(uint64_t, uint64_t, uint64_t))v85)(v85, 1, v85 + v82 + 131);
            uint64_t v91 = *(void *)(v35 + 9496);
            unsigned int v92 = (*(uint64_t (**)(uint64_t))(*(void *)v85 + 80))(v85);
            if (a11) {
              int64_t v90 = ((v92 * (unint64_t)*(unsigned __int16 *)(v91 + 152)) << 15)
            }
                  / *(unsigned __int16 *)(v91 + 4 * v259 + 162);
            else {
              int64_t v90 = (v92 * (unint64_t)*(unsigned __int16 *)(v91 + 152)) << 7;
            }
            (*(void (**)(uint64_t))(*(void *)v85 + 96))(v85);
          }
          if ((v77 & 0xFFFE) != 0) {
            int v93 = v77 - 1;
          }
          else {
            int v93 = 1;
          }
          if (v93 <= v77)
          {
            int v94 = 0;
            do
            {
              double v95 = (double)(int)(v75 - (v77 << v287)) * (double)(int)(v75 - (v77 << v287)) * v45;
              int64_t v96 = sub_1D0D43884((uint64_t)v297, (__int16)v77, v75 >> 31, v81, v289, v293, v295, v291, a11, 1);
              double v97 = v95 + (double)v96 + (double)v90;
              if (v97 < v89)
              {
                v298[v285] = v97;
                *uint64_t v84 = v90;
                int64_t v88 = v90;
                double v89 = v95 + (double)v96 + (double)v90;
                int v94 = v77;
              }
              BOOL v26 = v77-- <= v93;
            }
            while (!v26);
LABEL_115:
            *((_WORD *)&v301[1] + v274) = v94;
            uint64_t v35 = (uint64_t)v297;
            uint64_t v19 = v270;
            if (*(unsigned char *)(v297[1185] + 148))
            {
              v303[v285 + 1334] = (int)(v75 - (v94 << v287)) >> (v287 - 8);
              if (v94)
              {
                unint64_t v98 = sub_1D0D43884((uint64_t)v297, (__int16)v94, v80, v81, v289, v293, v295, v291, a11, 0);
                v303[v285 + 310] = sub_1D0D43884((uint64_t)v297, (__int16)(v94 + 1), v80, v81, v289, v293, v295, v291, a11, 0)- v98;
                unint64_t v99 = sub_1D0D43884((uint64_t)v297, (__int16)(v94 - 1), v80, v81, v289, v293, v295, v291, a11, 0) - v98;
                uint64_t v100 = v302;
              }
              else
              {
                unint64_t v99 = sub_1D0D43884((uint64_t)v297, 1, v75 >> 31, v81, v289, v293, v295, v291, a11, 0);
                uint64_t v100 = v303;
              }
              *(void *)&v100[8 * v285 + 2480] = v99;
              if (v283 == v273)
              {
                uint64_t v101 = 0;
              }
              else
              {
                uint64_t v102 = sub_1D0D43C44(*(void *)(v297[1186] + 944), 1, v269);
                uint64_t v101 = v102 - sub_1D0D43C44(*(void *)(v297[1186] + 944), 0, v269);
              }
              uint64_t v19 = v270;
              v301[v285 + 257] = v101;
              uint64_t v35 = (uint64_t)v297;
            }
            int v103 = v291 + 2;
            if (v295 >= 8) {
              int v103 = 1;
            }
            int v104 = v293;
            if ((int)v293 >= 3) {
              int v105 = 3;
            }
            else {
              int v105 = v293;
            }
            if (v94 > 3 << v293 && v94 >= v103) {
              int v104 = v105 + 1;
            }
            unsigned int v293 = v104;
            uint64_t v50 = v283;
            if (v94 < 1)
            {
              int v58 = v276 + v88;
              uint64_t v68 = v275;
              int v109 = v275 != 0;
              double v110 = (double)v88;
              double v113 = -0.0;
              if (!v275) {
                double v113 = (double)v88;
              }
              double v67 = v67 + v113;
              int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
              int v28 = 1 << a9;
              int v47 = v265;
              uint64_t v46 = v266;
              int v112 = v285;
              int v53 = v278;
              uint64_t v63 = v263;
              uint64_t v57 = v264;
              if (!v94)
              {
                int v21 = a9;
                unsigned int v54 = v280;
                goto LABEL_151;
              }
              unsigned int v54 = v280;
            }
            else
            {
              ++v295;
              if ((v278 - 1) >= 2) {
                int v107 = v278;
              }
              else {
                int v107 = v278 + 1;
              }
              if (v94 == 1) {
                int v53 = v107;
              }
              else {
                int v53 = 0;
              }
              if (v94 == 1) {
                int v108 = v291;
              }
              else {
                int v108 = 0;
              }
              int v291 = v108;
              int v58 = v276 + v88;
              uint64_t v68 = v275;
              int v109 = v275 != 0;
              double v110 = (double)v88;
              double v111 = -0.0;
              if (!v275) {
                double v111 = (double)v88;
              }
              double v67 = v67 + v111;
              int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
              int v28 = 1 << a9;
              int v47 = v265;
              unsigned int v54 = v280;
              uint64_t v46 = v266;
              int v112 = v285;
              uint64_t v63 = v263;
              uint64_t v57 = v264;
            }
            double v66 = v66 + v76;
            double v271 = v271 + v89 - v110;
            v272 += v109;
            int v262 = 1;
            int v21 = a9;
LABEL_151:
            double v55 = v89 + v55;
            uint64_t v43 = (v112 + 1);
            goto LABEL_152;
          }
LABEL_109:
          int v94 = 0;
          goto LABEL_115;
        }
LABEL_152:
        uint64_t v65 = v68 - 1;
      }
      while (v68);
      if ((v50 & 0x80000000) != 0)
      {
        if (!v262)
        {
          if (v46 >= 1)
          {
LABEL_162:
            --v46;
            uint64_t v56 = v43;
            int v47 = v265;
            continue;
          }
LABEL_229:
          int v163 = 0;
          int v164 = v28 << v21;
          uint64_t v140 = 0xFFFFFFFFLL;
          int v165 = v265;
          goto LABEL_238;
        }
        goto LABEL_178;
      }
      break;
    }
    uint64_t v114 = (int)v54 - v46;
    v303[v114 + 2358] = 0;
    if (!v46) {
      goto LABEL_178;
    }
    int v115 = v58;
    if (v262)
    {
      if ((int)v54 <= v46)
      {
        int v47 = v265;
      }
      else
      {
        int v279 = v53;
        uint64_t v286 = v43;
        uint64_t v120 = v50;
        double v121 = 0.0;
        if (!v272) {
          double v121 = v67;
        }
        double v122 = v55 - v121;
        uint64_t v123 = v35;
        if (v272) {
          int v124 = v58;
        }
        else {
          int v124 = (int)((double)v58 - v67);
        }
        uint64_t v125 = (int)v54 - v46;
        int64_t v126 = sub_1D0D43D28(v123, 1, v258, a11);
        int64_t v127 = sub_1D0D43D28(v123, 0, v258, a11);
        v303[v125 + 2358] = v126;
        double v55 = v122 + (double)v126;
        double v52 = v122 + v66 + (double)v127 - v271 - (double)v124;
        if (v52 < v55)
        {
          v303[v125 + 2358] = v127;
          uint64_t v128 = 15;
          uint64_t v35 = (uint64_t)v297;
          uint64_t v50 = v120;
          int v28 = 1 << a9;
          int v47 = v265;
          uint64_t v46 = v266;
          uint64_t v43 = v286;
          int v53 = v279;
          int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
          do
          {
            uint64_t v129 = v246 + v267[v128];
            if (*((_WORD *)&v301[1] + v129))
            {
              *((_WORD *)&v301[1] + v129) = 0;
              uint64_t v130 = &v298[v252];
              *uint64_t v130 = v130[1024];
              v130[2048] = 0.0;
            }
            --v128;
            ++v252;
          }
          while (v128 != -1);
          BOOL v131 = 1;
LABEL_179:
          BOOL v26 = v46-- < 1;
          if (v26)
          {
            if (v131) {
              goto LABEL_182;
            }
            goto LABEL_229;
          }
          continue;
        }
        uint64_t v35 = (uint64_t)v297;
        uint64_t v50 = v120;
        int v28 = 1 << a9;
        int v47 = v265;
        uint64_t v46 = v266;
        uint64_t v43 = v286;
        int v53 = v279;
      }
      int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
LABEL_178:
      BOOL v131 = (int)v50 >= 0;
      v251 |= 1 << v248;
      double v52 = v55;
      goto LABEL_179;
    }
    break;
  }
  uint64_t v116 = v43;
  int v117 = v53;
  uint64_t v118 = v50;
  unint64_t v119 = sub_1D0D43D28(v35, 0, v258, a11);
  uint64_t v50 = v118;
  int v53 = v117;
  uint64_t v43 = v116;
  uint64_t v46 = v266;
  double v55 = v55 + (double)(uint64_t)(v119 - v115);
  v303[v114 + 2358] = v119;
  int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
  if (v266 > 0) {
    goto LABEL_162;
  }
  double v52 = v55;
LABEL_182:
  unsigned int v281 = v54;
  if (v242[10] == 1) {
    goto LABEL_189;
  }
  if (v242[11])
  {
    if (__PAIR64__(a11, a10) || !*(_DWORD *)(v35 + 8)) {
      goto LABEL_189;
    }
LABEL_188:
    int v132 = v50;
    int64_t v133 = sub_1D0D43E60(v35, 1, a11);
    int64_t v134 = sub_1D0D43E60(v35, 0, a11);
  }
  else
  {
    if (!__PAIR64__(a11, a10)) {
      goto LABEL_188;
    }
LABEL_189:
    int v132 = v50;
    BOOL v135 = v21 > 2 && a10;
    if (a11) {
      BOOL v136 = v135;
    }
    else {
      BOOL v136 = !a10;
    }
    int64_t v133 = sub_1D0D43F78(v35, 1, v136, a11);
    int64_t v134 = sub_1D0D43F78(v35, 0, v136, a11);
  }
  LODWORD(v50) = v132;
  if ((v281 & 0x80000000) != 0) {
    goto LABEL_229;
  }
  int v137 = 0;
  double v138 = v260 + (double)v134;
  double v139 = (double)v133;
  uint64_t v140 = 0xFFFFFFFFLL;
  char v141 = a9 - 2;
  int v277 = 4 << v21;
  uint64_t v142 = 16 * v281;
  double v143 = v52 + v139;
  uint64_t v144 = v281;
  int v284 = v132;
  do
  {
    unsigned int v145 = v253[v144];
    uint64_t v288 = v144;
    double v143 = v143 - (double)(uint64_t)v303[v281 - v144 + 2358];
    if ((v251 >> v145))
    {
      int v292 = (v145 >> v141) * v277 + 4 * (v145 & ~(-1 << v254));
      uint64_t v146 = 15;
      int v147 = ~(-1 << a9);
      uint64_t v290 = v142;
      while (1)
      {
        unsigned int v148 = v142 + v146;
        if ((int)v142 + (int)v146 <= (int)v50)
        {
          int v149 = v292 + v44[v146];
          int v150 = *((__int16 *)&v301[1] + v149);
          int v151 = &v298[v137];
          if (*((_WORD *)&v301[1] + v149))
          {
            int v294 = v137;
            unsigned int v296 = v140;
            int v152 = v149 & v147;
            int v153 = v149 >> v21;
            uint64_t v154 = v35;
            if (v243 == 2) {
              int v155 = v153;
            }
            else {
              int v155 = v152;
            }
            if (v243 == 2) {
              int v156 = v152;
            }
            else {
              int v156 = v153;
            }
            uint64_t v157 = *(void *)(*(void *)(v154 + 9488) + 944);
            (*(void (**)(uint64_t))(*(void *)v157 + 88))(v157);
            sub_1D0D3DDE4(v157, v155, v21, a11, v157 + 91);
            sub_1D0D3DDE4(v157, v156, v21, a11, v157 + 109);
            if ((unint64_t)(v155 - 4) <= 0x1B) {
              (*(void (**)(uint64_t, void, void))(*(void *)v157 + 24))(v157, v155 - byte_1D0DA7680[byte_1D0DA7660[v155]], (byte_1D0DA7660[v155] - 2) >> 1);
            }
            if ((unint64_t)(v156 - 4) <= 0x1B) {
              (*(void (**)(uint64_t, void, void))(*(void *)v157 + 24))(v157, v156 - byte_1D0DA7680[byte_1D0DA7660[v156]], (byte_1D0DA7660[v156] - 2) >> 1);
            }
            uint64_t v35 = (uint64_t)v297;
            uint64_t v158 = v297[1187];
            int v21 = a9;
            int v28 = 1 << a9;
            unint64_t v159 = (*(unsigned int (**)(uint64_t))(*(void *)v157 + 80))(v157)
                 * (unint64_t)*(unsigned __int16 *)(v158 + 152);
            if (a11) {
              int64_t v160 = (v159 << 15) / *(unsigned __int16 *)(v158 + 4 * v259 + 162);
            }
            else {
              int64_t v160 = v159 << 7;
            }
            (*(void (**)(uint64_t))(*(void *)v157 + 96))(v157);
            double v161 = (double)*((uint64_t *)v151 + 2048);
            double v162 = v143 + (double)v160 - v161;
            if (v162 >= v138) {
              uint64_t v140 = v296;
            }
            else {
              uint64_t v140 = v148;
            }
            if (v150 > 1)
            {
              int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
              LODWORD(v50) = v284;
              goto LABEL_231;
            }
            int v137 = v294;
            if (v162 < v138) {
              double v138 = v143 + (double)v160 - v161;
            }
            double v143 = v143 - v298[v294] + v298[v294 + 1024];
            int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
            int v147 = ~(-1 << a9);
            LODWORD(v50) = v284;
            uint64_t v142 = v290;
          }
          else
          {
            double v143 = v143 - (double)*((uint64_t *)v151 + 2048);
            int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
          }
          ++v137;
        }
        if (--v146 == -1) {
          goto LABEL_227;
        }
      }
    }
    v137 += 16;
LABEL_227:
    uint64_t v144 = v288 - 1;
    v142 -= 16;
    char v141 = a9 - 2;
  }
  while (v288 > 0);
LABEL_231:
  int v164 = v28 << v21;
  int v165 = v265;
  int v163 = 0;
  if ((v140 & 0x80000000) != 0)
  {
    uint64_t v19 = v270;
  }
  else
  {
    unsigned int v166 = 0;
    uint64_t v19 = v270;
    do
    {
      unsigned int v167 = v253[(unint64_t)v166 >> 4];
      int v168 = v44[v166 & 0xF] + 4 * ((v249 + 255) & v167) + (v167 >> v254) * (4 << v21);
      uint64_t v169 = v168 >> v21;
      uint64_t v170 = v169 * v244 + (v168 & v265);
      uint64_t v171 = v169 * v282 + (v168 & v265);
      int v172 = *((__int16 *)&v301[1] + v168);
      v163 += v172;
      if (*(__int16 *)(v245 + 2 * v170) < 0) {
        int v172 = -v172;
      }
      *(_WORD *)(v270 + 2 * v171) = v172;
      ++v166;
    }
    while (v140 + 1 != v166);
  }
LABEL_238:
  int v173 = v140 + 1;
  if ((int)v140 + 1 < v164)
  {
    do
    {
      if (v173 <= 0) {
        int v174 = -(-v173 & 0xF);
      }
      else {
        int v174 = v173 & 0xF;
      }
      int v175 = v44[v174]
           + 4 * ((v249 - 1) & v253[v173 >> 4])
           + (v253[v173 >> 4] >> v254) * (4 << v21);
      *(_WORD *)(v19 + 2 * ((v175 >> v21) * v282 + (v175 & v165))) = 0;
      ++v173;
    }
    while (v164 != v173);
  }
  if (*(unsigned char *)(*(void *)(v35 + 9480) + 148)) {
    BOOL v176 = v163 < 2;
  }
  else {
    BOOL v176 = 1;
  }
  if (!v176)
  {
    int v177 = v241 + *(unsigned __int8 *)(*(void *)(v35 + 9472) + 2097);
    uint64_t v178 = *(void *)(v35 + 9496);
    if (v177 >= 63) {
      int v179 = 63;
    }
    else {
      int v179 = v241 + *(unsigned __int8 *)(*(void *)(v35 + 9472) + 2097);
    }
    unsigned int v180 = v179 & ~(v179 >> 31);
    if (a11)
    {
      unsigned int v181 = *(unsigned __int16 *)(*(void *)(v178 + 8 * v259 + 56) + 2 * v180);
      if ((v140 & 0x80000000) != 0) {
        goto LABEL_325;
      }
    }
    else
    {
      unsigned int v181 = dword_1D0DA667C[70 * *(unsigned __int8 *)(v178 + 172) + v180];
      if ((v140 & 0x80000000) != 0) {
        goto LABEL_325;
      }
    }
    int v182 = v177 / 6;
    int v183 = a39H[v177 % 6];
    double v184 = (float)((float)((v183 * v183) << (2 * v182)) / (float)v181) * 0.0625 + 0.5;
    uint64_t v185 = v140 >> 4;
    int v186 = v50 - v140;
    int v187 = 4 << v21;
    uint64_t v188 = (uint64_t)v184;
    uint64_t v189 = v185;
    while (2)
    {
      uint64_t v190 = 0;
      int v191 = 0;
      int v192 = (v253[v189] >> v254) * v187 + 4 * (v253[v189] & ~(-1 << v254));
      unsigned int v193 = -1;
      int v194 = 16;
      do
      {
        int v195 = *(unsigned __int16 *)(v19
                                   + 2
                                   * (((v192 + v44[v190]) & v257) + ((v192 + v44[v190]) >> v21) * v282));
        if (v194 == 16 && v195 != 0) {
          int v194 = v190;
        }
        int v197 = (__int16)v195;
        if ((v195 & 0x8000u) != 0) {
          int v197 = -(__int16)v195;
        }
        int v198 = v191 + v197;
        if (*(_WORD *)(v19 + 2 * (((v192 + v44[v190]) & v257) + ((v192 + v44[v190]) >> v21) * v282)))
        {
          int v191 = v198;
          unsigned int v193 = v190;
        }
        ++v190;
      }
      while (v190 != 16);
      if ((int)(v193 - v194) < 4
        || (int v199 = v192 + v44[v194],
            unsigned int v200 = *(unsigned __int16 *)(v19 + 2 * ((v199 & v257) + (v199 >> v21) * v282)),
            (v191 & 1) == v200 >> 15))
      {
        if (v189 == v185) {
          int v201 = v193 + 1;
        }
        else {
          int v201 = 16;
        }
        v186 += v201;
        goto LABEL_323;
      }
      if (v189 == v185) {
        uint64_t v202 = v193;
      }
      else {
        uint64_t v202 = 15;
      }
      if ((v202 & 0x80000000) != 0)
      {
        int v205 = 0;
        int v213 = -1;
LABEL_313:
        uint64_t v231 = v213 & v257;
        uint64_t v232 = v213 >> v21;
        uint64_t v233 = v231 + v232 * v282;
        int v234 = *(__int16 *)(v19 + 2 * v233);
        uint64_t v235 = v231 + v232 * v244;
        if (v234 >= 0) {
          LOWORD(v236) = *(_WORD *)(v19 + 2 * v233);
        }
        else {
          int v236 = -v234;
        }
        int v237 = *(__int16 *)(v245 + 2 * v235);
        if ((unsigned __int16)v236 == 0x7FFF) {
          int v238 = -1;
        }
        else {
          int v238 = v205;
        }
        if (v237 >= 0) {
          LOWORD(v239) = v238;
        }
        else {
          int v239 = -v238;
        }
        *(_WORD *)(v19 + 2 * v233) = v239 + v234;
LABEL_323:
        BOOL v26 = v189-- <= 0;
        if (v26) {
          goto LABEL_325;
        }
        continue;
      }
      break;
    }
    uint64_t v203 = v140;
    uint64_t v204 = 0;
    int v205 = 0;
    uint64_t v206 = v194;
    unsigned int v207 = v200 >> 15;
    uint64_t v208 = &v301[v186 + 257];
    uint64_t v209 = &v303[v186 + 310];
    uint64_t v211 = v202 - v194;
    uint64_t v212 = 0x7FFFFFFFFFFFFFFFLL;
    int v213 = -1;
    uint64_t v214 = v202;
    uint64_t v215 = v202 - v193;
    while (2)
    {
      int v216 = v192 + v267[v214];
      uint64_t v217 = v216 & v257;
      uint64_t v218 = v216 >> a9;
      __int16 v219 = *(_WORD *)(v270 + 2 * (v217 + v218 * v282));
      uint64_t v210 = &v303[v186 + 1334];
      uint64_t v220 = v210[v204];
      if (v219)
      {
        uint64_t v221 = v220 * v188;
        uint64_t v222 = v221 + (*(void *)&v302[8 * v186 + 2480 + 8 * v204] << 7);
        if (v219 >= 0) {
          LOWORD(v223) = v219;
        }
        else {
          int v223 = -v219;
        }
        if ((unsigned __int16)v223 == 1) {
          uint64_t v222 = v222 - (v208[v204] << 7) - 0x8000;
        }
        uint64_t v224 = (v209[v204] << 7) - v221;
        if ((unsigned __int16)v223 == 1 && v215 == v204 && v189 == v185) {
          uint64_t v227 = v222 - 0x20000;
        }
        else {
          uint64_t v227 = v222;
        }
        if (v224 >= v227)
        {
          if ((unsigned __int16)v223 == 1 && v211 == v204) {
            uint64_t v224 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v224 = v227;
          }
          int v229 = -1;
LABEL_307:
          if (v224 < v212)
          {
            uint64_t v212 = v224;
            int v205 = v229;
            int v213 = v192 + v267[v214];
          }
          ++v204;
          BOOL v26 = v214-- <= 0;
          if (v26)
          {
            v186 += v202 + 1;
            uint64_t v19 = v270;
            LOBYTE(v21) = a9;
            int v44 = &byte_1D0DAF020[64 * v243 + 16 * v254];
            uint64_t v140 = v203;
            goto LABEL_313;
          }
          continue;
        }
      }
      else
      {
        if (v220 >= 0) {
          uint64_t v230 = v210[v204];
        }
        else {
          uint64_t v230 = -v220;
        }
        uint64_t v224 = (v209[v204] << 7) - v230 * v188 + (v208[v204] << 7);
        if (v214 < v206 && v207 != *(unsigned __int16 *)(v245 + 2 * (v217 + v218 * v244)) >> 15) {
          uint64_t v224 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      break;
    }
    int v229 = 1;
    goto LABEL_307;
  }
LABEL_325:
  char v37 = (int)v140 >= 0;
  return v37 & 1;
}

uint64_t sub_1D0D42E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, char a11, int a12)
{
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v100 = v16;
  uint64_t v22 = v21;
  int v23 = v14;
  int v24 = v13;
  uint64_t v25 = v12;
  v104[513] = *MEMORY[0x1E4F143B8];
  int v102 = 0;
  uint64_t v26 = *(void *)(v12 + 9488);
  if (((v14 | v13) & 0x80000000) == 0
    && ((int v27 = v13 - *(_DWORD *)(v26 + 832),
         int v28 = v14 - *(_DWORD *)(v26 + 836),
         int v29 = *(unsigned __int8 *)(v26 + 828),
         v27 < v29)
      ? (BOOL v30 = v28 < v29)
      : (BOOL v30 = 0),
        v30))
  {
    uint64_t v31 = (unsigned __int8 *)(*(void *)(v26 + 888) + 16 * (*(void *)(v26 + 864) * ((uint64_t)v28 >> 2) + (v27 >> 2)));
  }
  else
  {
    uint64_t v31 = 0;
  }
  __int16 v32 = *v15;
  if ((*v15 & 0x100) != 0)
  {
    if (a9 == 31)
    {
      char v34 = 0;
    }
    else
    {
      int v35 = 0;
      char v34 = 0;
      unsigned int v36 = 1 << a9;
      if (1 << a9 <= 1) {
        unsigned int v36 = 1;
      }
      do
      {
        uint64_t v37 = 0;
        do
        {
          int v38 = *(unsigned __int16 *)(v22 + v37);
          *(_WORD *)(v20 + v37) = v38;
          v34 |= v38 != 0;
          v37 += 2;
        }
        while (2 * v36 != v37);
        ++v35;
        v20 += 2 * v17;
        v22 += 2 * v16;
      }
      while (v35 != v36);
    }
    return v34 & 1;
  }
  v104[0] = 0;
  int v103 = 0;
  sub_1D0D436F8(v12, v31, v32 >> 9, a9, a10, (int *)v104 + 1, &v103, v104, &v102, a11);
  if (a10) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = *(int *)(v26 + 212);
  }
  int v39 = dword_1D0DA74CC[v33];
  if (a12 && *(unsigned char *)(v25 + 9569))
  {
    uint64_t v40 = *(int **)(v26 + 976);
    int v41 = *v40;
    if (*v40 <= a9)
    {
      int v44 = *(_DWORD *)(v26 + 16);
      int v45 = *(_DWORD *)(v26 + 20);
      int v42 = v24;
      int v43 = v23;
      LOBYTE(v41) = a9;
    }
    else
    {
      int v42 = (-1 << v41) & v24;
      int v43 = (-1 << v41) & v23;
      int v44 = *(_DWORD *)(v26 + 16);
      int v45 = *(_DWORD *)(v26 + 20);
    }
    unsigned int v46 = sub_1D0D252CC(v40, v42, v43, v41, v44, v45, 4);
    if (v46 >= 2)
    {
      unsigned int v47 = __clz(v46);
      if (v47) {
        unsigned int v48 = ((byte_1D0DAE264[(unint64_t)(v46 << (v47 + 1)) >> 24] << 12) | 0x200000u) >> ((v47 + 1) >> 1);
      }
      else {
        unsigned int v48 = (11585
      }
             * (((byte_1D0DAE264[(unint64_t)(v46 << (v47 + 1)) >> 24] << 12) | 0x200000u) >> ((v47 + 1) >> 1))) >> 14;
      unsigned int v46 = (v48 + 16) >> 5;
    }
    signed int v49 = *(_DWORD *)(v25 + 9572);
    int v50 = 2 * (v49 - v46) + 256;
    if (v50 <= 128) {
      int v50 = 128;
    }
    if (v49 < (int)v46) {
      int v39 = v50;
    }
    else {
      int v39 = 256;
    }
  }
  else if (*(unsigned char *)(*(void *)(v25 + 9464) + 58) == 2)
  {
    int v39 = 171;
  }
  uint64_t v51 = (v39 << (v103 - 9));
  if (*(unsigned char *)(*(void *)(v25 + 9472) + 274))
  {
    uint64_t v52 = a9 - 2;
    if (*(void *)(*(void *)(*(void *)(v25 + 9464) + 32) + 1600))
    {
      char v53 = (*(uint64_t (**)(uint64_t))(v25 + 8 * v52 + 9328))(v51);
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v52 = a9 - 2;
  }
  char v53 = (*(uint64_t (**)(uint64_t))(v25 + 8 * v52 + 9264))(v51);
LABEL_43:
  char v34 = v53;
  if (*(unsigned char *)(*(void *)(v25 + 9480) + 148))
  {
    if (a11)
    {
      uint64_t v101 = 0;
      int v54 = 1 << a9;
      (*(void (**)(void, uint64_t, uint64_t, uint64_t *, char *))(v25 + 8 * (a9 > 2) + 9192))((1 << a9), v18, v20, &v101, (char *)&v101 + 4);
      if (HIDWORD(v101) >= 2)
      {
        int v55 = a9 == 3 ? 4 * v102 : 0;
        if (v54 << a9 >= 16)
        {
          uint64_t v56 = a9 - 2;
          uint64_t v57 = (char *)*(&off_1E689A008 + v56) + v55;
          int v58 = &byte_1D0DAF020[64 * (uint64_t)v102 + 16 * v56];
          uint64_t v59 = (v54 << a9) >> 4;
          int v60 = ~(-1 << v56);
          int v62 = v54 - 1;
          int v63 = -1;
          unint64_t v99 = v57;
          char v98 = v60;
          do
          {
            uint64_t v64 = 0;
            int v65 = 0;
            uint64_t v66 = v59--;
            int v67 = (v57[v59] >> v56) * (4 << a9)
                + 4 * (v57[v59] & v60);
            int v68 = -1;
            LODWORD(v69) = 16;
            do
            {
              int v61 = ~(-1 << a9);
              int v70 = *(unsigned __int16 *)(v20
                                        + 2 * (((v67 + v58[v64]) & v61) + ((v67 + v58[v64]) >> a9) * v18));
              if (v69 != 16 || v70 == 0) {
                uint64_t v69 = v69;
              }
              else {
                uint64_t v69 = v64;
              }
              int v72 = (__int16)v70;
              if ((v70 & 0x8000u) != 0) {
                int v72 = -(__int16)v70;
              }
              int v73 = v65 + v72;
              if (*(_WORD *)(v20 + 2 * (((v67 + v58[v64]) & v61) + ((v67 + v58[v64]) >> a9) * v18)))
              {
                int v65 = v73;
                int v68 = v64;
              }
              ++v64;
            }
            while (v64 != 16);
            if (v63 == -1 && v68 > -1) {
              int v63 = v59;
            }
            if (v68 - (int)v69 >= 4)
            {
              int v75 = v67 + v58[(int)v69];
              unsigned int v76 = *(unsigned __int16 *)(v20 + 2 * ((v75 >> a9) * v18 + (v75 & v62)));
              if ((v65 & 1) != v76 >> 15)
              {
                if (v63 == v59) {
                  uint64_t v77 = v68;
                }
                else {
                  uint64_t v77 = 15;
                }
                if ((v77 & 0x80000000) == 0)
                {
                  int v78 = 0;
                  int v79 = 0;
                  unsigned int v80 = v76 >> 15;
                  signed int v81 = 0x80000000;
                  int v82 = -1;
                  while (1)
                  {
                    int v83 = v67 + v58[v77];
                    uint64_t v84 = v83 >> a9;
                    LOWORD(v85) = *(_WORD *)(v20 + 2 * (v84 * v18 + (v83 & v62)));
                    int v86 = *((_DWORD *)&v104[16 * v84 + 1] + (v83 & v62));
                    if ((_WORD)v85)
                    {
                      if (v86 <= 0)
                      {
                        BOOL v87 = v69 == v77;
                        if ((v85 & 0x8000u) != 0) {
                          int v85 = -(__int16)v85;
                        }
                        BOOL v88 = (unsigned __int16)v85 == 1;
                        if (v87 && v88) {
                          int v86 = 0x80000000;
                        }
                        else {
                          int v86 = -v86;
                        }
                        if (!v87 || !v88) {
                          int v79 = -1;
                        }
                        goto LABEL_88;
                      }
                    }
                    else if (v77 < (int)v69 && v80 != *(unsigned __int16 *)(v22 + 2 * ((v83 & v62) + v84 * v100)) >> 15)
                    {
                      int v86 = 0x80000000;
                    }
                    int v79 = 1;
LABEL_88:
                    if (v86 > v81)
                    {
                      signed int v81 = v86;
                      int v78 = v79;
                      int v82 = v67 + v58[v77];
                    }
                    BOOL v30 = v77-- <= 0;
                    if (v30) {
                      goto LABEL_94;
                    }
                  }
                }
                int v78 = 0;
                int v82 = -1;
LABEL_94:
                uint64_t v89 = v82 >> a9;
                uint64_t v90 = v89 * v18 + (v82 & v62);
                int v91 = *(__int16 *)(v20 + 2 * v90);
                uint64_t v92 = v89 * v100 + (v82 & v62);
                if (v91 >= 0) {
                  LOWORD(v93) = *(_WORD *)(v20 + 2 * v90);
                }
                else {
                  int v93 = -v91;
                }
                int v94 = *(__int16 *)(v22 + 2 * v92);
                if ((unsigned __int16)v93 == 0x7FFF) {
                  int v95 = -1;
                }
                else {
                  int v95 = v78;
                }
                if (v94 >= 0) {
                  LOWORD(v96) = v95;
                }
                else {
                  int v96 = -v95;
                }
                *(_WORD *)(v20 + 2 * v90) = v96 + v91;
                uint64_t v57 = v99;
                LOBYTE(v60) = v98;
              }
            }
          }
          while (v66 > 1);
        }
      }
    }
  }
  return v34 & 1;
}

uint64_t sub_1D0D43530(uint64_t result, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  uint64_t v12 = *(void *)(result + 32);
  int v13 = a2 >> 9;
  if (a8)
  {
    v13 += *(char *)(*(void *)(result + 24) + a8 - 1 + 3) + *(char *)(v12 + a8 + 656);
    int v14 = *(unsigned __int8 **)(v12 + 16);
    int v15 = v14[2099];
    if (v13 <= -v15) {
      int v13 = -v15;
    }
    if (v14[2148] == 1)
    {
      if (v13 >= 57) {
        int v16 = 57;
      }
      else {
        int v16 = v13;
      }
      BOOL v17 = __OFSUB__(v16, 30);
      int v18 = v16 - 30;
      if (v18 < 0 == v17) {
        int v13 = byte_1D0DAE600[v18];
      }
    }
    else if (v13 >= 51)
    {
      int v13 = 51;
    }
    uint64_t v20 = v14 + 223;
  }
  else
  {
    uint64_t v19 = *(void *)(v12 + 16);
    int v15 = *(unsigned __int8 *)(v19 + 2097);
    uint64_t v20 = (unsigned __int8 *)(v19 + 222);
  }
  uint64_t v21 = (a7 + 3);
  if (v13 < 0)
  {
    v13 += v15;
    uint64_t v21 = v21 + *v20;
    if ((a2 & 0x100) == 0) {
      goto LABEL_16;
    }
  }
  else if ((a2 & 0x100) == 0)
  {
LABEL_16:
    if (*(unsigned char *)(*(void *)(result + 9472) + 274))
    {
      if (*(_DWORD *)(result + 4) == 1) {
        int v22 = 0;
      }
      else {
        int v22 = 3;
      }
      uint64_t v23 = *(void *)(*(void *)(result + 9464) + 32) + 390 * a7 + 65 * (v22 + a8) - 740;
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v28 = result + 9264;
    uint64_t v29 = a39H[v13 % 6] << (v13 / 6);
    if (v23) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * a7 + 80))(v21, v29, v23, a3, a4, a5, a6);
    }
    else {
      return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * a7 + 16))((v21 - 4), v29, a3, a4, a5, a6);
    }
  }
  if (a7 != 31)
  {
    int v24 = 0;
    unsigned int v25 = 1 << a7;
    if (1 << a7 <= 1) {
      unsigned int v25 = 1;
    }
    uint64_t v26 = 2 * a6;
    do
    {
      uint64_t v27 = 0;
      do
      {
        *(_WORD *)(a5 + v27) = *(_WORD *)(a3 + v27);
        v27 += 2;
      }
      while (2 * v25 != v27);
      ++v24;
      a5 += v26;
      a3 += 2 * a4;
    }
    while (v24 != v25);
  }
  return result;
}

uint64_t sub_1D0D436F8(uint64_t result, unsigned __int8 *a2, int a3, int a4, int a5, int *a6, _DWORD *a7, _DWORD *a8, int *a9, char a10)
{
  if (!a5)
  {
    *a6 = a3;
    uint64_t v23 = *(void *)(result + 9472);
    int v14 = *(unsigned __int8 *)(v23 + 2097);
    *a8 = *(unsigned __int8 *)(v23 + 222);
    if (!a10 || *(_DWORD *)(result + 4) != 1) {
      goto LABEL_34;
    }
    if (a4 > 3) {
      int v22 = 0;
    }
    else {
      int v22 = byte_1D0DA7278[*a2];
    }
    goto LABEL_33;
  }
  uint64_t v10 = 560;
  if (a5 != 1) {
    uint64_t v10 = 561;
  }
  uint64_t v11 = 14;
  if (a5 != 1) {
    uint64_t v11 = 15;
  }
  int v12 = *(char *)(*(void *)(result + 9464) + v10)
      + a3
      + *(char *)(*(void *)(*(void *)(result + 9464) + 32) + v11);
  uint64_t v13 = *(void *)(result + 9472);
  int v14 = *(unsigned __int8 *)(v13 + 2099);
  if (v12 >= 57) {
    int v15 = 57;
  }
  else {
    int v15 = v12;
  }
  if (v12 <= -v14) {
    int v16 = -v14;
  }
  else {
    int v16 = v15;
  }
  if (v16 >= 30) {
    int v16 = byte_1D0DAE600[v16 - 30];
  }
  *a6 = v16;
  *a8 = *(unsigned __int8 *)(v13 + 223);
  if (a10 && *(_DWORD *)(result + 4) == 1)
  {
    unsigned int v17 = a2[1];
    if (v17 == 35) {
      unsigned int v17 = **(unsigned __int8 **)(*(void *)(result + 9488) + 888);
    }
    if ((a4 - 1) <= 1)
    {
      int v18 = 26 - v17;
      if (v17 >= 0x1A) {
        int v18 = v17 - 26;
      }
      int v19 = 10 - v17;
      BOOL v20 = v17 >= 0xA;
      int v21 = v17 - 10;
      if (!v20) {
        int v21 = v19;
      }
      if (v18 < 5 || v21 <= 4)
      {
        if (v21 >= 5) {
          int v22 = 1;
        }
        else {
          int v22 = 2;
        }
LABEL_33:
        *a9 = v22;
      }
    }
  }
LABEL_34:
  unsigned int v24 = *a6;
  if (*a6 < 0)
  {
    int v26 = v24 + v14;
    *a6 = v26;
    int v25 = v26 / 6 - (*a8 + a4);
  }
  else
  {
    int v25 = v24 / 6 - a4;
  }
  *a7 = v25 + 21;
  return result;
}

unint64_t sub_1D0D43884(uint64_t a1, int a2, int a3, int a4, unsigned int a5, uint64_t a6, int a7, int a8, int a9, char a10)
{
  uint64_t v16 = *(void *)(*(void *)(a1 + 9488) + 944);
  (*(void (**)(uint64_t))(*(void *)v16 + 88))(v16);
  (*(void (**)(uint64_t, BOOL))(*(void *)v16 + 8))(v16, a3 != 0);
  uint64_t v17 = v16 + 16 * (a9 > 0) + 175;
  uint64_t v18 = v16 + 4 * (a9 > 0) + 199;
  int v19 = a8 + 2;
  if (a7 >= 8) {
    int v19 = 1;
  }
  int v20 = a2 - v19;
  if (a2 >= v19)
  {
    uint64_t v21 = (v20 - (3 << a6));
    if (v20 >= 3 << a6)
    {
      int v22 = 1 << a6;
      uint64_t v23 = a6;
      while ((int)v21 >= v22)
      {
        uint64_t v23 = (v23 + 1);
        uint64_t v21 = (v21 - v22);
        int v22 = 1 << v23;
      }
      (*(void (**)(uint64_t, void))(*(void *)v16 + 24))(v16, ((1 << (v23 - a6 + 4)) - 2));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 24))(v16, v21, v23);
      uint64_t v18 = v16 + 4 * (a9 > 0) + 199;
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 48))(v16);
    }
    if (a7 <= 7)
    {
      (**(void (***)(uint64_t, uint64_t, uint64_t))v16)(v16, 1, v17 + a4);
      if (a8) {
        (**(void (***)(uint64_t, uint64_t, uint64_t))v16)(v16, 1, v18 + a5);
      }
    }
    goto LABEL_17;
  }
  if (a2 == 2)
  {
    (**(void (***)(uint64_t, uint64_t, uint64_t))v16)(v16, 1, v17 + a4);
    (**(void (***)(uint64_t, void, uint64_t))v16)(v16, 0, v18 + a5);
    if (a10) {
      goto LABEL_18;
    }
LABEL_22:
    unint64_t v26 = (*(unsigned int (**)(uint64_t))(*(void *)v16 + 80))(v16);
    goto LABEL_23;
  }
  if (a2 != 1)
  {
LABEL_17:
    if (a10) {
      goto LABEL_18;
    }
    goto LABEL_22;
  }
  (**(void (***)(uint64_t, void, uint64_t))v16)(v16, 0, v17 + a4);
  if (!a10) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v24 = *(void *)(a1 + 9496);
  unint64_t v25 = (*(unsigned int (**)(uint64_t))(*(void *)v16 + 80))(v16)
      * (unint64_t)*(unsigned __int16 *)(v24 + 152);
  if (a9) {
    unint64_t v26 = (v25 << 15) / *(unsigned __int16 *)(v24 + 4 * (a9 - 1) + 162);
  }
  else {
    unint64_t v26 = v25 << 7;
  }
LABEL_23:
  (*(void (**)(uint64_t))(*(void *)v16 + 96))(v16);
  return v26;
}

uint64_t sub_1D0D43C44(uint64_t a1, int a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  (**(void (***)(uint64_t, BOOL, uint64_t))a1)(a1, a2 != 0, a1 + a3 + 131);
  uint64_t v6 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 80))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
  return v6;
}

unint64_t sub_1D0D43D28(uint64_t a1, int a2, int a3, int a4)
{
  BOOL v8 = a4 > 0;
  uint64_t v9 = *(void *)(*(void *)(a1 + 9488) + 944);
  (*(void (**)(uint64_t))(*(void *)v9 + 88))(v9);
  uint64_t v10 = v9 + 2 * v8;
  if (a3 > 0) {
    ++v10;
  }
  (**(void (***)(uint64_t, BOOL, uint64_t))v9)(v9, a2 != 0, v10 + 127);
  uint64_t v11 = *(void *)(a1 + 9496);
  unint64_t v12 = (*(unsigned int (**)(uint64_t))(*(void *)v9 + 80))(v9)
      * (unint64_t)*(unsigned __int16 *)(v11 + 152);
  if (a4) {
    unint64_t v13 = (v12 << 15) / *(unsigned __int16 *)(v11 + 4 * (a4 - 1) + 162);
  }
  else {
    unint64_t v13 = v12 << 7;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 96))(v9);
  return v13;
}

unint64_t sub_1D0D43E60(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 9488) + 944);
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  (**(void (***)(uint64_t, BOOL, uint64_t))v6)(v6, a2 != 0, v6 + 78);
  uint64_t v7 = *(void *)(a1 + 9496);
  unint64_t v8 = (*(unsigned int (**)(uint64_t))(*(void *)v6 + 80))(v6)
     * (unint64_t)*(unsigned __int16 *)(v7 + 152);
  if (a3) {
    unint64_t v9 = (v8 << 15) / *(unsigned __int16 *)(v7 + 4 * (a3 - 1) + 162);
  }
  else {
    unint64_t v9 = v8 << 7;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 96))(v6);
  return v9;
}

unint64_t sub_1D0D43F78(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 9488) + 944);
  (*(void (**)(uint64_t))(*(void *)v8 + 88))(v8);
  uint64_t v9 = 84;
  if (!a4) {
    uint64_t v9 = 82;
  }
  (**(void (***)(uint64_t, BOOL, uint64_t))v8)(v8, a2 != 0, v8 + v9 + a3);
  uint64_t v10 = *(void *)(a1 + 9496);
  unint64_t v11 = (*(unsigned int (**)(uint64_t))(*(void *)v8 + 80))(v8)
      * (unint64_t)*(unsigned __int16 *)(v10 + 152);
  if (a4) {
    unint64_t v12 = (v11 << 15) / *(unsigned __int16 *)(v10 + 4 * (a4 - 1) + 162);
  }
  else {
    unint64_t v12 = v11 << 7;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 96))(v8);
  return v12;
}

unint64_t sub_1D0D440B0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, int a8, int a9, BOOL a10, unsigned int a11)
{
  int v11 = a8;
  int v15 = a2 - *((_DWORD *)a5 + 1);
  int v16 = a3 - *((_DWORD *)a5 + 2);
  unint64_t v17 = *a5;
  unsigned int v53 = a7;
  if (a7 == 35) {
    unsigned int v53 = *(unsigned __int8 *)(*((void *)a5 + 12) + 16 * (((uint64_t)v15 >> 2) + (int)(v17 >> 2) * (uint64_t)(v16 >> 2)));
  }
  uint64_t v18 = (__int16 *)(*((void *)a5 + 11) + 2 * (((uint64_t)v15 >> 3) + (int)(v17 >> 3) * (uint64_t)(v16 >> 3)));
  BOOL v19 = a9 > 0;
  if (*(unsigned __int8 *)(*(void *)(a1 + 9472) + 2116) >= a8)
  {
    BOOL v19 = a10;
    if (a10) {
      return 0;
    }
    int v50 = v18;
    __int16 v57 = 0;
    goto LABEL_14;
  }
  int v20 = ((unsigned __int16)*v18 >> 2) & 3;
  uint64_t v21 = (a8 - 1);
  __int16 v57 = 0;
  if (v20 == a9)
  {
    int v50 = v18;
    int v11 = a8 - 1;
LABEL_14:
    uint64_t v28 = *((void *)a4 + 18);
    uint64_t v29 = 2 * *(unsigned __int8 *)(v28 + 1);
    uint64_t v30 = (int)a2 - (uint64_t)*((int *)a4 + 1);
    int v31 = (int)(a3 - *((_DWORD *)a4 + 2)) >> 1;
    uint64_t v32 = a4[1];
    uint64_t v33 = **((void **)a4 + 5) + (*((void *)a4 + 6) + v30 + v32 * v31) * *(int *)(*((void *)a4 + 5) + 16);
    uint64_t v34 = **(void **)(v28 + 72)
        + (v30 + (int)v29 * (uint64_t)v31 + *(void *)(v28 + 80)) * *(int *)(*(void *)(v28 + 72) + 16);
    uint64_t v35 = *(void *)(a1 + 9488);
    if (v19 || !*(unsigned char *)(v35 + 24795))
    {
      uint64_t v36 = *(unsigned int *)(a1 + 9520);
      uint64_t v37 = *(void (**)(void *, uint64_t, void, uint64_t, unsigned __int8 *, uint64_t, void, void, int, void))(v35 + 29784);
      uint64_t v38 = *(void *)(v35 + 29792);
      int v39 = (void *)(v35 + (v38 >> 1));
      if (v38) {
        uint64_t v37 = *(void (**)(void *, uint64_t, void, uint64_t, unsigned __int8 *, uint64_t, void, void, int, void))(*v39 + v37);
      }
      v37(v39, a2, a3, v36, a4, 1, a6, a11, v11, *((void *)a4 + 19));
    }
    sub_1D0C582F0(*(void *)(a1 + 9464) + 2280, v53, v11, *((void *)a4 + 19), v29, v34);
    uint64_t v40 = *(void *)(a1 + 9496);
    uint64_t v54 = v11 - 2;
    unint64_t v22 = (*(unsigned __int16 *)(v40 + 164)
         * (unint64_t)(*(unsigned int (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8 * v54 + 440))((1 << v11), (1 << v11), v33, v32, v34, v29)) >> 8;
    if (a9 >= 1)
    {
      uint64_t v41 = *((void *)a4 + 18);
      uint64_t v42 = *(unsigned __int8 *)(v41 + 1);
      int v43 = a2 - *((_DWORD *)a4 + 1);
      int v44 = a3 - *((_DWORD *)a4 + 2);
      uint64_t v45 = ((uint64_t)v43 >> 1) + v42 * (v44 >> 1);
      uint64_t v46 = *(void *)(v41 + 40) + 2 * v45;
      uint64_t v47 = *(void *)(v41 + 48) + 2 * v45;
      uint64_t v48 = *(void *)(a1 + 9488);
      *(_DWORD *)(v48 + 832) = a2;
      *(_DWORD *)(v48 + 836) = a3;
      *(void *)(v48 + 888) = *((void *)a4 + 12)
                             + 16 * (((uint64_t)v43 >> 2) + ((unint64_t)*a4 >> 2) * (v44 >> 2));
      sub_1D0D444B0((void *)a1, a2, a3, v11, v50, v33, v32, v34, v29, v34, v29, v46, v47, v42, (unsigned char *)&v57 + 1, &v57);
      sub_1D0D7B228(a4, a2, a3, 1 << v54, 1, HIBYTE(v57), 1);
      sub_1D0D7B228(a4, a2, a3, 1 << v54, 2, v57, 1);
    }
    return v22;
  }
  unsigned int v24 = 0;
  LODWORD(v22) = 0;
  int v25 = a8 - 2;
  int v51 = (1 << (a8 - 1)) + a2;
  signed int v26 = (1 << (a8 - 1)) + a3;
  do
  {
    int v27 = a11;
    if (v25 >= *(unsigned __int8 *)(*(void *)(a1 + 9472) + 2116)) {
      int v27 = sub_1D0D0CA2C(a11, v24, v51 < *(_DWORD *)(*(void *)(a1 + 9488) + 16), v26 < *(_DWORD *)(*(void *)(a1 + 9488) + 20));
    }
    unint64_t v22 = sub_1D0D440B0(a1, ((v24 & 1) << v21) + (int)a2, (v24 >> 1 << v21) + a3, a4, a5, a6, v53, v21, __PAIR64__(v24, a9 + 1), v27)+ v22;
    ++v24;
  }
  while (v24 != 4);
  return v22;
}

uint64_t sub_1D0D444B0(void *a1, uint64_t a2, uint64_t a3, int a4, __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned char *a15, unsigned char *a16)
{
  int v21 = 1 << a4;
  unint64_t v22 = a1 + 8;
  int v46 = 1 << a4 << a4;
  uint64_t v23 = (char *)a1 + 2 * (1 << a4 << a4) + 64;
  __int16 v24 = *a5;
  uint64_t v47 = a4 - 2;
  uint64_t v25 = a1[1183] + 2824 + 8 * v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, char *))(v25 + 344))(a6, a7, a8, a9, a1 + 8, v23);
  __int16 v48 = v24;
  if ((v24 & 0x100) == 0)
  {
    (*(void (**)(void *))(v25 + 104))(v22);
    (*(void (**)(char *))(v25 + 104))(v23);
  }
  if (*(unsigned char *)(a1[1185] + 137) == 1)
  {
    int v26 = ~((*a5 & 3) + a4) + *(unsigned __int8 *)(a1[1184] + 2113);
    uint64_t v27 = v21;
    uint64_t v28 = a2;
    uint64_t v29 = a2;
    uint64_t v30 = a14;
    char v31 = sub_1D0D41660((uint64_t)a1, v29, a3, (uint64_t)a5, (uint64_t)v22, v27, a12, a14, a4, v26, 1);
    uint64_t v32 = a3;
    uint64_t v33 = a15;
    *a15 = v31;
    BOOL v45 = v26;
    uint64_t v34 = a13;
    char v35 = sub_1D0D41660((uint64_t)a1, v28, v32, (uint64_t)a5, (uint64_t)v23, v27, a13, a14, a4, v45, 2);
  }
  else
  {
    uint64_t v36 = v21;
    uint64_t v37 = a2;
    uint64_t v38 = a2;
    uint64_t v30 = a14;
    char v39 = sub_1D0D42E88((uint64_t)a1, v38, a3, (uint64_t)a5, (uint64_t)v22, v36, a12, a14, a4, 1, 1, 0);
    uint64_t v40 = a3;
    uint64_t v33 = a15;
    *a15 = v39;
    uint64_t v34 = a13;
    char v35 = sub_1D0D42E88((uint64_t)a1, v37, v40, (uint64_t)a5, (uint64_t)v23, v36, a13, a14, a4, 2, 1, 0);
  }
  *a16 = v35;
  int v49 = 0;
  if (*v33)
  {
    LOWORD(v49) = 1024;
    int v41 = 1 << a4;
    sub_1D0D43530((uint64_t)a1, *a5, a12, v30, (uint64_t)v22, 1 << a4, a4, 1u);
  }
  else
  {
    bzero(v22, 2 * v46);
    int v41 = 1 << a4;
  }
  if (*a16)
  {
    HIWORD(v49) = 1024;
    sub_1D0D43530((uint64_t)a1, *a5, v34, v30, (uint64_t)v23, v41, a4, 2u);
  }
  else
  {
    bzero(v23, 2 * v46);
  }
  uint64_t v42 = a1[1183] + 2824;
  if ((v48 & 0x100) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, char *, void, int *))(v42 + 8 * v47 + 128))(a10, a11, v22, v23, 0, &v49);
  }
  int v44 = *(uint64_t (**)(uint64_t, uint64_t, void *, char *, void))(v42 + 8 * v47 + 280);
  return v44(a10, a11, v22, v23, 0);
}

uint64_t sub_1D0D4480C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, int a11, unsigned int a12, _DWORD *a13)
{
  uint64_t v16 = a1;
  int v17 = a2 - *((_DWORD *)a5 + 1);
  int v18 = a3 - *((_DWORD *)a5 + 2);
  unint64_t v19 = *a5;
  unsigned int v56 = a8;
  if (a8 == 35) {
    unsigned int v56 = *(unsigned __int8 *)(*((void *)a5 + 12) + 16 * (((uint64_t)v17 >> 2) + (int)(v19 >> 2) * (uint64_t)(v18 >> 2)));
  }
  uint64_t v20 = *(void *)(a1 + 9472);
  if (*(unsigned __int8 *)(v20 + 2115) < a9)
  {
    int v21 = a9 - 1;
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v20 + 2116) >= a9)
  {
    if (a11) {
      return 0;
    }
    int v21 = a9;
  }
  else
  {
    int v21 = a9 - 1;
    if (((*(unsigned __int16 *)(*((void *)a5 + 11) + 2
                                                      * (((uint64_t)v17 >> 3) + (int)(v19 >> 3) * (uint64_t)(v18 >> 3))) >> 2) & 3) != a10)
    {
LABEL_7:
      unsigned int v23 = 0;
      LODWORD(v24) = 0;
      int v25 = a2;
      int v53 = (1 << v21) + a2;
      int v26 = a3;
      int v27 = (1 << v21) + a3;
      do
      {
        uint64_t v28 = *(void *)(v16 + 9472);
        unsigned int v29 = a12;
        if (a9 - 2 >= *(unsigned __int8 *)(v28 + 2116))
        {
          unsigned int v29 = sub_1D0D0CA2C(a12, v23, v53 < *(_DWORD *)(v28 + 204), v27 < *(_DWORD *)(v28 + 208));
          uint64_t v16 = a1;
        }
        int v30 = sub_1D0D4480C(v16, ((v23 & 1) << v21) + v25, (v23 >> 1 << v21) + v26, a4, a5, a6, a7, v56, __PAIR64__(a10 + 1, v21), __PAIR64__(v29, v23), a13);
        uint64_t v16 = a1;
        uint64_t v24 = (v30 + v24);
        ++v23;
      }
      while (v23 != 4);
      return v24;
    }
  }
  uint64_t v31 = a4[1];
  uint64_t v32 = (int)a2 - (uint64_t)*((int *)a4 + 1);
  int v33 = ((int)a3 - *((_DWORD *)a4 + 2)) >> 1;
  uint64_t v34 = **((void **)a4 + 5) + (*((void *)a4 + 6) + v32 + v31 * v33) * *(int *)(*((void *)a4 + 5) + 16);
  char v35 = &a4[8 * a6];
  uint64_t v37 = *((void *)v35 + 17);
  uint64_t v36 = v35 + 136;
  uint64_t v38 = 2 * *(unsigned __int8 *)(*((void *)a4 + 17) + 1);
  uint64_t v39 = **(void **)(v37 + 72)
      + (*(void *)(v37 + 80) + v32 + 2 * *(unsigned __int8 *)(v37 + 1) * (uint64_t)v33)
      * *(int *)(*(void *)(v37 + 72) + 16);
  uint64_t v40 = *(void *)(a1 + 9488);
  if (a10 > 0 || !*(unsigned char *)(v40 + 24795))
  {
    uint64_t v41 = *(unsigned int *)(a1 + 9520);
    uint64_t v42 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, void, void, void, int, void))(v40 + 29784);
    uint64_t v43 = *(void *)(v40 + 29792);
    int v44 = (void *)(v40 + (v43 >> 1));
    if (v43) {
      uint64_t v42 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, void, void, void, int, void))(*v44 + v42);
    }
    v42(v44, a2, a3, v41, a4, a6, a7, a12, v21, *((void *)a4 + 19));
    uint64_t v16 = a1;
  }
  __int16 v59 = 0;
  sub_1D0C582F0(*(void *)(v16 + 9464) + 2280, v56, v21, *((void *)a4 + 19), v38, v39);
  uint64_t v45 = *(void *)(a1 + 9488);
  *(_DWORD *)(v45 + 832) = a2;
  *(_DWORD *)(v45 + 836) = a3;
  uint64_t v46 = *((void *)a4 + 12);
  unint64_t v47 = ((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 2)
      + ((unint64_t)*a4 >> 2) * (((int)a3 - *((_DWORD *)a4 + 2)) >> 2);
  *(void *)(v45 + 888) = v46 + 16 * v47;
  *(unsigned char *)(v46 + 16 * v47) = *(unsigned char *)(*((void *)a5 + 12)
                                        + 16
                                        * (((uint64_t)((int)a2 - *((_DWORD *)a5 + 1)) >> 2)
                                         + ((unint64_t)*a5 >> 2) * (((int)a3 - *((_DWORD *)a5 + 2)) >> 2)));
  LODWORD(v45) = a2 - *((_DWORD *)a4 + 1);
  LODWORD(v47) = a3 - *((_DWORD *)a4 + 2);
  __int16 v48 = (__int16 *)(*((void *)a4 + 11)
                  + 2 * (((uint64_t)(int)v45 >> 3) + ((unint64_t)*a4 >> 3) * ((int)v47 >> 3)));
  uint64_t v49 = ((uint64_t)(int)v45 >> 1) + *(unsigned __int8 *)(*(void *)v36 + 1) * (uint64_t)((int)v47 >> 1);
  sub_1D0D444B0((void *)a1, a2, a3, v21, v48, v34, v31, v39, v38, v39, v38, *(void *)(*(void *)v36 + 40) + 2 * v49, *(void *)(*(void *)v36 + 48) + 2 * v49, *(unsigned __int8 *)(*((void *)a4 + 17) + 1), (unsigned char *)&v59 + 1, &v59);
  uint64_t v50 = 196;
  if (!*(unsigned char *)(a1 + 9504)) {
    uint64_t v50 = 0;
  }
  if (*(unsigned char *)(*(void *)(a1 + 9488) + v50))
  {
    uint64_t v51 = ((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 1)
        + *(unsigned __int8 *)(*(void *)v36 + 1) * (uint64_t)(((int)a3 - *((_DWORD *)a4 + 2)) >> 1);
    uint64_t v24 = sub_1D0D44CC4(a1, a2, a3, a4, v39, v38, *(void *)(*(void *)v36 + 40) + 2 * v51, *(void *)(*(void *)v36 + 48) + 2 * v51, *(unsigned __int8 *)(*((void *)a4 + 17) + 1), 1 << v21, a13);
  }
  else
  {
    uint64_t v24 = 0;
  }
  sub_1D0D7B228(a4, a2, a3, 1 << (v21 - 2), 1, HIBYTE(v59), a6);
  sub_1D0D7B228(a4, a2, a3, 1 << (v21 - 2), 2, v59, a6);
  return v24;
}

uint64_t sub_1D0D44CC4(uint64_t a1, int a2, int a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, _DWORD *a11)
{
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  uint64_t v17 = *(void *)(a1 + 9496);
  (*(void (**)(uint64_t))(v17 + 568))(**((void **)a4 + 5)+ (*((void *)a4 + 6) - *((int *)a4 + 1) + a2 + a4[1] * (uint64_t)((a3 - *((_DWORD *)a4 + 2)) >> 1))* *(int *)(*((void *)a4 + 5) + 16));
  unint64_t v18 = (v36 * *(unsigned __int16 *)(v17 + 162)) >> 8;
  unint64_t v35 = (v35 * *(unsigned __int16 *)(v17 + 166)) >> 8;
  unint64_t v36 = v18;
  uint64_t v19 = (v35 + v18);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v20 = a1 + 8 * ((a10 & 7) == 0);
  (*(void (**)(void, uint64_t, uint64_t, char *, char *))(v20 + 9192))(a10, a9, a7, (char *)&v34 + 4, (char *)&v33 + 4);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t *, uint64_t *))(v20 + 9192))(a10, a9, a8, &v34, &v33);
  uint64_t v21 = *(void *)(a1 + 9464);
  int v22 = *(unsigned __int8 *)(*(void *)(v21 + 16) + 2099);
  int v23 = v22 + 57;
  uint64_t v24 = *(void *)(v21 + 32);
  int v25 = v22
      + (*(__int16 *)(*((void *)a4 + 11)
                    + 2
                    * (((uint64_t)(a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
  int v26 = v25 + *(char *)(v24 + 14) + *(char *)(v21 + 560);
  if (v26 >= v23) {
    int v27 = v23;
  }
  else {
    int v27 = v25 + *(char *)(v24 + 14) + *(char *)(v21 + 560);
  }
  if (v26 <= 0) {
    int v28 = 0;
  }
  else {
    int v28 = v27;
  }
  int v29 = v25 + *(char *)(v24 + 15) + *(char *)(v21 + 561);
  if (v29 >= v23) {
    int v30 = v23;
  }
  else {
    int v30 = v29;
  }
  if (v29 <= 0) {
    int v31 = 0;
  }
  else {
    int v31 = v30;
  }
  *a11 = (HIDWORD(v34) * byte_1D0DA729C[v28]
        + HIDWORD(v33) * byte_1D0DA729C[v28 + 70]
        + v34 * byte_1D0DA729C[v31]
        + v33 * byte_1D0DA729C[v31 + 70]) << 8;
  return v19;
}

uint64_t sub_1D0D44EC4(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int8 *a6)
{
  LODWORD(v7) = a5;
  LODWORD(v8) = a4;
  uint64_t v11 = result;
  while (1)
  {
    unint64_t v12 = *(unsigned __int8 **)(v11 + 9472);
    int v13 = v12[272];
    if (*(_DWORD *)(v11 + 8)) {
      BOOL v14 = (v8 | v13) == 0;
    }
    else {
      BOOL v14 = 0;
    }
    int v15 = v14;
    int v16 = *(_DWORD *)v11 - v13 - v15;
    if (v16 <= v12[2114]) {
      int v16 = v12[2114];
    }
    int v17 = v12[2115];
    if (v16 > v17) {
      int v16 = v17 - v15;
    }
    char v18 = v16 < (int)v7 ? v15 : 0;
    if ((v18 & 1) == 0 && (int)v7 <= v17) {
      break;
    }
    uint64_t v7 = (v7 - 1);
    uint64_t v8 = (v8 + 1);
    sub_1D0D44EC4(v11, a2, a3, v8, v7, a6);
    sub_1D0D44EC4(v11, ((1 << v7) + a2), a3, v8, v7, a6);
    uint64_t result = sub_1D0D44EC4(v11, a2, ((1 << v7) + a3), v8, v7, a6);
    a2 = ((1 << v7) + a2);
    a3 = ((1 << v7) + a3);
  }
  if (a6)
  {
    unint64_t v19 = (unint64_t)*a6 >> 3;
    uint64_t v20 = (_WORD *)(*((void *)a6 + 11)
                  + 2
                  * (((uint64_t)((int)a2 - *((_DWORD *)a6 + 1)) >> 3)
                   + (int)v19 * (uint64_t)(((int)a3 - *((_DWORD *)a6 + 2)) >> 3)));
  }
  else
  {
    uint64_t v21 = *(void *)(*(void *)(v11 + 9464) + 8);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v21 + 520) <= (int)a2
      || *(_DWORD *)(v21 + 524) <= (int)a3)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = (_WORD *)(*(void *)(v21 + 800) + 2 * (*(void *)(v21 + 768) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    unint64_t v19 = *(void *)(v21 + 768);
  }
  *uint64_t v20 = *v20 & 0xFFF3 | (4 * (v8 & 3));
  if (1 << v7 >= 8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 2 * v19;
    uint64_t v24 = v20;
    do
    {
      int v25 = v24;
      uint64_t v26 = (1 << v7) >> 3;
      do
      {
        *v25++ = *v20;
        --v26;
      }
      while (v26);
      ++v22;
      uint64_t v24 = (_WORD *)((char *)v24 + v23);
    }
    while (v22 != (1 << v7) >> 3);
  }
  return result;
}

uint64_t sub_1D0D450C4(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a4;
  uint64_t v10 = a3;
  uint64_t v12 = result;
  if (a8)
  {
    uint64_t v13 = *(void *)(*(void *)(result + 9464) + 8);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v13 + 520) <= (int)a2
      || *(_DWORD *)(v13 + 524) <= (int)a3)
    {
      BOOL v14 = 0;
    }
    else
    {
      BOOL v14 = (__int16 *)(*(void *)(v13 + 800) + 2 * (*(void *)(v13 + 768) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    unint64_t v86 = *(void *)(v13 + 768);
  }
  else
  {
    unint64_t v86 = (unint64_t)*a4 >> 3;
    BOOL v14 = (__int16 *)(*((void *)a4 + 11)
                    + 2
                    * (((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + (int)v86 * (uint64_t)(((int)a3 - *((_DWORD *)a4 + 2)) >> 3)));
  }
  int v15 = *(unsigned __int8 **)(result + 9472);
  int v16 = v15[272];
  if (*(_DWORD *)(result + 8)) {
    BOOL v17 = v16 == 0;
  }
  else {
    BOOL v17 = 0;
  }
  BOOL v18 = v17 && a6 == 0;
  int v19 = *(_DWORD *)result - v16 - v18;
  if (v19 <= v15[2114]) {
    int v19 = v15[2114];
  }
  signed int v20 = v15[2115];
  if (v19 <= v20) {
    int v21 = v19;
  }
  else {
    int v21 = v20 - v18;
  }
  BOOL v22 = v21 < a5;
  if (v21 >= a5) {
    BOOL v18 = 0;
  }
  int v23 = !v18;
  if (v20 >= a5) {
    int v24 = v23;
  }
  else {
    int v24 = 0;
  }
  BOOL v25 = v20 > a5 && a6 == 0;
  if (v20 == a5 || v25)
  {
    int v27 = a6;
    uint64_t v29 = a8;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(result + 9496) + 8 * a5 + 480))(**((void **)a4 + 3)+ (*((void *)a4 + 4) + (int)a2 - (uint64_t)*((int *)a4 + 1) + ((int)a3 - (uint64_t)*((int *)a4 + 2))* a4[1])* *(int *)(*((void *)a4 + 3) + 16));
    uint64_t v10 = a3;
    a8 = v29;
    uint64_t v9 = a4;
    a6 = v27;
  }
  if (v21 < a5) {
    int v31 = v24;
  }
  else {
    int v31 = 0;
  }
  if (v31 != 1)
  {
    int v33 = *(unsigned __int16 *)(a7 + 28);
    uint64_t v34 = (void *)(v12 + 9496);
    unsigned int v92 = 0;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    unint64_t v91 = -1;
    __int16 v93 = v33;
    if (!v24)
    {
      uint64_t v60 = 0;
      BOOL v61 = 0;
      if (v21 >= a5) {
        goto LABEL_66;
      }
      uint64_t v81 = 0;
      BOOL v82 = 0;
      int v83 = (void *)(v12 + 9496);
      int v84 = 0;
      goto LABEL_57;
    }
    uint64_t v35 = *(void *)(v12 + 9488);
    int v36 = *(_DWORD *)v12;
    int v37 = *(_DWORD *)v12 - *(unsigned __int8 *)(*(void *)(v35 + 14848) + 2115);
    int v38 = v37 & ~(v37 >> 31);
    unsigned int v39 = ((_BYTE)a2 - *(_DWORD *)(v12 + 9512)) & 0x1F;
    unsigned int v40 = (v10 - *(_DWORD *)(v12 + 9516)) & 0x1F;
LABEL_59:
    BOOL v61 = v21 < a5;
    uint64_t v60 = *(unsigned int *)(v35
                          + 4
                          * (byte_1D0DA76C0[a6 - v38]
                           + (unint64_t)(v39 >> (v36 - a6))
                           + qword_1D0DA7698[a6 - v38] * (v40 >> (v36 - a6)))
                          + 408);
    unint64_t v63 = *(unsigned __int16 *)(*v34 + 2 * (__int16)v33 + 152);
    if (v21 >= a5) {
      unint64_t v63 = 0;
    }
    if (!v22) {
      goto LABEL_66;
    }
    BOOL v82 = v21 < a5;
    int v83 = v34;
    int v84 = v24;
    uint64_t v81 = v60;
    uint64_t v62 = (v63 >> (8 * (v33 == 0))) + v60;
    goto LABEL_63;
  }
  if (*(unsigned char *)(*(void *)(v12 + 9480) + 564) && !a6 && *(_DWORD *)(v12 + 8))
  {
    int v84 = v24;
    BOOL v82 = 0;
    __int16 v32 = *(_WORD *)(a7 + 28);
    unsigned int v92 = 0;
    int v83 = (void *)(v12 + 9496);
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    unint64_t v80 = -1;
    uint64_t v81 = 0;
    unint64_t v91 = -1;
    __int16 v93 = v32;
    goto LABEL_64;
  }
  int v41 = *v14 >> 9;
  int v36 = *(_DWORD *)v12;
  int v42 = *(_DWORD *)v12 - *(unsigned __int8 *)(*(void *)(v12 + 9472) + 2115);
  int v43 = v42 & ~(v42 >> 31);
  if (v41 >= 40) {
    int v41 = 40;
  }
  if (v41 <= 20) {
    int v41 = 20;
  }
  unsigned int v44 = v41 - 20;
  int v45 = a6 + 1 - v43;
  uint64_t v35 = *(void *)(v12 + 9488);
  int v46 = v36 - *(unsigned __int8 *)(*(void *)(v35 + 14848) + 2115);
  int v38 = v46 & ~(v46 >> 31);
  unsigned int v39 = ((_BYTE)a2 - *(_DWORD *)(v12 + 9512)) & 0x1F;
  unsigned int v40 = ((_BYTE)v10 - *(_DWORD *)(v12 + 9516)) & 0x1F;
  uint64_t v47 = v35
      + 4
      * (byte_1D0DA76C0[a6 + 1 - v38]
       + (unint64_t)(v39 >> (v36 - (a6 + 1)))
       + qword_1D0DA7698[a6 + 1 - v38] * (v40 >> (v36 - (a6 + 1))));
  uint64_t v48 = v47 + 408;
  uint64_t v49 = *(unsigned int *)(v47 + 408);
  uint64_t v50 = *(unsigned int *)(v47 + 412);
  uint64_t v51 = (unsigned int *)(v48 + 4 * qword_1D0DA7698[v45]);
  uint64_t v53 = *v51;
  uint64_t v52 = v51[1];
  uint64_t v54 = v52 + v53 + v50 + v49;
  uint64_t v55 = v50 + v49 - (v52 + v53);
  if (v55 < 0) {
    uint64_t v55 = v52 + v53 - (v50 + v49);
  }
  uint64_t v56 = v49 - v50;
  uint64_t v57 = v56 - v53 + v52;
  if (v57 < 0) {
    uint64_t v57 = -v57;
  }
  uint64_t result = v55 + v57;
  uint64_t v58 = v56 + v53 - v52;
  if (v58 < 0) {
    uint64_t v58 = -v58;
  }
  uint64_t v59 = dword_1D0DA716C[21 * a6 - 21 + 21 * *(_DWORD *)(v12 + 9520) + v44];
  int v33 = *(unsigned __int16 *)(a7 + 28);
  unsigned int v92 = 0;
  uint64_t v34 = (void *)(v12 + 9496);
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  unint64_t v91 = -1;
  __int16 v93 = v33;
  if ((result + v58) * v59 <= (unint64_t)(v54 << 6))
  {
    BOOL v22 = 0;
    goto LABEL_59;
  }
  int v83 = (void *)(v12 + 9496);
  int v84 = v24;
  BOOL v82 = 0;
  uint64_t v81 = 0;
LABEL_57:
  uint64_t v62 = -1;
LABEL_63:
  unint64_t v80 = v62;
LABEL_64:
  uint64_t v64 = (a5 - 1);
  int v65 = 1 << (a5 - 1);
  uint64_t v66 = (v65 + a2);
  uint64_t v67 = (v65 + v10);
  uint64_t v68 = (a6 + 1);
  uint64_t v69 = v10;
  char v85 = a6;
  int v70 = v9;
  sub_1D0D450C4(v12, a2, v10, v9, v64, v68, &v89, a8);
  sub_1D0D450C4(v12, v66, v69, v70, v64, v68, &v89, a8);
  sub_1D0D450C4(v12, a2, v67, v70, v64, v68, &v89, a8);
  uint64_t result = sub_1D0D450C4(v12, v66, v67, v70, v64, v68, &v89, a8);
  LOBYTE(a6) = v85;
  v92 += v84;
  unsigned int v71 = v92;
  uint64_t v72 = *(void *)(v12 + 9496);
  unint64_t v91 = ((*(unsigned __int16 *)(v72 + 2 * v93 + 152) * (unint64_t)v92) >> (8 * (v93 == 0))) + v89;
  uint64_t v60 = v81;
  uint64_t v34 = v83;
  BOOL v61 = v82;
  if (v91 < v80)
  {
    uint64_t v73 = *(void *)a7 + v89;
    uint64_t v74 = *(void *)(a7 + 8) + v90;
    *(void *)a7 = v73;
    *(void *)(a7 + 8) = v74;
    unsigned int v75 = *(_DWORD *)(a7 + 24) + v71;
    *(_DWORD *)(a7 + 24) = v75;
    goto LABEL_72;
  }
LABEL_66:
  *BOOL v14 = *v14 & 0xFFF3 | (4 * (a6 & 3));
  if (1 << a5 >= 8)
  {
    uint64_t v76 = 0;
    uint64_t v77 = v14;
    do
    {
      int v78 = v77;
      uint64_t v79 = (1 << a5) >> 3;
      do
      {
        *v78++ = *v14;
        --v79;
      }
      while (v79);
      ++v76;
      v77 += v86;
    }
    while (v76 != (1 << a5) >> 3);
  }
  uint64_t v72 = *v34;
  uint64_t v73 = *(void *)a7 + v60;
  *(void *)a7 = v73;
  unsigned int v75 = *(_DWORD *)(a7 + 24) + v61;
  *(_DWORD *)(a7 + 24) = v75;
LABEL_72:
  *(void *)(a7 + 16) = ((*(unsigned __int16 *)(v72 + 2 * *(__int16 *)(a7 + 28) + 152) * (unint64_t)v75) >> (8 * (*(_WORD *)(a7 + 28) == 0)))
                       + v73;
  return result;
}

uint64_t sub_1D0D45758(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, int a5, int a6, int a7, uint64_t *a8, char a9)
{
  uint64_t v13 = *(unsigned __int8 **)(a1 + 9472);
  if (a9)
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 9464) + 8);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v14 + 520) <= (int)a2
      || *(_DWORD *)(v14 + 524) <= a3)
    {
      int v15 = 0;
    }
    else
    {
      int v15 = (_WORD *)(*(void *)(v14 + 800) + 2 * (*(void *)(v14 + 768) * ((uint64_t)a3 >> 3) + ((int)a2 >> 3)));
    }
    unint64_t v48 = *(void *)(v14 + 768);
  }
  else
  {
    unint64_t v48 = (unint64_t)*a4 >> 3;
    int v15 = (_WORD *)(*((void *)a4 + 11)
                  + 2
                  * (((uint64_t)((int)a2 - *((_DWORD *)a4 + 1)) >> 3)
                   + (int)v48 * (uint64_t)((a3 - *((_DWORD *)a4 + 2)) >> 3)));
  }
  char v55 = a5 - 1;
  uint64_t result = (1 << a5);
  int v17 = *(_DWORD *)(a1 + 8);
  int v18 = v13[272];
  if (v17) {
    BOOL v19 = (a6 | v18) == 0;
  }
  else {
    BOOL v19 = 0;
  }
  int v20 = v19;
  int v21 = *(_DWORD *)a1 - v18 - v20;
  if (v21 <= v13[2114]) {
    int v21 = v13[2114];
  }
  unsigned int v22 = v13[2115];
  if (v21 <= v22) {
    int v23 = v21;
  }
  else {
    int v23 = v22 - v20;
  }
  int v24 = ((v23 >= a5) | ~v20) & ((int)v22 >= a5);
  uint64_t v25 = *((__int16 *)a8 + 14);
  __int16 v58 = *((_WORD *)a8 + 14);
  char v56 = a6;
  unsigned int v54 = v24;
  if (!*(unsigned char *)(*(void *)(a1 + 9480) + 564) || (v24 ? (BOOL v26 = v23 < a5) : (BOOL v26 = 0), !v26))
  {
    if (!v24)
    {
      BOOL v28 = 0;
      uint64_t v27 = 0;
      unint64_t v52 = -1;
      goto LABEL_41;
    }
LABEL_30:
    uint64_t v29 = (1 << a5);
    unsigned int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 9496)
                                                               + 40 * *((__int16 *)a8 + 14)
                                                               + 8 * (a5 - 2)
                                                               + 176))(result, result, **((void **)a4 + 3)+ (*((void *)a4 + 4) + (int)a2 - (uint64_t)*((int *)a4 + 1) + (a3 - (uint64_t)*((int *)a4 + 2)) * a4[1])* *(int *)(*((void *)a4 + 3) + 16));
    uint64_t v27 = v30;
    if (*(unsigned char *)(a1 + 9504)) {
      goto LABEL_38;
    }
    if (*(unsigned __int8 *)(*(void *)(a1 + 9472) + 2116) >= a5)
    {
      int v33 = a3;
      if (a7)
      {
LABEL_38:
        uint64_t result = v29;
        BOOL v28 = v23 < a5;
        unint64_t v36 = *(unsigned __int16 *)(*(void *)(a1 + 9496) + 2 * v25 + 152);
        if (v23 >= a5) {
          unint64_t v36 = 0;
        }
        unint64_t v52 = (v36 >> (8 * (v25 == 0))) + v27;
        LOBYTE(a6) = v56;
LABEL_41:
        if (v23 >= a5) {
          goto LABEL_44;
        }
        goto LABEL_42;
      }
      uint64_t v50 = v30;
      uint64_t v31 = v29;
      uint64_t v32 = a5 - 2;
    }
    else
    {
      uint64_t v50 = v30;
      uint64_t v31 = (1 << v55);
      uint64_t v32 = a5 - 3;
      int v33 = a3;
    }
    uint64_t v34 = *(void *)(a1 + 9496);
    uint64_t v35 = *((__int16 *)a8 + 14);
    uint64_t v27 = v50
        + ((*(unsigned __int16 *)(v34 + 2 * (v35 > 0) + 162)
                        * (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 32 * v35 + 8 * v32 + 376))(v31, v31, **((void **)a4 + 5)+ (*((void *)a4 + 6)+ (int)a2- (uint64_t)*((int *)a4 + 1)+ a4[1] * (uint64_t)((v33 - *((_DWORD *)a4 + 2)) >> 1))* *(int *)(*((void *)a4 + 5) + 16))) >> 8);
    goto LABEL_38;
  }
  if (a6 || !v17) {
    goto LABEL_30;
  }
  uint64_t v27 = 0;
  BOOL v28 = 0;
  unint64_t v52 = -1;
LABEL_42:
  BOOL v46 = v28;
  unsigned int v47 = result;
  uint64_t v51 = v27;
  uint64_t v37 = ((1 << v55) + a2);
  sub_1D0D45758(a1, a2);
  sub_1D0D45758(a1, v37);
  sub_1D0D45758(a1, a2);
  sub_1D0D45758(a1, v37);
  BOOL v28 = v46;
  uint64_t result = v47;
  LOBYTE(a6) = v56;
  uint64_t v38 = *(void *)(a1 + 9496);
  uint64_t v27 = v51;
  if ((*(unsigned __int16 *)(v38 + 2 * v58 + 152) * (unint64_t)v54) >> (8 * (v58 == 0)) < v52)
  {
    uint64_t v39 = *a8;
    uint64_t v40 = a8[1];
    *a8 = *a8;
    a8[1] = v40;
    unsigned int v41 = *((_DWORD *)a8 + 6) + v54;
    *((_DWORD *)a8 + 6) = v41;
    goto LABEL_50;
  }
LABEL_44:
  *int v15 = *v15 & 0xFFF3 | (4 * (a6 & 3));
  if ((int)result >= 8)
  {
    uint64_t v42 = 0;
    int v43 = v15;
    do
    {
      unsigned int v44 = v43;
      uint64_t v45 = result >> 3;
      do
      {
        *v44++ = *v15;
        --v45;
      }
      while (v45);
      ++v42;
      v43 += v48;
    }
    while (v42 != result >> 3);
  }
  uint64_t v38 = *(void *)(a1 + 9496);
  uint64_t v39 = *a8 + v27;
  *a8 = v39;
  unsigned int v41 = *((_DWORD *)a8 + 6) + v28;
  *((_DWORD *)a8 + 6) = v41;
LABEL_50:
  a8[2] = ((*(unsigned __int16 *)(v38 + 2 * *((__int16 *)a8 + 14) + 152) * (unint64_t)v41) >> (8 * (*((_WORD *)a8 + 14) == 0)))
        + v39;
  return result;
}

uint64_t sub_1D0D45CC4(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6)
{
  uint64_t v10 = (a6 - 1);
  if (*(unsigned __int8 *)(a1[1184] + 2115) < a6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = (a4 + 1);
    do
    {
      uint64_t result = sub_1D0D45CC4(a1, ((v11 & 1) << v10) + (int)a2, (v11 >> 1 << v10) + a3, v12, a5, v10);
      if (result) {
        BOOL v14 = v11 == 3;
      }
      else {
        BOOL v14 = 1;
      }
      ++v11;
    }
    while (!v14);
    return result;
  }
  uint64_t v16 = (int)a2 - (uint64_t)*((int *)a5 + 1);
  uint64_t v17 = (int)a3 - (uint64_t)*((int *)a5 + 2);
  int v18 = (uint64_t *)*((void *)a5 + 5);
  uint64_t v30 = *((void *)a5 + 6);
  uint64_t v31 = *((int *)v18 + 4);
  uint64_t v29 = *v18;
  int v19 = *(unsigned __int8 *)(a1[1185] + 526);
  int v33 = v17;
  int v34 = a5[1];
  int v20 = (__int16 *)(*((void *)a5 + 11)
                  + 2 * (((uint64_t)(int)v16 >> 3) + ((unint64_t)*a5 >> 3) * ((int)v17 >> 3)));
  int v21 = a1 + 8;
  uint64_t v22 = a1[1183] + 8 * a6;
  int v23 = (void (**)(uint64_t))(v22 + 3120);
  int v24 = (void (**)(uint64_t))(v22 + 2880);
  __int16 v32 = *v20;
  if ((*v20 & 0x100) != 0) {
    int v24 = v23;
  }
  (*v24)(**((void **)a5 + 3) + (*((void *)a5 + 4) + v16 + a5[1] * v17) * *(int *)(*((void *)a5 + 3) + 16));
  uint64_t result = sub_1D0D42E88((uint64_t)a1, a2, a3, (uint64_t)v20, (uint64_t)(a1 + 8), 1 << a6, (uint64_t)(a1 + 8), 1 << a6, a6, 0, 0, 0) ^ 1;
  if (!v19 && (result & 1) == 0) {
    uint64_t result = sub_1D0D46038((uint64_t)(a1 + 8), 1 << a6, a6);
  }
  if (a6 >= 3 && result)
  {
    uint64_t v25 = v29 + (v16 + v34 * (uint64_t)(v33 >> 1) + v30) * v31;
    if (v10 <= *(unsigned __int8 *)(a1[1184] + 2116)) {
      LODWORD(v10) = *(unsigned __int8 *)(a1[1184] + 2116);
    }
    int v26 = 1 << v10;
    uint64_t v27 = a1[1183] + 2824 + 8 * ((int)v10 - 2);
    (*(void (**)(uint64_t))(v27 + 344))(v25);
    if ((v32 & 0x100) == 0)
    {
      (*(void (**)(void *))(v27 + 104))(a1 + 8);
      (*(void (**)(uint64_t))(v27 + 104))((uint64_t)v21 + 2 * (v26 << v10));
    }
    int v28 = sub_1D0D42E88((uint64_t)a1, a2, a3, (uint64_t)v20, (uint64_t)(a1 + 8), v26, (uint64_t)(a1 + 8), v26, v10, 1, 0, 0);
    if (v19 || !v28)
    {
      if ((v28 & 1) == 0) {
        goto LABEL_23;
      }
    }
    else if (sub_1D0D46038((uint64_t)(a1 + 8), v26, v10))
    {
LABEL_23:
      uint64_t result = sub_1D0D42E88((uint64_t)a1, a2, a3, (uint64_t)v20, (uint64_t)v21 + 2 * (v26 << v10), v26, (uint64_t)v21 + 2 * (v26 << v10), v26, v10, 2, 0, 0) ^ 1;
      if (!v19 && (result & 1) == 0)
      {
        return sub_1D0D46038((uint64_t)v21 + 2 * (v26 << v10), v26, v10);
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1D0D46038(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = 0;
  uint64_t v4 = 0;
  int v5 = 0;
  int v6 = 0u;
  uint64_t v7 = a3 - 2;
  while (2)
  {
    for (uint64_t i = 0; i != 16; ++i)
    {
      LOWORD(v9) = *(_WORD *)(a1
                            + 2 * (*((unsigned __int8 *)*(&off_1E689A008 + v7) + v4) >> v7) * a2
                            + 2 * (*((unsigned __int8 *)*(&off_1E689A008 + v7) + v4) & ~(-1 << v7))
                            + 2 * byte_1D0DAF020[16 * v7 + i]);
      if ((_WORD)v9)
      {
        if ((v9 & 0x8000u) != 0) {
          int v9 = -(__int16)v9;
        }
        BOOL v10 = (unsigned __int16)v9 <= 1u && (unint64_t)(v3 & 0xFFFFFFF0) + i >= byte_1D0D7F768[v7];
        if (!v10 || (v5 += byte_1D0DA7268[v6], v5 > 5))
        {
          unsigned int v11 = 0;
          goto LABEL_19;
        }
        int v6 = -1;
      }
      if (v6 >= 6) {
        int v6 = 6;
      }
      ++v6;
    }
    ++v4;
    v3 += 16;
    if (!(v4 >> (2 * a3 - 4))) {
      continue;
    }
    break;
  }
  unsigned int v11 = 1;
LABEL_19:
  if (v5 < 6) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t sub_1D0D4613C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5)
{
  uint64_t v9 = (int)a2 - (uint64_t)*((int *)a5 + 1);
  uint64_t v10 = (int)a3 - (uint64_t)*((int *)a5 + 2);
  unsigned int v11 = (__int16 *)(*((void *)a5 + 11) + 2
                                         * (((uint64_t)(int)v9 >> 3) + ((unint64_t)*a5 >> 3) * ((int)v10 >> 3)));
  __int16 v12 = *v11;
  uint64_t v13 = **((void **)a5 + 3) + (v9 + a5[1] * v10 + *((void *)a5 + 4)) * *(int *)(*((void *)a5 + 3) + 16);
  uint64_t v14 = *(void *)(a1 + 9464) + 8 * a4;
  int v15 = (void (**)(uint64_t))(v14 + 3120);
  uint64_t v16 = (void (**)(uint64_t))(v14 + 2880);
  if ((*v11 & 0x100) != 0) {
    uint64_t v16 = v15;
  }
  (*v16)(v13);
  uint64_t v17 = 3;
  if (*(unsigned char *)(*(void *)(a1 + 9480) + 212))
  {
    int v18 = v12 >> 9;
    if (v18 >= 47) {
      LOWORD(v18) = 47;
    }
    *unsigned int v11 = (*v11 & 0x1FF | ((_WORD)v18 << 9)) + 2048;
    int v19 = sub_1D0D42E88(a1, a2, a3, (uint64_t)v11, a1 + 64, 1 << a4, a1 + 64, 1 << a4, a4, 0, 0, 0);
    *unsigned int v11 = v12 & 0xFE00 | *v11 & 0x1FF;
    if (v19) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return v17;
}

uint64_t sub_1D0D462A0(int *a1, unsigned int a2, uint64_t a3, int a4, unsigned __int8 *a5, unsigned int a6, int64x2_t *a7, int64x2_t *a8, int64x2_t *a9)
{
  uint64_t v9 = a5;
  LOBYTE(v10) = a4;
  uint64_t v244 = *MEMORY[0x1E4F143B8];
  int v11 = a2 - *((_DWORD *)a5 + 1);
  uint64_t v12 = *((void *)a5 + 11);
  int v214 = a3 - *((_DWORD *)a5 + 2);
  unint64_t v13 = ((uint64_t)v11 >> 3) + ((unint64_t)*a5 >> 3) * (v214 >> 3);
  uint64_t v14 = *((void *)a1 + 1186);
  uint64_t v212 = *(void **)(v14 + 944);
  uint64_t v15 = *a1;
  uint64_t v16 = v15 - a4;
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(*((void *)a1 + 1183) + 16) + 2113) - (uint64_t)(int)v16;
  uint64_t v18 = *((void *)a1 + 1185);
  int v19 = *(unsigned __int8 *)(v18 + 204);
  uint64_t v203 = a1 + 2376;
  int v188 = *((unsigned __int8 *)a1 + 9504);
  int v197 = *(unsigned __int8 *)(v18 + 205);
  __int16 v228 = 0;
  unsigned __int8 v227 = 0;
  int v225 = 0;
  int64x2_t v223 = 0uLL;
  uint64_t v224 = -1;
  __int16 v226 = 0;
  int v221 = 0;
  int64x2_t v219 = 0uLL;
  uint64_t v220 = -1;
  __int16 v222 = 0;
  unsigned int v217 = 0;
  int64x2_t v215 = 0uLL;
  unint64_t v216 = -1;
  __int16 v218 = 0;
  int v20 = (unsigned __int8 *)*((void *)a1 + 1184);
  int v21 = v20[272];
  if (a1[2]) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 0;
  }
  int v24 = v22 && a4 == 0;
  int v25 = v15 - v21 - v24;
  if (v25 <= v20[2114]) {
    int v25 = v20[2114];
  }
  int v26 = v20[2115];
  int v27 = v26 - v24;
  if (v25 <= v26) {
    int v27 = v25;
  }
  if (v27 < (int)v16) {
    char v28 = v24;
  }
  else {
    char v28 = 0;
  }
  if ((int)v16 > v26) {
    char v29 = 1;
  }
  else {
    char v29 = v28;
  }
  int v192 = v20[2113] - v26;
  if ((int)v17 <= v192 || v17 == a1[2380])
  {
    uint64_t v30 = (unsigned __int8 **)(a5 + 136);
    int v205 = v11;
  }
  else
  {
    int v205 = 0;
    int v214 = 0;
    uint64_t v30 = (unsigned __int8 **)(v14 + 32 * v17 + 8 * a6 + 248);
  }
  int v193 = v17;
  uint64_t v31 = (__int16 *)(v12 + 2 * v13);
  unsigned int v207 = *v30;
  int v191 = v27;
  int v204 = v19;
  if (v27 >= (int)v16)
  {
    int v43 = 0;
    uint64_t v35 = (uint64_t)a1;
  }
  else
  {
    int v32 = 1 << (v16 - 1);
    uint64_t v33 = v32 + a2;
    unsigned int v184 = v32 + a3;
    uint64_t v34 = (a4 + 1);
    uint64_t v35 = (uint64_t)a1;
    char v194 = v29;
    int v36 = sub_1D0D462A0(a1, a2, a3, v34, a5, 0, &v215, &v223, &v219);
    int v37 = v36 | sub_1D0D462A0(a1, v33, a3, v34, v9, 1, &v215, &v223, &v219);
    LOBYTE(v36) = sub_1D0D462A0(a1, a2, v184, v34, v9, 2, &v215, &v223, &v219);
    char v38 = sub_1D0D462A0(a1, v33, v184, v34, v9, 3, &v215, &v223, &v219);
    char v29 = v194;
    char v39 = v37 | v36 | v38;
    if ((v194 & 1) == 0)
    {
      unint64_t v40 = ((unsigned __int8 *)v212 - (int)v16)[84];
      if (v40) {
        unint64_t v41 = v212[2] - byte_1D0D7FCB3[(v212[2] & 0xC0) + (v40 >> 1)];
      }
      else {
        unint64_t v41 = byte_1D0D7FCB3[(v212[2] & 0xC0) + (v40 >> 1)];
      }
      int v42 = __clz(v41);
      v217 += v212[2] - (v41 << (v42 - 55)) + ((v42 - 55) << 8);
      unint64_t v216 = ((*(unsigned __int16 *)(*((void *)a1 + 1187) + 2 * v218 + 152) * (unint64_t)v217) >> (8 * (v218 == 0)))
           + v215.i64[0];
    }
    int v19 = v204;
    LOBYTE(v10) = a4;
    if (v39)
    {
      int v43 = 1;
    }
    else
    {
      uint64_t v60 = *((void *)a1 + 1184);
      int v43 = *(unsigned __int8 *)(v60 + 272);
      if (*(unsigned char *)(v60 + 272))
      {
        int v43 = 0;
        if ((int)v16 <= *(unsigned __int8 *)(v60 + 2115))
        {
          unsigned int v217 = 0;
          int64x2_t v215 = 0uLL;
          unint64_t v216 = -1;
          __int16 v218 = 0;
        }
      }
    }
  }
  unsigned int v195 = v43;
  if (v29)
  {
    if (v216 == -1)
    {
      LODWORD(v44) = 0;
      LODWORD(v45) = 0;
      int v46 = 0;
      uint64_t v47 = 0;
      int v198 = 0;
      unsigned int v48 = 0;
      int v49 = 1 << v16;
      goto LABEL_152;
    }
LABEL_142:
    if (v193 >= v192)
    {
      uint64_t v134 = *(void *)(v35 + 9488);
      BOOL v135 = (void *)(v134 + 32 * v193);
      uint64_t v136 = v135[35];
      uint64_t v137 = v135[36];
      uint64_t v139 = v135[37];
      uint64_t v138 = v135[38];
      int v213 = v16 - 1;
      uint64_t v140 = (1 << (v16 - 1));
      sub_1D0D0C2A8(*(uint64_t (**)(uint64_t, uint64_t))(v134 + 29752), (void **)v207, (const void **)v136, v205, v214, 0, 0, v140);
      sub_1D0D0C2A8(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v35 + 9488) + 29752), (void **)v207, (const void **)v137, v205 + v140, v214, 0, 0, v140);
      int v141 = v214 + v140;
      sub_1D0D0C2A8(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v35 + 9488) + 29752), (void **)v207, (const void **)v139, v205, v214 + v140, 0, 0, v140);
      sub_1D0D0C2A8(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v35 + 9488) + 29752), (void **)v207, (const void **)v138, v205 + v140, v214 + v140, 0, 0, v140);
      if (!*v203)
      {
        sub_1D0D0C498(*(uint64_t (**)(void, uint64_t))(*(void *)(v35 + 9488) + 29752), (void **)v207, (const void **)v136, v205, v214, 0, 0, *(unsigned __int8 *)(v136 + 1));
        if (v213 > *(unsigned __int8 *)(*(void *)(v35 + 9472) + 2116))
        {
          sub_1D0D0C498(*(uint64_t (**)(void, uint64_t))(*(void *)(v35 + 9488) + 29752), (void **)v207, (const void **)v137, v205 + v140, v214, 0, 0, *(unsigned __int8 *)(v137 + 1));
          sub_1D0D0C498(*(uint64_t (**)(void, uint64_t))(*(void *)(v35 + 9488) + 29752), (void **)v207, (const void **)v139, v205, v141, 0, 0, *(unsigned __int8 *)(v139 + 1));
          sub_1D0D0C498(*(uint64_t (**)(void, uint64_t))(*(void *)(v35 + 9488) + 29752), (void **)v207, (const void **)v138, v205 + v140, v141, 0, 0, *(unsigned __int8 *)(v138 + 1));
        }
      }
    }
    uint64_t v142 = *(void *)(v35 + 9496);
    int64x2_t v143 = vaddq_s64(*a7, v215);
    *a7 = v143;
    unsigned __int32 v144 = a7[1].i32[2] + v217;
    a7[1].i32[2] = v144;
    a7[1].i64[0] = ((*(unsigned __int16 *)(v142 + 152 + 2 * a7[1].i16[6]) * (unint64_t)v144) >> (8 * (a7[1].i16[6] == 0)))
                 + v143.i64[0];
    int64x2_t v145 = vaddq_s64(*a9, v219);
    *a9 = v145;
    unsigned __int32 v146 = a9[1].i32[2] + v221;
    a9[1].i32[2] = v146;
    a9[1].i64[0] = ((*(unsigned __int16 *)(v142 + 152 + 2 * a9[1].i16[6]) * (unint64_t)v146) >> (8 * (a9[1].i16[6] == 0)))
                 + v145.i64[0];
    int v147 = a8;
    int64x2_t v148 = vaddq_s64(*a8, v223);
    *a8 = v148;
    unsigned int v149 = a8[1].i32[2] + v225;
    a8[1].i32[2] = v149;
    uint64_t v150 = v148.i64[0];
    uint64_t result = v195;
    goto LABEL_163;
  }
  for (uint64_t i = 0; i != 96; i += 32)
  {
    uint64_t v51 = (char *)&v238 + i;
    *((_DWORD *)v51 + 6) = 0;
    *(void *)uint64_t v51 = 0;
    *((void *)v51 + 1) = 0;
    *((void *)v51 + 2) = -1;
    *((_WORD *)v51 + 14) = 0;
    unint64_t v52 = (char *)&v232 + i;
    *((_DWORD *)v52 + 6) = 0;
    *(void *)unint64_t v52 = 0;
    *((void *)v52 + 1) = 0;
    *((void *)v52 + 2) = -1;
    *((_WORD *)v52 + 14) = 0;
  }
  uint64_t v53 = v9[1];
  uint64_t v54 = ((int)a3 - (uint64_t)*((int *)v9 + 2)) * v53 - *((int *)v9 + 1) + (int)a2;
  uint64_t v185 = **((void **)v9 + 3) + (v54 + *((void *)v9 + 4)) * *(int *)(*((void *)v9 + 3) + 16);
  int v199 = v9;
  uint64_t v55 = **((void **)v9 + 7) + (v54 + *((void *)v9 + 8)) * *(int *)(*((void *)v9 + 7) + 16);
  uint64_t v56 = v205 + *v207 * (uint64_t)v214;
  uint64_t v57 = **((void **)v207 + 7) + (v56 + *((void *)v207 + 8)) * *(int *)(*((void *)v207 + 7) + 16);
  uint64_t v179 = *((void *)v207 + 4) + 2 * v56;
  uint64_t v182 = *v207;
  (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)(v35 + 9488) + 29752))((1 << v16), (1 << v16), v53, v55);
  uint64_t v181 = (1 << v16);
  if (v19)
  {
    uint64_t v58 = v16 - 2;
    unsigned int v59 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 + 9496)
                                                                                        + 8 * (v16 - 2)
                                                                                        + 176))((1 << v16), (1 << v16), v185, v53, v55, v53);
    DWORD2(v233) = 0;
    *(void *)&long long v232 = v59;
    *(void *)&long long v233 = v59;
    char v175 = v16 - 2;
  }
  else
  {
    char v175 = v16 - 2;
    uint64_t v58 = (int)v16 - 2;
  }
  uint64_t v61 = *(void *)(v35 + 9488);
  *(_DWORD *)(v61 + 832) = a2;
  *(_DWORD *)(v61 + 836) = a3;
  *(void *)(v61 + 888) = *((void *)v199 + 12)
                         + 16
                         * (((uint64_t)(int)(a2 - *((_DWORD *)v199 + 1)) >> 2)
                          + ((unint64_t)*v199 >> 2) * (((int)a3 - *((_DWORD *)v199 + 2)) >> 2));
  *(void *)(v61 + 880) = v31;
  uint64_t v173 = v57;
  uint64_t v62 = v53;
  sub_1D0D41380(v35, a2, a3, v31, v185, v62, v55, v62, v57, v182, v179, v182, v16, (unsigned char *)&v228 + 1, v197 == 0, 0);
  uint64_t v63 = *(void *)(v35 + 9496);
  uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 8 * v58 + 176);
  uint64_t v65 = *(void *)(v35 + 9488);
  *(_DWORD *)(v65 + 832) = a2;
  *(_DWORD *)(v65 + 836) = a3;
  *(void *)(v65 + 840) = v182;
  int v196 = v16;
  uint64_t v171 = v58;
  if (!HIBYTE(v228))
  {
    if (!v204)
    {
      if (v197)
      {
        *(_DWORD *)(v35 + 9120) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v63 + 16))(v181, v181, v35 + 64, (int)v181);
        unsigned int v68 = (*(uint64_t (**)(void))(v35 + 8 * (int)v16 + 9216))();
        *(_DWORD *)(v35 + 9120) = v68;
      }
      else
      {
        unsigned int v68 = v64(v181, v181, v185, v53, v57, v182);
      }
      int v46 = 0;
      BOOL v183 = 0;
      DWORD2(v233) = 0;
      *(void *)&long long v232 = v68;
      *(void *)&long long v233 = v68;
      long long v238 = v232;
      long long v239 = v233;
      goto LABEL_64;
    }
LABEL_59:
    int v46 = 0;
    BOOL v183 = 0;
LABEL_64:
    int v186 = 1;
    goto LABEL_65;
  }
  if (v197)
  {
    uint64_t v66 = (void *)v35;
    unsigned int v67 = *(_DWORD *)(v35 + 9120);
  }
  else
  {
    unsigned int v67 = v64(v181, v181, v185, v53, v57, v182);
    uint64_t v66 = (void *)v35;
  }
  uint64_t v69 = v67;
  *(void *)&long long v238 = v67;
  if (*(unsigned char *)(v66[1185] + 228))
  {
    unsigned int v70 = 0;
    LODWORD(v230) = 0;
    int v229 = 0;
    uint64_t v71 = v181;
    if (!*(unsigned char *)(v66[1186] + 196))
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, unint64_t *, int *))v66[(v196 > 2) + 1149])(v181, v182, v179, &v230, &v229);
      uint64_t v72 = &byte_1D0DA73B4[*(unsigned __int8 *)(*(void *)(v66[1183] + 16) + 2097)
                          + (uint64_t)(*(__int16 *)(*((void *)v199 + 11)
                                                 + 2
                                                 * (((uint64_t)(int)(a2 - *((_DWORD *)v199 + 1)) >> 3)
                                                  + ((unint64_t)*v199 >> 3)
                                                  * (((int)a3 - *((_DWORD *)v199 + 2)) >> 3))) >> 9)];
      unsigned int v70 = (((v230 * *v72 + v229 * v72[70]) << 6) + 128) & 0xFFFFFF00;
    }
    DWORD2(v239) = v70;
  }
  else
  {
    uint64_t v73 = v212;
    (*(void (**)(void *))(*v212 + 88))(v212);
    *(void *)(v66[1186] + 896) = v179;
    sub_1D0D3FA54((uint64_t)v66, a2, a3, v196, 0, 0);
    unsigned int v70 = (*(uint64_t (**)(void *))(*v73 + 80))(v73);
    DWORD2(v239) = v70;
    uint64_t v71 = v181;
    (*(void (**)(void *))(*v73 + 96))(v73);
  }
  unint64_t v74 = ((*(unsigned __int16 *)(v66[1187] + 2 * SWORD6(v239) + 152) * (unint64_t)v70) >> (8 * (WORD6(v239) == 0)))
      + v69;
  *(void *)&long long v239 = v74;
  if (v204 && (unint64_t)v233 < v74)
  {
    HIBYTE(v228) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v66[1186] + 29752))(v71, v71, v62, v55, v182, v173);
    goto LABEL_59;
  }
  int v186 = 0;
  BOOL v183 = v197 != 0;
  int v46 = 1;
LABEL_65:
  uint64_t v75 = v238;
  uint64_t v47 = v232;
  int v76 = DWORD2(v239);
  int v77 = DWORD2(v233);
  unint64_t v78 = (unint64_t)*v207 >> 2;
  uint64_t v79 = (char *)(*((void *)v207 + 1) + ((uint64_t)v205 >> 2) + (int)v78 * (uint64_t)(v214 >> 2));
  uint64_t v80 = 1 << v175;
  do
  {
    --v80;
    memset(v79, v46, 1 << v175);
    v79 += v78;
  }
  while (v80);
  if (v186)
  {
    int v81 = v77;
  }
  else
  {
    uint64_t v47 = v75;
    int v81 = v76;
  }
  int v198 = v81;
  BOOL v82 = v188 != 0;
  if (*v203)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
LABEL_125:
    uint64_t v35 = (uint64_t)a1;
    uint64_t v9 = v199;
    int v10 = a4;
    goto LABEL_126;
  }
  uint64_t v35 = (uint64_t)a1;
  if (v196 > *(unsigned __int8 *)(*((void *)a1 + 1184) + 2116))
  {
    int v83 = v204;
    uint64_t v9 = v199;
    int v10 = a4;
    if (v188)
    {
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      BOOL v82 = 1;
      goto LABEL_126;
    }
    int v187 = v196 - 1;
LABEL_82:
    uint64_t v85 = v9[1];
    uint64_t v86 = v207[1];
    uint64_t v87 = v85 * (((int)a3 - *((_DWORD *)v9 + 2)) >> 1) - *((int *)v9 + 1) + (int)a2;
    uint64_t v176 = v86;
    uint64_t v178 = **((void **)v9 + 5) + (v87 + *((void *)v9 + 6)) * *(int *)(*((void *)v9 + 5) + 16);
    uint64_t v88 = **((void **)v9 + 9) + (v87 + *((void *)v9 + 10)) * *(int *)(*((void *)v9 + 9) + 16);
    uint64_t v89 = ((uint64_t)v205 >> 1) + v86 * (v214 >> 1);
    uint64_t v172 = *((void *)v207 + 5) + 2 * v89;
    uint64_t v174 = *((void *)v207 + 6) + 2 * v89;
    unsigned int v168 = 2 << v187;
    uint64_t v189 = 2 * v86;
    uint64_t v180 = **((void **)v207 + 9)
         + (v205 + 2 * (int)v86 * (uint64_t)(v214 >> 1) + *((void *)v207 + 10))
         * *(int *)(*((void *)v207 + 9) + 16);
    (*(void (**)(void))(*((void *)a1 + 1186) + 29752))();
    if (v83)
    {
      uint64_t v90 = *((void *)a1 + 1187);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, long long *, long long *))(v90 + 568))(v178, v85, v88, v85, (1 << v187), (1 << v187), &v234, &v236);
      *(void *)&long long v234 = ((unint64_t)v234 * *(unsigned __int16 *)(v90 + 162)) >> 8;
      uint64_t v91 = *(unsigned __int16 *)(v90 + 166);
      uint64_t v35 = (uint64_t)a1;
      *(void *)&long long v236 = (unint64_t)(v236 * v91) >> 8;
      DWORD2(v235) = 0;
      DWORD2(v237) = 0;
    }
    unsigned int v169 = 1 << v187;
    uint64_t v92 = *(void *)(v35 + 9488);
    *(_DWORD *)(v92 + 832) = a2;
    *(_DWORD *)(v92 + 836) = a3;
    *(void *)(v92 + 888) = *((void *)v9 + 12)
                           + 16
                           * (((uint64_t)(int)(a2 - *((_DWORD *)v9 + 1)) >> 2)
                            + ((unint64_t)*v9 >> 2) * (((int)a3 - *((_DWORD *)v9 + 2)) >> 2));
    sub_1D0D444B0((void *)v35, a2, a3, v187, v31, v178, v85, v88, v85, v180, v189, v172, v174, v176, &v228, &v227);
    *(void *)(*(void *)(v35 + 9488) + 848) = v176;
    int v93 = v228;
    uint64_t v94 = v88;
    uint64_t v170 = v47;
    if (!(_BYTE)v228 && !v227 && v83)
    {
      uint64_t v44 = 0;
      uint64_t v45 = 0;
LABEL_112:
      uint64_t v116 = &v232;
LABEL_113:
      uint64_t v118 = &v240;
      if (!v45) {
        uint64_t v118 = &v234;
      }
      uint64_t v119 = *(void *)v118;
      uint64_t v120 = (char *)&v241 + 8;
      if (!v45) {
        uint64_t v120 = (char *)&v235 + 8;
      }
      int v211 = *(_DWORD *)v120;
      uint64_t v190 = *((void *)v116 + 8);
      int v209 = *((_DWORD *)v116 + 22);
      size_t v121 = (1 << (v187 - 2));
      unint64_t v122 = v207[1];
      if (v122 < 4) {
        uint64_t v123 = 1;
      }
      else {
        uint64_t v123 = v122 >> 2;
      }
      uint64_t v124 = (uint64_t)v205 >> 3;
      uint64_t v125 = (char *)(*((void *)v207 + 2) + v124 + (int)(v122 >> 2) * (uint64_t)(v214 >> 3));
      uint64_t v126 = (1 << (v187 - 2));
      do
      {
        --v126;
        memset(v125, v45, v121);
        v125 += v123;
      }
      while (v126);
      uint64_t v127 = v119 + v170;
      uint64_t v128 = (char *)(*((void *)v207 + 3) + v124 + ((unint64_t)v207[1] >> 2) * (v214 >> 3));
      uint64_t v129 = (1 << (v187 - 2));
      do
      {
        --v129;
        memset(v128, v44, v121);
        v128 += v123;
      }
      while (v129);
      BOOL v82 = 0;
      uint64_t v47 = v127 + v190;
      v198 += v211 + v209;
      goto LABEL_125;
    }
    int v167 = v227;
    uint64_t v95 = v35;
    uint64_t v96 = *(void *)(v35 + 9496);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, unint64_t *, unint64_t *))(v96 + 568))(v178, v85, v180, v189, v169, v169, &v230, &v231);
    unint64_t v97 = (v230 * *(unsigned __int16 *)(v96 + 162)) >> 8;
    unint64_t v98 = (v231 * *(unsigned __int16 *)(v96 + 166)) >> 8;
    unint64_t v230 = v97;
    unint64_t v231 = v98;
    if (v93)
    {
      *(void *)&long long v240 = v97;
      unint64_t v99 = (void *)v95;
      uint64_t v166 = v94;
      if (*(unsigned char *)(*(void *)(v95 + 9480) + 228))
      {
        uint64_t v100 = v95;
        uint64_t v101 = v169;
        unsigned int v102 = sub_1D0D47ABC(v100, a2, a3, v199, 0, v172, v176, v169);
        DWORD2(v241) = v102;
        int v103 = v204;
      }
      else
      {
        int v105 = v212;
        (*(void (**)(void *))(*v212 + 88))(v212);
        *(void *)(*(void *)(v95 + 9488) + 904) = v172;
        sub_1D0D3FA54(v95, a2, a3, v187, 0, 1);
        unsigned int v102 = (*(uint64_t (**)(void *))(*v105 + 80))(v105);
        DWORD2(v241) = v102;
        (*(void (**)(void *))(*v105 + 96))(v105);
        int v103 = v204;
        uint64_t v101 = v169;
      }
      uint64_t v106 = v99[1187] + 152;
      unint64_t v107 = ((*(unsigned __int16 *)(v106 + 2 * SWORD6(v241)) * (unint64_t)v102) >> (8 * (WORD6(v241) == 0)))
           + v97;
      *(void *)&long long v241 = v107;
      unint64_t v108 = ((*(unsigned __int16 *)(v106 + 2 * SWORD6(v235)) * (unint64_t)DWORD2(v235)) >> (8 * (WORD6(v235) == 0)))
           + v234;
      *(void *)&long long v235 = v108;
      uint64_t v45 = 1;
      if (v103)
      {
        int v109 = v167;
        if (v108 < v107)
        {
          LOBYTE(v228) = 0;
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v99[1186] + 29760))(v168, v101, v85, v166, v189, v180);
          uint64_t v45 = 0;
        }
      }
      else
      {
        int v109 = v167;
      }
      if (v109)
      {
        unint64_t v98 = v231;
        goto LABEL_101;
      }
      if (v103)
      {
LABEL_109:
        uint64_t v44 = 0;
        goto LABEL_112;
      }
      unint64_t v98 = v231;
    }
    else
    {
      int v103 = v204;
      if (v204)
      {
        uint64_t v104 = v85;
        uint64_t v44 = 0;
        unint64_t v99 = a1;
        uint64_t v101 = v169;
        if (!v167)
        {
          uint64_t v116 = &v232;
          uint64_t v45 = 0;
          goto LABEL_113;
        }
        uint64_t v45 = 0;
        uint64_t v85 = v104;
        goto LABEL_101;
      }
      uint64_t v45 = 0;
      *(void *)&long long v234 = v97;
      DWORD2(v235) = 0;
      long long v240 = v234;
      long long v241 = v235;
      unint64_t v99 = a1;
      uint64_t v101 = v169;
      if (v167)
      {
LABEL_101:
        uint64_t v110 = v85;
        *(void *)&long long v242 = v98;
        if (*(unsigned char *)(v99[1185] + 228))
        {
          unsigned int v111 = sub_1D0D47ABC((uint64_t)v99, a2, a3, v199, 1, v174, v176, v101);
          DWORD2(v243) = v111;
        }
        else
        {
          int v112 = v212;
          (*(void (**)(void *))(*v212 + 88))(v212);
          *(void *)(v99[1186] + 912) = v174;
          sub_1D0D3FA54((uint64_t)v99, a2, a3, v187, 0, 2);
          unsigned int v111 = (*(uint64_t (**)(void *))(*v112 + 80))(v112);
          DWORD2(v243) = v111;
          (*(void (**)(void *))(*v112 + 96))(v112);
        }
        uint64_t v113 = v99[1187] + 152;
        unint64_t v114 = ((*(unsigned __int16 *)(v113 + 2 * SWORD6(v243)) * (unint64_t)v111) >> (8 * (WORD6(v243) == 0)))
             + v98;
        *(void *)&long long v243 = v114;
        unint64_t v115 = ((*(unsigned __int16 *)(v113 + 2 * SWORD6(v237)) * (unint64_t)DWORD2(v237)) >> (8 * (WORD6(v237) == 0)))
             + v236;
        *(void *)&long long v237 = v115;
        uint64_t v44 = 1;
        uint64_t v116 = &v238;
        if (!v103 || v115 >= v114) {
          goto LABEL_113;
        }
        unsigned __int8 v227 = 0;
        int v117 = a2 - *((_DWORD *)v199 + 1) + 1;
        (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v99[1186] + 29760))(v168, v101, v110, **((void **)v199 + 9)+ (*((void *)v199 + 10) + v117 + v199[1] * (uint64_t)(((int)a3 - *((_DWORD *)v199 + 2)) >> 1))* *(int *)(*((void *)v199 + 9) + 16), v189, **(void **)(*((void *)v199 + 17) + 72)+ (*(void *)(*((void *)v199 + 17) + 80)+ v117+ 2 * *(unsigned __int8 *)(*((void *)v199 + 17) + 1) * (uint64_t)(((int)a3 - *((_DWORD *)v199 + 2)) >> 1))* *(int *)(*(void *)(*((void *)v199 + 17) + 72) + 16));
        goto LABEL_109;
      }
    }
    uint64_t v44 = 0;
    *(void *)&long long v236 = v98;
    DWORD2(v237) = 0;
    long long v242 = v236;
    long long v243 = v237;
    goto LABEL_112;
  }
  uint64_t v44 = 0;
  if (a6) {
    int v84 = 0;
  }
  else {
    int v84 = v196;
  }
  int v187 = v84;
  BOOL v82 = 1;
  int v83 = v204;
  uint64_t v9 = v199;
  int v10 = a4;
  uint64_t v45 = 0;
  if (!a6 && !v188) {
    goto LABEL_82;
  }
LABEL_126:
  (*(void (**)(void *))(*v212 + 88))(v212);
  if (v45 | v44) {
    BOOL v130 = *v203 == 0;
  }
  else {
    BOOL v130 = 0;
  }
  if (v130 || v10 != 0) {
    (*(void (**)(void))*v212)();
  }
  if (!v82)
  {
    if (v196 <= 2) {
      int v132 = 0;
    }
    else {
      int v132 = v10;
    }
    uint64_t v133 = (uint64_t)v212 + v132 + 84;
    (*(void (**)(void *, uint64_t, uint64_t))*v212)(v212, v45, v133);
    (*(void (**)(void *, uint64_t, uint64_t))*v212)(v212, v44, v133);
  }
  LODWORD(v16) = v196;
  if (v191 < v196) {
    (*(void (**)(void *, void, uint64_t))*v212)(v212, 0, (uint64_t)v212 - v196 + 84);
  }
  unsigned int v48 = (*(uint64_t (**)(void *))(*v212 + 80))(v212) + v198;
  (*(void (**)(void *))(*v212 + 96))(v212);
  if (v47 + ((*(unsigned __int16 *)(*(void *)(v35 + 9496) + 152) * (unint64_t)v48) >> 8) > v216) {
    goto LABEL_142;
  }
  if (!v183)
  {
    uint64_t v154 = a8;
    int v155 = a9;
    int v49 = v181;
    goto LABEL_153;
  }
  uint64_t v152 = **((void **)v207 + 7)
       + (*((void *)v207 + 8) + v205 + *v207 * (uint64_t)v214) * *(int *)(*((void *)v207 + 7) + 16);
  uint64_t v153 = *(void *)(v35 + 9464) + 2824;
  int v49 = v181;
  if ((*v31 & 0x100) != 0) {
    (*(void (**)(uint64_t))(v153 + 8 * v171 + 248))(v152);
  }
  else {
    (*(void (**)(uint64_t))(v153 + 16 * v171))(v152);
  }
LABEL_152:
  uint64_t v154 = a8;
  int v155 = a9;
LABEL_153:
  *uint64_t v31 = *v31 & 0xFFF3 | (4 * (v10 & 3));
  uint64_t result = (v46 | v45 | v44) != 0;
  if (v49 >= 8)
  {
    uint64_t v156 = 0;
    unint64_t v157 = 2 * ((unint64_t)*v9 >> 3);
    uint64_t v158 = v31;
    do
    {
      unint64_t v159 = v158;
      uint64_t v160 = v49 >> 3;
      do
      {
        *v159++ = *v31;
        --v160;
      }
      while (v160);
      ++v156;
      uint64_t v158 = (__int16 *)((char *)v158 + v157);
    }
    while (v156 != v49 >> 3);
  }
  uint64_t v142 = *(void *)(v35 + 9496);
  uint64_t v161 = a7->i64[0] + v47;
  a7->i64[0] = v161;
  unsigned __int32 v162 = a7[1].i32[2] + v48;
  a7[1].i32[2] = v162;
  a7[1].i64[0] = ((*(unsigned __int16 *)(v142 + 152 + 2 * a7[1].i16[6]) * (unint64_t)v162) >> (8 * (a7[1].i16[6] == 0)))
               + v161;
  uint64_t v163 = v154->i64[0] + v47;
  v154->i64[0] = v163;
  unsigned __int32 v164 = v154[1].i32[2] + v198;
  v154[1].i32[2] = v164;
  v154[1].i64[0] = ((*(unsigned __int16 *)(v142 + 152 + 2 * v154[1].i16[6]) * (unint64_t)v164) >> (8 * (v154[1].i16[6] == 0)))
                 + v163;
  if (v155 && v204)
  {
    uint64_t v150 = v155->i64[0] + v232;
    v155->i64[0] = v150;
    unsigned int v149 = v155[1].i32[2] + DWORD2(v233);
    v155[1].i32[2] = v149;
    if (!*v203)
    {
      int v165 = DWORD2(v235);
      v150 += v236 + v234;
      v155->i64[0] = v150;
      v149 += DWORD2(v237) + v165;
      v155[1].i32[2] = v149;
    }
    int v147 = v155;
LABEL_163:
    v147[1].i64[0] = ((*(unsigned __int16 *)(v142 + 2 * v147[1].i16[6] + 152) * (unint64_t)v149) >> (8 * (v147[1].i16[6] == 0)))
                   + v150;
  }
  return result;
}

uint64_t sub_1D0D47ABC(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *))(a1 + 8 * ((a8 & 7) == 0) + 9192))(a8, a7, a6, (char *)&v20 + 4, &v20);
  uint64_t v13 = *(void *)(a1 + 9464);
  int v14 = *(unsigned __int8 *)(*(void *)(v13 + 16) + 2099);
  uint64_t v15 = 560;
  uint64_t v16 = 14;
  if (a5)
  {
    uint64_t v16 = 15;
    uint64_t v15 = 561;
  }
  int v17 = *(char *)(v13 + v15)
      + *(char *)(*(void *)(v13 + 32) + v16)
      + v14
      + (*(__int16 *)(*((void *)a4 + 11)
                    + 2
                    * (((uint64_t)(a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
  if (v17 >= v14 + 57) {
    int v18 = v14 + 57;
  }
  else {
    int v18 = v17;
  }
  if (v17 <= 0) {
    int v18 = 0;
  }
  return (((HIDWORD(v20) * byte_1D0DA73B4[v18 + 140] + v20 * byte_1D0DA73B4[v18 + 210]) << 6) + 128) & 0xFFFFFF00;
}

uint64_t sub_1D0D47BD4(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6)
{
  LODWORD(v7) = a4;
  int v11 = 0;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  int v12 = -(int)v7;
  while (1)
  {
    int v13 = *(_DWORD *)a1;
    unint64_t v14 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    int v15 = a3 - *((_DWORD *)a5 + 2);
    uint64_t v16 = *((void *)a5 + 11);
    unint64_t v17 = *a5;
    uint64_t v18 = ((uint64_t)(int)v14 >> 3) + (int)(v17 >> 3) * (uint64_t)(v15 >> 3);
    if ((int)v7 >= ((*(unsigned __int16 *)(v16 + 2 * v18) >> 2) & 3)) {
      break;
    }
    int v19 = 1 << (--v12 + v13);
    uint64_t v20 = (v19 + a2);
    uint64_t v21 = (v19 + a3);
    uint64_t v7 = (v7 + 1);
    int v22 = v11;
    int v23 = sub_1D0D47BD4(a1, a2, a3, v7, a5, 0);
    int v24 = v23 | sub_1D0D47BD4(a1, v20, a3, v7, a5, 1);
    int v11 = v22 | sub_1D0D47BD4(a1, a2, v21, v7, a5, 2) | v24;
    a6 = 3;
    a2 = v20;
    a3 = v21;
  }
  int v25 = v12 + v13;
  int v26 = *(unsigned __int8 *)(a1[1185] + 204);
  __int16 v88 = 0;
  uint64_t v27 = a1[1186];
  uint64_t v28 = *(void *)(v27 + 944);
  unsigned int v93 = 0;
  v91[0] = 0;
  v91[1] = 0;
  unint64_t v92 = -1;
  __int16 v94 = 0;
  unsigned int v97 = 0;
  v95[0] = 0;
  v95[1] = 0;
  unint64_t v96 = -1;
  __int16 v98 = 0;
  uint64_t v29 = a5[1];
  uint64_t v30 = *((void *)a5 + 17);
  uint64_t v31 = *(unsigned __int8 *)(v30 + 1);
  uint64_t v32 = 2 * v31;
  if (v26) {
    uint64_t v33 = a5[1];
  }
  else {
    uint64_t v33 = 2 * v31;
  }
  uint64_t v34 = (uint64_t *)*((void *)a5 + 5);
  unint64_t v35 = v14 + a5[1] * (uint64_t)(v15 >> 1);
  uint64_t v36 = **(void **)(v30 + 72)
      + (v14 + (int)v32 * (uint64_t)(v15 >> 1) + *(void *)(v30 + 80)) * *(int *)(*(void *)(v30 + 72) + 16);
  uint64_t v37 = v36;
  if (v26) {
    uint64_t v37 = **((void **)a5 + 9) + (v35 + *((void *)a5 + 10)) * *(int *)(*((void *)a5 + 9) + 16);
  }
  uint64_t v38 = *((int *)v34 + 4);
  uint64_t v39 = *v34;
  uint64_t v41 = *(void *)(v30 + 40);
  uint64_t v40 = *(void *)(v30 + 48);
  if (v25 > *(unsigned __int8 *)(a1[1184] + 2116))
  {
    --v25;
    goto LABEL_13;
  }
  if (!a6)
  {
LABEL_13:
    uint64_t v83 = v28;
    int v43 = (__int16 *)(v16 + 2 * v18);
    uint64_t v44 = v39 + (v35 + *((void *)a5 + 6)) * v38;
    uint64_t v45 = (int)v31 * (uint64_t)(v15 >> 1) + ((int)v14 >> 1);
    uint64_t v46 = v41 + 2 * v45;
    uint64_t v47 = v40 + 2 * v45;
    uint64_t v48 = (1 << v25);
    int v84 = v26;
    uint64_t v85 = v36;
    unsigned int v86 = 1 << v25;
    int v87 = v11;
    if (v26)
    {
      uint64_t v81 = v31;
      int v79 = v25;
      uint64_t v49 = a1[1187];
      uint64_t v50 = v44;
      int v76 = v43;
      uint64_t v78 = v41 + 2 * v45;
      uint64_t v51 = (1 << v25);
      uint64_t v52 = a5[1];
      uint64_t v53 = v47;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(v49 + 568))(v44, v52, v37, v52, v48, v51, v91, v95);
      uint64_t v47 = v53;
      uint64_t v29 = v52;
      int v43 = v76;
      uint64_t v44 = v50;
      unint64_t v14 = v91[0] * *(unsigned __int16 *)(v49 + 162);
      uint64_t v54 = *(unsigned __int16 *)(v49 + 166);
      uint64_t v36 = v85;
      int v25 = v79;
      uint64_t v31 = v81;
      unint64_t v55 = v95[0] * v54;
      v91[0] = v14 >> 8;
      v95[0] = (unint64_t)(v95[0] * v54) >> 8;
      unint64_t v17 = a1[1187] + 152;
      uint64_t v46 = v78;
      unint64_t v92 = ((*(unsigned __int16 *)(v17 + 2 * v94) * (unint64_t)v93) >> (8 * (v94 == 0))) + (v14 >> 8);
      unint64_t v96 = ((*(unsigned __int16 *)(v17 + 2 * v98) * (unint64_t)v97) >> (8 * (v98 == 0))) + (v55 >> 8);
      uint64_t v27 = a1[1186];
      LODWORD(v17) = *a5;
      LODWORD(v14) = a2 - *((_DWORD *)a5 + 1);
      int v15 = a3 - *((_DWORD *)a5 + 2);
    }
    *(_DWORD *)(v27 + 832) = a2;
    *(_DWORD *)(v27 + 836) = a3;
    *(void *)(v27 + 888) = *((void *)a5 + 12)
                           + 16 * (((uint64_t)(int)v14 >> 2) + (v17 >> 2) * (uint64_t)(v15 >> 2));
    uint64_t v75 = v33;
    uint64_t v82 = v33;
    uint64_t v56 = v44;
    sub_1D0D444B0(a1, a2, a3, v25, v43, v44, v29, v37, v75, v36, v32, v46, v47, v31, (unsigned char *)&v88 + 1, &v88);
    sub_1D0D1076C(a1[1186], a2, a3, a5, 1, 0, 0, 0, 0);
    int v57 = 0;
    int v58 = 0;
    char v59 = v25 - 2;
    uint64_t v60 = v36;
    int v61 = HIBYTE(v88);
    if (!(HIBYTE(v88) | v88)) {
      goto LABEL_27;
    }
    int v80 = v88;
    uint64_t v62 = a1[1187];
    uint64_t v77 = v32;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, unint64_t *, unint64_t *))(v62 + 568))(v56, v29, v60, v32, v86, v86, &v89, &v90);
    unint64_t v63 = (v89 * *(unsigned __int16 *)(v62 + 162)) >> 8;
    unint64_t v64 = (v90 * *(unsigned __int16 *)(v62 + 166)) >> 8;
    unint64_t v89 = v63;
    unint64_t v90 = v64;
    if (v61)
    {
      uint64_t v65 = v83;
      (*(void (**)(uint64_t))(*(void *)v83 + 88))(v83);
      sub_1D0D3FA54((uint64_t)a1, a2, a3, v25, 0, 1);
      unsigned int v66 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 80))(v65);
      (*(void (**)(uint64_t))(*(void *)v65 + 96))(v65);
      if (!v84)
      {
        int v58 = 1;
LABEL_21:
        if (v80)
        {
          int v67 = v58;
          unint64_t v68 = v90;
          uint64_t v69 = v83;
          (*(void (**)(uint64_t))(*(void *)v83 + 88))(v83);
          sub_1D0D3FA54((uint64_t)a1, a2, a3, v25, 0, 2);
          unsigned int v70 = (*(uint64_t (**)(uint64_t))(*(void *)v69 + 80))(v69);
          (*(void (**)(uint64_t))(*(void *)v69 + 96))(v69);
          int v57 = 1;
          if (v84 && v96 < v68 + ((*(unsigned __int16 *)(a1[1187] + 152) * (unint64_t)v70) >> 8))
          {
            int v71 = a2 - *((_DWORD *)a5 + 1) + 1;
            (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1[1186] + 29760))((2 << v25), v86, v82, **((void **)a5 + 9)+ (*((void *)a5 + 10) + v71 + a5[1] * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*((void *)a5 + 9) + 16), v77, **(void **)(*((void *)a5 + 17) + 72)+ (*(void *)(*((void *)a5 + 17) + 80)+ v71+ 2 * *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*(void *)(*((void *)a5 + 17) + 72) + 16));
            int v57 = 0;
          }
          char v59 = v25 - 2;
          int v58 = v67;
        }
        else
        {
          int v57 = 0;
          char v59 = v25 - 2;
        }
LABEL_27:
        int v72 = 1 << v59;
        int v73 = v58;
        sub_1D0D7B228(a5, a2, a3, 1 << v59, 1, v58, 0);
        sub_1D0D7B228(a5, a2, a3, v72, 2, v57, 0);
        BOOL v42 = (v57 | v73) != 0;
        int v11 = v87;
        return (v11 | v42) & 1;
      }
      int v58 = 1;
      if (v92 >= v63 + ((*(unsigned __int16 *)(a1[1187] + 152) * (unint64_t)v66) >> 8)) {
        goto LABEL_21;
      }
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1[1186] + 29760))((2 << v25), v86, v82, v37, v77, v85);
    }
    int v58 = 0;
    goto LABEL_21;
  }
  BOOL v42 = 0;
  return (v11 | v42) & 1;
}

uint64_t sub_1D0D482FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v10) = a4;
  uint64_t v13 = a1;
  int v127 = 0;
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  int v14 = -a4;
  while (1)
  {
    int v16 = *(_DWORD *)v13;
    uint64_t v17 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    uint64_t v18 = (int)a3 - (uint64_t)*((int *)a5 + 2);
    if ((int)v10 >= ((*(unsigned __int16 *)(*((void *)a5 + 11)
                                           + 2
                                           * (((uint64_t)(int)v17 >> 3) + ((unint64_t)*a5 >> 3) * ((int)v18 >> 3))) >> 2) & 3))
      break;
    int v19 = 1 << (--v14 + v16);
    uint64_t v20 = (v19 + a2);
    uint64_t v21 = (v19 + a3);
    uint64_t v10 = (v10 + 1);
    int v22 = sub_1D0D482FC(v13, a2, a3, v10, a5, 0, a7, a8);
    int v23 = v22 | sub_1D0D482FC(a1, v20, a3, v10, a5, 1, a7, a8);
    uint64_t v13 = a1;
    v127 |= sub_1D0D482FC(a1, a2, v21, v10, a5, 2, a7, a8) | v23;
    a6 = 3;
    a2 = v20;
    a3 = v21;
  }
  uint64_t v24 = 0;
  int v25 = v14 + v16;
  int v124 = *(unsigned __int8 *)(*(void *)(v13 + 9480) + 204);
  uint64_t v26 = *(void *)(v13 + 9488);
  uint64_t v120 = *(void *)(v26 + 944);
  do
  {
    uint64_t v27 = (char *)&v138 + v24;
    *((_DWORD *)v27 + 6) = 0;
    *(void *)uint64_t v27 = 0;
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = -1;
    *((_WORD *)v27 + 14) = 0;
    uint64_t v28 = (char *)&v132 + v24;
    *((_DWORD *)v28 + 6) = 0;
    *(void *)uint64_t v28 = 0;
    *((void *)v28 + 1) = 0;
    *((void *)v28 + 2) = -1;
    v24 += 32;
    *((_WORD *)v28 + 14) = 0;
  }
  while (v24 != 96);
  uint64_t v29 = (unsigned __int8 *)*((void *)a5 + 17);
  unint64_t v30 = *v29;
  int v31 = *(unsigned __int8 *)(*((void *)v29 + 1) + ((uint64_t)(int)v17 >> 2)
                                                  + (int)(v30 >> 2) * (uint64_t)((int)v18 >> 2));
  uint64_t v32 = (1 << v25);
  uint64_t v33 = a5[1];
  if (v124) {
    uint64_t v34 = a5[1];
  }
  else {
    uint64_t v34 = *v29;
  }
  uint64_t v35 = v17 + v33 * v18;
  uint64_t v36 = **((void **)a5 + 3) + (v35 + *((void *)a5 + 4)) * *(int *)(*((void *)a5 + 3) + 16);
  uint64_t v37 = v17 + v30 * v18;
  uint64_t v38 = **((void **)v29 + 7) + (v37 + *((void *)v29 + 8)) * *(int *)(*((void *)v29 + 7) + 16);
  int v122 = v25;
  unsigned int v118 = 1 << v25;
  uint64_t v116 = v38;
  if (!v124)
  {
    uint64_t v43 = *((void *)v29 + 4);
    BOOL v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)(a1 + 9496)
                                                                                                  + 8 * (v25 - 2)
                                                                                                  + 176);
    uint64_t v121 = a1 + 9496;
    *(_DWORD *)(v26 + 832) = a2;
    *(_DWORD *)(v26 + 836) = a3;
    *(void *)(v26 + 840) = v30;
    if (v31)
    {
      uint64_t v112 = v38;
      uint64_t v114 = v34;
      unint64_t v108 = v133;
      char v110 = v25 - 2;
      goto LABEL_14;
    }
    unsigned int v50 = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v42)(v32, (1 << v25), v36, v33);
    DWORD2(v133) = 0;
    *(void *)&long long v132 = v50;
    *(void *)&long long v133 = v50;
    long long v138 = v132;
    long long v139 = v133;
LABEL_18:
    uint64_t v47 = a1;
    goto LABEL_19;
  }
  uint64_t v114 = v34;
  uint64_t v103 = *((void *)v29 + 4);
  uint64_t v105 = **((void **)a5 + 3) + (v35 + *((void *)a5 + 4)) * *(int *)(*((void *)a5 + 3) + 16);
  uint64_t v121 = a1 + 9496;
  uint64_t v39 = v25 - 2;
  uint64_t v112 = **((void **)a5 + 7) + (v35 + *((void *)a5 + 8)) * *(int *)(*((void *)a5 + 7) + 16);
  unsigned int v40 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 9496) + 8 * v39 + 176))(v32, (1 << v25));
  DWORD2(v133) = 0;
  *(void *)&long long v132 = v40;
  *(void *)&long long v133 = v40;
  uint64_t v41 = *(void *)(a1 + 9488);
  char v110 = v39;
  BOOL v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)(a1 + 9496)
                                                                                                + 8 * v39
                                                                                                + 176);
  *(_DWORD *)(v41 + 832) = a2;
  *(_DWORD *)(v41 + 836) = a3;
  *(void *)(v41 + 840) = v30;
  if (!v31) {
    goto LABEL_18;
  }
  unint64_t v108 = v40;
  uint64_t v32 = v118;
  uint64_t v38 = v116;
  uint64_t v43 = v103;
  uint64_t v36 = v105;
LABEL_14:
  uint64_t v44 = v43 + 2 * v37;
  unsigned int v45 = v42(v32, v32, v36, v33, v38, v30);
  *(void *)&long long v138 = v45;
  uint64_t v46 = v120;
  (*(void (**)(uint64_t))(*(void *)v120 + 88))(v120);
  uint64_t v47 = a1;
  *(void *)(*(void *)(a1 + 9488) + 896) = v44;
  sub_1D0D3FA54(a1, a2, a3, v122, 0, 0);
  unsigned int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 80))(v46);
  DWORD2(v139) = v48;
  (*(void (**)(uint64_t))(*(void *)v46 + 96))(v46);
  unint64_t v49 = ((*(unsigned __int16 *)(*(void *)(a1 + 9496) + 2 * SWORD6(v139) + 152) * (unint64_t)v48) >> (8 * (WORD6(v139) == 0)))
      + v45;
  *(void *)&long long v139 = v49;
  int v31 = 1;
  if (v124 && v108 < v49)
  {
    sub_1D0D7B228(a5, a2, a3, 1 << v110, 0, 0, 0);
    (*(void (**)(void, void, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)(a1 + 9488)
                                                                                        + 29752))(v118, v118, v114, v112, v30, v116);
    int v31 = 0;
  }
LABEL_19:
  uint64_t v51 = a7;
  if (*(unsigned char *)(v47 + 9504))
  {
    int v52 = 0;
    int v53 = 0;
    goto LABEL_67;
  }
  int v54 = *(unsigned __int8 *)(*(void *)(v47 + 9472) + 2116);
  if (a6) {
    int v55 = 0;
  }
  else {
    int v55 = v122;
  }
  if (v122 > v54) {
    int v56 = v122 - 1;
  }
  else {
    int v56 = v55;
  }
  if (!a6 || (int v52 = 0, v53 = 0, v122 > v54))
  {
    uint64_t v57 = (int)a2 - (uint64_t)*((int *)a5 + 1);
    int v58 = a3 - *((_DWORD *)a5 + 2);
    uint64_t v59 = *((void *)a5 + 17);
    unint64_t v60 = *(unsigned __int8 *)(v59 + 1);
    uint64_t v61 = ((uint64_t)(int)v57 >> 3) + (int)(v60 >> 2) * (uint64_t)(v58 >> 3);
    int v119 = v56;
    uint64_t v62 = (1 << v56);
    uint64_t v123 = a5[1];
    uint64_t v63 = v57 + v123 * (v58 >> 1);
    uint64_t v64 = **((void **)a5 + 5) + (v63 + *((void *)a5 + 6)) * *(int *)(*((void *)a5 + 5) + 16);
    uint64_t v117 = **(void **)(v59 + 72)
         + (v57 + 2 * v60 * (v58 >> 1) + *(void *)(v59 + 80)) * *(int *)(*(void *)(v59 + 72) + 16);
    uint64_t v65 = v117;
    if (v124) {
      uint64_t v65 = **((void **)a5 + 9) + (v63 + *((void *)a5 + 10)) * *(int *)(*((void *)a5 + 9) + 16);
    }
    int v66 = *(unsigned __int8 *)(*(void *)(v59 + 16) + v61);
    int v67 = *(unsigned __int8 *)(*(void *)(v59 + 24) + v61);
    uint64_t v109 = *(void *)(v59 + 40);
    uint64_t v111 = *(void *)(v59 + 48);
    int v115 = v67;
    uint64_t v104 = v65;
    int v113 = v66;
    if (v124)
    {
      int v106 = v66 | v67;
      uint64_t v68 = *(void *)(a1 + 9496);
      uint64_t v69 = **((void **)a5 + 5) + (v63 + *((void *)a5 + 6)) * *(int *)(*((void *)a5 + 5) + 16);
      (*(void (**)(void))(v68 + 568))();
      uint64_t v64 = v69;
      int v52 = 0;
      int v53 = 0;
      *(void *)&long long v134 = ((unint64_t)v134 * *(unsigned __int16 *)(v68 + 162)) >> 8;
      *(void *)&long long v136 = ((unint64_t)v136 * *(unsigned __int16 *)(v68 + 166)) >> 8;
      DWORD2(v135) = 0;
      DWORD2(v137) = 0;
      *(void *)(*(void *)(a1 + 9488) + 848) = v60;
      if (!v106) {
        goto LABEL_57;
      }
    }
    else
    {
      *(void *)(*(void *)(v47 + 9488) + 848) = v60;
    }
    uint64_t v70 = (int)v60 * (uint64_t)(v58 >> 1) + ((int)v57 >> 1);
    uint64_t v71 = *(void *)v121;
    uint64_t v107 = 2 * v60;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v121 + 568))(v64, v123, v117);
    unint64_t v72 = (v129 * (unint64_t)*(unsigned __int16 *)(v71 + 162)) >> 8;
    unint64_t v73 = (v130 * (unint64_t)*(unsigned __int16 *)(v71 + 166)) >> 8;
    unint64_t v131 = v73;
    if (v113)
    {
      *(void *)&long long v140 = (v129 * (unint64_t)*(unsigned __int16 *)(v71 + 162)) >> 8;
      (*(void (**)(uint64_t))(*(void *)v120 + 88))(v120);
      *(void *)(*(void *)(a1 + 9488) + 904) = v109 + 2 * v70;
      sub_1D0D3FA54(a1, a2, a3, v119, 0, 1);
      unsigned int v74 = (*(uint64_t (**)(uint64_t))(*(void *)v120 + 80))(v120);
      DWORD2(v141) = v74;
      (*(void (**)(uint64_t))(*(void *)v120 + 96))(v120);
      uint64_t v75 = *(void *)(a1 + 9496) + 152;
      unint64_t v76 = ((*(unsigned __int16 *)(v75 + 2 * SWORD6(v141)) * (unint64_t)v74) >> (8 * (WORD6(v141) == 0)))
          + v72;
      unint64_t v77 = ((*(unsigned __int16 *)(v75 + 2 * SWORD6(v135)) * (unint64_t)DWORD2(v135)) >> (8
                                                                                                  * (WORD6(v135) == 0)))
          + v134;
      *(void *)&long long v135 = v77;
      if (v124) {
        BOOL v78 = v77 >= v76;
      }
      else {
        BOOL v78 = 1;
      }
      int v79 = !v78;
      if (v79 == 1)
      {
        sub_1D0D7B228(a5, a2, a3, 1 << (v119 - 2), 1, 0, 0);
        (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 9488) + 29760))((2 << v119), v62, v123, v104, v107, v117);
      }
      int v52 = v79 ^ 1;
      if (v115)
      {
        unint64_t v73 = v131;
        uint64_t v80 = a1;
        goto LABEL_52;
      }
      if (v124)
      {
LABEL_55:
        int v53 = 0;
        goto LABEL_57;
      }
      unint64_t v73 = v131;
    }
    else
    {
      if (v124)
      {
        int v52 = 0;
        int v53 = 0;
        uint64_t v80 = a1;
        if (!v115) {
          goto LABEL_57;
        }
        goto LABEL_52;
      }
      int v52 = 0;
      *(void *)&long long v134 = (v129 * (unint64_t)*(unsigned __int16 *)(v71 + 162)) >> 8;
      DWORD2(v135) = 0;
      long long v140 = v134;
      long long v141 = v135;
      uint64_t v80 = a1;
      if (v115)
      {
LABEL_52:
        unsigned int v102 = v62;
        *(void *)&long long v142 = v73;
        uint64_t v81 = v120;
        (*(void (**)(uint64_t))(*(void *)v120 + 88))(v120);
        *(void *)(*(void *)(v80 + 9488) + 912) = v111 + 2 * v70;
        sub_1D0D3FA54(v80, a2, a3, v119, 0, 2);
        unsigned int v82 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 80))(v81);
        DWORD2(v143) = v82;
        (*(void (**)(uint64_t))(*(void *)v81 + 96))(v81);
        uint64_t v83 = *(void *)(v80 + 9496) + 152;
        unsigned int v84 = *(unsigned __int16 *)(v83 + 2 * SWORD6(v143));
        unint64_t v85 = ((*(unsigned __int16 *)(v83 + 2 * SWORD6(v137)) * (unint64_t)DWORD2(v137)) >> (8 * (WORD6(v137) == 0)))
            + v136;
        *(void *)&long long v137 = v85;
        int v53 = 1;
        if (v124 && v85 < ((v84 * (unint64_t)v82) >> (8 * (WORD6(v143) == 0))) + v73)
        {
          sub_1D0D7B228(a5, a2, a3, 1 << (v119 - 2), 2, 0, 0);
          int v86 = a2 - *((_DWORD *)a5 + 1) + 1;
          (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 + 9488) + 29760))((2 << v119), v102, v123, **((void **)a5 + 9)+ (*((void *)a5 + 10) + v86 + a5[1] * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*((void *)a5 + 9) + 16), v107, **(void **)(*((void *)a5 + 17) + 72)+ (*(void *)(*((void *)a5 + 17) + 80)+ v86+ 2 * *(unsigned __int8 *)(*((void *)a5 + 17) + 1) * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 1))* *(int *)(*(void *)(*((void *)a5 + 17) + 72) + 16));
          goto LABEL_55;
        }
LABEL_57:
        uint64_t v51 = a7;
        if (a7)
        {
          int v87 = &v140;
          if (!v52) {
            int v87 = &v134;
          }
          uint64_t v88 = *(void *)a7 + *(void *)v87;
          unint64_t v89 = (char *)&v141 + 8;
          if (!v52) {
            unint64_t v89 = (char *)&v135 + 8;
          }
          int v90 = *(_DWORD *)(a7 + 24) + *(_DWORD *)v89;
          uint64_t v91 = &v142;
          if (!v53) {
            uint64_t v91 = &v136;
          }
          *(void *)a7 = *(void *)v91 + v88;
          unint64_t v92 = (char *)&v143 + 8;
          if (!v53) {
            unint64_t v92 = (char *)&v137 + 8;
          }
          *(_DWORD *)(a7 + 24) = *(_DWORD *)v92 + v90;
        }
        goto LABEL_67;
      }
    }
    int v53 = 0;
    *(void *)&long long v136 = v73;
    DWORD2(v137) = 0;
    long long v142 = v136;
    long long v143 = v137;
    goto LABEL_57;
  }
LABEL_67:
  if (v51)
  {
    if (v31) {
      unsigned int v93 = &v138;
    }
    else {
      unsigned int v93 = &v132;
    }
    uint64_t v94 = *(void *)v51 + *(void *)v93;
    *(void *)uint64_t v51 = v94;
    uint64_t v95 = (char *)&v133 + 8;
    if (v31) {
      uint64_t v95 = (char *)&v139 + 8;
    }
    unsigned int v96 = *(_DWORD *)(v51 + 24) + *(_DWORD *)v95;
    *(_DWORD *)(v51 + 24) = v96;
    *(void *)(v51 + 16) = ((*(unsigned __int16 *)(*(void *)v121 + 2 * *(__int16 *)(v51 + 28) + 152)
                            * (unint64_t)v96) >> (8 * (*(_WORD *)(v51 + 28) == 0)))
                          + v94;
  }
  if (a8 && v124)
  {
    int v97 = *(_DWORD *)(a8 + 24) + DWORD2(v133);
    int v98 = DWORD2(v135);
    uint64_t v99 = v136 + v134 + *(void *)a8 + v132;
    *(void *)a8 = v99;
    unsigned int v100 = DWORD2(v137) + v98 + v97;
    *(_DWORD *)(a8 + 24) = v100;
    *(void *)(a8 + 16) = ((*(unsigned __int16 *)(*(void *)v121 + 2 * *(__int16 *)(a8 + 28) + 152)
                           * (unint64_t)v100) >> (8 * (*(_WORD *)(a8 + 28) == 0)))
                         + v99;
  }
  return (v127 | v31 | v52 | v53) & 1;
}

BOOL sub_1D0D48F48(int *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(*((void *)a1 + 1183) + 8);
  uint64_t v11 = *a1 - (uint64_t)a4;
  if (a8)
  {
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v10 + 520) <= (int)a2
      || *(_DWORD *)(v10 + 524) <= (int)a3)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = (__int16 *)(*(void *)(v10 + 800) + 2 * (*(void *)(v10 + 768) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    unint64_t v13 = *(void *)(v10 + 768);
  }
  else
  {
    unint64_t v13 = (unint64_t)*a5 >> 3;
    int v12 = (__int16 *)(*((void *)a5 + 11)
                    + 2
                    * (((uint64_t)((int)a2 - *((_DWORD *)a5 + 1)) >> 3)
                     + (int)v13 * (uint64_t)(((int)a3 - *((_DWORD *)a5 + 2)) >> 3)));
  }
  int v159 = *a1 - a4;
  if ((((unsigned __int16)*v12 >> 2) & 3) > a4)
  {
    unint64_t v147 = v13;
    uint64_t v14 = 1;
    char v157 = sub_1D0D48F48(a1);
    char v162 = sub_1D0D48F48(a1);
    char v165 = sub_1D0D48F48(a1);
    char v15 = sub_1D0D48F48(a1);
    if ((v157 & 1) == 0 && (v162 & 1) == 0 && (v165 & 1) == 0 && (v15 & 1) == 0)
    {
      if ((*v12 & 0xC) != 0
        && (uint64_t v16 = *((void *)a1 + 1184), *(unsigned char *)(v16 + 272))
        && v159 <= *(unsigned __int8 *)(v16 + 2115)
        && (*int v12 = *v12 & 0xFFF3 | (*v12 + 12) & 0xC, 1 << v159 >= 8))
      {
        uint64_t v17 = 0;
        uint64_t v18 = v12;
        do
        {
          int v19 = v18;
          uint64_t v20 = (1 << v159) >> 3;
          do
          {
            *v19++ = *v12;
            --v20;
          }
          while (v20);
          uint64_t v14 = 0;
          ++v17;
          v18 += v147;
        }
        while (v17 != (1 << v159) >> 3);
      }
      else
      {
        return 0;
      }
    }
    return v14;
  }
  uint64_t v21 = 0;
  char v22 = *(unsigned char *)(v10 + 531);
  uint64_t v23 = *((void *)a1 + 1185);
  int v24 = *(unsigned __int8 *)(v23 + 204);
  int v25 = *(unsigned __int8 *)(v23 + 205);
  int v135 = 1 << v22;
  int v138 = *(unsigned __int8 *)(*((void *)a1 + 1184) + 2116);
  __c[0] = 0;
  unsigned __int8 v166 = 0;
  uint64_t v26 = *((void *)a1 + 1186);
  uint64_t v140 = *(void *)(v26 + 944);
  do
  {
    uint64_t v27 = (char *)&v175 + v21;
    *((_DWORD *)v27 + 6) = 0;
    *(void *)uint64_t v27 = 0;
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = -1;
    *((_WORD *)v27 + 14) = 0;
    uint64_t v28 = (char *)&v169 + v21;
    *((_DWORD *)v28 + 6) = 0;
    *(void *)uint64_t v28 = 0;
    *((void *)v28 + 1) = 0;
    *((void *)v28 + 2) = -1;
    v21 += 32;
    *((_WORD *)v28 + 14) = 0;
  }
  while (v21 != 96);
  uint64_t v29 = a5[1];
  if (a8)
  {
    uint64_t v30 = *(void *)(v10 + 416);
    int v31 = (unsigned __int8 *)*((void *)a5 + 17);
    uint64_t v32 = *v31;
  }
  else
  {
    int v31 = (unsigned __int8 *)*((void *)a5 + 17);
    uint64_t v32 = *v31;
    uint64_t v30 = v32;
  }
  if (v24) {
    uint64_t v33 = a5[1];
  }
  else {
    uint64_t v33 = v30;
  }
  uint64_t v148 = v33;
  uint64_t v34 = (int)a2 - (uint64_t)*((int *)a5 + 1);
  uint64_t v35 = (int)a3 - (uint64_t)*((int *)a5 + 2);
  uint64_t v36 = v34 + v35 * v29;
  uint64_t v37 = **((void **)a5 + 3) + (v36 + *((void *)a5 + 4)) * *(int *)(*((void *)a5 + 3) + 16);
  if (a8) {
    uint64_t v38 = *(void *)(v10 + 400) + ((*(void *)(v10 + 416) * (int)a3 + (int)a2) << v22);
  }
  else {
    uint64_t v38 = **((void **)v31 + 7) + (*((void *)v31 + 8) + v34 + v32 * v35) * *(int *)(*((void *)v31 + 7) + 16);
  }
  uint64_t v39 = v34 + v32 * v35;
  *(void *)uint64_t v158 = a5;
  int v155 = v24;
  uint64_t v142 = (1 << v11);
  if (v24)
  {
    uint64_t v40 = **((void **)a5 + 7) + (v36 + *((void *)a5 + 8)) * *(int *)(*((void *)a5 + 7) + 16);
    uint64_t v151 = *((void *)v31 + 4) + 2 * v39;
    uint64_t v41 = (int)v11 - 2;
    uint64_t v42 = v30;
    int v43 = v11;
    uint64_t v44 = v38;
    unsigned int v45 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)a1 + 1187)
                                                                                        + 8 * v41
                                                                                        + 176))((1 << v11), (1 << v11), v37, v29, v40, v29);
    uint64_t v46 = v40;
    uint64_t v38 = v44;
    LODWORD(v11) = v43;
    uint64_t v30 = v42;
    a5 = *(unsigned __int8 **)v158;
    uint64_t v47 = v45;
    uint64_t v48 = v151;
    DWORD2(v170) = 0;
    *(void *)&long long v169 = v47;
    *(void *)&long long v170 = v47;
    uint64_t v26 = *((void *)a1 + 1186);
    LODWORD(v34) = a2 - *(_DWORD *)(*(void *)v158 + 4);
    unsigned int v49 = a3;
    LODWORD(v35) = a3 - *(_DWORD *)(*(void *)v158 + 8);
  }
  else
  {
    uint64_t v48 = *((void *)v31 + 4) + 2 * v39;
    uint64_t v41 = v11 - 2;
    uint64_t v46 = v38;
    unsigned int v49 = a3;
  }
  *(_DWORD *)(v26 + 832) = a2;
  *(_DWORD *)(v26 + 836) = v49;
  unint64_t v50 = *a5;
  *(void *)(v26 + 888) = *((void *)a5 + 12)
                         + 16 * (((uint64_t)(int)v34 >> 2) + (int)(v50 >> 2) * (uint64_t)((int)v35 >> 2));
  *(void *)(v26 + 880) = *((void *)a5 + 11)
                         + 2 * (((uint64_t)(int)v34 >> 3) + (int)(v50 >> 3) * (uint64_t)((int)v35 >> 3));
  uint64_t v152 = v48;
  uint64_t v51 = v30;
  uint64_t v141 = v38;
  uint64_t v137 = v46;
  sub_1D0D41380((uint64_t)a1, a2, v49, v12, v37, v29, v46, v148, v38, v30, v48, v32, v11, (unsigned char *)__c + 1, v25 == 0, 1u);
  uint64_t v52 = *((void *)a1 + 1187);
  int v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 8 * v41 + 176);
  uint64_t v54 = *((void *)a1 + 1186);
  *(_DWORD *)(v54 + 832) = a2;
  *(_DWORD *)(v54 + 836) = v49;
  *(void *)(v54 + 840) = v32;
  if (!HIBYTE(__c[0]))
  {
    uint64_t v56 = v37;
    int v57 = v155;
    if (v155)
    {
      int v58 = 0;
      int v59 = a7;
    }
    else
    {
      if (v25)
      {
        a1[2280] = (*(uint64_t (**)(uint64_t, uint64_t, int *, void))(v52 + 16))(v142, v142, a1 + 16, (int)v142);
        unsigned int v65 = (*(uint64_t (**)(void))&a1[2 * v159 + 2304])();
        a1[2280] = v65;
      }
      else
      {
        unsigned int v65 = v53(v142, v142, v56, v29, v137, v51);
      }
      int v59 = a7;
      int v58 = 0;
      DWORD2(v170) = 0;
      *(void *)&long long v169 = v65;
      *(void *)&long long v170 = v65;
      long long v175 = v169;
      long long v176 = v170;
    }
    goto LABEL_58;
  }
  if (v25) {
    unsigned int v55 = a1[2280];
  }
  else {
    unsigned int v55 = v53(v142, v142, v37, v29, v141, v51);
  }
  *(void *)&long long v175 = v55;
  uint64_t v60 = v140;
  (*(void (**)(uint64_t))(*(void *)v140 + 88))(v140);
  *(void *)(*((void *)a1 + 1186) + 896) = v152;
  sub_1D0D3FA54((uint64_t)a1, a2, a3, v159, 0, 0);
  unsigned int v61 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 80))(v60);
  DWORD2(v176) = v61;
  (*(void (**)(uint64_t))(*(void *)v60 + 96))(v60);
  unint64_t v62 = ((*(unsigned __int16 *)(*((void *)a1 + 1187) + 2 * SWORD6(v176) + 152) * (unint64_t)v61) >> (8 * (WORD6(v176) == 0)))
      + v55;
  *(void *)&long long v176 = v62;
  int v57 = v155;
  if (v155 && (unint64_t)v170 < v62)
  {
    HIBYTE(__c[0]) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)a1 + 1186) + 29752))(v142, v142, v148, v137, v51, v141);
    int v58 = 0;
  }
  else
  {
    if (v25)
    {
      uint64_t v63 = *((void *)a1 + 1183) + 2824;
      uint64_t v64 = *(void *)&a1[2 * (5 - v159) + 1588];
      int v59 = a7;
      if ((*v12 & 0x100) != 0) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v63 + 8 * v41 + 248))(v141, v51, v64, 0);
      }
      else {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v63 + 16 * v41))(v141, v51, v64, 0, 1024);
      }
      int v58 = 1;
      goto LABEL_58;
    }
    int v58 = 1;
  }
  int v59 = a7;
LABEL_58:
  int v66 = 1 << v41;
  uint64_t v67 = a3;
  sub_1D0D7B228(*(unsigned __int8 **)v158, a2, a3, v66, 0, v58, 0);
  if (!v59) {
    goto LABEL_113;
  }
  int v68 = *(unsigned __int8 *)(*((void *)a1 + 1184) + 2116);
  int v69 = v138;
  if (!a6) {
    int v69 = v159;
  }
  int v70 = v159 > v68 ? v159 - 1 : v69;
  if (a6 && v159 <= v68) {
    goto LABEL_113;
  }
  uint64_t v71 = *(unsigned __int8 **)v158;
  uint64_t v72 = *(unsigned __int8 *)(*(void *)v158 + 1);
  if (a8)
  {
    uint64_t v73 = *(void *)(*(void *)(*((void *)a1 + 1183) + 8) + 424);
    uint64_t v74 = *(void *)(*(void *)v158 + 136);
    uint64_t v75 = *(unsigned __int8 *)(v74 + 1);
  }
  else
  {
    uint64_t v74 = *(void *)(*(void *)v158 + 136);
    uint64_t v75 = *(unsigned __int8 *)(v74 + 1);
    uint64_t v73 = 2 * v75;
  }
  if (v155) {
    uint64_t v76 = *(unsigned __int8 *)(*(void *)v158 + 1);
  }
  else {
    uint64_t v76 = v73;
  }
  uint64_t v77 = (int)a2 - (uint64_t)*(int *)(*(void *)v158 + 4);
  int v78 = a3 - *(_DWORD *)(*(void *)v158 + 8);
  uint64_t v79 = (uint64_t)v78 >> 1;
  uint64_t v80 = v77 + *(unsigned __int8 *)(*(void *)v158 + 1) * (uint64_t)(v78 >> 1);
  uint64_t v81 = **(void **)(*(void *)v158 + 40)
      + (v80 + *(void *)(*(void *)v158 + 48)) * *(int *)(*(void *)(*(void *)v158 + 40) + 16);
  if (a8) {
    uint64_t v82 = *(void *)(*(void *)(*((void *)a1 + 1183) + 8) + 408)
  }
        + ((*(void *)(*(void *)(*((void *)a1 + 1183) + 8) + 424) * ((uint64_t)(int)a3 >> 1)
          + (int)(a2 & 0xFFFFFFFE)) << *(unsigned char *)(*(void *)(*((void *)a1 + 1183) + 8) + 531));
  else {
    uint64_t v82 = **(void **)(v74 + 72)
  }
        + (*(void *)(v74 + 80) + v77 + 2 * (int)v79 * (uint64_t)(int)v75) * *(int *)(*(void *)(v74 + 72) + 16);
  unsigned int v160 = 1 << v70;
  uint64_t v153 = **(void **)(*(void *)v158 + 40)
       + (v80 + *(void *)(*(void *)v158 + 48)) * *(int *)(*(void *)(*(void *)v158 + 40) + 16);
  if (v155)
  {
    uint64_t v83 = **(void **)(*(void *)v158 + 72)
        + (v80 + *(void *)(*(void *)v158 + 80)) * *(int *)(*(void *)(*(void *)v158 + 72) + 16);
    uint64_t v84 = (int)v75 * (uint64_t)(int)v79 + ((int)v77 >> 1);
    uint64_t v149 = *(void *)(v74 + 40) + 2 * v84;
    uint64_t v85 = *(void *)(v74 + 48) + 2 * v84;
    uint64_t v86 = *((void *)a1 + 1187);
    uint64_t v87 = v76;
    uint64_t v88 = v82;
    uint64_t v89 = v73;
    int v90 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, long long *, long long *))(v86 + 568))(v81, v72, v83, v72, v160, v160, &v171, &v173);
    uint64_t v76 = v87;
    uint64_t v91 = v149;
    uint64_t v81 = v153;
    uint64_t v92 = v85;
    uint64_t v67 = a3;
    int v70 = v90;
    uint64_t v73 = v89;
    uint64_t v82 = v88;
    uint64_t v93 = v83;
    uint64_t v71 = *(unsigned __int8 **)v158;
    *(void *)&long long v171 = ((unint64_t)v171 * *(unsigned __int16 *)(v86 + 162)) >> 8;
    *(void *)&long long v173 = ((unint64_t)v173 * *(unsigned __int16 *)(v86 + 166)) >> 8;
    DWORD2(v172) = 0;
    DWORD2(v174) = 0;
    LODWORD(v77) = a2 - *(_DWORD *)(*(void *)v158 + 4);
    int v78 = a3 - *(_DWORD *)(*(void *)v158 + 8);
  }
  else
  {
    uint64_t v94 = (int)v75 * (uint64_t)(int)v79 + ((int)v77 >> 1);
    uint64_t v91 = *(void *)(v74 + 40) + 2 * v94;
    uint64_t v92 = *(void *)(v74 + 48) + 2 * v94;
    uint64_t v93 = v82;
  }
  uint64_t v95 = *((void *)a1 + 1186);
  *(_DWORD *)(v95 + 832) = a2;
  *(_DWORD *)(v95 + 836) = v67;
  *(void *)(v95 + 888) = *((void *)v71 + 12)
                         + 16 * (((uint64_t)(int)v77 >> 2) + ((unint64_t)*v71 >> 2) * (v78 >> 2));
  uint64_t v146 = v92;
  int v150 = v70;
  sub_1D0D444B0(a1, a2, v67, v70, v12, v81, v72, v93, v76, v82, v73, v91, v92, v75, __c, &v166);
  uint64_t v96 = *((void *)a1 + 1187);
  *(void *)(*((void *)a1 + 1186) + 848) = v75;
  int v97 = LOBYTE(__c[0]);
  int v98 = v166;
  if (LOBYTE(__c[0]) || v166 || !v155)
  {
    uint64_t v102 = v153;
    uint64_t v145 = v72;
    uint64_t v103 = v72;
    uint64_t v154 = v73;
    int v101 = v160;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, _WORD *, unint64_t *))(v96 + 568))(v102, v103, v82, v73, v160, v160, &__c[1], &v168);
    unint64_t v104 = (*(void *)&__c[1] * (unint64_t)*(unsigned __int16 *)(v96 + 162)) >> 8;
    unint64_t v105 = (v168 * *(unsigned __int16 *)(v96 + 166)) >> 8;
    *(void *)&__c[1] = v104;
    unint64_t v168 = v105;
    if (v97)
    {
      uint64_t v143 = v93;
      *(void *)&long long v177 = v104;
      uint64_t v106 = v140;
      (*(void (**)(uint64_t))(*(void *)v140 + 88))(v140);
      *(void *)(*((void *)a1 + 1186) + 904) = v91;
      sub_1D0D3FA54((uint64_t)a1, a2, v67, v150, 0, 1);
      unsigned int v107 = (*(uint64_t (**)(uint64_t))(*(void *)v106 + 80))(v106);
      DWORD2(v178) = v107;
      (*(void (**)(uint64_t))(*(void *)v106 + 96))(v106);
      uint64_t v108 = *((void *)a1 + 1187) + 152;
      unint64_t v109 = ((*(unsigned __int16 *)(v108 + 2 * SWORD6(v178)) * (unint64_t)v107) >> (8 * (WORD6(v178) == 0)))
           + v104;
      *(void *)&long long v178 = v109;
      unint64_t v110 = ((*(unsigned __int16 *)(v108 + 2 * SWORD6(v172)) * (unint64_t)DWORD2(v172)) >> (8 * (WORD6(v172) == 0)))
           + v171;
      *(void *)&long long v172 = v110;
      int v57 = v155;
      if (v155)
      {
        uint64_t v93 = v143;
        if (v110 < v109)
        {
          LOBYTE(__c[0]) = 0;
          (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)a1 + 1186) + 29760))((2 << v150), v160, v145, v143, v154, v82);
          int v98 = v166;
        }
      }
      else
      {
        uint64_t v93 = v143;
      }
      if (v98)
      {
        unint64_t v105 = v168;
        goto LABEL_92;
      }
      if (v155)
      {
LABEL_96:
        int v99 = a2;
        int v100 = 0;
        goto LABEL_102;
      }
      unint64_t v105 = v168;
    }
    else
    {
      int v57 = v155;
      if (v155)
      {
        if (v98) {
          goto LABEL_92;
        }
        goto LABEL_96;
      }
      *(void *)&long long v171 = v104;
      DWORD2(v172) = 0;
      long long v177 = v171;
      long long v178 = v172;
      if (v98)
      {
LABEL_92:
        uint64_t v111 = v93;
        uint64_t v156 = v82;
        *(void *)&long long v179 = v105;
        uint64_t v112 = v140;
        (*(void (**)(uint64_t))(*(void *)v140 + 88))(v140);
        *(void *)(*((void *)a1 + 1186) + 912) = v146;
        sub_1D0D3FA54((uint64_t)a1, a2, v67, v150, 0, 2);
        unsigned int v113 = (*(uint64_t (**)(uint64_t))(*(void *)v112 + 80))(v112);
        DWORD2(v180) = v113;
        (*(void (**)(uint64_t))(*(void *)v112 + 96))(v112);
        uint64_t v114 = *((void *)a1 + 1187) + 152;
        unint64_t v115 = ((*(unsigned __int16 *)(v114 + 2 * SWORD6(v180)) * (unint64_t)v113) >> (8 * (WORD6(v180) == 0)))
             + v105;
        *(void *)&long long v180 = v115;
        unint64_t v116 = ((*(unsigned __int16 *)(v114 + 2 * SWORD6(v174)) * (unint64_t)DWORD2(v174)) >> (8 * (WORD6(v174) == 0)))
             + v173;
        *(void *)&long long v174 = v116;
        int v100 = 1;
        if (v57)
        {
          int v99 = a2;
          if (v116 < v115)
          {
            unsigned __int8 v166 = 0;
            (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)a1 + 1186) + 29760))((2 << v150), v160, v145, v111 + v135, v154, v156 + v135);
            int v100 = v166;
          }
        }
        else
        {
          int v99 = a2;
        }
        goto LABEL_102;
      }
    }
    int v99 = a2;
    int v100 = 0;
    *(void *)&long long v173 = v105;
    DWORD2(v174) = 0;
    long long v179 = v173;
    long long v180 = v174;
    goto LABEL_102;
  }
  int v99 = a2;
  int v100 = 0;
  int v57 = v155;
  int v101 = v160;
LABEL_102:
  int v117 = LOBYTE(__c[0]);
  if (a9)
  {
    unsigned int v118 = &v177;
    if (!LOBYTE(__c[0])) {
      unsigned int v118 = &v171;
    }
    uint64_t v119 = *(void *)v118;
    uint64_t v120 = (char *)&v178 + 8;
    if (!LOBYTE(__c[0])) {
      uint64_t v120 = (char *)&v172 + 8;
    }
    int v121 = *(_DWORD *)v120;
    int v122 = *(_DWORD *)(a9 + 24);
    uint64_t v123 = &v179;
    if (!v100) {
      uint64_t v123 = &v173;
    }
    *(void *)a9 += *(void *)v123 + v119;
    int v124 = (char *)&v180 + 8;
    if (!v100) {
      int v124 = (char *)&v174 + 8;
    }
    *(_DWORD *)(a9 + 24) = *(_DWORD *)v124 + v122 + v121;
  }
  sub_1D0D7B228(*(unsigned __int8 **)v158, v99, v67, v101 >> 2, 1, v117, 0);
  sub_1D0D7B228(*(unsigned __int8 **)v158, v99, v67, v101 >> 2, 2, v100, 0);
LABEL_113:
  if (a9)
  {
    BOOL v125 = HIBYTE(__c[0]) == 0;
    if (HIBYTE(__c[0])) {
      uint64_t v126 = &v175;
    }
    else {
      uint64_t v126 = &v169;
    }
    uint64_t v127 = *(void *)a9 + *(void *)v126;
    *(void *)a9 = v127;
    uint64_t v128 = (char *)&v176 + 8;
    if (v125) {
      uint64_t v128 = (char *)&v170 + 8;
    }
    unsigned int v129 = *(_DWORD *)(a9 + 24) + *(_DWORD *)v128;
    *(_DWORD *)(a9 + 24) = v129;
    *(void *)(a9 + 16) = ((*(unsigned __int16 *)(*((void *)a1 + 1187) + 2 * *(__int16 *)(a9 + 28) + 152)
                           * (unint64_t)v129) >> (8 * (*(_WORD *)(a9 + 28) == 0)))
                         + v127;
  }
  if (a10 && v57)
  {
    int v130 = *(_DWORD *)(a10 + 24) + DWORD2(v170);
    int v131 = DWORD2(v172);
    uint64_t v132 = v173 + v171 + *(void *)a10 + v169;
    *(void *)a10 = v132;
    unsigned int v133 = DWORD2(v174) + v131 + v130;
    *(_DWORD *)(a10 + 24) = v133;
    *(void *)(a10 + 16) = ((*(unsigned __int16 *)(*((void *)a1 + 1187) + 2 * *(__int16 *)(a10 + 28) + 152)
                            * (unint64_t)v133) >> (8 * (*(_WORD *)(a10 + 28) == 0)))
                          + v132;
  }
  return HIBYTE(__c[0]) | LOBYTE(__c[0]) || v166 != 0;
}

uint64_t sub_1D0D49FC0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 9488);
  uint64_t v5 = *(void *)(v4 + 880);
  uint64_t v6 = *(void *)(v4 + 856);
  int v7 = a2 - *(_DWORD *)(v4 + 832);
  int v8 = a3 - *(_DWORD *)(v4 + 836);
  if (((*(unsigned __int16 *)(v5 + 2 * (v6 * ((uint64_t)v8 >> 3) + (v7 >> 3))) >> 2) & 3) <= a4)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    LODWORD(v9) = a4;
    uint64_t v10 = a3;
    uint64_t v11 = a2;
    uint64_t v20 = *(void *)(a1 + 9488);
    int v12 = 0;
    int v13 = ~(*(_DWORD *)(a1 + 9520) + a4) + *(unsigned __int8 *)(*(void *)(a1 + 9472) + 2113);
    int v21 = *(_DWORD *)(v4 + 836);
    int v22 = *(_DWORD *)(v4 + 832);
    do
    {
      int v24 = v12;
      uint64_t v14 = ((1 << v13) + v11);
      uint64_t v15 = ((1 << v13) + v10);
      uint64_t v9 = (v9 + 1);
      int v16 = sub_1D0D49FC0(a1, v11, v10, v9, 0);
      int v17 = v16 | sub_1D0D49FC0(a1, v14, v10, v9, 1);
      int v18 = sub_1D0D49FC0(a1, v11, v15, v9, 2);
      int v7 = v14 - v22;
      int v8 = v15 - v21;
      int v12 = v24 | v18 | v17;
      --v13;
      uint64_t v10 = v15;
      uint64_t v11 = v14;
    }
    while ((int)v9 < ((*(unsigned __int16 *)(v5 + 2 * (v6 * ((uint64_t)((int)v15 - v21) >> 3) + (((int)v14 - v22) >> 3))) >> 2) & 3));
    uint64_t v4 = v20;
  }
  return v12 & 1 | (*(unsigned char *)(*(void *)(v4 + 920)
                                           + (*(uint64_t *)(v4 + 840) >> 2) * ((uint64_t)v8 >> 2)
                                           + (v7 >> 2)) != 0);
}

uint64_t sub_1D0D4A164(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a6)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        for (unint64_t i = 0; i < v7; i += 32)
        {
          uint16x8_t v10 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 16), 6uLL);
          uint16x8_t v11 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 32), 6uLL);
          uint16x8_t v12 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 48), 6uLL);
          int v13 = (uint16x8_t *)(result + v8);
          *int v13 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8), 6uLL);
          v13[1] = v10;
          void v13[2] = v11;
          v13[3] = v12;
          v8 += 64;
        }
      }
      else
      {
        LODWORD(i) = 0;
      }
      unint64_t i = i;
      if (i < a5)
      {
        uint64_t v14 = 2 * i;
        do
        {
          *(uint16x8_t *)(result + v14) = vshrq_n_u16(*(uint16x8_t *)(a3 + v14), 6uLL);
          i += 8;
          v14 += 16;
        }
        while (i < a5);
      }
      ++v6;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1D0D4A208(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a6)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        for (unint64_t i = 0; i < v7; i += 32)
        {
          int16x8_t v10 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 16), 6uLL);
          int16x8_t v11 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 32), 6uLL);
          int16x8_t v12 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 48), 6uLL);
          int v13 = (int16x8_t *)(result + v8);
          *int v13 = vshlq_n_s16(*(int16x8_t *)(a3 + v8), 6uLL);
          v13[1] = v10;
          void v13[2] = v11;
          v13[3] = v12;
          v8 += 64;
        }
      }
      else
      {
        LODWORD(i) = 0;
      }
      unint64_t i = i;
      if (i < a5)
      {
        uint64_t v14 = 2 * i;
        do
        {
          *(int16x8_t *)(result + v14) = vshlq_n_s16(*(int16x8_t *)(a3 + v14), 6uLL);
          i += 8;
          v14 += 16;
        }
        while (i < a5);
      }
      ++v6;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v6 != a6);
  }
  return result;
}

void *sub_1D0D4A2AC(void *result)
{
  if (result[20])
  {
    result[16] = sub_1D0D7A8C0;
    result[17] = sub_1D0D7A804;
    result[18] = sub_1D0D7A758;
    result[19] = sub_1D0D7A4BC;
    unint64_t v1 = sub_1D0D7A0B4;
    unint64_t v2 = sub_1D0D7A2A8;
    int v3 = sub_1D0D7A2F4;
    uint64_t v4 = sub_1D0D7A3AC;
  }
  else
  {
    result[16] = sub_1D0D4AA64;
    result[17] = sub_1D0D4A88C;
    result[18] = sub_1D0D4A688;
    result[19] = sub_1D0D4A47C;
    unint64_t v1 = sub_1D0D79F38;
    unint64_t v2 = sub_1D0D7A1EC;
    int v3 = sub_1D0D7A2C4;
    uint64_t v4 = sub_1D0D7A310;
  }
  *uint64_t result = v4;
  result[1] = v3;
  result[2] = v2;
  result[3] = v1;
  result[4] = sub_1D0D79ED8;
  result[5] = sub_1D0D79E60;
  result[6] = sub_1D0D79DC8;
  result[7] = sub_1D0D79D2C;
  result[8] = sub_1D0D79C34;
  result[9] = sub_1D0D79B50;
  result[10] = sub_1D0D799FC;
  result[11] = sub_1D0D797F4;
  result[12] = sub_1D0D79754;
  result[13] = sub_1D0D796B8;
  result[14] = sub_1D0D79600;
  result[15] = sub_1D0D794F0;
  return result;
}

uint64_t sub_1D0D4A47C(int a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11 = 0;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 16 * a10;
  uint64_t v13 = 4 * a10;
  memset(v40, 0, sizeof(v40));
  do
  {
    unint64_t v14 = 0;
    unint64_t v36 = v11;
    uint64_t v37 = a4;
    uint64_t v15 = 2 * v11;
    uint64_t v16 = a4;
    uint64_t v17 = a9;
    uint64_t v18 = a9;
    uint64_t v38 = a6;
    uint64_t v39 = a8;
    do
    {
      uint64_t v19 = 0;
      char v20 = 0;
      uint64_t v21 = v16;
      uint64_t v22 = v18;
      uint64_t v23 = a8;
      uint64_t v24 = a6;
      do
      {
        for (uint64_t i = 0; i != 4; ++i)
        {
          int v26 = *(__int16 *)(v21 + 2 * i);
          BOOL v27 = v26 <= 0;
          if (v26 < 0) {
            int v26 = -v26;
          }
          int v28 = v26 * a3;
          int v29 = (v28 + a1) >> a2;
          *(_DWORD *)(v22 + 4 * i) = v28;
          if (v27) {
            int v30 = -v29;
          }
          else {
            int v30 = (v28 + a1) >> a2;
          }
          *(_DWORD *)(v23 + 4 * i) = (v28 - (v29 << a2)) >> (a2 - 8);
          if (v30 >= 0x7FFF) {
            int v30 = 0x7FFF;
          }
          if (v30 <= -32768) {
            LOWORD(v30) = 0x8000;
          }
          *(_WORD *)(v24 + 2 * i) = v30;
          v20 |= v29 != 0;
        }
        ++v19;
        v24 += 2 * a7;
        v23 += v13;
        v22 += v13;
        v21 += 2 * a5;
      }
      while (v19 != 4);
      if (v20) {
        *((unsigned char *)v40 + v15 + (v14 >> 2)) = 1;
      }
      a6 += 8;
      a8 += 16;
      v18 += 16;
      v16 += 8;
      BOOL v31 = v14 >= 0x1C;
      v14 += 4;
    }
    while (!v31);
    a6 = v38 + 8 * a7;
    a8 = v39 + v35;
    a9 = v17 + v35;
    a4 = v37 + 8 * a5;
    unint64_t v11 = v36 + 4;
  }
  while (v36 < 0x1C);
  uint64_t v32 = 0;
  uint64_t result = 0;
  do
  {
    if (*((unsigned char *)v40 + *(unsigned __int8 *)(a11 + v32))) {
      uint64_t v34 = 1 << v32;
    }
    else {
      uint64_t v34 = 0;
    }
    result |= v34;
    ++v32;
  }
  while (v32 != 64);
  return result;
}

uint64_t sub_1D0D4A688(int a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11 = 0;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = 16 * a10;
  uint64_t v13 = 4 * a10;
  memset(v37, 0, sizeof(v37));
  do
  {
    unint64_t v14 = 0;
    uint64_t v34 = a4;
    uint64_t v35 = a6;
    uint64_t v15 = a4;
    uint64_t v16 = a9;
    uint64_t v36 = a8;
    do
    {
      uint64_t v17 = 0;
      char v18 = 0;
      uint64_t v19 = v15;
      uint64_t v20 = a9;
      uint64_t v21 = a8;
      uint64_t v22 = a6;
      do
      {
        for (uint64_t i = 0; i != 4; ++i)
        {
          int v24 = *(__int16 *)(v19 + 2 * i);
          BOOL v25 = v24 <= 0;
          if (v24 < 0) {
            int v24 = -v24;
          }
          int v26 = v24 * a3;
          int v27 = (v26 + a1) >> a2;
          *(_DWORD *)(v20 + 4 * i) = v26;
          if (v25) {
            int v28 = -v27;
          }
          else {
            int v28 = (v26 + a1) >> a2;
          }
          *(_DWORD *)(v21 + 4 * i) = (v26 - (v27 << a2)) >> (a2 - 8);
          if (v28 >= 0x7FFF) {
            int v28 = 0x7FFF;
          }
          if (v28 <= -32768) {
            LOWORD(v28) = 0x8000;
          }
          *(_WORD *)(v22 + 2 * i) = v28;
          v18 |= v27 != 0;
        }
        ++v17;
        v22 += 2 * a7;
        v21 += v13;
        v20 += v13;
        v19 += 2 * a5;
      }
      while (v17 != 4);
      if (v18) {
        *((unsigned char *)v37 + v11 + (v14 >> 2)) = 1;
      }
      a6 += 8;
      a8 += 16;
      a9 += 16;
      v15 += 8;
      BOOL v29 = v14 >= 0xC;
      v14 += 4;
    }
    while (!v29);
    a6 = v35 + 8 * a7;
    a8 = v36 + v33;
    a9 = v16 + v33;
    a4 = v34 + 8 * a5;
    BOOL v29 = v11 >= 0xC;
    v11 += 4;
  }
  while (!v29);
  uint64_t v30 = 0;
  uint64_t result = 0;
  do
  {
    if (*((unsigned char *)v37 + *(unsigned __int8 *)(a11 + v30))) {
      uint64_t v32 = 1 << v30;
    }
    else {
      uint64_t v32 = 0;
    }
    result |= v32;
    ++v30;
  }
  while (v30 != 16);
  return result;
}

uint64_t sub_1D0D4A88C(int a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11 = 0;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 2 * a7;
  uint64_t v13 = 4 * a10;
  uint64_t v14 = 2 * a5;
  memset(v41, 0, sizeof(v41));
  char v15 = 1;
  do
  {
    unint64_t v16 = 0;
    char v40 = v15;
    unint64_t v17 = v11 >> 1;
    uint64_t v18 = a6 + v12 * v11;
    unint64_t v19 = a10 * v11;
    char v20 = 1;
    uint64_t v21 = a4 + v14 * v11;
    do
    {
      uint64_t v22 = 0;
      char v23 = 0;
      uint64_t v24 = v18 + 2 * v16;
      uint64_t v25 = a8 + 4 * (v19 + v16);
      char v26 = v20;
      uint64_t v27 = a9 + 4 * (v19 + v16);
      uint64_t v28 = v21 + 2 * v16;
      do
      {
        for (uint64_t i = 0; i != 4; ++i)
        {
          int v30 = *(__int16 *)(v28 + 2 * i);
          BOOL v31 = v30 <= 0;
          if (v30 < 0) {
            int v30 = -v30;
          }
          int v32 = v30 * a3;
          int v33 = (v32 + a1) >> a2;
          *(_DWORD *)(v27 + 4 * i) = v32;
          if (v31) {
            int v34 = -v33;
          }
          else {
            int v34 = (v32 + a1) >> a2;
          }
          *(_DWORD *)(v25 + 4 * i) = (v32 - (v33 << a2)) >> (a2 - 8);
          if (v34 >= 0x7FFF) {
            int v34 = 0x7FFF;
          }
          if (v34 <= -32768) {
            LOWORD(v34) = 0x8000;
          }
          *(_WORD *)(v24 + 2 * i) = v34;
          v23 |= v33 != 0;
        }
        ++v22;
        v24 += v12;
        v25 += v13;
        v27 += v13;
        v28 += v14;
      }
      while (v22 != 4);
      if (v23) {
        *((unsigned char *)v41 + (v17 | (v16 >> 2))) = 1;
      }
      char v20 = 0;
      unint64_t v16 = 4;
    }
    while ((v26 & 1) != 0);
    char v15 = 0;
    unint64_t v11 = 4;
  }
  while ((v40 & 1) != 0);
  uint64_t v35 = 0;
  uint64_t result = 0;
  do
  {
    if (*((unsigned char *)v41 + *(unsigned __int8 *)(a11 + v35))) {
      uint64_t v37 = 1 << v35;
    }
    else {
      uint64_t v37 = 0;
    }
    result |= v37;
    ++v35;
  }
  while (v35 != 4);
  return result;
}

uint64_t sub_1D0D4AA64(int a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 *a11)
{
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  memset(v28, 0, sizeof(v28));
  uint64_t v14 = 2 * a7;
  long long v27 = 0u;
  long long v26 = 0u;
  uint64_t v15 = 4 * a10;
  uint64_t v16 = 2 * a5;
  do
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      int v18 = *(__int16 *)(a4 + 2 * i);
      BOOL v19 = v18 <= 0;
      if (v18 < 0) {
        int v18 = -v18;
      }
      int v20 = v18 * a3;
      int v21 = (v20 + a1) >> a2;
      *(_DWORD *)(a9 + 4 * i) = v20;
      if (v19) {
        int v22 = -v21;
      }
      else {
        int v22 = (v20 + a1) >> a2;
      }
      *(_DWORD *)(a8 + 4 * i) = (v20 - (v21 << a2)) >> (a2 - 8);
      if (v22 >= 0x7FFF) {
        int v23 = 0x7FFF;
      }
      else {
        int v23 = v22;
      }
      if (v23 <= -32768) {
        LOWORD(v23) = 0x8000;
      }
      *(_WORD *)(a6 + 2 * i) = v23;
      v12 |= v21 != 0;
    }
    ++v11;
    a6 += v14;
    a8 += v15;
    a9 += v15;
    a4 += v16;
  }
  while (v11 != 4);
  char v25 = v12 & 1;
  return *(&v25 + *a11);
}

float sub_1D0D4AB88(unint64_t a1, unint64_t a2, int a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, unsigned int *a8)
{
  unsigned int v8 = *a8;
  int32x4_t v9 = 0uLL;
  if (a3)
  {
    if (a2 >= 2)
    {
      uint64_t v10 = 0;
      unint64_t v11 = a2 >> 1;
      __int16 v12 = v8 + a2 * a1;
      v13.i64[0] = 0x43004300430043;
      v13.i64[1] = 0x43004300430043;
      v14.i64[0] = 0x200020002000200;
      v14.i64[1] = 0x200020002000200;
      v15.i64[0] = 0x3000300030003;
      v15.i64[1] = 0x3000300030003;
      unsigned int v16 = *a8;
      int v17 = *a8;
      do
      {
        unsigned int v16 = ((_WORD)v16 + (_WORD)a1) & 0xFFF;
        unsigned int v18 = v12 & 0xFFF;
        if (a1 == 7)
        {
          LODWORD(v20) = 0;
        }
        else
        {
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          do
          {
            int v21 = (int16x8_t *)(*a5 + v19);
            int8x8_t v22 = vbsl_s8(vmovn_s16(vcgtq_s16(*v21, v13)), *(int8x8_t *)((char *)&unk_1D0DAC214 + v17), *(int8x8_t *)((char *)&unk_1D0DAD21B + v17));
            int v17 = ((_WORD)v17 + 8) & 0xFFF;
            int8x8_t v23 = vqshrun_n_s16(vaddw_s8(*v21, v22), 2uLL);
            int8x8_t v24 = vqshrun_n_s16(vaddw_s8(*(int16x8_t *)((char *)v21 + 2 * *a4), vbsl_s8(vmovn_s16(vcgtq_s16(*(int16x8_t *)((char *)v21 + 2 * *a4), v13)), *(int8x8_t *)((char *)&unk_1D0DAC214 + v16), *(int8x8_t *)((char *)&unk_1D0DAD21B + v16))), 2uLL);
            int8x8_t v25 = vqshrun_n_s16(vaddw_s8(*(int16x8_t *)(a5[1] + v19), vbsl_s8(vand_s8(vmovn_s16(vcgtq_s16(vabdq_s16(*(int16x8_t *)(a5[1] + v19), v14), v15)), (int8x8_t)vcgt_u8((uint8x8_t)v23, (uint8x8_t)0x1111111111111111)), *(int8x8_t *)((char *)&unk_1D0DAC214 + v18), *(int8x8_t *)((char *)&unk_1D0DAD21B + v18))), 2uLL);
            *(int8x8_t *)(*a7 + v20) = v23;
            *(int8x8_t *)(*a7 + *a6 + v20) = v24;
            *(int8x8_t *)(a7[1] + v20) = v25;
            v20 += 8;
            int32x4_t v9 = (int32x4_t)vaddw_u16((uint32x4_t)v9, vpadal_u8(vpadal_u8(vpaddl_u8((uint8x8_t)vand_s8(v24, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v23, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v25, (int8x8_t)0x101010101010101)));
            unsigned int v16 = ((_WORD)v16 + 8) & 0xFFF;
            unsigned int v18 = ((_WORD)v18 + 8) & 0xFFF;
            v19 += 16;
          }
          while (a1 - 7 > v20);
        }
        unint64_t v20 = v20;
        if (v20 >= a1)
        {
          uint64_t v37 = *a6;
        }
        else
        {
          uint64_t v26 = *a7;
          do
          {
            unsigned int v27 = *(unsigned __int16 *)(*a5 + 2 * v20);
            if (v27 <= 0x43) {
              uint64_t v28 = (char *)&unk_1D0DAD21B;
            }
            else {
              uint64_t v28 = (char *)&unk_1D0DAC214;
            }
            int v29 = (int)(v28[v17] + v27) >> 2;
            if (v29 >= 255) {
              int v29 = 255;
            }
            *(unsigned char *)(v26 + v20) = v29 & ~(v29 >> 31);
            unsigned int v30 = *(unsigned __int16 *)(*a5 + 2 * (v20 + *a4));
            if (v30 <= 0x43) {
              BOOL v31 = (char *)&unk_1D0DAD21B;
            }
            else {
              BOOL v31 = (char *)&unk_1D0DAC214;
            }
            int v32 = (int)(v31[v16] + v30) >> 2;
            if (v32 >= 255) {
              int v32 = 255;
            }
            *(unsigned char *)(*a7 + *a6 + v20) = v32 & ~(v32 >> 31);
            unsigned int v33 = *(unsigned __int16 *)(a5[1] + 2 * v20);
            if (*(unsigned __int8 *)(*a7 + v20) < 0x12u) {
              goto LABEL_25;
            }
            int v34 = v33 - 512;
            if (v33 < 0x200) {
              int v34 = 512 - v33;
            }
            uint64_t v35 = (char *)&unk_1D0DAC214;
            if (v34 <= 3) {
LABEL_25:
            }
              uint64_t v35 = (char *)&unk_1D0DAD21B;
            int v17 = ((_WORD)v17 + 1) & 0xFFF;
            unsigned int v16 = ((_WORD)v16 + 1) & 0xFFF;
            int v36 = (int)(v35[v18] + v33) >> 2;
            unsigned int v18 = ((_WORD)v18 + 1) & 0xFFF;
            if (v36 >= 255) {
              int v36 = 255;
            }
            *(unsigned char *)(a7[1] + v20) = v36 & ~(v36 >> 31);
            uint64_t v26 = *a7;
            uint64_t v37 = *a6;
            *a8 += (*(unsigned char *)(a7[1] + v20) & 1) + (*(unsigned char *)(*a7 + v20 + *a6) & 1) + (*(unsigned char *)(*a7 + v20) & 1);
            ++v20;
          }
          while (a1 != v20);
        }
        int v38 = dword_1D0DA81F8[((_WORD)v8 + (_WORD)v10) & 0xFFF];
        LOWORD(v16) = v38 + v16;
        __int16 v12 = v38 + v18;
        uint64_t v39 = a5[1] + 2 * a4[1];
        int v17 = v16 & 0xFFF;
        ++v10;
        *a5 += 4 * *a4;
        a5[1] = v39;
        uint64_t v40 = *a7 + 2 * v37;
        uint64_t v41 = a7[1] + a6[1];
        *a7 = v40;
        a7[1] = v41;
      }
      while (v10 != v11);
LABEL_63:
      unsigned int v8 = *a8;
    }
  }
  else if (a2 >= 2)
  {
    uint64_t v42 = 0;
    unint64_t v43 = a2 >> 1;
    __int16 v44 = v8 + a2 * a1;
    v45.i64[0] = 0xEF00EF00EF00EF00;
    v45.i64[1] = 0xEF00EF00EF00EF00;
    v46.i64[0] = 0x200020002000200;
    v46.i64[1] = 0x200020002000200;
    v47.i64[0] = 0x3000300030003;
    v47.i64[1] = 0x3000300030003;
    unsigned int v48 = *a8;
    int v49 = *a8;
    do
    {
      unsigned int v48 = ((_WORD)v48 + (_WORD)a1) & 0xFFF;
      unsigned int v50 = v44 & 0xFFF;
      if (a1 == 7)
      {
        LODWORD(v52) = 0;
      }
      else
      {
        uint64_t v51 = 0;
        unint64_t v52 = 0;
        do
        {
          int v53 = (uint16x8_t *)(*a5 + v51);
          int8x8_t v54 = *(int8x8_t *)((char *)&unk_1D0DAC214 + v49);
          int8x8_t v55 = *(int8x8_t *)((char *)&unk_1D0DAD21B + v49);
          int v49 = ((_WORD)v49 + 8) & 0xFFF;
          int8x8_t v56 = vqshrun_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)vmovl_s8(vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(*v53, v45)), v54, v55)), *v53, 6uLL), 2uLL);
          int8x8_t v57 = vqshrun_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)vmovl_s8(vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(*(uint16x8_t *)((char *)v53 + 2 * *a4), v45)), *(int8x8_t *)((char *)&unk_1D0DAC214 + v48), *(int8x8_t *)((char *)&unk_1D0DAD21B + v48))), *(uint16x8_t *)((char *)v53 + 2 * *a4), 6uLL), 2uLL);
          int8x8_t v58 = vqshrun_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)vmovl_s8(vbsl_s8(vand_s8(vmovn_s16(vcgtq_s16((int16x8_t)vabdq_u16(vshrq_n_u16(*(uint16x8_t *)(a5[1] + v51), 6uLL), v46), v47)), (int8x8_t)vcgt_u8((uint8x8_t)v56, (uint8x8_t)0x1111111111111111)), *(int8x8_t *)((char *)&unk_1D0DAC214 + v50), *(int8x8_t *)((char *)&unk_1D0DAD21B + v50))), *(uint16x8_t *)(a5[1] + v51), 6uLL), 2uLL);
          *(int8x8_t *)(*a7 + v52) = v56;
          *(int8x8_t *)(*a7 + *a6 + v52) = v57;
          *(int8x8_t *)(a7[1] + v52) = v58;
          v52 += 8;
          int32x4_t v9 = (int32x4_t)vaddw_u16((uint32x4_t)v9, vpadal_u8(vpadal_u8(vpaddl_u8((uint8x8_t)vand_s8(v57, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v56, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v58, (int8x8_t)0x101010101010101)));
          unsigned int v48 = ((_WORD)v48 + 8) & 0xFFF;
          unsigned int v50 = ((_WORD)v50 + 8) & 0xFFF;
          v51 += 16;
        }
        while (a1 - 7 > v52);
      }
      unint64_t v52 = v52;
      if (v52 >= a1)
      {
        uint64_t v71 = *a6;
      }
      else
      {
        uint64_t v59 = *a7;
        do
        {
          unsigned int v60 = *(unsigned __int16 *)(*a5 + 2 * v52);
          if (v60 >> 8 <= 0x10) {
            unsigned int v61 = (char *)&unk_1D0DAD21B;
          }
          else {
            unsigned int v61 = (char *)&unk_1D0DAC214;
          }
          int v62 = (int)(v61[v49] + (v60 >> 6)) >> 2;
          if (v62 >= 255) {
            int v62 = 255;
          }
          *(unsigned char *)(v59 + v52) = v62 & ~(v62 >> 31);
          unsigned int v63 = *(unsigned __int16 *)(*a5 + 2 * (v52 + *a4));
          if (v63 >> 8 <= 0x10) {
            uint64_t v64 = (char *)&unk_1D0DAD21B;
          }
          else {
            uint64_t v64 = (char *)&unk_1D0DAC214;
          }
          int v65 = (int)(v64[v48] + (v63 >> 6)) >> 2;
          if (v65 >= 255) {
            int v65 = 255;
          }
          *(unsigned char *)(*a7 + *a6 + v52) = v65 & ~(v65 >> 31);
          unsigned int v66 = *(unsigned __int16 *)(a5[1] + 2 * v52);
          unsigned int v67 = v66 >> 6;
          if (*(unsigned __int8 *)(*a7 + v52) < 0x12u) {
            goto LABEL_56;
          }
          int v68 = v67 - 512;
          if ((v66 & 0x8000u) == 0) {
            int v68 = 512 - v67;
          }
          int v69 = (char *)&unk_1D0DAC214;
          if (v68 <= 3) {
LABEL_56:
          }
            int v69 = (char *)&unk_1D0DAD21B;
          int v49 = ((_WORD)v49 + 1) & 0xFFF;
          unsigned int v48 = ((_WORD)v48 + 1) & 0xFFF;
          int v70 = (int)(v69[v50] + v67) >> 2;
          unsigned int v50 = ((_WORD)v50 + 1) & 0xFFF;
          if (v70 >= 255) {
            int v70 = 255;
          }
          *(unsigned char *)(a7[1] + v52) = v70 & ~(v70 >> 31);
          uint64_t v59 = *a7;
          uint64_t v71 = *a6;
          *a8 += (*(unsigned char *)(a7[1] + v52) & 1) + (*(unsigned char *)(*a7 + v52 + *a6) & 1) + (*(unsigned char *)(*a7 + v52) & 1);
          ++v52;
        }
        while (a1 != v52);
      }
      int v72 = dword_1D0DA81F8[((_WORD)v8 + (_WORD)v42) & 0xFFF];
      LOWORD(v48) = v72 + v48;
      __int16 v44 = v72 + v50;
      uint64_t v73 = a5[1] + 2 * a4[1];
      int v49 = v48 & 0xFFF;
      ++v42;
      *a5 += 4 * *a4;
      a5[1] = v73;
      uint64_t v74 = *a7 + 2 * v71;
      uint64_t v75 = a7[1] + a6[1];
      *a7 = v74;
      a7[1] = v75;
    }
    while (v42 != v43);
    goto LABEL_63;
  }
  float result = COERCE_FLOAT(vaddvq_s32(v9));
  *a8 = LODWORD(result) + v8;
  return result;
}

uint64_t sub_1D0D4B190(uint64_t result, void *a2, int a3, __int16 *a4, char a5)
{
  if (a3 >= 1)
  {
    for (uint64_t i = 0; i != a3; *(unsigned char *)(result + i++) = v6 & ~(v6 >> 31))
    {
      int v6 = ((1 << (a5 - 1))
          + *a4 * *(unsigned __int8 *)(*a2 + i)
          + a4[1] * *(unsigned __int8 *)(a2[1] + i)
          + a4[2] * *(unsigned __int8 *)(a2[2] + i)
          + a4[3] * *(unsigned __int8 *)(a2[3] + i)) >> a5;
      if (v6 >= 255) {
        int v6 = 255;
      }
    }
  }
  return result;
}

void sub_1D0D4B20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, unsigned int a12, void (*a13)(char *, long long *, uint64_t, uint64_t, void), void (*a14)(uint64_t, char *, void, uint64_t, char *, void *, void))
{
  uint64_t v80 = a7;
  int v18 = a1;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  long long v88 = 0u;
  long long v89 = 0u;
  uint64_t v84 = a4;
  char v19 = MEMORY[0x1F4188790](a1);
  int v21 = (char *)&v69 - ((v20 + 15) & 0x1FFFFFFF0);
  memset(v87, 0, sizeof(v87));
  memset(v86, 0, sizeof(v86));
  int v83 = v22;
  uint64_t v23 = (v22 >> v19);
  unint64_t v24 = (int)v23 + 16;
  sub_1D0C8E930(v87, v24);
  if (v23 == -16)
  {
    int8x8_t v25 = 0;
  }
  else
  {
    sub_1D0C4CCE0(v86, v24);
    int8x8_t v25 = (unsigned char *)v86[0];
  }
  int v85 = a9;
  if ((int)v84 >= v83) {
    int v26 = v83;
  }
  else {
    int v26 = v84;
  }
  if (v26)
  {
    int v27 = v83;
    if ((int)v84 > v83) {
      int v27 = v84;
    }
    do
    {
      int v28 = v27 % v26;
      int v27 = v26;
      int v26 = v28;
    }
    while (v28);
  }
  int v29 = v87[0];
  if (a5 >= v85) {
    int v30 = v85;
  }
  else {
    int v30 = a5;
  }
  if (v30)
  {
    int v31 = v85;
    if (a5 > v85) {
      int v31 = a5;
    }
    do
    {
      int v32 = v31 % v30;
      int v31 = v30;
      int v30 = v32;
    }
    while (v32);
  }
  uint64_t v69 = (uint64_t)&v69;
  if ((int)v23 < 1)
  {
    if ((int)v23 < -15) {
      goto LABEL_26;
    }
    uint64_t v42 = 0;
  }
  else
  {
    __int16 v33 = 0;
    int v34 = 0;
    uint64_t v35 = v25;
    int v36 = v87[0];
    uint64_t v37 = v23;
    int v38 = (v84 << 16) / v83;
    do
    {
      int v39 = v34 >> 16;
      unsigned int v40 = v34 >> 8;
      v34 += v38;
      int v41 = v39 << v18;
      *v35++ = v40 & 0xF0;
      *(_WORD *)int v36 = v41 - v33;
      v36 += 2;
      __int16 v33 = v41;
      --v37;
    }
    while (v37);
    uint64_t v42 = v23;
  }
  uint64_t v43 = (int)v23 - 1;
  uint64_t v44 = v24 - v42;
  uint16x8_t v45 = &v25[v42];
  uint16x8_t v46 = &v29[2 * v42];
  do
  {
    *(_WORD *)uint16x8_t v46 = *(_WORD *)&v29[2 * v43];
    v46 += 2;
    *v45++ = v25[v43];
    --v44;
  }
  while (v44);
LABEL_26:
  uint64_t v82 = v25;
  int v81 = v18;
  if (v85 >= 1)
  {
    int v47 = 0;
    int v48 = 0;
    uint64_t v75 = a14;
    uint64_t v79 = a13;
    int v49 = (char *)((unint64_t)(v21 + 31) & 0xFFFFFFFFFFFFFFF0);
    int v77 = a5 - 3;
    int v78 = a5 - 2;
    uint64_t v74 = a11;
    uint64_t v76 = a10;
    uint64_t v73 = (int)v84 - 1;
    uint64_t v70 = (int)v84 - 2;
    int v72 = v49 - 1;
    unsigned int v50 = &v49[(int)v84];
    int v71 = (a5 << 16) / v85;
    do
    {
      int v51 = v47 >> 16;
      int v52 = (v47 >> 16) - 1;
      if (v47 < 0x10000) {
        int v52 = 0;
      }
      *(void *)&long long v88 = a2 + v52 * a3;
      *((void *)&v88 + 1) = a2 + ((uint64_t)v47 >> 16) * a3;
      if (v51 <= v78) {
        int v53 = v51 + 1;
      }
      else {
        int v53 = a5 - 1;
      }
      uint64_t v54 = a2 + v53 * a3;
      BOOL v55 = v51 <= v77;
      int v56 = v51 + 2;
      if (!v55) {
        int v56 = a5 - 1;
      }
      *(void *)&long long v89 = v54;
      *((void *)&v89 + 1) = a2 + v56 * a3;
      v79(v49, &v88, v84, v76 + 16 * ((unsigned __int16)v47 >> 12), a12);
      char v57 = *v49;
      if (v81)
      {
        unint64_t v58 = 0;
        char v59 = *(unsigned char *)(((unint64_t)(v21 + 31) & 0xFFFFFFFFFFFFFFF0) + 1);
        char v60 = v49[v73];
        unsigned int v61 = v72;
        char v62 = v49[v70];
        unsigned int v63 = v82;
        do
        {
          *(v61 - 1) = v57;
          *unsigned int v61 = v59;
          v61 -= 2;
          uint64_t v64 = &v50[v58];
          *uint64_t v64 = v62;
          v64[1] = v60;
          BOOL v65 = v58 >= 6;
          v58 += 2;
        }
        while (!v65);
      }
      else
      {
        uint64_t v66 = 0;
        char v67 = v49[v73];
        int v68 = v72;
        unsigned int v63 = v82;
        do
        {
          *v68-- = v57;
          v50[v66++] = v67;
        }
        while (v66 != 4);
      }
      v75(a6, v49, v83, v74, v29, v63, a12);
      v47 += v71;
      a6 += v80;
      ++v48;
    }
    while (v48 != v85);
  }
  if (v82) {
    operator delete(v82);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1D0D4B63C(_Unwind_Exception *exception_object)
{
  *(void *)(v1 - 208) = *(void *)(v1 - 176);
  if (*(void *)(v1 - 208))
  {
    int v3 = *(void **)(v1 - 208);
    *(void *)(v1 - 168) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 152);
  if (v4) {
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t sub_1D0D4B678(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  int v4 = *((_DWORD *)a1 + 8);
  unsigned int v5 = *((_DWORD *)a1 + 12);
  BOOL v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v5) & 0x10);
  int16x8_t v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  int8x16_t v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 4))+ ((v5 >> 1) | 0xFFFFFFE)));
  int8x16_t v11 = (int8x16_t)vshlq_u64(v8, v10);
  int v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = v13 * v6;
  uint64_t v16 = a1[3];
  int v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 9)
  {
    int16x8_t v21 = 0uLL;
    int16x8_t v22 = 0uLL;
    int16x8_t v23 = 0uLL;
    int16x8_t v24 = 0uLL;
    int16x8_t v25 = 0uLL;
    int16x8_t v26 = 0uLL;
    int16x8_t v27 = 0uLL;
    if (v12 >= 1)
    {
      int v28 = v12;
      uint64_t v29 = v14;
      int v30 = v17;
      do
      {
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 + v13 * v6 - 2), v9);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v15), v9);
        uint8x16_t v33 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 * (v6 - 1) + 2), v9);
        uint8x16_t v34 = (uint8x16_t)vandq_s8(*v30, v9);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v32, v31);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v32, v33);
        int8x16_t v37 = (int8x16_t)vcgtq_u8(v31, v32);
        int8x16_t v38 = (int8x16_t)vcgtq_u8(v33, v32);
        int8x16_t v39 = vandq_s8(v38, v37);
        int8x16_t v40 = vandq_s8(v36, v35);
        int8x16_t v41 = veorq_s8(v36, v35);
        int8x16_t v42 = veorq_s8(v38, v37);
        int8x16_t v43 = vbicq_s8(v42, v41);
        int8x16_t v44 = vbicq_s8(v41, v42);
        int16x8_t v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v39);
        int16x8_t v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v43);
        int16x8_t v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v44);
        int16x8_t v7 = (int16x8_t)vsubq_s8((int8x16_t)v7, v40);
        int8x16_t v45 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8);
        int8x16_t v46 = (int8x16_t)vsubl_high_u8(v34, v32);
        int16x8_t v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v39)), v27), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        int16x8_t v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v43)), v26), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        int16x8_t v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v44)), v25), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v44.i8)));
        int16x8_t v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v40)), v24), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)));
        int v30 = (int8x16_t *)((char *)v30 + v16);
        v29 += v13;
        --v28;
      }
      while (v28);
    }
    int8x16_t v47 = (int8x16_t)vpaddq_s16(v23, v22);
    int8x16_t v48 = (int8x16_t)vpaddq_s16(v21, v7);
    int16x8_t v7 = (int16x8_t)vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v47, v48), vuzp2q_s8(v47, v48)));
    int32x4_t v20 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v27, v26), vuzp1q_s16(v25, v24)));
    int32x4_t v19 = vpaddlq_s16(vpaddq_s16(vuzp2q_s16(v27, v26), vuzp2q_s16(v25, v24)));
    unsigned int v18 = 8;
  }
  else
  {
    unsigned int v18 = 0;
    int8x16_t v11 = vandq_s8(v11, v9);
    int32x4_t v19 = 0uLL;
    int32x4_t v20 = 0uLL;
  }
  unint64_t v49 = (v4 - 8);
  if ((int)v18 < (int)v49)
  {
    unint64_t v50 = v18;
    uint64_t v51 = v13 * (v6 - 1) + 2 * v18 + v14 + 2;
    uint64_t v52 = v13 + v13 * v6 + 2 * v18 + v14 - 2;
    uint64_t v53 = v14 + v15 + 2 * v18;
    do
    {
      if (v12 < 1)
      {
        int16x8_t v61 = 0uLL;
        int16x8_t v64 = 0uLL;
        int16x8_t v63 = 0uLL;
        int16x8_t v62 = 0uLL;
        int16x8_t v55 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v59 = 0uLL;
        int16x8_t v56 = 0uLL;
      }
      else
      {
        uint64_t v54 = 0;
        int16x8_t v55 = 0uLL;
        int16x8_t v56 = 0uLL;
        char v57 = (uint8x8_t *)((char *)v17 + 2 * v50);
        int v58 = v12;
        int16x8_t v59 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v61 = 0uLL;
        int16x8_t v62 = 0uLL;
        int16x8_t v63 = 0uLL;
        int16x8_t v64 = 0uLL;
        do
        {
          uint8x16_t v65 = *(uint8x16_t *)(v53 + v54);
          uint8x16_t v66 = *(uint8x16_t *)(v52 + v54);
          uint8x16_t v67 = *(uint8x16_t *)(v51 + v54);
          int8x16_t v68 = (int8x16_t)vcgtq_u8(v65, v66);
          int8x16_t v69 = (int8x16_t)vcgtq_u8(v65, v67);
          int8x16_t v70 = (int8x16_t)vcgtq_u8(v66, v65);
          int8x16_t v71 = (int8x16_t)vcgtq_u8(v67, v65);
          int8x16_t v72 = vandq_s8(v71, v70);
          int8x16_t v73 = vandq_s8(v69, v68);
          int8x16_t v74 = veorq_s8(v69, v68);
          int8x16_t v75 = veorq_s8(v71, v70);
          int8x16_t v76 = vbicq_s8(v75, v74);
          int8x16_t v77 = vbicq_s8(v74, v75);
          int16x8_t v55 = (int16x8_t)vsubq_s8((int8x16_t)v55, v72);
          int16x8_t v62 = (int16x8_t)vsubq_s8((int8x16_t)v62, v76);
          int16x8_t v63 = (int16x8_t)vsubq_s8((int8x16_t)v63, v77);
          int16x8_t v64 = (int16x8_t)vsubq_s8((int8x16_t)v64, v73);
          int8x16_t v78 = (int8x16_t)vsubl_u8(*v57, *(uint8x8_t *)v65.i8);
          int8x16_t v79 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v57->i8, v65);
          int16x8_t v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v72)), v56), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          int16x8_t v59 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v76)), v59), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
          int16x8_t v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v77)), v60), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v77.i8)));
          int16x8_t v61 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v73)), v61), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v73.i8)));
          char v57 = (uint8x8_t *)((char *)v57 + v16);
          v54 += v13;
          --v58;
        }
        while (v58);
      }
      int8x16_t v80 = (int8x16_t)vpaddq_s16(v55, v62);
      int8x16_t v81 = (int8x16_t)vpaddq_s16(v63, v64);
      int16x8_t v7 = (int16x8_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v80, v81), vuzp2q_s8(v80, v81)));
      int32x4_t v20 = vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v56, v59), vuzp1q_s16(v60, v61)));
      v50 += 8;
      int32x4_t v19 = vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v56, v59), vuzp2q_s16(v60, v61)));
      v51 += 16;
      v52 += 16;
      v53 += 16;
    }
    while (v50 < v49);
    unsigned int v18 = v50;
  }
  if (v12 < 1)
  {
    int16x8_t v94 = 0uLL;
    int16x8_t v93 = 0uLL;
    int16x8_t v92 = 0uLL;
    int16x8_t v86 = 0uLL;
    int16x8_t v91 = 0uLL;
    int16x8_t v90 = 0uLL;
    int16x8_t v89 = 0uLL;
    int16x8_t v87 = 0uLL;
  }
  else
  {
    uint64_t v82 = 2 * v18;
    int v83 = (int8x16_t *)((char *)v17 + v82);
    uint64_t v84 = v13 * (v6 - 1) + 2;
    uint64_t v85 = v14 + v82;
    int16x8_t v86 = 0uLL;
    int16x8_t v87 = 0uLL;
    uint64_t v88 = v13 + v13 * v6 - 2;
    int16x8_t v89 = 0uLL;
    int16x8_t v90 = 0uLL;
    int16x8_t v91 = 0uLL;
    int16x8_t v92 = 0uLL;
    int16x8_t v93 = 0uLL;
    int16x8_t v94 = 0uLL;
    do
    {
      uint8x16_t v95 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v88), v11);
      uint8x16_t v96 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v15), v11);
      uint8x16_t v97 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v84), v11);
      uint8x16_t v98 = (uint8x16_t)vandq_s8(*v83, v11);
      int8x16_t v99 = (int8x16_t)vcgtq_u8(v96, v95);
      int8x16_t v100 = (int8x16_t)vcgtq_u8(v96, v97);
      int8x16_t v101 = (int8x16_t)vcgtq_u8(v95, v96);
      int8x16_t v102 = (int8x16_t)vcgtq_u8(v97, v96);
      int8x16_t v103 = vandq_s8(v102, v101);
      int8x16_t v104 = vandq_s8(v100, v99);
      int8x16_t v105 = veorq_s8(v100, v99);
      int8x16_t v106 = veorq_s8(v102, v101);
      int8x16_t v107 = vbicq_s8(v106, v105);
      int8x16_t v108 = vbicq_s8(v105, v106);
      int16x8_t v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v103);
      int16x8_t v92 = (int16x8_t)vsubq_s8((int8x16_t)v92, v107);
      int16x8_t v93 = (int16x8_t)vsubq_s8((int8x16_t)v93, v108);
      int16x8_t v94 = (int16x8_t)vsubq_s8((int8x16_t)v94, v104);
      int8x16_t v109 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v98.i8, *(uint8x8_t *)v96.i8);
      int8x16_t v110 = (int8x16_t)vsubl_high_u8(v98, v96);
      int16x8_t v87 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v103)), v87), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v103.i8)));
      int16x8_t v89 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v107)), v89), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v107.i8)));
      int16x8_t v90 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v108)), v90), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v108.i8)));
      int16x8_t v91 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v104)), v91), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v104.i8)));
      int v83 = (int8x16_t *)((char *)v83 + v16);
      v85 += v13;
      --v12;
    }
    while (v12);
  }
  int8x16_t v111 = (int8x16_t)vpaddq_s16(v86, v92);
  int8x16_t v112 = (int8x16_t)vpaddq_s16(v93, v94);
  int8x16_t v113 = (int8x16_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v111, v112), vuzp2q_s8(v111, v112)));
  int8x16_t v114 = (int8x16_t)vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v87, v89), vuzp1q_s16(v90, v91)));
  int8x16_t v115 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v87, v89), vuzp2q_s16(v90, v91)));
  *(_DWORD *)a2 = v113.i32[0];
  v111.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v111.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v111.i32[1];
  *(void *)a3 = v114.i64[0];
  int8x16_t result = vextq_s8(v114, v115, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(void *)(a3 + 32) = v115.i64[1];
  return result;
}

int8x16_t sub_1D0D4BBC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  int v4 = *((_DWORD *)a1 + 8);
  unsigned int v5 = *((_DWORD *)a1 + 12);
  BOOL v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v5) & 0x10);
  int16x8_t v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  int8x16_t v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 4))+ ((v5 >> 1) | 0xFFFFFFE)));
  int8x16_t v11 = (int8x16_t)vshlq_u64(v8, v10);
  int v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = v13 * v6;
  uint64_t v16 = a1[3];
  int v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 9)
  {
    int16x8_t v21 = 0uLL;
    int16x8_t v22 = 0uLL;
    int16x8_t v23 = 0uLL;
    int16x8_t v24 = 0uLL;
    int16x8_t v25 = 0uLL;
    int16x8_t v26 = 0uLL;
    int16x8_t v27 = 0uLL;
    if (v12 >= 1)
    {
      int v28 = v12;
      uint64_t v29 = v14;
      int v30 = v17;
      do
      {
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 * (v6 - 1) - 2), v9);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v15), v9);
        uint8x16_t v33 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 + v13 * v6 + 2), v9);
        uint8x16_t v34 = (uint8x16_t)vandq_s8(*v30, v9);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v32, v31);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v32, v33);
        int8x16_t v37 = (int8x16_t)vcgtq_u8(v31, v32);
        int8x16_t v38 = (int8x16_t)vcgtq_u8(v33, v32);
        int8x16_t v39 = vandq_s8(v38, v37);
        int8x16_t v40 = vandq_s8(v36, v35);
        int8x16_t v41 = veorq_s8(v36, v35);
        int8x16_t v42 = veorq_s8(v38, v37);
        int8x16_t v43 = vbicq_s8(v42, v41);
        int8x16_t v44 = vbicq_s8(v41, v42);
        int16x8_t v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v39);
        int16x8_t v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v43);
        int16x8_t v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v44);
        int16x8_t v7 = (int16x8_t)vsubq_s8((int8x16_t)v7, v40);
        int8x16_t v45 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8);
        int8x16_t v46 = (int8x16_t)vsubl_high_u8(v34, v32);
        int16x8_t v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v39)), v27), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        int16x8_t v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v43)), v26), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        int16x8_t v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v44)), v25), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v44.i8)));
        int16x8_t v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v40)), v24), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)));
        int v30 = (int8x16_t *)((char *)v30 + v16);
        v29 += v13;
        --v28;
      }
      while (v28);
    }
    int8x16_t v47 = (int8x16_t)vpaddq_s16(v23, v22);
    int8x16_t v48 = (int8x16_t)vpaddq_s16(v21, v7);
    int16x8_t v7 = (int16x8_t)vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v47, v48), vuzp2q_s8(v47, v48)));
    int32x4_t v20 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v27, v26), vuzp1q_s16(v25, v24)));
    int32x4_t v19 = vpaddlq_s16(vpaddq_s16(vuzp2q_s16(v27, v26), vuzp2q_s16(v25, v24)));
    unsigned int v18 = 8;
  }
  else
  {
    unsigned int v18 = 0;
    int8x16_t v11 = vandq_s8(v11, v9);
    int32x4_t v19 = 0uLL;
    int32x4_t v20 = 0uLL;
  }
  unint64_t v49 = (v4 - 8);
  if ((int)v18 < (int)v49)
  {
    unint64_t v50 = v18;
    uint64_t v51 = v13 + v13 * v6 + 2 * v18 + v14 + 2;
    uint64_t v52 = v13 * (v6 - 1) + 2 * v18 + v14 - 2;
    uint64_t v53 = v14 + v15 + 2 * v18;
    do
    {
      if (v12 < 1)
      {
        int16x8_t v61 = 0uLL;
        int16x8_t v64 = 0uLL;
        int16x8_t v63 = 0uLL;
        int16x8_t v62 = 0uLL;
        int16x8_t v55 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v59 = 0uLL;
        int16x8_t v56 = 0uLL;
      }
      else
      {
        uint64_t v54 = 0;
        int16x8_t v55 = 0uLL;
        int16x8_t v56 = 0uLL;
        char v57 = (uint8x8_t *)((char *)v17 + 2 * v50);
        int v58 = v12;
        int16x8_t v59 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v61 = 0uLL;
        int16x8_t v62 = 0uLL;
        int16x8_t v63 = 0uLL;
        int16x8_t v64 = 0uLL;
        do
        {
          uint8x16_t v65 = *(uint8x16_t *)(v53 + v54);
          uint8x16_t v66 = *(uint8x16_t *)(v52 + v54);
          uint8x16_t v67 = *(uint8x16_t *)(v51 + v54);
          int8x16_t v68 = (int8x16_t)vcgtq_u8(v65, v66);
          int8x16_t v69 = (int8x16_t)vcgtq_u8(v65, v67);
          int8x16_t v70 = (int8x16_t)vcgtq_u8(v66, v65);
          int8x16_t v71 = (int8x16_t)vcgtq_u8(v67, v65);
          int8x16_t v72 = vandq_s8(v71, v70);
          int8x16_t v73 = vandq_s8(v69, v68);
          int8x16_t v74 = veorq_s8(v69, v68);
          int8x16_t v75 = veorq_s8(v71, v70);
          int8x16_t v76 = vbicq_s8(v75, v74);
          int8x16_t v77 = vbicq_s8(v74, v75);
          int16x8_t v55 = (int16x8_t)vsubq_s8((int8x16_t)v55, v72);
          int16x8_t v62 = (int16x8_t)vsubq_s8((int8x16_t)v62, v76);
          int16x8_t v63 = (int16x8_t)vsubq_s8((int8x16_t)v63, v77);
          int16x8_t v64 = (int16x8_t)vsubq_s8((int8x16_t)v64, v73);
          int8x16_t v78 = (int8x16_t)vsubl_u8(*v57, *(uint8x8_t *)v65.i8);
          int8x16_t v79 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v57->i8, v65);
          int16x8_t v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v72)), v56), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          int16x8_t v59 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v76)), v59), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
          int16x8_t v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v77)), v60), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v77.i8)));
          int16x8_t v61 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v73)), v61), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v73.i8)));
          char v57 = (uint8x8_t *)((char *)v57 + v16);
          v54 += v13;
          --v58;
        }
        while (v58);
      }
      int8x16_t v80 = (int8x16_t)vpaddq_s16(v55, v62);
      int8x16_t v81 = (int8x16_t)vpaddq_s16(v63, v64);
      int16x8_t v7 = (int16x8_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v80, v81), vuzp2q_s8(v80, v81)));
      int32x4_t v20 = vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v56, v59), vuzp1q_s16(v60, v61)));
      v50 += 8;
      int32x4_t v19 = vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v56, v59), vuzp2q_s16(v60, v61)));
      v51 += 16;
      v52 += 16;
      v53 += 16;
    }
    while (v50 < v49);
    unsigned int v18 = v50;
  }
  if (v12 < 1)
  {
    int16x8_t v94 = 0uLL;
    int16x8_t v93 = 0uLL;
    int16x8_t v92 = 0uLL;
    int16x8_t v86 = 0uLL;
    int16x8_t v91 = 0uLL;
    int16x8_t v90 = 0uLL;
    int16x8_t v89 = 0uLL;
    int16x8_t v87 = 0uLL;
  }
  else
  {
    uint64_t v82 = 2 * v18;
    int v83 = (int8x16_t *)((char *)v17 + v82);
    uint64_t v84 = v13 + v13 * v6 + 2;
    uint64_t v85 = v14 + v82;
    int16x8_t v86 = 0uLL;
    int16x8_t v87 = 0uLL;
    uint64_t v88 = v13 * (v6 - 1) - 2;
    int16x8_t v89 = 0uLL;
    int16x8_t v90 = 0uLL;
    int16x8_t v91 = 0uLL;
    int16x8_t v92 = 0uLL;
    int16x8_t v93 = 0uLL;
    int16x8_t v94 = 0uLL;
    do
    {
      uint8x16_t v95 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v88), v11);
      uint8x16_t v96 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v15), v11);
      uint8x16_t v97 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v84), v11);
      uint8x16_t v98 = (uint8x16_t)vandq_s8(*v83, v11);
      int8x16_t v99 = (int8x16_t)vcgtq_u8(v96, v95);
      int8x16_t v100 = (int8x16_t)vcgtq_u8(v96, v97);
      int8x16_t v101 = (int8x16_t)vcgtq_u8(v95, v96);
      int8x16_t v102 = (int8x16_t)vcgtq_u8(v97, v96);
      int8x16_t v103 = vandq_s8(v102, v101);
      int8x16_t v104 = vandq_s8(v100, v99);
      int8x16_t v105 = veorq_s8(v100, v99);
      int8x16_t v106 = veorq_s8(v102, v101);
      int8x16_t v107 = vbicq_s8(v106, v105);
      int8x16_t v108 = vbicq_s8(v105, v106);
      int16x8_t v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v103);
      int16x8_t v92 = (int16x8_t)vsubq_s8((int8x16_t)v92, v107);
      int16x8_t v93 = (int16x8_t)vsubq_s8((int8x16_t)v93, v108);
      int16x8_t v94 = (int16x8_t)vsubq_s8((int8x16_t)v94, v104);
      int8x16_t v109 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v98.i8, *(uint8x8_t *)v96.i8);
      int8x16_t v110 = (int8x16_t)vsubl_high_u8(v98, v96);
      int16x8_t v87 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v103)), v87), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v103.i8)));
      int16x8_t v89 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v107)), v89), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v107.i8)));
      int16x8_t v90 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v108)), v90), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v108.i8)));
      int16x8_t v91 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v104)), v91), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v104.i8)));
      int v83 = (int8x16_t *)((char *)v83 + v16);
      v85 += v13;
      --v12;
    }
    while (v12);
  }
  int8x16_t v111 = (int8x16_t)vpaddq_s16(v86, v92);
  int8x16_t v112 = (int8x16_t)vpaddq_s16(v93, v94);
  int8x16_t v113 = (int8x16_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v111, v112), vuzp2q_s8(v111, v112)));
  int8x16_t v114 = (int8x16_t)vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v87, v89), vuzp1q_s16(v90, v91)));
  int8x16_t v115 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v87, v89), vuzp2q_s16(v90, v91)));
  *(_DWORD *)a2 = v113.i32[0];
  v111.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v111.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v111.i32[1];
  *(void *)a3 = v114.i64[0];
  int8x16_t result = vextq_s8(v114, v115, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(void *)(a3 + 32) = v115.i64[1];
  return result;
}

int8x16_t sub_1D0D4C118(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 11);
  unsigned int v4 = *((_DWORD *)a1 + 12);
  uint64_t v5 = ~(v4 >> 2) & 1;
  unsigned int v6 = (v4 >> 3) | 0xFFFFFFFE;
  if (v3) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  int v8 = *((_DWORD *)a1 + 8);
  v9.i64[0] = 0;
  int v10 = v6 + *((_DWORD *)a1 + 9) + v7 - v3 - v5 + 1;
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = *a1 + v11 * v5;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[2] + v14 * v5;
  uint64_t v16 = v11 + v11 * v5;
  if (v8 <= 8)
  {
    uint64_t v52 = 0;
    uint64_t v18 = -v11;
    uint16x8_t v20 = 0uLL;
    int32x4_t v22 = 0uLL;
    int32x4_t v21 = 0uLL;
  }
  else
  {
    unint64_t v17 = 0;
    uint64_t v18 = -v11;
    int32x4_t v19 = (uint8x16_t *)(v12 + v16);
    uint16x8_t v20 = 0uLL;
    int32x4_t v21 = 0uLL;
    int32x4_t v22 = 0uLL;
    do
    {
      int16x8_t v23 = 0uLL;
      int16x8_t v24 = 0uLL;
      int16x8_t v25 = 0uLL;
      int16x8_t v26 = 0uLL;
      int16x8_t v27 = 0uLL;
      int16x8_t v28 = 0uLL;
      int16x8_t v29 = 0uLL;
      int16x8_t v30 = 0uLL;
      if (v10 >= 1)
      {
        int v31 = 0;
        uint8x16_t v32 = (uint8x16_t *)(v13 + 2 * v17);
        uint8x16_t v33 = *v32;
        uint8x16_t v34 = *(uint8x16_t *)((char *)v32 - v11);
        int8x16_t v35 = (uint8x8_t *)(v15 + 2 * v17);
        int8x16_t v36 = v19;
        do
        {
          uint8x16_t v37 = *v36;
          int8x16_t v38 = (int8x16_t)vcgtq_u8(v33, *v36);
          int8x16_t v39 = (int8x16_t)vcgtq_u8(v33, v34);
          int8x16_t v40 = (int8x16_t)vcgtq_u8(*v36, v33);
          int8x16_t v41 = (int8x16_t)vcgtq_u8(v34, v33);
          int8x16_t v42 = vandq_s8(v40, v41);
          int8x16_t v43 = vandq_s8(v38, v39);
          int8x16_t v44 = veorq_s8(v38, v39);
          int8x16_t v45 = veorq_s8(v40, v41);
          int8x16_t v46 = vbicq_s8(v45, v44);
          int8x16_t v47 = vbicq_s8(v44, v45);
          int16x8_t v26 = (int16x8_t)vsubq_s8((int8x16_t)v26, v42);
          int16x8_t v25 = (int16x8_t)vsubq_s8((int8x16_t)v25, v46);
          int16x8_t v24 = (int16x8_t)vsubq_s8((int8x16_t)v24, v47);
          int16x8_t v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v43);
          int8x16_t v48 = (int8x16_t)vsubl_u8(*v35, *(uint8x8_t *)v33.i8);
          int8x16_t v49 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v35->i8, v33);
          int16x8_t v30 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v42)), v30), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)));
          int16x8_t v29 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v46)), v29), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v46.i8)));
          int16x8_t v28 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v47)), v28), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v47.i8)));
          int8x16_t v35 = (uint8x8_t *)((char *)v35 + v14);
          ++v31;
          int16x8_t v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v43)), v27), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
          int8x16_t v36 = (uint8x16_t *)((char *)v36 + v11);
          uint8x16_t v34 = v33;
          uint8x16_t v33 = v37;
        }
        while (v31 < v10);
      }
      int8x16_t v50 = (int8x16_t)vpaddq_s16(v26, v25);
      int8x16_t v51 = (int8x16_t)vpaddq_s16(v24, v23);
      uint16x8_t v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v50, v51), vuzp2q_s8(v50, v51)));
      int32x4_t v21 = vpadalq_s16(v21, vpaddq_s16(vuzp1q_s16(v30, v29), vuzp1q_s16(v28, v27)));
      int32x4_t v22 = vpadalq_s16(v22, vpaddq_s16(vuzp2q_s16(v30, v29), vuzp2q_s16(v28, v27)));
      v17 += 8;
      ++v19;
    }
    while (v17 < (v8 - 8));
    uint64_t v52 = (2 * (v8 + 2147483639) + 16) & 0xFFFFFFF0;
  }
  if (v10 < 1)
  {
    int16x8_t v68 = 0uLL;
    int16x8_t v67 = 0uLL;
    int16x8_t v66 = 0uLL;
    int16x8_t v59 = 0uLL;
    int16x8_t v65 = 0uLL;
    int16x8_t v64 = 0uLL;
    int16x8_t v63 = 0uLL;
    int16x8_t v60 = 0uLL;
  }
  else
  {
    int v53 = 0;
    v9.u64[1] = (unint64_t)vdup_n_s32(-16 * ((a1[4] & 4u) + *((_DWORD *)a1 + 10)));
    v54.i64[0] = -1;
    v54.i64[1] = -1;
    int8x16_t v55 = (int8x16_t)vshlq_u64(v54, v9);
    int16x8_t v56 = (int8x16_t *)(v13 + v52);
    uint8x16_t v57 = (uint8x16_t)vandq_s8(*v56, v55);
    uint8x16_t v58 = (uint8x16_t)vandq_s8(*(int8x16_t *)((char *)v56 + v18), v55);
    int16x8_t v59 = 0uLL;
    int16x8_t v60 = 0uLL;
    int16x8_t v61 = (int8x16_t *)(v15 + v52);
    int16x8_t v62 = (int8x16_t *)(v12 + v52 + v16);
    int16x8_t v63 = 0uLL;
    int16x8_t v64 = 0uLL;
    int16x8_t v65 = 0uLL;
    int16x8_t v66 = 0uLL;
    int16x8_t v67 = 0uLL;
    int16x8_t v68 = 0uLL;
    do
    {
      uint8x16_t v69 = (uint8x16_t)vandq_s8(*v62, v55);
      uint8x16_t v70 = (uint8x16_t)vandq_s8(*v61, v55);
      int8x16_t v71 = (int8x16_t)vcgtq_u8(v57, v69);
      int8x16_t v72 = (int8x16_t)vcgtq_u8(v57, v58);
      int8x16_t v73 = (int8x16_t)vcgtq_u8(v69, v57);
      int8x16_t v74 = (int8x16_t)vcgtq_u8(v58, v57);
      int8x16_t v75 = vandq_s8(v73, v74);
      int8x16_t v76 = vandq_s8(v71, v72);
      int8x16_t v77 = veorq_s8(v71, v72);
      int8x16_t v78 = veorq_s8(v73, v74);
      int8x16_t v79 = vbicq_s8(v78, v77);
      int8x16_t v80 = vbicq_s8(v77, v78);
      int16x8_t v59 = (int16x8_t)vsubq_s8((int8x16_t)v59, v75);
      int16x8_t v66 = (int16x8_t)vsubq_s8((int8x16_t)v66, v79);
      int16x8_t v67 = (int16x8_t)vsubq_s8((int8x16_t)v67, v80);
      int16x8_t v68 = (int16x8_t)vsubq_s8((int8x16_t)v68, v76);
      int8x16_t v81 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v70.i8, *(uint8x8_t *)v57.i8);
      int8x16_t v82 = (int8x16_t)vsubl_high_u8(v70, v57);
      int16x8_t v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v75)), v60), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v75.i8)));
      int16x8_t v63 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v79)), v63), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v79.i8)));
      int16x8_t v64 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v80)), v64), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v80.i8)));
      int16x8_t v61 = (int8x16_t *)((char *)v61 + v14);
      ++v53;
      int16x8_t v65 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v76)), v65), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
      int16x8_t v62 = (int8x16_t *)((char *)v62 + v11);
      uint8x16_t v58 = v57;
      uint8x16_t v57 = v69;
    }
    while (v53 < v10);
  }
  int8x16_t v83 = (int8x16_t)vpaddq_s16(v59, v66);
  int8x16_t v84 = (int8x16_t)vpaddq_s16(v67, v68);
  int8x16_t v85 = (int8x16_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v83, v84), vuzp2q_s8(v83, v84)));
  int8x16_t v86 = (int8x16_t)vpadalq_s16(v21, vpaddq_s16(vuzp1q_s16(v60, v63), vuzp1q_s16(v64, v65)));
  int8x16_t v87 = (int8x16_t)vpadalq_s16(v22, vpaddq_s16(vuzp2q_s16(v60, v63), vuzp2q_s16(v64, v65)));
  *(_DWORD *)a2 = v85.i32[0];
  int8x8_t v88 = (int8x8_t)vextq_s8(v85, v85, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v85.i8, v88, 4uLL);
  *(_DWORD *)(a2 + 16) = v88.i32[1];
  *(void *)a3 = v86.i64[0];
  int8x16_t result = vextq_s8(v86, v87, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(void *)(a3 + 32) = v87.i64[1];
  return result;
}

int8x16_t sub_1D0D4C4D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  int v6 = *((_DWORD *)a1 + 8);
  unsigned int v7 = *((_DWORD *)a1 + 12);
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v7) & 0x10);
  int16x8_t v8 = 0uLL;
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  int8x16_t v10 = (int8x16_t)vshlq_u64(v9, a4);
  v11.i64[0] = 0;
  v11.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v6 & 4))+ ((v7 >> 1) | 0xFFFFFFE)));
  int8x16_t v12 = (int8x16_t)vshlq_u64(v9, v11);
  int v13 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
  unint64_t v14 = (v6 - 8);
  if (v6 > 8)
  {
    uint64_t v16 = a1[1];
    int16x8_t v20 = 0uLL;
    uint64_t v17 = a1[3];
    int16x8_t v21 = 0uLL;
    int16x8_t v22 = 0uLL;
    int16x8_t v23 = 0uLL;
    int16x8_t v24 = 0uLL;
    int16x8_t v25 = 0uLL;
    int16x8_t v26 = 0uLL;
    if (v13 >= 1)
    {
      int v27 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
      uint64_t v28 = *a1;
      int16x8_t v29 = (int8x16_t *)a1[2];
      do
      {
        uint8x16_t v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v28 - 2), v10);
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)v28, v10);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v28 + 2), v10);
        uint8x16_t v33 = (uint8x16_t)vandq_s8(*v29, v10);
        int8x16_t v34 = (int8x16_t)vcgtq_u8(v31, v30);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v31, v32);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v30, v31);
        int8x16_t v37 = (int8x16_t)vcgtq_u8(v32, v31);
        int8x16_t v38 = vandq_s8(v37, v36);
        int8x16_t v39 = vandq_s8(v35, v34);
        int8x16_t v40 = veorq_s8(v35, v34);
        int8x16_t v41 = veorq_s8(v37, v36);
        int8x16_t v42 = vbicq_s8(v41, v40);
        int8x16_t v43 = vbicq_s8(v40, v41);
        int16x8_t v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v38);
        int16x8_t v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v42);
        int16x8_t v20 = (int16x8_t)vsubq_s8((int8x16_t)v20, v43);
        int16x8_t v8 = (int16x8_t)vsubq_s8((int8x16_t)v8, v39);
        int8x16_t v44 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v33.i8, *(uint8x8_t *)v31.i8);
        int8x16_t v45 = (int8x16_t)vsubl_high_u8(v33, v31);
        int16x8_t v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v38)), v26), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)));
        int16x8_t v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v42)), v25), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)));
        int16x8_t v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v43)), v24), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        int16x8_t v23 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v39)), v23), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        v28 += v16;
        int16x8_t v29 = (int8x16_t *)((char *)v29 + v17);
        --v27;
      }
      while (v27);
    }
    int8x16_t v46 = (int8x16_t)vpaddq_s16(v22, v21);
    int8x16_t v47 = (int8x16_t)vpaddq_s16(v20, v8);
    uint16x8_t v18 = vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v46, v47), vuzp2q_s8(v46, v47)));
    int16x8_t v48 = vuzp1q_s16(v24, v23);
    int16x8_t v49 = vpaddq_s16(vuzp2q_s16(v26, v25), vuzp2q_s16(v24, v23));
    int32x4_t v19 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v26, v25), v48));
    int16x8_t v8 = (int16x8_t)vpaddlq_s16(v49);
    LODWORD(v15) = 8;
  }
  else
  {
    LODWORD(v15) = 0;
    int8x16_t v12 = vandq_s8(v12, v10);
    uint64_t v16 = a1[1];
    uint64_t v17 = a1[3];
    uint16x8_t v18 = 0uLL;
    int32x4_t v19 = 0uLL;
  }
  if ((int)v15 < (int)v14)
  {
    unint64_t v15 = v15;
    do
    {
      if (v13 < 1)
      {
        int16x8_t v56 = 0uLL;
        int16x8_t v60 = 0uLL;
        int16x8_t v59 = 0uLL;
        int16x8_t v57 = 0uLL;
        int16x8_t v50 = 0uLL;
        int16x8_t v55 = 0uLL;
        int16x8_t v54 = 0uLL;
        int16x8_t v51 = 0uLL;
      }
      else
      {
        int16x8_t v50 = 0uLL;
        int16x8_t v51 = 0uLL;
        uint64_t v52 = (uint8x8_t *)(v5 + 2 * v15);
        int v53 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
        int16x8_t v54 = 0uLL;
        int16x8_t v55 = 0uLL;
        int16x8_t v56 = 0uLL;
        int16x8_t v57 = 0uLL;
        uint64_t v58 = v4 + 2 * v15;
        int16x8_t v59 = 0uLL;
        int16x8_t v60 = 0uLL;
        do
        {
          uint8x16_t v61 = *(uint8x16_t *)(v58 - 2);
          uint8x16_t v62 = *(uint8x16_t *)(v58 + 2);
          int8x16_t v63 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v58, v61);
          int8x16_t v64 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v58, v62);
          int8x16_t v65 = (int8x16_t)vcgtq_u8(v61, *(uint8x16_t *)v58);
          int8x16_t v66 = (int8x16_t)vcgtq_u8(v62, *(uint8x16_t *)v58);
          int8x16_t v67 = vandq_s8(v66, v65);
          int8x16_t v68 = vandq_s8(v64, v63);
          int8x16_t v69 = veorq_s8(v64, v63);
          int8x16_t v70 = veorq_s8(v66, v65);
          int8x16_t v71 = vbicq_s8(v70, v69);
          int8x16_t v72 = vbicq_s8(v69, v70);
          int16x8_t v50 = (int16x8_t)vsubq_s8((int8x16_t)v50, v67);
          int16x8_t v57 = (int16x8_t)vsubq_s8((int8x16_t)v57, v71);
          int16x8_t v59 = (int16x8_t)vsubq_s8((int8x16_t)v59, v72);
          int16x8_t v60 = (int16x8_t)vsubq_s8((int8x16_t)v60, v68);
          int8x16_t v73 = (int8x16_t)vsubl_u8(*v52, *(uint8x8_t *)v58);
          int8x16_t v74 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v52->i8, *(uint8x16_t *)v58);
          int16x8_t v51 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v67)), v51), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)));
          int16x8_t v54 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v71)), v54), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)));
          int16x8_t v55 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v72)), v55), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          int16x8_t v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v68)), v56), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v68.i8)));
          v58 += v16;
          uint64_t v52 = (uint8x8_t *)((char *)v52 + v17);
          --v53;
        }
        while (v53);
      }
      int8x16_t v75 = (int8x16_t)vpaddq_s16(v50, v57);
      int8x16_t v76 = (int8x16_t)vpaddq_s16(v59, v60);
      uint16x8_t v18 = vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v75, v76), vuzp2q_s8(v75, v76)));
      int32x4_t v19 = vpadalq_s16(v19, vpaddq_s16(vuzp1q_s16(v51, v54), vuzp1q_s16(v55, v56)));
      int16x8_t v8 = (int16x8_t)vpadalq_s16((int32x4_t)v8, vpaddq_s16(vuzp2q_s16(v51, v54), vuzp2q_s16(v55, v56)));
      v15 += 8;
    }
    while (v15 < v14);
  }
  if (v13 < 1)
  {
    int16x8_t v87 = 0uLL;
    int16x8_t v86 = 0uLL;
    int16x8_t v85 = 0uLL;
    int16x8_t v77 = 0uLL;
    int16x8_t v84 = 0uLL;
    int16x8_t v83 = 0uLL;
    int16x8_t v82 = 0uLL;
    int16x8_t v79 = 0uLL;
  }
  else
  {
    int16x8_t v77 = 0uLL;
    uint64_t v78 = (2 * v15);
    int16x8_t v79 = 0uLL;
    int8x16_t v80 = (int8x16_t *)(v5 + v78);
    uint64_t v81 = v4 + v78;
    int16x8_t v82 = 0uLL;
    int16x8_t v83 = 0uLL;
    int16x8_t v84 = 0uLL;
    int16x8_t v85 = 0uLL;
    int16x8_t v86 = 0uLL;
    int16x8_t v87 = 0uLL;
    do
    {
      uint8x16_t v88 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v81 - 2), v12);
      uint8x16_t v89 = (uint8x16_t)vandq_s8(*(int8x16_t *)v81, v12);
      uint8x16_t v90 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v81 + 2), v12);
      uint8x16_t v91 = (uint8x16_t)vandq_s8(*v80, v12);
      int8x16_t v92 = (int8x16_t)vcgtq_u8(v89, v88);
      int8x16_t v93 = (int8x16_t)vcgtq_u8(v89, v90);
      int8x16_t v94 = (int8x16_t)vcgtq_u8(v88, v89);
      int8x16_t v95 = (int8x16_t)vcgtq_u8(v90, v89);
      int8x16_t v96 = vandq_s8(v95, v94);
      int8x16_t v97 = vandq_s8(v93, v92);
      int8x16_t v98 = veorq_s8(v93, v92);
      int8x16_t v99 = veorq_s8(v95, v94);
      int8x16_t v100 = vbicq_s8(v99, v98);
      int8x16_t v101 = vbicq_s8(v98, v99);
      int16x8_t v77 = (int16x8_t)vsubq_s8((int8x16_t)v77, v96);
      int16x8_t v85 = (int16x8_t)vsubq_s8((int8x16_t)v85, v100);
      int16x8_t v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v101);
      int16x8_t v87 = (int16x8_t)vsubq_s8((int8x16_t)v87, v97);
      int8x16_t v102 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v91.i8, *(uint8x8_t *)v89.i8);
      int8x16_t v103 = (int8x16_t)vsubl_high_u8(v91, v89);
      int16x8_t v79 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v96)), v79), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)));
      int16x8_t v82 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v100)), v82), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v100.i8)));
      int16x8_t v83 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v101)), v83), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v101.i8)));
      int16x8_t v84 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v97)), v84), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)));
      v81 += v16;
      int8x16_t v80 = (int8x16_t *)((char *)v80 + v17);
      --v13;
    }
    while (v13);
  }
  int8x16_t v104 = (int8x16_t)vpaddq_s16(v77, v85);
  int8x16_t v105 = (int8x16_t)vpaddq_s16(v86, v87);
  int8x16_t v106 = (int8x16_t)vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v104, v105), vuzp2q_s8(v104, v105)));
  int8x16_t v107 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp1q_s16(v79, v82), vuzp1q_s16(v83, v84)));
  int8x16_t v108 = (int8x16_t)vpadalq_s16((int32x4_t)v8, vpaddq_s16(vuzp2q_s16(v79, v82), vuzp2q_s16(v83, v84)));
  *(_DWORD *)a2 = v106.i32[0];
  v104.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v106.i8, *(int8x8_t *)v104.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v104.i32[1];
  *(void *)a3 = v107.i64[0];
  int8x16_t result = vextq_s8(v107, v108, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(void *)(a3 + 32) = v108.i64[1];
  return result;
}

int32x4_t sub_1D0D4C998(uint64_t *a1, _DWORD *a2, void *a3, uint64x2_t a4)
{
  int v4 = *((_DWORD *)a1 + 8);
  unsigned int v5 = *((_DWORD *)a1 + 12);
  BOOL v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v5) & 8);
  int32x4_t v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  int8x16_t v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 8))+ ((v5 >> 1) | 0x1FFFFFFE)));
  int8x16_t v11 = (int8x16_t)vshlq_u64(v8, v10);
  int v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = v13 * v6;
  uint64_t v16 = a1[3];
  uint64_t v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 17)
  {
    if (v12 < 1)
    {
      int8x16_t v28 = 0uLL;
      int8x16_t v27 = 0uLL;
      int8x16_t v26 = 0uLL;
      int8x16_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
    }
    else
    {
      int8x16_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      int v23 = v12;
      uint64_t v24 = v14;
      int16x8_t v25 = v17;
      int8x16_t v26 = 0uLL;
      int8x16_t v27 = 0uLL;
      int8x16_t v28 = 0uLL;
      do
      {
        uint8x16_t v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 + v13 * v6 - 1), v9);
        uint8x16_t v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v15), v9);
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 * (v6 - 1) + 1), v9);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*v25, v9);
        int8x16_t v33 = (int8x16_t)vcgtq_u8(v30, v29);
        int8x16_t v34 = (int8x16_t)vcgtq_u8(v30, v31);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v29, v30);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v31, v30);
        int8x16_t v37 = vandq_s8(v36, v35);
        int8x16_t v38 = vandq_s8(v34, v33);
        int8x16_t v39 = veorq_s8(v34, v33);
        int8x16_t v40 = veorq_s8(v36, v35);
        int8x16_t v41 = vbicq_s8(v40, v39);
        int8x16_t v42 = vbicq_s8(v39, v40);
        int8x16_t v21 = vsubq_s8(v21, v37);
        int8x16_t v26 = vsubq_s8(v26, v41);
        int8x16_t v27 = vsubq_s8(v27, v42);
        int8x16_t v28 = vsubq_s8(v28, v38);
        int8x16_t v43 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v30.i8);
        int8x16_t v44 = (int8x16_t)vsubl_high_u8(v32, v30);
        int32x4_t v22 = vpadalq_s16(v22, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v37))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v41)))));
        int32x4_t v7 = vpadalq_s16(v7, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v42))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v38)))));
        int16x8_t v25 = (int8x16_t *)((char *)v25 + v16);
        v24 += v13;
        --v23;
      }
      while (v23);
    }
    uint16x8_t v20 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v21, v26));
    uint16x8_t v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v27, v28));
    int32x4_t v7 = vpaddq_s32(v22, v7);
    unsigned int v18 = 16;
  }
  else
  {
    unsigned int v18 = 0;
    int8x16_t v11 = vandq_s8(v11, v9);
    uint16x8_t v19 = 0uLL;
    uint16x8_t v20 = 0uLL;
  }
  unint64_t v45 = (v4 - 16);
  if ((int)v18 < (int)v45)
  {
    unint64_t v46 = v18;
    uint64_t v47 = v13 * (v6 - 1) + v18 + v14 + 1;
    uint64_t v48 = v13 + v13 * v6 + v18 + v14 - 1;
    uint64_t v49 = v14 + v15 + v18;
    do
    {
      if (v12 < 1)
      {
        int32x4_t v55 = 0uLL;
        int8x16_t v58 = 0uLL;
        int8x16_t v57 = 0uLL;
        int8x16_t v56 = 0uLL;
        int8x16_t v52 = 0uLL;
        int32x4_t v53 = 0uLL;
      }
      else
      {
        uint64_t v50 = 0;
        int16x8_t v51 = (uint8x8_t *)&v17->i8[v46];
        int8x16_t v52 = 0uLL;
        int32x4_t v53 = 0uLL;
        int v54 = v12;
        int32x4_t v55 = 0uLL;
        int8x16_t v56 = 0uLL;
        int8x16_t v57 = 0uLL;
        int8x16_t v58 = 0uLL;
        do
        {
          uint8x16_t v59 = *(uint8x16_t *)(v49 + v50);
          uint8x16_t v60 = *(uint8x16_t *)(v48 + v50);
          uint8x16_t v61 = *(uint8x16_t *)(v47 + v50);
          int8x16_t v62 = (int8x16_t)vcgtq_u8(v59, v60);
          int8x16_t v63 = (int8x16_t)vcgtq_u8(v59, v61);
          int8x16_t v64 = (int8x16_t)vcgtq_u8(v60, v59);
          int8x16_t v65 = (int8x16_t)vcgtq_u8(v61, v59);
          int8x16_t v66 = vandq_s8(v65, v64);
          int8x16_t v67 = vandq_s8(v63, v62);
          int8x16_t v68 = veorq_s8(v63, v62);
          int8x16_t v69 = veorq_s8(v65, v64);
          int8x16_t v70 = vbicq_s8(v69, v68);
          int8x16_t v71 = vbicq_s8(v68, v69);
          int8x16_t v52 = vsubq_s8(v52, v66);
          int8x16_t v56 = vsubq_s8(v56, v70);
          int8x16_t v57 = vsubq_s8(v57, v71);
          int8x16_t v58 = vsubq_s8(v58, v67);
          int8x16_t v72 = (int8x16_t)vsubl_u8(*v51, *(uint8x8_t *)v59.i8);
          int8x16_t v73 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, v59);
          int32x4_t v53 = vpadalq_s16(v53, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
          int32x4_t v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
          int16x8_t v51 = (uint8x8_t *)((char *)v51 + v16);
          v50 += v13;
          --v54;
        }
        while (v54);
      }
      uint16x8_t v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v52, v56));
      uint16x8_t v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v57, v58));
      v46 += 16;
      int32x4_t v7 = vaddq_s32(vpaddq_s32(v53, v55), v7);
      v47 += 16;
      v48 += 16;
      v49 += 16;
    }
    while (v46 < v45);
    unsigned int v18 = v46;
  }
  if (v12 < 1)
  {
    int32x4_t v80 = 0uLL;
    int8x16_t v83 = 0uLL;
    int8x16_t v82 = 0uLL;
    int8x16_t v81 = 0uLL;
    int8x16_t v78 = 0uLL;
    int32x4_t v79 = 0uLL;
  }
  else
  {
    int8x16_t v74 = (int8x16_t *)((char *)v17 + v18);
    uint64_t v75 = v13 * (v6 - 1) + 1;
    uint64_t v76 = v14 + v18;
    uint64_t v77 = v13 + v13 * v6 - 1;
    int8x16_t v78 = 0uLL;
    int32x4_t v79 = 0uLL;
    int32x4_t v80 = 0uLL;
    int8x16_t v81 = 0uLL;
    int8x16_t v82 = 0uLL;
    int8x16_t v83 = 0uLL;
    do
    {
      uint8x16_t v84 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v77), v11);
      uint8x16_t v85 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v15), v11);
      uint8x16_t v86 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v75), v11);
      uint8x16_t v87 = (uint8x16_t)vandq_s8(*v74, v11);
      int8x16_t v88 = (int8x16_t)vcgtq_u8(v85, v84);
      int8x16_t v89 = (int8x16_t)vcgtq_u8(v85, v86);
      int8x16_t v90 = (int8x16_t)vcgtq_u8(v84, v85);
      int8x16_t v91 = (int8x16_t)vcgtq_u8(v86, v85);
      int8x16_t v92 = vandq_s8(v91, v90);
      int8x16_t v93 = vandq_s8(v89, v88);
      int8x16_t v94 = veorq_s8(v89, v88);
      int8x16_t v95 = veorq_s8(v91, v90);
      int8x16_t v96 = vbicq_s8(v95, v94);
      int8x16_t v97 = vbicq_s8(v94, v95);
      int8x16_t v78 = vsubq_s8(v78, v92);
      int8x16_t v81 = vsubq_s8(v81, v96);
      int8x16_t v82 = vsubq_s8(v82, v97);
      int8x16_t v83 = vsubq_s8(v83, v93);
      int8x16_t v98 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v85.i8);
      int8x16_t v99 = (int8x16_t)vsubl_high_u8(v87, v85);
      int32x4_t v79 = vpadalq_s16(v79, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v92.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v92))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v96)))));
      int32x4_t v80 = vpadalq_s16(v80, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v97))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v93.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v93)))));
      int8x16_t v74 = (int8x16_t *)((char *)v74 + v16);
      v76 += v13;
      --v12;
    }
    while (v12);
  }
  int32x4_t result = vaddq_s32(vpaddq_s32(v79, v80), v7);
  int16x8_t v101 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v78, v81)), (int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v82, v83)));
  v101.i64[0] = vpaddq_s16(v101, v101).u64[0];
  *a2 = v101.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v101.i32[1];
  *a3 = result.i64[0];
  *(void *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1D0D4CE64(uint64_t *a1, _DWORD *a2, void *a3, uint64x2_t a4)
{
  int v4 = *((_DWORD *)a1 + 8);
  unsigned int v5 = *((_DWORD *)a1 + 12);
  BOOL v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v5) & 8);
  int32x4_t v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  int8x16_t v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 8))+ ((v5 >> 1) | 0x1FFFFFFE)));
  int8x16_t v11 = (int8x16_t)vshlq_u64(v8, v10);
  int v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = v13 * v6;
  uint64_t v16 = a1[3];
  uint64_t v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 17)
  {
    if (v12 < 1)
    {
      int8x16_t v28 = 0uLL;
      int8x16_t v27 = 0uLL;
      int8x16_t v26 = 0uLL;
      int8x16_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
    }
    else
    {
      int8x16_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      int v23 = v12;
      uint64_t v24 = v14;
      int16x8_t v25 = v17;
      int8x16_t v26 = 0uLL;
      int8x16_t v27 = 0uLL;
      int8x16_t v28 = 0uLL;
      do
      {
        uint8x16_t v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 * (v6 - 1) - 1), v9);
        uint8x16_t v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v15), v9);
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 + v13 * v6 + 1), v9);
        uint8x16_t v32 = (uint8x16_t)vandq_s8(*v25, v9);
        int8x16_t v33 = (int8x16_t)vcgtq_u8(v30, v29);
        int8x16_t v34 = (int8x16_t)vcgtq_u8(v30, v31);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v29, v30);
        int8x16_t v36 = (int8x16_t)vcgtq_u8(v31, v30);
        int8x16_t v37 = vandq_s8(v36, v35);
        int8x16_t v38 = vandq_s8(v34, v33);
        int8x16_t v39 = veorq_s8(v34, v33);
        int8x16_t v40 = veorq_s8(v36, v35);
        int8x16_t v41 = vbicq_s8(v40, v39);
        int8x16_t v42 = vbicq_s8(v39, v40);
        int8x16_t v21 = vsubq_s8(v21, v37);
        int8x16_t v26 = vsubq_s8(v26, v41);
        int8x16_t v27 = vsubq_s8(v27, v42);
        int8x16_t v28 = vsubq_s8(v28, v38);
        int8x16_t v43 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v30.i8);
        int8x16_t v44 = (int8x16_t)vsubl_high_u8(v32, v30);
        int32x4_t v22 = vpadalq_s16(v22, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v37))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v41)))));
        int32x4_t v7 = vpadalq_s16(v7, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v42))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v38)))));
        int16x8_t v25 = (int8x16_t *)((char *)v25 + v16);
        v24 += v13;
        --v23;
      }
      while (v23);
    }
    uint16x8_t v20 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v21, v26));
    uint16x8_t v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v27, v28));
    int32x4_t v7 = vpaddq_s32(v22, v7);
    unsigned int v18 = 16;
  }
  else
  {
    unsigned int v18 = 0;
    int8x16_t v11 = vandq_s8(v11, v9);
    uint16x8_t v19 = 0uLL;
    uint16x8_t v20 = 0uLL;
  }
  unint64_t v45 = (v4 - 16);
  if ((int)v18 < (int)v45)
  {
    unint64_t v46 = v18;
    uint64_t v47 = v13 + v13 * v6 + v18 + v14 + 1;
    uint64_t v48 = v13 * (v6 - 1) + v18 + v14 - 1;
    uint64_t v49 = v14 + v15 + v18;
    do
    {
      if (v12 < 1)
      {
        int32x4_t v55 = 0uLL;
        int8x16_t v58 = 0uLL;
        int8x16_t v57 = 0uLL;
        int8x16_t v56 = 0uLL;
        int8x16_t v52 = 0uLL;
        int32x4_t v53 = 0uLL;
      }
      else
      {
        uint64_t v50 = 0;
        int16x8_t v51 = (uint8x8_t *)&v17->i8[v46];
        int8x16_t v52 = 0uLL;
        int32x4_t v53 = 0uLL;
        int v54 = v12;
        int32x4_t v55 = 0uLL;
        int8x16_t v56 = 0uLL;
        int8x16_t v57 = 0uLL;
        int8x16_t v58 = 0uLL;
        do
        {
          uint8x16_t v59 = *(uint8x16_t *)(v49 + v50);
          uint8x16_t v60 = *(uint8x16_t *)(v48 + v50);
          uint8x16_t v61 = *(uint8x16_t *)(v47 + v50);
          int8x16_t v62 = (int8x16_t)vcgtq_u8(v59, v60);
          int8x16_t v63 = (int8x16_t)vcgtq_u8(v59, v61);
          int8x16_t v64 = (int8x16_t)vcgtq_u8(v60, v59);
          int8x16_t v65 = (int8x16_t)vcgtq_u8(v61, v59);
          int8x16_t v66 = vandq_s8(v65, v64);
          int8x16_t v67 = vandq_s8(v63, v62);
          int8x16_t v68 = veorq_s8(v63, v62);
          int8x16_t v69 = veorq_s8(v65, v64);
          int8x16_t v70 = vbicq_s8(v69, v68);
          int8x16_t v71 = vbicq_s8(v68, v69);
          int8x16_t v52 = vsubq_s8(v52, v66);
          int8x16_t v56 = vsubq_s8(v56, v70);
          int8x16_t v57 = vsubq_s8(v57, v71);
          int8x16_t v58 = vsubq_s8(v58, v67);
          int8x16_t v72 = (int8x16_t)vsubl_u8(*v51, *(uint8x8_t *)v59.i8);
          int8x16_t v73 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, v59);
          int32x4_t v53 = vpadalq_s16(v53, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
          int32x4_t v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
          int16x8_t v51 = (uint8x8_t *)((char *)v51 + v16);
          v50 += v13;
          --v54;
        }
        while (v54);
      }
      uint16x8_t v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v52, v56));
      uint16x8_t v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v57, v58));
      v46 += 16;
      int32x4_t v7 = vaddq_s32(vpaddq_s32(v53, v55), v7);
      v47 += 16;
      v48 += 16;
      v49 += 16;
    }
    while (v46 < v45);
    unsigned int v18 = v46;
  }
  if (v12 < 1)
  {
    int32x4_t v80 = 0uLL;
    int8x16_t v83 = 0uLL;
    int8x16_t v82 = 0uLL;
    int8x16_t v81 = 0uLL;
    int8x16_t v78 = 0uLL;
    int32x4_t v79 = 0uLL;
  }
  else
  {
    int8x16_t v74 = (int8x16_t *)((char *)v17 + v18);
    uint64_t v75 = v13 + v13 * v6 + 1;
    uint64_t v76 = v14 + v18;
    uint64_t v77 = v13 * (v6 - 1) - 1;
    int8x16_t v78 = 0uLL;
    int32x4_t v79 = 0uLL;
    int32x4_t v80 = 0uLL;
    int8x16_t v81 = 0uLL;
    int8x16_t v82 = 0uLL;
    int8x16_t v83 = 0uLL;
    do
    {
      uint8x16_t v84 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v77), v11);
      uint8x16_t v85 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v15), v11);
      uint8x16_t v86 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v75), v11);
      uint8x16_t v87 = (uint8x16_t)vandq_s8(*v74, v11);
      int8x16_t v88 = (int8x16_t)vcgtq_u8(v85, v84);
      int8x16_t v89 = (int8x16_t)vcgtq_u8(v85, v86);
      int8x16_t v90 = (int8x16_t)vcgtq_u8(v84, v85);
      int8x16_t v91 = (int8x16_t)vcgtq_u8(v86, v85);
      int8x16_t v92 = vandq_s8(v91, v90);
      int8x16_t v93 = vandq_s8(v89, v88);
      int8x16_t v94 = veorq_s8(v89, v88);
      int8x16_t v95 = veorq_s8(v91, v90);
      int8x16_t v96 = vbicq_s8(v95, v94);
      int8x16_t v97 = vbicq_s8(v94, v95);
      int8x16_t v78 = vsubq_s8(v78, v92);
      int8x16_t v81 = vsubq_s8(v81, v96);
      int8x16_t v82 = vsubq_s8(v82, v97);
      int8x16_t v83 = vsubq_s8(v83, v93);
      int8x16_t v98 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v85.i8);
      int8x16_t v99 = (int8x16_t)vsubl_high_u8(v87, v85);
      int32x4_t v79 = vpadalq_s16(v79, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v92.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v92))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v96)))));
      int32x4_t v80 = vpadalq_s16(v80, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v97))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v93.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v93)))));
      int8x16_t v74 = (int8x16_t *)((char *)v74 + v16);
      v76 += v13;
      --v12;
    }
    while (v12);
  }
  int32x4_t result = vaddq_s32(vpaddq_s32(v79, v80), v7);
  int16x8_t v101 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v78, v81)), (int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v82, v83)));
  v101.i64[0] = vpaddq_s16(v101, v101).u64[0];
  *a2 = v101.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v101.i32[1];
  *a3 = result.i64[0];
  *(void *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1D0D4D330(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 11);
  unsigned int v4 = *((_DWORD *)a1 + 12);
  uint64_t v5 = ~(v4 >> 2) & 1;
  unsigned int v6 = (v4 >> 3) | 0xFFFFFFFE;
  if (v3) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  int v8 = *((_DWORD *)a1 + 8);
  v9.i64[0] = 0;
  int v10 = v6 + *((_DWORD *)a1 + 9) + v7 - v3 - v5 + 1;
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = *a1 + v11 * v5;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[2] + v14 * v5;
  uint64_t v16 = v11 + v11 * v5;
  unint64_t v17 = 0;
  if (v8 <= 16)
  {
    int32x4_t v19 = 0uLL;
    uint16x8_t v21 = 0uLL;
    uint16x8_t v20 = 0uLL;
  }
  else
  {
    unsigned int v18 = (uint8x16_t *)(v12 + v16);
    int32x4_t v19 = 0uLL;
    uint16x8_t v20 = 0uLL;
    uint16x8_t v21 = 0uLL;
    do
    {
      int8x16_t v22 = 0uLL;
      int8x16_t v23 = 0uLL;
      int8x16_t v24 = 0uLL;
      int8x16_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      if (v10 >= 1)
      {
        int v28 = 0;
        uint8x16_t v29 = *(uint8x16_t *)(v13 + v17);
        uint8x16_t v30 = *(uint8x16_t *)(v13 + v17 - v11);
        uint8x16_t v31 = (uint8x8_t *)(v15 + v17);
        uint8x16_t v32 = v18;
        do
        {
          uint8x16_t v33 = *v32;
          int8x16_t v34 = (int8x16_t)vcgtq_u8(v29, v30);
          int8x16_t v35 = (int8x16_t)vcgtq_u8(v29, *v32);
          int8x16_t v36 = (int8x16_t)vcgtq_u8(v30, v29);
          int8x16_t v37 = (int8x16_t)vcgtq_u8(*v32, v29);
          int8x16_t v38 = vandq_s8(v37, v36);
          int8x16_t v39 = vandq_s8(v35, v34);
          int8x16_t v40 = veorq_s8(v35, v34);
          int8x16_t v41 = veorq_s8(v37, v36);
          int8x16_t v42 = vbicq_s8(v41, v40);
          int8x16_t v43 = vbicq_s8(v40, v41);
          int8x16_t v25 = vsubq_s8(v25, v38);
          int8x16_t v24 = vsubq_s8(v24, v42);
          int8x16_t v23 = vsubq_s8(v23, v43);
          int8x16_t v22 = vsubq_s8(v22, v39);
          int8x16_t v44 = (int8x16_t)vsubl_u8(*v31, *(uint8x8_t *)v29.i8);
          int8x16_t v45 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v31->i8, v29);
          int32x4_t v27 = vpadalq_s16(v27, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v38))), vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v42)))));
          uint8x16_t v31 = (uint8x8_t *)((char *)v31 + v14);
          ++v28;
          int32x4_t v26 = vpadalq_s16(v26, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v43))), vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v39)))));
          uint8x16_t v32 = (uint8x16_t *)((char *)v32 + v11);
          uint8x16_t v30 = v29;
          uint8x16_t v29 = v33;
        }
        while (v28 < v10);
      }
      uint16x8_t v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v25, v24));
      uint16x8_t v21 = vpadalq_u8(v21, (uint8x16_t)vpaddq_s8(v23, v22));
      int32x4_t v19 = vaddq_s32(vpaddq_s32(v27, v26), v19);
      v17 += 16;
      ++v18;
    }
    while (v17 < (v8 - 16));
    unint64_t v17 = (v8 - 1) & 0xFFFFFFF0;
  }
  if (v10 < 1)
  {
    int32x4_t v56 = 0uLL;
    int8x16_t v59 = 0uLL;
    int8x16_t v58 = 0uLL;
    int8x16_t v57 = 0uLL;
    int8x16_t v54 = 0uLL;
    int32x4_t v55 = 0uLL;
  }
  else
  {
    int v46 = 0;
    v9.u64[1] = (unint64_t)vdup_n_s32(-8 * ((a1[4] & 8u) + *((_DWORD *)a1 + 10)));
    v47.i64[0] = -1;
    v47.i64[1] = -1;
    int8x16_t v48 = (int8x16_t)vshlq_u64(v47, v9);
    uint64_t v49 = (int8x16_t *)(v13 + v17);
    uint8x16_t v50 = (uint8x16_t)vandq_s8(*v49, v48);
    uint8x16_t v51 = (uint8x16_t)vandq_s8(*(int8x16_t *)((char *)v49 - v11), v48);
    int8x16_t v52 = (int8x16_t *)(v15 + v17);
    int32x4_t v53 = (int8x16_t *)(v12 + v17 + v16);
    int8x16_t v54 = 0uLL;
    int32x4_t v55 = 0uLL;
    int32x4_t v56 = 0uLL;
    int8x16_t v57 = 0uLL;
    int8x16_t v58 = 0uLL;
    int8x16_t v59 = 0uLL;
    do
    {
      uint8x16_t v60 = (uint8x16_t)vandq_s8(*v53, v48);
      uint8x16_t v61 = (uint8x16_t)vandq_s8(*v52, v48);
      int8x16_t v62 = (int8x16_t)vcgtq_u8(v50, v51);
      int8x16_t v63 = (int8x16_t)vcgtq_u8(v50, v60);
      int8x16_t v64 = (int8x16_t)vcgtq_u8(v51, v50);
      int8x16_t v65 = (int8x16_t)vcgtq_u8(v60, v50);
      int8x16_t v66 = vandq_s8(v65, v64);
      int8x16_t v67 = vandq_s8(v63, v62);
      int8x16_t v68 = veorq_s8(v63, v62);
      int8x16_t v69 = veorq_s8(v65, v64);
      int8x16_t v70 = vbicq_s8(v69, v68);
      int8x16_t v71 = vbicq_s8(v68, v69);
      int8x16_t v54 = vsubq_s8(v54, v66);
      int8x16_t v57 = vsubq_s8(v57, v70);
      int8x16_t v58 = vsubq_s8(v58, v71);
      int8x16_t v59 = vsubq_s8(v59, v67);
      int8x16_t v72 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v61.i8, *(uint8x8_t *)v50.i8);
      int8x16_t v73 = (int8x16_t)vsubl_high_u8(v61, v50);
      int32x4_t v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
      int8x16_t v52 = (int8x16_t *)((char *)v52 + v14);
      ++v46;
      int32x4_t v56 = vpadalq_s16(v56, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
      int32x4_t v53 = (int8x16_t *)((char *)v53 + v11);
      uint8x16_t v51 = v50;
      uint8x16_t v50 = v60;
    }
    while (v46 < v10);
  }
  int32x4_t result = vaddq_s32(vpaddq_s32(v55, v56), v19);
  int16x8_t v75 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v54, v57)), (int16x8_t)vpadalq_u8(v21, (uint8x16_t)vpaddq_s8(v58, v59)));
  v75.i64[0] = vpaddq_s16(v75, v75).u64[0];
  *a2 = v75.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v75.i32[1];
  *a3 = result.i64[0];
  *(void *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1D0D4D664(uint64_t *a1, _DWORD *a2, void *a3, uint64x2_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  int v6 = *((_DWORD *)a1 + 8);
  unsigned int v7 = *((_DWORD *)a1 + 12);
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v7) & 8);
  int32x4_t v8 = 0uLL;
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  int8x16_t v10 = (int8x16_t)vshlq_u64(v9, a4);
  v11.i64[0] = 0;
  v11.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v6 & 8))+ ((v7 >> 1) | 0x1FFFFFFE)));
  int8x16_t v12 = (int8x16_t)vshlq_u64(v9, v11);
  int v13 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
  unint64_t v14 = (v6 - 16);
  if (v6 > 16)
  {
    uint64_t v16 = a1[1];
    uint64_t v17 = a1[3];
    if (v13 < 1)
    {
      int8x16_t v27 = 0uLL;
      int8x16_t v26 = 0uLL;
      int8x16_t v25 = 0uLL;
      int8x16_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
    }
    else
    {
      int8x16_t v20 = 0uLL;
      int32x4_t v21 = 0uLL;
      int v22 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
      uint64_t v23 = *a1;
      int8x16_t v24 = (int8x16_t *)a1[2];
      int8x16_t v25 = 0uLL;
      int8x16_t v26 = 0uLL;
      int8x16_t v27 = 0uLL;
      do
      {
        uint8x16_t v28 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v23 - 1), v10);
        uint8x16_t v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)v23, v10);
        uint8x16_t v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v23 + 1), v10);
        uint8x16_t v31 = (uint8x16_t)vandq_s8(*v24, v10);
        int8x16_t v32 = (int8x16_t)vcgtq_u8(v29, v28);
        int8x16_t v33 = (int8x16_t)vcgtq_u8(v29, v30);
        int8x16_t v34 = (int8x16_t)vcgtq_u8(v28, v29);
        int8x16_t v35 = (int8x16_t)vcgtq_u8(v30, v29);
        int8x16_t v36 = vandq_s8(v35, v34);
        int8x16_t v37 = vandq_s8(v33, v32);
        int8x16_t v38 = veorq_s8(v33, v32);
        int8x16_t v39 = veorq_s8(v35, v34);
        int8x16_t v40 = vbicq_s8(v39, v38);
        int8x16_t v41 = vbicq_s8(v38, v39);
        int8x16_t v20 = vsubq_s8(v20, v36);
        int8x16_t v25 = vsubq_s8(v25, v40);
        int8x16_t v26 = vsubq_s8(v26, v41);
        int8x16_t v27 = vsubq_s8(v27, v37);
        int8x16_t v42 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v29.i8);
        int8x16_t v43 = (int8x16_t)vsubl_high_u8(v31, v29);
        int32x4_t v21 = vpadalq_s16(v21, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v36.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v36))), vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v40)))));
        int32x4_t v8 = vpadalq_s16(v8, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v41))), vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v37)))));
        v23 += v16;
        int8x16_t v24 = (int8x16_t *)((char *)v24 + v17);
        --v22;
      }
      while (v22);
    }
    uint16x8_t v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v20, v25));
    uint16x8_t v18 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v26, v27));
    int32x4_t v8 = vpaddq_s32(v21, v8);
    LODWORD(v15) = 16;
  }
  else
  {
    LODWORD(v15) = 0;
    int8x16_t v12 = vandq_s8(v12, v10);
    uint64_t v16 = a1[1];
    uint64_t v17 = a1[3];
    uint16x8_t v18 = 0uLL;
    uint16x8_t v19 = 0uLL;
  }
  if ((int)v15 < (int)v14)
  {
    unint64_t v15 = v15;
    do
    {
      if (v13 < 1)
      {
        int32x4_t v49 = 0uLL;
        int8x16_t v52 = 0uLL;
        int8x16_t v51 = 0uLL;
        int8x16_t v50 = 0uLL;
        int8x16_t v46 = 0uLL;
        int32x4_t v47 = 0uLL;
      }
      else
      {
        int8x16_t v44 = (uint8x8_t *)(v5 + v15);
        uint64_t v45 = v4 + v15;
        int8x16_t v46 = 0uLL;
        int32x4_t v47 = 0uLL;
        int v48 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
        int32x4_t v49 = 0uLL;
        int8x16_t v50 = 0uLL;
        int8x16_t v51 = 0uLL;
        int8x16_t v52 = 0uLL;
        do
        {
          uint8x16_t v53 = *(uint8x16_t *)(v45 - 1);
          uint8x16_t v54 = *(uint8x16_t *)(v45 + 1);
          int8x16_t v55 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v45, v53);
          int8x16_t v56 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v45, v54);
          int8x16_t v57 = (int8x16_t)vcgtq_u8(v53, *(uint8x16_t *)v45);
          int8x16_t v58 = (int8x16_t)vcgtq_u8(v54, *(uint8x16_t *)v45);
          int8x16_t v59 = vandq_s8(v58, v57);
          int8x16_t v60 = vandq_s8(v56, v55);
          int8x16_t v61 = veorq_s8(v56, v55);
          int8x16_t v62 = veorq_s8(v58, v57);
          int8x16_t v63 = vbicq_s8(v62, v61);
          int8x16_t v64 = vbicq_s8(v61, v62);
          int8x16_t v46 = vsubq_s8(v46, v59);
          int8x16_t v50 = vsubq_s8(v50, v63);
          int8x16_t v51 = vsubq_s8(v51, v64);
          int8x16_t v52 = vsubq_s8(v52, v60);
          int8x16_t v65 = (int8x16_t)vsubl_u8(*v44, *(uint8x8_t *)v45);
          int8x16_t v66 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v44->i8, *(uint8x16_t *)v45);
          int32x4_t v47 = vpadalq_s16(v47, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v59.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v59))), vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v63.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v63)))));
          int32x4_t v49 = vpadalq_s16(v49, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v64.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v64))), vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v60.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v60)))));
          v45 += v16;
          int8x16_t v44 = (uint8x8_t *)((char *)v44 + v17);
          --v48;
        }
        while (v48);
      }
      uint16x8_t v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v46, v50));
      uint16x8_t v18 = vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(v51, v52));
      int32x4_t v8 = vaddq_s32(vpaddq_s32(v47, v49), v8);
      v15 += 16;
    }
    while (v15 < v14);
  }
  if (v13 < 1)
  {
    int32x4_t v70 = 0uLL;
    int8x16_t v73 = 0uLL;
    int8x16_t v72 = 0uLL;
    int8x16_t v71 = 0uLL;
    int8x16_t v68 = 0uLL;
    int32x4_t v69 = 0uLL;
  }
  else
  {
    int8x16_t v67 = (int8x16_t *)(v5 + v15);
    int8x16_t v68 = 0uLL;
    int32x4_t v69 = 0uLL;
    int32x4_t v70 = 0uLL;
    int8x16_t v71 = 0uLL;
    int8x16_t v72 = 0uLL;
    int8x16_t v73 = 0uLL;
    uint64_t v74 = v4 + v15;
    do
    {
      uint8x16_t v75 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v74 - 1), v12);
      uint8x16_t v76 = (uint8x16_t)vandq_s8(*(int8x16_t *)v74, v12);
      uint8x16_t v77 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v74 + 1), v12);
      uint8x16_t v78 = (uint8x16_t)vandq_s8(*v67, v12);
      int8x16_t v79 = (int8x16_t)vcgtq_u8(v76, v75);
      int8x16_t v80 = (int8x16_t)vcgtq_u8(v76, v77);
      int8x16_t v81 = (int8x16_t)vcgtq_u8(v75, v76);
      int8x16_t v82 = (int8x16_t)vcgtq_u8(v77, v76);
      int8x16_t v83 = vandq_s8(v82, v81);
      int8x16_t v84 = vandq_s8(v80, v79);
      int8x16_t v85 = veorq_s8(v80, v79);
      int8x16_t v86 = veorq_s8(v82, v81);
      int8x16_t v87 = vbicq_s8(v86, v85);
      int8x16_t v88 = vbicq_s8(v85, v86);
      int8x16_t v68 = vsubq_s8(v68, v83);
      int8x16_t v71 = vsubq_s8(v71, v87);
      int8x16_t v72 = vsubq_s8(v72, v88);
      int8x16_t v73 = vsubq_s8(v73, v84);
      int8x16_t v89 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v78.i8, *(uint8x8_t *)v76.i8);
      int8x16_t v90 = (int8x16_t)vsubl_high_u8(v78, v76);
      int32x4_t v69 = vpadalq_s16(v69, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v83.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v83))), vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v87.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v87)))));
      int32x4_t v70 = vpadalq_s16(v70, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v88.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v88))), vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v84.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v84)))));
      v74 += v16;
      int8x16_t v67 = (int8x16_t *)((char *)v67 + v17);
      --v13;
    }
    while (v13);
  }
  int32x4_t result = vaddq_s32(vpaddq_s32(v69, v70), v8);
  int16x8_t v92 = vpaddq_s16((int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v68, v71)), (int16x8_t)vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(v72, v73)));
  v92.i64[0] = vpaddq_s16(v92, v92).u64[0];
  *a2 = v92.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v92.i32[1];
  *a3 = result.i64[0];
  *(void *)((char *)a3 + 12) = result.i64[1];
  return result;
}

void sub_1D0D4DAA4(void *a1)
{
  sub_1D0D4DAD0(a1);
  JUMPOUT(0x1D25F0220);
}

void *sub_1D0D4DAD0(void *a1)
{
  *a1 = &unk_1F26F1508;
  unint64_t v2 = (void *)a1[672];
  if (v2)
  {
    int v3 = (void *)a1[673];
    uint64_t v4 = (void *)a1[672];
    if (v3 != v2)
    {
      do
        sub_1D0D4DC38(--v3, 0);
      while (v3 != v2);
      uint64_t v4 = (void *)a1[672];
    }
    a1[673] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[669];
  if (v5)
  {
    uint64_t v6 = a1[670];
    unsigned int v7 = (void *)a1[669];
    if (v6 != v5)
    {
      uint64_t v8 = a1[670];
      do
      {
        int8x16_t v10 = *(void **)(v8 - 64);
        v8 -= 64;
        uint64x2_t v9 = v10;
        if (v10)
        {
          *(void *)(v6 - 56) = v9;
          operator delete(v9);
        }
        uint64_t v6 = v8;
      }
      while (v8 != v5);
      unsigned int v7 = (void *)a1[669];
    }
    a1[670] = v5;
    operator delete(v7);
  }
  uint64x2_t v11 = (void *)a1[666];
  if (v11)
  {
    a1[667] = v11;
    operator delete(v11);
  }
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    int v13 = (void *)a1[i + 652];
    if (v13)
    {
      a1[i + 653] = v13;
      operator delete(v13);
    }
  }
  sub_1D0C9148C((uint64_t)(a1 + 600));
  unint64_t v14 = (void *)a1[589];
  if (v14)
  {
    a1[590] = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)a1[519];
  if (v15)
  {
    a1[520] = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)a1[516];
  if (v16)
  {
    a1[517] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[513];
  if (v17)
  {
    a1[514] = v17;
    operator delete(v17);
  }
  uint16x8_t v18 = (void *)a1[450];
  a1[450] = 0;
  if (v18) {
    free(v18);
  }
  return sub_1D0C93C24(a1);
}

void *sub_1D0D4DC38(void *result, uint64_t a2)
{
  unint64_t v2 = (void *)*result;
  *int32x4_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2[3130];
    v2[3130] = 0;
    if (v3) {
      MEMORY[0x1D25F01F0](v3, 0x1000C8077774924);
    }
    uint64_t v4 = (void *)v2[3127];
    if (v4)
    {
      v2[3128] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v2[3124];
    if (v5)
    {
      v2[3125] = v5;
      operator delete(v5);
    }
    uint64_t v6 = v2[3121];
    if (v6)
    {
      uint64_t v7 = v2[3122];
      uint64_t v8 = (void *)v2[3121];
      if (v7 != v6)
      {
        do
        {
          *(_OWORD *)(v7 - 96) = 0uLL;
          *(_OWORD *)(v7 - 80) = 0uLL;
          *(_OWORD *)(v7 - 112) = 0uLL;
          v7 -= 120;
        }
        while (v7 != v6);
        uint64_t v8 = (void *)v2[3121];
      }
      v2[3122] = v6;
      operator delete(v8);
    }
    uint64x2_t v9 = (void *)v2[3118];
    if (v9)
    {
      v2[3119] = v9;
      operator delete(v9);
    }
    int8x16_t v10 = (void *)v2[3115];
    if (v10)
    {
      v2[3116] = v10;
      operator delete(v10);
    }
    uint64_t v11 = v2[3112];
    if (v11)
    {
      uint64_t v12 = v2[3113];
      int v13 = (void *)v2[3112];
      if (v12 != v11)
      {
        do
        {
          *(_OWORD *)(v12 - 88) = 0uLL;
          *(_OWORD *)(v12 - 104) = 0uLL;
          *(_OWORD *)(v12 - 120) = 0uLL;
          *(_OWORD *)(v12 - 136) = 0uLL;
          *(_OWORD *)(v12 - 152) = 0uLL;
          v12 -= 240;
        }
        while (v12 != v11);
        int v13 = (void *)v2[3112];
      }
      v2[3113] = v11;
      operator delete(v13);
    }
    unint64_t v14 = (void *)v2[3101];
    v2[3101] = 0;
    if (v14) {
      free(v14);
    }
    uint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = (void *)v2[v15 + 1820];
      if (v16)
      {
        v2[v15 + 1821] = v16;
        operator delete(v16);
      }
      v15 -= 3;
      if (v15 == -6)
      {
        uint64_t v17 = (void *)v2[1814];
        if (v17)
        {
          v2[1815] = v17;
          operator delete(v17);
        }
        uint16x8_t v18 = (void *)v2[148];
        if (v18)
        {
          v2[149] = v18;
          operator delete(v18);
        }
        uint16x8_t v19 = (void *)v2[145];
        if (v19)
        {
          v2[146] = v19;
          operator delete(v19);
        }
        int8x16_t v20 = (void *)v2[142];
        if (v20)
        {
          v2[143] = v20;
          operator delete(v20);
        }
        JUMPOUT(0x1D25F0220);
      }
    }
  }
  return result;
}

uint64_t sub_1D0D4DDE8(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = 0;
  uint64_t v12 = result + 1672;
  uint64_t v13 = result + 1928;
  char v14 = 1;
  unint64_t v15 = *(void *)(result + 2208);
  uint64_t v16 = v15 & (1 << a4);
  uint64_t v17 = result + 1928 + 16 * a4;
  do
  {
    char v18 = v14;
    uint64_t v19 = *(void *)(a7 + 8 * v11);
    if (v19 && *(unsigned char *)(v19 + 10) == 1)
    {
      if (*(char *)(v19 + 13) == a4)
      {
        int8x16_t v27 = *(_DWORD **)(a9 + 8 * v11);
        uint64_t v28 = *(unsigned __int8 *)(a11 + 48);
        *(unsigned char *)(a11 + 48) = v28 + 1;
        *(_DWORD *)(a11 + 4 * v28) = *v27;
        goto LABEL_44;
      }
      uint64_t v20 = *(char *)(v19 + 12);
      if (v20 != 15 && *(_DWORD *)(*(void *)v17 + 1024) == *(_DWORD *)(*(void *)(v12 + 16 * v20) + 1024))
      {
        uint64_t v29 = *(unsigned __int8 *)(a11 + 48);
        *(unsigned char *)(a11 + 48) = v29 + 1;
        *(_DWORD *)(a11 + 4 * v29) = *(_DWORD *)(v19 + 4);
        goto LABEL_44;
      }
    }
    char v14 = 0;
    uint64_t v11 = 1;
  }
  while ((v18 & 1) != 0);
  uint64_t v21 = 0;
  char v22 = 1;
  while (1)
  {
    char v23 = v22;
    uint64_t v24 = *(void *)(a7 + 8 * v21);
    if (v24)
    {
      if (*(unsigned char *)(v24 + 10) == 1)
      {
        uint64_t v25 = *(unsigned __int8 *)(v24 + 13);
        if (v25 != 15 && (((v16 != 0) ^ (v15 >> v25)) & 1) == 0)
        {
          uint8x16_t v30 = *(_DWORD **)(a9 + 8 * v21);
          uint64_t v31 = *(unsigned __int8 *)(a11 + 48);
          *(unsigned char *)(a11 + 48) = v31 + 1;
          *(_DWORD *)(a11 + 4 * v31) = *v30;
          int8x16_t v32 = (char *)(*(void *)(a7 + 8 * v21) + 13);
          if (v16) {
            goto LABEL_44;
          }
          goto LABEL_22;
        }
        uint64_t v26 = *(unsigned __int8 *)(v24 + 12);
        if (v26 != 15 && (((v16 != 0) ^ (*(void *)(result + 2200) >> v26)) & 1) == 0) {
          break;
        }
      }
    }
    char v22 = 0;
    uint64_t v21 = 1;
    if ((v23 & 1) == 0) {
      goto LABEL_44;
    }
  }
  uint64_t v33 = *(unsigned __int8 *)(a11 + 48);
  *(unsigned char *)(a11 + 48) = v33 + 1;
  *(_DWORD *)(a11 + 4 * v33) = *(_DWORD *)(v24 + 4);
  int8x16_t v32 = (char *)(*(void *)(a7 + 8 * v21) + 12);
  uint64_t v13 = result + 1672;
  if (v16) {
    goto LABEL_44;
  }
LABEL_22:
  int v34 = *(_DWORD *)(*(void *)(v13 + 16 * *v32) + 1024);
  int v35 = *(_DWORD *)(result + 640);
  int v36 = *(_DWORD *)(*(void *)v17 + 1024);
  int v37 = v35 - v34;
  if (v35 != v34 && v36 != v34)
  {
    int v39 = v35 - v36;
    if (v37 >= 127) {
      int v37 = 127;
    }
    if (v37 <= -128) {
      int v37 = -128;
    }
    if (v39 >= 127) {
      int v39 = 127;
    }
    if (v39 <= -128) {
      int v39 = -128;
    }
    if (v37)
    {
      if (v37 >= 0) {
        unsigned int v40 = v37;
      }
      else {
        unsigned int v40 = -v37;
      }
      int v37 = (__int16)((__int16)((v40 >> 1) + 0x4000) / (__int16)v37);
    }
    signed int v41 = (v37 * v39 + 32) >> 6;
    if (v41 >= 4095) {
      signed int v41 = 4095;
    }
    if (v41 <= -4096) {
      signed int v41 = -4096;
    }
    int8x16_t v42 = (__int16 *)(a11 + 4 * (*(unsigned __int8 *)(a11 + 48) - 1));
    v43.i32[0] = *v42;
    v43.i32[1] = v42[1];
    int32x2_t v44 = vmul_s32(vdup_n_s32(v41), v43);
    int32x2_t v45 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v44), (int32x2_t)0x7F0000007FLL), 8uLL);
    int32x2_t v46 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v44), (int8x8_t)vneg_s32(v45), (int8x8_t)v45), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
    __int16 *v42 = v46.i16[0];
    v42[1] = v46.i16[2];
  }
LABEL_44:
  uint64_t v47 = 0;
  while (1)
  {
    uint64_t v48 = *(void *)(a8 + 8 * v47);
    if (!v48 || *(unsigned char *)(v48 + 10) != 1) {
      goto LABEL_50;
    }
    if (*(char *)(v48 + 13) == a4) {
      break;
    }
    uint64_t v49 = *(char *)(v48 + 12);
    if (v49 != 15 && *(_DWORD *)(*(void *)v17 + 1024) == *(_DWORD *)(*(void *)(v12 + 16 * v49) + 1024))
    {
      unsigned int v50 = *(unsigned __int8 *)(a11 + 48);
      if (!*(unsigned char *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)v48)
      {
        int8x16_t v51 = (_DWORD *)(v48 + 4);
        goto LABEL_58;
      }
      return result;
    }
LABEL_50:
    if (++v47 == 3) {
      return result;
    }
  }
  unsigned int v50 = *(unsigned __int8 *)(a11 + 48);
  if (!*(unsigned char *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)(v48 + 4))
  {
    int8x16_t v51 = *(_DWORD **)(a10 + 8 * v47);
LABEL_58:
    *(unsigned char *)(a11 + 48) = v50 + 1;
    *(_DWORD *)(a11 + 4 * v50) = *v51;
  }
  return result;
}

uint64_t sub_1D0D4E104(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = 0;
  uint64_t v12 = result + 1672;
  uint64_t v13 = result + 1928;
  char v14 = 1;
  unint64_t v15 = *(void *)(result + 2200);
  uint64_t v16 = v15 & (1 << a4);
  uint64_t v17 = result + 1672 + 16 * a4;
  do
  {
    char v18 = v14;
    uint64_t v19 = *(void *)(a7 + 8 * v11);
    if (v19 && *(unsigned char *)(v19 + 10) == 1)
    {
      if (*(char *)(v19 + 12) == a4)
      {
        uint64_t v27 = *(unsigned __int8 *)(a11 + 48);
        *(unsigned char *)(a11 + 48) = v27 + 1;
        *(_DWORD *)(a11 + 4 * v27) = *(_DWORD *)(v19 + 4);
        goto LABEL_44;
      }
      uint64_t v20 = *(char *)(v19 + 13);
      if (v20 != 15 && *(_DWORD *)(*(void *)v17 + 1024) == *(_DWORD *)(*(void *)(v13 + 16 * v20) + 1024))
      {
        uint64_t v28 = *(_DWORD **)(a9 + 8 * v11);
        uint64_t v29 = *(unsigned __int8 *)(a11 + 48);
        *(unsigned char *)(a11 + 48) = v29 + 1;
        *(_DWORD *)(a11 + 4 * v29) = *v28;
        goto LABEL_44;
      }
    }
    char v14 = 0;
    uint64_t v11 = 1;
  }
  while ((v18 & 1) != 0);
  uint64_t v21 = 0;
  char v22 = 1;
  while (1)
  {
    char v23 = v22;
    uint64_t v24 = *(void *)(a7 + 8 * v21);
    if (v24)
    {
      if (*(unsigned char *)(v24 + 10) == 1)
      {
        uint64_t v25 = *(unsigned __int8 *)(v24 + 12);
        if (v25 != 15 && (((v16 != 0) ^ (v15 >> v25)) & 1) == 0)
        {
          uint64_t v30 = *(unsigned __int8 *)(a11 + 48);
          *(unsigned char *)(a11 + 48) = v30 + 1;
          *(_DWORD *)(a11 + 4 * v30) = *(_DWORD *)(v24 + 4);
          uint64_t v31 = (char *)(*(void *)(a7 + 8 * v21) + 12);
          if (v16) {
            goto LABEL_44;
          }
          goto LABEL_22;
        }
        uint64_t v26 = *(unsigned __int8 *)(v24 + 13);
        if (v26 != 15 && (((v16 != 0) ^ (*(void *)(result + 2208) >> v26)) & 1) == 0) {
          break;
        }
      }
    }
    char v22 = 0;
    uint64_t v21 = 1;
    if ((v23 & 1) == 0) {
      goto LABEL_44;
    }
  }
  int8x16_t v32 = *(_DWORD **)(a9 + 8 * v21);
  uint64_t v33 = *(unsigned __int8 *)(a11 + 48);
  *(unsigned char *)(a11 + 48) = v33 + 1;
  *(_DWORD *)(a11 + 4 * v33) = *v32;
  uint64_t v31 = (char *)(*(void *)(a7 + 8 * v21) + 13);
  uint64_t v12 = result + 1928;
  if (v16) {
    goto LABEL_44;
  }
LABEL_22:
  int v34 = *(_DWORD *)(*(void *)(v12 + 16 * *v31) + 1024);
  int v35 = *(_DWORD *)(result + 640);
  int v36 = *(_DWORD *)(*(void *)v17 + 1024);
  int v37 = v35 - v34;
  if (v35 != v34 && v36 != v34)
  {
    int v39 = v35 - v36;
    if (v37 >= 127) {
      int v37 = 127;
    }
    if (v37 <= -128) {
      int v37 = -128;
    }
    if (v39 >= 127) {
      int v39 = 127;
    }
    if (v39 <= -128) {
      int v39 = -128;
    }
    if (v37)
    {
      if (v37 >= 0) {
        unsigned int v40 = v37;
      }
      else {
        unsigned int v40 = -v37;
      }
      int v37 = (__int16)((__int16)((v40 >> 1) + 0x4000) / (__int16)v37);
    }
    signed int v41 = (v37 * v39 + 32) >> 6;
    if (v41 >= 4095) {
      signed int v41 = 4095;
    }
    if (v41 <= -4096) {
      signed int v41 = -4096;
    }
    int8x16_t v42 = (__int16 *)(a11 + 4 * (*(unsigned __int8 *)(a11 + 48) - 1));
    v43.i32[0] = *v42;
    v43.i32[1] = v42[1];
    int32x2_t v44 = vmul_s32(vdup_n_s32(v41), v43);
    int32x2_t v45 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v44), (int32x2_t)0x7F0000007FLL), 8uLL);
    int32x2_t v46 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v44), (int8x8_t)vneg_s32(v45), (int8x8_t)v45), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
    __int16 *v42 = v46.i16[0];
    v42[1] = v46.i16[2];
  }
LABEL_44:
  uint64_t v47 = 0;
  while (1)
  {
    uint64_t v48 = *(void *)(a8 + 8 * v47);
    if (!v48 || *(unsigned char *)(v48 + 10) != 1) {
      goto LABEL_50;
    }
    if (*(char *)(v48 + 12) == a4) {
      break;
    }
    uint64_t v49 = *(char *)(v48 + 13);
    if (v49 != 15 && *(_DWORD *)(*(void *)v17 + 1024) == *(_DWORD *)(*(void *)(v13 + 16 * v49) + 1024))
    {
      unsigned int v50 = *(unsigned __int8 *)(a11 + 48);
      if (!*(unsigned char *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)(v48 + 4))
      {
        int8x16_t v51 = *(_DWORD **)(a10 + 8 * v47);
        goto LABEL_58;
      }
      return result;
    }
LABEL_50:
    if (++v47 == 3) {
      return result;
    }
  }
  unsigned int v50 = *(unsigned __int8 *)(a11 + 48);
  if (!*(unsigned char *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)v48)
  {
    int8x16_t v51 = (_DWORD *)(v48 + 4);
LABEL_58:
    *(unsigned char *)(a11 + 48) = v50 + 1;
    *(_DWORD *)(a11 + 4 * v50) = *v51;
  }
  return result;
}

BOOL sub_1D0D4E420(uint64_t a1, __int16 *a2, __int16 *a3)
{
  if ((*((unsigned __int8 *)a3 + 8) ^ *((unsigned __int8 *)a2 + 8)) > 0xF) {
    return 1;
  }
  int v3 = *a2 - *a3;
  if (v3 < 0) {
    int v3 = *a3 - *a2;
  }
  if (v3 > 3) {
    return 1;
  }
  int v5 = a2[1] - a3[1];
  if (v5 < 0) {
    int v5 = a3[1] - a2[1];
  }
  return v5 > 3;
}

double sub_1D0D4E470(uint64_t a1)
{
  uint64_t v1 = a1 + 4205;
  uint64_t v2 = sub_1D0C64688(a1);
  *(void *)uint64_t v2 = &unk_1F26F1508;
  *(_WORD *)(v2 + 2816) = 0;
  *(unsigned char *)(v2 + 2818) = 1;
  double result = 0.0;
  *(_OWORD *)(v2 + 2824) = 0u;
  *(_OWORD *)(v2 + 2840) = 0u;
  *(_OWORD *)(v2 + 2856) = 0u;
  *(_OWORD *)(v2 + 2872) = 0u;
  *(_OWORD *)(v2 + 2888) = 0u;
  *(_OWORD *)(v2 + 2904) = 0u;
  *(_OWORD *)(v2 + 2920) = 0u;
  *(_OWORD *)(v2 + 2936) = 0u;
  *(_OWORD *)(v2 + 2952) = 0u;
  *(_OWORD *)(v2 + 2968) = 0u;
  *(_OWORD *)(v2 + 2984) = 0u;
  *(_OWORD *)(v2 + 3000) = 0u;
  *(_OWORD *)(v2 + 3016) = 0u;
  *(_OWORD *)(v2 + 3032) = 0u;
  *(_OWORD *)(v2 + 3048) = 0u;
  *(_OWORD *)(v2 + 3064) = 0u;
  *(_OWORD *)(v2 + 3080) = 0u;
  *(_OWORD *)(v2 + 3096) = 0u;
  *(_OWORD *)(v2 + 3112) = 0u;
  *(_OWORD *)(v2 + 3128) = 0u;
  *(_OWORD *)(v2 + 3144) = 0u;
  *(_OWORD *)(v2 + 3160) = 0u;
  *(_OWORD *)(v2 + 3176) = 0u;
  *(_OWORD *)(v2 + 3192) = 0u;
  *(_OWORD *)(v2 + 3208) = 0u;
  *(void *)(v2 + 3600) = 0;
  *(_WORD *)(v2 + 3564) = 256;
  *(void *)(v2 + 3552) = 0;
  *(void *)(v2 + 3544) = 0;
  *(_OWORD *)(v2 + 3568) = 0u;
  *(_OWORD *)(v2 + 3584) = 0u;
  *(_WORD *)uint64_t v1 = 0;
  *(_OWORD *)(v2 + 4104) = 0u;
  *(_OWORD *)(v2 + 4120) = 0u;
  *(_OWORD *)(v2 + 4136) = 0u;
  *(_OWORD *)(v2 + 4152) = 0u;
  *(void *)(v2 + 4168) = 0;
  *(void *)(v2 + 4712) = 0;
  *(void *)(v2 + 4728) = 0;
  *(void *)(v2 + 4720) = 0;
  *(_DWORD *)(v2 + 4700) = 0;
  *(void *)(v2 + 4816) = 0;
  *(void *)(v2 + 4808) = 0;
  *(void *)(v2 + 4824) = 0;
  *(void *)(v2 + 5000) = 850045863;
  *(_OWORD *)(v2 + 5008) = 0u;
  *(_OWORD *)(v2 + 5024) = 0u;
  *(_OWORD *)(v2 + 5040) = 0u;
  *(void *)(v2 + 5056) = 0;
  *(void *)(v2 + 5064) = 1018212795;
  *(_OWORD *)(v2 + 5072) = 0u;
  *(_OWORD *)(v2 + 5088) = 0u;
  *(void *)(v2 + 5104) = 0;
  *(_DWORD *)(v2 + 4996) = 0;
  *(_OWORD *)(v2 + 5192) = 0u;
  *(_OWORD *)(v2 + 5208) = 0u;
  *(_OWORD *)(v2 + 5224) = 0u;
  *(_DWORD *)(v2 + 5412) = 0;
  *(_OWORD *)(v2 + 5320) = 0u;
  *(_OWORD *)(v2 + 5336) = 0u;
  *(_OWORD *)(v2 + 5352) = 0u;
  *(_OWORD *)(v2 + 5368) = 0u;
  *(_OWORD *)(v2 + 5384) = 0u;
  *(unsigned char *)(v1 + 979) = 1;
  *(void *)(v2 + 5272) = sub_1D0D4E420;
  *(void *)(v2 + 5280) = 0;
  *(void *)(v2 + 5288) = sub_1D0D4E104;
  *(void *)(v2 + 5296) = 0;
  *(void *)(v2 + 5304) = sub_1D0D4DDE8;
  *(void *)(v2 + 5312) = 0;
  *(void *)(v2 + 5248) = 0;
  *(_DWORD *)(v2 + 5428) = 0;
  *(unsigned char *)(v1 + 1228) = 0;
  *(_DWORD *)(v2 + 5436) = 0;
  *(void *)(v2 + 5440) = 0;
  *(void *)(v2 + 5448) = -1;
  *(void *)(v2 + 5456) = -1;
  *(unsigned char *)(v1 + 1259) = 0;
  return result;
}

void sub_1D0D4E620(void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = (uint64_t)a1;
  uint64_t v7 = *(void *)(a2 + 576);
  int v8 = *(char *)(v7 + 480);
  uint64_t v9 = *(void *)(a2 + 40);
  char v10 = *(unsigned char *)(v9 + 224);
  uint64_t v166 = *(int *)(v9 + 2124);
  int v11 = v166 * *(_DWORD *)(v9 + 2120);
  int v12 = (v8 + 2 * v11) / (2 * v8);
  int v13 = v12 * a3;
  int v168 = v11;
  if (v8 - 1 <= a3) {
    int v14 = v11 - v12 * a3;
  }
  else {
    int v14 = (v8 + 2 * v11) / (2 * v8);
  }
  char v164 = *(unsigned char *)(a2 + 648);
  a1[665] = a2;
  a1[1] = *(void *)(a2 + 632);
  uint64_t v15 = *(void *)(a2 + 48);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a1[3];
  *(void *)(v6 + 16) = v9;
  *(void *)(v6 + 24) = v15;
  if (v16) {
    sub_1D0C4C984(v16);
  }
  uint64_t v17 = v7 + 360;
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  uint64_t v172 = a2;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v6 + 40);
  *(void *)(v6 + 32) = v18;
  *(void *)(v6 + 40) = v19;
  if (v20) {
    sub_1D0C4C984(v20);
  }
  unsigned int v21 = *(unsigned __int8 *)(*(void *)(v6 + 5320) + 648);
  *(unsigned char *)(v6 + 632) = *(unsigned char *)(*(void *)(v6 + 5320) + 648) == 0;
  *(unsigned char *)(v6 + 637) = v21 == 1;
  *(unsigned char *)(v6 + 633) = v21 < 2;
  *(_DWORD *)(v6 + 640) = *(_DWORD *)(*(void *)(v6 + 8) + 1024);
  int v22 = v14;
  *(_DWORD *)(v6 + 5412) = v13 + v14 - 1;
  *(unsigned char *)(v6 + 652) = 5;
  *(void *)(v6 + 5416) = 0;
  *(void *)(v6 + 4760) = v17;
  char v23 = *(std::__shared_weak_count **)(v6 + 2192);
  *(void *)(v6 + 2184) = 0;
  *(void *)(v6 + 2192) = 0;
  if (v23)
  {
    sub_1D0C4C984(v23);
    uint64_t v17 = *(void *)(v6 + 4760);
  }
  int v24 = 16 << v10;
  *(unsigned char *)(v6 + 659) = 1;
  *(_DWORD *)(v6 + 5424) = 0;
  *(_WORD *)(v6 + 516) = 0;
  if (*(unsigned char *)(v17 + 200))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA6433F0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EA6433F0))
    {
      __cxa_atexit((void (*)(void *))sub_1D0D02DF0, &qword_1EA6433E0, &dword_1D0C3F000);
      __cxa_guard_release(&qword_1EA6433F0);
    }
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EA6433F8, memory_order_acquire) != -1)
    {
      long long v176 = &v174;
      long long v175 = &v176;
      std::__call_once(&qword_1EA6433F8, &v175, (void (__cdecl *)(void *))sub_1D0D02D7C);
    }
    uint64_t v25 = qword_1EA6433E0;
    uint64_t v26 = qword_1EA6433E8;
    if (qword_1EA6433E8)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_1EA6433E8 + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v6 + 4816) = v25;
    uint64_t v27 = *(std::__shared_weak_count **)(v6 + 4824);
    *(void *)(v6 + 4824) = v26;
    if (v27) {
      sub_1D0C4C984(v27);
    }
    if (v26)
    {
      uint64_t v28 = (std::__shared_weak_count *)v26;
LABEL_27:
      sub_1D0C4C984(v28);
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a2 + 576);
    uint64_t v31 = *(void *)(v29 + 296);
    uint64_t v30 = *(void *)(v29 + 304);
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v6 + 4816) = v31;
    uint64_t v28 = *(std::__shared_weak_count **)(v6 + 4824);
    *(void *)(v6 + 4824) = v30;
    if (v28) {
      goto LABEL_27;
    }
  }
  unsigned int v32 = *(char *)(a2 + 648);
  if (v32 < 3)
  {
    unsigned int v38 = 2;
    *(unsigned char *)(v6 + 58) = 2;
    int v33 = v22;
  }
  else
  {
    int v33 = v22;
    if (v32 - 4 < 2)
    {
      *(unsigned char *)(v6 + 58) = 0;
      uint64_t v34 = *(void *)(v6 + 5320);
      int v35 = *(_DWORD *)(v34 + 684);
      if (v35 >= *(_DWORD *)(v34 + 3056)) {
        LOBYTE(v35) = *(_DWORD *)(v34 + 3056);
      }
      *(unsigned char *)(v6 + 516) = v35;
      int v36 = *(_DWORD *)(v34 + 684);
      int v37 = *(_DWORD *)(v34 + 3056);
      if (v36 < v37) {
        LOBYTE(v37) = v36;
      }
      *(unsigned char *)(v6 + 517) = v37;
      goto LABEL_35;
    }
    if (v32 == 3)
    {
      unsigned int v38 = 1;
      *(unsigned char *)(v6 + 58) = 1;
      uint64_t v39 = *(void *)(v6 + 5320);
      int v40 = *(_DWORD *)(v39 + 684);
      int v41 = *(_DWORD *)(v39 + 3056);
      if (v40 < v41) {
        LOBYTE(v41) = v40;
      }
      *(unsigned char *)(v6 + 516) = v41;
    }
    else
    {
      unsigned int v38 = *(unsigned __int8 *)(v6 + 58);
      if (!*(unsigned char *)(v6 + 58))
      {
LABEL_35:
        unsigned int v38 = 0;
        *(void *)(v6 + 5272) = sub_1D0D50990;
        *(void *)(v6 + 5280) = 0;
      }
    }
  }
  *(unsigned char *)(v6 + 48) = a3 == 0;
  *(unsigned char *)(v6 + 50) = **(unsigned char **)(v6 + 32);
  *(_DWORD *)(v6 + 52) = v13;
  *(unsigned char *)(v6 + 49) = 0;
  *(unsigned char *)(v6 + 56) = 0;
  uint64_t v42 = *(void *)(v6 + 8);
  *(_DWORD *)(v6 + 64) = *(_DWORD *)(v42 + 1024) & (v24 - 1);
  *(_WORD *)(v6 + 518) = *(_WORD *)(v7 + 648);
  *(_WORD *)(v6 + 59) = 1;
  *(_WORD *)(v6 + 554) = 1;
  int v43 = *(char *)(v7 + 529);
  *(_DWORD *)(v6 + 324) = v43;
  *(_DWORD *)(v6 + 328) = v43;
  *(unsigned char *)(v6 + 514) = *(unsigned char *)(v7 + 583);
  *(unsigned char *)(v6 + 515) = 1;
  if (v38 >= 2)
  {
    char v45 = *(unsigned char *)(v6 + 5184);
  }
  else
  {
    if (sub_1D0C94390(v6, (_DWORD *)(a2 + 3056), v42)) {
      return;
    }
    uint64_t v44 = *(unsigned __int8 *)(v6 + 516);
    if (v44 == *(unsigned __int8 *)(v6 + 517))
    {
      char v45 = 1;
      *(unsigned char *)(v6 + 5184) = 1;
      if ((char)v44 < 1) {
        goto LABEL_51;
      }
      uint64_t v46 = v6 + 1928;
      while (*(_DWORD *)(*(void *)(v46 - 256) + 1024) == *(_DWORD *)(*(void *)v46 + 1024))
      {
        v46 += 16;
        if (!--v44)
        {
          char v45 = 1;
          goto LABEL_51;
        }
      }
    }
    char v45 = 0;
    *(unsigned char *)(v6 + 5184) = 0;
  }
LABEL_51:
  *(unsigned char *)(v6 + 552) = v45;
  uint64_t v47 = a2;
  uint64_t v49 = *(void *)(a2 + 24);
  uint64_t v48 = *(void *)(a2 + 32);
  if (v48) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v6 + 1584) = v49;
  unsigned int v50 = *(std::__shared_weak_count **)(v6 + 1592);
  *(void *)(v6 + 1592) = v48;
  if (v50) {
    sub_1D0C4C984(v50);
  }
  int8x16_t v51 = *(int8x16_t *)(a2 + 8);
  *(int8x16_t *)(v6 + 1568) = vextq_s8(v51, v51, 8uLL);
  if (a4 && *(unsigned __int8 *)(v51.i64[0] + 34) != 255)
  {
    sub_1D0C97148(v6, *(double *)v51.i64);
    if (v52) {
      return;
    }
    int v53 = *(char *)(v6 + 516);
    uint64_t v47 = a2;
    if (v53 >= 1)
    {
      uint64_t v54 = 0;
      int8x16_t v55 = (void *)(v6 + 1672);
      do
      {
        uint64_t v56 = *v55;
        int8x16_t v57 = (unsigned char *)(*v55 + 48);
        if (*v57)
        {
          if (sub_1D0D078F4(*v55 + 48, *(unsigned __int8 *)(*(void *)(v172 + 40) + 2117))) {
            return;
          }
          sub_1D0D07D0C((uint64_t)v57, 0, *(unsigned int *)(v56 + 524));
          *(unsigned char *)(v56 + 48) = 0;
          LOBYTE(v53) = *(unsigned char *)(v6 + 516);
        }
        ++v54;
        v55 += 2;
      }
      while (v54 < (char)v53);
    }
    int v58 = *(char *)(v6 + 517);
    if (v58 >= 1)
    {
      uint64_t v59 = 0;
      int8x16_t v60 = (void *)(v6 + 1928);
      do
      {
        uint64_t v61 = *v60;
        int8x16_t v62 = (unsigned char *)(*v60 + 48);
        if (*v62)
        {
          if (sub_1D0D078F4(*v60 + 48, *(unsigned __int8 *)(*(void *)(v172 + 40) + 2117))) {
            return;
          }
          sub_1D0D07D0C((uint64_t)v62, 0, *(unsigned int *)(v61 + 524));
          *(unsigned char *)(v61 + 48) = 0;
          LOBYTE(v58) = *(unsigned char *)(v6 + 517);
        }
        ++v59;
        v60 += 2;
      }
      while (v59 < (char)v58);
    }
  }
  if (*(unsigned char *)(v6 + 632))
  {
    uint64_t v63 = *(void *)(v6 + 5320);
    goto LABEL_98;
  }
  if (*(unsigned char *)(v7 + 585))
  {
    uint64_t v63 = *(void *)(v6 + 5320);
  }
  else
  {
    uint64_t v63 = *(void *)(v6 + 5320);
    if (!*(unsigned char *)(v7 + 870) && !*(unsigned char *)(v63 + 676))
    {
      *(_DWORD *)(v6 + 320) = *(_DWORD *)(v47 + 4796);
      int8x16_t v64 = (unsigned char *)(v6 + 68);
LABEL_162:
      *int8x16_t v64 = 1;
      goto LABEL_98;
    }
  }
  *(unsigned char *)(v6 + 68) = 0;
  int8x16_t v64 = (unsigned char *)(v6 + 68);
  uint64_t v65 = *(void *)(v6 + 16);
  uint64_t v66 = *(unsigned int *)(v65 + 288);
  if (v66)
  {
    uint64_t v67 = 0;
    uint64_t v68 = *(void *)(v65 + 296);
    int32x4_t v69 = (unsigned __int16 *)(v68 + 128);
    int32x4_t v70 = (unsigned __int8 *)(v68 + 2);
    int8x16_t v71 = (unsigned __int8 *)(v68 + 66);
    do
    {
      if (*(unsigned __int8 *)(v68 + 248 * v67 + 162) == *(unsigned __int8 *)(v63 + 4522))
      {
        uint64_t v72 = *(unsigned __int8 *)(v68 + 248 * v67 + 160);
        if (v72 == *(unsigned __int8 *)(v63 + 4520))
        {
          uint64_t v73 = *(unsigned __int8 *)(v68 + 248 * v67 + 161);
          if (v73 == *(unsigned __int8 *)(v63 + 4521))
          {
            uint64_t v74 = v69;
            uint64_t v75 = *(unsigned __int8 *)(v63 + 4522);
            uint8x16_t v76 = (unsigned __int16 *)(v63 + 4488);
            if (*(unsigned char *)(v63 + 4522))
            {
              while (1)
              {
                int v78 = *v74++;
                int v77 = v78;
                int v79 = *v76++;
                if (v77 != v79) {
                  break;
                }
                if (!--v75) {
                  goto LABEL_85;
                }
              }
            }
            else
            {
LABEL_85:
              if (*(unsigned char *)(v68 + 248 * v67 + 160))
              {
                int8x16_t v80 = v70;
                int8x16_t v81 = (unsigned __int8 *)(v63 + 4362);
                while (1)
                {
                  int v83 = *v80;
                  v80 += 4;
                  int v82 = v83;
                  int v84 = *v81;
                  v81 += 4;
                  if (v82 != v84) {
                    break;
                  }
                  if (!--v72) {
                    goto LABEL_89;
                  }
                }
              }
              else
              {
LABEL_89:
                if (!*(unsigned char *)(v68 + 248 * v67 + 161)) {
                  goto LABEL_160;
                }
                uint64_t v85 = v73 - 1;
                int8x16_t v86 = v71;
                int8x16_t v87 = (unsigned __int8 *)(v63 + 4426);
                do
                {
                  int v89 = *v86;
                  v86 += 4;
                  int v88 = v89;
                  int v91 = *v87;
                  v87 += 4;
                  int v90 = v91;
                  BOOL v93 = v85-- != 0;
                }
                while (v88 == v90 && v93);
                if (v88 == v90)
                {
LABEL_160:
                  *(_DWORD *)(v6 + 320) = v67;
                  goto LABEL_162;
                }
              }
            }
          }
        }
      }
      ++v67;
      v69 += 124;
      v70 += 248;
      v71 += 248;
    }
    while (v67 != v66);
  }
LABEL_98:
  *(unsigned char *)(v6 + 553) = 0;
  *(unsigned char *)(v6 + 558) = 5 - *(unsigned char *)(v6 + 652);
  *(unsigned char *)(v6 + 559) = (int)(*(float *)(v63 + 6476) + 0.5) - *(unsigned char *)(*(void *)(v6 + 32) + 9) - 26;
  int v94 = *(char *)(v47 + 456);
  if (v94 >= 12) {
    int v94 = 12;
  }
  if (v94 <= -12) {
    LOBYTE(v94) = -12;
  }
  *(unsigned char *)(v6 + 560) = v94;
  int v95 = *(char *)(v47 + 460);
  if (v95 >= 12) {
    int v95 = 12;
  }
  if (v95 <= -12) {
    LOBYTE(v95) = -12;
  }
  *(unsigned char *)(v6 + 561) = v95;
  sub_1D0C4DD58(v6);
  int v96 = *(char *)(v6 + 653);
  *(unsigned char *)(v6 + 559) = v96 - *(unsigned char *)(*(void *)(v6 + 32) + 9) - 26;
  *(float *)(v47 + 6476) = (float)v96;
  uint64_t v97 = *(void *)(v6 + 8);
  uint64_t v98 = *(void *)(v97 + 768) * *(int *)(v97 + 524);
  uint64_t v99 = v98 + 7;
  if (v98 >= 0) {
    uint64_t v99 = *(void *)(v97 + 768) * *(int *)(v97 + 524);
  }
  if (v98 >= 8)
  {
    int8x16_t v100 = *(_WORD **)(v97 + 800);
    uint64_t v101 = v99 >> 3;
    do
    {
      *int8x16_t v100 = *v100 & 0x1FF | (*(unsigned __int8 *)(v6 + 653) << 9);
      ++v100;
      --v101;
    }
    while (v101);
  }
  *(unsigned char *)(v6 + 563) = 0;
  *(unsigned char *)(v6 + 564) = *(unsigned char *)(*(void *)(v47 + 56) + 31);
  if (*(unsigned char *)(v7 + 696) || *(unsigned char *)(v7 + 482))
  {
    uint64_t v102 = *(void *)(v6 + 32);
    char v103 = *(unsigned char *)(v102 + 32);
    *(unsigned char *)(v6 + 565) = v103;
    char v104 = *(unsigned char *)(v102 + 33);
    *(unsigned char *)(v6 + 566) = v104;
    uint64_t v105 = *(void *)(v6 + 5320);
    if (*(unsigned char *)(*(void *)(v105 + 576) + 482) && *(unsigned char *)(v105 + 246))
    {
      uint64_t v106 = 0;
      int v107 = 0;
      int8x16_t v108 = (char *)(v105 + 225);
      do
      {
        int v109 = *(v108 - 1);
        if (v109 != 127)
        {
          int v110 = *v108;
          if (v110 != -128)
          {
            int v111 = (int)(*(float *)(v105 + 6476) + 0.5);
            int v112 = v111 + v110;
            if (v112 >= 51) {
              int v112 = 51;
            }
            unsigned int v113 = v106 + (v112 & ~(v112 >> 31));
            int v114 = v111 + v109;
            if (v114 >= 51) {
              int v114 = 51;
            }
            unsigned int v115 = v114 & ~(v114 >> 31);
            if (v113 >= 0xF && v115 <= 0xF)
            {
              unsigned int v117 = v106 + v115;
              unsigned int v118 = 17 - v115;
              if (v117 < 0xF) {
                unsigned int v118 = v106 + 2;
              }
              int v119 = v118 >> 1;
              if (v119 > v107) {
                int v107 = v119;
              }
            }
          }
        }
        ++v106;
        v108 += 2;
      }
      while (v106 != 11);
      if (v107 > 0)
      {
        if (v107 >= 6) {
          char v104 = 6;
        }
        else {
          char v104 = v107;
        }
        *(unsigned char *)(v6 + 565) = v104;
        *(unsigned char *)(v6 + 566) = v104;
        *(unsigned char *)(v6 + 563) = 1;
        char v103 = v104;
      }
    }
    uint64_t v120 = *(unsigned __int8 **)(v6 + 1568);
    if (*v120 != 255)
    {
      int v122 = *((_DWORD *)v120 + 2);
      int v121 = *((_DWORD *)v120 + 3);
      if (v122 > v121) {
        int v121 = v122;
      }
      if (v121 >= 256)
      {
        if (v121 > 0x13F)
        {
LABEL_144:
          *(unsigned char *)(v6 + 563) = 1;
          goto LABEL_146;
        }
        char v104 = 4;
      }
      else
      {
        char v104 = 6;
      }
      *(unsigned char *)(v6 + 565) = v104;
      *(unsigned char *)(v6 + 566) = v104;
      char v103 = v104;
      goto LABEL_144;
    }
  }
  else
  {
    char v103 = *(unsigned char *)(v6 + 565);
    char v104 = *(unsigned char *)(v6 + 566);
  }
LABEL_146:
  *(unsigned char *)(v6 + 660) = 2 * v103;
  *(unsigned char *)(v6 + 661) = 2 * v104;
  if ((*(unsigned char *)(v7 + 544) & 4) == 0)
  {
    *(_DWORD *)(v6 + 568) = 0;
LABEL_148:
    *(unsigned char *)(v6 + 567) = 0;
    if (!sub_1D0C4EC9C(v6 + 2280, v6)
      && !sub_1D0C4D700((void (**)(__int32 *, uint64_t, int32x4_t *, int, int))(v6 + 2824), v6)
      && !sub_1D0C50C50((void *)(v6 + 3224), *(unsigned __int8 *)(*(void *)(v6 + 16) + 2096), *(unsigned __int8 *)(*(void *)(v6 + 16) + 2098), 0)&& !sub_1D0C4DABC(v6 + 3400, v6))
    {
      int v123 = *(char *)(v7 + 572);
      unsigned int v124 = *(unsigned __int8 *)(v7 + 572) - 1;
      *(unsigned char *)(v6 + 512) = v124 < 2;
      BOOL v125 = v123 >= 2 && *(_DWORD *)(v7 + 656) != 0;
      uint64_t v126 = v172;
      *(unsigned char *)(v6 + 513) = v125;
      if (v124 < 2 || v125) {
        sub_1D0D5824C(v6 + 3536, *(char *)(v6 + 653), v6);
      }
      uint64_t v163 = v6 + 5152;
      *(_OWORD *)(v6 + 5168) = 0u;
      *(_OWORD *)(v6 + 5152) = 0u;
      *(_OWORD *)(v6 + 5136) = 0u;
      *(_OWORD *)(v6 + 5120) = 0u;
      if (*(unsigned char *)(v7 + 712)) {
        sub_1D0D4F3D8(v6);
      }
      if (*(unsigned char *)(v7 + 713))
      {
        if (*(char *)(v6 + 516) >= 1)
        {
          int v127 = 0;
          do
            sub_1D0D4F6A0(v6, 0, v127++);
          while (v127 < *(char *)(v6 + 516));
        }
        uint64_t v128 = *(unsigned __int8 *)(v6 + 517);
        if (*(unsigned char *)(v6 + 5184))
        {
          if ((char)v128 >= 1)
          {
            unsigned int v129 = (_OWORD *)(v6 + 928);
            int v130 = (_WORD *)(v6 + 5152);
            do
            {
              *unsigned int v129 = *(v129 - 16);
              ++v129;
              *int v130 = *(v130 - 16);
              ++v130;
              --v128;
            }
            while (v128);
          }
        }
        else if ((char)v128 >= 1)
        {
          int v131 = 0;
          do
            sub_1D0D4F6A0(v6, 1u, v131++);
          while (v131 < *(char *)(v6 + 517));
        }
      }
      uint64_t v132 = 0;
      char v133 = 1;
      *(_DWORD *)(v6 + 5240) = *(_DWORD *)(*(void *)(v172 + 632) + 1024);
      int v165 = v164 & 0xFE;
      uint64_t v173 = v6;
      do
      {
        uint64_t v134 = v6 + 24 * v132;
        int v135 = *(char **)(v134 + 5192);
        *(void *)(v134 + 5200) = v135;
        int v136 = *(char *)(v6 + v132 + 516);
        if (v136 < 1)
        {
          unint64_t v156 = (unint64_t)v135;
        }
        else
        {
          uint64_t v137 = 0;
          int v138 = (void **)(v134 + 5192);
          long long v139 = (char **)(v134 + 5200);
          uint64_t v140 = *(unsigned __int8 *)(v6 + v132 + 516);
          uint64_t v141 = (char **)(v6 + 24 * v132 + 5208);
          uint64_t v171 = v132;
          char v167 = v133;
          uint64_t v169 = v136;
          do
          {
            int v142 = *(_DWORD *)(*(void *)(v173 + (v132 << 8) + 16 * v137 + 1672) + 1024);
            if (v142 - *(_DWORD *)(v173 + 5240) >= 0) {
              int v143 = v142 - *(_DWORD *)(v173 + 5240);
            }
            else {
              int v143 = *(_DWORD *)(v173 + 5240) - v142;
            }
            if (v135 >= *v141)
            {
              uint64_t v144 = v138;
              uint64_t v145 = (char *)*v138;
              unint64_t v146 = 0xAAAAAAAAAAAAAAABLL * ((v135 - v145) >> 2) + 1;
              if (v146 > 0x1555555555555555) {
                sub_1D0C8D71C();
              }
              unint64_t v147 = v139;
              if (0x5555555555555556 * ((*v141 - v145) >> 2) > v146) {
                unint64_t v146 = 0x5555555555555556 * ((*v141 - v145) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((*v141 - v145) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v148 = 0x1555555555555555;
              }
              else {
                unint64_t v148 = v146;
              }
              if (v148)
              {
                if (v148 > 0x1555555555555555) {
                  sub_1D0C6AC2C();
                }
                uint64_t v149 = (char *)operator new(12 * v148);
              }
              else
              {
                uint64_t v149 = 0;
              }
              int v150 = &v149[4 * ((v135 - v145) >> 2)];
              *(_DWORD *)int v150 = v137;
              *((_DWORD *)v150 + 1) = v142;
              *((_DWORD *)v150 + 2) = v143;
              if (v135 == v145)
              {
                uint64_t v154 = v135;
                uint64_t v151 = &v149[4 * ((v135 - v145) >> 2)];
                int v138 = v144;
              }
              else
              {
                uint64_t v151 = &v149[4 * ((v135 - v145) >> 2)];
                do
                {
                  uint64_t v152 = *(void *)(v135 - 12);
                  v135 -= 12;
                  int v153 = *((_DWORD *)v135 + 2);
                  *(void *)(v151 - 12) = v152;
                  v151 -= 12;
                  *((_DWORD *)v151 + 2) = v153;
                }
                while (v135 != v145);
                int v138 = v144;
                uint64_t v154 = *v144;
              }
              int v155 = &v149[12 * v148];
              *int v138 = v151;
              int v135 = v150 + 12;
              long long v139 = v147;
              *unint64_t v147 = v150 + 12;
              *uint64_t v141 = v155;
              if (v154) {
                operator delete(v154);
              }
              uint64_t v140 = v169;
              uint64_t v132 = v171;
            }
            else
            {
              *(_DWORD *)int v135 = v137;
              *((_DWORD *)v135 + 1) = v142;
              *((_DWORD *)v135 + 2) = v143;
              v135 += 12;
            }
            unsigned __int8 *v139 = v135;
            ++v137;
          }
          while (v137 != v140);
          unint64_t v156 = (unint64_t)*v138;
          uint64_t v126 = v172;
          uint64_t v6 = v173;
          char v133 = v167;
        }
        unint64_t v157 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v135[-v156] >> 2));
        if (v135 == (char *)v156) {
          uint64_t v158 = 0;
        }
        else {
          uint64_t v158 = v157;
        }
        sub_1D0D4FCE4(v156, (unint64_t)v135, v158, 1);
        char v159 = (v165 == 4) & v133;
        uint64_t v132 = 1;
        char v133 = 0;
      }
      while ((v159 & 1) != 0);
      *(void *)(v6 + 5248) = *(void *)(v126 + 496);
      *(void *)(v6 + 5256) = *(void *)(v126 + 504);
      uint64_t v160 = *(void *)(v6 + 4760);
      if (*(_DWORD *)(v160 + 96)) {
        int v161 = 42;
      }
      else {
        int v161 = 48;
      }
      *(_DWORD *)(v6 + 5428) = v161;
      int v162 = *(unsigned __int8 *)(v160 + 392);
      if (v162) {
        LOBYTE(v162) = *(unsigned __int8 *)(*(void *)(v6 + 5320) + 648) >= 3u
      }
                    && *(unsigned char *)(*(void *)(v6 + 8) + 528) == 10;
      *(unsigned char *)(v163 + 112) = v162;
    }
    return;
  }
  if (v33 == v168 && !*(_DWORD *)(v6 + 52))
  {
    *(_DWORD *)(v6 + 568) = v166 - 1;
    sub_1D0C60FFC((char **)(v6 + 576), v166 - 1);
    goto LABEL_148;
  }
  if (dword_1EB671A40 >= 3)
  {
    fwrite("Multislice + wavefront not supported\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Multislice + wavefront not supported\n");
  }
}

void sub_1D0D4F3D8(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  memset(v30, 0, sizeof(v30));
  if (*(unsigned char *)(a1 + 58) != 1) {
    return;
  }
  LODWORD(v2) = *(char *)(a1 + 516);
  if ((int)v2 <= 0)
  {
    int v15 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    int v5 = (std::__shared_weak_count **)(a1 + 1680);
    do
    {
      uint64_t v7 = (uint64_t)*(v5 - 1);
      uint64_t v6 = *v5;
      if (*v5) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        sub_1D0C4C984(v4);
      }
      float v8 = *(float *)(v7 + 228);
      if (v8 == 0.0) {
        double v9 = 1.0;
      }
      else {
        double v9 = *(float *)(*(void *)(*(void *)(a1 + 5320) + 616) + 228) / v8;
      }
      *((long double *)v30 + v3++) = pow(v9, 0.454545455);
      uint64_t v2 = *(char *)(a1 + 516);
      v5 += 2;
      uint64_t v4 = v6;
    }
    while (v3 < v2);
    if ((int)v2 >= 1)
    {
      uint64_t v10 = v2;
      int v11 = (double *)v30;
      double v12 = -1.79769313e308;
      do
      {
        double v13 = *v11++;
        double v14 = v13;
        if (v12 < v13) {
          double v12 = v14;
        }
        --v10;
      }
      while (v10);
      int v15 = 1;
      goto LABEL_21;
    }
    int v15 = 0;
  }
  double v12 = -1.79769313e308;
LABEL_21:
  int v16 = 7;
  do
  {
    int v17 = 1 << v16;
    double v18 = (double)(1 << v16);
    BOOL v19 = v16-- != 0;
  }
  while (v19 && v12 * v18 > (double)(v17 + 127));
  if (v15)
  {
    unsigned __int8 v20 = v16 + 1;
    uint64_t v21 = a1 + 672;
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = a1 + 5121;
    int v24 = (double *)v30;
    uint64_t v2 = v2;
    do
    {
      double v25 = *v24 * v18 + 0.5 - v18;
      if (v25 < 127.0) {
        double v26 = *v24 * v18 + 0.5 - v18;
      }
      else {
        double v26 = 127.0;
      }
      if (v25 <= -128.0) {
        double v27 = -128.0;
      }
      else {
        double v27 = v26;
      }
      *(void *)(v21 + 4) = 0;
      *(_DWORD *)(v21 + 12) = 0;
      *(void *)(v21 + 260) = 0;
      *(_DWORD *)(v21 + 268) = 0;
      *(_WORD *)(v21 + 2) = v17 + (int)v27;
      *(_WORD *)uint64_t v21 = v17 + (int)v27;
      *(_WORD *)(v21 + 258) = v17;
      *(_WORD *)(v21 + 256) = v17;
      *(_WORD *)(v21 + 10) = v17;
      *(_WORD *)(v21 + 8) = v17;
      *(_WORD *)(v21 + 266) = v17;
      *(_WORD *)(v21 + 264) = v17;
      int v28 = *(unsigned __int8 *)(v22 + 2096);
      int v29 = *(unsigned __int8 *)(v22 + 2098);
      if ((int)v27) {
        *(_WORD *)(v23 - 1) = 1;
      }
      ++v24;
      v23 += 2;
      v21 += 16;
      --v2;
    }
    while (v2);
    *(unsigned char *)(a1 + 556) = v20;
    *(unsigned char *)(a1 + 662) = v20;
    *(unsigned char *)(a1 + 557) = 0;
    *(_DWORD *)(a1 + 664) = v20 + 14 - v28;
    *(_DWORD *)(a1 + 668) = v20 + 14 - v29;
  }
  if (v6)
  {
    sub_1D0C4C984(v6);
  }
}

unint64_t sub_1D0D4F6A0(uint64_t a1, unsigned int a2, int a3)
{
  v110[286] = *MEMORY[0x1E4F143B8];
  int v3 = *(char *)(*(void *)(a1 + 16) + 2096);
  uint64_t v4 = 3200;
  if (v3 == 8) {
    uint64_t v4 = 200;
  }
  char v5 = 9;
  if (v3 == 8) {
    char v5 = 5;
  }
  uint64_t v82 = v4;
  char v83 = v5;
  uint64_t v84 = (1 << (v5 - 1));
  v85[0] = v3 - 8;
  v85[1] = v3 - 8;
  if (v3 == 8) {
    uint64_t v6 = sub_1D0D20A6C;
  }
  else {
    uint64_t v6 = sub_1D0D20850;
  }
  v85[2] = v3 - 8;
  uint64_t v86 = 0xBFFFC0007FFF80;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  uint64_t v80 = a3;
  uint64_t v81 = a2;
  uint64_t v7 = *(void **)(a1 + ((unint64_t)a2 << 8) + 16 * a3 + 1672);
  uint64_t v8 = v7[51];
  v96[0] = v7[50];
  v96[1] = v7[65];
  LOBYTE(v97) = v3;
  uint64_t v10 = v7[52];
  uint64_t v9 = v7[53];
  *((void *)&v97 + 1) = v10;
  *(void *)&long long v98 = v8;
  uint64_t v101 = 0;
  uint64_t v102 = v9;
  *((void *)&v99 + 1) = v9;
  *(void *)&long long v100 = v8;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  uint64_t v11 = *(void *)(*(void *)(a1 + 5320) + 616);
  uint64_t v12 = *(void *)(v11 + 408);
  v89[0] = *(void *)(v11 + 400);
  uint64_t v13 = *(unsigned int *)(v11 + 520);
  uint64_t v14 = *(unsigned int *)(v11 + 524);
  uint64_t v16 = *(void *)(v11 + 416);
  uint64_t v15 = *(void *)(v11 + 424);
  *((void *)&v90 + 1) = v16;
  *(void *)&long long v91 = v12;
  uint64_t v94 = 0;
  uint64_t v95 = v15;
  *((void *)&v92 + 1) = v15;
  *(void *)&long long v93 = v12;
  int v17 = v109;
  bzero(v109, 0x900uLL);
  uint64_t v18 = 0;
  int v19 = 0;
  do
  {
    v6(v89[v18], v96[v18], v13, v14, *(void *)((char *)&v90 + v18 * 8 + 8), *(void *)((char *)&v97 + v18 * 8 + 8), (uint64_t)v17, v19++);
    v18 += 4;
    v17 += 768;
  }
  while (v18 != 12);
  uint64_t v20 = 0;
  unsigned int v21 = 0;
  unsigned int v22 = 0;
  uint64_t v23 = v109;
  v108[0] = 0;
  v108[1] = 0;
  do
  {
    uint64_t v24 = *(void *)v23;
    if (*((void *)v23 + 1) <= 1uLL) {
      unint64_t result = 1;
    }
    else {
      unint64_t result = *((void *)v23 + 1);
    }
    int v26 = (int)(float)(*((float *)v23 + 10) * 1000.0);
    if (v26 <= 970) {
      int v27 = v26 > 600;
    }
    else {
      int v27 = 2;
    }
    *((unsigned char *)v108 + v20) = 0;
    if (v27)
    {
      unint64_t result = (1000 * v24 + (result >> 1)) / result;
      if (result < 0x3F3)
      {
        if (result <= 0x3DD)
        {
          *((unsigned char *)v108 + v20) = 2;
          v21 += v27;
        }
      }
      else
      {
        *((unsigned char *)v108 + v20) = 1;
        v22 += v27;
      }
    }
    ++v20;
    v23 += 48;
  }
  while (v20 != 16);
  int v28 = 4194368;
  uint64_t v29 = a1;
  uint64_t v30 = a1 + (v81 << 8) + 16 * v80 + 672;
  long long v106 = 0u;
  memset(v107, 0, 112);
  long long v105 = 0u;
  if (v22 > 8) {
    int v31 = 1;
  }
  else {
    int v31 = 2 * (v21 > 8);
  }
  int v32 = ((int)v14 >> 2) * ((int)v13 >> 2);
  if (v32 <= 1) {
    unint64_t v33 = 1;
  }
  else {
    unint64_t v33 = v32;
  }
  if (v31)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    unsigned int v36 = 0;
    unint64_t v37 = (v33 * (unint64_t)v33) << (2 * LOBYTE(v85[0]));
    long long v103 = xmmword_1D0DA5318;
    uint64_t v104 = 1;
    uint64_t v38 = (uint64_t)v37 >> 1;
    unint64_t result = v33 >> 1;
    uint64_t v39 = v110;
    do
    {
      if (v31 == *((unsigned __int8 *)v108 + v34))
      {
        int v40 = &v109[48 * v34];
        uint64_t v41 = *(void *)v40;
        uint64_t v42 = *((void *)v40 + 1);
        uint64_t v43 = *((void *)v40 + 3);
        unint64_t v44 = (v38 + *((void *)v40 + 2) * v33 - v41 * v41) / v37;
        BOOL v45 = __OFSUB__(v82, v44);
        uint64_t v47 = v82 - v44;
        char v46 = (v47 < 0) ^ v45 | (v47 == 0);
        uint64_t v48 = (v47 + v84) >> v83;
        if (v46) {
          uint64_t v49 = 1;
        }
        else {
          uint64_t v49 = v48 + 1;
        }
        *(void *)&long long v103 = v49;
        if (!v46
          && (int)(float)(*((float *)v40 + 10) * 1000.0) <= 969
          && (uint64_t)((v38 + v43 * v33 - v42 * v42) / v37) < v82)
        {
          *((void *)v40 + 2) = (v41 * v41 + result) / v33;
          *((void *)v40 + 3) = (v42 * v42 + result) / v33;
          v110[6 * v34 + 2] = (result + v42 * v41) / v33;
        }
        uint64_t v50 = 0;
        int8x16_t v51 = &v106;
        int v52 = v39;
        do
        {
          uint64_t v53 = *(void *)((char *)&v103 + v50);
          uint64_t v54 = *((void *)v51 - 1) + *(v52 - 1) * v53;
          *((void *)v51 - 2) += *(v52 - 2) * v53;
          *((void *)v51 - 1) = v54;
          uint64_t v55 = *((void *)v51 + 1) + v52[1] * v53;
          *(void *)v51 += *v52 * v53;
          *((void *)v51 + 1) = v55;
          *((void *)v51 + 2) += v52[2] * v53;
          v50 += 8;
          v52 += 96;
          v51 += 3;
        }
        while (v50 != 24);
        ++v36;
        v35 += v49;
      }
      ++v34;
      v39 += 6;
    }
    while (v34 != 16);
    int v56 = 64;
    strcpy(&v88[4], "@");
    *(_DWORD *)int v88 = 4194368;
    memset(v87, 0, 6);
    if (v36)
    {
      uint64_t v57 = 0;
      *((void *)&v103 + 1) = ((int)v14 >> 3) * ((int)v13 >> 3) * v36;
      uint64_t v104 = *((void *)&v103 + 1);
      *(void *)&long long v103 = v35 * v33;
      int v58 = SWORD2(v86);
      int v59 = SHIWORD(v86);
      int v60 = (__int16)v86;
      uint64_t v61 = v107;
      int v62 = SWORD1(v86);
      unint64_t result = 0xFFFFFFFFLL;
      do
      {
        uint64_t v63 = *((void *)&v103 + v57);
        int v64 = v85[v57];
        uint64_t v65 = (v63 * v63) << (2 * v64);
        uint64_t v67 = *(v61 - 4);
        uint64_t v66 = *(v61 - 3);
        uint64_t v68 = *v61 * v63 - v66 * v67;
        uint64_t v69 = *(v61 - 1) * v63 - v66 * v66;
        if (v69 <= 1) {
          uint64_t v69 = 1;
        }
        if (v63 <= 1) {
          uint64_t v63 = 1;
        }
        if (v69 <= 16 * v65 || v68 <= 16 * v65) {
          LODWORD(v71) = *(__int16 *)&v88[2 * v57];
        }
        else {
          uint64_t v71 = (uint64_t)(((unint64_t)v69 >> 1) + (v68 << 6)) / v69;
        }
        if ((int)v71 >= v59) {
          __int16 v72 = v59;
        }
        else {
          __int16 v72 = v71;
        }
        if ((int)v71 >= v58) {
          __int16 v73 = v72;
        }
        else {
          __int16 v73 = v58;
        }
        *(_WORD *)&v88[2 * v57] = v73;
        v61 += 6;
        unint64_t v74 = (unint64_t)((uint64_t)((v67 << 6) + ((unint64_t)v63 >> 1) - v66 * v73) / v63 + 32) >> 6;
        if ((int)v74 <= v62) {
          __int16 v75 = v74;
        }
        else {
          __int16 v75 = v62;
        }
        if ((int)v74 >= v60) {
          __int16 v76 = v75;
        }
        else {
          __int16 v76 = v60;
        }
        *((_WORD *)v87 + v57++) = v76 & (-1 << v64);
      }
      while (v57 != 3);
      int v56 = *(unsigned __int16 *)v88;
      int v77 = LOWORD(v87[0]);
      int v28 = *(_DWORD *)&v88[2];
      unsigned int v36 = *(_DWORD *)((char *)v87 + 2);
      uint64_t v30 = a1 + (v81 << 8) + 16 * v80 + 672;
      uint64_t v29 = a1;
    }
    else
    {
      int v77 = 0;
      uint64_t v30 = a1 + (v81 << 8) + 16 * v80 + 672;
      uint64_t v29 = a1;
      int v28 = 4194368;
    }
  }
  else
  {
    unsigned int v36 = 0;
    int v77 = 0;
    int v56 = 64;
  }
  *(_WORD *)(v30 + 2) = v56;
  *(_WORD *)uint64_t v30 = v56;
  *(_WORD *)(v30 + 6) = v77;
  *(_WORD *)(v30 + 4) = v77;
  *(_DWORD *)(v30 + 8) = v28;
  *(_DWORD *)(v30 + 12) = v36;
  *(_WORD *)(v29 + 556) = 6;
  *(unsigned char *)(v29 + 662) = 6;
  uint64_t v78 = *(void *)(v29 + 16);
  *(_DWORD *)(v29 + 664) = 20 - *(unsigned __int8 *)(v78 + 2096);
  *(_DWORD *)(v29 + 668) = 20 - *(unsigned __int8 *)(v78 + 2098);
  if (v77 || v56 != 64) {
    *(unsigned char *)(v29 + 32 * v81 + 2 * v80 + 5120) = 1;
  }
  if ((_WORD)v36 || (unsigned __int16)v28 != 64 || HIWORD(v36) || (v28 & 0xFFFF0000) != 0x400000) {
    *(unsigned char *)(v29 + 32 * v81 + 2 * v80 + 5121) = 1;
  }
  return result;
}

unint64_t sub_1D0D4FCE4(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = (uint64_t *)(a2 - 12);
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 2);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v11 + 8))
                {
                  int v101 = *(_DWORD *)(v11 + 8);
                  uint64_t v96 = *(void *)v11;
                  uint64_t v48 = *v10;
                  *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 4);
                  *(void *)unint64_t v11 = v48;
                  *(_DWORD *)(a2 - 4) = v101;
                  *uint64_t v10 = v96;
                }
                break;
              case 3uLL:
                unint64_t result = (unint64_t)sub_1D0D50500((uint64_t *)v11, (uint64_t *)(v11 + 12), (uint64_t *)(a2 - 12));
                break;
              case 4uLL:
                unint64_t result = (unint64_t)sub_1D0D505F0(v11, v11 + 12, v11 + 24, a2 - 12);
                break;
              case 5uLL:
                unint64_t result = (unint64_t)sub_1D0D506C0(v11, v11 + 12, v11 + 24, v11 + 36, a2 - 12);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 287)
          {
            unint64_t v49 = v11 + 12;
            BOOL v51 = v11 == a2 || v49 == a2;
            if (a4)
            {
              if (!v51)
              {
                uint64_t v52 = 0;
                unint64_t v53 = v11;
                do
                {
                  int v54 = *(_DWORD *)(v53 + 20);
                  int v55 = *(_DWORD *)(v53 + 8);
                  unint64_t v53 = v49;
                  if (v54 < v55)
                  {
                    uint64_t v56 = *(void *)v49;
                    uint64_t v57 = v52;
                    while (1)
                    {
                      uint64_t v58 = v11 + v57;
                      *(void *)(v58 + 12) = *(void *)(v11 + v57);
                      *(_DWORD *)(v58 + 20) = *(_DWORD *)(v11 + v57 + 8);
                      if (!v57) {
                        break;
                      }
                      v57 -= 12;
                      if (v54 >= *(_DWORD *)(v58 - 4))
                      {
                        uint64_t v59 = v11 + v57 + 12;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v59 = v11;
LABEL_84:
                    *(void *)uint64_t v59 = v56;
                    *(_DWORD *)(v59 + 8) = v54;
                  }
                  unint64_t v49 = v53 + 12;
                  v52 += 12;
                }
                while (v53 + 12 != a2);
              }
            }
            else if (!v51)
            {
              do
              {
                int v89 = *(_DWORD *)(v9 + 20);
                int v90 = *(_DWORD *)(v9 + 8);
                unint64_t v9 = v49;
                if (v89 < v90)
                {
                  uint64_t v91 = *(void *)v49;
                  do
                  {
                    unint64_t v92 = v49;
                    uint64_t v93 = *(void *)(v49 - 12);
                    v49 -= 12;
                    *(void *)unint64_t v92 = v93;
                    *(_DWORD *)(v92 + 8) = *(_DWORD *)(v92 - 4);
                  }
                  while (v89 < *(_DWORD *)(v92 - 16));
                  *(void *)unint64_t v49 = v91;
                  *(_DWORD *)(v49 + 8) = v89;
                }
                unint64_t v49 = v9 + 12;
              }
              while (v9 + 12 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v60 = (v13 - 2) >> 1;
              int64_t v61 = v60;
              do
              {
                int64_t v62 = v61;
                if (v60 >= v61)
                {
                  uint64_t v63 = (2 * v61) | 1;
                  unint64_t v64 = v11 + 12 * v63;
                  if (2 * v62 + 2 < (uint64_t)v13)
                  {
                    BOOL v65 = *(_DWORD *)(v11 + 12 * v63 + 8) < *(_DWORD *)(v64 + 20);
                    v64 += 12 * v65;
                    if (v65) {
                      uint64_t v63 = 2 * v62 + 2;
                    }
                  }
                  int v66 = *(_DWORD *)(v11 + 12 * v62 + 8);
                  if (*(_DWORD *)(v64 + 8) >= v66)
                  {
                    unint64_t v67 = v11 + 12 * v62;
                    uint64_t v68 = *(void *)v67;
                    do
                    {
                      unint64_t v69 = v67;
                      unint64_t v67 = v64;
                      uint64_t v70 = *(void *)v64;
                      *(_DWORD *)(v69 + 8) = *(_DWORD *)(v67 + 8);
                      *(void *)unint64_t v69 = v70;
                      if (v60 < v63) {
                        break;
                      }
                      uint64_t v71 = (2 * v63) | 1;
                      unint64_t v64 = v11 + 12 * v71;
                      uint64_t v72 = 2 * v63 + 2;
                      if (v72 < (uint64_t)v13)
                      {
                        BOOL v65 = *(_DWORD *)(v11 + 12 * v71 + 8) < *(_DWORD *)(v64 + 20);
                        v64 += 12 * v65;
                        if (v65) {
                          uint64_t v71 = v72;
                        }
                      }
                      uint64_t v63 = v71;
                    }
                    while (*(_DWORD *)(v64 + 8) >= v66);
                    *(void *)unint64_t v67 = v68;
                    *(_DWORD *)(v67 + 8) = v66;
                  }
                }
                int64_t v61 = v62 - 1;
              }
              while (v62);
              int64_t v73 = v12 / 0xCuLL;
              do
              {
                uint64_t v74 = 0;
                int v102 = *(_DWORD *)(v11 + 8);
                uint64_t v97 = *(void *)v11;
                unint64_t v75 = v11;
                do
                {
                  uint64_t v76 = v74 + 1;
                  unint64_t v77 = v75 + 12 * (v74 + 1);
                  unint64_t result = 2 * v74;
                  uint64_t v78 = (2 * v74) | 1;
                  uint64_t v79 = 2 * v74 + 2;
                  if (v79 < v73)
                  {
                    int v80 = *(_DWORD *)(v75 + 12 * v76 + 8);
                    unint64_t result = *(unsigned int *)(v77 + 20);
                    v77 += 12 * (v80 < (int)result);
                    if (v80 < (int)result) {
                      uint64_t v78 = v79;
                    }
                  }
                  uint64_t v81 = *(void *)v77;
                  *(_DWORD *)(v75 + 8) = *(_DWORD *)(v77 + 8);
                  *(void *)unint64_t v75 = v81;
                  unint64_t v75 = v77;
                  uint64_t v74 = v78;
                }
                while (v78 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                a2 -= 12;
                if (v77 == a2)
                {
                  *(_DWORD *)(v77 + 8) = v102;
                  *(void *)unint64_t v77 = v97;
                }
                else
                {
                  uint64_t v82 = *(void *)a2;
                  *(_DWORD *)(v77 + 8) = *(_DWORD *)(a2 + 8);
                  *(void *)unint64_t v77 = v82;
                  *(_DWORD *)(a2 + 8) = v102;
                  *(void *)a2 = v97;
                  uint64_t v83 = v77 - v11 + 12;
                  if (v83 >= 13)
                  {
                    unint64_t v84 = (unint64_t)(-2 - 0x5555555555555555 * (v83 >> 2)) >> 1;
                    int v85 = *(_DWORD *)(v77 + 8);
                    if (*(_DWORD *)(v11 + 12 * v84 + 8) < v85)
                    {
                      uint64_t v86 = *(void *)v77;
                      do
                      {
                        unint64_t v87 = v77;
                        unint64_t v77 = v11 + 12 * v84;
                        uint64_t v88 = *(void *)v77;
                        unint64_t result = *(unsigned int *)(v77 + 8);
                        *(_DWORD *)(v87 + 8) = result;
                        *(void *)unint64_t v87 = v88;
                        if (!v84) {
                          break;
                        }
                        unint64_t v84 = (v84 - 1) >> 1;
                      }
                      while (*(_DWORD *)(v11 + 12 * v84 + 8) < v85);
                      *(void *)unint64_t v77 = v86;
                      *(_DWORD *)(v77 + 8) = v85;
                    }
                  }
                }
                BOOL v65 = v73-- <= 2;
              }
              while (!v65);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = v11 + 12 * (v13 >> 1);
          if ((unint64_t)v12 >= 0x601)
          {
            sub_1D0D50500((uint64_t *)v9, (uint64_t *)(v9 + 12 * (v13 >> 1)), (uint64_t *)(a2 - 12));
            uint64_t v16 = 3 * v14;
            int v17 = (uint64_t *)(v9 + 12 * v14 - 12);
            sub_1D0D50500((uint64_t *)(v9 + 12), v17, (uint64_t *)(a2 - 24));
            uint64_t v18 = (uint64_t *)(v9 + 12 + 4 * v16);
            sub_1D0D50500((uint64_t *)(v9 + 24), v18, (uint64_t *)(a2 - 36));
            unint64_t result = (unint64_t)sub_1D0D50500(v17, (uint64_t *)v15, v18);
            int v98 = *(_DWORD *)(v9 + 8);
            uint64_t v94 = *(void *)v9;
            int v19 = *(_DWORD *)(v15 + 8);
            *(void *)unint64_t v9 = *(void *)v15;
            *(_DWORD *)(v9 + 8) = v19;
            *(_DWORD *)(v15 + 8) = v98;
            *(void *)unint64_t v15 = v94;
          }
          else
          {
            unint64_t result = (unint64_t)sub_1D0D50500((uint64_t *)(v9 + 12 * (v13 >> 1)), (uint64_t *)v9, (uint64_t *)(a2 - 12));
          }
          --a3;
          if (a4) {
            break;
          }
          int v20 = *(_DWORD *)(v9 + 8);
          if (*(_DWORD *)(v9 - 4) < v20) {
            goto LABEL_13;
          }
          if (v20 >= *(_DWORD *)(a2 - 4))
          {
            unint64_t v38 = v9 + 12;
            do
            {
              unint64_t v11 = v38;
              if (v38 >= a2) {
                break;
              }
              int v39 = *(_DWORD *)(v38 + 8);
              v38 += 12;
            }
            while (v20 >= v39);
          }
          else
          {
            unint64_t v36 = v9;
            do
            {
              unint64_t v11 = v36 + 12;
              int v37 = *(_DWORD *)(v36 + 20);
              v36 += 12;
            }
            while (v20 >= v37);
          }
          unint64_t v40 = a2;
          if (v11 < a2)
          {
            unint64_t v41 = a2;
            do
            {
              unint64_t v40 = v41 - 12;
              int v42 = *(_DWORD *)(v41 - 4);
              v41 -= 12;
            }
            while (v20 < v42);
          }
          uint64_t v43 = *(void *)v9;
          while (v11 < v40)
          {
            int v100 = *(_DWORD *)(v11 + 8);
            uint64_t v95 = *(void *)v11;
            uint64_t v44 = *(void *)v40;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v40 + 8);
            *(void *)unint64_t v11 = v44;
            *(_DWORD *)(v40 + 8) = v100;
            *(void *)unint64_t v40 = v95;
            do
            {
              int v45 = *(_DWORD *)(v11 + 20);
              v11 += 12;
            }
            while (v20 >= v45);
            do
            {
              int v46 = *(_DWORD *)(v40 - 4);
              v40 -= 12;
            }
            while (v20 < v46);
          }
          BOOL v4 = v11 - 12 >= v9;
          BOOL v5 = v11 - 12 == v9;
          if (v11 - 12 != v9)
          {
            uint64_t v47 = *(void *)(v11 - 12);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 4);
            *(void *)unint64_t v9 = v47;
          }
          a4 = 0;
          *(void *)(v11 - 12) = v43;
          *(_DWORD *)(v11 - 4) = v20;
        }
        int v20 = *(_DWORD *)(v9 + 8);
LABEL_13:
        uint64_t v21 = *(void *)v9;
        unint64_t v22 = v9;
        do
        {
          unint64_t v23 = v22;
          v22 += 12;
        }
        while (*(_DWORD *)(v23 + 20) < v20);
        unint64_t v24 = a2;
        if (v23 == v9)
        {
          unint64_t v27 = a2;
          while (v22 < v27)
          {
            unint64_t v25 = v27 - 12;
            int v28 = *(_DWORD *)(v27 - 4);
            v27 -= 12;
            if (v28 < v20) {
              goto LABEL_23;
            }
          }
          unint64_t v25 = v27;
        }
        else
        {
          do
          {
            unint64_t v25 = v24 - 12;
            int v26 = *(_DWORD *)(v24 - 4);
            v24 -= 12;
          }
          while (v26 >= v20);
        }
LABEL_23:
        unint64_t v11 = v22;
        if (v22 < v25)
        {
          unint64_t v29 = v25;
          do
          {
            uint64_t v30 = *(void *)v11;
            int v99 = *(_DWORD *)(v11 + 8);
            int v31 = *(_DWORD *)(v29 + 8);
            *(void *)unint64_t v11 = *(void *)v29;
            *(_DWORD *)(v11 + 8) = v31;
            *(_DWORD *)(v29 + 8) = v99;
            *(void *)unint64_t v29 = v30;
            do
            {
              int v32 = *(_DWORD *)(v11 + 20);
              v11 += 12;
            }
            while (v32 < v20);
            do
            {
              int v33 = *(_DWORD *)(v29 - 4);
              v29 -= 12;
            }
            while (v33 >= v20);
          }
          while (v11 < v29);
        }
        if (v11 - 12 != v9)
        {
          uint64_t v34 = *(void *)(v11 - 12);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v11 - 4);
          *(void *)unint64_t v9 = v34;
        }
        *(void *)(v11 - 12) = v21;
        *(_DWORD *)(v11 - 4) = v20;
        if (v22 >= v25) {
          break;
        }
LABEL_34:
        unint64_t result = sub_1D0D4FCE4(v9, v11 - 12, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = sub_1D0D507CC(v9, v11 - 12);
      unint64_t result = sub_1D0D507CC(v11, a2);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v11 - 12;
    if (!v35) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1D0D50500(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  int v4 = *((_DWORD *)a3 + 2);
  if (v3 >= *((_DWORD *)result + 2))
  {
    if (v4 < v3)
    {
      int v8 = *((_DWORD *)a2 + 2);
      uint64_t v9 = *a2;
      int v10 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_DWORD *)a3 + 2) = v8;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        int v11 = *((_DWORD *)result + 2);
        uint64_t v12 = *result;
        int v13 = *((_DWORD *)a2 + 2);
        *unint64_t result = *a2;
        *((_DWORD *)result + 2) = v13;
        *a2 = v12;
        *((_DWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      int v14 = *((_DWORD *)result + 2);
      uint64_t v15 = *result;
      int v16 = *((_DWORD *)a2 + 2);
      *unint64_t result = *a2;
      *((_DWORD *)result + 2) = v16;
      *a2 = v15;
      *((_DWORD *)a2 + 2) = v14;
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2)) {
        return result;
      }
      int v5 = *((_DWORD *)a2 + 2);
      uint64_t v6 = *a2;
      int v17 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v17;
    }
    else
    {
      int v5 = *((_DWORD *)result + 2);
      uint64_t v6 = *result;
      int v7 = *((_DWORD *)a3 + 2);
      *unint64_t result = *a3;
      *((_DWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_DWORD *)a3 + 2) = v5;
  }
  return result;
}

uint64_t *sub_1D0D505F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = sub_1D0D50500((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    int v9 = *(_DWORD *)(a3 + 8);
    uint64_t v10 = *(void *)a3;
    int v11 = *(_DWORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *(_DWORD *)(a3 + 8) = v11;
    *(void *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      int v12 = *(_DWORD *)(a2 + 8);
      uint64_t v13 = *(void *)a2;
      int v14 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)a3 = v13;
      *(_DWORD *)(a3 + 8) = v12;
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        int v15 = *(_DWORD *)(a1 + 8);
        uint64_t v16 = *(void *)a1;
        int v17 = *(_DWORD *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v17;
        *(void *)a2 = v16;
        *(_DWORD *)(a2 + 8) = v15;
      }
    }
  }
  return result;
}

uint64_t *sub_1D0D506C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_1D0D505F0(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 8) < *(_DWORD *)(a4 + 8))
  {
    int v11 = *(_DWORD *)(a4 + 8);
    uint64_t v12 = *(void *)a4;
    int v13 = *(_DWORD *)(a5 + 8);
    *(void *)a4 = *(void *)a5;
    *(_DWORD *)(a4 + 8) = v13;
    *(void *)a5 = v12;
    *(_DWORD *)(a5 + 8) = v11;
    if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    {
      int v14 = *(_DWORD *)(a3 + 8);
      uint64_t v15 = *(void *)a3;
      int v16 = *(_DWORD *)(a4 + 8);
      *(void *)a3 = *(void *)a4;
      *(_DWORD *)(a3 + 8) = v16;
      *(void *)a4 = v15;
      *(_DWORD *)(a4 + 8) = v14;
      if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
      {
        int v17 = *(_DWORD *)(a2 + 8);
        uint64_t v18 = *(void *)a2;
        int v19 = *(_DWORD *)(a3 + 8);
        *(void *)a2 = *(void *)a3;
        *(_DWORD *)(a2 + 8) = v19;
        *(void *)a3 = v18;
        *(_DWORD *)(a3 + 8) = v17;
        if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
        {
          int v20 = *(_DWORD *)(a1 + 8);
          uint64_t v21 = *(void *)a1;
          int v22 = *(_DWORD *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = v22;
          *(void *)a2 = v21;
          *(_DWORD *)(a2 + 8) = v20;
        }
      }
    }
  }
  return result;
}

BOOL sub_1D0D507CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 8))
      {
        int v6 = *(_DWORD *)(a1 + 8);
        uint64_t v7 = *(void *)a1;
        int v8 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v8;
        *(void *)(a2 - 12) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      sub_1D0D50500((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      return 1;
    case 4uLL:
      sub_1D0D505F0(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      sub_1D0D506C0(a1, a1 + 12, a1 + 24, a1 + 36, a2 - 12);
      return 1;
    default:
      uint64_t v9 = a1 + 24;
      sub_1D0D50500((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v10 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)(v10 + 8);
    if (v13 < *(_DWORD *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(void *)(v16 + 36) = *(void *)(a1 + v15 + 24);
        *(_DWORD *)(v16 + 44) = *(_DWORD *)(a1 + v15 + 32);
        if (v15 == -24) {
          break;
        }
        v15 -= 12;
        if (v13 >= *(_DWORD *)(v16 + 20))
        {
          uint64_t v17 = a1 + v15 + 36;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(_DWORD *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 12 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 12;
    v10 += 12;
    if (v10 == a2) {
      return 1;
    }
  }
}

BOOL sub_1D0D50990(uint64_t a1, __int16 *a2, __int16 *a3)
{
  unint64_t v3 = (unint64_t)*((unsigned __int8 *)a2 + 8) >> 4;
  if (v3 == 15) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 16 * v3 + 1672);
  }
  unint64_t v5 = (unint64_t)*((unsigned __int8 *)a2 + 9) >> 4;
  if (v5 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16 * v5 + 1928);
  }
  unint64_t v7 = (unint64_t)*((unsigned __int8 *)a3 + 8) >> 4;
  if (v7 == 15) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16 * v7 + 1672);
  }
  unint64_t v9 = (unint64_t)*((unsigned __int8 *)a3 + 9) >> 4;
  if (v9 == 15) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 16 * v9 + 1928);
  }
  if (v4 == v8 && v6 == v10)
  {
    if (v4 != v6)
    {
      int v11 = *a3 - *a2;
      if (v11 < 0) {
        int v11 = *a2 - *a3;
      }
      if (v11 <= 3)
      {
        int v12 = a3[1] - a2[1];
        if (v12 < 0) {
          int v12 = a2[1] - a3[1];
        }
        if (v12 <= 3)
        {
          int v13 = a3[2] - a2[2];
          if (v13 < 0) {
            int v13 = a2[2] - a3[2];
          }
          if (v13 <= 3)
          {
            uint64_t v14 = a3 + 3;
LABEL_62:
            int v28 = *v14 - a2[3];
            if (v28 < 0) {
              int v28 = -v28;
            }
            return v28 > 3;
          }
        }
      }
      return 1;
    }
    goto LABEL_39;
  }
  BOOL result = 1;
  if (v4 != v10 || v6 != v8) {
    return result;
  }
  if (v4 == v6)
  {
LABEL_39:
    int v19 = *a3;
    int v20 = *a2;
    unsigned int v21 = v19 - v20;
    if (v19 - v20 < 0) {
      unsigned int v21 = v20 - v19;
    }
    if (v21 <= 3)
    {
      int v22 = a3[1] - a2[1];
      if (v22 < 0) {
        int v22 = a2[1] - a3[1];
      }
      if (v22 <= 3)
      {
        int v23 = a3[2] - a2[2];
        if (v23 < 0) {
          int v23 = a2[2] - a3[2];
        }
        if (v23 <= 3)
        {
          int v24 = a3[3] - a2[3];
          if (v24 < 0) {
            int v24 = a2[3] - a3[3];
          }
          if (v24 < 4) {
            return 0;
          }
        }
      }
    }
    int v25 = a3[2] - v20;
    if (v25 < 0) {
      int v25 = -v25;
    }
    if (v25 > 3) {
      return 1;
    }
    int v26 = a3[3] - a2[1];
    if (v26 < 0) {
      int v26 = a2[1] - a3[3];
    }
    if (v26 > 3) {
      return 1;
    }
    int v27 = v19 - a2[2];
    if (v27 < 0) {
      int v27 = -v27;
    }
    if (v27 > 3) {
      return 1;
    }
LABEL_61:
    uint64_t v14 = a3 + 1;
    goto LABEL_62;
  }
  int v16 = a3[2] - *a2;
  if (v16 < 0) {
    int v16 = *a2 - a3[2];
  }
  if (v16 <= 3)
  {
    int v17 = a3[3] - a2[1];
    if (v17 < 0) {
      int v17 = a2[1] - a3[3];
    }
    if (v17 <= 3)
    {
      int v18 = *a3 - a2[2];
      if (v18 < 0) {
        int v18 = a2[2] - *a3;
      }
      if (v18 <= 3) {
        goto LABEL_61;
      }
    }
  }
  return result;
}

uint64_t sub_1D0D50BB0(uint64_t a1, int a2)
{
  uint64_t v5 = *(void *)(a1 + 5320);
  uint64_t v6 = *(void *)(v5 + 576);
  uint64_t v7 = *(void *)(v5 + 632);
  int v8 = *(char *)(v6 + 480);
  int v9 = *(_DWORD *)(a1 + 568);
  uint64_t v572 = v6;
  int v10 = *(_DWORD *)(v6 + 524);
  uint64_t v584 = (v9 + 1);
  int v571 = v9;
  if (v10 >= (int)v584) {
    uint64_t v11 = (v9 + 1);
  }
  else {
    uint64_t v11 = v10;
  }
  if (*(unsigned char *)(*(void *)(a1 + 1576) + 33)) {
    BOOL v12 = *(unsigned char *)(*(void *)(a1 + 1568) + 52) != 0;
  }
  else {
    BOOL v12 = 0;
  }
  int v13 = (BOOL *)(a1 + 5432);
  int v14 = *(char *)(a1 + 653);
  int v569 = *(_DWORD *)(v572 + 544);
  int v570 = *(_DWORD *)(v7 + 524);
  int v588 = *(_DWORD *)(a1 + 52);
  int v614 = 0;
  uint64_t v15 = *(void *)(a1 + 16);
  unsigned int v16 = *(unsigned __int8 *)(v15 + 201);
  int v602 = *(_DWORD *)(v15 + 2120);
  int v596 = *(_DWORD *)(v15 + 2124);
  char v594 = *(unsigned char *)(v15 + 2113);
  int v605 = *(unsigned __int8 *)(v15 + 2096);
  int v591 = *(unsigned __int8 *)(v15 + 2098);
  if (v16 >= 2) {
    char v17 = v16 < 3;
  }
  else {
    char v17 = (v16 < 3) + 1;
  }
  char v599 = v17;
  if (v8 >= 2 && dword_1EB671A40 >= 4)
  {
    fwrite("max_slice_data_size calculation needs additional work for arbitrary slices\n", 0x4BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(28, "max_slice_data_size calculation needs additional work for arbitrary slices\n");
  }
  BOOL v19 = *(unsigned __int8 *)(a1 + 58) <= 1u && *(unsigned char *)(*(void *)(a1 + 5320) + 216) != 0;
  *int v13 = v19;
  v13[1] = 0;
  uint64_t v20 = *(void *)(a1 + 4760);
  *(_DWORD *)(a1 + 5436) = *(_DWORD *)(v20 + 560);
  *(void *)(a1 + 5440) = 0;
  *(void *)(a1 + 5448) = -1;
  *(void *)(a1 + 5456) = -1;
  v13[32] = 0;
  if (*(unsigned char *)(v20 + 553))
  {
    unsigned int v21 = (void *)(a1 + 5448);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA643478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EA643478))
    {
      dword_1EA643470 = 32;
      __cxa_guard_release(&qword_1EA643478);
    }
    int v22 = 0;
    *unsigned int v21 = 0;
    *(void *)(a1 + 5456) = 0;
    *(unsigned char *)(a1 + 5464) = 0;
    uint64_t v23 = *(void *)(a1 + 5320);
    if (*(unsigned char *)(a1 + 58) != 2)
    {
      uint64_t v24 = (*(unsigned char *)(v23 + 648) & 0xFE) == 4
         && *(_DWORD *)(*(void *)(a1 + 5216) + 8) < *(_DWORD *)(*(void *)(a1 + 5192) + 8);
      uint64_t v25 = *(void *)(a1 + (v24 << 8) + 16 * **(int **)(a1 + 24 * v24 + 5192) + 1672);
      int v26 = (_OWORD *)(v25 + 664);
      uint64_t v27 = *(void *)(v25 + 680);
      *(_OWORD *)unsigned int v21 = *v26;
      *(void *)(a1 + 5464) = v27;
      int v22 = *(_DWORD *)(a1 + 5460);
    }
    uint64_t v28 = *(void *)(v23 + 616);
    int v29 = *(_DWORD *)(v28 + 672);
    int v30 = *(_DWORD *)(v28 + 664);
    BOOL v31 = v30 >= 151 && v30 > 2 * *(_DWORD *)(v28 + 668);
    if (v22 > 399) {
      BOOL v31 = 1;
    }
    if (!v31 && v29 > dword_1EA643470 && *(_DWORD *)(a1 + 5456) > dword_1EA643470 && v22 > dword_1EA643470)
    {
      int v32 = 2 * v22;
      int v33 = *(_DWORD *)(a1 + 5448);
      if (v33 < 2 * v22) {
        int v32 = *(_DWORD *)(a1 + 5448);
      }
      int v34 = (v32 << 10) / v33;
      *(_DWORD *)(a1 + 5444) = v34;
      uint64_t v35 = *(void *)(a1 + 4760);
      char v36 = *(unsigned char *)(v35 + 552);
      v13[1] = v36;
      *(unsigned char *)(v28 + 680) = v36;
      if (*(unsigned char *)(v35 + 554))
      {
        int v37 = (int)nearbyintf(*(float *)(v35 + 556) * 32.0);
        if (v29 >= v22) {
          int v29 = sub_1D0D5741C((v29 * v29 + v22 * v22));
        }
        *(_DWORD *)(a1 + 5440) = (((v29 * v37 + 16) >> 5) * v34 + 512) >> 10;
      }
    }
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 5320);
  }
  int v38 = *(_DWORD *)(a1 + 5436);
  if (!v38)
  {
    int v38 = *(_DWORD *)(v23 + 668);
    *(_DWORD *)(a1 + 5436) = v38;
  }
  *(_DWORD *)(*(void *)(v23 + 616) + 684) = v38;
  int v39 = *(void **)(a1 + 5360);
  uint64_t v40 = *(void *)(a1 + 5352);
  unint64_t v41 = ((uint64_t)v39 - v40) >> 6;
  if ((int)v584 > v41)
  {
    uint64_t v42 = *(void *)(a1 + 5368);
    if ((int)v584 - v41 <= (v42 - (uint64_t)v39) >> 6)
    {
      int v66 = &v39[8 * ((int)v584 - v41)];
      do
      {
        *int v39 = 0;
        v39[1] = 0;
        v39[2] = 0;
        v39[5] = 0;
        v39[6] = 0;
        v39[4] = 0;
        v39 += 8;
      }
      while (v39 != v66);
      *(void *)(a1 + 5360) = v66;
      goto LABEL_77;
    }
    if ((v584 & 0x80000000) != 0) {
      sub_1D0C8D71C();
    }
    unint64_t v43 = v42 - v40;
    unint64_t v44 = (v42 - v40) >> 5;
    if (v44 <= (int)v584) {
      unint64_t v44 = (int)v584;
    }
    if (v43 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v45 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v44;
    }
    if (v45 >> 58) {
      goto LABEL_541;
    }
    int v46 = (char *)operator new(v45 << 6);
    uint64_t v47 = &v46[64 * v41];
    uint64_t v48 = &v46[64 * (uint64_t)(int)v584];
    unint64_t v49 = v47;
    do
    {
      *(void *)unint64_t v49 = 0;
      *((void *)v49 + 1) = 0;
      *((void *)v49 + 2) = 0;
      *((void *)v49 + 5) = 0;
      *((void *)v49 + 6) = 0;
      *((void *)v49 + 4) = 0;
      v49 += 64;
    }
    while (v49 != v48);
    uint64_t v50 = &v46[64 * v45];
    BOOL v51 = *(char **)(a1 + 5360);
    uint64_t v52 = *(char **)(a1 + 5352);
    if (v51 == v52)
    {
      *(void *)(a1 + 5352) = v47;
      *(void *)(a1 + 5360) = v48;
      *(void *)(a1 + 5368) = v50;
      if (!v51) {
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v53 = 0;
      do
      {
        int v54 = &v47[v53];
        int v55 = &v51[v53];
        *((void *)v54 - 8) = 0;
        *((void *)v54 - 7) = 0;
        *((void *)v54 - 6) = 0;
        *((_OWORD *)v54 - 4) = *(_OWORD *)&v51[v53 - 64];
        *((void *)v54 - 6) = *(void *)&v51[v53 - 48];
        *((void *)v55 - 8) = 0;
        *((void *)v55 - 7) = 0;
        *((void *)v55 - 6) = 0;
        long long v56 = *(_OWORD *)&v51[v53 - 40];
        long long v57 = *(_OWORD *)&v51[v53 - 24];
        *(v54 - 8) = v51[v53 - 8];
        *(_OWORD *)(v54 - 24) = v57;
        *(_OWORD *)(v54 - 40) = v56;
        v53 -= 64;
      }
      while (&v51[v53] != v52);
      uint64_t v58 = *(char **)(a1 + 5352);
      BOOL v51 = *(char **)(a1 + 5360);
      *(void *)(a1 + 5352) = &v47[v53];
      *(void *)(a1 + 5360) = v48;
      *(void *)(a1 + 5368) = v50;
      if (v51 != v58)
      {
        uint64_t v59 = v51;
        do
        {
          int64_t v61 = (void *)*((void *)v59 - 8);
          v59 -= 64;
          int64_t v60 = v61;
          if (v61)
          {
            *((void *)v51 - 7) = v60;
            operator delete(v60);
          }
          BOOL v51 = v59;
        }
        while (v59 != v58);
        BOOL v51 = v58;
      }
      if (!v51) {
        goto LABEL_77;
      }
    }
    operator delete(v51);
    goto LABEL_77;
  }
  if ((int)v584 < v41)
  {
    int64_t v62 = (void *)(v40 + ((uint64_t)(int)v584 << 6));
    if (v39 != v62)
    {
      uint64_t v63 = *(void **)(a1 + 5360);
      do
      {
        BOOL v65 = (void *)*(v63 - 8);
        v63 -= 8;
        unint64_t v64 = v65;
        if (v65)
        {
          *(v39 - 7) = v64;
          operator delete(v64);
        }
        int v39 = v63;
      }
      while (v63 != v62);
    }
    *(void *)(a1 + 5360) = v62;
  }
LABEL_77:
  uint64_t v67 = *(void *)(a1 + 5336);
  uint64_t v68 = *(void *)(a1 + 5328);
  unint64_t v69 = 0xCBEEA4E1A08AD8F3 * ((v67 - v68) >> 3);
  unint64_t v70 = (int)v584 - v69;
  uint64_t v586 = v11;
  if ((int)v584 > v69)
  {
    uint64_t v71 = *(void *)(a1 + 5344);
    if (0xCBEEA4E1A08AD8F3 * ((v71 - v67) >> 3) >= v70)
    {
      uint64_t v110 = v67 + 472 * v70;
      uint64_t v111 = 472 * (int)v584 - 472 * v69;
      int v112 = *(void **)(a1 + 5336);
      do
      {
        v112[4] = 0;
        v112[5] = 0;
        *int v112 = &unk_1F26F1468;
        v112[32] = 0;
        v112[33] = 0;
        v112[58] = 0;
        v112 += 59;
        v67 += 472;
        v111 -= 472;
      }
      while (v111);
      *(void *)(a1 + 5336) = v110;
      goto LABEL_99;
    }
    if ((v584 & 0x80000000) != 0) {
      sub_1D0C8D71C();
    }
    unint64_t v72 = 0xCBEEA4E1A08AD8F3 * ((v71 - v68) >> 3);
    unint64_t v73 = 0x97DD49C34115B1E6 * ((v71 - v68) >> 3);
    if (v73 <= (int)v584) {
      unint64_t v73 = (int)v584;
    }
    if (v72 >= 0x456C797DD49C34) {
      unint64_t v74 = 0x8AD8F2FBA93868;
    }
    else {
      unint64_t v74 = v73;
    }
    if (v74 <= 0x8AD8F2FBA93868)
    {
      unint64_t v75 = (char *)operator new(472 * v74);
      uint64_t v76 = v75;
      unint64_t v77 = &v75[472 * v69];
      uint64_t v78 = &v75[472 * (int)v584];
      uint64_t v79 = 472 * (int)v584 - 472 * v69;
      int v80 = v77;
      uint64_t v81 = v77;
      do
      {
        *((void *)v81 + 4) = 0;
        *((void *)v81 + 5) = 0;
        *(void *)uint64_t v81 = &unk_1F26F1468;
        *((void *)v81 + 32) = 0;
        *((void *)v81 + 33) = 0;
        *((void *)v81 + 58) = 0;
        v81 += 472;
        v80 += 472;
        v79 -= 472;
      }
      while (v79);
      uint64_t v82 = &v75[472 * v74];
      uint64_t v83 = *(char **)(a1 + 5336);
      unint64_t v84 = *(char **)(a1 + 5328);
      if (v83 != v84)
      {
        uint64_t v85 = (uint64_t)&v76[472 * v69 - 472];
        do
        {
          uint64_t v86 = v77;
          v77 -= 472;
          unint64_t v87 = v86 - 58;
          long long v88 = *((_OWORD *)v83 - 28);
          *unint64_t v87 = *((_OWORD *)v83 - 29);
          v87[1] = v88;
          long long v89 = *((_OWORD *)v83 - 27);
          long long v90 = *((_OWORD *)v83 - 26);
          long long v91 = *((_OWORD *)v83 - 24);
          v87[4] = *((_OWORD *)v83 - 25);
          v87[5] = v91;
          _DWORD v87[2] = v89;
          v87[3] = v90;
          long long v92 = *((_OWORD *)v83 - 23);
          long long v93 = *((_OWORD *)v83 - 22);
          long long v94 = *((_OWORD *)v83 - 20);
          v87[8] = *((_OWORD *)v83 - 21);
          v87[9] = v94;
          v87[6] = v92;
          v87[7] = v93;
          long long v95 = *((_OWORD *)v83 - 19);
          long long v96 = *((_OWORD *)v83 - 18);
          long long v97 = *((_OWORD *)v83 - 17);
          *((_OWORD *)v86 - 16) = *((_OWORD *)v83 - 16);
          v87[11] = v96;
          v87[12] = v97;
          v87[10] = v95;
          *(void *)unint64_t v77 = &unk_1F26F1468;
          long long v98 = *(_OWORD *)(v83 - 247);
          long long v99 = *(_OWORD *)(v83 - 231);
          long long v100 = *(_OWORD *)(v83 - 215);
          *(_OWORD *)((char *)v86 - 199) = *(_OWORD *)(v83 - 199);
          *(_OWORD *)((char *)v86 - 215) = v100;
          *(_OWORD *)((char *)v86 - 231) = v99;
          *(_OWORD *)((char *)v86 - 247) = v98;
          long long v101 = *(_OWORD *)(v83 - 183);
          long long v102 = *(_OWORD *)(v83 - 167);
          long long v103 = *(_OWORD *)(v83 - 151);
          *(_OWORD *)((char *)v86 - 135) = *(_OWORD *)(v83 - 135);
          *(_OWORD *)((char *)v86 - 151) = v103;
          *(_OWORD *)((char *)v86 - 167) = v102;
          *(_OWORD *)((char *)v86 - 183) = v101;
          long long v104 = *(_OWORD *)(v83 - 119);
          long long v105 = *(_OWORD *)(v83 - 103);
          long long v106 = *(_OWORD *)(v83 - 87);
          *(_OWORD *)((char *)v86 - 71) = *(_OWORD *)(v83 - 71);
          *(_OWORD *)((char *)v86 - 87) = v106;
          *(_OWORD *)((char *)v86 - 103) = v105;
          *(_OWORD *)((char *)v86 - 119) = v104;
          long long v107 = *(_OWORD *)(v83 - 55);
          long long v108 = *(_OWORD *)(v83 - 39);
          long long v109 = *(_OWORD *)(v83 - 23);
          *(v86 - 1) = *((void *)v83 - 1);
          *(_OWORD *)((char *)v86 - 23) = v109;
          *(_OWORD *)((char *)v86 - 39) = v108;
          *(_OWORD *)((char *)v86 - 55) = v107;
          v85 -= 472;
          v83 -= 472;
        }
        while (v83 != v84);
        uint64_t v83 = *(char **)(a1 + 5328);
      }
      *(void *)(a1 + 5328) = v77;
      *(void *)(a1 + 5336) = v78;
      *(void *)(a1 + 5344) = v82;
      if (v83) {
        operator delete(v83);
      }
      goto LABEL_99;
    }
LABEL_541:
    sub_1D0C6AC2C();
  }
  if ((int)v584 < v69) {
    *(void *)(a1 + 5336) = v68 + 472 * (int)v584;
  }
LABEL_99:
  sub_1D0C60FFC((char **)(a1 + 1184), (int)v584);
  unint64_t v113 = (int)v11;
  int v114 = *(void **)(a1 + 5384);
  unsigned int v115 = *(void **)(a1 + 5376);
  unint64_t v116 = v114 - v115;
  BOOL v567 = v12;
  int v568 = a2;
  int v608 = v14;
  int v610 = v8;
  if (v113 <= v116)
  {
    if (v113 >= v116)
    {
      uint64_t v126 = *(void **)(a1 + 5384);
      goto LABEL_124;
    }
    uint64_t v126 = &v115[v113];
    while (v114 != v126)
      sub_1D0D4DC38(--v114, 0);
LABEL_116:
    *(void *)(a1 + 5384) = v126;
    goto LABEL_124;
  }
  unint64_t v117 = v113 - v116;
  uint64_t v118 = *(void *)(a1 + 5392);
  if (v113 - v116 <= (v118 - (uint64_t)v114) >> 3)
  {
    bzero(v114, 8 * v117);
    uint64_t v126 = &v114[v117];
    goto LABEL_116;
  }
  if ((v586 & 0x80000000) != 0) {
    sub_1D0C8D71C();
  }
  uint64_t v119 = v118 - (void)v115;
  if (v119 >> 2 > v113) {
    unint64_t v113 = v119 >> 2;
  }
  if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v120 = v113;
  }
  if (v120 >> 61) {
    goto LABEL_541;
  }
  int v121 = (char *)operator new(8 * v120);
  int v122 = &v121[8 * v116];
  int v123 = &v121[8 * v120];
  bzero(v122, 8 * v117);
  unsigned int v124 = &v122[8 * v117];
  while (v114 != v115)
  {
    uint64_t v125 = *--v114;
    *int v114 = 0;
    *((void *)v122 - 1) = v125;
    v122 -= 8;
  }
  long long v127 = *(_OWORD *)(a1 + 5376);
  *(void *)(a1 + 5376) = v122;
  *(void *)(a1 + 5384) = v124;
  *(void *)(a1 + 5392) = v123;
  uint64_t v128 = (void *)*((void *)&v127 + 1);
  unsigned int v129 = (void *)v127;
  while (v128 != v129)
    sub_1D0D4DC38(--v128, 0);
  if (v129) {
    operator delete(v129);
  }
  uint64_t v126 = *(void **)(a1 + 5384);
LABEL_124:
  uint64_t v573 = a1;
  for (uint64_t i = *(void **)(a1 + 5376); i != v126; ++i)
  {
    int v131 = (char *)operator new(0x76C0uLL, (std::align_val_t)0x40uLL);
    bzero(v131, 0x76C0uLL);
    sub_1D0CE0408((uint64_t)(v131 + 1656));
    *((void *)v131 + 1822) = 0;
    *((_OWORD *)v131 + 910) = 0u;
    *((_OWORD *)v131 + 909) = 0u;
    *((_OWORD *)v131 + 908) = 0u;
    *((_OWORD *)v131 + 907) = 0u;
    bzero(v131 + 15040, 0x1800uLL);
    *((void *)v131 + 3050) = 0;
    sub_1D0D4A2AC((void *)v131 + 3030);
    *((void *)v131 + 2666) = v131 + 21376;
    *((void *)v131 + 2667) = v131 + 23424;
    *((void *)v131 + 2668) = v131 + 23936;
    *((void *)v131 + 2669) = v131 + 24064;
    *((void *)v131 + 1875) = v131 + 24552;
    *((_DWORD *)v131 + 6138) = 0;
    v131[24556] = 0;
    *((_DWORD *)v131 + 6144) = 0;
    *((_DWORD *)v131 + 6147) = 0;
    *((_DWORD *)v131 + 6148) = 0;
    *((_DWORD *)v131 + 74) = 0;
    *((void *)v131 + 1863) = 0;
    *((_OWORD *)v131 + 932) = 0u;
    *(_OWORD *)(v131 + 24808) = 0u;
    *((_OWORD *)v131 + 1556) = 0u;
    *((_OWORD *)v131 + 1557) = 0u;
    *((_OWORD *)v131 + 1558) = 0u;
    *((_OWORD *)v131 + 1559) = 0u;
    *((_OWORD *)v131 + 1560) = 0u;
    *((_OWORD *)v131 + 1561) = 0u;
    *((_OWORD *)v131 + 1562) = 0u;
    *((_OWORD *)v131 + 1563) = 0u;
    *((_OWORD *)v131 + 1564) = 0u;
    *((_OWORD *)v131 + 1565) = 0u;
    *((_DWORD *)v131 + 6264) = 0;
    *(_OWORD *)(v131 + 25096) = 0u;
    *(_OWORD *)(v131 + 25112) = 0u;
    *(_OWORD *)(v131 + 25064) = 0u;
    *(_OWORD *)(v131 + 25080) = 0u;
    v131[24600] = 1;
    v131[24610] = 0;
    *((_WORD *)v131 + 12304) = -1;
    v131[27748] = 0;
    *((void *)v131 + 3740) = 0;
    *((void *)v131 + 3741) = 0;
    *((void *)v131 + 3768) = 0;
    *((void *)v131 + 3769) = 0;
    *((void *)v131 + 3794) = 0;
    *((void *)v131 + 3736) = &unk_1F26F0FF8;
    sub_1D0D4DC38(i, (uint64_t)v131);
  }
  uint64_t v132 = a1;
  if (*(unsigned char *)(v572 + 897))
  {
    uint64_t v133 = *(void *)(*(void *)(a1 + 5320) + 576);
    int v134 = *(_DWORD *)(v133 + 216);
    *(_DWORD *)(a1 + 5408) = v134;
    *(void *)(a1 + 5400) = *(void *)(v133 + 192) + 32 * (v134 * v588);
  }
  if (*(unsigned char *)(a1 + 58))
  {
    if (*(unsigned char *)(a1 + 58) == 1) {
      unsigned int v135 = *(unsigned char *)(a1 + 553) == 0;
    }
    else {
      unsigned int v135 = 2;
    }
  }
  else
  {
    unsigned int v135 = *(unsigned __int8 *)(a1 + 553);
  }
  if ((v571 & 0x80000000) == 0)
  {
    uint64_t v136 = 0;
    uint64_t v137 = 0;
    uint64_t v138 = 0;
    do
    {
      *(_DWORD *)(*(void *)(a1 + 1184) + v136) = *(char *)(a1 + 653);
      uint64_t v139 = sub_1D0C976F4(*(void *)(a1 + 5352) + v137, 3* (((2 * v591 * ((v596 * v602) << (2 * v594))) >> v599) + ((v596 * v602) << (2 * v594)) * v605)/ (16 * v610)/ v584);
      if (v139)
      {
        uint64_t v153 = v139;
        if (dword_1EB671A40 >= 3)
        {
          int v450 = (FILE *)*MEMORY[0x1E4F143C8];
          char v451 = "Substream bitstream initialization failed\n";
          uint64_t v452 = "Substream bitstream initialization failed\n";
          size_t v453 = 42;
          goto LABEL_395;
        }
        goto LABEL_396;
      }
      uint64_t v140 = *(void *)(a1 + 5328);
      uint64_t v141 = *(void *)(a1 + 5352) + v137;
      unint64_t v142 = *(void *)(v141 + 32);
      unint64_t v143 = *(void *)(v141 + 40);
      if (*(_DWORD *)(v141 + 52)) {
        BOOL v144 = v142 >= v143;
      }
      else {
        BOOL v144 = 1;
      }
      if (!v144) {
        *(void *)(v141 + 32) = ++v142;
      }
      *(void *)(v141 + 48) = 0;
      *(_OWORD *)(v140 + v138 + 8) = xmmword_1D0D7F200;
      uint64_t v145 = (void *)(v140 + v138 + 8);
      v145[56] = v141;
      v145[57] = v142;
      v145[2] = -1;
      v145[3] = v142;
      v145[4] = v143;
      sub_1D0C60F68((uint64_t)v145, v135, v608);
      v138 += 472;
      v137 += 64;
      v136 += 4;
    }
    while (472 * v584 != v138);
  }
  uint64_t v146 = v586;
  if ((int)v586 >= 1)
  {
    uint64_t v147 = 0;
    while (1)
    {
      uint64_t v587 = v147;
      uint64_t v148 = *(void *)(*(void *)(v132 + 5376) + 8 * v147);
      *(void *)uint64_t v148 = v132;
      *(void *)(v148 + 30360) = 0;
      uint64_t v149 = *(void *)(v132 + 16);
      uint64_t v150 = *(unsigned __int8 *)(v149 + 269);
      *(void *)(v148 + 1056) = *(void *)(v132 + 1568);
      *(void *)(v148 + 14904) = v132;
      *(void *)(v148 + 14912) = v149;
      *(void *)(v148 + 14920) = *(void *)(v132 + 32);
      *(void *)(v148 + 80) = *(void *)(v149 + 204);
      uint64_t v151 = *(void *)(v132 + 4760);
      *(void *)(v148 + 1032) = v151;
      uint64_t v152 = *(void *)(v132 + 5320);
      *(void *)(v148 + 1040) = v152 + 800;
      uint64_t v153 = sub_1D0D3A8F0(v148 + 1064, *(_DWORD *)(v151 + 216), *(unsigned char *)(v151 + 220), *(unsigned __int8 *)(v149 + 2096), *(_DWORD *)(v151 + 96), *(unsigned __int8 *)(v149 + 2099), *(char *)(v152 + 648), 0, v573 + 657);
      sub_1D0D3C9DC(v148 + 1064, *(char *)(v132 + 653), *(unsigned __int8 *)(*(void *)(v148 + 14912) + 2097));
      if (v153)
      {
        if (dword_1EB671A40 >= 3)
        {
          fwrite("RDCost init failed in LCUEnc\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "RDCost init failed in LCUEnc\n");
          if (dword_1EB671A40 >= 3)
          {
            int v450 = (FILE *)*MEMORY[0x1E4F143C8];
            char v451 = "Failed to init thread data\n";
            uint64_t v452 = "Failed to init thread data\n";
            size_t v453 = 27;
            goto LABEL_395;
          }
        }
        goto LABEL_396;
      }
      *(void *)(v148 + 24440) = v132;
      uint64_t v154 = *(void *)(v132 + 16);
      *(void *)(v148 + 24448) = v154;
      *(void *)(v148 + 24456) = *(void *)(v132 + 4760);
      int v155 = *(unsigned __int8 *)(v154 + 2096);
      unint64_t v156 = sub_1D0D3E71C;
      unint64_t v157 = sub_1D0D3E72C;
      uint64_t v158 = sub_1D0D3E744;
      char v159 = sub_1D0D3E75C;
      uint64_t v160 = sub_1D0D3E774;
      if (v155 == 8)
      {
        int v161 = 12;
      }
      else
      {
        int v161 = 50;
        unint64_t v156 = (uint64_t (*)(int))nullsub_26;
        unint64_t v157 = sub_1D0D3E738;
        uint64_t v158 = sub_1D0D3E750;
        char v159 = sub_1D0D3E768;
        uint64_t v160 = sub_1D0D3E8EC;
      }
      *(void *)(v148 + 24184) = v160;
      *(void *)(v148 + 24208) = v159;
      *(void *)(v148 + 24216) = v158;
      *(void *)(v148 + 24224) = v157;
      *(void *)(v148 + 24232) = v156;
      *(_DWORD *)(v148 + 24548) = v161;
      *(void *)(v148 + 24168) = sub_1D0D3E6B8;
      *(void *)(v148 + 24176) = sub_1D0D3E6B8;
      *(void *)(v148 + 24408) = sub_1D0D3E648;
      *(void *)(v148 + 24416) = sub_1D0D3E590;
      *(void *)(v148 + 24424) = sub_1D0D3E4D8;
      *(void *)(v148 + 24432) = sub_1D0D3E424;
      *(void *)(v148 + 24400) = 0;
      int v162 = *(_DWORD *)(v132 + 5436);
      BOOL v163 = __OFSUB__(v162, 1);
      int v164 = v162 - 1;
      if (v164 < 0 == v163) {
        *(void *)(v148 + 24400) = (char *)&unk_1D0DA7758
      }
                                  + 2720 * v164
                                  + 1360
                                  * (*(_DWORD *)(*(void *)(v132 + 16) + 208)
                                   * *(_DWORD *)(*(void *)(v132 + 16) + 204) > 2211840);
      sub_1D0D4A2AC((void *)(v148 + 24240));
      *(void *)(v148 + 24104) = sub_1D0D3DF4C;
      *(void *)(v148 + 24112) = 0;
      *(void *)(v148 + 24120) = sub_1D0D3D624;
      *(void *)(v148 + 24128) = 0;
      *(void *)(v148 + 24136) = sub_1D0D3D254;
      *(void *)(v148 + 24144) = 0;
      *(void *)(v148 + 24152) = sub_1D0D3CBA4;
      *(void *)(v148 + 24160) = 0;
      int v165 = *(unsigned __int8 *)(*(void *)(v148 + 24448) + 2096);
      *(void *)(v148 + 24168) = sub_1D0D7B164;
      *(void *)(v148 + 24176) = sub_1D0D7B0C4;
      *(void *)(v148 + 24408) = sub_1D0D7B054;
      *(void *)(v148 + 24416) = sub_1D0D7AF50;
      *(void *)(v148 + 24424) = sub_1D0D7AE10;
      *(void *)(v148 + 24432) = sub_1D0D7AC8C;
      if (v165 == 8) {
        *(void *)(v148 + 24184) = sub_1D0D7A9E4;
      }
      sub_1D0CE0894(v148 + 1640, v132, v148 + 1064, *(char *)(*(void *)(v148 + 1032) + 236), *(char *)(*(void *)(v148 + 1032) + 236), 8, 1, 2);
      memset((void *)(v148 + 27712), 255, 4 * v150 + 4);
      uint64_t v166 = *(void *)(v148 + 1032);
      int v167 = *(char *)(v166 + 496);
      *(_DWORD *)(v148 + 68) = v167;
      *(unsigned char *)(v148 + 72) = *(unsigned char *)(v166 + 548);
      int v168 = *(char *)(v166 + 132);
      *(_DWORD *)(v148 + 76) = v168;
      *(unsigned char *)(v148 + 260) = v167 == 4;
      *(unsigned char *)(v148 + 64) = v167 > 0;
      if (v167 < 3)
      {
        *(unsigned char *)(v148 + 65) = 0;
        v170.i64[0] = 0x500000005;
        v170.i64[1] = 0x500000005;
        if (v167 == 2)
        {
          int v169 = 1;
        }
        else
        {
          BOOL v171 = v167 > 0 && *(unsigned char *)(v132 + 58) == 2;
          int v169 = v171;
        }
      }
      else
      {
        *(unsigned char *)(v148 + 65) = *(unsigned __int8 *)(v132 + 58) < 2u;
        int v169 = 1;
        v170.i64[0] = 0x500000005;
        v170.i64[1] = 0x500000005;
      }
      uint64_t v172 = v148 + 29808;
      *(_DWORD *)(v148 + 256) = v169;
      BOOL v174 = *(_DWORD *)(v166 + 96) != 36 && (*(unsigned char *)(*(void *)(v132 + 5320) + 648) & 0xFE) == 4;
      *(unsigned char *)(v148 + 268) = v174;
      long long v175 = *(unsigned char **)(v148 + 14912);
      *(unsigned char *)uint64_t v172 = v175[273] != 0;
      unsigned int v176 = *(unsigned __int8 *)(v132 + 58);
      BOOL v177 = v176 <= 1 && v175[272] != 0;
      BOOL v171 = v176 == 2;
      BOOL v178 = v176 < 2;
      *(unsigned char *)(v148 + 29809) = v177;
      *(_DWORD *)(v148 + 88) = *(char *)(*(void *)(v148 + 14904) + 653);
      int v179 = v171;
      if (*(unsigned char *)(v166 + 540)) {
        BOOL v180 = v178;
      }
      else {
        BOOL v180 = 0;
      }
      *(unsigned char *)(v148 + 261) = v180;
      if (!*(unsigned char *)(v166 + 535)) {
        BOOL v178 = 0;
      }
      *(unsigned char *)(v148 + 262) = v178;
      if (*(unsigned char *)(v166 + 202) == 1) {
        int v181 = v179;
      }
      else {
        int v181 = 0;
      }
      if (v168 == 3) {
        int v181 = 0;
      }
      int v182 = v168 == 5 ? 0 : v181;
      *(_DWORD *)(v148 + 264) = v182;
      if (*(void *)(v148 + 24904) == *(void *)(v148 + 24896)) {
        break;
      }
LABEL_315:
      uint64_t v427 = (unsigned __int8 *)(v148 + 84);
      int v428 = *(unsigned __int8 **)(v148 + 1056);
      __int16 v429 = v428 + 8;
      int v431 = *v428;
      int v430 = v428 + 12;
      *(unsigned char *)(v148 + 877) = v431 != 255;
      if (v431 == 255) {
        __int16 v429 = (_DWORD *)(v148 + 80);
      }
      else {
        uint64_t v427 = v430;
      }
      int v432 = *(_DWORD *)v427;
      *(_DWORD *)(v148 + 880) = *v429;
      *(_DWORD *)(v148 + 884) = v432;
      int v433 = *(unsigned __int8 *)(v166 + 233);
      if (*(unsigned char *)(v166 + 233))
      {
        if (*(unsigned __int8 *)(*(void *)(v148 + 14904) + 58) > 1u) {
          int v433 = 0;
        }
        else {
          int v433 = *(unsigned __int8 *)(v148 + 268) + 1;
        }
      }
      *(_DWORD *)(v148 + 280) = v433;
      int v434 = sub_1D0D084E8;
      if (!*(void *)(*(void *)(v132 + 5320) + 536))
      {
        int v434 = sub_1D0D08610;
        if ((*(unsigned char *)(v166 + 133) & 0xFB) != 0) {
          int v434 = sub_1D0D0855C;
        }
      }
      unint64_t v435 = 0;
      *(void *)(v148 + 1048) = v434;
      int v436 = *(unsigned __int8 **)(v148 + 14912);
      uint64_t v437 = v148 + 24616;
      do
      {
        uint64_t v438 = 0;
        unsigned int v439 = v436[2117];
        unsigned int v440 = v439 >> v435;
        uint64_t v441 = v148 + 8 * v435;
        uint64_t v442 = *(void *)(v441 + 24744);
        *(unsigned char *)(v442 + 1) = v439;
        *(unsigned char *)uint64_t v442 = v439 >> v435;
        **(unsigned char **)(v442 + 136) = v439 >> v435;
        int v443 = v439 >> v435 >> 1;
        int v444 = 1 << *(unsigned char *)(*(void *)(v148 + 14912) + 2116);
        if (v443 > v444) {
          LOBYTE(v444) = v443;
        }
        *(unsigned char *)(*(void *)(*(void *)(v441 + 24744) + 136) + 1) = v444;
        **(unsigned char **)(v441 + 24776) = v440;
        int v445 = 1 << *(unsigned char *)(*(void *)(v148 + 14912) + 2116);
        if (v443 > v445) {
          LOBYTE(v445) = v443;
        }
        uint64_t v446 = (unsigned char **)(v441 + 24776);
        *(unsigned char *)(*(void *)(v441 + 24776) + 1) = v445;
        do
        {
          uint64_t v447 = *(void *)(v437 + v438);
          if (v447)
          {
            *(unsigned char *)(v447 + 1) = *(unsigned char *)(*(void *)(v148 + 14912) + 2117);
            *(unsigned char *)uint64_t v447 = v440;
            **(unsigned char **)(v447 + 136) = **v446;
            *(unsigned char *)(*(void *)(*(void *)(v437 + v438) + 136) + 1) = (*v446)[1];
          }
          v438 += 8;
        }
        while (v438 != 32);
        int v436 = *(unsigned __int8 **)(v148 + 14912);
        v437 += 32;
        BOOL v144 = v435++ >= v436[269];
      }
      while (!v144);
      int v448 = *(_DWORD *)(v132 + 4000);
      *(_DWORD *)(v148 + 232) = *(_DWORD *)(v148 + 88);
      *(_DWORD *)(v148 + 236) = v448;
      *(_DWORD *)(v148 + 240) = *(_DWORD *)(v132 + 4004);
      *(_DWORD *)(v148 + 244) = *(_DWORD *)(v132 + 4008);
      *(_DWORD *)(v148 + 248) = *(_DWORD *)(v132 + 4012);
      *(_DWORD *)(v148 + 252) = *(_DWORD *)(v132 + 4016);
      *(void *)(v148 + 224) = 0xFFFFFFFFLL;
      if (v436[2096] <= 8u) {
        int v449 = 25;
      }
      else {
        int v449 = 400;
      }
      *(_DWORD *)(v172 + 4) = v449;
      uint64_t v147 = v587 + 1;
      uint64_t v146 = v586;
      if (v587 + 1 == v586) {
        goto LABEL_340;
      }
    }
    int v183 = *(_DWORD *)(v148 + 25056);
    if (v175[2096] == 8)
    {
      if (v183 != 1)
      {
        *(_DWORD *)(v148 + 25056) = 1;
        uint64_t v184 = *(void *)(v148 + 25040);
        *(void *)(v148 + 25040) = 0;
        if (v184)
        {
          MEMORY[0x1D25F01F0](v184, 0x1000C8077774924, (__n128)0);
          v170.i64[0] = 0x500000005;
          v170.i64[1] = 0x500000005;
          long long v175 = *(unsigned char **)(v148 + 14912);
        }
      }
      *(void *)(v148 + 25048) = 0;
      uint64_t v185 = 4 * v175[2117] + 32;
      if (*(void *)(v148 + 24816) < (unint64_t)(4 * v185))
      {
        *(void *)(v148 + 24816) = 4 * v185;
        memptr = 0;
        if (malloc_type_posix_memalign(&memptr, 0x20uLL, 4 * v185, 0x55B6168FuLL)) {
          goto LABEL_542;
        }
        int v186 = *(void **)(v148 + 24808);
        *(void *)(v148 + 24808) = memptr;
        v170.i64[0] = 0x500000005;
        v170.i64[1] = 0x500000005;
        if (v186)
        {
          free(v186);
          v170.i64[0] = 0x500000005;
          v170.i64[1] = 0x500000005;
        }
      }
      uint64_t v187 = *(void *)(v148 + 24808);
      *(void *)(v148 + 24824) = v187 + 32;
      *(void *)(v148 + 24832) = v187 + v185 + 32;
      *(void *)(v148 + 24840) = v187 + 2 * v185 + 32;
      uint64_t v188 = 3 * v185;
      uint64_t v189 = sub_1D0D0A5E0;
      uint64_t v190 = sub_1D0D0B11C;
      int v191 = sub_1D0D0BC74;
      int v192 = sub_1D0D0BCBC;
    }
    else
    {
      if (v183 != 2)
      {
        *(_DWORD *)(v148 + 25056) = 2;
        uint64_t v193 = *(void *)(v148 + 25040);
        *(void *)(v148 + 25040) = 0;
        if (v193)
        {
          MEMORY[0x1D25F01F0](v193, 0x1000C8077774924, (__n128)0);
          v170.i64[0] = 0x500000005;
          v170.i64[1] = 0x500000005;
          long long v175 = *(unsigned char **)(v148 + 14912);
        }
      }
      *(void *)(v148 + 25048) = 0;
      uint64_t v194 = 4 * v175[2117] + 16;
      if (*(void *)(v148 + 24816) < (unint64_t)(8 * v194))
      {
        *(void *)(v148 + 24816) = 8 * v194;
        memptr = 0;
        if (malloc_type_posix_memalign(&memptr, 0x20uLL, 8 * v194, 0x55B6168FuLL))
        {
LABEL_542:
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v566 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v566, (struct type_info *)&unk_1F26F0F80, MEMORY[0x1E4FBA2C0]);
        }
        unsigned int v195 = *(void **)(v148 + 24808);
        *(void *)(v148 + 24808) = memptr;
        v170.i64[0] = 0x500000005;
        v170.i64[1] = 0x500000005;
        if (v195)
        {
          free(v195);
          v170.i64[0] = 0x500000005;
          v170.i64[1] = 0x500000005;
        }
      }
      uint64_t v187 = *(void *)(v148 + 24808);
      *(void *)(v148 + 24824) = v187 + 32;
      *(void *)(v148 + 24832) = v187 + 2 * v194 + 32;
      *(void *)(v148 + 24840) = v187 + 4 * v194 + 32;
      uint64_t v188 = 6 * v194;
      uint64_t v189 = sub_1D0D089C8;
      uint64_t v190 = sub_1D0D09954;
      int v191 = sub_1D0D0A524;
      int v192 = sub_1D0D0A574;
    }
    *(void *)(v148 + 24848) = v187 + v188 + 32;
    *(void *)(v148 + 29816) = v192;
    *(void *)(v148 + 29824) = v191;
    *(void *)(v148 + 29832) = v190;
    *(void *)(v148 + 29840) = 0;
    *(void *)(v148 + 29848) = v189;
    *(void *)(v148 + 29856) = 0;
    int v196 = *(unsigned __int8 **)(v148 + 14912);
    int v197 = v196[2117];
    uint64_t v609 = v196[2113];
    int32x4_t v198 = vdupq_n_s32(v609);
    int v199 = ~v196[270];
    int v200 = (v196[269] + 4) & 0x1FC;
    unint64_t v595 = v196[269];
    v2.i32[0] = v196[269];
    int32x4_t v201 = 0uLL;
    int32x4_t v202 = 0uLL;
    int32x4_t v203 = 0uLL;
    int32x4_t v204 = (int32x4_t)xmmword_1D0D7F240;
    int32x4_t v205 = 0uLL;
    int32x4_t v206 = 0uLL;
    int32x4_t v207 = 0uLL;
    v208.i64[0] = 0x100000001;
    v208.i64[1] = 0x100000001;
    v209.i64[0] = 0x100000001;
    v209.i64[1] = 0x100000001;
    v210.i64[0] = 0x400000004;
    v210.i64[1] = 0x400000004;
    v211.i64[0] = 0x200000002;
    v211.i64[1] = 0x200000002;
    do
    {
      int8x16_t v212 = (int8x16_t)v207;
      int32x4_t v213 = v206;
      int32x4_t v214 = v205;
      int32x4_t v215 = v204;
      int8x16_t v216 = (int8x16_t)v203;
      int8x16_t v217 = (int8x16_t)v202;
      int8x16_t v218 = (int8x16_t)v201;
      int32x4_t v219 = vsubq_s32(v198, v204);
      uint32x4_t v220 = (uint32x4_t)vaddq_s32(v219, v208);
      int8x16_t v221 = (int8x16_t)vshlq_u32((uint32x4_t)v209, (uint32x4_t)vaddq_s32(v219, v219));
      int32x4_t v222 = (int32x4_t)vshrq_n_u32((uint32x4_t)v221, 4uLL);
      int32x4_t v223 = vceqzq_s32(v215);
      int32x4_t v224 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v210, (int8x16_t)v223), v223);
      int32x4_t v225 = vaddq_s32(v224, v209);
      int32x4_t v201 = vaddq_s32(v201, v225);
      int32x4_t v202 = vmlaq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v209, v220), v202), (int32x4_t)vshrq_n_u32((uint32x4_t)v221, 6uLL), v225);
      int32x4_t v203 = vaddq_s32(vmlaq_s32(vaddq_s32(v203, (int32x4_t)vshlq_u32((uint32x4_t)v211, v220)), v222, v225), v210);
      unsigned long long v226 = *(_OWORD *)&v224 | __PAIR128__(0x200000002, 0x200000002);
      int32x4_t v207 = vaddq_s32((int32x4_t)v226, v207);
      int32x4_t v206 = vmlaq_s32(v206, (int32x4_t)vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v221, 1uLL), v221), (int32x4_t)v226);
      int32x4_t v205 = vmlaq_s32(v205, (int32x4_t)vorrq_s8((int8x16_t)v222, (int8x16_t)vshrq_n_u32((uint32x4_t)v221, 5uLL)), (int32x4_t)v226);
      int32x4_t v204 = vaddq_s32(v215, v210);
      v200 -= 4;
    }
    while (v200);
    unsigned int v227 = v199 + v609;
    uint64_t v228 = v196[2115];
    signed int v229 = v609 - v228;
    uint64_t v585 = v609 - v228;
    int32x4_t v611 = v205;
    int8x16_t v603 = (int8x16_t)v214;
    int32x4_t v606 = v206;
    int8x16_t v600 = (int8x16_t)v213;
    if (!v196[273] && !v196[272]) {
      goto LABEL_215;
    }
    if (v229 >= 1)
    {
      int8x16_t v589 = v217;
      int8x16_t v592 = v212;
      int32x4_t v577 = v202;
      int8x16_t v580 = v216;
      int32x4_t v574 = v203;
      bzero((void *)(v148 + 312), 32 * (~v228 + v609) + 32);
      int32x4_t v203 = v574;
      int32x4_t v202 = v577;
      int8x16_t v216 = v580;
      int8x16_t v217 = v589;
      int8x16_t v212 = v592;
      signed int v229 = v609 - v228;
      unsigned int v227 = v199 + v609;
      v170.i64[0] = 0x500000005;
      v170.i64[1] = 0x500000005;
      v211.i64[0] = 0x200000002;
      v211.i64[1] = 0x200000002;
      v210.i64[0] = 0x400000004;
      v210.i64[1] = 0x400000004;
      v209.i64[0] = 0x100000001;
      v209.i64[1] = 0x100000001;
    }
    if (v229 < v227)
    {
      int v230 = (v199 + v228 + 3) & 0xFFFFFFFC;
      int32x4_t v231 = vdupq_n_s32(v229);
      int32x4_t v232 = vaddq_s32(v231, (int32x4_t)xmmword_1D0D7F240);
      int32x4_t v233 = vdupq_n_s32(*(unsigned __int8 *)(*(void *)(v148 + 14912) + 2116));
      int8x16_t v234 = 0uLL;
      int8x16_t v235 = 0uLL;
      int8x16_t v236 = 0uLL;
      do
      {
        int32x4_t v237 = (int32x4_t)v236;
        int32x4_t v238 = (int32x4_t)v235;
        int32x4_t v239 = (int32x4_t)v234;
        int32x4_t v240 = vsubq_s32(v198, v232);
        uint32x4_t v241 = (uint32x4_t)vaddq_s32(v240, v240);
        uint32x4_t v242 = vshlq_u32((uint32x4_t)v209, v241);
        int8x16_t v243 = (int8x16_t)vceqq_s32(v240, v233);
        uint32x4_t v244 = (uint32x4_t)vbslq_s8(v243, (int8x16_t)vshlq_u32((uint32x4_t)v211, v241), (int8x16_t)vshrq_n_u32(v242, 1uLL));
        int32x4_t v245 = vceqq_s32(v232, v231);
        int32x4_t v246 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v210, (int8x16_t)v245), v245);
        uint32x4_t v247 = (uint32x4_t)vbicq_s8(v211, (int8x16_t)v245);
        int8x16_t v248 = vorrq_s8((int8x16_t)v245, v243);
        int8x16_t v236 = (int8x16_t)vaddq_s32(v246, v237);
        uint32x4_t v249 = (uint32x4_t)vbicq_s8(v211, v248);
        int8x16_t v235 = (int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v246, v241), v238), (int32x4_t)vshlq_u32(v244, v249));
        int8x16_t v234 = (int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v242, 4uLL), v247), v239), (int32x4_t)vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v170, v241), v211, (int8x16_t)vshrq_n_u32(v242, 5uLL)), v249));
        int32x4_t v232 = vaddq_s32(v232, v210);
        v230 -= 4;
      }
      while (v230);
      v204.i32[0] = v199 + v228 - 1;
      int8x16_t v250 = (int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v204.i32[0] & 0xFFFFFFFC), (int8x16_t)xmmword_1D0D7F240), (uint32x4_t)vdupq_lane_s32(*(int32x2_t *)v204.i8, 0));
      int v251 = vaddvq_s32((int32x4_t)vbslq_s8(v250, (int8x16_t)v237, v236));
      int v252 = vaddvq_s32((int32x4_t)vbslq_s8(v250, (int8x16_t)v238, v235));
      int v253 = vaddvq_s32((int32x4_t)vbslq_s8(v250, (int8x16_t)v239, v234));
    }
    else
    {
LABEL_215:
      int v251 = 0;
      int v252 = 0;
      int v253 = 0;
    }
    int8x16_t v254 = (int8x16_t)vcgtq_u32((uint32x4_t)v215, (uint32x4_t)vdupq_lane_s32(v2, 0));
    unsigned int v255 = vaddvq_s32((int32x4_t)vbslq_s8(v254, v218, (int8x16_t)v201));
    uint64_t v256 = v255;
    uint64_t v257 = *(void *)(v148 + 24904);
    uint64_t v258 = *(void *)(v148 + 24896);
    unint64_t v259 = 0xEEEEEEEEEEEEEEEFLL * ((v257 - v258) >> 4);
    unint64_t v260 = v255 - v259;
    unsigned int v583 = v227;
    int8x16_t v597 = v254;
    if (v255 <= v259)
    {
      if (v255 >= v259) {
        goto LABEL_241;
      }
      for (uint64_t j = v258 + 240 * v255; v257 != j; v257 -= 240)
      {
        *(_OWORD *)(v257 - 88) = 0uLL;
        *(_OWORD *)(v257 - 104) = 0uLL;
        *(_OWORD *)(v257 - 120) = 0uLL;
        *(_OWORD *)(v257 - 136) = 0uLL;
        *(_OWORD *)(v257 - 152) = 0uLL;
      }
    }
    else
    {
      uint64_t v261 = *(void *)(v148 + 24912);
      if (0xEEEEEEEEEEEEEEEFLL * ((v261 - v257) >> 4) < v260)
      {
        int32x4_t v575 = v203;
        int32x4_t v578 = v202;
        int8x16_t v581 = v216;
        int8x16_t v590 = v217;
        int8x16_t v593 = v212;
        unint64_t v262 = 0xEEEEEEEEEEEEEEEFLL * ((v261 - v258) >> 4);
        uint64_t v263 = 2 * v262;
        if (2 * v262 <= v255) {
          uint64_t v263 = v255;
        }
        if (v262 >= 0x88888888888888) {
          unint64_t v264 = 0x111111111111111;
        }
        else {
          unint64_t v264 = v263;
        }
        if (v264 > 0x111111111111111) {
          goto LABEL_541;
        }
        int v265 = (char *)operator new(240 * v264);
        uint64_t v266 = &v265[240 * v259];
        uint64_t v267 = &v265[240 * v256];
        uint64_t v268 = 240 * v256 - 240 * v259;
        unsigned int v269 = v266 + 232;
        do
        {
          unsigned char *v269 = 0;
          *((_OWORD *)v269 - 13) = 0uLL;
          *((_OWORD *)v269 - 12) = 0uLL;
          *((_OWORD *)v269 - 11) = 0uLL;
          *((_OWORD *)v269 - 10) = 0uLL;
          v269 += 240;
          v268 -= 240;
        }
        while (v268);
        uint64_t v270 = &v265[240 * v264];
        double v271 = *(char **)(v148 + 24904);
        int v272 = *(char **)(v148 + 24896);
        int8x16_t v254 = v597;
        int8x16_t v217 = v590;
        int8x16_t v212 = v593;
        int32x4_t v202 = v578;
        int8x16_t v216 = v581;
        int32x4_t v203 = v575;
        if (v271 == v272)
        {
          *(void *)(v148 + 24896) = v266;
          *(void *)(v148 + 24904) = v267;
          *(void *)(v148 + 24912) = v270;
          if (!v271) {
            goto LABEL_241;
          }
        }
        else
        {
          do
          {
            long long v273 = *((_OWORD *)v271 - 15);
            long long v274 = *((_OWORD *)v271 - 13);
            *((_OWORD *)v266 - 14) = *((_OWORD *)v271 - 14);
            *((_OWORD *)v266 - 13) = v274;
            *((_OWORD *)v266 - 15) = v273;
            long long v275 = *((_OWORD *)v271 - 12);
            long long v276 = *((_OWORD *)v271 - 11);
            long long v277 = *((_OWORD *)v271 - 9);
            *((_OWORD *)v266 - 10) = *((_OWORD *)v271 - 10);
            *((_OWORD *)v266 - 9) = v277;
            *((_OWORD *)v266 - 12) = v275;
            *((_OWORD *)v266 - 11) = v276;
            long long v278 = *((_OWORD *)v271 - 8);
            long long v279 = *((_OWORD *)v271 - 7);
            long long v280 = *((_OWORD *)v271 - 5);
            *((_OWORD *)v266 - 6) = *((_OWORD *)v271 - 6);
            *((_OWORD *)v266 - 5) = v280;
            *((_OWORD *)v266 - 8) = v278;
            *((_OWORD *)v266 - 7) = v279;
            long long v281 = *((_OWORD *)v271 - 4);
            long long v282 = *((_OWORD *)v271 - 3);
            long long v283 = *((_OWORD *)v271 - 1);
            *((_OWORD *)v266 - 2) = *((_OWORD *)v271 - 2);
            *((_OWORD *)v266 - 1) = v283;
            *((_OWORD *)v266 - 4) = v281;
            *((_OWORD *)v266 - 3) = v282;
            v266 -= 240;
            v271 -= 240;
          }
          while (v271 != v272);
          double v271 = *(char **)(v148 + 24896);
          int v284 = *(char **)(v148 + 24904);
          *(void *)(v148 + 24896) = v266;
          *(void *)(v148 + 24904) = v267;
          for (*(void *)(v148 + 24912) = v270; v284 != v271; v284 -= 240)
          {
            *(_OWORD *)(v284 - 88) = 0uLL;
            *(_OWORD *)(v284 - 104) = 0uLL;
            *(_OWORD *)(v284 - 120) = 0uLL;
            *(_OWORD *)(v284 - 136) = 0uLL;
            *(_OWORD *)(v284 - 152) = 0uLL;
          }
          if (!v271)
          {
LABEL_241:
            int v288 = vaddvq_s32((int32x4_t)vbslq_s8(v254, v212, (int8x16_t)v207));
            unint64_t v289 = vaddvq_s32((int32x4_t)vbslq_s8(v254, v216, (int8x16_t)v203));
            sub_1D0C8F4F4((char **)(v148 + 24920), vaddvq_s32((int32x4_t)vbslq_s8(v254, v217, (int8x16_t)v202)));
            sub_1D0C8F60C((char **)(v148 + 24944), v289);
            unsigned int v582 = v288;
            unint64_t v290 = (v251 + v288);
            uint64_t v291 = *(void *)(v148 + 24976);
            uint64_t v292 = *(void *)(v148 + 24968);
            unint64_t v293 = 0xEEEEEEEEEEEEEEEFLL * ((v291 - v292) >> 3);
            unint64_t v294 = v290 - v293;
            if (v290 <= v293)
            {
              int8x16_t v296 = (int8x16_t)v611;
              int8x16_t v298 = v603;
              int8x16_t v297 = (int8x16_t)v606;
              int8x16_t v299 = v600;
              if (v290 >= v293) {
                goto LABEL_266;
              }
              for (uint64_t k = v292 + 120 * v290; v291 != k; v291 -= 120)
              {
                *(_OWORD *)(v291 - 96) = 0uLL;
                *(_OWORD *)(v291 - 80) = 0uLL;
                *(_OWORD *)(v291 - 112) = 0uLL;
              }
            }
            else
            {
              uint64_t v295 = *(void *)(v148 + 24984);
              int8x16_t v296 = (int8x16_t)v611;
              int8x16_t v298 = v603;
              int8x16_t v297 = (int8x16_t)v606;
              int8x16_t v299 = v600;
              if (0xEEEEEEEEEEEEEEEFLL * ((v295 - v291) >> 3) < v294)
              {
                unint64_t v300 = 0xEEEEEEEEEEEEEEEFLL * ((v295 - v292) >> 3);
                uint64_t v301 = 2 * v300;
                if (2 * v300 <= v290) {
                  uint64_t v301 = v290;
                }
                if (v300 >= 0x111111111111111) {
                  unint64_t v302 = 0x222222222222222;
                }
                else {
                  unint64_t v302 = v301;
                }
                if (v302 > 0x222222222222222) {
                  goto LABEL_541;
                }
                char v303 = (char *)operator new(120 * v302);
                unint64_t v304 = &v303[120 * v293];
                uint64_t v305 = &v303[120 * v290];
                uint64_t v306 = 120 * v290 - 120 * v293;
                uint64_t v307 = v304 + 8;
                do
                {
                  v307[3] = 0uLL;
                  v307[4] = 0uLL;
                  v307[1] = 0uLL;
                  v307[2] = 0uLL;
                  *uint64_t v307 = 0uLL;
                  uint64_t v307 = (_OWORD *)((char *)v307 + 120);
                  v306 -= 120;
                }
                while (v306);
                uint64_t v308 = &v303[120 * v302];
                uint64_t v309 = *(char **)(v148 + 24976);
                uint64_t v310 = *(char **)(v148 + 24968);
                int8x16_t v296 = (int8x16_t)v611;
                int8x16_t v298 = v603;
                int8x16_t v297 = (int8x16_t)v606;
                int8x16_t v299 = v600;
                if (v309 != v310)
                {
                  do
                  {
                    long long v311 = *(_OWORD *)(v309 - 120);
                    long long v312 = *(_OWORD *)(v309 - 104);
                    long long v313 = *(_OWORD *)(v309 - 88);
                    *(_OWORD *)(v304 - 72) = *(_OWORD *)(v309 - 72);
                    *(_OWORD *)(v304 - 88) = v313;
                    *(_OWORD *)(v304 - 104) = v312;
                    *(_OWORD *)(v304 - 120) = v311;
                    long long v314 = *(_OWORD *)(v309 - 56);
                    long long v315 = *(_OWORD *)(v309 - 40);
                    long long v316 = *(_OWORD *)(v309 - 24);
                    *((void *)v304 - 1) = *((void *)v309 - 1);
                    *(_OWORD *)(v304 - 24) = v316;
                    *(_OWORD *)(v304 - 40) = v315;
                    *(_OWORD *)(v304 - 56) = v314;
                    v304 -= 120;
                    v309 -= 120;
                  }
                  while (v309 != v310);
                  uint64_t v309 = *(char **)(v148 + 24968);
                  char v317 = *(char **)(v148 + 24976);
                  *(void *)(v148 + 24968) = v304;
                  *(void *)(v148 + 24976) = v305;
                  for (*(void *)(v148 + 24984) = v308; v317 != v309; v317 -= 120)
                  {
                    *((_OWORD *)v317 - 6) = 0uLL;
                    *((_OWORD *)v317 - 5) = 0uLL;
                    *((_OWORD *)v317 - 7) = 0uLL;
                  }
                  if (!v309) {
                    goto LABEL_266;
                  }
                  goto LABEL_265;
                }
                *(void *)(v148 + 24968) = v304;
                *(void *)(v148 + 24976) = v305;
                *(void *)(v148 + 24984) = v308;
                if (v309)
                {
LABEL_265:
                  operator delete(v309);
                  int8x16_t v299 = v600;
                  int8x16_t v298 = v603;
                  int8x16_t v297 = (int8x16_t)v606;
                  int8x16_t v296 = (int8x16_t)v611;
                }
LABEL_266:
                int v321 = vaddvq_s32((int32x4_t)vbslq_s8(v597, v298, v296));
                unsigned int v579 = vaddvq_s32((int32x4_t)vbslq_s8(v597, v299, v297));
                sub_1D0D088B8((char **)(v148 + 24992), v252 + v579);
                unsigned int v576 = v321;
                unint64_t v322 = (v253 + v321);
                uint64_t v323 = *(void *)(v148 + 25016);
                unint64_t v324 = *(void *)(v148 + 25024) - v323;
                if (v322 <= v324)
                {
                  if (v322 < v324) {
                    *(void *)(v148 + 25024) = v323 + v322;
                  }
                }
                else
                {
                  sub_1D0C4CCE0((unint64_t *)(v148 + 25016), v322 - v324);
                }
                unint64_t v325 = 0;
                uint64_t v326 = *(void *)(v148 + 24896);
                *(void *)(v148 + 24744) = v326;
                *(void *)(v326 + 88) = *(void *)(v148 + 24920);
                *(void *)(*(void *)(v148 + 24744) + 96) = *(void *)(v148 + 24944);
                uint64_t v327 = (v197 * v197);
                uint64_t v328 = (void *)(v148 + 25040);
                *(void *)(v148 + 25064) = v148 + 25040;
                uint64_t v329 = *(void *)(v148 + 25048);
                *(void *)(v148 + 25072) = v329;
                uint64_t v330 = v327 >> 1;
                *(void *)(v148 + 25080) = v148 + 25040;
                *(void *)(v148 + 25088) = v329 + v327;
                uint64_t v331 = v329 + v327 + v330;
                *(void *)(v148 + 25096) = v148 + 25040;
                uint64_t v332 = v331 + v327;
                *(void *)(v148 + 25104) = v331;
                *(void *)(v148 + 25112) = v148 + 25040;
                uint64_t v333 = v332 + v330;
                *(void *)(v148 + 25048) = v332 + v330;
                *(void *)(v148 + 25120) = v332;
                uint64_t v334 = *(void *)(v148 + 24744);
                *(void *)(v334 + 24) = v148 + 25040;
                *(void *)(v334 + 32) = v329;
                uint64_t v335 = *(void *)(v148 + 24744);
                *(void *)(v335 + 40) = *(void *)(v148 + 25080);
                *(void *)(v335 + 48) = *(void *)(v148 + 25088);
                uint64_t v336 = *(void *)(v148 + 24744);
                *(void *)(v336 + 56) = *(void *)(v148 + 25096);
                *(void *)(v336 + 64) = *(void *)(v148 + 25104);
                uint64_t v337 = *(void *)(v148 + 24744);
                *(void *)(v337 + 72) = *(void *)(v148 + 25112);
                *(void *)(v337 + 80) = *(void *)(v148 + 25120);
                *(void *)(*(void *)(v148 + 24744) + 136) = *(void *)(v148 + 24968);
                *(void *)(*(void *)(*(void *)(v148 + 24744) + 136) + 32) = *(void *)(v148 + 24992);
                *(void *)(*(void *)(*(void *)(v148 + 24744) + 136) + 8) = *(void *)(v148 + 25016);
                do
                {
                  char v607 = v609 - v325 - 2;
                  unsigned int v338 = 1 << v607;
                  uint64_t v339 = (1 << (2 * (v609 - v325)));
                  uint64_t v340 = v339 >> 1;
                  uint64_t v341 = v339 >> 4;
                  uint64_t v342 = v339 >> 6;
                  if (v325) {
                    uint64_t v343 = 4;
                  }
                  else {
                    uint64_t v343 = 1;
                  }
                  uint64_t v344 = v148 + 8 * v325 + 24744;
                  *(void *)(*(void *)v344 + 152) = *(void *)(v148 + 24840);
                  *(void *)(*(void *)v344 + 160) = *(void *)(v148 + 24848);
                  int v345 = v343 + 1;
                  uint64_t v601 = (v342 * (v343 + 1));
                  *(void *)(*(void *)v344 + 104) = *(void *)(*(void *)v344 + 88) + 2 * v601;
                  *(void *)(*(void *)v344 + 112) = *(void *)(*(void *)v344 + 104) + (v338 & 0xFFFFFFFE);
                  uint64_t v598 = (v341 * (v343 + 1));
                  *(void *)(*(void *)v344 + 120) = *(void *)(*(void *)v344 + 96) + 16 * v598;
                  uint64_t v604 = (1 << (v609 - v325 - 2));
                  *(void *)(*(void *)v344 + 128) = *(void *)(*(void *)v344 + 120) + 16 * v338 + 32;
                  uint64_t v346 = *(void *)(*(void *)v344 + 136);
                  *(void *)(v346 + 56) = v328;
                  *(void *)(v346 + 64) = v333;
                  uint64_t v347 = *(void *)(*(void *)v344 + 136);
                  *(void *)(v347 + 72) = v328;
                  *(void *)(v347 + 80) = v333 + v339;
                  int v348 = *(void **)(*(void *)v344 + 136);
                  uint64_t v349 = v348[4] + 2 * v339;
                  uint64_t v350 = v339 >> 2;
                  unsigned int v351 = v339 | (v339 >> 1);
                  uint64_t v352 = v341 | (v339 >> 5);
                  uint64_t v353 = v348[1] + v341;
                  uint64_t v354 = v148 + 24616 + 32 * v325;
                  uint64_t v355 = v333 + v340;
                  v348[5] = v349;
                  v348[6] = v349 + 2 * v350;
                  uint64_t v612 = v339 >> 1;
                  uint64_t v356 = v340 | v339;
                  uint64_t v357 = 392;
                  uint64_t v358 = 2 * (v339 >> 6);
                  uint64_t v359 = 16 * (v339 >> 4);
                  v348[2] = v353;
                  v348[3] = v353 + v342;
                  uint64_t v360 = 120;
                  unsigned int v361 = v351;
                  uint64_t v362 = v352;
                  uint64_t v363 = v343;
                  do
                  {
                    uint64_t v364 = (void *)(*(void *)v344 + v357);
                    *(void *)uint64_t v354 = v364 - 19;
                    *uint64_t v364 = *(void *)(v148 + 24840);
                    *(void *)(*(void *)v354 + 160) = *(void *)(v148 + 24848);
                    *(void *)(*(void *)v354 + 88) = *(void *)(*(void *)v344 + 88) + v358;
                    *(void *)(*(void *)v354 + 104) = *(void *)(*(void *)v344 + 104);
                    *(void *)(*(void *)v354 + 112) = *(void *)(*(void *)v344 + 112);
                    *(void *)(*(void *)v354 + 96) = *(void *)(*(void *)v344 + 96) + v359;
                    *(void *)(*(void *)v354 + 120) = *(void *)(*(void *)v344 + 120);
                    *(void *)(*(void *)v354 + 128) = *(void *)(*(void *)v344 + 128);
                    *(void *)(*(void *)v354 + 136) = *(void *)(*(void *)v344 + 136) + v360;
                    *(void *)(*(void *)(*(void *)v354 + 136) + 32) = *(void *)(*(void *)(*(void *)v344 + 136)
                                                                                         + 32)
                                                                             + 2 * v361;
                    *(void *)(*(void *)(*(void *)v354 + 136) + 8) = *(void *)(*(void *)(*(void *)v344 + 136)
                                                                                        + 8)
                                                                            + v362;
                    uint64_t v365 = *(void *)(*(void *)v354 + 136);
                    *(void *)(v365 + 56) = v328;
                    *(void *)(v365 + 64) = v339 + v355;
                    uint64_t v366 = *(void *)(*(void *)v354 + 136);
                    *(void *)(v366 + 72) = v328;
                    *(void *)(v366 + 80) = 2 * (1 << (2 * (v609 - v325))) + v355;
                    uint64_t v367 = *(void *)v354;
                    v354 += 8;
                    int v368 = *(void **)(v367 + 136);
                    uint64_t v369 = v368[4] + 2 * v339;
                    uint64_t v370 = v368[1] + v341;
                    v368[5] = v369;
                    v368[6] = v369 + 2 * v350;
                    v362 += v352;
                    v361 += v351;
                    v360 += 120;
                    v359 += 16 * (v339 >> 4);
                    v368[2] = v370;
                    v368[3] = v370 + v342;
                    v358 += 2 * (v339 >> 6);
                    v357 += 240;
                    v355 += v356;
                    --v363;
                  }
                  while (v363);
                  uint64_t v371 = *(void *)v344;
                  uint64_t v372 = *(void *)(*(void *)v344 + 136) + 120 * v343;
                  uint64_t v373 = v148 + 8 * v325;
                  *(void *)(v373 + 24776) = v372 + 120;
                  *(void *)(v372 + 152) = *(void *)(*(void *)(v371 + 136) + 32) + 2 * v351 * v345;
                  *(void *)(*(void *)(v373 + 24776) + 8) = *(void *)(*(void *)(*(void *)v344 + 136) + 8)
                                                               + (v352 * v345);
                  uint64_t v374 = *(void *)(v373 + 24776);
                  uint64_t v375 = v339 + v355 + v339;
                  *(void *)(v374 + 56) = v328;
                  *(void *)(v374 + 64) = v339 + v355;
                  uint64_t v376 = *(void *)(v373 + 24776);
                  *(void *)(v376 + 72) = v328;
                  *(void *)(v376 + 80) = v375;
                  unint64_t v377 = *(void **)(v373 + 24776);
                  uint64_t v378 = v377[4] + 2 * v339;
                  v377[5] = v378;
                  v377[6] = v378 + 2 * v350;
                  uint64_t v379 = v377[1] + v341;
                  v377[2] = v379;
                  v377[3] = v379 + v342;
                  if (v325 >= v595)
                  {
                    ++v325;
                  }
                  else
                  {
                    uint64_t v380 = *(void *)v344;
                    uint64_t v381 = *(void *)v344 + 240 * v343;
                    ++v325;
                    uint64_t v382 = v148 + 8 * v325;
                    *(void *)(v382 + 24744) = v381 + 240;
                    *(void *)(v381 + 328) = *(void *)(v380 + 88) + 2 * v601 + 2 * v604;
                    *(void *)(*(void *)(v382 + 24744) + 96) = *(void *)(*(void *)v344 + 96)
                                                                  + 16 * v598
                                                                  + 16 * ((2 << v607) + 4);
                    unsigned int v383 = v343 | 2;
                    *(void *)(*(void *)(v382 + 24744) + 136) = *(void *)(*(void *)v344 + 136) + 120 * v383;
                    *(void *)(*(void *)(*(void *)(v382 + 24744) + 136) + 32) = *(void *)(*(void *)(*(void *)v344 + 136) + 32)
                                                                                       + 2 * v351 * v383;
                    *(void *)(*(void *)(*(void *)(v382 + 24744) + 136) + 8) = *(void *)(*(void *)(*(void *)v344 + 136)
                                                                                                  + 8)
                                                                                      + v352 * v383;
                  }
                  uint64_t v333 = v375 + v612;
                }
                while (v325 != v595 + 1);
                *(void *)(v148 + 25048) = v333;
                uint64_t v384 = *(void *)(v148 + 14912);
                if (*(unsigned char *)(v384 + 273) || *(unsigned char *)(v384 + 272))
                {
                  uint64_t v385 = *(void *)(v148 + 24968) + 120 * v582;
                  unsigned int v386 = (void *)(v148 + 32 * v585);
                  v386[39] = v385;
                  *(void *)(v385 + 32) = *(void *)(v148 + 24992) + 2 * v579;
                  *(void *)(v386[39] + 8) = *(void *)(v148 + 25016) + v576;
                  if (v585 < v583)
                  {
                    uint64_t v387 = v585;
                    do
                    {
                      int v388 = v609 - v387;
                      unsigned int v389 = 2 * (v609 - v387);
                      uint64_t v390 = (1 << (2 * (v609 - v387)));
                      int v391 = *(unsigned __int8 *)(*(void *)(v148 + 14912) + 2116);
                      unsigned int v392 = v390 >> 5;
                      if (v389 < 5) {
                        unsigned int v392 = 2;
                      }
                      BOOL v393 = v388 == v391;
                      if (v388 == v391) {
                        uint64_t v394 = (2 << (2 * (v609 - v387)));
                      }
                      else {
                        uint64_t v394 = v390 >> 1;
                      }
                      BOOL v395 = v393 || v387 == v585;
                      uint64_t v396 = v148 + 32 * v387;
                      **(unsigned char **)(v396 + 312) = 1 << v388;
                      unsigned int v397 = (v388 - 1);
                      if (v397 <= *(unsigned __int8 *)(*(void *)(v148 + 14912) + 2116)) {
                        char v398 = *(unsigned char *)(*(void *)(v148 + 14912) + 2116);
                      }
                      else {
                        char v398 = v397;
                      }
                      uint64_t v399 = v390 >> 4;
                      int v400 = (unsigned char **)(v396 + 312);
                      *(unsigned char *)(*(void *)(v396 + 312) + 1) = 1 << v398;
                      uint64_t v401 = *(void *)(v396 + 312);
                      *(void *)(v401 + 56) = v328;
                      uint64_t v402 = *(void *)(v148 + 25048);
                      *(void *)(v401 + 64) = v402;
                      uint64_t v403 = *(void *)(v396 + 312);
                      *(void *)(v403 + 72) = v328;
                      *(void *)(v148 + 25048) = v402 + v390 + v394;
                      *(void *)(v403 + 80) = v402 + v390;
                      v404 = *(void **)(v396 + 312);
                      uint64_t v405 = v404[4] + 2 * v390;
                      v404[5] = v405;
                      v404[6] = v405 + v394;
                      uint64_t v406 = v404[1] + v399;
                      _DWORD v404[2] = v406;
                      v404[3] = v406 + (v392 >> 1);
                      if (v387 == v585) {
                        unsigned int v407 = 1;
                      }
                      else {
                        unsigned int v407 = 4;
                      }
                      if (v387 != v585)
                      {
                        uint64_t v408 = 0;
                        unsigned int v409 = v392;
                        do
                        {
                          uint64_t v410 = v396 + v408;
                          uint64_t v411 = *(void *)(v396 + v408 + 312);
                          *(void *)(v396 + v408 + 320) = v411 + 120;
                          *(unsigned char *)(v411 + 120) = **v400;
                          *(unsigned char *)(*(void *)(v396 + v408 + 320) + 1) = (*v400)[1];
                          uint64_t v412 = *(void *)(v396 + v408 + 320);
                          *(void *)(v412 + 56) = v328;
                          uint64_t v413 = *(void *)(v148 + 25048);
                          uint64_t v414 = v413 + v390;
                          *(void *)(v148 + 25048) = v413 + v390;
                          *(void *)(v412 + 64) = v413;
                          *(void *)(*(void *)(v396 + v408 + 320) + 32) = *(void *)(*(void *)(v396 + v408 + 312)
                                                                                         + 32)
                                                                             + 2 * v390
                                                                             + 2 * v394;
                          *(void *)(*(void *)(v396 + v408 + 320) + 8) = *(void *)(*(void *)(v396 + v408 + 312)
                                                                                        + 8)
                                                                            + v399
                                                                            + v409;
                          if (v395)
                          {
                            LODWORD(v394) = 0;
                            unsigned int v409 = 0;
                            *(_OWORD *)(*(void *)(v410 + 320) + 72) = *(_OWORD *)(*v400 + 72);
                            *(void *)(*(void *)(v410 + 320) + 40) = *((void *)*v400 + 5);
                            *(void *)(*(void *)(v410 + 320) + 48) = *((void *)*v400 + 6);
                            *(void *)(*(void *)(v410 + 320) + 16) = *((void *)*v400 + 2);
                            uint64_t v415 = *((void *)*v400 + 3);
                            long long v416 = *(void **)(v410 + 320);
                          }
                          else
                          {
                            uint64_t v417 = *(void *)(v410 + 320);
                            *(void *)(v417 + 72) = v328;
                            *(void *)(v148 + 25048) = v414 + v394;
                            *(void *)(v417 + 80) = v414;
                            long long v416 = *(void **)(v410 + 320);
                            uint64_t v418 = v416[4] + 2 * v390;
                            v416[5] = v418;
                            v416[6] = v418 + (v394 & 0xFFFFFFFE);
                            uint64_t v419 = v416[1] + v399;
                            v416[2] = v419;
                            uint64_t v415 = v419 + (v409 >> 1);
                          }
                          v416[3] = v415;
                          v408 += 8;
                        }
                        while (v408 != 24);
                      }
                      if (v583 - 1 <= v387)
                      {
                        ++v387;
                      }
                      else
                      {
                        BOOL v420 = v387 != v585;
                        uint64_t v421 = *v400;
                        uint64_t v422 = (uint64_t)&(*v400)[120 * v407];
                        ++v387;
                        uint64_t v423 = v148 + 32 * v387;
                        *(void *)(v423 + 312) = v422;
                        uint64_t v424 = *((void *)v421 + 4) + 2 * (v407 << v389);
                        if (v395) {
                          char v425 = 0;
                        }
                        else {
                          char v425 = 2;
                        }
                        *(void *)(v422 + 32) = v424 + 2 * (v394 << v425);
                        *(void *)(*(void *)(v423 + 312) + 8) = *((void *)*v400 + 1)
                                                                   + (v399 << (2 * v420))
                                                                   + (v392 << v425);
                      }
                    }
                    while (v583 > v387);
                  }
                  v386[40] = 0;
                  v386[41] = 0;
                  v386[42] = 0;
                }
                if (!*v328) {
                  operator new[]();
                }
                uint64_t v426 = *(void *)(v148 + 24744);
                *(_OWORD *)(v148 + 24864) = *(_OWORD *)(v426 + 104);
                *(_OWORD *)(v148 + 24880) = *(_OWORD *)(v426 + 120);
                *(void *)(v148 + 24632) = 0;
                *(void *)(v148 + 24640) = 0;
                *(void *)(v148 + 24624) = 0;
                uint64_t v166 = *(void *)(v148 + 1032);
                uint64_t v132 = v573;
                uint64_t v172 = v148 + 29808;
                goto LABEL_315;
              }
              uint64_t k = v291 + 120 * v294;
              uint64_t v319 = 120 * v290 - 120 * v293;
              uint64_t v320 = (_OWORD *)(v291 + 8);
              do
              {
                v320[3] = 0uLL;
                v320[4] = 0uLL;
                v320[1] = 0uLL;
                v320[2] = 0uLL;
                *uint64_t v320 = 0uLL;
                uint64_t v320 = (_OWORD *)((char *)v320 + 120);
                v319 -= 120;
              }
              while (v319);
            }
            *(void *)(v148 + 24976) = k;
            goto LABEL_266;
          }
        }
        operator delete(v271);
        int32x4_t v203 = v575;
        int32x4_t v202 = v578;
        int8x16_t v216 = v581;
        int8x16_t v217 = v590;
        int8x16_t v212 = v593;
        int8x16_t v254 = v597;
        goto LABEL_241;
      }
      uint64_t j = v257 + 240 * v260;
      uint64_t v286 = 240 * v255 - 240 * v259;
      char v287 = (unsigned char *)(v257 + 232);
      do
      {
        unsigned char *v287 = 0;
        *((_OWORD *)v287 - 13) = 0uLL;
        *((_OWORD *)v287 - 12) = 0uLL;
        *((_OWORD *)v287 - 11) = 0uLL;
        *((_OWORD *)v287 - 10) = 0uLL;
        v287 += 240;
        v286 -= 240;
      }
      while (v286);
    }
    *(void *)(v148 + 24904) = j;
    goto LABEL_241;
  }
LABEL_340:
  if ((v569 & 4) != 0 && ((int)v146 > 1 || *(unsigned char *)(v572 + 560))) {
    sub_1D0C9153C((_DWORD *)(v132 + 4800), *(void *)(v132 + 16));
  }
  LODWORD(memptr) = 0;
  int v613 = 0;
  while (sub_1D0D5407C(v132, **(void **)(v132 + 5376), (int *)&memptr, &v613))
    ;
  if ((int)v146 >= 1)
  {
    unint64_t v454 = *(uint64_t **)(v132 + 5376);
    uint64_t v455 = *(void *)(v132 + 5416);
    int v456 = *(_DWORD *)(v132 + 5424);
    do
    {
      uint64_t v457 = *v454++;
      v455 += *(unsigned int *)(v457 + 30360);
      v456 += *(_DWORD *)(v457 + 30364);
      --v146;
    }
    while (v146);
    *(void *)(v132 + 5416) = v455;
    *(_DWORD *)(v132 + 5424) = v456;
  }
  int v614 = v570;
  if (*(unsigned char *)(v132 + 512) || *(unsigned char *)(v132 + 513)) {
    sub_1D0C5E1EC((int *)(v132 + 3536), v132, 1, &v614);
  }
  if (v567) {
    sub_1D0CD81DC(v132 + 3400, *(void *)(v132 + 8), *(unsigned char *)(v132 + 653), &v614);
  }
  if (v571 >= 1)
  {
    if (*(int *)(v132 + 568) < 1) {
      goto LABEL_382;
    }
    uint64_t v458 = 0;
    unsigned int v459 = 0;
    uint64_t v460 = *(void *)(v132 + 5352);
    do
    {
      sub_1D0C9798C(v460 + (v458 << 6));
      uint64_t v460 = *(void *)(v132 + 5352);
      uint64_t v461 = v460 + (v458 << 6);
      signed int v462 = *(unsigned __int8 **)(v461 + 24);
      unint64_t v463 = *(void *)(v461 + 32);
      if ((unint64_t)v462 >= v463)
      {
        int v465 = 0;
      }
      else
      {
        int v464 = 0;
        int v465 = 0;
        unint64_t v466 = v463 - (void)v462;
        int v467 = v462;
        do
        {
          unsigned int v469 = *v467++;
          unsigned int v468 = v469;
          BOOL v470 = v464 == 2;
          int v471 = 2 * (v469 > 3);
          if (v464 == 2) {
            int v464 = v471;
          }
          int v472 = v468 < 4 && v470;
          v465 += v472;
          if (v468) {
            int v464 = 0;
          }
          else {
            ++v464;
          }
          --v466;
        }
        while (v466);
      }
      unsigned int v473 = v465 - v462 + v463 - 1;
      *(_DWORD *)(*(void *)(v132 + 576) + 4 * v458) = v473;
      if (v459 <= v473) {
        unsigned int v459 = v473;
      }
      ++v458;
    }
    while (v458 < *(int *)(v132 + 568));
    if (v459) {
      unsigned int v474 = 31 - __clz(v459);
    }
    else {
LABEL_382:
    }
      LOBYTE(v474) = 0;
    *(unsigned char *)(v132 + 572) = v474;
  }
  if (v568) {
    sub_1D0C96494(v132, (FILE *)*MEMORY[0x1E4F143C8]);
  }
  uint64_t v475 = *(void *)(v132 + 5320);
  uint64_t v476 = *(void *)(v475 + 632);
  if (*(unsigned char *)(v132 + 632))
  {
    int v478 = 19;
  }
  else if (*(unsigned char *)(v132 + 637))
  {
    int v478 = 21;
  }
  else if ((*(_DWORD *)(v476 + 1024) & 0x80000000) != 0)
  {
    int v478 = 7;
  }
  else if (*(_DWORD *)(v475 + 652) >= *(_DWORD *)(v475 + 608))
  {
    int v478 = *(unsigned __int8 *)(v476 + 40) != 0;
  }
  else
  {
    int v478 = 9;
  }
  int v477 = *(char *)(*(void *)(v475 + 576) + 480);
  uint64_t v479 = sub_1D0C976F4(v132 + 1608, (2 * (v477 + *(_DWORD *)(v476 + 524) * *(_DWORD *)(v476 + 520)) - 2) / v477);
  if (v479)
  {
    uint64_t v153 = v479;
    if (dword_1EB671A40 < 3) {
      goto LABEL_396;
    }
    fwrite("Bitstream initialization for SliceEnc failed\n", 0x2DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Bitstream initialization for SliceEnc failed\n");
    goto LABEL_393;
  }
  sub_1D0C9775C(v132 + 1608, 0, 1);
  sub_1D0C9775C(v132 + 1608, v478, 6);
  sub_1D0C9775C(v132 + 1608, 0, 6);
  sub_1D0C9775C(v132 + 1608, 1, 3);
  sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 48), 1);
  if (*(unsigned char *)(v132 + 633)) {
    sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 49), 1);
  }
  unsigned int v484 = *(unsigned __int8 *)(v132 + 50) + 1;
  unsigned int v485 = __clz(v484);
  sub_1D0C9775C(v132 + 1608, (v484 - (0x80000000 >> v485)) | (0x80000000 >> v485), (2 * v485) ^ 0x3F);
  if (!*(unsigned char *)(v132 + 48))
  {
    if (*(unsigned char *)(*(void *)(v132 + 32) + 2)) {
      sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 56), 1);
    }
    unsigned int v486 = *(_DWORD *)(v132 + 52) + 1;
    unsigned int v487 = __clz(v486);
    sub_1D0C9775C(v132 + 1608, (v486 - (0x80000000 >> v487)) | (0x80000000 >> v487), 63 - 2 * v487);
  }
  if (!*(unsigned char *)(v132 + 56))
  {
    unsigned int v488 = *(unsigned __int8 *)(v132 + 58) + 1;
    unsigned int v489 = __clz(v488);
    sub_1D0C9775C(v132 + 1608, (v488 - (0x80000000 >> v489)) | (0x80000000 >> v489), (2 * v489) ^ 0x3F);
    if (*(unsigned char *)(*(void *)(v132 + 32) + 3)) {
      sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 59), 1);
    }
    uint64_t v490 = *(void *)(v132 + 16);
    if (!*(unsigned char *)(v132 + 632))
    {
      sub_1D0C9775C(v132 + 1608, *(_DWORD *)(v132 + 64), *(unsigned __int8 *)(v490 + 224) + 4);
      sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 68), 1);
      if (*(unsigned char *)(v132 + 68))
      {
        unsigned int v491 = *(_DWORD *)(*(void *)(v132 + 16) + 288);
        if (v491 >= 2)
        {
          unsigned int v492 = __clz(v491) ^ 0x1F;
          if ((v491 & (v491 - 1)) != 0) {
            int v493 = v492 + 1;
          }
          else {
            int v493 = v492;
          }
          sub_1D0C9775C(v132 + 1608, *(_DWORD *)(v132 + 320), v493);
        }
      }
      else
      {
        uint64_t v153 = sub_1D0D7BAF0(*(void *)(v132 + 5320) + 4360, v132 + 1608, *(void *)(v132 + 16), *(_DWORD *)(*(void *)(v132 + 16) + 288));
        if (v153) {
          goto LABEL_393;
        }
      }
      uint64_t v490 = *(void *)(v132 + 16);
      if (*(unsigned char *)(v490 + 320))
      {
        if (*(_DWORD *)(v490 + 324))
        {
          unsigned int v494 = *(_DWORD *)(v132 + 324) + 1;
          unsigned int v495 = __clz(v494);
          sub_1D0C9775C(v132 + 1608, (v494 - (0x80000000 >> v495)) | (0x80000000 >> v495), 63 - 2 * v495);
        }
        unsigned int v496 = *(_DWORD *)(v132 + 328) + 1;
        unsigned int v497 = __clz(v496);
        sub_1D0C9775C(v132 + 1608, (v496 - (0x80000000 >> v497)) | (0x80000000 >> v497), 63 - 2 * v497);
        LODWORD(v498) = *(_DWORD *)(v132 + 324);
        if (v498)
        {
          unint64_t v499 = 0;
          uint64_t v500 = v132 + 332;
          do
          {
            unsigned int v501 = *(unsigned __int8 *)(v500 + v499) + 1;
            unsigned int v502 = __clz(v501);
            sub_1D0C9775C(v132 + 1608, (v501 - (0x80000000 >> v502)) | (0x80000000 >> v502), (2 * v502) ^ 0x3F);
            int v503 = (1 << v499) & *(unsigned __int16 *)(v132 + 510);
            sub_1D0C9775C(v132 + 1608, v503 != 0, 1);
            if (v503)
            {
              unsigned int v504 = *(_DWORD *)(v500 + 4 * v499 + 48) + 1;
              unsigned int v505 = __clz(v504);
              sub_1D0C9775C(v132 + 1608, (v504 - (0x80000000 >> v505)) | (0x80000000 >> v505), 63 - 2 * v505);
            }
            ++v499;
            unint64_t v498 = *(unsigned int *)(v132 + 324);
          }
          while (v499 < v498);
        }
        if (v498 < *(_DWORD *)(v132 + 328) + (int)v498)
        {
          uint64_t v506 = (int)v498;
          uint64_t v507 = v132 + 348;
          do
          {
            unsigned int v508 = *(unsigned __int16 *)(v507 + 2 * v506) + 1;
            unsigned int v509 = __clz(v508);
            sub_1D0C9775C(v132 + 1608, (v508 - (0x80000000 >> v509)) | (0x80000000 >> v509), (2 * v509) ^ 0x3F);
            int v510 = (1 << v506) & *(unsigned __int16 *)(v132 + 510);
            sub_1D0C9775C(v132 + 1608, (*(unsigned __int16 *)(v132 + 508) >> v506) & 1, 1);
            sub_1D0C9775C(v132 + 1608, v510 != 0, 1);
            if (v510)
            {
              unsigned int v511 = *(_DWORD *)(v507 + 4 * v506 + 32) + 1;
              unsigned int v512 = __clz(v511);
              sub_1D0C9775C(v132 + 1608, (v511 - (0x80000000 >> v512)) | (0x80000000 >> v512), 63 - 2 * v512);
            }
            ++v506;
          }
          while (*(_DWORD *)(v132 + 328) + *(_DWORD *)(v132 + 324) > v506);
        }
        uint64_t v490 = *(void *)(v132 + 16);
      }
      if (*(unsigned char *)(v490 + 396))
      {
        sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 514), 1);
        uint64_t v490 = *(void *)(v132 + 16);
      }
    }
    if (*(unsigned char *)(v490 + 277))
    {
      sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 512), 1);
      if (*(unsigned char *)(*(void *)(v132 + 16) + 201)) {
        sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 513), 1);
      }
    }
    if (*(unsigned __int8 *)(v132 + 58) > 1u) {
      goto LABEL_484;
    }
    sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 515), 1);
    if (*(unsigned char *)(v132 + 515))
    {
      unsigned int v513 = *(char *)(v132 + 516);
      unsigned int v514 = __clz(v513);
      sub_1D0C9775C(v132 + 1608, (v513 - (0x80000000 >> v514)) | (0x80000000 >> v514), 63 - 2 * v514);
      if (!*(unsigned char *)(v132 + 58))
      {
        unsigned int v515 = *(char *)(v132 + 517);
        unsigned int v516 = __clz(v515);
        sub_1D0C9775C(v132 + 1608, (v515 - (0x80000000 >> v516)) | (0x80000000 >> v516), 63 - 2 * v516);
      }
    }
    if (*(unsigned char *)(*(void *)(v132 + 32) + 1608))
    {
      uint64_t v517 = *(unsigned int *)(*(void *)(v132 + 5320) + 3056);
      if ((int)v517 >= 2)
      {
        sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 518), 1);
        if (*(unsigned char *)(v132 + 518))
        {
          unsigned int v518 = __clz(v517) ^ 0x1F;
          int v519 = (v517 & (v517 - 1)) != 0 ? v518 + 1 : v518;
          if (*(char *)(v132 + 516) >= 1)
          {
            uint64_t v520 = 0;
            uint64_t v521 = v132 + 520;
            while (1)
            {
              int v522 = *(unsigned __int8 *)(v521 + v520);
              if ((int)v517 <= v522) {
                break;
              }
              sub_1D0C9775C(v132 + 1608, v522, v519);
              if (++v520 >= *(char *)(v132 + 516)) {
                goto LABEL_456;
              }
            }
            if (dword_1EB671A40 >= 3)
            {
              v564 = "list_entry_l0_[%d] (%d) out of range [0, %d]\n";
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "list_entry_l0_[%d] (%d) out of range [0, %d]\n");
LABEL_539:
              syslog(27, v564, v520, *(unsigned __int8 *)(v521 + v520), v517);
              uint64_t v153 = 4294954394;
LABEL_393:
              if (dword_1EB671A40 >= 3)
              {
                int v450 = (FILE *)*MEMORY[0x1E4F143C8];
                char v451 = "Slice header encoding failed\n";
                uint64_t v452 = "Slice header encoding failed\n";
                size_t v453 = 29;
LABEL_395:
                fwrite(v452, v453, 1uLL, v450);
                syslog(27, v451);
              }
              goto LABEL_396;
            }
            goto LABEL_540;
          }
        }
LABEL_456:
        if (*(unsigned char *)(v132 + 58))
        {
LABEL_467:
          if (*(unsigned char *)(*(void *)(v132 + 32) + 6)) {
            sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 553), 1);
          }
          if (!*(unsigned char *)(v132 + 514)) {
            goto LABEL_475;
          }
          if (!*(unsigned char *)(v132 + 58)) {
            sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 554), 1);
          }
          if (*(unsigned char *)(v132 + 554))
          {
            if (*(char *)(v132 + 516) <= 1)
            {
LABEL_475:
              uint64_t v528 = *(void *)(v132 + 32);
              if (*(unsigned char *)(v528 + 17) && *(unsigned char *)(v132 + 58) == 1
                || *(unsigned char *)(v528 + 18) && !*(unsigned char *)(v132 + 58))
              {
                unsigned int v529 = *(unsigned __int8 *)(v132 + 556) + 1;
                unsigned int v530 = __clz(v529);
                sub_1D0C9775C(v132 + 1608, (v529 - (0x80000000 >> v530)) | (0x80000000 >> v530), (2 * v530) ^ 0x3F);
                if (*(unsigned char *)(*(void *)(v132 + 16) + 201)) {
                  sub_1D0C97958(v132 + 1608, *(char *)(v132 + 557));
                }
                sub_1D0D570CC(v132, 0);
                if (!*(unsigned char *)(v132 + 58)) {
                  sub_1D0D570CC(v132, 1u);
                }
              }
              unsigned int v531 = *(unsigned __int8 *)(v132 + 558) + 1;
              unsigned int v532 = __clz(v531);
              sub_1D0C9775C(v132 + 1608, (v531 - (0x80000000 >> v532)) | (0x80000000 >> v532), (2 * v532) ^ 0x3F);
LABEL_484:
              int v533 = *(char *)(v132 + 559);
              if (v533 <= 0) {
                int v534 = -2 * v533;
              }
              else {
                int v534 = 2 * v533 - 1;
              }
              unsigned int v535 = v534 + 1;
              unsigned int v536 = __clz(v535);
              sub_1D0C9775C(v132 + 1608, (v535 - (0x80000000 >> v536)) | (0x80000000 >> v536), 63 - 2 * v536);
              uint64_t v537 = *(unsigned char **)(v132 + 32);
              if (v537[16])
              {
                int v538 = *(char *)(v132 + 560);
                if (v538 <= 0) {
                  int v539 = -2 * v538;
                }
                else {
                  int v539 = 2 * v538 - 1;
                }
                unsigned int v540 = v539 + 1;
                unsigned int v541 = __clz(v540);
                sub_1D0C9775C(v132 + 1608, (v540 - (0x80000000 >> v541)) | (0x80000000 >> v541), 63 - 2 * v541);
                int v542 = *(char *)(v132 + 561);
                if (v542 <= 0) {
                  int v543 = -2 * v542;
                }
                else {
                  int v543 = 2 * v542 - 1;
                }
                unsigned int v544 = v543 + 1;
                unsigned int v545 = __clz(v544);
                sub_1D0C9775C(v132 + 1608, (v544 - (0x80000000 >> v545)) | (0x80000000 >> v545), 63 - 2 * v545);
                uint64_t v537 = *(unsigned char **)(v132 + 32);
              }
              if (v537[29])
              {
                if (v537[30]) {
                  sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 563), 1);
                }
                if (*(unsigned char *)(v132 + 563))
                {
                  sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 564), 1);
                  if (!*(unsigned char *)(v132 + 564))
                  {
                    sub_1D0C97958(v132 + 1608, *(char *)(v132 + 565));
                    sub_1D0C97958(v132 + 1608, *(char *)(v132 + 566));
                  }
                }
              }
              if (*(unsigned char *)(*(void *)(v132 + 32) + 28)
                && (*(unsigned char *)(v132 + 512) || *(unsigned char *)(v132 + 513) || !*(unsigned char *)(v132 + 564)))
              {
                sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 567), 1);
              }
              goto LABEL_505;
            }
          }
          else if (*(char *)(v132 + 517) < 2)
          {
            goto LABEL_475;
          }
          unsigned int v526 = *(unsigned __int8 *)(v132 + 555) + 1;
          unsigned int v527 = __clz(v526);
          sub_1D0C9775C(v132 + 1608, (v526 - (0x80000000 >> v527)) | (0x80000000 >> v527), (2 * v527) ^ 0x3F);
          goto LABEL_475;
        }
        sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 519), 1);
        if (*(unsigned char *)(v132 + 519))
        {
          unsigned int v523 = __clz(v517) ^ 0x1F;
          int v524 = (v517 & (v517 - 1)) != 0 ? v523 + 1 : v523;
          if (*(char *)(v132 + 517) >= 1)
          {
            uint64_t v520 = 0;
            uint64_t v521 = v132 + 536;
            while (1)
            {
              int v525 = *(unsigned __int8 *)(v521 + v520);
              if ((int)v517 <= v525) {
                break;
              }
              sub_1D0C9775C(v132 + 1608, v525, v524);
              if (++v520 >= *(char *)(v132 + 517)) {
                goto LABEL_465;
              }
            }
            if (dword_1EB671A40 >= 3)
            {
              v564 = "list_entry_l1_[%d] (%d) out of range [0, %d]\n";
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "list_entry_l1_[%d] (%d) out of range [0, %d]\n");
              goto LABEL_539;
            }
LABEL_540:
            uint64_t v153 = 4294954394;
            goto LABEL_396;
          }
        }
      }
    }
LABEL_465:
    if (!*(unsigned char *)(v132 + 58)) {
      sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(v132 + 552), 1);
    }
    goto LABEL_467;
  }
LABEL_505:
  uint64_t v546 = *(void *)(v132 + 32);
  if (*(unsigned char *)(v546 + 20) || *(unsigned char *)(v546 + 21))
  {
    unsigned int v547 = *(_DWORD *)(v132 + 568) + 1;
    unsigned int v548 = __clz(v547);
    sub_1D0C9775C(v132 + 1608, (v547 - (0x80000000 >> v548)) | (0x80000000 >> v548), 63 - 2 * v548);
    if (*(int *)(v132 + 568) >= 1)
    {
      unsigned int v549 = *(unsigned __int8 *)(v132 + 572) + 1;
      unsigned int v550 = __clz(v549);
      sub_1D0C9775C(v132 + 1608, (v549 - (0x80000000 >> v550)) | (0x80000000 >> v550), (2 * v550) ^ 0x3F);
      if (*(_DWORD *)(v132 + 568))
      {
        unint64_t v551 = 0;
        do
          sub_1D0C9775C(v132 + 1608, *(_DWORD *)(*(void *)(v132 + 576) + 4 * v551++), *(unsigned __int8 *)(v132 + 572) + 1);
        while (v551 < *(unsigned int *)(v132 + 568));
      }
    }
  }
  if (*(unsigned char *)(*(void *)(v132 + 32) + 1612))
  {
    unsigned int v552 = *(unsigned __int16 *)(v132 + 600) + 1;
    unsigned int v553 = __clz(v552);
    sub_1D0C9775C(v132 + 1608, (v552 - (0x80000000 >> v553)) | (0x80000000 >> v553), (2 * v553) ^ 0x3F);
    if (*(_WORD *)(v132 + 600))
    {
      unint64_t v554 = 0;
      do
        sub_1D0C9775C(v132 + 1608, *(unsigned __int8 *)(*(void *)(v132 + 608) + v554++), 8);
      while (v554 < *(unsigned __int16 *)(v132 + 600));
    }
  }
  sub_1D0C9798C(v132 + 1608);
  if (v571 < 0)
  {
LABEL_526:
    sub_1D0C9798C(v132 + 1608);
    if (!*(unsigned char *)(v132 + 1664))
    {
      uint64_t v153 = 0;
      goto LABEL_396;
    }
  }
  else
  {
    uint64_t v555 = 0;
    while (1)
    {
      uint64_t v556 = *(void *)(v132 + 5352) + (v555 << 6);
      if (*(unsigned char *)(v556 + 56)) {
        break;
      }
      v557 = *(unsigned int **)(v556 + 24);
      unint64_t v558 = *(int *)(v556 + 52) + 8 * (*(void *)(v556 + 32) - (void)v557);
      if (v558)
      {
        if (v558 < 0x21)
        {
          LODWORD(v559) = 0;
          char v563 = 32;
        }
        else
        {
          uint64_t v559 = 0;
          do
          {
            uint64_t v560 = v559;
            unsigned int v561 = *v557++;
            unsigned int v562 = bswap32(v561);
            sub_1D0C9775C(v132 + 1608, HIWORD(v562), 16);
            sub_1D0C9775C(v132 + 1608, (unsigned __int16)v562, 16);
            uint64_t v559 = v560 + 32;
          }
          while (v560 + 64 < v558);
          char v563 = v560 + 64;
        }
        sub_1D0C977C0(v132 + 1608, bswap32(*v557) >> (v563 - v558), v558 - v559);
      }
      if (++v555 == v584) {
        goto LABEL_526;
      }
    }
  }
  if (dword_1EB671A40 < 3)
  {
    uint64_t v153 = 4294940770;
  }
  else
  {
    fwrite("Ran out of allocated bufferspace\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    uint64_t v153 = 4294940770;
    syslog(27, "Ran out of allocated bufferspace\n");
  }
LABEL_396:
  uint64_t v480 = *(void *)(v132 + 8);
  if (*(unsigned char *)(v480 + 48))
  {
    int explicit = atomic_load_explicit((atomic_uint *volatile)(v480 + 1032), memory_order_acquire);
    uint64_t v482 = explicit & ~(explicit >> 31);
    (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v480 + 16))(v480, v482, *(unsigned int *)(v480 + 524), 0);
    sub_1D0D07D0C(v480 + 48, v482, *(unsigned int *)(v480 + 524));
    *(unsigned char *)(v480 + 48) = 0;
  }
  memptr = (void *)(v480 + 1040);
  char v616 = 1;
  std::mutex::lock((std::mutex *)(v480 + 1040));
  atomic_store(0x7FFFFFFFu, (unsigned int *)(v480 + 1032));
  sub_1D0C615D8((uint64_t)&memptr);
  std::condition_variable::notify_all((std::condition_variable *)(v480 + 1104));
  if (v616) {
    std::mutex::unlock((std::mutex *)memptr);
  }
  sub_1D0C6179C(v132);
  *(void *)(v132 + 8) = 0;
  *(void *)(v132 + 5400) = 0;
  return v153;
}

void sub_1D0D54060(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 160)) {
    std::mutex::unlock(*(std::mutex **)(v1 - 168));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1D0D5407C(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  char v6 = 0;
  uint64_t v646 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2 + 24576;
  int v8 = (int32x2_t *)(a2 + 300);
  int v9 = *a4;
  int v10 = *a3 + *(_DWORD *)(*(void *)(a1 + 16) + 2120) * *a4;
  if (!*(_DWORD *)(a1 + 568)) {
    int v9 = 0;
  }
  uint64_t v600 = v9;
  uint64_t v587 = *(void *)(a1 + 5328);
  uint64_t v11 = v587 + 472 * v9;
  int v618 = *(_DWORD *)(*(void *)(a1 + 1184) + 4 * v9);
  int v633 = v618;
  uint64_t v12 = *(void *)(a2 + 14912);
  char v13 = *(unsigned char *)(v12 + 2113);
  int v14 = *(unsigned __int8 *)(v12 + 2117);
  int v15 = *(_DWORD *)(v12 + 2120);
  *(void *)(a2 + 1008) = v11;
  *(void *)(a2 + 1016) = v11;
  *(void *)(a2 + 1024) = a2 + 29888;
  int v16 = v10 / v15;
  int v17 = (v10 % v15) << v13;
  int v18 = v16 << v13;
  *(_DWORD *)(a2 + 24588) = v17;
  *(_DWORD *)(a2 + 24592) = v18;
  *(_DWORD *)uint64_t v7 = v10;
  *(_DWORD *)(a2 + 24580) = v17 >> v13;
  *(_DWORD *)(a2 + 24584) = v18 >> v13;
  uint64_t v586 = (void *)v11;
  *(unsigned char *)(v11 + 225) = 0;
  *(unsigned char *)(a2 + 30113) = 0;
  int v19 = *(_DWORD *)(v12 + 204);
  int v20 = *(_DWORD *)(v12 + 208);
  int v21 = v19 - v17;
  if (v21 >= v14) {
    uint64_t v22 = v14;
  }
  else {
    uint64_t v22 = v21;
  }
  if (v20 - v18 >= v14) {
    int v23 = v14;
  }
  else {
    int v23 = v20 - v18;
  }
  v630 = (unsigned __int8 **)(a2 + 24744);
  char v24 = 1;
  do
  {
    (*(void (**)(uint64_t, void))(a2 + 29816))(v22, (v23 >> v6));
    if ((v24 & 1) == 0) {
      break;
    }
    char v24 = 0;
    char v6 = 1;
  }
  while (*(unsigned char *)(*(void *)(a2 + 14912) + 201));
  *(_OWORD *)(*(void *)(a2 + 24616) + 24) = *(_OWORD *)(*(void *)(a2 + 24744) + 24);
  *(_OWORD *)(*(void *)(a2 + 24616) + 40) = *(_OWORD *)(*(void *)(a2 + 24744) + 40);
  *(_OWORD *)(*(void *)(a2 + 24616) + 56) = *(_OWORD *)(*(void *)(a2 + 24744) + 56);
  *(_OWORD *)(*(void *)(a2 + 24616) + 72) = *(_OWORD *)(*(void *)(a2 + 24744) + 72);
  int v25 = *(_DWORD *)(v7 + 12);
  int v26 = *(_DWORD *)(v7 + 16);
  if (v25) {
    int v27 = 240;
  }
  else {
    int v27 = 0;
  }
  int v28 = *(_DWORD *)(a2 + 80);
  int v29 = *(_DWORD *)(a2 + 84);
  if (v25 + v14 >= v28) {
    int v30 = 7680;
  }
  else {
    int v30 = 130560;
  }
  if (v26)
  {
    BOOL v31 = v25 == 0;
  }
  else
  {
    int v30 = 0;
    BOOL v31 = 1;
  }
  int v32 = v30 | v27;
  int v33 = v32 | 0x100;
  if (v31) {
    int v33 = v32;
  }
  *(_DWORD *)(v7 + 20) = v33;
  int v34 = *(unsigned __int8 *)(*(void *)(a2 + 14912) + 2117);
  int v35 = v26 + v34;
  if (v29 < v26 + v34) {
    int v35 = v29;
  }
  unint64_t v36 = (v35 - v26);
  int v37 = v25 + v34;
  if (v28 < v25 + v34) {
    int v37 = v28;
  }
  uint64_t v629 = a2;
  if ((v33 & 0xF0) != 0)
  {
    uint64_t v38 = *(void *)(*(void *)(a2 + 14904) + 8);
    uint64_t v39 = *(void *)(v38 + 768);
    if ((v26 | (v25 - 1)) < 0 || *(_DWORD *)(v38 + 520) < v25 || *(_DWORD *)(v38 + 524) <= v26) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = (_WORD *)(*(void *)(v38 + 800) + 2 * (v39 * ((uint64_t)v26 >> 3) + ((v25 - 1) >> 3)));
    }
    if ((int)v36 >= 1)
    {
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      uint64_t v43 = 2 * v39;
      do
      {
        *(_WORD *)(*(void *)(a2 + 24864) + v41) = *v40;
        v42 += 8;
        v41 += 2;
        uint64_t v40 = (_WORD *)((char *)v40 + v43);
      }
      while (v42 < v36);
    }
  }
  else if ((int)v36 >= 8)
  {
    uint64_t v44 = 0;
    do
      *(_WORD *)(*(void *)(a2 + 24864) + 2 * v44++) = 0;
    while (v36 >> 3 != v44);
  }
  int v45 = v37 - v25;
  if ((*(unsigned char *)(v7 + 21) & 0x1E) != 0)
  {
    int v46 = *(_DWORD *)(v7 + 12);
    int v47 = *(_DWORD *)(v7 + 16);
    if (((v47 - 1) | v46) < 0
      || (uint64_t v48 = *(void *)(*(void *)(v629 + 14904) + 8), *(_DWORD *)(v48 + 520) <= v46)
      || *(_DWORD *)(v48 + 524) < v47)
    {
      unint64_t v49 = 0;
    }
    else
    {
      unint64_t v49 = (const void *)(*(void *)(v48 + 800) + 2
                                                  * (*(void *)(v48 + 768) * ((uint64_t)(v47 - 1) >> 3) + (v46 >> 3)));
    }
    memcpy(*(void **)(v629 + 24872), v49, 2 * (v45 >> 3));
  }
  else if (v45 >= 8)
  {
    uint64_t v50 = 0;
    do
      *(_WORD *)(*(void *)(v629 + 24872) + 2 * v50++) = 0;
    while (v45 >> 3 != v50);
  }
  int v51 = (int)v36 >> 2;
  if ((*(unsigned char *)(v7 + 20) & 0xF0) != 0)
  {
    uint64_t v52 = *(void *)(*(void *)(v629 + 14904) + 8);
    uint64_t v53 = *(void *)(v52 + 848);
    int v55 = *(_DWORD *)(v7 + 12);
    int v54 = *(_DWORD *)(v7 + 16);
    if ((v54 | (v55 - 1)) < 0 || *(_DWORD *)(v52 + 520) < v55 || *(_DWORD *)(v52 + 524) <= v54) {
      long long v56 = 0;
    }
    else {
      long long v56 = (uint64_t *)(*(void *)(v52 + 880) + 16 * (v53 * ((uint64_t)v54 >> 2) + ((v55 - 1) >> 2)));
    }
    long long v57 = (void *)v629;
    if ((int)v36 >= 1)
    {
      uint64_t v58 = 0;
      unint64_t v59 = 0;
      uint64_t v60 = 16 * v53;
      do
      {
        int64_t v61 = (void *)(*(void *)(v629 + 24880) + v58);
        uint64_t v62 = *v56;
        *(void *)((char *)v61 + 6) = *(uint64_t *)((char *)v56 + 6);
        *int64_t v61 = v62;
        v59 += 4;
        v58 += 16;
        long long v56 = (uint64_t *)((char *)v56 + v60);
      }
      while (v59 < v36);
    }
  }
  else
  {
    long long v57 = (void *)v629;
    if ((int)v36 >= 4)
    {
      uint64_t v63 = 0;
      if (v51 <= 1) {
        unsigned int v64 = 1;
      }
      else {
        unsigned int v64 = (int)v36 >> 2;
      }
      uint64_t v65 = 16 * v64;
      do
      {
        int v66 = (void *)(*(void *)(v629 + 24880) + v63);
        uint64_t v67 = *(void *)(v629 + 24600);
        *(void *)((char *)v66 + 6) = *(void *)(v629 + 24606);
        *int v66 = v67;
        v63 += 16;
      }
      while (v65 != v63);
    }
  }
  int v68 = v45 >> 2;
  unint64_t v69 = v57 + 3075;
  unint64_t v70 = (void *)(v57[3110] + 16 * v51);
  uint64_t v71 = v57[3075];
  *(void *)((char *)v70 + 6) = *(void *)((char *)v57 + 24606);
  *unint64_t v70 = v71;
  unint64_t v72 = v57;
  if ((*(unsigned char *)(v7 + 21) & 0x1E) != 0)
  {
    int v73 = *(_DWORD *)(v7 + 12);
    int v74 = *(_DWORD *)(v7 + 16);
    if (((v74 - 1) | v73) < 0
      || (uint64_t v75 = *(void *)(v57[1863] + 8), *(_DWORD *)(v75 + 520) <= v73)
      || *(_DWORD *)(v75 + 524) < v74)
    {
      uint64_t v76 = 0;
    }
    else
    {
      uint64_t v76 = (char *)(*(void *)(v75 + 880) + 16 * (*(void *)(v75 + 848) * ((uint64_t)(v74 - 1) >> 2) + (v73 >> 2)));
    }
    memcpy(*(void **)(v629 + 24888), v76, 16 * v68);
    unint64_t v77 = v76 - 16;
    unint64_t v72 = (void *)v629;
    if ((*(_DWORD *)(v7 + 20) & 0x100) != 0) {
      uint64_t v78 = (uint64_t *)v77;
    }
    else {
      uint64_t v78 = v69;
    }
    uint64_t v79 = *(void *)(v629 + 24888);
    uint64_t v80 = *v78;
    *(void *)(v79 - 10) = *(uint64_t *)((char *)v78 + 6);
    *(void *)(v79 - 16) = v80;
    int v81 = *(_DWORD *)(v7 + 16);
    int v82 = *(_DWORD *)(v7 + 12) + v68;
    if (((v81 - 1) | v82) < 0
      || (uint64_t v83 = *(void *)(*(void *)(v629 + 14904) + 8), *(_DWORD *)(v83 + 520) <= v82)
      || *(_DWORD *)(v83 + 524) < v81)
    {
      unint64_t v84 = 0;
    }
    else
    {
      unint64_t v84 = (uint64_t *)(*(void *)(v83 + 880) + 16 * (*(void *)(v83 + 848) * ((uint64_t)(v81 - 1) >> 2) + (v82 >> 2)));
    }
    if (!v84) {
      unint64_t v84 = v69;
    }
    uint64_t v85 = (void *)(*(void *)(v629 + 24888) + 16 * v68);
    uint64_t v86 = *v84;
    *(void *)((char *)v85 + 6) = *(uint64_t *)((char *)v84 + 6);
    *uint64_t v85 = v86;
    int v88 = *(_DWORD *)(v7 + 12);
    int v87 = *(_DWORD *)(v7 + 16);
    int v89 = v87 - 1;
    if (((v87 - 1) | (v88 - 1)) < 0
      || (uint64_t v90 = *(void *)(*(void *)(v629 + 14904) + 8), *(_DWORD *)(v90 + 520) < v88)
      || *(_DWORD *)(v90 + 524) < v87
      || (uint64_t v91 = *(void *)(v90 + 880)) == 0)
    {
      uint64_t v95 = *(void *)(v629 + 24888);
      uint64_t v96 = *v69;
      *(void *)(v95 - 10) = *(uint64_t *)((char *)v69 + 6);
      *(void *)(v95 - 16) = v96;
    }
    else
    {
      long long v92 = (uint64_t *)(v91 + 16 * (*(void *)(v90 + 848) * ((uint64_t)v89 >> 2) + ((v88 - 1) >> 2)));
      uint64_t v93 = *(void *)(v629 + 24888);
      uint64_t v94 = *v92;
      *(void *)(v93 - 10) = *(uint64_t *)((char *)v92 + 6);
      *(void *)(v93 - 16) = v94;
    }
    int v97 = *(_DWORD *)(v7 + 16);
    int v98 = *(_DWORD *)(v7 + 12) + v34;
    int v99 = v97 - 1;
    if (((v97 - 1) | v98) < 0
      || (uint64_t v100 = *(void *)(*(void *)(v629 + 14904) + 8), *(_DWORD *)(v100 + 520) <= v98)
      || *(_DWORD *)(v100 + 524) < v97
      || (uint64_t v101 = *(void *)(v100 + 880)) == 0)
    {
      long long v105 = (void *)(*(void *)(v629 + 24888) + 16 * v68);
      uint64_t v106 = *v69;
      *(void *)((char *)v105 + 6) = *(uint64_t *)((char *)v69 + 6);
      *long long v105 = v106;
    }
    else
    {
      long long v102 = (uint64_t *)(v101 + 16 * (*(void *)(v100 + 848) * ((uint64_t)v99 >> 2) + (v98 >> 2)));
      uint64_t v103 = *v102;
      long long v104 = (void *)(*(void *)(v629 + 24888) + 16 * v68);
      *(void *)((char *)v104 + 6) = *(uint64_t *)((char *)v102 + 6);
      void *v104 = v103;
    }
  }
  else if (v45 >= -4)
  {
    if (v68 < 0) {
      int v107 = -1;
    }
    else {
      int v107 = v45 >> 2;
    }
    uint64_t v108 = 16 * (v107 + 1);
    uint64_t v109 = -16;
    do
    {
      uint64_t v110 = (void *)(v57[3111] + v109);
      uint64_t v111 = *v69;
      *(void *)((char *)v110 + 6) = *(void *)((char *)v57 + 24606);
      *uint64_t v110 = v111;
      v109 += 16;
    }
    while (v108 != v109);
  }
  *((unsigned char *)v72 + 892) = v14;
  *(_WORD *)(v7 + 280) = 0;
  *int v8 = 0;
  *(_OWORD *)((char *)v72 + 27732) = 0u;
  *((_DWORD *)v72 + 71) = 0;
  uint64_t v112 = v72[1864];
  *((_DWORD *)v72 + 72) = *(unsigned __int8 *)(v112 + 269);
  uint64_t v113 = v72[132];
  if (*(unsigned __int8 *)(v113 + 3) == 255) {
    int v114 = 2;
  }
  else {
    int v114 = sub_1D0D3A85C((_DWORD *)v113, *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), *(unsigned __int8 *)(v112 + 2117));
  }
  unsigned int v115 = v72;
  unint64_t v116 = (int *)v72 + 71;
  if (*(unsigned char *)(v115[129] + 89))
  {
    uint64_t v117 = v115[126];
    v115[127] = v117;
    uint64_t v118 = v115[128];
    if (v117) {
      uint64_t v119 = (_OWORD *)(v117 + 8);
    }
    else {
      uint64_t v119 = 0;
    }
    *(_DWORD *)(v118 + 228) = 0;
    long long v120 = v119[4];
    long long v121 = v119[5];
    long long v122 = v119[3];
    *(_OWORD *)(v118 + 40) = v119[2];
    *(_OWORD *)(v118 + 88) = v121;
    *(_OWORD *)(v118 + 72) = v120;
    *(_OWORD *)(v118 + 56) = v122;
    long long v123 = v119[8];
    long long v124 = v119[9];
    long long v125 = v119[7];
    *(_OWORD *)(v118 + 104) = v119[6];
    *(_OWORD *)(v118 + 152) = v124;
    *(_OWORD *)(v118 + 136) = v123;
    *(_OWORD *)(v118 + 120) = v125;
    long long v126 = v119[12];
    long long v127 = v119[13];
    long long v128 = v119[11];
    *(_OWORD *)(v118 + 168) = v119[10];
    *(_OWORD *)(v118 + 216) = v127;
    *(_OWORD *)(v118 + 200) = v126;
    *(_OWORD *)(v118 + 184) = v128;
    long long v129 = v119[1];
    *(_OWORD *)(v118 + 8) = *v119;
    *(_OWORD *)(v118 + 24) = v129;
    v115[126] = v115[128];
  }
  uint64_t v601 = a1;
  int8x16_t v593 = v8;
  uint64_t v627 = v7;
  if (*((unsigned char *)v115 + 877)
    && ((int v130 = *(unsigned __int8 *)(v115[1864] + 2117), *(_DWORD *)(v7 + 12) + v130 > *((_DWORD *)v115 + 220))
     || *(_DWORD *)(v7 + 16) + v130 > *((_DWORD *)v115 + 221))
    || v114 != 2)
  {
    *((_DWORD *)v115 + 71) = 0;
    uint64_t v131 = v115[129];
    uint64_t v147 = v115[1863];
    goto LABEL_145;
  }
  uint64_t v131 = v115[129];
  int v132 = *(char *)(v131 + 84);
  if (v132 >= 1)
  {
    int v133 = *(_DWORD *)(v7 + 12);
    int v134 = *(_DWORD *)(v7 + 16);
    unsigned int v135 = (unsigned char *)v115[1864];
    char v136 = v135[2112];
    int v137 = 1 << v136;
    int v138 = v135[2117];
    int v139 = *((_DWORD *)v115 + 20);
    int v140 = v133 + v138;
    if (v139 >= v133 + v138) {
      int v141 = v133 + v138;
    }
    else {
      int v141 = *((_DWORD *)v115 + 20);
    }
    int v614 = *((_DWORD *)v115 + 21);
    if (v614 >= v134 + v138) {
      int v142 = v134 + v138;
    }
    else {
      int v142 = *((_DWORD *)v115 + 21);
    }
    int v622 = v135[2117];
    if (v139 >= v133 + 2 * v138) {
      int v143 = v133 + 2 * v138;
    }
    else {
      int v143 = *((_DWORD *)v115 + 20);
    }
    int v144 = v135[269];
    BOOL v145 = v134 >= v137 && v140 + v137 <= v139;
    int v146 = v145;
    *((_DWORD *)v115 + 71) = 0;
    *((_DWORD *)v115 + 72) = v144;
    uint64_t v147 = v115[1863];
    if (*(unsigned char *)(v147 + 58) != 2)
    {
      if (*(unsigned char *)(v131 + 132))
      {
        if (v142 <= v134)
        {
          unsigned int v149 = 0;
          unsigned int v148 = 0;
        }
        else
        {
          unsigned int v148 = 0;
          unsigned int v149 = 0;
          int v150 = v137 + v133;
          if (v141 <= v137 + v133) {
            int v151 = v137 + v133;
          }
          else {
            int v151 = v141;
          }
          if (v150 >= v141) {
            int v152 = v137 + v133;
          }
          else {
            int v152 = v150 + 1;
          }
          unsigned int v153 = (v151 - v152) >> v136;
          if (v150 < v141) {
            ++v153;
          }
          uint32x4_t v154 = (uint32x4_t)vdupq_n_s32(v153);
          uint32x4_t v155 = (uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v153 & 0xFFFFFFFC), (int8x16_t)xmmword_1D0D7F240);
          unsigned int v156 = (v153 & 0xFFFFFFFC) + 4;
          v157.i64[0] = 0x100000001;
          v157.i64[1] = 0x100000001;
          int8x16_t v158 = (int8x16_t)vcgtq_u32(v155, v154);
          int v159 = v134;
          do
          {
            if (v141 > v133)
            {
              int32x4_t v160 = (int32x4_t)v148;
              int32x4_t v161 = (int32x4_t)v149;
              int32x4_t v162 = vdupq_n_s32(*(unsigned __int8 *)(*(void *)(*(void *)(v629 + 1040) + 5096)
                                                    + *(void *)(*(void *)(v629 + 1040) + 8)
                                                    * (v134 >> *(_DWORD *)(*(void *)(v629 + 1040) + 4))
                                                    + (v133 >> *(_DWORD *)(*(void *)(v629 + 1040) + 4))));
              unsigned int v163 = v156;
              do
              {
                int8x16_t v164 = (int8x16_t)v161;
                int8x16_t v165 = (int8x16_t)v160;
                int32x4_t v161 = vaddq_s32(v161, v162);
                int32x4_t v160 = vaddq_s32(v160, v157);
                v163 -= 4;
              }
              while (v163);
              unsigned int v149 = vaddvq_s32((int32x4_t)vbslq_s8(v158, v164, (int8x16_t)v161));
              unsigned int v148 = vaddvq_s32((int32x4_t)vbslq_s8(v158, v165, (int8x16_t)v160));
            }
            v159 += v137;
          }
          while (v159 < v142);
        }
        unsigned int v433 = (v149 + (v148 >> 1)) / v148;
      }
      else
      {
        unsigned int v433 = *(_DWORD *)(v629 + 88);
      }
      BOOL v522 = v133 < v137 && v134 < v137;
      int v523 = v522 ? v146 : 1;
      if (v523 == 1)
      {
        if (v133 < v137 || v142 <= v134)
        {
          int v524 = 0;
          int v529 = v144;
        }
        else
        {
          int v524 = 0;
          uint64_t v525 = *(void *)(v147 + 8);
          uint64_t v526 = *(void *)(v525 + 800);
          uint64_t v527 = *(void *)(v525 + 768);
          int v528 = v134;
          int v529 = v144;
          do
          {
            __int16 v530 = *(_WORD *)(v526 + 2 * (((uint64_t)(v133 - v137) >> 3) + v527 * ((uint64_t)v528 >> 3)));
            int v531 = (v530 >> 9) - v433;
            if (v531 < 0) {
              int v531 = v433 - (v530 >> 9);
            }
            if (v531 <= 2)
            {
              int v532 = v530 & 3;
              if (v529 >= v532) {
                int v529 = v532;
              }
              if (v524 <= v532) {
                int v524 = v532;
              }
            }
            v528 += v137;
          }
          while (v528 < v142);
        }
        int v533 = v134 - v137;
        if (v134 >= v137 && v141 > v133)
        {
          uint64_t v534 = *(void *)(v147 + 8);
          uint64_t v535 = *(void *)(v534 + 800);
          uint64_t v536 = *(void *)(v534 + 768) * ((uint64_t)v533 >> 3);
          int v537 = v133;
          do
          {
            __int16 v538 = *(_WORD *)(v535 + 2 * (v536 + (v537 >> 3)));
            int v539 = (v538 >> 9) - v433;
            if (v539 < 0) {
              int v539 = v433 - (v538 >> 9);
            }
            if (v539 <= 2)
            {
              int v540 = v538 & 3;
              if (v529 >= v540) {
                int v529 = v540;
              }
              if (v524 <= v540) {
                int v524 = v540;
              }
            }
            v537 += v137;
          }
          while (v537 < v141);
        }
        if (v146 && v140 < v143)
        {
          uint64_t v541 = *(void *)(v147 + 8);
          uint64_t v542 = *(void *)(v541 + 800);
          uint64_t v543 = *(void *)(v541 + 768) * ((uint64_t)v533 >> 3);
          do
          {
            __int16 v544 = *(_WORD *)(v542 + 2 * (v543 + (v140 >> 3)));
            int v545 = (v544 >> 9) - v433;
            if (v545 < 0) {
              int v545 = v433 - (v544 >> 9);
            }
            if (v545 <= 2)
            {
              int v546 = v544 & 3;
              if (v529 >= v546) {
                int v529 = v546;
              }
              if (v524 <= v546) {
                int v524 = v546;
              }
            }
            v140 += v137;
          }
          while (v140 < v143);
        }
        int v547 = v133 - v137;
        if (v133 >= v137)
        {
          BOOL v431 = __OFSUB__(v134, v137);
          int v548 = v134 - v137;
          if (v548 < 0 == v431)
          {
            __int16 v549 = *(_WORD *)(*(void *)(*(void *)(v147 + 8) + 800)
                            + 2 * (*(void *)(*(void *)(v147 + 8) + 768) * ((uint64_t)v548 >> 3) + (v547 >> 3)));
            int v550 = (v549 >> 9) - v433;
            if (v550 < 0) {
              int v550 = v433 - (v549 >> 9);
            }
            if (v550 <= 2)
            {
              int v551 = v549 & 3;
              if (v529 >= v551) {
                int v529 = v551;
              }
              if (v524 <= v551) {
                int v524 = v551;
              }
              goto LABEL_670;
            }
          }
        }
        if (v529 <= v524)
        {
LABEL_670:
          int v552 = (v529 - (v529 == v524)) & ~((v529 - (v529 == v524)) >> 31);
          *(_DWORD *)(v629 + 284) = v552;
          if (v524 + 1 < v144) {
            int v553 = v524 + 1;
          }
          else {
            int v553 = v144;
          }
          *(_DWORD *)(v629 + 288) = v553;
LABEL_621:
          if (v132 >= 2 && (v552 || v553 != v144))
          {
            int v604 = v553;
            int v609 = v139;
            uint64_t v554 = v135[2113];
            int v613 = *(int **)(v629 + 1040);
            int v555 = v132;
            unsigned int v556 = sub_1D0D2585C(v613, v133, v134, v135[2113]);
            if (v555 == 3)
            {
              LODWORD(v557) = v554 - v552;
              if ((int)v554 - v552 <= *v613) {
                LODWORD(v557) = *v613;
              }
              if ((int)v557 < (int)v554)
              {
                uint64_t v557 = (int)v557;
                do
                {
                  ++v557;
                  if (v556 < 0x3A99 || v557 != v554)
                  {
                    int v558 = 1 << v557;
                    unsigned int v559 = v614 - (1 << v557) >= (v134 - (1 << v557) + v622)
                         ? v134 - (1 << v557) + v622
                         : v614 - (1 << v557);
                    if (v134 <= v559)
                    {
                      int v560 = 0;
                      int v561 = 0;
                      unsigned int v562 = 0;
                      if (v609 - v558 >= (v622 - v558 + v133)) {
                        unsigned int v563 = v622 - v558 + v133;
                      }
                      else {
                        unsigned int v563 = v609 - v558;
                      }
                      uint64_t v564 = (v554 - v557);
                      int v565 = v134;
                      while (v133 > v563)
                      {
LABEL_646:
                        v565 += v558;
                        if (v565 > v559)
                        {
                          if (v562
                            && v562 == v560
                            && (v561 + (v562 >> 1)) / v562 < (1431655766
                                                            * (unint64_t)(2 * word_1D0DA31CC[v564])) >> 32)
                          {
                            int *v116 = v554 - v557;
                          }
                          goto LABEL_636;
                        }
                      }
                      int v566 = v133;
                      while (1)
                      {
                        int v567 = *(_DWORD *)(*(void *)&v613[6 * (v554 - v557) + 1280]
                                         + 4
                                         * ((v566 >> v557) + (v565 >> v557) * ((v558 + v609 - 1) >> v557)));
                        if (v567 >= word_1D0DA31CC[v564]) {
                          break;
                        }
                        ++v560;
                        v561 += v567;
                        ++v562;
                        v566 += v558;
                        if (v566 > v563) {
                          goto LABEL_646;
                        }
                      }
                    }
                  }
LABEL_636:
                  ;
                }
                while (v557 != v554);
              }
            }
            if (v556 < 0x2EE1)
            {
              uint64_t v7 = v627;
              unsigned int v115 = (void *)v629;
            }
            else
            {
              int64_t v568 = *v613;
              if ((int)v554 - v604 > (int)v568)
              {
                int64_t v569 = -v604 + (unint64_t)v554;
                do
                {
                  if (v134 < v142)
                  {
                    unsigned int v570 = 0;
                    int v571 = 0;
                    unsigned int v572 = 0;
                    int v573 = 1 << v569;
                    uint64_t v574 = (v554 - v569);
                    int v575 = v134;
                    do
                    {
                      if (v133 < v141)
                      {
                        int v576 = v133;
                        do
                        {
                          int v577 = *(_DWORD *)(*(void *)&v613[6 * (v554 - v569) + 1280]
                                           + 4
                                           * ((v576 >> v569)
                                            + (v575 >> v569) * (((1 << v569) + v609 - 1) >> v569)));
                          ++v570;
                          if (v577 <= word_1D0DA31CC[v574]) {
                            int v577 = 0;
                          }
                          else {
                            ++v572;
                          }
                          v571 += v577;
                          v576 += v573;
                        }
                        while (v576 < v141);
                      }
                      v575 += v573;
                    }
                    while (v575 < v142);
                    if (v570 && v572 > v570 >> 2
                      || v572 && (v571 + (v572 >> 1)) / v572 > 2 * word_1D0DA31CC[v574])
                    {
                      *(_DWORD *)(v629 + 288) = v554 - v569 + 1;
                    }
                  }
                  --v569;
                }
                while (v569 > v568);
              }
              uint64_t v7 = v627;
              unsigned int v115 = (void *)v629;
            }
          }
          else
          {
            unsigned int v115 = (void *)v629;
          }
          goto LABEL_145;
        }
      }
    }
    int v552 = 0;
    int v553 = v144;
    goto LABEL_621;
  }
  uint64_t v147 = v115[1863];
  if (*(unsigned char *)(v147 + 5433))
  {
    if (*((int *)v115 + 22) > 29)
    {
LABEL_265:
      unsigned int v115 = (void *)v629;
      *(_DWORD *)(v629 + 264) = 0;
    }
    else
    {
      uint64_t v257 = 0;
      uint64_t v258 = *(void *)(v629 + 1040);
      int v259 = *(_DWORD *)(v258 + 4);
      int v260 = *(_DWORD *)(v7 + 12);
      int v261 = *(_DWORD *)(v7 + 16);
      int v262 = v260 >> v259;
      int v263 = v261 >> v259;
      int v264 = *(unsigned __int8 *)(*(void *)(v629 + 14912) + 2117);
      int v265 = v260 + v264;
      if (*(_DWORD *)(v629 + 80) < v265) {
        int v265 = *(_DWORD *)(v629 + 80);
      }
      int v266 = v265 >> v259;
      int v267 = v261 + v264;
      if (*(_DWORD *)(v629 + 84) < v267) {
        int v267 = *(_DWORD *)(v629 + 84);
      }
      int v268 = v267 >> v259;
      uint64_t v269 = v263;
      uint64_t v270 = *(void *)(v258 + 8);
      char v271 = 1;
      while (1)
      {
        char v272 = v271;
        int v273 = v257 + v269;
        if (v257 + v269 < v268) {
          break;
        }
LABEL_264:
        char v271 = 0;
        uint64_t v257 = 1;
        if ((v272 & 1) == 0) {
          goto LABEL_265;
        }
      }
      uint64_t v274 = *(void *)(v258 + 24 * v257 + 5192) + 2 * v270 * (v273 << v259 >> v259);
      while (1)
      {
        uint64_t v275 = v262 + (v272 & 1);
        if (v262 + (v272 & 1) < v266) {
          break;
        }
LABEL_263:
        ++v273;
        v274 += 2 * v270;
        if (v273 >= v268) {
          goto LABEL_264;
        }
      }
      while (1)
      {
        int v276 = *(__int16 *)(v274 + 2 * v275);
        if (v276 < 0) {
          int v276 = -v276;
        }
        if ((unsigned __int16)v276 > 5u) {
          break;
        }
        if (v266 == ++v275) {
          goto LABEL_263;
        }
      }
      unsigned int v115 = (void *)v629;
      *(_DWORD *)(v629 + 264) = 2;
    }
  }
LABEL_145:
  int v166 = *(unsigned __int8 *)(v131 + 178);
  int v167 = (v166 - *(_DWORD *)(v131 + 504)) & ~((v166 - *(_DWORD *)(v131 + 504)) >> 31);
  int v168 = (int *)v115 + 73;
  int v169 = *((_DWORD *)v115 + 72);
  if (v169 < v167) {
    int v167 = *((_DWORD *)v115 + 72);
  }
  *((_DWORD *)v115 + 73) = v167;
  int v170 = (v166 - *(char *)(v131 + 508)) & ~((v166 - *(char *)(v131 + 508)) >> 31);
  if (v169 < v170) {
    int v170 = v169;
  }
  *((_DWORD *)v115 + 74) = v170;
  if (*(unsigned char *)(v147 + 58) == 2)
  {
    if (*v116 >= v167) {
      int v168 = v116;
    }
    int v171 = *v168;
    goto LABEL_153;
  }
  if (v170 < v167) {
    int v168 = (int *)(v115 + 37);
  }
  int v179 = *v168;
  if (*v116 > v179) {
    int v179 = *v116;
  }
  int *v116 = v179;
  if (*(unsigned char *)(v131 + 550) && v179 == 1)
  {
    int v180 = *(_DWORD *)(v7 + 12);
    int v181 = *(_DWORD *)(v7 + 16);
    int v182 = *(unsigned char **)(v629 + 14912);
    char v183 = v182[2112];
    uint64_t v184 = *(int **)(v629 + 1040);
    int v185 = *(_DWORD *)(v629 + 80);
    int v186 = *v184;
    LODWORD(v187) = 1 << (v182[2113] - *v184);
    int v188 = (*(_DWORD *)(v629 + 84) - v181) >> *v184 >= (int)v187
         ? 1 << (v182[2113] - *v184)
         : (*(_DWORD *)(v629 + 84) - v181) >> *v184;
    if (v188 < 1)
    {
      LODWORD(v190) = 0;
    }
    else
    {
      int v189 = 0;
      unint64_t v190 = 0;
      uint64_t v191 = v185 >> v186;
      char v192 = 2 * v186;
      int v193 = (v185 - v180) >> v186;
      uint64_t v187 = v193 >= (int)v187 ? v187 : v193;
      uint64_t v194 = (v180 >> v186) + (int)v191 * (uint64_t)(v181 >> v186);
      uint64_t v195 = *((void *)v184 + 625) + 8 * v194;
      uint64_t v196 = *((void *)v184 + 622) + 4 * v194;
      uint64_t v197 = 1 << (v192 - 1);
      uint64_t v198 = 4 * v191;
      uint64_t v199 = 8 * v191;
      do
      {
        if ((int)v187 >= 1)
        {
          for (uint64_t i = 0; i != v187; ++i)
          {
            uint64_t v201 = (*(_DWORD *)(v196 + 4 * i) * *(_DWORD *)(v196 + 4 * i)) >> v192;
            if ((unint64_t)(*(void *)(v195 + 8 * i) + v197 - v201) >> v192 > v190) {
              unint64_t v190 = (unint64_t)(*(void *)(v195 + 8 * i) + v197 - v201) >> v192;
            }
          }
        }
        ++v189;
        v196 += v198;
        v195 += v199;
      }
      while (v189 != v188);
    }
    if (*(_DWORD *)(v7 + 5236) > v190)
    {
      int v423 = 1 << v183;
      BOOL v424 = v180 >= 1 << v183;
      BOOL v425 = v181 >= v423;
      int v426 = v180 + v182[2117];
      BOOL v427 = v181 >= v423 && v424;
      if (v181 < v423) {
        int v428 = v424;
      }
      else {
        int v428 = v424 + 1;
      }
      if (v426 + v423 > v185) {
        BOOL v425 = 0;
      }
      int v429 = v180 - v423;
      int v430 = v180 >= v423
          && (*(_WORD *)(*(void *)(*(void *)(v147 + 8) + 800)
                       + 2 * (*(void *)(*(void *)(v147 + 8) + 768) * ((uint64_t)v181 >> 3) + (v429 >> 3))) & 3) == 0;
      BOOL v431 = __OFSUB__(v181, v423);
      int v432 = v181 - v423;
      if (v432 < 0 == v431
        && (*(_WORD *)(*(void *)(*(void *)(v147 + 8) + 800)
                     + 2 * (*(void *)(*(void *)(v147 + 8) + 768) * ((uint64_t)v432 >> 3) + (v180 >> 3))) & 3) == 0)
      {
        ++v430;
      }
      if (v425
        && (*(_WORD *)(*(void *)(*(void *)(v147 + 8) + 800)
                     + 2 * (*(void *)(*(void *)(v147 + 8) + 768) * ((uint64_t)v432 >> 3) + (v426 >> 3))) & 3) == 0)
      {
        ++v430;
      }
      if (v427
        && (*(_WORD *)(*(void *)(*(void *)(v147 + 8) + 800)
                     + 2 * (*(void *)(*(void *)(v147 + 8) + 768) * ((uint64_t)v432 >> 3) + (v429 >> 3))) & 3) == 0)
      {
        ++v430;
      }
      if (v428 + v427 + v425 == v430)
      {
        int v171 = 0;
LABEL_153:
        int *v116 = v171;
      }
    }
  }
  uint64_t v172 = v629;
  int v602 = (int *)(v629 + 64);
  *(unsigned char *)(v7 + 3172) = 0;
  char v634 = 0;
  if (*(unsigned char *)(v629 + 1656))
  {
    int v173 = *(_DWORD *)(v7 + 16);
    int v174 = *(_DWORD *)(v627 + 12);
    *(_DWORD *)(v629 + 1680) = v174;
    *(_DWORD *)(v629 + 1684) = v173;
    sub_1D0CE03C8(v629 + 1656);
    int v175 = v174;
    uint64_t v7 = v627;
    uint64_t v172 = v629;
    sub_1D0CE0524(v629 + 1656, v175, v173, *(_DWORD *)(v629 + 1660));
    uint64_t v147 = *(void *)(v629 + 14904);
  }
  bzero((void *)(v172 + 27760), 0x800uLL);
  if (*(unsigned char *)(v147 + 5432))
  {
    LODWORD(v176) = *(_DWORD *)(v7 + 12);
    LODWORD(v177) = *(_DWORD *)(v7 + 16);
    uint64_t v178 = v629;
LABEL_180:
    int v202 = 1 << *(unsigned char *)(*(void *)(v178 + 14912) + 2113);
    uint64_t v203 = *(unsigned __int8 *)(*(void *)(v178 + 24744) + 1);
    sub_1D0D0BD28((uint64_t)v602, *(unsigned __int8 **)(v178 + 24616), v176, v177, 0, *(_DWORD *)(v178 + 88));
    uint64_t v176 = *(unsigned int *)(v7 + 12);
    uint64_t v177 = *(unsigned int *)(v7 + 16);
    int v204 = v177 + v202;
    int v205 = *(_DWORD *)(v178 + 84);
    if ((int)v177 + v202 >= v205) {
      int v204 = *(_DWORD *)(v178 + 84);
    }
    if ((int)v177 < v204)
    {
      uint64_t v206 = (int)v177;
      int v207 = *(_DWORD *)(v178 + 80);
      uint64_t v208 = v178 + 27760;
      do
      {
        int v209 = v176 + v202;
        if ((int)v176 + v202 >= v207) {
          int v209 = v207;
        }
        if ((int)v176 < v209)
        {
          uint64_t v210 = (int)v176;
          uint64_t v211 = v208;
          do
          {
            uint64_t v212 = *(void *)(v178 + 24616);
            uint64_t v213 = **(void **)(v212 + 24)
                 + (v210
                  + *(void *)(v212 + 32)
                  + (v206 - *(int *)(v212 + 8)) * *(unsigned __int8 *)(v212 + 1)
                  - *(int *)(v212 + 4))
                 * *(int *)(*(void *)(v212 + 24) + 16);
            uint64_t v214 = *(void *)(v178 + 14904);
            if (*(unsigned char *)(v214 + 5432))
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 1064))(v213, v203, v211);
              uint64_t v214 = *(void *)(v178 + 14904);
            }
            if (*(unsigned char *)(v214 + 5433))
            {
              *(void *)(v211 + 8) = *(int *)(*(void *)(*(void *)(v214 + 5320) + 616) + 672);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v629 + 1072))(v213, v203, v211 + 8);
              *(_DWORD *)(v211 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v629 + 1040) + 104))(v213, v203);
              uint64_t v178 = v629;
            }
            v210 += 8;
            uint64_t v7 = v627;
            uint64_t v176 = *(unsigned int *)(v627 + 12);
            int v215 = v176 + v202;
            int v207 = *(_DWORD *)(v178 + 80);
            if ((int)v176 + v202 >= v207) {
              int v215 = *(_DWORD *)(v178 + 80);
            }
            v211 += 256;
          }
          while ((int)v210 < v215);
          uint64_t v177 = *(unsigned int *)(v627 + 16);
          int v205 = *(_DWORD *)(v178 + 84);
        }
        v206 += 8;
        int v216 = v177 + v202;
        if ((int)v177 + v202 >= v205) {
          int v216 = v205;
        }
        v208 += 32;
      }
      while ((int)v206 < v216);
    }
    goto LABEL_199;
  }
  uint64_t v176 = *(unsigned int *)(v7 + 12);
  uint64_t v177 = *(unsigned int *)(v7 + 16);
  uint64_t v178 = v629;
  if (*(unsigned char *)(v147 + 5433)) {
    goto LABEL_180;
  }
LABEL_199:
  sub_1D0D0D064((uint64_t)v602, v176, v177, 0, v630, (unsigned __int8 **)(v629 + 24616), *(_DWORD *)(v7 + 20), &v633, &v634, *(_DWORD *)(v178 + 88));
  if (*(unsigned char *)(v7 + 3172))
  {
    char v634 = 0;
    int v633 = v618;
    sub_1D0D0C790(v602, 0);
    sub_1D0D101F4((uint64_t)v602, *(unsigned int *)(v7 + 12), *(unsigned int *)(v7 + 16), 0, *(_DWORD *)(v7 + 20), &v633, &v634);
  }
  else
  {
    if (*(unsigned char *)(v178 + 72))
    {
      char v634 = 0;
      int v633 = v618;
      sub_1D0D1076C((uint64_t)v602, *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), *(unsigned __int8 **)(v178 + 24616), 1, 0, 0, 0, 0);
      if (*(unsigned char *)(*(void *)(v178 + 14912) + 201)) {
        sub_1D0D10960((uint64_t)v602, *(unsigned int *)(v7 + 12), *(unsigned int *)(v7 + 16), 0, *(_DWORD *)(v7 + 20), *(unsigned int *)(v178 + 88), &v633, &v634);
      }
    }
    sub_1D0D0C790(v602, 1);
  }
  sub_1D0D1076C((uint64_t)v602, *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), *(unsigned __int8 **)(v178 + 24616), 0, 0, 0, 0, 0);
  int v219 = *(unsigned __int8 *)(*(void *)(v178 + 24616) + 1);
  uint64_t v220 = *(unsigned int *)(v7 + 12);
  uint64_t v221 = *(unsigned int *)(v7 + 16);
  int v222 = v221 + v219;
  if (*(_DWORD *)(v178 + 84) < (int)v221 + v219) {
    int v222 = *(_DWORD *)(v178 + 84);
  }
  int v223 = v222 - v221 + 7;
  if (v223 >= 8)
  {
    int v224 = 0;
    unsigned int v225 = v223 >> 3;
    int v226 = v220 + v219;
    if (*(_DWORD *)(v178 + 80) < v226) {
      int v226 = *(_DWORD *)(v178 + 80);
    }
    int v227 = v226 - v220 + 7;
    int v228 = v227 >> 3;
    if (v227 >> 3 <= 1) {
      int v228 = 1;
    }
    do
    {
      if (v227 >= 8)
      {
        uint64_t v229 = *(void *)(v178 + 952);
        uint64_t v230 = *(void *)(v178 + 928) * ((uint64_t)((int)v221 + 8 * v224 - *(_DWORD *)(v178 + 900)) >> 2);
        int v231 = -*(_DWORD *)(v178 + 896);
        int v232 = v220;
        int v233 = v228;
        do
        {
          if (*(unsigned char *)(v229 + 16 * (v230 + ((v231 + v232) >> 2)) + 10) == 1) {
            *(_DWORD *)(v178 + 304) += 64;
          }
          v232 += 8;
          --v233;
        }
        while (v233);
      }
      ++v224;
    }
    while (v224 != v225);
  }
  uint64_t v234 = *(void *)(v178 + 14904);
  if (!*(unsigned char *)(v234 + 564))
  {
    v235.n128_u64[0] = (unint64_t)sub_1D0D110E4((uint64_t)v602, v220, v221, 0, (int8x8_t)v217.n128_u64[0]);
    uint64_t v236 = *(void *)(v178 + 14904);
    uint64_t v237 = *(void *)(v236 + 3440);
    int32x4_t v238 = *(void (**)(void *, __n128))(v236 + 3432);
    int32x4_t v239 = (void *)(v236 + (v237 >> 1) + 3400);
    if (v237) {
      int32x4_t v238 = *(void (**)(void *, __n128))(*v239 + v238);
    }
    v238(v239, v235);
    uint64_t v234 = *(void *)(v178 + 14904);
  }
  if (!*(unsigned char *)(v234 + 512) && !*(unsigned char *)(v234 + 513)) {
    goto LABEL_488;
  }
  v217.n128_u64[0] = 0xFFFFFFFFLL;
  *(void *)(v178 + 224) = 0xFFFFFFFFLL;
  if (*(unsigned char *)(*(void *)(v178 + 1032) + 132))
  {
    uint64_t v240 = *(void *)(v178 + 14912);
    int v241 = *(unsigned __int8 *)(v240 + 2117);
    int v242 = *(_DWORD *)(v7 + 12);
    int v243 = *(_DWORD *)(v7 + 16);
    int v244 = *(_DWORD *)(v178 + 880) - v242;
    if (v244 >= v241) {
      int v245 = *(unsigned __int8 *)(v240 + 2117);
    }
    else {
      int v245 = *(_DWORD *)(v178 + 880) - v242;
    }
    if (v244 <= 0) {
      int v246 = 0;
    }
    else {
      int v246 = v245;
    }
    int v247 = *(_DWORD *)(v178 + 884) - v243;
    if (v247 < v241) {
      int v241 = *(_DWORD *)(v178 + 884) - v243;
    }
    if (v247 <= 0) {
      int v248 = 0;
    }
    else {
      int v248 = v241;
    }
    if (v246) {
      BOOL v249 = v248 == 0;
    }
    else {
      BOOL v249 = 1;
    }
    if (v249)
    {
      unsigned int v250 = *(_DWORD *)(v178 + 88);
    }
    else
    {
      if (v248 < 1)
      {
        int v252 = 0;
        int v251 = 0;
      }
      else
      {
        int v251 = 0;
        int v252 = 0;
        int v254 = 1 << *(_DWORD *)(*(void *)(v178 + 14920) + 1636);
        int v255 = v248 + v243;
        do
        {
          if (v246 >= 1)
          {
            int v256 = *(_DWORD *)(v7 + 12);
            do
            {
              int v253 = *(unsigned __int8 **)(v178 + 24616);
              v251 += *(__int16 *)(*((void *)v253 + 11)
                                 + 2
                                 * (((unint64_t)*v253 >> 3) * ((v243 - *((_DWORD *)v253 + 2)) >> 3)
                                  + ((v256 - *((_DWORD *)v253 + 1)) >> 3))) >> 9;
              v256 += v254;
              ++v252;
            }
            while (v256 < v246 + v242);
          }
          v243 += v254;
        }
        while (v243 < v255);
      }
      if (v252 >= 0) {
        int v277 = v252;
      }
      else {
        int v277 = v252 + 1;
      }
      unsigned int v250 = (v251 + (v277 >> 1)) / v252;
    }
    *(_DWORD *)(v178 + 232) = v250;
    sub_1D0D3C960(v234 + 4032, v250, *(unsigned __int8 *)(v240 + 2097), (_DWORD *)(v178 + 236), (_DWORD *)(v178 + 240), (_DWORD *)(v178 + 248));
    uint64_t v234 = *(void *)(v178 + 14904);
  }
  uint64_t v278 = *(void *)(v178 + 1008);
  unsigned int v280 = *(_DWORD *)(v7 + 4);
  unsigned int v279 = *(_DWORD *)(v7 + 8);
  long long v281 = *(unsigned __int8 **)(v178 + 24616);
  signed int v282 = v280 + *(_DWORD *)(v234 + 3552) * v279;
  uint64_t v592 = *(void *)(v234 + 4712);
  long long v283 = (void *)(*(void *)(*(void *)(v234 + 4024) + 1000) + 16 * v282);
  *long long v283 = 0;
  v283[1] = 0;
  uint64_t v585 = v283;
  uint64_t v284 = *(void *)(v234 + 4024);
  if (*(unsigned char *)(v284 + 432))
  {
    int v285 = *(_DWORD *)(v234 + 3548) - 1;
    int v286 = *(_DWORD *)(v234 + 3544);
    unsigned int v287 = (v285 + *(_DWORD *)(v284 + 504)) >> v286;
    unsigned int v288 = (v285 + *(_DWORD *)(v284 + 508)) >> v286;
    if (v287 <= v280 || v288 <= v279)
    {
      BOOL v290 = v287 < v280;
      BOOL v291 = v288 >= v279;
      BOOL v145 = v288 > v279;
      uint64_t v292 = (unsigned char *)(*(void *)(v234 + 4712) + 2 * (int)(v280 + *(_DWORD *)(v234 + 3552) * v279));
      if (!v145) {
        BOOL v290 = 1;
      }
      *uint64_t v292 = v290;
      BOOL v293 = !v291 || v287 <= v280;
      v292[1] = v293;
      unint64_t v294 = v292 + 1;
      if (!v280)
      {
        BOOL v290 = 0;
        *uint64_t v292 = 0;
      }
      if (!v279 || v290) {
LABEL_330:
      }
        *unint64_t v294 = 0;
      goto LABEL_488;
    }
  }
  int v598 = v280;
  int v599 = v279;
  uint64_t v295 = (unsigned __int8 *)(v234 + 4204);
  uint64_t v583 = v282;
  uint64_t v584 = (unsigned char *)(v592 + 2 * v282);
  if (*(unsigned char *)(v234 + 4704))
  {
    int v296 = *(_DWORD *)(v234 + 3548);
    int v297 = v296 * v280;
    int v298 = v296 * v279;
    uint64_t v299 = *(void *)(v234 + 4736);
    uint64_t v300 = 504;
    if (!*(unsigned char *)(v299 + 432)) {
      uint64_t v300 = 520;
    }
    int v301 = *(_DWORD *)(v299 + v300);
    uint64_t v302 = 508;
    if (!*(unsigned char *)(v299 + 432)) {
      uint64_t v302 = 524;
    }
    if (v296 + v297 < v301) {
      int v301 = v296 + v297;
    }
    int v303 = *(_DWORD *)(v299 + v302);
    int v304 = v296 + v298;
    int v305 = v304 >= v303 ? v303 : v304;
    if (v305 <= v298)
    {
      int v307 = 0;
      int v306 = 0;
    }
    else
    {
      int v306 = 0;
      int v307 = 0;
      int v308 = 1 << *(_DWORD *)(v234 + 3560);
      do
      {
        if (v301 > v297)
        {
          int v309 = v297;
          do
          {
            v307 += (*(unsigned __int16 *)(*((void *)v281 + 11)
                                         + 2
                                         * (((unint64_t)*v281 >> 3) * ((v298 - *((_DWORD *)v281 + 2)) >> 3)
                                          + ((v309 - *((_DWORD *)v281 + 1)) >> 3))) >> 7) & 1;
            v309 += v308;
            ++v306;
          }
          while (v309 < v301);
        }
        v298 += v308;
      }
      while (v298 < v305);
    }
    if (v307 >= (96 * v306) >> 7)
    {
      *uint64_t v585 = -86;
      *uint64_t v584 = 0;
      unint64_t v294 = (unsigned char *)(v592 + 2 * v583 + 1);
      goto LABEL_330;
    }
  }
  uint64_t v582 = v278;
  uint64_t v310 = v234 + 3536;
  uint64_t v631 = v234;
  int8x16_t v603 = (unsigned __int8 *)(v234 + 4204);
  if (*(unsigned char *)(v234 + 4696))
  {
    long long v311 = v635;
    uint64_t v610 = v234 + 3536;
    sub_1D0D594B0(v234 + 3536, v598, v599, 0, (uint64_t)v635);
    uint64_t v312 = 0;
    unint64_t v640 = 0;
    uint64_t v615 = v598 + *(_DWORD *)(v234 + 3552) * v599;
    uint64_t v313 = *(void *)(*(void *)(v234 + 4024) + 1000);
    LOWORD(v643) = 0;
    BYTE2(v643) = 0;
    char v314 = *(unsigned char *)(v234 + 4752);
    HIBYTE(v643) = -v314;
    LOBYTE(v644) = -v314;
    LOBYTE(v637) = v314;
    BYTE1(v637) = v314;
    uint64_t v605 = v313;
    v619 = (_DWORD *)(v313 + 16 * v615 + 1);
    long long v315 = v636;
    int v316 = 0x7FFFFFFF;
    HIWORD(v637) = 0;
    char v638 = 0;
    int v623 = 5;
    do
    {
      uint64_t v317 = 0;
      unsigned int v318 = 0;
      unsigned int v319 = 0;
      do
      {
        if (v317 != 2)
        {
          int v320 = *(_DWORD *)&v311[4 * v317];
          int v321 = (unsigned __int16)v315[v317];
          if (v315[v317])
          {
            if (v320 >= 0) {
              int v322 = (unsigned __int16)v315[v317];
            }
            else {
              int v322 = -v321;
            }
            int v323 = (v322 + 2 * v320) / (2 * v321);
            int v324 = *((char *)&v637 + v317);
            if (v323 < v324) {
              int v324 = (v322 + 2 * v320) / (2 * v321);
            }
            if (v323 <= *((char *)&v643 + v317)) {
              int v325 = *((char *)&v643 + v317);
            }
            else {
              int v325 = v324;
            }
          }
          else
          {
            int v325 = 0;
          }
          int v639 = v325;
          LODWORD(v641) = 0;
          v318 += sub_1D0D597E0(v321, v320, &v639, (int *)&v641, v312, *(_DWORD *)(v629 + 236), *(unsigned __int8 *)(v234 + 3566));
          v319 += v641;
          *((unsigned char *)v645 + byte_1D0DAE364[v317] - 1) = v639;
        }
        ++v317;
      }
      while (v317 != 5);
      unint64_t v640 = __PAIR64__(v319, v318);
      int v326 = *(_DWORD *)(v629 + 236);
      if (*(_DWORD *)(v234 + 4700) == 1)
      {
        sub_1D0D598BC(v610, (uint64_t)v635, v312, (char *)v645, 0, (int *)&v640 + 1, (int *)&v640, *(_DWORD *)(v629 + 236));
        unsigned int v318 = v640;
        unsigned int v319 = HIDWORD(v640);
      }
      LODWORD(v640) = v318 + 4;
      int v327 = v319 + v326 * (v318 + 4);
      uint64_t v178 = v629;
      if (v327 < v316)
      {
        *(_DWORD *)(v629 + 224) = v319;
        *(_DWORD *)(v629 + 228) = v318 + 4;
        _DWORD *v619 = v645[0];
        int v316 = v327;
        int v623 = v312;
      }
      ++v312;
      v315 += 15;
      v311 += 60;
    }
    while (v312 != 4);
    uint64_t v295 = (unsigned __int8 *)(v234 + 4204);
    uint64_t v328 = (unsigned char *)(v605 + 16 * v615);
    int v329 = *(_DWORD *)(v629 + 236);
    if (*(unsigned char *)(v234 + 4704))
    {
      int v330 = v316;
      uint64_t v310 = v234 + 3536;
      LOBYTE(v331) = v623;
    }
    else
    {
      uint64_t v332 = v234;
      uint64_t v333 = 0;
      int v334 = *(unsigned __int8 *)(v332 + 3566);
      do
      {
        int v335 = *(_DWORD *)&v636[2 * v333 + 60];
        int v336 = (unsigned __int16)v636[v333 + 252];
        if (v636[v333 + 252])
        {
          if (v335 >= 0) {
            int v337 = (unsigned __int16)v636[v333 + 252];
          }
          else {
            int v337 = -v336;
          }
          int v338 = (v337 + 2 * v335) / (2 * v336);
          if (v338 >= v334) {
            int v339 = v334;
          }
          else {
            int v339 = (v337 + 2 * v335) / (2 * v336);
          }
          if (v338 <= -v334) {
            int v340 = -v334;
          }
          else {
            int v340 = v339;
          }
        }
        else
        {
          int v340 = 0;
          HIDWORD(v640) = 0;
        }
        int v639 = v340;
        int v341 = sub_1D0D597E0(v336, v335, &v639, (int *)&v640 + 1, 4, v329, v334);
        *((unsigned char *)v645 + v333) = v639;
        *((_DWORD *)&v642[-1] + v333++) = HIDWORD(v640) + v341 * v329;
      }
      while (v333 != 32);
      uint64_t v342 = 0;
      int v343 = 0;
      int v344 = v641 - v329 + 8 * v329 + HIDWORD(v641) + LODWORD(v642[0]);
      int v330 = v316;
      int v331 = v623;
      do
      {
        int v345 = (_DWORD *)&v642[-1] + v342;
        int v346 = v345[3] + v344;
        if (v346 < v330)
        {
          int v330 = v346;
          int v331 = 4;
          int v343 = v342;
        }
        int v344 = v346 - *v345;
        ++v342;
      }
      while (v342 != 29);
      uint64_t v178 = v629;
      uint64_t v234 = v631;
      uint64_t v310 = v610;
      if (v331 == 4)
      {
        *(unsigned char *)(v605 + 16 * v615 + 13) = v343;
        _DWORD *v619 = *(_DWORD *)((char *)v645 + v343);
        int v329 = *(_DWORD *)(v629 + 236);
      }
    }
    if (v330 >= v329)
    {
      *uint64_t v328 = *v328 & 0xF0 | 0xA;
      int v330 = *(_DWORD *)(v178 + 236);
    }
    else
    {
      *uint64_t v328 = *v328 & 0xF0 | (2 * (v331 & 7)) | 1;
    }
    uint64_t v7 = v627;
  }
  else
  {
    int v330 = 0;
  }
  if (v295[493])
  {
    int v581 = v330;
    sub_1D0D594B0(v310, v598, v599, 1u, (uint64_t)v635);
    int v637 = 0;
    int v347 = v598 + *(_DWORD *)(v234 + 3552) * v599;
    uint64_t v348 = *(void *)(*(void *)(v234 + 4024) + 1000);
    uint64_t v579 = v347;
    uint64_t v580 = v348;
    if (v295[500])
    {
      char v596 = 5;
      int v606 = 0x7FFFFFFF;
    }
    else
    {
      int v578 = v598 + *(_DWORD *)(v234 + 3552) * v599;
      uint64_t v611 = v310;
      uint64_t v349 = 0;
      LOWORD(v641) = 0;
      BYTE2(v641) = 0;
      char v350 = *(unsigned char *)(v234 + 4752);
      BYTE3(v641) = -v350;
      BYTE4(v641) = -v350;
      uint64_t v351 = v348 + 16 * v347;
      int v588 = (_DWORD *)(v351 + 9);
      int8x16_t v590 = (_DWORD *)(v351 + 5);
      LOBYTE(v643) = v350;
      BYTE1(v643) = v350;
      int v352 = 0x7FFFFFFF;
      char v596 = 5;
      HIWORD(v643) = 0;
      LOBYTE(v644) = 0;
      char v616 = v635;
      v620 = v636;
      do
      {
        int v607 = v352;
        char v353 = 0;
        int v637 = 0;
        HIDWORD(v640) = 0;
        uint64_t v354 = 1;
        do
        {
          uint64_t v355 = 0;
          char v624 = v353;
          int v356 = HIDWORD(v640);
          int v357 = v637;
          uint64_t v358 = v354 - 1;
          uint64_t v359 = (int *)(v629 + 4 * (v354 - 1) + 240);
          uint64_t v360 = &v620[5 * v354];
          do
          {
            if (v355 != 2)
            {
              int v361 = *(_DWORD *)&v616[20 * v354 + 4 * v355];
              int v362 = (unsigned __int16)v360[v355];
              if (v360[v355])
              {
                if (v361 >= 0) {
                  int v363 = (unsigned __int16)v360[v355];
                }
                else {
                  int v363 = -v362;
                }
                int v364 = (v363 + 2 * v361) / (2 * v362);
                int v365 = *((char *)&v643 + v355);
                if (v364 < v365) {
                  int v365 = (v363 + 2 * v361) / (2 * v362);
                }
                if (v364 <= *((char *)&v642[-1] + v355)) {
                  int v366 = *((char *)&v642[-1] + v355);
                }
                else {
                  int v366 = v365;
                }
              }
              else
              {
                int v366 = 0;
              }
              LODWORD(v640) = v366;
              int v639 = 0;
              v356 += sub_1D0D597E0(v362, v361, (int *)&v640, &v639, v349, *v359, *(unsigned __int8 *)(v631 + 3567));
              v357 += v639;
              *((unsigned char *)&v645[8 * v358 - 1] + byte_1D0DAE364[v355] + 3) = v640;
            }
            ++v355;
          }
          while (v355 != 5);
          HIDWORD(v640) = v356;
          int v637 = v357;
          uint64_t v234 = v631;
          if (*(_DWORD *)(v631 + 4700) == 1) {
            sub_1D0D598BC(v611, (uint64_t)v635, v349, (char *)&v645[8 * v358], v354, &v637, (int *)&v640 + 1, *v359);
          }
          char v353 = 1;
          uint64_t v354 = 2;
        }
        while ((v624 & 1) == 0);
        HIDWORD(v640) += 4;
        uint64_t v178 = v629;
        int v367 = v637 + *(_DWORD *)(v629 + 240) * HIDWORD(v640);
        int v352 = v607;
        if (v367 < v607)
        {
          int v368 = v645[8];
          *int8x16_t v590 = v645[0];
          *int v588 = v368;
          int v352 = v367;
          char v596 = v349;
        }
        ++v349;
        v616 += 60;
        v620 += 15;
      }
      while (v349 != 4);
      int v606 = v352;
      uint64_t v348 = v580;
      int v347 = v578;
    }
    char v369 = 0;
    int v591 = (char *)(v348 + 16 * v347);
    int v589 = *(_DWORD *)(v178 + 240);
    int v370 = 12 * v589;
    int v371 = *(unsigned __int8 *)(v234 + 3567);
    uint64_t v372 = 1;
    do
    {
      uint64_t v373 = 0;
      char v625 = v369;
      uint64_t v374 = v372 - 1;
      int v375 = *(_DWORD *)(v178 + 4 * (v372 - 1) + 240);
      uint64_t v376 = &v642[4 * v372 + 12];
      unint64_t v377 = &v636[32 * v372 + 252];
      uint64_t v378 = &v636[64 * v372 + 60];
      do
      {
        int v379 = *(_DWORD *)&v378[2 * v373];
        int v380 = (unsigned __int16)v377[v373];
        if (v377[v373])
        {
          if (v379 >= 0) {
            int v381 = (unsigned __int16)v377[v373];
          }
          else {
            int v381 = -v380;
          }
          int v382 = (v381 + 2 * v379) / (2 * v380);
          int v383 = *(unsigned __int8 *)(v631 + 3566);
          if (v382 >= v383) {
            int v384 = *(unsigned __int8 *)(v631 + 3566);
          }
          else {
            int v384 = v382;
          }
          if (v382 <= -v383) {
            int v385 = -v383;
          }
          else {
            int v385 = v384;
          }
        }
        else
        {
          int v385 = 0;
          int v637 = 0;
        }
        LODWORD(v640) = v385;
        int v386 = sub_1D0D597E0(v380, v379, (int *)&v640, &v637, 4, v375, v371);
        *((unsigned char *)v376 + v373) = v640;
        *((_DWORD *)&v642[-1] + v373++) = v637 + v386 * v375;
      }
      while (v373 != 32);
      uint64_t v387 = 0;
      int v388 = HIDWORD(v641) + v641 + LODWORD(v642[0]);
      int v389 = 0x7FFFFFFF;
      uint64_t v178 = v629;
      uint64_t v234 = v631;
      do
      {
        int v390 = *((_DWORD *)v642 + v387 + 1) + v388;
        if (v390 < v389)
        {
          *(&v643 + v374) = v387;
          int v389 = v390;
        }
        int v388 = v390 - *((_DWORD *)&v642[-1] + v387++);
      }
      while (v387 != 29);
      v370 += v389;
      char v369 = 1;
      uint64_t v372 = 2;
    }
    while ((v625 & 1) == 0);
    int v391 = v606;
    int v392 = v589;
    if (v370 < v606)
    {
      uint64_t v393 = v580 + 16 * v579;
      uint64_t v394 = v643;
      uint64_t v395 = v644;
      *(unsigned char *)(v393 + 14) = v643;
      *(_DWORD *)(v393 + 5) = *(_DWORD *)((char *)v645 + v394);
      *(unsigned char *)(v393 + 15) = v395;
      *(_DWORD *)(v393 + 9) = *(_DWORD *)((char *)&v645[8] + v395);
      int v392 = *(_DWORD *)(v629 + 240);
      char v596 = 4;
      int v391 = v370;
    }
    char v396 = *v591;
    uint64_t v7 = v627;
    uint64_t v295 = v603;
    if (v391 >= v392)
    {
      *int v591 = v396 & 0xF | 0xA0;
      int v391 = *(_DWORD *)(v629 + 240);
    }
    else
    {
      *int v591 = v396 & 0xF | (32 * v596) | 0x10;
    }
    int v330 = v581 + ((*(_DWORD *)(v629 + 248) * v391) >> 8);
  }
  int v397 = v598 + *(_DWORD *)(v234 + 3552) * v599;
  char v398 = (__n128 *)(*(void *)(*(void *)(v234 + 4024) + 1000) + 16 * v397);
  uint64_t v621 = *(void *)(v234 + 4712);
  v641 = 0;
  v642[0] = 0;
  LOWORD(v643) = 0;
  v617 = (_WORD *)(v621 + 2 * v397);
  _WORD *v617 = 0;
  if (v598 < 1)
  {
    int v608 = 0;
  }
  else
  {
    LOBYTE(v643) = 1;
    int v608 = v398 - 1;
    v641 = v398 - 1;
  }
  if (v599 < 1)
  {
    int8x16_t v597 = 0;
  }
  else
  {
    BYTE1(v643) = 1;
    int8x16_t v597 = &v398[-*(int *)(v234 + 3552)];
    v642[0] = v597;
  }
  uint64_t v399 = 0;
  int v400 = 0;
  uint64_t v401 = *(unsigned __int8 *)(v582 + 48);
  uint64_t v612 = v397;
  int v402 = dword_1D0DAE36C[v401] + dword_1D0DAE36C[v401 ^ 1];
  v645[0] = dword_1D0DAE36C[v401 ^ 1];
  v645[1] = v402;
  int v403 = -1;
  char v404 = 1;
  unsigned int v405 = -1;
  do
  {
    char v406 = v404;
    if (*((unsigned char *)&v643 + v399))
    {
      unsigned int v407 = (unsigned __int8 *)v642[v399 - 1];
      if (v407)
      {
        int v408 = v295[492];
        int v409 = v295[493];
        unsigned int v410 = 0;
        if (v409 | v408)
        {
          unint64_t v411 = v408 == 0;
          unsigned int v412 = *v407;
          uint64_t v413 = &v636[5 * v411];
          uint64_t v414 = &v635[20 * v411];
          while (1)
          {
            if (v411)
            {
              unsigned int v415 = v412 >> 5;
              if ((v412 & 0x10) != 0) {
                goto LABEL_424;
              }
            }
            else
            {
              unsigned int v415 = (v412 >> 1) & 7;
              if (v412)
              {
LABEL_424:
                if (v415 == 4)
                {
                  uint64_t v416 = v407[v411 + 13];
                  int32x4_t v417 = *(int32x4_t *)&v635[128 * v411 + 360 + 4 * v416];
                  v218.i32[0] = *(_DWORD *)&v407[4 * v411 + 1];
                  int32x4_t v218 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v218.i8));
                  __n128 v217 = (__n128)vmlaq_s32((int32x4_t)v410, vmlaq_s32(vnegq_s32(vaddq_s32(v417, v417)), v218, (int32x4_t)vmovl_u16(*(uint16x4_t *)&v635[64 * v411 + 744 + 2 * v416])), v218);
                  v217.n128_u32[0] = vaddvq_s32((int32x4_t)v217);
                  unsigned int v410 = v217.n128_u32[0];
                }
                else if (v415 <= 3)
                {
                  uint64_t v418 = 0;
                  uint64_t v419 = &v413[15 * v415];
                  BOOL v420 = &v414[60 * v415];
                  do
                  {
                    if (v418 != 2)
                    {
                      int v421 = (char)v407[4 * v411 + byte_1D0DAE364[v418]];
                      v410 += (v421 * (unsigned __int16)v419[v418] - 2 * *(_DWORD *)&v420[4 * v418]) * v421;
                    }
                    ++v418;
                  }
                  while (v418 != 5);
                }
                if (v411) {
                  unsigned int v410 = (int)(*(_DWORD *)(v629 + 4 * (v411 - 1) + 248) * v410) >> 8;
                }
                uint64_t v234 = v631;
              }
            }
            if (v409)
            {
              v413 += 5;
              v414 += 20;
              BOOL v291 = v411++ >= 2;
              if (!v291) {
                continue;
              }
            }
            break;
          }
        }
        uint64_t v7 = v627;
        int v422 = v645[v399];
        uint64_t v295 = v603;
        if ((int)(v410 + ((v422 * *(_DWORD *)(v629 + 236)) >> 8)) < v330)
        {
          int v400 = v422 >> 8;
          int v330 = v410 + ((v422 * *(_DWORD *)(v629 + 236)) >> 8);
          unsigned int v405 = v399;
          int v403 = v410;
        }
      }
    }
    char v404 = 0;
    uint64_t v399 = 1;
  }
  while ((v406 & 1) != 0);
  uint64_t v178 = v629;
  if (v330 >= *(_DWORD *)(v629 + 236) * (v295[493] + v295[492]))
  {
    if (v598 >= 1 && (v608->n128_u8[0] & 0x11) == 0)
    {
      unsigned int v405 = 0;
      goto LABEL_476;
    }
    if (v599 >= 1 && (v597->n128_u8[0] & 0x11) == 0)
    {
      unsigned int v405 = 1;
      goto LABEL_476;
    }
    v398->n128_u8[0] = -86;
  }
  else
  {
    if ((v405 & 0x80000000) != 0) {
      goto LABEL_479;
    }
LABEL_476:
    *(unsigned char *)v617 = v405 == 0;
    *(unsigned char *)(v621 + 2 * v612 + 1) = v405 != 0;
    int v434 = (__n128 *)v642[v405 - 1];
    __n128 v217 = *v434;
    *char v398 = *v434;
    if ((v434->n128_u8[0] & 8) != 0)
    {
      v217.n128_u64[0] = 2147483649;
      *(void *)(v629 + 224) = 2147483649;
    }
    else
    {
      *(_DWORD *)(v629 + 224) = v403;
      *(_DWORD *)(v629 + 228) = v400;
    }
  }
LABEL_479:
  if (*(unsigned char *)(v234 + 4020))
  {
    uint64_t v435 = v592 + 2 * v583;
    int v437 = *(unsigned __int8 *)(v435 + 1);
    unint64_t v294 = (unsigned char *)(v435 + 1);
    int v436 = v437;
    if ((*v585 & 8) == 0 || *v584 || v436)
    {
      int v438 = *(_DWORD *)(v629 + 232);
      if (v438 <= 26)
      {
        int v439 = *(_DWORD *)(v234 + 4608) - 2 * v438 + 81;
        if (v439 >= 63) {
          int v439 = 63;
        }
        if (((*(_DWORD *)(v629 + 224) + *(_DWORD *)(v629 + 228) * dword_1D0DA667C[70 * *v295 + (v439 & ~(v439 >> 31))]) & 0x80000000) == 0)
        {
          *uint64_t v585 = -86;
          *uint64_t v584 = 0;
          goto LABEL_330;
        }
      }
    }
  }
LABEL_488:
  unsigned int v440 = *(_OWORD **)(v178 + 1016);
  v632 = (int *)(*(void *)(v601 + 1184) + 4 * v600);
  int v441 = *(unsigned __int8 *)(*(void *)(v178 + 14920) + 21);
  v635[0] = 0;
  *(_DWORD *)(v178 + 300) = 0;
  *(void *)(v178 + 1008) = v440;
  if (v441 && !*(_DWORD *)(v7 + 12) && *(_DWORD *)(v7 + 16) && *(int *)(*(void *)(v178 + 14912) + 2120) >= 2)
  {
    uint64_t v454 = *(void *)(v178 + 14904);
    long long v455 = *(_OWORD *)(v454 + 1208);
    long long v456 = *(_OWORD *)(v454 + 1224);
    long long v457 = *(_OWORD *)(v454 + 1256);
    v440[5] = *(_OWORD *)(v454 + 1240);
    v440[6] = v457;
    v440[3] = v455;
    v440[4] = v456;
    long long v458 = *(_OWORD *)(v454 + 1272);
    long long v459 = *(_OWORD *)(v454 + 1288);
    long long v460 = *(_OWORD *)(v454 + 1320);
    v440[9] = *(_OWORD *)(v454 + 1304);
    v440[10] = v460;
    v440[7] = v458;
    v440[8] = v459;
    __n128 v217 = *(__n128 *)(v454 + 1336);
    long long v461 = *(_OWORD *)(v454 + 1352);
    long long v462 = *(_OWORD *)(v454 + 1368);
    *((unsigned char *)v440 + 224) = *(unsigned char *)(v454 + 1384);
    v440[12] = v461;
    v440[13] = v462;
    v440[11] = v217;
    unsigned int v440 = *(_OWORD **)(v178 + 1008);
  }
  *((unsigned char *)v440 + 225) = 1;
  *(unsigned char *)(v178 + 72) = *(unsigned char *)(*(void *)(v178 + 14912) + 201) == 0;
  uint64_t v442 = *(void *)(v178 + 14904);
  int v443 = *(unsigned __int8 *)(v442 + 512);
  int v444 = *(unsigned __int8 *)(v442 + 513);
  if (*(unsigned char *)(v442 + 512))
  {
LABEL_493:
    int v445 = *(_DWORD *)(v7 + 4);
    int v446 = *(_DWORD *)(v7 + 8);
    int v447 = v445 + *(_DWORD *)(v442 + 3552) * v446;
    uint64_t v448 = v447;
    uint64_t v626 = *(void *)(*(void *)(v442 + 4024) + 1000);
    uint64_t v449 = *(void *)(v442 + 4712);
    if (v445 >= 1)
    {
      (**(void (***)(_OWORD *, void, _OWORD *))v440)(v440, *(unsigned __int8 *)(v449 + 2 * v447), v440 + 3);
      uint64_t v7 = v627;
      if (*(unsigned char *)(v449 + 2 * v447)) {
        goto LABEL_541;
      }
    }
    if (v446 >= 1)
    {
      uint64_t v450 = v449 + 2 * v447;
      (**(void (***)(_OWORD *, void, _OWORD *))v440)(v440, *(unsigned __int8 *)(v450 + 1), v440 + 3);
      if (*(unsigned char *)(v450 + 1)) {
        goto LABEL_541;
      }
    }
    char v451 = (unsigned char *)(v626 + 16 * v447);
    if (v443)
    {
      uint64_t v452 = (char *)v440 + 49;
      size_t v453 = **(void (***)(_OWORD *, uint64_t, char *))v440;
      if (*v451)
      {
        v453(v440, 1, v452);
        (*(void (**)(_OWORD *, BOOL))(*(void *)v440 + 8))(v440, (*v451 & 8) == 0);
        uint64_t v463 = *(unsigned __int8 *)(v442 + 3566);
        uint64_t v464 = v626 + 16 * v447;
        int v465 = (char *)(v464 + 1);
        if ((*v451 & 0xE) == 8)
        {
          uint64_t v466 = 0;
          unsigned int v628 = *(unsigned __int8 *)(v464 + 13);
          do
          {
            int v467 = v465[v466];
            if (v467 >= 0) {
              uint64_t v468 = v467;
            }
            else {
              uint64_t v468 = -v467;
            }
            (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)v440 + 40))(v440, v468, v463);
            ++v466;
          }
          while (v466 != 4);
          for (uint64_t j = 0; j != 4; ++j)
          {
            if (v465[j]) {
              (*(void (**)(_OWORD *, void))(*(void *)v440 + 8))(v440, (v465[j] >> 7) & 1);
            }
          }
          (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 24))(v440, v628, 5);
        }
        else
        {
          (*(void (**)(_OWORD *, void, void))(*(void *)v440 + 40))(v440, *v465, *(unsigned __int8 *)(v442 + 3566));
          (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, v465[1], v463);
          (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, -v465[2], v463);
          (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, -v465[3], v463);
          (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 24))(v440, (*v451 >> 1) & 7, 2);
        }
        if (!v444) {
          goto LABEL_541;
        }
LABEL_518:
        BOOL v470 = (char *)v440 + 49;
        int v471 = **(void (***)(_OWORD *, uint64_t, char *))v440;
        if ((*v451 & 0x10) != 0)
        {
          v471(v440, 1, v470);
          (*(void (**)(_OWORD *, void))(*(void *)v440 + 8))(v440, (*v451 >> 7) ^ 1u);
          uint64_t v472 = *(unsigned __int8 *)(v442 + 3567);
          uint64_t v473 = v626 + 16 * v448;
          unsigned int v474 = (char *)(v473 + 5);
          if ((*v451 & 0xE0) == 0x80)
          {
            uint64_t v475 = 0;
            uint64_t v476 = *(unsigned __int8 *)(v473 + 14);
            do
            {
              int v477 = v474[v475];
              if (v477 >= 0) {
                uint64_t v478 = v477;
              }
              else {
                uint64_t v478 = -v477;
              }
              (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)v440 + 40))(v440, v478, v472);
              ++v475;
            }
            while (v475 != 4);
            for (uint64_t k = 0; k != 4; ++k)
            {
              if (v474[k]) {
                (*(void (**)(_OWORD *, void))(*(void *)v440 + 8))(v440, (v474[k] >> 7) & 1);
              }
            }
            (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)v440 + 24))(v440, v476, 5);
            uint64_t v480 = 0;
            uint64_t v481 = *(unsigned __int8 *)(v442 + 3567);
            uint64_t v482 = v626 + 16 * v448;
            uint64_t v483 = v482 + 9;
            uint64_t v484 = *(unsigned __int8 *)(v482 + 15);
            do
            {
              int v485 = *(char *)(v483 + v480);
              if (v485 >= 0) {
                uint64_t v486 = v485;
              }
              else {
                uint64_t v486 = -v485;
              }
              (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)v440 + 40))(v440, v486, v481);
              ++v480;
            }
            while (v480 != 4);
            for (uint64_t m = 0; m != 4; ++m)
            {
              if (*(unsigned char *)(v483 + m)) {
                (*(void (**)(_OWORD *, void))(*(void *)v440 + 8))(v440, (*(char *)(v483 + m) >> 7) & 1);
              }
            }
            (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)v440 + 24))(v440, v484, 5);
          }
          else
          {
            (*(void (**)(_OWORD *, void, void))(*(void *)v440 + 40))(v440, *v474, *(unsigned __int8 *)(v442 + 3567));
            (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, *(char *)(v473 + 6), v472);
            (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, -*(char *)(v473 + 7), v472);
            (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, -*(char *)(v473 + 8), v472);
            (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 24))(v440, *v451 >> 5, 2);
            uint64_t v488 = *(unsigned __int8 *)(v442 + 3567);
            (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, *(char *)(v473 + 9), v488);
            (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, *(char *)(v473 + 10), v488);
            (*(void (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, -*(char *)(v473 + 11), v488);
            v217.n128_f64[0] = (*(double (**)(_OWORD *, void, uint64_t))(*(void *)v440 + 40))(v440, -*(char *)(v473 + 12), v488);
          }
        }
        else
        {
          v471(v440, 0, v470);
        }
        goto LABEL_541;
      }
      v453(v440, 0, v452);
    }
    if (!v444) {
      goto LABEL_541;
    }
    goto LABEL_518;
  }
  if (*(unsigned char *)(v442 + 513))
  {
    int v444 = 1;
    goto LABEL_493;
  }
LABEL_541:
  sub_1D0D157FC((uint64_t)v602, *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), 0, *(_DWORD *)(v7 + 20), v632, v635, v217);
  if (v441 && *(_DWORD *)(v7 + 4) == 1)
  {
    uint64_t v489 = *(void *)(v629 + 14904);
    uint64_t v490 = *(void *)(v629 + 1008);
    long long v491 = *(_OWORD *)(v490 + 160);
    long long v493 = *(_OWORD *)(v490 + 112);
    long long v492 = *(_OWORD *)(v490 + 128);
    *(_OWORD *)(v489 + 1304) = *(_OWORD *)(v490 + 144);
    *(_OWORD *)(v489 + 1320) = v491;
    *(_OWORD *)(v489 + 1272) = v493;
    *(_OWORD *)(v489 + 1288) = v492;
    long long v495 = *(_OWORD *)(v490 + 192);
    long long v494 = *(_OWORD *)(v490 + 208);
    long long v496 = *(_OWORD *)(v490 + 176);
    *(unsigned char *)(v489 + 1384) = *(unsigned char *)(v490 + 224);
    *(_OWORD *)(v489 + 1352) = v495;
    *(_OWORD *)(v489 + 1368) = v494;
    *(_OWORD *)(v489 + 1336) = v496;
    long long v497 = *(_OWORD *)(v490 + 48);
    long long v498 = *(_OWORD *)(v490 + 64);
    long long v499 = *(_OWORD *)(v490 + 96);
    *(_OWORD *)(v489 + 1240) = *(_OWORD *)(v490 + 80);
    *(_OWORD *)(v489 + 1256) = v499;
    *(_OWORD *)(v489 + 1208) = v497;
    *(_OWORD *)(v489 + 1224) = v498;
  }
  *(unsigned char *)(v629 + 72) = *(unsigned char *)(*(void *)(v629 + 1032) + 548);
  *(int32x2_t *)(v629 + 30360) = vadd_s32(*(int32x2_t *)(v629 + 30360), *v593);
  int v500 = *a3 + 1;
  *a3 = v500;
  uint64_t v501 = *(void *)(v601 + 16);
  if (v500 >= *(_DWORD *)(v501 + 2120))
  {
    *a3 = 0;
    unsigned int v502 = a4;
    int v503 = *a4 + 1;
    *a4 = v503;
    if (v503 >= *(_DWORD *)(v501 + 2124) || *(_DWORD *)(v601 + 568))
    {
      (*(void (**)(void *, uint64_t))(*v586 + 16))(v586, 1);
      unint64_t v504 = v586[1] >> 8;
      uint64_t v506 = v586[3];
      unsigned int v505 = (_DWORD *)v586[4];
      uint64_t v507 = v506 + 2;
      if ((v504 >> (v506 + 2)))
      {
        v504 &= ~(-1 << v507);
        uint64_t v508 = v587;
        unsigned int v509 = (char *)v505 - 1;
        do
        {
          if ((unint64_t)v509 < *(void *)(v587 + 472 * (int)v600 + 464)) {
            break;
          }
          __int16 v510 = (*v509--)++ + 1;
        }
        while ((v510 & 0x100) != 0);
      }
      else
      {
        uint64_t v508 = v587;
      }
      BOOL v145 = v506 < 30;
      uint64_t v511 = v506 - 30;
      if (!v145)
      {
        *v505++ = bswap32(v504 >> v511);
        LODWORD(v504) = v504 & ~(-1 << v511);
        uint64_t v507 = v511;
      }
      uint64_t v512 = v508 + 472 * (int)v600;
      uint64_t v513 = *(void *)(v512 + 456);
      unsigned int v514 = (char *)v505 + (*(int *)(v513 + 52) >> 3) - *(void *)(v512 + 464);
      unint64_t v515 = *(void *)(v513 + 40);
      unsigned int v516 = &v514[*(void *)(v513 + 32)];
      *(void *)(v513 + 32) = v516;
      if ((unint64_t)v516 >= v515)
      {
        *(unsigned char *)(v513 + 56) = 1;
        *(void *)(v513 + 32) = v515;
      }
      *(_DWORD *)(v513 + 48) = 0;
      if (v507) {
        sub_1D0C977C0(v513, v504, v507);
      }
      uint64_t v501 = *(void *)(v601 + 16);
    }
    if ((*(unsigned char *)(*(void *)(v601 + 4760) + 184) & 2) != 0)
    {
      uint64_t v517 = *(void *)(v601 + 8);
      uint64_t v518 = *a4 * *(unsigned __int8 *)(v501 + 2117) - 10;
      if (*(unsigned char *)(v517 + 48))
      {
        int explicit = atomic_load_explicit((atomic_uint *volatile)(v517 + 1032), memory_order_acquire);
        uint64_t v520 = explicit & ~(explicit >> 31);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v517 + 16))(v517, v520, v518, 0);
        sub_1D0D07D0C(v517 + 48, v520, v518);
      }
      atomic_store(v518, (unsigned int *)(v517 + 1032));
      std::condition_variable::notify_all((std::condition_variable *)(v517 + 1104));
      uint64_t v501 = *(void *)(v601 + 16);
    }
  }
  else
  {
    unsigned int v502 = a4;
  }
  return *v502 < *(_DWORD *)(v501 + 2124);
}

uint64_t sub_1D0D570CC(uint64_t result, unsigned int a2)
{
  v47[23] = *MEMORY[0x1E4F143B8];
  uint64_t v43 = result;
  if (*(unsigned char *)(result + 516))
  {
    uint64_t v2 = 0;
    unsigned int v3 = 0;
    uint64_t v4 = a2;
    unint64_t v5 = result + ((unint64_t)a2 << 8);
    unint64_t v42 = v5 + 672;
    uint64_t v6 = *(void *)(result + 16);
    char v40 = *(unsigned char *)(v6 + 222);
    char v41 = *(unsigned char *)(v6 + 223);
    LOBYTE(v6) = *(unsigned char *)(result + 556);
    int v7 = -1 << v6;
    int v8 = 1 << (*(unsigned char *)(result + 557) + v6);
    uint64_t v9 = result + 1608;
    uint64_t v45 = *(char *)(result + 516);
    int v10 = (_WORD *)(v5 + 676);
    uint64_t v11 = v46;
    do
    {
      int v12 = v7 + (__int16)*(v10 - 2);
      *uint64_t v11 = v12;
      if (v12 || *v10) {
        v3 |= (unsigned __int16)(1 << v2);
      }
      BOOL result = sub_1D0C9775C(v9, (v3 >> v2++) & 1, 1);
      v11 += 3;
      v10 += 8;
    }
    while (v45 != v2);
    if (*(unsigned char *)(*(void *)(v43 + 16) + 201))
    {
      uint64_t v13 = 0;
      unsigned int v14 = 0;
      int v15 = (_WORD *)(v43 + (v4 << 8) + 686);
      int v16 = v47;
      do
      {
        int v17 = (__int16)*(v15 - 2);
        int v18 = (__int16)*(v15 - 3) - v8;
        *(v16 - 1) = v18;
        *int v16 = v17 - v8;
        if (v18) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v17 == v8;
        }
        if (!v19 || *(v15 - 1) || *v15) {
          v14 |= (unsigned __int16)(1 << v13);
        }
        v15 += 8;
        BOOL result = sub_1D0C9775C(v9, (v14 >> v13++) & 1, 1);
        v16 += 3;
      }
      while (v45 != v13);
    }
    else
    {
      unsigned int v14 = 0;
    }
    uint64_t v20 = 0;
    do
    {
      unsigned int v44 = v3;
      if (v3)
      {
        int v21 = v46[3 * v20];
        if (v21 <= 0) {
          int v22 = -2 * v21;
        }
        else {
          int v22 = 2 * v21 - 1;
        }
        unsigned int v23 = v22 + 1;
        unsigned int v24 = __clz(v23);
        sub_1D0C9775C(v9, (v23 - (0x80000000 >> v24)) | (0x80000000 >> v24), 63 - 2 * v24);
        int v25 = *(__int16 *)(v42 + 16 * v20 + 4) >> v40;
        if (v25 <= 0) {
          int v26 = -2 * v25;
        }
        else {
          int v26 = 2 * v25 - 1;
        }
        unsigned int v27 = v26 + 1;
        unsigned int v28 = __clz(v27);
        BOOL result = sub_1D0C9775C(v9, (v27 - (0x80000000 >> v28)) | (0x80000000 >> v28), 63 - 2 * v28);
      }
      if (v14)
      {
        uint64_t v29 = 0;
        char v30 = 1;
        do
        {
          char v31 = v30;
          int v32 = v46[3 * v20 + 1 + v29];
          if (v32 <= 0) {
            int v33 = -2 * v32;
          }
          else {
            int v33 = 2 * v32 - 1;
          }
          unsigned int v34 = v33 + 1;
          unsigned int v35 = __clz(v34);
          sub_1D0C9775C(v9, (v34 - (0x80000000 >> v35)) | (0x80000000 >> v35), 63 - 2 * v35);
          int v36 = ((*(__int16 *)(v42 + 16 * v20 + 8 + 2 * v29) << 7 >> *(unsigned char *)(v43 + 662))
               + *(__int16 *)(v42 + 16 * v20 + 2 * v29 + 12)
               - 128) >> v41;
          if (v36 <= 0) {
            int v37 = -2 * v36;
          }
          else {
            int v37 = 2 * v36 - 1;
          }
          unsigned int v38 = v37 + 1;
          unsigned int v39 = __clz(v38);
          BOOL result = sub_1D0C9775C(v9, (v38 - (0x80000000 >> v39)) | (0x80000000 >> v39), 63 - 2 * v39);
          char v30 = 0;
          uint64_t v29 = 1;
        }
        while ((v31 & 1) != 0);
      }
      ++v20;
      unsigned int v3 = v44 >> 1;
      v14 >>= 1;
    }
    while (v20 != v45);
  }
  return result;
}

BOOL sub_1D0D57410(uint64_t a1, int a2, int *a3, int *a4)
{
  return sub_1D0D5407C(a1, *(void *)(*(void *)(a1 + 5376) + 8 * a2), a3, a4);
}

uint64_t sub_1D0D5741C(uint64_t result)
{
  if (result >= 2)
  {
    unsigned int v1 = __clz(result);
    if (v1) {
      unsigned int v2 = ((byte_1D0DAE264[(unint64_t)(result << (v1 + 1)) >> 24] << 12) | 0x200000u) >> ((v1 + 1) >> 1);
    }
    else {
      unsigned int v2 = (11585
    }
          * (((byte_1D0DAE264[(unint64_t)(result << (v1 + 1)) >> 24] << 12) | 0x200000u) >> ((v1 + 1) >> 1))) >> 14;
    return (v2 + 16) >> 5;
  }
  return result;
}

uint64_t sub_1D0D57470(uint64_t result, int a2, int a3, int a4, int a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(result + 16);
  int v9 = *(unsigned __int8 *)(v8 + 2117);
  int v10 = a3 - 1;
  int v11 = (v9 - 1) & a2;
  unsigned int v12 = word_1D0DBB0A0[(((v9 - 1) & (a3 - 1 + a5)) - v9 + 64) >> 2];
  int v13 = a2 - 1;
  int v14 = a5 + a3;
  if (((v12 >> (v11 >> 2)) & 1) != 0 && ((v14 | v13) & 0x80000000) == 0)
  {
    uint64_t v15 = *(void *)(result + 8);
    if (*(_DWORD *)(v15 + 520) < a2 || *(_DWORD *)(v15 + 524) <= v14) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *(void *)(v15 + 880) + 16 * (*(void *)(v15 + 848) * ((uint64_t)v14 >> 2) + (v13 >> 2));
    }
  }
  char v16 = *(unsigned char *)(v8 + 2112);
  *a6 = v7;
  if (((v14 - 1) | v13) < 0
    || (uint64_t v17 = *(void *)(result + 8), *(_DWORD *)(v17 + 520) < a2)
    || *(_DWORD *)(v17 + 524) < v14)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = *(void *)(v17 + 880) + 16 * (*(void *)(v17 + 848) * ((uint64_t)(v14 - 1) >> 2) + (v13 >> 2));
  }
  uint64_t v19 = 0;
  a6[1] = v18;
  int v20 = *(unsigned __int8 *)(*(void *)(result + 16) + 2117);
  int v21 = (v20 - 1) & a3;
  int v22 = (((v20 - 1) & (v13 + a4)) - v20 + 64) >> 2;
  int v23 = a4 + a2;
  if (((word_1D0DAE244[v21 >> 2] >> v22) & 1) != 0 && ((v23 | v10) & 0x80000000) == 0)
  {
    uint64_t v24 = *(void *)(result + 8);
    if (*(_DWORD *)(v24 + 520) <= v23 || *(_DWORD *)(v24 + 524) <= v10) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *(void *)(v24 + 880) + 16 * (*(void *)(v24 + 848) * ((uint64_t)v10 >> 2) + (v23 >> 2));
    }
  }
  int v25 = 1 << (v16 - 1);
  *a7 = v19;
  int v26 = v23 - v25;
  if ((v26 | v10) < 0
    || (uint64_t v27 = *(void *)(result + 8), *(_DWORD *)(v27 + 520) <= v26)
    || *(_DWORD *)(v27 + 524) <= v10)
  {
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = *(void *)(v27 + 880) + 16 * (*(void *)(v27 + 848) * ((uint64_t)v10 >> 2) + (v26 >> 2));
  }
  a7[1] = v28;
  int v29 = a2 - v25;
  if ((v29 | v10) < 0
    || (uint64_t v30 = *(void *)(result + 8), *(_DWORD *)(v30 + 520) <= v29)
    || *(_DWORD *)(v30 + 524) <= v10)
  {
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = *(void *)(v30 + 880) + 16 * (*(void *)(v30 + 848) * ((uint64_t)v10 >> 2) + (v29 >> 2));
  }
  a7[2] = v31;
  return result;
}

uint64_t sub_1D0D5769C(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  v18[0] = 0;
  v18[1] = 0;
  memset(v17, 0, sizeof(v17));
  sub_1D0D57470(a1, a2, a3, a6, a7, v18, v17);
  return sub_1D0C95660(a1, a2, a3, a4, a5, a6, a7, a8, v18, (uint64_t)v17, 1);
}

uint64_t sub_1D0D57784(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v15 = a3;
  v36[1] = *MEMORY[0x1E4F143B8];
  unint64_t v18 = (unint64_t)*((unsigned __int8 *)a2 + 9) >> 4;
  if (v18 == 15)
  {
    uint64_t v19 = *(void *)(a1 + ((_BYTE)a2[2] & 0xF0) + 1672);
    uint64_t v20 = *a2;
    return sub_1D0D57AA8(a1, v19, 0, v20, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  unint64_t v22 = (unint64_t)*((unsigned __int8 *)a2 + 8) >> 4;
  if (v22 == 15) {
    return sub_1D0D57AA8(a1, *(void *)(a1 + 16 * v18 + 1928), 1, a2[1], (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  uint64_t v19 = *(void *)(a1 + 1672 + 16 * v22);
  uint64_t v23 = *(void *)(a1 + 1672 + 16 * v18 + 256);
  uint64_t v20 = *a2;
  uint64_t v24 = a2[1];
  if (v19 == v23 && v20 == v24) {
    return sub_1D0D57AA8(a1, v19, 0, v20, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  uint64_t v35 = 0;
  v36[0] = 0;
  uint64_t v32 = v23;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  sub_1D0C94FD8(a1, v19, v20, a3, a4, a5, a6, &v35, &v33);
  uint64_t result = sub_1D0C94FD8(a1, v32, v24, v15, a4, a5, a6, v36, &v34);
  if (a8)
  {
    unint64_t v26 = (unint64_t)*((unsigned __int8 *)a2 + 8) >> 4;
    unint64_t v27 = (unint64_t)*((unsigned __int8 *)a2 + 9) >> 4;
    if (*(unsigned char *)(a1 + 2 * v26 + 5120) || *(unsigned char *)(a1 + 2 * v27 + 5152)) {
      uint64_t result = sub_1D0CA6450(a1 + 3224, a5, a6, *(unsigned int *)(a1 + 664), a1 + 672 + 16 * v26, v30, *(void *)(v31 + 416), v35, a1 + 672 + 16 * v27 + 256, v24, *(void *)(v32 + 416), v36[0]);
    }
    else {
      uint64_t result = sub_1D0CA6198(a1 + 3224, a5, a6, v30, *(void *)(v31 + 416), v35, v24, *(void *)(v32 + 416), v36[0], a7, a8);
    }
  }
  if (a10 && *(unsigned char *)(v31 + 532))
  {
    unint64_t v28 = (unint64_t)*((unsigned __int8 *)a2 + 8) >> 4;
    unint64_t v29 = (unint64_t)*((unsigned __int8 *)a2 + 9) >> 4;
    if (*(unsigned char *)(a1 + 2 * v28 + 5121) || *(unsigned char *)(a1 + 2 * v29 + 5153)) {
      return sub_1D0CA65C8(a1 + 3224, ((int)a5 >> 1), ((int)a6 >> 1), *(unsigned int *)(a1 + 668), a1 + 672 + 16 * v28 + 8, v30, *(void *)(v31 + 424), v33, a1 + 672 + 16 * v29 + 264, v24, *(void *)(v32 + 424), v34);
    }
    else {
      return sub_1D0CA62F0(a1 + 3224, ((int)a5 >> 1), ((int)a6 >> 1), v30, *(void *)(v31 + 424), v33, v24, *(void *)(v32 + 424), v34, a9, a10);
    }
  }
  return result;
}

uint64_t sub_1D0D57AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13 = MEMORY[0x1F4188790]();
  uint64_t v21 = v20;
  uint64_t v22 = v14;
  uint64_t v23 = v13;
  uint64_t v56 = a13;
  uint64_t v52 = a12;
  uint64_t vars8 = a11;
  uint64_t v55 = a10;
  uint64_t v24 = a9;
  STACK[0x4078] = *MEMORY[0x1E4F143B8];
  int v25 = -3 - v20;
  int v26 = *(_DWORD *)(v14 + 520);
  unsigned int v27 = v26 + 2;
  int v28 = v18 + ((__int16)v16 >> 2);
  if (v28 < v26 + 2) {
    unsigned int v27 = v18 + ((__int16)v16 >> 2);
  }
  if (v28 <= v25) {
    uint64_t v29 = v25;
  }
  else {
    uint64_t v29 = v27;
  }
  int v30 = -3 - v24;
  int v31 = v19 + (v16 >> 18);
  int v32 = *(_DWORD *)(v14 + 524);
  int v33 = (v18 >> 1) + ((__int16)v16 >> 3);
  unsigned int v34 = v32 + 2;
  if (v31 < v32 + 2) {
    unsigned int v34 = v19 + (v16 >> 18);
  }
  if (v31 <= v30) {
    uint64_t v35 = v30;
  }
  else {
    uint64_t v35 = v34;
  }
  BOOL v36 = v33 < v26 >> 1;
  int v37 = v26 >> 1;
  if (v36) {
    int v37 = (v18 >> 1) + ((__int16)v16 >> 3);
  }
  if (v33 <= ~((int)v20 >> 1)) {
    int v38 = ~((int)v20 >> 1);
  }
  else {
    int v38 = v37;
  }
  unsigned int vars0_4 = v38;
  unsigned int v39 = v32 >> 1;
  int v40 = (v19 >> 1) + (v16 >> 19);
  if (v40 < v32 >> 1) {
    unsigned int v39 = (v19 >> 1) + (v16 >> 19);
  }
  unsigned int v51 = (int)v24 >> 1;
  if (v40 <= ~((int)v24 >> 1)) {
    uint64_t v41 = ~((int)v24 >> 1);
  }
  else {
    uint64_t v41 = v39;
  }
  uint64_t v59 = v41;
  uint64_t v53 = v17;
  unsigned int v58 = v15;
  uint64_t v57 = v17 + v15;
  if ((v16 & 0x10001) != 0
    || !*(unsigned char *)(*(void *)(v13 + 4760) + 221)
    || *(unsigned char *)(v13 + 32 * v15 + (((unint64_t)*(unsigned __int8 *)(v57 + 8) >> 3) & 0x1E) + 5120))
  {
    LODWORD(v54) = (unsigned __int16)v16;
    HIDWORD(v54) = v16 & 0xFFFF0000;
  }
  else
  {
    uint64_t v54 = 0;
  }
  sub_1D0C94F44(v14, v35 + v24);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1F26F1BE8[2 * *(unsigned __int8 *)(v22 + 532)]
                                                                                                  + *(unsigned __int8 *)(v22 + 531)))(v29, v35, vars0_4, v59, v21, v24, v22);
  if (vars8)
  {
    unint64_t v43 = (unint64_t)*(unsigned __int8 *)(v57 + 8) >> 4;
    if (*(unsigned char *)(v23 + 32 * v58 + 2 * v43 + 5120))
    {
      unint64_t v44 = v23 + ((unint64_t)v58 << 8) + 16 * v43 + 672;
      uint64_t v45 = *(unsigned int *)(v23 + 664);
      (*(void (**)(uint64_t, uint64_t))(v23
                                               + ((8 * (((HIDWORD(v54) | v54) & 3) != 0)) | (16 * (((HIDWORD(v54) | v54) & 0x30000) != 0)))
                                               + 3288))(v21, v24);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, void, unsigned int *, uint64_t, uint64_t))(v23 + 3352))(v21, v24, v45, v44, (int)v21, &a9, v55, vars8);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v23
                                                           + ((8 * (((HIDWORD(v54) | v54) & 3) != 0)) | (16 * (((HIDWORD(v54) | v54) & 0x30000) != 0)))
                                                           + 3224))(v21, v24);
    }
  }
  if (v56 && *(unsigned char *)(v22 + 532))
  {
    unint64_t v46 = (unint64_t)*(unsigned __int8 *)(v57 + 8) >> 4;
    if (*(unsigned char *)(v23 + 32 * v58 + 2 * v46 + 5121))
    {
      unint64_t v47 = v23 + ((unint64_t)v58 << 8) + 16 * v46 + 680;
      uint64_t v48 = *(unsigned int *)(v23 + 668);
      uint64_t v49 = v21 & 0xFFFFFFFE;
      (*(void (**)(uint64_t, void))(v23
                                              + ((8 * ((*(_DWORD *)(v53 + 4 * v58) & 7) != 0)) | (16 * ((*(_DWORD *)(v53 + 4 * v58) & 0x70000) != 0)))
                                              + 3320))(v49, v51);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, unint64_t, void, unsigned int *, uint64_t, uint64_t))(v23 + 3360))(v49, v51, v48, v47, (int)v49, &a9, v52, v56);
    }
    else
    {
      uint64_t v50 = *(uint64_t (**)(void, void))(v23
                                                     + ((8 * ((*(_DWORD *)(v53 + 4 * v58) & 7) != 0)) | (16 * ((*(_DWORD *)(v53 + 4 * v58) & 0x70000) != 0)))
                                                     + 3256);
      return v50(v21 & 0xFFFFFFFE, v51);
    }
  }
  return result;
}

uint64_t sub_1D0D57F50(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  if (a5)
  {
    int v6 = *(_DWORD *)(a6 + 520);
    uint64_t v7 = (a3 + result - (v6 >> 1));
    if ((int)v7 >= 1)
    {
      uint64_t v8 = (int *)(*(void *)(a6 + 408)
                 + ((*(void *)(a6 + 424) * (a2 - 1) + (int)((v6 & 0xFFFFFFFE) - 2)) << *(unsigned char *)(a6 + 531)));
      int v11 = *v8;
      int v9 = v8 + 1;
      int v10 = v11;
      do
      {
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
  }
  if (a4)
  {
    int v12 = *(_DWORD *)(a6 + 524);
    uint64_t v13 = (a3 + a2 - (v12 >> 1));
    if ((int)v13 >= 1)
    {
      uint64_t v14 = *(void *)(a6 + 424);
      uint64_t v15 = *(void *)(a6 + 408);
      uint64_t v16 = (v14 * ((v12 >> 1) - 1) + 2 * (int)result - 2) << *(unsigned char *)(a6 + 531);
      int v17 = *(_DWORD *)(v15 + v16);
      unint64_t v18 = (2 * v14) & 0xFFFFFFFFFFFFFFFCLL;
      int v19 = (_DWORD *)(v15 + v18 + v16);
      do
      {
        *int v19 = v17;
        int v19 = (_DWORD *)((char *)v19 + v18);
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t sub_1D0D58010(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  if (a5)
  {
    uint64_t v6 = *(int *)(a6 + 520);
    uint64_t v7 = (a3 + result - v6);
    if ((int)v7 >= 1)
    {
      uint64_t v8 = (__int16 *)(*(void *)(a6 + 400) + ((v6 + *(void *)(a6 + 416) * (a2 - 1) - 1) << *(unsigned char *)(a6 + 531)));
      __int16 v11 = *v8;
      int v9 = v8 + 1;
      __int16 v10 = v11;
      do
      {
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
  }
  if (a4)
  {
    uint64_t v12 = *(int *)(a6 + 524);
    uint64_t v13 = (a3 + a2 - v12);
    if ((int)v13 >= 1)
    {
      uint64_t v14 = *(void *)(a6 + 416);
      uint64_t v15 = *(void *)(a6 + 400);
      uint64_t v16 = (v14 * (v12 - 1) + (int)result - 1) << *(unsigned char *)(a6 + 531);
      __int16 v17 = *(_WORD *)(v15 + v16);
      uint64_t v18 = 2 * v14;
      int v19 = (_WORD *)(v15 + v16 + 2 * v14);
      do
      {
        *int v19 = v17;
        int v19 = (_WORD *)((char *)v19 + v18);
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t sub_1D0D580B8(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  if (a5)
  {
    int v6 = *(_DWORD *)(a6 + 520);
    uint64_t v7 = (a3 + result - (v6 >> 1));
    if ((int)v7 >= 1)
    {
      uint64_t v8 = (__int16 *)(*(void *)(a6 + 408)
                     + ((*(void *)(a6 + 424) * (a2 - 1) + (int)((v6 & 0xFFFFFFFE) - 2)) << *(unsigned char *)(a6 + 531)));
      __int16 v11 = *v8;
      int v9 = v8 + 1;
      __int16 v10 = v11;
      do
      {
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
  }
  if (a4)
  {
    int v12 = *(_DWORD *)(a6 + 524);
    uint64_t v13 = (a3 + a2 - (v12 >> 1));
    if ((int)v13 >= 1)
    {
      uint64_t v14 = *(void *)(a6 + 424);
      uint64_t v15 = *(void *)(a6 + 408);
      uint64_t v16 = (v14 * ((v12 >> 1) - 1) + 2 * (int)result - 2) << *(unsigned char *)(a6 + 531);
      __int16 v17 = *(_WORD *)(v15 + v16);
      unint64_t v18 = v14 & 0xFFFFFFFFFFFFFFFELL;
      int v19 = (_WORD *)(v15 + v18 + v16);
      do
      {
        *int v19 = v17;
        int v19 = (_WORD *)((char *)v19 + v18);
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

void *sub_1D0D58174(void *result, int a2, int a3, int a4, int a5, uint64_t a6)
{
  int v10 = (int)result;
  if (a5)
  {
    uint64_t v11 = *(int *)(a6 + 520);
    size_t v12 = (a3 + result - v11);
    if ((int)v12 >= 1)
    {
      uint64_t v13 = (v11 + *(void *)(a6 + 416) * (a2 - 1) - 1) << *(unsigned char *)(a6 + 531);
      uint64_t result = memset((void *)(*(void *)(a6 + 400) + v13 + 1), *(unsigned __int8 *)(*(void *)(a6 + 400) + v13), v12);
    }
  }
  if (a4)
  {
    uint64_t v14 = *(int *)(a6 + 524);
    uint64_t v15 = (a3 + a2 - v14);
    if ((int)v15 >= 1)
    {
      uint64_t v16 = *(void *)(a6 + 416);
      uint64_t v17 = *(void *)(a6 + 400);
      uint64_t v18 = (v16 * (v14 - 1) + v10 - 1) << *(unsigned char *)(a6 + 531);
      char v19 = *(unsigned char *)(v17 + v18);
      uint64_t v20 = (unsigned char *)(v17 + v16 + v18);
      do
      {
        *uint64_t v20 = v19;
        v20 += v16;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

void sub_1D0D5824C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 5320);
  uint64_t v7 = *(void *)(v6 + 576);
  *(_WORD *)(a1 + 1160) = *(_WORD *)(a3 + 512);
  *(void *)(a1 + 488) = *(void *)(v6 + 632);
  *(void *)(a1 + 1200) = *(void *)(v6 + 616);
  *(void *)a1 = 0;
  uint64_t v8 = *(void *)(v6 + 40);
  int v9 = *(unsigned __int8 *)(v8 + 2117);
  *(_DWORD *)(a1 + 8) = *(unsigned __int8 *)(v8 + 2113);
  *(_DWORD *)(a1 + 12) = v9;
  *(void *)(a1 + 16) = *(void *)(v8 + 2120);
  *(_DWORD *)(a1 + 24) = *(unsigned __int8 *)(v8 + 2112);
  int v10 = *(char *)(v7 + 650);
  if (v10 == 10)
  {
    sub_1D0C4E7C4(a1, a3);
    *(void *)(a1 + 1080) = sub_1D0D59208;
    *(void *)(a1 + 1088) = sub_1D0D59100;
    *(void *)(a1 + 1096) = sub_1D0D58FB4;
    *(void *)(a1 + 1104) = sub_1D0D58E68;
    *(void *)(a1 + 1112) = sub_1D0D58DBC;
    *(void *)(a1 + 1120) = sub_1D0D58C58;
    *(void *)(a1 + 1128) = sub_1D0D58ADC;
    *(void *)(a1 + 1136) = sub_1D0D5891C;
    *(void *)(a1 + 1144) = sub_1D0D5875C;
    *(void *)(a1 + 1152) = sub_1D0D5863C;
  }
  else
  {
    if (v10 != 8) {
      return;
    }
    sub_1D0C4E7C4(a1, a3);
    *(void *)(a1 + 1112) = sub_1D0D59410;
    *(void *)(a1 + 1152) = sub_1D0D592F8;
    *(void *)(a1 + 1080) = sub_1D0D4D664;
    *(void *)(a1 + 1088) = sub_1D0D4D330;
    *(void *)(a1 + 1096) = sub_1D0D4CE64;
    *(void *)(a1 + 1104) = sub_1D0D4C998;
    *(void *)(a1 + 1120) = sub_1D0D4C4D4;
    *(void *)(a1 + 1128) = sub_1D0D4C118;
    *(void *)(a1 + 1136) = sub_1D0D4BBC8;
    *(void *)(a1 + 1144) = sub_1D0D4B678;
  }
  int v11 = *(char *)(v7 + 573);
  *(_DWORD *)(a1 + 1164) = v11;
  *(unsigned char *)(a1 + 1168) = *(unsigned char *)(v7 + 574);
  *(_DWORD *)(a1 + 1072) = *(unsigned __int8 *)(*(void *)(v6 + 40) + 2097);
  if (v11 == 2)
  {
    *(_DWORD *)(a1 + 1216) = 2;
    if (*(unsigned char *)(v7 + 650) == 10) {
      return;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1216) = *(unsigned __int8 *)(a1 + 30);
  }
  sub_1D0C4E680(a1);
  unint64_t v12 = *(int *)(a1 + 20) * (uint64_t)*(int *)(a1 + 16);
  uint64_t v13 = *(char **)(a1 + 1184);
  uint64_t v14 = *(unsigned char **)(a1 + 1176);
  unint64_t v15 = (v13 - v14) >> 1;
  if (v12 <= v15)
  {
    if (v12 >= v15) {
      goto LABEL_27;
    }
    int v25 = &v14[2 * v12];
  }
  else
  {
    unint64_t v16 = v12 - v15;
    uint64_t v17 = *(void *)(a1 + 1192);
    if (v12 - v15 > (v17 - (uint64_t)v13) >> 1)
    {
      if ((v12 & 0x80000000) != 0) {
        sub_1D0C8D71C();
      }
      unint64_t v18 = v17 - (void)v14;
      if (v18 > v12) {
        unint64_t v12 = v18;
      }
      if (v18 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v19 = v12;
      }
      if (v19 < 0) {
        sub_1D0C6AC2C();
      }
      uint64_t v20 = (char *)operator new(2 * v19);
      uint64_t v21 = &v20[2 * v15];
      uint64_t v22 = &v20[2 * v19];
      bzero(v21, 2 * v16);
      uint64_t v23 = &v21[2 * v16];
      if (v13 != v14)
      {
        do
        {
          __int16 v24 = *((_WORD *)v13 - 1);
          v13 -= 2;
          *((_WORD *)v21 - 1) = v24;
          v21 -= 2;
        }
        while (v13 != v14);
        uint64_t v13 = *(char **)(a1 + 1176);
      }
      *(void *)(a1 + 1176) = v21;
      *(void *)(a1 + 1184) = v23;
      *(void *)(a1 + 1192) = v22;
      if (v13) {
        operator delete(v13);
      }
      goto LABEL_27;
    }
    bzero(*(void **)(a1 + 1184), 2 * v16);
    int v25 = &v13[2 * v16];
  }
  *(void *)(a1 + 1184) = v25;
LABEL_27:
  int v26 = sub_1D0D3A8F0(a1 + 496, *(_DWORD *)(v7 + 576), *(unsigned char *)(v7 + 580), *(unsigned __int8 *)(*(void *)(v6 + 40) + 2096), *(_DWORD *)(v7 + 456), *(unsigned __int8 *)(*(void *)(v6 + 40) + 2099), *(char *)(v6 + 648), *(_DWORD *)(a1 + 1164) == 3, a3 + 657);
  sub_1D0D3C9DC(a1 + 496, a2, *(unsigned __int8 *)(*(void *)(v6 + 40) + 2097));
  if (v26)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("RDCost init failed in SAOEnc\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "RDCost init failed in SAOEnc\n");
    }
  }
  else
  {
    sub_1D0D3C960(a1 + 496, a2, *(_DWORD *)(a1 + 1072), (_DWORD *)(a1 + 464), (_DWORD *)(a1 + 468), (_DWORD *)(a1 + 476));
    *(void *)(a1 + 1208) = *(void *)(v6 + 16);
    *(unsigned char *)(a1 + 484) = *(unsigned char *)(v7 + 925);
  }
}

uint64_t *sub_1D0D5863C(long long *a1, _OWORD *a2, _OWORD *a3)
{
  long long v5 = a1[1];
  long long v8 = *a1;
  long long v9 = v5;
  long long v10 = a1[2];
  uint64_t v11 = *((void *)a1 + 6);
  uint64_t v6 = *((void *)a1 + 2) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1D0D586AC((uint64_t *)a1, a2, a3);
  return sub_1D0D586AC((uint64_t *)&v8, a2 + 4, a3 + 8);
}

uint64_t *sub_1D0D586AC(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[2];
  int v5 = *((_DWORD *)result + 8);
  int v6 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    int v8 = 0;
    int v9 = v5 - v6;
    uint64_t v10 = 2 * result[3];
    uint64_t v11 = 2 * result[1];
    do
    {
      if (v9 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          unint64_t v13 = *(unsigned __int16 *)(v3 + 2 * v12);
          uint64_t result = (uint64_t *)(v13 >> 5);
          *((_DWORD *)a3 + (void)result) = *((_DWORD *)a3 + (v13 >> 5)) - v13 + *(unsigned __int16 *)(v4 + 2 * v12);
          *((_WORD *)a2 + (void)result) = *((_WORD *)a2 + (v13 >> 5)) + 1;
          v12 += 2;
        }
        while (v12 < 2 * v9);
      }
      ++v8;
      v4 += v10;
      v3 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1D0D5875C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)a1;
  long long v9 = v5;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 16) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1D0D587CC(a1, a2, a3);
  return sub_1D0D587CC((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1D0D587CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)result;
  int v6 = *(_DWORD *)(result + 32);
  int v8 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 44);
  int v9 = *(_DWORD *)(result + 36) - v7;
  int v10 = *(_DWORD *)(result + 48);
  BOOL v12 = (v10 & 8) == 0 || v7 != 0;
  int v13 = v9 - v12;
  uint64_t v14 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    uint64_t v15 = *(void *)(result + 24);
    BOOL v17 = (v10 & 2) == 0 || v8 != 0;
    int v18 = 2 * (v6 - v8 - v17);
    uint64_t v19 = ~(2 * (_BYTE)v10) & 2;
    uint64_t v20 = v18;
    uint64_t v21 = v4 + 2 * v15 * v14 + 2 * v19;
    uint64_t v22 = 2 * v15;
    uint64_t v23 = v3 * (2 * v14 + 2) + 2 * v19 + v5 - 4;
    uint64_t v24 = 2 * v3;
    uint64_t v25 = v3 * (2 * v14 - 2) + 2 * v19 + v5 + 4;
    uint64_t result = 2 * v3 * v14 + 2 * v19;
    uint64_t v26 = v5 + result;
    do
    {
      if ((int)v19 < (int)v20)
      {
        uint64_t result = 0;
        do
        {
          int v27 = *(unsigned __int16 *)(v26 + 2 * result);
          int v28 = *(unsigned __int16 *)(v25 + 2 * result);
          BOOL v29 = __OFSUB__(v27, v28);
          int v30 = v27 - v28;
          if ((v30 < 0) ^ v29 | (v30 == 0)) {
            int v31 = 0;
          }
          else {
            int v31 = 1;
          }
          int v32 = v31 | (v30 >> 31);
          int v33 = *(unsigned __int16 *)(v23 + 2 * result);
          BOOL v29 = __OFSUB__(v27, v33);
          int v34 = v27 - v33;
          if ((v34 < 0) ^ v29 | (v34 == 0)) {
            int v35 = 0;
          }
          else {
            int v35 = 1;
          }
          int v36 = v32 + (v35 | (v34 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v36) = *(_DWORD *)(a3 + 4 * v36) - v27 + *(unsigned __int16 *)(v21 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v36);
          result += 2;
        }
        while (v19 + result < v20);
      }
      LODWORD(v14) = v14 + 1;
      v21 += v22;
      v23 += v24;
      v25 += v24;
      v26 += v24;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_1D0D5891C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)a1;
  long long v9 = v5;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 16) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1D0D5898C(a1, a2, a3);
  return sub_1D0D5898C((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1D0D5898C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)result;
  int v6 = *(_DWORD *)(result + 32);
  int v8 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 44);
  int v9 = *(_DWORD *)(result + 36) - v7;
  int v10 = *(_DWORD *)(result + 48);
  BOOL v12 = (v10 & 8) == 0 || v7 != 0;
  int v13 = v9 - v12;
  uint64_t v14 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    uint64_t v15 = *(void *)(result + 24);
    BOOL v17 = (v10 & 2) == 0 || v8 != 0;
    int v18 = 2 * (v6 - v8 - v17);
    uint64_t v19 = ~(2 * (_BYTE)v10) & 2;
    uint64_t v20 = v18;
    uint64_t v21 = v4 + 2 * v15 * v14 + 2 * v19;
    uint64_t v22 = 2 * v15;
    uint64_t v23 = v3 * (2 * v14 + 2) + 2 * v19 + v5 + 4;
    uint64_t v24 = 2 * v3;
    uint64_t v25 = v3 * (2 * v14 - 2) + 2 * v19 + v5 - 4;
    uint64_t result = 2 * v3 * v14 + 2 * v19;
    uint64_t v26 = v5 + result;
    do
    {
      if ((int)v19 < (int)v20)
      {
        uint64_t result = 0;
        do
        {
          int v27 = *(unsigned __int16 *)(v26 + 2 * result);
          int v28 = *(unsigned __int16 *)(v25 + 2 * result);
          BOOL v29 = __OFSUB__(v27, v28);
          int v30 = v27 - v28;
          if ((v30 < 0) ^ v29 | (v30 == 0)) {
            int v31 = 0;
          }
          else {
            int v31 = 1;
          }
          int v32 = v31 | (v30 >> 31);
          int v33 = *(unsigned __int16 *)(v23 + 2 * result);
          BOOL v29 = __OFSUB__(v27, v33);
          int v34 = v27 - v33;
          if ((v34 < 0) ^ v29 | (v34 == 0)) {
            int v35 = 0;
          }
          else {
            int v35 = 1;
          }
          int v36 = v32 + (v35 | (v34 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v36) = *(_DWORD *)(a3 + 4 * v36) - v27 + *(unsigned __int16 *)(v21 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v36);
          result += 2;
        }
        while (v19 + result < v20);
      }
      LODWORD(v14) = v14 + 1;
      v21 += v22;
      v23 += v24;
      v25 += v24;
      v26 += v24;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_1D0D58ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)a1;
  long long v9 = v5;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 16) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1D0D58B4C(a1, a2, a3);
  return sub_1D0D58B4C((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1D0D58B4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)result;
  int v6 = *(_DWORD *)(result + 32);
  int v8 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 44);
  int v9 = *(_DWORD *)(result + 36) - v7;
  BOOL v11 = (*(_DWORD *)(result + 48) & 8) == 0 || v7 != 0;
  int v12 = v9 - v11;
  uint64_t v13 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v13 < v12)
  {
    uint64_t v14 = *(void *)(result + 24);
    int v15 = v6 - v8;
    uint64_t v16 = v4 + 2 * v14 * v13;
    uint64_t v17 = v5 + 2 * v3 * v13;
    uint64_t v18 = 2 * v14;
    uint64_t v19 = v5 + v3 * (2 * v13 + 2);
    uint64_t v20 = 2 * v3;
    uint64_t result = 2 * v13 - 2;
    uint64_t v21 = v5 + v3 * result;
    do
    {
      if (v15 >= 1)
      {
        uint64_t result = 0;
        do
        {
          int v22 = *(unsigned __int16 *)(v17 + 2 * result);
          int v23 = *(unsigned __int16 *)(v21 + 2 * result);
          BOOL v24 = __OFSUB__(v22, v23);
          int v25 = v22 - v23;
          if ((v25 < 0) ^ v24 | (v25 == 0)) {
            int v26 = 0;
          }
          else {
            int v26 = 1;
          }
          int v27 = v26 | (v25 >> 31);
          int v28 = *(unsigned __int16 *)(v19 + 2 * result);
          BOOL v24 = __OFSUB__(v22, v28);
          int v29 = v22 - v28;
          if ((v29 < 0) ^ v24 | (v29 == 0)) {
            int v30 = 0;
          }
          else {
            int v30 = 1;
          }
          int v31 = v27 + (v30 | (v29 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v31) = *(_DWORD *)(a3 + 4 * v31) - v22 + *(unsigned __int16 *)(v16 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v31);
          result += 2;
        }
        while (result < 2 * v15);
      }
      LODWORD(v13) = v13 + 1;
      v16 += v18;
      v19 += v20;
      v21 += v20;
      v17 += v20;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t sub_1D0D58C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)a1;
  long long v9 = v5;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 16) + 2;
  *(void *)&long long v8 = *(void *)a1 + 2;
  *(void *)&long long v9 = v6;
  sub_1D0D58CC8(a1, a2, a3);
  return sub_1D0D58CC8((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1D0D58CC8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 16);
  int v5 = *(_DWORD *)(result + 32);
  int v6 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 44);
  int v8 = *(_DWORD *)(result + 48);
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7 >= 1)
  {
    int v9 = 0;
    BOOL v10 = (v8 & 2) != 0 && v6 == 0;
    int v11 = v5 - v6;
    int v12 = !v10;
    uint64_t v13 = 2 * (v11 - v12);
    uint64_t v14 = ~(2 * (_BYTE)v8) & 2;
    uint64_t v15 = 2 * *(void *)(result + 24);
    uint64_t v16 = (unsigned __int16 *)(v3 + 2 * v14);
    uint64_t v17 = 2 * *(void *)(result + 8);
    do
    {
      uint64_t v18 = v16;
      uint64_t v19 = v14;
      if ((int)v14 < (int)v13)
      {
        do
        {
          int v20 = *v18;
          int v21 = *(v18 - 2);
          BOOL v22 = __OFSUB__(v20, v21);
          int v23 = v20 - v21;
          if ((v23 < 0) ^ v22 | (v23 == 0)) {
            int v24 = 0;
          }
          else {
            int v24 = 1;
          }
          int v25 = v18[2];
          v18 += 2;
          int v26 = (v24 | (v23 >> 31)) + ((v20 > v25) | ((v20 - v25) >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v26) = *(_DWORD *)(a3 + 4 * v26) - v20 + *(unsigned __int16 *)(v4 + 2 * v19);
          uint64_t result = *(unsigned __int16 *)(a2 + 2 * v26);
          *(_WORD *)(a2 + 2 * v26) = result + 1;
          v19 += 2;
        }
        while (v19 < v13);
      }
      ++v9;
      v4 += v15;
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v17);
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t *sub_1D0D58DBC(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[2];
  int v5 = *((_DWORD *)result + 8);
  int v6 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    int v8 = 0;
    int v9 = v5 - v6;
    uint64_t v10 = 2 * result[3];
    uint64_t v11 = 2 * result[1];
    do
    {
      if (v9 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          unint64_t v13 = *(unsigned __int16 *)(v3 + v12);
          uint64_t result = (uint64_t *)(v13 >> 5);
          *((_DWORD *)a3 + (void)result) = *((_DWORD *)a3 + (v13 >> 5)) - v13 + *(unsigned __int16 *)(v4 + v12);
          *((_WORD *)a2 + (void)result) = *((_WORD *)a2 + (v13 >> 5)) + 1;
          v12 += 2;
        }
        while (2 * v9 != v12);
      }
      ++v8;
      v4 += v10;
      v3 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t *sub_1D0D58E68(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = result[2];
  uint64_t v5 = *result;
  int v6 = *((_DWORD *)result + 8);
  int v8 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 11);
  int v9 = *((_DWORD *)result + 9) - v7;
  int v10 = *((_DWORD *)result + 12);
  BOOL v12 = (v10 & 8) == 0 || v7 != 0;
  int v13 = v9 - v12;
  uint64_t v14 = (result[6] & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    uint64_t v15 = result[3];
    BOOL v17 = (v10 & 2) == 0 || v8 != 0;
    uint64_t v18 = (v6 - v8 - v17);
    int v19 = !(v10 & 1);
    BOOL v20 = (v10 & 1) == 0;
    uint64_t v21 = v18 - v20;
    uint64_t v22 = v4 + 2 * v15 * v14 + 2 * v20;
    uint64_t v23 = 2 * v15;
    uint64_t v24 = v3 * (2 * v14 + 2) + 2 * v20 + v5 - 2;
    uint64_t v25 = 2 * v3;
    uint64_t v26 = v3 * (2 * v14 - 2) + 2 * v20 + v5 + 2;
    uint64_t result = (uint64_t *)(v5 + 2 * v3 * v14 + 2 * v20);
    do
    {
      if (v19 < (int)v18)
      {
        uint64_t v27 = 0;
        do
        {
          int v28 = *((unsigned __int16 *)result + v27);
          int v29 = *(unsigned __int16 *)(v26 + 2 * v27);
          BOOL v30 = __OFSUB__(v28, v29);
          int v31 = v28 - v29;
          if ((v31 < 0) ^ v30 | (v31 == 0)) {
            int v32 = 0;
          }
          else {
            int v32 = 1;
          }
          int v33 = v32 | (v31 >> 31);
          int v34 = *(unsigned __int16 *)(v24 + 2 * v27);
          BOOL v30 = __OFSUB__(v28, v34);
          int v35 = v28 - v34;
          if ((v35 < 0) ^ v30 | (v35 == 0)) {
            int v36 = 0;
          }
          else {
            int v36 = 1;
          }
          int v37 = v33 + (v36 | (v35 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v37) = *(_DWORD *)(a3 + 4 * v37) - v28 + *(unsigned __int16 *)(v22 + 2 * v27);
          ++*(_WORD *)(a2 + 2 * v37);
          ++v27;
        }
        while (v21 != v27);
      }
      LODWORD(v14) = v14 + 1;
      v22 += v23;
      v24 += v25;
      v26 += v25;
      uint64_t result = (uint64_t *)((char *)result + v25);
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t *sub_1D0D58FB4(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = result[2];
  uint64_t v5 = *result;
  int v6 = *((_DWORD *)result + 8);
  int v8 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 11);
  int v9 = *((_DWORD *)result + 9) - v7;
  int v10 = *((_DWORD *)result + 12);
  BOOL v12 = (v10 & 8) == 0 || v7 != 0;
  int v13 = v9 - v12;
  uint64_t v14 = (result[6] & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    uint64_t v15 = result[3];
    BOOL v17 = (v10 & 2) == 0 || v8 != 0;
    uint64_t v18 = (v6 - v8 - v17);
    int v19 = !(v10 & 1);
    BOOL v20 = (v10 & 1) == 0;
    uint64_t v21 = v18 - v20;
    uint64_t v22 = v4 + 2 * v15 * v14 + 2 * v20;
    uint64_t v23 = 2 * v15;
    uint64_t v24 = v3 * (2 * v14 + 2) + 2 * v20 + v5 + 2;
    uint64_t v25 = 2 * v3;
    uint64_t v26 = v3 * (2 * v14 - 2) + 2 * v20 + v5 - 2;
    uint64_t result = (uint64_t *)(v5 + 2 * v3 * v14 + 2 * v20);
    do
    {
      if (v19 < (int)v18)
      {
        uint64_t v27 = 0;
        do
        {
          int v28 = *((unsigned __int16 *)result + v27);
          int v29 = *(unsigned __int16 *)(v26 + 2 * v27);
          BOOL v30 = __OFSUB__(v28, v29);
          int v31 = v28 - v29;
          if ((v31 < 0) ^ v30 | (v31 == 0)) {
            int v32 = 0;
          }
          else {
            int v32 = 1;
          }
          int v33 = v32 | (v31 >> 31);
          int v34 = *(unsigned __int16 *)(v24 + 2 * v27);
          BOOL v30 = __OFSUB__(v28, v34);
          int v35 = v28 - v34;
          if ((v35 < 0) ^ v30 | (v35 == 0)) {
            int v36 = 0;
          }
          else {
            int v36 = 1;
          }
          int v37 = v33 + (v36 | (v35 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v37) = *(_DWORD *)(a3 + 4 * v37) - v28 + *(unsigned __int16 *)(v22 + 2 * v27);
          ++*(_WORD *)(a2 + 2 * v37);
          ++v27;
        }
        while (v21 != v27);
      }
      LODWORD(v14) = v14 + 1;
      v22 += v23;
      v24 += v25;
      v26 += v25;
      uint64_t result = (uint64_t *)((char *)result + v25);
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t sub_1D0D59100(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void *)result;
  int v6 = *(_DWORD *)(result + 32);
  int v8 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 44);
  int v9 = *(_DWORD *)(result + 36) - v7;
  BOOL v11 = (*(_DWORD *)(result + 48) & 8) == 0 || v7 != 0;
  int v12 = v9 - v11;
  uint64_t v13 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v13 < v12)
  {
    uint64_t v14 = *(void *)(result + 24);
    int v15 = v6 - v8;
    uint64_t v16 = v4 + 2 * v14 * v13;
    uint64_t v17 = v5 + 2 * v3 * v13;
    uint64_t v18 = 2 * v14;
    uint64_t v19 = v5 + v3 * (2 * v13 + 2);
    uint64_t v20 = 2 * v3;
    uint64_t result = 2 * v13 - 2;
    uint64_t v21 = v5 + v3 * result;
    do
    {
      if (v15 >= 1)
      {
        uint64_t result = 0;
        do
        {
          int v22 = *(unsigned __int16 *)(v17 + result);
          int v23 = *(unsigned __int16 *)(v21 + result);
          BOOL v24 = __OFSUB__(v22, v23);
          int v25 = v22 - v23;
          if ((v25 < 0) ^ v24 | (v25 == 0)) {
            int v26 = 0;
          }
          else {
            int v26 = 1;
          }
          int v27 = v26 | (v25 >> 31);
          int v28 = *(unsigned __int16 *)(v19 + result);
          BOOL v24 = __OFSUB__(v22, v28);
          int v29 = v22 - v28;
          if ((v29 < 0) ^ v24 | (v29 == 0)) {
            int v30 = 0;
          }
          else {
            int v30 = 1;
          }
          int v31 = v27 + (v30 | (v29 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v31) = *(_DWORD *)(a3 + 4 * v31) - v22 + *(unsigned __int16 *)(v16 + result);
          ++*(_WORD *)(a2 + 2 * v31);
          result += 2;
        }
        while (2 * v15 != result);
      }
      LODWORD(v13) = v13 + 1;
      v16 += v18;
      v19 += v20;
      v21 += v20;
      v17 += v20;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t *sub_1D0D59208(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[2];
  int v5 = *((_DWORD *)result + 8);
  int v6 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  int v8 = *((_DWORD *)result + 12);
  *(_WORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7 >= 1)
  {
    int v9 = 0;
    BOOL v10 = (v8 & 2) != 0 && v6 == 0;
    int v11 = !v10;
    uint64_t v12 = (v5 - v6 - v11);
    BOOL v10 = (v8 & 1) == 0;
    int v13 = !(v8 & 1);
    uint64_t v14 = 2 * result[3];
    uint64_t v15 = v10;
    uint64_t v16 = 2 * v15;
    uint64_t v17 = (uint64_t *)(v12 - v15);
    uint64_t v18 = 2 * result[1];
    do
    {
      uint64_t result = v17;
      uint64_t v19 = v16;
      if (v13 < (int)v12)
      {
        do
        {
          int v20 = *(unsigned __int16 *)(v3 + v19);
          int v21 = *(unsigned __int16 *)(v3 + v19 - 2);
          BOOL v22 = __OFSUB__(v20, v21);
          int v23 = v20 - v21;
          if ((v23 < 0) ^ v22 | (v23 == 0)) {
            int v24 = 0;
          }
          else {
            int v24 = 1;
          }
          int v25 = v24 | (v23 >> 31);
          int v26 = *(unsigned __int16 *)(v3 + v19 + 2);
          BOOL v22 = __OFSUB__(v20, v26);
          int v27 = v20 - v26;
          if ((v27 < 0) ^ v22 | (v27 == 0)) {
            int v28 = 0;
          }
          else {
            int v28 = 1;
          }
          int v29 = v25 + (v28 | (v27 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v29) = *(_DWORD *)(a3 + 4 * v29) - v20 + *(unsigned __int16 *)(v4 + v19);
          ++*(_WORD *)(a2 + 2 * v29);
          v19 += 2;
          uint64_t result = (uint64_t *)((char *)result - 1);
        }
        while (result);
      }
      ++v9;
      v4 += v14;
      v3 += v18;
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t *sub_1D0D592F8(long long *a1, _OWORD *a2, _OWORD *a3)
{
  long long v5 = a1[1];
  long long v8 = *a1;
  long long v9 = v5;
  long long v10 = a1[2];
  uint64_t v11 = *((void *)a1 + 6);
  uint64_t v6 = *((void *)a1 + 2) + 1;
  *(void *)&long long v8 = *(void *)a1 + 1;
  *(void *)&long long v9 = v6;
  sub_1D0D59368((uint64_t *)a1, a2, a3);
  return sub_1D0D59368((uint64_t *)&v8, a2 + 4, a3 + 8);
}

uint64_t *sub_1D0D59368(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[2];
  int v5 = *((_DWORD *)result + 8);
  int v6 = *((_DWORD *)result + 10);
  int v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    int v8 = 0;
    int v9 = v5 - v6;
    uint64_t v10 = result[1];
    uint64_t v11 = result[3];
    do
    {
      if (v9 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          unint64_t v13 = *(unsigned __int8 *)(v3 + v12);
          uint64_t result = (uint64_t *)(v13 >> 3);
          *((_DWORD *)a3 + (void)result) = *((_DWORD *)a3 + (v13 >> 3)) - v13 + *(unsigned __int8 *)(v4 + v12);
          *((_WORD *)a2 + (void)result) = *((_WORD *)a2 + (v13 >> 3)) + 1;
          v12 += 2;
        }
        while (v12 < 2 * v9);
      }
      v3 += v10;
      v4 += v11;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1D0D59410(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 16);
  int v5 = *(_DWORD *)(result + 32);
  int v6 = *(_DWORD *)(result + 40);
  int v7 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 44);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = (v5 - v6);
    uint64_t v10 = *(void *)(result + 8);
    uint64_t v11 = *(void *)(result + 24);
    do
    {
      if ((int)v9 >= 1)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          unint64_t v13 = *(unsigned __int8 *)(v3 + i);
          unint64_t v14 = v13 >> 3;
          uint64_t result = *(unsigned __int8 *)(v4 + i);
          *((_DWORD *)a3 + v14) = *((_DWORD *)a3 + (v13 >> 3)) - v13 + result;
          *((_WORD *)a2 + v14) = *((_WORD *)a2 + (v13 >> 3)) + 1;
        }
      }
      v3 += v10;
      v4 += v11;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1D0D594B0(uint64_t result, int a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *(_DWORD *)(result + 8);
  char v9 = v8 - a4;
  int v10 = a2 << (v8 - a4);
  int v11 = a3 << (v8 - a4);
  if (a4) {
    int v12 = 2;
  }
  else {
    int v12 = 4;
  }
  uint64_t v13 = *(void *)(result + 488);
  uint64_t v14 = v13 + 8 * a4;
  uint64_t v15 = *(void *)(v14 + 416);
  uint64_t v16 = *(void *)(v14 + 400);
  char v17 = *(unsigned char *)(v13 + 531);
  v45[0] = v16 + ((v15 * v11 + (v10 << a4)) << v17);
  v45[1] = v15;
  uint64_t v18 = *(void *)(result + 1200);
  uint64_t v19 = v18 + 8 * a4;
  uint64_t v20 = *(void *)(v19 + 416);
  uint64_t v21 = *(void *)(v19 + 400);
  char v22 = *(unsigned char *)(v18 + 531);
  uint64_t v46 = v21 + ((v20 * v11 + (v10 << a4)) << v22);
  uint64_t v47 = v20;
  int v23 = 1 << v9;
  int v48 = 1 << v9;
  int v49 = 1 << v9;
  int v50 = v12;
  int v51 = v12;
  int v52 = 0;
  int v24 = *(int **)(result + 1208);
  if (*(unsigned __int8 *)v24 == 255 && *((unsigned __int8 *)v24 + 3) == 255)
  {
    int v25 = 1 << v9;
  }
  else
  {
    char v39 = v22;
    uint64_t v40 = v21;
    char v41 = v17;
    uint64_t v42 = v16;
    uint64_t result = sub_1D0D3A85C(v24, v10, v11, 1 << v8);
    int v25 = v23;
    if (result == 1)
    {
      int v26 = v24[9] >> a4;
      if (v10 > v26) {
        int v26 = v10;
      }
      int v27 = v24[11] >> a4;
      if (v11 > v27) {
        int v27 = v11;
      }
      int v28 = v24[10] >> a4;
      if (v28 >= v10 + v23 - 1) {
        int v28 = v10 + v23 - 1;
      }
      int v29 = v24[12] >> a4;
      if (v29 >= v11 + v23 - 1) {
        int v29 = v11 + v23 - 1;
      }
      v45[0] = v42 + ((v15 * v27 + (v26 << a4)) << v41);
      uint64_t v46 = v40 + ((v20 * v27 + (v26 << a4)) << v39);
      int v25 = v28 - v26 + 1;
      int v23 = v29 - v27 + 1;
      int v48 = v25;
      int v49 = v23;
    }
  }
  uint64_t v30 = 504;
  if (!*(unsigned char *)(v13 + 432)) {
    uint64_t v30 = 520;
  }
  uint64_t v31 = 508;
  if (!*(unsigned char *)(v13 + 432)) {
    uint64_t v31 = 524;
  }
  int v32 = *(_DWORD *)(v13 + v31);
  int v33 = *(int *)(v13 + v30) >> a4;
  int v34 = v32 >> a4;
  if (v25 + v10 > v33) {
    int v48 = v33 - v10;
  }
  if (v23 + v11 > v34) {
    int v49 = v34 - v11;
  }
  int v35 = a2 != 0;
  if (a3) {
    v35 |= 4u;
  }
  if (a2 | a3) {
    int v52 = v35;
  }
  if (*(_DWORD *)(v7 + 16) - 1 <= a2)
  {
    int v50 = 0;
  }
  else
  {
    v35 |= 2u;
    int v52 = v35;
  }
  if (*(_DWORD *)(v7 + 20) - 1 <= a3) {
    int v51 = 0;
  }
  else {
    int v52 = v35 | 8;
  }
  if (!*(unsigned char *)(v7 + 1168) || (a4 & 1) == 0)
  {
    uint64_t v36 = 0;
    uint64_t v37 = a5 + 20 * a4;
    uint64_t v38 = a5 + 10 * a4 + 240;
    do
    {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 40 * a4 + 1080 + v36))(v45, v38, v37);
      v36 += 8;
      v37 += 60;
      v38 += 30;
    }
    while (v36 != 32);
    if (!*(unsigned char *)(v7 + 1168)) {
      return (*(uint64_t (**)(void *, unint64_t, unint64_t))(v7 + 40 * a4 + 1112))(v45, a5 + ((unint64_t)a4 << 6) + 744, a5 + ((unint64_t)a4 << 7) + 360);
    }
  }
  if (a4) {
    return (*(uint64_t (**)(void *, unint64_t, unint64_t))(v7 + 40 * a4 + 1112))(v45, a5 + ((unint64_t)a4 << 6) + 744, a5 + ((unint64_t)a4 << 7) + 360);
  }
  return result;
}

uint64_t sub_1D0D597E0(int a1, int a2, int *a3, int *a4, int a5, int a6, int a7)
{
  int v7 = *a3;
  if (*a3)
  {
    if (v7 < 1) {
      int v8 = 1;
    }
    else {
      int v8 = -1;
    }
    if (v7 == v8)
    {
      int v9 = 0;
      int v10 = 0;
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = 0;
      int v10 = 0;
      int v9 = 0;
      int v16 = v7 * a1 - 2 * a2;
      int v17 = v8 * a1;
      int v18 = 0x7FFFFFFF;
      do
      {
        int v19 = v7;
        BOOL v20 = a5 == 4;
        int v21 = v16 * v7;
        if (v19 >= 0) {
          int v22 = v19;
        }
        else {
          int v22 = -v19;
        }
        if (!v19) {
          BOOL v20 = 0;
        }
        if (v22 + 1 < a7) {
          int v23 = v22 + 1;
        }
        else {
          int v23 = a7;
        }
        uint64_t v24 = (v23 + v20);
        if (v21 + (int)v24 * a6 < v18)
        {
          int v9 = v19;
          int v10 = v21;
          uint64_t result = v24;
          int v18 = v21 + v24 * a6;
        }
        int v7 = v19 + v8;
        v16 += v17;
      }
      while (v19);
    }
    *a3 = v9;
    *a4 = v10;
  }
  else
  {
    *a4 = 0;
    int v12 = *a3;
    BOOL v13 = a5 == 4;
    if (*a3 < 0) {
      int v12 = -v12;
    }
    if (!*a3) {
      BOOL v13 = 0;
    }
    if (v12 + 1 < a7) {
      int v14 = v12 + 1;
    }
    else {
      int v14 = a7;
    }
    return (v14 + v13);
  }
  return result;
}

uint64_t sub_1D0D598BC(uint64_t result, uint64_t a2, int a3, char *a4, unsigned int a5, int *a6, int *a7, int a8)
{
  uint64_t v46 = a2 + 30 * a3 + 10 * a5 + 240;
  uint64_t v45 = a2 + 60 * a3 + 20 * a5;
  do
  {
    int v8 = *a4;
    int v9 = a4[1];
    BOOL v10 = v8 < v9;
    if (v8 <= v9) {
      int v11 = a4[1];
    }
    else {
      int v11 = *a4;
    }
    if (v8 > v9) {
      int v12 = a4[1];
    }
    else {
      int v12 = *a4;
    }
    int v13 = a4[2];
    int v14 = a4[3];
    if (v13 < v14) {
      uint64_t v15 = 3;
    }
    else {
      uint64_t v15 = 4;
    }
    if (v13 >= v14) {
      int v16 = a4[3];
    }
    else {
      int v16 = a4[2];
    }
    if (v13 < v14) {
      int v17 = a4[3];
    }
    else {
      int v17 = a4[2];
    }
    int v18 = v11 - v16;
    if (v11 - v16 < 5) {
      break;
    }
    int v19 = 0;
    int v20 = 0;
    int v21 = 0;
    char v22 = 0;
    int v23 = *(unsigned __int16 *)(v46 + 2 * v10);
    int v24 = *(unsigned __int16 *)(v46 + 2 * v15);
    int v49 = v18 - 4;
    int v25 = v18 - 3;
    int v26 = -2 * *(_DWORD *)(v45 + 4 * v15);
    int v27 = -2 * *(_DWORD *)(v45 + 4 * v10);
    int v28 = v16 + 4;
    int v29 = 0x7FFFFFFF;
    int v47 = v27;
    int v48 = v26;
LABEL_19:
    int v30 = 1 - (v16 + v19);
    int v31 = v26 + v24 * (v16 + v19);
    int v32 = v27 + v23 * (v28 + v19);
    do
    {
      if ((v16 - 1 + v19) >= 0xFFFFFFFB)
      {
        int v33 = v16 + v19;
        BOOL v34 = a3 == 4;
        int v35 = v16 + v19 + 4;
        int v36 = v31 * (v16 + v19) + v32 * v35;
        int v37 = *(unsigned __int8 *)(result + 30);
        int v38 = -4 - (v16 + v19);
        if (v35 >= 0) {
          int v38 = v16 + v19 + 4;
        }
        if (v38 + 1 < v37) {
          int v39 = v38 + 1;
        }
        else {
          int v39 = *(unsigned __int8 *)(result + 30);
        }
        BOOL v40 = v33 != -4 && a3 == 4;
        if (v30 < v37) {
          int v37 = v30;
        }
        if (!v33) {
          BOOL v34 = 0;
        }
        int v41 = v40 + v34 + v37 + v39;
        if (v36 + v41 * a8 < v29)
        {
          *a6 = v36;
          *a7 = v41;
          char v22 = 1;
          int v29 = v36 + v41 * a8;
          int v20 = v16 + v19;
          int v21 = v33 + 4;
          int v26 = v48;
          BOOL v42 = v19++ == v49;
          int v28 = v16 + 4;
          int v27 = v47;
          if (!v42) {
            goto LABEL_19;
          }
          goto LABEL_40;
        }
      }
      ++v19;
      --v30;
      v31 += v24;
      v32 += v23;
    }
    while (v25 != v19);
    int v35 = v21;
    int v33 = v20;
    if ((v22 & 1) == 0) {
      continue;
    }
LABEL_40:
    a4[byte_1D0DAE364[v15] - 1] = v33;
    a4[byte_1D0DAE364[v10] - 1] = v35;
    int v21 = v35;
    int v20 = v33;
  }
  while (v12 - v17 > 4 || v12 - v20 > 4 || v21 - v17 > 4);
  return result;
}

uint64_t sub_1D0D59AF8(uint64_t a1, int a2, int a3)
{
  uint64_t result = *(unsigned int *)(a1 + 2112);
  if ((int)result < 2) {
    return 0;
  }
  int v7 = *(uint64_t **)(a1 + 2064);
  uint64_t v8 = *v7;
  int v9 = a2 + *(_DWORD *)(*(void *)(*v7 + 16) + 2120) * a3;
  uint64_t v10 = *(void *)(*v7 + 32);
  if (!*(unsigned char *)(v10 + 20))
  {
    while (result-- >= 1)
    {
      if (*(_DWORD *)(v7[result] + 52) <= v9) {
        return result;
      }
    }
    goto LABEL_13;
  }
  int v11 = sub_1D0C97628(v10 + 1648, a2, a3);
  uint64_t v12 = *(unsigned int *)(a1 + 2112);
  if ((int)v12 < 1)
  {
LABEL_13:
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "No slice found containing TB [%d][%d]!\n", a3, a2);
      syslog(27, "No slice found containing TB [%d][%d]!\n", a3, a2);
    }
    return 0;
  }
  int v13 = v11;
  uint64_t v14 = v12 + 1;
  while (1)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 2064) + 8 * (v14 - 2));
    int v16 = *(_DWORD *)(v15 + 52);
    if (v16 <= v9)
    {
      int v17 = sub_1D0C97628(*(void *)(v8 + 32) + 1648, v16 % *(_DWORD *)(*(void *)(v8 + 16) + 2120), v16 / *(_DWORD *)(*(void *)(v8 + 16) + 2120));
      if (v13 >= v17 && v13 <= *(_DWORD *)(v15 + 568) + v17) {
        return v14 - 2;
      }
    }
    if ((unint64_t)--v14 <= 1) {
      goto LABEL_13;
    }
  }
}

void sub_1D0D59C5C(uint64_t a1)
{
}

uint64_t sub_1D0D59C64(void *a1, int a2, int *a3, int *a4)
{
  uint64_t v8 = *(void *)(a1[258] + 8 * (int)sub_1D0D59AF8((uint64_t)a1, *a3, *a4));
  int v9 = (void *)(a1[261] + 6464 * a2);
  uint64_t v10 = a1[265];
  return sub_1D0CC6524(v8, v10, v9, a3, a4);
}

int8x16_t *sub_1D0D59CD4(int8x16_t *result, const double *a2, int a3, int a4, int a5, int a6)
{
  int8x16_t v6 = result[139];
  int8x16_t v7 = result[140];
  uint64_t v8 = a2;
  int16x8_t v9 = (int16x8_t)vld1q_dup_f64(v8++);
  int8x16_t v10 = (int8x16_t)vld1q_dup_s16((const __int16 *)v8);
  v11.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v11.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  int8x16_t v12 = vandq_s8(v10, v11);
  v59.val[0] = vqtbl1q_s8(v6, v12);
  v59.val[1] = vqtbl1q_s8(v7, v12);
  int8x16_t v13 = vqtbl2q_s8(v59, (int8x16_t)xmmword_1D0D7F540);
  uint64_t v14 = (void *)result->i64[1];
  uint64_t v15 = v14[106];
  if (a4 && (a4 & 7) == 0)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v14[118] + v14[116] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    int8x16_t v18 = *(int8x16_t *)((char *)&unk_1D0DAE574 - (a5 >> 2) + 16);
    uint64_t v19 = (uint64_t)a2 - 12 * v15 + 24;
    v20.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v20.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v21.i64[0] = -1;
    v21.i64[1] = -1;
    v22.i64[0] = 0x3000300030003;
    v22.i64[1] = 0x3000300030003;
    v23.i64[0] = 0x101010101010101;
    v23.i64[1] = 0x101010101010101;
    do
    {
      int16x8_t v24 = *(int16x8_t *)(v19 - 24);
      int16x8_t v25 = *(int16x8_t *)(v19 - 12);
      int16x8_t v26 = *(int16x8_t *)(v19 + 12);
      int32x4_t v27 = (int32x4_t)vzip2q_s16(v24, v25);
      int16x8_t v28 = (int16x8_t)vzip1q_s64((int64x2_t)v24, (int64x2_t)v25);
      int16x8_t v29 = (int16x8_t)vzip1q_s64(*(int64x2_t *)v19, (int64x2_t)v26);
      int8x16_t v30 = vandq_s8((int8x16_t)vzip1q_s32(v27, (int32x4_t)vzip2q_s16(*(int16x8_t *)v19, v26)), v20);
      v60.val[0] = vqtbl1q_s8(v6, v30);
      v60.val[1] = vqtbl1q_s8(v7, v30);
      int8x16_t v31 = (int8x16_t)vceqq_s16((int16x8_t)vceqq_s8(vqtbl2q_s8(v60, (int8x16_t)xmmword_1D0D7F540), v13), v21);
      uint8x16_t v32 = (uint8x16_t)vandq_s8(vaddq_s8(vandq_s8(vuzp1q_s8(v31, v31), vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v28, v9)), v22), (int8x16_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v29, v9)), v22))), (int8x16_t)xmmword_1D0D7F550)), v23), v18);
      int v33 = (const float *)(v17 + v16);
      uint8x16_t v34 = (uint8x16_t)vld1q_dup_f32(v33);
      *(_DWORD *)(v17 + v16) = vmaxq_u8(v32, v34).u32[0];
      int8x16_t v18 = vextq_s8(v18, v18, 4uLL);
      v16 += 4;
      v19 += 48;
    }
    while (v16 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    uint64_t v35 = 0;
    uint64_t v36 = v14[121] + v14[117] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    int8x16_t v37 = *(int8x16_t *)((char *)&unk_1D0DAE574 - (a6 >> 2) + 16);
    int v38 = (int16x8_t *)((char *)a2 - 12);
    uint64_t v39 = 36 * v15;
    uint64_t v40 = 3 * v15;
    uint64_t v41 = 48 * v15;
    uint64_t v42 = 8 * v40;
    uint64_t v43 = 4 * v40;
    v44.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v44.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v45.i64[0] = -1;
    v45.i64[1] = -1;
    v46.i64[0] = 0x3000300030003;
    v46.i64[1] = 0x3000300030003;
    v47.i64[0] = 0x101010101010101;
    v47.i64[1] = 0x101010101010101;
    do
    {
      int16x8_t v48 = *(int16x8_t *)((char *)v38 + v43);
      int16x8_t v49 = *(int16x8_t *)((char *)v38 + v42);
      int16x8_t v50 = *(int16x8_t *)((char *)v38 + v39);
      int32x4_t v51 = (int32x4_t)vzip2q_s16(*v38, v48);
      int16x8_t v52 = (int16x8_t)vzip1q_s64(*(int64x2_t *)v38, (int64x2_t)v48);
      int16x8_t v53 = (int16x8_t)vzip1q_s64((int64x2_t)v49, (int64x2_t)v50);
      int8x16_t v54 = vandq_s8((int8x16_t)vzip1q_s32(v51, (int32x4_t)vzip2q_s16(v49, v50)), v44);
      v61.val[0] = vqtbl1q_s8(v6, v54);
      v61.val[1] = vqtbl1q_s8(v7, v54);
      int8x16_t v55 = (int8x16_t)vceqq_s16((int16x8_t)vceqq_s8(vqtbl2q_s8(v61, (int8x16_t)xmmword_1D0D7F540), v13), v45);
      uint8x16_t v56 = (uint8x16_t)vandq_s8(vaddq_s8(vandq_s8(vuzp1q_s8(v55, v55), vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v52, v9)), v46), (int8x16_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v53, v9)), v46))), (int8x16_t)xmmword_1D0D7F550)), v47), v37);
      uint64_t v57 = (const float *)(v36 + v35);
      uint8x16_t v58 = (uint8x16_t)vld1q_dup_f32(v57);
      *(_DWORD *)(v36 + v35) = vmaxq_u8(v56, v58).u32[0];
      int8x16_t v37 = vextq_s8(v37, v37, 4uLL);
      v35 += 4;
      int v38 = (int16x8_t *)((char *)v38 + v41);
    }
    while (v35 < (uint64_t)a6 >> 2);
  }
  return result;
}

__int32 *sub_1D0D59F0C(__int32 *result, const float *a2, int a3, int a4, int a5, int a6)
{
  int16x8_t v6 = (int16x8_t)vld1q_dup_f32(a2);
  int8x16_t v7 = (void *)*((void *)result + 1);
  uint64_t v8 = v7[106];
  if (a4 && (a4 & 7) == 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v7[118] + v7[116] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    int8x16_t v11 = *(int8x16_t *)((char *)&unk_1D0DAE574 - (a5 >> 2) + 16);
    int8x16_t v12 = (__int32 *)&a2[-3 * v8 + 6];
    v13.i64[0] = 0x3000300030003;
    v13.i64[1] = 0x3000300030003;
    v14.i64[0] = 0x101010101010101;
    v14.i64[1] = 0x101010101010101;
    do
    {
      uint64_t result = v12 + 3;
      v15.i32[0] = *(v12 - 6);
      v15.i32[1] = *(v12 - 3);
      v15.i32[2] = *v12;
      v15.i32[3] = v12[3];
      uint64_t v16 = (const float *)(v10 + v9);
      uint8x16_t v17 = (uint8x16_t)vld1q_dup_f32(v16);
      *(_DWORD *)(v10 + v9) = vmaxq_u8((uint8x16_t)vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v15, v6)), v13)), (int8x16_t)xmmword_1D0D7F550), v14), v11), v17).u32[0];
      int8x16_t v11 = vextq_s8(v11, v11, 4uLL);
      v9 += 4;
      v12 += 12;
    }
    while (v9 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    uint64_t v18 = 0;
    uint64_t v19 = v7[121] + v7[117] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    int8x16_t v20 = *(int8x16_t *)((char *)&unk_1D0DAE574 - (a6 >> 2) + 16);
    int16x8_t v21 = (__int32 *)(a2 - 3);
    uint64_t v22 = 9 * v8;
    uint64_t v23 = 3 * v8;
    uint64_t v24 = 48 * v8;
    uint64_t v25 = 2 * v23;
    uint64_t v26 = v23;
    v27.i64[0] = 0x3000300030003;
    v27.i64[1] = 0x3000300030003;
    v28.i64[0] = 0x101010101010101;
    v28.i64[1] = 0x101010101010101;
    do
    {
      uint64_t result = &v21[v22];
      v29.i32[0] = *v21;
      v29.i32[1] = v21[v26];
      v29.i32[2] = v21[v25];
      v29.i32[3] = v21[v22];
      int8x16_t v30 = (const float *)(v19 + v18);
      uint8x16_t v31 = (uint8x16_t)vld1q_dup_f32(v30);
      *(_DWORD *)(v19 + v18) = vmaxq_u8((uint8x16_t)vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v29, v6)), v27)), (int8x16_t)xmmword_1D0D7F550), v28), v20), v31).u32[0];
      int8x16_t v20 = vextq_s8(v20, v20, 4uLL);
      v18 += 4;
      int16x8_t v21 = (__int32 *)((char *)v21 + v24);
    }
    while (v18 < (uint64_t)a6 >> 2);
  }
  return result;
}

int8x16_t *sub_1D0D5A098(int8x16_t *result, uint64_t a2, int a3, int a4, int a5, int a6, double a7, double a8, int8x16_t a9)
{
  int16x8_t v9 = (int16x8_t)vld1q_dup_f32((const float *)a2);
  int8x16_t v10 = result[139];
  a9.i8[0] = *(unsigned char *)(a2 + 8);
  v11.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v11.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  int8x16_t v12 = vqtbl1q_s8(v10, vdupq_lane_s8((int8x8_t)*(_OWORD *)&vandq_s8(a9, v11), 0));
  uint16x8_t v13 = (void *)result->i64[1];
  uint64_t v14 = v13[106];
  if (a4 && (a4 & 7) == 0)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v13[118] + v13[116] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    int8x16_t v17 = *(int8x16_t *)((char *)&unk_1D0DAE574 - (a5 >> 2) + 16);
    uint64_t v18 = a2 - 12 * v14 + 24;
    v19.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v19.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v20.i64[0] = 0x3000300030003;
    v20.i64[1] = 0x3000300030003;
    v21.i64[0] = 0x101010101010101;
    v21.i64[1] = 0x101010101010101;
    do
    {
      int32x4_t v22 = *(int32x4_t *)(v18 - 24);
      int32x4_t v23 = *(int32x4_t *)(v18 - 12);
      int32x4_t v24 = *(int32x4_t *)(v18 + 12);
      int16x8_t v25 = (int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32(v22, v23), (int64x2_t)vzip1q_s32(*(int32x4_t *)v18, v24));
      int8x16_t v26 = vceqq_s8(vqtbl1q_s8(v10, vandq_s8((int8x16_t)vzip1q_s16((int16x8_t)vzip2q_s8((int8x16_t)v22, (int8x16_t)v23), (int16x8_t)vzip2q_s8(*(int8x16_t *)v18, (int8x16_t)v24)), v19)), v12);
      uint16x8_t v27 = (const float *)(v16 + v15);
      uint8x16_t v28 = (uint8x16_t)vld1q_dup_f32(v27);
      *(_DWORD *)(v16 + v15) = vmaxq_u8((uint8x16_t)vandq_s8(vsubq_s8(vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v25, v9)), v20)), (int8x16_t)xmmword_1D0D7F550), v21), v26), vmvnq_s8(v26)), v17), v28).u32[0];
      int8x16_t v17 = vextq_s8(v17, v17, 4uLL);
      v15 += 4;
      v18 += 48;
    }
    while (v15 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    uint64_t v29 = 0;
    uint64_t v30 = v13[121] + v13[117] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    int8x16_t v31 = *(int8x16_t *)((char *)&unk_1D0DAE574 - (a6 >> 2) + 16);
    uint8x16_t v32 = (int32x4_t *)(a2 - 12);
    uint64_t v33 = 36 * v14;
    uint64_t v34 = 3 * v14;
    uint64_t v35 = 48 * v14;
    uint64_t v36 = 8 * v34;
    uint64_t v37 = 4 * v34;
    v38.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v38.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v39.i64[0] = 0x3000300030003;
    v39.i64[1] = 0x3000300030003;
    v40.i64[0] = 0x101010101010101;
    v40.i64[1] = 0x101010101010101;
    do
    {
      int32x4_t v41 = *(int32x4_t *)((char *)v32 + v37);
      int32x4_t v42 = *(int32x4_t *)((char *)v32 + v36);
      int32x4_t v43 = *(int32x4_t *)((char *)v32 + v33);
      int16x8_t v44 = (int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32(*v32, v41), (int64x2_t)vzip1q_s32(v42, v43));
      int8x16_t v45 = vceqq_s8(vqtbl1q_s8(v10, vandq_s8((int8x16_t)vzip1q_s16((int16x8_t)vzip2q_s8(*(int8x16_t *)v32, (int8x16_t)v41), (int16x8_t)vzip2q_s8((int8x16_t)v42, (int8x16_t)v43)), v38)), v12);
      uint16x8_t v46 = (const float *)(v30 + v29);
      uint8x16_t v47 = (uint8x16_t)vld1q_dup_f32(v46);
      *(_DWORD *)(v30 + v29) = vmaxq_u8((uint8x16_t)vandq_s8(vsubq_s8(vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vqabsq_s16(vqsubq_s16(v44, v9)), v39)), (int8x16_t)xmmword_1D0D7F550), v40), v45), vmvnq_s8(v45)), v31), v47).u32[0];
      int8x16_t v31 = vextq_s8(v31, v31, 4uLL);
      v29 += 4;
      uint8x16_t v32 = (int32x4_t *)((char *)v32 + v35);
    }
    while (v29 < (uint64_t)a6 >> 2);
  }
  return result;
}

uint64_t sub_1D0D5A28C(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  if (a5 >= 8)
  {
    uint64_t v5 = a5 >> 3;
    uint64_t v6 = 2 * a2;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = 6 * a2;
    uint64_t v9 = 8 * a2;
    uint64_t v10 = 12 * a2;
    uint64_t v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xFF00FF00FF00FFLL;
    v15.i64[1] = 0xFF00FF00FF00FFLL;
    uint64_t v16 = 14 * a2;
    do
    {
      unsigned int v18 = *a4++;
      unsigned int v17 = v18;
      if (v18)
      {
        int16x8_t v19 = *(int16x8_t *)(result - 8);
        int16x8_t v20 = *(int16x8_t *)(result + v6 - 8);
        int16x8_t v21 = *(int16x8_t *)(result + v7 - 8);
        int16x8_t v22 = *(int16x8_t *)(result + v8 - 8);
        int16x8_t v23 = *(int16x8_t *)(result + v9 - 8);
        int16x8_t v24 = *(int16x8_t *)(result + v11 - 8);
        int16x8_t v25 = *(int16x8_t *)(result + v10 - 8);
        int16x8_t v26 = *(int16x8_t *)(result + v16 - 8);
        int32x4_t v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        int32x4_t v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        int32x4_t v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        int32x4_t v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        int64x2_t v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        int64x2_t v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        int64x2_t v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        int64x2_t v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        int32x4_t v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        int32x4_t v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        int32x4_t v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        int32x4_t v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        int64x2_t v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        int64x2_t v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        int64x2_t v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        int64x2_t v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        int16x8_t v43 = (int16x8_t)vzip2q_s64(v31, v39);
        int16x8_t v44 = (int16x8_t)vzip1q_s64(v33, v41);
        int16x8_t v45 = (int16x8_t)vzip2q_s64(v33, v41);
        int16x8_t v46 = (int16x8_t)vzip1q_s64(v32, v40);
        int16x8_t v47 = (int16x8_t)vzip2q_s64(v32, v40);
        int16x8_t v48 = (int16x8_t)vzip1q_s64(v34, v42);
        int16x8_t v49 = vdupq_n_s16(*a3);
        int16x8_t v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        int16x8_t v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        int16x8_t v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          int16x8_t v55 = (int16x8_t)vzip1q_s64(v31, v39);
          int16x8_t v56 = (int16x8_t)vzip2q_s64(v34, v42);
          int16x8_t v57 = (int16x8_t)vandq_s8(v54, vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1D0D7F560));
          int16x8_t v58 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v57, vshlq_n_s16(v57, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          int8x16_t v59 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v58), (int8x16_t)v58), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v60 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          int8x16_t v61 = (int8x16_t)vcgtq_s16(v60, v52);
          int8x16_t v62 = (int8x16_t)vcgtq_s16(v60, v53);
          int16x8_t v63 = vsubq_s16(v43, v48);
          int16x8_t v64 = vsubq_s16(v45, v46);
          int16x8_t v65 = vrhaddq_s16(v44, v48);
          int16x8_t v66 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v59))
          {
            int16x8_t v67 = vaddq_s16(v57, v57);
            int16x8_t v68 = vaddq_s16(v44, v46);
            int16x8_t v69 = vaddq_s16(v48, v43);
            int16x8_t v70 = vaddq_s16(v45, v47);
            int8x16_t v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v67, v48)), vsubq_s16(v48, v67));
            int8x16_t v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v67, v43)), vsubq_s16(v43, v67));
            int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v68, v69), 2uLL), vaddq_s16(v67, v46)), vsubq_s16(v46, v67));
            int8x16_t v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v70, v69), 2uLL), vaddq_s16(v67, v45)), vsubq_s16(v45, v67));
            int8x16_t v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v68, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v44)), vsubq_s16(v44, v67));
            int8x16_t v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v70, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v47)), vsubq_s16(v47, v67));
            int16x8_t v77 = (int16x8_t)vbicq_s8((int8x16_t)v57, v59);
            int16x8_t v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            int8x16_t v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v77, v14), vabsq_s16(v78));
            int16x8_t v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v77), vnegq_s16(v77));
            int16x8_t v81 = vshrq_n_s16(v77, 1uLL);
            int16x8_t v82 = vnegq_s16(v81);
            int16x8_t v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v75, (int8x16_t)v44), (int16x8_t)0), v15);
            int16x8_t v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v80), v81), v82), vandq_s8(v61, v79)), v46)), (int16x8_t)0), v15);
            int16x8_t v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v71, (int8x16_t)vaddq_s16(v80, v48)), (int16x8_t)0), v15);
            int16x8_t v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v72, (int8x16_t)vsubq_s16(v43, v80)), (int16x8_t)0), v15);
            int16x8_t v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v80), v81), v82), vandq_s8(v62, v79)), v45)), (int16x8_t)0), v15);
            int16x8_t v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v76, (int8x16_t)v47), (int16x8_t)0), v15);
            int32x4_t v89 = (int32x4_t)vtrn1q_s16(v55, v83);
            int32x4_t v90 = (int32x4_t)vtrn2q_s16(v55, v83);
            int32x4_t v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            int32x4_t v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            int64x2_t v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            int64x2_t v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            int64x2_t v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            int64x2_t v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            int32x4_t v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            int32x4_t v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            int32x4_t v99 = (int32x4_t)vtrn1q_s16(v88, v56);
            int32x4_t v100 = (int32x4_t)vtrn2q_s16(v88, v56);
            int64x2_t v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            int64x2_t v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            int64x2_t v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            int64x2_t v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            int16x8_t v105 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            int8x16_t v106 = (int8x16_t)vcgtq_s16(vmulq_s16(v57, v14), vabsq_s16(v105));
            int16x8_t v107 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v105, v106), v57), vnegq_s16(v57));
            int16x8_t v108 = vshrq_n_s16(v57, 1uLL);
            int16x8_t v109 = vnegq_s16(v108);
            int16x8_t v110 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v107), v108), v109), vandq_s8(v61, v106)), v46), (int16x8_t)0), v15);
            int16x8_t v111 = vminq_s16(vmaxq_s16(vaddq_s16(v107, v48), (int16x8_t)0), v15);
            int16x8_t v112 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v107), (int16x8_t)0), v15);
            int16x8_t v113 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v107), v108), v109), vandq_s8(v62, v106)), v45), (int16x8_t)0), v15);
            int32x4_t v114 = (int32x4_t)vtrn1q_s16(v110, v111);
            int32x4_t v115 = (int32x4_t)vtrn2q_s16(v110, v111);
            int32x4_t v116 = (int32x4_t)vtrn1q_s16(v112, v113);
            int32x4_t v117 = (int32x4_t)vtrn2q_s16(v112, v113);
            int32x4_t v118 = vtrn1q_s32(v114, v116);
            int32x4_t v119 = vtrn2q_s32(v114, v116);
            int32x4_t v120 = vtrn1q_s32(v115, v117);
            int32x4_t v121 = vtrn2q_s32(v115, v117);
            *(void *)(result - 4) = v118.i64[0];
            *(void *)(result + v6 - 4) = v120.i64[0];
            *(void *)(result + v7 - 4) = v119.i64[0];
            *(void *)(result + v8 - 4) = v121.i64[0];
            *(void *)(result + v9 - 4) = v118.i64[1];
            *(void *)(result + v11 - 4) = v120.i64[1];
            *(void *)(result + v10 - 4) = v119.i64[1];
            *(void *)(result + v16 - 4) = v121.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D0D5A794(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = a5 >> 3;
    uint64_t v26 = result + 2 * a2;
    uint64_t v27 = result - 2 * a2;
    uint64_t v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    uint64_t v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xFF00FF00FF00FFLL;
    v32.i64[1] = 0xFF00FF00FF00FFLL;
    _X5 = result;
    uint64_t v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        int16x8_t v35 = *(int16x8_t *)(v30 + 16 * v24);
        int16x8_t v36 = *(int16x8_t *)(v28 + 16 * v24);
        int16x8_t v37 = *(int16x8_t *)(v27 + 16 * v24);
        int16x8_t v38 = *(int16x8_t *)(result + 16 * v24);
        int16x8_t v39 = *(int16x8_t *)(v26 + 16 * v24);
        int16x8_t v40 = *(int16x8_t *)(v34 + 16 * v24);
        int16x8_t v41 = vdupq_n_s16(*(unsigned __int8 *)(a3 + v24));
        int16x8_t v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        int16x8_t v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        int16x8_t v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          int16x8_t v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          int16x8_t v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          int16x8_t v49 = (int16x8_t)vandq_s8(v46, vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1D0D7F560));
          int16x8_t v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          int8x16_t v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          int8x16_t v53 = (int8x16_t)vcgtq_s16(v52, v44);
          int8x16_t v54 = (int8x16_t)vcgtq_s16(v52, v45);
          int16x8_t v55 = vsubq_s16(v38, v37);
          int16x8_t v56 = vsubq_s16(v39, v36);
          int16x8_t v57 = vrhaddq_s16(v35, v37);
          int16x8_t v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            int16x8_t v59 = vaddq_s16(v49, v49);
            int16x8_t v60 = vaddq_s16(v36, v35);
            int16x8_t v61 = vaddq_s16(v38, v37);
            int16x8_t v62 = vaddq_s16(v40, v39);
            int16x8_t v63 = vaddq_s16(v48, v40);
            int8x16_t v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            int8x16_t v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            int8x16_t v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            int8x16_t v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            int8x16_t v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            int8x16_t v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            int16x8_t v70 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v61.i64[0] = 0x9000900090009;
            v61.i64[1] = 0x9000900090009;
            int16x8_t v71 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v61), v56, v29), 4uLL);
            int8x16_t v72 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v31), vabsq_s16(v71));
            int16x8_t v73 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v71, v72), v70), vnegq_s16(v70));
            int16x8_t v74 = vshrq_n_s16(v70, 1uLL);
            int16x8_t v75 = vnegq_s16(v74);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v73), v74), v75), vandq_s8(v53, v72)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vaddq_s16(v73, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vsubq_s16(v38, v73)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v73), v74), v75), vandq_s8(v54, v72)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v69, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v76.i64[0] = 0x9000900090009;
            v76.i64[1] = 0x9000900090009;
            int16x8_t v77 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v76), v56, v29), 4uLL);
            int8x16_t v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v31), vabsq_s16(v77));
            int16x8_t v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v49), vnegq_s16(v49));
            int16x8_t v80 = vshrq_n_s16(v49, 1uLL);
            int16x8_t v81 = vnegq_s16(v80);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v79), v80), v81), vandq_s8(v53, v78)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v79, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v79), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v79), v80), v81), vandq_s8(v54, v78)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1D0D5AC08(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  if (a5 >= 8)
  {
    uint64_t v5 = a5 >> 3;
    uint64_t v6 = 2 * a2;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = 6 * a2;
    uint64_t v9 = 8 * a2;
    uint64_t v10 = 12 * a2;
    uint64_t v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xFE00FE00FE00FE00;
    v15.i64[1] = 0xFE00FE00FE00FE00;
    uint64_t v16 = 14 * a2;
    do
    {
      unsigned int v18 = *a4++;
      unsigned int v17 = v18;
      if (v18)
      {
        int16x8_t v19 = *(int16x8_t *)(result - 8);
        int16x8_t v20 = *(int16x8_t *)(result + v6 - 8);
        int16x8_t v21 = *(int16x8_t *)(result + v7 - 8);
        int16x8_t v22 = *(int16x8_t *)(result + v8 - 8);
        int16x8_t v23 = *(int16x8_t *)(result + v9 - 8);
        int16x8_t v24 = *(int16x8_t *)(result + v11 - 8);
        int16x8_t v25 = *(int16x8_t *)(result + v10 - 8);
        int16x8_t v26 = *(int16x8_t *)(result + v16 - 8);
        int32x4_t v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        int32x4_t v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        int32x4_t v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        int32x4_t v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        int64x2_t v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        int64x2_t v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        int64x2_t v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        int64x2_t v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        int32x4_t v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        int32x4_t v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        int32x4_t v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        int32x4_t v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        int64x2_t v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        int64x2_t v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        int64x2_t v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        int64x2_t v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        int16x8_t v43 = (int16x8_t)vzip2q_s64(v31, v39);
        int16x8_t v44 = (int16x8_t)vzip1q_s64(v33, v41);
        int16x8_t v45 = (int16x8_t)vzip2q_s64(v33, v41);
        int16x8_t v46 = (int16x8_t)vzip1q_s64(v32, v40);
        int16x8_t v47 = (int16x8_t)vzip2q_s64(v32, v40);
        int16x8_t v48 = (int16x8_t)vzip1q_s64(v34, v42);
        int16x8_t v49 = vdupq_n_s16(2 * *a3);
        int16x8_t v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        int16x8_t v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        int16x8_t v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          int16x8_t v55 = (int16x8_t)vzip1q_s64(v31, v39);
          int16x8_t v56 = (int16x8_t)vzip2q_s64(v34, v42);
          int16x8_t v57 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1D0D7F560);
          int16x8_t v58 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16(v57, v57), v54);
          int16x8_t v59 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v58, vshlq_n_s16(v58, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          int8x16_t v60 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v59), (int8x16_t)v59), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v61 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          int8x16_t v62 = (int8x16_t)vcgtq_s16(v61, v52);
          int8x16_t v63 = (int8x16_t)vcgtq_s16(v61, v53);
          int16x8_t v64 = vsubq_s16(v43, v48);
          int16x8_t v65 = vsubq_s16(v45, v46);
          int16x8_t v66 = vrhaddq_s16(v44, v48);
          int16x8_t v67 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v60))
          {
            int16x8_t v68 = vaddq_s16(v58, v58);
            int16x8_t v69 = vaddq_s16(v44, v46);
            int16x8_t v70 = vaddq_s16(v48, v43);
            int16x8_t v71 = vaddq_s16(v45, v47);
            int8x16_t v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v70, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v68, v48)), vsubq_s16(v48, v68));
            int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v70, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v68, v43)), vsubq_s16(v43, v68));
            int8x16_t v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v69, v70), 2uLL), vaddq_s16(v68, v46)), vsubq_s16(v46, v68));
            int8x16_t v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v71, v70), 2uLL), vaddq_s16(v68, v45)), vsubq_s16(v45, v68));
            int8x16_t v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v69, (uint16x8_t)v70)), 2uLL), vaddq_s16(v68, v44)), vsubq_s16(v44, v68));
            int8x16_t v77 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v71, (uint16x8_t)v70)), 2uLL), vaddq_s16(v68, v47)), vsubq_s16(v47, v68));
            int16x8_t v78 = (int16x8_t)vbicq_s8((int8x16_t)v58, v60);
            int16x8_t v79 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v64, v12), v65, v13), 4uLL);
            int8x16_t v80 = (int8x16_t)vcgtq_s16(vmulq_s16(v78, v14), vabsq_s16(v79));
            int16x8_t v81 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v79, v80), v78), vnegq_s16(v78));
            int16x8_t v82 = vshrq_n_s16(v78, 1uLL);
            int16x8_t v83 = vnegq_s16(v82);
            int16x8_t v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v76, (int8x16_t)v44), (int16x8_t)0), v15);
            int16x8_t v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v66, v46), v81), v82), v83), vandq_s8(v62, v80)), v46)), (int16x8_t)0), v15);
            int16x8_t v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v72, (int8x16_t)vaddq_s16(v81, v48)), (int16x8_t)0), v15);
            int16x8_t v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v73, (int8x16_t)vsubq_s16(v43, v81)), (int16x8_t)0), v15);
            int16x8_t v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v75, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v67, v45), v81), v82), v83), vandq_s8(v63, v80)), v45)), (int16x8_t)0), v15);
            int16x8_t v89 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v60, v77, (int8x16_t)v47), (int16x8_t)0), v15);
            int32x4_t v90 = (int32x4_t)vtrn1q_s16(v55, v84);
            int32x4_t v91 = (int32x4_t)vtrn2q_s16(v55, v84);
            int32x4_t v92 = (int32x4_t)vtrn1q_s16(v85, v86);
            int32x4_t v93 = (int32x4_t)vtrn2q_s16(v85, v86);
            int64x2_t v94 = (int64x2_t)vtrn1q_s32(v90, v92);
            int64x2_t v95 = (int64x2_t)vtrn2q_s32(v90, v92);
            int64x2_t v96 = (int64x2_t)vtrn1q_s32(v91, v93);
            int64x2_t v97 = (int64x2_t)vtrn2q_s32(v91, v93);
            int32x4_t v98 = (int32x4_t)vtrn1q_s16(v87, v88);
            int32x4_t v99 = (int32x4_t)vtrn2q_s16(v87, v88);
            int32x4_t v100 = (int32x4_t)vtrn1q_s16(v89, v56);
            int32x4_t v101 = (int32x4_t)vtrn2q_s16(v89, v56);
            int64x2_t v102 = (int64x2_t)vtrn1q_s32(v98, v100);
            int64x2_t v103 = (int64x2_t)vtrn2q_s32(v98, v100);
            int64x2_t v104 = (int64x2_t)vtrn1q_s32(v99, v101);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v96, v104);
            int64x2_t v105 = (int64x2_t)vtrn2q_s32(v99, v101);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v95, v103);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v97, v105);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v96, v104);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v97, v105);
          }
          else
          {
            int16x8_t v106 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v64, v12), v65, v13), 4uLL);
            int8x16_t v107 = (int8x16_t)vcgtq_s16(vmulq_s16(v58, v14), vabsq_s16(v106));
            int16x8_t v108 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v106, v107), v58), vnegq_s16(v58));
            int16x8_t v109 = vshrq_n_s16(v58, 1uLL);
            int16x8_t v110 = vnegq_s16(v109);
            int16x8_t v111 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v66, v46), v108), v109), v110), vandq_s8(v62, v107)), v46), (int16x8_t)0), v15);
            int16x8_t v112 = vminq_s16(vmaxq_s16(vaddq_s16(v108, v48), (int16x8_t)0), v15);
            int16x8_t v113 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v108), (int16x8_t)0), v15);
            int16x8_t v114 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v67, v45), v108), v109), v110), vandq_s8(v63, v107)), v45), (int16x8_t)0), v15);
            int32x4_t v115 = (int32x4_t)vtrn1q_s16(v111, v112);
            int32x4_t v116 = (int32x4_t)vtrn2q_s16(v111, v112);
            int32x4_t v117 = (int32x4_t)vtrn1q_s16(v113, v114);
            int32x4_t v118 = (int32x4_t)vtrn2q_s16(v113, v114);
            int32x4_t v119 = vtrn1q_s32(v115, v117);
            int32x4_t v120 = vtrn2q_s32(v115, v117);
            int32x4_t v121 = vtrn1q_s32(v116, v118);
            int32x4_t v122 = vtrn2q_s32(v116, v118);
            *(void *)(result - 4) = v119.i64[0];
            *(void *)(result + v6 - 4) = v121.i64[0];
            *(void *)(result + v7 - 4) = v120.i64[0];
            *(void *)(result + v8 - 4) = v122.i64[0];
            *(void *)(result + v9 - 4) = v119.i64[1];
            *(void *)(result + v11 - 4) = v121.i64[1];
            *(void *)(result + v10 - 4) = v120.i64[1];
            *(void *)(result + v16 - 4) = v122.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D0D5B118(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = a5 >> 3;
    uint64_t v26 = result + 2 * a2;
    uint64_t v27 = result - 2 * a2;
    uint64_t v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    uint64_t v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xFE00FE00FE00FE00;
    v32.i64[1] = 0xFE00FE00FE00FE00;
    _X5 = result;
    uint64_t v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        int16x8_t v35 = *(int16x8_t *)(v30 + 16 * v24);
        int16x8_t v36 = *(int16x8_t *)(v28 + 16 * v24);
        int16x8_t v37 = *(int16x8_t *)(v27 + 16 * v24);
        int16x8_t v38 = *(int16x8_t *)(result + 16 * v24);
        int16x8_t v39 = *(int16x8_t *)(v26 + 16 * v24);
        int16x8_t v40 = *(int16x8_t *)(v34 + 16 * v24);
        int16x8_t v41 = vdupq_n_s16(2 * *(unsigned __int8 *)(a3 + v24));
        int16x8_t v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        int16x8_t v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        int16x8_t v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          int16x8_t v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          int16x8_t v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          int16x8_t v49 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1D0D7F560);
          int16x8_t v50 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16(v49, v49), v46);
          int16x8_t v51 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v50, vshlq_n_s16(v50, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          int8x16_t v52 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v51), (int8x16_t)v51), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v53 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          int8x16_t v54 = (int8x16_t)vcgtq_s16(v53, v44);
          int8x16_t v55 = (int8x16_t)vcgtq_s16(v53, v45);
          int16x8_t v56 = vsubq_s16(v38, v37);
          int16x8_t v57 = vsubq_s16(v39, v36);
          int16x8_t v58 = vrhaddq_s16(v35, v37);
          int16x8_t v59 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v52))
          {
            int16x8_t v60 = vaddq_s16(v50, v50);
            int16x8_t v61 = vaddq_s16(v36, v35);
            int16x8_t v62 = vaddq_s16(v38, v37);
            int16x8_t v63 = vaddq_s16(v40, v39);
            int16x8_t v64 = vaddq_s16(v48, v40);
            int8x16_t v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v62, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v60, v37)), vsubq_s16(v37, v60));
            int8x16_t v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v62, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v60, v38)), vsubq_s16(v38, v60));
            int8x16_t v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v60, v36)), vsubq_s16(v36, v60));
            int8x16_t v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, v62), 2uLL), vaddq_s16(v60, v39)), vsubq_s16(v39, v60));
            int8x16_t v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v61, (uint16x8_t)v62)), 2uLL), vaddq_s16(v60, v35)), vsubq_s16(v35, v60));
            int8x16_t v70 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v64, (int16x8_t)vhaddq_u16((uint16x8_t)v63, (uint16x8_t)v62)), 2uLL), vaddq_s16(v60, v40)), vsubq_s16(v40, v60));
            int16x8_t v71 = (int16x8_t)vbicq_s8((int8x16_t)v50, v52);
            v62.i64[0] = 0x9000900090009;
            v62.i64[1] = 0x9000900090009;
            int16x8_t v72 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v56, v62), v57, v29), 4uLL);
            int8x16_t v73 = (int8x16_t)vcgtq_s16(vmulq_s16(v71, v31), vabsq_s16(v72));
            int16x8_t v74 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v72, v73), v71), vnegq_s16(v71));
            int16x8_t v75 = vshrq_n_s16(v71, 1uLL);
            int16x8_t v76 = vnegq_s16(v75);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v69, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v58, v36), v74), v75), v76), vandq_s8(v54, v73)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v65, (int8x16_t)vaddq_s16(v74, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v66, (int8x16_t)vsubq_s16(v38, v74)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v68, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v59, v39), v74), v75), v76), vandq_s8(v55, v73)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v52, v70, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v77.i64[0] = 0x9000900090009;
            v77.i64[1] = 0x9000900090009;
            int16x8_t v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v56, v77), v57, v29), 4uLL);
            int8x16_t v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v50, v31), vabsq_s16(v78));
            int16x8_t v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v50), vnegq_s16(v50));
            int16x8_t v81 = vshrq_n_s16(v50, 1uLL);
            int16x8_t v82 = vnegq_s16(v81);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v58, v36), v80), v81), v82), vandq_s8(v54, v79)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v80, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v80), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v59, v39), v80), v81), v82), vandq_s8(v55, v79)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1D0D5B594(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  if (a5 >= 8)
  {
    uint64_t v5 = a5 >> 3;
    uint64_t v6 = 2 * a2;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = 6 * a2;
    uint64_t v9 = 8 * a2;
    uint64_t v10 = 12 * a2;
    uint64_t v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xFC00FC00FC00FC00;
    v15.i64[1] = 0xFC00FC00FC00FC00;
    uint64_t v16 = 14 * a2;
    do
    {
      unsigned int v18 = *a4++;
      unsigned int v17 = v18;
      if (v18)
      {
        int16x8_t v19 = *(int16x8_t *)(result - 8);
        int16x8_t v20 = *(int16x8_t *)(result + v6 - 8);
        int16x8_t v21 = *(int16x8_t *)(result + v7 - 8);
        int16x8_t v22 = *(int16x8_t *)(result + v8 - 8);
        int16x8_t v23 = *(int16x8_t *)(result + v9 - 8);
        int16x8_t v24 = *(int16x8_t *)(result + v11 - 8);
        int16x8_t v25 = *(int16x8_t *)(result + v10 - 8);
        int16x8_t v26 = *(int16x8_t *)(result + v16 - 8);
        int32x4_t v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        int32x4_t v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        int32x4_t v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        int32x4_t v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        int64x2_t v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        int64x2_t v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        int64x2_t v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        int64x2_t v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        int32x4_t v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        int32x4_t v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        int32x4_t v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        int32x4_t v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        int64x2_t v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        int64x2_t v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        int64x2_t v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        int64x2_t v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        int16x8_t v43 = (int16x8_t)vzip2q_s64(v31, v39);
        int16x8_t v44 = (int16x8_t)vzip1q_s64(v33, v41);
        int16x8_t v45 = (int16x8_t)vzip2q_s64(v33, v41);
        int16x8_t v46 = (int16x8_t)vzip1q_s64(v32, v40);
        int16x8_t v47 = (int16x8_t)vzip2q_s64(v32, v40);
        int16x8_t v48 = (int16x8_t)vzip1q_s64(v34, v42);
        int16x8_t v49 = vdupq_n_s16(4 * *a3);
        int16x8_t v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        int16x8_t v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        int16x8_t v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          int16x8_t v55 = (int16x8_t)vzip1q_s64(v31, v39);
          int16x8_t v56 = (int16x8_t)vzip2q_s64(v34, v42);
          int16x8_t v57 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1D0D7F560), 2uLL), v54);
          int16x8_t v58 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v57, vshlq_n_s16(v57, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          int8x16_t v59 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v58), (int8x16_t)v58), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v60 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          int8x16_t v61 = (int8x16_t)vcgtq_s16(v60, v52);
          int8x16_t v62 = (int8x16_t)vcgtq_s16(v60, v53);
          int16x8_t v63 = vsubq_s16(v43, v48);
          int16x8_t v64 = vsubq_s16(v45, v46);
          int16x8_t v65 = vrhaddq_s16(v44, v48);
          int16x8_t v66 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v59))
          {
            int16x8_t v67 = vaddq_s16(v57, v57);
            int16x8_t v68 = vaddq_s16(v44, v46);
            int16x8_t v69 = vaddq_s16(v48, v43);
            int16x8_t v70 = vaddq_s16(v45, v47);
            int8x16_t v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v67, v48)), vsubq_s16(v48, v67));
            int8x16_t v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v67, v43)), vsubq_s16(v43, v67));
            int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v68, v69), 2uLL), vaddq_s16(v67, v46)), vsubq_s16(v46, v67));
            int8x16_t v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v70, v69), 2uLL), vaddq_s16(v67, v45)), vsubq_s16(v45, v67));
            int8x16_t v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v68, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v44)), vsubq_s16(v44, v67));
            int8x16_t v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v70, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v47)), vsubq_s16(v47, v67));
            int16x8_t v77 = (int16x8_t)vbicq_s8((int8x16_t)v57, v59);
            int16x8_t v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            int8x16_t v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v77, v14), vabsq_s16(v78));
            int16x8_t v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v77), vnegq_s16(v77));
            int16x8_t v81 = vshrq_n_s16(v77, 1uLL);
            int16x8_t v82 = vnegq_s16(v81);
            int16x8_t v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v75, (int8x16_t)v44), (int16x8_t)0), v15);
            int16x8_t v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v80), v81), v82), vandq_s8(v61, v79)), v46)), (int16x8_t)0), v15);
            int16x8_t v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v71, (int8x16_t)vaddq_s16(v80, v48)), (int16x8_t)0), v15);
            int16x8_t v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v72, (int8x16_t)vsubq_s16(v43, v80)), (int16x8_t)0), v15);
            int16x8_t v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v80), v81), v82), vandq_s8(v62, v79)), v45)), (int16x8_t)0), v15);
            int16x8_t v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v76, (int8x16_t)v47), (int16x8_t)0), v15);
            int32x4_t v89 = (int32x4_t)vtrn1q_s16(v55, v83);
            int32x4_t v90 = (int32x4_t)vtrn2q_s16(v55, v83);
            int32x4_t v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            int32x4_t v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            int64x2_t v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            int64x2_t v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            int64x2_t v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            int64x2_t v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            int32x4_t v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            int32x4_t v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            int32x4_t v99 = (int32x4_t)vtrn1q_s16(v88, v56);
            int32x4_t v100 = (int32x4_t)vtrn2q_s16(v88, v56);
            int64x2_t v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            int64x2_t v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            int64x2_t v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            int64x2_t v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            int16x8_t v105 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            int8x16_t v106 = (int8x16_t)vcgtq_s16(vmulq_s16(v57, v14), vabsq_s16(v105));
            int16x8_t v107 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v105, v106), v57), vnegq_s16(v57));
            int16x8_t v108 = vshrq_n_s16(v57, 1uLL);
            int16x8_t v109 = vnegq_s16(v108);
            int16x8_t v110 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v107), v108), v109), vandq_s8(v61, v106)), v46), (int16x8_t)0), v15);
            int16x8_t v111 = vminq_s16(vmaxq_s16(vaddq_s16(v107, v48), (int16x8_t)0), v15);
            int16x8_t v112 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v107), (int16x8_t)0), v15);
            int16x8_t v113 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v107), v108), v109), vandq_s8(v62, v106)), v45), (int16x8_t)0), v15);
            int32x4_t v114 = (int32x4_t)vtrn1q_s16(v110, v111);
            int32x4_t v115 = (int32x4_t)vtrn2q_s16(v110, v111);
            int32x4_t v116 = (int32x4_t)vtrn1q_s16(v112, v113);
            int32x4_t v117 = (int32x4_t)vtrn2q_s16(v112, v113);
            int32x4_t v118 = vtrn1q_s32(v114, v116);
            int32x4_t v119 = vtrn2q_s32(v114, v116);
            int32x4_t v120 = vtrn1q_s32(v115, v117);
            int32x4_t v121 = vtrn2q_s32(v115, v117);
            *(void *)(result - 4) = v118.i64[0];
            *(void *)(result + v6 - 4) = v120.i64[0];
            *(void *)(result + v7 - 4) = v119.i64[0];
            *(void *)(result + v8 - 4) = v121.i64[0];
            *(void *)(result + v9 - 4) = v118.i64[1];
            *(void *)(result + v11 - 4) = v120.i64[1];
            *(void *)(result + v10 - 4) = v119.i64[1];
            *(void *)(result + v16 - 4) = v121.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D0D5BAA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = a5 >> 3;
    uint64_t v26 = result + 2 * a2;
    uint64_t v27 = result - 2 * a2;
    uint64_t v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    uint64_t v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xFC00FC00FC00FC00;
    v32.i64[1] = 0xFC00FC00FC00FC00;
    _X5 = result;
    uint64_t v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        int16x8_t v35 = *(int16x8_t *)(v30 + 16 * v24);
        int16x8_t v36 = *(int16x8_t *)(v28 + 16 * v24);
        int16x8_t v37 = *(int16x8_t *)(v27 + 16 * v24);
        int16x8_t v38 = *(int16x8_t *)(result + 16 * v24);
        int16x8_t v39 = *(int16x8_t *)(v26 + 16 * v24);
        int16x8_t v40 = *(int16x8_t *)(v34 + 16 * v24);
        int16x8_t v41 = vdupq_n_s16(4 * *(unsigned __int8 *)(a3 + v24));
        int16x8_t v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        int16x8_t v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        int16x8_t v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          int16x8_t v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          int16x8_t v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          int16x8_t v49 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1D0D7F560), 2uLL), v46);
          int16x8_t v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          int8x16_t v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          int8x16_t v53 = (int8x16_t)vcgtq_s16(v52, v44);
          int8x16_t v54 = (int8x16_t)vcgtq_s16(v52, v45);
          int16x8_t v55 = vsubq_s16(v38, v37);
          int16x8_t v56 = vsubq_s16(v39, v36);
          int16x8_t v57 = vrhaddq_s16(v35, v37);
          int16x8_t v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            int16x8_t v59 = vaddq_s16(v49, v49);
            int16x8_t v60 = vaddq_s16(v36, v35);
            int16x8_t v61 = vaddq_s16(v38, v37);
            int16x8_t v62 = vaddq_s16(v40, v39);
            int16x8_t v63 = vaddq_s16(v48, v40);
            int8x16_t v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            int8x16_t v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            int8x16_t v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            int8x16_t v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            int8x16_t v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            int8x16_t v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            int16x8_t v70 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v61.i64[0] = 0x9000900090009;
            v61.i64[1] = 0x9000900090009;
            int16x8_t v71 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v61), v56, v29), 4uLL);
            int8x16_t v72 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v31), vabsq_s16(v71));
            int16x8_t v73 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v71, v72), v70), vnegq_s16(v70));
            int16x8_t v74 = vshrq_n_s16(v70, 1uLL);
            int16x8_t v75 = vnegq_s16(v74);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v73), v74), v75), vandq_s8(v53, v72)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vaddq_s16(v73, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vsubq_s16(v38, v73)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v73), v74), v75), vandq_s8(v54, v72)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v69, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v76.i64[0] = 0x9000900090009;
            v76.i64[1] = 0x9000900090009;
            int16x8_t v77 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v76), v56, v29), 4uLL);
            int8x16_t v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v31), vabsq_s16(v77));
            int16x8_t v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v49), vnegq_s16(v49));
            int16x8_t v80 = vshrq_n_s16(v49, 1uLL);
            int16x8_t v81 = vnegq_s16(v80);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v79), v80), v81), vandq_s8(v53, v78)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v79, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v79), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v79), v80), v81), vandq_s8(v54, v78)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1D0D5BF20(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  if (a5 >= 8)
  {
    uint64_t v5 = a5 >> 3;
    uint64_t v6 = 2 * a2;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = 6 * a2;
    uint64_t v9 = 8 * a2;
    uint64_t v10 = 12 * a2;
    uint64_t v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xF800F800F800F800;
    v15.i64[1] = 0xF800F800F800F800;
    uint64_t v16 = 14 * a2;
    do
    {
      unsigned int v18 = *a4++;
      unsigned int v17 = v18;
      if (v18)
      {
        int16x8_t v19 = *(int16x8_t *)(result - 8);
        int16x8_t v20 = *(int16x8_t *)(result + v6 - 8);
        int16x8_t v21 = *(int16x8_t *)(result + v7 - 8);
        int16x8_t v22 = *(int16x8_t *)(result + v8 - 8);
        int16x8_t v23 = *(int16x8_t *)(result + v9 - 8);
        int16x8_t v24 = *(int16x8_t *)(result + v11 - 8);
        int16x8_t v25 = *(int16x8_t *)(result + v10 - 8);
        int16x8_t v26 = *(int16x8_t *)(result + v16 - 8);
        int32x4_t v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        int32x4_t v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        int32x4_t v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        int32x4_t v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        int64x2_t v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        int64x2_t v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        int64x2_t v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        int64x2_t v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        int32x4_t v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        int32x4_t v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        int32x4_t v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        int32x4_t v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        int64x2_t v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        int64x2_t v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        int64x2_t v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        int64x2_t v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        int16x8_t v43 = (int16x8_t)vzip2q_s64(v31, v39);
        int16x8_t v44 = (int16x8_t)vzip1q_s64(v33, v41);
        int16x8_t v45 = (int16x8_t)vzip2q_s64(v33, v41);
        int16x8_t v46 = (int16x8_t)vzip1q_s64(v32, v40);
        int16x8_t v47 = (int16x8_t)vzip2q_s64(v32, v40);
        int16x8_t v48 = (int16x8_t)vzip1q_s64(v34, v42);
        int16x8_t v49 = vdupq_n_s16(8 * *a3);
        int16x8_t v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        int16x8_t v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        int16x8_t v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          int16x8_t v55 = (int16x8_t)vzip1q_s64(v31, v39);
          int16x8_t v56 = (int16x8_t)vzip2q_s64(v34, v42);
          int16x8_t v57 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1D0D7F560), 3uLL), v54);
          int16x8_t v58 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v57, vshlq_n_s16(v57, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          int8x16_t v59 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v58), (int8x16_t)v58), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v60 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          int8x16_t v61 = (int8x16_t)vcgtq_s16(v60, v52);
          int8x16_t v62 = (int8x16_t)vcgtq_s16(v60, v53);
          int16x8_t v63 = vsubq_s16(v43, v48);
          int16x8_t v64 = vsubq_s16(v45, v46);
          int16x8_t v65 = vrhaddq_s16(v44, v48);
          int16x8_t v66 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v59))
          {
            int16x8_t v67 = vaddq_s16(v57, v57);
            int16x8_t v68 = vaddq_s16(v44, v46);
            int16x8_t v69 = vaddq_s16(v48, v43);
            int16x8_t v70 = vaddq_s16(v45, v47);
            int8x16_t v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v67, v48)), vsubq_s16(v48, v67));
            int8x16_t v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v67, v43)), vsubq_s16(v43, v67));
            int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v68, v69), 2uLL), vaddq_s16(v67, v46)), vsubq_s16(v46, v67));
            int8x16_t v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v70, v69), 2uLL), vaddq_s16(v67, v45)), vsubq_s16(v45, v67));
            int8x16_t v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v68, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v44)), vsubq_s16(v44, v67));
            int8x16_t v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v70, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v47)), vsubq_s16(v47, v67));
            int16x8_t v77 = (int16x8_t)vbicq_s8((int8x16_t)v57, v59);
            int16x8_t v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            int8x16_t v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v77, v14), vabsq_s16(v78));
            int16x8_t v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v77), vnegq_s16(v77));
            int16x8_t v81 = vshrq_n_s16(v77, 1uLL);
            int16x8_t v82 = vnegq_s16(v81);
            int16x8_t v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v75, (int8x16_t)v44), (int16x8_t)0), v15);
            int16x8_t v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v80), v81), v82), vandq_s8(v61, v79)), v46)), (int16x8_t)0), v15);
            int16x8_t v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v71, (int8x16_t)vaddq_s16(v80, v48)), (int16x8_t)0), v15);
            int16x8_t v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v72, (int8x16_t)vsubq_s16(v43, v80)), (int16x8_t)0), v15);
            int16x8_t v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v80), v81), v82), vandq_s8(v62, v79)), v45)), (int16x8_t)0), v15);
            int16x8_t v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v76, (int8x16_t)v47), (int16x8_t)0), v15);
            int32x4_t v89 = (int32x4_t)vtrn1q_s16(v55, v83);
            int32x4_t v90 = (int32x4_t)vtrn2q_s16(v55, v83);
            int32x4_t v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            int32x4_t v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            int64x2_t v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            int64x2_t v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            int64x2_t v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            int64x2_t v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            int32x4_t v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            int32x4_t v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            int32x4_t v99 = (int32x4_t)vtrn1q_s16(v88, v56);
            int32x4_t v100 = (int32x4_t)vtrn2q_s16(v88, v56);
            int64x2_t v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            int64x2_t v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            int64x2_t v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            int64x2_t v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            int16x8_t v105 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            int8x16_t v106 = (int8x16_t)vcgtq_s16(vmulq_s16(v57, v14), vabsq_s16(v105));
            int16x8_t v107 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v105, v106), v57), vnegq_s16(v57));
            int16x8_t v108 = vshrq_n_s16(v57, 1uLL);
            int16x8_t v109 = vnegq_s16(v108);
            int16x8_t v110 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v107), v108), v109), vandq_s8(v61, v106)), v46), (int16x8_t)0), v15);
            int16x8_t v111 = vminq_s16(vmaxq_s16(vaddq_s16(v107, v48), (int16x8_t)0), v15);
            int16x8_t v112 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v107), (int16x8_t)0), v15);
            int16x8_t v113 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v107), v108), v109), vandq_s8(v62, v106)), v45), (int16x8_t)0), v15);
            int32x4_t v114 = (int32x4_t)vtrn1q_s16(v110, v111);
            int32x4_t v115 = (int32x4_t)vtrn2q_s16(v110, v111);
            int32x4_t v116 = (int32x4_t)vtrn1q_s16(v112, v113);
            int32x4_t v117 = (int32x4_t)vtrn2q_s16(v112, v113);
            int32x4_t v118 = vtrn1q_s32(v114, v116);
            int32x4_t v119 = vtrn2q_s32(v114, v116);
            int32x4_t v120 = vtrn1q_s32(v115, v117);
            int32x4_t v121 = vtrn2q_s32(v115, v117);
            *(void *)(result - 4) = v118.i64[0];
            *(void *)(result + v6 - 4) = v120.i64[0];
            *(void *)(result + v7 - 4) = v119.i64[0];
            *(void *)(result + v8 - 4) = v121.i64[0];
            *(void *)(result + v9 - 4) = v118.i64[1];
            *(void *)(result + v11 - 4) = v120.i64[1];
            *(void *)(result + v10 - 4) = v119.i64[1];
            *(void *)(result + v16 - 4) = v121.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D0D5C430(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = a5 >> 3;
    uint64_t v26 = result + 2 * a2;
    uint64_t v27 = result - 2 * a2;
    uint64_t v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    uint64_t v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xF800F800F800F800;
    v32.i64[1] = 0xF800F800F800F800;
    _X5 = result;
    uint64_t v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        int16x8_t v35 = *(int16x8_t *)(v30 + 16 * v24);
        int16x8_t v36 = *(int16x8_t *)(v28 + 16 * v24);
        int16x8_t v37 = *(int16x8_t *)(v27 + 16 * v24);
        int16x8_t v38 = *(int16x8_t *)(result + 16 * v24);
        int16x8_t v39 = *(int16x8_t *)(v26 + 16 * v24);
        int16x8_t v40 = *(int16x8_t *)(v34 + 16 * v24);
        int16x8_t v41 = vdupq_n_s16(8 * *(unsigned __int8 *)(a3 + v24));
        int16x8_t v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        int16x8_t v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        int16x8_t v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          int16x8_t v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          int16x8_t v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          int16x8_t v49 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1D0D7F560), 3uLL), v46);
          int16x8_t v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          int8x16_t v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          int8x16_t v53 = (int8x16_t)vcgtq_s16(v52, v44);
          int8x16_t v54 = (int8x16_t)vcgtq_s16(v52, v45);
          int16x8_t v55 = vsubq_s16(v38, v37);
          int16x8_t v56 = vsubq_s16(v39, v36);
          int16x8_t v57 = vrhaddq_s16(v35, v37);
          int16x8_t v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            int16x8_t v59 = vaddq_s16(v49, v49);
            int16x8_t v60 = vaddq_s16(v36, v35);
            int16x8_t v61 = vaddq_s16(v38, v37);
            int16x8_t v62 = vaddq_s16(v40, v39);
            int16x8_t v63 = vaddq_s16(v48, v40);
            int8x16_t v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            int8x16_t v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            int8x16_t v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            int8x16_t v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            int8x16_t v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            int8x16_t v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            int16x8_t v70 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v61.i64[0] = 0x9000900090009;
            v61.i64[1] = 0x9000900090009;
            int16x8_t v71 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v61), v56, v29), 4uLL);
            int8x16_t v72 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v31), vabsq_s16(v71));
            int16x8_t v73 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v71, v72), v70), vnegq_s16(v70));
            int16x8_t v74 = vshrq_n_s16(v70, 1uLL);
            int16x8_t v75 = vnegq_s16(v74);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v73), v74), v75), vandq_s8(v53, v72)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vaddq_s16(v73, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vsubq_s16(v38, v73)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v73), v74), v75), vandq_s8(v54, v72)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v69, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v76.i64[0] = 0x9000900090009;
            v76.i64[1] = 0x9000900090009;
            int16x8_t v77 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v76), v56, v29), 4uLL);
            int8x16_t v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v31), vabsq_s16(v77));
            int16x8_t v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v49), vnegq_s16(v49));
            int16x8_t v80 = vshrq_n_s16(v49, 1uLL);
            int16x8_t v81 = vnegq_s16(v80);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v79), v80), v81), vandq_s8(v53, v78)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v79, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v79), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v79), v80), v81), vandq_s8(v54, v78)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1D0D5C8AC(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  if (a5 >= 8)
  {
    uint64_t v5 = a5 >> 3;
    uint64_t v6 = 2 * a2;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = 6 * a2;
    uint64_t v9 = 8 * a2;
    uint64_t v10 = 12 * a2;
    uint64_t v11 = 10 * a2;
    v12.i64[0] = 0x3000300030003;
    v12.i64[1] = 0x3000300030003;
    v13.i64[0] = 0xA000A000A000ALL;
    v13.i64[1] = 0xA000A000A000ALL;
    v14.i64[0] = 0xF000F000F000F000;
    v14.i64[1] = 0xF000F000F000F000;
    uint64_t v15 = 14 * a2;
    do
    {
      unsigned int v17 = *a4++;
      unsigned int v16 = v17;
      if (v17)
      {
        int16x8_t v18 = *(int16x8_t *)(result - 8);
        int16x8_t v19 = *(int16x8_t *)(result + v6 - 8);
        int16x8_t v20 = *(int16x8_t *)(result + v7 - 8);
        int16x8_t v21 = *(int16x8_t *)(result + v8 - 8);
        int16x8_t v22 = *(int16x8_t *)(result + v9 - 8);
        int16x8_t v23 = *(int16x8_t *)(result + v11 - 8);
        int16x8_t v24 = *(int16x8_t *)(result + v10 - 8);
        int16x8_t v25 = *(int16x8_t *)(result + v15 - 8);
        int32x4_t v26 = (int32x4_t)vtrn1q_s16(v18, v19);
        int32x4_t v27 = (int32x4_t)vtrn2q_s16(v18, v19);
        int32x4_t v28 = (int32x4_t)vtrn1q_s16(v20, v21);
        int32x4_t v29 = (int32x4_t)vtrn2q_s16(v20, v21);
        int64x2_t v30 = (int64x2_t)vtrn1q_s32(v26, v28);
        int64x2_t v31 = (int64x2_t)vtrn2q_s32(v26, v28);
        int64x2_t v32 = (int64x2_t)vtrn1q_s32(v27, v29);
        int64x2_t v33 = (int64x2_t)vtrn2q_s32(v27, v29);
        int32x4_t v34 = (int32x4_t)vtrn1q_s16(v22, v23);
        int32x4_t v35 = (int32x4_t)vtrn2q_s16(v22, v23);
        int32x4_t v36 = (int32x4_t)vtrn1q_s16(v24, v25);
        int32x4_t v37 = (int32x4_t)vtrn2q_s16(v24, v25);
        int64x2_t v38 = (int64x2_t)vtrn1q_s32(v34, v36);
        int64x2_t v39 = (int64x2_t)vtrn2q_s32(v34, v36);
        int64x2_t v40 = (int64x2_t)vtrn1q_s32(v35, v37);
        int64x2_t v41 = (int64x2_t)vtrn2q_s32(v35, v37);
        int16x8_t v42 = (int16x8_t)vzip2q_s64(v30, v38);
        int16x8_t v43 = (int16x8_t)vzip1q_s64(v32, v40);
        int16x8_t v44 = (int16x8_t)vzip2q_s64(v32, v40);
        int16x8_t v45 = (int16x8_t)vzip1q_s64(v31, v39);
        int16x8_t v46 = (int16x8_t)vzip2q_s64(v31, v39);
        int16x8_t v47 = (int16x8_t)vzip1q_s64(v33, v41);
        int16x8_t v48 = vdupq_n_s16(16 * *a3);
        int16x8_t v49 = vabsq_s16(vsubq_s16(vaddq_s16(v43, v47), vaddq_s16(v45, v45)));
        int16x8_t v50 = vabsq_s16(vsubq_s16(vaddq_s16(v46, v42), vaddq_s16(v44, v44)));
        int16x8_t v51 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v49), v49), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v53 = (int8x16_t)vcgtq_s16(v48, vaddq_s16(v52, v51));
        if (vaddlvq_u16((uint16x8_t)v53))
        {
          int16x8_t v54 = (int16x8_t)vzip1q_s64(v30, v38);
          int16x8_t v55 = (int16x8_t)vzip2q_s64(v33, v41);
          int16x8_t v56 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(v16), (int8x16_t)xmmword_1D0D7F560), 4uLL), v53);
          int16x8_t v57 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v56, vshlq_n_s16(v56, 2uLL)), vabdq_s16(v47, v42)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v48, 3uLL), vaddq_s16(v50, v49)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v48, 3uLL), vabaq_s16(vabdq_s16(v55, v42), v54, v47))));
          int8x16_t v58 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v57), (int8x16_t)v57), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v59 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v48, (uint16x8_t)v48, 1uLL), 3uLL);
          int8x16_t v60 = (int8x16_t)vcgtq_s16(v59, v51);
          int8x16_t v61 = (int8x16_t)vcgtq_s16(v59, v52);
          int16x8_t v62 = vsubq_s16(v42, v47);
          int16x8_t v63 = vsubq_s16(v44, v45);
          int16x8_t v64 = vrhaddq_s16(v43, v47);
          int16x8_t v65 = vrhaddq_s16(v46, v42);
          if (vaddlvq_u16((uint16x8_t)v58))
          {
            int16x8_t v66 = vaddq_s16(v56, v56);
            int16x8_t v67 = vaddq_s16(v43, v45);
            int16x8_t v68 = vaddq_s16(v47, v42);
            int16x8_t v69 = vaddq_s16(v44, v46);
            int8x16_t v70 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v68, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v43, (uint16x8_t)v44)), 2uLL), vaddq_s16(v66, v47)), vsubq_s16(v47, v66));
            int8x16_t v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v68, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v46, (uint16x8_t)v45)), 2uLL), vaddq_s16(v66, v42)), vsubq_s16(v42, v66));
            int8x16_t v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v67, v68), 2uLL), vaddq_s16(v66, v45)), vsubq_s16(v45, v66));
            int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v69, v68), 2uLL), vaddq_s16(v66, v44)), vsubq_s16(v44, v66));
            int8x16_t v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v54, v43), (int16x8_t)vhaddq_u16((uint16x8_t)v67, (uint16x8_t)v68)), 2uLL), vaddq_s16(v66, v43)), vsubq_s16(v43, v66));
            int8x16_t v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v46, v55), (int16x8_t)vhaddq_u16((uint16x8_t)v69, (uint16x8_t)v68)), 2uLL), vaddq_s16(v66, v46)), vsubq_s16(v46, v66));
            int16x8_t v76 = (int16x8_t)vbicq_s8((int8x16_t)v56, v58);
            v69.i64[0] = 0x9000900090009;
            v69.i64[1] = 0x9000900090009;
            int16x8_t v77 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v62.i8, (int16x4_t)0x9000900090009), *(int16x4_t *)v63.i8, (int16x4_t)0x3000300030003), 4uLL), vmlsl_high_s16(vmull_high_s16(v62, v69), v63, v12), 4uLL);
            int8x16_t v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v76, v13), vabsq_s16(v77));
            int16x8_t v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v76), vnegq_s16(v76));
            int16x8_t v80 = vshrq_n_s16(v76, 1uLL);
            int16x8_t v81 = vnegq_s16(v80);
            int16x8_t v82 = (int16x8_t)vbslq_s8(v58, v72, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v64, v45), v79), v80), v81), vandq_s8(v60, v78)), v45));
            int16x8_t v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v74, (int8x16_t)v43), (int16x8_t)0), v14);
            int16x8_t v84 = vminq_s16(vmaxq_s16(v82, (int16x8_t)0), v14);
            int16x8_t v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v70, (int8x16_t)vaddq_s16(v79, v47)), (int16x8_t)0), v14);
            int16x8_t v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v71, (int8x16_t)vsubq_s16(v42, v79)), (int16x8_t)0), v14);
            int16x8_t v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v65, v44), v79), v80), v81), vandq_s8(v61, v78)), v44)), (int16x8_t)0), v14);
            int16x8_t v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v58, v75, (int8x16_t)v46), (int16x8_t)0), v14);
            int32x4_t v89 = (int32x4_t)vtrn1q_s16(v54, v83);
            int32x4_t v90 = (int32x4_t)vtrn2q_s16(v54, v83);
            int32x4_t v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            int32x4_t v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            int64x2_t v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            int64x2_t v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            int64x2_t v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            int64x2_t v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            int32x4_t v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            int32x4_t v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            int32x4_t v99 = (int32x4_t)vtrn1q_s16(v88, v55);
            int32x4_t v100 = (int32x4_t)vtrn2q_s16(v88, v55);
            int64x2_t v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            int64x2_t v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            int64x2_t v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            int64x2_t v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v15 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            v105.i64[0] = 0x9000900090009;
            v105.i64[1] = 0x9000900090009;
            int16x8_t v106 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v62.i8, (int16x4_t)0x9000900090009), *(int16x4_t *)v63.i8, (int16x4_t)0x3000300030003), 4uLL), vmlsl_high_s16(vmull_high_s16(v62, v105), v63, v12), 4uLL);
            int8x16_t v107 = (int8x16_t)vcgtq_s16(vmulq_s16(v56, v13), vabsq_s16(v106));
            int16x8_t v108 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v106, v107), v56), vnegq_s16(v56));
            int16x8_t v109 = vshrq_n_s16(v56, 1uLL);
            int16x8_t v110 = vnegq_s16(v109);
            int16x8_t v111 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v64, v45), v108), v109), v110), vandq_s8(v60, v107)), v45), (int16x8_t)0), v14);
            int16x8_t v112 = vminq_s16(vmaxq_s16(vaddq_s16(v108, v47), (int16x8_t)0), v14);
            int16x8_t v113 = vminq_s16(vmaxq_s16(vsubq_s16(v42, v108), (int16x8_t)0), v14);
            int16x8_t v114 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v65, v44), v108), v109), v110), vandq_s8(v61, v107)), v44), (int16x8_t)0), v14);
            int32x4_t v115 = (int32x4_t)vtrn1q_s16(v111, v112);
            int32x4_t v116 = (int32x4_t)vtrn2q_s16(v111, v112);
            int32x4_t v117 = (int32x4_t)vtrn1q_s16(v113, v114);
            int32x4_t v118 = (int32x4_t)vtrn2q_s16(v113, v114);
            int32x4_t v119 = vtrn1q_s32(v115, v117);
            int32x4_t v120 = vtrn2q_s32(v115, v117);
            int32x4_t v121 = vtrn1q_s32(v116, v118);
            int32x4_t v122 = vtrn2q_s32(v116, v118);
            *(void *)(result - 4) = v119.i64[0];
            *(void *)(result + v6 - 4) = v121.i64[0];
            *(void *)(result + v7 - 4) = v120.i64[0];
            *(void *)(result + v8 - 4) = v122.i64[0];
            *(void *)(result + v9 - 4) = v119.i64[1];
            *(void *)(result + v11 - 4) = v121.i64[1];
            *(void *)(result + v10 - 4) = v120.i64[1];
            *(void *)(result + v15 - 4) = v122.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D0D5CDE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = a5 >> 3;
    uint64_t v26 = result + 2 * a2;
    uint64_t v27 = result - 2 * a2;
    uint64_t v28 = result - 4 * a2;
    uint64_t v29 = result - 6 * a2;
    v30.i64[0] = 0x3000300030003;
    v30.i64[1] = 0x3000300030003;
    uint64_t v31 = result + 4 * a2;
    v32.i64[0] = 0xA000A000A000ALL;
    v32.i64[1] = 0xA000A000A000ALL;
    v33.i64[0] = 0xF000F000F000F000;
    v33.i64[1] = 0xF000F000F000F000;
    _X5 = result;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        int16x8_t v35 = *(int16x8_t *)(v29 + 16 * v24);
        int16x8_t v36 = *(int16x8_t *)(v28 + 16 * v24);
        int16x8_t v37 = *(int16x8_t *)(v27 + 16 * v24);
        int16x8_t v38 = *(int16x8_t *)(result + 16 * v24);
        int16x8_t v39 = *(int16x8_t *)(v26 + 16 * v24);
        int16x8_t v40 = *(int16x8_t *)(v31 + 16 * v24);
        int16x8_t v41 = vdupq_n_s16(16 * *(unsigned __int8 *)(a3 + v24));
        int16x8_t v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        int16x8_t v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        int16x8_t v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1D0D7F570);
        int16x8_t v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1D0D7F570);
        int8x16_t v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          int16x8_t v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          int16x8_t v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          int16x8_t v49 = (int16x8_t)vandq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1D0D7F560), 4uLL), v46);
          int16x8_t v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          int8x16_t v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1D0D7F570);
          int16x8_t v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          int8x16_t v53 = (int8x16_t)vcgtq_s16(v52, v44);
          int8x16_t v54 = (int8x16_t)vcgtq_s16(v52, v45);
          int16x8_t v55 = vsubq_s16(v38, v37);
          int16x8_t v56 = vsubq_s16(v39, v36);
          int16x8_t v57 = vrhaddq_s16(v35, v37);
          int16x8_t v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            int16x8_t v59 = vaddq_s16(v49, v49);
            int16x8_t v60 = vaddq_s16(v36, v35);
            int16x8_t v61 = vaddq_s16(v38, v37);
            int16x8_t v62 = vaddq_s16(v40, v39);
            int8x16_t v63 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            int8x16_t v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            int8x16_t v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            int8x16_t v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            int8x16_t v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            int8x16_t v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v48, v40), (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            int16x8_t v69 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v60.i64[0] = 0x9000900090009;
            v60.i64[1] = 0x9000900090009;
            int16x8_t v70 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v55.i8, (int16x4_t)0x9000900090009), *(int16x4_t *)v56.i8, (int16x4_t)0x3000300030003), 4uLL), vmlsl_high_s16(vmull_high_s16(v55, v60), v56, v30), 4uLL);
            int8x16_t v71 = (int8x16_t)vcgtq_s16(vmulq_s16(v69, v32), vabsq_s16(v70));
            int16x8_t v72 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v70, v71), v69), vnegq_s16(v69));
            int16x8_t v73 = vshrq_n_s16(v69, 1uLL);
            int16x8_t v74 = vnegq_s16(v73);
            *(int16x8_t *)(v29 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)v35), (int16x8_t)0), v33);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v72), v73), v74), vandq_s8(v53, v71)), v36)), (int16x8_t)0), v33);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v63, (int8x16_t)vaddq_s16(v72, v37)), (int16x8_t)0), v33);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vsubq_s16(v38, v72)), (int16x8_t)0), v33);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v72), v73), v74), vandq_s8(v54, v71)), v39)), (int16x8_t)0), v33);
            *(int16x8_t *)(v31 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v40), (int16x8_t)0), v33);
          }
          else
          {
            v75.i64[0] = 0x9000900090009;
            v75.i64[1] = 0x9000900090009;
            int16x8_t v76 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v55.i8, (int16x4_t)0x9000900090009), *(int16x4_t *)v56.i8, (int16x4_t)0x3000300030003), 4uLL), vmlsl_high_s16(vmull_high_s16(v55, v75), v56, v30), 4uLL);
            int8x16_t v77 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v32), vabsq_s16(v76));
            int16x8_t v78 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v76, v77), v49), vnegq_s16(v49));
            int16x8_t v79 = vshrq_n_s16(v49, 1uLL);
            int16x8_t v80 = vnegq_s16(v79);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v78), v79), v80), vandq_s8(v53, v77)), v36), (int16x8_t)0), v33);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v78, v37), (int16x8_t)0), v33);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v78), (int16x8_t)0), v33);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v78), v79), v80), vandq_s8(v54, v77)), v39), (int16x8_t)0), v33);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1D0D5D288(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a5 >= 8)
  {
    unsigned int v5 = a5 >> 3;
    int16x8_t v6 = vdupq_n_s16(a3);
    int16x8_t v142 = vshrq_n_s16(v6, 3uLL);
    int8x16_t v143 = (int8x16_t)vdupq_n_s16(a4);
    int16x8_t v141 = vshrq_n_s16(vsraq_n_s16(v6, v6, 1uLL), 3uLL);
    uint64_t v7 = (const char *)(result - 4 * a2);
    int8x16_t v8 = (int8x16_t)xmmword_1D0D7F570;
    int16x8_t v136 = v6;
    while (1)
    {
      uint64_t v9 = v7;
      int8x8x2_t v151 = vld2_s8(v9);
      uint64_t v10 = &v9[a2];
      int8x8x2_t v154 = vld2_s8(v10);
      uint64_t v11 = &v10[a2];
      int8x8x2_t v157 = vld2_s8(v11);
      int16x8_t v12 = &v11[a2];
      int16x8_t v13 = (int16x8_t)vshll_n_u8((uint8x8_t)v157.val[0], 1uLL);
      int8x8x2_t v158 = vld2_s8(v12);
      int16x8_t v14 = &v12[a2];
      int16x8_t v15 = (int16x8_t)vaddl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v154.val[0]);
      int16x8_t v16 = vabdq_s16(v15, v13);
      int8x8x2_t v156 = vld2_s8(v14);
      unsigned int v17 = &v14[a2];
      int8x8x2_t v155 = vld2_s8(v17);
      int16x8_t v18 = &v17[a2];
      int16x8_t v19 = (int16x8_t)vshll_n_u8((uint8x8_t)v155.val[0], 1uLL);
      int8x8x2_t v153 = vld2_s8(v18);
      int16x8_t v20 = &v18[a2];
      int16x8_t v21 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]);
      int8x8x2_t v152 = vld2_s8(v20);
      int16x8_t v22 = vabdq_s16(v21, v19);
      int16x8_t v23 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v16), v15, v13), v8);
      int16x8_t v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v22), v21, v19), v8);
      int8x16_t v25 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v24, v23));
      int16x8_t v26 = vrshrq_n_s16(v6, 3uLL);
      uint8x8_t v148 = (uint8x8_t)v151.val[1];
      uint8x8_t v146 = (uint8x8_t)v152.val[1];
      int16x8_t v144 = v26;
      if (!vaddlvq_u16((uint16x8_t)v25)) {
        break;
      }
      int16x8_t v27 = (int16x8_t)vmovl_u8((uint8x8_t)v157.val[0]);
      int16x8_t v28 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[0]);
      int16x8_t v29 = (int16x8_t)vmovl_u8((uint8x8_t)v155.val[0]);
      int16x8_t v30 = (int16x8_t)vmovl_u8((uint8x8_t)v156.val[0]);
      int16x8_t v31 = (int16x8_t)vandq_s8(v143, v25);
      int16x8_t v32 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v31, vshlq_n_s16(v31, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v156.val[0])), vandq_s8((int8x16_t)vcgtq_s16(v26, vaddq_s16(v22, v16)), (int8x16_t)vcgtq_s16(v142, (int16x8_t)vabal_u8(vabdl_u8((uint8x8_t)v152.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v151.val[0], (uint8x8_t)v158.val[0]))));
      int16x8_t v33 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v32), (int8x16_t)v32), v8);
      int8x16_t v34 = (int8x16_t)vcgtq_s16(v141, v23);
      int8x16_t v35 = (int8x16_t)vcgtq_s16(v141, v24);
      if (!vaddlvq_u16((uint16x8_t)v33))
      {
        int16x8_t v64 = (int16x8_t)vbicq_s8((int8x16_t)v31, (int8x16_t)v33);
        v65.i64[0] = 0x2000200020002;
        v65.i64[1] = 0x2000200020002;
        int16x8_t v66 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v156.val[0], (uint8x8_t)0x909090909090909), (uint8x8_t)v158.val[0], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v157.val[0]), v65), 4uLL);
        v65.i64[0] = 0xA000A000A000ALL;
        v65.i64[1] = 0xA000A000A000ALL;
        int8x16_t v67 = (int8x16_t)vcgtq_s16(vmulq_s16(v64, v65), vabsq_s16(v66));
        int16x8_t v68 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v66, v67), v64), vnegq_s16(v64));
        int16x8_t v69 = vsubq_s16(v30, v68);
        int16x8_t v70 = vshrq_n_s16(v64, 1uLL);
        int16x8_t v71 = vnegq_s16(v70);
        int16x8_t v72 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v158.val[0]), (uint8x8_t)v157.val[0]), v68), v70), v71), vandq_s8(v34, v67)), v27);
        int16x8_t v73 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v155.val[0]), v68), v70), v71), vandq_s8(v35, v67));
        int8x8_t v60 = vqmovun_s16(v72);
        int8x8_t v150 = vqmovun_s16(vaddq_s16(v68, v28));
        int8x8_t v61 = vqmovun_s16(v69);
        int8x8_t v62 = vqmovun_s16(vaddq_s16(v73, v29));
        int8x8_t v59 = v154.val[0];
        goto LABEL_8;
      }
      int8x8_t v36 = vmovn_s16(v31);
      uint8x8_t v37 = (uint8x8_t)vadd_s8(v36, v36);
      int16x8_t v38 = (int16x8_t)vaddl_u8((uint8x8_t)v154.val[0], (uint8x8_t)v151.val[0]);
      int16x8_t v39 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[0], (uint8x8_t)v154.val[0]);
      uint8x8_t v40 = (uint8x8_t)v152.val[0];
      int16x8_t v41 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v158.val[0]);
      int16x8_t v42 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[0], (uint8x8_t)v155.val[0]);
      int8x16_t v43 = v35;
      int8x8_t v149 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v41, v27), vhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v155.val[0])), 2uLL), vqadd_u8((uint8x8_t)v158.val[0], v37)), vqsub_u8((uint8x8_t)v158.val[0], v37));
      int8x8_t v44 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v41, v29), vhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v157.val[0])), 2uLL), vqadd_u8((uint8x8_t)v156.val[0], v37)), vqsub_u8((uint8x8_t)v156.val[0], v37));
      int8x8_t v45 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v41, v39), 2uLL), vqadd_u8((uint8x8_t)v157.val[0], v37)), vqsub_u8((uint8x8_t)v157.val[0], v37));
      int8x8_t v46 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v42, v41), 2uLL), vqadd_u8((uint8x8_t)v155.val[0], v37)), vqsub_u8((uint8x8_t)v155.val[0], v37));
      *(uint8x8_t *)v38.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v38, (int16x8_t)vhaddq_u16((uint16x8_t)v39, (uint16x8_t)v41)), 2uLL), vqadd_u8((uint8x8_t)v154.val[0], v37)), vqsub_u8((uint8x8_t)v154.val[0], v37));
      int8x8_t v47 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(v40, (uint8x8_t)v153.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v42, (uint16x8_t)v41)), 2uLL), vqadd_u8((uint8x8_t)v153.val[0], v37)), vqsub_u8((uint8x8_t)v153.val[0], v37));
      int16x8_t v48 = (int16x8_t)vbicq_s8((int8x16_t)v31, (int8x16_t)v33);
      v49.i64[0] = 0x9000900090009;
      v49.i64[1] = 0x9000900090009;
      int16x8_t v50 = vmulq_s16((int16x8_t)vsubl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v158.val[0]), v49);
      v49.i64[0] = 0x2000200020002;
      v49.i64[1] = 0x2000200020002;
      int16x8_t v51 = vrshrq_n_s16(vmlaq_s16(v50, (int16x8_t)vsubl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v157.val[0]), v49), 4uLL);
      v49.i64[0] = 0xA000A000A000ALL;
      v49.i64[1] = 0xA000A000A000ALL;
      int8x16_t v52 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v49), vabsq_s16(v51));
      int16x8_t v53 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v51, v52), v48), vnegq_s16(v48));
      int16x8_t v54 = vshrq_n_s16(v48, 1uLL);
      int16x8_t v55 = vnegq_s16(v54);
      int8x16_t v56 = (int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v158.val[0]), (uint8x8_t)v157.val[0]), v53), v54), v55);
      int16x8_t v57 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v155.val[0]), v53), v54), v55), vandq_s8(v43, v52)), v29);
      *(int8x8_t *)v55.i8 = vqmovun_s16(vsubq_s16(v30, v53));
      int8x8_t v58 = vqmovn_s16(v33);
      int8x8_t v59 = vbsl_s8(v58, *(int8x8_t *)v38.i8, v154.val[0]);
      int8x8_t v60 = vbsl_s8(v58, v45, vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8(v56, vandq_s8(v34, v52)), v27)));
      int8x8_t v150 = vbsl_s8(v58, v149, vqmovun_s16(vaddq_s16(v53, v28)));
      int8x8_t v61 = vbsl_s8(v58, v44, *(int8x8_t *)v55.i8);
      int8x16_t v8 = (int8x16_t)xmmword_1D0D7F570;
      int16x8_t v6 = v136;
      int8x8_t v62 = vbsl_s8(v58, v46, vqmovun_s16(v57));
      int8x8_t v63 = vbsl_s8(v58, v47, v153.val[0]);
LABEL_9:
      int16x8_t v74 = (int16x8_t)vaddl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v154.val[1]);
      int16x8_t v75 = (int16x8_t)vshll_n_u8((uint8x8_t)v157.val[1], 1uLL);
      int16x8_t v76 = vabdq_s16(v74, v75);
      int16x8_t v77 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]);
      int16x8_t v78 = (int16x8_t)vshll_n_u8((uint8x8_t)v155.val[1], 1uLL);
      int16x8_t v79 = vabdq_s16(v77, v78);
      int16x8_t v80 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v76), v74, v75), v8);
      int16x8_t v81 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v79), v77, v78), v8);
      int8x16_t v82 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v81, v80));
      if (vaddlvq_u16((uint16x8_t)v82))
      {
        int16x8_t v138 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[1]);
        int16x8_t v139 = (int16x8_t)vmovl_u8((uint8x8_t)v157.val[1]);
        int16x8_t v140 = (int16x8_t)vmovl_u8((uint8x8_t)v155.val[1]);
        int16x8_t v137 = (int16x8_t)vmovl_u8((uint8x8_t)v156.val[1]);
        int16x8_t v83 = (int16x8_t)vandq_s8(v143, v82);
        int16x8_t v84 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v83, vshlq_n_s16(v83, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v156.val[1])), vandq_s8((int8x16_t)vcgtq_s16(v144, vaddq_s16(v79, v76)), (int8x16_t)vcgtq_s16(v142, (int16x8_t)vabal_u8(vabdl_u8(v146, (uint8x8_t)v156.val[1]), (uint8x8_t)v151.val[1], (uint8x8_t)v158.val[1]))));
        int16x8_t v85 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v84), (int8x16_t)v84), v8);
        int8x16_t v86 = (int8x16_t)vcgtq_s16(v141, v80);
        int8x16_t v87 = (int8x16_t)vcgtq_s16(v141, v81);
        if (vaddlvq_u16((uint16x8_t)v85))
        {
          int8x8_t v88 = vmovn_s16(v83);
          uint8x8_t v89 = (uint8x8_t)vadd_s8(v88, v88);
          int8x16_t v145 = v86;
          int16x8_t v90 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[1], (uint8x8_t)v154.val[1]);
          int16x8_t v91 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v158.val[1]);
          int16x8_t v92 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[1], (uint8x8_t)v155.val[1]);
          int8x16_t v93 = v87;
          int8x8_t v147 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v91, v139), vhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v155.val[1])), 2uLL), vqadd_u8((uint8x8_t)v158.val[1], v89)), vqsub_u8((uint8x8_t)v158.val[1], v89));
          int8x8_t v94 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v91, v140), vhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v157.val[1])), 2uLL), vqadd_u8((uint8x8_t)v156.val[1], v89)), vqsub_u8((uint8x8_t)v156.val[1], v89));
          int8x8_t v95 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v91, v90), 2uLL), vqadd_u8((uint8x8_t)v157.val[1], v89)), vqsub_u8((uint8x8_t)v157.val[1], v89));
          int8x8_t v96 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v92, v91), 2uLL), vqadd_u8((uint8x8_t)v155.val[1], v89)), vqsub_u8((uint8x8_t)v155.val[1], v89));
          *(uint8x8_t *)v90.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v154.val[1], v148), (int16x8_t)vhaddq_u16((uint16x8_t)v90, (uint16x8_t)v91)), 2uLL), vqadd_u8((uint8x8_t)v154.val[1], v89)), vqsub_u8((uint8x8_t)v154.val[1], v89));
          uint8x8_t v97 = vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(v146, (uint8x8_t)v153.val[1]), (int16x8_t)vhaddq_u16((uint16x8_t)v92, (uint16x8_t)v91)), 2uLL), vqadd_u8((uint8x8_t)v153.val[1], v89));
          int8x16_t v8 = (int8x16_t)xmmword_1D0D7F570;
          int16x8_t v6 = v136;
          int8x8_t v98 = (int8x8_t)vmax_u8(v97, vqsub_u8((uint8x8_t)v153.val[1], v89));
          int16x8_t v99 = (int16x8_t)vsubl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v158.val[1]);
          int16x8_t v100 = (int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v158.val[1]), (uint8x8_t)v157.val[1]);
          int16x8_t v101 = (int16x8_t)vsubl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v157.val[1]);
          v102.i64[0] = 0x9000900090009;
          v102.i64[1] = 0x9000900090009;
          v103.i64[0] = 0x2000200020002;
          v103.i64[1] = 0x2000200020002;
          uint8x8_t v104 = vrhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]);
          int16x8_t v105 = (int16x8_t)vbicq_s8((int8x16_t)v83, (int8x16_t)v85);
          int16x8_t v106 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v99, v102), v101, v103), 4uLL);
          int16x8_t v107 = (int16x8_t)vsubl_u8(v104, (uint8x8_t)v155.val[1]);
          v108.i64[0] = 0xA000A000A000ALL;
          v108.i64[1] = 0xA000A000A000ALL;
          int8x16_t v109 = (int8x16_t)vcgtq_s16(vmulq_s16(v105, v108), vabsq_s16(v106));
          int16x8_t v110 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v106, v109), v105), vnegq_s16(v105));
          int16x8_t v111 = vshrq_n_s16(v105, 1uLL);
          int16x8_t v112 = vnegq_s16(v111);
          int16x8_t v113 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(v100, v110), v111), v112), vandq_s8(v145, v109)), v139);
          int16x8_t v114 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(v107, v110), v111), v112), vandq_s8(v93, v109)), v140);
          int8x8_t v115 = vqmovn_s16(v85);
          v154.val[1] = vbsl_s8(v115, *(int8x8_t *)v90.i8, v154.val[1]);
          v153.val[1] = vbsl_s8(v115, v98, v153.val[1]);
          v157.val[1] = vbsl_s8(v115, v95, vqmovun_s16(v113));
          v158.val[1] = vbsl_s8(v115, v147, vqmovun_s16(vaddq_s16(v110, v138)));
          v156.val[1] = vbsl_s8(v115, v94, vqmovun_s16(vsubq_s16(v137, v110)));
          v155.val[1] = vbsl_s8(v115, v96, vqmovun_s16(v114));
        }
        else
        {
          int16x8_t v116 = (int16x8_t)vbicq_s8((int8x16_t)v83, (int8x16_t)v85);
          v117.i64[0] = 0x2000200020002;
          v117.i64[1] = 0x2000200020002;
          int16x8_t v118 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v156.val[1], (uint8x8_t)0x909090909090909), (uint8x8_t)v158.val[1], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v157.val[1]), v117), 4uLL);
          v117.i64[0] = 0xA000A000A000ALL;
          v117.i64[1] = 0xA000A000A000ALL;
          int8x16_t v119 = (int8x16_t)vcgtq_s16(vmulq_s16(v116, v117), vabsq_s16(v118));
          int16x8_t v120 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v118, v119), v116), vnegq_s16(v116));
          int16x8_t v121 = vshrq_n_s16(v116, 1uLL);
          int16x8_t v122 = vnegq_s16(v121);
          int16x8_t v123 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v158.val[1]), (uint8x8_t)v157.val[1]), v120), v121), v122), vandq_s8(v86, v119)), v139);
          int16x8_t v124 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]), (uint8x8_t)v155.val[1]), v120), v121), v122), vandq_s8(v87, v119));
          v157.val[1] = vqmovun_s16(v123);
          v158.val[1] = vqmovun_s16(vaddq_s16(v120, v138));
          v156.val[1] = vqmovun_s16(vsubq_s16(v137, v120));
          v155.val[1] = vqmovun_s16(vaddq_s16(v124, v140));
        }
      }
      v159.val[0] = v150;
      long long v125 = (char *)&v20[-6 * a2];
      int8x8_t v126 = v154.val[1];
      vst2_s8(v125, *(int8x8x2_t *)v59.i8);
      long long v127 = &v125[a2];
      int8x8_t v128 = v157.val[1];
      vst2_s8(v127, *(int8x8x2_t *)v60.i8);
      long long v129 = &v127[a2];
      v159.val[1] = v158.val[1];
      vst2_s8(v129, v159);
      int v130 = &v129[a2];
      int8x8_t v131 = v156.val[1];
      vst2_s8(v130, *(int8x8x2_t *)v61.i8);
      int v132 = &v130[a2];
      int8x8_t v133 = v155.val[1];
      vst2_s8(v132, *(int8x8x2_t *)v62.i8);
      int v134 = &v132[a2];
      int8x8_t v135 = v153.val[1];
      vst2_s8(v134, *(int8x8x2_t *)v63.i8);
      v7 += 16;
      if (!--v5) {
        return result;
      }
    }
    int8x8_t v59 = v154.val[0];
    int8x8_t v60 = v157.val[0];
    int8x8_t v150 = v158.val[0];
    int8x8_t v61 = v156.val[0];
    int8x8_t v62 = v155.val[0];
LABEL_8:
    int8x8_t v63 = v153.val[0];
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1D0D5DA18(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (a5 >= 8)
  {
    unsigned int v5 = a5 >> 3;
    int16x8_t v6 = vdupq_n_s16(a3);
    int16x8_t v170 = vshrq_n_s16(v6, 3uLL);
    int8x16_t v171 = (int8x16_t)vdupq_n_s16(a4);
    int16x8_t v169 = vshrq_n_s16(vsraq_n_s16(v6, v6, 1uLL), 3uLL);
    uint64_t v7 = (int8x16_t *)(result - 8);
    int8x16_t v8 = (int8x16_t)xmmword_1D0D7F570;
    int16x8_t v166 = v6;
    do
    {
      int8x16_t v9 = *(int8x16_t *)((char *)v7 + a2);
      int8x16_t v10 = *(int8x16_t *)((char *)v7 + 2 * a2);
      int8x16_t v11 = *(int8x16_t *)((char *)v7 + 3 * a2);
      int8x16_t v12 = *(int8x16_t *)((char *)v7 + 4 * a2);
      int8x16_t v13 = *(int8x16_t *)((char *)v7 + 5 * a2);
      int8x16_t v14 = *(int8x16_t *)((char *)v7 + 6 * a2);
      int8x16_t v15 = *(int8x16_t *)((char *)v7 + 7 * a2);
      int16x8_t v16 = (int16x8_t)vtrn1q_s8(*v7, v9);
      int16x8_t v17 = (int16x8_t)vtrn1q_s8(v10, v11);
      int16x8_t v18 = (int16x8_t)vtrn1q_s8(v12, v13);
      int16x8_t v19 = (int16x8_t)vtrn1q_s8(v14, v15);
      int32x4_t v20 = (int32x4_t)vtrn1q_s16(v16, v17);
      int32x4_t v21 = (int32x4_t)vtrn2q_s16(v16, v17);
      int32x4_t v22 = (int32x4_t)vtrn1q_s16(v18, v19);
      int32x4_t v23 = (int32x4_t)vtrn2q_s16(v18, v19);
      int8x16_t v24 = (int8x16_t)vtrn1q_s32(v20, v22);
      int16x8_t v25 = (int16x8_t)vtrn2q_s32(v20, v22);
      int8x16_t v26 = (int8x16_t)vtrn1q_s32(v21, v23);
      int8x16_t v27 = (int8x16_t)vtrn2q_s32(v21, v23);
      uint8x8_t v28 = (uint8x8_t)vextq_s8(v24, v24, 8uLL).u64[0];
      uint8x8_t v29 = (uint8x8_t)vextq_s8(v26, v26, 8uLL).u64[0];
      int8x8_t v30 = (int8x8_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      uint8x8_t v31 = (uint8x8_t)vextq_s8(v27, v27, 8uLL).u64[0];
      int16x8_t v32 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8);
      int16x8_t v33 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v25.i8, 1uLL);
      int16x8_t v34 = vabdq_s16(v32, v33);
      int16x8_t v35 = (int16x8_t)vaddl_high_u8((uint8x16_t)v25, (uint8x16_t)v24);
      int16x8_t v36 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v26, 1uLL);
      int16x8_t v37 = vabdq_s16(v35, v36);
      int16x8_t v38 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v34), v32, v33), v8);
      int16x8_t v39 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v37), v35, v36), v8);
      int8x16_t v40 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v39, v38));
      int16x8_t v41 = vrshrq_n_s16(v6, 3uLL);
      uint8x8_t v172 = v31;
      if (vaddlvq_u16((uint16x8_t)v40))
      {
        int16x8_t v42 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v25.i8);
        uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)v27.i8);
        int16x8_t v44 = (int16x8_t)vmovl_u8(v29);
        int16x8_t v45 = (int16x8_t)vmovl_u8(v28);
        int16x8_t v46 = (int16x8_t)vandq_s8(v171, v40);
        int16x8_t v47 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v46, vshlq_n_s16(v46, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v27.i8, v28)), vandq_s8((int8x16_t)vcgtq_s16(v41, vaddq_s16(v37, v34)), (int8x16_t)vcgtq_s16(v170, (int16x8_t)vabal_u8(vabdl_u8(v31, v28), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v27.i8))));
        int16x8_t v48 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v47), (int8x16_t)v47), v8);
        int8x16_t v49 = (int8x16_t)vcgtq_s16(v169, v38);
        int8x16_t v50 = (int8x16_t)vcgtq_s16(v169, v39);
        if (vaddlvq_u16((uint16x8_t)v48))
        {
          int8x8_t v51 = vmovn_s16(v46);
          uint8x8_t v52 = (uint8x8_t)vadd_s8(v51, v51);
          int16x8_t v162 = (int16x8_t)v43;
          int16x8_t v53 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v25.i8);
          int16x8_t v54 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v27.i8, v28);
          int16x8_t v55 = (int16x8_t)vaddl_high_u8((uint8x16_t)v26, (uint8x16_t)v25);
          int16x8_t v167 = v41;
          int8x8_t v164 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v54, v42), vhadd_u8(*(uint8x8_t *)v26.i8, v29)), 2uLL), vqadd_u8(*(uint8x8_t *)v27.i8, v52)), vqsub_u8(*(uint8x8_t *)v27.i8, v52));
          int8x8_t v56 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v54, v44), vhadd_u8((uint8x8_t)v30, *(uint8x8_t *)v25.i8)), 2uLL), vqadd_u8(v28, v52)), vqsub_u8(v28, v52));
          int8x8_t v57 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v53, v54), 2uLL), vqadd_u8(*(uint8x8_t *)v25.i8, v52)), vqsub_u8(*(uint8x8_t *)v25.i8, v52));
          int8x8_t v58 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v55, v54), 2uLL), vqadd_u8(v29, v52)), vqsub_u8(v29, v52));
          int8x8_t v59 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v26.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v53, (uint16x8_t)v54)), 2uLL), vqadd_u8(*(uint8x8_t *)v26.i8, v52)), vqsub_u8(*(uint8x8_t *)v26.i8, v52));
          int8x8_t v60 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v25, (uint8x16_t)v27), (int16x8_t)vhaddq_u16((uint16x8_t)v55, (uint16x8_t)v54)), 2uLL), vqadd_u8((uint8x8_t)v30, v52)), vqsub_u8((uint8x8_t)v30, v52));
          int16x8_t v61 = (int16x8_t)vbicq_s8((int8x16_t)v46, (int8x16_t)v48);
          v62.i64[0] = 0x9000900090009;
          v62.i64[1] = 0x9000900090009;
          int16x8_t v63 = vmulq_s16((int16x8_t)vsubl_u8(v28, *(uint8x8_t *)v27.i8), v62);
          v62.i64[0] = 0x2000200020002;
          v62.i64[1] = 0x2000200020002;
          int16x8_t v64 = vrshrq_n_s16(vmlaq_s16(v63, (int16x8_t)vsubl_u8(v29, *(uint8x8_t *)v25.i8), v62), 4uLL);
          v62.i64[0] = 0xA000A000A000ALL;
          v62.i64[1] = 0xA000A000A000ALL;
          int8x16_t v65 = (int8x16_t)vcgtq_s16(vmulq_s16(v61, v62), vabsq_s16(v64));
          int16x8_t v66 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v64, v65), v61), vnegq_s16(v61));
          int16x8_t v67 = vshrq_n_s16(v61, 1uLL);
          int16x8_t v68 = vnegq_s16(v67);
          int16x8_t v25 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8), *(uint8x8_t *)v25.i8), v66), v67), v68), vandq_s8(v49, v65)), v42);
          int16x8_t v69 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v30, v28), v29), v66), v67), v68), vandq_s8(v50, v65)), v44);
          int8x16_t v8 = (int8x16_t)xmmword_1D0D7F570;
          int8x8_t v70 = vqmovn_s16(v48);
          *(int8x8_t *)v26.i8 = vbsl_s8(v70, v59, *(int8x8_t *)v26.i8);
          *(int8x8_t *)v25.i8 = vbsl_s8(v70, v57, vqmovun_s16(v25));
          *(int8x8_t *)v27.i8 = vbsl_s8(v70, v164, vqmovun_s16(vaddq_s16(v66, v162)));
          uint8x8_t v28 = (uint8x8_t)vbsl_s8(v70, v56, vqmovun_s16(vsubq_s16(v45, v66)));
          int16x8_t v6 = v166;
          int16x8_t v41 = v167;
          uint8x8_t v29 = (uint8x8_t)vbsl_s8(v70, v58, vqmovun_s16(v69));
          int8x8_t v30 = vbsl_s8(v70, v60, v30);
        }
        else
        {
          int16x8_t v71 = (int16x8_t)vbicq_s8((int8x16_t)v46, (int8x16_t)v48);
          int16x8_t v72 = (int16x8_t)v43;
          v73.i64[0] = 0x2000200020002;
          v73.i64[1] = 0x2000200020002;
          int16x8_t v74 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v28, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v27.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v29, *(uint8x8_t *)v25.i8), v73), 4uLL);
          v73.i64[0] = 0xA000A000A000ALL;
          v73.i64[1] = 0xA000A000A000ALL;
          int8x16_t v75 = (int8x16_t)vcgtq_s16(vmulq_s16(v71, v73), vabsq_s16(v74));
          int16x8_t v76 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v74, v75), v71), vnegq_s16(v71));
          int16x8_t v77 = vaddq_s16(v76, v72);
          int16x8_t v78 = vshrq_n_s16(v71, 1uLL);
          int16x8_t v79 = vnegq_s16(v78);
          int16x8_t v80 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8), *(uint8x8_t *)v25.i8), v76), v78), v79), vandq_s8(v49, v75)), v42);
          int16x8_t v81 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v30, v28), v29), v76), v78), v79), vandq_s8(v50, v75)), v44);
          *(int8x8_t *)v25.i8 = vqmovun_s16(v80);
          *(int8x8_t *)v27.i8 = vqmovun_s16(v77);
          uint8x8_t v28 = (uint8x8_t)vqmovun_s16(vsubq_s16(v45, v76));
          uint8x8_t v29 = (uint8x8_t)vqmovun_s16(v81);
        }
      }
      int16x8_t v82 = (int16x8_t)vtrn2q_s8(*v7, v9);
      int16x8_t v83 = (int16x8_t)vtrn2q_s8(v10, v11);
      int16x8_t v84 = (int16x8_t)vtrn2q_s8(v12, v13);
      int16x8_t v85 = (int16x8_t)vtrn2q_s8(v14, v15);
      int32x4_t v86 = (int32x4_t)vtrn1q_s16(v82, v83);
      int32x4_t v87 = (int32x4_t)vtrn2q_s16(v82, v83);
      int32x4_t v88 = (int32x4_t)vtrn1q_s16(v84, v85);
      int32x4_t v89 = (int32x4_t)vtrn2q_s16(v84, v85);
      int8x16_t v90 = (int8x16_t)vtrn1q_s32(v86, v88);
      int8x16_t v91 = (int8x16_t)vtrn2q_s32(v86, v88);
      int8x16_t v92 = (int8x16_t)vtrn1q_s32(v87, v89);
      int8x16_t v93 = (int8x16_t)vtrn2q_s32(v87, v89);
      uint8x8_t v94 = (uint8x8_t)vextq_s8(v90, v90, 8uLL).u64[0];
      uint8x8_t v95 = (uint8x8_t)vextq_s8(v92, v92, 8uLL).u64[0];
      int8x8_t v96 = (int8x8_t)vextq_s8(v91, v91, 8uLL).u64[0];
      uint8x8_t v97 = (uint8x8_t)vextq_s8(v93, v93, 8uLL).u64[0];
      int16x8_t v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8);
      int16x8_t v99 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v91.i8, 1uLL);
      int16x8_t v100 = vabdq_s16(v98, v99);
      int16x8_t v101 = (int16x8_t)vaddl_high_u8((uint8x16_t)v91, (uint8x16_t)v90);
      int16x8_t v102 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v92, 1uLL);
      int16x8_t v103 = vabdq_s16(v101, v102);
      int16x8_t v104 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v100), v98, v99), v8);
      int16x8_t v105 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v103), v101, v102), v8);
      int8x16_t v106 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v105, v104));
      if (vaddlvq_u16((uint16x8_t)v106))
      {
        int8x8_t v168 = v30;
        int16x8_t v107 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v91.i8);
        int16x8_t v108 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v93.i8);
        int16x8_t v109 = (int16x8_t)vmovl_u8(v95);
        int16x8_t v110 = (int16x8_t)vmovl_u8(v94);
        int16x8_t v111 = (int16x8_t)vandq_s8(v171, v106);
        int16x8_t v112 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v111, vshlq_n_s16(v111, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v93.i8, v94)), vandq_s8((int8x16_t)vcgtq_s16(v41, vaddq_s16(v103, v100)), (int8x16_t)vcgtq_s16(v170, (int16x8_t)vabal_u8(vabdl_u8(v97, v94), *(uint8x8_t *)v90.i8, *(uint8x8_t *)v93.i8))));
        int16x8_t v113 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v112), (int8x16_t)v112), v8);
        int8x16_t v114 = (int8x16_t)vcgtq_s16(v169, v104);
        int8x16_t v115 = (int8x16_t)vcgtq_s16(v169, v105);
        if (vaddlvq_u16((uint16x8_t)v113))
        {
          int8x8_t v116 = vmovn_s16(v111);
          uint8x8_t v117 = (uint8x8_t)vadd_s8(v116, v116);
          int16x8_t v118 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v91.i8);
          int16x8_t v119 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v93.i8, v94);
          int16x8_t v120 = (int16x8_t)vaddl_high_u8((uint8x16_t)v92, (uint8x16_t)v91);
          int8x16_t v163 = v115;
          int8x8_t v165 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v119, v107), vhadd_u8(*(uint8x8_t *)v92.i8, v95)), 2uLL), vqadd_u8(*(uint8x8_t *)v93.i8, v117)), vqsub_u8(*(uint8x8_t *)v93.i8, v117));
          int8x8_t v121 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v119, v109), vhadd_u8((uint8x8_t)v96, *(uint8x8_t *)v91.i8)), 2uLL), vqadd_u8(v94, v117)), vqsub_u8(v94, v117));
          int8x8_t v122 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v118, v119), 2uLL), vqadd_u8(*(uint8x8_t *)v91.i8, v117)), vqsub_u8(*(uint8x8_t *)v91.i8, v117));
          int8x8_t v123 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v120, v119), 2uLL), vqadd_u8(v95, v117)), vqsub_u8(v95, v117));
          int8x8_t v124 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v90.i8, *(uint8x8_t *)v92.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v118, (uint16x8_t)v119)), 2uLL), vqadd_u8(*(uint8x8_t *)v92.i8, v117)), vqsub_u8(*(uint8x8_t *)v92.i8, v117));
          int8x8_t v125 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v91, (uint8x16_t)v93), (int16x8_t)vhaddq_u16((uint16x8_t)v120, (uint16x8_t)v119)), 2uLL), vqadd_u8((uint8x8_t)v96, v117)), vqsub_u8((uint8x8_t)v96, v117));
          int16x8_t v126 = (int16x8_t)vbicq_s8((int8x16_t)v111, (int8x16_t)v113);
          v127.i64[0] = 0x9000900090009;
          v127.i64[1] = 0x9000900090009;
          int16x8_t v128 = vmulq_s16((int16x8_t)vsubl_u8(v94, *(uint8x8_t *)v93.i8), v127);
          v127.i64[0] = 0x2000200020002;
          v127.i64[1] = 0x2000200020002;
          int16x8_t v129 = vrshrq_n_s16(vmlaq_s16(v128, (int16x8_t)vsubl_u8(v95, *(uint8x8_t *)v91.i8), v127), 4uLL);
          v127.i64[0] = 0xA000A000A000ALL;
          v127.i64[1] = 0xA000A000A000ALL;
          int8x16_t v130 = (int8x16_t)vcgtq_s16(vmulq_s16(v126, v127), vabsq_s16(v129));
          int16x8_t v131 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v129, v130), v126), vnegq_s16(v126));
          int16x8_t v132 = vshrq_n_s16(v126, 1uLL);
          int16x8_t v133 = vnegq_s16(v132);
          int16x8_t v134 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8), *(uint8x8_t *)v91.i8), v131), v132), v133), vandq_s8(v114, v130)), v107);
          int16x8_t v135 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v96, v94), v95), v131), v132), v133), vandq_s8(v163, v130)), v109);
          *(int8x8_t *)v127.i8 = vqmovn_s16(v113);
          *(int8x8_t *)v92.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v124, *(int8x8_t *)v92.i8);
          *(int8x8_t *)v91.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v122, vqmovun_s16(v134));
          int8x16_t v8 = (int8x16_t)xmmword_1D0D7F570;
          int16x8_t v6 = v166;
          *(int8x8_t *)v93.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v165, vqmovun_s16(vaddq_s16(v131, v108)));
          uint8x8_t v94 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v127.i8, v121, vqmovun_s16(vsubq_s16(v110, v131)));
          uint8x8_t v95 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v127.i8, v123, vqmovun_s16(v135));
          int8x8_t v96 = vbsl_s8(*(int8x8_t *)v127.i8, v125, v96);
        }
        else
        {
          int16x8_t v137 = (int16x8_t)vbicq_s8((int8x16_t)v111, (int8x16_t)v113);
          v138.i64[0] = 0x2000200020002;
          v138.i64[1] = 0x2000200020002;
          int16x8_t v139 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v94, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v93.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v95, *(uint8x8_t *)v91.i8), v138), 4uLL);
          v138.i64[0] = 0xA000A000A000ALL;
          v138.i64[1] = 0xA000A000A000ALL;
          int8x16_t v140 = (int8x16_t)vcgtq_s16(vmulq_s16(v137, v138), vabsq_s16(v139));
          int16x8_t v141 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v139, v140), v137), vnegq_s16(v137));
          int16x8_t v142 = vshrq_n_s16(v137, 1uLL);
          int16x8_t v143 = vnegq_s16(v142);
          int16x8_t v144 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8), *(uint8x8_t *)v91.i8), v141), v142), v143), vandq_s8(v114, v140)), v107);
          int16x8_t v145 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v96, v94), v95), v141), v142), v143), vandq_s8(v115, v140)), v109);
          *(int8x8_t *)v91.i8 = vqmovun_s16(v144);
          *(int8x8_t *)v93.i8 = vqmovun_s16(vaddq_s16(v141, v108));
          uint8x8_t v94 = (uint8x8_t)vqmovun_s16(vsubq_s16(v110, v141));
          uint8x8_t v95 = (uint8x8_t)vqmovun_s16(v145);
        }
        uint64_t v136 = (uint64_t)v172;
        int8x8_t v30 = v168;
      }
      else
      {
        uint64_t v136 = (uint64_t)v172;
      }
      v24.u64[1] = (unint64_t)v28;
      v26.u64[1] = (unint64_t)v29;
      v25.u64[1] = (unint64_t)v30;
      v27.i64[1] = v136;
      v90.u64[1] = (unint64_t)v94;
      v92.u64[1] = (unint64_t)v95;
      v91.u64[1] = (unint64_t)v96;
      v93.u64[1] = (unint64_t)v97;
      int16x8_t v146 = (int16x8_t)vtrn1q_s8(v24, v90);
      int16x8_t v147 = (int16x8_t)vtrn2q_s8(v24, v90);
      int16x8_t v148 = (int16x8_t)vtrn1q_s8(v26, v92);
      int16x8_t v149 = (int16x8_t)vtrn2q_s8(v26, v92);
      int16x8_t v150 = (int16x8_t)vtrn1q_s8((int8x16_t)v25, v91);
      int16x8_t v151 = (int16x8_t)vtrn2q_s8((int8x16_t)v25, v91);
      int16x8_t v152 = (int16x8_t)vtrn1q_s8(v27, v93);
      int16x8_t v153 = (int16x8_t)vtrn2q_s8(v27, v93);
      int32x4_t v154 = (int32x4_t)vtrn1q_s16(v146, v148);
      int32x4_t v155 = (int32x4_t)vtrn2q_s16(v146, v148);
      int32x4_t v156 = (int32x4_t)vtrn1q_s16(v147, v149);
      int32x4_t v157 = (int32x4_t)vtrn2q_s16(v147, v149);
      int32x4_t v158 = (int32x4_t)vtrn1q_s16(v150, v152);
      int32x4_t v159 = (int32x4_t)vtrn2q_s16(v150, v152);
      int32x4_t v160 = (int32x4_t)vtrn1q_s16(v151, v153);
      int32x4_t v161 = (int32x4_t)vtrn2q_s16(v151, v153);
      *(int32x4_t *)uint64_t v7 = vtrn1q_s32(v154, v158);
      *(int32x4_t *)((char *)v7 + a2) = vtrn1q_s32(v156, v160);
      *(int32x4_t *)((char *)v7 + 2 * a2) = vtrn1q_s32(v155, v159);
      *(int32x4_t *)((char *)v7 + 3 * a2) = vtrn1q_s32(v157, v161);
      *(int32x4_t *)((char *)v7 + 4 * a2) = vtrn2q_s32(v154, v158);
      *(int32x4_t *)((char *)v7 + 5 * a2) = vtrn2q_s32(v156, v160);
      *(int32x4_t *)((char *)v7 + 6 * a2) = vtrn2q_s32(v155, v159);
      *(int32x4_t *)((char *)v7 + 7 * a2) = vtrn2q_s32(v157, v161);
      uint64_t v7 = (int8x16_t *)((char *)v7 + 8 * a2);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D0D5E200(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void **)(result + 8);
  uint64_t v8 = (uint64_t)a3 >> 3;
  uint64_t v9 = v7[96];
  uint64_t v10 = v7[97];
  uint64_t v11 = v7[116];
  uint64_t v12 = v7[118];
  uint64_t v13 = v7[117];
  int8x16_t v14 = (int32x4_t *)(v7[121] + v13 * ((uint64_t)(a2 + 8) >> 3) + (a3 >> 2));
  int8x16_t v15 = (const __int16 *)(*(void *)(result + 32) + 14);
  int32x4_t v16 = *(int32x4_t *)((char *)v14 + v13);
  int32x4_t v17 = *(int32x4_t *)((char *)v14 + 2 * v13);
  int32x4_t v18 = *(int32x4_t *)((char *)v14 + 3 * v13);
  int32x4_t v19 = *(int32x4_t *)((char *)v14 + 4 * v13);
  int32x4_t v20 = *(int32x4_t *)((char *)v14 + 5 * v13);
  int32x4_t v21 = *(int32x4_t *)((char *)v14 + 6 * v13);
  int32x4_t v22 = *(int32x4_t *)((char *)v14 + 7 * v13);
  int64x2_t v23 = (int64x2_t)vtrn1q_s32(*v14, v16);
  int64x2_t v24 = (int64x2_t)vtrn2q_s32(*v14, v16);
  int64x2_t v25 = (int64x2_t)vtrn1q_s32(v17, v18);
  int64x2_t v26 = (int64x2_t)vtrn2q_s32(v17, v18);
  int64x2_t v27 = vzip1q_s64(v23, v25);
  int64x2_t v28 = vzip2q_s64(v23, v25);
  int64x2_t v29 = vzip1q_s64(v24, v26);
  int64x2_t v30 = vzip2q_s64(v24, v26);
  int64x2_t v31 = (int64x2_t)vtrn1q_s32(v19, v20);
  int64x2_t v32 = (int64x2_t)vtrn1q_s32(v21, v22);
  int64x2_t v127 = v27;
  v128[0] = vzip1q_s64(v31, v32);
  int8x16_t v33 = (int8x16_t)vld1q_dup_s16(v15);
  int v34 = *(unsigned __int8 *)(result + 660);
  int v35 = *(unsigned __int8 *)(result + 661);
  _X8 = v10 + 2 * (v9 * v8 + (a2 >> 3));
  int64x2_t v37 = (int64x2_t)vtrn2q_s32(v19, v20);
  int64x2_t v38 = (int64x2_t)vtrn2q_s32(v21, v22);
  v128[1] = v29;
  v128[2] = vzip1q_s64(v37, v38);
  v128[3] = v28;
  v128[4] = vzip2q_s64(v31, v32);
  v128[5] = v30;
  v128[6] = vzip2q_s64(v37, v38);
  _X11 = &v14->i8[8 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[9 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[10 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[11 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[12 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[13 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[14 * v13];
  __asm { PRFM            #0, [X11] }
  _X9 = (uint64_t)v14[v13].i64 - v13;
  __asm { PRFM            #0, [X9] }
  if (a3)
  {
    _X9 = (int16x8_t *)(_X8 - 2 * v9);
    int16x8_t v60 = *_X9;
    _X9 += 2;
    unsigned long long v61 = (unsigned __int128)vshrq_n_s16(v60, 2uLL);
    __asm { PRFM            #0, [X9] }
  }
  else
  {
    unsigned long long v61 = 0uLL;
  }
  if (a5 >= 8)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = 0;
    unsigned int v66 = v35 - 16;
    int8x16_t v67 = vdupq_n_s8(v34 - 16);
    int8x16_t v68 = vdupq_n_s8(v35 - 20);
    uint64_t v69 = (uint64_t)a2 >> 2;
    int8x16_t v70 = vdupq_n_s8(v66);
    unint64_t v71 = a5 >> 3;
    uint64_t v72 = 2 * v9;
    uint64_t v73 = 2 * v11;
    uint64_t v74 = v12 + v11 * v8;
    uint64_t v75 = v12 + v11 + v11 * v8;
    uint64_t result = 4 * v9;
    uint64_t v76 = 480;
    long long v77 = xmmword_1D0D7F580;
    long long v78 = xmmword_1D0D7F590;
    long long v79 = xmmword_1D0D7F5A0;
    long long v80 = xmmword_1D0D7F5B0;
    long long v81 = xmmword_1D0D7F5C0;
    long long v82 = xmmword_1D0D7F5D0;
    uint64_t v83 = 832;
    uint64_t v84 = 560;
    v85.i64[0] = 0x2323232323232323;
    v85.i64[1] = 0x2323232323232323;
    v86.i64[0] = 0x101010101010101;
    v86.i64[1] = 0x101010101010101;
    v87.i64[0] = 0x3333333333333333;
    v87.i64[1] = 0x3333333333333333;
    do
    {
      unsigned long long v88 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)_X8, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      unsigned long long v89 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      _X19 = _X8 + v72;
      *(int8x8_t *)v6.i8 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v88);
      int16x8_t v91 = *(int16x8_t *)(_X8 + v72 + 2);
      unsigned long long v61 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v72), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      unsigned long long v92 = *(_OWORD *)&vshrq_n_s16(v91, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      *(int8x8_t *)v91.i8 = vraddhn_s16((int16x8_t)v88, (int16x8_t)v61);
      int8x16_t v93 = vzip1q_s8(v6, v6);
      int8x16_t v94 = vraddhn_high_s16(*(int8x8_t *)v6.i8, (int16x8_t)v88, (int16x8_t)v61);
      *(int8x8_t *)&unsigned long long v88 = vraddhn_s16((int16x8_t)v88, (int16x8_t)v89);
      *(int8x8_t *)&unsigned long long v89 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v92);
      __asm { PRFM            #0, [X8,#0x20] }
      int8x16_t v96 = vzip1q_s8((int8x16_t)v88, (int8x16_t)v89);
      __asm { PRFM            #0, [X19,#0x20] }
      *(int8x16_t *)(a6 + v83) = vqtbl3q_s8(*(int8x16x3_t *)&v79, vminq_s8(vaddq_s8(v94, v67), v85));
      int8x16_t v98 = vqtbl3q_s8(*(int8x16x3_t *)&v79, vminq_s8(vaddq_s8(v96, v67), v85));
      *(_WORD *)(a6 + v65 + 768) = v98.i16[0];
      *(_WORD *)(a6 + v65 + 776) = v98.i16[1];
      *(_WORD *)(a6 + v65 + 784) = v98.i16[2];
      *(_WORD *)(a6 + v65 + 792) = v98.i16[3];
      *(_WORD *)(a6 + v65 + 800) = v98.i16[4];
      *(_WORD *)(a6 + v65 + 808) = v98.i16[5];
      *(_WORD *)(a6 + v65 + 816) = v98.i16[6];
      *(_WORD *)(a6 + v65 + 824) = v98.i16[7];
      int8x16_t v99 = vaddq_s8(v94, v68);
      _X7 = v74 + v69 + 16;
      int8x16_t v101 = *(int8x16_t *)(v74 + v69);
      _X19 = v75 + v69 + 16;
      int8x16_t v103 = *(int8x16_t *)(v75 + v69);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X19]
      }
      int8x16_t v106 = (int8x16_t *)(a6 + v63 * 16);
      int8x16_t v107 = *(int8x16_t *)((char *)&v127 + v63 * 16);
      int8x16_t v108 = (int8x16_t)v128[v63];
      int8x16_t v109 = vaddq_s8(v96, v68);
      v106[8] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vaddq_s8(v101, v101), vzip1q_s8(v99, v99)), v85)), vceqzq_s8(v101));
      v106[9] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vaddq_s8(v103, v103), vzip2q_s8(v99, v99)), v85)), vceqzq_s8(v103));
      int8x16_t v110 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vaddq_s8(v107, v107), vzip1q_s8(v109, v109)), v85)), vceqzq_s8(v107));
      int16x8_t v111 = (_DWORD *)(a6 + v64);
      int8x16_t v112 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vaddq_s8(v108, v108), vzip2q_s8(v109, v109)), v85)), vceqzq_s8(v108));
      *(_DWORD *)(a6 + v64 + 16) = v110.i32[1];
      *(_DWORD *)(a6 + v64 + 32) = v110.i32[2];
      *int16x8_t v111 = v110.i32[0];
      int16x8_t v113 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vzip2q_s8(v96, v96), v33), v87), v70), v85));
      *(_DWORD *)(a6 + v64 + 48) = v110.i32[3];
      int8x16_t v114 = (int8x16_t)vcgtq_u8((uint8x16_t)v108, v86);
      v111[16] = v112.i32[0];
      int8x16_t v115 = vandq_s8((int8x16_t)vzip1q_s16(v113, v113), (int8x16_t)vmovl_s8(*(int8x8_t *)v114.i8));
      int8x16_t v116 = vandq_s8((int8x16_t)vzip2q_s16(v113, v113), (int8x16_t)vmovl_high_s8(v114));
      uint8x8_t v117 = (void *)(a6 + v76);
      *(_DWORD *)(a6 + v64 + 80) = v112.i32[1];
      *(_DWORD *)(a6 + v64 + 96) = v112.i32[2];
      int16x8_t v118 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vzip1q_s8(v96, v96), v33), v87), v70), v85));
      *(_DWORD *)(a6 + v64 + 112) = v112.i32[3];
      int8x16_t v119 = (int8x16_t)vcgtq_u8((uint8x16_t)v107, v86);
      int8x16_t v120 = vandq_s8((int8x16_t)vzip1q_s16(v118, v118), (int8x16_t)vmovl_s8(*(int8x8_t *)v119.i8));
      *(void *)(a6 + v76 - 64) = v115.i64[1];
      int8x16_t v121 = vandq_s8((int8x16_t)vzip2q_s16(v118, v118), (int8x16_t)vmovl_high_s8(v119));
      *(v117 - 12) = v115.i64[0];
      int16x8_t v122 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(v93, v33), v87), v70), v85));
      *(v117 - 4) = v116.i64[0];
      int8x16_t v123 = (int8x16_t)vcgtq_u8((uint8x16_t)v101, v86);
      int8x16_t v6 = vandq_s8((int8x16_t)vzip1q_s16(v122, v122), (int8x16_t)vmovl_s8(*(int8x8_t *)v123.i8));
      *(void *)(a6 + v76 - 192) = v120.i64[1];
      int8x8_t v124 = (int8x16_t *)(a6 + v84);
      *uint8x8_t v117 = v116.i64[1];
      int16x8_t v125 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v82, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vzip1q_s8((int8x16_t)v91, (int8x16_t)v91), v33), v87), v70), v85));
      *(v117 - 28) = v120.i64[0];
      int8x16_t v126 = (int8x16_t)vcgtq_u8((uint8x16_t)v103, v86);
      *(v117 - 20) = v121.i64[0];
      v65 += 2;
      v74 += v73;
      v75 += v73;
      *(void *)(a6 + v76 - 128) = v121.i64[1];
      _X8 += result;
      v76 += 8;
      v83 += 16;
      v64 += 4;
      v124[-3] = v6;
      v124[-2] = vandq_s8((int8x16_t)vzip2q_s16(v122, v122), (int8x16_t)vmovl_high_s8(v123));
      v124[-1] = vandq_s8((int8x16_t)vzip1q_s16(v125, v125), (int8x16_t)vmovl_s8(*(int8x8_t *)v126.i8));
      *int8x8_t v124 = vandq_s8((int8x16_t)vzip2q_s16(v125, v125), (int8x16_t)vmovl_high_s8(v126));
      v84 += 64;
      v63 += 2;
    }
    while (v65 < v71);
  }
  return result;
}

uint64_t sub_1D0D5E730(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void **)(result + 8);
  uint64_t v8 = (uint64_t)a3 >> 3;
  uint64_t v9 = v7[96];
  uint64_t v10 = v7[97];
  uint64_t v11 = v7[116];
  uint64_t v12 = v7[118];
  uint64_t v13 = v7[117];
  int8x16_t v14 = (int32x4_t *)(v7[121] + v13 * ((uint64_t)(a2 + 8) >> 3) + (a3 >> 2));
  int8x16_t v15 = (const __int16 *)(*(void *)(result + 32) + 14);
  int32x4_t v16 = *(int32x4_t *)((char *)v14 + v13);
  int32x4_t v17 = *(int32x4_t *)((char *)v14 + 2 * v13);
  int32x4_t v18 = *(int32x4_t *)((char *)v14 + 3 * v13);
  int32x4_t v19 = *(int32x4_t *)((char *)v14 + 4 * v13);
  int32x4_t v20 = *(int32x4_t *)((char *)v14 + 5 * v13);
  int32x4_t v21 = *(int32x4_t *)((char *)v14 + 6 * v13);
  int32x4_t v22 = *(int32x4_t *)((char *)v14 + 7 * v13);
  int64x2_t v23 = (int64x2_t)vtrn1q_s32(*v14, v16);
  int64x2_t v24 = (int64x2_t)vtrn2q_s32(*v14, v16);
  int64x2_t v25 = (int64x2_t)vtrn1q_s32(v17, v18);
  int64x2_t v26 = (int64x2_t)vtrn2q_s32(v17, v18);
  int64x2_t v27 = vzip1q_s64(v23, v25);
  int64x2_t v28 = vzip2q_s64(v23, v25);
  int64x2_t v29 = vzip1q_s64(v24, v26);
  int64x2_t v30 = vzip2q_s64(v24, v26);
  int64x2_t v31 = (int64x2_t)vtrn1q_s32(v19, v20);
  int64x2_t v32 = (int64x2_t)vtrn1q_s32(v21, v22);
  int64x2_t v125 = v27;
  v126[0] = vzip1q_s64(v31, v32);
  int8x16_t v33 = (int8x16_t)vld1q_dup_s16(v15);
  int v34 = *(unsigned __int8 *)(result + 660);
  int v35 = *(unsigned __int8 *)(result + 661);
  _X8 = v10 + 2 * (v9 * v8 + (a2 >> 3));
  int64x2_t v37 = (int64x2_t)vtrn2q_s32(v19, v20);
  int64x2_t v38 = (int64x2_t)vtrn2q_s32(v21, v22);
  v126[1] = v29;
  v126[2] = vzip1q_s64(v37, v38);
  v126[3] = v28;
  v126[4] = vzip2q_s64(v31, v32);
  v126[5] = v30;
  v126[6] = vzip2q_s64(v37, v38);
  _X11 = &v14->i8[8 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[9 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[10 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[11 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[12 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[13 * v13];
  __asm { PRFM            #0, [X11] }
  _X11 = &v14->i8[14 * v13];
  __asm { PRFM            #0, [X11] }
  _X9 = (uint64_t)v14[v13].i64 - v13;
  __asm { PRFM            #0, [X9] }
  if (a3)
  {
    _X9 = (int16x8_t *)(_X8 - 2 * v9);
    int16x8_t v60 = *_X9;
    _X9 += 2;
    unsigned long long v61 = (unsigned __int128)vshrq_n_s16(v60, 2uLL);
    __asm { PRFM            #0, [X9] }
  }
  else
  {
    unsigned long long v61 = 0uLL;
  }
  if (a5 >= 8)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = 0;
    int8x16_t v66 = vdupq_n_s8(v34 - 16);
    int8x16_t v67 = vdupq_n_s8(v35 - 20);
    int8x16_t v68 = vdupq_n_s8(v35 - 16);
    uint64_t v69 = (uint64_t)a2 >> 2;
    unint64_t v70 = a5 >> 3;
    uint64_t v71 = 2 * v9;
    uint64_t v72 = 2 * v11;
    uint64_t v73 = v12 + v11 * v8;
    uint64_t v74 = v12 + v11 + v11 * v8;
    uint64_t result = 4 * v9;
    uint64_t v75 = 256;
    long long v76 = xmmword_1D0D7F580;
    long long v77 = xmmword_1D0D7F590;
    long long v78 = xmmword_1D0D7F5A0;
    long long v79 = xmmword_1D0D7F5B0;
    long long v80 = xmmword_1D0D7F5C0;
    long long v81 = xmmword_1D0D7F5D0;
    uint64_t v82 = 832;
    uint64_t v83 = 560;
    v84.i64[0] = 0x2323232323232323;
    v84.i64[1] = 0x2323232323232323;
    v85.i64[0] = 0x101010101010101;
    v85.i64[1] = 0x101010101010101;
    v86.i64[0] = 0x3333333333333333;
    v86.i64[1] = 0x3333333333333333;
    do
    {
      unsigned long long v87 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)_X8, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      _X19 = _X8 + v71;
      unsigned long long v89 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      *(int8x8_t *)v6.i8 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v87);
      unsigned long long v61 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v71), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      unsigned long long v90 = *(_OWORD *)&vshrq_n_s16(*(int16x8_t *)(_X8 + v71 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      int8x16_t v91 = vzip1q_s8(v6, v6);
      int8x16_t v92 = vraddhn_high_s16(*(int8x8_t *)v6.i8, (int16x8_t)v87, (int16x8_t)v61);
      *(int8x8_t *)&unsigned long long v89 = vraddhn_s16((int16x8_t)v87, (int16x8_t)v89);
      *(int8x8_t *)&unsigned long long v90 = vraddhn_s16((int16x8_t)v61, (int16x8_t)v90);
      __asm { PRFM            #0, [X8,#0x20] }
      *(int8x8_t *)&unsigned long long v87 = vraddhn_s16((int16x8_t)v87, (int16x8_t)v61);
      __asm { PRFM            #0, [X19,#0x20] }
      *(int8x16_t *)(a6 + v82) = vqtbl3q_s8(*(int8x16x3_t *)&v78, vminq_s8(vaddq_s8(v92, v66), v84));
      int8x16_t v95 = vzip1q_s8((int8x16_t)v89, (int8x16_t)v90);
      int8x16_t v96 = vqtbl3q_s8(*(int8x16x3_t *)&v78, vminq_s8(vaddq_s8(v95, v66), v84));
      *(_WORD *)(a6 + v65 + 768) = v96.i16[0];
      *(_WORD *)(a6 + v65 + 776) = v96.i16[1];
      *(_WORD *)(a6 + v65 + 784) = v96.i16[2];
      *(_WORD *)(a6 + v65 + 792) = v96.i16[3];
      *(_WORD *)(a6 + v65 + 800) = v96.i16[4];
      *(_WORD *)(a6 + v65 + 808) = v96.i16[5];
      *(_WORD *)(a6 + v65 + 816) = v96.i16[6];
      *(_WORD *)(a6 + v65 + 824) = v96.i16[7];
      int8x16_t v97 = vaddq_s8(v92, v67);
      _X7 = v73 + v69 + 16;
      int8x16_t v99 = *(int8x16_t *)(v73 + v69);
      _X19 = v74 + v69 + 16;
      int8x16_t v101 = *(int8x16_t *)(v74 + v69);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X19]
      }
      int16x8_t v104 = (int8x16_t *)(a6 + v63 * 16);
      int32x4_t v105 = *(int32x4_t *)((char *)&v125 + v63 * 16);
      int32x4_t v106 = (int32x4_t)v126[v63];
      int8x16_t v107 = vaddq_s8(v95, v67);
      v104[8] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vaddq_s8(v99, v99), vzip1q_s8(v97, v97)), v84)), vceqzq_s8(v99));
      v104[9] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vaddq_s8(v101, v101), vzip2q_s8(v97, v97)), v84)), vceqzq_s8(v101));
      int8x16_t v108 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v105, (int8x16_t)v105), vzip1q_s8(v107, v107)), v84)), vceqzq_s8((int8x16_t)v105));
      int8x16_t v109 = (_DWORD *)(a6 + v64);
      int8x16_t v110 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v106, (int8x16_t)v106), vzip2q_s8(v107, v107)), v84)), vceqzq_s8((int8x16_t)v106));
      *(_DWORD *)(a6 + v64 + 16) = v108.i32[1];
      *int8x16_t v109 = v108.i32[0];
      int16x8_t v111 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vqtbl1q_s8(v95, (int8x16_t)xmmword_1D0D7F5E0), v33), v86), v68), v84));
      *(_DWORD *)(a6 + v64 + 32) = v108.i32[2];
      int8x16_t v112 = (int8x16_t)vcgtq_u8((uint8x16_t)vuzp2q_s32(v105, v106), v85);
      *(_DWORD *)(a6 + v64 + 48) = v108.i32[3];
      int8x16_t v113 = (int8x16_t)vmovl_high_s8(v112);
      int8x16_t v114 = vandq_s8((int8x16_t)vzip1q_s16(v111, v111), (int8x16_t)vmovl_s8(*(int8x8_t *)v112.i8));
      int8x16_t v115 = vandq_s8((int8x16_t)vzip2q_s16(v111, v111), v113);
      int8x16_t v116 = (void *)(a6 + v75);
      unsigned char v109[16] = v110.i32[0];
      *(_DWORD *)(a6 + v64 + 80) = v110.i32[1];
      int16x8_t v117 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(v91, v33), v86), v68), v84));
      int8x16_t v118 = (int8x16_t)vzip1q_s16(v117, v117);
      *(_DWORD *)(a6 + v64 + 96) = v110.i32[2];
      int8x16_t v119 = (int8x16_t)vcgtq_u8((uint8x16_t)v99, v85);
      int8x16_t v120 = (int8x16_t)vmovl_s8(*(int8x8_t *)v119.i8);
      *(_DWORD *)(a6 + v64 + 112) = v110.i32[3];
      int8x16_t v121 = vandq_s8((int8x16_t)vzip2q_s16(v117, v117), (int8x16_t)vmovl_high_s8(v119));
      int16x8_t v122 = (int8x16_t *)(a6 + v83);
      *(void *)(a6 + v75 + 32) = v114.i64[1];
      int16x8_t v123 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)&v81, vminq_s8(vaddq_s8(vminq_s8(vaddq_s8(vzip1q_s8((int8x16_t)v87, (int8x16_t)v87), v33), v86), v68), v84));
      void *v116 = v114.i64[0];
      int8x16_t v124 = (int8x16_t)vcgtq_u8((uint8x16_t)v101, v85);
      int8x16_t v6 = vandq_s8((int8x16_t)vzip1q_s16(v123, v123), (int8x16_t)vmovl_s8(*(int8x8_t *)v124.i8));
      v116[8] = v115.i64[0];
      v65 += 2;
      v73 += v72;
      v74 += v72;
      *(void *)(a6 + v75 + 96) = v115.i64[1];
      _X8 += result;
      v75 += 8;
      v82 += 16;
      v64 += 4;
      v122[-3] = vandq_s8(v118, v120);
      v122[-2] = v121;
      v122[-1] = v6;
      *int16x8_t v122 = vandq_s8((int8x16_t)vzip2q_s16(v123, v123), (int8x16_t)vmovl_high_s8(v124));
      v83 += 64;
      v63 += 2;
    }
    while (v65 < v70);
  }
  return result;
}

uint64_t sub_1D0D5EC2C(uint64_t result, uint64_t a2, unsigned int *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 3 * a2;
    uint64_t v7 = 4 * a2;
    uint64_t v8 = 6 * a2;
    uint64_t v9 = 7 * a2;
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    uint64_t v11 = 5 * a2;
    do
    {
      if (*a3)
      {
        v12.i64[0] = *(void *)(result - 4);
        v13.i64[0] = *(void *)(result + a2 - 4);
        v14.i64[0] = *(void *)(result + v5 - 4);
        v15.i64[0] = *(void *)(result + v6 - 4);
        v12.i64[1] = *(void *)(result + v7 - 4);
        v13.i64[1] = *(void *)(result + v11 - 4);
        v14.i64[1] = *(void *)(result + v8 - 4);
        v15.i64[1] = *(void *)(result + v9 - 4);
        int32x4_t v16 = (int32x4_t)vtrn1q_s16(v12, v13);
        int32x4_t v17 = (int32x4_t)vtrn2q_s16(v12, v13);
        int32x4_t v18 = (int32x4_t)vtrn1q_s16(v14, v15);
        int32x4_t v19 = (int32x4_t)vtrn2q_s16(v14, v15);
        uint8x16_t v20 = (uint8x16_t)vtrn1q_s32(v16, v18);
        int8x16_t v21 = (int8x16_t)vtrn2q_s32(v16, v18);
        int8x16_t v22 = (int8x16_t)vtrn1q_s32(v17, v19);
        uint8x16_t v23 = (uint8x16_t)vtrn2q_s32(v17, v19);
        int8x16_t v24 = vqtbl1q_s8((int8x16_t)vdupq_n_s32(*a3), (int8x16_t)xmmword_1D0D7F380);
        int8x16_t v25 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8((uint8x16_t)v21, (uint8x16_t)v22), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(v20, v23), 1uLL), vandq_s8(veorq_s8(v21, v22), v10))), v24), vnegq_s8(v24));
        int16x8_t v26 = (int16x8_t)vsqaddq_u8((uint8x16_t)v22, v25);
        int16x8_t v27 = (int16x8_t)vsqaddq_u8((uint8x16_t)v21, vnegq_s8(v25));
        int16x8_t v28 = vzip1q_s16(v26, v27);
        *(_DWORD *)(result - 2) = v28.i32[0];
        *(_DWORD *)(result + a2 - 2) = v28.i32[1];
        *(_DWORD *)(result + v5 - 2) = v28.i32[2];
        *(_DWORD *)(result + v6 - 2) = v28.i32[3];
        int16x8_t v29 = vzip2q_s16(v26, v27);
        *(_DWORD *)(result + v7 - 2) = v29.i32[0];
        *(_DWORD *)(result + v11 - 2) = v29.i32[1];
        *(_DWORD *)(result + v8 - 2) = v29.i32[2];
        *(_DWORD *)(result + v9 - 2) = v29.i32[3];
      }
      v4 += 8;
      result += 8 * a2;
      ++a3;
    }
    while (v4 < a4);
  }
  return result;
}

uint8x16_t *sub_1D0D5ED70(uint8x16_t *result, uint64_t a2, unsigned int *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    v5.i64[0] = 0x101010101010101;
    v5.i64[1] = 0x101010101010101;
    do
    {
      if (*a3)
      {
        int8x16_t v6 = *(int8x16_t *)((char *)result - a2);
        int8x16_t v7 = vqtbl1q_s8((int8x16_t)vdupq_n_s32(*a3), (int8x16_t)xmmword_1D0D7F380);
        int8x16_t v8 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8(*result, (uint8x16_t)v6), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(*(uint8x16_t *)((char *)result - 2 * a2), *(uint8x16_t *)((char *)result + a2)), 1uLL), vandq_s8(veorq_s8(*(int8x16_t *)result, v6), v5))), v7), vnegq_s8(v7));
        uint8x16_t v9 = vsqaddq_u8(*result, vnegq_s8(v8));
        *(uint8x16_t *)((char *)result - a2) = vsqaddq_u8((uint8x16_t)v6, v8);
        *uint64_t result = v9;
      }
      v4 += 8;
      ++result;
      ++a3;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5EE04(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xFF00FF00FF00FFLL;
    v8.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      if (*(_WORD *)a3)
      {
        int32x4_t v9 = *(int32x4_t *)(result - 8);
        int32x4_t v10 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        int64x2_t v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        int64x2_t v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        int64x2_t v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        int16x8_t v17 = (int16x8_t)vzip1q_s64(v13, v15);
        int16x8_t v18 = (int16x8_t)vzip2q_s64(v13, v15);
        int16x8_t v19 = (int16x8_t)vzip1q_s64(v14, v16);
        int8x16_t v20 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v21 = (int16x8_t)vzip2q_s64(v14, v16);
        int16x8_t v22 = (int16x8_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_1D0D7F600);
        int16x8_t v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        int16x8_t v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v23);
        int16x8_t v25 = vsubq_s16(v18, v23);
        int32x4_t v26 = (int32x4_t)vminq_s16(v24, v8);
        int32x4_t v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        int32x4_t v28 = vzip1q_s32(v26, v27);
        int32x4_t v29 = vzip2q_s32(v26, v27);
        *(void *)(result - 4) = v28.i64[0];
        *(void *)(result + v5 - 4) = v28.i64[1];
        *(void *)(result + v6 - 4) = v29.i64[0];
        *(void *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5EEE8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xFF00FF00FF00FFLL;
    v8.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      unsigned int v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        int32x4_t v10 = *(int32x4_t *)(result - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v13 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        int64x2_t v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        int64x2_t v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        int64x2_t v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        int16x8_t v18 = (int16x8_t)vzip1q_s64(v14, v16);
        int16x8_t v19 = (int16x8_t)vzip2q_s64(v14, v16);
        int16x8_t v20 = (int16x8_t)vzip1q_s64(v15, v17);
        int16x8_t v21 = (int16x8_t)vzip2q_s64(v15, v17);
        int16x8_t v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1D0D7F610);
        int16x8_t v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        int16x8_t v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v23);
        int16x8_t v25 = vsubq_s16(v19, v23);
        int32x4_t v26 = (int32x4_t)vminq_s16(v24, v8);
        int32x4_t v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        int32x4_t v28 = vzip1q_s32(v26, v27);
        int32x4_t v29 = vzip2q_s32(v26, v27);
        *(void *)(result - 4) = v28.i64[0];
        *(void *)(result + v5 - 4) = v28.i64[1];
        *(void *)(result + v6 - 4) = v29.i64[0];
        *(void *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5EFC8(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    v5.i64[0] = 0xFF00FF00FF00FFLL;
    v5.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      if (*(_WORD *)a3)
      {
        int16x8_t v6 = *(int16x8_t *)((char *)result - 2 * a2);
        int8x16_t v7 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v8 = (int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F600);
        int16x8_t v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        int16x8_t v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v9);
        int16x8_t v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *uint64_t result = v11;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5F060(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    v5.i64[0] = 0xFF00FF00FF00FFLL;
    v5.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      unsigned int v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        int16x8_t v7 = *(int16x8_t *)((char *)result - 2 * a2);
        int16x8_t v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1D0D7F610);
        int16x8_t v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        int16x8_t v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v9);
        int16x8_t v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *uint64_t result = v11;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5F0F4(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xFE00FE00FE00FE00;
    v8.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      if (*(_WORD *)a3)
      {
        int32x4_t v9 = *(int32x4_t *)(result - 8);
        int32x4_t v10 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        int64x2_t v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        int64x2_t v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        int64x2_t v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        int16x8_t v17 = (int16x8_t)vzip1q_s64(v13, v15);
        int16x8_t v18 = (int16x8_t)vzip2q_s64(v13, v15);
        int16x8_t v19 = (int16x8_t)vzip1q_s64(v14, v16);
        int16x8_t v20 = (int16x8_t)vzip2q_s64(v14, v16);
        int8x16_t v21 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v22 = (int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1D0D7F600);
        int16x8_t v23 = vaddq_s16(v22, v22);
        int16x8_t v24 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v20), 2uLL), 1uLL), v23), vnegq_s16(v23));
        int16x8_t v25 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v24);
        int16x8_t v26 = vsubq_s16(v18, v24);
        int32x4_t v27 = (int32x4_t)vminq_s16(v25, v8);
        int32x4_t v28 = (int32x4_t)vminq_s16(vmaxq_s16(v26, (int16x8_t)0), v8);
        int32x4_t v29 = vzip1q_s32(v27, v28);
        int32x4_t v30 = vzip2q_s32(v27, v28);
        *(void *)(result - 4) = v29.i64[0];
        *(void *)(result + v5 - 4) = v29.i64[1];
        *(void *)(result + v6 - 4) = v30.i64[0];
        *(void *)(result + v7 - 4) = v30.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5F1DC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xFE00FE00FE00FE00;
    v8.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      unsigned int v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        int32x4_t v10 = *(int32x4_t *)(result - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v13 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        int64x2_t v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        int64x2_t v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        int64x2_t v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        int16x8_t v18 = (int16x8_t)vzip1q_s64(v14, v16);
        int16x8_t v19 = (int16x8_t)vzip2q_s64(v14, v16);
        int16x8_t v20 = (int16x8_t)vzip1q_s64(v15, v17);
        int16x8_t v21 = (int16x8_t)vzip2q_s64(v15, v17);
        int16x8_t v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1D0D7F610);
        int16x8_t v23 = vaddq_s16(v22, v22);
        int16x8_t v24 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v23), vnegq_s16(v23));
        int16x8_t v25 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v24);
        int16x8_t v26 = vsubq_s16(v19, v24);
        int32x4_t v27 = (int32x4_t)vminq_s16(v25, v8);
        int32x4_t v28 = (int32x4_t)vminq_s16(vmaxq_s16(v26, (int16x8_t)0), v8);
        int32x4_t v29 = vzip1q_s32(v27, v28);
        int32x4_t v30 = vzip2q_s32(v27, v28);
        *(void *)(result - 4) = v29.i64[0];
        *(void *)(result + v5 - 4) = v29.i64[1];
        *(void *)(result + v6 - 4) = v30.i64[0];
        *(void *)(result + v7 - 4) = v30.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5F2C0(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    v5.i64[0] = 0xFE00FE00FE00FE00;
    v5.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      if (*(_WORD *)a3)
      {
        int16x8_t v6 = *(int16x8_t *)((char *)result - 2 * a2);
        int8x16_t v7 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v8 = (int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F600);
        int16x8_t v9 = vaddq_s16(v8, v8);
        int16x8_t v10 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v9), vnegq_s16(v9));
        int16x8_t v11 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v10);
        int16x8_t v12 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v10), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v11, v5);
        *uint64_t result = v12;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5F35C(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    v5.i64[0] = 0xFE00FE00FE00FE00;
    v5.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      unsigned int v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        int16x8_t v7 = *(int16x8_t *)((char *)result - 2 * a2);
        int16x8_t v8 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1D0D7F610);
        int16x8_t v9 = vaddq_s16(v8, v8);
        int16x8_t v10 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v9), vnegq_s16(v9));
        int16x8_t v11 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v10);
        int16x8_t v12 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v10), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v11, v5);
        *uint64_t result = v12;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5F3F4(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xFC00FC00FC00FC00;
    v8.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      if (*(_WORD *)a3)
      {
        int32x4_t v9 = *(int32x4_t *)(result - 8);
        int32x4_t v10 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        int64x2_t v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        int64x2_t v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        int64x2_t v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        int16x8_t v17 = (int16x8_t)vzip1q_s64(v13, v15);
        int16x8_t v18 = (int16x8_t)vzip2q_s64(v13, v15);
        int16x8_t v19 = (int16x8_t)vzip1q_s64(v14, v16);
        int16x8_t v20 = (int16x8_t)vzip2q_s64(v14, v16);
        int8x16_t v21 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1D0D7F600), 2uLL);
        int16x8_t v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v20), 2uLL), 1uLL), v22), vnegq_s16(v22));
        int16x8_t v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v23);
        int16x8_t v25 = vsubq_s16(v18, v23);
        int32x4_t v26 = (int32x4_t)vminq_s16(v24, v8);
        int32x4_t v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        int32x4_t v28 = vzip1q_s32(v26, v27);
        int32x4_t v29 = vzip2q_s32(v26, v27);
        *(void *)(result - 4) = v28.i64[0];
        *(void *)(result + v5 - 4) = v28.i64[1];
        *(void *)(result + v6 - 4) = v29.i64[0];
        *(void *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5F4DC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xFC00FC00FC00FC00;
    v8.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      unsigned int v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        int32x4_t v10 = *(int32x4_t *)(result - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v13 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        int64x2_t v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        int64x2_t v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        int64x2_t v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        int16x8_t v18 = (int16x8_t)vzip1q_s64(v14, v16);
        int16x8_t v19 = (int16x8_t)vzip2q_s64(v14, v16);
        int16x8_t v20 = (int16x8_t)vzip1q_s64(v15, v17);
        int16x8_t v21 = (int16x8_t)vzip2q_s64(v15, v17);
        int16x8_t v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1D0D7F610), 2uLL);
        int16x8_t v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        int16x8_t v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v23);
        int16x8_t v25 = vsubq_s16(v19, v23);
        int32x4_t v26 = (int32x4_t)vminq_s16(v24, v8);
        int32x4_t v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        int32x4_t v28 = vzip1q_s32(v26, v27);
        int32x4_t v29 = vzip2q_s32(v26, v27);
        *(void *)(result - 4) = v28.i64[0];
        *(void *)(result + v5 - 4) = v28.i64[1];
        *(void *)(result + v6 - 4) = v29.i64[0];
        *(void *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5F5C0(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    v5.i64[0] = 0xFC00FC00FC00FC00;
    v5.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      if (*(_WORD *)a3)
      {
        int16x8_t v6 = *(int16x8_t *)((char *)result - 2 * a2);
        int8x16_t v7 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F600), 2uLL);
        int16x8_t v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        int16x8_t v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v9);
        int16x8_t v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *uint64_t result = v11;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5F65C(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    v5.i64[0] = 0xFC00FC00FC00FC00;
    v5.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      unsigned int v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        int16x8_t v7 = *(int16x8_t *)((char *)result - 2 * a2);
        int16x8_t v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1D0D7F610), 2uLL);
        int16x8_t v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        int16x8_t v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v9);
        int16x8_t v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *uint64_t result = v11;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5F6F4(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xF800F800F800F800;
    v8.i64[1] = 0xF800F800F800F800;
    do
    {
      if (*(_WORD *)a3)
      {
        int32x4_t v9 = *(int32x4_t *)(result - 8);
        int32x4_t v10 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        int64x2_t v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        int64x2_t v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        int64x2_t v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        int16x8_t v17 = (int16x8_t)vzip1q_s64(v13, v15);
        int16x8_t v18 = (int16x8_t)vzip2q_s64(v13, v15);
        int16x8_t v19 = (int16x8_t)vzip1q_s64(v14, v16);
        int16x8_t v20 = (int16x8_t)vzip2q_s64(v14, v16);
        int8x16_t v21 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1D0D7F600), 3uLL);
        int16x8_t v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v20), 2uLL), 1uLL), v22), vnegq_s16(v22));
        int16x8_t v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v23);
        int16x8_t v25 = vsubq_s16(v18, v23);
        int32x4_t v26 = (int32x4_t)vminq_s16(v24, v8);
        int32x4_t v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        int32x4_t v28 = vzip1q_s32(v26, v27);
        int32x4_t v29 = vzip2q_s32(v26, v27);
        *(void *)(result - 4) = v28.i64[0];
        *(void *)(result + v5 - 4) = v28.i64[1];
        *(void *)(result + v6 - 4) = v29.i64[0];
        *(void *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5F7DC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xF800F800F800F800;
    v8.i64[1] = 0xF800F800F800F800;
    do
    {
      unsigned int v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        int32x4_t v10 = *(int32x4_t *)(result - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v13 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        int64x2_t v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        int64x2_t v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        int64x2_t v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        int16x8_t v18 = (int16x8_t)vzip1q_s64(v14, v16);
        int16x8_t v19 = (int16x8_t)vzip2q_s64(v14, v16);
        int16x8_t v20 = (int16x8_t)vzip1q_s64(v15, v17);
        int16x8_t v21 = (int16x8_t)vzip2q_s64(v15, v17);
        int16x8_t v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1D0D7F610), 3uLL);
        int16x8_t v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        int16x8_t v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v23);
        int16x8_t v25 = vsubq_s16(v19, v23);
        int32x4_t v26 = (int32x4_t)vminq_s16(v24, v8);
        int32x4_t v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        int32x4_t v28 = vzip1q_s32(v26, v27);
        int32x4_t v29 = vzip2q_s32(v26, v27);
        *(void *)(result - 4) = v28.i64[0];
        *(void *)(result + v5 - 4) = v28.i64[1];
        *(void *)(result + v6 - 4) = v29.i64[0];
        *(void *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5F8C0(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    v5.i64[0] = 0xF800F800F800F800;
    v5.i64[1] = 0xF800F800F800F800;
    do
    {
      if (*(_WORD *)a3)
      {
        int16x8_t v6 = *(int16x8_t *)((char *)result - 2 * a2);
        int8x16_t v7 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F600), 3uLL);
        int16x8_t v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        int16x8_t v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v9);
        int16x8_t v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *uint64_t result = v11;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5F95C(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    v5.i64[0] = 0xF800F800F800F800;
    v5.i64[1] = 0xF800F800F800F800;
    do
    {
      unsigned int v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        int16x8_t v7 = *(int16x8_t *)((char *)result - 2 * a2);
        int16x8_t v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1D0D7F610), 3uLL);
        int16x8_t v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        int16x8_t v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v9);
        int16x8_t v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *uint64_t result = v11;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5F9F4(uint64_t result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xF000F000F000F000;
    v8.i64[1] = 0xF000F000F000F000;
    do
    {
      if (*(_WORD *)a3)
      {
        int32x4_t v9 = *(int32x4_t *)(result - 8);
        int32x4_t v10 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v13 = (int64x2_t)vtrn1q_s32(v9, v10);
        int64x2_t v14 = (int64x2_t)vtrn2q_s32(v9, v10);
        int64x2_t v15 = (int64x2_t)vtrn1q_s32(v11, v12);
        int64x2_t v16 = (int64x2_t)vtrn2q_s32(v11, v12);
        int16x8_t v17 = (int16x8_t)vzip1q_s64(v13, v15);
        int16x8_t v18 = (int16x8_t)vzip2q_s64(v13, v15);
        int16x8_t v19 = (int16x8_t)vzip1q_s64(v14, v16);
        int16x8_t v20 = (int16x8_t)vzip2q_s64(v14, v16);
        int8x16_t v21 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v21, (int8x16_t)xmmword_1D0D7F600), 4uLL);
        int16x8_t v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v18, v19), vsubq_s16(v17, v20), 2uLL), 1uLL), v22), vnegq_s16(v22));
        int16x8_t v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v19, v23);
        int16x8_t v25 = vsubq_s16(v18, v23);
        int32x4_t v26 = (int32x4_t)vminq_s16(v24, v8);
        int32x4_t v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        int32x4_t v28 = vzip1q_s32(v26, v27);
        int32x4_t v29 = vzip2q_s32(v26, v27);
        *(void *)(result - 4) = v28.i64[0];
        *(void *)(result + v5 - 4) = v28.i64[1];
        *(void *)(result + v6 - 4) = v29.i64[0];
        *(void *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      a3 = (const float *)((char *)a3 + 2);
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5FADC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * a2;
    uint64_t v6 = 4 * a2;
    uint64_t v7 = 6 * a2;
    v8.i64[0] = 0xF000F000F000F000;
    v8.i64[1] = 0xF000F000F000F000;
    do
    {
      unsigned int v9 = *(_DWORD *)(a3 + v4);
      if (v9)
      {
        int32x4_t v10 = *(int32x4_t *)(result - 8);
        int32x4_t v11 = *(int32x4_t *)(result + v5 - 8);
        int32x4_t v12 = *(int32x4_t *)(result + v6 - 8);
        int32x4_t v13 = *(int32x4_t *)(result + v7 - 8);
        int64x2_t v14 = (int64x2_t)vtrn1q_s32(v10, v11);
        int64x2_t v15 = (int64x2_t)vtrn2q_s32(v10, v11);
        int64x2_t v16 = (int64x2_t)vtrn1q_s32(v12, v13);
        int64x2_t v17 = (int64x2_t)vtrn2q_s32(v12, v13);
        int16x8_t v18 = (int16x8_t)vzip1q_s64(v14, v16);
        int16x8_t v19 = (int16x8_t)vzip2q_s64(v14, v16);
        int16x8_t v20 = (int16x8_t)vzip1q_s64(v15, v17);
        int16x8_t v21 = (int16x8_t)vzip2q_s64(v15, v17);
        int16x8_t v22 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v9), (int8x16_t)xmmword_1D0D7F610), 4uLL);
        int16x8_t v23 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v19, v20), vsubq_s16(v18, v21), 2uLL), 1uLL), v22), vnegq_s16(v22));
        int16x8_t v24 = (int16x8_t)vsqaddq_u16((uint16x8_t)v20, v23);
        int16x8_t v25 = vsubq_s16(v19, v23);
        int32x4_t v26 = (int32x4_t)vminq_s16(v24, v8);
        int32x4_t v27 = (int32x4_t)vminq_s16(vmaxq_s16(v25, (int16x8_t)0), v8);
        int32x4_t v28 = vzip1q_s32(v26, v27);
        int32x4_t v29 = vzip2q_s32(v26, v27);
        *(void *)(result - 4) = v28.i64[0];
        *(void *)(result + v5 - 4) = v28.i64[1];
        *(void *)(result + v6 - 4) = v29.i64[0];
        *(void *)(result + v7 - 4) = v29.i64[1];
      }
      v4 += 4;
      result += 8 * a2;
    }
    while ((int)v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5FBC0(int16x8_t *result, uint64_t a2, const float *a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    v5.i64[0] = 0xF000F000F000F000;
    v5.i64[1] = 0xF000F000F000F000;
    do
    {
      if (*(_WORD *)a3)
      {
        int16x8_t v6 = *(int16x8_t *)((char *)result - 2 * a2);
        int8x16_t v7 = (int8x16_t)vld1q_dup_f32(a3);
        int16x8_t v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F600), 4uLL);
        int16x8_t v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v6), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        int16x8_t v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v6, v9);
        int16x8_t v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *uint64_t result = v11;
      }
      v4 += 4;
      ++result;
      a3 = (const float *)((char *)a3 + 2);
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1D0D5FC5C(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    v5.i64[0] = 0xF000F000F000F000;
    v5.i64[1] = 0xF000F000F000F000;
    do
    {
      unsigned int v6 = *(_DWORD *)(a3 + v4);
      if (v6)
      {
        int16x8_t v7 = *(int16x8_t *)((char *)result - 2 * a2);
        int16x8_t v8 = vshlq_n_s16((int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v6), (int8x16_t)xmmword_1D0D7F610), 4uLL);
        int16x8_t v9 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*result, v7), vsubq_s16(*(int16x8_t *)((char *)result - 4 * a2), *(int16x8_t *)((char *)result + 2 * a2)), 2uLL), 1uLL), v8), vnegq_s16(v8));
        int16x8_t v10 = (int16x8_t)vsqaddq_u16((uint16x8_t)v7, v9);
        int16x8_t v11 = vminq_s16(vmaxq_s16(vsubq_s16(*result, v9), (int16x8_t)0), v5);
        *(int16x8_t *)((char *)result - 2 * a2) = vminq_s16(v10, v5);
        *uint64_t result = v11;
      }
      ++result;
      v4 += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t sub_1D0D5FCF4(int a1, int a2, int16x8_t *a3, uint64_t a4, int16x8_t *a5, uint64_t a6)
{
  uint64_t v6 = 4 * a6;
  uint64_t v7 = (uint64_t)a5[1].i64 + 4 * a6;
  uint64_t v8 = (uint64_t)a3[1].i64 + 6 * a4;
  uint64_t v9 = 4 * a4;
  int16x8_t v10 = &a5->i8[6 * a6];
  int16x8_t v11 = &a3->i8[4 * a4];
  int32x4_t v12 = 0uLL;
  uint64_t v13 = 2 * a4;
  uint64_t v14 = 2 * a6;
  do
  {
    int16x8_t v15 = vsubq_s16(*a3, *a5);
    int16x8_t v16 = vsubq_s16(a3[1], a5[1]);
    int16x8_t v17 = vsubq_s16(*(int16x8_t *)((char *)a3 + v13), *(int16x8_t *)((char *)a5 + v14));
    int16x8_t v18 = vsubq_s16(*(int16x8_t *)((char *)a3 + v13 + 16), *(int16x8_t *)((char *)a5 + v14 + 16));
    int32x4_t v19 = vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v15.i8);
    int32x4_t v20 = vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v16.i8);
    int32x4_t v21 = vmull_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)v17.i8);
    int32x4_t v22 = vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v18.i8);
    int32x4_t v23 = vmull_high_s16(v15, v15);
    int32x4_t v24 = vmull_high_s16(v16, v16);
    int32x4_t v25 = vmull_high_s16(v17, v17);
    int32x4_t v26 = vmull_high_s16(v18, v18);
    if (a2 >= 3)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      unsigned int v29 = a2 + 2;
      do
      {
        int16x8_t v30 = vsubq_s16(*(int16x8_t *)&v11[v27], *(int16x8_t *)(v7 + v28 - 16));
        int16x8_t v31 = vsubq_s16(*(int16x8_t *)&v11[v27 + 16], *(int16x8_t *)(v7 + v28));
        int16x8_t v32 = vsubq_s16(*(int16x8_t *)(v8 + v27 - 16), *(int16x8_t *)&v10[v28]);
        int16x8_t v33 = vsubq_s16(*(int16x8_t *)(v8 + v27), *(int16x8_t *)&v10[v28 + 16]);
        int32x4_t v19 = vmlal_s16(v19, *(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8);
        int32x4_t v20 = vmlal_s16(v20, *(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8);
        int32x4_t v21 = vmlal_s16(v21, *(int16x4_t *)v32.i8, *(int16x4_t *)v32.i8);
        int32x4_t v22 = vmlal_s16(v22, *(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8);
        int32x4_t v23 = vmlal_high_s16(v23, v30, v30);
        int32x4_t v24 = vmlal_high_s16(v24, v31, v31);
        int32x4_t v25 = vmlal_high_s16(v25, v32, v32);
        int32x4_t v26 = vmlal_high_s16(v26, v33, v33);
        v29 -= 2;
        v28 += v6;
        v27 += v9;
      }
      while (v29 > 4);
    }
    a3 += 2;
    a5 += 2;
    v7 += 32;
    int32x4_t v12 = vaddq_s32(vaddq_s32(vaddq_s32(v19, v21), vaddq_s32(vaddq_s32(v12, v20), v22)), vaddq_s32(vaddq_s32(vaddq_s32(v23, v24), v25), v26));
    v8 += 32;
    v10 += 32;
    v11 += 32;
    BOOL v34 = __OFSUB__(a1, 16);
    a1 -= 16;
  }
  while (!((a1 < 0) ^ v34 | (a1 == 0)));
  return vaddvq_s32(v12);
}

uint64_t sub_1D0D5FE44(uint64_t a1, int a2, int16x8_t *a3, uint64_t a4, int16x8_t *a5, uint64_t a6)
{
  int16x8_t v6 = vsubq_s16(*a3, *a5);
  int16x8_t v7 = vsubq_s16(*(int16x8_t *)((char *)a3 + 2 * a4), *(int16x8_t *)((char *)a5 + 2 * a6));
  int16x8_t v8 = vsubq_s16(*(int16x8_t *)((char *)a3 + 4 * a4), *(int16x8_t *)((char *)a5 + 4 * a6));
  int16x8_t v9 = vsubq_s16(*(int16x8_t *)((char *)a3 + 6 * a4), *(int16x8_t *)((char *)a5 + 6 * a6));
  int32x4_t v10 = vmull_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
  int32x4_t v11 = vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v7.i8);
  int32x4_t v12 = vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v8.i8);
  int32x4_t v13 = vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v9.i8);
  int32x4_t v14 = vmull_high_s16(v6, v6);
  int32x4_t v15 = vmull_high_s16(v7, v7);
  int32x4_t v16 = vmull_high_s16(v8, v8);
  int32x4_t v17 = vmull_high_s16(v9, v9);
  if (a2 >= 5)
  {
    unsigned int v18 = a2 + 4;
    do
    {
      int16x8_t v19 = *(int16x8_t *)((char *)a3 + 10 * a4);
      int16x8_t v20 = *(int16x8_t *)((char *)a3 + 12 * a4);
      int16x8_t v21 = *(int16x8_t *)((char *)a3 + 14 * a4);
      int16x8_t v22 = *(int16x8_t *)((char *)a5 + 10 * a6);
      a3 = (int16x8_t *)((char *)a3 + 8 * a4);
      int16x8_t v23 = *(int16x8_t *)((char *)a5 + 12 * a6);
      int16x8_t v24 = *(int16x8_t *)((char *)a5 + 14 * a6);
      a5 = (int16x8_t *)((char *)a5 + 8 * a6);
      int16x8_t v25 = vsubq_s16(*a3, *a5);
      int16x8_t v26 = vsubq_s16(v19, v22);
      int16x8_t v27 = vsubq_s16(v20, v23);
      int16x8_t v28 = vsubq_s16(v21, v24);
      int32x4_t v10 = vmlal_s16(v10, *(int16x4_t *)v25.i8, *(int16x4_t *)v25.i8);
      int32x4_t v11 = vmlal_s16(v11, *(int16x4_t *)v26.i8, *(int16x4_t *)v26.i8);
      int32x4_t v12 = vmlal_s16(v12, *(int16x4_t *)v27.i8, *(int16x4_t *)v27.i8);
      int32x4_t v13 = vmlal_s16(v13, *(int16x4_t *)v28.i8, *(int16x4_t *)v28.i8);
      int32x4_t v14 = vmlal_high_s16(v14, v25, v25);
      int32x4_t v15 = vmlal_high_s16(v15, v26, v26);
      int32x4_t v16 = vmlal_high_s16(v16, v27, v27);
      int32x4_t v17 = vmlal_high_s16(v17, v28, v28);
      v18 -= 4;
    }
    while (v18 > 8);
  }
  return vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v11, v14), v15), v16), v17), vaddq_s32(vaddq_s32(v10, v12), v13)));
}

uint64_t sub_1D0D5FF80(uint64_t a1, int a2, int16x4_t *a3, uint64_t a4, int16x4_t *a5, uint64_t a6)
{
  int v6 = a2 + 4;
  int32x4_t v7 = 0uLL;
  int32x4_t v8 = 0uLL;
  int32x4_t v9 = 0uLL;
  int32x4_t v10 = 0uLL;
  do
  {
    int16x4_t v11 = vsub_s16(*a3, *a5);
    int16x4_t v12 = vsub_s16(*(int16x4_t *)((char *)a3 + 4 * a4), *(int16x4_t *)((char *)a5 + 4 * a6));
    int16x4_t v13 = vsub_s16(*(int16x4_t *)((char *)a3 + 2 * a4), *(int16x4_t *)((char *)a5 + 2 * a6));
    int16x4_t v14 = vsub_s16(*(int16x4_t *)((char *)a3 + 6 * a4), *(int16x4_t *)((char *)a5 + 6 * a6));
    int32x4_t v7 = vmlal_s16(v7, v11, v11);
    int32x4_t v8 = vmlal_s16(v8, v13, v13);
    int32x4_t v9 = vmlal_s16(v9, v12, v12);
    int32x4_t v10 = vmlal_s16(v10, v14, v14);
    a5 += a6;
    a3 += a4;
    v6 -= 4;
  }
  while (v6 > 4);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v7), vaddq_s32(v9, v10)));
}

uint64_t sub_1D0D60028(int a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a1 == 4)
  {
    int v22 = a2 + 4;
    int32x4_t v23 = 0uLL;
    int32x4_t v24 = 0uLL;
    int32x4_t v25 = 0uLL;
    int32x4_t v26 = 0uLL;
    do
    {
      int32x4_t v23 = vmlal_s16(v23, *(int16x4_t *)a3, *(int16x4_t *)a3);
      int32x4_t v24 = vmlal_s16(v24, *(int16x4_t *)(a3 + 2 * a4), *(int16x4_t *)(a3 + 2 * a4));
      int32x4_t v25 = vmlal_s16(v25, *(int16x4_t *)(a3 + 4 * a4), *(int16x4_t *)(a3 + 4 * a4));
      int32x4_t v26 = vmlal_s16(v26, *(int16x4_t *)(a3 + 6 * a4), *(int16x4_t *)(a3 + 6 * a4));
      a3 += 8 * a4;
      v22 -= 4;
    }
    while (v22 > 4);
    int32x4_t v21 = vaddq_s32(vaddq_s32(v24, v23), vaddq_s32(v25, v26));
  }
  else if (a1 == 8)
  {
    int16x8_t v4 = *(int16x8_t *)a3;
    int16x8_t v5 = *(int16x8_t *)(a3 + 2 * a4);
    int16x8_t v6 = *(int16x8_t *)(a3 + 4 * a4);
    int16x8_t v7 = *(int16x8_t *)(a3 + 6 * a4);
    int32x4_t v8 = vmull_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
    int32x4_t v9 = vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v5.i8);
    int32x4_t v10 = vmull_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v6.i8);
    int32x4_t v11 = vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v7.i8);
    int32x4_t v12 = vmull_high_s16(v4, v4);
    int32x4_t v13 = vmull_high_s16(v5, v5);
    int32x4_t v14 = vmull_high_s16(v6, v6);
    int32x4_t v15 = vmull_high_s16(v7, v7);
    if (a2 >= 5)
    {
      unsigned int v16 = a2 + 4;
      do
      {
        int16x8_t v17 = *(int16x8_t *)(a3 + 10 * a4);
        int16x8_t v18 = *(int16x8_t *)(a3 + 12 * a4);
        int16x8_t v19 = *(int16x8_t *)(a3 + 14 * a4);
        a3 += 8 * a4;
        int16x8_t v20 = *(int16x8_t *)a3;
        int32x4_t v8 = vmlal_s16(v8, *(int16x4_t *)v20.i8, *(int16x4_t *)v20.i8);
        int32x4_t v9 = vmlal_s16(v9, *(int16x4_t *)v17.i8, *(int16x4_t *)v17.i8);
        int32x4_t v10 = vmlal_s16(v10, *(int16x4_t *)v18.i8, *(int16x4_t *)v18.i8);
        int32x4_t v11 = vmlal_s16(v11, *(int16x4_t *)v19.i8, *(int16x4_t *)v19.i8);
        int32x4_t v12 = vmlal_high_s16(v12, v20, v20);
        int32x4_t v13 = vmlal_high_s16(v13, v17, v17);
        int32x4_t v14 = vmlal_high_s16(v14, v18, v18);
        int32x4_t v15 = vmlal_high_s16(v15, v19, v19);
        v16 -= 4;
      }
      while (v16 > 8);
    }
    int32x4_t v21 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v9, v11), vaddq_s32(v8, v10)), vaddq_s32(vaddq_s32(v12, v13), v14)), v15);
  }
  else
  {
    uint64_t v27 = a3 + 4 * a4 + 16;
    uint64_t v28 = a3 + 6 * a4 + 16;
    int32x4_t v21 = 0uLL;
    do
    {
      int16x8_t v29 = *(int16x8_t *)(a3 + 16);
      int16x8_t v30 = *(int16x8_t *)(a3 + 2 * a4);
      int16x8_t v31 = *(int16x8_t *)a3;
      int16x8_t v32 = *(int16x8_t *)(a3 + 16 + 2 * a4);
      int32x4_t v33 = vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8);
      int32x4_t v34 = vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8);
      int32x4_t v35 = vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8);
      int32x4_t v36 = vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v32.i8);
      int32x4_t v37 = vmull_high_s16(v31, v31);
      int32x4_t v38 = vmull_high_s16(v29, v29);
      int32x4_t v39 = vmull_high_s16(v30, v30);
      int32x4_t v40 = vmull_high_s16(v32, v32);
      if (a2 >= 3)
      {
        uint64_t v41 = 0;
        unsigned int v42 = a2 + 2;
        do
        {
          int16x8_t v43 = *(int16x8_t *)(v27 + v41 - 16);
          int16x8_t v44 = *(int16x8_t *)(v27 + v41);
          int16x8_t v45 = *(int16x8_t *)(v28 + v41 - 16);
          int16x8_t v46 = *(int16x8_t *)(v28 + v41);
          int32x4_t v33 = vmlal_s16(v33, *(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8);
          int32x4_t v34 = vmlal_s16(v34, *(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8);
          int32x4_t v35 = vmlal_s16(v35, *(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8);
          int32x4_t v36 = vmlal_s16(v36, *(int16x4_t *)v46.i8, *(int16x4_t *)v46.i8);
          int32x4_t v37 = vmlal_high_s16(v37, v43, v43);
          int32x4_t v38 = vmlal_high_s16(v38, v44, v44);
          int32x4_t v39 = vmlal_high_s16(v39, v45, v45);
          int32x4_t v40 = vmlal_high_s16(v40, v46, v46);
          v42 -= 2;
          v41 += 4 * a4;
        }
        while (v42 > 4);
      }
      int32x4_t v21 = vaddq_s32(vaddq_s32(vaddq_s32(v33, v35), vaddq_s32(vaddq_s32(v21, v34), v36)), vaddq_s32(vaddq_s32(vaddq_s32(v37, v38), v39), v40));
      a3 += 32;
      v27 += 32;
      v28 += 32;
      BOOL v47 = __OFSUB__(a1, 16);
      a1 -= 16;
    }
    while (!((a1 < 0) ^ v47 | (a1 == 0)));
  }
  return vaddvq_s32(v21);
}

uint64x2_t sub_1D0D60250(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, int a5, int a6, uint64x2_t *a7)
{
  if (a5 == 4)
  {
    int16x8_t v7 = (int16x8_t)vsubl_u8(*a1, *a3);
    int16x8_t v8 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4));
    int16x8_t v9 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2), *(uint8x8_t *)((char *)a3 + 2 * a4));
    int16x8_t v10 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 3 * a2), *(uint8x8_t *)((char *)a3 + 3 * a4));
    int32x4_t v11 = vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v7.i8);
    int32x4_t v12 = vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v8.i8);
    int32x4_t v13 = vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v9.i8);
    int32x4_t v14 = vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v10.i8);
    int32x4_t v15 = vmull_high_s16(v7, v7);
    int32x4_t v16 = vmull_high_s16(v8, v8);
    int32x4_t v17 = vmull_high_s16(v9, v9);
    int32x4_t v18 = vmull_high_s16(v10, v10);
    if (a6 >= 5)
    {
      unsigned int v19 = a6 + 4;
      do
      {
        uint8x8_t v20 = *(uint8x8_t *)((char *)a1 + 5 * a2);
        uint8x8_t v21 = *(uint8x8_t *)((char *)a1 + 6 * a2);
        uint8x8_t v22 = *(uint8x8_t *)((char *)a1 + 7 * a2);
        uint8x8_t v23 = *(uint8x8_t *)((char *)a3 + 5 * a4);
        a1 = (uint8x8_t *)((char *)a1 + 4 * a2);
        uint8x8_t v24 = *(uint8x8_t *)((char *)a3 + 6 * a4);
        uint8x8_t v25 = *(uint8x8_t *)((char *)a3 + 7 * a4);
        a3 = (uint8x8_t *)((char *)a3 + 4 * a4);
        int16x8_t v26 = (int16x8_t)vsubl_u8(*a1, *a3);
        int16x8_t v27 = (int16x8_t)vsubl_u8(v20, v23);
        int16x8_t v28 = (int16x8_t)vsubl_u8(v21, v24);
        int16x8_t v29 = (int16x8_t)vsubl_u8(v22, v25);
        int32x4_t v11 = vmlal_s16(v11, *(int16x4_t *)v26.i8, *(int16x4_t *)v26.i8);
        int32x4_t v12 = vmlal_s16(v12, *(int16x4_t *)v27.i8, *(int16x4_t *)v27.i8);
        int32x4_t v13 = vmlal_s16(v13, *(int16x4_t *)v28.i8, *(int16x4_t *)v28.i8);
        int32x4_t v14 = vmlal_s16(v14, *(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8);
        int32x4_t v15 = vmlal_high_s16(v15, v26, v26);
        int32x4_t v16 = vmlal_high_s16(v16, v27, v27);
        int32x4_t v17 = vmlal_high_s16(v17, v28, v28);
        int32x4_t v18 = vmlal_high_s16(v18, v29, v29);
        v19 -= 4;
      }
      while (v19 > 8);
    }
    int32x4_t v30 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v12, v14), vaddq_s32(v11, v13)), vaddq_s32(vaddq_s32(v15, v16), v17)), v18);
  }
  else
  {
    int16x8_t v31 = (char *)a1 + 3 * a2;
    int16x8_t v32 = (char *)a1 + 2 * a2;
    int32x4_t v33 = (char *)a3 + 3 * a4;
    int32x4_t v30 = 0uLL;
    int32x4_t v34 = (char *)a3 + 2 * a4;
    do
    {
      uint8x16_t v35 = *(uint8x16_t *)&a1->i8[a2];
      uint8x16_t v36 = *(uint8x16_t *)&a3->i8[a4];
      int16x8_t v37 = (int16x8_t)vsubl_u8(*a1, *a3);
      int16x8_t v38 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)a3->i8);
      int16x8_t v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v36.i8);
      int16x8_t v40 = (int16x8_t)vsubl_high_u8(v35, v36);
      int32x4_t v41 = vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v37.i8);
      int32x4_t v42 = vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v38.i8);
      int32x4_t v43 = vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v39.i8);
      int32x4_t v44 = vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v40.i8);
      int32x4_t v45 = vmull_high_s16(v37, v37);
      int32x4_t v46 = vmull_high_s16(v38, v38);
      int32x4_t v47 = vmull_high_s16(v39, v39);
      int32x4_t v48 = vmull_high_s16(v40, v40);
      if (a6 >= 3)
      {
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        unsigned int v51 = a6 + 2;
        do
        {
          uint8x16_t v52 = *(uint8x16_t *)&v32[v50];
          uint8x16_t v53 = *(uint8x16_t *)&v31[v50];
          uint8x16_t v54 = *(uint8x16_t *)&v34[v49];
          uint8x16_t v55 = *(uint8x16_t *)&v33[v49];
          int16x8_t v56 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v52.i8, *(uint8x8_t *)v54.i8);
          int16x8_t v57 = (int16x8_t)vsubl_high_u8(v52, v54);
          int16x8_t v58 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v53.i8, *(uint8x8_t *)v55.i8);
          int16x8_t v59 = (int16x8_t)vsubl_high_u8(v53, v55);
          int32x4_t v41 = vmlal_s16(v41, *(int16x4_t *)v56.i8, *(int16x4_t *)v56.i8);
          int32x4_t v42 = vmlal_s16(v42, *(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8);
          int32x4_t v43 = vmlal_s16(v43, *(int16x4_t *)v58.i8, *(int16x4_t *)v58.i8);
          int32x4_t v44 = vmlal_s16(v44, *(int16x4_t *)v59.i8, *(int16x4_t *)v59.i8);
          int32x4_t v45 = vmlal_high_s16(v45, v56, v56);
          int32x4_t v46 = vmlal_high_s16(v46, v57, v57);
          int32x4_t v47 = vmlal_high_s16(v47, v58, v58);
          int32x4_t v48 = vmlal_high_s16(v48, v59, v59);
          v51 -= 2;
          v50 += 2 * a2;
          v49 += 2 * a4;
        }
        while (v51 > 4);
      }
      a1 += 2;
      a3 += 2;
      v31 += 16;
      int32x4_t v30 = vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v41, v43), v45), v47), vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v30, v42), v44), v46), v48));
      v32 += 16;
      v33 += 16;
      v34 += 16;
      BOOL v60 = __OFSUB__(a5, 8);
      a5 -= 8;
    }
    while (!((a5 < 0) ^ v60 | (a5 == 0)));
  }
  uint64x2_t result = vpaddlq_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v30, (int8x16_t)xmmword_1D0D7F620));
  *a7 = result;
  return result;
}

float sub_1D0D6049C(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  int16x8_t v10 = v73;
  sub_1D0D607DC(a1, a2, a3, a4, 32, v73, 8u, (uint32x4_t *)(a5 + 84));
  sub_1D0D607DC(a1 + 2, a2, a3 + 2, a4, 32, v74, 8u, (uint32x4_t *)(a5 + 100));
  for (unsigned int i = 0; i != 4; ++i)
  {
    int32x4_t v12 = 0uLL;
    uint64_t v13 = 9;
    uint32x4_t v14 = 0uLL;
    do
    {
      int32x4_t v15 = &v10[v13];
      int16x8_t v16 = v10[v13 - 9];
      int16x8_t v17 = v10[v13 - 8];
      int16x8_t v18 = v10[v13 - 1];
      int16x8_t v19 = v10[v13];
      int16x8_t v20 = v10[v13 + 7];
      int16x8_t v21 = v10[v13 + 8];
      int16x8_t v22 = vaddq_s16(v18, v16);
      int16x8_t v23 = vaddq_s16(v19, v17);
      int16x8_t v24 = v10[v13 + 15];
      int16x8_t v25 = v10[v13 + 16];
      int64x2_t v26 = (int64x2_t)vsubq_s16(v16, v18);
      int64x2_t v27 = (int64x2_t)vsubq_s16(v17, v19);
      int16x8_t v28 = vaddq_s16(v24, v20);
      int16x8_t v29 = vaddq_s16(v25, v21);
      int64x2_t v30 = (int64x2_t)vsubq_s16(v20, v24);
      int64x2_t v31 = (int64x2_t)vsubq_s16(v21, v25);
      int16x8_t v32 = (int16x8_t)vzip2q_s64((int64x2_t)v22, v26);
      int16x8_t v33 = (int16x8_t)vzip2q_s64((int64x2_t)v23, v27);
      int16x8_t v34 = (int16x8_t)vzip2q_s64((int64x2_t)v28, v30);
      int16x8_t v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
      v22.i64[1] = v26.i64[0];
      v23.i64[1] = v27.i64[0];
      int16x8_t v36 = vaddq_s16(v32, v22);
      int16x8_t v37 = vaddq_s16(v33, v23);
      int16x8_t v38 = vsubq_s16(v22, v32);
      int16x8_t v39 = vsubq_s16(v23, v33);
      v28.i64[1] = v30.i64[0];
      v29.i64[1] = v31.i64[0];
      int16x8_t v40 = vaddq_s16(v34, v28);
      int16x8_t v41 = vaddq_s16(v35, v29);
      int16x8_t v42 = vsubq_s16(v28, v34);
      int16x8_t v43 = vsubq_s16(v29, v35);
      uint32x4_t v14 = vpadalq_u16(v14, (uint16x8_t)vpaddq_s16(vpaddq_s16(vaddq_s16(vabsq_s16(v38), vabsq_s16(v36)), vaddq_s16(vabsq_s16(v39), vabsq_s16(v37))), vpaddq_s16(vaddq_s16(vabsq_s16(v42), vabsq_s16(v40)), vaddq_s16(vabsq_s16(v43), vabsq_s16(v41)))));
      int16x8_t v44 = vsubq_s16(v36, v40);
      int16x8_t v45 = vsubq_s16(v37, v41);
      int16x8_t v46 = vsubq_s16(v38, v42);
      int16x8_t v47 = vsubq_s16(v39, v43);
      int32x4_t v12 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v12, (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v44), (uint16x8_t)vabsq_s16(v45)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v40, v36)), (uint16x8_t)vabsq_s16(vaddq_s16(v41, v37))))), (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v46), (uint16x8_t)vabsq_s16(v47)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v42, v38)), (uint16x8_t)vabsq_s16(vaddq_s16(v43, v39)))));
      int16x8_t v48 = vrhaddq_s16(v36, v40);
      int16x8_t v49 = vrhaddq_s16(v37, v41);
      int16x8_t v50 = vrshrq_n_s16(v44, 1uLL);
      int16x8_t v51 = vrshrq_n_s16(v45, 1uLL);
      int16x8_t v52 = vrhaddq_s16(v38, v42);
      int16x8_t v53 = vrhaddq_s16(v39, v43);
      int16x8_t v54 = vrshrq_n_s16(v46, 1uLL);
      v15[-9] = vhaddq_s16(v48, v49);
      v15[-8] = vhaddq_s16(v50, v51);
      int16x8_t v55 = vrshrq_n_s16(v47, 1uLL);
      v15[-1] = vhaddq_s16(v52, v53);
      *int32x4_t v15 = vhaddq_s16(v54, v55);
      v15[7] = vhsubq_s16(v48, v49);
      v15[8] = vhsubq_s16(v50, v51);
      v15[15] = vhsubq_s16(v52, v53);
      v15[16] = vhsubq_s16(v54, v55);
      v13 += 2;
    }
    while (v13 != 17);
    uint32x4_t v56 = vrshrq_n_u32(v14, 2uLL);
    int v57 = (i & 0x7FFFFFFE) + 8 * (i & 1);
    *(void *)(a5 + 4 * (v57 + 5)) = v56.i64[0];
    *(void *)(a5 + 4 * (v57 + 9)) = v56.i64[1];
    *(_DWORD *)(a5 + 4 * ((i >> 1) + 2 * (i & 1) + 1)) = (vaddvq_s32(v12) + 2) >> 2;
    v10 += 32;
  }
  uint64_t v58 = 0;
  int32x4_t v59 = 0uLL;
  do
  {
    int16x8_t v60 = v73[v58];
    int16x8_t v61 = v73[v58 + 1];
    int16x8_t v62 = v73[v58 + 64];
    int16x8_t v63 = v74[v58 + 1];
    int16x8_t v64 = v73[v58 + 32];
    int16x8_t v65 = v73[v58 + 33];
    int16x8_t v66 = v74[v58 + 32];
    int16x8_t v67 = v74[v58 + 33];
    int16x8_t v68 = vaddq_s16(v64, v60);
    int16x8_t v69 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v60, v64)), (uint16x8_t)vabsq_s16(vsubq_s16(v62, v66)));
    uint16x8_t v70 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v65, v61)), (uint16x8_t)vabsq_s16(vaddq_s16(v67, v63))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v68), (uint16x8_t)vabsq_s16(vaddq_s16(v66, v62))));
    uint16x8_t v71 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v61, v65)), (uint16x8_t)vabsq_s16(vsubq_s16(v63, v67))), v69);
    int32x4_t v59 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v59, v70), *(uint16x4_t *)v70.i8), v71), *(uint16x4_t *)v71.i8);
    v58 += 2;
  }
  while (v58 != 32);
  float result = COERCE_FLOAT(vaddvq_s32(v59));
  *(_DWORD *)a5 = (LODWORD(result) + 1) >> 1;
  return result;
}

uint8x8_t *sub_1D0D607DC(uint8x8_t *result, uint64_t a2, uint8x8_t *a3, uint64_t a4, int a5, int16x8_t *a6, unsigned int a7, uint32x4_t *a8)
{
  int v8 = a5 + 4;
  do
  {
    uint8x16_t v9 = *(uint8x16_t *)&result->i8[a2];
    int16x8_t v10 = (uint8x16_t *)((char *)result + a2 + a2);
    uint8x16_t v11 = *v10;
    int32x4_t v12 = (uint8x8_t *)&v10->i8[a2];
    uint8x16_t v13 = *(uint8x16_t *)&a3->i8[a4];
    uint32x4_t v14 = (uint8x16_t *)((char *)a3 + a4 + a4);
    uint8x16_t v15 = *v14;
    int16x8_t v16 = (uint8x8_t *)&v14->i8[a4];
    int16x8_t v17 = (int16x8_t)vsubl_u8(*result, *a3);
    int16x8_t v18 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)result->i8, *(uint8x16_t *)a3->i8);
    int16x8_t v19 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v13.i8);
    int16x8_t v20 = (int16x8_t)vsubl_high_u8(v9, v13);
    int16x8_t v21 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v15.i8);
    int16x8_t v22 = (int16x8_t)vsubl_high_u8(v11, v15);
    int16x8_t v23 = (int16x8_t)vsubl_u8(*v12, *v16);
    int16x8_t v24 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v12->i8, *(uint8x16_t *)v16->i8);
    int16x8_t v25 = vaddq_s16(v19, v17);
    int16x8_t v26 = vaddq_s16(v20, v18);
    int16x8_t v27 = vsubq_s16(v17, v19);
    int16x8_t v28 = vsubq_s16(v18, v20);
    int16x8_t v29 = vaddq_s16(v23, v21);
    int16x8_t v30 = vaddq_s16(v24, v22);
    int16x8_t v31 = vsubq_s16(v21, v23);
    int16x8_t v32 = vsubq_s16(v22, v24);
    int16x8_t v33 = vtrn1q_s16(v25, v27);
    int16x8_t v34 = vtrn2q_s16(v25, v27);
    int16x8_t v35 = vtrn1q_s16(v26, v28);
    int16x8_t v36 = vtrn2q_s16(v26, v28);
    int16x8_t v37 = vtrn1q_s16(v29, v31);
    int16x8_t v38 = vtrn2q_s16(v29, v31);
    int16x8_t v39 = vtrn1q_s16(v30, v32);
    int16x8_t v40 = vtrn2q_s16(v30, v32);
    int16x8_t v41 = vaddq_s16(v34, v33);
    int16x8_t v42 = vaddq_s16(v36, v35);
    int16x8_t v43 = vsubq_s16(v33, v34);
    int16x8_t v44 = vsubq_s16(v35, v36);
    int16x8_t v45 = vaddq_s16(v38, v37);
    int16x8_t v46 = vaddq_s16(v40, v39);
    int16x8_t v47 = vsubq_s16(v37, v38);
    int16x8_t v48 = vsubq_s16(v39, v40);
    int32x4_t v49 = (int32x4_t)vaddq_s16(v45, v41);
    int32x4_t v50 = (int32x4_t)vaddq_s16(v46, v42);
    int32x4_t v51 = (int32x4_t)vsubq_s16(v41, v45);
    int32x4_t v52 = (int32x4_t)vsubq_s16(v42, v46);
    int32x4_t v53 = (int32x4_t)vaddq_s16(v47, v43);
    int32x4_t v54 = (int32x4_t)vaddq_s16(v48, v44);
    int32x4_t v55 = (int32x4_t)vsubq_s16(v43, v47);
    int32x4_t v56 = (int32x4_t)vsubq_s16(v44, v48);
    int16x8_t v57 = (int16x8_t)vtrn1q_s32(v49, v51);
    int16x8_t v58 = (int16x8_t)vtrn2q_s32(v49, v51);
    int16x8_t v59 = (int16x8_t)vtrn1q_s32(v50, v52);
    int16x8_t v60 = (int16x8_t)vtrn2q_s32(v50, v52);
    int16x8_t v61 = (int16x8_t)vtrn1q_s32(v53, v55);
    int16x8_t v62 = (int16x8_t)vtrn2q_s32(v53, v55);
    int16x8_t v63 = (int16x8_t)vtrn1q_s32(v54, v56);
    int16x8_t v64 = (int16x8_t)vtrn2q_s32(v54, v56);
    int16x8_t v65 = vaddq_s16(v58, v57);
    int16x8_t v66 = vaddq_s16(v60, v59);
    int16x8_t v67 = vsubq_s16(v57, v58);
    int16x8_t v68 = vsubq_s16(v59, v60);
    int16x8_t v69 = vaddq_s16(v62, v61);
    int16x8_t v70 = vaddq_s16(v64, v63);
    int16x8_t v71 = vsubq_s16(v61, v62);
    int16x8_t v72 = vsubq_s16(v63, v64);
    *a8 = vshrq_n_u32(vpaddlq_u16((uint16x8_t)vpaddq_s16(vaddq_s16(vaddq_s16(vabsq_s16(v69), vabsq_s16(v65)), vaddq_s16(vabsq_s16(v67), vabsq_s16(v71))), vaddq_s16(vaddq_s16(vabsq_s16(v70), vabsq_s16(v66)), vaddq_s16(vabsq_s16(v68), vabsq_s16(v72))))), 1uLL);
    *a6 = v65;
    a6[1] = v66;
    a6[2] = v69;
    a6[3] = v70;
    a6[4] = v67;
    a6[5] = v68;
    v8 -= 4;
    a8 = (uint32x4_t *)((char *)a8 + 4 * a7);
    a6[6] = v71;
    a6[7] = v72;
    float result = (uint8x8_t *)((char *)v12 + a2);
    a3 = (uint8x8_t *)((char *)v16 + a4);
    a6 += 8;
  }
  while (v8 > 4);
  return result;
}

float sub_1D0D60974(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  sub_1D0D607DC(a1, a2, a3, a4, 16, v42, 4u, (uint32x4_t *)(a5 + 20));
  int32x4_t v6 = 0uLL;
  uint64_t v7 = 9;
  uint32x4_t v8 = 0uLL;
  do
  {
    int16x8_t v9 = v42[v7 - 9];
    int16x8_t v10 = v42[v7 - 8];
    int16x8_t v11 = v42[v7 - 1];
    int16x8_t v12 = v42[v7];
    int16x8_t v13 = v42[v7 + 7];
    int16x8_t v14 = v42[v7 + 8];
    int16x8_t v15 = v42[v7 + 15];
    int16x8_t v16 = v42[v7 + 16];
    int16x8_t v17 = vaddq_s16(v11, v9);
    int16x8_t v18 = vaddq_s16(v12, v10);
    int64x2_t v19 = (int64x2_t)vsubq_s16(v9, v11);
    int64x2_t v20 = (int64x2_t)vsubq_s16(v10, v12);
    int16x8_t v21 = vaddq_s16(v15, v13);
    int16x8_t v22 = vaddq_s16(v16, v14);
    int64x2_t v23 = (int64x2_t)vsubq_s16(v13, v15);
    int64x2_t v24 = (int64x2_t)vsubq_s16(v14, v16);
    int16x8_t v25 = (int16x8_t)vzip2q_s64((int64x2_t)v17, v19);
    int16x8_t v26 = (int16x8_t)vzip2q_s64((int64x2_t)v18, v20);
    int16x8_t v27 = (int16x8_t)vzip2q_s64((int64x2_t)v21, v23);
    int16x8_t v28 = (int16x8_t)vzip2q_s64((int64x2_t)v22, v24);
    v17.i64[1] = v19.i64[0];
    v18.i64[1] = v20.i64[0];
    int16x8_t v29 = vaddq_s16(v25, v17);
    int16x8_t v30 = vaddq_s16(v26, v18);
    int16x8_t v31 = vsubq_s16(v17, v25);
    v21.i64[1] = v23.i64[0];
    v22.i64[1] = v24.i64[0];
    int16x8_t v32 = vsubq_s16(v18, v26);
    int16x8_t v33 = vaddq_s16(v27, v21);
    int16x8_t v34 = vaddq_s16(v28, v22);
    int16x8_t v35 = vsubq_s16(v21, v27);
    int16x8_t v36 = vsubq_s16(v22, v28);
    int16x8_t v37 = vaddq_s16(vabsq_s16(v31), vabsq_s16(v29));
    int16x8_t v38 = vaddq_s16(vabsq_s16(v32), vabsq_s16(v30));
    uint16x8_t v39 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v29, v33)), (uint16x8_t)vabsq_s16(vsubq_s16(v30, v34))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v33, v29)), (uint16x8_t)vabsq_s16(vaddq_s16(v34, v30))));
    uint16x8_t v40 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v31, v35)), (uint16x8_t)vabsq_s16(vsubq_s16(v32, v36))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v35, v31)), (uint16x8_t)vabsq_s16(vaddq_s16(v36, v32))));
    uint32x4_t v8 = vpadalq_u16(v8, (uint16x8_t)vpaddq_s16(vpaddq_s16(v37, v38), vpaddq_s16(vaddq_s16(vabsq_s16(v35), vabsq_s16(v33)), vaddq_s16(vabsq_s16(v36), vabsq_s16(v34)))));
    int32x4_t v6 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v6, v39), *(uint16x4_t *)v39.i8), v40), *(uint16x4_t *)v40.i8);
    v7 += 2;
  }
  while (v7 != 17);
  *(uint32x4_t *)(a5 + 4) = vrshrq_n_u32(v8, 2uLL);
  float result = COERCE_FLOAT(vaddvq_s32(v6));
  *(_DWORD *)a5 = (LODWORD(result) + 2) >> 2;
  return result;
}

float sub_1D0D60B38(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  int16x8_t v5 = (int16x8_t)vsubl_u8(*a1, *a3);
  int16x8_t v6 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4));
  int16x8_t v7 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2), *(uint8x8_t *)((char *)a3 + 2 * a4));
  int16x8_t v8 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 3 * a2), *(uint8x8_t *)((char *)a3 + 3 * a4));
  int16x8_t v9 = (uint8x8_t *)((char *)a1 + 4 * a2);
  int16x8_t v10 = (uint8x8_t *)((char *)a3 + 4 * a4);
  int16x8_t v11 = (int16x8_t)vsubl_u8(*v9, *v10);
  int16x8_t v12 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + a2), *(uint8x8_t *)((char *)v10 + a4));
  int16x8_t v13 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + 2 * a2), *(uint8x8_t *)((char *)v10 + 2 * a4));
  int16x8_t v14 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + 3 * a2), *(uint8x8_t *)((char *)v10 + 3 * a4));
  int16x8_t v15 = vaddq_s16(v6, v5);
  int16x8_t v16 = vsubq_s16(v5, v6);
  int16x8_t v17 = vaddq_s16(v8, v7);
  int16x8_t v18 = vsubq_s16(v7, v8);
  int16x8_t v19 = vtrn1q_s16(v15, v16);
  int16x8_t v20 = vtrn2q_s16(v15, v16);
  int16x8_t v21 = vtrn1q_s16(v17, v18);
  int16x8_t v22 = vtrn2q_s16(v17, v18);
  int16x8_t v23 = vaddq_s16(v20, v19);
  int16x8_t v24 = vsubq_s16(v19, v20);
  int16x8_t v25 = vaddq_s16(v22, v21);
  int16x8_t v26 = vsubq_s16(v21, v22);
  int32x4_t v27 = (int32x4_t)vaddq_s16(v25, v23);
  int32x4_t v28 = (int32x4_t)vsubq_s16(v23, v25);
  int32x4_t v29 = (int32x4_t)vaddq_s16(v26, v24);
  int32x4_t v30 = (int32x4_t)vsubq_s16(v24, v26);
  int16x8_t v31 = (int16x8_t)vtrn1q_s32(v27, v28);
  int16x8_t v32 = (int16x8_t)vtrn2q_s32(v27, v28);
  int16x8_t v33 = (int16x8_t)vtrn1q_s32(v29, v30);
  int16x8_t v34 = (int16x8_t)vtrn2q_s32(v29, v30);
  int16x8_t v35 = vaddq_s16(v32, v31);
  int16x8_t v36 = vsubq_s16(v31, v32);
  int16x8_t v37 = vaddq_s16(v34, v33);
  int16x8_t v38 = vsubq_s16(v33, v34);
  int16x8_t v39 = vaddq_s16(v12, v11);
  int16x8_t v40 = vsubq_s16(v11, v12);
  int16x8_t v41 = vaddq_s16(v14, v13);
  int16x8_t v42 = vsubq_s16(v13, v14);
  int16x8_t v43 = vtrn1q_s16(v39, v40);
  int16x8_t v44 = vtrn2q_s16(v39, v40);
  int16x8_t v45 = vtrn1q_s16(v41, v42);
  int16x8_t v46 = vtrn2q_s16(v41, v42);
  int16x8_t v47 = vaddq_s16(v44, v43);
  int16x8_t v48 = vsubq_s16(v43, v44);
  int16x8_t v49 = vaddq_s16(v46, v45);
  int16x8_t v50 = vsubq_s16(v45, v46);
  int32x4_t v51 = (int32x4_t)vaddq_s16(v49, v47);
  int32x4_t v52 = (int32x4_t)vsubq_s16(v47, v49);
  int32x4_t v53 = (int32x4_t)vaddq_s16(v50, v48);
  int32x4_t v54 = (int32x4_t)vsubq_s16(v48, v50);
  int16x8_t v55 = (int16x8_t)vtrn1q_s32(v51, v52);
  int16x8_t v56 = (int16x8_t)vtrn2q_s32(v51, v52);
  int16x8_t v57 = (int16x8_t)vtrn1q_s32(v53, v54);
  int16x8_t v58 = (int16x8_t)vtrn2q_s32(v53, v54);
  int16x8_t v59 = vaddq_s16(v56, v55);
  int16x8_t v60 = vsubq_s16(v55, v56);
  int16x8_t v61 = vaddq_s16(v58, v57);
  int16x8_t v62 = vsubq_s16(v57, v58);
  *(uint32x4_t *)(a5 + 4) = vshrq_n_u32(vpaddlq_u16((uint16x8_t)vpaddq_s16(vaddq_s16(vaddq_s16(vabsq_s16(v37), vabsq_s16(v35)), vaddq_s16(vabsq_s16(v36), vabsq_s16(v38))), vaddq_s16(vaddq_s16(vabsq_s16(v61), vabsq_s16(v59)), vaddq_s16(vabsq_s16(v60), vabsq_s16(v62))))), 1uLL);
  int16x8_t v63 = vaddq_s16(v59, v35);
  int64x2_t v64 = (int64x2_t)vsubq_s16(v35, v59);
  int16x8_t v65 = vaddq_s16(v61, v37);
  int64x2_t v66 = (int64x2_t)vsubq_s16(v37, v61);
  int16x8_t v67 = vaddq_s16(v60, v36);
  int64x2_t v68 = (int64x2_t)vsubq_s16(v36, v60);
  int16x8_t v69 = vaddq_s16(v62, v38);
  int64x2_t v70 = (int64x2_t)vsubq_s16(v38, v62);
  int16x8_t v71 = (int16x8_t)vzip2q_s64((int64x2_t)v63, v64);
  int16x8_t v72 = (int16x8_t)vzip2q_s64((int64x2_t)v65, v66);
  int16x8_t v73 = (int16x8_t)vzip2q_s64((int64x2_t)v67, v68);
  int16x8_t v74 = (int16x8_t)vzip2q_s64((int64x2_t)v69, v70);
  v63.i64[1] = v64.i64[0];
  v65.i64[1] = v66.i64[0];
  v67.i64[1] = v68.i64[0];
  v69.i64[1] = v70.i64[0];
  float result = COERCE_FLOAT(vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v65), (uint16x8_t)vabsq_s16(v72)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v63), (uint16x8_t)vabsq_s16(v71))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v67), (uint16x8_t)vabsq_s16(v73)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v69), (uint16x8_t)vabsq_s16(v74))))));
  *(_DWORD *)a5 = (LODWORD(result) + 1) >> 1;
  return result;
}

float sub_1D0D60D4C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  int32x2_t v6 = 0;
  do
  {
    if (a1 >= 1)
    {
      for (uint64_t i = 0; i < a1; i += 16)
      {
        unsigned int v8 = 0;
        uint64_t v9 = a3 + 2 * i;
        int16x8_t v10 = (int16x8_t *)v99;
        uint64_t v11 = a5 + 2 * i;
        do
        {
          uint64_t v12 = 0;
          char v13 = 1;
          do
          {
            int16x8_t v14 = (uint8x8_t *)(v9 + v12);
            int16x8_t v15 = (uint8x8_t *)(v11 + v12);
            uint8x16_t v16 = *(uint8x16_t *)&v14->i8[a4];
            uint8x16_t v17 = *(uint8x16_t *)&v14->i8[2 * a4];
            uint8x16_t v18 = *(uint8x16_t *)&v14->i8[3 * a4];
            uint8x16_t v19 = *(uint8x16_t *)&v15->i8[a6];
            uint8x16_t v20 = *(uint8x16_t *)&v15->i8[2 * a6];
            int16x8_t v21 = (int16x8_t)vsubl_u8(*v14, *v15);
            int16x8_t v22 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v14->i8, *(uint8x16_t *)v15->i8);
            int16x8_t v23 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v19.i8);
            int16x8_t v24 = (int16x8_t)vsubl_high_u8(v16, v19);
            int16x8_t v25 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v20.i8);
            int16x8_t v26 = (int16x8_t)vsubl_high_u8(v17, v20);
            uint8x16_t v27 = *(uint8x16_t *)&v15->i8[3 * a6];
            int16x8_t v28 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v27.i8);
            int16x8_t v29 = (int16x8_t)vsubl_high_u8(v18, v27);
            int16x8_t v30 = vaddq_s16(v23, v21);
            int16x8_t v31 = vsubq_s16(v21, v23);
            int16x8_t v32 = vaddq_s16(v28, v25);
            int16x8_t v33 = vsubq_s16(v25, v28);
            int16x8_t v34 = vzip1q_s16(v30, v31);
            int16x8_t v35 = vzip2q_s16(v30, v31);
            int16x8_t v36 = vzip1q_s16(v32, v33);
            int16x8_t v37 = vzip2q_s16(v32, v33);
            int32x4_t v38 = (int32x4_t)vaddq_s16(v36, v34);
            int32x4_t v39 = (int32x4_t)vsubq_s16(v34, v36);
            int32x4_t v40 = (int32x4_t)vaddq_s16(v37, v35);
            int32x4_t v41 = (int32x4_t)vsubq_s16(v35, v37);
            int16x8_t v42 = (int16x8_t)vzip1q_s32(v38, v39);
            int16x8_t v43 = (int16x8_t)vzip2q_s32(v38, v39);
            int16x8_t v44 = (int16x8_t)vzip1q_s32(v40, v41);
            int16x8_t v45 = (int16x8_t)vzip2q_s32(v40, v41);
            int16x8_t v46 = vaddq_s16(v43, v42);
            int16x8_t v47 = vsubq_s16(v42, v43);
            int16x8_t v48 = vaddq_s16(v45, v44);
            int16x8_t v49 = vsubq_s16(v44, v45);
            int16x8_t v50 = vaddq_s16(v46, v48);
            int16x8_t v51 = vsubq_s16(v46, v48);
            int16x8_t v52 = vaddq_s16(v49, v47);
            int16x8_t v53 = vsubq_s16(v47, v49);
            int16x8_t v54 = vaddq_s16(v24, v22);
            int16x8_t v55 = vsubq_s16(v22, v24);
            int16x8_t v56 = vaddq_s16(v29, v26);
            int16x8_t v57 = vsubq_s16(v26, v29);
            int16x8_t v58 = vzip1q_s16(v54, v55);
            int16x8_t v59 = vzip2q_s16(v54, v55);
            int16x8_t v60 = vzip1q_s16(v56, v57);
            int16x8_t v61 = vzip2q_s16(v56, v57);
            int32x4_t v62 = (int32x4_t)vaddq_s16(v60, v58);
            int32x4_t v63 = (int32x4_t)vsubq_s16(v58, v60);
            int32x4_t v64 = (int32x4_t)vaddq_s16(v61, v59);
            int32x4_t v65 = (int32x4_t)vsubq_s16(v59, v61);
            int16x8_t v66 = (int16x8_t)vzip1q_s32(v62, v63);
            int16x8_t v67 = (int16x8_t)vzip2q_s32(v62, v63);
            int16x8_t v68 = (int16x8_t)vzip1q_s32(v64, v65);
            int16x8_t v69 = (int16x8_t)vzip2q_s32(v64, v65);
            int16x8_t v70 = vaddq_s16(v67, v66);
            int16x8_t v71 = vsubq_s16(v66, v67);
            int16x8_t v72 = vaddq_s16(v69, v68);
            int16x8_t v73 = vsubq_s16(v68, v69);
            int16x8_t v74 = vaddq_s16(v70, v72);
            int16x8_t v75 = vsubq_s16(v70, v72);
            int16x8_t v76 = vaddq_s16(v73, v71);
            *int16x8_t v10 = vaddq_s16(v74, v50);
            v10[1] = vaddq_s16(v76, v52);
            LOBYTE(v14) = v13;
            int16x8_t v77 = vsubq_s16(v71, v73);
            void v10[2] = vaddq_s16(v75, v51);
            v10[3] = vaddq_s16(v77, v53);
            v10[4] = vsubq_s16(v50, v74);
            v10[5] = vsubq_s16(v52, v76);
            v10[6] = vsubq_s16(v51, v75);
            v10[7] = vsubq_s16(v53, v77);
            v10 += 8;
            uint64_t v12 = 16;
            char v13 = 0;
          }
          while ((v14 & 1) != 0);
          v9 += 4 * a4;
          v11 += 4 * a6;
          BOOL v78 = v8 >= 0xC;
          v8 += 4;
        }
        while (!v78);
        uint64_t v79 = 0;
        int32x4_t v80 = 0uLL;
        do
        {
          int16x8_t v81 = *(int16x8_t *)&v99[v79];
          int16x8_t v82 = *(int16x8_t *)&v99[v79 + 128];
          int16x8_t v83 = *(int16x8_t *)&v99[v79 + 256];
          int16x8_t v84 = *(int16x8_t *)&v99[v79 + 384];
          int16x8_t v85 = *(int16x8_t *)&v99[v79 + 512];
          int16x8_t v86 = *(int16x8_t *)&v99[v79 + 640];
          int16x8_t v87 = *(int16x8_t *)&v99[v79 + 768];
          int16x8_t v88 = *(int16x8_t *)&v99[v79 + 896];
          int16x8_t v89 = vaddq_s16(v83, v81);
          int16x8_t v90 = vaddq_s16(v84, v82);
          int16x8_t v91 = vsubq_s16(v81, v83);
          int16x8_t v92 = vsubq_s16(v82, v84);
          int16x8_t v93 = vaddq_s16(v87, v85);
          int16x8_t v94 = vaddq_s16(v88, v86);
          int16x8_t v95 = vsubq_s16(v85, v87);
          int16x8_t v96 = vsubq_s16(v86, v88);
          int32x4_t v80 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v80, (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v89, v93)), (uint16x8_t)vabsq_s16(vsubq_s16(v90, v94))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v93, v89)), (uint16x8_t)vabsq_s16(vaddq_s16(v94, v90))))), (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v91, v95)), (uint16x8_t)vabsq_s16(vsubq_s16(v92, v96))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v95, v91)), (uint16x8_t)vabsq_s16(vaddq_s16(v96, v92)))));
          v79 += 16;
        }
        while (v79 != 128);
        int32x2_t v6 = (int32x2_t)vrsra_n_u32((uint32x2_t)v6, (uint32x2_t)*(_OWORD *)&vpaddq_s32(v80, v80), 2uLL);
      }
    }
    a3 += 16 * a4;
    a5 += 16 * a6;
    BOOL v97 = __OFSUB__(a2, 16);
    a2 -= 16;
  }
  while (!((a2 < 0) ^ v97 | (a2 == 0)));
  LODWORD(result) = vpadd_s32(v6, v6).u32[0];
  return result;
}

float sub_1D0D6104C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int32x2_t v6 = 0;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v7 = 0;
      for (uint64_t i = 0; i < a1; i += 8)
      {
        uint8x16_t v9 = *(uint8x16_t *)(a3 + v7);
        uint8x16_t v10 = *(uint8x16_t *)(a5 + v7);
        int16x8_t v11 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v10.i8);
        int16x8_t v12 = (int16x8_t)vsubl_high_u8(v9, v10);
        char v13 = (uint8x8_t *)(a3 + v7 + a4);
        int16x8_t v14 = (uint8x8_t *)(a5 + v7 + a6);
        int16x8_t v15 = (int16x8_t)vsubl_u8(*v13, *v14);
        int16x8_t v16 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v13->i8, *(uint8x16_t *)v14->i8);
        uint8x16_t v17 = (uint8x8_t *)((char *)v13 + a4);
        uint8x16_t v18 = (uint8x8_t *)((char *)v14 + a6);
        int16x8_t v19 = (int16x8_t)vsubl_u8(*v17, *v18);
        int16x8_t v20 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v17->i8, *(uint8x16_t *)v18->i8);
        int16x8_t v21 = (uint8x8_t *)((char *)v17 + a4);
        int16x8_t v22 = (uint8x8_t *)((char *)v18 + a6);
        int16x8_t v23 = (int16x8_t)vsubl_u8(*v21, *v22);
        int16x8_t v24 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v21->i8, *(uint8x16_t *)v22->i8);
        int16x8_t v25 = (uint8x8_t *)((char *)v21 + a4);
        int16x8_t v26 = (uint8x8_t *)((char *)v22 + a6);
        int16x8_t v27 = (int16x8_t)vsubl_u8(*v25, *v26);
        int16x8_t v28 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v25->i8, *(uint8x16_t *)v26->i8);
        int16x8_t v29 = (uint8x8_t *)((char *)v25 + a4);
        int16x8_t v30 = (uint8x8_t *)((char *)v26 + a6);
        int16x8_t v31 = (int16x8_t)vsubl_u8(*v29, *v30);
        int16x8_t v32 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v29->i8, *(uint8x16_t *)v30->i8);
        int16x8_t v33 = (uint8x8_t *)((char *)v29 + a4);
        int16x8_t v34 = (uint8x8_t *)((char *)v30 + a6);
        int16x8_t v35 = (int16x8_t)vsubl_u8(*v33, *v34);
        int16x8_t v36 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v33->i8, *(uint8x16_t *)v34->i8);
        uint8x16_t v37 = *(uint8x16_t *)&v33->i8[a4];
        uint8x16_t v38 = *(uint8x16_t *)&v34->i8[a6];
        int16x8_t v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v38.i8);
        int16x8_t v40 = (int16x8_t)vsubl_high_u8(v37, v38);
        int16x8_t v41 = vaddq_s16(v15, v11);
        int16x8_t v42 = vsubq_s16(v11, v15);
        int16x8_t v43 = vaddq_s16(v23, v19);
        int16x8_t v44 = vsubq_s16(v19, v23);
        int16x8_t v45 = vzip1q_s16(v41, v42);
        int16x8_t v46 = vzip2q_s16(v41, v42);
        int16x8_t v47 = vzip1q_s16(v43, v44);
        int16x8_t v48 = vzip2q_s16(v43, v44);
        int32x4_t v49 = (int32x4_t)vaddq_s16(v47, v45);
        int32x4_t v50 = (int32x4_t)vsubq_s16(v45, v47);
        int32x4_t v51 = (int32x4_t)vaddq_s16(v48, v46);
        int32x4_t v52 = (int32x4_t)vsubq_s16(v46, v48);
        int16x8_t v53 = (int16x8_t)vzip1q_s32(v49, v50);
        int16x8_t v54 = (int16x8_t)vzip2q_s32(v49, v50);
        int16x8_t v55 = (int16x8_t)vzip1q_s32(v51, v52);
        int16x8_t v56 = (int16x8_t)vzip2q_s32(v51, v52);
        int16x8_t v57 = vaddq_s16(v54, v53);
        int16x8_t v58 = vsubq_s16(v53, v54);
        int16x8_t v59 = vaddq_s16(v56, v55);
        int16x8_t v60 = vsubq_s16(v55, v56);
        int16x8_t v61 = vaddq_s16(v16, v12);
        int16x8_t v62 = vsubq_s16(v12, v16);
        int16x8_t v63 = vaddq_s16(v57, v59);
        int16x8_t v64 = vaddq_s16(v24, v20);
        int16x8_t v65 = vsubq_s16(v20, v24);
        int16x8_t v66 = vzip1q_s16(v61, v62);
        int16x8_t v67 = vzip2q_s16(v61, v62);
        int16x8_t v68 = vzip1q_s16(v64, v65);
        int16x8_t v69 = vsubq_s16(v57, v59);
        int16x8_t v70 = vzip2q_s16(v64, v65);
        int32x4_t v71 = (int32x4_t)vaddq_s16(v68, v66);
        int32x4_t v72 = (int32x4_t)vsubq_s16(v66, v68);
        int32x4_t v73 = (int32x4_t)vaddq_s16(v70, v67);
        int32x4_t v74 = (int32x4_t)vsubq_s16(v67, v70);
        int16x8_t v75 = vaddq_s16(v60, v58);
        int16x8_t v76 = (int16x8_t)vzip1q_s32(v71, v72);
        int16x8_t v77 = (int16x8_t)vzip2q_s32(v71, v72);
        int16x8_t v78 = (int16x8_t)vzip1q_s32(v73, v74);
        int16x8_t v79 = (int16x8_t)vzip2q_s32(v73, v74);
        int16x8_t v80 = vaddq_s16(v77, v76);
        int16x8_t v81 = vsubq_s16(v58, v60);
        int16x8_t v82 = vsubq_s16(v76, v77);
        int16x8_t v83 = vaddq_s16(v79, v78);
        int16x8_t v84 = vsubq_s16(v78, v79);
        int16x8_t v85 = vaddq_s16(v80, v83);
        int16x8_t v86 = vsubq_s16(v80, v83);
        int16x8_t v87 = vaddq_s16(v84, v82);
        int16x8_t v88 = vsubq_s16(v82, v84);
        int16x8_t v89 = vaddq_s16(v85, v63);
        int16x8_t v90 = vsubq_s16(v63, v85);
        int16x8_t v91 = vaddq_s16(v87, v75);
        int16x8_t v92 = vsubq_s16(v75, v87);
        int16x8_t v93 = vaddq_s16(v86, v69);
        int16x8_t v94 = vaddq_s16(v31, v27);
        int16x8_t v95 = vsubq_s16(v27, v31);
        int16x8_t v96 = vaddq_s16(v39, v35);
        int16x8_t v97 = vsubq_s16(v35, v39);
        int16x8_t v98 = vzip1q_s16(v94, v95);
        int16x8_t v99 = vsubq_s16(v69, v86);
        int16x8_t v100 = vzip2q_s16(v94, v95);
        int16x8_t v101 = vzip1q_s16(v96, v97);
        int16x8_t v102 = vzip2q_s16(v96, v97);
        int32x4_t v103 = (int32x4_t)vaddq_s16(v101, v98);
        int32x4_t v104 = (int32x4_t)vsubq_s16(v98, v101);
        int32x4_t v105 = (int32x4_t)vaddq_s16(v102, v100);
        int32x4_t v106 = (int32x4_t)vsubq_s16(v100, v102);
        int16x8_t v107 = (int16x8_t)vzip1q_s32(v103, v104);
        int16x8_t v108 = (int16x8_t)vzip2q_s32(v103, v104);
        int16x8_t v109 = (int16x8_t)vzip1q_s32(v105, v106);
        int16x8_t v110 = (int16x8_t)vzip2q_s32(v105, v106);
        int16x8_t v111 = vaddq_s16(v108, v107);
        int16x8_t v112 = vsubq_s16(v107, v108);
        int16x8_t v113 = vaddq_s16(v110, v109);
        int16x8_t v114 = vsubq_s16(v109, v110);
        int16x8_t v115 = vaddq_s16(v111, v113);
        int16x8_t v116 = vaddq_s16(v32, v28);
        int16x8_t v117 = vsubq_s16(v28, v32);
        int16x8_t v118 = vaddq_s16(v40, v36);
        int16x8_t v119 = vsubq_s16(v36, v40);
        int16x8_t v120 = vzip1q_s16(v116, v117);
        int16x8_t v121 = vsubq_s16(v111, v113);
        int16x8_t v122 = vzip2q_s16(v116, v117);
        int16x8_t v123 = vzip1q_s16(v118, v119);
        int16x8_t v124 = vzip2q_s16(v118, v119);
        int32x4_t v125 = (int32x4_t)vaddq_s16(v123, v120);
        int32x4_t v126 = (int32x4_t)vsubq_s16(v120, v123);
        int16x8_t v127 = vaddq_s16(v114, v112);
        int32x4_t v128 = (int32x4_t)vaddq_s16(v124, v122);
        int32x4_t v129 = (int32x4_t)vsubq_s16(v122, v124);
        int16x8_t v130 = (int16x8_t)vzip1q_s32(v125, v126);
        int16x8_t v131 = (int16x8_t)vzip2q_s32(v125, v126);
        int16x8_t v132 = (int16x8_t)vzip1q_s32(v128, v129);
        int16x8_t v133 = vsubq_s16(v112, v114);
        int16x8_t v134 = (int16x8_t)vzip2q_s32(v128, v129);
        int16x8_t v135 = vaddq_s16(v131, v130);
        int16x8_t v136 = vsubq_s16(v130, v131);
        int16x8_t v137 = vaddq_s16(v134, v132);
        int16x8_t v138 = vsubq_s16(v132, v134);
        int16x8_t v139 = vaddq_s16(v135, v137);
        int16x8_t v140 = vsubq_s16(v135, v137);
        int16x8_t v141 = vaddq_s16(v138, v136);
        int16x8_t v142 = vsubq_s16(v136, v138);
        int32x4_t v143 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v90), (uint16x8_t)vabsq_s16(vsubq_s16(v115, v139))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v89), (uint16x8_t)vabsq_s16(vaddq_s16(v139, v115)))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v91), (uint16x8_t)vabsq_s16(vaddq_s16(v141, v127))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v92), (uint16x8_t)vabsq_s16(vsubq_s16(v127, v141))))), vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16(
                                                                       (uint16x8_t)vabsq_s16(v93),
                                                                       (uint16x8_t)vabsq_s16(vaddq_s16(v140, v121))),
                                                          (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v99), (uint16x8_t)vabsq_s16(vsubq_s16(v121, v140)))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v88, v81)), (uint16x8_t)vabsq_s16(vaddq_s16(v142, v133))))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v81, v88)), (uint16x8_t)vabsq_s16(vsubq_s16(v133, v142)))));
        v7 += 16;
        int32x2_t v6 = (int32x2_t)vrsra_n_u32((uint32x2_t)v6, (uint32x2_t)*(_OWORD *)&vpaddq_s32(v143, v143), 1uLL);
      }
    }
    a3 += 8 * a4;
    a5 += 8 * a6;
    BOOL v144 = __OFSUB__(a2, 8);
    a2 -= 8;
  }
  while (!((a2 < 0) ^ v144 | (a2 == 0)));
  LODWORD(result) = vpadd_s32(v6, v6).u32[0];
  return result;
}

float sub_1D0D61398(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  if (a1 >= 8)
  {
    uint64_t v35 = 4 * a4;
    uint64_t v36 = 4 * a6;
    unint64_t v37 = a1;
    uint8x16_t v38 = (char *)a5 + 3 * a6;
    int16x8_t v39 = (char *)a5 + 2 * a6;
    int16x8_t v40 = (char *)a5 + a6;
    int16x8_t v41 = (char *)a3 + 3 * a4;
    int16x8_t v42 = (char *)a3 + a4;
    int32x4_t v43 = 0uLL;
    int32x4_t v44 = 0uLL;
    int16x8_t v45 = (char *)a3 + 2 * a4;
    do
    {
      unint64_t v46 = 0;
      for (unint64_t i = 0; i < v37; i += 8)
      {
        uint8x16_t v48 = *(uint8x16_t *)a3[v46 / 8].i8;
        uint8x16_t v49 = *(uint8x16_t *)&v42[v46];
        uint8x16_t v50 = *(uint8x16_t *)&v45[v46];
        uint8x16_t v51 = *(uint8x16_t *)&v41[v46];
        uint8x16_t v52 = *(uint8x16_t *)a5[v46 / 8].i8;
        uint8x16_t v53 = *(uint8x16_t *)&v40[v46];
        uint8x16_t v54 = *(uint8x16_t *)&v39[v46];
        uint8x16_t v55 = *(uint8x16_t *)&v38[v46];
        int16x8_t v56 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v52.i8);
        int16x8_t v57 = (int16x8_t)vsubl_high_u8(v48, v52);
        int16x8_t v58 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v53.i8);
        int16x8_t v59 = (int16x8_t)vsubl_high_u8(v49, v53);
        int16x8_t v60 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v54.i8);
        int16x8_t v61 = (int16x8_t)vsubl_high_u8(v50, v54);
        int16x8_t v62 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v55.i8);
        int16x8_t v63 = (int16x8_t)vsubl_high_u8(v51, v55);
        int16x8_t v64 = vaddq_s16(v58, v56);
        int16x8_t v65 = vsubq_s16(v56, v58);
        int16x8_t v66 = vaddq_s16(v62, v60);
        int16x8_t v67 = vsubq_s16(v60, v62);
        int16x8_t v68 = vzip1q_s16(v64, v65);
        int16x8_t v69 = vzip2q_s16(v64, v65);
        int16x8_t v70 = vzip1q_s16(v66, v67);
        int16x8_t v71 = vzip2q_s16(v66, v67);
        int32x4_t v72 = (int32x4_t)vaddq_s16(v70, v68);
        int32x4_t v73 = (int32x4_t)vsubq_s16(v68, v70);
        int32x4_t v74 = (int32x4_t)vaddq_s16(v71, v69);
        int32x4_t v75 = (int32x4_t)vsubq_s16(v69, v71);
        int16x8_t v76 = (int16x8_t)vzip1q_s32(v72, v73);
        int16x8_t v77 = (int16x8_t)vzip2q_s32(v72, v73);
        int16x8_t v78 = (int16x8_t)vzip1q_s32(v74, v75);
        int16x8_t v79 = (int16x8_t)vzip2q_s32(v74, v75);
        int16x8_t v80 = vaddq_s16(v78, v76);
        int16x8_t v81 = vsubq_s16(v76, v78);
        int16x8_t v82 = vaddq_s16(v79, v77);
        int16x8_t v83 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v81), (uint16x8_t)vabsq_s16(vsubq_s16(v77, v79)));
        int16x8_t v84 = vaddq_s16(v59, v57);
        int16x8_t v85 = vsubq_s16(v57, v59);
        int16x8_t v86 = vaddq_s16(v63, v61);
        int16x8_t v87 = vsubq_s16(v61, v63);
        int16x8_t v88 = vzip1q_s16(v84, v85);
        int16x8_t v89 = vzip2q_s16(v84, v85);
        int16x8_t v90 = vzip1q_s16(v86, v87);
        int16x8_t v91 = vzip2q_s16(v86, v87);
        int32x4_t v92 = (int32x4_t)vaddq_s16(v90, v88);
        int32x4_t v93 = (int32x4_t)vsubq_s16(v88, v90);
        int32x4_t v94 = (int32x4_t)vaddq_s16(v91, v89);
        int32x4_t v95 = (int32x4_t)vsubq_s16(v89, v91);
        int16x8_t v96 = (int16x8_t)vzip1q_s32(v92, v93);
        int16x8_t v97 = (int16x8_t)vzip2q_s32(v92, v93);
        int16x8_t v98 = (int16x8_t)vzip1q_s32(v94, v95);
        int16x8_t v99 = (int16x8_t)vzip2q_s32(v94, v95);
        uint16x8_t v100 = (uint16x8_t)vaddq_s16(vaddq_s16(v83, (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v80), (uint16x8_t)vabsq_s16(v82))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v98, v96)), (uint16x8_t)vabsq_s16(vaddq_s16(v99, v97))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v96, v98)), (uint16x8_t)vabsq_s16(vsubq_s16(v97, v99)))));
        int32x4_t v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v100.i8);
        int32x4_t v43 = (int32x4_t)vaddw_high_u16((uint32x4_t)v43, v100);
        v46 += 16;
      }
      a3 = (uint8x8_t *)((char *)a3 + v35);
      a5 = (uint8x8_t *)((char *)a5 + v36);
      v38 += v36;
      v39 += v36;
      v40 += v36;
      v41 += v35;
      v45 += v35;
      v42 += v35;
      a2 -= 4;
    }
    while (a2);
    return COERCE_FLOAT(vaddvq_s32(vaddq_s32(v44, v43)));
  }
  else
  {
    int v6 = a2 + 4;
    int16x8_t v7 = 0uLL;
    do
    {
      unsigned int v8 = (uint8x8_t *)((char *)a3 + a4 + a4);
      uint8x8_t v9 = *v8;
      uint8x16_t v10 = (uint8x8_t *)((char *)v8 + a4);
      int16x8_t v11 = (uint8x8_t *)((char *)a5 + a6 + a6);
      uint8x8_t v12 = *v11;
      char v13 = (uint8x8_t *)((char *)v11 + a6);
      int16x8_t v14 = (int16x8_t)vsubl_u8(*a3, *a5);
      int16x8_t v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
      int16x8_t v16 = (int16x8_t)vsubl_u8(v9, v12);
      int16x8_t v17 = (int16x8_t)vsubl_u8(*v10, *v13);
      int16x8_t v18 = vaddq_s16(v15, v14);
      int16x8_t v19 = vsubq_s16(v14, v15);
      int16x8_t v20 = vaddq_s16(v17, v16);
      int16x8_t v21 = vsubq_s16(v16, v17);
      int16x8_t v22 = vzip1q_s16(v18, v19);
      int16x8_t v23 = vzip2q_s16(v18, v19);
      int16x8_t v24 = vzip1q_s16(v20, v21);
      int16x8_t v25 = vzip2q_s16(v20, v21);
      int32x4_t v26 = (int32x4_t)vaddq_s16(v24, v22);
      int32x4_t v27 = (int32x4_t)vsubq_s16(v22, v24);
      int32x4_t v28 = (int32x4_t)vaddq_s16(v25, v23);
      int32x4_t v29 = (int32x4_t)vsubq_s16(v23, v25);
      int16x8_t v30 = (int16x8_t)vzip1q_s32(v26, v27);
      int16x8_t v31 = (int16x8_t)vzip2q_s32(v26, v27);
      int16x8_t v32 = (int16x8_t)vzip1q_s32(v28, v29);
      int16x8_t v33 = (int16x8_t)vzip2q_s32(v28, v29);
      int16x8_t v7 = vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v32, v30)), (uint16x8_t)vabsq_s16(vaddq_s16(v33, v31))), v7), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v30, v32)), (uint16x8_t)vabsq_s16(vsubq_s16(v31, v33))));
      v6 -= 4;
      a3 = (uint8x8_t *)((char *)v10 + a4);
      a5 = (uint8x8_t *)((char *)v13 + a6);
    }
    while (v6 > 4);
    return COERCE_FLOAT(vaddlvq_u16((uint16x8_t)v7));
  }
}

uint64_t sub_1D0D61624(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = 0;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = 32 * a6;
  uint64_t v68 = 32 * a4;
  do
  {
    int v69 = a2;
    if (a1 >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        uint8x8_t v12 = v71;
        sub_1D0D618EC((uint8x8_t *)(a3 + v11), a4, (uint8x8_t *)(a5 + v11), a6, 32, v71);
        sub_1D0D618EC((uint8x8_t *)(a3 + v11 + 16), a4, (uint8x8_t *)(a5 + v11 + 16), a6, 32, v72);
        for (int i = 0; i != 4; ++i)
        {
          for (uint64_t j = 9; j != 17; j += 2)
          {
            int16x8_t v15 = &v12[j];
            int16x8_t v16 = v12[j - 9];
            int16x8_t v17 = v12[j - 8];
            int16x8_t v18 = v12[j - 1];
            int16x8_t v19 = v12[j];
            int16x8_t v20 = v12[j + 7];
            int16x8_t v21 = v12[j + 8];
            int16x8_t v22 = v12[j + 15];
            int16x8_t v23 = v12[j + 16];
            int16x8_t v24 = vaddq_s16(v18, v16);
            int16x8_t v25 = vaddq_s16(v19, v17);
            int64x2_t v26 = (int64x2_t)vsubq_s16(v16, v18);
            int64x2_t v27 = (int64x2_t)vsubq_s16(v17, v19);
            int16x8_t v28 = vaddq_s16(v22, v20);
            int16x8_t v29 = vaddq_s16(v23, v21);
            int64x2_t v30 = (int64x2_t)vsubq_s16(v20, v22);
            int64x2_t v31 = (int64x2_t)vsubq_s16(v21, v23);
            int16x8_t v32 = (int16x8_t)vzip2q_s64((int64x2_t)v24, v26);
            int16x8_t v33 = (int16x8_t)vzip2q_s64((int64x2_t)v25, v27);
            int16x8_t v34 = (int16x8_t)vzip2q_s64((int64x2_t)v28, v30);
            int16x8_t v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
            v24.i64[1] = v26.i64[0];
            v25.i64[1] = v27.i64[0];
            int16x8_t v36 = vaddq_s16(v32, v24);
            int16x8_t v37 = vaddq_s16(v33, v25);
            int16x8_t v38 = vsubq_s16(v24, v32);
            int16x8_t v39 = vsubq_s16(v25, v33);
            v28.i64[1] = v30.i64[0];
            v29.i64[1] = v31.i64[0];
            int16x8_t v40 = vaddq_s16(v34, v28);
            int16x8_t v41 = vaddq_s16(v35, v29);
            int16x8_t v42 = vsubq_s16(v28, v34);
            int16x8_t v43 = vsubq_s16(v29, v35);
            int16x8_t v44 = vrhaddq_s16(v36, v40);
            int16x8_t v45 = vrhaddq_s16(v37, v41);
            int16x8_t v46 = vrshrq_n_s16(vsubq_s16(v36, v40), 1uLL);
            int16x8_t v47 = vrshrq_n_s16(vsubq_s16(v37, v41), 1uLL);
            int16x8_t v48 = vrhaddq_s16(v38, v42);
            int16x8_t v49 = vrhaddq_s16(v39, v43);
            int16x8_t v50 = vrshrq_n_s16(vsubq_s16(v38, v42), 1uLL);
            v15[-9] = vhaddq_s16(v44, v45);
            v15[-8] = vhaddq_s16(v46, v47);
            int16x8_t v51 = vrshrq_n_s16(vsubq_s16(v39, v43), 1uLL);
            v15[-1] = vhaddq_s16(v48, v49);
            *int16x8_t v15 = vhaddq_s16(v50, v51);
            v15[7] = vhsubq_s16(v44, v45);
            v15[8] = vhsubq_s16(v46, v47);
            v15[15] = vhsubq_s16(v48, v49);
            v15[16] = vhsubq_s16(v50, v51);
          }
          v12 += 32;
        }
        uint64_t v52 = 0;
        int32x4_t v53 = 0uLL;
        do
        {
          int16x8_t v54 = v71[v52];
          int16x8_t v55 = v71[v52 + 1];
          int16x8_t v56 = v71[v52 + 64];
          int16x8_t v57 = v72[v52 + 1];
          int16x8_t v58 = v71[v52 + 32];
          int16x8_t v59 = v71[v52 + 33];
          int16x8_t v60 = v72[v52 + 32];
          int16x8_t v61 = v72[v52 + 33];
          int16x8_t v62 = vaddq_s16(v58, v54);
          int16x8_t v63 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v54, v58)), (uint16x8_t)vabsq_s16(vsubq_s16(v56, v60)));
          uint16x8_t v64 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v59, v55)), (uint16x8_t)vabsq_s16(vaddq_s16(v61, v57))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v62), (uint16x8_t)vabsq_s16(vaddq_s16(v60, v56))));
          uint16x8_t v65 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v55, v59)), (uint16x8_t)vabsq_s16(vsubq_s16(v57, v61))), v63);
          int32x4_t v53 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v53, v64), *(uint16x4_t *)v64.i8), v65), *(uint16x4_t *)v65.i8);
          v52 += 2;
        }
        while (v52 != 32);
        uint64_t v10 = v10 + ((vaddvq_s32(v53) + 1) >> 1);
        v11 += 32;
      }
      while ((int)v11 < a1);
    }
    a3 += v68;
    a5 += v67;
    a2 = v69 - 32;
  }
  while (v69 > 32);
  return v10;
}

uint8x8_t *sub_1D0D618EC(uint8x8_t *result, uint64_t a2, uint8x8_t *a3, uint64_t a4, int a5, int16x8_t *a6)
{
  int v6 = a5 + 4;
  do
  {
    uint8x16_t v7 = *(uint8x16_t *)&result->i8[a2];
    unsigned int v8 = (uint8x16_t *)((char *)result + a2 + a2);
    uint8x16_t v9 = *v8;
    uint64_t v10 = (uint8x8_t *)&v8->i8[a2];
    uint8x16_t v11 = *(uint8x16_t *)&a3->i8[a4];
    uint8x8_t v12 = (uint8x16_t *)((char *)a3 + a4 + a4);
    uint8x16_t v13 = *v12;
    int16x8_t v14 = (uint8x8_t *)&v12->i8[a4];
    int16x8_t v15 = (int16x8_t)vsubl_u8(*result, *a3);
    int16x8_t v16 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)result->i8, *(uint8x16_t *)a3->i8);
    int16x8_t v17 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v7.i8, *(uint8x8_t *)v11.i8);
    int16x8_t v18 = (int16x8_t)vsubl_high_u8(v7, v11);
    int16x8_t v19 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v13.i8);
    int16x8_t v20 = (int16x8_t)vsubl_high_u8(v9, v13);
    int16x8_t v21 = (int16x8_t)vsubl_u8(*v10, *v14);
    int16x8_t v22 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v10->i8, *(uint8x16_t *)v14->i8);
    int16x8_t v23 = vaddq_s16(v17, v15);
    int16x8_t v24 = vaddq_s16(v18, v16);
    int16x8_t v25 = vsubq_s16(v15, v17);
    int16x8_t v26 = vsubq_s16(v16, v18);
    int16x8_t v27 = vaddq_s16(v21, v19);
    int16x8_t v28 = vaddq_s16(v22, v20);
    int16x8_t v29 = vsubq_s16(v19, v21);
    int16x8_t v30 = vsubq_s16(v20, v22);
    int16x8_t v31 = vtrn1q_s16(v23, v25);
    int16x8_t v32 = vtrn2q_s16(v23, v25);
    int16x8_t v33 = vtrn1q_s16(v24, v26);
    int16x8_t v34 = vtrn2q_s16(v24, v26);
    int16x8_t v35 = vtrn1q_s16(v27, v29);
    int16x8_t v36 = vtrn2q_s16(v27, v29);
    int16x8_t v37 = vtrn1q_s16(v28, v30);
    int16x8_t v38 = vtrn2q_s16(v28, v30);
    int16x8_t v39 = vaddq_s16(v32, v31);
    int16x8_t v40 = vaddq_s16(v34, v33);
    int16x8_t v41 = vsubq_s16(v31, v32);
    int16x8_t v42 = vsubq_s16(v33, v34);
    int16x8_t v43 = vaddq_s16(v36, v35);
    int16x8_t v44 = vaddq_s16(v38, v37);
    int16x8_t v45 = vsubq_s16(v35, v36);
    int16x8_t v46 = vsubq_s16(v37, v38);
    int32x4_t v47 = (int32x4_t)vaddq_s16(v43, v39);
    int32x4_t v48 = (int32x4_t)vaddq_s16(v44, v40);
    int32x4_t v49 = (int32x4_t)vsubq_s16(v39, v43);
    int32x4_t v50 = (int32x4_t)vsubq_s16(v40, v44);
    int32x4_t v51 = (int32x4_t)vaddq_s16(v45, v41);
    int32x4_t v52 = (int32x4_t)vaddq_s16(v46, v42);
    int32x4_t v53 = (int32x4_t)vsubq_s16(v41, v45);
    int32x4_t v54 = (int32x4_t)vsubq_s16(v42, v46);
    int16x8_t v55 = (int16x8_t)vtrn1q_s32(v47, v49);
    int16x8_t v56 = (int16x8_t)vtrn2q_s32(v47, v49);
    int16x8_t v57 = (int16x8_t)vtrn1q_s32(v48, v50);
    int16x8_t v58 = (int16x8_t)vtrn2q_s32(v48, v50);
    int16x8_t v59 = (int16x8_t)vtrn1q_s32(v51, v53);
    int16x8_t v60 = (int16x8_t)vtrn2q_s32(v51, v53);
    int16x8_t v61 = (int16x8_t)vtrn1q_s32(v52, v54);
    *a6 = vaddq_s16(v56, v55);
    a6[1] = vaddq_s16(v58, v57);
    int16x8_t v62 = (int16x8_t)vtrn2q_s32(v52, v54);
    a6[2] = vaddq_s16(v60, v59);
    a6[3] = vaddq_s16(v62, v61);
    a6[4] = vsubq_s16(v55, v56);
    a6[5] = vsubq_s16(v57, v58);
    v6 -= 4;
    a6[6] = vsubq_s16(v59, v60);
    a6[7] = vsubq_s16(v61, v62);
    float result = (uint8x8_t *)((char *)v10 + a2);
    a3 = (uint8x8_t *)((char *)v14 + a4);
    a6 += 8;
  }
  while (v6 > 4);
  return result;
}

uint64_t sub_1D0D61A34(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = 0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v49 = 16 * a4;
  uint64_t v13 = 16 * a6;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v14 = 0;
      do
      {
        sub_1D0D618EC((uint8x8_t *)(a3 + v14), a4, (uint8x8_t *)(a5 + v14), a6, 16, v50);
        int32x4_t v15 = 0uLL;
        for (uint64_t i = 9; i != 17; i += 2)
        {
          int16x8_t v17 = v50[i - 9];
          int16x8_t v18 = v50[i - 8];
          int16x8_t v19 = v50[i - 1];
          int16x8_t v20 = v50[i];
          int16x8_t v21 = v50[i + 7];
          int16x8_t v22 = v50[i + 8];
          int16x8_t v23 = v50[i + 15];
          int16x8_t v24 = v50[i + 16];
          int16x8_t v25 = vaddq_s16(v19, v17);
          int16x8_t v26 = vaddq_s16(v20, v18);
          int64x2_t v27 = (int64x2_t)vsubq_s16(v17, v19);
          int64x2_t v28 = (int64x2_t)vsubq_s16(v18, v20);
          int16x8_t v29 = vaddq_s16(v23, v21);
          int16x8_t v30 = vaddq_s16(v24, v22);
          int64x2_t v31 = (int64x2_t)vsubq_s16(v21, v23);
          int64x2_t v32 = (int64x2_t)vsubq_s16(v22, v24);
          int16x8_t v33 = (int16x8_t)vzip2q_s64((int64x2_t)v25, v27);
          int16x8_t v34 = (int16x8_t)vzip2q_s64((int64x2_t)v26, v28);
          int16x8_t v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
          int16x8_t v36 = (int16x8_t)vzip2q_s64((int64x2_t)v30, v32);
          v25.i64[1] = v27.i64[0];
          v26.i64[1] = v28.i64[0];
          int16x8_t v37 = vaddq_s16(v33, v25);
          v29.i64[1] = v31.i64[0];
          int16x8_t v38 = vaddq_s16(v34, v26);
          int16x8_t v39 = vsubq_s16(v25, v33);
          v30.i64[1] = v32.i64[0];
          int16x8_t v40 = vaddq_s16(v35, v29);
          int16x8_t v41 = vaddq_s16(v36, v30);
          int16x8_t v42 = vsubq_s16(v26, v34);
          int16x8_t v43 = vsubq_s16(v29, v35);
          int16x8_t v44 = vsubq_s16(v30, v36);
          uint16x8_t v45 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v37, v40)), (uint16x8_t)vabsq_s16(vsubq_s16(v38, v41))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v40, v37)), (uint16x8_t)vabsq_s16(vaddq_s16(v41, v38))));
          uint16x8_t v46 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v39, v43)), (uint16x8_t)vabsq_s16(vsubq_s16(v42, v44))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v43, v39)), (uint16x8_t)vabsq_s16(vaddq_s16(v44, v42))));
          int32x4_t v15 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v15, v45), *(uint16x4_t *)v45.i8), v46), *(uint16x4_t *)v46.i8);
        }
        uint64_t v12 = v12 + ((vaddvq_s32(v15) + 2) >> 2);
        v14 += 16;
      }
      while ((int)v14 < a1);
    }
    a3 += v49;
    a5 += v13;
    BOOL v47 = __OFSUB__(a2, 16);
    a2 -= 16;
  }
  while (!((a2 < 0) ^ v47 | (a2 == 0)));
  return v12;
}

uint64_t sub_1D0D61C1C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 0;
  do
  {
    if (a1 >= 1)
    {
      uint64_t v8 = 0;
      do
      {
        uint8x16_t v9 = (uint8x8_t *)(a3 + v8 + a4);
        uint8x8_t v10 = *v9;
        uint8x16_t v11 = (uint8x8_t *)((char *)v9 + a4);
        uint8x8_t v12 = *v11;
        uint64_t v13 = (uint8x8_t *)((char *)v11 + a4);
        uint64_t v14 = (uint8x8_t *)(a5 + v8 + a6);
        uint8x8_t v15 = *v14;
        int16x8_t v16 = (uint8x8_t *)((char *)v14 + a6);
        uint8x8_t v17 = *v16;
        int16x8_t v18 = (uint8x8_t *)((char *)v16 + a6);
        uint8x8_t v19 = *v13;
        int16x8_t v20 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a3 + v8), *(uint8x8_t *)(a5 + v8));
        int16x8_t v21 = (int16x8_t)vsubl_u8(v10, v15);
        int16x8_t v22 = (uint8x8_t *)((char *)v13 + a4);
        uint8x8_t v23 = *v22;
        int16x8_t v24 = (int16x8_t)vsubl_u8(v12, v17);
        int16x8_t v25 = (uint8x8_t *)((char *)v22 + a4);
        uint8x8_t v26 = *v25;
        int64x2_t v27 = (uint8x8_t *)((char *)v25 + a4);
        uint8x8_t v28 = *(uint8x8_t *)((char *)v27 + a4);
        uint8x8_t v29 = *v27;
        int16x8_t v30 = (uint8x8_t *)((char *)v18 + a6 + a6);
        uint8x8_t v31 = *v30;
        int64x2_t v32 = (uint8x8_t *)((char *)v30 + a6);
        int16x8_t v33 = (int16x8_t)vsubl_u8(v19, *v18);
        int16x8_t v34 = (int16x8_t)vsubl_u8(v23, *(uint8x8_t *)((char *)v18 + a6));
        int16x8_t v35 = (int16x8_t)vsubl_u8(v26, v31);
        int16x8_t v36 = (int16x8_t)vsubl_u8(v29, *v32);
        int16x8_t v37 = (int16x8_t)vsubl_u8(v28, *(uint8x8_t *)((char *)v32 + a6));
        int16x8_t v38 = vaddq_s16(v21, v20);
        int16x8_t v39 = vsubq_s16(v20, v21);
        int16x8_t v40 = vaddq_s16(v33, v24);
        int16x8_t v41 = vsubq_s16(v24, v33);
        int16x8_t v42 = vtrn1q_s16(v38, v39);
        int16x8_t v43 = vtrn2q_s16(v38, v39);
        int16x8_t v44 = vtrn1q_s16(v40, v41);
        int16x8_t v45 = vtrn2q_s16(v40, v41);
        int16x8_t v46 = vaddq_s16(v43, v42);
        int16x8_t v47 = vsubq_s16(v42, v43);
        int16x8_t v48 = vaddq_s16(v45, v44);
        int16x8_t v49 = vsubq_s16(v44, v45);
        int32x4_t v50 = (int32x4_t)vaddq_s16(v48, v46);
        int32x4_t v51 = (int32x4_t)vsubq_s16(v46, v48);
        int32x4_t v52 = (int32x4_t)vaddq_s16(v49, v47);
        int32x4_t v53 = (int32x4_t)vsubq_s16(v47, v49);
        int16x8_t v54 = (int16x8_t)vtrn1q_s32(v50, v51);
        int16x8_t v55 = (int16x8_t)vtrn2q_s32(v50, v51);
        int16x8_t v56 = (int16x8_t)vtrn1q_s32(v52, v53);
        int16x8_t v57 = (int16x8_t)vtrn2q_s32(v52, v53);
        int16x8_t v58 = vaddq_s16(v55, v54);
        int16x8_t v59 = vaddq_s16(v35, v34);
        int16x8_t v60 = vsubq_s16(v54, v55);
        int16x8_t v61 = vsubq_s16(v34, v35);
        int16x8_t v62 = vaddq_s16(v37, v36);
        int16x8_t v63 = vsubq_s16(v36, v37);
        int16x8_t v64 = vtrn1q_s16(v59, v61);
        int16x8_t v65 = vtrn2q_s16(v59, v61);
        int16x8_t v66 = vaddq_s16(v57, v56);
        int16x8_t v67 = vtrn1q_s16(v62, v63);
        int16x8_t v68 = vtrn2q_s16(v62, v63);
        int16x8_t v69 = vaddq_s16(v65, v64);
        int16x8_t v70 = vsubq_s16(v64, v65);
        int16x8_t v71 = vaddq_s16(v68, v67);
        int16x8_t v72 = vsubq_s16(v56, v57);
        int16x8_t v73 = vsubq_s16(v67, v68);
        int32x4_t v74 = (int32x4_t)vaddq_s16(v71, v69);
        int32x4_t v75 = (int32x4_t)vsubq_s16(v69, v71);
        int32x4_t v76 = (int32x4_t)vaddq_s16(v73, v70);
        int32x4_t v77 = (int32x4_t)vsubq_s16(v70, v73);
        int16x8_t v78 = (int16x8_t)vtrn1q_s32(v74, v75);
        int16x8_t v79 = (int16x8_t)vtrn2q_s32(v74, v75);
        int16x8_t v80 = (int16x8_t)vtrn1q_s32(v76, v77);
        int16x8_t v81 = (int16x8_t)vtrn2q_s32(v76, v77);
        int16x8_t v82 = vaddq_s16(v79, v78);
        int16x8_t v83 = vsubq_s16(v78, v79);
        int16x8_t v84 = vaddq_s16(v81, v80);
        int16x8_t v85 = vsubq_s16(v80, v81);
        int16x8_t v86 = vaddq_s16(v82, v58);
        int64x2_t v87 = (int64x2_t)vsubq_s16(v58, v82);
        int16x8_t v88 = vaddq_s16(v84, v66);
        int64x2_t v89 = (int64x2_t)vsubq_s16(v66, v84);
        int16x8_t v90 = vaddq_s16(v83, v60);
        int64x2_t v91 = (int64x2_t)vsubq_s16(v60, v83);
        int16x8_t v92 = vaddq_s16(v85, v72);
        int64x2_t v93 = (int64x2_t)vsubq_s16(v72, v85);
        int16x8_t v94 = (int16x8_t)vzip2q_s64((int64x2_t)v86, v87);
        int16x8_t v95 = (int16x8_t)vzip2q_s64((int64x2_t)v88, v89);
        int16x8_t v96 = (int16x8_t)vzip2q_s64((int64x2_t)v90, v91);
        int16x8_t v97 = (int16x8_t)vzip2q_s64((int64x2_t)v92, v93);
        v86.i64[1] = v87.i64[0];
        v88.i64[1] = v89.i64[0];
        v90.i64[1] = v91.i64[0];
        v92.i64[1] = v93.i64[0];
        uint64_t result = result
               + ((vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v88), (uint16x8_t)vabsq_s16(v95)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v86), (uint16x8_t)vabsq_s16(v94))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v90), (uint16x8_t)vabsq_s16(v96)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v92), (uint16x8_t)vabsq_s16(v97)))))+ 1) >> 1);
        v8 += 8;
      }
      while (v8 < a1);
    }
    a3 += 8 * a4;
    a5 += 8 * a6;
    BOOL v98 = __OFSUB__(a2, 8);
    a2 -= 8;
  }
  while (!((a2 < 0) ^ v98 | (a2 == 0)));
  return result;
}