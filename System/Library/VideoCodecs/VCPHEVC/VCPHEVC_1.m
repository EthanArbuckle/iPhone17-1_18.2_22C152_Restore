void sub_1D0CA4324(int a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  char v6;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int *v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t vars8;

  v6 = a1;
  if (a2)
  {
    v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        v11 = (2 << a1) - (uint64_t)v10;
        v12 = &a5[v10];
        v13 = (_DWORD *)(a4 + 4 * a3 * v10 - 4);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        v14 = (v10 - 1) * a3 - 1;
      }
      v15 = *(_DWORD *)(a4 + 4 * v14);
      v16 = v10;
      v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          v18 = 1;
        }
        else {
          v18 = v10;
        }
        v19 = (_DWORD *)(a4 - 4);
        v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      v21 = v10;
      v22 = a5[v10];
      v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    v24 = (int *)(a4 + 4 * ~a3);
    if ((a2 & 0x100) == 0) {
      v24 = a5;
    }
    v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 4 * a3), 4 * v10);
    }
    else
    {
      v26 = v10;
      v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 4 * v10 - 4 * a3), 4 * v10);
    }
    else
    {
      v28 = v10;
      v29 = &a5[3 << v6];
      v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F700, (16 * ((unint64_t)(4 << a1) >> 2)) | 4);
  }
}

uint64_t sub_1D0CA455C(uint64_t result)
{
  *(void *)result = sub_1D0CA4D90;
  *(void *)(result + 16) = sub_1D0CA4A68;
  int v1 = *(unsigned __int8 *)(result + 537);
  *(void *)(result + 312) = sub_1D0C9E828;
  *(void *)(result + 200) = sub_1D0CA4A48;
  *(void *)(result + 208) = sub_1D0CA4A24;
  *(void *)(result + 216) = sub_1D0CA4A00;
  *(void *)(result + 224) = sub_1D0CA49D4;
  *(void *)(result + 232) = sub_1D0CA4998;
  *(void *)(result + 120) = sub_1D0CA4970;
  *(void *)(result + 128) = sub_1D0CA4948;
  *(void *)(result + 136) = sub_1D0CA491C;
  *(void *)(result + 144) = sub_1D0CA48E4;
  *(void *)(result + 152) = sub_1D0CA48AC;
  *(void *)(result + 520) = sub_1D0CA480C;
  *(void *)(result + 32) = sub_1D0CDBE90;
  *(void *)(result + 40) = sub_1D0CDBDCC;
  BOOL v2 = v1 == 0;
  v3 = sub_1D0CDBC14;
  if (v2) {
    v3 = sub_1D0CDBD08;
  }
  *(void *)(result + 48) = v3;
  *(void *)(result + 320) = sub_1D0CDBB9C;
  *(void *)(result + 328) = sub_1D0CDBAC0;
  *(void *)(result + 280) = sub_1D0CDBA28;
  *(void *)(result + 288) = sub_1D0CDB990;
  *(void *)(result + 160) = sub_1D0CDB928;
  *(void *)(result + 168) = sub_1D0CDB854;
  *(void *)(result + 176) = sub_1D0CDB7A4;
  *(void *)(result + 184) = sub_1D0CDB778;
  *(void *)(result + 192) = sub_1D0CDB73C;
  *(void *)(result + 80) = sub_1D0CDB6E0;
  *(void *)(result + 88) = sub_1D0CDB648;
  *(void *)(result + 96) = sub_1D0CDB5A4;
  *(void *)(result + 104) = sub_1D0CDB574;
  *(void *)(result + 112) = sub_1D0CDB53C;
  *(void *)(result + 240) = sub_1D0CDB3AC;
  *(void *)(result + 248) = sub_1D0CDB130;
  *(void *)(result + 256) = sub_1D0CDAE08;
  *(void *)(result + 264) = sub_1D0CDAA30;
  *(void *)(result + 272) = sub_1D0CDA614;
  *(void *)(result + 336) = sub_1D0CDA4B0;
  *(void *)(result + 352) = sub_1D0CDA414;
  *(void *)(result + 296) = sub_1D0CDA374;
  *(void *)(result + 344) = sub_1D0CDA314;
  *(void *)(result + 304) = sub_1D0CDA214;
  return result;
}

uint64_t sub_1D0CA480C(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 >= 1)
  {
    uint64_t v8 = result;
    int v9 = 0;
    char v10 = 8 - a3;
    uint64_t v11 = 2 * a2;
    uint64_t v12 = 2 * a4;
    do
    {
      uint64_t v13 = 0;
      do
      {
        result = sub_1D0C51880(v8, a3);
        *(_WORD *)(a5 + v13) = result << v10;
        v13 += 2;
      }
      while (v11 != v13);
      ++v9;
      a5 += v12;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_1D0CA48AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 64; ++i)
  {
    uint64_t v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 128);
    a4 += 2 * a3;
  }
}

void sub_1D0CA48E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v5 = 0;
    v6 = (const __int16 *)(a2 + 2 * i);
    int16x8_t v7 = vld1q_dup_s16(v6);
    do
    {
      *(int16x8_t *)(a4 + v5) = v7;
      v5 += 16;
    }
    while (v5 != 64);
    a4 += 2 * a3;
  }
}

int16x8_t sub_1D0CA491C(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a4 + 1;
  do
  {
    v6 = (const __int16 *)(a2 + v4);
    int16x8_t result = vld1q_dup_s16(v6);
    v5[-1] = result;
    *uint64_t v5 = result;
    v4 += 2;
    uint64_t v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 32);
  return result;
}

int16x8_t sub_1D0CA4948(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  for (uint64_t i = 0; i != 16; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x8_t result = vld1q_dup_s16(v5);
    *a4 = result;
    a4 = (int16x8_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

int16x4_t sub_1D0CA4970(uint64_t a1, uint64_t a2, uint64_t a3, int16x4_t *a4)
{
  for (uint64_t i = 0; i != 8; i += 2)
  {
    uint64_t v5 = (const __int16 *)(a2 + i);
    int16x4_t result = vld1_dup_s16(v5);
    *a4 = result;
    a4 = (int16x4_t *)((char *)a4 + 2 * a3);
  }
  return result;
}

__n128 sub_1D0CA4998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 64;
  do
  {
    long long v5 = *(_OWORD *)(a2 + 256);
    long long v6 = *(_OWORD *)(a2 + 272);
    long long v7 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)a4 = v5;
    *(_OWORD *)(a4 + 16) = v6;
    __n128 result = *(__n128 *)(a2 + 320);
    long long v9 = *(_OWORD *)(a2 + 336);
    long long v10 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a4 + 112) = v10;
    *(__n128 *)(a4 + 64) = result;
    *(_OWORD *)(a4 + 80) = v9;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0CA49D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 32;
  do
  {
    __n128 result = *(__n128 *)(a2 + 128);
    long long v6 = *(_OWORD *)(a2 + 144);
    long long v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += 2 * a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0CA4A00(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 4;
  int v5 = 16;
  do
  {
    __n128 result = *v4;
    __n128 v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1D0CA4A24(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 2;
  int v5 = 8;
  do
  {
    __n128 result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + 2 * a3);
    --v5;
  }
  while (v5);
  return result;
}

void sub_1D0CA4A48(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = 4;
  do
  {
    *a4 = *(void *)(a2 + 16);
    a4 = (void *)((char *)a4 + 2 * a3);
    --v4;
  }
  while (v4);
}

void sub_1D0CA4A68(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << a1);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << a1) + (char)~byte_1D0D7FB44[9 * a1 - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * a1 - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    __int16 v11 = *(_WORD *)(a4 + 2 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << a1;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << a1;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 2 * v13;
      uint64_t v18 = -2 * v15;
      uint64_t v19 = a4 + 2 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      v21 = (__int16 *)(v17 - 2);
      v22 = (__int16 *)(v19 - 2);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          v25 = v22;
          v26 = v21;
          do
          {
            __int16 v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_WORD *)(v17 + 2 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        v21 = (__int16 *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 2 * v6;
      uint64_t v31 = -2 * v16;
      if ((1 << a1) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << a1);
      }
      v33 = (__int16 *)(v30 - 2);
      uint64_t v34 = a4 + 2 * a3 * (v6 - 1) - 2;
      uint64_t v35 = -2 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          v39 = (__int16 *)v34;
          v40 = v33;
          do
          {
            __int16 v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_WORD *)(v30 + 2 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        v33 = (__int16 *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      __int16 v11 = *(_WORD *)(a4 + 2 * ~a3);
    }
    *(_WORD *)(a5 - 2) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << a1;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 2 * (int)v7;
      v48 = (__int16 *)(a4 - 2 * a3);
      v49 = v48;
      v50 = (_WORD *)(a5 + 2 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          v51 = v49;
          v52 = v50;
          uint64_t v53 = v45;
          do
          {
            __int16 v54 = *v51++;
            __int16 v11 = v54;
            *v52++ = v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          uint64_t v55 = 0;
          do
            v50[v55++] = v11;
          while (v44 != v55);
        }
        ++v42;
        v50 = (_WORD *)((char *)v50 + v47);
        v49 = (__int16 *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v56 = 0;
      v57 = (_WORD *)(a5 + 2 * (v46 + v6));
      uint64_t v58 = 2 * v44;
      v59 = &v48[v6];
      do
      {
        if (((a2 >> v56) & 0x2000) != 0)
        {
          v60 = v59;
          v61 = v57;
          uint64_t v62 = v45;
          do
          {
            __int16 v63 = *v60++;
            __int16 v11 = v63;
            *v61++ = v63;
            --v62;
          }
          while (v62);
        }
        else
        {
          uint64_t v64 = 0;
          do
            v57[v64++] = v11;
          while (v44 != v64);
        }
        ++v56;
        v57 = (_WORD *)((char *)v57 + v58);
        v59 = (__int16 *)((char *)v59 + v58);
      }
      while (v56 != v10);
    }
  }
  else
  {
    memset_pattern16((void *)(a5 - 2), &unk_1D0D7F700, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

void sub_1D0CA4D90(int a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  char v6 = a1;
  if (a2)
  {
    int v10 = 1 << a1;
    if ((a2 & 0xF) != 0)
    {
      if (v10 < 2 << a1)
      {
        uint64_t v11 = (2 << a1) - (uint64_t)v10;
        uint64_t v12 = &a5[v10];
        int v13 = (_WORD *)(a4 + 2 * a3 * v10 - 2);
        do
        {
          *v12++ = *v13;
          v13 += a3;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v14 = v10 - a3;
      if ((a2 & 0x1E00) != 0) {
        uint64_t v14 = -a3;
      }
      if ((a2 & 0x100) != 0) {
        uint64_t v14 = ~a3;
      }
      if ((a2 & 0xF0) != 0) {
        uint64_t v14 = (v10 - 1) * a3 - 1;
      }
      __int16 v15 = *(_WORD *)(a4 + 2 * v14);
      uint64_t v16 = v10;
      uint64_t v17 = &a5[v10];
      do
      {
        *v17++ = v15;
        --v16;
      }
      while (v16);
    }
    if ((a2 & 0xF0) != 0)
    {
      if (a1 != 31)
      {
        if (v10 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v10;
        }
        uint64_t v19 = (_WORD *)(a4 - 2);
        uint64_t v20 = a5;
        do
        {
          *v20++ = *v19;
          v19 += a3;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v21 = v10;
      __int16 v22 = a5[v10];
      uint64_t v23 = a5;
      do
      {
        *v23++ = v22;
        --v21;
      }
      while (v21);
    }
    uint64_t v24 = (__int16 *)(a4 + 2 * ~a3);
    if ((a2 & 0x100) == 0) {
      uint64_t v24 = a5;
    }
    __int16 v25 = *v24;
    *(a5 - 1) = v25;
    if ((a2 & 0x1E00) != 0)
    {
      memcpy(&a5[2 << a1], (const void *)(a4 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v26 = v10;
      uint64_t v27 = &a5[2 << a1];
      do
      {
        *v27++ = v25;
        --v26;
      }
      while (v26);
    }
    if ((a2 & 0x1E000) != 0)
    {
      memcpy(&a5[3 << v6], (const void *)(a4 + 2 * v10 - 2 * a3), 2 * v10);
    }
    else
    {
      uint64_t v28 = v10;
      uint64_t v29 = &a5[3 << v6];
      __int16 v30 = *(v29 - 1);
      do
      {
        *v29++ = v30;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    memset_pattern16(a5 - 1, &unk_1D0D7F700, (8 * ((unint64_t)(4 << a1) >> 2)) | 2);
  }
}

uint64_t sub_1D0CA4FCC(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 >= 1)
  {
    uint64_t v6 = a6;
    uint64_t v10 = result;
    int v11 = 0;
    uint64_t v12 = a6 + 1;
    char v13 = 8 - a4;
    uint64_t v18 = a2;
    uint64_t v14 = 2 * a2;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v15 = 0;
        do
        {
          __n128 result = sub_1D0C51880(v10, a4);
          *(unsigned char *)(v6 + v15) = result << v13;
          v15 += 2;
        }
        while (v14 != v15);
      }
      v6 += a5;
      ++v11;
    }
    while (v11 != a3);
    int v16 = 0;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v17 = 0;
        do
        {
          __n128 result = sub_1D0C51880(v10, a4);
          *(unsigned char *)(v12 + v17) = result << v13;
          v17 += 2;
        }
        while (2 * v18 != v17);
      }
      v12 += a5;
      ++v16;
    }
    while (v16 != a3);
  }
  return result;
}

unsigned __int8 *sub_1D0CA50D8(unsigned __int8 *result, uint64_t a2)
{
  char v2 = 1;
  do
  {
    uint64_t v3 = 0;
    int v4 = *(result - 2);
    char v5 = v2;
    *(unsigned char *)(a2 - 2) = (*result + 2 * v4 + result[128] + 2) >> 2;
    *(unsigned char *)(a2 + 254) = result[254];
    *(unsigned char *)(a2 + 126) = result[126];
    int v6 = v4;
    do
    {
      int v7 = result[v3];
      unsigned int v8 = (unsigned char *)(a2 + v3);
      *unsigned int v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      int v9 = result[v3 + 128];
      v8[128] = (v6 + 2 * v9 + result[v3 + 130] + 2) >> 2;
      v3 += 2;
      int v4 = v7;
      int v6 = v9;
    }
    while (v3 != 126);
    char v2 = 0;
    ++result;
    ++a2;
  }
  while ((v5 & 1) != 0);
  return result;
}

unsigned __int8 *sub_1D0CA5180(unsigned __int8 *result, uint64_t a2)
{
  char v2 = 1;
  do
  {
    uint64_t v3 = 0;
    int v4 = *(result - 2);
    char v5 = v2;
    *(unsigned char *)(a2 - 2) = (*result + 2 * v4 + result[64] + 2) >> 2;
    *(unsigned char *)(a2 + 126) = result[126];
    *(unsigned char *)(a2 + 62) = result[62];
    int v6 = v4;
    do
    {
      int v7 = result[v3];
      unsigned int v8 = (unsigned char *)(a2 + v3);
      *unsigned int v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      int v9 = result[v3 + 64];
      v8[64] = (v6 + 2 * v9 + result[v3 + 66] + 2) >> 2;
      v3 += 2;
      int v4 = v7;
      int v6 = v9;
    }
    while (v3 != 62);
    char v2 = 0;
    ++result;
    ++a2;
  }
  while ((v5 & 1) != 0);
  return result;
}

unsigned __int8 *sub_1D0CA5228(unsigned __int8 *result, uint64_t a2)
{
  char v2 = 1;
  do
  {
    uint64_t v3 = 0;
    int v4 = *(result - 2);
    char v5 = v2;
    *(unsigned char *)(a2 - 2) = (*result + 2 * v4 + result[32] + 2) >> 2;
    *(unsigned char *)(a2 + 62) = result[62];
    *(unsigned char *)(a2 + 30) = result[30];
    int v6 = v4;
    do
    {
      int v7 = result[v3];
      unsigned int v8 = (unsigned char *)(a2 + v3);
      *unsigned int v8 = (v4 + 2 * v7 + result[v3 + 2] + 2) >> 2;
      int v9 = result[v3 + 32];
      v8[32] = (v6 + 2 * v9 + result[v3 + 34] + 2) >> 2;
      v3 += 2;
      int v4 = v7;
      int v6 = v9;
    }
    while (v3 != 30);
    char v2 = 0;
    ++result;
    ++a2;
  }
  while ((v5 & 1) != 0);
  return result;
}

char *sub_1D0CA52D0(char *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << (char)result);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << (char)result) + (char)~byte_1D0D7FB44[9 * (int)result - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * (int)result - 27 + v8] - a3;
    }
    LODWORD(v10) = ((int)v6 + 4) >> 3;
    __int16 v11 = *(_WORD *)(a4 + 2 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v12 = 0;
      int v13 = 2 << (char)result;
      if ((int)v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if ((int)v6 >= 8) {
        int v15 = 8;
      }
      else {
        int v15 = 1 << (char)result;
      }
      uint64_t v16 = v15;
      uint64_t v17 = a5 + 2 * v13;
      uint64_t v18 = -2 * v15;
      uint64_t v19 = a4 + 2 * a3 * (v13 - 1);
      uint64_t v20 = a3 * v15;
      uint64_t v21 = (__int16 *)(v17 - 2);
      __int16 v22 = (__int16 *)(v19 - 2);
      uint64_t v23 = -(uint64_t)v15;
      do
      {
        if ((a2 >> v12))
        {
          uint64_t v24 = v7 + 1;
          __int16 v25 = v22;
          uint64_t v26 = v21;
          do
          {
            __int16 v11 = *v25;
            *v26-- = *v25;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_WORD *)(v17 + 2 * v27) = v11;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v12;
        uint64_t v21 = (__int16 *)((char *)v21 + v18);
        v22 -= v20;
        v17 += v18;
      }
      while (v12 != v14);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 2 * v6;
      uint64_t v31 = -2 * v16;
      if ((1 << (char)result) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << (char)result);
      }
      v33 = (__int16 *)(v30 - 2);
      uint64_t v34 = a4 + 2 * a3 * (v6 - 1) - 2;
      uint64_t v35 = -2 * v20;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v16;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          v39 = (__int16 *)v34;
          v40 = v33;
          do
          {
            __int16 v11 = *v39;
            *v40-- = *v39;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_WORD *)(v30 + 2 * v41) = v11;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        v33 = (__int16 *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v14);
    }
    if ((a2 & 0x100) != 0) {
      __int16 v11 = *(_WORD *)(a4 + 2 * ~a3);
    }
    *(_WORD *)(a5 - 2) = v11;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      int v43 = 2 << (char)result;
      uint64_t v44 = (int)v7;
      if ((int)v7 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v7;
      }
      uint64_t v46 = v43;
      if ((int)v10 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v10;
      }
      uint64_t v47 = 2 * (int)v7;
      v48 = (__int16 *)(a4 - 2 * a3);
      v49 = v48;
      __n128 result = (char *)(a5 + 2 * v43);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          v50 = v49;
          v51 = result;
          uint64_t v52 = v45;
          do
          {
            __int16 v53 = *v50++;
            __int16 v11 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          uint64_t v54 = 0;
          do
            *(_WORD *)&result[2 * v54++] = v11;
          while (v44 != v54);
        }
        ++v42;
        result += v47;
        v49 = (__int16 *)((char *)v49 + v47);
      }
      while (v42 != v10);
      uint64_t v55 = 0;
      uint64_t v56 = (_WORD *)(a5 + 2 * (v46 + v6));
      uint64_t v57 = 2 * v44;
      uint64_t v58 = &v48[v6];
      do
      {
        if (((a2 >> v55) & 0x2000) != 0)
        {
          v59 = v58;
          v60 = v56;
          __n128 result = (char *)v45;
          do
          {
            __int16 v61 = *v59++;
            __int16 v11 = v61;
            *v60++ = v61;
            --result;
          }
          while (result);
        }
        else
        {
          uint64_t v62 = 0;
          do
            v56[v62++] = v11;
          while (v44 != v62);
        }
        ++v55;
        uint64_t v56 = (_WORD *)((char *)v56 + v57);
        uint64_t v58 = (__int16 *)((char *)v58 + v57);
      }
      while (v55 != v10);
    }
  }
  else
  {
    return (char *)memset((void *)(a5 - 2), 128, (8 * ((unint64_t)(4 << (char)result) >> 2)) | 2);
  }
  return result;
}

void *sub_1D0CA55F4(void *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return memset((void *)(a5 - 2), 128, (8 * ((unint64_t)(4 << (char)result) >> 2)) | 2);
  }
  uint64_t v5 = (1 << (char)result);
  unsigned int v6 = __clz(__rbit32(a2));
  if (v6 < 9) {
    uint64_t v7 = ((2 << (char)result) + (char)~byte_1D0D7FB44[9 * (int)result + 18 + v6]) * a3 - 1;
  }
  else {
    uint64_t v7 = byte_1D0D7FB44[9 * (int)result + 9 + v6] - a3;
  }
  LODWORD(v8) = (int)v5 >> 2;
  unsigned int v9 = *(unsigned __int16 *)(a4 + 2 * v7);
  if ((int)v5 >= 4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 2 << (char)result;
    uint64_t v12 = a5 + 2 * v11;
    if ((int)v8 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v8;
    }
    uint64_t v14 = a4 + 2 * a3 * (v11 - 1) - 2;
    do
    {
      uint64_t v15 = v10 + 1;
      if ((a2 >> v10))
      {
        uint64_t v16 = -2;
        uint64_t v17 = (unsigned __int16 *)v14;
        do
        {
          unsigned int v9 = *v17;
          *(_WORD *)(v12 + v16) = v9;
          v16 -= 2;
          v17 -= a3;
        }
        while (v16 != -10);
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (v11 - 4 * v15)) = vdup_n_s16(v9);
      }
      v12 -= 8;
      v14 -= 8 * a3;
      uint64_t v10 = v15;
    }
    while (v15 != v13);
    uint64_t v18 = 0;
    uint64_t v19 = a5 + 2 * v5;
    uint64_t v20 = a4 + 2 * a3 * (v5 - 1) - 2;
    do
    {
      uint64_t v21 = v18 + 1;
      if (((a2 >> v18) & 0x10) != 0)
      {
        uint64_t v22 = -2;
        uint64_t v23 = (unsigned __int16 *)v20;
        do
        {
          unsigned int v9 = *v23;
          *(_WORD *)(v19 + v22) = v9;
          v22 -= 2;
          v23 -= a3;
        }
        while (v22 != -10);
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (v5 - 4 * v21)) = vdup_n_s16(v9);
      }
      v19 -= 8;
      v20 -= 8 * a3;
      uint64_t v18 = v21;
    }
    while (v21 != v13);
  }
  if ((a2 & 0x100) != 0) {
    unsigned int v9 = *(unsigned __int16 *)(a4 + 2 * ~a3);
  }
  *(_WORD *)(a5 - 2) = v9;
  if ((int)v5 >= 4)
  {
    uint64_t v24 = 0;
    int v25 = 2 << (char)result;
    if ((int)v8 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v8;
    }
    uint64_t v26 = a5 + 2 * v25;
    uint64_t v27 = a4 - 2 * a3;
    do
    {
      if (((a2 >> v24) & 0x200) != 0)
      {
        for (uint64_t i = 0; i != 8; i += 2)
        {
          unsigned int v9 = *(unsigned __int16 *)(v27 + i);
          *(_WORD *)(v26 + i) = v9;
        }
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (4 * v24 + v25)) = vdup_n_s16(v9);
      }
      ++v24;
      v26 += 8;
      v27 += 8;
    }
    while (v24 != v8);
    uint64_t v29 = 0;
    uint64_t v30 = a5 + 2 * (v25 + (unint64_t)v5);
    uint64_t v31 = a4 - 2 * a3 + 2 * v5;
    do
    {
      if (((a2 >> v29) & 0x2000) != 0)
      {
        for (uint64_t j = 0; j != 8; j += 2)
        {
          unsigned int v9 = *(unsigned __int16 *)(v31 + j);
          *(_WORD *)(v30 + j) = v9;
        }
      }
      else
      {
        *(int16x4_t *)(a5 + 2 * (v5 + 4 * v29 + (2 << (char)result))) = vdup_n_s16(v9);
      }
      ++v29;
      v30 += 8;
      v31 += 8;
    }
    while (v29 != v8);
  }
  return result;
}

void *sub_1D0CA5888(void *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = (1 << (char)result);
    if ((int)v6 >= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = v6;
    }
    unsigned int v8 = __clz(__rbit32(a2));
    if (v8 < 9) {
      uint64_t v9 = ((2 << (char)result) + (char)~byte_1D0D7FB44[9 * (int)result - 18 + v8]) * a3 - 1;
    }
    else {
      uint64_t v9 = byte_1D0D7FB44[9 * (int)result + 9 + v8] - a3;
    }
    unsigned int v10 = *(unsigned __int16 *)(a4 + 2 * v9);
    if ((int)v6 >= 4)
    {
      uint64_t v11 = 0;
      LODWORD(v12) = ((int)v6 + 4) >> 3;
      int v13 = 2 << (char)result;
      if ((int)v12 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v12;
      }
      if ((int)v6 >= 8) {
        int v14 = 8;
      }
      else {
        int v14 = 1 << (char)result;
      }
      uint64_t v15 = v14;
      uint64_t v16 = a5 + 2 * v13;
      uint64_t v17 = -2 * v14;
      uint64_t v18 = a4 + 2 * a3 * (v13 - 1);
      uint64_t v19 = a3 * v14;
      uint64_t v20 = (_WORD *)(v16 - 2);
      uint64_t v21 = (unsigned __int16 *)(v18 - 2);
      uint64_t v22 = v7 + 1;
      uint64_t v23 = -(uint64_t)v14;
      do
      {
        if ((a2 >> v11))
        {
          uint64_t v24 = v22;
          int v25 = v21;
          uint64_t v26 = v20;
          do
          {
            unsigned int v10 = *v25;
            *v26-- = v10;
            v25 -= a3;
            --v24;
          }
          while (v24 > 1);
        }
        else
        {
          uint64_t v27 = v23;
          do
          {
            *(_WORD *)(v16 + 2 * v27) = v10;
            BOOL v28 = __CFADD__(v27++, 1);
          }
          while (!v28);
        }
        ++v11;
        uint64_t v20 = (_WORD *)((char *)v20 + v17);
        v21 -= v19;
        v16 += v17;
      }
      while (v11 != v12);
      uint64_t v29 = 0;
      uint64_t v30 = a5 + 2 * v6;
      uint64_t v31 = -2 * v15;
      if ((1 << (char)result) >= 8uLL) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = (1 << (char)result);
      }
      v33 = (_WORD *)(v30 - 2);
      uint64_t v34 = a4 + 2 * a3 * (v6 - 1) - 2;
      uint64_t v35 = -2 * v19;
      uint64_t v36 = v32 + 1;
      uint64_t v37 = -v15;
      do
      {
        if (((a2 >> v29) & 0x10) != 0)
        {
          uint64_t v38 = v36;
          v39 = (unsigned __int16 *)v34;
          v40 = v33;
          do
          {
            unsigned int v10 = *v39;
            *v40-- = v10;
            v39 -= a3;
            --v38;
          }
          while (v38 > 1);
        }
        else
        {
          uint64_t v41 = v37;
          do
          {
            *(_WORD *)(v30 + 2 * v41) = v10;
            BOOL v28 = __CFADD__(v41++, 1);
          }
          while (!v28);
        }
        ++v29;
        v33 = (_WORD *)((char *)v33 + v31);
        v34 += v35;
        v30 += v31;
      }
      while (v29 != v12);
    }
    if ((a2 & 0x100) != 0) {
      unsigned int v10 = *(unsigned __int16 *)(a4 + 2 * ~a3);
    }
    *(_WORD *)(a5 - 2) = v10;
    if ((int)v6 >= 4)
    {
      uint64_t v42 = 0;
      LODWORD(v43) = (int)v6 >> 2;
      uint64_t v44 = 2 << (char)result;
      if ((int)v6 >> 2 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v43;
      }
      uint64_t v45 = a4 - 2 * a3;
      uint64_t v46 = a5 + 2 * (2 << (char)result);
      do
      {
        if (((a2 >> v42) & 0x200) != 0)
        {
          for (uint64_t i = 0; i != 8; i += 2)
          {
            unsigned int v10 = *(unsigned __int16 *)(v45 + i);
            *(_WORD *)(v46 + i) = v10;
          }
        }
        else
        {
          *(int16x4_t *)(a5 + 2 * (4 * v42 + v44)) = vdup_n_s16(v10);
        }
        ++v42;
        v46 += 8;
        v45 += 8;
      }
      while (v42 != v43);
      uint64_t v48 = 0;
      uint64_t v49 = a5 + 2 * (v44 + v6);
      uint64_t v50 = a4 - 2 * a3 + 2 * v6;
      do
      {
        if (((a2 >> v48) & 0x2000) != 0)
        {
          for (uint64_t j = 0; j != 8; j += 2)
          {
            unsigned int v10 = *(unsigned __int16 *)(v50 + j);
            *(_WORD *)(v49 + j) = v10;
          }
        }
        else
        {
          *(int16x4_t *)(a5 + 2 * (v6 + 4 * v48 + v44)) = vdup_n_s16(v10);
        }
        ++v48;
        v49 += 8;
        v50 += 8;
      }
      while (v48 != v43);
    }
  }
  else
  {
    return memset((void *)(a5 - 2), 128, (8 * ((unint64_t)(4 << (char)result) >> 2)) | 2);
  }
  return result;
}

uint64_t sub_1D0CA5B8C(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 >= 1)
  {
    uint64_t v9 = result;
    int v10 = 0;
    char v11 = 8 - a3;
    uint64_t v12 = a2;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        __n128 result = sub_1D0C51880(v9, a3);
        *(unsigned char *)(a5 + i) = result << v11;
      }
      a5 += a4;
      ++v10;
    }
    while (v10 != a2);
  }
  return result;
}

int8x16_t sub_1D0CA5C2C(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  for (uint64_t i = 0; i != 64; ++i)
  {
    uint64_t v5 = (const char *)(a2 + i);
    int8x16_t result = vld1q_dup_s8(v5);
    a4[2] = result;
    a4[3] = result;
    *a4 = result;
    a4[1] = result;
    a4 = (int8x16_t *)((char *)a4 + a3);
  }
  return result;
}

int8x16_t sub_1D0CA5C54(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  for (uint64_t i = 0; i != 32; ++i)
  {
    uint64_t v5 = (const char *)(a2 + i);
    int8x16_t result = vld1q_dup_s8(v5);
    *a4 = result;
    a4[1] = result;
    a4 = (int8x16_t *)((char *)a4 + a3);
  }
  return result;
}

void sub_1D0CA5C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  for (uint64_t i = 0; i != 16; ++i)
  {
    uint64_t v5 = 0x101010101010101 * *(unsigned __int8 *)(a2 + i);
    *a4 = v5;
    a4[1] = v5;
    a4 = (uint64_t *)((char *)a4 + a3);
  }
}

void sub_1D0CA5CA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  for (uint64_t i = 0; i != 8; ++i)
  {
    *a4 = 0x101010101010101 * *(unsigned __int8 *)(a2 + i);
    a4 = (void *)((char *)a4 + a3);
  }
}

void sub_1D0CA5CC8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    *a4 = 16843009 * *(unsigned __int8 *)(a2 + i);
    a4 = (_DWORD *)((char *)a4 + a3);
  }
}

__n128 sub_1D0CA5CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 64;
  do
  {
    __n128 result = *(__n128 *)(a2 + 128);
    long long v6 = *(_OWORD *)(a2 + 144);
    long long v7 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a4 + 48) = v7;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v6;
    a4 += a3;
    --v4;
  }
  while (v4);
  return result;
}

__n128 sub_1D0CA5D18(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 4;
  int v5 = 32;
  do
  {
    __n128 result = *v4;
    __n128 v7 = a2[5];
    *a4 = *v4;
    a4[1] = v7;
    a4 = (__n128 *)((char *)a4 + a3);
    --v5;
  }
  while (v5);
  return result;
}

__n128 sub_1D0CA5D38(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = a2 + 2;
  int v5 = 16;
  do
  {
    __n128 result = *v4;
    *a4 = *v4;
    a4 = (__n128 *)((char *)a4 + a3);
    --v5;
  }
  while (v5);
  return result;
}

void sub_1D0CA5D58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = 8;
  do
  {
    *a4 = *(void *)(a2 + 16);
    a4 = (void *)((char *)a4 + a3);
    --v4;
  }
  while (v4);
}

void sub_1D0CA5D74(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4 = 4;
  do
  {
    *a4 = *(_DWORD *)(a2 + 8);
    a4 = (_DWORD *)((char *)a4 + a3);
    --v4;
  }
  while (v4);
}

void *sub_1D0CA5D90(void *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    int v7 = 1 << (char)result;
    int v8 = (1 << (char)result) + 4;
    if (1 << (char)result >= 8) {
      uint64_t v9 = 8;
    }
    else {
      uint64_t v9 = v7;
    }
    unsigned int v10 = __clz(__rbit32(a2));
    if (v10 < 9) {
      uint64_t v11 = ((2 << (char)result) + (char)~byte_1D0D7FB44[9 * (int)result - 18 + v10]) * a3 - 1;
    }
    else {
      uint64_t v11 = byte_1D0D7FB44[9 * (int)result - 27 + v10] - a3;
    }
    int v12 = v8 >> 3;
    int v13 = *(unsigned __int8 *)(a4 + v11);
    uint64_t v64 = (1 << (char)result);
    int v56 = v9;
    char v57 = (char)result;
    int v55 = v8 >> 3;
    if (v7 >= 4)
    {
      uint64_t v14 = 0;
      size_t v15 = (int)v9;
      uint64_t v16 = 2 << (char)result;
      if (v12 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v12;
      }
      if (v7 >= 8) {
        int v18 = 8;
      }
      else {
        int v18 = 1 << (char)result;
      }
      uint64_t v19 = (unsigned char *)(a5 + v16 - 1);
      uint64_t v20 = -(uint64_t)v18;
      uint64_t v21 = a4 + a3 * (v16 - 1) - 1;
      uint64_t v54 = v18;
      uint64_t v22 = -(a3 * v18);
      uint64_t v23 = -a3;
      uint64_t v60 = 2 << (char)result;
      uint64_t v61 = v9 + 1;
      do
      {
        uint64_t v24 = v14 + 1;
        if ((a2 >> v14))
        {
          uint64_t v25 = v61;
          uint64_t v26 = (unsigned __int8 *)v21;
          uint64_t v27 = v19;
          do
          {
            int v13 = *v26;
            *v27-- = v13;
            v26 += v23;
            --v25;
          }
          while (v25 > 1);
        }
        else
        {
          __n128 result = memset((void *)(a5 + v60 - v24 * v15), v13, v15);
        }
        v19 += v20;
        v21 += v22;
        uint64_t v14 = v24;
      }
      while (v24 != v17);
      uint64_t v28 = 0;
      uint64_t v29 = 8;
      if (v64 < 8) {
        uint64_t v29 = v64;
      }
      uint64_t v30 = (unsigned char *)(a5 + v64 - 1);
      uint64_t v31 = a4 + a3 * (v64 - 1) - 1;
      uint64_t v62 = v29 + 1;
      do
      {
        uint64_t v32 = v28 + 1;
        if (((a2 >> v28) & 0x10) != 0)
        {
          uint64_t v33 = v62;
          uint64_t v34 = (unsigned __int8 *)v31;
          uint64_t v35 = v30;
          do
          {
            int v13 = *v34;
            *v35-- = v13;
            v34 -= a3;
            --v33;
          }
          while (v33 > 1);
        }
        else
        {
          __n128 result = memset((void *)(a5 + v64 - v32 * v15), v13, v15);
        }
        v30 -= v54;
        v31 += v22;
        uint64_t v28 = v32;
      }
      while (v32 != v17);
    }
    if ((a2 & 0x100) != 0) {
      int v13 = *(unsigned __int8 *)(a4 + ~a3);
    }
    *(unsigned char *)(a5 - 1) = v13;
    if ((int)v64 >= 4)
    {
      uint64_t v36 = 0;
      int v37 = 2 << v57;
      if (v56 <= 1) {
        uint64_t v38 = 1;
      }
      else {
        uint64_t v38 = v56;
      }
      uint64_t v39 = v37;
      if (v55 <= 1) {
        uint64_t v40 = 1;
      }
      else {
        uint64_t v40 = v55;
      }
      uint64_t v41 = (unsigned char *)(a5 + v37);
      uint64_t v42 = (unsigned __int8 *)(a4 - a3);
      do
      {
        if (((a2 >> v36) & 0x200) != 0)
        {
          uint64_t v43 = v42;
          uint64_t v44 = v41;
          uint64_t v45 = v38;
          do
          {
            int v46 = *v43++;
            int v13 = v46;
            *v44++ = v46;
            --v45;
          }
          while (v45);
        }
        else
        {
          __n128 result = memset((void *)(a5 + v36 * v56 + v39), v13, v56);
        }
        ++v36;
        v41 += v56;
        v42 += v56;
      }
      while (v36 != v40);
      uint64_t v47 = 0;
      uint64_t v48 = (unsigned char *)(a5 + v39 + v64);
      uint64_t v49 = (unsigned __int8 *)(a4 + v64 - a3);
      do
      {
        if (((a2 >> v47) & 0x2000) != 0)
        {
          uint64_t v50 = v49;
          v51 = v48;
          uint64_t v52 = v38;
          do
          {
            int v53 = *v50++;
            int v13 = v53;
            *v51++ = v53;
            --v52;
          }
          while (v52);
        }
        else
        {
          __n128 result = memset((void *)(a5 + v64 + v47 * v56 + v39), v13, v56);
        }
        ++v47;
        v48 += v56;
        v49 += v56;
      }
      while (v47 != v40);
    }
  }
  else
  {
    return memset((void *)(a5 - 1), 128, (4 << (char)result) | 1);
  }
  return result;
}

uint64_t sub_1D0CA6124(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)a2 > 9)
  {
    if (a2 == 10)
    {
      long long v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 64);
      return (*v6)(a2, a4, a5, a6);
    }
    if (a2 == 26)
    {
      long long v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 144);
      return (*v6)(a2, a4, a5, a6);
    }
LABEL_8:
    long long v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 224);
    return (*v6)(a2, a4, a5, a6);
  }
  if (!a2)
  {
    long long v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 264);
    return (*v6)(a2, a4, a5, a6);
  }
  if (a2 != 1) {
    goto LABEL_8;
  }
  long long v6 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * a3 + 304);
  return (*v6)(a2, a4, a5, a6);
}

uint64_t sub_1D0CA6198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = MEMORY[0x1F4188790]();
  uint64_t v13 = v12;
  unsigned int v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v20 = v11;
  STACK[0x4038] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = v11 + 64;
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, unint64_t *))(v11
                                                                                                 + 64
                                                                                                 + ((8 * ((v21 & 3) != 0)) | (16 * ((*(void *)&v21 & 0x30000) != 0)))))(v18, v16, v21, v23, v24, (int)v18, &STACK[0x2020]);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, uint64_t *))(v22
                                                                                        + ((8 * ((v15 & 3) != 0)) | (16 * ((*(void *)&v15 & 0x30000) != 0)))))(v19, v17, v15, v13, a9, (int)v19, &v26);
  return (*(uint64_t (**)(uint64_t, uint64_t, void, unint64_t *, void, uint64_t *, uint64_t, uint64_t))(v20 + 160))(v19, v17, (int)v19, &STACK[0x2020], (int)v19, &v26, a10, a11);
}

uint64_t sub_1D0CA62F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = MEMORY[0x1F4188790]();
  uint64_t v13 = v12;
  unsigned int v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = v11;
  STACK[0x8038] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v11 + 96;
  uint64_t v22 = (2 * v21);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, unint64_t *))(v11
                                                                                                 + 96
                                                                                                 + ((8 * ((v19 & 7) != 0)) | (16 * ((*(void *)&v19 & 0x70000) != 0)))))(v22, v16, v19, v23, v24, (int)v22, &STACK[0x4020]);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, uint64_t *))(v20
                                                                                        + ((8 * ((v15 & 7) != 0)) | (16 * ((*(void *)&v15 & 0x70000) != 0)))))(v22, v17, v15, v13, a9, (int)v22, &v26);
  return (*(uint64_t (**)(uint64_t, uint64_t, void, unint64_t *, void, uint64_t *, uint64_t, uint64_t))(v18 + 168))(v22, v17, (int)v22, &STACK[0x4020], (int)v22, &v26, a10, a11);
}

uint64_t sub_1D0CA6450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v26 = v13;
  unsigned int v25 = v14;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v19 = v12;
  STACK[0x4058] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v12 + 64;
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, unint64_t *))(v12
                                                                                                 + 64
                                                                                                 + ((8 * ((v20 & 3) != 0)) | (16 * ((*(void *)&v20 & 0x30000) != 0)))))(v17, v15, v20, v22, v23, (int)v17, &STACK[0x2040]);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, uint64_t *))(v21
                                                                                        + ((8 * ((a10 & 3) != 0)) | (16 * ((a10 & 0x30000) != 0)))))(v18, v16, a10, a11, a12, (int)v18, &v27);
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, unint64_t *, uint64_t, void))(v19 + 144))(v18, v16, v25, v26, (int)v18, &STACK[0x2040], a9, (int)v18);
}

uint64_t sub_1D0CA65C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v26 = v13;
  unsigned int v25 = v14;
  uint64_t v16 = v15;
  uint64_t v17 = v12;
  STACK[0x8058] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v12 + 96;
  uint64_t v21 = (2 * v20);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, unint64_t *))(v12
                                                                                                 + 96
                                                                                                 + ((8 * ((v18 & 7) != 0)) | (16 * ((*(void *)&v18 & 0x70000) != 0)))))(v21, v15, v18, v22, v23, (int)v21, &STACK[0x4040]);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, uint64_t *))(v19
                                                                                        + ((8 * ((a10 & 7) != 0)) | (16 * ((a10 & 0x70000) != 0)))))(v21, v16, a10, a11, a12, (int)v21, &v27);
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, unint64_t *, uint64_t, void))(v17 + 152))(v21, v16, v25, v26, (int)v21, &STACK[0x4040], a9, (int)v21);
}

uint64_t sub_1D0CA6748()
{
  if (dword_1EB671A40 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1D0CA67A8()
{
  if (dword_1EB671A40 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1D0CA6808()
{
  if (dword_1EB671A40 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1D0CA6868()
{
  if (dword_1EB671A40 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1D0CA68C8(void *a1)
{
  a1[4] = sub_1D0CBD470;
  a1[5] = sub_1D0CBE27C;
  a1[6] = sub_1D0CBDFF0;
  a1[7] = sub_1D0CBDC70;
  a1[12] = sub_1D0CBC5C0;
  a1[13] = sub_1D0CBDB20;
  a1[14] = sub_1D0CBD894;
  a1[15] = sub_1D0CBD520;
  a1[21] = sub_1D0CB029C;
  a1[17] = sub_1D0CB0150;
  a1[19] = sub_1D0CAFF84;
  return 0;
}

uint64_t sub_1D0CA6980(void *a1)
{
  *a1 = sub_1D0CBD470;
  a1[1] = sub_1D0CBD2CC;
  a1[2] = sub_1D0CBCE98;
  a1[3] = sub_1D0CBC698;
  a1[8] = sub_1D0CBC5C0;
  a1[9] = sub_1D0CBC41C;
  a1[10] = sub_1D0CBBFE8;
  a1[11] = sub_1D0CBB7F4;
  a1[20] = sub_1D0CB029C;
  a1[16] = sub_1D0CB0150;
  a1[18] = sub_1D0CAFF84;
  return 0;
}

uint64_t sub_1D0CA6A38()
{
  if (dword_1EB671A40 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1D0CA6A98()
{
  if (dword_1EB671A40 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1D0CA6AF8()
{
  if (dword_1EB671A40 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1D0CA6B58()
{
  if (dword_1EB671A40 >= 3)
  {
    fwrite("LSB reference buffers are only supported at 10bits currently\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "LSB reference buffers are only supported at 10bits currently\n");
  }
  return 4294954386;
}

uint64_t sub_1D0CA6BB8(void *a1)
{
  a1[4] = sub_1D0CB6AE0;
  a1[5] = sub_1D0CBB6A4;
  a1[6] = sub_1D0CBB404;
  a1[7] = sub_1D0CBB054;
  a1[12] = sub_1D0CB5ADC;
  a1[13] = sub_1D0CBAF04;
  a1[14] = sub_1D0CBAC64;
  a1[15] = sub_1D0CBA8C0;
  a1[21] = sub_1D0CB4A84;
  a1[17] = sub_1D0CB4938;
  a1[19] = sub_1D0CB476C;
  return 0;
}

uint64_t sub_1D0CA6C70(void *a1)
{
  *a1 = sub_1D0CB6AE0;
  a1[1] = sub_1D0CB6938;
  a1[2] = sub_1D0CB64BC;
  a1[3] = sub_1D0CB5BC4;
  a1[8] = sub_1D0CB5ADC;
  a1[9] = sub_1D0CB5934;
  a1[10] = sub_1D0CB54B8;
  a1[11] = sub_1D0CB4BCC;
  a1[20] = sub_1D0CB4A84;
  a1[16] = sub_1D0CB4938;
  a1[18] = sub_1D0CB476C;
  return 0;
}

uint64_t sub_1D0CA6D28(void *a1)
{
  a1[4] = sub_1D0CB46AC;
  a1[5] = sub_1D0CBA770;
  a1[6] = sub_1D0CBA4D0;
  a1[7] = sub_1D0CBA120;
  a1[12] = sub_1D0CB36A8;
  a1[13] = sub_1D0CB9FD0;
  a1[14] = sub_1D0CB9D30;
  a1[15] = sub_1D0CB998C;
  a1[21] = sub_1D0CB2650;
  a1[17] = sub_1D0CB2504;
  a1[19] = sub_1D0CB2338;
  return 0;
}

uint64_t sub_1D0CA6DE0(void *a1)
{
  *a1 = sub_1D0CB46AC;
  a1[1] = sub_1D0CB4504;
  a1[2] = sub_1D0CB4088;
  a1[3] = sub_1D0CB3790;
  a1[8] = sub_1D0CB36A8;
  a1[9] = sub_1D0CB3500;
  a1[10] = sub_1D0CB3084;
  a1[11] = sub_1D0CB2798;
  a1[20] = sub_1D0CB2650;
  a1[16] = sub_1D0CB2504;
  a1[18] = sub_1D0CB2338;
  return 0;
}

uint64_t sub_1D0CA6E98(void *a1)
{
  a1[4] = sub_1D0CB2278;
  a1[5] = sub_1D0CB982C;
  a1[6] = sub_1D0CB9578;
  a1[7] = sub_1D0CB91B8;
  a1[12] = sub_1D0CB12B4;
  a1[13] = sub_1D0CB9058;
  a1[14] = sub_1D0CB8DA4;
  a1[15] = sub_1D0CB89F0;
  a1[21] = sub_1D0CB029C;
  a1[17] = sub_1D0CB0150;
  a1[19] = sub_1D0CAFF84;
  return 0;
}

uint64_t sub_1D0CA6F50(void *a1)
{
  *a1 = sub_1D0CB2278;
  a1[1] = sub_1D0CB20C0;
  a1[2] = sub_1D0CB1C3C;
  a1[3] = sub_1D0CB139C;
  a1[8] = sub_1D0CB12B4;
  a1[9] = sub_1D0CB10FC;
  a1[10] = sub_1D0CB0C78;
  a1[11] = sub_1D0CB03E4;
  a1[20] = sub_1D0CB029C;
  a1[16] = sub_1D0CB0150;
  a1[18] = sub_1D0CAFF84;
  return 0;
}

uint64_t sub_1D0CA7008(void *a1)
{
  a1[4] = sub_1D0CAFEC4;
  a1[5] = sub_1D0CB88A0;
  a1[6] = sub_1D0CB8600;
  a1[7] = sub_1D0CB8250;
  a1[12] = sub_1D0CAEEC0;
  a1[13] = sub_1D0CB8100;
  a1[14] = sub_1D0CB7E60;
  a1[15] = sub_1D0CB7ABC;
  a1[21] = sub_1D0CADE68;
  a1[17] = sub_1D0CADD1C;
  a1[19] = sub_1D0CADB50;
  return 0;
}

uint64_t sub_1D0CA70C0(void *a1)
{
  *a1 = sub_1D0CAFEC4;
  a1[1] = sub_1D0CAFD1C;
  a1[2] = sub_1D0CAF8A0;
  a1[3] = sub_1D0CAEFA8;
  a1[8] = sub_1D0CAEEC0;
  a1[9] = sub_1D0CAED18;
  a1[10] = sub_1D0CAE89C;
  a1[11] = sub_1D0CADFB0;
  a1[20] = sub_1D0CADE68;
  a1[16] = sub_1D0CADD1C;
  a1[18] = sub_1D0CADB50;
  return 0;
}

uint64_t sub_1D0CA7178(void *a1)
{
  a1[4] = sub_1D0CADA90;
  a1[5] = sub_1D0CB796C;
  a1[6] = sub_1D0CB76CC;
  a1[7] = sub_1D0CB7328;
  a1[12] = sub_1D0CACAA8;
  a1[13] = sub_1D0CB71D8;
  a1[14] = sub_1D0CB6F38;
  a1[15] = sub_1D0CB6BA0;
  a1[21] = sub_1D0CABA6C;
  a1[17] = sub_1D0CAB920;
  a1[19] = sub_1D0CAB754;
  return 0;
}

uint64_t sub_1D0CA7230(void *a1)
{
  *a1 = sub_1D0CADA90;
  a1[1] = sub_1D0CAD8E8;
  a1[2] = sub_1D0CAD46C;
  a1[3] = sub_1D0CACB90;
  a1[8] = sub_1D0CACAA8;
  a1[9] = sub_1D0CAC900;
  a1[10] = sub_1D0CAC484;
  a1[11] = sub_1D0CABBB4;
  a1[20] = sub_1D0CABA6C;
  a1[16] = sub_1D0CAB920;
  a1[18] = sub_1D0CAB754;
  return 0;
}

int16x4_t *sub_1D0CA72E8(int16x4_t *result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, int8x16_t *a11)
{
  int16x8_t v12 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v11 = a4 + 1;
  int16x8_t v15 = (int16x8_t)vld1q_dup_f32(a7);
  unsigned int v14 = a7 + 1;
  uint64_t v16 = a9;
  int16x4_t v17 = (int16x4_t)vld1_dup_f32(v11);
  int16x4_t v18 = (int16x4_t)vld1_dup_f32(v14);
  int32x4_t v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v18, v17), vdupq_n_s32(a3)));
  int32x4_t v20 = vdupq_n_s32(~a3);
  if ((int)result < 16)
  {
    char v27 = (char)result;
  }
  else
  {
    uint64_t v21 = a9 + 2;
    uint64_t v22 = a6 + 2;
    do
    {
      uint64_t v23 = v22;
      uint64_t v24 = v21;
      int v25 = a2 + 1;
      uint64_t v26 = a11;
      do
      {
        int8x16_t *v26 = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, v23[-2], *(int16x4_t *)v12.i8), v24[-2], *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)v23[-2].i8, v12), *(int16x8_t *)v24[-2].i8, v15), v20))), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *v23, *(int16x4_t *)v12.i8), *v24, *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)v23->i8, v12), *(int16x8_t *)v24->i8, v15), v20)));
        uint64_t v26 = (int8x16_t *)((char *)v26 + a10);
        --v25;
        uint64_t v24 = (int16x4_t *)((char *)v24 + 2 * a8);
        uint64_t v23 = (int16x4_t *)((char *)v23 + 2 * a5);
      }
      while (v25 > 1);
      ++a11;
      a6 += 4;
      v16 += 4;
      char v27 = (_BYTE)result - 16;
      v21 += 4;
      v22 += 4;
      BOOL v28 = (int)result <= 31;
      __n128 result = (int16x4_t *)(result - 16);
    }
    while (!v28);
  }
  uint64_t v29 = 2 * a10;
  uint64_t v30 = 4 * a8;
  uint64_t v31 = 4 * a5;
  if ((v27 & 8) != 0)
  {
    int v32 = a2 + 2;
    __n128 result = a6;
    uint64_t v33 = v16;
    uint64_t v34 = (uint64_t *)a11;
    do
    {
      int8x16_t v35 = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *result, *(int16x4_t *)v12.i8), *v33, *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)result->i8, v12), *(int16x8_t *)v33->i8, v15), v20))), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)result + 2 * a5), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v33 + 2 * a8), *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_high_s16(
                    vmlal_high_s16(v19, *(int16x8_t *)&result->i8[2 * a5], v12),
                    *(int16x8_t *)&v33->i8[2 * a8],
                    v15),
                  v20)));
      *uint64_t v34 = v35.i64[0];
      *(uint64_t *)((char *)v34 + a10) = v35.i64[1];
      uint64_t v34 = (uint64_t *)((char *)v34 + v29);
      v32 -= 2;
      uint64_t v33 = (int16x4_t *)((char *)v33 + v30);
      __n128 result = (int16x4_t *)((char *)result + v31);
    }
    while (v32 > 2);
    a11 = (int8x16_t *)((char *)a11 + 8);
    a6 += 2;
    v16 += 2;
  }
  if ((v27 & 4) != 0)
  {
    int16x4_t v36 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    int16x4_t v37 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    int v38 = a2 + 2;
    do
    {
      int8x8_t v39 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v16, *(int16x4_t *)v15.i8), v20)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v36), *(int16x4_t *)((char *)v16 + 2 * a8), v37), v20)));
      a11->i32[0] = v39.i32[0];
      *(__int32 *)((char *)a11->i32 + a10) = v39.i32[1];
      a11 = (int8x16_t *)((char *)a11 + v29);
      v38 -= 2;
      uint64_t v16 = (int16x4_t *)((char *)v16 + v30);
      a6 = (int16x4_t *)((char *)a6 + v31);
    }
    while (v38 > 2);
  }
  return result;
}

uint64_t sub_1D0CA7520(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, int8x16_t *a8)
{
  int16x8_t v9 = (int16x8_t)vld1q_dup_f32(a4);
  int v8 = a4 + 1;
  int16x4_t v10 = (int16x4_t)vld1_dup_f32(v8);
  int32x4_t v11 = vdupq_n_s32(a3);
  int32x4_t v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  int32x4_t v13 = vnegq_s32(v11);
  if ((int)result < 16)
  {
    char v18 = result;
  }
  else
  {
    unsigned int v14 = a6 + 2;
    do
    {
      int16x8_t v15 = v14;
      int v16 = a2 + 1;
      int16x4_t v17 = a8;
      do
      {
        *int16x4_t v17 = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, v15[-2], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)v15[-2].i8, v9), v13))), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, *v15, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)v15->i8, v9), v13)));
        int16x4_t v17 = (int8x16_t *)((char *)v17 + a7);
        --v16;
        int16x8_t v15 = (int16x4_t *)((char *)v15 + 2 * a5);
      }
      while (v16 > 1);
      ++a8;
      a6 += 4;
      char v18 = result - 16;
      v14 += 4;
      BOOL v19 = (int)result <= 31;
      __n128 result = (result - 16);
    }
    while (!v19);
  }
  uint64_t v20 = 2 * a7;
  uint64_t v21 = 4 * a5;
  if ((v18 & 8) != 0)
  {
    int v22 = a2 + 2;
    uint64_t v23 = a6;
    uint64_t v24 = (uint64_t *)a8;
    do
    {
      int8x16_t v25 = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, *v23, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)v23->i8, v9), v13))), vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)v23 + 2 * a5), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v23->i8[2 * a5], v9), v13)));
      *uint64_t v24 = v25.i64[0];
      *(uint64_t *)((char *)v24 + a7) = v25.i64[1];
      uint64_t v24 = (uint64_t *)((char *)v24 + v20);
      v22 -= 2;
      uint64_t v23 = (int16x4_t *)((char *)v23 + v21);
    }
    while (v22 > 2);
    a8 = (int8x16_t *)((char *)a8 + 8);
    a6 += 2;
  }
  if ((v18 & 4) != 0)
  {
    int16x4_t v26 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    int v27 = a2 + 2;
    do
    {
      int8x8_t v28 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v26), v13)));
      a8->i32[0] = v28.i32[0];
      *(__int32 *)((char *)a8->i32 + a7) = v28.i32[1];
      a8 = (int8x16_t *)((char *)a8 + v20);
      v27 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v21);
    }
    while (v27 > 2);
  }
  return result;
}

double sub_1D0CA76D4(int a1, int a2, uint64_t a3, int16x8_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint8x16_t *a8)
{
  if (a1 < 16)
  {
    char v16 = a1;
  }
  else
  {
    int v8 = (int16x8_t *)(a6 + 2);
    int16x8_t v9 = a4 + 1;
    do
    {
      int16x4_t v10 = v9;
      int32x4_t v11 = v8;
      int v12 = a2 + 1;
      int32x4_t v13 = a8;
      do
      {
        int16x8_t v14 = (int16x8_t)vqrshrn_high_n_s16(vqrshrn_n_s16(vhaddq_s16(v10[-1], v11[-1]), 6uLL), vhaddq_s16(*v10, *v11), 6uLL);
        v15.i64[0] = 0x8080808080808080;
        v15.i64[1] = 0x8080808080808080;
        *int32x4_t v13 = vsqaddq_u8(v15, (int8x16_t)v14);
        int32x4_t v13 = (uint8x16_t *)((char *)v13 + a7);
        --v12;
        int32x4_t v11 = (int16x8_t *)((char *)v11 + 2 * a5);
        int16x4_t v10 = (int16x8_t *)((char *)v10 + 2 * a3);
      }
      while (v12 > 1);
      ++a8;
      a4 += 2;
      a6 += 4;
      char v16 = a1 - 16;
      v8 += 2;
      v9 += 2;
      BOOL v17 = a1 <= 31;
      a1 -= 16;
    }
    while (!v17);
  }
  uint64_t v18 = 2 * a7;
  uint64_t v19 = 4 * a5;
  uint64_t v20 = 4 * a3;
  if ((v16 & 8) != 0)
  {
    int v21 = a2 + 2;
    int v22 = a4;
    uint64_t v23 = (int16x8_t *)a6;
    uint64_t v24 = (uint64_t *)a8;
    do
    {
      int16x8_t v14 = (int16x8_t)vqrshrn_high_n_s16(vqrshrn_n_s16(vhaddq_s16(*v22, *v23), 6uLL), vhaddq_s16(*(int16x8_t *)((char *)v22 + 2 * a3), *(int16x8_t *)((char *)v23 + 2 * a5)), 6uLL);
      v25.i64[0] = 0x8080808080808080;
      v25.i64[1] = 0x8080808080808080;
      uint8x16_t v26 = vsqaddq_u8(v25, (int8x16_t)v14);
      *uint64_t v24 = v26.i64[0];
      *(uint64_t *)((char *)v24 + a7) = v26.i64[1];
      uint64_t v24 = (uint64_t *)((char *)v24 + v18);
      v21 -= 2;
      uint64_t v23 = (int16x8_t *)((char *)v23 + v19);
      int v22 = (int16x8_t *)((char *)v22 + v20);
    }
    while (v21 > 2);
    a8 = (uint8x16_t *)((char *)a8 + 8);
    ++a4;
    a6 += 2;
  }
  if ((v16 & 4) != 0)
  {
    int v27 = a2 + 2;
    do
    {
      uint64_t v28 = a4->i64[0];
      v14.i64[1] = *(uint64_t *)((char *)a4->i64 + 2 * a3);
      v29.i64[0] = *a6;
      v29.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      *(int8x8_t *)v14.i8 = vqrshrn_n_s16(vhaddq_s16(v14, v29), 6uLL);
      *(uint8x8_t *)v29.i8 = vsqadd_u8((uint8x8_t)0x8080808080808080, *(int8x8_t *)v14.i8);
      a8->i32[0] = v29.i32[0];
      *(__int32 *)((char *)a8->i32 + a7) = v29.i32[1];
      a8 = (uint8x16_t *)((char *)a8 + v18);
      v27 -= 2;
      a6 = (uint64_t *)((char *)a6 + v19);
      a4 = (int16x8_t *)((char *)a4 + v20);
    }
    while (v27 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1D0CA7838(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 4 * a4;
  uint64_t v8 = 8 * a4;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int8x8_t v9 = (int8x8_t)qword_1D0D7FB90[(a3 & 3) - 1];
  uint8x8_t v185 = (uint8x8_t)vdup_lane_s8(v9, 1);
  uint8x8_t v186 = (uint8x8_t)vdup_lane_s8(v9, 0);
  int16x8_t v10 = (int16x8_t)vmovl_u8(qword_1D0D7FB90[((a3 >> 16) & 3) - 1]);
  uint64_t v11 = -3 * a4 - 3;
  int v12 = (char *)a7 + 2 * a6;
  uint8x8_t v183 = (uint8x8_t)vdup_lane_s8(v9, 3);
  uint8x8_t v184 = (uint8x8_t)vdup_lane_s8(v9, 2);
  uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v9, 4);
  uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v9, 5);
  uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v9, 6);
  uint8x8_t v16 = (uint8x8_t)vdup_lane_s8(v9, 7);
  uint64_t v17 = 5 * a4;
  v18.i64[0] = 0x700000007;
  v18.i64[1] = 0x700000007;
  do
  {
    uint64_t v19 = 0;
    _X21 = a5 + v11 + v7;
    int v21 = (int8x16_t *)(a5 + v11 + a4);
    _X20 = a5 + v11 + 31;
    int8x16_t v23 = *(int8x16_t *)(a5 + v11);
    __asm
    {
      PRFM            #0, [X20]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X20 = &v21->i8[v7];
    _X21 = &v21[1].i8[15];
    int8x16_t v33 = *v21;
    _X22 = &v21->i8[a4];
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &_X22[v7];
    _X21 = &_X22[a4];
    int8x16_t v40 = *(int8x16_t *)_X22;
    _X22 += 31;
    int8x16_t v41 = v40;
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &_X21[v7];
    int v46 = (int8x16_t *)&_X21[a4];
    int8x16_t v47 = *(int8x16_t *)_X21;
    _X21 += 31;
    int8x16_t v48 = v47;
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &v46->i8[v7];
    _X21 = &v46[1].i8[15];
    int8x16_t v54 = *v46;
    _X22 = &v46->i8[a4];
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &_X22[v7];
    _X21 = &_X22[a4];
    int8x16_t v61 = *(int8x16_t *)_X22;
    _X22 += 31;
    int8x16_t v62 = v61;
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    _X20 = &_X21[v7];
    int16x8_t v67 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 1uLL), v185), *(uint8x8_t *)v23.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 7uLL),
                       v16);
    int8x16_t v68 = *(int8x16_t *)_X21;
    _X21 += 31;
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0xF]
    }
    int16x8_t v72 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 1uLL), v185), *(uint8x8_t *)v33.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 7uLL),
                       v16);
    int16x8_t v73 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 1uLL), v185), *(uint8x8_t *)v41.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 7uLL),
                       v16);
    int16x8_t v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 1uLL), v185), *(uint8x8_t *)v48.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 7uLL),
                       v16);
    int16x8_t v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 1uLL), v185), *(uint8x8_t *)v54.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 7uLL),
                       v16);
    int16x8_t v76 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 1uLL), v185), *(uint8x8_t *)v62.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 7uLL),
                       v16);
    int16x8_t v77 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 1uLL), v185), *(uint8x8_t *)v68.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 5uLL), v14),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v68, v68, 7uLL),
                       v16);
    uint64_t v78 = a5;
    int v79 = a2 + 2;
    do
    {
      int32x4_t v80 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v81 = vmlsl_high_lane_s16(vmull_high_lane_s16(v72, *(int16x4_t *)v10.i8, 1), v67, *(int16x4_t *)v10.i8, 0);
      int16x8_t v67 = v73;
      _X22 = v78 + v7;
      int8x16_t v83 = *(int8x16_t *)(v78 + v7 - 3);
      __asm { PRFUM           #0, [X22,#0x1C] }
      _X22 = v78 + v8 - 3;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0xF]
      }
      _X22 = v78 + v17;
      int8x16_t v89 = *(int8x16_t *)(v78 + v17 - 3);
      int32x4_t v90 = vmull_lane_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 1);
      int32x4_t v91 = vmull_high_lane_s16(v73, *(int16x4_t *)v10.i8, 1);
      int32x4_t v92 = vmlsl_lane_s16(v80, *(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 2);
      int32x4_t v93 = vmlsl_high_lane_s16(v81, v73, *(int16x4_t *)v10.i8, 2);
      int16x8_t v73 = v75;
      __asm { PRFUM           #0, [X22,#0x1C] }
      _X22 = v78 + v8 - 3 + a4;
      __asm { PRFM            #0, [X22] }
      int32x4_t v97 = vmlsl_lane_s16(v90, *(int16x4_t *)v72.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v98 = vmlsl_high_lane_s16(v91, v72, *(int16x4_t *)v10.i8, 0);
      int16x8_t v72 = v74;
      __asm { PRFUM           #0, [X22,#0xF] }
      int32x4_t v100 = vmlal_lane_s16(vaddq_s32(v92, v18), *(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 3);
      int32x4_t v101 = vmlal_high_lane_s16(vaddq_s32(v93, v18), v74, *(int16x4_t *)v10.i8, 3);
      int32x4_t v102 = vmlsl_lane_s16(v97, *(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 2);
      int32x4_t v103 = vmlsl_high_lane_s16(v98, v74, *(int16x4_t *)v10.i8, 2);
      int16x8_t v74 = v76;
      int16x8_t v75 = v77;
      int16x8_t v77 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 1uLL), v185), *(uint8x8_t *)v89.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 5uLL), v14),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 7uLL),
                         v16);
      int16x8_t v76 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 1uLL), v185), *(uint8x8_t *)v83.i8, v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 2uLL), v184), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 3uLL), v183), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 5uLL), v14),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 7uLL),
                         v16);
      *(int16x8_t *)&a7->i8[v19] = vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v100, *(int16x4_t *)v73.i8, v10, 4), *(int16x4_t *)v75.i8, v10, 6), *(int16x4_t *)v74.i8, v10, 5), *(int16x4_t *)v76.i8, v10, 7), 6uLL), vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v101, v73, v10, 4), v75, v10, 6), v74,
                                         v10,
                                         5),
                                       v76,
                                       v10,
                                       7),
                                     6uLL);
      *(int16x8_t *)&v12[v19] = vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vaddq_s32(v102, v18), *(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v74.i8, v10, 4), *(int16x4_t *)v76.i8, v10, 6), *(int16x4_t *)v75.i8, v10, 5),
                                      *(int16x4_t *)v77.i8,
                                      v10,
                                      7),
                                    6uLL),
                                  vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vaddq_s32(v103, v18), v73, *(int16x4_t *)v10.i8, 3), v74, v10, 4), v76, v10, 6), v75, v10, 5), v77, v10, 7), 6uLL);
      v19 += 4 * a6;
      v79 -= 2;
      v78 += 2 * a4;
    }
    while (v79 > 2);
    a7 += 2;
    a5 += 8;
    int v104 = result - 8;
    v12 += 16;
    BOOL v105 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v105);
  if (v104)
  {
LABEL_9:
    int8x8_t v106 = (int8x8_t)qword_1D0D7FB90[((a3 >> 16) & 3) - 1];
    _X10 = -3 * a4 + a5;
    uint8x16_t v108 = *(uint8x16_t *)(_X10 - 3);
    _X10 -= 3;
    uint8x16_t v109 = v108;
    __asm { PRFUM           #0, [X10,#0x1F] }
    _X11 = _X10 + 4 * a4;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    _X10 = (_OWORD *)(_X10 + a4);
    _X11 = (char *)_X10 + 4 * a4;
    _X12 = (_OWORD *)((char *)_X10 + a4);
    int8x16_t v117 = *(int8x16_t *)_X10;
    _X10 = (_OWORD *)((char *)_X10 + 31);
    int8x16_t v118 = v117;
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    _X10 = (char *)_X12 + 4 * a4;
    _X11 = (_OWORD *)((char *)_X12 + a4);
    int8x16_t v124 = *(int8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    int8x16_t v125 = v124;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = (char *)_X11 + 4 * a4;
    _X12 = (_OWORD *)((char *)_X11 + a4);
    int8x16_t v131 = *(int8x16_t *)_X11;
    _X11 = (_OWORD *)((char *)_X11 + 31);
    int8x16_t v132 = v131;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = (char *)_X12 + 4 * a4;
    _X11 = (_OWORD *)((char *)_X12 + a4);
    uint8x16_t v138 = *(uint8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    uint8x16_t v139 = v138;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = (char *)_X11 + 4 * a4;
    _X12 = (_OWORD *)((char *)_X11 + a4);
    int8x16_t v145 = *(int8x16_t *)_X11;
    _X11 = (_OWORD *)((char *)_X11 + 31);
    int8x16_t v146 = v145;
    int16x8_t v147 = (int16x8_t)vmovl_u8(qword_1D0D7FB90[(a3 & 3) - 1]);
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X13 = (char *)_X12 + 4 * a4;
    int8x16_t v152 = *(int8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    int8x16_t v153 = v152;
    __asm { PRFM            #0, [X12] }
    int v155 = a2 + 1;
    __asm { PRFM            #0, [X13] }
    uint64_t v157 = v8 - 3;
    int8x16_t v158 = vdupq_lane_s8(v106, 2);
    uint8x8_t v159 = (uint8x8_t)vextq_s8(v158, v158, 8uLL).u64[0];
    int8x16_t v160 = vdupq_lane_s8(v106, 3);
    uint8x8_t v161 = (uint8x8_t)vextq_s8(v160, v160, 8uLL).u64[0];
    int8x16_t v162 = vdupq_lane_s8(v106, 4);
    uint8x8_t v163 = (uint8x8_t)vextq_s8(v162, v162, 8uLL).u64[0];
    int8x16_t v164 = vdupq_lane_s8(v106, 6);
    __asm { PRFUM           #0, [X13,#0xF] }
    uint8x8_t v166 = (uint8x8_t)vextq_s8(v164, v164, 8uLL).u64[0];
    uint8x16_t v167 = (uint8x16_t)vdupq_lane_s8(v106, 0);
    int8x16_t v168 = vdupq_lane_s8(v106, 7);
    uint8x8_t v169 = (uint8x8_t)vextq_s8(v168, v168, 8uLL).u64[0];
    uint8x16_t v170 = (uint8x16_t)vdupq_lane_s8(v106, 1);
    v171.i64[0] = 0x700000007;
    v171.i64[1] = 0x700000007;
    uint8x16_t v172 = (uint8x16_t)vdupq_lane_s8(v106, 5);
    do
    {
      uint16x8_t v173 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v118.i8, *(uint8x8_t *)v170.i8), *(uint8x8_t *)v109.i8, *(uint8x8_t *)v167.i8);
      uint16x8_t v174 = vmull_high_u8((uint8x16_t)v118, v170);
      uint16x8_t v175 = vmull_high_u8(v109, v167);
      uint8x16_t v109 = (uint8x16_t)v118;
      int8x16_t v118 = v125;
      int8x16_t v125 = v132;
      int8x16_t v132 = (int8x16_t)v139;
      uint8x16_t v139 = (uint8x16_t)v146;
      int8x16_t v146 = v153;
      _X12 = a5 + v7;
      int8x16_t v153 = *(int8x16_t *)(a5 + v7 - 3);
      _X13 = a5 + v157;
      __asm
      {
        PRFUM           #0, [X12,#0x1C]
        PRFM            #0, [X13]
      }
      int16x8_t v180 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(v173, *(uint8x8_t *)v118.i8, *(uint8x8_t *)v158.i8), *(uint8x8_t *)v125.i8, *(uint8x8_t *)v160.i8), *(uint8x8_t *)v132.i8, *(uint8x8_t *)v162.i8), *(uint8x8_t *)v146.i8, *(uint8x8_t *)v164.i8), *(uint8x8_t *)v139.i8, *(uint8x8_t *)v172.i8), *(uint8x8_t *)v153.i8, *(uint8x8_t *)v168.i8);
      *(int16x4_t *)v174.i8 = vsub_s16(*(int16x4_t *)v174.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v175, (uint8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), v159));
      int8x16_t v181 = (int8x16_t)vmlal_u8(vmlal_u8(vmlal_u8(v174, (uint8x8_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL), v161), (uint8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL), v163), (uint8x8_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL), v166);
      *(int16x4_t *)v181.i8 = vsub_s16(*(int16x4_t *)v181.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v139, v172), (uint8x8_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL), v169));
      __asm { PRFUM           #0, [X13,#0xF] }
      *a7 = vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_lane_s16(vaddq_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 2uLL), *(int16x4_t *)v147.i8, 1), *(int16x4_t *)v180.i8, *(int16x4_t *)v147.i8, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 4uLL), *(int16x4_t *)v147.i8, 2), v171),
                        (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 6uLL),
                        *(int16x4_t *)v147.i8,
                        3),
                      v180,
                      v147,
                      4),
                    (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, v181, 0xCuLL),
                    v147,
                    6),
                  (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, v181, 0xAuLL),
                  v147,
                  5),
                (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, v181, 0xEuLL),
                v147,
                7),
              6uLL);
      a7 = (int16x4_t *)((char *)a7 + 2 * a6);
      --v155;
      a5 += a4;
    }
    while (v155 > 1);
  }
  return result;
}

uint64_t sub_1D0CA7F18(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v8 = (a3 >> 16) & 3;
  uint64_t v9 = 4 * a4;
  uint64_t v10 = a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 16)
  {
    char v96 = result;
    if ((result & 8) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    int8x8_t v12 = (int8x8_t)qword_1D0D7FB90[v8 - 1];
    uint8x16_t v13 = (uint8x16_t)vdupq_lane_s8(v12, 0);
    uint8x16_t v14 = (uint8x16_t)vdupq_lane_s8(v12, 1);
    uint8x16_t v15 = (uint8x16_t)vdupq_lane_s8(v12, 2);
    uint8x16_t v16 = (uint8x16_t)vdupq_lane_s8(v12, 3);
    uint8x16_t v17 = (uint8x16_t)vdupq_lane_s8(v12, 4);
    uint8x16_t v18 = (uint8x16_t)vdupq_lane_s8(v12, 5);
    uint8x16_t v19 = (uint8x16_t)vdupq_lane_s8(v12, 6);
    uint8x16_t v20 = (uint8x16_t)vdupq_lane_s8(v12, 7);
    v21.i64[0] = 0xE000E000E000E000;
    v21.i64[1] = 0xE000E000E000E000;
    do
    {
      _X5 = (char *)a5 + v9 + -3 * a4;
      _X7 = (uint64_t)&a5[3] - 3 * a4 + 7;
      uint8x16_t v24 = *(uint8x16_t *)&a5->i8[-3 * a4];
      _X17 = (_OWORD *)((char *)a5 + a4 + -3 * a4);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#0xF]
      }
      _X5 = (char *)_X17 + v9;
      _X7 = (_OWORD *)((char *)_X17 + a4);
      uint8x16_t v35 = *(uint8x16_t *)_X17;
      _X17 = (_OWORD *)((char *)_X17 + 31);
      uint8x16_t v36 = v35;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#0xF]
      }
      _X17 = (char *)_X7 + v9;
      int8x16_t v41 = (uint8x16_t *)((char *)_X7 + a4);
      uint8x16_t v42 = *(uint8x16_t *)_X7;
      _X7 = (_OWORD *)((char *)_X7 + 31);
      uint8x16_t v43 = v42;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X17 = &v41->i8[v9];
      _X7 = &v41[1].i8[15];
      uint8x16_t v49 = *v41;
      _X5 = &v41->i8[a4];
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X17 = &_X5[v9];
      _X7 = &_X5[a4];
      uint8x16_t v56 = *(uint8x16_t *)_X5;
      _X5 += 31;
      uint8x16_t v57 = v56;
      __asm
      {
        PRFM            #0, [X5]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X17 = &_X7[v9];
      _X5 = &_X7[a4];
      uint8x16_t v63 = *(uint8x16_t *)_X7;
      _X7 += 31;
      uint8x16_t v64 = v63;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X7 = &_X5[v9];
      uint8x16_t v69 = *(uint8x16_t *)_X5;
      _X5 += 31;
      uint8x16_t v70 = v69;
      __asm
      {
        PRFM            #0, [X5]
        PRFM            #0, [X7]
      }
      int16x8_t v73 = a5;
      int v74 = a2 + 2;
      __asm { PRFUM           #0, [X7,#0xF] }
      int16x8_t v76 = (uint16x8_t *)a7;
      do
      {
        uint16x8_t v77 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v13.i8);
        uint16x8_t v78 = vmlsl_high_u8(vmull_high_u8(v43, v14), v36, v13);
        int16x8_t v79 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v13.i8), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v15.i8);
        int16x8_t v80 = (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmull_high_u8(v36, v14), v24, v13), v43, v15);
        uint8x16_t v24 = v43;
        uint8x16_t v43 = v57;
        uint16x8_t v81 = vmlal_u8((uint16x8_t)vaddq_s16(v79, v21), *(uint8x8_t *)v49.i8, *(uint8x8_t *)v16.i8);
        uint16x8_t v82 = vmlal_high_u8((uint16x8_t)vaddq_s16(v80, v21), v49, v16);
        int16x8_t v83 = (int16x8_t)vmlsl_u8(v77, *(uint8x8_t *)v49.i8, *(uint8x8_t *)v15.i8);
        int16x8_t v84 = (int16x8_t)vmlsl_high_u8(v78, v49, v15);
        uint8x16_t v36 = v49;
        uint8x16_t v49 = v64;
        uint8x16_t v57 = v70;
        _X19 = (uint64_t)&v73[3] + v9 + 7;
        uint8x16_t v64 = *(uint8x16_t *)&v73->i8[4 * a4];
        __asm { PRFM            #0, [X19] }
        _X19 = &v73[v10];
        __asm
        {
          PRFM            #0, [X19]
          PRFUM           #0, [X19,#0xF]
        }
        _X19 = (uint64_t)&v73[3] + 5 * a4 + 7;
        uint8x16_t v70 = *(uint8x16_t *)&v73->i8[5 * a4];
        __asm { PRFM            #0, [X19] }
        _X19 = (char *)v73 + 9 * a4;
        __asm
        {
          PRFM            #0, [X19]
          PRFUM           #0, [X19,#0xF]
        }
        *int16x8_t v76 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v81, *(uint8x8_t *)v43.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v57.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v49.i8, *(uint8x8_t *)v18.i8), *(uint8x8_t *)v64.i8, *(uint8x8_t *)v20.i8);
        v76[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v82, v43, v17), v57, v19), v49, v18), v64, v20);
        v95 = (uint16x8_t *)((char *)v76 + v11);
        uint16x8_t *v95 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v83, v21), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v16.i8), *(uint8x8_t *)v49.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v64.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v57.i8, *(uint8x8_t *)v18.i8), *(uint8x8_t *)v70.i8, *(uint8x8_t *)v20.i8);
        v95[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(vmlal_high_u8((uint16x8_t)vaddq_s16(v84, v21), v43, v16), v49, v17), v64, v19), v57, v18), v70, v20);
        v74 -= 2;
        int16x8_t v73 = (uint8x8_t *)((char *)v73 + 2 * a4);
        int16x8_t v76 = (uint16x8_t *)((char *)v95 + v11);
      }
      while (v74 > 2);
      a7 += 4;
      a5 += 2;
      char v96 = result - 16;
      BOOL v97 = result > 0x1F;
      __n128 result = (result - 16);
    }
    while (v97);
    if ((v96 & 8) == 0)
    {
LABEL_7:
      if ((v96 & 4) == 0) {
        return result;
      }
      goto LABEL_13;
    }
  }
  int8x8_t v98 = (int8x8_t)qword_1D0D7FB90[v8 - 1];
  _X13 = (uint8x8_t *)((char *)a5 - 3 * a4);
  _X14 = (char *)_X13 + 4 * a4;
  _X15 = (uint8x8_t *)((char *)_X13 + a4);
  uint8x8_t v102 = *_X13;
  _X13 = (uint8x8_t *)((char *)_X13 + 15);
  uint8x8_t v103 = v102;
  __asm
  {
    PRFM            #0, [X13]
    PRFM            #0, [X14]
    PRFUM           #0, [X14,#7]
  }
  _X13 = (char *)_X15 + 4 * a4;
  _X14 = (uint8x8_t *)((char *)_X15 + a4);
  uint8x8_t v109 = *_X15;
  _X15 = (uint8x8_t *)((char *)_X15 + 15);
  uint8x8_t v110 = v109;
  __asm
  {
    PRFM            #0, [X15]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X13 = (char *)_X14 + 4 * a4;
  _X15 = (uint8x8_t *)((char *)_X14 + a4);
  uint8x8_t v116 = *_X14;
  _X14 = (uint8x8_t *)((char *)_X14 + 15);
  uint8x8_t v117 = v116;
  __asm
  {
    PRFM            #0, [X14]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X13 = (char *)_X15 + 4 * a4;
  _X14 = (uint8x8_t *)((char *)_X15 + a4);
  uint8x8_t v123 = *_X15;
  _X15 = (uint8x8_t *)((char *)_X15 + 15);
  uint8x8_t v124 = v123;
  __asm
  {
    PRFM            #0, [X15]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X13 = (char *)_X14 + 4 * a4;
  _X15 = (uint8x8_t *)((char *)_X14 + a4);
  uint8x8_t v130 = *_X14;
  _X14 = (uint8x8_t *)((char *)_X14 + 15);
  uint8x8_t v131 = v130;
  __asm
  {
    PRFM            #0, [X14]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X13 = (char *)_X15 + 4 * a4;
  _X14 = (uint8x8_t *)((char *)_X15 + a4);
  uint8x8_t v137 = *_X15;
  _X15 = (uint8x8_t *)((char *)_X15 + 15);
  uint8x8_t v138 = v137;
  __asm
  {
    PRFM            #0, [X15]
    PRFM            #0, [X13]
    PRFUM           #0, [X13,#7]
  }
  _X7 = (char *)_X14 + 4 * a4;
  uint8x8_t v143 = *_X14;
  _X14 = (uint8x8_t *)((char *)_X14 + 15);
  uint8x8_t v144 = v143;
  __asm
  {
    PRFM            #0, [X14]
    PRFM            #0, [X7]
  }
  int v147 = a2 + 4;
  __n128 result = 10 * a4;
  uint8x8_t v148 = (uint8x8_t)vdup_lane_s8(v98, 1);
  uint8x8_t v149 = (uint8x8_t)vdup_lane_s8(v98, 0);
  uint8x8_t v150 = (uint8x8_t)vdup_lane_s8(v98, 2);
  uint8x8_t v151 = (uint8x8_t)vdup_lane_s8(v98, 3);
  uint8x8_t v152 = (uint8x8_t)vdup_lane_s8(v98, 4);
  uint8x8_t v153 = (uint8x8_t)vdup_lane_s8(v98, 5);
  uint8x8_t v154 = (uint8x8_t)vdup_lane_s8(v98, 6);
  __asm { PRFUM           #0, [X7,#7] }
  v156.i64[0] = 0xE000E000E000E000;
  v156.i64[1] = 0xE000E000E000E000;
  uint64_t v157 = a5;
  int8x16_t v158 = (uint16x8_t *)a7;
  uint8x8_t v159 = (uint8x8_t)vdup_lane_s8(v98, 7);
  do
  {
    uint16x8_t v160 = vmlsl_u8(vmull_u8(v110, v148), v103, v149);
    uint8x8_t v103 = v131;
    uint16x8_t v161 = vmull_u8(v124, v148);
    uint16x8_t v162 = vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(v160, v117, v150), v156), v124, v151);
    int16x8_t v163 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8(v117, v148), v110, v149), v124, v150);
    uint16x8_t v164 = vmlsl_u8(vmull_u8(v103, v148), v124, v149);
    _X21 = (uint64_t)&v157[1] + v9 + 7;
    uint8x8_t v124 = *(uint8x8_t *)((char *)v157 + 4 * a4);
    _X22 = &v157[v10];
    _X23 = (uint8x8_t *)((char *)v157 + 5 * a4);
    _X24 = (char *)v157 + 9 * a4;
    _X25 = (uint8x8_t *)((char *)v157 + 6 * a4);
    _X26 = (char *)v157 + result;
    _X27 = (uint8x8_t *)((char *)v157 + 7 * a4);
    _X28 = (char *)v157 + 11 * a4;
    uint64_t v157 = (uint8x8_t *)((char *)v157 + v9);
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X22]
      PRFUM           #0, [X22,#7]
    }
    uint16x8_t v176 = vmlal_u8((uint16x8_t)vaddq_s16(v163, v156), v103, v151);
    uint8x8_t v177 = *_X23;
    _X23 = (uint8x8_t *)((char *)_X23 + 15);
    uint8x8_t v131 = v177;
    __asm
    {
      PRFM            #0, [X23]
      PRFM            #0, [X24]
      PRFUM           #0, [X24,#7]
    }
    uint8x8_t v110 = v138;
    uint16x8_t v181 = vmlsl_u8(vmlal_u8(vmlal_u8(v162, v103, v152), v144, v154), v138, v153);
    uint16x8_t v182 = vmlal_u8(v176, v138, v152);
    uint16x8_t v183 = vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(vmlsl_u8(v161, v117, v149), v103, v150), v156), v138, v151);
    int16x8_t v184 = (int16x8_t)vmlsl_u8(v164, v138, v150);
    uint8x8_t v185 = *_X25;
    _X25 = (uint8x8_t *)((char *)_X25 + 15);
    uint8x8_t v138 = v185;
    __asm
    {
      PRFM            #0, [X25]
      PRFM            #0, [X26]
      PRFUM           #0, [X26,#7]
    }
    uint16x8_t v189 = vmlsl_u8(vmlal_u8(v182, v124, v154), v144, v153);
    uint16x8_t v190 = vmlal_u8(v183, v144, v152);
    uint16x8_t v191 = vmlal_u8((uint16x8_t)vaddq_s16(v184, v156), v144, v151);
    uint8x8_t v117 = v144;
    uint8x8_t v192 = *_X27;
    _X27 = (uint8x8_t *)((char *)_X27 + 15);
    uint8x8_t v144 = v192;
    __asm
    {
      PRFM            #0, [X27]
      PRFM            #0, [X28]
      PRFUM           #0, [X28,#7]
    }
    *int8x16_t v158 = vmlsl_u8(v181, v124, v159);
    v196 = (uint16x8_t *)((char *)v158 + v11);
    uint16x8_t *v196 = vmlsl_u8(v189, v131, v159);
    v197 = (uint16x8_t *)((char *)v196 + v11);
    uint16x8_t *v197 = vmlsl_u8(vmlsl_u8(vmlal_u8(v190, v131, v154), v124, v153), v138, v159);
    v198 = (uint16x8_t *)((char *)v197 + v11);
    uint16x8_t *v198 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v191, v124, v152), v138, v154), v131, v153), v192, v159);
    v147 -= 4;
    int8x16_t v158 = (uint16x8_t *)((char *)v198 + v11);
  }
  while (v147 > 4);
  a7 += 2;
  ++a5;
  if ((v96 & 4) != 0)
  {
LABEL_13:
    int8x8_t v199 = (int8x8_t)qword_1D0D7FB90[v8 - 1];
    _X11 = (uint8x8_t *)((char *)a5 - 3 * a4);
    _X12 = (char *)_X11 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X11 + a4);
    uint8x8_t v203 = *_X11;
    _X11 = (uint8x8_t *)((char *)_X11 + 15);
    uint8x8_t v204 = v203;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#7]
    }
    _X11 = (char *)_X13 + 4 * a4;
    _X12 = (uint8x8_t *)((char *)_X13 + a4);
    uint8x8_t v210 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    uint8x8_t v211 = v210;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)_X12 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X12 + a4);
    uint8x8_t v217 = *_X12;
    _X12 = (uint8x8_t *)((char *)_X12 + 15);
    uint8x8_t v218 = v217;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)_X13 + 4 * a4;
    _X12 = (uint8x8_t *)((char *)_X13 + a4);
    uint8x8_t v224 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    uint8x8_t v225 = v224;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)_X12 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X12 + a4);
    uint8x8_t v231 = *_X12;
    _X12 = (uint8x8_t *)((char *)_X12 + 15);
    uint8x8_t v232 = v231;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)_X13 + 4 * a4;
    v237 = (uint8x8_t *)((char *)_X13 + a4);
    uint8x8_t v238 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    uint8x8_t v239 = v238;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X11 = (char *)&v237[1] + 7;
    uint8x8_t v244 = *v237;
    _X12 = (char *)v237 + 4 * a4;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#7]
    }
    int v249 = a2 + 4;
    uint64_t v250 = 11 * a4;
    uint64_t v251 = 7 * a4;
    uint64_t v252 = 5 * a4;
    uint64_t v253 = 10 * a4;
    uint64_t v254 = 6 * a4;
    uint8x8_t v255 = (uint8x8_t)vdup_lane_s8(v199, 1);
    uint8x8_t v256 = (uint8x8_t)vdup_lane_s8(v199, 0);
    uint8x8_t v257 = (uint8x8_t)vdup_lane_s8(v199, 2);
    uint8x8_t v258 = (uint8x8_t)vdup_lane_s8(v199, 3);
    uint8x8_t v259 = (uint8x8_t)vdup_lane_s8(v199, 4);
    uint8x8_t v260 = (uint8x8_t)vdup_lane_s8(v199, 5);
    uint64_t v261 = 9 * a4;
    uint8x8_t v262 = (uint8x8_t)vdup_lane_s8(v199, 6);
    uint8x8_t v263 = (uint8x8_t)vdup_lane_s8(v199, 7);
    do
    {
      _X2 = &a5[v10];
      _X0 = (uint8x8_t *)((char *)a5 + v252);
      _X3 = (char *)a5 + v261;
      _X1 = (uint8x8_t *)((char *)a5 + v254);
      _X7 = (char *)a5 + v253;
      _X5 = (uint8x8_t *)((char *)a5 + v251);
      _X20 = (char *)a5 + v250;
      a5 = (uint8x8_t *)((char *)a5 + v9);
      uint16x8_t v271 = vmull_u8(v211, v255);
      uint16x8_t v272 = vmull_u8(v225, v255);
      uint16x8_t v273 = vmull_u8(v225, v256);
      *(int16x4_t *)v271.i8 = vsub_s16(*(int16x4_t *)v271.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v204, v256), v218, v257));
      uint16x8_t v274 = vmlal_u8(v271, v225, v258);
      int16x4_t v275 = (int16x4_t)vmlal_u8(vmull_u8(v211, v256), v225, v257).u64[0];
      _X19 = (char *)&a5[1] + 7;
      uint8x8_t v225 = *a5;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X2]
        PRFUM           #0, [X2,#7]
      }
      int16x4_t v280 = (int16x4_t)vmull_u8(v232, v255).u64[0];
      uint16x8_t v281 = vmlal_u8(v274, v232, v259);
      *(int16x4_t *)v7.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmull_u8(v218, v255), v275);
      uint16x8_t v282 = vmlal_u8(v7, v232, v258);
      int16x4_t v283 = (int16x4_t)vmlal_u8(vmull_u8(v218, v256), v232, v257).u64[0];
      uint8x8_t v204 = v232;
      uint8x8_t v284 = *_X0;
      _X0 = (uint8x8_t *)((char *)_X0 + 15);
      uint8x8_t v232 = v284;
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X3]
        PRFUM           #0, [X3,#7]
      }
      uint16x8_t v288 = vmull_u8(v239, v260);
      uint16x8_t v289 = vmlal_u8(v282, v239, v259);
      *(int16x4_t *)v272.i8 = vsub_s16(*(int16x4_t *)v272.i8, v283);
      uint16x8_t v290 = vmlal_u8(v272, v239, v258);
      uint16x8_t v291 = vmlal_u8(v273, v239, v257);
      uint8x8_t v211 = v239;
      uint8x8_t v292 = *_X1;
      _X1 = (uint8x8_t *)((char *)_X1 + 15);
      uint8x8_t v239 = v292;
      __asm
      {
        PRFM            #0, [X1]
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#7]
      }
      uint16x8_t v296 = vmull_u8(v244, v260);
      v281.i64[0] = vmlal_u8(v281, v244, v262).u64[0];
      uint16x8_t v297 = vmlal_u8(v290, v244, v259);
      *(int16x4_t *)v291.i8 = vsub_s16(v280, *(int16x4_t *)v291.i8);
      uint16x8_t v298 = vmlal_u8(v291, v244, v258);
      uint8x8_t v299 = *_X5;
      _X5 = (uint8x8_t *)((char *)_X5 + 15);
      uint8x8_t v218 = v244;
      __asm
      {
        PRFM            #0, [X5]
        PRFM            #0, [X20]
        PRFUM           #0, [X20,#7]
      }
      uint16x8_t v303 = vmull_u8(*a5, v260);
      *a7 = vadd_s16(vsub_s16(*(int16x4_t *)v281.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v288, *a5, v263)), (int16x4_t)0xE000E000E000E000);
      uint16x8_t v7 = vmlal_u8(v289, v225, v262);
      *(int16x4_t *)((char *)a7 + v11) = vadd_s16(vsub_s16(*(int16x4_t *)v7.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v296, v232, v263)), (int16x4_t)0xE000E000E000E000);
      v304 = (int16x4_t *)((char *)a7 + v11 + v11);
      int16x4_t *v304 = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v297, v232, v262), (int16x4_t)*(_OWORD *)&vmlal_u8(v303, v239, v263)), (int16x4_t)0xE000E000E000E000);
      __n128 result = (uint64_t)v304 + v11;
      v249 -= 4;
      a7 = (int16x4_t *)(result + v11);
      *(int16x4_t *)__n128 result = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmlal_u8(v298, v225, v259), v239, v262), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v232, v260), v299, v263)), (int16x4_t)0xE000E000E000E000);
      uint8x8_t v244 = v299;
    }
    while (v249 > 4);
  }
  return result;
}

uint64_t sub_1D0CA8610(uint64_t result, int a2, char a3, uint64_t a4, uint64_t _X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 2 * a6;
  if ((int)result < 16)
  {
    char v26 = result;
  }
  else
  {
    int8x8_t v8 = (int8x8_t)qword_1D0D7FB90[(a3 & 3) - 1];
    uint64_t v9 = a7 + 2;
    uint64_t v10 = (uint8x8_t *)(_X4 + 5);
    uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v8, 0);
    uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v8, 1);
    uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v8, 2);
    uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v8, 3);
    uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v8, 4);
    uint8x8_t v16 = (uint8x8_t)vdup_lane_s8(v8, 5);
    uint8x8_t v17 = (uint8x8_t)vdup_lane_s8(v8, 6);
    uint8x8_t v18 = (uint8x8_t)vdup_lane_s8(v8, 7);
    v19.i64[0] = 0xE000E000E000E000;
    v19.i64[1] = 0xE000E000E000E000;
    do
    {
      int v20 = a2 + 1;
      int16x8_t v21 = v10;
      int v22 = (uint16x8_t *)v9;
      do
      {
        int8x8_t v23 = (int8x8_t)v21[-1];
        int8x16_t v24 = *(int8x16_t *)v21->i8;
        uint16x8_t v25 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 1uLL), v12), *v21, v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 2uLL), v13), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 3uLL), v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 6uLL), v17),
                  (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 5uLL),
                  v16),
                (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 7uLL),
                v18);
        v22[-1] = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 1uLL), v12), (uint8x8_t)v23, v11), (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 2uLL), v13), v19), (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 3uLL), v14), (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 4uLL), v15), (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 6uLL), v17),
                      (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 5uLL),
                      v16),
                    (uint8x8_t)vext_s8(v23, (int8x8_t)*v21, 7uLL),
                    v18);
        uint16x8_t *v22 = v25;
        int v22 = (uint16x8_t *)((char *)v22 + v7);
        int16x8_t v21 = (uint8x8_t *)((char *)v21 + a4);
        --v20;
      }
      while (v20 > 1);
      a7 += 4;
      _X4 += 16;
      char v26 = result - 16;
      v9 += 4;
      v10 += 2;
      BOOL v27 = result > 0x1F;
      __n128 result = (result - 16);
    }
    while (v27);
  }
  uint64_t v28 = 4 * a4;
  if ((v26 & 8) != 0)
  {
    int8x8_t v29 = (int8x8_t)qword_1D0D7FB90[(a3 & 3) - 1];
    uint8x8_t v30 = (uint8x8_t)vdup_lane_s8(v29, 0);
    uint8x8_t v31 = (uint8x8_t)vdup_lane_s8(v29, 1);
    uint8x8_t v32 = (uint8x8_t)vdup_lane_s8(v29, 2);
    uint8x8_t v33 = (uint8x8_t)vdup_lane_s8(v29, 3);
    uint8x8_t v34 = (uint8x8_t)vdup_lane_s8(v29, 4);
    uint8x8_t v35 = (uint8x8_t)vdup_lane_s8(v29, 5);
    uint8x8_t v36 = (uint8x8_t)vdup_lane_s8(v29, 6);
    int v37 = a2 + 1;
    uint8x8_t v38 = (uint8x8_t)vdup_lane_s8(v29, 7);
    v39.i64[0] = 0xE000E000E000E000;
    v39.i64[1] = 0xE000E000E000E000;
    _X12 = _X4;
    int8x16_t v41 = (uint16x8_t *)a7;
    do
    {
      int8x16_t v42 = *(int8x16_t *)(_X12 - 3);
      __asm { PRFUM           #0, [X12,#0x1C] }
      _X15 = _X12 + v28;
      __asm
      {
        PRFUM           #0, [X15,#-3]
        PRFUM           #0, [X15,#0xC]
      }
      *int8x16_t v41 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 1uLL), v31), *(uint8x8_t *)v42.i8, v30), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 2uLL), v32), v39), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 3uLL), v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 4uLL), v34), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 6uLL), v36),
                 (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 5uLL),
                 v35),
               (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 7uLL),
               v38);
      int8x16_t v41 = (uint16x8_t *)((char *)v41 + v7);
      _X12 += a4;
      --v37;
    }
    while (v37 > 1);
    a7 += 2;
    _X4 += 8;
  }
  if ((v26 & 4) != 0)
  {
    int8x8_t v51 = (int8x8_t)qword_1D0D7FB90[(a3 & 3) - 1];
    uint8x8_t v52 = (uint8x8_t)vdup_lane_s8(v51, 0);
    uint8x8_t v53 = (uint8x8_t)vdup_lane_s8(v51, 1);
    uint8x8_t v54 = (uint8x8_t)vdup_lane_s8(v51, 2);
    uint8x8_t v55 = (uint8x8_t)vdup_lane_s8(v51, 3);
    uint8x8_t v56 = (uint8x8_t)vdup_lane_s8(v51, 4);
    uint8x8_t v57 = (uint8x8_t)vdup_lane_s8(v51, 5);
    int v58 = a2 + 1;
    uint8x8_t v59 = (uint8x8_t)vdup_lane_s8(v51, 6);
    uint8x8_t v60 = (uint8x8_t)vdup_lane_s8(v51, 7);
    do
    {
      int8x16_t v61 = *(int8x16_t *)(_X4 - 3);
      __asm { PRFUM           #0, [X4,#0x1C] }
      _X11 = _X4 + v28;
      __asm
      {
        PRFUM           #0, [X11,#-3]
        PRFUM           #0, [X11,#0xC]
      }
      uint8x8_t v66 = (uint8x8_t)vextq_s8(v61, v61, 3uLL).u64[0];
      uint8x8_t v67 = (uint8x8_t)vextq_s8(v61, v61, 4uLL).u64[0];
      uint8x8_t v68 = (uint8x8_t)vextq_s8(v61, v61, 5uLL).u64[0];
      uint8x8_t v69 = (uint8x8_t)vextq_s8(v61, v61, 6uLL).u64[0];
      uint8x8_t v70 = (uint8x8_t)vextq_s8(v61, v61, 7uLL).u64[0];
      int16x4_t v71 = (int16x4_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 1uLL), v53).u64[0];
      uint16x8_t v72 = vmlal_u8(vmull_u8(*(uint8x8_t *)v61.i8, v52), (uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 2uLL), v54);
      *(int16x4_t *)v72.i8 = vsub_s16(v71, *(int16x4_t *)v72.i8);
      *a7 = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmlal_u8(vmlal_u8(v72, v66, v55), v67, v56), v69, v59), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v68, v57), v70, v60)), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      _X4 += a4;
      --v58;
    }
    while (v58 > 1);
  }
  return result;
}

unint64_t sub_1D0CA88A4(unint64_t result, int a2, double a3, uint16x8_t a4, double a5, uint16x8_t a6, uint64_t a7, uint64_t a8, const float *a9, uint64_t a10, uint16x8_t *a11)
{
  uint64_t v11 = a8;
  uint64_t v12 = 2 * a8;
  uint64_t v13 = 2 * a10;
  if ((int)result < 32)
  {
    char v63 = result;
    if ((result & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  v14.i64[0] = 0x4040404040404040;
  v14.i64[1] = 0x4040404040404040;
  do
  {
    uint8x8_t v15 = a11;
    int v16 = a2 + 4;
    _X7 = (uint16x8_t *)a9;
    do
    {
      uint16x8_t v18 = *_X7;
      uint16x8_t v19 = _X7[1];
      __asm { PRFUM           #0, [X7,#0x3F] }
      _X20 = &_X7[1].i8[v11 * 4 + 15];
      __asm
      {
        PRFUM           #0, [X20,#-0x1F]
        PRFM            #0, [X20]
      }
      _X20 = &_X7->i8[a8];
      uint16x8_t v29 = *(uint16x8_t *)((char *)_X7 + a8);
      uint16x8_t v30 = *(uint16x8_t *)((char *)&_X7[1] + a8);
      __asm { PRFUM           #0, [X20,#0x3F] }
      _X21 = &_X7->i8[5 * a8];
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1F]
      }
      _X21 = &_X7->i8[v12];
      uint8x16_t v36 = *(uint8x16_t *)((char *)_X7 + 2 * a8);
      uint8x16_t v37 = *(uint8x16_t *)((char *)&_X7[1] + v12);
      __asm { PRFUM           #0, [X21,#0x3F] }
      _X21 = &_X7->i8[6 * a8];
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1F]
      }
      _X21 = (uint8x16_t *)((char *)_X7 + 3 * a8);
      _X22 = &_X7->i8[7 * a8];
      _X7 = (uint16x8_t *)((char *)_X7 + 2 * a8 + a8 + a8);
      v44.i64[0] = 0xE000E000E000E000;
      v44.i64[1] = 0xE000E000E000E000;
      uint16x8_t v45 = vmlal_u8(v44, *(uint8x8_t *)v18.i8, (uint8x8_t)0x4040404040404040);
      v46.i64[0] = 0xE000E000E000E000;
      v46.i64[1] = 0xE000E000E000E000;
      uint8x16_t v47 = *_X21;
      uint8x16_t v48 = _X21[1];
      uint16x8_t v49 = vmlal_high_u8(v46, (uint8x16_t)v18, v14);
      __asm { PRFUM           #0, [X21,#0x3F] }
      v18.i64[0] = 0xE000E000E000E000;
      v18.i64[1] = 0xE000E000E000E000;
      uint16x8_t v51 = vmlal_u8(v18, *(uint8x8_t *)v19.i8, (uint8x8_t)0x4040404040404040);
      __asm { PRFM            #0, [X22] }
      v53.i64[0] = 0xE000E000E000E000;
      v53.i64[1] = 0xE000E000E000E000;
      __asm { PRFUM           #0, [X22,#0x1F] }
      uint16x8_t v55 = vmlal_high_u8(v53, (uint8x16_t)v19, v14);
      v19.i64[0] = 0xE000E000E000E000;
      v19.i64[1] = 0xE000E000E000E000;
      uint16x8_t v56 = vmlal_u8(v19, *(uint8x8_t *)v29.i8, (uint8x8_t)0x4040404040404040);
      *uint8x8_t v15 = v45;
      v15[1] = v49;
      v45.i64[0] = 0xE000E000E000E000;
      v45.i64[1] = 0xE000E000E000E000;
      uint16x8_t v57 = vmlal_high_u8(v45, (uint8x16_t)v29, v14);
      int v58 = (uint16x8_t *)((char *)v15 + v13);
      v29.i64[0] = 0xE000E000E000E000;
      v29.i64[1] = 0xE000E000E000E000;
      v15[2] = v51;
      v15[3] = v55;
      uint16x8_t v59 = vmlal_u8(v29, *(uint8x8_t *)v30.i8, (uint8x8_t)0x4040404040404040);
      v51.i64[0] = 0xE000E000E000E000;
      v51.i64[1] = 0xE000E000E000E000;
      uint16x8_t v60 = vmlal_high_u8(v51, (uint8x16_t)v30, v14);
      *int v58 = v56;
      v58[1] = v57;
      v56.i64[0] = 0xE000E000E000E000;
      v56.i64[1] = 0xE000E000E000E000;
      v30.i64[0] = 0xE000E000E000E000;
      v30.i64[1] = 0xE000E000E000E000;
      v58[2] = v59;
      v58[3] = v60;
      int8x16_t v61 = (uint16x8_t *)((char *)v15 + v13 + v13);
      v60.i64[0] = 0xE000E000E000E000;
      v60.i64[1] = 0xE000E000E000E000;
      uint16x8_t *v61 = vmlal_u8(v56, *(uint8x8_t *)v36.i8, (uint8x8_t)0x4040404040404040);
      v61[1] = vmlal_high_u8(v30, v36, v14);
      v56.i64[0] = 0xE000E000E000E000;
      v56.i64[1] = 0xE000E000E000E000;
      v59.i64[0] = 0xE000E000E000E000;
      v59.i64[1] = 0xE000E000E000E000;
      v61[2] = vmlal_u8(v60, *(uint8x8_t *)v37.i8, (uint8x8_t)0x4040404040404040);
      v61[3] = vmlal_high_u8(v56, v37, v14);
      v60.i64[0] = 0xE000E000E000E000;
      v60.i64[1] = 0xE000E000E000E000;
      int8x16_t v62 = (uint16x8_t *)((char *)v61 + v13);
      *int8x16_t v62 = vmlal_u8(v59, *(uint8x8_t *)v47.i8, (uint8x8_t)0x4040404040404040);
      v62[1] = vmlal_high_u8(v60, v47, v14);
      v60.i64[0] = 0xE000E000E000E000;
      v60.i64[1] = 0xE000E000E000E000;
      v56.i64[0] = 0xE000E000E000E000;
      v56.i64[1] = 0xE000E000E000E000;
      a6 = vmlal_high_u8(v56, v48, v14);
      v16 -= 4;
      uint8x8_t v15 = (uint16x8_t *)((char *)v61 + v13 + v13);
      v62[2] = vmlal_u8(v60, *(uint8x8_t *)v48.i8, (uint8x8_t)0x4040404040404040);
      v62[3] = a6;
    }
    while (v16 > 4);
    a9 += 8;
    a11 += 4;
    char v63 = result - 32;
    BOOL v64 = (int)result <= 63;
    __n128 result = (result - 32);
  }
  while (!v64);
  if ((v63 & 0x10) != 0)
  {
LABEL_10:
    int v65 = a2 + 4;
    v66.i64[0] = 0x4040404040404040;
    v66.i64[1] = 0x4040404040404040;
    __n128 result = (unint64_t)a11;
    uint8x8_t v67 = a9;
    do
    {
      _X2 = &v67[v11];
      _X7 = (_OWORD *)((char *)v67 + a8);
      _X19 = (char *)v67 + 5 * a8;
      _X20 = (_OWORD *)((char *)v67 + v12);
      _X21 = (char *)v67 + 6 * a8;
      _X22 = (_OWORD *)((char *)v67 + 3 * a8);
      _X23 = (char *)v67 + 7 * a8;
      uint16x8_t v76 = *(uint16x8_t *)v67;
      _X17 = (char *)v67 + 31;
      uint16x8_t v77 = v76;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X2]
        PRFUM           #0, [X2,#0xF]
      }
      uint16x8_t v81 = (char *)_X7 + 2 * a8;
      uint16x8_t v82 = *(uint16x8_t *)_X7;
      _X7 = (_OWORD *)((char *)_X7 + 31);
      uint16x8_t v83 = v82;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X19]
        PRFUM           #0, [X19,#0xF]
      }
      uint8x16_t v87 = *(uint8x16_t *)_X20;
      _X20 = (_OWORD *)((char *)_X20 + 31);
      uint8x16_t v88 = v87;
      __asm
      {
        PRFM            #0, [X20]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      uint8x16_t v92 = *(uint8x16_t *)_X22;
      _X22 = (_OWORD *)((char *)_X22 + 31);
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X23]
        PRFUM           #0, [X23,#0xF]
      }
      uint8x8_t v67 = (const float *)&v81[a8];
      v96.i64[0] = 0xE000E000E000E000;
      v96.i64[1] = 0xE000E000E000E000;
      v97.i64[0] = 0xE000E000E000E000;
      v97.i64[1] = 0xE000E000E000E000;
      *(uint16x8_t *)__n128 result = vmlal_u8(v96, *(uint8x8_t *)v77.i8, (uint8x8_t)0x4040404040404040);
      *(uint16x8_t *)(result + 16) = vmlal_high_u8(v97, (uint8x16_t)v77, v66);
      v77.i64[0] = 0xE000E000E000E000;
      v77.i64[1] = 0xE000E000E000E000;
      v96.i64[0] = 0xE000E000E000E000;
      v96.i64[1] = 0xE000E000E000E000;
      int8x8_t v98 = (uint16x8_t *)(result + v13);
      *int8x8_t v98 = vmlal_u8(v77, *(uint8x8_t *)v83.i8, (uint8x8_t)0x4040404040404040);
      v98[1] = vmlal_high_u8(v96, (uint8x16_t)v83, v66);
      v77.i64[0] = 0xE000E000E000E000;
      v77.i64[1] = 0xE000E000E000E000;
      v83.i64[0] = 0xE000E000E000E000;
      v83.i64[1] = 0xE000E000E000E000;
      v99 = (uint16x8_t *)((char *)v98 + v13);
      uint16x8_t *v99 = vmlal_u8(v77, *(uint8x8_t *)v88.i8, (uint8x8_t)0x4040404040404040);
      v99[1] = vmlal_high_u8(v83, v88, v66);
      v77.i64[0] = 0xE000E000E000E000;
      v77.i64[1] = 0xE000E000E000E000;
      v83.i64[0] = 0xE000E000E000E000;
      v83.i64[1] = 0xE000E000E000E000;
      a6 = vmlal_high_u8(v83, v92, v66);
      int32x4_t v100 = (uint16x8_t *)((char *)v99 + v13);
      *int32x4_t v100 = vmlal_u8(v77, *(uint8x8_t *)v92.i8, (uint8x8_t)0x4040404040404040);
      v100[1] = a6;
      v65 -= 4;
      __n128 result = (unint64_t)v100->u64 + v13;
    }
    while (v65 > 4);
    a9 += 4;
    a11 += 2;
  }
LABEL_13:
  uint64_t v101 = 4 * a10;
  if ((v63 & 8) != 0)
  {
    int v102 = a2 + 2;
    uint8x8_t v103 = (__n128 *)a11;
    int v104 = a9;
    do
    {
      _X17 = &v104[v11];
      int8x8_t v106 = (uint8x8_t *)((char *)v104 + a8);
      _X2 = (char *)v104 + 5 * a8;
      uint8x8_t v109 = *(uint8x8_t *)v104;
      _X16 = (char *)v104 + 15;
      uint8x8_t v110 = v109;
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      int v104 = (const float *)((char *)v106 + a8);
      uint8x8_t v114 = *v106;
      __n128 result = (unint64_t)&v106[1] + 7;
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X2]
        PRFUM           #0, [X2,#7]
      }
      v118.i64[0] = 0xE000E000E000E000;
      v118.i64[1] = 0xE000E000E000E000;
      a6 = vmlal_u8(v118, v110, (uint8x8_t)0x4040404040404040);
      *uint8x8_t v103 = (__n128)a6;
      v119.i64[0] = 0xE000E000E000E000;
      v119.i64[1] = 0xE000E000E000E000;
      a4 = vmlal_u8(v119, v114, (uint8x8_t)0x4040404040404040);
      *(uint16x8_t *)((char *)v103 + 2 * a10) = a4;
      v102 -= 2;
      uint8x8_t v103 = (__n128 *)((char *)v103 + v101);
    }
    while (v102 > 2);
    a9 += 2;
    ++a11;
  }
  if ((v63 & 4) != 0)
  {
    int v120 = a2 + 2;
    do
    {
      v121 = (const float *)((char *)a9 + a8);
      *(float32x2_t *)a4.i8 = vld1_dup_f32(a9);
      a9 = (const float *)((char *)a9 + v12);
      uint8x8_t v122 = (uint8x8_t)vld1_dup_f32(v121);
      a6.i32[0] = -536813568;
      a6.i16[2] = -8192;
      a6.i16[3] = -8192;
      a6 = vmlal_u8(a6, *(uint8x8_t *)a4.i8, (uint8x8_t)0x4040404040404040);
      a11->i64[0] = a6.i64[0];
      a4.i32[0] = -536813568;
      a4.i16[2] = -8192;
      a4.i16[3] = -8192;
      a4 = vmlal_u8(a4, v122, (uint8x8_t)0x4040404040404040);
      *(uint64_t *)((char *)a11->i64 + 2 * a10) = a4.i64[0];
      a11 = (uint16x8_t *)((char *)a11 + v101);
      v120 -= 2;
    }
    while (v120 > 2);
  }
  return result;
}

uint64_t sub_1D0CA8C0C(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v7 = 4 * a4;
  if ((int)result < 8)
  {
    int v20 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v8 = 0;
  int8x8_t v9 = (int8x8_t)qword_1D0D7FB90[(a3 & 3) - 1];
  uint8x8_t v188 = (uint8x8_t)vdup_lane_s8(v9, 1);
  uint8x8_t v189 = (uint8x8_t)vdup_lane_s8(v9, 0);
  int16x8_t v10 = (int16x8_t)vmovl_u8(qword_1D0D7FB90[((a3 >> 16) & 3) - 1]);
  uint64_t v11 = -3 * a4 - 3;
  uint64_t v12 = 2 * a6;
  uint64_t v13 = a5 + 8 * a4 - 3;
  uint64_t v14 = 2 * a4;
  uint64_t v15 = a5 + 5 * a4;
  uint8x8_t v186 = (uint8x8_t)vdup_lane_s8(v9, 3);
  uint8x8_t v187 = (uint8x8_t)vdup_lane_s8(v9, 2);
  uint8x8_t v185 = (uint8x8_t)vdup_lane_s8(v9, 4);
  uint8x8_t v16 = (uint8x8_t)vdup_lane_s8(v9, 5);
  uint8x8_t v17 = (uint8x8_t)vdup_lane_s8(v9, 6);
  uint8x8_t v18 = (uint8x8_t)vdup_lane_s8(v9, 7);
  uint64_t v19 = a5 + 4 * a4;
  int v20 = a7;
  do
  {
    _X22 = a5 + v11 + v7;
    _X23 = (_OWORD *)(a5 + v11 + a4);
    _X21 = a5 + v11 + 31;
    int8x16_t v24 = *(int8x16_t *)(a5 + v11);
    __asm
    {
      PRFM            #0, [X21]
      PRFM            #0, [X22]
      PRFUM           #0, [X22,#0xF]
    }
    _X21 = (char *)_X23 + v7;
    _X22 = (_OWORD *)((char *)_X23 + a4);
    int8x16_t v34 = *(int8x16_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 31);
    int8x16_t v35 = v34;
    __asm
    {
      PRFM            #0, [X23]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X22 + v7;
    _X23 = (_OWORD *)((char *)_X22 + a4);
    int8x16_t v41 = *(int8x16_t *)_X22;
    _X22 = (_OWORD *)((char *)_X22 + 31);
    int8x16_t v42 = v41;
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X23 + v7;
    _X22 = (_OWORD *)((char *)_X23 + a4);
    int8x16_t v48 = *(int8x16_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 31);
    int8x16_t v49 = v48;
    __asm
    {
      PRFM            #0, [X23]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X22 + v7;
    _X23 = (_OWORD *)((char *)_X22 + a4);
    int8x16_t v55 = *(int8x16_t *)_X22;
    _X22 = (_OWORD *)((char *)_X22 + 31);
    int8x16_t v56 = v55;
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X23 + v7;
    _X22 = (_OWORD *)((char *)_X23 + a4);
    int8x16_t v62 = *(int8x16_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 31);
    int8x16_t v63 = v62;
    __asm
    {
      PRFM            #0, [X23]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    _X21 = (char *)_X22 + v7;
    int16x8_t v68 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 1uLL), v188), *(uint8x8_t *)v24.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 7uLL),
                       v18);
    int8x16_t v69 = *(int8x16_t *)_X22;
    _X22 = (_OWORD *)((char *)_X22 + 31);
    __asm
    {
      PRFM            #0, [X22]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    int16x8_t v73 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 1uLL), v188), *(uint8x8_t *)v35.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 7uLL),
                       v18);
    int16x8_t v74 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 1uLL), v188), *(uint8x8_t *)v42.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 7uLL),
                       v18);
    int16x8_t v75 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 1uLL), v188), *(uint8x8_t *)v49.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 7uLL),
                       v18);
    int16x8_t v76 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 1uLL), v188), *(uint8x8_t *)v56.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 7uLL),
                       v18);
    int16x8_t v77 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 1uLL), v188), *(uint8x8_t *)v63.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 7uLL),
                       v18);
    uint64_t v78 = v13;
    uint64_t v79 = v19;
    uint64_t v80 = v15;
    int16x8_t v81 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 1uLL), v188), *(uint8x8_t *)v69.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 5uLL), v16),
                       (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 7uLL),
                       v18);
    uint64_t v82 = v13 + a4;
    int v83 = a2 + 2;
    int16x8_t v84 = a7;
    v85 = (char *)a7 + a6;
    do
    {
      int32x4_t v86 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v68.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v87 = vmlsl_high_lane_s16(vmull_high_lane_s16(v73, *(int16x4_t *)v10.i8, 1), v68, *(int16x4_t *)v10.i8, 0);
      int16x8_t v68 = v74;
      _X28 = v79 + v8;
      int8x16_t v89 = *(int8x16_t *)(v79 + v8 - 3);
      _X30 = v78 + v8;
      __asm
      {
        PRFUM           #0, [X28,#0x1C]
        PRFM            #0, [X30]
        PRFUM           #0, [X30,#0xF]
      }
      _X28 = v80 + v8;
      int8x16_t v95 = *(int8x16_t *)(v80 + v8 - 3);
      _X30 = v82 + v8;
      __asm
      {
        PRFUM           #0, [X28,#0x1C]
        PRFM            #0, [X30]
      }
      int32x4_t v99 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v73.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v100 = vmlsl_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v10.i8, 1), v73, *(int16x4_t *)v10.i8, 0);
      int16x8_t v73 = v75;
      __asm { PRFUM           #0, [X30,#0xF] }
      int32x4_t v102 = vmlsl_lane_s16(v86, *(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 2);
      int32x4_t v103 = vmlsl_high_lane_s16(v87, v74, *(int16x4_t *)v10.i8, 2);
      int16x8_t v74 = v76;
      int16x8_t v76 = v81;
      int32x4_t v104 = vmlal_lane_s16(v102, *(int16x4_t *)v75.i8, *(int16x4_t *)v10.i8, 3);
      int32x4_t v105 = vmlal_high_lane_s16(v103, v75, *(int16x4_t *)v10.i8, 3);
      int32x4_t v106 = vmlsl_lane_s16(v99, *(int16x4_t *)v75.i8, *(int16x4_t *)v10.i8, 2);
      int32x4_t v107 = vmlsl_high_lane_s16(v100, v75, *(int16x4_t *)v10.i8, 2);
      int16x8_t v75 = v77;
      int16x8_t v81 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 1uLL), v188), *(uint8x8_t *)v95.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 5uLL), v16),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 7uLL),
                         v18);
      int16x8_t v77 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 1uLL), v188), *(uint8x8_t *)v89.i8, v189), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 2uLL), v187), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 3uLL), v186), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 4uLL), v185), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 6uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 5uLL), v16),
                         (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 7uLL),
                         v18);
      *(int8x8_t *)&v84[v8 / 4] = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v104, *(int16x4_t *)v74.i8, v10, 4), *(int16x4_t *)v76.i8, v10, 6), *(int16x4_t *)v75.i8, v10, 5), *(int16x4_t *)v77.i8, v10, 7), 6uLL), vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v105, v74, v10, 4), v76, v10, 6),
                                          v75,
                                          v10,
                                          5),
                                        v77,
                                        v10,
                                        7),
                                      6uLL),
                                    6uLL);
      *(int8x8_t *)&v85[v8] = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v106, *(int16x4_t *)v74.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v75.i8, v10, 4), *(int16x4_t *)v77.i8, v10, 6), *(int16x4_t *)v76.i8, v10, 5), *(int16x4_t *)v81.i8, v10, 7),
                                    6uLL),
                                  vmlsl_high_laneq_s16(vmlsl_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v107, v74, *(int16x4_t *)v10.i8, 3), v75, v10, 4), v77, v10, 6), v76, v10, 5), v81, v10, 7), 6uLL), 6uLL);
      int16x8_t v84 = (_DWORD *)((char *)v84 + v12);
      v85 += v12;
      v83 -= 2;
      v82 += v14;
      v80 += v14;
      v79 += v14;
      v78 += v14;
    }
    while (v83 > 2);
    v20 += 2;
    a5 += 8;
    int v108 = result - 8;
    v8 += 8;
    BOOL v109 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v109);
  if (v108)
  {
LABEL_9:
    int8x8_t v110 = (int8x8_t)qword_1D0D7FB90[((a3 >> 16) & 3) - 1];
    _X11 = -3 * a4 + a5;
    uint8x16_t v112 = *(uint8x16_t *)(_X11 - 3);
    _X11 -= 3;
    uint8x16_t v113 = v112;
    __asm { PRFUM           #0, [X11,#0x1F] }
    _X10 = _X11 + 4 * a4;
    __asm
    {
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = (_OWORD *)(_X11 + a4);
    _X11 = _X11 + a4 + 4 * a4;
    int v120 = (int8x16_t *)((char *)_X10 + a4);
    int8x16_t v121 = *(int8x16_t *)_X10;
    _X10 = (_OWORD *)((char *)_X10 + 31);
    int8x16_t v122 = v121;
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#0xF]
    }
    _X10 = &v120->i8[4 * a4];
    _X11 = &v120[1].i8[15];
    int8x16_t v128 = *v120;
    _X12 = &v120->i8[a4];
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = &_X12[4 * a4];
    _X11 = &_X12[a4];
    int8x16_t v135 = *(int8x16_t *)_X12;
    _X12 += 31;
    int8x16_t v136 = v135;
    int16x8_t v137 = (int16x8_t)vmovl_u8(qword_1D0D7FB90[(a3 & 3) - 1]);
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = &_X11[4 * a4];
    _X12 = &_X11[a4];
    uint8x16_t v143 = *(uint8x16_t *)_X11;
    _X11 += 31;
    uint8x16_t v144 = v143;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = &_X12[4 * a4];
    _X11 = &_X12[a4];
    int8x16_t v150 = *(int8x16_t *)_X12;
    _X12 += 31;
    int8x16_t v151 = v150;
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X12 = &_X11[4 * a4];
    int8x16_t v156 = *(int8x16_t *)_X11;
    _X11 += 31;
    int8x16_t v157 = v156;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X12]
    }
    int v160 = a2 + 1;
    uint8x16_t v161 = (uint8x16_t)vdupq_lane_s8(v110, 0);
    int8x16_t v162 = vdupq_lane_s8(v110, 2);
    uint8x8_t v163 = (uint8x8_t)vextq_s8(v162, v162, 8uLL).u64[0];
    int8x16_t v164 = vdupq_lane_s8(v110, 3);
    uint8x8_t v165 = (uint8x8_t)vextq_s8(v164, v164, 8uLL).u64[0];
    int8x16_t v166 = vdupq_lane_s8(v110, 4);
    __asm { PRFUM           #0, [X12,#0xF] }
    uint8x8_t v168 = (uint8x8_t)vextq_s8(v166, v166, 8uLL).u64[0];
    uint8x16_t v169 = (uint8x16_t)vdupq_lane_s8(v110, 1);
    int8x16_t v170 = vdupq_lane_s8(v110, 6);
    uint8x8_t v171 = (uint8x8_t)vextq_s8(v170, v170, 8uLL).u64[0];
    int8x16_t v172 = vdupq_lane_s8(v110, 7);
    uint8x8_t v173 = (uint8x8_t)vextq_s8(v172, v172, 8uLL).u64[0];
    uint8x16_t v174 = (uint8x16_t)vdupq_lane_s8(v110, 5);
    do
    {
      uint16x8_t v175 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v122.i8, *(uint8x8_t *)v169.i8), *(uint8x8_t *)v113.i8, *(uint8x8_t *)v161.i8);
      uint16x8_t v176 = vmull_high_u8((uint8x16_t)v122, v169);
      uint16x8_t v177 = vmull_high_u8(v113, v161);
      uint8x16_t v113 = (uint8x16_t)v122;
      int8x16_t v122 = v128;
      int8x16_t v128 = v136;
      int8x16_t v136 = (int8x16_t)v144;
      uint8x16_t v144 = (uint8x16_t)v151;
      int8x16_t v151 = v157;
      _X12 = a5 + v7;
      int8x16_t v157 = *(int8x16_t *)(a5 + v7 - 3);
      _X13 = a5 + 8 * a4 - 3;
      __asm
      {
        PRFUM           #0, [X12,#0x1C]
        PRFM            #0, [X13]
      }
      int16x8_t v182 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(v175, *(uint8x8_t *)v122.i8, *(uint8x8_t *)v162.i8), *(uint8x8_t *)v128.i8, *(uint8x8_t *)v164.i8), *(uint8x8_t *)v136.i8, *(uint8x8_t *)v166.i8), *(uint8x8_t *)v151.i8, *(uint8x8_t *)v170.i8), *(uint8x8_t *)v144.i8, *(uint8x8_t *)v174.i8), *(uint8x8_t *)v157.i8, *(uint8x8_t *)v172.i8);
      *(int16x4_t *)v176.i8 = vsub_s16(*(int16x4_t *)v176.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(v177, (uint8x8_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL), v163));
      int8x16_t v183 = (int8x16_t)vmlal_u8(vmlal_u8(vmlal_u8(v176, (uint8x8_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL), v165), (uint8x8_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL), v168), (uint8x8_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL), v171);
      *(int16x4_t *)v183.i8 = vsub_s16(*(int16x4_t *)v183.i8, (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v144, v174), (uint8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL), v173));
      *(int16x4_t *)v182.i8 = vqshrn_n_s32(vmlsl_laneq_s16(vmlsl_laneq_s16(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_lane_s16(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, (int8x16_t)v182, 2uLL), *(int16x4_t *)v137.i8, 1), *(int16x4_t *)v182.i8, *(int16x4_t *)v137.i8, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, (int8x16_t)v182, 4uLL), *(int16x4_t *)v137.i8, 2), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, (int8x16_t)v182, 6uLL), *(int16x4_t *)v137.i8,
                                          3),
                                        v182,
                                        v137,
                                        4),
                                      (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, v183, 0xCuLL),
                                      v137,
                                      6),
                                    (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, v183, 0xAuLL),
                                    v137,
                                    5),
                                  (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v182, v183, 0xEuLL),
                                  v137,
                                  7),
                                6uLL);
      __asm { PRFUM           #0, [X13,#0xF] }
      *int v20 = vqrshrun_n_s16(v182, 6uLL).u32[0];
      int v20 = (_DWORD *)((char *)v20 + a6);
      --v160;
      a5 += a4;
    }
    while (v160 > 1);
  }
  return result;
}

uint64_t sub_1D0CA9338(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, int8x8_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 4 * a4;
  if ((int)result < 16)
  {
    uint16x8_t v25 = a7;
    char v103 = result;
  }
  else
  {
    unint64_t v9 = 0;
    int8x8_t v10 = (int8x8_t)qword_1D0D7FB90[v7 - 1];
    uint64_t v11 = 2 * a6;
    uint64_t v12 = (char *)a5 + 9 * a4;
    uint64_t v13 = 2 * a4;
    uint64_t v14 = (char *)a5 + 5 * a4;
    uint64_t v15 = (char *)a5 + 4 * a4;
    uint8x16_t v16 = (uint8x16_t)vdupq_lane_s8(v10, 0);
    uint8x16_t v17 = (uint8x16_t)vdupq_lane_s8(v10, 1);
    uint8x16_t v18 = (uint8x16_t)vdupq_lane_s8(v10, 2);
    uint8x16_t v19 = (uint8x16_t)vdupq_lane_s8(v10, 3);
    uint8x16_t v20 = (uint8x16_t)vdupq_lane_s8(v10, 4);
    uint8x16_t v21 = (uint8x16_t)vdupq_lane_s8(v10, 5);
    int v22 = &a5[a4];
    uint8x16_t v23 = (uint8x16_t)vdupq_lane_s8(v10, 6);
    uint8x16_t v24 = (uint8x16_t)vdupq_lane_s8(v10, 7);
    uint16x8_t v25 = a7;
    do
    {
      _X22 = (char *)a5 + v8 + -3 * a4;
      _X23 = (_OWORD *)((char *)a5 + a4 + -3 * a4);
      _X21 = (uint64_t)&a5[3] - 3 * a4 + 7;
      uint8x16_t v29 = *(uint8x16_t *)&a5->i8[-3 * a4];
      __asm
      {
        PRFM            #0, [X21]
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0xF]
      }
      _X21 = (char *)_X23 + v8;
      uint8x8_t v38 = (uint8x16_t *)((char *)_X23 + a4);
      uint8x16_t v39 = *(uint8x16_t *)_X23;
      _X23 = (_OWORD *)((char *)_X23 + 31);
      uint8x16_t v40 = v39;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X21 = &v38->i8[v8];
      _X23 = &v38[1].i8[15];
      uint8x16_t v46 = *v38;
      _X22 = &v38->i8[a4];
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X21 = &_X22[v8];
      _X23 = &_X22[a4];
      uint8x16_t v53 = *(uint8x16_t *)_X22;
      _X22 += 31;
      uint8x16_t v54 = v53;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X21 = &_X23[v8];
      uint16x8_t v59 = (uint8x16_t *)&_X23[a4];
      uint8x16_t v60 = *(uint8x16_t *)_X23;
      _X23 += 31;
      uint8x16_t v61 = v60;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X21 = &v59->i8[v8];
      _X23 = &v59[1].i8[15];
      uint8x16_t v67 = *v59;
      int16x8_t v68 = (uint8x16_t *)((char *)v59 + a4);
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X21]
      }
      _X27 = &v68->i8[v8];
      __asm { PRFUM           #0, [X21,#0xF] }
      _X23 = &v68[1].i8[15];
      uint8x16_t v74 = *v68;
      int16x8_t v75 = v22;
      int16x8_t v76 = v15;
      __asm { PRFM            #0, [X23] }
      uint64_t v78 = v14;
      uint64_t v79 = v12;
      __asm { PRFM            #0, [X27] }
      int v81 = a2 + 2;
      uint64_t v82 = a7;
      __asm { PRFUM           #0, [X27,#0xF] }
      int16x8_t v84 = (char *)a7 + a6;
      do
      {
        uint16x8_t v85 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v46.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v40.i8, *(uint8x8_t *)v16.i8);
        uint16x8_t v86 = vmlsl_high_u8(vmull_high_u8(v46, v17), v40, v16);
        uint16x8_t v87 = vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v40.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v16.i8), *(uint8x8_t *)v46.i8, *(uint8x8_t *)v18.i8);
        uint16x8_t v88 = vmlsl_high_u8(vmlsl_high_u8(vmull_high_u8(v40, v17), v29, v16), v46, v18);
        uint8x16_t v29 = v46;
        uint8x16_t v46 = v61;
        uint8x16_t v61 = v74;
        uint16x8_t v89 = vmlal_u8(v87, *(uint8x8_t *)v54.i8, *(uint8x8_t *)v19.i8);
        uint16x8_t v90 = vmlal_high_u8(v88, v54, v19);
        uint16x8_t v91 = vmlsl_u8(v85, *(uint8x8_t *)v54.i8, *(uint8x8_t *)v18.i8);
        uint16x8_t v92 = vmlsl_high_u8(v86, v54, v18);
        uint8x16_t v40 = v54;
        uint8x16_t v54 = v67;
        _X28 = (uint64_t)&v76[v9 + 31];
        uint8x16_t v67 = *(uint8x16_t *)&v76[v9];
        __asm { PRFM            #0, [X28] }
        _X28 = &v75[v9 / 8];
        __asm
        {
          PRFM            #0, [X28]
          PRFUM           #0, [X28,#0xF]
        }
        _X28 = (uint64_t)&v78[v9 + 31];
        uint8x16_t v74 = *(uint8x16_t *)&v78[v9];
        _X30 = &v79[v9];
        __asm
        {
          PRFM            #0, [X28]
          PRFM            #0, [X30]
          PRFUM           #0, [X30,#0xF]
        }
        *(int8x16_t *)v82[v9 / 8].i8 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v89, *(uint8x8_t *)v46.i8, *(uint8x8_t *)v20.i8), *(uint8x8_t *)v61.i8, *(uint8x8_t *)v23.i8), *(uint8x8_t *)v54.i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v67.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v90, v46, v20), v61, v23), v54, v21), v67, v24),
                                         6uLL);
        *(int8x16_t *)&v84[v9] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(v91, *(uint8x8_t *)v46.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v54.i8, *(uint8x8_t *)v20.i8), *(uint8x8_t *)v67.i8, *(uint8x8_t *)v23.i8), *(uint8x8_t *)v61.i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v74.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(vmlal_high_u8(v92, v46, v19), v54, v20),
                                                    v67,
                                                    v23),
                                                  v61,
                                                  v21),
                                                v74,
                                                v24),
                                   6uLL);
        uint64_t v82 = (int8x8_t *)((char *)v82 + v11);
        v84 += v11;
        v81 -= 2;
        v79 += v13;
        v78 += v13;
        v76 += v13;
        int16x8_t v75 = (uint8x8_t *)((char *)v75 + v13);
      }
      while (v81 > 2);
      v25 += 2;
      a5 += 2;
      char v103 = result - 16;
      v9 += 16;
      BOOL v104 = result > 0x1F;
      __n128 result = (result - 16);
    }
    while (v104);
  }
  uint64_t v105 = a4;
  if ((v103 & 8) != 0)
  {
    _X13 = (uint8x8_t *)((char *)a5 - 3 * a4);
    _X14 = (char *)_X13 + 4 * a4;
    _X15 = (uint8x8_t *)((char *)_X13 + a4);
    uint8x8_t v109 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    uint8x8_t v110 = v109;
    int8x8_t v111 = (int8x8_t)qword_1D0D7FB90[v7 - 1];
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    _X13 = (char *)_X15 + 4 * a4;
    _X14 = (uint8x8_t *)((char *)_X15 + a4);
    uint8x8_t v117 = *_X15;
    _X15 = (uint8x8_t *)((char *)_X15 + 15);
    uint8x8_t v118 = v117;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)_X14 + 4 * a4;
    uint8x8_t v123 = (uint8x8_t *)((char *)_X14 + a4);
    uint8x8_t v124 = *_X14;
    _X14 = (uint8x8_t *)((char *)_X14 + 15);
    uint8x8_t v125 = v124;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)v123 + 4 * a4;
    _X14 = (char *)&v123[1] + 7;
    uint8x8_t v131 = *v123;
    _X15 = (uint8x8_t *)((char *)v123 + a4);
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)_X15 + 4 * a4;
    _X14 = (uint8x8_t *)((char *)_X15 + a4);
    uint8x8_t v138 = *_X15;
    _X15 = (uint8x8_t *)((char *)_X15 + 15);
    uint8x8_t v139 = v138;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)_X14 + 4 * a4;
    _X15 = (uint8x8_t *)((char *)_X14 + a4);
    uint8x8_t v145 = *_X14;
    _X14 = (uint8x8_t *)((char *)_X14 + 15);
    uint8x8_t v146 = v145;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X13 = (char *)_X15 + 4 * a4;
    uint8x8_t v151 = *_X15;
    _X15 = (uint8x8_t *)((char *)_X15 + 15);
    uint8x8_t v152 = v151;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    int v156 = a2 + 4;
    __n128 result = 6 * a4;
    uint8x8_t v157 = (uint8x8_t)vdup_lane_s8(v111, 1);
    uint8x8_t v158 = (uint8x8_t)vdup_lane_s8(v111, 0);
    uint8x8_t v159 = (uint8x8_t)vdup_lane_s8(v111, 2);
    uint8x8_t v160 = (uint8x8_t)vdup_lane_s8(v111, 3);
    uint8x8_t v161 = (uint8x8_t)vdup_lane_s8(v111, 4);
    uint8x8_t v162 = (uint8x8_t)vdup_lane_s8(v111, 5);
    uint8x8_t v163 = (uint8x8_t)vdup_lane_s8(v111, 6);
    int8x16_t v164 = a5;
    uint8x8_t v165 = v25;
    uint8x8_t v166 = (uint8x8_t)vdup_lane_s8(v111, 7);
    do
    {
      _X26 = &v164[v105];
      _X25 = (uint8x8_t *)((char *)v164 + 5 * a4);
      _X24 = (char *)v164 + 9 * a4;
      _X23 = (uint8x8_t *)((char *)v164 + result);
      _X22 = (char *)v164 + 10 * a4;
      _X19 = (uint8x8_t *)((char *)v164 + 7 * a4);
      _X7 = (char *)v164 + 11 * a4;
      int8x16_t v164 = (uint8x8_t *)((char *)v164 + v8);
      uint16x8_t v174 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v118, v157), v110, v158), v125, v159), v131, v160);
      uint16x8_t v175 = vmlsl_u8(vmlsl_u8(vmull_u8(v125, v157), v118, v158), v131, v159);
      uint16x8_t v176 = vmull_u8(v131, v157);
      uint16x8_t v177 = vmlsl_u8(vmull_u8(v139, v157), v131, v158);
      _X27 = (char *)&v164[1] + 7;
      uint8x8_t v131 = *v164;
      __asm
      {
        PRFM            #0, [X27]
        PRFM            #0, [X26]
        PRFUM           #0, [X26,#7]
      }
      uint16x8_t v182 = vmlal_u8(v174, v139, v161);
      uint16x8_t v183 = vmlal_u8(v175, v139, v160);
      uint16x8_t v184 = vmlsl_u8(vmlsl_u8(v176, v125, v158), v139, v159);
      uint8x8_t v110 = v139;
      uint8x8_t v185 = *_X25;
      _X25 = (uint8x8_t *)((char *)_X25 + 15);
      uint8x8_t v139 = v185;
      __asm
      {
        PRFM            #0, [X25]
        PRFM            #0, [X24]
        PRFUM           #0, [X24,#7]
      }
      uint16x8_t v189 = vmlsl_u8(vmlal_u8(v182, v152, v163), v146, v162);
      uint16x8_t v190 = vmlal_u8(v183, v146, v161);
      uint16x8_t v191 = vmlal_u8(v184, v146, v160);
      uint16x8_t v192 = vmlsl_u8(v177, v146, v159);
      uint8x8_t v118 = v146;
      uint8x8_t v193 = *_X23;
      _X23 = (uint8x8_t *)((char *)_X23 + 15);
      uint8x8_t v146 = v193;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#7]
      }
      uint16x8_t v197 = vmlsl_u8(vmlal_u8(v190, *v164, v163), v152, v162);
      uint16x8_t v198 = vmlal_u8(v191, v152, v161);
      uint16x8_t v199 = vmlal_u8(v192, v152, v160);
      uint8x8_t v125 = v152;
      uint8x8_t v200 = *_X19;
      _X19 = (uint8x8_t *)((char *)_X19 + 15);
      uint8x8_t v152 = v200;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#7]
      }
      *(int8x8_t *)v198.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v198, v139, v163), *v164, v162), v146, v166), 6uLL);
      *(int8x8_t *)v199.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v199, *v164, v161), v146, v163), v139, v162), v200, v166), 6uLL);
      *uint8x8_t v165 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v189, *v164, v166), 6uLL);
      uint8x8_t v204 = (int8x8_t *)((char *)v165 + a6);
      *uint8x8_t v204 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v197, v139, v166), 6uLL);
      v205 = (int8x8_t *)((char *)v204 + a6);
      int8x8_t *v205 = *(int8x8_t *)v198.i8;
      v206 = (int8x8_t *)((char *)v205 + a6);
      int8x8_t *v206 = *(int8x8_t *)v199.i8;
      uint8x8_t v165 = (int8x8_t *)((char *)v206 + a6);
      v156 -= 4;
    }
    while (v156 > 4);
    ++v25;
    ++a5;
  }
  if ((v103 & 4) != 0)
  {
    int8x8_t v207 = (int8x8_t)qword_1D0D7FB90[v7 - 1];
    _X10 = (uint8x8_t *)((char *)a5 - 3 * a4);
    _X11 = (char *)_X10 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X10 + a4);
    uint8x8_t v211 = *_X10;
    _X10 = (uint8x8_t *)((char *)_X10 + 15);
    uint8x8_t v212 = v211;
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X10 = (char *)_X13 + 4 * a4;
    uint8x8_t v217 = (uint8x8_t *)((char *)_X13 + a4);
    uint8x8_t v218 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    uint8x8_t v219 = v218;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)v217 + 4 * a4;
    _X13 = (char *)&v217[1] + 7;
    uint8x8_t v225 = *v217;
    _X11 = (uint8x8_t *)((char *)v217 + a4);
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)_X11 + 4 * a4;
    _X13 = (uint8x8_t *)((char *)_X11 + a4);
    uint8x8_t v232 = *_X11;
    _X11 = (uint8x8_t *)((char *)_X11 + 15);
    uint8x8_t v233 = v232;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)_X13 + 4 * a4;
    uint8x8_t v238 = (uint8x8_t *)((char *)_X13 + a4);
    uint8x8_t v239 = *_X13;
    _X13 = (uint8x8_t *)((char *)_X13 + 15);
    uint8x8_t v240 = v239;
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)v238 + 4 * a4;
    _X13 = (char *)&v238[1] + 7;
    uint8x8_t v246 = *v238;
    _X11 = (uint8x8_t *)((char *)v238 + a4);
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X10 = (char *)_X11 + 4 * a4;
    uint8x8_t v252 = *_X11;
    _X11 = (uint8x8_t *)((char *)_X11 + 15);
    uint8x8_t v253 = v252;
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    int v257 = a2 + 4;
    uint64_t v258 = 11 * a4;
    uint64_t v259 = 7 * a4;
    uint64_t v260 = 5 * a4;
    uint64_t v261 = 10 * a4;
    uint64_t v262 = 6 * a4;
    uint64_t v263 = 9 * a4;
    uint8x8_t v264 = (uint8x8_t)vdup_lane_s8(v207, 1);
    uint8x8_t v265 = (uint8x8_t)vdup_lane_s8(v207, 0);
    uint8x8_t v266 = (uint8x8_t)vdup_lane_s8(v207, 2);
    uint8x8_t v267 = (uint8x8_t)vdup_lane_s8(v207, 3);
    uint8x8_t v268 = (uint8x8_t)vdup_lane_s8(v207, 4);
    uint8x8_t v269 = (uint8x8_t)vdup_lane_s8(v207, 5);
    uint8x8_t v270 = (uint8x8_t)vdup_lane_s8(v207, 6);
    uint8x8_t v271 = (uint8x8_t)vdup_lane_s8(v207, 7);
    do
    {
      _X1 = &a5[v105];
      _X0 = (uint8x8_t *)((char *)a5 + v260);
      _X3 = (char *)a5 + v263;
      _X2 = (uint8x8_t *)((char *)a5 + v262);
      _X19 = (char *)a5 + v261;
      _X7 = (uint8x8_t *)((char *)a5 + v259);
      _X20 = (char *)a5 + v258;
      a5 = (uint8x8_t *)((char *)a5 + v8);
      uint16x8_t v279 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v219, v264), v212, v265), v225, v266), v233, v267);
      uint16x8_t v280 = vmlsl_u8(vmlsl_u8(vmull_u8(v225, v264), v219, v265), v233, v266);
      uint16x8_t v281 = vmull_u8(v233, v264);
      uint16x8_t v282 = vmlsl_u8(vmull_u8(v240, v264), v233, v265);
      _X6 = (char *)&a5[1] + 7;
      uint8x8_t v233 = *a5;
      __asm
      {
        PRFM            #0, [X6]
        PRFM            #0, [X1]
        PRFUM           #0, [X1,#7]
      }
      uint16x8_t v287 = vmlal_u8(v279, v240, v268);
      uint16x8_t v288 = vmlal_u8(v280, v240, v267);
      uint16x8_t v289 = vmlsl_u8(vmlsl_u8(v281, v225, v265), v240, v266);
      uint8x8_t v212 = v240;
      uint8x8_t v290 = *_X0;
      _X0 = (uint8x8_t *)((char *)_X0 + 15);
      uint8x8_t v240 = v290;
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X3]
        PRFUM           #0, [X3,#7]
      }
      uint16x8_t v294 = vmlsl_u8(vmlal_u8(v287, v253, v270), v246, v269);
      uint16x8_t v295 = vmlal_u8(v288, v246, v268);
      uint16x8_t v296 = vmlal_u8(v289, v246, v267);
      uint16x8_t v297 = vmlsl_u8(v282, v246, v266);
      uint8x8_t v219 = v246;
      uint8x8_t v298 = *_X2;
      _X2 = (uint8x8_t *)((char *)_X2 + 15);
      uint8x8_t v246 = v298;
      __asm
      {
        PRFM            #0, [X2]
        PRFM            #0, [X19]
        PRFUM           #0, [X19,#7]
      }
      uint16x8_t v302 = vmlsl_u8(vmlal_u8(v295, *a5, v270), v253, v269);
      uint16x8_t v303 = vmlal_u8(v296, v253, v268);
      uint16x8_t v304 = vmlal_u8(v297, v253, v267);
      uint8x8_t v225 = v253;
      uint8x8_t v305 = *_X7;
      _X7 = (uint8x8_t *)((char *)_X7 + 15);
      uint8x8_t v253 = v305;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X20]
        PRFUM           #0, [X20,#7]
      }
      int16x8_t v309 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v303, v240, v270), *a5, v269), v246, v271);
      int16x8_t v310 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v304, *a5, v268), v246, v270), v240, v269), v305, v271);
      v25->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v294, *a5, v271), 6uLL).u32[0];
      v311 = (int8x8_t *)((char *)v25 + a6);
      v311->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v302, v240, v271), 6uLL).u32[0];
      v312 = (int8x8_t *)((char *)v311 + a6);
      v312->i32[0] = vqrshrun_n_s16(v309, 6uLL).u32[0];
      __n128 result = (uint64_t)v312 + a6;
      uint16x8_t v25 = (int8x8_t *)((char *)v312 + a6 + a6);
      v257 -= 4;
      *(_DWORD *)__n128 result = vqrshrun_n_s16(v310, 6uLL).u32[0];
    }
    while (v257 > 4);
  }
  return result;
}

uint64_t sub_1D0CA9A4C(uint64_t result, int a2, char a3, uint64_t a4, uint64_t _X4, uint64_t a6, int8x16_t *a7)
{
  if ((int)result < 16)
  {
    char v22 = result;
  }
  else
  {
    int8x8_t v7 = (int8x8_t)qword_1D0D7FB90[(a3 & 3) - 1];
    uint64_t v8 = (int8x8_t *)(_X4 + 5);
    uint8x8_t v9 = (uint8x8_t)vdup_lane_s8(v7, 0);
    uint8x8_t v10 = (uint8x8_t)vdup_lane_s8(v7, 1);
    uint8x8_t v11 = (uint8x8_t)vdup_lane_s8(v7, 2);
    uint8x8_t v12 = (uint8x8_t)vdup_lane_s8(v7, 3);
    uint8x8_t v13 = (uint8x8_t)vdup_lane_s8(v7, 4);
    uint8x8_t v14 = (uint8x8_t)vdup_lane_s8(v7, 5);
    uint8x8_t v15 = (uint8x8_t)vdup_lane_s8(v7, 6);
    uint8x8_t v16 = (uint8x8_t)vdup_lane_s8(v7, 7);
    do
    {
      int v17 = a2 + 1;
      uint8x16_t v18 = v8;
      uint8x16_t v19 = a7;
      do
      {
        int8x8_t v20 = v18[-1];
        int8x16_t v21 = *(int8x16_t *)v18->i8;
        *uint8x16_t v19 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(v20, *v18, 1uLL), v10), (uint8x8_t)v20, v9), (uint8x8_t)vext_s8(v20, *v18, 2uLL), v11), (uint8x8_t)vext_s8(v20, *v18, 3uLL), v12), (uint8x8_t)vext_s8(v20, *v18, 4uLL), v13), (uint8x8_t)vext_s8(v20, *v18, 6uLL), v15),
                                  (uint8x8_t)vext_s8(v20, *v18, 5uLL),
                                  v14),
                                (uint8x8_t)vext_s8(v20, *v18, 7uLL),
                                v16),
                   6uLL),
                 (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 1uLL), v10), (uint8x8_t)*v18, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 3uLL), v12), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 6uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 5uLL), v14),
                              (uint8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 7uLL),
                              v16),
                 6uLL);
        uint8x16_t v19 = (int8x16_t *)((char *)v19 + a6);
        uint8x16_t v18 = (int8x8_t *)((char *)v18 + a4);
        --v17;
      }
      while (v17 > 1);
      ++a7;
      _X4 += 16;
      char v22 = result - 16;
      v8 += 2;
      BOOL v23 = result > 0x1F;
      __n128 result = (result - 16);
    }
    while (v23);
  }
  uint64_t v24 = 4 * a4;
  if ((v22 & 8) != 0)
  {
    int8x8_t v25 = (int8x8_t)qword_1D0D7FB90[(a3 & 3) - 1];
    int v26 = a2 + 1;
    uint8x8_t v27 = (uint8x8_t)vdup_lane_s8(v25, 0);
    uint8x8_t v28 = (uint8x8_t)vdup_lane_s8(v25, 1);
    uint8x8_t v29 = (uint8x8_t)vdup_lane_s8(v25, 2);
    uint8x8_t v30 = (uint8x8_t)vdup_lane_s8(v25, 3);
    uint8x8_t v31 = (uint8x8_t)vdup_lane_s8(v25, 4);
    uint8x8_t v32 = (uint8x8_t)vdup_lane_s8(v25, 5);
    uint8x8_t v33 = (uint8x8_t)vdup_lane_s8(v25, 6);
    uint8x8_t v34 = (uint8x8_t)vdup_lane_s8(v25, 7);
    _X12 = _X4;
    uint8x16_t v36 = (int8x8_t *)a7;
    do
    {
      int8x16_t v37 = *(int8x16_t *)(_X12 - 3);
      __asm { PRFUM           #0, [X12,#0x1C] }
      _X14 = _X12 + v24;
      __asm
      {
        PRFUM           #0, [X14,#-3]
        PRFUM           #0, [X14,#0xC]
      }
      *uint8x16_t v36 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 1uLL), v28), *(uint8x8_t *)v37.i8, v27), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 2uLL), v29), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 3uLL), v30), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 4uLL), v31), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 6uLL), v33), (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 5uLL),
                              v32),
                            (uint8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 7uLL),
                            v34),
               6uLL);
      uint8x16_t v36 = (int8x8_t *)((char *)v36 + a6);
      _X12 += a4;
      --v26;
    }
    while (v26 > 1);
    a7 = (int8x16_t *)((char *)a7 + 8);
    _X4 += 8;
  }
  if ((v22 & 4) != 0)
  {
    int8x8_t v46 = (int8x8_t)qword_1D0D7FB90[(a3 & 3) - 1];
    int v47 = a2 + 1;
    uint8x8_t v48 = (uint8x8_t)vdup_lane_s8(v46, 0);
    uint8x8_t v49 = (uint8x8_t)vdup_lane_s8(v46, 1);
    uint8x8_t v50 = (uint8x8_t)vdup_lane_s8(v46, 2);
    uint8x8_t v51 = (uint8x8_t)vdup_lane_s8(v46, 3);
    uint8x8_t v52 = (uint8x8_t)vdup_lane_s8(v46, 4);
    uint8x8_t v53 = (uint8x8_t)vdup_lane_s8(v46, 5);
    uint8x8_t v54 = (uint8x8_t)vdup_lane_s8(v46, 6);
    uint8x8_t v55 = (uint8x8_t)vdup_lane_s8(v46, 7);
    do
    {
      int8x16_t v56 = *(int8x16_t *)(_X4 - 3);
      __asm { PRFUM           #0, [X4,#0x1C] }
      _X10 = _X4 + v24;
      __asm
      {
        PRFUM           #0, [X10,#-3]
        PRFUM           #0, [X10,#0xC]
      }
      a7->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 1uLL), v49), *(uint8x8_t *)v56.i8, v48), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 2uLL), v50), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 3uLL), v51), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 4uLL), v52), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 6uLL), v54), (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 5uLL),
                                    v53),
                                  (uint8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 7uLL),
                                  v55),
                     6uLL).u32[0];
      a7 = (int8x16_t *)((char *)a7 + a6);
      _X4 += a4;
      --v47;
    }
    while (v47 > 1);
  }
  return result;
}

unint64_t sub_1D0CA9CB8(unint64_t result, int a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v7 = 4 * a4;
  if ((int)result < 32)
  {
    uint8x8_t v13 = a7;
    uint8x8_t v12 = a5;
    char v59 = result;
  }
  else
  {
    unint64_t v8 = 0;
    int v117 = a2 + 4;
    uint8x8_t v9 = &a5[4 * a4];
    uint8x8_t v10 = v9 + 31;
    uint8x8_t v11 = &v9[a4];
    uint8x8_t v12 = a5;
    uint8x8_t v13 = a7;
    do
    {
      uint8x8_t v14 = &a5[a4];
      uint8x8_t v15 = v11;
      uint8x8_t v16 = v10;
      int v17 = &a5[2 * a4];
      uint8x16_t v18 = &a5[6 * a4];
      uint8x16_t v19 = a5;
      int8x8_t v20 = a7;
      int8x16_t v21 = &a5[3 * a4];
      uint64_t v22 = (uint64_t)&a5[8 * a4 - a4];
      int v23 = v117;
      do
      {
        uint64_t v24 = &v20[v8 / 4];
        _X1 = &v19[v8 / 4];
        long long v26 = *(_OWORD *)&v19[v8 / 4 + 4];
        __asm { PRFUM           #0, [X1,#0x3F] }
        _X1 = &v16[v8];
        __asm
        {
          PRFUM           #0, [X1,#-0x1F]
          PRFM            #0, [X1]
        }
        _X1 = &v14[v8];
        long long v36 = *(_OWORD *)&v14[v8];
        long long v37 = *(_OWORD *)&v14[v8 + 16];
        __asm { PRFUM           #0, [X1,#0x3F] }
        _X1 = &v15[v8];
        __asm
        {
          PRFM            #0, [X1]
          PRFUM           #0, [X1,#0x1F]
        }
        _X1 = &v17[v8];
        long long v43 = *(_OWORD *)&v17[v8];
        long long v44 = *(_OWORD *)&v17[v8 + 16];
        __asm { PRFUM           #0, [X1,#0x3F] }
        _X1 = &v18[v8];
        __asm
        {
          PRFM            #0, [X1]
          PRFUM           #0, [X1,#0x1F]
        }
        _X1 = &v21[v8];
        long long v50 = *(_OWORD *)&v21[v8];
        long long v51 = *(_OWORD *)&v21[v8 + 16];
        __asm { PRFUM           #0, [X1,#0x3F] }
        _X1 = v22 + v8;
        __asm
        {
          PRFM            #0, [X1]
          PRFUM           #0, [X1,#0x1F]
        }
        int8x16_t v56 = (_OWORD *)((char *)&v20[v8 / 4] + a6);
        *uint64_t v24 = *(_OWORD *)&v19[v8 / 4];
        v24[1] = v26;
        uint16x8_t v57 = (_OWORD *)((char *)v56 + a6);
        *int8x16_t v56 = v36;
        v56[1] = v37;
        int v58 = (_OWORD *)((char *)v56 + a6 + a6);
        v23 -= 4;
        v22 += v7;
        v21 += v7;
        v20 += a6;
        uint8x16_t v19 = (_DWORD *)((char *)v19 + v7);
        v18 += v7;
        _OWORD *v57 = v43;
        v57[1] = v44;
        v17 += v7;
        v16 += v7;
        v15 += v7;
        v14 += v7;
        *int v58 = v50;
        v58[1] = v51;
      }
      while (v23 > 4);
      v12 += 32;
      v13 += 8;
      char v59 = result - 32;
      v8 += 32;
      BOOL v60 = (int)result <= 63;
      __n128 result = (result - 32);
    }
    while (!v60);
  }
  uint64_t v61 = 2 * a4;
  if ((v59 & 0x10) == 0)
  {
    int v62 = a2;
    if ((v59 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  int v62 = a2;
  int v63 = a2 + 4;
  BOOL v64 = v12;
  __n128 result = (unint64_t)v13;
  do
  {
    _X1 = &v64[v7];
    _X4 = &v64[a4];
    _X6 = &v64[5 * a4];
    _X7 = &v64[v61];
    _X19 = &v64[6 * a4];
    _X20 = &v64[3 * a4];
    _X21 = &v64[7 * a4];
    long long v73 = *(_OWORD *)v64;
    _X2 = v64 + 31;
    long long v74 = v73;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X1]
      PRFUM           #0, [X1,#0xF]
    }
    uint64_t v78 = &_X4[2 * a4];
    long long v79 = *(_OWORD *)_X4;
    _X4 += 31;
    long long v80 = v79;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X6]
      PRFUM           #0, [X6,#0xF]
    }
    long long v84 = *(_OWORD *)_X7;
    _X7 += 31;
    long long v85 = v84;
    __asm
    {
      PRFM            #0, [X7]
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0xF]
    }
    long long v89 = *(_OWORD *)_X20;
    _X20 += 31;
    __asm
    {
      PRFM            #0, [X20]
      PRFM            #0, [X21]
      PRFUM           #0, [X21,#0xF]
    }
    BOOL v64 = &v78[a4];
    *(_OWORD *)__n128 result = v74;
    int32x4_t v93 = (_OWORD *)(result + a6);
    *int32x4_t v93 = v80;
    v94 = (_OWORD *)((char *)v93 + a6);
    int8x16_t v95 = (_OWORD *)((char *)v94 + a6);
    _OWORD *v94 = v85;
    __n128 result = (unint64_t)v94 + a6 + a6;
    v63 -= 4;
    _OWORD *v95 = v89;
  }
  while (v63 > 4);
  v12 += 16;
  v13 += 4;
  if ((v59 & 8) != 0)
  {
LABEL_15:
    int v96 = v62 + 2;
    uint16x8_t v97 = v12;
    int8x8_t v98 = v13;
    do
    {
      _X17 = (char *)v97 + v7;
      int32x4_t v100 = (void *)((char *)v97 + a4);
      _X1 = (char *)v97 + 5 * a4;
      uint64_t v103 = *v97;
      _X16 = (char *)v97 + 15;
      uint64_t v104 = v103;
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      uint16x8_t v97 = (uint64_t *)((char *)v100 + a4);
      uint64_t v108 = *v100;
      __n128 result = (unint64_t)v100 + 15;
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X1,#7]
      }
      *int8x8_t v98 = v104;
      uint8x16_t v112 = (void *)((char *)v98 + a6);
      *uint8x16_t v112 = v108;
      int8x8_t v98 = (void *)((char *)v112 + a6);
      v96 -= 2;
    }
    while (v96 > 2);
    v12 += 8;
    v13 += 2;
  }
LABEL_18:
  if ((v59 & 4) != 0)
  {
    int v113 = v62 + 2;
    do
    {
      int v114 = *(_DWORD *)&v12[a4];
      *uint8x8_t v13 = *(_DWORD *)v12;
      v115 = (_DWORD *)((char *)v13 + a6);
      _DWORD *v115 = v114;
      uint8x8_t v13 = (_DWORD *)((char *)v115 + a6);
      v12 += v61;
      v113 -= 2;
    }
    while (v113 > 2);
  }
  return result;
}

int8x16_t sub_1D0CA9FBC(int a1, int a2, unint64_t a3, uint64_t a4, uint64_t _X4, uint64_t a6, int16x4_t *a7, int8x16_t result)
{
  uint64_t v11 = 2 * a6;
  uint64_t v12 = 2 * a4;
  if (a1 < 16)
  {
    char v75 = a1;
  }
  else
  {
    int8x8_t v13 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    result.i64[0] = vmovl_u8(qword_1D0D7FBB0[((a3 >> 16) & 7) - 1]).u64[0];
    uint64_t v14 = -2 - a4;
    uint64_t v15 = 4 * (a4 - 16);
    uint8x8_t v16 = (int16x8_t *)&a7[2];
    uint8x16_t v17 = (uint8x16_t)vdupq_lane_s8(v13, 0);
    uint8x8_t v18 = (uint8x8_t)vdup_lane_s8(v13, 1);
    uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(v13, 2);
    uint8x8_t v20 = (uint8x8_t)vdup_lane_s8(v13, 3);
    v21.i64[0] = 0xE000E000E000E000;
    v21.i64[1] = 0xE000E000E000E000;
    do
    {
      _X17 = _X4 + v14;
      _X5 = _X4 + v14 + 79;
      int8x16_t v24 = *(int8x16_t *)(_X4 + v14);
      __asm
      {
        PRFUM           #0, [X17,#0x1F]
        PRFM            #0, [X17,#0x40]
        PRFM            #0, [X5]
      }
      v8.i64[0] = *(void *)(_X4 + v14 + 16);
      __asm { PRFUM           #0, [X17,#0x1F] }
      _X17 = _X4 + v14 + 16 + v15;
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      int8x16_t v36 = *(int8x16_t *)(_X4 - 2);
      __asm
      {
        PRFUM           #0, [X4,#0x1D]
        PRFUM           #0, [X4,#0x3E]
        PRFUM           #0, [X4,#0x4D]
      }
      v9.i64[0] = *(void *)(_X4 + 14);
      __asm { PRFUM           #0, [X4,#0x1D] }
      _X5 = _X4 + 14 + v15;
      __asm
      {
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#7]
      }
      _X5 = (int8x16_t *)(_X4 + 14 + a4 - 16);
      _X7 = &_X5[4].i8[15];
      int8x16_t v46 = *_X5;
      __asm
      {
        PRFUM           #0, [X5,#0x1F]
        PRFM            #0, [X5,#0x40]
        PRFM            #0, [X7]
      }
      _X17 = (uint64_t *)(_X4 + 14 + a4);
      _X5 = (char *)_X17 + v15;
      uint64_t v52 = *_X17;
      _X17 = (uint64_t *)((char *)_X17 + 15);
      v10.i64[0] = v52;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#7]
      }
      int16x8_t v56 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), v19), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 6uLL), v20);
      int16x8_t v8 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v8, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v8, 0xCuLL), v19), (uint8x16_t)v24, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v8, 0xEuLL), v20);
      int16x8_t v57 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 4uLL), v19), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 6uLL), v20);
      int16x8_t v9 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v9, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v9, 0xCuLL), v19), (uint8x16_t)v36, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v9, 0xEuLL), v20);
      int16x8_t v58 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 4uLL), v19), *(uint8x8_t *)v46.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 6uLL), v20);
      int8x16_t v59 = vextq_s8(v46, (int8x16_t)v10, 0xCuLL);
      int16x8_t v10 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, (int8x16_t)v10, 0xAuLL), v18), *(uint8x8_t *)v59.i8, v19), (uint8x16_t)v46, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, (int8x16_t)v10, 0xEuLL), v20);
      uint64_t v60 = _X4;
      uint64_t v61 = v16;
      int v62 = a2 + 1;
      do
      {
        int16x8_t v63 = v57;
        int16x8_t v57 = v58;
        _X19 = v60 + v12;
        int8x16_t v65 = *(int8x16_t *)(v60 + v12 - 2);
        __asm
        {
          PRFUM           #0, [X19,#0x1D]
          PRFUM           #0, [X19,#0x3E]
          PRFUM           #0, [X19,#0x4D]
        }
        v59.i64[0] = *(void *)(v60 + v12 + 14);
        int16x8_t v58 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 2uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 4uLL), v19), *(uint8x8_t *)v65.i8, *(uint8x8_t *)v17.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 6uLL), v20);
        int32x4_t v69 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)result.i8, 1), *(int16x4_t *)v10.i8, *(int16x4_t *)result.i8, 2), *(int16x4_t *)v8.i8, *(int16x4_t *)result.i8, 0);
        int32x4_t v70 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v9, *(int16x4_t *)result.i8, 1), v10, *(int16x4_t *)result.i8, 2), v8, *(int16x4_t *)result.i8, 0);
        int16x8_t v8 = v9;
        int16x8_t v9 = v10;
        __asm { PRFUM           #0, [X19,#0x1D] }
        _X19 = v60 + 6 * a4 - 50;
        __asm
        {
          PRFM            #0, [X19]
          PRFUM           #0, [X19,#7]
        }
        int16x8_t v10 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v65, v59, 0xAuLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v59, 0xCuLL), v19), (uint8x16_t)v65, v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v65, v59, 0xEuLL), v20);
        int8x16_t v59 = (int8x16_t)vaddq_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)result.i8, 1), *(int16x4_t *)v57.i8, *(int16x4_t *)result.i8, 2), *(int16x4_t *)v56.i8, *(int16x4_t *)result.i8, 0), *(int16x4_t *)v58.i8, *(int16x4_t *)result.i8, 3), 6uLL), vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmlal_high_lane_s16(
                                   vmull_high_lane_s16(v63, *(int16x4_t *)result.i8, 1),
                                   v57,
                                   *(int16x4_t *)result.i8,
                                   2),
                                 v56,
                                 *(int16x4_t *)result.i8,
                                 0),
                               v58,
                               *(int16x4_t *)result.i8,
                               3),
                             6uLL),
                           v21);
        --v62;
        v61[-1] = (int16x8_t)v59;
        int16x8_t *v61 = vaddq_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(v69, *(int16x4_t *)v10.i8, *(int16x4_t *)result.i8, 3), 6uLL), vmlsl_high_lane_s16(v70, v10, *(int16x4_t *)result.i8, 3), 6uLL), v21);
        uint64_t v61 = (int16x8_t *)((char *)v61 + v11);
        v60 += a4;
        int16x8_t v56 = v63;
      }
      while (v62 > 1);
      a7 += 4;
      _X4 += 16;
      char v75 = a1 - 16;
      v16 += 2;
      BOOL v76 = a1 > 0x1F;
      a1 -= 16;
    }
    while (v76);
  }
  if ((v75 & 8) != 0)
  {
    int8x8_t v77 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    uint8x8_t v78 = (uint8x8_t)vdup_lane_s8(v77, 0);
    uint8x8_t v79 = (uint8x8_t)vdup_lane_s8(v77, 1);
    uint8x8_t v80 = (uint8x8_t)vdup_lane_s8(v77, 2);
    uint8x8_t v81 = (uint8x8_t)vdup_lane_s8(v77, 3);
    _X12 = (int8x16_t *)(_X4 - a4 - 2);
    int8x16_t v83 = *_X12;
    __asm { PRFUM           #0, [X12,#0x1F] }
    _X12 = &_X12->i8[4 * a4];
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X12 = _X4 - 2;
    int8x16_t v89 = *(int8x16_t *)(_X4 - 2);
    result.i64[0] = vmovl_u8(qword_1D0D7FBB0[((a3 >> 16) & 7) - 1]).u64[0];
    __asm { PRFUM           #0, [X12,#0x1F] }
    _X13 = _X4 - 2 + 4 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0xF]
    }
    _X12 = (_OWORD *)(_X4 - 2 + a4);
    _X13 = (char *)_X12 + 4 * a4;
    int8x16_t v96 = *(int8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0xF]
    }
    int16x8_t v100 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 2uLL), v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 4uLL), v80), *(uint8x8_t *)v83.i8, v78), (uint8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 6uLL), v81);
    int16x8_t v101 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 2uLL), v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 4uLL), v80), *(uint8x8_t *)v89.i8, v78), (uint8x8_t)*(_OWORD *)&vextq_s8(v89, v89, 6uLL), v81);
    int16x8_t v102 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 2uLL), v79), (uint8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 4uLL), v80), *(uint8x8_t *)v96.i8, v78), (uint8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 6uLL), v81);
    int v103 = a2 + 1;
    uint8x8_t v104 = (uint8x8_t)vdup_lane_s8(v77, 1);
    uint8x8_t v105 = (uint8x8_t)vdup_lane_s8(v77, 3);
    v106.i64[0] = 0xE000E000E000E000;
    v106.i64[1] = 0xE000E000E000E000;
    uint64_t v107 = _X4;
    uint64_t v108 = (int16x8_t *)a7;
    do
    {
      _X16 = v107 + v12;
      int8x16_t v110 = *(int8x16_t *)(v107 + v12 - 2);
      __asm { PRFUM           #0, [X16,#0x1D] }
      _X16 = v107 + 6 * a4 - 2;
      __asm
      {
        PRFM            #0, [X16]
        PRFUM           #0, [X16,#0xF]
      }
      int32x4_t v115 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)result.i8, 1), *(int16x4_t *)v102.i8, *(int16x4_t *)result.i8, 2), *(int16x4_t *)v100.i8, *(int16x4_t *)result.i8, 0);
      int32x4_t v116 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v101, *(int16x4_t *)result.i8, 1), v102, *(int16x4_t *)result.i8, 2), v100, *(int16x4_t *)result.i8, 0);
      int16x8_t v100 = v101;
      int16x8_t v101 = v102;
      int16x8_t v102 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 2uLL), v104), (uint8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 4uLL), v80), *(uint8x8_t *)v110.i8, v78), (uint8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 6uLL), v105);
      *uint64_t v108 = vaddq_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(v115, *(int16x4_t *)v102.i8, *(int16x4_t *)result.i8, 3), 6uLL), vmlsl_high_lane_s16(v116, v102, *(int16x4_t *)result.i8, 3), 6uLL), v106);
      uint64_t v108 = (int16x8_t *)((char *)v108 + v11);
      --v103;
      v107 += a4;
    }
    while (v103 > 1);
    a7 += 2;
    _X4 += 8;
  }
  if ((v75 & 4) != 0)
  {
    int8x8_t v117 = (int8x8_t)qword_1D0D7FBB0[((a3 >> 16) & 7) - 1];
    _X10 = (uint8x16_t *)(_X4 - a4 - 2);
    uint8x16_t v119 = *_X10;
    __asm { PRFUM           #0, [X10,#0x1F] }
    _X10 = &_X10->i8[4 * a4];
    __asm
    {
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#0xF]
    }
    _X10 = _X4 - 2;
    __n128 result = *(int8x16_t *)(_X4 - 2);
    __asm { PRFUM           #0, [X10,#0x1F] }
    _X12 = _X4 - 2 + 4 * a4;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X10 = (_OWORD *)(_X4 - 2 + a4);
    _X12 = (char *)_X10 + 4 * a4;
    int8x16_t v131 = *(int8x16_t *)_X10;
    _X10 = (_OWORD *)((char *)_X10 + 31);
    int8x16_t v132 = v131;
    int16x4_t v133 = (int16x4_t)vmovl_u8(qword_1D0D7FBB0[(a3 & 7) - 1]).u64[0];
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    int v137 = a2 + 1;
    uint8x16_t v138 = (uint8x16_t)vdupq_lane_s8(v117, 0);
    uint8x16_t v139 = (uint8x16_t)vdupq_lane_s8(v117, 1);
    int8x16_t v140 = vdupq_lane_s8(v117, 2);
    uint8x8_t v141 = (uint8x8_t)vextq_s8(v140, v140, 8uLL).u64[0];
    int8x16_t v142 = vdupq_lane_s8(v117, 3);
    uint8x8_t v143 = (uint8x8_t)vextq_s8(v142, v142, 8uLL).u64[0];
    do
    {
      uint8x16_t v144 = (uint8x16_t)result;
      __n128 result = v132;
      _X12 = _X4 + v12;
      int8x16_t v132 = *(int8x16_t *)(_X4 + v12 - 2);
      __asm { PRFUM           #0, [X12,#0x1D] }
      _X12 = _X4 + 6 * a4 - 2;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0xF]
      }
      int16x8_t v150 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v144.i8, *(uint8x8_t *)v139.i8), *(uint8x8_t *)result.i8, *(uint8x8_t *)v140.i8), *(uint8x8_t *)v119.i8, *(uint8x8_t *)v138.i8), *(uint8x8_t *)v132.i8, *(uint8x8_t *)v142.i8);
      int8x16_t v151 = (int8x16_t)vmlal_u8(vmull_high_u8(v119, v138), (uint8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL), v143);
      *(int16x4_t *)v151.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v144, v139), (uint8x8_t)*(_OWORD *)&vextq_s8(result, result, 8uLL), v141), *(int16x4_t *)v151.i8);
      *a7 = vadd_s16(vqshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v150, (int8x16_t)v150, 4uLL), v133, 1), v150, v133, 2), *(int16x4_t *)v150.i8, v133, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v150, v151, 0xCuLL), v133, 3), 6uLL), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v11);
      --v137;
      _X4 += a4;
      uint8x16_t v119 = v144;
    }
    while (v137 > 1);
  }
  return result;
}

double sub_1D0CAA528(int a1, int a2, unint64_t a3, uint64_t a4, _OWORD *_X4, uint64_t a6, int16x4_t *a7, uint8x16_t a8)
{
  uint64_t v8 = (a3 >> 16) & 7;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if (a1 < 16)
  {
    char v60 = a1;
  }
  else
  {
    int8x8_t v11 = (int8x8_t)qword_1D0D7FBB0[v8 - 1];
    uint64_t v12 = 4 * a4;
    a8 = (uint8x16_t)vdupq_lane_s8(v11, 0);
    uint8x16_t v13 = (uint8x16_t)vdupq_lane_s8(v11, 1);
    uint8x16_t v14 = (uint8x16_t)vdupq_lane_s8(v11, 2);
    uint8x16_t v15 = (uint8x16_t)vdupq_lane_s8(v11, 3);
    do
    {
      _X19 = (char *)_X4 + v12 - a4;
      _X7 = (uint64_t)_X4 - a4 + 31;
      uint8x16_t v18 = *(uint8x16_t *)((char *)_X4 - a4);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X19]
        PRFUM           #0, [X19,#0xF]
      }
      uint8x16_t v26 = *(uint8x16_t *)_X4;
      __asm { PRFUM           #0, [X4,#0x1F] }
      _X7 = (char *)_X4 + v12;
      __asm
      {
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#0xF]
      }
      _X20 = (char *)_X4 + a4 + v12;
      _X7 = (uint64_t)_X4 + a4 + 31;
      uint8x16_t v33 = *(uint8x16_t *)((char *)_X4 + a4);
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X20]
      }
      int v36 = a2 + 2;
      long long v37 = (uint16x8_t *)a7;
      __asm { PRFUM           #0, [X20,#0xF] }
      uint8x16_t v39 = _X4;
      do
      {
        _X21 = (uint64_t)v39 + v9 + 31;
        uint8x16_t v41 = *(uint8x16_t *)((char *)v39 + 2 * a4);
        __asm { PRFM            #0, [X21] }
        _X21 = (char *)v39 + 6 * a4;
        __asm
        {
          PRFM            #0, [X21]
          PRFUM           #0, [X21,#0xF]
        }
        v46.i64[0] = 0xE000E000E000E000;
        v46.i64[1] = 0xE000E000E000E000;
        uint16x8_t v47 = vmlsl_u8(vmlal_u8(vmlal_u8(v46, *(uint8x8_t *)v26.i8, *(uint8x8_t *)v13.i8), *(uint8x8_t *)v33.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v18.i8, *(uint8x8_t *)a8.i8);
        v48.i64[0] = 0xE000E000E000E000;
        v48.i64[1] = 0xE000E000E000E000;
        uint16x8_t v49 = vmlsl_high_u8(vmlal_high_u8(vmlal_high_u8(v48, v26, v13), v33, v14), v18, a8);
        v50.i64[0] = 0xE000E000E000E000;
        v50.i64[1] = 0xE000E000E000E000;
        uint16x8_t v51 = vmlal_u8(v50, *(uint8x8_t *)v33.i8, *(uint8x8_t *)v13.i8);
        v52.i64[0] = 0xE000E000E000E000;
        v52.i64[1] = 0xE000E000E000E000;
        uint16x8_t v53 = vmlal_high_u8(v52, v33, v13);
        uint8x16_t v18 = v33;
        _X21 = (uint64_t)v39 + 3 * a4 + 31;
        uint8x16_t v33 = *(uint8x16_t *)((char *)v39 + 3 * a4);
        __asm { PRFM            #0, [X21] }
        _X21 = (char *)v39 + 7 * a4;
        __asm
        {
          PRFM            #0, [X21]
          PRFUM           #0, [X21,#0xF]
        }
        *long long v37 = vmlsl_u8(v47, *(uint8x8_t *)v41.i8, *(uint8x8_t *)v15.i8);
        v37[1] = vmlsl_high_u8(v49, v41, v15);
        uint8x16_t v39 = (_OWORD *)((char *)v39 + a4 + a4);
        int8x16_t v59 = (uint16x8_t *)((char *)v37 + v10);
        v36 -= 2;
        uint16x8_t *v59 = vmlsl_u8(vmlsl_u8(vmlal_u8(v51, *(uint8x8_t *)v41.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v26.i8, *(uint8x8_t *)a8.i8), *(uint8x8_t *)v33.i8, *(uint8x8_t *)v15.i8);
        v59[1] = vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v53, v41, v14), v26, a8), v33, v15);
        long long v37 = (uint16x8_t *)((char *)v59 + v10);
        uint8x16_t v26 = v41;
      }
      while (v36 > 2);
      a7 += 4;
      ++_X4;
      char v60 = a1 - 16;
      BOOL v61 = a1 > 0x1F;
      a1 -= 16;
    }
    while (v61);
  }
  uint64_t v62 = 4 * a6;
  if ((v60 & 8) != 0)
  {
    int8x8_t v63 = (int8x8_t)qword_1D0D7FBB0[v8 - 1];
    _X15 = (uint64_t)_X4 + 4 * a4 - a4;
    _X14 = (uint64_t)_X4 - a4 + 15;
    uint8x8_t v66 = *(uint8x8_t *)((char *)_X4 - a4);
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFUM           #0, [X15,#7]
    }
    a8.i64[0] = *(void *)_X4;
    __asm { PRFUM           #0, [X4,#0xF] }
    _X14 = (char *)_X4 + 4 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    _X15 = (uint64_t)_X4 + a4 + 15;
    uint8x8_t v75 = *(uint8x8_t *)((char *)_X4 + a4);
    _X14 = (uint64_t)_X4 + 4 * a4 + a4;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    int v80 = a2 + 2;
    uint8x8_t v81 = (uint8x8_t)vdup_lane_s8(v63, 1);
    uint8x8_t v82 = (uint8x8_t)vdup_lane_s8(v63, 0);
    uint8x8_t v83 = (uint8x8_t)vdup_lane_s8(v63, 2);
    long long v84 = (uint16x8_t *)a7;
    long long v85 = (char *)_X4;
    uint8x8_t v86 = (uint8x8_t)vdup_lane_s8(v63, 3);
    do
    {
      _X5 = (uint64_t)&v85[v9 + 15];
      uint8x8_t v88 = *(uint8x8_t *)&v85[2 * a4];
      __asm { PRFM            #0, [X5] }
      _X5 = &v85[6 * a4];
      __asm
      {
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#7]
      }
      v93.i64[0] = 0xE000E000E000E000;
      v93.i64[1] = 0xE000E000E000E000;
      uint16x8_t v94 = vmlsl_u8(vmlal_u8(vmlal_u8(v93, *(uint8x8_t *)a8.i8, v81), v75, v83), v66, v82);
      v95.i64[0] = 0xE000E000E000E000;
      v95.i64[1] = 0xE000E000E000E000;
      uint16x8_t v96 = vmlal_u8(v95, v75, v81);
      uint8x8_t v66 = v75;
      _X5 = (uint64_t)&v85[3 * a4 + 15];
      uint8x8_t v75 = *(uint8x8_t *)&v85[3 * a4];
      int8x8_t v98 = &v85[a4];
      __asm { PRFM            #0, [X5] }
      _X2 = &v85[7 * a4];
      __asm
      {
        PRFM            #0, [X2]
        PRFUM           #0, [X2,#7]
      }
      *long long v84 = vmlsl_u8(v94, v88, v86);
      *(uint16x8_t *)((char *)v84 + v10) = vmlsl_u8(vmlsl_u8(vmlal_u8(v96, v88, v83), *(uint8x8_t *)a8.i8, v82), v75, v86);
      long long v85 = &v98[a4];
      long long v84 = (uint16x8_t *)((char *)v84 + v62);
      v80 -= 2;
      *(uint8x8_t *)a8.i8 = v88;
    }
    while (v80 > 2);
    a7 += 2;
    _X4 = (_OWORD *)((char *)_X4 + 8);
  }
  if ((v60 & 4) != 0)
  {
    _X14 = (uint64_t)_X4 + 4 * a4 - a4;
    _X12 = (uint64_t)_X4 - a4 + 15;
    uint8x8_t v105 = *(uint8x8_t *)((char *)_X4 - a4);
    int8x8_t v106 = (int8x8_t)qword_1D0D7FBB0[v8 - 1];
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    uint8x8_t v110 = *(uint8x8_t *)_X4;
    __asm { PRFUM           #0, [X4,#0xF] }
    _X11 = (char *)_X4 + 4 * a4;
    __asm
    {
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    _X12 = (uint64_t)_X4 + 4 * a4 + a4;
    _X11 = (uint64_t)_X4 + a4 + 15;
    a8.i64[0] = *(void *)((char *)_X4 + a4);
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#7]
    }
    int v120 = a2 + 2;
    uint8x8_t v121 = (uint8x8_t)vdup_lane_s8(v106, 1);
    uint8x8_t v122 = (uint8x8_t)vdup_lane_s8(v106, 0);
    uint8x8_t v123 = (uint8x8_t)vdup_lane_s8(v106, 2);
    uint8x8_t v124 = (uint8x8_t)vdup_lane_s8(v106, 3);
    do
    {
      _X16 = (uint64_t)_X4 + v9 + 15;
      uint8x8_t v126 = *(uint8x8_t *)((char *)_X4 + 2 * a4);
      __asm { PRFM            #0, [X16] }
      _X16 = (char *)_X4 + 6 * a4;
      __asm
      {
        PRFM            #0, [X16]
        PRFUM           #0, [X16,#7]
      }
      _X16 = (void *)((char *)_X4 + 3 * a4);
      _X17 = (char *)_X4 + 7 * a4;
      _X4 = (_OWORD *)((char *)_X4 + a4 + a4);
      uint16x8_t v133 = vmull_u8(v105, v122);
      uint16x8_t v134 = vmull_u8(*(uint8x8_t *)a8.i8, v121);
      int16x4_t v135 = (int16x4_t)vmlal_u8(vmull_u8(v110, v121), *(uint8x8_t *)a8.i8, v123).u64[0];
      uint8x8_t v105 = *(uint8x8_t *)a8.i8;
      uint8x8_t v136 = *(uint8x8_t *)_X16;
      _X16 = (void *)((char *)_X16 + 15);
      *(uint8x8_t *)a8.i8 = v136;
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      *a7 = vadd_s16(vsub_s16(v135, (int16x4_t)*(_OWORD *)&vmlal_u8(v133, v126, v124)), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + v10) = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(v134, v126, v123), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(v110, v122), v136, v124)), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v62);
      v120 -= 2;
      uint8x8_t v110 = v126;
    }
    while (v120 > 2);
  }
  return *(double *)a8.i64;
}

int16x4_t *sub_1D0CAA8AC(int16x4_t *result, int a2, char a3, uint64_t a4, uint64_t _X4, uint64_t a6, int16x4_t *a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13, double a14, int8x16_t a15)
{
  uint64_t v15 = 2 * a4;
  uint64_t v16 = 2 * a6;
  if ((int)result < 16)
  {
    char v34 = (char)result;
  }
  else
  {
    int8x8_t v17 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    uint8x16_t v18 = (uint8x16_t)vdupq_lane_s8(v17, 0);
    uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(v17, 1);
    uint8x8_t v20 = (uint8x8_t)vdup_lane_s8(v17, 2);
    uint8x8_t v21 = (uint8x8_t)vdup_lane_s8(v17, 3);
    do
    {
      uint64_t v22 = -2;
      int v23 = a2 + 2;
      int8x16_t v24 = (uint16x8_t *)a7;
      do
      {
        int8x16_t v25 = *(int8x16_t *)(_X4 + v22);
        a13.i64[0] = *(void *)(_X4 + v22 + 16);
        uint8x16_t v26 = (int8x16_t *)(_X4 + v22 + a4);
        int8x16_t v27 = *v26;
        a15.i64[0] = v26[1].i64[0];
        uint8x8_t v28 = (uint8x8_t)vextq_s8(*v26, a15, 0xAuLL).u64[0];
        uint8x8_t v29 = (uint8x8_t)vextq_s8(*v26, a15, 0xCuLL).u64[0];
        a15 = vextq_s8(*v26, a15, 0xEuLL);
        v30.i64[0] = 0xE000E000E000E000;
        v30.i64[1] = 0xE000E000E000E000;
        v31.i64[0] = 0xE000E000E000E000;
        v31.i64[1] = 0xE000E000E000E000;
        *int8x16_t v24 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v30, (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 4uLL), v20), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 6uLL), v21);
        v24[1] = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmlal_u8(v31, (uint8x8_t)*(_OWORD *)&vextq_s8(v25, a13, 0xAuLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, a13, 0xCuLL), v20), (uint8x16_t)v25, v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, a13, 0xEuLL), v21);
        v25.i64[0] = 0xE000E000E000E000;
        v25.i64[1] = 0xE000E000E000E000;
        uint8x8_t v32 = (int8x16_t *)&v24->i8[v16];
        v33.i64[0] = 0xE000E000E000E000;
        v33.i64[1] = 0xE000E000E000E000;
        a13 = (int8x16_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmlal_u8(v33, v28, v19), v29, v20), (uint8x16_t)v27, v18), *(uint8x8_t *)a15.i8, v21);
        *(uint16x8_t *)uint8x8_t v32 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8((uint16x8_t)v25, (uint8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 4uLL), v20), *(uint8x8_t *)v27.i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 6uLL), v21);
        v32[1] = a13;
        v22 += v15;
        v23 -= 2;
        int8x16_t v24 = (uint16x8_t *)&v32->i8[v16];
      }
      while (v23 > 2);
      a7 += 4;
      _X4 += 16;
      char v34 = (_BYTE)result - 16;
      BOOL v35 = result > 0x1F;
      __n128 result = (int16x4_t *)(result - 16);
    }
    while (v35);
  }
  uint64_t v36 = 4 * a4;
  uint64_t v37 = 4 * a6;
  if ((v34 & 8) != 0)
  {
    int8x8_t v38 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    int v39 = a2 + 2;
    uint8x8_t v40 = (uint8x8_t)vdup_lane_s8(v38, 0);
    uint8x8_t v41 = (uint8x8_t)vdup_lane_s8(v38, 1);
    uint8x8_t v42 = (uint8x8_t)vdup_lane_s8(v38, 2);
    uint8x8_t v43 = (uint8x8_t)vdup_lane_s8(v38, 3);
    _X17 = _X4;
    __n128 result = a7;
    do
    {
      int8x16_t v45 = *(int8x16_t *)(_X17 - 2);
      __asm { PRFUM           #0, [X17,#0x1D] }
      _X5 = _X17 + v36 - 2;
      __asm
      {
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#0xF]
      }
      _X5 = _X17 + a4;
      int8x16_t v55 = *(int8x16_t *)(_X17 + a4 - 2);
      __asm { PRFUM           #0, [X5,#0x1D] }
      _X5 = _X17 + v36 - 2 + a4;
      __asm
      {
        PRFM            #0, [X5]
        PRFUM           #0, [X5,#0xF]
      }
      v60.i64[0] = 0xE000E000E000E000;
      v60.i64[1] = 0xE000E000E000E000;
      *(uint16x8_t *)result->i8 = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8(v60, (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 2uLL), v41), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 4uLL), v42), *(uint8x8_t *)v45.i8, v40), (uint8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 6uLL), v43);
      v45.i64[0] = 0xE000E000E000E000;
      v45.i64[1] = 0xE000E000E000E000;
      *(uint16x8_t *)&result->i8[v16] = vmlsl_u8(vmlsl_u8(vmlal_u8(vmlal_u8((uint16x8_t)v45, (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 2uLL), v41), (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 4uLL), v42), *(uint8x8_t *)v55.i8, v40), (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 6uLL), v43);
      __n128 result = (int16x4_t *)((char *)result + v37);
      v39 -= 2;
      _X17 += v15;
    }
    while (v39 > 2);
    a7 += 2;
    _X4 += 8;
  }
  if ((v34 & 4) != 0)
  {
    int8x8_t v61 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    int v62 = a2 + 2;
    uint64_t v63 = v36 - 2;
    uint8x8_t v64 = (uint8x8_t)vdup_lane_s8(v61, 0);
    uint8x8_t v65 = (uint8x8_t)vdup_lane_s8(v61, 1);
    uint64_t v66 = v36 - 2 + a4;
    uint8x8_t v67 = (uint8x8_t)vdup_lane_s8(v61, 2);
    uint8x8_t v68 = (uint8x8_t)vdup_lane_s8(v61, 3);
    do
    {
      int8x16_t v69 = *(int8x16_t *)(_X4 - 2);
      __asm { PRFUM           #0, [X4,#0x1D] }
      _X14 = _X4 + v63;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0xF]
      }
      _X14 = _X4 + a4;
      int8x16_t v75 = *(int8x16_t *)(_X4 + a4 - 2);
      __asm { PRFUM           #0, [X14,#0x1D] }
      _X14 = _X4 + v66;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0xF]
      }
      *a7 = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 2uLL), v65), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 4uLL), v67), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(*(uint8x8_t *)v69.i8, v64), (uint8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 6uLL), v68)), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + v16) = vadd_s16(vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v75, v75, 2uLL), v65), (uint8x8_t)*(_OWORD *)&vextq_s8(v75, v75, 4uLL), v67), (int16x4_t)*(_OWORD *)&vmlal_u8(vmull_u8(*(uint8x8_t *)v75.i8, v64), (uint8x8_t)*(_OWORD *)&vextq_s8(v75, v75, 6uLL), v68)), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v37);
      v62 -= 2;
      _X4 += v15;
    }
    while (v62 > 2);
  }
  return result;
}

uint64_t sub_1D0CAAB58(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t _X4, uint64_t a6, int8x8_t *a7)
{
  if ((int)result < 16)
  {
    uint8x8_t v21 = a7;
    char v76 = result;
  }
  else
  {
    unint64_t v10 = 0;
    int8x8_t v11 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    int16x4_t v12 = (int16x4_t)vmovl_u8(qword_1D0D7FBB0[((a3 >> 16) & 7) - 1]).u64[0];
    uint64_t v13 = -2 - a4;
    uint64_t v14 = 4 * (a4 - 16);
    uint64_t v15 = _X4 + 6 * a4 - 50;
    uint8x16_t v16 = (uint8x16_t)vdupq_lane_s8(v11, 0);
    uint8x8_t v17 = (uint8x8_t)vdup_lane_s8(v11, 1);
    uint8x8_t v18 = (uint8x8_t)vdup_lane_s8(v11, 2);
    uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(v11, 3);
    uint64_t v20 = _X4 + 2 * a4;
    uint8x8_t v21 = a7;
    do
    {
      _X17 = _X4 + v13;
      _X7 = _X4 + v13 + 79;
      int8x16_t v24 = *(int8x16_t *)(_X4 + v13);
      __asm
      {
        PRFUM           #0, [X17,#0x1F]
        PRFM            #0, [X17,#0x40]
        PRFM            #0, [X7]
      }
      v7.i64[0] = *(void *)(_X4 + v13 + 16);
      __asm { PRFUM           #0, [X17,#0x1F] }
      _X17 = _X4 + v13 + 16 + v14;
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#7]
      }
      int8x16_t v36 = *(int8x16_t *)(_X4 - 2);
      __asm
      {
        PRFUM           #0, [X4,#0x1D]
        PRFUM           #0, [X4,#0x3E]
        PRFUM           #0, [X4,#0x4D]
      }
      v8.i64[0] = *(void *)(_X4 + 14);
      __asm { PRFUM           #0, [X4,#0x1D] }
      _X7 = _X4 + 14 + v14;
      __asm
      {
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#7]
      }
      _X7 = (int8x16_t *)(_X4 + 14 + a4 - 16);
      _X19 = &_X7[4].i8[15];
      int8x16_t v46 = *_X7;
      __asm
      {
        PRFUM           #0, [X7,#0x1F]
        PRFM            #0, [X7,#0x40]
        PRFM            #0, [X19]
      }
      _X17 = (uint64_t *)(_X4 + 14 + a4);
      _X7 = (char *)_X17 + v14;
      uint64_t v52 = *_X17;
      _X17 = (uint64_t *)((char *)_X17 + 15);
      v9.i64[0] = v52;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X7]
        PRFUM           #0, [X7,#7]
      }
      int16x8_t v56 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 2uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), v18), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v16.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 6uLL), v19);
      int16x8_t v7 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v7, 0xAuLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v7, 0xCuLL), v18), (uint8x16_t)v24, v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v24, (int8x16_t)v7, 0xEuLL), v19);
      int16x8_t v57 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 2uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 4uLL), v18), *(uint8x8_t *)v36.i8, *(uint8x8_t *)v16.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 6uLL), v19);
      int16x8_t v8 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v8, 0xAuLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v8, 0xCuLL), v18), (uint8x16_t)v36, v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v36, (int8x16_t)v8, 0xEuLL), v19);
      int16x8_t v58 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 2uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 4uLL), v18), *(uint8x8_t *)v46.i8, *(uint8x8_t *)v16.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 6uLL), v19);
      int32x4_t v59 = (int32x4_t)vextq_s8(v46, (int8x16_t)v9, 0xCuLL);
      int16x8_t v9 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, (int8x16_t)v9, 0xAuLL), v17), *(uint8x8_t *)v59.i8, v18), (uint8x16_t)v46, v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, (int8x16_t)v9, 0xEuLL), v19);
      uint64_t v60 = v20;
      uint64_t v61 = v15;
      int v62 = a2 + 1;
      uint64_t v63 = a7;
      do
      {
        int16x8_t v64 = v57;
        int16x8_t v57 = v58;
        _X21 = v60 + v10;
        int8x16_t v66 = *(int8x16_t *)(v60 + v10 - 2);
        __asm
        {
          PRFUM           #0, [X21,#0x1D]
          PRFUM           #0, [X21,#0x3E]
          PRFUM           #0, [X21,#0x4D]
        }
        v59.i64[0] = *(void *)(v60 + v10 + 14);
        int16x8_t v58 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 2uLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 4uLL), v18), *(uint8x8_t *)v66.i8, *(uint8x8_t *)v16.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 6uLL), v19);
        int32x4_t v70 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v8.i8, v12, 1), *(int16x4_t *)v9.i8, v12, 2), *(int16x4_t *)v7.i8, v12, 0);
        int32x4_t v71 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v8, v12, 1), v9, v12, 2), v7, v12, 0);
        int16x8_t v7 = v8;
        int16x8_t v8 = v9;
        __asm { PRFUM           #0, [X21,#0x1D] }
        _X21 = v61 + v10;
        __asm
        {
          PRFM            #0, [X21]
          PRFUM           #0, [X21,#7]
        }
        int16x8_t v9 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v66, (int8x16_t)v59, 0xAuLL), v17), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, (int8x16_t)v59, 0xCuLL), v18), (uint8x16_t)v66, v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, (int8x16_t)v59, 0xEuLL), v19);
        int32x4_t v59 = vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v64, v12, 1), v57, v12, 2), v56, v12, 0), v58, v12, 3);
        *(int8x16_t *)v63[v10 / 8].i8 = vqrshrun_high_n_s16(vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v64.i8, v12, 1), *(int16x4_t *)v57.i8, v12, 2), *(int16x4_t *)v56.i8, v12, 0), *(int16x4_t *)v58.i8, v12, 3), 6uLL), v59, 6uLL),
                                            6uLL),
                                          vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(v70, *(int16x4_t *)v9.i8, v12, 3), 6uLL), vmlsl_high_lane_s16(v71, v9, v12, 3), 6uLL), 6uLL);
        uint64_t v63 = (int8x8_t *)((char *)v63 + a6);
        --v62;
        v61 += a4;
        v60 += a4;
        int16x8_t v56 = v64;
      }
      while (v62 > 1);
      v21 += 2;
      _X4 += 16;
      char v76 = result - 16;
      v10 += 16;
      BOOL v77 = result > 0x1F;
      __n128 result = (result - 16);
    }
    while (v77);
  }
  uint64_t v78 = 2 * a4;
  if ((v76 & 8) != 0)
  {
    int8x8_t v79 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    uint8x8_t v80 = (uint8x8_t)vdup_lane_s8(v79, 0);
    uint8x8_t v81 = (uint8x8_t)vdup_lane_s8(v79, 1);
    uint8x8_t v82 = (uint8x8_t)vdup_lane_s8(v79, 2);
    uint8x8_t v83 = (uint8x8_t)vdup_lane_s8(v79, 3);
    _X12 = (int8x16_t *)(_X4 - a4 - 2);
    int8x16_t v85 = *_X12;
    int16x4_t v86 = (int16x4_t)vmovl_u8(qword_1D0D7FBB0[((a3 >> 16) & 7) - 1]).u64[0];
    __asm { PRFUM           #0, [X12,#0x1F] }
    _X12 = &_X12->i8[4 * a4];
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X12 = _X4 - 2;
    int8x16_t v92 = *(int8x16_t *)(_X4 - 2);
    __asm { PRFUM           #0, [X12,#0x1F] }
    _X13 = _X4 - 2 + 4 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0xF]
    }
    _X12 = (_OWORD *)(_X4 - 2 + a4);
    _X13 = (char *)_X12 + 4 * a4;
    int8x16_t v99 = *(int8x16_t *)_X12;
    _X12 = (_OWORD *)((char *)_X12 + 31);
    __asm
    {
      PRFM            #0, [X12]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0xF]
    }
    int16x8_t v103 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 4uLL), v82), *(uint8x8_t *)v85.i8, v80), (uint8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 6uLL), v83);
    int16x8_t v104 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 4uLL), v82), *(uint8x8_t *)v92.i8, v80), (uint8x8_t)*(_OWORD *)&vextq_s8(v92, v92, 6uLL), v83);
    int16x8_t v105 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v99, v99, 2uLL), v81), (uint8x8_t)*(_OWORD *)&vextq_s8(v99, v99, 4uLL), v82), *(uint8x8_t *)v99.i8, v80), (uint8x8_t)*(_OWORD *)&vextq_s8(v99, v99, 6uLL), v83);
    int v106 = a2 + 1;
    uint8x8_t v107 = (uint8x8_t)vdup_lane_s8(v79, 1);
    uint8x8_t v108 = (uint8x8_t)vdup_lane_s8(v79, 3);
    uint64_t v109 = _X4;
    uint8x8_t v110 = v21;
    do
    {
      _X16 = v109 + v78;
      int8x16_t v112 = *(int8x16_t *)(v109 + v78 - 2);
      __asm { PRFUM           #0, [X16,#0x1D] }
      _X16 = v109 + 6 * a4 - 2;
      __asm
      {
        PRFM            #0, [X16]
        PRFUM           #0, [X16,#0xF]
      }
      int32x4_t v117 = vmlsl_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, v86, 1), *(int16x4_t *)v105.i8, v86, 2), *(int16x4_t *)v103.i8, v86, 0);
      int32x4_t v118 = vmlsl_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, v86, 1), v105, v86, 2), v103, v86, 0);
      int16x8_t v103 = v104;
      int16x8_t v104 = v105;
      int16x8_t v105 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 2uLL), v107), (uint8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 4uLL), v82), *(uint8x8_t *)v112.i8, v80), (uint8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 6uLL), v108);
      *uint8x8_t v110 = vqrshrun_n_s16(vqshrn_high_n_s32(vqshrn_n_s32(vmlsl_lane_s16(v117, *(int16x4_t *)v105.i8, v86, 3), 6uLL), vmlsl_high_lane_s16(v118, v105, v86, 3), 6uLL), 6uLL);
      uint8x8_t v110 = (int8x8_t *)((char *)v110 + a6);
      --v106;
      v109 += a4;
    }
    while (v106 > 1);
    ++v21;
    _X4 += 8;
  }
  if ((v76 & 4) != 0)
  {
    int8x8_t v119 = (int8x8_t)qword_1D0D7FBB0[((a3 >> 16) & 7) - 1];
    int16x4_t v120 = (int16x4_t)vmovl_u8(qword_1D0D7FBB0[(a3 & 7) - 1]).u64[0];
    _X9 = (uint8x16_t *)(_X4 - a4 - 2);
    uint8x16_t v122 = *_X9;
    __asm { PRFUM           #0, [X9,#0x1F] }
    _X9 = &_X9->i8[4 * a4];
    __asm
    {
      PRFM            #0, [X9]
      PRFUM           #0, [X9,#0xF]
    }
    _X9 = _X4 - 2;
    int8x16_t v128 = *(int8x16_t *)(_X4 - 2);
    __asm { PRFUM           #0, [X9,#0x1F] }
    _X12 = _X4 - 2 + 4 * a4;
    __asm
    {
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    _X9 = (_OWORD *)(_X4 - 2 + a4);
    _X12 = (char *)_X9 + 4 * a4;
    int8x16_t v135 = *(int8x16_t *)_X9;
    _X9 = (_OWORD *)((char *)_X9 + 31);
    int8x16_t v136 = v135;
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X12]
      PRFUM           #0, [X12,#0xF]
    }
    int v140 = a2 + 1;
    uint8x16_t v141 = (uint8x16_t)vdupq_lane_s8(v119, 0);
    uint8x16_t v142 = (uint8x16_t)vdupq_lane_s8(v119, 1);
    int8x16_t v143 = vdupq_lane_s8(v119, 2);
    uint8x8_t v144 = (uint8x8_t)vextq_s8(v143, v143, 8uLL).u64[0];
    int8x16_t v145 = vdupq_lane_s8(v119, 3);
    uint8x8_t v146 = (uint8x8_t)vextq_s8(v145, v145, 8uLL).u64[0];
    do
    {
      uint8x16_t v147 = (uint8x16_t)v128;
      int8x16_t v128 = v136;
      _X12 = _X4 + v78;
      int8x16_t v136 = *(int8x16_t *)(_X4 + v78 - 2);
      __asm { PRFUM           #0, [X12,#0x1D] }
      _X12 = _X4 + 6 * a4 - 2;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0xF]
      }
      int16x8_t v153 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v147.i8, *(uint8x8_t *)v142.i8), *(uint8x8_t *)v128.i8, *(uint8x8_t *)v143.i8), *(uint8x8_t *)v122.i8, *(uint8x8_t *)v141.i8), *(uint8x8_t *)v136.i8, *(uint8x8_t *)v145.i8);
      int8x16_t v154 = (int8x16_t)vmlal_u8(vmull_high_u8(v122, v141), (uint8x8_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL), v146);
      *(int16x4_t *)v154.i8 = vsub_s16((int16x4_t)*(_OWORD *)&vmlal_u8(vmull_high_u8(v147, v142), (uint8x8_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL), v144), *(int16x4_t *)v154.i8);
      int16x8_t v155 = (int16x8_t)vextq_s8((int8x16_t)v153, v154, 0xCuLL);
      *(int16x4_t *)v155.i8 = vqshrn_n_s32(vmlsl_lane_s16(vmlsl_lane_s16(vmlal_high_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v153, (int8x16_t)v153, 4uLL), v120, 1), v153, v120, 2), *(int16x4_t *)v153.i8, v120, 0), *(int16x4_t *)v155.i8, v120, 3), 6uLL);
      v21->i32[0] = vqrshrun_n_s16(v155, 6uLL).u32[0];
      uint8x8_t v21 = (int8x8_t *)((char *)v21 + a6);
      --v140;
      _X4 += a4;
      uint8x16_t v122 = v147;
    }
    while (v140 > 1);
  }
  return result;
}

double sub_1D0CAB0D0(int a1, int a2, unint64_t a3, uint64_t a4, _OWORD *_X4, uint64_t a6, int8x8_t *a7, uint8x16_t a8)
{
  uint64_t v8 = (a3 >> 16) & 7;
  uint64_t v9 = 2 * a4;
  if (a1 < 16)
  {
    uint8x8_t v21 = a7;
    char v66 = a1;
  }
  else
  {
    unint64_t v10 = 0;
    int8x8_t v11 = (int8x8_t)qword_1D0D7FBB0[v8 - 1];
    uint64_t v12 = 4 * a4;
    uint64_t v13 = 2 * a6;
    uint64_t v14 = (uint64_t)_X4 + 8 * a4 - a4;
    uint64_t v15 = (char *)_X4 + 3 * a4;
    uint8x16_t v16 = (char *)_X4 + 2 * a4;
    a8 = (uint8x16_t)vdupq_lane_s8(v11, 0);
    uint8x16_t v17 = (uint8x16_t)vdupq_lane_s8(v11, 1);
    uint8x8_t v18 = (char *)_X4 + 6 * a4;
    uint8x16_t v19 = (uint8x16_t)vdupq_lane_s8(v11, 2);
    uint8x16_t v20 = (uint8x16_t)vdupq_lane_s8(v11, 3);
    uint8x8_t v21 = a7;
    do
    {
      _X22 = (uint64_t)_X4 - a4 + 31;
      uint8x16_t v23 = *(uint8x16_t *)((char *)_X4 - a4);
      _X21 = (char *)_X4 + v12 - a4;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      uint8x16_t v32 = *(uint8x16_t *)_X4;
      __asm { PRFUM           #0, [X4,#0x1F] }
      _X21 = (char *)_X4 + v12;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0xF]
      }
      _X27 = (char *)_X4 + a4 + v12;
      _X21 = (uint64_t)_X4 + a4 + 31;
      uint8x16_t v39 = *(uint8x16_t *)((char *)_X4 + a4);
      __asm { PRFM            #0, [X21] }
      uint8x8_t v41 = v18;
      uint8x8_t v42 = v16;
      uint8x8_t v43 = v15;
      uint64_t v44 = v14;
      __asm { PRFM            #0, [X27] }
      int v46 = a2 + 2;
      uint16x8_t v47 = a7;
      __asm { PRFUM           #0, [X27,#0xF] }
      uint16x8_t v49 = (char *)a7 + a6;
      do
      {
        uint8x16_t v50 = v39;
        _X28 = (uint64_t)&v42[v10 + 31];
        uint8x16_t v52 = *(uint8x16_t *)&v42[v10];
        __asm { PRFM            #0, [X28] }
        _X28 = &v41[v10];
        __asm
        {
          PRFM            #0, [X28]
          PRFUM           #0, [X28,#0xF]
        }
        uint16x8_t v57 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v17.i8), *(uint8x8_t *)v39.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v23.i8, *(uint8x8_t *)a8.i8);
        uint16x8_t v58 = vmlsl_high_u8(vmlal_high_u8(vmull_high_u8(v32, v17), v39, v19), v23, a8);
        uint16x8_t v59 = vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v17.i8);
        uint16x8_t v60 = vmull_high_u8(v39, v17);
        _X28 = (uint64_t)&v43[v10 + 31];
        uint8x16_t v39 = *(uint8x16_t *)&v43[v10];
        uint8x16_t v23 = v50;
        __asm { PRFM            #0, [X28] }
        _X28 = v44 + v10;
        __asm
        {
          PRFM            #0, [X28]
          PRFUM           #0, [X28,#0xF]
        }
        *(int8x16_t *)v47[v10 / 8].i8 = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(v57, *(uint8x8_t *)v52.i8, *(uint8x8_t *)v20.i8), 6uLL), (int16x8_t)vmlsl_high_u8(v58, v52, v20), 6uLL);
        *(int8x16_t *)&v49[v10] = vqrshrun_high_n_s16(vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v59, *(uint8x8_t *)v52.i8, *(uint8x8_t *)v19.i8), *(uint8x8_t *)v32.i8, *(uint8x8_t *)a8.i8), *(uint8x8_t *)v39.i8, *(uint8x8_t *)v20.i8), 6uLL), (int16x8_t)vmlsl_high_u8(vmlsl_high_u8(vmlal_high_u8(v60, v52, v19), v32, a8), v39, v20), 6uLL);
        v49 += v13;
        uint16x8_t v47 = (int8x8_t *)((char *)v47 + v13);
        v46 -= 2;
        v44 += v9;
        v43 += v9;
        v42 += v9;
        v41 += v9;
        uint8x16_t v32 = v52;
      }
      while (v46 > 2);
      v21 += 2;
      ++_X4;
      char v66 = a1 - 16;
      v10 += 16;
      BOOL v67 = a1 > 0x1F;
      a1 -= 16;
    }
    while (v67);
  }
  if ((v66 & 8) != 0)
  {
    int8x8_t v68 = (int8x8_t)qword_1D0D7FBB0[v8 - 1];
    _X14 = (uint64_t)_X4 + 4 * a4 - a4;
    _X13 = (uint64_t)_X4 - a4 + 15;
    uint8x8_t v71 = *(uint8x8_t *)((char *)_X4 - a4);
    __asm
    {
      PRFM            #0, [X13]
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#7]
    }
    a8.i64[0] = *(void *)_X4;
    __asm { PRFUM           #0, [X4,#0xF] }
    _X13 = (char *)_X4 + 4 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    _X14 = (uint64_t)_X4 + a4 + 15;
    uint8x8_t v80 = *(uint8x8_t *)((char *)_X4 + a4);
    _X13 = (uint64_t)_X4 + 4 * a4 + a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#7]
    }
    int v85 = a2 + 2;
    uint8x8_t v86 = (uint8x8_t)vdup_lane_s8(v68, 1);
    uint8x8_t v87 = (uint8x8_t)vdup_lane_s8(v68, 0);
    uint8x8_t v88 = (uint8x8_t)vdup_lane_s8(v68, 2);
    int8x16_t v89 = v21;
    uint16x8_t v90 = (char *)_X4;
    uint8x8_t v91 = (uint8x8_t)vdup_lane_s8(v68, 3);
    do
    {
      int8x16_t v92 = &v90[a4];
      _X6 = (uint64_t)&v90[v9 + 15];
      uint8x8_t v94 = *(uint8x8_t *)&v90[2 * a4];
      __asm { PRFM            #0, [X6] }
      _X6 = &v90[6 * a4];
      __asm
      {
        PRFM            #0, [X6]
        PRFUM           #0, [X6,#7]
      }
      uint16x8_t v99 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)a8.i8, v86), v80, v88), v71, v87);
      uint16x8_t v100 = vmull_u8(v80, v86);
      uint8x8_t v71 = v80;
      _X6 = (uint64_t)&v90[3 * a4 + 15];
      uint8x8_t v80 = *(uint8x8_t *)&v90[3 * a4];
      _X0 = &v90[7 * a4];
      __asm
      {
        PRFM            #0, [X6]
        PRFM            #0, [X0]
        PRFUM           #0, [X0,#7]
      }
      *int8x16_t v89 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v99, v94, v91), 6uLL);
      int v106 = (int8x8_t *)((char *)v89 + a6);
      *int v106 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v100, v94, v88), *(uint8x8_t *)a8.i8, v87), v80, v91), 6uLL);
      int8x16_t v89 = (int8x8_t *)((char *)v106 + a6);
      v85 -= 2;
      uint16x8_t v90 = &v92[a4];
      *(uint8x8_t *)a8.i8 = v94;
    }
    while (v85 > 2);
    ++v21;
    _X4 = (_OWORD *)((char *)_X4 + 8);
  }
  if ((v66 & 4) != 0)
  {
    int8x8_t v107 = (int8x8_t)qword_1D0D7FBB0[v8 - 1];
    _X11 = (uint64_t)_X4 + 4 * a4 - a4;
    _X10 = (uint64_t)_X4 - a4 + 15;
    uint8x8_t v110 = *(uint8x8_t *)((char *)_X4 - a4);
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    a8.i64[0] = *(void *)_X4;
    __asm { PRFUM           #0, [X4,#0xF] }
    _X10 = (char *)_X4 + 4 * a4;
    __asm
    {
      PRFM            #0, [X10]
      PRFUM           #0, [X10,#7]
    }
    _X11 = (uint64_t)_X4 + 4 * a4 + a4;
    _X10 = (uint64_t)_X4 + a4 + 15;
    uint8x8_t v120 = *(uint8x8_t *)((char *)_X4 + a4);
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFUM           #0, [X11,#7]
    }
    int v124 = a2 + 2;
    uint8x8_t v125 = (uint8x8_t)vdup_lane_s8(v107, 1);
    uint8x8_t v126 = (uint8x8_t)vdup_lane_s8(v107, 0);
    uint8x8_t v127 = (uint8x8_t)vdup_lane_s8(v107, 2);
    uint8x8_t v128 = (uint8x8_t)vdup_lane_s8(v107, 3);
    do
    {
      _X15 = (uint64_t)_X4 + v9 + 15;
      uint8x8_t v130 = *(uint8x8_t *)((char *)_X4 + 2 * a4);
      __asm { PRFM            #0, [X15] }
      _X15 = (char *)_X4 + 6 * a4;
      __asm
      {
        PRFM            #0, [X15]
        PRFUM           #0, [X15,#7]
      }
      _X15 = (void *)((char *)_X4 + 3 * a4);
      _X16 = (char *)_X4 + 7 * a4;
      _X4 = (_OWORD *)((char *)_X4 + a4 + a4);
      uint16x8_t v137 = vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)a8.i8, v125), v120, v127), v110, v126);
      uint16x8_t v138 = vmull_u8(v120, v125);
      uint8x8_t v110 = v120;
      uint8x8_t v139 = *(uint8x8_t *)_X15;
      _X15 = (void *)((char *)_X15 + 15);
      uint8x8_t v120 = v139;
      __asm
      {
        PRFM            #0, [X15]
        PRFM            #0, [X16]
        PRFUM           #0, [X16,#7]
      }
      v21->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v137, v130, v128), 6uLL).u32[0];
      int8x16_t v143 = (int8x8_t *)((char *)v21 + a6);
      uint8x8_t v21 = (int8x8_t *)((char *)v21 + a6 + a6);
      v124 -= 2;
      v143->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(v138, v130, v127), *(uint8x8_t *)a8.i8, v126), v139, v128), 6uLL).u32[0];
      *(uint8x8_t *)a8.i8 = v130;
    }
    while (v124 > 2);
  }
  return *(double *)a8.i64;
}

uint64_t sub_1D0CAB4AC(uint64_t result, int a2, char a3, uint64_t a4, uint64_t _X4, uint64_t a6, int8x8_t *a7, double a8, double a9, double a10, double a11, double a12, uint16x8_t a13, double a14, int8x16_t a15)
{
  uint64_t v15 = 2 * a4;
  if ((int)result < 16)
  {
    char v32 = result;
  }
  else
  {
    int8x8_t v16 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    uint8x16_t v17 = (char *)a7 + a6;
    uint8x16_t v18 = (uint8x16_t)vdupq_lane_s8(v16, 0);
    uint8x8_t v19 = (uint8x8_t)vdup_lane_s8(v16, 1);
    uint8x8_t v20 = (uint8x8_t)vdup_lane_s8(v16, 2);
    uint8x8_t v21 = (uint8x8_t)vdup_lane_s8(v16, 3);
    do
    {
      uint64_t v22 = 0;
      uint64_t v23 = -2;
      int v24 = a2 + 2;
      do
      {
        int8x16_t v25 = *(int8x16_t *)(_X4 + v23);
        a13.i64[0] = *(void *)(_X4 + v23 + 16);
        uint8x16_t v26 = (int8x16_t *)(_X4 + v23 + a4);
        a15.i64[0] = v26[1].i64[0];
        int16x8_t v27 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 4uLL), v20), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 6uLL), v21);
        int16x8_t v28 = (int16x8_t)vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v25, (int8x16_t)a13, 0xAuLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, (int8x16_t)a13, 0xCuLL), v20), (uint8x16_t)v25, v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v25, (int8x16_t)a13, 0xEuLL), v21);
        int16x8_t v29 = (int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(*v26, *v26, 2uLL), v19), (uint8x8_t)*(_OWORD *)&vextq_s8(*v26, *v26, 4uLL), v20), *(uint8x8_t *)v26->i8, *(uint8x8_t *)v18.i8), (uint8x8_t)*(_OWORD *)&vextq_s8(*v26, *v26, 6uLL), v21);
        uint8x8_t v30 = (uint8x8_t)vextq_s8(*v26, a15, 0xAuLL).u64[0];
        uint8x8_t v31 = (uint8x8_t)vextq_s8(*v26, a15, 0xCuLL).u64[0];
        a15 = vextq_s8(*v26, a15, 0xEuLL);
        a13 = vmlsl_u8(vmlsl_high_u8(vmlal_u8(vmull_u8(v30, v19), v31, v20), *(uint8x16_t *)v26, v18), *(uint8x8_t *)a15.i8, v21);
        *(int8x16_t *)&a7->i8[v22] = vqrshrun_high_n_s16(vqrshrun_n_s16(v27, 6uLL), v28, 6uLL);
        *(int8x16_t *)&v17[v22] = vqrshrun_high_n_s16(vqrshrun_n_s16(v29, 6uLL), (int16x8_t)a13, 6uLL);
        v22 += 2 * a6;
        v23 += v15;
        v24 -= 2;
      }
      while (v24 > 2);
      a7 += 2;
      _X4 += 16;
      char v32 = result - 16;
      v17 += 16;
      BOOL v33 = result > 0x1F;
      __n128 result = (result - 16);
    }
    while (v33);
  }
  uint64_t v34 = 4 * a4;
  if ((v32 & 8) != 0)
  {
    int8x8_t v35 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    int v36 = a2 + 2;
    uint8x8_t v37 = (uint8x8_t)vdup_lane_s8(v35, 0);
    uint8x8_t v38 = (uint8x8_t)vdup_lane_s8(v35, 1);
    uint8x8_t v39 = (uint8x8_t)vdup_lane_s8(v35, 2);
    uint8x8_t v40 = (uint8x8_t)vdup_lane_s8(v35, 3);
    _X15 = _X4;
    uint8x8_t v42 = a7;
    do
    {
      int8x16_t v43 = *(int8x16_t *)(_X15 - 2);
      __asm { PRFUM           #0, [X15,#0x1D] }
      _X17 = _X15 + v34 - 2;
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      _X17 = _X15 + a4;
      int8x16_t v53 = *(int8x16_t *)(_X15 + a4 - 2);
      __asm { PRFUM           #0, [X17,#0x1D] }
      _X17 = _X15 + v34 - 2 + a4;
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0xF]
      }
      *uint8x8_t v42 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 2uLL), v38), (uint8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 4uLL), v39), *(uint8x8_t *)v43.i8, v37), (uint8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 6uLL), v40), 6uLL);
      uint16x8_t v58 = (int8x8_t *)((char *)v42 + a6);
      *uint16x8_t v58 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 2uLL), v38), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 4uLL), v39), *(uint8x8_t *)v53.i8, v37), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 6uLL), v40), 6uLL);
      uint8x8_t v42 = (int8x8_t *)((char *)v58 + a6);
      v36 -= 2;
      _X15 += v15;
    }
    while (v36 > 2);
    ++a7;
    _X4 += 8;
  }
  if ((v32 & 4) != 0)
  {
    int8x8_t v59 = (int8x8_t)qword_1D0D7FBB0[(a3 & 7) - 1];
    int v60 = a2 + 2;
    uint64_t v61 = v34 - 2;
    uint8x8_t v62 = (uint8x8_t)vdup_lane_s8(v59, 0);
    uint8x8_t v63 = (uint8x8_t)vdup_lane_s8(v59, 1);
    uint8x8_t v64 = (uint8x8_t)vdup_lane_s8(v59, 2);
    uint8x8_t v65 = (uint8x8_t)vdup_lane_s8(v59, 3);
    do
    {
      int8x16_t v66 = *(int8x16_t *)(_X4 - 2);
      __asm { PRFUM           #0, [X4,#0x1D] }
      _X12 = _X4 + v61;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0xF]
      }
      _X12 = _X4 + a4;
      int8x16_t v72 = *(int8x16_t *)(_X4 + a4 - 2);
      __asm { PRFUM           #0, [X12,#0x1D] }
      _X12 = _X4 + v61 + a4;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0xF]
      }
      a7->i32[0] = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 2uLL), v63), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 4uLL), v64), *(uint8x8_t *)v66.i8, v62), (uint8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 6uLL), v65), 6uLL).u32[0];
      *(__int32 *)((char *)a7->i32 + a6) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 2uLL), v63), (uint8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 4uLL), v64), *(uint8x8_t *)v72.i8, v62), (uint8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 6uLL), v65), 6uLL).u32[0];
      a7 = (int8x8_t *)((char *)a7 + a6 + a6);
      v60 -= 2;
      _X4 += v15;
    }
    while (v60 > 2);
  }
  return result;
}

uint64_t sub_1D0CAB754(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, void *a11)
{
  int16x8_t v12 = (int16x8_t)vld1q_dup_f32(a4);
  int8x8_t v11 = a4 + 1;
  uint64_t v13 = a11;
  int16x8_t v15 = (int16x8_t)vld1q_dup_f32(a7);
  uint64_t v14 = a7 + 1;
  int16x4_t v16 = (int16x4_t)vld1_dup_f32(v11);
  int16x4_t v17 = (int16x4_t)vld1_dup_f32(v14);
  uint8x16_t v18 = a9;
  int32x4_t v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  uint64_t v20 = 4 * a8;
  int32x4_t v21 = vdupq_n_s32(~a3);
  uint64_t v22 = 4 * a5;
  uint64_t v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int v24 = (char *)a9 + 2 * a8;
  int8x16_t v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xFF00FF00FF00FFLL;
  v26.i64[1] = 0xFF00FF00FF00FFLL;
  int16x8_t v27 = (char *)a11 + 2 * a10;
  do
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = a2 + 2;
    do
    {
      int16x8_t v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    int v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    BOOL v34 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    int16x4_t v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    int16x4_t v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    int v37 = a2 + 2;
    v38.i64[0] = 0xFF00FF00FF00FFLL;
    v38.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      int16x8_t v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *uint64_t v13 = v39.i64[0];
      v37 -= 2;
      *(void *)((char *)v13 + 2 * a10) = v39.i64[1];
      uint8x16_t v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      uint64_t v13 = (void *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

uint64_t sub_1D0CAB920(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, void *a8)
{
  int16x8_t v9 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v8 = a4 + 1;
  int16x4_t v10 = (int16x4_t)vld1_dup_f32(v8);
  int32x4_t v11 = vdupq_n_s32(a3);
  int32x4_t v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  int32x4_t v13 = vnegq_s32(v11);
  uint64_t v14 = 4 * a5;
  uint64_t v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int16x4_t v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xFF00FF00FF00FFLL;
  v17.i64[1] = 0xFF00FF00FF00FFLL;
  uint8x16_t v18 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = a2 + 2;
    do
    {
      uint16x8_t v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    int v23 = result - 8;
    v16 += 16;
    v18 += 16;
    BOOL v24 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    int16x4_t v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    int v26 = a2 + 2;
    v27.i64[0] = 0xFF00FF00FF00FFLL;
    v27.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      uint16x8_t v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(void *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (void *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1D0CABA6C(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, void *a8)
{
  uint64_t v8 = 4 * a5;
  uint64_t v9 = 4 * a3;
  uint64_t v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int32x4_t v11 = (char *)a6 + 2 * a5;
  int32x4_t v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xFF00FF00FF00FFLL;
  v14.i64[1] = 0xFF00FF00FF00FFLL;
  uint64_t v15 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 5uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 5uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    int v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    BOOL v21 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    int v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xFF00FF00FF00FFLL;
    v24.i64[1] = 0xFF00FF00FF00FFLL;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      int16x8_t v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 5uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(void *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (void *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1D0CABBB4(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v16 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  uint64_t v14 = v8 - 6;
  uint64_t v15 = 8 * a4;
  uint64_t v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    int16x8_t v18 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v19 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    int16x8_t v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    int16x8_t v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v36 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8, v12,
                               4),
                             *(int16x4_t *)v31.i8,
                             v12,
                             5),
                           *(int16x4_t *)v33.i8,
                           v12,
                           6),
                         *(int16x4_t *)v34.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                             v31,
                             v12,
                             5),
                           v33,
                           v12,
                           6),
                         v34,
                         v12,
                         7));
    int16x8_t v37 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v38 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    int16x8_t v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    int16x8_t v51 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8, v12,
                               4),
                             *(int16x4_t *)v48.i8,
                             v12,
                             5),
                           *(int16x4_t *)v49.i8,
                           v12,
                           6),
                         *(int16x4_t *)v50.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                             v48,
                             v12,
                             5),
                           v49,
                           v12,
                           6),
                         v50,
                         v12,
                         7));
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v53 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    int16x8_t v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    int16x8_t v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    int16x8_t v66 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8, v12,
                               4),
                             *(int16x4_t *)v63.i8,
                             v12,
                             5),
                           *(int16x4_t *)v64.i8,
                           v12,
                           6),
                         *(int16x4_t *)v65.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                             v63,
                             v12,
                             5),
                           v64,
                           v12,
                           6),
                         v65,
                         v12,
                         7));
    int16x8_t v67 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v68 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    int16x8_t v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    int16x8_t v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    int16x8_t v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    int16x8_t v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    int16x8_t v81 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8, v12,
                               4),
                             *(int16x4_t *)v78.i8,
                             v12,
                             5),
                           *(int16x4_t *)v79.i8,
                           v12,
                           6),
                         *(int16x4_t *)v80.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                             v78,
                             v12,
                             5),
                           v79,
                           v12,
                           6),
                         v80,
                         v12,
                         7));
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    int16x8_t v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    int16x8_t v96 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8, v12,
                               4),
                             *(int16x4_t *)v93.i8,
                             v12,
                             5),
                           *(int16x4_t *)v94.i8,
                           v12,
                           6),
                         *(int16x4_t *)v95.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                             v93,
                             v12,
                             5),
                           v94,
                           v12,
                           6),
                         v95,
                         v12,
                         7));
    int16x8_t v97 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v98 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    int16x8_t v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    int16x8_t v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    int16x8_t v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    int16x8_t v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    int16x8_t v111 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8, v12,
                                4),
                              *(int16x4_t *)v108.i8,
                              v12,
                              5),
                            *(int16x4_t *)v109.i8,
                            v12,
                            6),
                          *(int16x4_t *)v110.i8,
                          v12,
                          7),
             (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                              v108,
                              v12,
                              5),
                            v109,
                            v12,
                            6),
                          v110,
                          v12,
                          7));
    uint16x8_t v112 = _X19[1];
    int16x8_t v113 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int8x16_t v118 = (int8x16_t)vshrq_n_u16(v112, 8uLL);
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 2uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 4uLL);
    int16x8_t v121 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 6uLL);
    int16x8_t v122 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 8uLL);
    int16x8_t v123 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xAuLL);
    int16x8_t v124 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xCuLL);
    int16x8_t v125 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xEuLL);
    uint8x8_t v126 = (int16x8_t *)a7;
    uint64_t v127 = a5;
    int v128 = a2 + 1;
    int16x8_t v129 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v113.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v121.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v122.i8, v12,
                                4),
                              *(int16x4_t *)v123.i8,
                              v12,
                              5),
                            *(int16x4_t *)v124.i8,
                            v12,
                            6),
                          *(int16x4_t *)v125.i8,
                          v12,
                          7),
             (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v119, *(int16x4_t *)v12.i8, 1), v113, *(int16x4_t *)v12.i8, 0), v120, *(int16x4_t *)v12.i8, 2), v121, *(int16x4_t *)v12.i8, 3), v122, v12, 4),
                              v123,
                              v12,
                              5),
                            v124,
                            v12,
                            6),
                          v125,
                          v12,
                          7));
    do
    {
      _X22 = v127 + v15;
      int16x8_t v131 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v127 + v15 - 6), 8uLL);
      int8x16_t v132 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v127 + v15 + 10), 8uLL);
      int16x8_t v133 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 2uLL);
      int16x8_t v134 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 4uLL);
      int16x8_t v135 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 6uLL);
      int16x8_t v136 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 8uLL);
      int16x8_t v137 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xAuLL);
      int16x8_t v138 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xCuLL);
      int16x8_t v139 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xEuLL);
      int32x4_t v140 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v131.i8, *(int16x4_t *)v12.i8, 0);
      int32x4_t v141 = vmlal_high_lane_s16(vmull_high_lane_s16(v133, *(int16x4_t *)v12.i8, 1), v131, *(int16x4_t *)v12.i8, 0);
      v131.i64[0] = 0x38000000380000;
      v131.i64[1] = 0x38000000380000;
      v142.i64[0] = 0x38000000380000;
      v142.i64[1] = 0x38000000380000;
      int32x4_t v143 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v131, *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1);
      int32x4_t v144 = vmlal_high_lane_s16(vmlal_high_lane_s16(v142, v36, *(int16x4_t *)v13.i8, 0), v51, *(int16x4_t *)v13.i8, 1);
      int16x8_t v36 = v51;
      int16x8_t v51 = v66;
      int16x8_t v66 = v81;
      int16x8_t v81 = v96;
      int16x8_t v96 = v111;
      int16x8_t v111 = v129;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v127 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int16x8_t v149 = (int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v140, *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v135.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v136.i8, v12, 4), *(int16x4_t *)v137.i8, v12, 5), *(int16x4_t *)v138.i8, v12, 6), *(int16x4_t *)v139.i8, v12,
                          7);
      int16x8_t v150 = (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v141, v134, *(int16x4_t *)v12.i8, 2), v135, *(int16x4_t *)v12.i8, 3), v136, v12, 4), v137, v12, 5), v138, v12, 6), v139, v12,
                          7);
      int16x8_t v129 = vuzp1q_s16(v149, v150);
      *uint8x8_t v126 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v143, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13, 5), *(int16x4_t *)v111.i8, v13, 6),
                    vmovn_s32((int32x4_t)v149),
                    v13,
                    7),
                  6uLL),
                vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v144, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6), vmovn_s32((int32x4_t)v150), v13,
                  7),
                6uLL);
      --v128;
      v127 += v9;
      uint8x8_t v126 = (int16x8_t *)((char *)v126 + v11);
    }
    while (v128 > 1);
    a7 += 2;
    v16 += 16;
    int v151 = result - 8;
    v14 += 16;
    v15 += 16;
    BOOL v152 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v152);
  if (v151)
  {
LABEL_9:
    int16x8_t v153 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v154 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    uint16x4_t v156 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v157 = (int16x4_t)vshr_n_u16(v156, 8uLL);
    int16x4_t v158 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v159 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v165 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v153.i8, 1), v157, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v158,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v153,
               7));
    int16x4_t v166 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v167 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v168 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v174 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v153.i8, 1), v166, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v167,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v153,
               7));
    int16x4_t v175 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v176 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v177 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v183 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v153.i8, 1), v175, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v176,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v153,
               7));
    int16x4_t v184 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v185 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v186 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v192 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v153.i8, 1), v184, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v185,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v153,
               7));
    int16x4_t v193 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v194 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v195 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v201 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v153.i8, 1), v193, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v194,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v153,
               7));
    int16x4_t v202 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v203 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v204 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v210 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v153.i8, 1), v202, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v203,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v153,
               7));
    int16x4_t v211 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v212 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v213 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v218 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v153.i8, 1), v211, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v212,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v153,
               7));
    int v219 = a2 + 1;
    uint64_t v220 = v8 - 6;
    do
    {
      v221.i64[0] = 0x38000000380000;
      v221.i64[1] = 0x38000000380000;
      int32x4_t v222 = vmlal_lane_s16(v221, v165, *(int16x4_t *)v154.i8, 0);
      _X14 = v16 + v10;
      int16x4_t v224 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 8uLL);
      int16x4_t v225 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 8uLL);
      int8x8_t v226 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 8uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v231 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 2uLL), *(int16x4_t *)v153.i8, 1), v224, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 6uLL), *(int16x4_t *)v153.i8, 3),
                     v225,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v225, v226, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v225, v226, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v225, v226, 6uLL),
               v153,
               7);
      int32x4_t v232 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v174, *(int16x4_t *)v154.i8, 1), v183, *(int16x4_t *)v154.i8, 2), v192, *(int16x4_t *)v154.i8, 3), v201, v154, 4), v210, v154, 5), v218, v154,
               6);
      int16x4_t v165 = v174;
      int16x4_t v174 = v183;
      int16x4_t v183 = v192;
      int16x4_t v192 = v201;
      int16x4_t v201 = v210;
      int16x4_t v210 = v218;
      int16x4_t v218 = vmovn_s32(v231);
      --v219;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v232, v218, v154, 7), 6uLL);
      v16 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

unint64_t sub_1D0CAC484(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v15 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int v10 = a2 + 2;
  uint64_t v11 = 4 * a6;
  int16x8_t v12 = &a5->i8[20 * a4];
  int16x8_t v13 = &a5->i8[18 * a4];
  uint64_t v14 = &a5->i8[10 * a4];
  uint64_t v15 = a7;
  uint64_t v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    uint16x8_t v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v22 = (int16x8_t)vshrq_n_u16(v19, 8uLL);
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v21, 8uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v30 = v29;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v33 = v32;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    int16x8_t v41 = (int16x8_t)vshrq_n_u16(v26, 8uLL);
    int16x8_t v42 = (int16x8_t)vshrq_n_u16(*a5, 8uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(v30, 8uLL);
    int16x8_t v44 = (int16x8_t)vshrq_n_u16(v33, 8uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v47 = (int16x8_t)vshrq_n_u16(v35, 8uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int16x8_t v50 = v14;
    int16x8_t v51 = v13;
    int16x8_t v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int8x16_t v55 = v12;
    int v56 = v10;
    uint16x8_t v57 = a7;
    uint16x8_t v58 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      int16x8_t v22 = v41;
      int32x4_t v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      int32x4_t v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      int16x8_t v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      int16x8_t v43 = v47;
      int32x4_t v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      int32x4_t v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      int32x4_t v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      int16x8_t v23 = v42;
      int16x8_t v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 8uLL);
      __asm { PRFM            #0, [X9] }
      int16x8_t v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 8uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(int16x4_t *)v67.i8 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7)), (int16x4_t)0xE000E000E000E000);
      v67.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7)), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v68.i8 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7)), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7)), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v58[v7] = v68;
      uint16x8_t v57 = (int16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    int v79 = result - 8;
    v7 += 16;
    BOOL v80 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    int16x8_t v81 = xmmword_1D0D7FBF0[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v83 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v84 = (int16x4_t)vshr_n_u16(v83, 8uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v86 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v87 = (int16x4_t)vshr_n_u16(v86, 8uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v89 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v90 = (int16x4_t)vshr_n_u16(v89, 8uLL);
    _X12 = &a5->i8[14];
    int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 8uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v94 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v95 = (int16x4_t)vshr_n_u16(v94, 8uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 8uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 8uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v109 = a2 + 4;
    uint64_t v110 = 3 * a4;
    uint64_t v111 = 8 * a4;
    uint64_t v112 = 22 * a4;
    uint64_t v113 = 12 * a4;
    uint64_t v114 = 10 * a4;
    uint64_t v115 = 2 * a6;
    uint64_t v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      __n128 result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v123 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v124 = v123;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v126 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v127 = v126;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v129 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      int32x4_t v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      int32x4_t v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      int32x4_t v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 8uLL);
      int32x4_t v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      int32x4_t v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      int32x4_t v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      int16x4_t v84 = v95;
      int16x4_t v95 = (int16x4_t)vshr_n_u16(v124, 8uLL);
      int32x4_t v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      int32x4_t v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      int32x4_t v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      int32x4_t v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      int16x4_t v87 = v98;
      int16x4_t v98 = (int16x4_t)vshr_n_u16(v127, 8uLL);
      int32x4_t v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      int32x4_t v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      int32x4_t v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      int32x4_t v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      int16x4_t v90 = v101;
      int16x4_t v101 = (int16x4_t)vshr_n_u16(v129, 8uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v15 = vadd_s16(vmovn_s32(vmlal_laneq_s16(v142, v92, v81, 7)), (int16x4_t)0xE000E000E000E000);
      int16x8_t v150 = (int16x4_t *)((char *)v15 + v115);
      *int16x8_t v150 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7)), (int16x4_t)0xE000E000E000E000);
      int v151 = (int16x4_t *)((char *)v150 + v115);
      *int v151 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7)), (int16x4_t)0xE000E000E000E000);
      BOOL v152 = (int16x4_t *)((char *)v151 + v115);
      *BOOL v152 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7)), (int16x4_t)0xE000E000E000E000);
      v109 -= 4;
      uint64_t v15 = (int16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1D0CAC900(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  uint64_t v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 8uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 8uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      int32x4_t v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(int16x4_t *)v15.i8 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10, 5), *(int16x4_t *)v28.i8, v10, 6),
                                   *(int16x4_t *)v29.i8,
                                   v10,
                                   7)),
                               (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vmovn_s32(v31), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    int v34 = result - 8;
    ++v11;
    BOOL v35 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    int16x8_t v36 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v38 = a2 + 1;
    do
    {
      int16x4_t v39 = (int16x4_t)vshr_n_u16(*_X11, 8uLL);
      int16x4_t v40 = (int16x4_t)vshr_n_u16(_X11[1], 8uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v42 = (int8x8_t)vshr_n_u16(_X11[2], 8uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                          *(int16x4_t *)v36.i8,
                          3),
                        v40,
                        v36,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                      v36,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                    v36,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                  v36,
                  7)),
              (int16x4_t)0xE000E000E000E000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

uint64_t sub_1D0CACAA8(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  uint64_t v11 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = a2 + 2;
    do
    {
      uint16x8_t v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = result - 8;
    v9 += 16;
    v11 += 16;
    BOOL v17 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      uint16x4_t v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(*a5, 2uLL) & 0xFFC0FFC0FFC0FFC0), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(v19, 2uLL) & 0xFFC0FFC0FFC0FFC0), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1D0CACB90(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v16 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  uint64_t v14 = v8 - 6;
  uint64_t v15 = 8 * a4;
  uint64_t v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    int16x8_t v18 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v19 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    int16x8_t v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    int16x8_t v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v36 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8, v12,
                               4),
                             *(int16x4_t *)v31.i8,
                             v12,
                             5),
                           *(int16x4_t *)v33.i8,
                           v12,
                           6),
                         *(int16x4_t *)v34.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                             v31,
                             v12,
                             5),
                           v33,
                           v12,
                           6),
                         v34,
                         v12,
                         7));
    int16x8_t v37 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v38 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    int16x8_t v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    int16x8_t v51 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8, v12,
                               4),
                             *(int16x4_t *)v48.i8,
                             v12,
                             5),
                           *(int16x4_t *)v49.i8,
                           v12,
                           6),
                         *(int16x4_t *)v50.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                             v48,
                             v12,
                             5),
                           v49,
                           v12,
                           6),
                         v50,
                         v12,
                         7));
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v53 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    int16x8_t v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    int16x8_t v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    int16x8_t v66 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8, v12,
                               4),
                             *(int16x4_t *)v63.i8,
                             v12,
                             5),
                           *(int16x4_t *)v64.i8,
                           v12,
                           6),
                         *(int16x4_t *)v65.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                             v63,
                             v12,
                             5),
                           v64,
                           v12,
                           6),
                         v65,
                         v12,
                         7));
    int16x8_t v67 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v68 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    int16x8_t v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    int16x8_t v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    int16x8_t v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    int16x8_t v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    int16x8_t v81 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8, v12,
                               4),
                             *(int16x4_t *)v78.i8,
                             v12,
                             5),
                           *(int16x4_t *)v79.i8,
                           v12,
                           6),
                         *(int16x4_t *)v80.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                             v78,
                             v12,
                             5),
                           v79,
                           v12,
                           6),
                         v80,
                         v12,
                         7));
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    int16x8_t v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    int16x8_t v96 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8, v12,
                               4),
                             *(int16x4_t *)v93.i8,
                             v12,
                             5),
                           *(int16x4_t *)v94.i8,
                           v12,
                           6),
                         *(int16x4_t *)v95.i8,
                         v12,
                         7),
            (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                             v93,
                             v12,
                             5),
                           v94,
                           v12,
                           6),
                         v95,
                         v12,
                         7));
    int16x8_t v97 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    int8x16_t v98 = (int8x16_t)vshrq_n_u16(_X19[1], 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    int16x8_t v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    int16x8_t v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    int16x8_t v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    int16x8_t v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    int16x8_t v111 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8, v12,
                                4),
                              *(int16x4_t *)v108.i8,
                              v12,
                              5),
                            *(int16x4_t *)v109.i8,
                            v12,
                            6),
                          *(int16x4_t *)v110.i8,
                          v12,
                          7),
             (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                              v108,
                              v12,
                              5),
                            v109,
                            v12,
                            6),
                          v110,
                          v12,
                          7));
    uint16x8_t v112 = _X19[1];
    int16x8_t v113 = (int16x8_t)vshrq_n_u16(*_X19, 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int8x16_t v118 = (int8x16_t)vshrq_n_u16(v112, 8uLL);
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 2uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 4uLL);
    int16x8_t v121 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 6uLL);
    int16x8_t v122 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 8uLL);
    int16x8_t v123 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xAuLL);
    int16x8_t v124 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xCuLL);
    int16x8_t v125 = (int16x8_t)vextq_s8((int8x16_t)v113, v118, 0xEuLL);
    uint16x4_t v126 = a7;
    uint64_t v127 = a5;
    int v128 = a2 + 1;
    int16x8_t v129 = vuzp1q_s16((int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v113.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v121.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v122.i8, v12,
                                4),
                              *(int16x4_t *)v123.i8,
                              v12,
                              5),
                            *(int16x4_t *)v124.i8,
                            v12,
                            6),
                          *(int16x4_t *)v125.i8,
                          v12,
                          7),
             (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v119, *(int16x4_t *)v12.i8, 1), v113, *(int16x4_t *)v12.i8, 0), v120, *(int16x4_t *)v12.i8, 2), v121, *(int16x4_t *)v12.i8, 3), v122, v12, 4),
                              v123,
                              v12,
                              5),
                            v124,
                            v12,
                            6),
                          v125,
                          v12,
                          7));
    do
    {
      _X22 = v127 + v15;
      int16x8_t v131 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v127 + v15 - 6), 8uLL);
      int8x16_t v132 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v127 + v15 + 10), 8uLL);
      int16x8_t v133 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 2uLL);
      int16x8_t v134 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 4uLL);
      int16x8_t v135 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 6uLL);
      int16x8_t v136 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 8uLL);
      int16x8_t v137 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xAuLL);
      int16x8_t v138 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xCuLL);
      int16x8_t v139 = (int16x8_t)vextq_s8((int8x16_t)v131, v132, 0xEuLL);
      int32x4_t v140 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v131.i8, *(int16x4_t *)v12.i8, 0);
      int32x4_t v141 = vmlal_high_lane_s16(vmull_high_lane_s16(v133, *(int16x4_t *)v12.i8, 1), v131, *(int16x4_t *)v12.i8, 0);
      int32x4_t v142 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0);
      int32x4_t v143 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, *(int16x4_t *)v13.i8, 1), v36, *(int16x4_t *)v13.i8, 0);
      int16x8_t v36 = v51;
      int16x8_t v51 = v66;
      int16x8_t v66 = v81;
      int16x8_t v81 = v96;
      int16x8_t v96 = v111;
      int16x8_t v111 = v129;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v127 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int16x8_t v148 = (int16x8_t)vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v140, *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v135.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v136.i8, v12, 4), *(int16x4_t *)v137.i8, v12, 5), *(int16x4_t *)v138.i8, v12, 6), *(int16x4_t *)v139.i8, v12,
                          7);
      int16x8_t v149 = (int16x8_t)vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v141, v134, *(int16x4_t *)v12.i8, 2), v135, *(int16x4_t *)v12.i8, 3), v136, v12, 4), v137, v12, 5), v138, v12, 6), v139, v12,
                          7);
      *(uint16x4_t *)v135.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v142, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v129.i8,
                                                   v13,
                                                   6),
                                                 vmovn_s32((int32x4_t)v148),
                                                 v13,
                                                 7),
                                               0xCuLL),
                                 (uint16x4_t)0xFF00FF00FF00FFLL);
      v135.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v143, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v129, v13, 6),
                                                        vmovn_s32((int32x4_t)v149),
                                                        v13,
                                                        7),
                                                      0xCuLL),
                                        (uint16x4_t)0xFF00FF00FF00FFLL);
      int16x8_t v129 = vuzp1q_s16(v148, v149);
      *uint16x4_t v126 = v135;
      --v128;
      v127 += v9;
      uint16x4_t v126 = (_OWORD *)((char *)v126 + v11);
    }
    while (v128 > 1);
    a7 += 2;
    v16 += 16;
    int v150 = result - 8;
    v14 += 16;
    v15 += 16;
    BOOL v151 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v151);
  if (v150)
  {
LABEL_9:
    int16x8_t v152 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v153 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    uint16x4_t v155 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v156 = (int16x4_t)vshr_n_u16(v155, 8uLL);
    int16x4_t v157 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v158 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v164 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v156, (int8x8_t)v157, 2uLL), *(int16x4_t *)v152.i8, 1), v156, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v156, (int8x8_t)v157, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v156, (int8x8_t)v157, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v157,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v157, v158, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v157, v158, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v157, v158, 6uLL),
               v152,
               7));
    int16x4_t v165 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v166 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v167 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v173 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v165, (int8x8_t)v166, 2uLL), *(int16x4_t *)v152.i8, 1), v165, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v165, (int8x8_t)v166, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v165, (int8x8_t)v166, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v166,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v166, v167, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v166, v167, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v166, v167, 6uLL),
               v152,
               7));
    int16x4_t v174 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v175 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v176 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v182 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v174, (int8x8_t)v175, 2uLL), *(int16x4_t *)v152.i8, 1), v174, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v174, (int8x8_t)v175, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v174, (int8x8_t)v175, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v175,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v175, v176, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v175, v176, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v175, v176, 6uLL),
               v152,
               7));
    int16x4_t v183 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v184 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v185 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v191 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v183, (int8x8_t)v184, 2uLL), *(int16x4_t *)v152.i8, 1), v183, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v183, (int8x8_t)v184, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v183, (int8x8_t)v184, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v184,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v184, v185, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v184, v185, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v184, v185, 6uLL),
               v152,
               7));
    int16x4_t v192 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v193 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v194 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v200 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v192, (int8x8_t)v193, 2uLL), *(int16x4_t *)v152.i8, 1), v192, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v192, (int8x8_t)v193, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v192, (int8x8_t)v193, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v193,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v193, v194, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v193, v194, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v193, v194, 6uLL),
               v152,
               7));
    int16x4_t v201 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v202 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v203 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v209 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v201, (int8x8_t)v202, 2uLL), *(int16x4_t *)v152.i8, 1), v201, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v201, (int8x8_t)v202, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v201, (int8x8_t)v202, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v202,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v202, v203, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v202, v203, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v202, v203, 6uLL),
               v152,
               7));
    int16x4_t v210 = (int16x4_t)vshr_n_u16(*_X13, 8uLL);
    int16x4_t v211 = (int16x4_t)vshr_n_u16(_X13[1], 8uLL);
    int8x8_t v212 = (int8x8_t)vshr_n_u16(_X13[2], 8uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v217 = vmovn_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v210, (int8x8_t)v211, 2uLL), *(int16x4_t *)v152.i8, 1), v210, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v210, (int8x8_t)v211, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v210, (int8x8_t)v211, 6uLL), *(int16x4_t *)v152.i8,
                       3),
                     v211,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v211, v212, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v211, v212, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v211, v212, 6uLL),
               v152,
               7));
    int v218 = a2 + 1;
    uint64_t v219 = v8 - 6;
    do
    {
      _X14 = v16 + v10;
      int16x4_t v221 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 8uLL);
      int16x4_t v222 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 8uLL);
      int8x8_t v223 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 8uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v219;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v228 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v221, (int8x8_t)v222, 2uLL), *(int16x4_t *)v152.i8, 1), v221, *(int16x4_t *)v152.i8, 0), (int16x4_t)vext_s8((int8x8_t)v221, (int8x8_t)v222, 4uLL), *(int16x4_t *)v152.i8, 2), (int16x4_t)vext_s8((int8x8_t)v221, (int8x8_t)v222, 6uLL), *(int16x4_t *)v152.i8, 3),
                     v222,
                     v152,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v222, v223, 2uLL),
                   v152,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v222, v223, 4uLL),
                 v152,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v222, v223, 6uLL),
               v152,
               7);
      int32x4_t v229 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v173, *(int16x4_t *)v153.i8, 1), v164, *(int16x4_t *)v153.i8, 0), v182, *(int16x4_t *)v153.i8, 2), v191, *(int16x4_t *)v153.i8, 3), v200, v153, 4), v209, v153, 5), v217, v153,
               6);
      int16x4_t v164 = v173;
      int16x4_t v173 = v182;
      int16x4_t v182 = v191;
      int16x4_t v191 = v200;
      int16x4_t v200 = v209;
      int16x4_t v209 = v217;
      int16x4_t v217 = vmovn_s32(v228);
      --v218;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v229, v217, v153, 7), 0xCuLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v16 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v218 > 1);
  }
  return result;
}

unint64_t sub_1D0CAD46C(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v15 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int v10 = a2 + 2;
  uint64_t v11 = 4 * a6;
  int16x8_t v12 = &a5->i8[20 * a4];
  int16x8_t v13 = &a5->i8[18 * a4];
  uint64_t v14 = &a5->i8[10 * a4];
  uint64_t v15 = a7;
  uint64_t v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    uint16x8_t v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v22 = (int16x8_t)vshrq_n_u16(v19, 8uLL);
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v21, 8uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v30 = v29;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v33 = v32;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    int16x8_t v41 = (int16x8_t)vshrq_n_u16(v26, 8uLL);
    int16x8_t v42 = (int16x8_t)vshrq_n_u16(*a5, 8uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(v30, 8uLL);
    int16x8_t v44 = (int16x8_t)vshrq_n_u16(v33, 8uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v47 = (int16x8_t)vshrq_n_u16(v35, 8uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int16x8_t v50 = v14;
    int16x8_t v51 = v13;
    int16x8_t v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int8x16_t v55 = v12;
    int v56 = v10;
    uint16x8_t v57 = a7;
    uint16x8_t v58 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      int16x8_t v22 = v41;
      int32x4_t v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      int32x4_t v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      int16x8_t v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      int16x8_t v43 = v47;
      int32x4_t v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      int32x4_t v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      int32x4_t v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      int16x8_t v23 = v42;
      int16x8_t v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 8uLL);
      __asm { PRFM            #0, [X9] }
      int16x8_t v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 8uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      *(uint16x4_t *)v68.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 6uLL),
                                (uint16x4_t)0xFF00FF00FF00FFLL);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 6uLL),
                                       (uint16x4_t)0xFF00FF00FF00FFLL);
      *(int32x4_t *)&v58[v7] = v68;
      uint16x8_t v57 = (uint16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    int v79 = result - 8;
    v7 += 16;
    BOOL v80 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    int16x8_t v81 = xmmword_1D0D7FBF0[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v83 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v84 = (int16x4_t)vshr_n_u16(v83, 8uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v86 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v87 = (int16x4_t)vshr_n_u16(v86, 8uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v89 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v90 = (int16x4_t)vshr_n_u16(v89, 8uLL);
    _X12 = &a5->i8[14];
    int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 8uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v94 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v95 = (int16x4_t)vshr_n_u16(v94, 8uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 8uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 8uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v109 = a2 + 4;
    uint64_t v110 = 3 * a4;
    uint64_t v111 = 8 * a4;
    uint64_t v112 = 22 * a4;
    uint64_t v113 = 12 * a4;
    uint64_t v114 = 10 * a4;
    uint64_t v115 = 2 * a6;
    uint64_t v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      __n128 result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v123 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v124 = v123;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v126 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v127 = v126;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v129 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      int32x4_t v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      int32x4_t v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      int32x4_t v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 8uLL);
      int32x4_t v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      int32x4_t v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      int32x4_t v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      int16x4_t v84 = v95;
      int16x4_t v95 = (int16x4_t)vshr_n_u16(v124, 8uLL);
      int32x4_t v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      int32x4_t v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      int32x4_t v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      int32x4_t v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      int16x4_t v87 = v98;
      int16x4_t v98 = (int16x4_t)vshr_n_u16(v127, 8uLL);
      int32x4_t v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      int32x4_t v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      int32x4_t v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      int32x4_t v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      int16x4_t v90 = v101;
      int16x4_t v101 = (int16x4_t)vshr_n_u16(v129, 8uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v15 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      int v150 = (uint16x4_t *)((char *)v15 + v115);
      *int v150 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      BOOL v151 = (uint16x4_t *)((char *)v150 + v115);
      *BOOL v151 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      int16x8_t v152 = (uint16x4_t *)((char *)v151 + v115);
      *int16x8_t v152 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v109 -= 4;
      uint64_t v15 = (uint16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1D0CAD8E8(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  uint64_t v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 8uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 8uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      int32x4_t v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10,
                                                    5),
                                                  *(int16x4_t *)v28.i8,
                                                  v10,
                                                  6),
                                                *(int16x4_t *)v29.i8,
                                                v10,
                                                7),
                                              6uLL),
                                (uint16x4_t)0xFF00FF00FF00FFLL);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v31, 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    int v34 = result - 8;
    ++v11;
    BOOL v35 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    int16x8_t v36 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v38 = a2 + 1;
    do
    {
      int16x4_t v39 = (int16x4_t)vshr_n_u16(*_X11, 8uLL);
      int16x4_t v40 = (int16x4_t)vshr_n_u16(_X11[1], 8uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v42 = (int8x8_t)vshr_n_u16(_X11[2], 8uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                                      *(int16x4_t *)v36.i8,
                                      3),
                                    v40,
                                    v36,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                                  v36,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                                v36,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                              v36,
                              7),
                            6uLL),
              (uint16x4_t)0xFF00FF00FF00FFLL);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

double sub_1D0CADA90(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, void *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1) {
      return *(double *)v14.i64;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  int16x8_t v10 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = a2 + 2;
    do
    {
      uint16x8_t v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 8uLL);
      uint16x8_t v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 8uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    BOOL v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 8uLL);
      uint16x4_t v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 8uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (void *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1D0CADB50(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, void *a11)
{
  int16x8_t v12 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v11 = a4 + 1;
  int v13 = a11;
  int16x8_t v15 = (int16x8_t)vld1q_dup_f32(a7);
  uint16x8_t v14 = a7 + 1;
  int16x4_t v16 = (int16x4_t)vld1_dup_f32(v11);
  int16x4_t v17 = (int16x4_t)vld1_dup_f32(v14);
  int v18 = a9;
  int32x4_t v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  uint64_t v20 = 4 * a8;
  int32x4_t v21 = vdupq_n_s32(~a3);
  uint64_t v22 = 4 * a5;
  uint64_t v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int16x8_t v24 = (char *)a9 + 2 * a8;
  int16x8_t v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xFE00FE00FE00FE00;
  v26.i64[1] = 0xFE00FE00FE00FE00;
  int16x8_t v27 = (char *)a11 + 2 * a10;
  do
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = a2 + 2;
    do
    {
      int16x8_t v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    int v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    BOOL v34 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    int16x4_t v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    int16x4_t v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    int v37 = a2 + 2;
    v38.i64[0] = 0xFE00FE00FE00FE00;
    v38.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      int16x8_t v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *int v13 = v39.i64[0];
      v37 -= 2;
      *(void *)((char *)v13 + 2 * a10) = v39.i64[1];
      int v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      int v13 = (void *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

uint64_t sub_1D0CADD1C(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, void *a8)
{
  int16x8_t v9 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v8 = a4 + 1;
  int16x4_t v10 = (int16x4_t)vld1_dup_f32(v8);
  int32x4_t v11 = vdupq_n_s32(a3);
  int32x4_t v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  int32x4_t v13 = vnegq_s32(v11);
  uint64_t v14 = 4 * a5;
  uint64_t v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int16x4_t v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xFE00FE00FE00FE00;
  v17.i64[1] = 0xFE00FE00FE00FE00;
  int v18 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = a2 + 2;
    do
    {
      uint16x8_t v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    int v23 = result - 8;
    v16 += 16;
    v18 += 16;
    BOOL v24 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    int16x4_t v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    int v26 = a2 + 2;
    v27.i64[0] = 0xFE00FE00FE00FE00;
    v27.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      uint16x8_t v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(void *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (void *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1D0CADE68(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, void *a8)
{
  uint64_t v8 = 4 * a5;
  uint64_t v9 = 4 * a3;
  uint64_t v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int32x4_t v11 = (char *)a6 + 2 * a5;
  int32x4_t v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xFE00FE00FE00FE00;
  v14.i64[1] = 0xFE00FE00FE00FE00;
  uint64_t v15 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 4uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 4uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    int v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    BOOL v21 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    int v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xFE00FE00FE00FE00;
    v24.i64[1] = 0xFE00FE00FE00FE00;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      int16x8_t v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 4uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(void *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (void *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1D0CADFB0(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v16 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  uint64_t v14 = v8 - 6;
  uint64_t v15 = 8 * a4;
  uint64_t v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    int16x8_t v18 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v19 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    int16x8_t v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    int16x8_t v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            1uLL);
    int16x8_t v37 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v38 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    int16x8_t v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    int16x8_t v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            1uLL);
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v53 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    int16x8_t v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    int16x8_t v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    int16x8_t v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            1uLL);
    int16x8_t v67 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v68 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    int16x8_t v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    int16x8_t v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    int16x8_t v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    int16x8_t v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            1uLL);
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    int16x8_t v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    int16x8_t v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            1uLL);
    int16x8_t v97 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v98 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    int16x8_t v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    int16x8_t v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    int16x8_t v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    int16x8_t v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    int16x8_t v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               1uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             1uLL);
    int16x8_t v112 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v113 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    int16x8_t v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    int16x8_t v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    int16x8_t v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    int16x8_t v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    int16x8_t v125 = (int16x8_t *)a7;
    uint64_t v126 = a5;
    int v127 = a2 + 1;
    int16x8_t v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               1uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             1uLL);
    do
    {
      v129.i64[0] = 0x38000000380000;
      v129.i64[1] = 0x38000000380000;
      v130.i64[0] = 0x38000000380000;
      v130.i64[1] = 0x38000000380000;
      int32x4_t v131 = vmlal_lane_s16(vmlal_lane_s16(v129, *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1);
      int32x4_t v132 = vmlal_high_lane_s16(vmlal_high_lane_s16(v130, v36, *(int16x4_t *)v13.i8, 0), v51, *(int16x4_t *)v13.i8, 1);
      int16x8_t v36 = v51;
      int16x8_t v51 = v66;
      int16x8_t v66 = v81;
      int16x8_t v81 = v96;
      _X22 = v126 + v15;
      int16x8_t v96 = v111;
      int16x8_t v134 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 7uLL);
      int8x16_t v135 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 7uLL);
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      int16x8_t v111 = v128;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int16x8_t v140 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 2uLL);
      int16x8_t v141 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 4uLL);
      int16x8_t v142 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 6uLL);
      int16x8_t v143 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 8uLL);
      int32x4_t v144 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v12.i8, 1), v134, *(int16x4_t *)v12.i8, 0);
      int32x4_t v145 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v141.i8, *(int16x4_t *)v12.i8, 2);
      int16x8_t v146 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xAuLL);
      int32x4_t v147 = vmlal_high_lane_s16(v144, v141, *(int16x4_t *)v12.i8, 2);
      int16x8_t v148 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xCuLL);
      int16x8_t v149 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xEuLL);
      int32x4_t v150 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v147, v142, *(int16x4_t *)v12.i8, 3), v143, v12, 4), v146, v12, 5), v148, v12, 6), v149, v12, 7);
      *(int16x4_t *)v146.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v145, *(int16x4_t *)v142.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v143.i8, v12, 4), *(int16x4_t *)v146.i8, v12, 5), *(int16x4_t *)v148.i8, v12, 6), *(int16x4_t *)v149.i8, v12, 7), 1uLL);
      *(int16x4_t *)v131.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v131, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13, 5), *(int16x4_t *)v111.i8, v13, 6), *(int16x4_t *)v146.i8,
                                  v13,
                                  7),
                                6uLL);
      int16x8_t v128 = vshrn_high_n_s32(*(int16x4_t *)v146.i8, v150, 1uLL);
      *int16x8_t v125 = vshrn_high_n_s32(*(int16x4_t *)v131.i8, vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v132, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                  vshrn_n_s32(v150, 1uLL),
                  v13,
                  7),
                6uLL);
      --v127;
      v126 += v9;
      int16x8_t v125 = (int16x8_t *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    int v151 = result - 8;
    v14 += 16;
    v15 += 16;
    BOOL v152 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v152);
  if (v151)
  {
LABEL_9:
    int16x8_t v153 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v154 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    uint16x4_t v156 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v157 = (int16x4_t)vshr_n_u16(v156, 7uLL);
    int16x4_t v158 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v159 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v165 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v153.i8, 1), v157, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v158,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v153,
               7),
             1uLL);
    int16x4_t v166 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v167 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v168 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v174 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v153.i8, 1), v166, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v167,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v153,
               7),
             1uLL);
    int16x4_t v175 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v176 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v177 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v183 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v153.i8, 1), v175, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v176,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v153,
               7),
             1uLL);
    int16x4_t v184 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v185 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v186 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v192 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v153.i8, 1), v184, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v185,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v153,
               7),
             1uLL);
    int16x4_t v193 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v194 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v195 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v201 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v153.i8, 1), v193, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v194,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v153,
               7),
             1uLL);
    int16x4_t v202 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v203 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v204 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v210 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v153.i8, 1), v202, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v203,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v153,
               7),
             1uLL);
    int16x4_t v211 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v212 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v213 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v153.i8, 1), v211, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v212,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v153,
               7),
             1uLL);
    int v219 = a2 + 1;
    uint64_t v220 = v8 - 6;
    do
    {
      v221.i64[0] = 0x38000000380000;
      v221.i64[1] = 0x38000000380000;
      int32x4_t v222 = vmlal_lane_s16(v221, v165, *(int16x4_t *)v154.i8, 0);
      _X14 = v16 + v10;
      int16x4_t v224 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 7uLL);
      int16x4_t v225 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 7uLL);
      int8x8_t v226 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 7uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v231 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 2uLL), *(int16x4_t *)v153.i8, 1), v224, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 6uLL), *(int16x4_t *)v153.i8, 3),
                     v225,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v225, v226, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v225, v226, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v225, v226, 6uLL),
               v153,
               7);
      int32x4_t v232 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v174, *(int16x4_t *)v154.i8, 1), v183, *(int16x4_t *)v154.i8, 2), v192, *(int16x4_t *)v154.i8, 3), v201, v154, 4), v210, v154, 5), v218, v154,
               6);
      int16x4_t v165 = v174;
      int16x4_t v174 = v183;
      int16x4_t v183 = v192;
      int16x4_t v192 = v201;
      int16x4_t v201 = v210;
      int16x4_t v210 = v218;
      int16x4_t v218 = vshrn_n_s32(v231, 1uLL);
      --v219;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v232, v218, v154, 7), 6uLL);
      v16 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

unint64_t sub_1D0CAE89C(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v15 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int v10 = a2 + 2;
  uint64_t v11 = 4 * a6;
  int16x8_t v12 = &a5->i8[20 * a4];
  int16x8_t v13 = &a5->i8[18 * a4];
  uint64_t v14 = &a5->i8[10 * a4];
  uint64_t v15 = a7;
  uint64_t v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    uint16x8_t v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v22 = (int16x8_t)vshrq_n_u16(v19, 7uLL);
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v21, 7uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v30 = v29;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v33 = v32;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    int16x8_t v41 = (int16x8_t)vshrq_n_u16(v26, 7uLL);
    int16x8_t v42 = (int16x8_t)vshrq_n_u16(*a5, 7uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(v30, 7uLL);
    int16x8_t v44 = (int16x8_t)vshrq_n_u16(v33, 7uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v47 = (int16x8_t)vshrq_n_u16(v35, 7uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int16x8_t v50 = v14;
    int16x8_t v51 = v13;
    int16x8_t v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int8x16_t v55 = v12;
    int v56 = v10;
    uint16x8_t v57 = a7;
    uint16x8_t v58 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      int16x8_t v22 = v41;
      int32x4_t v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      int32x4_t v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      int16x8_t v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      int16x8_t v43 = v47;
      int32x4_t v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      int32x4_t v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      int32x4_t v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      int16x8_t v23 = v42;
      int16x8_t v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 7uLL);
      __asm { PRFM            #0, [X9] }
      int16x8_t v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 7uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(int16x4_t *)v67.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      v67.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v68.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 1uLL),
                               (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 1uLL),
                                       (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v58[v7] = v68;
      uint16x8_t v57 = (int16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    int v79 = result - 8;
    v7 += 16;
    BOOL v80 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    int16x8_t v81 = xmmword_1D0D7FBF0[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v83 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v84 = (int16x4_t)vshr_n_u16(v83, 7uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v86 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v87 = (int16x4_t)vshr_n_u16(v86, 7uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v89 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v90 = (int16x4_t)vshr_n_u16(v89, 7uLL);
    _X12 = &a5->i8[14];
    int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 7uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v94 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v95 = (int16x4_t)vshr_n_u16(v94, 7uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 7uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 7uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v109 = a2 + 4;
    uint64_t v110 = 3 * a4;
    uint64_t v111 = 8 * a4;
    uint64_t v112 = 22 * a4;
    uint64_t v113 = 12 * a4;
    uint64_t v114 = 10 * a4;
    uint64_t v115 = 2 * a6;
    uint64_t v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      __n128 result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v123 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v124 = v123;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v126 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v127 = v126;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v129 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      int32x4_t v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      int32x4_t v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      int32x4_t v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 7uLL);
      int32x4_t v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      int32x4_t v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      int32x4_t v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      int16x4_t v84 = v95;
      int16x4_t v95 = (int16x4_t)vshr_n_u16(v124, 7uLL);
      int32x4_t v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      int32x4_t v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      int32x4_t v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      int32x4_t v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      int16x4_t v87 = v98;
      int16x4_t v98 = (int16x4_t)vshr_n_u16(v127, 7uLL);
      int32x4_t v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      int32x4_t v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      int32x4_t v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      int32x4_t v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      int16x4_t v90 = v101;
      int16x4_t v101 = (int16x4_t)vshr_n_u16(v129, 7uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v15 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      int32x4_t v150 = (int16x4_t *)((char *)v15 + v115);
      *int32x4_t v150 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      int v151 = (int16x4_t *)((char *)v150 + v115);
      *int v151 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      BOOL v152 = (int16x4_t *)((char *)v151 + v115);
      *BOOL v152 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 1uLL), (int16x4_t)0xE000E000E000E000);
      v109 -= 4;
      uint64_t v15 = (int16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1D0CAED18(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  uint64_t v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 7uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 7uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      int32x4_t v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10, 5), *(int16x4_t *)v28.i8, v10, 6),
                                   *(int16x4_t *)v29.i8,
                                   v10,
                                   7),
                                 1uLL),
                               (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v31, 1uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    int v34 = result - 8;
    ++v11;
    BOOL v35 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    int16x8_t v36 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v38 = a2 + 1;
    do
    {
      int16x4_t v39 = (int16x4_t)vshr_n_u16(*_X11, 7uLL);
      int16x4_t v40 = (int16x4_t)vshr_n_u16(_X11[1], 7uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v42 = (int8x8_t)vshr_n_u16(_X11[2], 7uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                          *(int16x4_t *)v36.i8,
                          3),
                        v40,
                        v36,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                      v36,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                    v36,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                  v36,
                  7),
                1uLL),
              (int16x4_t)0xE000E000E000E000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

uint64_t sub_1D0CAEEC0(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  uint64_t v11 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = a2 + 2;
    do
    {
      uint16x8_t v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFE0FFE0FFE0FFE0, 0xFFE0FFE0FFE0FFE0)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFE0FFE0FFE0FFE0, 0xFFE0FFE0FFE0FFE0)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = result - 8;
    v9 += 16;
    v11 += 16;
    BOOL v17 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      uint16x4_t v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(*a5, 2uLL) & 0xFFE0FFE0FFE0FFE0), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(v19, 2uLL) & 0xFFE0FFE0FFE0FFE0), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1D0CAEFA8(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v16 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  uint64_t v14 = v8 - 6;
  uint64_t v15 = 8 * a4;
  uint64_t v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    int16x8_t v18 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v19 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    int16x8_t v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    int16x8_t v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            1uLL);
    int16x8_t v37 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v38 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    int16x8_t v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    int16x8_t v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            1uLL);
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v53 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    int16x8_t v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    int16x8_t v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    int16x8_t v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            1uLL);
    int16x8_t v67 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v68 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    int16x8_t v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    int16x8_t v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    int16x8_t v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    int16x8_t v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            1uLL);
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    int16x8_t v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    int16x8_t v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              1uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            1uLL);
    int16x8_t v97 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v98 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    int16x8_t v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    int16x8_t v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    int16x8_t v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    int16x8_t v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    int16x8_t v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               1uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             1uLL);
    int16x8_t v112 = (int16x8_t)vshrq_n_u16(*_X19, 7uLL);
    int8x16_t v113 = (int8x16_t)vshrq_n_u16(_X19[1], 7uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    int16x8_t v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    int16x8_t v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    int16x8_t v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    int16x8_t v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    int16x8_t v125 = a7;
    uint64_t v126 = a5;
    int v127 = a2 + 1;
    int16x8_t v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               1uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             1uLL);
    do
    {
      _X22 = v126 + v15;
      int16x8_t v130 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 7uLL);
      int8x16_t v131 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 7uLL);
      int16x8_t v132 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 2uLL);
      int16x8_t v133 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 4uLL);
      int16x8_t v134 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 6uLL);
      int16x8_t v135 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 8uLL);
      int16x8_t v136 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xAuLL);
      int16x8_t v137 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xCuLL);
      int16x8_t v138 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xEuLL);
      int32x4_t v139 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v130.i8, *(int16x4_t *)v12.i8, 0);
      int32x4_t v140 = vmlal_high_lane_s16(vmull_high_lane_s16(v132, *(int16x4_t *)v12.i8, 1), v130, *(int16x4_t *)v12.i8, 0);
      int32x4_t v141 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0);
      int32x4_t v142 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, *(int16x4_t *)v13.i8, 1), v36, *(int16x4_t *)v13.i8, 0);
      int16x8_t v36 = v51;
      int16x8_t v51 = v66;
      int16x8_t v66 = v81;
      int16x8_t v81 = v96;
      int16x8_t v96 = v111;
      int16x8_t v111 = v128;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int32x4_t v147 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v140, v133, *(int16x4_t *)v12.i8, 2), v134, *(int16x4_t *)v12.i8, 3), v135, v12, 4), v136, v12, 5), v137, v12, 6), v138, v12,
               7);
      int16x4_t v148 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v139, *(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v135.i8, v12, 4), *(int16x4_t *)v136.i8, v12, 5), *(int16x4_t *)v137.i8, v12, 6), *(int16x4_t *)v138.i8,
                 v12,
                 7),
               1uLL);
      *(uint16x4_t *)v133.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v141, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v111.i8,
                                                   v13,
                                                   6),
                                                 v148,
                                                 v13,
                                                 7),
                                               0xBuLL),
                                 (uint16x4_t)0xFE00FE00FE00FE00);
      v133.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v142, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                                                        vshrn_n_s32(v147, 1uLL),
                                                        v13,
                                                        7),
                                                      0xBuLL),
                                        (uint16x4_t)0xFE00FE00FE00FE00);
      int16x8_t v128 = vshrn_high_n_s32(v148, v147, 1uLL);
      *int16x8_t v125 = v133;
      --v127;
      v126 += v9;
      int16x8_t v125 = (_OWORD *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    int v149 = result - 8;
    v14 += 16;
    v15 += 16;
    BOOL v150 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v150);
  if (v149)
  {
LABEL_9:
    int16x8_t v151 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v152 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    uint16x4_t v154 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v155 = (int16x4_t)vshr_n_u16(v154, 7uLL);
    int16x4_t v156 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v157 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v163 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 2uLL), *(int16x4_t *)v151.i8, 1), v155, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v156,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v156, v157, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v156, v157, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v156, v157, 6uLL),
               v151,
               7),
             1uLL);
    int16x4_t v164 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v165 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v166 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v172 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 2uLL), *(int16x4_t *)v151.i8, 1), v164, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v165,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v165, v166, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v165, v166, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v165, v166, 6uLL),
               v151,
               7),
             1uLL);
    int16x4_t v173 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v174 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v175 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v181 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 2uLL), *(int16x4_t *)v151.i8, 1), v173, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v174,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v174, v175, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v174, v175, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v174, v175, 6uLL),
               v151,
               7),
             1uLL);
    int16x4_t v182 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v183 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v184 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v190 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 2uLL), *(int16x4_t *)v151.i8, 1), v182, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v183,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v183, v184, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v183, v184, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v183, v184, 6uLL),
               v151,
               7),
             1uLL);
    int16x4_t v191 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v192 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v193 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v199 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 2uLL), *(int16x4_t *)v151.i8, 1), v191, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v192,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v192, v193, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v192, v193, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v192, v193, 6uLL),
               v151,
               7),
             1uLL);
    int16x4_t v200 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v201 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v202 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v208 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 2uLL), *(int16x4_t *)v151.i8, 1), v200, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v201,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v201, v202, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v201, v202, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v201, v202, 6uLL),
               v151,
               7),
             1uLL);
    int16x4_t v209 = (int16x4_t)vshr_n_u16(*_X13, 7uLL);
    int16x4_t v210 = (int16x4_t)vshr_n_u16(_X13[1], 7uLL);
    int8x8_t v211 = (int8x8_t)vshr_n_u16(_X13[2], 7uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v216 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 2uLL), *(int16x4_t *)v151.i8, 1), v209, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v210,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v210, v211, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v210, v211, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v210, v211, 6uLL),
               v151,
               7),
             1uLL);
    int v217 = a2 + 1;
    uint64_t v218 = v8 - 6;
    do
    {
      _X14 = v16 + v10;
      int16x4_t v220 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 7uLL);
      int16x4_t v221 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 7uLL);
      int8x8_t v222 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 7uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v218;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v227 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 2uLL), *(int16x4_t *)v151.i8, 1), v220, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 6uLL), *(int16x4_t *)v151.i8, 3),
                     v221,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v221, v222, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v221, v222, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v221, v222, 6uLL),
               v151,
               7);
      int32x4_t v228 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v172, *(int16x4_t *)v152.i8, 1), v163, *(int16x4_t *)v152.i8, 0), v181, *(int16x4_t *)v152.i8, 2), v190, *(int16x4_t *)v152.i8, 3), v199, v152, 4), v208, v152, 5), v216, v152,
               6);
      int16x4_t v163 = v172;
      int16x4_t v172 = v181;
      int16x4_t v181 = v190;
      int16x4_t v190 = v199;
      int16x4_t v199 = v208;
      int16x4_t v208 = v216;
      int16x4_t v216 = vshrn_n_s32(v227, 1uLL);
      --v217;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v228, v216, v152, 7), 0xBuLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v16 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v217 > 1);
  }
  return result;
}

unint64_t sub_1D0CAF8A0(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v15 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int v10 = a2 + 2;
  uint64_t v11 = 4 * a6;
  int16x8_t v12 = &a5->i8[20 * a4];
  int16x8_t v13 = &a5->i8[18 * a4];
  uint64_t v14 = &a5->i8[10 * a4];
  uint64_t v15 = a7;
  uint64_t v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    uint16x8_t v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v22 = (int16x8_t)vshrq_n_u16(v19, 7uLL);
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v21, 7uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v30 = v29;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v33 = v32;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    int16x8_t v41 = (int16x8_t)vshrq_n_u16(v26, 7uLL);
    int16x8_t v42 = (int16x8_t)vshrq_n_u16(*a5, 7uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(v30, 7uLL);
    int16x8_t v44 = (int16x8_t)vshrq_n_u16(v33, 7uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v47 = (int16x8_t)vshrq_n_u16(v35, 7uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int16x8_t v50 = v14;
    int16x8_t v51 = v13;
    int16x8_t v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int8x16_t v55 = v12;
    int v56 = v10;
    uint16x8_t v57 = a7;
    uint16x8_t v58 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      int16x8_t v22 = v41;
      int32x4_t v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      int32x4_t v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      int16x8_t v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      int16x8_t v43 = v47;
      int32x4_t v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      int32x4_t v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      int32x4_t v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      int16x8_t v23 = v42;
      int16x8_t v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 7uLL);
      __asm { PRFM            #0, [X9] }
      int16x8_t v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 7uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      *(uint16x4_t *)v68.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 6uLL),
                                (uint16x4_t)0xFE00FE00FE00FE00);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 6uLL),
                                       (uint16x4_t)0xFE00FE00FE00FE00);
      *(int32x4_t *)&v58[v7] = v68;
      uint16x8_t v57 = (uint16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    int v79 = result - 8;
    v7 += 16;
    BOOL v80 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    int16x8_t v81 = xmmword_1D0D7FBF0[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v83 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v84 = (int16x4_t)vshr_n_u16(v83, 7uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v86 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v87 = (int16x4_t)vshr_n_u16(v86, 7uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v89 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v90 = (int16x4_t)vshr_n_u16(v89, 7uLL);
    _X12 = &a5->i8[14];
    int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 7uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v94 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v95 = (int16x4_t)vshr_n_u16(v94, 7uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 7uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 7uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v109 = a2 + 4;
    uint64_t v110 = 3 * a4;
    uint64_t v111 = 8 * a4;
    uint64_t v112 = 22 * a4;
    uint64_t v113 = 12 * a4;
    uint64_t v114 = 10 * a4;
    uint64_t v115 = 2 * a6;
    uint64_t v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      __n128 result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v123 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v124 = v123;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v126 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v127 = v126;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v129 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      int32x4_t v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      int32x4_t v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      int32x4_t v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 7uLL);
      int32x4_t v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      int32x4_t v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      int32x4_t v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      int16x4_t v84 = v95;
      int16x4_t v95 = (int16x4_t)vshr_n_u16(v124, 7uLL);
      int32x4_t v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      int32x4_t v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      int32x4_t v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      int32x4_t v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      int16x4_t v87 = v98;
      int16x4_t v98 = (int16x4_t)vshr_n_u16(v127, 7uLL);
      int32x4_t v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      int32x4_t v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      int32x4_t v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      int32x4_t v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      int16x4_t v90 = v101;
      int16x4_t v101 = (int16x4_t)vshr_n_u16(v129, 7uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v15 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      BOOL v150 = (uint16x4_t *)((char *)v15 + v115);
      *BOOL v150 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      int16x8_t v151 = (uint16x4_t *)((char *)v150 + v115);
      *int16x8_t v151 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      int16x8_t v152 = (uint16x4_t *)((char *)v151 + v115);
      *int16x8_t v152 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v109 -= 4;
      uint64_t v15 = (uint16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1D0CAFD1C(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  uint64_t v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 7uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 7uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      int32x4_t v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10,
                                                    5),
                                                  *(int16x4_t *)v28.i8,
                                                  v10,
                                                  6),
                                                *(int16x4_t *)v29.i8,
                                                v10,
                                                7),
                                              6uLL),
                                (uint16x4_t)0xFE00FE00FE00FE00);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v31, 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    int v34 = result - 8;
    ++v11;
    BOOL v35 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    int16x8_t v36 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v38 = a2 + 1;
    do
    {
      int16x4_t v39 = (int16x4_t)vshr_n_u16(*_X11, 7uLL);
      int16x4_t v40 = (int16x4_t)vshr_n_u16(_X11[1], 7uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v42 = (int8x8_t)vshr_n_u16(_X11[2], 7uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                                      *(int16x4_t *)v36.i8,
                                      3),
                                    v40,
                                    v36,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                                  v36,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                                v36,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                              v36,
                              7),
                            6uLL),
              (uint16x4_t)0xFE00FE00FE00FE00);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

double sub_1D0CAFEC4(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, void *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1) {
      return *(double *)v14.i64;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  int16x8_t v10 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = a2 + 2;
    do
    {
      uint16x8_t v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 7uLL);
      uint16x8_t v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 7uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    BOOL v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 7uLL);
      uint16x4_t v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 7uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (void *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1D0CAFF84(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, void *a11)
{
  int16x8_t v12 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v11 = a4 + 1;
  int v13 = a11;
  int16x8_t v15 = (int16x8_t)vld1q_dup_f32(a7);
  uint16x8_t v14 = a7 + 1;
  int16x4_t v16 = (int16x4_t)vld1_dup_f32(v11);
  int16x4_t v17 = (int16x4_t)vld1_dup_f32(v14);
  int v18 = a9;
  int32x4_t v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  uint64_t v20 = 4 * a8;
  int32x4_t v21 = vdupq_n_s32(~a3);
  uint64_t v22 = 4 * a5;
  uint64_t v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int16x8_t v24 = (char *)a9 + 2 * a8;
  int16x8_t v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xFC00FC00FC00FC00;
  v26.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v27 = (char *)a11 + 2 * a10;
  do
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = a2 + 2;
    do
    {
      int16x8_t v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    int v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    BOOL v34 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    int16x4_t v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    int16x4_t v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    int v37 = a2 + 2;
    v38.i64[0] = 0xFC00FC00FC00FC00;
    v38.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      int16x8_t v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *int v13 = v39.i64[0];
      v37 -= 2;
      *(void *)((char *)v13 + 2 * a10) = v39.i64[1];
      int v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      int v13 = (void *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

uint64_t sub_1D0CB0150(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, void *a8)
{
  int16x8_t v9 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v8 = a4 + 1;
  int16x4_t v10 = (int16x4_t)vld1_dup_f32(v8);
  int32x4_t v11 = vdupq_n_s32(a3);
  int32x4_t v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  int32x4_t v13 = vnegq_s32(v11);
  uint64_t v14 = 4 * a5;
  uint64_t v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int16x4_t v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xFC00FC00FC00FC00;
  v17.i64[1] = 0xFC00FC00FC00FC00;
  int v18 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = a2 + 2;
    do
    {
      uint16x8_t v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    int v23 = result - 8;
    v16 += 16;
    v18 += 16;
    BOOL v24 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    int16x4_t v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    int v26 = a2 + 2;
    v27.i64[0] = 0xFC00FC00FC00FC00;
    v27.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      uint16x8_t v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(void *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (void *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1D0CB029C(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, void *a8)
{
  uint64_t v8 = 4 * a5;
  uint64_t v9 = 4 * a3;
  uint64_t v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int32x4_t v11 = (char *)a6 + 2 * a5;
  int32x4_t v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xFC00FC00FC00FC00;
  v14.i64[1] = 0xFC00FC00FC00FC00;
  uint64_t v15 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 3uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 3uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    int v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    BOOL v21 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    int v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xFC00FC00FC00FC00;
    v24.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      int16x8_t v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 3uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(void *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (void *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1D0CB03E4(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v24 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  int16x8_t v14 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 0);
  int16x8_t v15 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 1);
  int16x8_t v16 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 2);
  int16x8_t v17 = vdupq_laneq_s16(v12, 5);
  int16x8_t v18 = vdupq_laneq_s16(v12, 6);
  int16x8_t v19 = vdupq_laneq_s16(v12, 7);
  int16x8_t v20 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 3);
  int16x8_t v21 = vdupq_laneq_s16(v12, 4);
  uint64_t v22 = v8 - 6;
  uint64_t v23 = 8 * a4;
  uint64_t v24 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v24 + 2 * (-3 * a4 - 3));
    int16x8_t v26 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v27 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v26, v27, 6uLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v26, v27, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v39 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v26, v14), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xEuLL), v19);
    uint16x8_t v40 = (uint16x8_t)vmulq_s16(v33, v20);
    uint16x8_t v41 = (uint16x8_t)vmulq_s16(v34, v21);
    int16x8_t v42 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v40.i8), *(int16x4_t *)v39.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v40, v41), v39), 2uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 6uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v52 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v43, v14), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xEuLL), v19);
    uint16x8_t v53 = (uint16x8_t)vmulq_s16(v50, v20);
    uint16x8_t v54 = (uint16x8_t)vmulq_s16(v51, v21);
    int16x8_t v55 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v54.i8, *(uint16x4_t *)v53.i8), *(int16x4_t *)v52.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v53, v54), v52), 2uLL);
    int16x8_t v56 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v57 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 6uLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 8uLL);
    int16x8_t v65 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v56, v14), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xEuLL), v19);
    uint16x8_t v66 = (uint16x8_t)vmulq_s16(v63, v20);
    uint16x8_t v67 = (uint16x8_t)vmulq_s16(v64, v21);
    int16x8_t v68 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v67.i8, *(uint16x4_t *)v66.i8), *(int16x4_t *)v65.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v66, v67), v65), 2uLL);
    int16x8_t v69 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v70 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 8uLL);
    int16x8_t v78 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v69, v14), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xEuLL), v19);
    uint16x8_t v79 = (uint16x8_t)vmulq_s16(v76, v20);
    uint16x8_t v80 = (uint16x8_t)vmulq_s16(v77, v21);
    int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v80.i8, *(uint16x4_t *)v79.i8), *(int16x4_t *)v78.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v79, v80), v78), 2uLL);
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v91 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v82, v14), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL), v19);
    uint16x8_t v92 = (uint16x8_t)vmulq_s16(v89, v20);
    uint16x8_t v93 = (uint16x8_t)vmulq_s16(v90, v21);
    int16x8_t v94 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v93.i8, *(uint16x4_t *)v92.i8), *(int16x4_t *)v91.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v92, v93), v91), 2uLL);
    int16x8_t v95 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v96 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v102 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 6uLL);
    int16x8_t v103 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 8uLL);
    int16x8_t v104 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v95, v14), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xEuLL), v19);
    uint16x8_t v105 = (uint16x8_t)vmulq_s16(v102, v20);
    uint16x8_t v106 = (uint16x8_t)vmulq_s16(v103, v21);
    int16x8_t v107 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v105.i8), *(int16x4_t *)v104.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v105, v106), v104), 2uLL);
    int16x8_t v108 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v109 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v114 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 6uLL);
    int16x8_t v115 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 8uLL);
    int16x8_t v116 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v108, v14), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xEuLL), v19);
    uint16x8_t v117 = (uint16x8_t)vmulq_s16(v114, v20);
    uint16x8_t v118 = (uint16x8_t)vmulq_s16(v115, v21);
    int16x8_t v119 = (int16x8_t *)a7;
    uint64_t v120 = a5;
    int v121 = a2 + 1;
    int16x8_t v122 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v118.i8, *(uint16x4_t *)v117.i8), *(int16x4_t *)v116.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v117, v118), v116), 2uLL);
    do
    {
      _X22 = v120 + v23;
      int16x8_t v124 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v120 + v23 - 6), 6uLL);
      int8x16_t v125 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v120 + v23 + 10), 6uLL);
      int16x8_t v126 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 2uLL);
      int16x8_t v127 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 4uLL);
      int16x8_t v128 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 6uLL);
      int16x8_t v129 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 8uLL);
      int16x8_t v130 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xAuLL);
      int16x8_t v131 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xCuLL);
      int16x8_t v132 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xEuLL);
      int16x8_t v133 = vmlaq_s16(vmulq_s16(v124, v14), v126, v15);
      v126.i64[0] = 0x38000000380000;
      v126.i64[1] = 0x38000000380000;
      v134.i64[0] = 0x38000000380000;
      v134.i64[1] = 0x38000000380000;
      int32x4_t v135 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v126, *(int16x4_t *)v42.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v55.i8, *(int16x4_t *)v13.i8, 1);
      int32x4_t v136 = vmlal_high_lane_s16(vmlal_high_lane_s16(v134, v42, *(int16x4_t *)v13.i8, 0), v55, *(int16x4_t *)v13.i8, 1);
      int16x8_t v42 = v55;
      int16x8_t v55 = v68;
      int16x8_t v68 = v81;
      int16x8_t v81 = v94;
      int16x8_t v94 = v107;
      int16x8_t v107 = v122;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v120 + v22;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int16x8_t v141 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v133, v127, v16), v130, v17), v131, v18), v132, v19);
      uint16x8_t v142 = (uint16x8_t)vmulq_s16(v128, v20);
      uint16x8_t v143 = (uint16x8_t)vmulq_s16(v129, v21);
      int32x4_t v144 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v143.i8, *(uint16x4_t *)v142.i8);
      int32x4_t v145 = (int32x4_t)vaddl_high_u16(v142, v143);
      int32x4_t v146 = vaddw_s16(v144, *(int16x4_t *)v141.i8);
      int32x4_t v147 = vaddw_high_s16(v145, v141);
      *(int16x4_t *)v145.i8 = vshrn_n_s32(v146, 2uLL);
      int32x4_t v148 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v135, *(int16x4_t *)v55.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v68.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v94.i8, v13, 5), *(int16x4_t *)v107.i8, v13, 6), *(int16x4_t *)v145.i8, v13,
               7);
      int16x8_t v122 = vshrn_high_n_s32(*(int16x4_t *)v145.i8, v147, 2uLL);
      *int16x8_t v119 = vshrn_high_n_s32(vshrn_n_s32(v148, 6uLL), vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v136, v55, *(int16x4_t *)v13.i8, 2), v68, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v94, v13, 5), v107, v13, 6),
                  vshrn_n_s32(v147, 2uLL),
                  v13,
                  7),
                6uLL);
      --v121;
      v120 += v9;
      int16x8_t v119 = (int16x8_t *)((char *)v119 + v11);
    }
    while (v121 > 1);
    a7 += 2;
    v24 += 16;
    int v149 = result - 8;
    v22 += 16;
    v23 += 16;
    BOOL v150 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v150);
  if (v149)
  {
LABEL_9:
    int16x8_t v151 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v152 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v24 - 6 * a4);
    uint16x4_t v154 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v155 = (int16x4_t)vshr_n_u16(v154, 6uLL);
    int16x4_t v156 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v157 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v163 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 2uLL), *(int16x4_t *)v151.i8, 1), v155, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v156,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v156, v157, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v156, v157, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v156, v157, 6uLL),
               v151,
               7),
             2uLL);
    int16x4_t v164 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v165 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v166 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v172 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 2uLL), *(int16x4_t *)v151.i8, 1), v164, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v165,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v165, v166, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v165, v166, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v165, v166, 6uLL),
               v151,
               7),
             2uLL);
    int16x4_t v173 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v174 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v175 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v181 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 2uLL), *(int16x4_t *)v151.i8, 1), v173, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v174,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v174, v175, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v174, v175, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v174, v175, 6uLL),
               v151,
               7),
             2uLL);
    int16x4_t v182 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v183 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v184 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v190 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 2uLL), *(int16x4_t *)v151.i8, 1), v182, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v183,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v183, v184, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v183, v184, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v183, v184, 6uLL),
               v151,
               7),
             2uLL);
    int16x4_t v191 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v192 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v193 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v199 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 2uLL), *(int16x4_t *)v151.i8, 1), v191, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v192,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v192, v193, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v192, v193, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v192, v193, 6uLL),
               v151,
               7),
             2uLL);
    int16x4_t v200 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v201 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v202 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v208 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 2uLL), *(int16x4_t *)v151.i8, 1), v200, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v201,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v201, v202, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v201, v202, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v201, v202, 6uLL),
               v151,
               7),
             2uLL);
    int16x4_t v209 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v210 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v211 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v216 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 2uLL), *(int16x4_t *)v151.i8, 1), v209, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v210,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v210, v211, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v210, v211, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v210, v211, 6uLL),
               v151,
               7),
             2uLL);
    int v217 = a2 + 1;
    uint64_t v218 = v8 - 6;
    do
    {
      v219.i64[0] = 0x38000000380000;
      v219.i64[1] = 0x38000000380000;
      int32x4_t v220 = vmlal_lane_s16(v219, v163, *(int16x4_t *)v152.i8, 0);
      _X14 = v24 + v10;
      int16x4_t v222 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 - 6), 6uLL);
      int16x4_t v223 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 + 2), 6uLL);
      int8x8_t v224 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 + 10), 6uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v24 + v218;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v229 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v222, (int8x8_t)v223, 2uLL), *(int16x4_t *)v151.i8, 1), v222, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v222, (int8x8_t)v223, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v222, (int8x8_t)v223, 6uLL), *(int16x4_t *)v151.i8, 3),
                     v223,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v223, v224, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v223, v224, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v223, v224, 6uLL),
               v151,
               7);
      int32x4_t v230 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v220, v172, *(int16x4_t *)v152.i8, 1), v181, *(int16x4_t *)v152.i8, 2), v190, *(int16x4_t *)v152.i8, 3), v199, v152, 4), v208, v152, 5), v216, v152,
               6);
      int16x4_t v163 = v172;
      int16x4_t v172 = v181;
      int16x4_t v181 = v190;
      int16x4_t v190 = v199;
      int16x4_t v199 = v208;
      int16x4_t v208 = v216;
      int16x4_t v216 = vshrn_n_s32(v229, 2uLL);
      --v217;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v230, v216, v152, 7), 6uLL);
      v24 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v217 > 1);
  }
  return result;
}

unint64_t sub_1D0CB0C78(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v167 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v24 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  int16x8_t v13 = vdupq_laneq_s16(v8, 5);
  int16x8_t v14 = vdupq_laneq_s16(v8, 6);
  int16x8_t v15 = vdupq_laneq_s16(v8, 7);
  int16x8_t v16 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  int16x8_t v17 = vdupq_laneq_s16(v8, 4);
  uint64_t v18 = 4 * a6;
  int v19 = a2 + 2;
  int16x8_t v20 = &a5->i8[20 * a4];
  int16x8_t v21 = &a5->i8[8 * a4];
  uint64_t v22 = &a5->i8[18 * a4];
  uint64_t v23 = &a5->i8[10 * a4];
  uint64_t v24 = a7;
  do
  {
    _X2 = &a5->i8[-6 * a4];
    uint16x8_t v26 = *(uint16x8_t *)_X2;
    _X2 += 30;
    uint16x8_t v27 = v26;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v30 = (int16x8_t)vshrq_n_u16(v27, 6uLL);
    int16x8_t v31 = (int16x8_t)vshrq_n_u16(v29, 6uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v33 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v34 = v33;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v37 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v38 = v37;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v40 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v41 = v40;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v43 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X2] }
    int16x8_t v49 = (int16x8_t)vshrq_n_u16(v34, 6uLL);
    int16x8_t v50 = (int16x8_t)vshrq_n_u16(*a5, 6uLL);
    int16x8_t v51 = (int16x8_t)vshrq_n_u16(v38, 6uLL);
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(v41, 6uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v55 = (int16x8_t)vshrq_n_u16(v43, 6uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    uint16x8_t v58 = v23;
    int32x4_t v59 = v22;
    int32x4_t v60 = v21;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int16x8_t v63 = v20;
    int v64 = v19;
    int16x8_t v65 = a7;
    uint16x8_t v66 = (char *)a7 + 2 * a6;
    do
    {
      int16x8_t v67 = v49;
      int16x8_t v68 = v50;
      int16x8_t v49 = v51;
      int16x8_t v50 = v52;
      _X9 = (uint64_t)&v60[v7 + 30];
      __asm { PRFM            #0, [X9] }
      _X9 = (uint64_t)&v58[v7 + 30];
      int16x8_t v51 = v55;
      __asm { PRFM            #0, [X9] }
      _X9 = &v59[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v63[v7];
      int16x8_t v52 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v60[v7], 6uLL);
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      int16x8_t v79 = vmlaq_s16(vmulq_s16(v55, v14), v50, v13);
      int16x8_t v55 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v58[v7], 6uLL);
      int16x8_t v80 = vmlaq_s16(vmlaq_s16(vmlaq_s16(v79, v67, v12), v31, v11), v30, v10);
      uint16x8_t v81 = (uint16x8_t)vmulq_s16(v68, v16);
      uint16x8_t v82 = (uint16x8_t)vmulq_s16(v49, v17);
      int16x8_t v83 = vmlaq_s16(v80, v52, v15);
      int32x4_t v84 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v81.i8, *(uint16x4_t *)v82.i8);
      int32x4_t v85 = (int32x4_t)vaddl_high_u16(v81, v82);
      int32x4_t v86 = vaddw_s16(v84, *(int16x4_t *)v83.i8);
      int16x8_t v87 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v51, v13), v68, v12), v67, v11), v31, v10), v52, v14), v55, v15);
      uint16x8_t v88 = (uint16x8_t)vmulq_s16(v49, v16);
      uint16x8_t v89 = (uint16x8_t)vmulq_s16(v50, v17);
      int32x4_t v90 = vaddw_high_s16(v85, v83);
      int32x4_t v91 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v88.i8, *(uint16x4_t *)v89.i8), *(int16x4_t *)v87.i8);
      int32x4_t v92 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v88, v89), v87);
      *(int16x4_t *)v87.i8 = vadd_s16(vshrn_n_s32(v86, 2uLL), (int16x4_t)0xE000E000E000E000);
      v87.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v90, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v90.i8 = vadd_s16(vshrn_n_s32(v91, 2uLL), (int16x4_t)0xE000E000E000E000);
      v90.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v92, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x8_t *)v65[v7 / 8].i8 = v87;
      *(int32x4_t *)&v66[v7] = v90;
      v66 += v18;
      v64 -= 2;
      v63 += v9;
      int16x8_t v65 = (int16x4_t *)((char *)v65 + v18);
      v60 += v9;
      v59 += v9;
      v58 += v9;
      int16x8_t v31 = v68;
      int16x8_t v30 = v67;
    }
    while (v64 > 2);
    v24 += 2;
    ++a5;
    int v93 = result - 8;
    v7 += 16;
    BOOL v94 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v94);
  if (v93)
  {
LABEL_9:
    int16x8_t v95 = xmmword_1D0D7FBF0[v167 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 6uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 6uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v103 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v104 = (int16x4_t)vshr_n_u16(v103, 6uLL);
    _X12 = &a5->i8[14];
    int16x4_t v106 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 6uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v108 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v109 = (int16x4_t)vshr_n_u16(v108, 6uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v111 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v112 = (int16x4_t)vshr_n_u16(v111, 6uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v114 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v115 = (int16x4_t)vshr_n_u16(v114, 6uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v123 = a2 + 4;
    uint64_t v124 = 3 * a4;
    uint64_t v125 = 8 * a4;
    uint64_t v126 = 22 * a4;
    uint64_t v127 = 12 * a4;
    uint64_t v128 = 10 * a4;
    uint64_t v129 = 2 * a6;
    uint64_t v130 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v128);
      _X3 = (uint64_t *)((char *)a5->i64 + v127);
      _X5 = (uint64_t *)((char *)a5->i64 + v130);
      _X17 = &a5->i8[v126];
      __n128 result = (unint64_t)&a5->u64[v124];
      a5 = (uint16x8_t *)((char *)a5 + v125);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v137 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v138 = v137;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v140 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v141 = v140;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v143 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v145 = vmlal_lane_s16(vmull_lane_s16(v106, *(int16x4_t *)v95.i8, 1), v104, *(int16x4_t *)v95.i8, 0);
      int32x4_t v146 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v101, *(int16x4_t *)v95.i8, 1), v98, *(int16x4_t *)v95.i8, 0), v104, *(int16x4_t *)v95.i8, 2), v106, *(int16x4_t *)v95.i8, 3);
      int32x4_t v147 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v104, *(int16x4_t *)v95.i8, 1), v101, *(int16x4_t *)v95.i8, 0), v106, *(int16x4_t *)v95.i8, 2);
      int32x4_t v148 = vmlal_lane_s16(vmull_lane_s16(v109, *(int16x4_t *)v95.i8, 1), v106, *(int16x4_t *)v95.i8, 0);
      int16x4_t v106 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 6uLL);
      int32x4_t v149 = vmlal_laneq_s16(v146, v109, v95, 4);
      int32x4_t v150 = vmlal_lane_s16(v147, v109, *(int16x4_t *)v95.i8, 3);
      int32x4_t v151 = vmlal_lane_s16(v145, v109, *(int16x4_t *)v95.i8, 2);
      int16x4_t v98 = v109;
      int16x4_t v109 = (int16x4_t)vshr_n_u16(v138, 6uLL);
      int32x4_t v152 = vmlal_laneq_s16(v149, v112, v95, 5);
      int32x4_t v153 = vmlal_laneq_s16(v150, v112, v95, 4);
      int32x4_t v154 = vmlal_lane_s16(v151, v112, *(int16x4_t *)v95.i8, 3);
      int32x4_t v155 = vmlal_lane_s16(v148, v112, *(int16x4_t *)v95.i8, 2);
      int16x4_t v101 = v112;
      int16x4_t v112 = (int16x4_t)vshr_n_u16(v141, 6uLL);
      int32x4_t v156 = vmlal_laneq_s16(v152, v115, v95, 6);
      int32x4_t v157 = vmlal_laneq_s16(v153, v115, v95, 5);
      int32x4_t v158 = vmlal_laneq_s16(v154, v115, v95, 4);
      int32x4_t v159 = vmlal_lane_s16(v155, v115, *(int16x4_t *)v95.i8, 3);
      int16x4_t v104 = v115;
      int16x4_t v115 = (int16x4_t)vshr_n_u16(v143, 6uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v24 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v156, v106, v95, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      int16x4_t v164 = (int16x4_t *)((char *)v24 + v129);
      *int16x4_t v164 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v157, v106, v95, 6), v109, v95, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      int16x4_t v165 = (int16x4_t *)((char *)v164 + v129);
      *int16x4_t v165 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v158, v106, v95, 5), v109, v95, 6), v112, v95, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      int8x8_t v166 = (int16x4_t *)((char *)v165 + v129);
      *int8x8_t v166 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v159, v106, v95, 4), v109, v95, 5), v112, v95, 6), v115, v95, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      v123 -= 4;
      uint64_t v24 = (int16x4_t *)((char *)v166 + v129);
    }
    while (v123 > 4);
  }
  return result;
}

uint64_t sub_1D0CB10FC(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 0);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  int16x8_t v13 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 2);
  int16x8_t v14 = vdupq_laneq_s16(v10, 5);
  int16x8_t v15 = vdupq_laneq_s16(v10, 6);
  int16x8_t v16 = vdupq_laneq_s16(v10, 7);
  int16x8_t v17 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 3);
  int16x8_t v18 = vdupq_laneq_s16(v10, 4);
  int v19 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v20 = a7;
    _X15 = v19;
    int v22 = a2 + 1;
    do
    {
      int16x8_t v23 = (int16x8_t)vshrq_n_u16(*_X15, 6uLL);
      int8x16_t v24 = (int8x16_t)vshrq_n_u16(_X15[1], 6uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 2uLL);
      int16x8_t v32 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 4uLL);
      int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 6uLL);
      int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 8uLL);
      int16x8_t v35 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xAuLL);
      int16x8_t v36 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xCuLL);
      int16x8_t v37 = vmulq_s16(v23, v11);
      int16x8_t v38 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xEuLL);
      uint16x8_t v39 = (uint16x8_t)vmulq_s16(v33, v17);
      int16x8_t v40 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v37, v31, v12), v32, v13), v35, v14), v36, v15), v38, v16);
      uint16x8_t v41 = (uint16x8_t)vmulq_s16(v34, v18);
      int32x4_t v42 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v39.i8);
      int32x4_t v43 = (int32x4_t)vaddl_high_u16(v39, v41);
      *(int16x4_t *)v39.i8 = vadd_s16(vshrn_n_s32(vaddw_s16(v42, *(int16x4_t *)v40.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
      v39.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16(v43, v40), 2uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v20 = v39;
      --v22;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v20 = (_OWORD *)((char *)v20 + v9);
    }
    while (v22 > 1);
    a7 += 2;
    a5 += 16;
    int v46 = result - 8;
    ++v19;
    BOOL v47 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v47);
  if (v46)
  {
LABEL_9:
    int16x8_t v48 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v50 = a2 + 1;
    do
    {
      int16x4_t v51 = (int16x4_t)vshr_n_u16(*_X11, 6uLL);
      int16x4_t v52 = (int16x4_t)vshr_n_u16(_X11[1], 6uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v54 = (int8x8_t)vshr_n_u16(_X11[2], 6uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 2uLL), *(int16x4_t *)v48.i8, 1), v51, *(int16x4_t *)v48.i8, 0), (int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 4uLL), *(int16x4_t *)v48.i8, 2), (int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 6uLL),
                          *(int16x4_t *)v48.i8,
                          3),
                        v52,
                        v48,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v52, v54, 2uLL),
                      v48,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v52, v54, 4uLL),
                    v48,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v52, v54, 6uLL),
                  v48,
                  7),
                2uLL),
              (int16x4_t)0xE000E000E000E000);
      --v50;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v50 > 1);
  }
  return result;
}

uint64_t sub_1D0CB12B4(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  int16x8_t v11 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = a2 + 2;
    do
    {
      uint16x8_t v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFF0FFF0FFF0FFF0, 0xFFF0FFF0FFF0FFF0)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFF0FFF0FFF0FFF0, 0xFFF0FFF0FFF0FFF0)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = result - 8;
    v9 += 16;
    v11 += 16;
    BOOL v17 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      uint16x4_t v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(*a5, 2uLL) & 0xFFF0FFF0FFF0FFF0), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(v19, 2uLL) & 0xFFF0FFF0FFF0FFF0), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1D0CB139C(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v24 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  int16x8_t v14 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 0);
  int16x8_t v15 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 1);
  int16x8_t v16 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 2);
  int16x8_t v17 = vdupq_laneq_s16(v12, 5);
  int16x8_t v18 = vdupq_laneq_s16(v12, 6);
  int16x8_t v19 = vdupq_laneq_s16(v12, 7);
  int16x8_t v20 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 3);
  int16x8_t v21 = vdupq_laneq_s16(v12, 4);
  uint64_t v22 = v8 - 6;
  uint64_t v23 = 8 * a4;
  uint64_t v24 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v24 + 2 * (-3 * a4 - 3));
    int16x8_t v26 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v27 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v26, v27, 6uLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v26, v27, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v39 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v26, v14), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v26, v27, 0xEuLL), v19);
    uint16x8_t v40 = (uint16x8_t)vmulq_s16(v33, v20);
    uint16x8_t v41 = (uint16x8_t)vmulq_s16(v34, v21);
    int16x8_t v42 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v40.i8), *(int16x4_t *)v39.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v40, v41), v39), 2uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 6uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v52 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v43, v14), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xEuLL), v19);
    uint16x8_t v53 = (uint16x8_t)vmulq_s16(v50, v20);
    uint16x8_t v54 = (uint16x8_t)vmulq_s16(v51, v21);
    int16x8_t v55 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v54.i8, *(uint16x4_t *)v53.i8), *(int16x4_t *)v52.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v53, v54), v52), 2uLL);
    int16x8_t v56 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v57 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 6uLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v56, v57, 8uLL);
    int16x8_t v65 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v56, v14), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v56, v57, 0xEuLL), v19);
    uint16x8_t v66 = (uint16x8_t)vmulq_s16(v63, v20);
    uint16x8_t v67 = (uint16x8_t)vmulq_s16(v64, v21);
    int16x8_t v68 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v67.i8, *(uint16x4_t *)v66.i8), *(int16x4_t *)v65.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v66, v67), v65), 2uLL);
    int16x8_t v69 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v70 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 8uLL);
    int16x8_t v78 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v69, v14), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xEuLL), v19);
    uint16x8_t v79 = (uint16x8_t)vmulq_s16(v76, v20);
    uint16x8_t v80 = (uint16x8_t)vmulq_s16(v77, v21);
    int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v80.i8, *(uint16x4_t *)v79.i8), *(int16x4_t *)v78.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v79, v80), v78), 2uLL);
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v91 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v82, v14), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL), v19);
    uint16x8_t v92 = (uint16x8_t)vmulq_s16(v89, v20);
    uint16x8_t v93 = (uint16x8_t)vmulq_s16(v90, v21);
    int16x8_t v94 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v93.i8, *(uint16x4_t *)v92.i8), *(int16x4_t *)v91.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v92, v93), v91), 2uLL);
    int16x8_t v95 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v96 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v102 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 6uLL);
    int16x8_t v103 = (int16x8_t)vextq_s8((int8x16_t)v95, v96, 8uLL);
    int16x8_t v104 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v95, v14), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v95, v96, 0xEuLL), v19);
    uint16x8_t v105 = (uint16x8_t)vmulq_s16(v102, v20);
    uint16x8_t v106 = (uint16x8_t)vmulq_s16(v103, v21);
    int16x8_t v107 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v105.i8), *(int16x4_t *)v104.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v105, v106), v104), 2uLL);
    int16x8_t v108 = (int16x8_t)vshrq_n_u16(*_X19, 6uLL);
    int8x16_t v109 = (int8x16_t)vshrq_n_u16(_X19[1], 6uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v114 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 6uLL);
    int16x8_t v115 = (int16x8_t)vextq_s8((int8x16_t)v108, v109, 8uLL);
    int16x8_t v116 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v108, v14), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v108, v109, 0xEuLL), v19);
    uint16x8_t v117 = (uint16x8_t)vmulq_s16(v114, v20);
    uint16x8_t v118 = (uint16x8_t)vmulq_s16(v115, v21);
    int16x8_t v119 = a7;
    uint64_t v120 = a5;
    int v121 = a2 + 1;
    int16x8_t v122 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v118.i8, *(uint16x4_t *)v117.i8), *(int16x4_t *)v116.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v117, v118), v116), 2uLL);
    do
    {
      _X22 = v120 + v23;
      int16x8_t v124 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v120 + v23 - 6), 6uLL);
      int8x16_t v125 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v120 + v23 + 10), 6uLL);
      int16x8_t v126 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 2uLL);
      int16x8_t v127 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 4uLL);
      int16x8_t v128 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 6uLL);
      int16x8_t v129 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 8uLL);
      int16x8_t v130 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xAuLL);
      int16x8_t v131 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xCuLL);
      int16x8_t v132 = (int16x8_t)vextq_s8((int8x16_t)v124, v125, 0xEuLL);
      int16x8_t v133 = vmlaq_s16(vmulq_s16(v124, v14), v126, v15);
      int32x4_t v134 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v42.i8, *(int16x4_t *)v13.i8, 0);
      int32x4_t v135 = vmlal_high_lane_s16(vmull_high_lane_s16(v55, *(int16x4_t *)v13.i8, 1), v42, *(int16x4_t *)v13.i8, 0);
      int16x8_t v42 = v55;
      int16x8_t v55 = v68;
      int16x8_t v68 = v81;
      int16x8_t v81 = v94;
      int16x8_t v94 = v107;
      int16x8_t v107 = v122;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v120 + v22;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int16x8_t v140 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v133, v127, v16), v130, v17), v131, v18), v132, v19);
      uint16x8_t v141 = (uint16x8_t)vmulq_s16(v128, v20);
      uint16x8_t v142 = (uint16x8_t)vmulq_s16(v129, v21);
      int32x4_t v143 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v142.i8, *(uint16x4_t *)v141.i8);
      int32x4_t v144 = (int32x4_t)vaddl_high_u16(v141, v142);
      int32x4_t v145 = vaddw_s16(v143, *(int16x4_t *)v140.i8);
      int32x4_t v146 = vaddw_high_s16(v144, v140);
      *(int16x4_t *)v144.i8 = vshrn_n_s32(v145, 2uLL);
      *(uint16x4_t *)v145.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v134, *(int16x4_t *)v55.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v68.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v94.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v107.i8,
                                                   v13,
                                                   6),
                                                 *(int16x4_t *)v144.i8,
                                                 v13,
                                                 7),
                                               0xAuLL),
                                 (uint16x4_t)0xFC00FC00FC00FC00);
      v145.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v135, v55, *(int16x4_t *)v13.i8, 2), v68, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v94, v13, 5), v107, v13, 6),
                                                        vshrn_n_s32(v146, 2uLL),
                                                        v13,
                                                        7),
                                                      0xAuLL),
                                        (uint16x4_t)0xFC00FC00FC00FC00);
      int16x8_t v122 = vshrn_high_n_s32(*(int16x4_t *)v144.i8, v146, 2uLL);
      *int16x8_t v119 = v145;
      --v121;
      v120 += v9;
      int16x8_t v119 = (_OWORD *)((char *)v119 + v11);
    }
    while (v121 > 1);
    a7 += 2;
    v24 += 16;
    int v147 = result - 8;
    v22 += 16;
    v23 += 16;
    BOOL v148 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v148);
  if (v147)
  {
LABEL_9:
    int16x8_t v149 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v150 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v24 - 6 * a4);
    uint16x4_t v152 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v153 = (int16x4_t)vshr_n_u16(v152, 6uLL);
    int16x4_t v154 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v155 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v161 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v153, (int8x8_t)v154, 2uLL), *(int16x4_t *)v149.i8, 1), v153, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v153, (int8x8_t)v154, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v153, (int8x8_t)v154, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v154,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v154, v155, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v154, v155, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v154, v155, 6uLL),
               v149,
               7),
             2uLL);
    int16x4_t v162 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v163 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v164 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v170 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v162, (int8x8_t)v163, 2uLL), *(int16x4_t *)v149.i8, 1), v162, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v162, (int8x8_t)v163, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v162, (int8x8_t)v163, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v163,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v163, v164, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v163, v164, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v163, v164, 6uLL),
               v149,
               7),
             2uLL);
    int16x4_t v171 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v172 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v173 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v179 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v171, (int8x8_t)v172, 2uLL), *(int16x4_t *)v149.i8, 1), v171, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v171, (int8x8_t)v172, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v171, (int8x8_t)v172, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v172,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v172, v173, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v172, v173, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v172, v173, 6uLL),
               v149,
               7),
             2uLL);
    int16x4_t v180 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v181 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v182 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v188 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v180, (int8x8_t)v181, 2uLL), *(int16x4_t *)v149.i8, 1), v180, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v180, (int8x8_t)v181, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v180, (int8x8_t)v181, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v181,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v181, v182, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v181, v182, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v181, v182, 6uLL),
               v149,
               7),
             2uLL);
    int16x4_t v189 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v190 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v191 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v197 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v189, (int8x8_t)v190, 2uLL), *(int16x4_t *)v149.i8, 1), v189, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v189, (int8x8_t)v190, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v189, (int8x8_t)v190, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v190,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v190, v191, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v190, v191, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v190, v191, 6uLL),
               v149,
               7),
             2uLL);
    int16x4_t v198 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v199 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v200 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v206 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v198, (int8x8_t)v199, 2uLL), *(int16x4_t *)v149.i8, 1), v198, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v198, (int8x8_t)v199, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v198, (int8x8_t)v199, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v199,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v199, v200, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v199, v200, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v199, v200, 6uLL),
               v149,
               7),
             2uLL);
    int16x4_t v207 = (int16x4_t)vshr_n_u16(*_X13, 6uLL);
    int16x4_t v208 = (int16x4_t)vshr_n_u16(_X13[1], 6uLL);
    int8x8_t v209 = (int8x8_t)vshr_n_u16(_X13[2], 6uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v214 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v207, (int8x8_t)v208, 2uLL), *(int16x4_t *)v149.i8, 1), v207, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v207, (int8x8_t)v208, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v207, (int8x8_t)v208, 6uLL), *(int16x4_t *)v149.i8,
                       3),
                     v208,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v208, v209, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v208, v209, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v208, v209, 6uLL),
               v149,
               7),
             2uLL);
    int v215 = a2 + 1;
    uint64_t v216 = v8 - 6;
    do
    {
      _X14 = v24 + v10;
      int16x4_t v218 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 - 6), 6uLL);
      int16x4_t v219 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 + 2), 6uLL);
      int8x8_t v220 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v24 + v10 + 10), 6uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v24 + v216;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v225 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v218, (int8x8_t)v219, 2uLL), *(int16x4_t *)v149.i8, 1), v218, *(int16x4_t *)v149.i8, 0), (int16x4_t)vext_s8((int8x8_t)v218, (int8x8_t)v219, 4uLL), *(int16x4_t *)v149.i8, 2), (int16x4_t)vext_s8((int8x8_t)v218, (int8x8_t)v219, 6uLL), *(int16x4_t *)v149.i8, 3),
                     v219,
                     v149,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v219, v220, 2uLL),
                   v149,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v219, v220, 4uLL),
                 v149,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v219, v220, 6uLL),
               v149,
               7);
      int32x4_t v226 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v170, *(int16x4_t *)v150.i8, 1), v161, *(int16x4_t *)v150.i8, 0), v179, *(int16x4_t *)v150.i8, 2), v188, *(int16x4_t *)v150.i8, 3), v197, v150, 4), v206, v150, 5), v214, v150,
               6);
      int16x4_t v161 = v170;
      int16x4_t v170 = v179;
      int16x4_t v179 = v188;
      int16x4_t v188 = v197;
      int16x4_t v197 = v206;
      int16x4_t v206 = v214;
      int16x4_t v214 = vshrn_n_s32(v225, 2uLL);
      --v215;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v226, v214, v150, 7), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v24 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v215 > 1);
  }
  return result;
}

unint64_t sub_1D0CB1C3C(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v167 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v24 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  int16x8_t v13 = vdupq_laneq_s16(v8, 5);
  int16x8_t v14 = vdupq_laneq_s16(v8, 6);
  int16x8_t v15 = vdupq_laneq_s16(v8, 7);
  int16x8_t v16 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  int16x8_t v17 = vdupq_laneq_s16(v8, 4);
  uint64_t v18 = 4 * a6;
  int v19 = a2 + 2;
  int16x8_t v20 = &a5->i8[20 * a4];
  int16x8_t v21 = &a5->i8[8 * a4];
  uint64_t v22 = &a5->i8[18 * a4];
  uint64_t v23 = &a5->i8[10 * a4];
  uint64_t v24 = a7;
  do
  {
    _X2 = &a5->i8[-6 * a4];
    uint16x8_t v26 = *(uint16x8_t *)_X2;
    _X2 += 30;
    uint16x8_t v27 = v26;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v30 = (int16x8_t)vshrq_n_u16(v27, 6uLL);
    int16x8_t v31 = (int16x8_t)vshrq_n_u16(v29, 6uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v33 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v34 = v33;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v37 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v38 = v37;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v40 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v41 = v40;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v43 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X2] }
    int16x8_t v49 = (int16x8_t)vshrq_n_u16(v34, 6uLL);
    int16x8_t v50 = (int16x8_t)vshrq_n_u16(*a5, 6uLL);
    int16x8_t v51 = (int16x8_t)vshrq_n_u16(v38, 6uLL);
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(v41, 6uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v55 = (int16x8_t)vshrq_n_u16(v43, 6uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    uint16x8_t v58 = v23;
    int32x4_t v59 = v22;
    int32x4_t v60 = v21;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int16x8_t v63 = v20;
    int v64 = v19;
    int16x8_t v65 = a7;
    uint16x8_t v66 = (char *)a7 + 2 * a6;
    do
    {
      int16x8_t v67 = v49;
      int16x8_t v68 = v50;
      int16x8_t v49 = v51;
      int16x8_t v50 = v52;
      _X9 = (uint64_t)&v60[v7 + 30];
      __asm { PRFM            #0, [X9] }
      _X9 = (uint64_t)&v58[v7 + 30];
      int16x8_t v51 = v55;
      __asm { PRFM            #0, [X9] }
      _X9 = &v59[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v63[v7];
      int16x8_t v52 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v60[v7], 6uLL);
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      int16x8_t v79 = vmlaq_s16(vmulq_s16(v55, v14), v50, v13);
      int16x8_t v55 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v58[v7], 6uLL);
      int16x8_t v80 = vmlaq_s16(vmlaq_s16(vmlaq_s16(v79, v67, v12), v31, v11), v30, v10);
      uint16x8_t v81 = (uint16x8_t)vmulq_s16(v68, v16);
      uint16x8_t v82 = (uint16x8_t)vmulq_s16(v49, v17);
      int16x8_t v83 = vmlaq_s16(v80, v52, v15);
      int32x4_t v84 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v81.i8, *(uint16x4_t *)v82.i8);
      int32x4_t v85 = (int32x4_t)vaddl_high_u16(v81, v82);
      int32x4_t v86 = vaddw_s16(v84, *(int16x4_t *)v83.i8);
      int16x8_t v87 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v51, v13), v68, v12), v67, v11), v31, v10), v52, v14), v55, v15);
      uint16x8_t v88 = (uint16x8_t)vmulq_s16(v49, v16);
      uint16x8_t v89 = (uint16x8_t)vmulq_s16(v50, v17);
      int32x4_t v90 = vaddw_high_s16(v85, v83);
      int32x4_t v91 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v88.i8, *(uint16x4_t *)v89.i8), *(int16x4_t *)v87.i8);
      int32x4_t v92 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v88, v89), v87);
      *(uint16x4_t *)v87.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v86, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v87.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v90, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(uint16x4_t *)v90.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v91, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v90.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v92, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int16x8_t *)v65[v7 / 8].i8 = v87;
      *(int32x4_t *)&v66[v7] = v90;
      v66 += v18;
      v64 -= 2;
      v63 += v9;
      int16x8_t v65 = (uint16x4_t *)((char *)v65 + v18);
      v60 += v9;
      v59 += v9;
      v58 += v9;
      int16x8_t v31 = v68;
      int16x8_t v30 = v67;
    }
    while (v64 > 2);
    v24 += 2;
    ++a5;
    int v93 = result - 8;
    v7 += 16;
    BOOL v94 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v94);
  if (v93)
  {
LABEL_9:
    int16x8_t v95 = xmmword_1D0D7FBF0[v167 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 6uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 6uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v103 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v104 = (int16x4_t)vshr_n_u16(v103, 6uLL);
    _X12 = &a5->i8[14];
    int16x4_t v106 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 6uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v108 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v109 = (int16x4_t)vshr_n_u16(v108, 6uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v111 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v112 = (int16x4_t)vshr_n_u16(v111, 6uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v114 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v115 = (int16x4_t)vshr_n_u16(v114, 6uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v123 = a2 + 4;
    uint64_t v124 = 3 * a4;
    uint64_t v125 = 8 * a4;
    uint64_t v126 = 22 * a4;
    uint64_t v127 = 12 * a4;
    uint64_t v128 = 10 * a4;
    uint64_t v129 = 2 * a6;
    uint64_t v130 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v128);
      _X3 = (uint64_t *)((char *)a5->i64 + v127);
      _X5 = (uint64_t *)((char *)a5->i64 + v130);
      _X17 = &a5->i8[v126];
      __n128 result = (unint64_t)&a5->u64[v124];
      a5 = (uint16x8_t *)((char *)a5 + v125);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v137 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v138 = v137;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v140 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v141 = v140;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v143 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v145 = vmlal_lane_s16(vmull_lane_s16(v106, *(int16x4_t *)v95.i8, 1), v104, *(int16x4_t *)v95.i8, 0);
      int32x4_t v146 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v101, *(int16x4_t *)v95.i8, 1), v98, *(int16x4_t *)v95.i8, 0), v104, *(int16x4_t *)v95.i8, 2), v106, *(int16x4_t *)v95.i8, 3);
      int32x4_t v147 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v104, *(int16x4_t *)v95.i8, 1), v101, *(int16x4_t *)v95.i8, 0), v106, *(int16x4_t *)v95.i8, 2);
      int32x4_t v148 = vmlal_lane_s16(vmull_lane_s16(v109, *(int16x4_t *)v95.i8, 1), v106, *(int16x4_t *)v95.i8, 0);
      int16x4_t v106 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 6uLL);
      int32x4_t v149 = vmlal_laneq_s16(v146, v109, v95, 4);
      int32x4_t v150 = vmlal_lane_s16(v147, v109, *(int16x4_t *)v95.i8, 3);
      int32x4_t v151 = vmlal_lane_s16(v145, v109, *(int16x4_t *)v95.i8, 2);
      int16x4_t v98 = v109;
      int16x4_t v109 = (int16x4_t)vshr_n_u16(v138, 6uLL);
      int32x4_t v152 = vmlal_laneq_s16(v149, v112, v95, 5);
      int32x4_t v153 = vmlal_laneq_s16(v150, v112, v95, 4);
      int32x4_t v154 = vmlal_lane_s16(v151, v112, *(int16x4_t *)v95.i8, 3);
      int32x4_t v155 = vmlal_lane_s16(v148, v112, *(int16x4_t *)v95.i8, 2);
      int16x4_t v101 = v112;
      int16x4_t v112 = (int16x4_t)vshr_n_u16(v141, 6uLL);
      int32x4_t v156 = vmlal_laneq_s16(v152, v115, v95, 6);
      int32x4_t v157 = vmlal_laneq_s16(v153, v115, v95, 5);
      int32x4_t v158 = vmlal_laneq_s16(v154, v115, v95, 4);
      int32x4_t v159 = vmlal_lane_s16(v155, v115, *(int16x4_t *)v95.i8, 3);
      int16x4_t v104 = v115;
      int16x4_t v115 = (int16x4_t)vshr_n_u16(v143, 6uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v24 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v156, v106, v95, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int8x8_t v164 = (uint16x4_t *)((char *)v24 + v129);
      *int8x8_t v164 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v157, v106, v95, 6), v109, v95, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int16x4_t v165 = (uint16x4_t *)((char *)v164 + v129);
      *int16x4_t v165 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v158, v106, v95, 5), v109, v95, 6), v112, v95, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int8x8_t v166 = (uint16x4_t *)((char *)v165 + v129);
      *int8x8_t v166 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v159, v106, v95, 4), v109, v95, 5), v112, v95, 6), v115, v95, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v123 -= 4;
      uint64_t v24 = (uint16x4_t *)((char *)v166 + v129);
    }
    while (v123 > 4);
  }
  return result;
}

uint64_t sub_1D0CB20C0(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 0);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  int16x8_t v13 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 2);
  int16x8_t v14 = vdupq_laneq_s16(v10, 5);
  int16x8_t v15 = vdupq_laneq_s16(v10, 6);
  int16x8_t v16 = vdupq_laneq_s16(v10, 7);
  int16x8_t v17 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 3);
  int16x8_t v18 = vdupq_laneq_s16(v10, 4);
  int v19 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v20 = a7;
    _X15 = v19;
    int v22 = a2 + 1;
    do
    {
      int16x8_t v23 = (int16x8_t)vshrq_n_u16(*_X15, 6uLL);
      int8x16_t v24 = (int8x16_t)vshrq_n_u16(_X15[1], 6uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 2uLL);
      int16x8_t v32 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 4uLL);
      int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 6uLL);
      int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 8uLL);
      int16x8_t v35 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xAuLL);
      int16x8_t v36 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xCuLL);
      int16x8_t v37 = vmulq_s16(v23, v11);
      int16x8_t v38 = (int16x8_t)vextq_s8((int8x16_t)v23, v24, 0xEuLL);
      uint16x8_t v39 = (uint16x8_t)vmulq_s16(v33, v17);
      int16x8_t v40 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v37, v31, v12), v32, v13), v35, v14), v36, v15), v38, v16);
      uint16x8_t v41 = (uint16x8_t)vmulq_s16(v34, v18);
      int32x4_t v42 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v39.i8);
      int32x4_t v43 = (int32x4_t)vaddl_high_u16(v39, v41);
      *(uint16x4_t *)v39.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16(v42, *(int16x4_t *)v40.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v39.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16(v43, v40), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v20 = v39;
      --v22;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v20 = (_OWORD *)((char *)v20 + v9);
    }
    while (v22 > 1);
    a7 += 2;
    a5 += 16;
    int v46 = result - 8;
    ++v19;
    BOOL v47 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v47);
  if (v46)
  {
LABEL_9:
    int16x8_t v48 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v50 = a2 + 1;
    do
    {
      int16x4_t v51 = (int16x4_t)vshr_n_u16(*_X11, 6uLL);
      int16x4_t v52 = (int16x4_t)vshr_n_u16(_X11[1], 6uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v54 = (int8x8_t)vshr_n_u16(_X11[2], 6uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 2uLL), *(int16x4_t *)v48.i8, 1), v51, *(int16x4_t *)v48.i8, 0), (int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 4uLL), *(int16x4_t *)v48.i8, 2), (int16x4_t)vext_s8((int8x8_t)v51, (int8x8_t)v52, 6uLL),
                                      *(int16x4_t *)v48.i8,
                                      3),
                                    v52,
                                    v48,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v52, v54, 2uLL),
                                  v48,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v52, v54, 4uLL),
                                v48,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v52, v54, 6uLL),
                              v48,
                              7),
                            6uLL),
              (uint16x4_t)0xFC00FC00FC00FC00);
      --v50;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v50 > 1);
  }
  return result;
}

double sub_1D0CB2278(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, void *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1) {
      return *(double *)v14.i64;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  int16x8_t v10 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = a2 + 2;
    do
    {
      uint16x8_t v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 6uLL);
      uint16x8_t v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 6uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    BOOL v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 6uLL);
      uint16x4_t v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 6uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (void *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1D0CB2338(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, void *a11)
{
  int16x8_t v12 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v11 = a4 + 1;
  int v13 = a11;
  int16x8_t v15 = (int16x8_t)vld1q_dup_f32(a7);
  uint16x8_t v14 = a7 + 1;
  int16x4_t v16 = (int16x4_t)vld1_dup_f32(v11);
  int16x4_t v17 = (int16x4_t)vld1_dup_f32(v14);
  int v18 = a9;
  int32x4_t v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  uint64_t v20 = 4 * a8;
  int32x4_t v21 = vdupq_n_s32(~a3);
  uint64_t v22 = 4 * a5;
  uint64_t v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int8x16_t v24 = (char *)a9 + 2 * a8;
  int16x8_t v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xF800F800F800F800;
  v26.i64[1] = 0xF800F800F800F800;
  uint16x8_t v27 = (char *)a11 + 2 * a10;
  do
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = a2 + 2;
    do
    {
      int16x8_t v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    int v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    BOOL v34 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    int16x4_t v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    int16x4_t v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    int v37 = a2 + 2;
    v38.i64[0] = 0xF800F800F800F800;
    v38.i64[1] = 0xF800F800F800F800;
    do
    {
      int16x8_t v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *int v13 = v39.i64[0];
      v37 -= 2;
      *(void *)((char *)v13 + 2 * a10) = v39.i64[1];
      int v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      int v13 = (void *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

uint64_t sub_1D0CB2504(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, void *a8)
{
  int16x8_t v9 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v8 = a4 + 1;
  int16x4_t v10 = (int16x4_t)vld1_dup_f32(v8);
  int32x4_t v11 = vdupq_n_s32(a3);
  int32x4_t v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  int32x4_t v13 = vnegq_s32(v11);
  uint64_t v14 = 4 * a5;
  uint64_t v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int16x4_t v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xF800F800F800F800;
  v17.i64[1] = 0xF800F800F800F800;
  int v18 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = a2 + 2;
    do
    {
      uint16x8_t v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    int v23 = result - 8;
    v16 += 16;
    v18 += 16;
    BOOL v24 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    int16x4_t v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    int v26 = a2 + 2;
    v27.i64[0] = 0xF800F800F800F800;
    v27.i64[1] = 0xF800F800F800F800;
    do
    {
      uint16x8_t v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(void *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (void *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1D0CB2650(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, void *a8)
{
  uint64_t v8 = 4 * a5;
  uint64_t v9 = 4 * a3;
  uint64_t v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int32x4_t v11 = (char *)a6 + 2 * a5;
  int32x4_t v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xF800F800F800F800;
  v14.i64[1] = 0xF800F800F800F800;
  uint64_t v15 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 2uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 2uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    int v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    BOOL v21 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    int v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xF800F800F800F800;
    v24.i64[1] = 0xF800F800F800F800;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      int16x8_t v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 2uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(void *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (void *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1D0CB2798(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v16 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  uint64_t v14 = v8 - 6;
  uint64_t v15 = 8 * a4;
  uint64_t v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    int16x8_t v18 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v19 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    int16x8_t v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    int16x8_t v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            3uLL);
    int16x8_t v37 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v38 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    int16x8_t v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    int16x8_t v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            3uLL);
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v53 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    int16x8_t v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    int16x8_t v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    int16x8_t v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            3uLL);
    int16x8_t v67 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v68 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    int16x8_t v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    int16x8_t v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    int16x8_t v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    int16x8_t v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            3uLL);
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    int16x8_t v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    int16x8_t v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            3uLL);
    int16x8_t v97 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v98 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    int16x8_t v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    int16x8_t v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    int16x8_t v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    int16x8_t v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    int16x8_t v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               3uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             3uLL);
    int16x8_t v112 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v113 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    int16x8_t v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    int16x8_t v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    int16x8_t v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    int16x8_t v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    uint64_t v125 = (int16x8_t *)a7;
    uint64_t v126 = a5;
    int v127 = a2 + 1;
    int16x8_t v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               3uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             3uLL);
    do
    {
      v129.i64[0] = 0x38000000380000;
      v129.i64[1] = 0x38000000380000;
      v130.i64[0] = 0x38000000380000;
      v130.i64[1] = 0x38000000380000;
      int32x4_t v131 = vmlal_lane_s16(vmlal_lane_s16(v129, *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1);
      int32x4_t v132 = vmlal_high_lane_s16(vmlal_high_lane_s16(v130, v36, *(int16x4_t *)v13.i8, 0), v51, *(int16x4_t *)v13.i8, 1);
      int16x8_t v36 = v51;
      int16x8_t v51 = v66;
      int16x8_t v66 = v81;
      int16x8_t v81 = v96;
      _X22 = v126 + v15;
      int16x8_t v96 = v111;
      int16x8_t v134 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 5uLL);
      int8x16_t v135 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 5uLL);
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      int16x8_t v111 = v128;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int16x8_t v140 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 2uLL);
      int16x8_t v141 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 4uLL);
      int16x8_t v142 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 6uLL);
      int16x8_t v143 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 8uLL);
      int32x4_t v144 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v12.i8, 1), v134, *(int16x4_t *)v12.i8, 0);
      int32x4_t v145 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v141.i8, *(int16x4_t *)v12.i8, 2);
      int16x8_t v146 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xAuLL);
      int32x4_t v147 = vmlal_high_lane_s16(v144, v141, *(int16x4_t *)v12.i8, 2);
      int16x8_t v148 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xCuLL);
      int16x8_t v149 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xEuLL);
      int32x4_t v150 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v147, v142, *(int16x4_t *)v12.i8, 3), v143, v12, 4), v146, v12, 5), v148, v12, 6), v149, v12, 7);
      *(int16x4_t *)v146.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v145, *(int16x4_t *)v142.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v143.i8, v12, 4), *(int16x4_t *)v146.i8, v12, 5), *(int16x4_t *)v148.i8, v12, 6), *(int16x4_t *)v149.i8, v12, 7), 3uLL);
      *(int16x4_t *)v131.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v131, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13, 5), *(int16x4_t *)v111.i8, v13, 6), *(int16x4_t *)v146.i8,
                                  v13,
                                  7),
                                6uLL);
      int16x8_t v128 = vshrn_high_n_s32(*(int16x4_t *)v146.i8, v150, 3uLL);
      *uint64_t v125 = vshrn_high_n_s32(*(int16x4_t *)v131.i8, vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v132, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                  vshrn_n_s32(v150, 3uLL),
                  v13,
                  7),
                6uLL);
      --v127;
      v126 += v9;
      uint64_t v125 = (int16x8_t *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    int v151 = result - 8;
    v14 += 16;
    v15 += 16;
    BOOL v152 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v152);
  if (v151)
  {
LABEL_9:
    int16x8_t v153 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v154 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    uint16x4_t v156 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v157 = (int16x4_t)vshr_n_u16(v156, 5uLL);
    int16x4_t v158 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v159 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v165 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v153.i8, 1), v157, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v158,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v153,
               7),
             3uLL);
    int16x4_t v166 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v167 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v168 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v174 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v153.i8, 1), v166, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v167,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v153,
               7),
             3uLL);
    int16x4_t v175 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v176 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v177 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v183 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v153.i8, 1), v175, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v176,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v153,
               7),
             3uLL);
    int16x4_t v184 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v185 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v186 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v192 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v153.i8, 1), v184, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v185,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v153,
               7),
             3uLL);
    int16x4_t v193 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v194 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v195 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v201 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v153.i8, 1), v193, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v194,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v153,
               7),
             3uLL);
    int16x4_t v202 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v203 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v204 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v210 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v153.i8, 1), v202, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v203,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v153,
               7),
             3uLL);
    int16x4_t v211 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v212 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v213 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v153.i8, 1), v211, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v212,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v153,
               7),
             3uLL);
    int v219 = a2 + 1;
    uint64_t v220 = v8 - 6;
    do
    {
      v221.i64[0] = 0x38000000380000;
      v221.i64[1] = 0x38000000380000;
      int32x4_t v222 = vmlal_lane_s16(v221, v165, *(int16x4_t *)v154.i8, 0);
      _X14 = v16 + v10;
      int16x4_t v224 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 5uLL);
      int16x4_t v225 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 5uLL);
      int8x8_t v226 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 5uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v231 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 2uLL), *(int16x4_t *)v153.i8, 1), v224, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 6uLL), *(int16x4_t *)v153.i8, 3),
                     v225,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v225, v226, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v225, v226, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v225, v226, 6uLL),
               v153,
               7);
      int32x4_t v232 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v174, *(int16x4_t *)v154.i8, 1), v183, *(int16x4_t *)v154.i8, 2), v192, *(int16x4_t *)v154.i8, 3), v201, v154, 4), v210, v154, 5), v218, v154,
               6);
      int16x4_t v165 = v174;
      int16x4_t v174 = v183;
      int16x4_t v183 = v192;
      int16x4_t v192 = v201;
      int16x4_t v201 = v210;
      int16x4_t v210 = v218;
      int16x4_t v218 = vshrn_n_s32(v231, 3uLL);
      --v219;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v232, v218, v154, 7), 6uLL);
      v16 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

unint64_t sub_1D0CB3084(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v15 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int v10 = a2 + 2;
  uint64_t v11 = 4 * a6;
  int16x8_t v12 = &a5->i8[20 * a4];
  int16x8_t v13 = &a5->i8[18 * a4];
  uint64_t v14 = &a5->i8[10 * a4];
  uint64_t v15 = a7;
  uint64_t v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    uint16x8_t v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v22 = (int16x8_t)vshrq_n_u16(v19, 5uLL);
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v21, 5uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v30 = v29;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v33 = v32;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    int16x8_t v41 = (int16x8_t)vshrq_n_u16(v26, 5uLL);
    int16x8_t v42 = (int16x8_t)vshrq_n_u16(*a5, 5uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(v30, 5uLL);
    int16x8_t v44 = (int16x8_t)vshrq_n_u16(v33, 5uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v47 = (int16x8_t)vshrq_n_u16(v35, 5uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int16x8_t v50 = v14;
    int16x8_t v51 = v13;
    int16x8_t v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int16x8_t v55 = v12;
    int v56 = v10;
    int8x16_t v57 = a7;
    uint16x8_t v58 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      int16x8_t v22 = v41;
      int32x4_t v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      int32x4_t v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      int16x8_t v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      int16x8_t v43 = v47;
      int32x4_t v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      int32x4_t v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      int32x4_t v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      int16x8_t v23 = v42;
      int16x8_t v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 5uLL);
      __asm { PRFM            #0, [X9] }
      int16x8_t v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 5uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(int16x4_t *)v67.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      v67.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v68.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 3uLL),
                               (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 3uLL),
                                       (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v58[v7] = v68;
      int8x16_t v57 = (int16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    int v79 = result - 8;
    v7 += 16;
    BOOL v80 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    int16x8_t v81 = xmmword_1D0D7FBF0[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v83 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v84 = (int16x4_t)vshr_n_u16(v83, 5uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v86 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v87 = (int16x4_t)vshr_n_u16(v86, 5uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v89 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v90 = (int16x4_t)vshr_n_u16(v89, 5uLL);
    _X12 = &a5->i8[14];
    int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 5uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v94 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v95 = (int16x4_t)vshr_n_u16(v94, 5uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 5uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 5uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v109 = a2 + 4;
    uint64_t v110 = 3 * a4;
    uint64_t v111 = 8 * a4;
    uint64_t v112 = 22 * a4;
    uint64_t v113 = 12 * a4;
    uint64_t v114 = 10 * a4;
    uint64_t v115 = 2 * a6;
    uint64_t v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      __n128 result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v123 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v124 = v123;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v126 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v127 = v126;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v129 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      int32x4_t v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      int32x4_t v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      int32x4_t v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 5uLL);
      int32x4_t v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      int32x4_t v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      int32x4_t v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      int16x4_t v84 = v95;
      int16x4_t v95 = (int16x4_t)vshr_n_u16(v124, 5uLL);
      int32x4_t v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      int32x4_t v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      int32x4_t v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      int32x4_t v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      int16x4_t v87 = v98;
      int16x4_t v98 = (int16x4_t)vshr_n_u16(v127, 5uLL);
      int32x4_t v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      int32x4_t v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      int32x4_t v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      int32x4_t v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      int16x4_t v90 = v101;
      int16x4_t v101 = (int16x4_t)vshr_n_u16(v129, 5uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v15 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      int32x4_t v150 = (int16x4_t *)((char *)v15 + v115);
      *int32x4_t v150 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      int v151 = (int16x4_t *)((char *)v150 + v115);
      *int v151 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      BOOL v152 = (int16x4_t *)((char *)v151 + v115);
      *BOOL v152 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 3uLL), (int16x4_t)0xE000E000E000E000);
      v109 -= 4;
      uint64_t v15 = (int16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1D0CB3500(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  uint64_t v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 5uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 5uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      int32x4_t v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10, 5), *(int16x4_t *)v28.i8, v10, 6),
                                   *(int16x4_t *)v29.i8,
                                   v10,
                                   7),
                                 3uLL),
                               (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v31, 3uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    int v34 = result - 8;
    ++v11;
    BOOL v35 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    int16x8_t v36 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v38 = a2 + 1;
    do
    {
      int16x4_t v39 = (int16x4_t)vshr_n_u16(*_X11, 5uLL);
      int16x4_t v40 = (int16x4_t)vshr_n_u16(_X11[1], 5uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v42 = (int8x8_t)vshr_n_u16(_X11[2], 5uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                          *(int16x4_t *)v36.i8,
                          3),
                        v40,
                        v36,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                      v36,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                    v36,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                  v36,
                  7),
                3uLL),
              (int16x4_t)0xE000E000E000E000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

uint64_t sub_1D0CB36A8(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  uint64_t v11 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = a2 + 2;
    do
    {
      uint16x8_t v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFF8FFF8FFF8FFF8, 0xFFF8FFF8FFF8FFF8)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFF8FFF8FFF8FFF8, 0xFFF8FFF8FFF8FFF8)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = result - 8;
    v9 += 16;
    v11 += 16;
    BOOL v17 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      uint16x4_t v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(*a5, 2uLL) & 0xFFF8FFF8FFF8FFF8), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(v19, 2uLL) & 0xFFF8FFF8FFF8FFF8), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1D0CB3790(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v16 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  uint64_t v14 = v8 - 6;
  uint64_t v15 = 8 * a4;
  uint64_t v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    int16x8_t v18 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v19 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    int16x8_t v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    int16x8_t v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            3uLL);
    int16x8_t v37 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v38 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    int16x8_t v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    int16x8_t v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            3uLL);
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v53 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    int16x8_t v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    int16x8_t v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    int16x8_t v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            3uLL);
    int16x8_t v67 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v68 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    int16x8_t v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    int16x8_t v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    int16x8_t v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    int16x8_t v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            3uLL);
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    int16x8_t v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    int16x8_t v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              3uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            3uLL);
    int16x8_t v97 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v98 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    int16x8_t v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    int16x8_t v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    int16x8_t v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    int16x8_t v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    int16x8_t v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               3uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             3uLL);
    int16x8_t v112 = (int16x8_t)vshrq_n_u16(*_X19, 5uLL);
    int8x16_t v113 = (int8x16_t)vshrq_n_u16(_X19[1], 5uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    int16x8_t v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    int16x8_t v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    int16x8_t v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    int16x8_t v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    uint64_t v125 = a7;
    uint64_t v126 = a5;
    int v127 = a2 + 1;
    int16x8_t v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               3uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             3uLL);
    do
    {
      _X22 = v126 + v15;
      int16x8_t v130 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 5uLL);
      int8x16_t v131 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 5uLL);
      int16x8_t v132 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 2uLL);
      int16x8_t v133 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 4uLL);
      int16x8_t v134 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 6uLL);
      int16x8_t v135 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 8uLL);
      int16x8_t v136 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xAuLL);
      int16x8_t v137 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xCuLL);
      int16x8_t v138 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xEuLL);
      int32x4_t v139 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v130.i8, *(int16x4_t *)v12.i8, 0);
      int32x4_t v140 = vmlal_high_lane_s16(vmull_high_lane_s16(v132, *(int16x4_t *)v12.i8, 1), v130, *(int16x4_t *)v12.i8, 0);
      int32x4_t v141 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0);
      int32x4_t v142 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, *(int16x4_t *)v13.i8, 1), v36, *(int16x4_t *)v13.i8, 0);
      int16x8_t v36 = v51;
      int16x8_t v51 = v66;
      int16x8_t v66 = v81;
      int16x8_t v81 = v96;
      int16x8_t v96 = v111;
      int16x8_t v111 = v128;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int32x4_t v147 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v140, v133, *(int16x4_t *)v12.i8, 2), v134, *(int16x4_t *)v12.i8, 3), v135, v12, 4), v136, v12, 5), v137, v12, 6), v138, v12,
               7);
      int16x4_t v148 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v139, *(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v135.i8, v12, 4), *(int16x4_t *)v136.i8, v12, 5), *(int16x4_t *)v137.i8, v12, 6), *(int16x4_t *)v138.i8,
                 v12,
                 7),
               3uLL);
      *(uint16x4_t *)v133.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v141, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v111.i8,
                                                   v13,
                                                   6),
                                                 v148,
                                                 v13,
                                                 7),
                                               9uLL),
                                 (uint16x4_t)0xF800F800F800F800);
      v133.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v142, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                                                        vshrn_n_s32(v147, 3uLL),
                                                        v13,
                                                        7),
                                                      9uLL),
                                        (uint16x4_t)0xF800F800F800F800);
      int16x8_t v128 = vshrn_high_n_s32(v148, v147, 3uLL);
      *uint64_t v125 = v133;
      --v127;
      v126 += v9;
      uint64_t v125 = (_OWORD *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    int v149 = result - 8;
    v14 += 16;
    v15 += 16;
    BOOL v150 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v150);
  if (v149)
  {
LABEL_9:
    int16x8_t v151 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v152 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    uint16x4_t v154 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v155 = (int16x4_t)vshr_n_u16(v154, 5uLL);
    int16x4_t v156 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v157 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v163 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 2uLL), *(int16x4_t *)v151.i8, 1), v155, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v156,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v156, v157, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v156, v157, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v156, v157, 6uLL),
               v151,
               7),
             3uLL);
    int16x4_t v164 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v165 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v166 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v172 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 2uLL), *(int16x4_t *)v151.i8, 1), v164, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v165,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v165, v166, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v165, v166, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v165, v166, 6uLL),
               v151,
               7),
             3uLL);
    int16x4_t v173 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v174 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v175 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v181 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 2uLL), *(int16x4_t *)v151.i8, 1), v173, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v174,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v174, v175, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v174, v175, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v174, v175, 6uLL),
               v151,
               7),
             3uLL);
    int16x4_t v182 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v183 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v184 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v190 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 2uLL), *(int16x4_t *)v151.i8, 1), v182, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v183,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v183, v184, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v183, v184, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v183, v184, 6uLL),
               v151,
               7),
             3uLL);
    int16x4_t v191 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v192 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v193 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v199 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 2uLL), *(int16x4_t *)v151.i8, 1), v191, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v192,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v192, v193, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v192, v193, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v192, v193, 6uLL),
               v151,
               7),
             3uLL);
    int16x4_t v200 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v201 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v202 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v208 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 2uLL), *(int16x4_t *)v151.i8, 1), v200, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v201,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v201, v202, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v201, v202, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v201, v202, 6uLL),
               v151,
               7),
             3uLL);
    int16x4_t v209 = (int16x4_t)vshr_n_u16(*_X13, 5uLL);
    int16x4_t v210 = (int16x4_t)vshr_n_u16(_X13[1], 5uLL);
    int8x8_t v211 = (int8x8_t)vshr_n_u16(_X13[2], 5uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v216 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 2uLL), *(int16x4_t *)v151.i8, 1), v209, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v210,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v210, v211, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v210, v211, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v210, v211, 6uLL),
               v151,
               7),
             3uLL);
    int v217 = a2 + 1;
    uint64_t v218 = v8 - 6;
    do
    {
      _X14 = v16 + v10;
      int16x4_t v220 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 5uLL);
      int16x4_t v221 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 5uLL);
      int8x8_t v222 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 5uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v218;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v227 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 2uLL), *(int16x4_t *)v151.i8, 1), v220, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 6uLL), *(int16x4_t *)v151.i8, 3),
                     v221,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v221, v222, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v221, v222, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v221, v222, 6uLL),
               v151,
               7);
      int32x4_t v228 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v172, *(int16x4_t *)v152.i8, 1), v163, *(int16x4_t *)v152.i8, 0), v181, *(int16x4_t *)v152.i8, 2), v190, *(int16x4_t *)v152.i8, 3), v199, v152, 4), v208, v152, 5), v216, v152,
               6);
      int16x4_t v163 = v172;
      int16x4_t v172 = v181;
      int16x4_t v181 = v190;
      int16x4_t v190 = v199;
      int16x4_t v199 = v208;
      int16x4_t v208 = v216;
      int16x4_t v216 = vshrn_n_s32(v227, 3uLL);
      --v217;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v228, v216, v152, 7), 9uLL), (uint16x4_t)0xF800F800F800F800);
      v16 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v217 > 1);
  }
  return result;
}

unint64_t sub_1D0CB4088(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v15 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int v10 = a2 + 2;
  uint64_t v11 = 4 * a6;
  int16x8_t v12 = &a5->i8[20 * a4];
  int16x8_t v13 = &a5->i8[18 * a4];
  uint64_t v14 = &a5->i8[10 * a4];
  uint64_t v15 = a7;
  uint64_t v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    uint16x8_t v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v22 = (int16x8_t)vshrq_n_u16(v19, 5uLL);
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v21, 5uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v30 = v29;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v33 = v32;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    int16x8_t v41 = (int16x8_t)vshrq_n_u16(v26, 5uLL);
    int16x8_t v42 = (int16x8_t)vshrq_n_u16(*a5, 5uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(v30, 5uLL);
    int16x8_t v44 = (int16x8_t)vshrq_n_u16(v33, 5uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v47 = (int16x8_t)vshrq_n_u16(v35, 5uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int16x8_t v50 = v14;
    int16x8_t v51 = v13;
    int16x8_t v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int16x8_t v55 = v12;
    int v56 = v10;
    int8x16_t v57 = a7;
    uint16x8_t v58 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      int16x8_t v22 = v41;
      int32x4_t v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      int32x4_t v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      int16x8_t v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      int16x8_t v43 = v47;
      int32x4_t v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      int32x4_t v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      int32x4_t v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      int16x8_t v23 = v42;
      int16x8_t v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 5uLL);
      __asm { PRFM            #0, [X9] }
      int16x8_t v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 5uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      *(uint16x4_t *)v68.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 6uLL),
                                (uint16x4_t)0xF800F800F800F800);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 6uLL),
                                       (uint16x4_t)0xF800F800F800F800);
      *(int32x4_t *)&v58[v7] = v68;
      int8x16_t v57 = (uint16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    int v79 = result - 8;
    v7 += 16;
    BOOL v80 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    int16x8_t v81 = xmmword_1D0D7FBF0[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v83 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v84 = (int16x4_t)vshr_n_u16(v83, 5uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v86 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v87 = (int16x4_t)vshr_n_u16(v86, 5uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v89 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v90 = (int16x4_t)vshr_n_u16(v89, 5uLL);
    _X12 = &a5->i8[14];
    int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 5uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v94 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v95 = (int16x4_t)vshr_n_u16(v94, 5uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 5uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 5uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v109 = a2 + 4;
    uint64_t v110 = 3 * a4;
    uint64_t v111 = 8 * a4;
    uint64_t v112 = 22 * a4;
    uint64_t v113 = 12 * a4;
    uint64_t v114 = 10 * a4;
    uint64_t v115 = 2 * a6;
    uint64_t v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      __n128 result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v123 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v124 = v123;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v126 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v127 = v126;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v129 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      int32x4_t v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      int32x4_t v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      int32x4_t v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 5uLL);
      int32x4_t v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      int32x4_t v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      int32x4_t v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      int16x4_t v84 = v95;
      int16x4_t v95 = (int16x4_t)vshr_n_u16(v124, 5uLL);
      int32x4_t v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      int32x4_t v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      int32x4_t v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      int32x4_t v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      int16x4_t v87 = v98;
      int16x4_t v98 = (int16x4_t)vshr_n_u16(v127, 5uLL);
      int32x4_t v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      int32x4_t v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      int32x4_t v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      int32x4_t v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      int16x4_t v90 = v101;
      int16x4_t v101 = (int16x4_t)vshr_n_u16(v129, 5uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v15 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      BOOL v150 = (uint16x4_t *)((char *)v15 + v115);
      *BOOL v150 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      int16x8_t v151 = (uint16x4_t *)((char *)v150 + v115);
      *int16x8_t v151 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      int16x8_t v152 = (uint16x4_t *)((char *)v151 + v115);
      *int16x8_t v152 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v109 -= 4;
      uint64_t v15 = (uint16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1D0CB4504(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  uint64_t v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 5uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 5uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      int32x4_t v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10,
                                                    5),
                                                  *(int16x4_t *)v28.i8,
                                                  v10,
                                                  6),
                                                *(int16x4_t *)v29.i8,
                                                v10,
                                                7),
                                              6uLL),
                                (uint16x4_t)0xF800F800F800F800);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v31, 6uLL), (uint16x4_t)0xF800F800F800F800);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    int v34 = result - 8;
    ++v11;
    BOOL v35 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    int16x8_t v36 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v38 = a2 + 1;
    do
    {
      int16x4_t v39 = (int16x4_t)vshr_n_u16(*_X11, 5uLL);
      int16x4_t v40 = (int16x4_t)vshr_n_u16(_X11[1], 5uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v42 = (int8x8_t)vshr_n_u16(_X11[2], 5uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                                      *(int16x4_t *)v36.i8,
                                      3),
                                    v40,
                                    v36,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                                  v36,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                                v36,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                              v36,
                              7),
                            6uLL),
              (uint16x4_t)0xF800F800F800F800);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

double sub_1D0CB46AC(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, void *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1) {
      return *(double *)v14.i64;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  int16x8_t v10 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = a2 + 2;
    do
    {
      uint16x8_t v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 5uLL);
      uint16x8_t v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 5uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    BOOL v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 5uLL);
      uint16x4_t v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 5uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (void *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1D0CB476C(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, const float *a7, uint64_t a8, int16x4_t *a9, uint64_t a10, void *a11)
{
  int16x8_t v12 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v11 = a4 + 1;
  int v13 = a11;
  int16x8_t v15 = (int16x8_t)vld1q_dup_f32(a7);
  uint16x8_t v14 = a7 + 1;
  int16x4_t v16 = (int16x4_t)vld1_dup_f32(v11);
  int16x4_t v17 = (int16x4_t)vld1_dup_f32(v14);
  int v18 = a9;
  int32x4_t v19 = vaddq_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v12.i8), 0xDuLL), vshlq_s32(vaddl_s16(v17, v16), vdupq_n_s32(a3)));
  uint64_t v20 = 4 * a8;
  int32x4_t v21 = vdupq_n_s32(~a3);
  uint64_t v22 = 4 * a5;
  uint64_t v23 = 4 * a10;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int16x8_t v24 = (char *)a9 + 2 * a8;
  int16x8_t v25 = (char *)a6 + 2 * a5;
  v26.i64[0] = 0xF000F000F000F000;
  v26.i64[1] = 0xF000F000F000F000;
  int16x8_t v27 = (char *)a11 + 2 * a10;
  do
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = a2 + 2;
    do
    {
      int16x8_t v32 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)&v25[v29], *(int16x4_t *)v12.i8), *(int16x4_t *)&v24[v30], *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&v25[v29], v12), *(int16x8_t *)&v24[v30], v15), v21)), (int16x8_t)0), v26);
      *(int16x8_t *)((char *)v13 + v28) = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + v29), *(int16x4_t *)v12.i8), *(int16x4_t *)((char *)v18 + v30), *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_high_s16(vmlal_high_s16(v19, *(int16x8_t *)&a6->i8[v29], v12), *(int16x8_t *)&v18->i8[v30], v15), v21)), (int16x8_t)0),
                                            v26);
      *(int16x8_t *)&v27[v28] = v32;
      v31 -= 2;
      v30 += v20;
      v29 += v22;
      v28 += v23;
    }
    while (v31 > 2);
    v13 += 2;
    a6 += 2;
    v18 += 2;
    int v33 = result - 8;
    v24 += 16;
    v25 += 16;
    v27 += 16;
    BOOL v34 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v34);
  if (v33)
  {
LABEL_10:
    int16x4_t v35 = (int16x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    int16x4_t v36 = (int16x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    int v37 = a2 + 2;
    v38.i64[0] = 0xF000F000F000F000;
    v38.i64[1] = 0xF000F000F000F000;
    do
    {
      int16x8_t v39 = vminq_s16(vmaxq_s16(vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v19, *a6, *(int16x4_t *)v12.i8), *v18, *(int16x4_t *)v15.i8), v21)), vrshlq_s32(vmlal_s16(vmlal_s16(v19, *(int16x4_t *)((char *)a6 + 2 * a5), v35), *(int16x4_t *)((char *)v18 + 2 * a8), v36), v21)), (int16x8_t)0), v38);
      *int v13 = v39.i64[0];
      v37 -= 2;
      *(void *)((char *)v13 + 2 * a10) = v39.i64[1];
      int v18 = (int16x4_t *)((char *)v18 + v20);
      a6 = (int16x4_t *)((char *)a6 + v22);
      int v13 = (void *)((char *)v13 + v23);
    }
    while (v37 > 2);
  }
  return result;
}

uint64_t sub_1D0CB4938(uint64_t result, int a2, unsigned int a3, const float *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, void *a8)
{
  int16x8_t v9 = (int16x8_t)vld1q_dup_f32(a4);
  uint64_t v8 = a4 + 1;
  int16x4_t v10 = (int16x4_t)vld1_dup_f32(v8);
  int32x4_t v11 = vdupq_n_s32(a3);
  int32x4_t v12 = vmlal_s16(vshlq_s32(vmovl_s16(v10), v11), *(int16x4_t *)v9.i8, (int16x4_t)0x2000200020002000);
  int32x4_t v13 = vnegq_s32(v11);
  uint64_t v14 = 4 * a5;
  uint64_t v15 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int16x4_t v16 = (char *)a6 + 2 * a5;
  v17.i64[0] = 0xF000F000F000F000;
  v17.i64[1] = 0xF000F000F000F000;
  int v18 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = a2 + 2;
    do
    {
      uint16x8_t v22 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)&v16[v20], *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&v16[v20], v9), v13)), v17);
      *(uint16x8_t *)((char *)a8 + v19) = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + v20), *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_high_s16(v12, *(int16x8_t *)&a6->i8[v20], v9), v13)), v17);
      *(uint16x8_t *)&v18[v19] = v22;
      v21 -= 2;
      v20 += v14;
      v19 += v15;
    }
    while (v21 > 2);
    a8 += 2;
    a6 += 2;
    int v23 = result - 8;
    v16 += 16;
    v18 += 16;
    BOOL v24 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v24);
  if (v23)
  {
LABEL_10:
    int16x4_t v25 = (int16x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    int v26 = a2 + 2;
    v27.i64[0] = 0xF000F000F000F000;
    v27.i64[1] = 0xF000F000F000F000;
    do
    {
      uint16x8_t v28 = vminq_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vrshlq_s32(vmlal_s16(v12, *a6, *(int16x4_t *)v9.i8), v13)), vrshlq_s32(vmlal_s16(v12, *(int16x4_t *)((char *)a6 + 2 * a5), v25), v13)), v27);
      *a8 = v28.i64[0];
      *(void *)((char *)a8 + 2 * a7) = v28.i64[1];
      v26 -= 2;
      a6 = (int16x4_t *)((char *)a6 + v14);
      a8 = (void *)((char *)a8 + v15);
    }
    while (v26 > 2);
  }
  return result;
}

uint64_t sub_1D0CB4A84(uint64_t result, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, void *a8)
{
  uint64_t v8 = 4 * a5;
  uint64_t v9 = 4 * a3;
  uint64_t v10 = 4 * a7;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  int32x4_t v11 = (char *)a6 + 2 * a5;
  int32x4_t v12 = (char *)a4 + 2 * a3;
  v13.i64[0] = 0x2000200020002000;
  v13.i64[1] = 0x2000200020002000;
  v14.i64[0] = 0xF000F000F000F000;
  v14.i64[1] = 0xF000F000F000F000;
  uint64_t v15 = (char *)a8 + 2 * a7;
  do
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = a2 + 2;
    do
    {
      *(int16x8_t *)((char *)a8 + v16) = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)((char *)a4 + v17), *(int16x8_t *)((char *)a6 + v18)), v13), 1uLL), (int16x8_t)0), v14);
      *(int16x8_t *)&v15[v16] = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(*(int16x8_t *)&v12[v17], *(int16x8_t *)&v11[v18]), v13), 1uLL), (int16x8_t)0), v14);
      v19 -= 2;
      v18 += v8;
      v17 += v9;
      v16 += v10;
    }
    while (v19 > 2);
    a8 += 2;
    a4 += 2;
    a6 += 2;
    int v20 = result - 8;
    v11 += 16;
    v12 += 16;
    v15 += 16;
    BOOL v21 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v21);
  if (v20)
  {
LABEL_10:
    int v22 = a2 + 2;
    v23.i64[0] = 0x2000200020002000;
    v23.i64[1] = 0x2000200020002000;
    v24.i64[0] = 0xF000F000F000F000;
    v24.i64[1] = 0xF000F000F000F000;
    do
    {
      v25.i64[0] = *a4;
      v25.i64[1] = *(uint64_t *)((char *)a4 + 2 * a3);
      v26.i64[0] = *a6;
      v26.i64[1] = *(uint64_t *)((char *)a6 + 2 * a5);
      int16x8_t v27 = vminq_s16(vmaxq_s16(vrshrq_n_s16(vhaddq_s16(vhaddq_s16(v25, v26), v23), 1uLL), (int16x8_t)0), v24);
      *a8 = v27.i64[0];
      v22 -= 2;
      *(void *)((char *)a8 + 2 * a7) = v27.i64[1];
      a6 = (uint64_t *)((char *)a6 + v8);
      a4 = (uint64_t *)((char *)a4 + v9);
      a8 = (void *)((char *)a8 + v10);
    }
    while (v22 > 2);
  }
  return result;
}

uint64_t sub_1D0CB4BCC(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v16 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  uint64_t v14 = v8 - 6;
  uint64_t v15 = 8 * a4;
  uint64_t v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    int16x8_t v18 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v19 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    int16x8_t v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    int16x8_t v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            4uLL);
    int16x8_t v37 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v38 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    int16x8_t v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    int16x8_t v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            4uLL);
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v53 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    int16x8_t v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    int16x8_t v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    int16x8_t v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            4uLL);
    int16x8_t v67 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v68 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    int16x8_t v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    int16x8_t v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    int16x8_t v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    int16x8_t v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            4uLL);
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    int16x8_t v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    int16x8_t v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            4uLL);
    int16x8_t v97 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v98 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    int16x8_t v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    int16x8_t v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    int16x8_t v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    int16x8_t v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    int16x8_t v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               4uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             4uLL);
    int16x8_t v112 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v113 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    int16x8_t v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    int16x8_t v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    int16x8_t v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    int16x8_t v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    uint64_t v125 = (int16x8_t *)a7;
    uint64_t v126 = a5;
    int v127 = a2 + 1;
    int16x8_t v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               4uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             4uLL);
    do
    {
      v129.i64[0] = 0x38000000380000;
      v129.i64[1] = 0x38000000380000;
      v130.i64[0] = 0x38000000380000;
      v130.i64[1] = 0x38000000380000;
      int32x4_t v131 = vmlal_lane_s16(vmlal_lane_s16(v129, *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1);
      int32x4_t v132 = vmlal_high_lane_s16(vmlal_high_lane_s16(v130, v36, *(int16x4_t *)v13.i8, 0), v51, *(int16x4_t *)v13.i8, 1);
      int16x8_t v36 = v51;
      int16x8_t v51 = v66;
      int16x8_t v66 = v81;
      int16x8_t v81 = v96;
      _X22 = v126 + v15;
      int16x8_t v96 = v111;
      int16x8_t v134 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 4uLL);
      int8x16_t v135 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 4uLL);
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      int16x8_t v111 = v128;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int16x8_t v140 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 2uLL);
      int16x8_t v141 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 4uLL);
      int16x8_t v142 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 6uLL);
      int16x8_t v143 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 8uLL);
      int32x4_t v144 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v12.i8, 1), v134, *(int16x4_t *)v12.i8, 0);
      int32x4_t v145 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v141.i8, *(int16x4_t *)v12.i8, 2);
      int16x8_t v146 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xAuLL);
      int32x4_t v147 = vmlal_high_lane_s16(v144, v141, *(int16x4_t *)v12.i8, 2);
      int16x8_t v148 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xCuLL);
      int16x8_t v149 = (int16x8_t)vextq_s8((int8x16_t)v134, v135, 0xEuLL);
      int32x4_t v150 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v147, v142, *(int16x4_t *)v12.i8, 3), v143, v12, 4), v146, v12, 5), v148, v12, 6), v149, v12, 7);
      *(int16x4_t *)v146.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v145, *(int16x4_t *)v142.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v143.i8, v12, 4), *(int16x4_t *)v146.i8, v12, 5), *(int16x4_t *)v148.i8, v12, 6), *(int16x4_t *)v149.i8, v12, 7), 4uLL);
      *(int16x4_t *)v131.i8 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v131, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13, 5), *(int16x4_t *)v111.i8, v13, 6), *(int16x4_t *)v146.i8,
                                  v13,
                                  7),
                                6uLL);
      int16x8_t v128 = vshrn_high_n_s32(*(int16x4_t *)v146.i8, v150, 4uLL);
      *uint64_t v125 = vshrn_high_n_s32(*(int16x4_t *)v131.i8, vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v132, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                  vshrn_n_s32(v150, 4uLL),
                  v13,
                  7),
                6uLL);
      --v127;
      v126 += v9;
      uint64_t v125 = (int16x8_t *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    int v151 = result - 8;
    v14 += 16;
    v15 += 16;
    BOOL v152 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v152);
  if (v151)
  {
LABEL_9:
    int16x8_t v153 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v154 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    uint16x4_t v156 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v157 = (int16x4_t)vshr_n_u16(v156, 4uLL);
    int16x4_t v158 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v159 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v165 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v153.i8, 1), v157, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v158,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v153,
               7),
             4uLL);
    int16x4_t v166 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v167 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v168 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v174 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v153.i8, 1), v166, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v167,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v153,
               7),
             4uLL);
    int16x4_t v175 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v176 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v177 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v183 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v153.i8, 1), v175, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v176,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v153,
               7),
             4uLL);
    int16x4_t v184 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v185 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v186 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v192 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v153.i8, 1), v184, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v185,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v153,
               7),
             4uLL);
    int16x4_t v193 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v194 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v195 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v201 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v153.i8, 1), v193, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v194,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v153,
               7),
             4uLL);
    int16x4_t v202 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v203 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v204 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v210 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v153.i8, 1), v202, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v203,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v153,
               7),
             4uLL);
    int16x4_t v211 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v212 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v213 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v153.i8, 1), v211, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v153.i8,
                       3),
                     v212,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v153,
               7),
             4uLL);
    int v219 = a2 + 1;
    uint64_t v220 = v8 - 6;
    do
    {
      v221.i64[0] = 0x38000000380000;
      v221.i64[1] = 0x38000000380000;
      int32x4_t v222 = vmlal_lane_s16(v221, v165, *(int16x4_t *)v154.i8, 0);
      _X14 = v16 + v10;
      int16x4_t v224 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 4uLL);
      int16x4_t v225 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 4uLL);
      int8x8_t v226 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 4uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v231 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 2uLL), *(int16x4_t *)v153.i8, 1), v224, *(int16x4_t *)v153.i8, 0), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 4uLL), *(int16x4_t *)v153.i8, 2), (int16x4_t)vext_s8((int8x8_t)v224, (int8x8_t)v225, 6uLL), *(int16x4_t *)v153.i8, 3),
                     v225,
                     v153,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v225, v226, 2uLL),
                   v153,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v225, v226, 4uLL),
                 v153,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v225, v226, 6uLL),
               v153,
               7);
      int32x4_t v232 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v174, *(int16x4_t *)v154.i8, 1), v183, *(int16x4_t *)v154.i8, 2), v192, *(int16x4_t *)v154.i8, 3), v201, v154, 4), v210, v154, 5), v218, v154,
               6);
      int16x4_t v165 = v174;
      int16x4_t v174 = v183;
      int16x4_t v183 = v192;
      int16x4_t v192 = v201;
      int16x4_t v201 = v210;
      int16x4_t v210 = v218;
      int16x4_t v218 = vshrn_n_s32(v231, 4uLL);
      --v219;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v232, v218, v154, 7), 6uLL);
      v16 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

unint64_t sub_1D0CB54B8(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v15 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int v10 = a2 + 2;
  uint64_t v11 = 4 * a6;
  int16x8_t v12 = &a5->i8[20 * a4];
  int16x8_t v13 = &a5->i8[18 * a4];
  uint64_t v14 = &a5->i8[10 * a4];
  uint64_t v15 = a7;
  uint64_t v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    uint16x8_t v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v22 = (int16x8_t)vshrq_n_u16(v19, 4uLL);
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v21, 4uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v30 = v29;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v33 = v32;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    int16x8_t v41 = (int16x8_t)vshrq_n_u16(v26, 4uLL);
    int16x8_t v42 = (int16x8_t)vshrq_n_u16(*a5, 4uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(v30, 4uLL);
    int16x8_t v44 = (int16x8_t)vshrq_n_u16(v33, 4uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v47 = (int16x8_t)vshrq_n_u16(v35, 4uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int16x8_t v50 = v14;
    int16x8_t v51 = v13;
    int16x8_t v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int16x8_t v55 = v12;
    int v56 = v10;
    int8x16_t v57 = a7;
    uint16x8_t v58 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      int16x8_t v22 = v41;
      int32x4_t v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      int32x4_t v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      int16x8_t v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      int16x8_t v43 = v47;
      int32x4_t v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      int32x4_t v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      int32x4_t v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      int16x8_t v23 = v42;
      int16x8_t v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 4uLL);
      __asm { PRFM            #0, [X9] }
      int16x8_t v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 4uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(int16x4_t *)v67.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      v67.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v68.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 4uLL),
                               (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 4uLL),
                                       (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v58[v7] = v68;
      int8x16_t v57 = (int16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    int v79 = result - 8;
    v7 += 16;
    BOOL v80 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    int16x8_t v81 = xmmword_1D0D7FBF0[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v83 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v84 = (int16x4_t)vshr_n_u16(v83, 4uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v86 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v87 = (int16x4_t)vshr_n_u16(v86, 4uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v89 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v90 = (int16x4_t)vshr_n_u16(v89, 4uLL);
    _X12 = &a5->i8[14];
    int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 4uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v94 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v95 = (int16x4_t)vshr_n_u16(v94, 4uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 4uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 4uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v109 = a2 + 4;
    uint64_t v110 = 3 * a4;
    uint64_t v111 = 8 * a4;
    uint64_t v112 = 22 * a4;
    uint64_t v113 = 12 * a4;
    uint64_t v114 = 10 * a4;
    uint64_t v115 = 2 * a6;
    uint64_t v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      __n128 result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v123 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v124 = v123;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v126 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v127 = v126;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v129 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      int32x4_t v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      int32x4_t v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      int32x4_t v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 4uLL);
      int32x4_t v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      int32x4_t v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      int32x4_t v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      int16x4_t v84 = v95;
      int16x4_t v95 = (int16x4_t)vshr_n_u16(v124, 4uLL);
      int32x4_t v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      int32x4_t v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      int32x4_t v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      int32x4_t v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      int16x4_t v87 = v98;
      int16x4_t v98 = (int16x4_t)vshr_n_u16(v127, 4uLL);
      int32x4_t v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      int32x4_t v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      int32x4_t v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      int32x4_t v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      int16x4_t v90 = v101;
      int16x4_t v101 = (int16x4_t)vshr_n_u16(v129, 4uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v15 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      int32x4_t v150 = (int16x4_t *)((char *)v15 + v115);
      *int32x4_t v150 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      int v151 = (int16x4_t *)((char *)v150 + v115);
      *int v151 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      BOOL v152 = (int16x4_t *)((char *)v151 + v115);
      *BOOL v152 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 4uLL), (int16x4_t)0xE000E000E000E000);
      v109 -= 4;
      uint64_t v15 = (int16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1D0CB5934(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  uint64_t v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 4uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 4uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      int32x4_t v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10, 5), *(int16x4_t *)v28.i8, v10, 6),
                                   *(int16x4_t *)v29.i8,
                                   v10,
                                   7),
                                 4uLL),
                               (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v31, 4uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    int v34 = result - 8;
    ++v11;
    BOOL v35 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    int16x8_t v36 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v38 = a2 + 1;
    do
    {
      int16x4_t v39 = (int16x4_t)vshr_n_u16(*_X11, 4uLL);
      int16x4_t v40 = (int16x4_t)vshr_n_u16(_X11[1], 4uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v42 = (int8x8_t)vshr_n_u16(_X11[2], 4uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                          *(int16x4_t *)v36.i8,
                          3),
                        v40,
                        v36,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                      v36,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                    v36,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                  v36,
                  7),
                4uLL),
              (int16x4_t)0xE000E000E000E000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

uint64_t sub_1D0CB5ADC(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  uint64_t v11 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = a2 + 2;
    do
    {
      uint16x8_t v15 = *(uint16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&a5->i8[v12], 2uLL) & __PAIR128__(0xFFFCFFFCFFFCFFFCLL, 0xFFFCFFFCFFFCFFFCLL)), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16((int16x8_t)(*(_OWORD *)&vshrq_n_u16(v15, 2uLL) & __PAIR128__(0xFFFCFFFCFFFCFFFCLL, 0xFFFCFFFCFFFCFFFCLL)), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = result - 8;
    v9 += 16;
    v11 += 16;
    BOOL v17 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      uint16x4_t v19 = *(uint16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(*a5, 2uLL) & 0xFFFCFFFCFFFCFFFCLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16((int16x4_t)(*(void *)&vshr_n_u16(v19, 2uLL) & 0xFFFCFFFCFFFCFFFCLL), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1D0CB5BC4(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v16 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  uint64_t v14 = v8 - 6;
  uint64_t v15 = 8 * a4;
  uint64_t v16 = a5;
  do
  {
    _X19 = (uint16x8_t *)(v16 + 2 * (-3 * a4 - 3));
    int16x8_t v18 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v19 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    int16x8_t v20 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 2uLL);
    int16x8_t v21 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 6uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xAuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v33 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xCuLL);
    int16x8_t v34 = (int16x8_t)vextq_s8((int8x16_t)v18, v19, 0xEuLL);
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v36 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v18.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v21.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v28.i8,
                      v12,
                      4),
                    *(int16x4_t *)v31.i8,
                    v12,
                    5),
                  *(int16x4_t *)v33.i8,
                  v12,
                  6),
                *(int16x4_t *)v34.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v20, *(int16x4_t *)v12.i8, 1), v18, *(int16x4_t *)v12.i8, 0), v21, *(int16x4_t *)v12.i8, 2), v27, *(int16x4_t *)v12.i8, 3), v28, v12, 4),
                  v31,
                  v12,
                  5),
                v33,
                v12,
                6),
              v34,
              v12,
              7),
            4uLL);
    int16x8_t v37 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v38 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v44 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 2uLL);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 6uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 8uLL);
    int16x8_t v48 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xAuLL);
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xCuLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v37, v38, 0xEuLL);
    int16x8_t v51 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v45.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v47.i8,
                      v12,
                      4),
                    *(int16x4_t *)v48.i8,
                    v12,
                    5),
                  *(int16x4_t *)v49.i8,
                  v12,
                  6),
                *(int16x4_t *)v50.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v44, *(int16x4_t *)v12.i8, 1), v37, *(int16x4_t *)v12.i8, 0), v45, *(int16x4_t *)v12.i8, 2), v46, *(int16x4_t *)v12.i8, 3), v47, v12, 4),
                  v48,
                  v12,
                  5),
                v49,
                v12,
                6),
              v50,
              v12,
              7),
            4uLL);
    int16x8_t v52 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v53 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 2uLL);
    int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 6uLL);
    int16x8_t v62 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v63 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xAuLL);
    int16x8_t v64 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL);
    int16x8_t v65 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xEuLL);
    int16x8_t v66 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v52.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v61.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v62.i8,
                      v12,
                      4),
                    *(int16x4_t *)v63.i8,
                    v12,
                    5),
                  *(int16x4_t *)v64.i8,
                  v12,
                  6),
                *(int16x4_t *)v65.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v59, *(int16x4_t *)v12.i8, 1), v52, *(int16x4_t *)v12.i8, 0), v60, *(int16x4_t *)v12.i8, 2), v61, *(int16x4_t *)v12.i8, 3), v62, v12, 4),
                  v63,
                  v12,
                  5),
                v64,
                v12,
                6),
              v65,
              v12,
              7),
            4uLL);
    int16x8_t v67 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v68 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v74 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 2uLL);
    int16x8_t v75 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
    int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 6uLL);
    int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
    int16x8_t v78 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xAuLL);
    int16x8_t v79 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL);
    int16x8_t v80 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xEuLL);
    int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v67.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v75.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v77.i8,
                      v12,
                      4),
                    *(int16x4_t *)v78.i8,
                    v12,
                    5),
                  *(int16x4_t *)v79.i8,
                  v12,
                  6),
                *(int16x4_t *)v80.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v12.i8, 1), v67, *(int16x4_t *)v12.i8, 0), v75, *(int16x4_t *)v12.i8, 2), v76, *(int16x4_t *)v12.i8, 3), v77, v12, 4),
                  v78,
                  v12,
                  5),
                v79,
                v12,
                6),
              v80,
              v12,
              7),
            4uLL);
    int16x8_t v82 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v83 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v89 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 2uLL);
    int16x8_t v90 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 4uLL);
    int16x8_t v91 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 6uLL);
    int16x8_t v92 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 8uLL);
    int16x8_t v93 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xAuLL);
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xCuLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v82, v83, 0xEuLL);
    int16x8_t v96 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v82.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v90.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v91.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v92.i8,
                      v12,
                      4),
                    *(int16x4_t *)v93.i8,
                    v12,
                    5),
                  *(int16x4_t *)v94.i8,
                  v12,
                  6),
                *(int16x4_t *)v95.i8,
                v12,
                7),
              4uLL),
            vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v89, *(int16x4_t *)v12.i8, 1), v82, *(int16x4_t *)v12.i8, 0), v90, *(int16x4_t *)v12.i8, 2), v91, *(int16x4_t *)v12.i8, 3), v92, v12, 4),
                  v93,
                  v12,
                  5),
                v94,
                v12,
                6),
              v95,
              v12,
              7),
            4uLL);
    int16x8_t v97 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v98 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = (uint16x8_t *)((char *)_X19 + 2 * a4);
    int16x8_t v104 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 2uLL);
    int16x8_t v105 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 4uLL);
    int16x8_t v106 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 6uLL);
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 8uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xAuLL);
    int16x8_t v109 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xCuLL);
    int16x8_t v110 = (int16x8_t)vextq_s8((int8x16_t)v97, v98, 0xEuLL);
    int16x8_t v111 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v107.i8,
                       v12,
                       4),
                     *(int16x4_t *)v108.i8,
                     v12,
                     5),
                   *(int16x4_t *)v109.i8,
                   v12,
                   6),
                 *(int16x4_t *)v110.i8,
                 v12,
                 7),
               4uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v12.i8, 1), v97, *(int16x4_t *)v12.i8, 0), v105, *(int16x4_t *)v12.i8, 2), v106, *(int16x4_t *)v12.i8, 3), v107, v12, 4),
                   v108,
                   v12,
                   5),
                 v109,
                 v12,
                 6),
               v110,
               v12,
               7),
             4uLL);
    int16x8_t v112 = (int16x8_t)vshrq_n_u16(*_X19, 4uLL);
    int8x16_t v113 = (int8x16_t)vshrq_n_u16(_X19[1], 4uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v118 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 2uLL);
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 4uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 6uLL);
    int16x8_t v121 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 8uLL);
    int16x8_t v122 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xAuLL);
    int16x8_t v123 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xCuLL);
    int16x8_t v124 = (int16x8_t)vextq_s8((int8x16_t)v112, v113, 0xEuLL);
    uint64_t v125 = a7;
    uint64_t v126 = a5;
    int v127 = a2 + 1;
    int16x8_t v128 = vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v112.i8, *(int16x4_t *)v12.i8, 0), *(int16x4_t *)v119.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v120.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v121.i8,
                       v12,
                       4),
                     *(int16x4_t *)v122.i8,
                     v12,
                     5),
                   *(int16x4_t *)v123.i8,
                   v12,
                   6),
                 *(int16x4_t *)v124.i8,
                 v12,
                 7),
               4uLL),
             vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v118, *(int16x4_t *)v12.i8, 1), v112, *(int16x4_t *)v12.i8, 0), v119, *(int16x4_t *)v12.i8, 2), v120, *(int16x4_t *)v12.i8, 3), v121, v12, 4),
                   v122,
                   v12,
                   5),
                 v123,
                 v12,
                 6),
               v124,
               v12,
               7),
             4uLL);
    do
    {
      _X22 = v126 + v15;
      int16x8_t v130 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 - 6), 4uLL);
      int8x16_t v131 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v126 + v15 + 10), 4uLL);
      int16x8_t v132 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 2uLL);
      int16x8_t v133 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 4uLL);
      int16x8_t v134 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 6uLL);
      int16x8_t v135 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 8uLL);
      int16x8_t v136 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xAuLL);
      int16x8_t v137 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xCuLL);
      int16x8_t v138 = (int16x8_t)vextq_s8((int8x16_t)v130, v131, 0xEuLL);
      int32x4_t v139 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v12.i8, 1), *(int16x4_t *)v130.i8, *(int16x4_t *)v12.i8, 0);
      int32x4_t v140 = vmlal_high_lane_s16(vmull_high_lane_s16(v132, *(int16x4_t *)v12.i8, 1), v130, *(int16x4_t *)v12.i8, 0);
      int32x4_t v141 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 0);
      int32x4_t v142 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, *(int16x4_t *)v13.i8, 1), v36, *(int16x4_t *)v13.i8, 0);
      int16x8_t v36 = v51;
      int16x8_t v51 = v66;
      int16x8_t v66 = v81;
      int16x8_t v81 = v96;
      int16x8_t v96 = v111;
      int16x8_t v111 = v128;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v126 + v14;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int32x4_t v147 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v140, v133, *(int16x4_t *)v12.i8, 2), v134, *(int16x4_t *)v12.i8, 3), v135, v12, 4), v136, v12, 5), v137, v12, 6), v138, v12,
               7);
      int16x4_t v148 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v139, *(int16x4_t *)v133.i8, *(int16x4_t *)v12.i8, 2), *(int16x4_t *)v134.i8, *(int16x4_t *)v12.i8, 3), *(int16x4_t *)v135.i8, v12, 4), *(int16x4_t *)v136.i8, v12, 5), *(int16x4_t *)v137.i8, v12, 6), *(int16x4_t *)v138.i8,
                 v12,
                 7),
               4uLL);
      *(uint16x4_t *)v133.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v141, *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v66.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v81.i8, v13, 4), *(int16x4_t *)v96.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v111.i8,
                                                   v13,
                                                   6),
                                                 v148,
                                                 v13,
                                                 7),
                                               8uLL),
                                 (uint16x4_t)0xF000F000F000F000);
      v133.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v142, v51, *(int16x4_t *)v13.i8, 2), v66, *(int16x4_t *)v13.i8, 3), v81, v13, 4), v96, v13, 5), v111, v13, 6),
                                                        vshrn_n_s32(v147, 4uLL),
                                                        v13,
                                                        7),
                                                      8uLL),
                                        (uint16x4_t)0xF000F000F000F000);
      int16x8_t v128 = vshrn_high_n_s32(v148, v147, 4uLL);
      *uint64_t v125 = v133;
      --v127;
      v126 += v9;
      uint64_t v125 = (_OWORD *)((char *)v125 + v11);
    }
    while (v127 > 1);
    a7 += 2;
    v16 += 16;
    int v149 = result - 8;
    v14 += 16;
    v15 += 16;
    BOOL v150 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v150);
  if (v149)
  {
LABEL_9:
    int16x8_t v151 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v152 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = (uint16x4_t *)(v16 - 6 * a4);
    uint16x4_t v154 = *(uint16x4_t *)((char *)_X13 - 6);
    _X13 = (uint16x4_t *)((char *)_X13 - 6);
    int16x4_t v155 = (int16x4_t)vshr_n_u16(v154, 4uLL);
    int16x4_t v156 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v157 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v163 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 2uLL), *(int16x4_t *)v151.i8, 1), v155, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v155, (int8x8_t)v156, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v156,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v156, v157, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v156, v157, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v156, v157, 6uLL),
               v151,
               7),
             4uLL);
    int16x4_t v164 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v165 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v166 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v172 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 2uLL), *(int16x4_t *)v151.i8, 1), v164, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v164, (int8x8_t)v165, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v165,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v165, v166, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v165, v166, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v165, v166, 6uLL),
               v151,
               7),
             4uLL);
    int16x4_t v173 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v174 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v175 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v181 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 2uLL), *(int16x4_t *)v151.i8, 1), v173, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v173, (int8x8_t)v174, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v174,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v174, v175, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v174, v175, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v174, v175, 6uLL),
               v151,
               7),
             4uLL);
    int16x4_t v182 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v183 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v184 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v190 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 2uLL), *(int16x4_t *)v151.i8, 1), v182, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v182, (int8x8_t)v183, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v183,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v183, v184, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v183, v184, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v183, v184, 6uLL),
               v151,
               7),
             4uLL);
    int16x4_t v191 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v192 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v193 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v199 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 2uLL), *(int16x4_t *)v151.i8, 1), v191, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v191, (int8x8_t)v192, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v192,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v192, v193, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v192, v193, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v192, v193, 6uLL),
               v151,
               7),
             4uLL);
    int16x4_t v200 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v201 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v202 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (uint16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v208 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 2uLL), *(int16x4_t *)v151.i8, 1), v200, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v200, (int8x8_t)v201, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v201,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v201, v202, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v201, v202, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v201, v202, 6uLL),
               v151,
               7),
             4uLL);
    int16x4_t v209 = (int16x4_t)vshr_n_u16(*_X13, 4uLL);
    int16x4_t v210 = (int16x4_t)vshr_n_u16(_X13[1], 4uLL);
    int8x8_t v211 = (int8x8_t)vshr_n_u16(_X13[2], 4uLL);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v216 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 2uLL), *(int16x4_t *)v151.i8, 1), v209, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v209, (int8x8_t)v210, 6uLL), *(int16x4_t *)v151.i8,
                       3),
                     v210,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v210, v211, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v210, v211, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v210, v211, 6uLL),
               v151,
               7),
             4uLL);
    int v217 = a2 + 1;
    uint64_t v218 = v8 - 6;
    do
    {
      _X14 = v16 + v10;
      int16x4_t v220 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 - 6), 4uLL);
      int16x4_t v221 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 2), 4uLL);
      int8x8_t v222 = (int8x8_t)vshr_n_u16(*(uint16x4_t *)(v16 + v10 + 10), 4uLL);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v16 + v218;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v227 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 2uLL), *(int16x4_t *)v151.i8, 1), v220, *(int16x4_t *)v151.i8, 0), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 4uLL), *(int16x4_t *)v151.i8, 2), (int16x4_t)vext_s8((int8x8_t)v220, (int8x8_t)v221, 6uLL), *(int16x4_t *)v151.i8, 3),
                     v221,
                     v151,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v221, v222, 2uLL),
                   v151,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v221, v222, 4uLL),
                 v151,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v221, v222, 6uLL),
               v151,
               7);
      int32x4_t v228 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v172, *(int16x4_t *)v152.i8, 1), v163, *(int16x4_t *)v152.i8, 0), v181, *(int16x4_t *)v152.i8, 2), v190, *(int16x4_t *)v152.i8, 3), v199, v152, 4), v208, v152, 5), v216, v152,
               6);
      int16x4_t v163 = v172;
      int16x4_t v172 = v181;
      int16x4_t v181 = v190;
      int16x4_t v190 = v199;
      int16x4_t v199 = v208;
      int16x4_t v208 = v216;
      int16x4_t v216 = vshrn_n_s32(v227, 4uLL);
      --v217;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v228, v216, v152, 7), 8uLL), (uint16x4_t)0xF000F000F000F000);
      v16 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v217 > 1);
  }
  return result;
}

unint64_t sub_1D0CB64BC(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v153 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v15 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int v10 = a2 + 2;
  uint64_t v11 = 4 * a6;
  int16x8_t v12 = &a5->i8[20 * a4];
  int16x8_t v13 = &a5->i8[18 * a4];
  uint64_t v14 = &a5->i8[10 * a4];
  uint64_t v15 = a7;
  uint64_t v16 = &a5->i8[8 * a4];
  do
  {
    _X22 = &a5->i8[-6 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X22;
    _X22 += 30;
    uint16x8_t v19 = v18;
    _X24 = &a5->i8[-4 * a4];
    uint16x8_t v21 = *(uint16x8_t *)_X24;
    _X24 += 30;
    int16x8_t v22 = (int16x8_t)vshrq_n_u16(v19, 4uLL);
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v21, 4uLL);
    _X25 = &a5->i8[-2 * a4];
    uint16x8_t v25 = *(uint16x8_t *)_X25;
    _X25 += 30;
    uint16x8_t v26 = v25;
    _X26 = &a5[1].i8[14];
    _X27 = &a5->i8[2 * a4];
    uint16x8_t v29 = *(uint16x8_t *)_X27;
    _X27 += 30;
    uint16x8_t v30 = v29;
    _X28 = &a5->i8[4 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X28;
    _X28 += 30;
    uint16x8_t v33 = v32;
    _X30 = &a5->i8[6 * a4];
    uint16x8_t v35 = *(uint16x8_t *)_X30;
    _X30 += 30;
    __asm { PRFM            #0, [X22] }
    int16x8_t v41 = (int16x8_t)vshrq_n_u16(v26, 4uLL);
    int16x8_t v42 = (int16x8_t)vshrq_n_u16(*a5, 4uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(v30, 4uLL);
    int16x8_t v44 = (int16x8_t)vshrq_n_u16(v33, 4uLL);
    __asm
    {
      PRFM            #0, [X24]
      PRFM            #0, [X25]
    }
    int16x8_t v47 = (int16x8_t)vshrq_n_u16(v35, 4uLL);
    __asm
    {
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int16x8_t v50 = v14;
    int16x8_t v51 = v13;
    int16x8_t v52 = v16;
    __asm
    {
      PRFM            #0, [X28]
      PRFM            #0, [X30]
    }
    int16x8_t v55 = v12;
    int v56 = v10;
    int8x16_t v57 = a7;
    uint16x8_t v58 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v59 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v22.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v60 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v8.i8, 1), v22, *(int16x4_t *)v8.i8, 0);
      int16x8_t v22 = v41;
      int32x4_t v61 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 1), *(int16x4_t *)v23.i8, *(int16x4_t *)v8.i8, 0);
      int32x4_t v62 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v8.i8, 1), v23, *(int16x4_t *)v8.i8, 0);
      int32x4_t v63 = vmlal_lane_s16(v59, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v64 = vmlal_high_lane_s16(v60, v41, *(int16x4_t *)v8.i8, 2);
      int16x8_t v41 = v43;
      _X9 = (uint64_t)&v52[v7 + 30];
      __asm { PRFM            #0, [X9] }
      int16x8_t v43 = v47;
      int32x4_t v67 = vmlal_lane_s16(v63, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 3);
      int32x4_t v68 = vmlal_high_lane_s16(v64, v42, *(int16x4_t *)v8.i8, 3);
      int32x4_t v69 = vmlal_lane_s16(v61, *(int16x4_t *)v42.i8, *(int16x4_t *)v8.i8, 2);
      int32x4_t v70 = vmlal_high_lane_s16(v62, v42, *(int16x4_t *)v8.i8, 2);
      int16x8_t v23 = v42;
      int16x8_t v42 = v44;
      _X9 = (uint64_t)&v50[v7 + 30];
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v50[v7], 4uLL);
      __asm { PRFM            #0, [X9] }
      int16x8_t v44 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v52[v7], 4uLL);
      _X9 = &v51[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v55[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v67, *(int16x4_t *)v41.i8, v8, 4), *(int16x4_t *)v42.i8, v8, 5), *(int16x4_t *)v43.i8, v8, 6), *(int16x4_t *)v44.i8, v8, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v68, v41, v8, 4), v42, v8, 5), v43, v8, 6), v44, v8, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      *(uint16x4_t *)v68.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v69, *(int16x4_t *)v41.i8, *(int16x4_t *)v8.i8, 3), *(int16x4_t *)v42.i8, v8, 4), *(int16x4_t *)v43.i8, v8, 5), *(int16x4_t *)v44.i8, v8, 6), *(int16x4_t *)v47.i8, v8, 7), 6uLL),
                                (uint16x4_t)0xF000F000F000F000);
      *(int32x4_t *)v57[v7 / 8].i8 = v67;
      v68.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v70, v41, *(int16x4_t *)v8.i8, 3), v42, v8, 4), v43, v8, 5), v44, v8, 6), v47, v8, 7), 6uLL),
                                       (uint16x4_t)0xF000F000F000F000);
      *(int32x4_t *)&v58[v7] = v68;
      int8x16_t v57 = (uint16x4_t *)((char *)v57 + v11);
      v58 += v11;
      v56 -= 2;
      v55 += v9;
      v52 += v9;
      v51 += v9;
      v50 += v9;
    }
    while (v56 > 2);
    v15 += 2;
    ++a5;
    int v79 = result - 8;
    v7 += 16;
    BOOL v80 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v80);
  if (v79)
  {
LABEL_9:
    int16x8_t v81 = xmmword_1D0D7FBF0[v153 - 1];
    _X9 = (uint64_t *)((char *)a5->i64 - 6 * a4);
    uint16x4_t v83 = *(uint16x4_t *)_X9;
    _X9 = (void *)((char *)_X9 + 14);
    int16x4_t v84 = (int16x4_t)vshr_n_u16(v83, 4uLL);
    _X10 = (uint64_t *)((char *)a5->i64 - 4 * a4);
    uint16x4_t v86 = *(uint16x4_t *)_X10;
    _X10 = (void *)((char *)_X10 + 14);
    int16x4_t v87 = (int16x4_t)vshr_n_u16(v86, 4uLL);
    _X11 = (uint64_t *)((char *)a5->i64 - 2 * a4);
    uint16x4_t v89 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v90 = (int16x4_t)vshr_n_u16(v89, 4uLL);
    _X12 = &a5->i8[14];
    int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 4uLL);
    _X14 = (uint64_t *)((char *)a5->i64 + 2 * a4);
    uint16x4_t v94 = *(uint16x4_t *)_X14;
    _X14 = (void *)((char *)_X14 + 14);
    int16x4_t v95 = (int16x4_t)vshr_n_u16(v94, 4uLL);
    _X15 = (uint64_t *)((char *)a5->i64 + 4 * a4);
    uint16x4_t v97 = *(uint16x4_t *)_X15;
    _X15 = (void *)((char *)_X15 + 14);
    int16x4_t v98 = (int16x4_t)vshr_n_u16(v97, 4uLL);
    _X16 = (uint64_t *)((char *)a5->i64 + 6 * a4);
    uint16x4_t v100 = *(uint16x4_t *)_X16;
    _X16 = (void *)((char *)_X16 + 14);
    int16x4_t v101 = (int16x4_t)vshr_n_u16(v100, 4uLL);
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v109 = a2 + 4;
    uint64_t v110 = 3 * a4;
    uint64_t v111 = 8 * a4;
    uint64_t v112 = 22 * a4;
    uint64_t v113 = 12 * a4;
    uint64_t v114 = 10 * a4;
    uint64_t v115 = 2 * a6;
    uint64_t v116 = 14 * a4;
    do
    {
      _X2 = (uint64_t *)((char *)a5->i64 + v114);
      _X3 = (uint64_t *)((char *)a5->i64 + v113);
      _X5 = (uint64_t *)((char *)a5->i64 + v116);
      _X17 = &a5->i8[v112];
      __n128 result = (unint64_t)&a5->u64[v110];
      a5 = (uint16x8_t *)((char *)a5 + v111);
      _X1 = &a5->i8[14];
      __asm { PRFM            #0, [X1] }
      uint16x4_t v123 = *(uint16x4_t *)_X2;
      _X2 = (void *)((char *)_X2 + 14);
      uint16x4_t v124 = v123;
      __asm { PRFM            #0, [X2] }
      uint16x4_t v126 = *(uint16x4_t *)_X3;
      _X3 = (void *)((char *)_X3 + 14);
      uint16x4_t v127 = v126;
      __asm { PRFM            #0, [X3] }
      uint16x4_t v129 = *(uint16x4_t *)_X5;
      _X5 = (void *)((char *)_X5 + 14);
      __asm { PRFM            #0, [X5] }
      int32x4_t v131 = vmlal_lane_s16(vmull_lane_s16(v92, *(int16x4_t *)v81.i8, 1), v90, *(int16x4_t *)v81.i8, 0);
      int32x4_t v132 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v87, *(int16x4_t *)v81.i8, 1), v84, *(int16x4_t *)v81.i8, 0), v90, *(int16x4_t *)v81.i8, 2), v92, *(int16x4_t *)v81.i8, 3);
      int32x4_t v133 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, *(int16x4_t *)v81.i8, 1), v87, *(int16x4_t *)v81.i8, 0), v92, *(int16x4_t *)v81.i8, 2);
      int32x4_t v134 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v81.i8, 1), v92, *(int16x4_t *)v81.i8, 0);
      int16x4_t v92 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)a5->i8, 4uLL);
      int32x4_t v135 = vmlal_laneq_s16(v132, v95, v81, 4);
      int32x4_t v136 = vmlal_lane_s16(v133, v95, *(int16x4_t *)v81.i8, 3);
      int32x4_t v137 = vmlal_lane_s16(v131, v95, *(int16x4_t *)v81.i8, 2);
      int16x4_t v84 = v95;
      int16x4_t v95 = (int16x4_t)vshr_n_u16(v124, 4uLL);
      int32x4_t v138 = vmlal_laneq_s16(v135, v98, v81, 5);
      int32x4_t v139 = vmlal_laneq_s16(v136, v98, v81, 4);
      int32x4_t v140 = vmlal_lane_s16(v137, v98, *(int16x4_t *)v81.i8, 3);
      int32x4_t v141 = vmlal_lane_s16(v134, v98, *(int16x4_t *)v81.i8, 2);
      int16x4_t v87 = v98;
      int16x4_t v98 = (int16x4_t)vshr_n_u16(v127, 4uLL);
      int32x4_t v142 = vmlal_laneq_s16(v138, v101, v81, 6);
      int32x4_t v143 = vmlal_laneq_s16(v139, v101, v81, 5);
      int32x4_t v144 = vmlal_laneq_s16(v140, v101, v81, 4);
      int32x4_t v145 = vmlal_lane_s16(v141, v101, *(int16x4_t *)v81.i8, 3);
      int16x4_t v90 = v101;
      int16x4_t v101 = (int16x4_t)vshr_n_u16(v129, 4uLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      *uint64_t v15 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v142, v92, v81, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      BOOL v150 = (uint16x4_t *)((char *)v15 + v115);
      *BOOL v150 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v143, v92, v81, 6), v95, v81, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      int16x8_t v151 = (uint16x4_t *)((char *)v150 + v115);
      *int16x8_t v151 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v144, v92, v81, 5), v95, v81, 6), v98, v81, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      int16x8_t v152 = (uint16x4_t *)((char *)v151 + v115);
      *int16x8_t v152 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v145, v92, v81, 4), v95, v81, 5), v98, v81, 6), v101, v81, 7), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v109 -= 4;
      uint64_t v15 = (uint16x4_t *)((char *)v152 + v115);
    }
    while (v109 > 4);
  }
  return result;
}

uint64_t sub_1D0CB6938(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  uint64_t v11 = (uint16x8_t *)(a5 - 6);
  do
  {
    int16x8_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 4uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 4uLL);
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 2uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 6uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xAuLL);
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xEuLL);
      int32x4_t v30 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v10.i8, 1), *(int16x4_t *)v15.i8, *(int16x4_t *)v10.i8, 0);
      int32x4_t v31 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, *(int16x4_t *)v10.i8, 1), v15, *(int16x4_t *)v10.i8, 0), v24, *(int16x4_t *)v10.i8, 2), v25, *(int16x4_t *)v10.i8, 3), v26, v10, 4),
                  v27,
                  v10,
                  5),
                v28,
                v10,
                6),
              v29,
              v10,
              7);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v30, *(int16x4_t *)v24.i8, *(int16x4_t *)v10.i8, 2), *(int16x4_t *)v25.i8, *(int16x4_t *)v10.i8, 3), *(int16x4_t *)v26.i8, v10, 4), *(int16x4_t *)v27.i8, v10,
                                                    5),
                                                  *(int16x4_t *)v28.i8,
                                                  v10,
                                                  6),
                                                *(int16x4_t *)v29.i8,
                                                v10,
                                                7),
                                              6uLL),
                                (uint16x4_t)0xF000F000F000F000);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v31, 6uLL), (uint16x4_t)0xF000F000F000F000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    a5 += 16;
    int v34 = result - 8;
    ++v11;
    BOOL v35 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v35);
  if (v34)
  {
LABEL_9:
    int16x8_t v36 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (uint16x4_t *)(a5 - 6);
    int v38 = a2 + 1;
    do
    {
      int16x4_t v39 = (int16x4_t)vshr_n_u16(*_X11, 4uLL);
      int16x4_t v40 = (int16x4_t)vshr_n_u16(_X11[1], 4uLL);
      __asm { PRFUM           #0, [X11,#0x1E] }
      int8x8_t v42 = (int8x8_t)vshr_n_u16(_X11[2], 4uLL);
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 2uLL), *(int16x4_t *)v36.i8, 1), v39, *(int16x4_t *)v36.i8, 0), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 4uLL), *(int16x4_t *)v36.i8, 2), (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)v40, 6uLL),
                                      *(int16x4_t *)v36.i8,
                                      3),
                                    v40,
                                    v36,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v40, v42, 2uLL),
                                  v36,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v40, v42, 4uLL),
                                v36,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v40, v42, 6uLL),
                              v36,
                              7),
                            6uLL),
              (uint16x4_t)0xF000F000F000F000);
      --v38;
      _X11 = (uint16x4_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v38 > 1);
  }
  return result;
}

double sub_1D0CB6AE0(int a1, int a2, uint64_t a3, uint64_t a4, uint16x4_t *a5, uint64_t a6, void *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1) {
      return *(double *)v14.i64;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  int16x8_t v10 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = a2 + 2;
    do
    {
      uint16x8_t v14 = vshrq_n_u16(*(uint16x8_t *)&a5->i8[v11], 4uLL);
      uint16x8_t v15 = vshrq_n_u16(*(uint16x8_t *)&v10[v11], 4uLL);
      *(uint16x8_t *)((char *)a7 + v12) = v14;
      *(uint16x8_t *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    BOOL v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      *(uint16x4_t *)v14.i8 = vshr_n_u16(*a5, 4uLL);
      uint16x4_t v19 = vshr_n_u16(*(uint16x4_t *)((char *)a5 + 2 * a4), 4uLL);
      *a7 = v14.i64[0];
      *(uint16x4_t *)((char *)a7 + 2 * a6) = v19;
      a7 = (void *)((char *)a7 + v7);
      a5 = (uint16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)v14.i64;
}

uint64_t sub_1D0CB6BA0(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  uint64_t v13 = 12 * a4 - 4;
  uint64_t v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v17 = (int16x8_t)vshrq_n_u16(*_X7, 8uLL);
    int8x16_t v18 = (int8x16_t)vshrq_n_u16(_X7[1], 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    int16x8_t v30 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3));
    _X7 = _X11 - 4;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 8uLL);
    int8x16_t v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    int16x8_t v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    int16x8_t v42 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3));
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X7, 8uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X7[1], 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    int16x8_t v52 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3));
    int8x16_t v53 = (int16x8_t *)a7;
    uint64_t v54 = a5;
    int v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      int16x8_t v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 8uLL);
      int8x16_t v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 8uLL);
      int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      int32x4_t v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      int32x4_t v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v57.i64[0] = 0x38000000380000;
      v57.i64[1] = 0x38000000380000;
      v64.i64[0] = 0x38000000380000;
      v64.i64[1] = 0x38000000380000;
      int32x4_t v65 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v57, *(int16x4_t *)v30.i8, v12, 0), *(int16x4_t *)v42.i8, v12, 1);
      int32x4_t v66 = vmlal_high_lane_s16(vmlal_high_lane_s16(v64, v30, v12, 0), v42, v12, 1);
      int16x8_t v30 = v42;
      int16x8_t v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int16x8_t v71 = (int16x8_t)vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3);
      int16x8_t v72 = (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      int16x8_t v52 = vuzp1q_s16(v71, v72);
      *int8x16_t v53 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v65, *(int16x4_t *)v42.i8, v12, 2), vmovn_s32((int32x4_t)v71), v12, 3), 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v66, v42, v12, 2), vmovn_s32((int32x4_t)v72), v12, 3), 6uLL);
      --v55;
      v54 += v9;
      int8x16_t v53 = (int16x8_t *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    int v73 = result - 8;
    v13 += 16;
    v14 += 16;
    BOOL v74 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v74);
  if (v73)
  {
LABEL_9:
    int16x4_t v75 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v76 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v78 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 8uLL);
    int16x8_t v79 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 8uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v84 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v79.i8, v75, 1), v78, v75, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 4uLL), v75, 2), v79, v75, 3));
    int16x8_t v85 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 8uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v91 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v85.i8, v75, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 8uLL), v75, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 4uLL), v75, 2), v85, v75, 3));
    *(uint16x4_t *)v85.i8 = vshr_n_u16(*_X13, 8uLL);
    int16x8_t v92 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 8uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v97 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v92.i8, v75, 1), *(int16x4_t *)v85.i8, v75, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v75, 2), v92, v75, 3));
    int v98 = a2 + 1;
    do
    {
      v99.i64[0] = 0x38000000380000;
      v99.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      int16x8_t v101 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 8uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v106 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v99, v84, v76, 0), v91, v76, 1), v97, v76, 2);
      int16x4_t v84 = v91;
      int16x4_t v91 = v97;
      int16x4_t v97 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, v75, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 8uLL), v75, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL), v75, 2), v101, v75, 3));
      --v98;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v106, v97, v76, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v98 > 1);
  }
  return result;
}

unint64_t sub_1D0CB6F38(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    uint64_t v14 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x4_t v12 = &_X4->i8[14 * a4];
  uint64_t v13 = &_X4->i8[6 * a4];
  uint64_t v14 = a7;
  uint16x8_t v15 = &_X4[a4];
  int v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v19 = (int16x8_t)vshrq_n_u16(v18, 8uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v25 = (int16x8_t)vshrq_n_u16(*_X4, 8uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v29 = v13;
    int16x8_t v30 = v12;
    int32x4_t v31 = v16;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(v28, 8uLL);
    __asm { PRFM            #0, [X23] }
    int v34 = v15;
    int v35 = a2 + 2;
    int16x8_t v36 = a7;
    int16x8_t v37 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      int32x4_t v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      int16x8_t v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      int32x4_t v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      int32x4_t v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      int16x8_t v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 8uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      int32x4_t v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      int32x4_t v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 8uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(int16x4_t *)v45.i8 = vadd_s16(vmovn_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3)), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vmlal_high_lane_s16(v46, v25, v11, 3)), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(int16x4_t *)v45.i8 = vadd_s16(vmovn_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3)), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3)), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      int16x8_t v36 = (int16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      int v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    int v54 = result - 8;
    v10 += 16;
    BOOL v55 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v57 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v58 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v59 = (int16x4_t)vshr_n_u16(v57, 8uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 8uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v64 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v65 = (int16x4_t)vshr_n_u16(v64, 8uLL);
    __asm { PRFM            #0, [X11] }
    int v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v72 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      int32x4_t v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 8uLL);
      int32x4_t v76 = vmlal_lane_s16(v74, v65, v58, 2);
      int16x4_t v59 = v65;
      int16x4_t v65 = (int16x4_t)vshr_n_u16(v72, 8uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *uint64_t v14 = vadd_s16(vmovn_s32(vmlal_lane_s16(v76, v61, v58, 3)), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v14 + 2 * a6) = vadd_s16(vmovn_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3)), (int16x4_t)0xE000E000E000E000);
      uint64_t v14 = (int16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1D0CB71D8(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x4_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 8uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 8uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v26 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int32x4_t v27 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v24.i8, v10, 1), *(int16x4_t *)v15.i8, v10, 0);
      int32x4_t v28 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v24, v10, 1), v15, v10, 0), v25, v10, 2), v26, v10, 3);
      *(int16x4_t *)v15.i8 = vadd_s16(vmovn_s32(vmlal_lane_s16(vmlal_lane_s16(v27, *(int16x4_t *)v25.i8, v10, 2), *(int16x4_t *)v26.i8, v10, 3)), (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vmovn_s32(v28), (int16x4_t)0xE000E000E000E000);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *int16x4_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x4_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    int v30 = result - 8;
    ++v11;
    BOOL v31 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    int16x4_t v32 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v33 = a2 + 1;
    uint64_t v34 = v7 - 4;
    do
    {
      int16x8_t v35 = (int16x8_t)vshrq_n_u16(*_X4, 8uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 8uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3)), (int16x4_t)0xE000E000E000E000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

uint64_t sub_1D0CB7328(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  uint64_t v13 = 12 * a4 - 4;
  uint64_t v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v17 = (int16x8_t)vshrq_n_u16(*_X7, 8uLL);
    int8x16_t v18 = (int8x16_t)vshrq_n_u16(_X7[1], 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    int16x8_t v30 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3));
    _X7 = _X11 - 4;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 8uLL);
    int8x16_t v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    int16x8_t v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    int16x8_t v42 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3));
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X7, 8uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X7[1], 8uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    int16x8_t v52 = vuzp1q_s16((int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3));
    int8x16_t v53 = a7;
    uint64_t v54 = a5;
    int v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      int16x8_t v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 8uLL);
      int8x16_t v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 8uLL);
      int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      int32x4_t v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      int32x4_t v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      int32x4_t v64 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v42.i8, v12, 1), *(int16x4_t *)v30.i8, v12, 0);
      int32x4_t v65 = vmlal_high_lane_s16(vmull_high_lane_s16(v42, v12, 1), v30, v12, 0);
      int16x8_t v30 = v42;
      int16x8_t v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int16x8_t v70 = (int16x8_t)vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3);
      int16x8_t v71 = (int16x8_t)vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      *(uint16x4_t *)v60.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v64, *(int16x4_t *)v52.i8, v12, 2), vmovn_s32((int32x4_t)v70), v12, 3), 0xCuLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v60.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v65, v52, v12, 2), vmovn_s32((int32x4_t)v71), v12, 3), 0xCuLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      int16x8_t v52 = vuzp1q_s16(v70, v71);
      *int8x16_t v53 = v60;
      --v55;
      v54 += v9;
      int8x16_t v53 = (_OWORD *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    int v72 = result - 8;
    v13 += 16;
    v14 += 16;
    BOOL v73 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v73);
  if (v72)
  {
LABEL_9:
    int16x4_t v74 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v75 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v77 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 8uLL);
    int16x8_t v78 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 8uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v83 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v78.i8, v74, 1), v77, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), v74, 2), v78, v74, 3));
    int16x8_t v84 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 8uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v90 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 8uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL), v74, 2), v84, v74, 3));
    *(uint16x4_t *)v78.i8 = vshr_n_u16(*_X13, 8uLL);
    int16x8_t v91 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 8uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v96 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, v74, 1), *(int16x4_t *)v78.i8, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL), v74, 2), v91, v74, 3));
    int v97 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      int16x8_t v99 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 8uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v104 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, v75, 1), v83, v75, 0), v96, v75, 2);
      int16x4_t v83 = v90;
      int16x4_t v90 = v96;
      int16x4_t v96 = vmovn_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v99.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 8uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), v74, 2), v99, v74, 3));
      --v97;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v104, v96, v75, 3), 0xCuLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v97 > 1);
  }
  return result;
}

unint64_t sub_1D0CB76CC(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    uint64_t v14 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x4_t v12 = &_X4->i8[14 * a4];
  uint64_t v13 = &_X4->i8[6 * a4];
  uint64_t v14 = a7;
  int16x8_t v15 = &_X4[a4];
  int8x16_t v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v19 = (int16x8_t)vshrq_n_u16(v18, 8uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v25 = (int16x8_t)vshrq_n_u16(*_X4, 8uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v29 = v13;
    int16x8_t v30 = v12;
    BOOL v31 = v16;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(v28, 8uLL);
    __asm { PRFM            #0, [X23] }
    uint64_t v34 = v15;
    int v35 = a2 + 2;
    int16x8_t v36 = a7;
    int16x8_t v37 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      int32x4_t v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      int16x8_t v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      int32x4_t v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      int32x4_t v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      int16x8_t v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 8uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      int32x4_t v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      int32x4_t v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 8uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      int16x8_t v36 = (uint16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      uint64_t v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    int v54 = result - 8;
    v10 += 16;
    BOOL v55 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v57 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v58 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v59 = (int16x4_t)vshr_n_u16(v57, 8uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 8uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v64 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v65 = (int16x4_t)vshr_n_u16(v64, 8uLL);
    __asm { PRFM            #0, [X11] }
    int v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v72 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      int32x4_t v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 8uLL);
      int32x4_t v76 = vmlal_lane_s16(v74, v65, v58, 2);
      int16x4_t v59 = v65;
      int16x4_t v65 = (int16x4_t)vshr_n_u16(v72, 8uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *uint64_t v14 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      *(uint16x4_t *)((char *)v14 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      uint64_t v14 = (uint16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1D0CB796C(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x4_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 8uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 8uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int32x4_t v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      int32x4_t v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x4_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x4_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    int v30 = result - 8;
    ++v11;
    BOOL v31 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    int16x4_t v32 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v33 = a2 + 1;
    uint64_t v34 = v7 - 4;
    do
    {
      int16x8_t v35 = (int16x8_t)vshrq_n_u16(*_X4, 8uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 8uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 6uLL), (uint16x4_t)0xFF00FF00FF00FFLL);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

uint64_t sub_1D0CB7ABC(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  uint64_t v13 = 12 * a4 - 4;
  uint64_t v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v17 = (int16x8_t)vshrq_n_u16(*_X7, 7uLL);
    int8x16_t v18 = (int8x16_t)vshrq_n_u16(_X7[1], 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    int16x8_t v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 1uLL);
    _X7 = _X11 - 4;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 7uLL);
    int8x16_t v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    int16x8_t v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    int16x8_t v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 1uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X7, 7uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X7[1], 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    int16x8_t v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 1uLL);
    int8x16_t v53 = (int16x8_t *)a7;
    uint64_t v54 = a5;
    int v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      int16x8_t v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 7uLL);
      int8x16_t v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 7uLL);
      int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      int32x4_t v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      int32x4_t v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v57.i64[0] = 0x38000000380000;
      v57.i64[1] = 0x38000000380000;
      v64.i64[0] = 0x38000000380000;
      v64.i64[1] = 0x38000000380000;
      int32x4_t v65 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v57, *(int16x4_t *)v30.i8, v12, 0), *(int16x4_t *)v42.i8, v12, 1);
      int32x4_t v66 = vmlal_high_lane_s16(vmlal_high_lane_s16(v64, v30, v12, 0), v42, v12, 1);
      int16x8_t v30 = v42;
      int16x8_t v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int32x4_t v71 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      int16x4_t v72 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 1uLL);
      int32x4_t v73 = vmlal_lane_s16(vmlal_lane_s16(v65, *(int16x4_t *)v42.i8, v12, 2), v72, v12, 3);
      int16x8_t v52 = vshrn_high_n_s32(v72, v71, 1uLL);
      *int8x16_t v53 = vshrn_high_n_s32(vshrn_n_s32(v73, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v66, v42, v12, 2), vshrn_n_s32(v71, 1uLL), v12, 3), 6uLL);
      --v55;
      v54 += v9;
      int8x16_t v53 = (int16x8_t *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    int v74 = result - 8;
    v13 += 16;
    v14 += 16;
    BOOL v75 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v75);
  if (v74)
  {
LABEL_9:
    int16x4_t v76 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v77 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v79 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 7uLL);
    int16x8_t v80 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 7uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v85 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, v76, 1), v79, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL), v76, 2), v80, v76, 3), 1uLL);
    int16x8_t v86 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 7uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v92 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v86.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 7uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL), v76, 2), v86, v76, 3), 1uLL);
    *(uint16x4_t *)v86.i8 = vshr_n_u16(*_X13, 7uLL);
    int16x8_t v93 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 7uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v93.i8, v76, 1), *(int16x4_t *)v86.i8, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v76, 2), v93, v76, 3), 1uLL);
    int v99 = a2 + 1;
    do
    {
      v100.i64[0] = 0x38000000380000;
      v100.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      int16x8_t v102 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 7uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v107 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v100, v85, v77, 0), v92, v77, 1), v98, v77, 2);
      int16x4_t v85 = v92;
      int16x4_t v92 = v98;
      int16x4_t v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v102.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 7uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL), v76, 2), v102, v76, 3), 1uLL);
      --v99;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v107, v98, v77, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v99 > 1);
  }
  return result;
}

unint64_t sub_1D0CB7E60(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    uint64_t v14 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x4_t v12 = &_X4->i8[14 * a4];
  uint64_t v13 = &_X4->i8[6 * a4];
  uint64_t v14 = a7;
  int16x8_t v15 = &_X4[a4];
  int8x16_t v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v19 = (int16x8_t)vshrq_n_u16(v18, 7uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v25 = (int16x8_t)vshrq_n_u16(*_X4, 7uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v29 = v13;
    int16x8_t v30 = v12;
    BOOL v31 = v16;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(v28, 7uLL);
    __asm { PRFM            #0, [X23] }
    uint64_t v34 = v15;
    int v35 = a2 + 2;
    int16x8_t v36 = a7;
    int16x8_t v37 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      int32x4_t v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      int16x8_t v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      int32x4_t v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      int32x4_t v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      int16x8_t v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 7uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      int32x4_t v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      int32x4_t v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 7uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      int16x8_t v36 = (int16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      uint64_t v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    int v54 = result - 8;
    v10 += 16;
    BOOL v55 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v57 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v58 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v59 = (int16x4_t)vshr_n_u16(v57, 7uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 7uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v64 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v65 = (int16x4_t)vshr_n_u16(v64, 7uLL);
    __asm { PRFM            #0, [X11] }
    int v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v72 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      int32x4_t v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 7uLL);
      int32x4_t v76 = vmlal_lane_s16(v74, v65, v58, 2);
      int16x4_t v59 = v65;
      int16x4_t v65 = (int16x4_t)vshr_n_u16(v72, 7uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *uint64_t v14 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v14 + 2 * a6) = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      uint64_t v14 = (int16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1D0CB8100(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x4_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 7uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 7uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int32x4_t v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      int32x4_t v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v27, 1uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x4_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x4_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    int v30 = result - 8;
    ++v11;
    BOOL v31 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    int16x4_t v32 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v33 = a2 + 1;
    uint64_t v34 = v7 - 4;
    do
    {
      int16x8_t v35 = (int16x8_t)vshrq_n_u16(*_X4, 7uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 7uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 1uLL), (int16x4_t)0xE000E000E000E000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

uint64_t sub_1D0CB8250(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  uint64_t v13 = 12 * a4 - 4;
  uint64_t v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v17 = (int16x8_t)vshrq_n_u16(*_X7, 7uLL);
    int8x16_t v18 = (int8x16_t)vshrq_n_u16(_X7[1], 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    int16x8_t v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 1uLL);
    _X7 = _X11 - 4;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 7uLL);
    int8x16_t v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    int16x8_t v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    int16x8_t v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 1uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X7, 7uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X7[1], 7uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    int16x8_t v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 1uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 1uLL);
    int8x16_t v53 = a7;
    uint64_t v54 = a5;
    int v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      int16x8_t v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 7uLL);
      int8x16_t v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 7uLL);
      int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      int32x4_t v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      int32x4_t v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      int32x4_t v64 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v42.i8, v12, 1), *(int16x4_t *)v30.i8, v12, 0);
      int32x4_t v65 = vmlal_high_lane_s16(vmull_high_lane_s16(v42, v12, 1), v30, v12, 0);
      int16x8_t v30 = v42;
      int16x8_t v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int32x4_t v70 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      int16x4_t v71 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 1uLL);
      *(uint16x4_t *)v60.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v64, *(int16x4_t *)v42.i8, v12, 2), v71, v12, 3), 0xBuLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v60.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v65, v42, v12, 2), vshrn_n_s32(v70, 1uLL), v12, 3), 0xBuLL), (uint16x4_t)0xFE00FE00FE00FE00);
      int16x8_t v52 = vshrn_high_n_s32(v71, v70, 1uLL);
      *int8x16_t v53 = v60;
      --v55;
      v54 += v9;
      int8x16_t v53 = (_OWORD *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    int v72 = result - 8;
    v13 += 16;
    v14 += 16;
    BOOL v73 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v73);
  if (v72)
  {
LABEL_9:
    int16x4_t v74 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v75 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v77 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 7uLL);
    int16x8_t v78 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 7uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v83 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v78.i8, v74, 1), v77, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), v74, 2), v78, v74, 3), 1uLL);
    int16x8_t v84 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 7uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v90 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 7uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL), v74, 2), v84, v74, 3), 1uLL);
    *(uint16x4_t *)v78.i8 = vshr_n_u16(*_X13, 7uLL);
    int16x8_t v91 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 7uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, v74, 1), *(int16x4_t *)v78.i8, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL), v74, 2), v91, v74, 3), 1uLL);
    int v97 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      int16x8_t v99 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 7uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v104 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, v75, 1), v83, v75, 0), v96, v75, 2);
      int16x4_t v83 = v90;
      int16x4_t v90 = v96;
      int16x4_t v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v99.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 7uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), v74, 2), v99, v74, 3), 1uLL);
      --v97;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v104, v96, v75, 3), 0xBuLL), (uint16x4_t)0xFE00FE00FE00FE00);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v97 > 1);
  }
  return result;
}

unint64_t sub_1D0CB8600(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    uint64_t v14 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x4_t v12 = &_X4->i8[14 * a4];
  uint64_t v13 = &_X4->i8[6 * a4];
  uint64_t v14 = a7;
  int16x8_t v15 = &_X4[a4];
  int8x16_t v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v19 = (int16x8_t)vshrq_n_u16(v18, 7uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v25 = (int16x8_t)vshrq_n_u16(*_X4, 7uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v29 = v13;
    int16x8_t v30 = v12;
    BOOL v31 = v16;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(v28, 7uLL);
    __asm { PRFM            #0, [X23] }
    uint64_t v34 = v15;
    int v35 = a2 + 2;
    int16x8_t v36 = a7;
    int16x8_t v37 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      int32x4_t v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      int16x8_t v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      int32x4_t v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      int32x4_t v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      int16x8_t v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 7uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      int32x4_t v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      int32x4_t v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 7uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      int16x8_t v36 = (uint16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      uint64_t v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    int v54 = result - 8;
    v10 += 16;
    BOOL v55 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v57 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v58 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v59 = (int16x4_t)vshr_n_u16(v57, 7uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 7uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v64 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v65 = (int16x4_t)vshr_n_u16(v64, 7uLL);
    __asm { PRFM            #0, [X11] }
    int v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v72 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      int32x4_t v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 7uLL);
      int32x4_t v76 = vmlal_lane_s16(v74, v65, v58, 2);
      int16x4_t v59 = v65;
      int16x4_t v65 = (int16x4_t)vshr_n_u16(v72, 7uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *uint64_t v14 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      *(uint16x4_t *)((char *)v14 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      uint64_t v14 = (uint16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1D0CB88A0(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x4_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 7uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 7uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int32x4_t v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      int32x4_t v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x4_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x4_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    int v30 = result - 8;
    ++v11;
    BOOL v31 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    int16x4_t v32 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v33 = a2 + 1;
    uint64_t v34 = v7 - 4;
    do
    {
      int16x8_t v35 = (int16x8_t)vshrq_n_u16(*_X4, 7uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 7uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 6uLL), (uint16x4_t)0xFE00FE00FE00FE00);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

uint64_t sub_1D0CB89F0(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  int16x8_t v13 = vdupq_lane_s16(v11, 0);
  int16x8_t v14 = vdupq_lane_s16(v11, 3);
  int16x8_t v15 = vdupq_lane_s16(v11, 1);
  int16x8_t v16 = vdupq_lane_s16(v11, 2);
  uint64_t v17 = 12 * a4 - 4;
  uint64_t v18 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v21 = (int16x8_t)vshrq_n_u16(*_X7, 6uLL);
    int8x16_t v22 = (int8x16_t)vshrq_n_u16(_X7[1], 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v21, v22, 4uLL);
    int16x8_t v32 = (int16x8_t)vextq_s8((int8x16_t)v21, v22, 8uLL);
    int16x8_t v33 = vmlaq_s16(vmulq_s16(v21, v13), (int16x8_t)vextq_s8((int8x16_t)v21, v22, 0xCuLL), v14);
    uint16x8_t v34 = (uint16x8_t)vmulq_s16(v31, v15);
    uint16x8_t v35 = (uint16x8_t)vmulq_s16(v32, v16);
    int16x8_t v36 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8), *(int16x4_t *)v33.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v34, v35), v33), 2uLL);
    _X7 = _X11 - 4;
    int16x8_t v38 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 6uLL);
    int8x16_t v39 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v38, v39, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v38, v39, 8uLL);
    int16x8_t v47 = vmlaq_s16(vmulq_s16(v38, v13), (int16x8_t)vextq_s8((int8x16_t)v38, v39, 0xCuLL), v14);
    uint16x8_t v48 = (uint16x8_t)vmulq_s16(v45, v15);
    uint16x8_t v49 = (uint16x8_t)vmulq_s16(v46, v16);
    int16x8_t v50 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v48.i8), *(int16x4_t *)v47.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v48, v49), v47), 2uLL);
    int16x8_t v51 = (int16x8_t)vshrq_n_u16(*_X7, 6uLL);
    int8x16_t v52 = (int8x16_t)vshrq_n_u16(_X7[1], 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v57 = (int16x8_t)vextq_s8((int8x16_t)v51, v52, 4uLL);
    int16x8_t v58 = (int16x8_t)vextq_s8((int8x16_t)v51, v52, 8uLL);
    int16x8_t v59 = vmlaq_s16(vmulq_s16(v51, v13), (int16x8_t)vextq_s8((int8x16_t)v51, v52, 0xCuLL), v14);
    uint16x8_t v60 = (uint16x8_t)vmulq_s16(v57, v15);
    uint16x8_t v61 = (uint16x8_t)vmulq_s16(v58, v16);
    int16x8_t v62 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v60.i8), *(int16x4_t *)v59.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v60, v61), v59), 2uLL);
    int32x4_t v63 = (int16x8_t *)a7;
    uint64_t v64 = a5;
    int v65 = a2 + 1;
    do
    {
      _X21 = v64 + v18;
      int16x8_t v67 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v64 + v18 - 4), 6uLL);
      int8x16_t v68 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v64 + v18 + 12), 6uLL);
      int16x8_t v69 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 4uLL);
      int16x8_t v70 = (int16x8_t)vextq_s8((int8x16_t)v67, v68, 8uLL);
      int16x8_t v71 = vmlaq_s16(vmulq_s16(v67, v13), (int16x8_t)vextq_s8((int8x16_t)v67, v68, 0xCuLL), v14);
      uint16x8_t v72 = (uint16x8_t)vmulq_s16(v69, v15);
      int32x4_t v73 = (int32x4_t)vmulq_s16(v70, v16);
      int32x4_t v74 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v72.i8);
      int32x4_t v75 = (int32x4_t)vaddl_high_u16(v72, (uint16x8_t)v73);
      v73.i64[0] = 0x38000000380000;
      v73.i64[1] = 0x38000000380000;
      v76.i64[0] = 0x38000000380000;
      v76.i64[1] = 0x38000000380000;
      int32x4_t v77 = vmlal_lane_s16(vmlal_lane_s16(v73, *(int16x4_t *)v36.i8, v12, 0), *(int16x4_t *)v50.i8, v12, 1);
      int32x4_t v78 = vmlal_high_lane_s16(vmlal_high_lane_s16(v76, v36, v12, 0), v50, v12, 1);
      int16x8_t v36 = v50;
      int16x8_t v50 = v62;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v64 + v17;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int32x4_t v83 = vaddw_s16(v74, *(int16x4_t *)v71.i8);
      int32x4_t v84 = vaddw_high_s16(v75, v71);
      *(int16x4_t *)v83.i8 = vshrn_n_s32(v83, 2uLL);
      int32x4_t v85 = vmlal_lane_s16(vmlal_lane_s16(v77, *(int16x4_t *)v50.i8, v12, 2), *(int16x4_t *)v83.i8, v12, 3);
      int16x8_t v62 = vshrn_high_n_s32(*(int16x4_t *)v83.i8, v84, 2uLL);
      *int32x4_t v63 = vshrn_high_n_s32(vshrn_n_s32(v85, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v78, v50, v12, 2), vshrn_n_s32(v84, 2uLL), v12, 3), 6uLL);
      --v65;
      v64 += v9;
      int32x4_t v63 = (int16x8_t *)((char *)v63 + v10);
    }
    while (v65 > 1);
    a7 += 2;
    _X11 += 16;
    int v86 = result - 8;
    v17 += 16;
    v18 += 16;
    BOOL v87 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v87);
  if (v86)
  {
LABEL_9:
    int16x4_t v88 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v89 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v91 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 6uLL);
    int16x8_t v92 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 6uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v97 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v92.i8, v88, 1), v91, v88, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v88, 2), v92, v88, 3), 2uLL);
    int16x8_t v98 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 6uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v104 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v98.i8, v88, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 6uLL), v88, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v98, (int8x16_t)v98, 4uLL), v88, 2), v98, v88, 3), 2uLL);
    *(uint16x4_t *)v98.i8 = vshr_n_u16(*_X13, 6uLL);
    int16x8_t v105 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 6uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v110 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v105.i8, v88, 1), *(int16x4_t *)v98.i8, v88, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v105, (int8x16_t)v105, 4uLL), v88, 2), v105, v88, 3), 2uLL);
    int v111 = a2 + 1;
    do
    {
      v112.i64[0] = 0x38000000380000;
      v112.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      int16x8_t v114 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 6uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v119 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v112, v97, v89, 0), v104, v89, 1), v110, v89, 2);
      int16x4_t v97 = v104;
      int16x4_t v104 = v110;
      int16x4_t v110 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v114.i8, v88, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 6uLL), v88, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v114, (int8x16_t)v114, 4uLL), v88, 2), v114, v88, 3), 2uLL);
      --v111;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v119, v110, v89, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v111 > 1);
  }
  return result;
}

unint64_t sub_1D0CB8DA4(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    int16x8_t v20 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x8_t v12 = vdupq_lane_s16(v11, 0);
  int16x8_t v13 = vdupq_lane_s16(v11, 3);
  int16x8_t v14 = vdupq_lane_s16(v11, 1);
  int16x8_t v15 = vdupq_lane_s16(v11, 2);
  int16x8_t v16 = &_X4[a4];
  uint64_t v17 = &_X4->i8[4 * a4];
  uint64_t v18 = &_X4->i8[14 * a4];
  int16x8_t v19 = &_X4->i8[6 * a4];
  int16x8_t v20 = a7;
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v22 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v22, 6uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v29 = (int16x8_t)vshrq_n_u16(*_X4, 6uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v33 = v19;
    uint16x8_t v34 = v18;
    uint16x8_t v35 = v17;
    int16x8_t v36 = (int16x8_t)vshrq_n_u16(v32, 6uLL);
    __asm { PRFM            #0, [X23] }
    int16x8_t v38 = v16;
    int v39 = a2 + 2;
    int16x8_t v40 = a7;
    int32x4_t v41 = (char *)a7 + 2 * a6;
    do
    {
      int16x8_t v42 = vmulq_s16(v23, v12);
      int16x8_t v23 = v36;
      _X27 = (uint64_t)&v35[v10 + 30];
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v33[v10 + 30];
      uint16x8_t v46 = (uint16x8_t)vmulq_s16(v29, v14);
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v35[v10], 6uLL);
      uint16x8_t v48 = (uint16x8_t)vmulq_s16(v36, v15);
      uint16x8_t v49 = (uint16x8_t)vmulq_s16(v36, v14);
      int16x8_t v36 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v33[v10], 6uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v34[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v38[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      int16x8_t v57 = vmlaq_s16(v42, v47, v13);
      int32x4_t v58 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v48.i8), *(int16x4_t *)v57.i8);
      int32x4_t v59 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v46, v48), v57);
      int16x8_t v60 = vmlaq_s16(vmulq_s16(v29, v12), v36, v13);
      uint16x8_t v61 = (uint16x8_t)vmulq_s16(v47, v15);
      *(int16x4_t *)v58.i8 = vadd_s16(vshrn_n_s32(v58, 2uLL), (int16x4_t)0xE000E000E000E000);
      v58.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v59, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v40[v10 / 8].i8 = v58;
      *(int16x4_t *)v59.i8 = vadd_s16(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v49.i8), *(int16x4_t *)v60.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
      v59.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16((int32x4_t)vaddl_high_u16(v61, v49), v60), 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v41[v10] = v59;
      v41 += v9;
      int16x8_t v40 = (int16x4_t *)((char *)v40 + v9);
      v39 -= 2;
      int16x8_t v38 = (uint16x8_t *)((char *)v38 + v8);
      v35 += v8;
      v34 += v8;
      v33 += v8;
      int16x8_t v29 = v47;
    }
    while (v39 > 2);
    v20 += 2;
    ++_X4;
    int v62 = result - 8;
    v10 += 16;
    BOOL v63 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v63);
  if (v62)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v65 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v66 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v67 = (int16x4_t)vshr_n_u16(v65, 6uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v69 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 6uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v72 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v73 = (int16x4_t)vshr_n_u16(v72, 6uLL);
    __asm { PRFM            #0, [X11] }
    int v75 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v80 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v82 = vmlal_lane_s16(vmull_lane_s16(v69, v66, 1), v67, v66, 0);
      int32x4_t v83 = vmlal_lane_s16(vmull_lane_s16(v73, v66, 1), v69, v66, 0);
      int16x4_t v69 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 6uLL);
      int32x4_t v84 = vmlal_lane_s16(v82, v73, v66, 2);
      int16x4_t v67 = v73;
      int16x4_t v73 = (int16x4_t)vshr_n_u16(v80, 6uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *int16x8_t v20 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v84, v69, v66, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v20 + 2 * a6) = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v83, v69, v66, 2), v73, v66, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      int16x8_t v20 = (int16x4_t *)((char *)v20 + v9);
      v75 -= 2;
    }
    while (v75 > 2);
  }
  return result;
}

uint64_t sub_1D0CB9058(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x8_t v11 = vdupq_lane_s16(v10, 0);
  int16x8_t v12 = vdupq_lane_s16(v10, 3);
  int16x8_t v13 = vdupq_lane_s16(v10, 1);
  int16x8_t v14 = vdupq_lane_s16(v10, 2);
  int16x8_t v15 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x8_t v16 = a7;
    _X15 = v15;
    int v18 = a2 + 1;
    do
    {
      int16x8_t v19 = (int16x8_t)vshrq_n_u16(*_X15, 6uLL);
      int8x16_t v20 = (int8x16_t)vshrq_n_u16(_X15[1], 6uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v19, v20, 4uLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v19, v20, 8uLL);
      int16x8_t v30 = vmlaq_s16(vmulq_s16(v19, v11), (int16x8_t)vextq_s8((int8x16_t)v19, v20, 0xCuLL), v12);
      uint16x8_t v31 = (uint16x8_t)vmulq_s16(v28, v13);
      uint16x8_t v32 = (uint16x8_t)vmulq_s16(v29, v14);
      int32x4_t v33 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v32.i8, *(uint16x4_t *)v31.i8);
      int32x4_t v34 = (int32x4_t)vaddl_high_u16(v31, v32);
      int32x4_t v35 = vaddw_s16(v33, *(int16x4_t *)v30.i8);
      int32x4_t v36 = vaddw_high_s16(v34, v30);
      *(int16x4_t *)v34.i8 = vadd_s16(vshrn_n_s32(v35, 2uLL), (int16x4_t)0xE000E000E000E000);
      v34.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v36, 2uLL), (int16x4_t)0xE000E000E000E000);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *int16x8_t v16 = v34;
      --v18;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v16 = (_OWORD *)((char *)v16 + v9);
    }
    while (v18 > 1);
    a7 += 2;
    ++_X4;
    int v38 = result - 8;
    ++v15;
    BOOL v39 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v39);
  if (v38)
  {
LABEL_9:
    int16x4_t v40 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v41 = a2 + 1;
    uint64_t v42 = v7 - 4;
    do
    {
      int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X4, 6uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v42];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v43.i8, v40, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 6uLL), v40, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL), v40, 2), v43, v40, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      --v41;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v41 > 1);
  }
  return result;
}

uint64_t sub_1D0CB91B8(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  int16x8_t v13 = vdupq_lane_s16(v11, 0);
  int16x8_t v14 = vdupq_lane_s16(v11, 3);
  int16x8_t v15 = vdupq_lane_s16(v11, 1);
  int16x8_t v16 = vdupq_lane_s16(v11, 2);
  uint64_t v17 = 12 * a4 - 4;
  uint64_t v18 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v21 = (int16x8_t)vshrq_n_u16(*_X7, 6uLL);
    int8x16_t v22 = (int8x16_t)vshrq_n_u16(_X7[1], 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v21, v22, 4uLL);
    int16x8_t v32 = (int16x8_t)vextq_s8((int8x16_t)v21, v22, 8uLL);
    int16x8_t v33 = vmlaq_s16(vmulq_s16(v21, v13), (int16x8_t)vextq_s8((int8x16_t)v21, v22, 0xCuLL), v14);
    uint16x8_t v34 = (uint16x8_t)vmulq_s16(v31, v15);
    uint16x8_t v35 = (uint16x8_t)vmulq_s16(v32, v16);
    int16x8_t v36 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v34.i8), *(int16x4_t *)v33.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v34, v35), v33), 2uLL);
    _X7 = _X11 - 4;
    int16x8_t v38 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 6uLL);
    int8x16_t v39 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v45 = (int16x8_t)vextq_s8((int8x16_t)v38, v39, 4uLL);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v38, v39, 8uLL);
    int16x8_t v47 = vmlaq_s16(vmulq_s16(v38, v13), (int16x8_t)vextq_s8((int8x16_t)v38, v39, 0xCuLL), v14);
    uint16x8_t v48 = (uint16x8_t)vmulq_s16(v45, v15);
    uint16x8_t v49 = (uint16x8_t)vmulq_s16(v46, v16);
    int16x8_t v50 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v48.i8), *(int16x4_t *)v47.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v48, v49), v47), 2uLL);
    int16x8_t v51 = (int16x8_t)vshrq_n_u16(*_X7, 6uLL);
    int8x16_t v52 = (int8x16_t)vshrq_n_u16(_X7[1], 6uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v57 = (int16x8_t)vextq_s8((int8x16_t)v51, v52, 4uLL);
    int16x8_t v58 = (int16x8_t)vextq_s8((int8x16_t)v51, v52, 8uLL);
    int16x8_t v59 = vmlaq_s16(vmulq_s16(v51, v13), (int16x8_t)vextq_s8((int8x16_t)v51, v52, 0xCuLL), v14);
    uint16x8_t v60 = (uint16x8_t)vmulq_s16(v57, v15);
    uint16x8_t v61 = (uint16x8_t)vmulq_s16(v58, v16);
    int16x8_t v62 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v60.i8), *(int16x4_t *)v59.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v60, v61), v59), 2uLL);
    BOOL v63 = a7;
    uint64_t v64 = a5;
    int v65 = a2 + 1;
    do
    {
      int32x4_t v66 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v50.i8, v12, 1), *(int16x4_t *)v36.i8, v12, 0);
      int32x4_t v67 = vmlal_high_lane_s16(vmull_high_lane_s16(v50, v12, 1), v36, v12, 0);
      int16x8_t v36 = v50;
      int16x8_t v50 = v62;
      _X21 = v64 + v18;
      int16x8_t v69 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v64 + v18 - 4), 6uLL);
      int8x16_t v70 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v64 + v18 + 12), 6uLL);
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v64 + v17;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int16x8_t v75 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 4uLL);
      int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v69, v70, 8uLL);
      int16x8_t v77 = vmlaq_s16(vmulq_s16(v69, v13), (int16x8_t)vextq_s8((int8x16_t)v69, v70, 0xCuLL), v14);
      uint16x8_t v78 = (uint16x8_t)vmulq_s16(v75, v15);
      uint16x8_t v79 = (uint16x8_t)vmulq_s16(v76, v16);
      int32x4_t v80 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v79.i8, *(uint16x4_t *)v78.i8);
      int32x4_t v81 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v78, v79), v77);
      *(int16x4_t *)v77.i8 = vshrn_n_s32(vaddw_s16(v80, *(int16x4_t *)v77.i8), 2uLL);
      *(uint16x4_t *)v66.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v66, *(int16x4_t *)v50.i8, v12, 2), *(int16x4_t *)v77.i8, v12, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v66.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v67, v50, v12, 2), vshrn_n_s32(v81, 2uLL), v12, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int16x8_t v62 = vshrn_high_n_s32(*(int16x4_t *)v77.i8, v81, 2uLL);
      *BOOL v63 = v66;
      --v65;
      v64 += v9;
      BOOL v63 = (_OWORD *)((char *)v63 + v10);
    }
    while (v65 > 1);
    a7 += 2;
    _X11 += 16;
    int v82 = result - 8;
    v17 += 16;
    v18 += 16;
    BOOL v83 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v83);
  if (v82)
  {
LABEL_9:
    int16x4_t v84 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v85 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v87 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 6uLL);
    int16x8_t v88 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 6uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v93 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v88.i8, v84, 1), v87, v84, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 4uLL), v84, 2), v88, v84, 3), 2uLL);
    int16x8_t v94 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 6uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v100 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v94.i8, v84, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 6uLL), v84, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 4uLL), v84, 2), v94, v84, 3), 2uLL);
    *(uint16x4_t *)v88.i8 = vshr_n_u16(*_X13, 6uLL);
    int16x8_t v101 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 6uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v106 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, v84, 1), *(int16x4_t *)v88.i8, v84, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL), v84, 2), v101, v84, 3), 2uLL);
    int v107 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      int16x8_t v109 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 6uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v114 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v100, v85, 1), v93, v85, 0), v106, v85, 2);
      int16x4_t v93 = v100;
      int16x4_t v100 = v106;
      int16x4_t v106 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v109.i8, v84, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 6uLL), v84, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 4uLL), v84, 2), v109, v84, 3), 2uLL);
      --v107;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v114, v106, v85, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v107 > 1);
  }
  return result;
}

unint64_t sub_1D0CB9578(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    int8x16_t v20 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x8_t v12 = vdupq_lane_s16(v11, 0);
  int16x8_t v13 = vdupq_lane_s16(v11, 3);
  int16x8_t v14 = vdupq_lane_s16(v11, 1);
  int16x8_t v15 = vdupq_lane_s16(v11, 2);
  int16x8_t v16 = &_X4[a4];
  uint64_t v17 = &_X4->i8[4 * a4];
  uint64_t v18 = &_X4->i8[14 * a4];
  int16x8_t v19 = &_X4->i8[6 * a4];
  int8x16_t v20 = a7;
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v22 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v23 = (int16x8_t)vshrq_n_u16(v22, 6uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v29 = (int16x8_t)vshrq_n_u16(*_X4, 6uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v32 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v33 = v19;
    uint16x8_t v34 = v18;
    uint16x8_t v35 = v17;
    int16x8_t v36 = (int16x8_t)vshrq_n_u16(v32, 6uLL);
    __asm { PRFM            #0, [X23] }
    int16x8_t v38 = v16;
    int v39 = a2 + 2;
    int16x4_t v40 = a7;
    int v41 = (char *)a7 + 2 * a6;
    do
    {
      int16x8_t v42 = vmulq_s16(v23, v12);
      int16x8_t v23 = v36;
      _X27 = (uint64_t)&v35[v10 + 30];
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v33[v10 + 30];
      uint16x8_t v46 = (uint16x8_t)vmulq_s16(v29, v14);
      int16x8_t v47 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v35[v10], 6uLL);
      uint16x8_t v48 = (uint16x8_t)vmulq_s16(v36, v15);
      uint16x8_t v49 = (uint16x8_t)vmulq_s16(v36, v14);
      int16x8_t v36 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v33[v10], 6uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v34[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v38[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      int16x8_t v57 = vmlaq_s16(v42, v47, v13);
      int32x4_t v58 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v48.i8), *(int16x4_t *)v57.i8);
      int32x4_t v59 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v46, v48), v57);
      int16x8_t v60 = vmlaq_s16(vmulq_s16(v29, v12), v36, v13);
      uint16x8_t v61 = (uint16x8_t)vmulq_s16(v47, v15);
      *(uint16x4_t *)v58.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v58, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v58.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v59, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int32x4_t *)v40[v10 / 8].i8 = v58;
      *(uint16x4_t *)v59.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v61.i8, *(uint16x4_t *)v49.i8), *(int16x4_t *)v60.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v59.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16((int32x4_t)vaddl_high_u16(v61, v49), v60), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int32x4_t *)&v41[v10] = v59;
      v41 += v9;
      int16x4_t v40 = (uint16x4_t *)((char *)v40 + v9);
      v39 -= 2;
      int16x8_t v38 = (uint16x8_t *)((char *)v38 + v8);
      v35 += v8;
      v34 += v8;
      v33 += v8;
      int16x8_t v29 = v47;
    }
    while (v39 > 2);
    v20 += 2;
    ++_X4;
    int v62 = result - 8;
    v10 += 16;
    BOOL v63 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v63);
  if (v62)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v65 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v66 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v67 = (int16x4_t)vshr_n_u16(v65, 6uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v69 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 6uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v72 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v73 = (int16x4_t)vshr_n_u16(v72, 6uLL);
    __asm { PRFM            #0, [X11] }
    int v75 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v80 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v82 = vmlal_lane_s16(vmull_lane_s16(v69, v66, 1), v67, v66, 0);
      int32x4_t v83 = vmlal_lane_s16(vmull_lane_s16(v73, v66, 1), v69, v66, 0);
      int16x4_t v69 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 6uLL);
      int32x4_t v84 = vmlal_lane_s16(v82, v73, v66, 2);
      int16x4_t v67 = v73;
      int16x4_t v73 = (int16x4_t)vshr_n_u16(v80, 6uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *int8x16_t v20 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v84, v69, v66, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(uint16x4_t *)((char *)v20 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v83, v69, v66, 2), v73, v66, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int8x16_t v20 = (uint16x4_t *)((char *)v20 + v9);
      v75 -= 2;
    }
    while (v75 > 2);
  }
  return result;
}

uint64_t sub_1D0CB982C(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x8_t v11 = vdupq_lane_s16(v10, 0);
  int16x8_t v12 = vdupq_lane_s16(v10, 3);
  int16x8_t v13 = vdupq_lane_s16(v10, 1);
  int16x8_t v14 = vdupq_lane_s16(v10, 2);
  int16x8_t v15 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x8_t v16 = a7;
    _X15 = v15;
    int v18 = a2 + 1;
    do
    {
      int16x8_t v19 = (int16x8_t)vshrq_n_u16(*_X15, 6uLL);
      int8x16_t v20 = (int8x16_t)vshrq_n_u16(_X15[1], 6uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v19, v20, 4uLL);
      int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v19, v20, 8uLL);
      int16x8_t v30 = vmlaq_s16(vmulq_s16(v19, v11), (int16x8_t)vextq_s8((int8x16_t)v19, v20, 0xCuLL), v12);
      uint16x8_t v31 = (uint16x8_t)vmulq_s16(v28, v13);
      uint16x8_t v32 = (uint16x8_t)vmulq_s16(v29, v14);
      int32x4_t v33 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v32.i8, *(uint16x4_t *)v31.i8);
      int32x4_t v34 = (int32x4_t)vaddl_high_u16(v31, v32);
      int32x4_t v35 = vaddw_s16(v33, *(int16x4_t *)v30.i8);
      int32x4_t v36 = vaddw_high_s16(v34, v30);
      *(uint16x4_t *)v34.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v35, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v34.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v36, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *int16x8_t v16 = v34;
      --v18;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x8_t v16 = (_OWORD *)((char *)v16 + v9);
    }
    while (v18 > 1);
    a7 += 2;
    ++_X4;
    int v38 = result - 8;
    ++v15;
    BOOL v39 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v39);
  if (v38)
  {
LABEL_9:
    int16x4_t v40 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v41 = a2 + 1;
    uint64_t v42 = v7 - 4;
    do
    {
      int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X4, 6uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v42];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v43.i8, v40, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 6uLL), v40, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL), v40, 2), v43, v40, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      --v41;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v41 > 1);
  }
  return result;
}

uint64_t sub_1D0CB998C(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  uint64_t v13 = 12 * a4 - 4;
  uint64_t v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v17 = (int16x8_t)vshrq_n_u16(*_X7, 5uLL);
    int8x16_t v18 = (int8x16_t)vshrq_n_u16(_X7[1], 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    int16x8_t v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 3uLL);
    _X7 = _X11 - 4;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 5uLL);
    int8x16_t v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    int16x8_t v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    int16x8_t v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 3uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X7, 5uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X7[1], 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    int16x8_t v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 3uLL);
    int8x16_t v53 = (int16x8_t *)a7;
    uint64_t v54 = a5;
    int v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      int16x8_t v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 5uLL);
      int8x16_t v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 5uLL);
      int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      int32x4_t v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      int32x4_t v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v57.i64[0] = 0x38000000380000;
      v57.i64[1] = 0x38000000380000;
      v64.i64[0] = 0x38000000380000;
      v64.i64[1] = 0x38000000380000;
      int32x4_t v65 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v57, *(int16x4_t *)v30.i8, v12, 0), *(int16x4_t *)v42.i8, v12, 1);
      int32x4_t v66 = vmlal_high_lane_s16(vmlal_high_lane_s16(v64, v30, v12, 0), v42, v12, 1);
      int16x8_t v30 = v42;
      int16x8_t v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int32x4_t v71 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      int16x4_t v72 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 3uLL);
      int32x4_t v73 = vmlal_lane_s16(vmlal_lane_s16(v65, *(int16x4_t *)v42.i8, v12, 2), v72, v12, 3);
      int16x8_t v52 = vshrn_high_n_s32(v72, v71, 3uLL);
      *int8x16_t v53 = vshrn_high_n_s32(vshrn_n_s32(v73, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v66, v42, v12, 2), vshrn_n_s32(v71, 3uLL), v12, 3), 6uLL);
      --v55;
      v54 += v9;
      int8x16_t v53 = (int16x8_t *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    int v74 = result - 8;
    v13 += 16;
    v14 += 16;
    BOOL v75 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v75);
  if (v74)
  {
LABEL_9:
    int16x4_t v76 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v77 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v79 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 5uLL);
    int16x8_t v80 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 5uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v85 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, v76, 1), v79, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL), v76, 2), v80, v76, 3), 3uLL);
    int16x8_t v86 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 5uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v92 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v86.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 5uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL), v76, 2), v86, v76, 3), 3uLL);
    *(uint16x4_t *)v86.i8 = vshr_n_u16(*_X13, 5uLL);
    int16x8_t v93 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 5uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v93.i8, v76, 1), *(int16x4_t *)v86.i8, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v76, 2), v93, v76, 3), 3uLL);
    int v99 = a2 + 1;
    do
    {
      v100.i64[0] = 0x38000000380000;
      v100.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      int16x8_t v102 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 5uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v107 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v100, v85, v77, 0), v92, v77, 1), v98, v77, 2);
      int16x4_t v85 = v92;
      int16x4_t v92 = v98;
      int16x4_t v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v102.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 5uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL), v76, 2), v102, v76, 3), 3uLL);
      --v99;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v107, v98, v77, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v99 > 1);
  }
  return result;
}

unint64_t sub_1D0CB9D30(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    uint64_t v14 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x4_t v12 = &_X4->i8[14 * a4];
  uint64_t v13 = &_X4->i8[6 * a4];
  uint64_t v14 = a7;
  int16x8_t v15 = &_X4[a4];
  int16x8_t v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v19 = (int16x8_t)vshrq_n_u16(v18, 5uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v25 = (int16x8_t)vshrq_n_u16(*_X4, 5uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v29 = v13;
    int16x8_t v30 = v12;
    uint16x8_t v31 = v16;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(v28, 5uLL);
    __asm { PRFM            #0, [X23] }
    int32x4_t v34 = v15;
    int v35 = a2 + 2;
    int32x4_t v36 = a7;
    int16x8_t v37 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      int32x4_t v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      int16x8_t v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      int32x4_t v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      int32x4_t v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      int16x8_t v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 5uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      int32x4_t v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      int32x4_t v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 5uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      int32x4_t v36 = (int16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      int32x4_t v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    int v54 = result - 8;
    v10 += 16;
    BOOL v55 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v57 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v58 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v59 = (int16x4_t)vshr_n_u16(v57, 5uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 5uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v64 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v65 = (int16x4_t)vshr_n_u16(v64, 5uLL);
    __asm { PRFM            #0, [X11] }
    int v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v72 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      int32x4_t v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 5uLL);
      int32x4_t v76 = vmlal_lane_s16(v74, v65, v58, 2);
      int16x4_t v59 = v65;
      int16x4_t v65 = (int16x4_t)vshr_n_u16(v72, 5uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *uint64_t v14 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v14 + 2 * a6) = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      uint64_t v14 = (int16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1D0CB9FD0(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x4_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 5uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 5uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int32x4_t v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      int32x4_t v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v27, 3uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x4_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x4_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    int v30 = result - 8;
    ++v11;
    BOOL v31 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    int16x4_t v32 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v33 = a2 + 1;
    uint64_t v34 = v7 - 4;
    do
    {
      int16x8_t v35 = (int16x8_t)vshrq_n_u16(*_X4, 5uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 5uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 3uLL), (int16x4_t)0xE000E000E000E000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

uint64_t sub_1D0CBA120(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  uint64_t v13 = 12 * a4 - 4;
  uint64_t v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v17 = (int16x8_t)vshrq_n_u16(*_X7, 5uLL);
    int8x16_t v18 = (int8x16_t)vshrq_n_u16(_X7[1], 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    int16x8_t v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 3uLL);
    _X7 = _X11 - 4;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 5uLL);
    int8x16_t v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    int16x8_t v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    int16x8_t v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 3uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X7, 5uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X7[1], 5uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    int16x8_t v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 3uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 3uLL);
    int8x16_t v53 = a7;
    uint64_t v54 = a5;
    int v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      int16x8_t v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 5uLL);
      int8x16_t v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 5uLL);
      int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      int32x4_t v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      int32x4_t v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      int32x4_t v64 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v42.i8, v12, 1), *(int16x4_t *)v30.i8, v12, 0);
      int32x4_t v65 = vmlal_high_lane_s16(vmull_high_lane_s16(v42, v12, 1), v30, v12, 0);
      int16x8_t v30 = v42;
      int16x8_t v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int32x4_t v70 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      int16x4_t v71 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 3uLL);
      *(uint16x4_t *)v60.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v64, *(int16x4_t *)v42.i8, v12, 2), v71, v12, 3), 9uLL), (uint16x4_t)0xF800F800F800F800);
      v60.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v65, v42, v12, 2), vshrn_n_s32(v70, 3uLL), v12, 3), 9uLL), (uint16x4_t)0xF800F800F800F800);
      int16x8_t v52 = vshrn_high_n_s32(v71, v70, 3uLL);
      *int8x16_t v53 = v60;
      --v55;
      v54 += v9;
      int8x16_t v53 = (_OWORD *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    int v72 = result - 8;
    v13 += 16;
    v14 += 16;
    BOOL v73 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v73);
  if (v72)
  {
LABEL_9:
    int16x4_t v74 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v75 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v77 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 5uLL);
    int16x8_t v78 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 5uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v83 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v78.i8, v74, 1), v77, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), v74, 2), v78, v74, 3), 3uLL);
    int16x8_t v84 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 5uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v90 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 5uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL), v74, 2), v84, v74, 3), 3uLL);
    *(uint16x4_t *)v78.i8 = vshr_n_u16(*_X13, 5uLL);
    int16x8_t v91 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 5uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, v74, 1), *(int16x4_t *)v78.i8, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL), v74, 2), v91, v74, 3), 3uLL);
    int v97 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      int16x8_t v99 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 5uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v104 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, v75, 1), v83, v75, 0), v96, v75, 2);
      int16x4_t v83 = v90;
      int16x4_t v90 = v96;
      int16x4_t v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v99.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 5uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), v74, 2), v99, v74, 3), 3uLL);
      --v97;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v104, v96, v75, 3), 9uLL), (uint16x4_t)0xF800F800F800F800);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v97 > 1);
  }
  return result;
}

unint64_t sub_1D0CBA4D0(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    uint64_t v14 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x4_t v12 = &_X4->i8[14 * a4];
  uint64_t v13 = &_X4->i8[6 * a4];
  uint64_t v14 = a7;
  int16x8_t v15 = &_X4[a4];
  int8x16_t v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v19 = (int16x8_t)vshrq_n_u16(v18, 5uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v25 = (int16x8_t)vshrq_n_u16(*_X4, 5uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v29 = v13;
    int16x8_t v30 = v12;
    BOOL v31 = v16;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(v28, 5uLL);
    __asm { PRFM            #0, [X23] }
    uint64_t v34 = v15;
    int v35 = a2 + 2;
    int32x4_t v36 = a7;
    int16x8_t v37 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      int32x4_t v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      int16x8_t v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      int32x4_t v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      int32x4_t v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      int16x8_t v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 5uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      int32x4_t v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      int32x4_t v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 5uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      int32x4_t v36 = (uint16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      uint64_t v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    int v54 = result - 8;
    v10 += 16;
    BOOL v55 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v57 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v58 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v59 = (int16x4_t)vshr_n_u16(v57, 5uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 5uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v64 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v65 = (int16x4_t)vshr_n_u16(v64, 5uLL);
    __asm { PRFM            #0, [X11] }
    int v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v72 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      int32x4_t v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 5uLL);
      int32x4_t v76 = vmlal_lane_s16(v74, v65, v58, 2);
      int16x4_t v59 = v65;
      int16x4_t v65 = (int16x4_t)vshr_n_u16(v72, 5uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *uint64_t v14 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      *(uint16x4_t *)((char *)v14 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      uint64_t v14 = (uint16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1D0CBA770(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x4_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 5uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 5uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int32x4_t v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      int32x4_t v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xF800F800F800F800);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x4_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x4_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    int v30 = result - 8;
    ++v11;
    BOOL v31 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    int16x4_t v32 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v33 = a2 + 1;
    uint64_t v34 = v7 - 4;
    do
    {
      int16x8_t v35 = (int16x8_t)vshrq_n_u16(*_X4, 5uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 5uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 6uLL), (uint16x4_t)0xF800F800F800F800);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

uint64_t sub_1D0CBA8C0(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  uint64_t v13 = 12 * a4 - 4;
  uint64_t v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v17 = (int16x8_t)vshrq_n_u16(*_X7, 4uLL);
    int8x16_t v18 = (int8x16_t)vshrq_n_u16(_X7[1], 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    int16x8_t v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 4uLL);
    _X7 = _X11 - 4;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 4uLL);
    int8x16_t v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    int16x8_t v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    int16x8_t v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 4uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X7, 4uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X7[1], 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    int16x8_t v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 4uLL);
    int8x16_t v53 = (int16x8_t *)a7;
    uint64_t v54 = a5;
    int v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      int16x8_t v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 4uLL);
      int8x16_t v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 4uLL);
      int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      int32x4_t v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      int32x4_t v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      v57.i64[0] = 0x38000000380000;
      v57.i64[1] = 0x38000000380000;
      v64.i64[0] = 0x38000000380000;
      v64.i64[1] = 0x38000000380000;
      int32x4_t v65 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v57, *(int16x4_t *)v30.i8, v12, 0), *(int16x4_t *)v42.i8, v12, 1);
      int32x4_t v66 = vmlal_high_lane_s16(vmlal_high_lane_s16(v64, v30, v12, 0), v42, v12, 1);
      int16x8_t v30 = v42;
      int16x8_t v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int32x4_t v71 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      int16x4_t v72 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 4uLL);
      int32x4_t v73 = vmlal_lane_s16(vmlal_lane_s16(v65, *(int16x4_t *)v42.i8, v12, 2), v72, v12, 3);
      int16x8_t v52 = vshrn_high_n_s32(v72, v71, 4uLL);
      *int8x16_t v53 = vshrn_high_n_s32(vshrn_n_s32(v73, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v66, v42, v12, 2), vshrn_n_s32(v71, 4uLL), v12, 3), 6uLL);
      --v55;
      v54 += v9;
      int8x16_t v53 = (int16x8_t *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    int v74 = result - 8;
    v13 += 16;
    v14 += 16;
    BOOL v75 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v75);
  if (v74)
  {
LABEL_9:
    int16x4_t v76 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v77 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v79 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 4uLL);
    int16x8_t v80 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 4uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v85 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, v76, 1), v79, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL), v76, 2), v80, v76, 3), 4uLL);
    int16x8_t v86 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 4uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v92 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v86.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 4uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL), v76, 2), v86, v76, 3), 4uLL);
    *(uint16x4_t *)v86.i8 = vshr_n_u16(*_X13, 4uLL);
    int16x8_t v93 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 4uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v93.i8, v76, 1), *(int16x4_t *)v86.i8, v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v76, 2), v93, v76, 3), 4uLL);
    int v99 = a2 + 1;
    do
    {
      v100.i64[0] = 0x38000000380000;
      v100.i64[1] = 0x38000000380000;
      _X14 = _X11 + v8;
      int16x8_t v102 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 4uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v107 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v100, v85, v77, 0), v92, v77, 1), v98, v77, 2);
      int16x4_t v85 = v92;
      int16x4_t v92 = v98;
      int16x4_t v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v102.i8, v76, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 4uLL), v76, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL), v76, 2), v102, v76, 3), 4uLL);
      --v99;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v107, v98, v77, 3), 6uLL);
      _X11 += v9;
      a7 = (int16x4_t *)((char *)a7 + v10);
    }
    while (v99 > 1);
  }
  return result;
}

unint64_t sub_1D0CBAC64(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    uint64_t v14 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x4_t v12 = &_X4->i8[14 * a4];
  uint64_t v13 = &_X4->i8[6 * a4];
  uint64_t v14 = a7;
  int16x8_t v15 = &_X4[a4];
  int8x16_t v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v19 = (int16x8_t)vshrq_n_u16(v18, 4uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v25 = (int16x8_t)vshrq_n_u16(*_X4, 4uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v29 = v13;
    int16x8_t v30 = v12;
    BOOL v31 = v16;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(v28, 4uLL);
    __asm { PRFM            #0, [X23] }
    uint64_t v34 = v15;
    int v35 = a2 + 2;
    int32x4_t v36 = a7;
    int16x8_t v37 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      int32x4_t v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      int16x8_t v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      int32x4_t v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      int32x4_t v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      int16x8_t v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 4uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      int32x4_t v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      int32x4_t v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 4uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(int16x4_t *)v45.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      v45.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      int32x4_t v36 = (int16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      uint64_t v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    int v54 = result - 8;
    v10 += 16;
    BOOL v55 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v57 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v58 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v59 = (int16x4_t)vshr_n_u16(v57, 4uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 4uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v64 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v65 = (int16x4_t)vshr_n_u16(v64, 4uLL);
    __asm { PRFM            #0, [X11] }
    int v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v72 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      int32x4_t v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 4uLL);
      int32x4_t v76 = vmlal_lane_s16(v74, v65, v58, 2);
      int16x4_t v59 = v65;
      int16x4_t v65 = (int16x4_t)vshr_n_u16(v72, 4uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *uint64_t v14 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v14 + 2 * a6) = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      uint64_t v14 = (int16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1D0CBAF04(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x4_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 4uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 4uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int32x4_t v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      int32x4_t v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(int16x4_t *)v15.i8 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      v15.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v27, 4uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x4_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x4_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    int v30 = result - 8;
    ++v11;
    BOOL v31 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    int16x4_t v32 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v33 = a2 + 1;
    uint64_t v34 = v7 - 4;
    do
    {
      int16x8_t v35 = (int16x8_t)vshrq_n_u16(*_X4, 4uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 4uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 4uLL), (int16x4_t)0xE000E000E000E000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

uint64_t sub_1D0CBB054(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v11 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v12 = qword_1D0D7FC20[2 * v7 - 2];
  uint64_t v13 = 12 * a4 - 4;
  uint64_t v14 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (uint16x8_t *)(_X11 + 2 * (-2 - a4));
    int16x8_t v17 = (int16x8_t)vshrq_n_u16(*_X7, 4uLL);
    int8x16_t v18 = (int8x16_t)vshrq_n_u16(_X7[1], 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v27 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 4uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 8uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8((int8x16_t)v17, v18, 0xCuLL);
    int16x8_t v30 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, v11, 1), *(int16x4_t *)v17.i8, v11, 0), *(int16x4_t *)v28.i8, v11, 2), *(int16x4_t *)v29.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v27, v11, 1), v17, v11, 0), v28, v11, 2), v29, v11, 3), 4uLL);
    _X7 = _X11 - 4;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 - 4), 4uLL);
    int8x16_t v33 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 12), 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (uint16x8_t *)(_X11 - 4 + 2 * a4);
    int16x8_t v39 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 4uLL);
    int16x8_t v40 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 8uLL);
    int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v32, v33, 0xCuLL);
    int16x8_t v42 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, v11, 1), *(int16x4_t *)v32.i8, v11, 0), *(int16x4_t *)v40.i8, v11, 2), *(int16x4_t *)v41.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v39, v11, 1), v32, v11, 0), v40, v11, 2), v41, v11, 3), 4uLL);
    int16x8_t v43 = (int16x8_t)vshrq_n_u16(*_X7, 4uLL);
    int8x16_t v44 = (int8x16_t)vshrq_n_u16(_X7[1], 4uLL);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = &_X7->i8[8 * a4];
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v49 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 4uLL);
    int16x8_t v50 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 8uLL);
    int16x8_t v51 = (int16x8_t)vextq_s8((int8x16_t)v43, v44, 0xCuLL);
    int16x8_t v52 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v49.i8, v11, 1), *(int16x4_t *)v43.i8, v11, 0), *(int16x4_t *)v50.i8, v11, 2), *(int16x4_t *)v51.i8, v11, 3), 4uLL), vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v49, v11, 1), v43, v11, 0), v50, v11, 2), v51, v11, 3), 4uLL);
    int8x16_t v53 = a7;
    uint64_t v54 = a5;
    int v55 = a2 + 1;
    do
    {
      _X21 = v54 + v14;
      int16x8_t v57 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 - 4), 4uLL);
      int8x16_t v58 = (int8x16_t)vshrq_n_u16(*(uint16x8_t *)(v54 + v14 + 12), 4uLL);
      int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 4uLL);
      int16x8_t v60 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 8uLL);
      int16x8_t v61 = (int16x8_t)vextq_s8((int8x16_t)v57, v58, 0xCuLL);
      int32x4_t v62 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v11, 1), *(int16x4_t *)v57.i8, v11, 0);
      int32x4_t v63 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v11, 1), v57, v11, 0);
      int32x4_t v64 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v42.i8, v12, 1), *(int16x4_t *)v30.i8, v12, 0);
      int32x4_t v65 = vmlal_high_lane_s16(vmull_high_lane_s16(v42, v12, 1), v30, v12, 0);
      int16x8_t v30 = v42;
      int16x8_t v42 = v52;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v54 + v13;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int32x4_t v70 = vmlal_high_lane_s16(vmlal_high_lane_s16(v63, v60, v11, 2), v61, v11, 3);
      int16x4_t v71 = vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(v62, *(int16x4_t *)v60.i8, v11, 2), *(int16x4_t *)v61.i8, v11, 3), 4uLL);
      *(uint16x4_t *)v60.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v64, *(int16x4_t *)v42.i8, v12, 2), v71, v12, 3), 8uLL), (uint16x4_t)0xF000F000F000F000);
      v60.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v65, v42, v12, 2), vshrn_n_s32(v70, 4uLL), v12, 3), 8uLL), (uint16x4_t)0xF000F000F000F000);
      int16x8_t v52 = vshrn_high_n_s32(v71, v70, 4uLL);
      *int8x16_t v53 = v60;
      --v55;
      v54 += v9;
      int8x16_t v53 = (_OWORD *)((char *)v53 + v10);
    }
    while (v55 > 1);
    a7 += 2;
    _X11 += 16;
    int v72 = result - 8;
    v13 += 16;
    v14 += 16;
    BOOL v73 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v73);
  if (v72)
  {
LABEL_9:
    int16x4_t v74 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v75 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v77 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X13, 4uLL);
    int16x8_t v78 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X13 + 4), 4uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v83 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v78.i8, v74, 1), v77, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), v74, 2), v78, v74, 3), 4uLL);
    int16x8_t v84 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)_X11, 4uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v90 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 - 4), 4uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL), v74, 2), v84, v74, 3), 4uLL);
    *(uint16x4_t *)v78.i8 = vshr_n_u16(*_X13, 4uLL);
    int16x8_t v91 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 2 * a4), 4uLL);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v91.i8, v74, 1), *(int16x4_t *)v78.i8, v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL), v74, 2), v91, v74, 3), 4uLL);
    int v97 = a2 + 1;
    do
    {
      _X14 = _X11 + v8;
      int16x8_t v99 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)(_X11 + 4 * a4), 4uLL);
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v104 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v90, v75, 1), v83, v75, 0), v96, v75, 2);
      int16x4_t v83 = v90;
      int16x4_t v90 = v96;
      int16x4_t v96 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v99.i8, v74, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(_X11 + v8 - 4), 4uLL), v74, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), v74, 2), v99, v74, 3), 4uLL);
      --v97;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v104, v96, v75, 3), 8uLL), (uint16x4_t)0xF000F000F000F000);
      _X11 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v10);
    }
    while (v97 > 1);
  }
  return result;
}

unint64_t sub_1D0CBB404(unint64_t result, int a2, unint64_t a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    uint64_t v14 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x4_t v12 = &_X4->i8[14 * a4];
  uint64_t v13 = &_X4->i8[6 * a4];
  uint64_t v14 = a7;
  int16x8_t v15 = &_X4[a4];
  int8x16_t v16 = &_X4->i8[4 * a4];
  do
  {
    _X20 = &_X4->i8[-2 * a4];
    uint16x8_t v18 = *(uint16x8_t *)_X20;
    _X20 += 30;
    int16x8_t v19 = (int16x8_t)vshrq_n_u16(v18, 4uLL);
    __asm { PRFM            #0, [X20] }
    int16x8_t v25 = (int16x8_t)vshrq_n_u16(*_X4, 4uLL);
    __asm { PRFUM           #0, [X4,#0x1E] }
    _X23 = &_X4->i8[2 * a4];
    uint16x8_t v28 = *(uint16x8_t *)_X23;
    _X23 += 30;
    int16x8_t v29 = v13;
    int16x8_t v30 = v12;
    BOOL v31 = v16;
    int16x8_t v32 = (int16x8_t)vshrq_n_u16(v28, 4uLL);
    __asm { PRFM            #0, [X23] }
    uint64_t v34 = v15;
    int v35 = a2 + 2;
    int32x4_t v36 = a7;
    int16x8_t v37 = (char *)a7 + 2 * a6;
    do
    {
      int32x4_t v38 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v25.i8, v11, 1), *(int16x4_t *)v19.i8, v11, 0);
      int32x4_t v39 = vmlal_high_lane_s16(vmull_high_lane_s16(v25, v11, 1), v19, v11, 0);
      int16x8_t v19 = v32;
      _X27 = (uint64_t)&v31[v10 + 30];
      int32x4_t v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v32.i8, v11, 1), *(int16x4_t *)v25.i8, v11, 0);
      int32x4_t v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v32, v11, 1), v25, v11, 0);
      int16x8_t v25 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v31[v10], 4uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = (uint64_t)&v29[v10 + 30];
      int32x4_t v45 = vmlal_lane_s16(v38, *(int16x4_t *)v32.i8, v11, 2);
      int32x4_t v46 = vmlal_high_lane_s16(v39, v32, v11, 2);
      int16x8_t v32 = (int16x8_t)vshrq_n_u16(*(uint16x8_t *)&v29[v10], 4uLL);
      __asm { PRFM            #0, [X27] }
      _X27 = &v30[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v34[v10 / 0x10];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v45, *(int16x4_t *)v25.i8, v11, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(v46, v25, v11, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      *(int32x4_t *)v36[v10 / 8].i8 = v45;
      *(uint16x4_t *)v45.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v41, *(int16x4_t *)v25.i8, v11, 2), *(int16x4_t *)v32.i8, v11, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v45.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_high_lane_s16(v42, v25, v11, 2), v32, v11, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      *(int32x4_t *)&v37[v10] = v45;
      v37 += v9;
      int32x4_t v36 = (uint16x4_t *)((char *)v36 + v9);
      v35 -= 2;
      uint64_t v34 = (uint16x8_t *)((char *)v34 + v8);
      v31 += v8;
      v30 += v8;
      v29 += v8;
    }
    while (v35 > 2);
    v14 += 2;
    ++_X4;
    int v54 = result - 8;
    v10 += 16;
    BOOL v55 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v55);
  if (v54)
  {
LABEL_9:
    _X12 = (uint64_t *)((char *)_X4->i64 - 2 * a4);
    uint16x4_t v57 = *(uint16x4_t *)_X12;
    _X12 = (void *)((char *)_X12 + 14);
    int16x4_t v58 = qword_1D0D7FC20[2 * v7 - 2];
    int16x4_t v59 = (int16x4_t)vshr_n_u16(v57, 4uLL);
    __asm { PRFM            #0, [X12] }
    int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 4uLL);
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (uint64_t *)((char *)_X4->i64 + 2 * a4);
    uint16x4_t v64 = *(uint16x4_t *)_X11;
    _X11 = (void *)((char *)_X11 + 14);
    int16x4_t v65 = (int16x4_t)vshr_n_u16(v64, 4uLL);
    __asm { PRFM            #0, [X11] }
    int v67 = a2 + 2;
    do
    {
      _X17 = (uint64_t *)((char *)_X4->i64 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[a4];
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      _X16 = &_X4->i8[14];
      __asm { PRFM            #0, [X16] }
      uint16x4_t v72 = *(uint16x4_t *)_X17;
      _X17 = (void *)((char *)_X17 + 14);
      __asm { PRFM            #0, [X17] }
      int32x4_t v74 = vmlal_lane_s16(vmull_lane_s16(v61, v58, 1), v59, v58, 0);
      int32x4_t v75 = vmlal_lane_s16(vmull_lane_s16(v65, v58, 1), v61, v58, 0);
      int16x4_t v61 = (int16x4_t)vshr_n_u16(*(uint16x4_t *)_X4->i8, 4uLL);
      int32x4_t v76 = vmlal_lane_s16(v74, v65, v58, 2);
      int16x4_t v59 = v65;
      int16x4_t v65 = (int16x4_t)vshr_n_u16(v72, 4uLL);
      __asm
      {
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      *uint64_t v14 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v76, v61, v58, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      *(uint16x4_t *)((char *)v14 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v75, v61, v58, 2), v65, v58, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      uint64_t v14 = (uint16x4_t *)((char *)v14 + v9);
      v67 -= 2;
    }
    while (v67 > 2);
  }
  return result;
}

uint64_t sub_1D0CBB6A4(uint64_t result, int a2, char a3, uint64_t a4, uint16x8_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = (uint16x8_t *)((char *)_X4 - 4);
  do
  {
    int16x4_t v12 = a7;
    _X15 = v11;
    int v14 = a2 + 1;
    do
    {
      int16x8_t v15 = (int16x8_t)vshrq_n_u16(*_X15, 4uLL);
      int8x16_t v16 = (int8x16_t)vshrq_n_u16(_X15[1], 4uLL);
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      int16x8_t v23 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 4uLL);
      int16x8_t v24 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
      int16x8_t v25 = (int16x8_t)vextq_s8((int8x16_t)v15, v16, 0xCuLL);
      int32x4_t v26 = vmull_lane_s16(*(int16x4_t *)v23.i8, v10, 1);
      int32x4_t v27 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v23, v10, 1), v15, v10, 0), v24, v10, 2), v25, v10, 3);
      *(uint16x4_t *)v15.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v26, *(int16x4_t *)v15.i8, v10, 0), *(int16x4_t *)v24.i8, v10, 2), *(int16x4_t *)v25.i8, v10, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      v15.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v27, 6uLL), (uint16x4_t)0xF000F000F000F000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x4_t v12 = v15;
      --v14;
      _X15 = (uint16x8_t *)((char *)_X15 + v8);
      int16x4_t v12 = (_OWORD *)((char *)v12 + v9);
    }
    while (v14 > 1);
    a7 += 2;
    ++_X4;
    int v30 = result - 8;
    ++v11;
    BOOL v31 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v31);
  if (v30)
  {
LABEL_9:
    int16x4_t v32 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v33 = a2 + 1;
    uint64_t v34 = v7 - 4;
    do
    {
      int16x8_t v35 = (int16x8_t)vshrq_n_u16(*_X4, 4uLL);
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = &_X4->i8[v34];
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, v32, 1), (int16x4_t)vshr_n_u16(*(uint16x4_t *)((char *)&_X4[-1].u64[1] + 4), 4uLL), v32, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v32, 2), v35, v32, 3), 6uLL), (uint16x4_t)0xF000F000F000F000);
      --v33;
      _X4 = (uint16x8_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v33 > 1);
  }
  return result;
}

uint64_t sub_1D0CBB7F4(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v24 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  int16x8_t v14 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 0);
  int16x8_t v15 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 1);
  int16x8_t v16 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 2);
  int16x8_t v17 = vdupq_laneq_s16(v12, 5);
  int16x8_t v18 = vdupq_laneq_s16(v12, 6);
  int16x8_t v19 = vdupq_laneq_s16(v12, 7);
  int16x8_t v20 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 3);
  int16x8_t v21 = vdupq_laneq_s16(v12, 4);
  uint64_t v22 = v8 - 6;
  uint64_t v23 = 8 * a4;
  uint64_t v24 = a5;
  do
  {
    _X19 = (int8x16_t *)(v24 + 2 * (-3 * a4 - 3));
    int8x16_t v26 = _X19[1];
    int16x8_t v27 = (int16x8_t)vextq_s8(*_X19, v26, 2uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8(*_X19, v26, 4uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8(*_X19, v26, 6uLL);
    int16x8_t v30 = (int16x8_t)vextq_s8(*_X19, v26, 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v36 = (int16x8_t)vextq_s8(*_X19, v26, 0xAuLL);
    int16x8_t v37 = (int16x8_t)vextq_s8(*_X19, v26, 0xCuLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v40 = (int16x8_t)vextq_s8(*_X19, v26, 0xEuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v42 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X19, v14), v27, v15);
    _X19 = &_X19->i8[2 * a4];
    int16x8_t v44 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v42, v28, v16), v36, v17), v37, v18), v40, v19);
    uint16x8_t v45 = (uint16x8_t)vmulq_s16(v29, v20);
    uint16x8_t v46 = (uint16x8_t)vmulq_s16(v30, v21);
    int16x8_t v47 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v45.i8), *(int16x4_t *)v44.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v45, v46), v44), 2uLL);
    int16x8_t v48 = *(int16x8_t *)_X19;
    int8x16_t v49 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v55 = (int16x8_t)vextq_s8((int8x16_t)v48, v49, 6uLL);
    int16x8_t v56 = (int16x8_t)vextq_s8((int8x16_t)v48, v49, 8uLL);
    int16x8_t v57 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v48, v14), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xEuLL), v19);
    uint16x8_t v58 = (uint16x8_t)vmulq_s16(v55, v20);
    uint16x8_t v59 = (uint16x8_t)vmulq_s16(v56, v21);
    int16x8_t v60 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), *(int16x4_t *)v57.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v58, v59), v57), 2uLL);
    int16x8_t v61 = *(int16x8_t *)_X19;
    int8x16_t v62 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v68 = (int16x8_t)vextq_s8((int8x16_t)v61, v62, 6uLL);
    int16x8_t v69 = (int16x8_t)vextq_s8((int8x16_t)v61, v62, 8uLL);
    int16x8_t v70 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v61, v14), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xEuLL), v19);
    uint16x8_t v71 = (uint16x8_t)vmulq_s16(v68, v20);
    uint16x8_t v72 = (uint16x8_t)vmulq_s16(v69, v21);
    int16x8_t v73 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v71.i8), *(int16x4_t *)v70.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v71, v72), v70), 2uLL);
    int16x8_t v74 = *(int16x8_t *)_X19;
    int8x16_t v75 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v81 = (int16x8_t)vextq_s8((int8x16_t)v74, v75, 6uLL);
    int16x8_t v82 = (int16x8_t)vextq_s8((int8x16_t)v74, v75, 8uLL);
    int16x8_t v83 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v74, v14), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xEuLL), v19);
    uint16x8_t v84 = (uint16x8_t)vmulq_s16(v81, v20);
    uint16x8_t v85 = (uint16x8_t)vmulq_s16(v82, v21);
    int16x8_t v86 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v85.i8, *(uint16x4_t *)v84.i8), *(int16x4_t *)v83.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v84, v85), v83), 2uLL);
    int16x8_t v87 = *(int16x8_t *)_X19;
    int8x16_t v88 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v87, v88, 6uLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v87, v88, 8uLL);
    int16x8_t v96 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v87, v14), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xEuLL), v19);
    uint16x8_t v97 = (uint16x8_t)vmulq_s16(v94, v20);
    uint16x8_t v98 = (uint16x8_t)vmulq_s16(v95, v21);
    int16x8_t v99 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v98.i8, *(uint16x4_t *)v97.i8), *(int16x4_t *)v96.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v97, v98), v96), 2uLL);
    int16x8_t v100 = *(int16x8_t *)_X19;
    int8x16_t v101 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v100, v101, 6uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v100, v101, 8uLL);
    int16x8_t v109 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v14), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xEuLL), v19);
    uint16x8_t v110 = (uint16x8_t)vmulq_s16(v107, v20);
    uint16x8_t v111 = (uint16x8_t)vmulq_s16(v108, v21);
    int16x8_t v112 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v111.i8, *(uint16x4_t *)v110.i8), *(int16x4_t *)v109.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v110, v111), v109), 2uLL);
    int16x8_t v113 = *(int16x8_t *)_X19;
    int8x16_t v114 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v113, v114, 6uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v113, v114, 8uLL);
    int16x8_t v121 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v113, v14), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xEuLL), v19);
    uint16x8_t v122 = (uint16x8_t)vmulq_s16(v119, v20);
    uint16x8_t v123 = (uint16x8_t)vmulq_s16(v120, v21);
    uint16x4_t v124 = (int16x8_t *)a7;
    uint64_t v125 = a5;
    int v126 = a2 + 1;
    int16x8_t v127 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v123.i8, *(uint16x4_t *)v122.i8), *(int16x4_t *)v121.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v122, v123), v121), 2uLL);
    do
    {
      _X22 = v125 + v23;
      int16x8_t v129 = *(int16x8_t *)(v125 + v23 - 6);
      int8x16_t v130 = *(int8x16_t *)(v125 + v23 + 10);
      int16x8_t v131 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 2uLL);
      int16x8_t v132 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 4uLL);
      int16x8_t v133 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 6uLL);
      int16x8_t v134 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 8uLL);
      int16x8_t v135 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xAuLL);
      int16x8_t v136 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xCuLL);
      int16x8_t v137 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xEuLL);
      int16x8_t v138 = vmlaq_s16(vmulq_s16(v129, v14), v131, v15);
      v131.i64[0] = 0x38000000380000;
      v131.i64[1] = 0x38000000380000;
      v139.i64[0] = 0x38000000380000;
      v139.i64[1] = 0x38000000380000;
      int32x4_t v140 = vmlal_lane_s16(vmlal_lane_s16((int32x4_t)v131, *(int16x4_t *)v47.i8, *(int16x4_t *)v13.i8, 0), *(int16x4_t *)v60.i8, *(int16x4_t *)v13.i8, 1);
      int32x4_t v141 = vmlal_high_lane_s16(vmlal_high_lane_s16(v139, v47, *(int16x4_t *)v13.i8, 0), v60, *(int16x4_t *)v13.i8, 1);
      int16x8_t v47 = v60;
      int16x8_t v60 = v73;
      int16x8_t v73 = v86;
      int16x8_t v86 = v99;
      int16x8_t v99 = v112;
      int16x8_t v112 = v127;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v125 + v22;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int16x8_t v146 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v138, v132, v16), v135, v17), v136, v18), v137, v19);
      uint16x8_t v147 = (uint16x8_t)vmulq_s16(v133, v20);
      uint16x8_t v148 = (uint16x8_t)vmulq_s16(v134, v21);
      int32x4_t v149 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v147.i8);
      int32x4_t v150 = (int32x4_t)vaddl_high_u16(v147, v148);
      int32x4_t v151 = vaddw_s16(v149, *(int16x4_t *)v146.i8);
      int32x4_t v152 = vaddw_high_s16(v150, v146);
      *(int16x4_t *)v150.i8 = vshrn_n_s32(v151, 2uLL);
      int32x4_t v153 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v140, *(int16x4_t *)v60.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v73.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v86.i8, v13, 4), *(int16x4_t *)v99.i8, v13, 5), *(int16x4_t *)v112.i8, v13, 6), *(int16x4_t *)v150.i8, v13,
               7);
      int16x8_t v127 = vshrn_high_n_s32(*(int16x4_t *)v150.i8, v152, 2uLL);
      *uint16x4_t v124 = vshrn_high_n_s32(vshrn_n_s32(v153, 6uLL), vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v141, v60, *(int16x4_t *)v13.i8, 2), v73, *(int16x4_t *)v13.i8, 3), v86, v13, 4), v99, v13, 5), v112, v13, 6),
                  vshrn_n_s32(v152, 2uLL),
                  v13,
                  7),
                6uLL);
      --v126;
      v125 += v9;
      uint16x4_t v124 = (int16x8_t *)((char *)v124 + v11);
    }
    while (v126 > 1);
    a7 += 2;
    v24 += 16;
    int v154 = result - 8;
    v22 += 16;
    v23 += 16;
    BOOL v155 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v155);
  if (v154)
  {
LABEL_9:
    int16x8_t v156 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X14 = (int8x8_t *)(v24 - 6 * a4);
    int16x4_t v158 = *(int16x4_t *)((char *)&_X14[-1] + 2);
    _X14 = (int8x8_t *)((char *)_X14 - 6);
    int16x8_t v159 = xmmword_1D0D7FBF0[v7 - 1];
    int16x4_t v160 = (int16x4_t)_X14[1];
    __asm { PRFUM           #0, [X14,#0x1E] }
    _X13 = &_X14[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X14 + 2 * a4);
    int16x4_t v166 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v158, (int8x8_t)v160, 2uLL), *(int16x4_t *)v156.i8, 1), v158, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v158, (int8x8_t)v160, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v158, (int8x8_t)v160, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v160,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v160, _X14[2], 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v160, _X14[2], 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v160, _X14[2], 6uLL),
               v156,
               7),
             2uLL);
    int16x4_t v167 = *_X13;
    int16x4_t v168 = _X13[1];
    int8x8_t v169 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v175 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v167, (int8x8_t)v168, 2uLL), *(int16x4_t *)v156.i8, 1), v167, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v167, (int8x8_t)v168, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v167, (int8x8_t)v168, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v168,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v168, v169, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v168, v169, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v168, v169, 6uLL),
               v156,
               7),
             2uLL);
    int16x4_t v176 = *_X13;
    int16x4_t v177 = _X13[1];
    int8x8_t v178 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v184 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v176, (int8x8_t)v177, 2uLL), *(int16x4_t *)v156.i8, 1), v176, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v176, (int8x8_t)v177, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v176, (int8x8_t)v177, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v177,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v177, v178, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v177, v178, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v177, v178, 6uLL),
               v156,
               7),
             2uLL);
    int16x4_t v185 = *_X13;
    int16x4_t v186 = _X13[1];
    int8x8_t v187 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v193 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v185, (int8x8_t)v186, 2uLL), *(int16x4_t *)v156.i8, 1), v185, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v185, (int8x8_t)v186, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v185, (int8x8_t)v186, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v186,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v186, v187, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v186, v187, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v186, v187, 6uLL),
               v156,
               7),
             2uLL);
    int16x4_t v194 = *_X13;
    int16x4_t v195 = _X13[1];
    int8x8_t v196 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v202 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v194, (int8x8_t)v195, 2uLL), *(int16x4_t *)v156.i8, 1), v194, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v194, (int8x8_t)v195, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v194, (int8x8_t)v195, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v195,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v195, v196, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v195, v196, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v195, v196, 6uLL),
               v156,
               7),
             2uLL);
    int16x4_t v203 = *_X13;
    int16x4_t v204 = _X13[1];
    int8x8_t v205 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v211 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v203, (int8x8_t)v204, 2uLL), *(int16x4_t *)v156.i8, 1), v203, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v203, (int8x8_t)v204, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v203, (int8x8_t)v204, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v204,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v204, v205, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v204, v205, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v204, v205, 6uLL),
               v156,
               7),
             2uLL);
    int16x4_t v212 = *_X13;
    int16x4_t v213 = _X13[1];
    int8x8_t v214 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v219 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v212, (int8x8_t)v213, 2uLL), *(int16x4_t *)v156.i8, 1), v212, *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8((int8x8_t)v212, (int8x8_t)v213, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8((int8x8_t)v212, (int8x8_t)v213, 6uLL), *(int16x4_t *)v156.i8,
                       3),
                     v213,
                     v156,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v213, v214, 2uLL),
                   v156,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v213, v214, 4uLL),
                 v156,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v213, v214, 6uLL),
               v156,
               7),
             2uLL);
    int v220 = a2 + 1;
    uint64_t v221 = v8 - 6;
    do
    {
      v222.i64[0] = 0x38000000380000;
      v222.i64[1] = 0x38000000380000;
      _X14 = v24 + v10;
      int16x4_t v224 = *(int16x4_t *)(v24 + v10 + 2);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v24 + v221;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v229 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v222, v166, *(int16x4_t *)v159.i8, 0), v175, *(int16x4_t *)v159.i8, 1), v184, *(int16x4_t *)v159.i8, 2), v193, *(int16x4_t *)v159.i8, 3), v202, v159, 4), v211,
                 v159,
                 5),
               v219,
               v159,
               6);
      int16x4_t v166 = v175;
      int16x4_t v175 = v184;
      int16x4_t v184 = v193;
      int16x4_t v193 = v202;
      int16x4_t v202 = v211;
      int16x4_t v211 = v219;
      int16x4_t v219 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v224, 2uLL), *(int16x4_t *)v156.i8, 1), *(int16x4_t *)(v24 + v10 - 6), *(int16x4_t *)v156.i8, 0), (int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v224, 4uLL), *(int16x4_t *)v156.i8, 2), (int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v224, 6uLL), *(int16x4_t *)v156.i8,
                         3),
                       v224,
                       v156,
                       4),
                     (int16x4_t)vext_s8((int8x8_t)v224, *(int8x8_t *)(v24 + v10 + 10), 2uLL),
                     v156,
                     5),
                   (int16x4_t)vext_s8((int8x8_t)v224, *(int8x8_t *)(v24 + v10 + 10), 4uLL),
                   v156,
                   6),
                 (int16x4_t)vext_s8((int8x8_t)v224, *(int8x8_t *)(v24 + v10 + 10), 6uLL),
                 v156,
                 7),
               2uLL);
      --v220;
      *a7 = vshrn_n_s32(vmlal_laneq_s16(v229, v219, v159, 7), 6uLL);
      v24 += v9;
      a7 = (int16x4_t *)((char *)a7 + v11);
    }
    while (v220 > 1);
  }
  return result;
}

int16x4_t *sub_1D0CBBFE8(int16x4_t *result, int a2, unint64_t a3, uint64_t a4, int16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v163 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v24 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  int16x8_t v13 = vdupq_laneq_s16(v8, 5);
  int16x8_t v14 = vdupq_laneq_s16(v8, 6);
  int16x8_t v15 = vdupq_laneq_s16(v8, 7);
  int16x8_t v16 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  int16x8_t v17 = vdupq_laneq_s16(v8, 4);
  uint64_t v18 = 4 * a6;
  int v19 = a2 + 2;
  int16x8_t v20 = (char *)a5 + 20 * a4;
  int16x8_t v21 = &a5[a4];
  uint64_t v22 = (char *)a5 + 18 * a4;
  uint64_t v23 = (char *)a5 + 10 * a4;
  uint64_t v24 = a7;
  do
  {
    _X2 = (_OWORD *)((char *)a5 - 6 * a4);
    int16x8_t v26 = *(int16x8_t *)_X2;
    _X2 = (_OWORD *)((char *)_X2 + 30);
    int16x8_t v27 = v26;
    _X24 = (_OWORD *)((char *)a5 - 4 * a4);
    int16x8_t v29 = *(int16x8_t *)_X24;
    _X24 = (_OWORD *)((char *)_X24 + 30);
    int16x8_t v30 = v29;
    _X25 = (_OWORD *)((char *)a5 - 2 * a4);
    int16x8_t v32 = *(int16x8_t *)_X25;
    _X25 = (_OWORD *)((char *)_X25 + 30);
    int16x8_t v33 = v32;
    _X26 = (char *)&a5[3] + 6;
    int16x8_t v35 = *(int16x8_t *)a5->i8;
    _X27 = (_OWORD *)((char *)a5 + 2 * a4);
    int16x8_t v37 = *(int16x8_t *)_X27;
    _X27 = (_OWORD *)((char *)_X27 + 30);
    int16x8_t v38 = v37;
    _X28 = (_OWORD *)((char *)a5 + 4 * a4);
    int16x8_t v40 = *(int16x8_t *)_X28;
    _X28 = (_OWORD *)((char *)_X28 + 30);
    int16x8_t v41 = v40;
    _X9 = (_OWORD *)((char *)a5 + 6 * a4);
    int16x8_t v43 = *(int16x8_t *)_X9;
    _X9 = (_OWORD *)((char *)_X9 + 30);
    int16x8_t v44 = v43;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X24]
      PRFM            #0, [X25]
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int v54 = v23;
    int16x8_t v55 = v22;
    int16x8_t v56 = v21;
    int16x8_t v57 = v20;
    __asm { PRFM            #0, [X28] }
    int v59 = v19;
    int16x8_t v60 = a7;
    __asm { PRFM            #0, [X9] }
    int8x16_t v62 = (char *)a7 + 2 * a6;
    do
    {
      int16x8_t v63 = v33;
      int16x8_t v64 = v35;
      int16x8_t v33 = v38;
      int16x8_t v35 = v41;
      int16x8_t v38 = v44;
      _X9 = (uint64_t)&v56[v7 / 8 + 3] + 6;
      int16x8_t v41 = *(int16x8_t *)v56[v7 / 8].i8;
      __asm { PRFM            #0, [X9] }
      _X9 = (uint64_t)&v54[v7 + 30];
      int16x8_t v44 = *(int16x8_t *)&v54[v7];
      __asm { PRFM            #0, [X9] }
      _X9 = &v55[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v57[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      int16x8_t v75 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v38, v14), v35, v13), v63, v12), v30, v11), v27, v10);
      uint16x8_t v76 = (uint16x8_t)vmulq_s16(v64, v16);
      uint16x8_t v77 = (uint16x8_t)vmulq_s16(v33, v17);
      int16x8_t v78 = vmlaq_s16(v75, v41, v15);
      int32x4_t v79 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v76.i8, *(uint16x4_t *)v77.i8);
      int32x4_t v80 = (int32x4_t)vaddl_high_u16(v76, v77);
      int32x4_t v81 = vaddw_s16(v79, *(int16x4_t *)v78.i8);
      int16x8_t v82 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v38, v13), v64, v12), v63, v11), v30, v10), v41, v14), v44, v15);
      uint16x8_t v83 = (uint16x8_t)vmulq_s16(v33, v16);
      uint16x8_t v84 = (uint16x8_t)vmulq_s16(v35, v17);
      int32x4_t v85 = vaddw_high_s16(v80, v78);
      int32x4_t v86 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v83.i8, *(uint16x4_t *)v84.i8), *(int16x4_t *)v82.i8);
      int32x4_t v87 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v83, v84), v82);
      *(int16x4_t *)v82.i8 = vadd_s16(vshrn_n_s32(v81, 2uLL), (int16x4_t)0xE000E000E000E000);
      v82.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v85, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)v85.i8 = vadd_s16(vshrn_n_s32(v86, 2uLL), (int16x4_t)0xE000E000E000E000);
      v85.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v87, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x8_t *)v60[v7 / 8].i8 = v82;
      *(int32x4_t *)&v62[v7] = v85;
      v62 += v18;
      v59 -= 2;
      v57 += v9;
      int16x8_t v60 = (int16x4_t *)((char *)v60 + v18);
      int16x8_t v56 = (int16x4_t *)((char *)v56 + v9);
      v55 += v9;
      v54 += v9;
      int16x8_t v30 = v64;
      int16x8_t v27 = v63;
    }
    while (v59 > 2);
    v24 += 2;
    a5 += 2;
    int v88 = result - 8;
    v7 += 16;
    BOOL v89 = result > 0xF;
    __n128 result = (int16x4_t *)(result - 8);
  }
  while (v89);
  if (v88)
  {
LABEL_9:
    int16x8_t v90 = xmmword_1D0D7FBF0[v163 - 1];
    _X9 = (int16x4_t *)((char *)a5 - 6 * a4);
    int16x4_t v92 = *_X9;
    _X9 = (int16x4_t *)((char *)_X9 + 14);
    int16x4_t v93 = v92;
    _X10 = (int16x4_t *)((char *)a5 - 4 * a4);
    int16x4_t v95 = *_X10;
    _X10 = (int16x4_t *)((char *)_X10 + 14);
    int16x4_t v96 = v95;
    _X11 = (int16x4_t *)((char *)a5 - 2 * a4);
    int16x4_t v98 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    int16x4_t v99 = v98;
    _X12 = (char *)&a5[1] + 6;
    int16x4_t v101 = *a5;
    _X14 = (int16x4_t *)((char *)a5 + 2 * a4);
    int16x4_t v103 = *_X14;
    _X14 = (int16x4_t *)((char *)_X14 + 14);
    int16x4_t v104 = v103;
    _X15 = (int16x4_t *)((char *)a5 + 4 * a4);
    int16x4_t v106 = *_X15;
    _X15 = (int16x4_t *)((char *)_X15 + 14);
    int16x4_t v107 = v106;
    _X16 = (int16x4_t *)((char *)a5 + 6 * a4);
    int16x4_t v109 = *_X16;
    _X16 = (int16x4_t *)((char *)_X16 + 14);
    int16x4_t v110 = v109;
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v118 = a2 + 4;
    uint64_t v119 = 3 * a4;
    uint64_t v120 = 8 * a4;
    uint64_t v121 = 22 * a4;
    uint64_t v122 = 12 * a4;
    uint64_t v123 = 10 * a4;
    uint64_t v124 = 2 * a6;
    uint64_t v125 = 14 * a4;
    do
    {
      _X3 = (int16x4_t *)((char *)a5 + v123);
      _X2 = (int16x4_t *)((char *)a5 + v122);
      _X1 = (int16x4_t *)((char *)a5 + v125);
      _X17 = (char *)a5 + v121;
      __n128 result = &a5[v119];
      a5 = (int16x4_t *)((char *)a5 + v120);
      int32x4_t v130 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v96, *(int16x4_t *)v90.i8, 1), v93, *(int16x4_t *)v90.i8, 0), v99, *(int16x4_t *)v90.i8, 2), v101, *(int16x4_t *)v90.i8, 3);
      int32x4_t v131 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v99, *(int16x4_t *)v90.i8, 1), v96, *(int16x4_t *)v90.i8, 0), v101, *(int16x4_t *)v90.i8, 2);
      int32x4_t v132 = vmull_lane_s16(v101, *(int16x4_t *)v90.i8, 1);
      int32x4_t v133 = vmlal_lane_s16(vmull_lane_s16(v104, *(int16x4_t *)v90.i8, 1), v101, *(int16x4_t *)v90.i8, 0);
      _X5 = (char *)&a5[1] + 6;
      int16x4_t v101 = *a5;
      __asm { PRFM            #0, [X5] }
      int32x4_t v136 = vmlal_laneq_s16(v130, v104, v90, 4);
      int32x4_t v137 = vmlal_lane_s16(v131, v104, *(int16x4_t *)v90.i8, 3);
      int32x4_t v138 = vmlal_lane_s16(vmlal_lane_s16(v132, v99, *(int16x4_t *)v90.i8, 0), v104, *(int16x4_t *)v90.i8, 2);
      int16x4_t v93 = v104;
      int16x4_t v139 = *_X3;
      _X3 = (int16x4_t *)((char *)_X3 + 14);
      int16x4_t v104 = v139;
      __asm { PRFM            #0, [X3] }
      int32x4_t v141 = vmlal_laneq_s16(v136, v107, v90, 5);
      int32x4_t v142 = vmlal_laneq_s16(v137, v107, v90, 4);
      int32x4_t v143 = vmlal_lane_s16(v138, v107, *(int16x4_t *)v90.i8, 3);
      int32x4_t v144 = vmlal_lane_s16(v133, v107, *(int16x4_t *)v90.i8, 2);
      int16x4_t v96 = v107;
      int16x4_t v145 = *_X2;
      _X2 = (int16x4_t *)((char *)_X2 + 14);
      int16x4_t v107 = v145;
      __asm { PRFM            #0, [X2] }
      int32x4_t v147 = vmlal_laneq_s16(v141, v110, v90, 6);
      int32x4_t v148 = vmlal_laneq_s16(v142, v110, v90, 5);
      int32x4_t v149 = vmlal_laneq_s16(v143, v110, v90, 4);
      int32x4_t v150 = vmlal_lane_s16(v144, v110, *(int16x4_t *)v90.i8, 3);
      int16x4_t v99 = v110;
      int16x4_t v151 = *_X1;
      _X1 = (int16x4_t *)((char *)_X1 + 14);
      int16x4_t v110 = v151;
      __asm
      {
        PRFM            #0, [X1]
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      int32x4_t v157 = vmlal_laneq_s16(vmlal_laneq_s16(v148, *a5, v90, 6), v104, v90, 7);
      int32x4_t v158 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v149, *a5, v90, 5), v104, v90, 6), v107, v90, 7);
      int32x4_t v159 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v150, *a5, v90, 4), v104, v90, 5), v107, v90, 6), v151, v90, 7);
      *uint64_t v24 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(v147, *a5, v90, 7), 2uLL), (int16x4_t)0xE000E000E000E000);
      int16x4_t v160 = (int16x4_t *)((char *)v24 + v124);
      *int16x4_t v160 = vadd_s16(vshrn_n_s32(v157, 2uLL), (int16x4_t)0xE000E000E000E000);
      int16x4_t v161 = (int16x4_t *)((char *)v160 + v124);
      *int16x4_t v161 = vadd_s16(vshrn_n_s32(v158, 2uLL), (int16x4_t)0xE000E000E000E000);
      int16x4_t v162 = (int16x4_t *)((char *)v161 + v124);
      *int16x4_t v162 = vadd_s16(vshrn_n_s32(v159, 2uLL), (int16x4_t)0xE000E000E000E000);
      v118 -= 4;
      uint64_t v24 = (int16x4_t *)((char *)v162 + v124);
    }
    while (v118 > 4);
  }
  return result;
}

uint64_t sub_1D0CBC41C(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 0);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  int16x8_t v13 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 2);
  int16x8_t v14 = vdupq_laneq_s16(v10, 5);
  int16x8_t v15 = vdupq_laneq_s16(v10, 6);
  int16x8_t v16 = vdupq_laneq_s16(v10, 7);
  int16x8_t v17 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 3);
  int16x8_t v18 = vdupq_laneq_s16(v10, 4);
  int v19 = (int8x16_t *)(a5 - 6);
  do
  {
    int16x8_t v20 = a7;
    _X15 = v19;
    int v22 = a2 + 1;
    do
    {
      int8x16_t v23 = _X15[1];
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v30 = (int16x8_t)vextq_s8(*_X15, v23, 8uLL);
      int16x8_t v31 = (int16x8_t)vextq_s8(*_X15, v23, 0xEuLL);
      int16x8_t v32 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(*(int16x8_t *)_X15, v11), (int16x8_t)vextq_s8(*_X15, v23, 2uLL), v12), (int16x8_t)vextq_s8(*_X15, v23, 4uLL), v13), (int16x8_t)vextq_s8(*_X15, v23, 0xAuLL), v14), (int16x8_t)vextq_s8(*_X15, v23, 0xCuLL), v15);
      uint16x8_t v33 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X15, v23, 6uLL), v17);
      int16x8_t v34 = vmlaq_s16(v32, v31, v16);
      uint16x8_t v35 = (uint16x8_t)vmulq_s16(v30, v18);
      int32x4_t v36 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v33.i8);
      int32x4_t v37 = (int32x4_t)vaddl_high_u16(v33, v35);
      *(int16x4_t *)v33.i8 = vadd_s16(vshrn_n_s32(vaddw_s16(v36, *(int16x4_t *)v34.i8), 2uLL), (int16x4_t)0xE000E000E000E000);
      v33.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(vaddw_high_s16(v37, v34), 2uLL), (int16x4_t)0xE000E000E000E000);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v20 = v33;
      --v22;
      _X15 = (int8x16_t *)((char *)_X15 + v8);
      int16x8_t v20 = (_OWORD *)((char *)v20 + v9);
    }
    while (v22 > 1);
    a7 += 2;
    a5 += 16;
    int v40 = result - 8;
    ++v19;
    BOOL v41 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v41);
  if (v40)
  {
LABEL_9:
    int16x8_t v42 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (int8x8_t *)(a5 - 6);
    int v44 = a2 + 1;
    do
    {
      int16x4_t v45 = (int16x4_t)_X11[1];
      __asm { PRFUM           #0, [X11,#0x1E] }
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 2uLL), *(int16x4_t *)v42.i8, 1), (int16x4_t)*_X11, *(int16x4_t *)v42.i8, 0), (int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 4uLL), *(int16x4_t *)v42.i8, 2), (int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 6uLL), *(int16x4_t *)v42.i8, 3), v45,
                        v42,
                        4),
                      (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 2uLL),
                      v42,
                      5),
                    (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 4uLL),
                    v42,
                    6),
                  (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 6uLL),
                  v42,
                  7),
                2uLL),
              (int16x4_t)0xE000E000E000E000);
      --v44;
      _X11 = (int8x8_t *)((char *)_X11 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v44 > 1);
  }
  return result;
}

uint64_t sub_1D0CBC5C0(uint64_t result, int a2, uint64_t a3, uint64_t a4, int16x4_t *a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  v10.i64[0] = 0xE000E000E000E000;
  v10.i64[1] = 0xE000E000E000E000;
  int16x8_t v11 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = a2 + 2;
    do
    {
      int16x8_t v15 = *(int16x8_t *)&v11[v12];
      *(int16x8_t *)&a7->i8[v13] = vaddq_s16(vshlq_n_s16(*(int16x8_t *)&a5->i8[v12], 4uLL), v10);
      *(int16x8_t *)&v9[v13] = vaddq_s16(vshlq_n_s16(v15, 4uLL), v10);
      v13 += v7;
      v12 += v8;
      v14 -= 2;
    }
    while (v14 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = result - 8;
    v9 += 16;
    v11 += 16;
    BOOL v17 = (int)result <= 15;
    __n128 result = (result - 8);
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      int16x4_t v19 = *(int16x4_t *)((char *)a5 + 2 * a4);
      *a7 = vadd_s16(vshl_n_s16(*a5, 4uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)a7 + 2 * a6) = vadd_s16(vshl_n_s16(v19, 4uLL), (int16x4_t)0xE000E000E000E000);
      a7 = (int16x4_t *)((char *)a7 + v7);
      a5 = (int16x4_t *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return result;
}

uint64_t sub_1D0CBC698(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 3;
  uint64_t v8 = 16 * a4;
  uint64_t v9 = 2 * a4;
  uint64_t v10 = 8 * a4;
  uint64_t v11 = 2 * a6;
  if ((int)result < 8)
  {
    uint64_t v24 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v12 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v13 = xmmword_1D0D7FBF0[v7 - 1];
  int16x8_t v14 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 0);
  int16x8_t v15 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 1);
  int16x8_t v16 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 2);
  int16x8_t v17 = vdupq_laneq_s16(v12, 5);
  int16x8_t v18 = vdupq_laneq_s16(v12, 6);
  int16x8_t v19 = vdupq_laneq_s16(v12, 7);
  int16x8_t v20 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 3);
  int16x8_t v21 = vdupq_laneq_s16(v12, 4);
  uint64_t v22 = v8 - 6;
  uint64_t v23 = 8 * a4;
  uint64_t v24 = a5;
  do
  {
    _X19 = (int8x16_t *)(v24 + 2 * (-3 * a4 - 3));
    int8x16_t v26 = _X19[1];
    int16x8_t v27 = (int16x8_t)vextq_s8(*_X19, v26, 2uLL);
    int16x8_t v28 = (int16x8_t)vextq_s8(*_X19, v26, 4uLL);
    int16x8_t v29 = (int16x8_t)vextq_s8(*_X19, v26, 6uLL);
    int16x8_t v30 = (int16x8_t)vextq_s8(*_X19, v26, 8uLL);
    __asm { PRFUM           #0, [X19,#0x2E] }
    int16x8_t v36 = (int16x8_t)vextq_s8(*_X19, v26, 0xAuLL);
    int16x8_t v37 = (int16x8_t)vextq_s8(*_X19, v26, 0xCuLL);
    _X20 = &_X19->i8[8 * a4];
    __asm { PRFM            #0, [X20] }
    int16x8_t v40 = (int16x8_t)vextq_s8(*_X19, v26, 0xEuLL);
    __asm { PRFUM           #0, [X20,#0x1E] }
    int16x8_t v42 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X19, v14), v27, v15);
    _X19 = &_X19->i8[2 * a4];
    int16x8_t v44 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v42, v28, v16), v36, v17), v37, v18), v40, v19);
    uint16x8_t v45 = (uint16x8_t)vmulq_s16(v29, v20);
    uint16x8_t v46 = (uint16x8_t)vmulq_s16(v30, v21);
    int16x8_t v47 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v45.i8), *(int16x4_t *)v44.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v45, v46), v44), 2uLL);
    int16x8_t v48 = *(int16x8_t *)_X19;
    int8x16_t v49 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v55 = (int16x8_t)vextq_s8((int8x16_t)v48, v49, 6uLL);
    int16x8_t v56 = (int16x8_t)vextq_s8((int8x16_t)v48, v49, 8uLL);
    int16x8_t v57 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v48, v14), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v48, v49, 0xEuLL), v19);
    uint16x8_t v58 = (uint16x8_t)vmulq_s16(v55, v20);
    uint16x8_t v59 = (uint16x8_t)vmulq_s16(v56, v21);
    int16x8_t v60 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v59.i8, *(uint16x4_t *)v58.i8), *(int16x4_t *)v57.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v58, v59), v57), 2uLL);
    int16x8_t v61 = *(int16x8_t *)_X19;
    int8x16_t v62 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v68 = (int16x8_t)vextq_s8((int8x16_t)v61, v62, 6uLL);
    int16x8_t v69 = (int16x8_t)vextq_s8((int8x16_t)v61, v62, 8uLL);
    int16x8_t v70 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v61, v14), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v61, v62, 0xEuLL), v19);
    uint16x8_t v71 = (uint16x8_t)vmulq_s16(v68, v20);
    uint16x8_t v72 = (uint16x8_t)vmulq_s16(v69, v21);
    int16x8_t v73 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v71.i8), *(int16x4_t *)v70.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v71, v72), v70), 2uLL);
    int16x8_t v74 = *(int16x8_t *)_X19;
    int8x16_t v75 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v81 = (int16x8_t)vextq_s8((int8x16_t)v74, v75, 6uLL);
    int16x8_t v82 = (int16x8_t)vextq_s8((int8x16_t)v74, v75, 8uLL);
    int16x8_t v83 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v74, v14), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v74, v75, 0xEuLL), v19);
    uint16x8_t v84 = (uint16x8_t)vmulq_s16(v81, v20);
    uint16x8_t v85 = (uint16x8_t)vmulq_s16(v82, v21);
    int16x8_t v86 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v85.i8, *(uint16x4_t *)v84.i8), *(int16x4_t *)v83.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v84, v85), v83), 2uLL);
    int16x8_t v87 = *(int16x8_t *)_X19;
    int8x16_t v88 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v94 = (int16x8_t)vextq_s8((int8x16_t)v87, v88, 6uLL);
    int16x8_t v95 = (int16x8_t)vextq_s8((int8x16_t)v87, v88, 8uLL);
    int16x8_t v96 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v87, v14), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v87, v88, 0xEuLL), v19);
    uint16x8_t v97 = (uint16x8_t)vmulq_s16(v94, v20);
    uint16x8_t v98 = (uint16x8_t)vmulq_s16(v95, v21);
    int16x8_t v99 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v98.i8, *(uint16x4_t *)v97.i8), *(int16x4_t *)v96.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v97, v98), v96), 2uLL);
    int16x8_t v100 = *(int16x8_t *)_X19;
    int8x16_t v101 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X20 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X20]
      PRFUM           #0, [X20,#0x1E]
    }
    _X19 = &_X19[2 * a4];
    int16x8_t v107 = (int16x8_t)vextq_s8((int8x16_t)v100, v101, 6uLL);
    int16x8_t v108 = (int16x8_t)vextq_s8((int8x16_t)v100, v101, 8uLL);
    int16x8_t v109 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v100, v14), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v100, v101, 0xEuLL), v19);
    uint16x8_t v110 = (uint16x8_t)vmulq_s16(v107, v20);
    uint16x8_t v111 = (uint16x8_t)vmulq_s16(v108, v21);
    int16x8_t v112 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v111.i8, *(uint16x4_t *)v110.i8), *(int16x4_t *)v109.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v110, v111), v109), 2uLL);
    int16x8_t v113 = *(int16x8_t *)_X19;
    int8x16_t v114 = *((int8x16_t *)_X19 + 1);
    __asm { PRFUM           #0, [X19,#0x2E] }
    _X19 = &_X19[8 * a4];
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    int16x8_t v119 = (int16x8_t)vextq_s8((int8x16_t)v113, v114, 6uLL);
    int16x8_t v120 = (int16x8_t)vextq_s8((int8x16_t)v113, v114, 8uLL);
    int16x8_t v121 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v113, v14), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 2uLL), v15), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 4uLL), v16), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xAuLL), v17), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xCuLL), v18), (int16x8_t)vextq_s8((int8x16_t)v113, v114, 0xEuLL), v19);
    uint16x8_t v122 = (uint16x8_t)vmulq_s16(v119, v20);
    uint16x8_t v123 = (uint16x8_t)vmulq_s16(v120, v21);
    uint64_t v124 = a7;
    uint64_t v125 = a5;
    int v126 = a2 + 1;
    int16x8_t v127 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v123.i8, *(uint16x4_t *)v122.i8), *(int16x4_t *)v121.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v122, v123), v121), 2uLL);
    do
    {
      _X22 = v125 + v23;
      int16x8_t v129 = *(int16x8_t *)(v125 + v23 - 6);
      int8x16_t v130 = *(int8x16_t *)(v125 + v23 + 10);
      int16x8_t v131 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 2uLL);
      int16x8_t v132 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 4uLL);
      int16x8_t v133 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 6uLL);
      int16x8_t v134 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 8uLL);
      int16x8_t v135 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xAuLL);
      int16x8_t v136 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xCuLL);
      int16x8_t v137 = (int16x8_t)vextq_s8((int8x16_t)v129, v130, 0xEuLL);
      int16x8_t v138 = vmlaq_s16(vmulq_s16(v129, v14), v131, v15);
      int32x4_t v139 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v47.i8, *(int16x4_t *)v13.i8, 0);
      int32x4_t v140 = vmlal_high_lane_s16(vmull_high_lane_s16(v60, *(int16x4_t *)v13.i8, 1), v47, *(int16x4_t *)v13.i8, 0);
      int16x8_t v47 = v60;
      int16x8_t v60 = v73;
      int16x8_t v73 = v86;
      int16x8_t v86 = v99;
      int16x8_t v99 = v112;
      int16x8_t v112 = v127;
      __asm { PRFM            #0, [X22,#0x28] }
      _X22 = v125 + v22;
      __asm
      {
        PRFM            #0, [X22]
        PRFUM           #0, [X22,#0x1E]
      }
      int16x8_t v145 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v138, v132, v16), v135, v17), v136, v18), v137, v19);
      uint16x8_t v146 = (uint16x8_t)vmulq_s16(v133, v20);
      uint16x8_t v147 = (uint16x8_t)vmulq_s16(v134, v21);
      int32x4_t v148 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v147.i8, *(uint16x4_t *)v146.i8);
      int32x4_t v149 = (int32x4_t)vaddl_high_u16(v146, v147);
      int32x4_t v150 = vaddw_s16(v148, *(int16x4_t *)v145.i8);
      int32x4_t v151 = vaddw_high_s16(v149, v145);
      *(int16x4_t *)v149.i8 = vshrn_n_s32(v150, 2uLL);
      *(uint16x4_t *)v150.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v139, *(int16x4_t *)v60.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v73.i8, *(int16x4_t *)v13.i8, 3), *(int16x4_t *)v86.i8, v13, 4), *(int16x4_t *)v99.i8, v13,
                                                     5),
                                                   *(int16x4_t *)v112.i8,
                                                   v13,
                                                   6),
                                                 *(int16x4_t *)v149.i8,
                                                 v13,
                                                 7),
                                               0xAuLL),
                                 (uint16x4_t)0xFC00FC00FC00FC00);
      v150.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(v140, v60, *(int16x4_t *)v13.i8, 2), v73, *(int16x4_t *)v13.i8, 3), v86, v13, 4), v99, v13, 5), v112, v13, 6),
                                                        vshrn_n_s32(v151, 2uLL),
                                                        v13,
                                                        7),
                                                      0xAuLL),
                                        (uint16x4_t)0xFC00FC00FC00FC00);
      int16x8_t v127 = vshrn_high_n_s32(*(int16x4_t *)v149.i8, v151, 2uLL);
      *uint64_t v124 = v150;
      --v126;
      v125 += v9;
      uint64_t v124 = (_OWORD *)((char *)v124 + v11);
    }
    while (v126 > 1);
    a7 += 2;
    v24 += 16;
    int v152 = result - 8;
    v22 += 16;
    v23 += 16;
    BOOL v153 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v153);
  if (v152)
  {
LABEL_9:
    int16x8_t v154 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    int16x8_t v155 = xmmword_1D0D7FBF0[v7 - 1];
    _X13 = v24 - 6 * a4;
    int16x4_t v157 = *(int16x4_t *)(_X13 - 6);
    _X13 -= 6;
    int16x4_t v158 = *(int16x4_t *)(_X13 + 8);
    int8x8_t v159 = *(int8x8_t *)(_X13 + 16);
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)(_X13 + 2 * a4);
    int16x4_t v165 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 2uLL), *(int16x4_t *)v154.i8, 1), v157, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v157, (int8x8_t)v158, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v158,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v158, v159, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v158, v159, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v158, v159, 6uLL),
               v154,
               7),
             2uLL);
    int16x4_t v166 = *_X13;
    int16x4_t v167 = _X13[1];
    int8x8_t v168 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v174 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 2uLL), *(int16x4_t *)v154.i8, 1), v166, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v166, (int8x8_t)v167, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v167,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v167, v168, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v167, v168, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v167, v168, 6uLL),
               v154,
               7),
             2uLL);
    int16x4_t v175 = *_X13;
    int16x4_t v176 = _X13[1];
    int8x8_t v177 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v183 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 2uLL), *(int16x4_t *)v154.i8, 1), v175, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v175, (int8x8_t)v176, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v176,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v176, v177, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v176, v177, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v176, v177, 6uLL),
               v154,
               7),
             2uLL);
    int16x4_t v184 = *_X13;
    int16x4_t v185 = _X13[1];
    int8x8_t v186 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v192 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 2uLL), *(int16x4_t *)v154.i8, 1), v184, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v184, (int8x8_t)v185, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v185,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v185, v186, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v185, v186, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v185, v186, 6uLL),
               v154,
               7),
             2uLL);
    int16x4_t v193 = *_X13;
    int16x4_t v194 = _X13[1];
    int8x8_t v195 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v201 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 2uLL), *(int16x4_t *)v154.i8, 1), v193, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v193, (int8x8_t)v194, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v194,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v194, v195, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v194, v195, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v194, v195, 6uLL),
               v154,
               7),
             2uLL);
    int16x4_t v202 = *_X13;
    int16x4_t v203 = _X13[1];
    int8x8_t v204 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X14 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x16]
    }
    _X13 = (int16x4_t *)((char *)_X13 + 2 * a4);
    int16x4_t v210 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 2uLL), *(int16x4_t *)v154.i8, 1), v202, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v202, (int8x8_t)v203, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v203,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v203, v204, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v203, v204, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v203, v204, 6uLL),
               v154,
               7),
             2uLL);
    int16x4_t v211 = *_X13;
    int16x4_t v212 = _X13[1];
    int8x8_t v213 = (int8x8_t)_X13[2];
    __asm { PRFUM           #0, [X13,#0x1E] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x16]
    }
    int16x4_t v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 2uLL), *(int16x4_t *)v154.i8, 1), v211, *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8((int8x8_t)v211, (int8x8_t)v212, 6uLL), *(int16x4_t *)v154.i8,
                       3),
                     v212,
                     v154,
                     4),
                   (int16x4_t)vext_s8((int8x8_t)v212, v213, 2uLL),
                   v154,
                   5),
                 (int16x4_t)vext_s8((int8x8_t)v212, v213, 4uLL),
                 v154,
                 6),
               (int16x4_t)vext_s8((int8x8_t)v212, v213, 6uLL),
               v154,
               7),
             2uLL);
    int v219 = a2 + 1;
    uint64_t v220 = v8 - 6;
    do
    {
      _X14 = v24 + v10;
      int16x4_t v222 = *(int16x4_t *)(v24 + v10 + 2);
      __asm { PRFM            #0, [X14,#0x18] }
      _X14 = v24 + v220;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x16]
      }
      int32x4_t v227 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v174, *(int16x4_t *)v155.i8, 1), v165, *(int16x4_t *)v155.i8, 0), v183, *(int16x4_t *)v155.i8, 2), v192, *(int16x4_t *)v155.i8, 3), v201, v155, 4), v210, v155, 5), v218, v155,
               6);
      int16x4_t v165 = v174;
      int16x4_t v174 = v183;
      int16x4_t v183 = v192;
      int16x4_t v192 = v201;
      int16x4_t v201 = v210;
      int16x4_t v210 = v218;
      int16x4_t v218 = vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v222, 2uLL), *(int16x4_t *)v154.i8, 1), *(int16x4_t *)(v24 + v10 - 6), *(int16x4_t *)v154.i8, 0), (int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v222, 4uLL), *(int16x4_t *)v154.i8, 2), (int16x4_t)vext_s8(*(int8x8_t *)(v24 + v10 - 6), (int8x8_t)v222, 6uLL), *(int16x4_t *)v154.i8,
                         3),
                       v222,
                       v154,
                       4),
                     (int16x4_t)vext_s8((int8x8_t)v222, *(int8x8_t *)(v24 + v10 + 10), 2uLL),
                     v154,
                     5),
                   (int16x4_t)vext_s8((int8x8_t)v222, *(int8x8_t *)(v24 + v10 + 10), 4uLL),
                   v154,
                   6),
                 (int16x4_t)vext_s8((int8x8_t)v222, *(int8x8_t *)(v24 + v10 + 10), 6uLL),
                 v154,
                 7),
               2uLL);
      --v219;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v227, v218, v155, 7), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v24 += v9;
      a7 = (uint16x4_t *)((char *)a7 + v11);
    }
    while (v219 > 1);
  }
  return result;
}

int16x4_t *sub_1D0CBCE98(int16x4_t *result, int a2, unint64_t a3, uint64_t a4, int16x4_t *a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v163 = (a3 >> 16) & 3;
  if ((int)result < 8)
  {
    uint64_t v24 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  int16x8_t v8 = xmmword_1D0D7FBF0[((a3 >> 16) & 3) - 1];
  uint64_t v9 = 4 * a4;
  int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 0);
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2);
  int16x8_t v13 = vdupq_laneq_s16(v8, 5);
  int16x8_t v14 = vdupq_laneq_s16(v8, 6);
  int16x8_t v15 = vdupq_laneq_s16(v8, 7);
  int16x8_t v16 = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3);
  int16x8_t v17 = vdupq_laneq_s16(v8, 4);
  uint64_t v18 = 4 * a6;
  int v19 = a2 + 2;
  int16x8_t v20 = (char *)a5 + 20 * a4;
  int16x8_t v21 = &a5[a4];
  uint64_t v22 = (char *)a5 + 18 * a4;
  uint64_t v23 = (char *)a5 + 10 * a4;
  uint64_t v24 = a7;
  do
  {
    _X2 = (_OWORD *)((char *)a5 - 6 * a4);
    int16x8_t v26 = *(int16x8_t *)_X2;
    _X2 = (_OWORD *)((char *)_X2 + 30);
    int16x8_t v27 = v26;
    _X24 = (_OWORD *)((char *)a5 - 4 * a4);
    int16x8_t v29 = *(int16x8_t *)_X24;
    _X24 = (_OWORD *)((char *)_X24 + 30);
    int16x8_t v30 = v29;
    _X25 = (_OWORD *)((char *)a5 - 2 * a4);
    int16x8_t v32 = *(int16x8_t *)_X25;
    _X25 = (_OWORD *)((char *)_X25 + 30);
    int16x8_t v33 = v32;
    _X26 = (char *)&a5[3] + 6;
    int16x8_t v35 = *(int16x8_t *)a5->i8;
    _X27 = (_OWORD *)((char *)a5 + 2 * a4);
    int16x8_t v37 = *(int16x8_t *)_X27;
    _X27 = (_OWORD *)((char *)_X27 + 30);
    int16x8_t v38 = v37;
    _X28 = (_OWORD *)((char *)a5 + 4 * a4);
    int16x8_t v40 = *(int16x8_t *)_X28;
    _X28 = (_OWORD *)((char *)_X28 + 30);
    int16x8_t v41 = v40;
    _X9 = (_OWORD *)((char *)a5 + 6 * a4);
    int16x8_t v43 = *(int16x8_t *)_X9;
    _X9 = (_OWORD *)((char *)_X9 + 30);
    int16x8_t v44 = v43;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X24]
      PRFM            #0, [X25]
      PRFM            #0, [X26]
      PRFM            #0, [X27]
    }
    int v54 = v23;
    int16x8_t v55 = v22;
    int16x8_t v56 = v21;
    int16x8_t v57 = v20;
    __asm { PRFM            #0, [X28] }
    int v59 = v19;
    int16x8_t v60 = a7;
    __asm { PRFM            #0, [X9] }
    int8x16_t v62 = (char *)a7 + 2 * a6;
    do
    {
      int16x8_t v63 = v33;
      int16x8_t v64 = v35;
      int16x8_t v33 = v38;
      int16x8_t v35 = v41;
      int16x8_t v38 = v44;
      _X9 = (uint64_t)&v56[v7 / 8 + 3] + 6;
      int16x8_t v41 = *(int16x8_t *)v56[v7 / 8].i8;
      __asm { PRFM            #0, [X9] }
      _X9 = (uint64_t)&v54[v7 + 30];
      int16x8_t v44 = *(int16x8_t *)&v54[v7];
      __asm { PRFM            #0, [X9] }
      _X9 = &v55[v7];
      __asm { PRFM            #0, [X9] }
      _X1 = &v57[v7];
      __asm
      {
        PRFM            #0, [X1]
        PRFUM           #0, [X9,#0xE]
        PRFUM           #0, [X1,#0xE]
      }
      int16x8_t v75 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v38, v14), v35, v13), v63, v12), v30, v11), v27, v10);
      uint16x8_t v76 = (uint16x8_t)vmulq_s16(v64, v16);
      uint16x8_t v77 = (uint16x8_t)vmulq_s16(v33, v17);
      int16x8_t v78 = vmlaq_s16(v75, v41, v15);
      int32x4_t v79 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v76.i8, *(uint16x4_t *)v77.i8);
      int32x4_t v80 = (int32x4_t)vaddl_high_u16(v76, v77);
      int32x4_t v81 = vaddw_s16(v79, *(int16x4_t *)v78.i8);
      int16x8_t v82 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v38, v13), v64, v12), v63, v11), v30, v10), v41, v14), v44, v15);
      uint16x8_t v83 = (uint16x8_t)vmulq_s16(v33, v16);
      uint16x8_t v84 = (uint16x8_t)vmulq_s16(v35, v17);
      int32x4_t v85 = vaddw_high_s16(v80, v78);
      int32x4_t v86 = vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v83.i8, *(uint16x4_t *)v84.i8), *(int16x4_t *)v82.i8);
      int32x4_t v87 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v83, v84), v82);
      *(uint16x4_t *)v82.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v81, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v82.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v85, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(uint16x4_t *)v85.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v86, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v85.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v87, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int16x8_t *)v60[v7 / 8].i8 = v82;
      *(int32x4_t *)&v62[v7] = v85;
      v62 += v18;
      v59 -= 2;
      v57 += v9;
      int16x8_t v60 = (uint16x4_t *)((char *)v60 + v18);
      int16x8_t v56 = (int16x4_t *)((char *)v56 + v9);
      v55 += v9;
      v54 += v9;
      int16x8_t v30 = v64;
      int16x8_t v27 = v63;
    }
    while (v59 > 2);
    v24 += 2;
    a5 += 2;
    int v88 = result - 8;
    v7 += 16;
    BOOL v89 = result > 0xF;
    __n128 result = (int16x4_t *)(result - 8);
  }
  while (v89);
  if (v88)
  {
LABEL_9:
    int16x8_t v90 = xmmword_1D0D7FBF0[v163 - 1];
    _X9 = (int16x4_t *)((char *)a5 - 6 * a4);
    int16x4_t v92 = *_X9;
    _X9 = (int16x4_t *)((char *)_X9 + 14);
    int16x4_t v93 = v92;
    _X10 = (int16x4_t *)((char *)a5 - 4 * a4);
    int16x4_t v95 = *_X10;
    _X10 = (int16x4_t *)((char *)_X10 + 14);
    int16x4_t v96 = v95;
    _X11 = (int16x4_t *)((char *)a5 - 2 * a4);
    int16x4_t v98 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    int16x4_t v99 = v98;
    _X12 = (char *)&a5[1] + 6;
    int16x4_t v101 = *a5;
    _X14 = (int16x4_t *)((char *)a5 + 2 * a4);
    int16x4_t v103 = *_X14;
    _X14 = (int16x4_t *)((char *)_X14 + 14);
    int16x4_t v104 = v103;
    _X15 = (int16x4_t *)((char *)a5 + 4 * a4);
    int16x4_t v106 = *_X15;
    _X15 = (int16x4_t *)((char *)_X15 + 14);
    int16x4_t v107 = v106;
    _X16 = (int16x4_t *)((char *)a5 + 6 * a4);
    int16x4_t v109 = *_X16;
    _X16 = (int16x4_t *)((char *)_X16 + 14);
    int16x4_t v110 = v109;
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X10]
      PRFM            #0, [X11]
      PRFM            #0, [X12]
      PRFM            #0, [X14]
      PRFM            #0, [X15]
      PRFM            #0, [X16]
    }
    int v118 = a2 + 4;
    uint64_t v119 = 3 * a4;
    uint64_t v120 = 8 * a4;
    uint64_t v121 = 22 * a4;
    uint64_t v122 = 12 * a4;
    uint64_t v123 = 10 * a4;
    uint64_t v124 = 2 * a6;
    uint64_t v125 = 14 * a4;
    do
    {
      _X3 = (int16x4_t *)((char *)a5 + v123);
      _X2 = (int16x4_t *)((char *)a5 + v122);
      _X1 = (int16x4_t *)((char *)a5 + v125);
      _X17 = (char *)a5 + v121;
      __n128 result = &a5[v119];
      a5 = (int16x4_t *)((char *)a5 + v120);
      int32x4_t v130 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v96, *(int16x4_t *)v90.i8, 1), v93, *(int16x4_t *)v90.i8, 0), v99, *(int16x4_t *)v90.i8, 2), v101, *(int16x4_t *)v90.i8, 3);
      int32x4_t v131 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v99, *(int16x4_t *)v90.i8, 1), v96, *(int16x4_t *)v90.i8, 0), v101, *(int16x4_t *)v90.i8, 2);
      int32x4_t v132 = vmull_lane_s16(v101, *(int16x4_t *)v90.i8, 1);
      int32x4_t v133 = vmlal_lane_s16(vmull_lane_s16(v104, *(int16x4_t *)v90.i8, 1), v101, *(int16x4_t *)v90.i8, 0);
      _X5 = (char *)&a5[1] + 6;
      int16x4_t v101 = *a5;
      __asm { PRFM            #0, [X5] }
      int32x4_t v136 = vmlal_laneq_s16(v130, v104, v90, 4);
      int32x4_t v137 = vmlal_lane_s16(v131, v104, *(int16x4_t *)v90.i8, 3);
      int32x4_t v138 = vmlal_lane_s16(vmlal_lane_s16(v132, v99, *(int16x4_t *)v90.i8, 0), v104, *(int16x4_t *)v90.i8, 2);
      int16x4_t v93 = v104;
      int16x4_t v139 = *_X3;
      _X3 = (int16x4_t *)((char *)_X3 + 14);
      int16x4_t v104 = v139;
      __asm { PRFM            #0, [X3] }
      int32x4_t v141 = vmlal_laneq_s16(v136, v107, v90, 5);
      int32x4_t v142 = vmlal_laneq_s16(v137, v107, v90, 4);
      int32x4_t v143 = vmlal_lane_s16(v138, v107, *(int16x4_t *)v90.i8, 3);
      int32x4_t v144 = vmlal_lane_s16(v133, v107, *(int16x4_t *)v90.i8, 2);
      int16x4_t v96 = v107;
      int16x4_t v145 = *_X2;
      _X2 = (int16x4_t *)((char *)_X2 + 14);
      int16x4_t v107 = v145;
      __asm { PRFM            #0, [X2] }
      int32x4_t v147 = vmlal_laneq_s16(v141, v110, v90, 6);
      int32x4_t v148 = vmlal_laneq_s16(v142, v110, v90, 5);
      int32x4_t v149 = vmlal_laneq_s16(v143, v110, v90, 4);
      int32x4_t v150 = vmlal_lane_s16(v144, v110, *(int16x4_t *)v90.i8, 3);
      int16x4_t v99 = v110;
      int16x4_t v151 = *_X1;
      _X1 = (int16x4_t *)((char *)_X1 + 14);
      int16x4_t v110 = v151;
      __asm
      {
        PRFM            #0, [X1]
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFUM           #0, [X17,#6]
        PRFUM           #0, [X0,#6]
      }
      int32x4_t v157 = vmlal_laneq_s16(vmlal_laneq_s16(v148, *a5, v90, 6), v104, v90, 7);
      int32x4_t v158 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v149, *a5, v90, 5), v104, v90, 6), v107, v90, 7);
      int32x4_t v159 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v150, *a5, v90, 4), v104, v90, 5), v107, v90, 6), v151, v90, 7);
      *uint64_t v24 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(v147, *a5, v90, 7), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int16x4_t v160 = (uint16x4_t *)((char *)v24 + v124);
      *int16x4_t v160 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v157, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int16x4_t v161 = (uint16x4_t *)((char *)v160 + v124);
      *int16x4_t v161 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v158, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int16x4_t v162 = (uint16x4_t *)((char *)v161 + v124);
      *int16x4_t v162 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v159, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v118 -= 4;
      uint64_t v24 = (uint16x4_t *)((char *)v162 + v124);
    }
    while (v118 > 4);
  }
  return result;
}

uint64_t sub_1D0CBD2CC(uint64_t result, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x8_t v10 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
  int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 0);
  int16x8_t v12 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  int16x8_t v13 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 2);
  int16x8_t v14 = vdupq_laneq_s16(v10, 5);
  int16x8_t v15 = vdupq_laneq_s16(v10, 6);
  int16x8_t v16 = vdupq_laneq_s16(v10, 7);
  int16x8_t v17 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 3);
  int16x8_t v18 = vdupq_laneq_s16(v10, 4);
  int v19 = (int8x16_t *)(a5 - 6);
  do
  {
    int16x8_t v20 = a7;
    _X15 = v19;
    int v22 = a2 + 1;
    do
    {
      int8x16_t v23 = _X15[1];
      __asm { PRFUM           #0, [X15,#0x2E] }
      _X17 = &_X15->i8[v7 * 8];
      int16x8_t v30 = (int16x8_t)vextq_s8(*_X15, v23, 8uLL);
      int16x8_t v31 = (int16x8_t)vextq_s8(*_X15, v23, 0xEuLL);
      int16x8_t v32 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(*(int16x8_t *)_X15, v11), (int16x8_t)vextq_s8(*_X15, v23, 2uLL), v12), (int16x8_t)vextq_s8(*_X15, v23, 4uLL), v13), (int16x8_t)vextq_s8(*_X15, v23, 0xAuLL), v14), (int16x8_t)vextq_s8(*_X15, v23, 0xCuLL), v15);
      uint16x8_t v33 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X15, v23, 6uLL), v17);
      int16x8_t v34 = vmlaq_s16(v32, v31, v16);
      uint16x8_t v35 = (uint16x8_t)vmulq_s16(v30, v18);
      int32x4_t v36 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v33.i8);
      int32x4_t v37 = (int32x4_t)vaddl_high_u16(v33, v35);
      *(uint16x4_t *)v33.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_s16(v36, *(int16x4_t *)v34.i8), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v33.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vaddw_high_s16(v37, v34), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      __asm
      {
        PRFM            #0, [X17]
        PRFUM           #0, [X17,#0x1E]
      }
      *int16x8_t v20 = v33;
      --v22;
      _X15 = (int8x16_t *)((char *)_X15 + v8);
      int16x8_t v20 = (_OWORD *)((char *)v20 + v9);
    }
    while (v22 > 1);
    a7 += 2;
    a5 += 16;
    int v40 = result - 8;
    ++v19;
    BOOL v41 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v41);
  if (v40)
  {
LABEL_9:
    int16x8_t v42 = xmmword_1D0D7FBF0[(a3 & 3) - 1];
    _X11 = (int8x8_t *)(a5 - 6);
    int v44 = a2 + 1;
    do
    {
      int16x4_t v45 = (int16x4_t)_X11[1];
      __asm { PRFUM           #0, [X11,#0x1E] }
      _X13 = &_X11[v7];
      __asm
      {
        PRFM            #0, [X13]
        PRFUM           #0, [X13,#0x16]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 2uLL), *(int16x4_t *)v42.i8, 1), (int16x4_t)*_X11, *(int16x4_t *)v42.i8, 0), (int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 4uLL), *(int16x4_t *)v42.i8, 2), (int16x4_t)vext_s8(*_X11, (int8x8_t)v45, 6uLL),
                                      *(int16x4_t *)v42.i8,
                                      3),
                                    v45,
                                    v42,
                                    4),
                                  (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 2uLL),
                                  v42,
                                  5),
                                (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 4uLL),
                                v42,
                                6),
                              (int16x4_t)vext_s8((int8x8_t)v45, _X11[2], 6uLL),
                              v42,
                              7),
                            6uLL),
              (uint16x4_t)0xFC00FC00FC00FC00);
      --v44;
      _X11 = (int8x8_t *)((char *)_X11 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v44 > 1);
  }
  return result;
}

double sub_1D0CBD470(int a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v7 = 4 * a6;
  uint64_t v8 = 4 * a4;
  if (a1 < 8)
  {
    if (!a1) {
      return *(double *)&v14;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (char *)a7 + 2 * a6;
  int16x8_t v10 = (char *)a5 + 2 * a4;
  do
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = a2 + 2;
    do
    {
      long long v14 = *(_OWORD *)((char *)a5 + v11);
      long long v15 = *(_OWORD *)&v10[v11];
      *(_OWORD *)((char *)a7 + v12) = v14;
      *(_OWORD *)&v9[v12] = v15;
      v12 += v7;
      v11 += v8;
      v13 -= 2;
    }
    while (v13 > 2);
    a7 += 2;
    a5 += 2;
    int v16 = a1 - 8;
    v9 += 16;
    v10 += 16;
    BOOL v17 = a1 <= 15;
    a1 -= 8;
  }
  while (!v17);
  if (v16)
  {
LABEL_10:
    int v18 = a2 + 2;
    do
    {
      *(void *)&long long v14 = *a5;
      uint64_t v19 = *(void *)((char *)a5 + 2 * a4);
      *a7 = *a5;
      *(void *)((char *)a7 + 2 * a6) = v19;
      a7 = (void *)((char *)a7 + v7);
      a5 = (void *)((char *)a5 + v8);
      v18 -= 2;
    }
    while (v18 > 2);
  }
  return *(double *)&v14;
}

uint64_t sub_1D0CBD520(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x8_t v12 = vdupq_lane_s16(v10, 0);
  int16x8_t v13 = vdupq_lane_s16(v10, 3);
  int16x8_t v14 = vdupq_lane_s16(v10, 1);
  int16x8_t v15 = vdupq_lane_s16(v10, 2);
  uint64_t v16 = 12 * a4 - 4;
  uint64_t v17 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (_OWORD *)(_X11 + 2 * (-2 - a4));
    int16x8_t v20 = *(int16x8_t *)_X7;
    int8x16_t v21 = *((int8x16_t *)_X7 + 1);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = (char *)_X7 + 8 * a4;
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v30 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 4uLL);
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 8uLL);
    int16x8_t v32 = vmlaq_s16(vmulq_s16(v20, v12), (int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xCuLL), v13);
    uint16x8_t v33 = (uint16x8_t)vmulq_s16(v30, v14);
    uint16x8_t v34 = (uint16x8_t)vmulq_s16(v31, v15);
    int32x4_t v35 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v33.i8);
    int32x4_t v36 = (int32x4_t)vaddl_high_u16(v33, v34);
    _X7 = _X11 - 4;
    int16x8_t v38 = *(int16x8_t *)(_X11 - 4);
    int16x8_t v39 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16(v35, *(int16x4_t *)v32.i8), 2uLL), vaddw_high_s16(v36, v32), 2uLL);
    int8x16_t v40 = *(int8x16_t *)(_X11 + 12);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (_OWORD *)(_X11 - 4 + 2 * a4);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v38, v40, 4uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v38, v40, 8uLL);
    int16x8_t v48 = vmlaq_s16(vmulq_s16(v38, v12), (int16x8_t)vextq_s8((int8x16_t)v38, v40, 0xCuLL), v13);
    uint16x8_t v49 = (uint16x8_t)vmulq_s16(v46, v14);
    uint16x8_t v50 = (uint16x8_t)vmulq_s16(v47, v15);
    int16x8_t v51 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v49.i8), *(int16x4_t *)v48.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v49, v50), v48), 2uLL);
    int16x8_t v52 = *(int16x8_t *)_X7;
    int8x16_t v53 = *((int8x16_t *)_X7 + 1);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = (char *)_X7 + 8 * a4;
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v58 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v60 = vmlaq_s16(vmulq_s16(v52, v12), (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL), v13);
    uint16x8_t v61 = (uint16x8_t)vmulq_s16(v58, v14);
    uint16x8_t v62 = (uint16x8_t)vmulq_s16(v59, v15);
    int16x8_t v63 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v62.i8, *(uint16x4_t *)v61.i8), *(int16x4_t *)v60.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v61, v62), v60), 2uLL);
    int16x8_t v64 = (int16x8_t *)a7;
    uint64_t v65 = a5;
    int v66 = a2 + 1;
    do
    {
      _X21 = v65 + v17;
      int16x8_t v68 = *(int16x8_t *)(v65 + v17 - 4);
      int8x16_t v69 = *(int8x16_t *)(v65 + v17 + 12);
      int16x8_t v70 = (int16x8_t)vextq_s8((int8x16_t)v68, v69, 4uLL);
      int16x8_t v71 = (int16x8_t)vextq_s8((int8x16_t)v68, v69, 8uLL);
      int16x8_t v72 = vmlaq_s16(vmulq_s16(v68, v12), (int16x8_t)vextq_s8((int8x16_t)v68, v69, 0xCuLL), v13);
      uint16x8_t v73 = (uint16x8_t)vmulq_s16(v70, v14);
      int32x4_t v74 = (int32x4_t)vmulq_s16(v71, v15);
      int32x4_t v75 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v74.i8, *(uint16x4_t *)v73.i8);
      int32x4_t v76 = (int32x4_t)vaddl_high_u16(v73, (uint16x8_t)v74);
      v74.i64[0] = 0x38000000380000;
      v74.i64[1] = 0x38000000380000;
      v77.i64[0] = 0x38000000380000;
      v77.i64[1] = 0x38000000380000;
      int32x4_t v78 = vmlal_lane_s16(vmlal_lane_s16(v74, *(int16x4_t *)v39.i8, v11, 0), *(int16x4_t *)v51.i8, v11, 1);
      int32x4_t v79 = vmlal_high_lane_s16(vmlal_high_lane_s16(v77, v39, v11, 0), v51, v11, 1);
      int16x8_t v39 = v51;
      int16x8_t v51 = v63;
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v65 + v16;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int32x4_t v84 = vaddw_s16(v75, *(int16x4_t *)v72.i8);
      int32x4_t v85 = vaddw_high_s16(v76, v72);
      *(int16x4_t *)v84.i8 = vshrn_n_s32(v84, 2uLL);
      int32x4_t v86 = vmlal_lane_s16(vmlal_lane_s16(v78, *(int16x4_t *)v51.i8, v11, 2), *(int16x4_t *)v84.i8, v11, 3);
      int16x8_t v63 = vshrn_high_n_s32(*(int16x4_t *)v84.i8, v85, 2uLL);
      *int16x8_t v64 = vshrn_high_n_s32(vshrn_n_s32(v86, 6uLL), vmlal_lane_s16(vmlal_high_lane_s16(v79, v51, v11, 2), vshrn_n_s32(v85, 2uLL), v11, 3), 6uLL);
      --v66;
      v65 += v8;
      int16x8_t v64 = (int16x8_t *)((char *)v64 + v9);
    }
    while (v66 > 1);
    a7 += 2;
    _X11 += 16;
    int v87 = result - 8;
    v16 += 16;
    v17 += 16;
    BOOL v88 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v88);
  if (v87)
  {
LABEL_9:
    int16x4_t v89 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v90 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v92 = *(int16x4_t *)_X13;
    int16x8_t v93 = *(int16x8_t *)(_X13 + 4);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v98 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v93.i8, v89, 1), v92, v89, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), v89, 2), v93, v89, 3), 2uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (int16x4_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v104 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)_X11, v89, 1), *(int16x4_t *)(_X11 - 4), v89, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X11, *(int8x16_t *)_X11, 4uLL), v89, 2), *(int16x8_t *)_X11, v89, 3), 2uLL);
    int16x4_t v105 = *_X13;
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v110 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(_X11 + 2 * a4), v89, 1), v105, v89, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(_X11 + 2 * a4), *(int8x16_t *)(_X11 + 2 * a4), 4uLL), v89, 2), *(int16x8_t *)(_X11 + 2 * a4), v89, 3), 2uLL);
    int v111 = a2 + 1;
    do
    {
      v112.i64[0] = 0x38000000380000;
      v112.i64[1] = 0x38000000380000;
      _X14 = _X11 + 4 * a4;
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v118 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v112, v98, v90, 0), v104, v90, 1), v110, v90, 2);
      int16x4_t v98 = v104;
      int16x4_t v104 = v110;
      int16x4_t v110 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(_X11 + 4 * a4), v89, 1), *(int16x4_t *)(_X11 + 4 * a4 - 4), v89, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(_X11 + 4 * a4), *(int8x16_t *)(_X11 + 4 * a4), 4uLL), v89, 2), *(int16x8_t *)(_X11 + 4 * a4), v89, 3), 2uLL);
      --v111;
      *a7 = vshrn_n_s32(vmlal_lane_s16(v118, v110, v90, 3), 6uLL);
      _X11 += v8;
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v111 > 1);
  }
  return result;
}

unint64_t sub_1D0CBD894(unint64_t result, int a2, unint64_t a3, uint64_t a4, int16x4_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    int16x8_t v20 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x8_t v12 = vdupq_lane_s16(v11, 0);
  int16x8_t v13 = vdupq_lane_s16(v11, 3);
  int16x8_t v14 = vdupq_lane_s16(v11, 1);
  int16x8_t v15 = vdupq_lane_s16(v11, 2);
  uint64_t v16 = &_X4[2 * a4];
  uint64_t v17 = (char *)_X4 + 4 * a4;
  int v18 = (char *)_X4 + 14 * a4;
  uint64_t v19 = (char *)_X4 + 6 * a4;
  int16x8_t v20 = a7;
  do
  {
    _X20 = (_OWORD *)((char *)_X4 - 2 * a4);
    int16x8_t v22 = *(int16x8_t *)_X20;
    _X20 = (_OWORD *)((char *)_X20 + 30);
    int16x8_t v23 = v22;
    __asm { PRFM            #0, [X20] }
    _X23 = (_OWORD *)((char *)_X4 + 2 * a4);
    int16x8_t v30 = *(int16x8_t *)_X4->i8;
    __asm { PRFUM           #0, [X4,#0x1E] }
    int16x8_t v32 = *(int16x8_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 30);
    int16x8_t v33 = v32;
    uint16x8_t v34 = v19;
    int32x4_t v35 = v18;
    int32x4_t v36 = v17;
    __asm { PRFM            #0, [X23] }
    int16x8_t v38 = v16;
    int v39 = a2 + 2;
    int8x16_t v40 = a7;
    BOOL v41 = (char *)a7 + 2 * a6;
    do
    {
      int16x8_t v42 = vmulq_s16(v23, v12);
      int16x8_t v23 = v33;
      uint16x8_t v43 = (uint16x8_t)vmulq_s16(v30, v14);
      _X27 = (uint64_t)&v36[v10 + 30];
      int16x8_t v45 = *(int16x8_t *)&v36[v10];
      __asm { PRFM            #0, [X27] }
      uint16x8_t v47 = (uint16x8_t)vmulq_s16(v33, v15);
      uint16x8_t v48 = (uint16x8_t)vmulq_s16(v33, v14);
      _X27 = (uint64_t)&v34[v10 + 30];
      int16x8_t v33 = *(int16x8_t *)&v34[v10];
      __asm { PRFM            #0, [X27] }
      _X27 = &v35[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v38[v10 / 8];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      int16x8_t v57 = vmlaq_s16(v42, v45, v13);
      int32x4_t v58 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8);
      int32x4_t v59 = (int32x4_t)vaddl_high_u16(v43, v47);
      int32x4_t v60 = vaddw_s16(v58, *(int16x4_t *)v57.i8);
      int32x4_t v61 = vaddw_high_s16(v59, v57);
      int16x8_t v62 = vmlaq_s16(vmulq_s16(v30, v12), v33, v13);
      uint16x8_t v63 = (uint16x8_t)vmulq_s16(v45, v15);
      int32x4_t v64 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v48.i8);
      int32x4_t v65 = (int32x4_t)vaddl_high_u16(v63, v48);
      int32x4_t v66 = vaddw_s16(v64, *(int16x4_t *)v62.i8);
      int32x4_t v67 = vaddw_high_s16(v65, v62);
      *(int16x4_t *)v65.i8 = vadd_s16(vshrn_n_s32(v60, 2uLL), (int16x4_t)0xE000E000E000E000);
      v65.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v61, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)v40[v10 / 8].i8 = v65;
      *(int16x4_t *)v61.i8 = vadd_s16(vshrn_n_s32(v66, 2uLL), (int16x4_t)0xE000E000E000E000);
      v61.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v67, 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int32x4_t *)&v41[v10] = v61;
      v41 += v9;
      int8x16_t v40 = (int16x4_t *)((char *)v40 + v9);
      v39 -= 2;
      int16x8_t v38 = (int16x4_t *)((char *)v38 + v8);
      v36 += v8;
      v35 += v8;
      v34 += v8;
      int16x8_t v30 = v45;
    }
    while (v39 > 2);
    v20 += 2;
    _X4 += 2;
    int v68 = result - 8;
    v10 += 16;
    BOOL v69 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v69);
  if (v68)
  {
LABEL_9:
    int16x4_t v70 = qword_1D0D7FC20[2 * v7 - 2];
    _X11 = (int16x4_t *)((char *)_X4 - 2 * a4);
    int16x4_t v72 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    int16x4_t v73 = v72;
    __asm { PRFM            #0, [X11] }
    int16x4_t v75 = *_X4;
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (int16x4_t *)((char *)_X4 + 2 * a4);
    int16x4_t v78 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    int16x4_t v79 = v78;
    __asm { PRFM            #0, [X11] }
    int v81 = a2 + 2;
    do
    {
      int32x4_t v82 = vmlal_lane_s16(vmull_lane_s16(v75, v70, 1), v73, v70, 0);
      _X17 = (int16x4_t *)((char *)_X4 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[2 * a4];
      _X4 = (int16x4_t *)((char *)_X4 + v8);
      int32x4_t v85 = vmlal_lane_s16(vmull_lane_s16(v79, v70, 1), v75, v70, 0);
      _X16 = (char *)&_X4[1] + 6;
      int16x4_t v75 = *_X4;
      __asm { PRFM            #0, [X16] }
      int32x4_t v88 = vmlal_lane_s16(v82, v79, v70, 2);
      int16x4_t v73 = v79;
      int16x4_t v89 = *_X17;
      _X17 = (int16x4_t *)((char *)_X17 + 14);
      int16x4_t v79 = v89;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      int32x4_t v95 = vmlal_lane_s16(vmlal_lane_s16(v85, *_X4, v70, 2), v89, v70, 3);
      *int16x8_t v20 = vadd_s16(vshrn_n_s32(vmlal_lane_s16(v88, *_X4, v70, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      *(int16x4_t *)((char *)v20 + 2 * a6) = vadd_s16(vshrn_n_s32(v95, 2uLL), (int16x4_t)0xE000E000E000E000);
      int16x8_t v20 = (int16x4_t *)((char *)v20 + v9);
      v81 -= 2;
    }
    while (v81 > 2);
  }
  return result;
}

uint64_t sub_1D0CBDB20(uint64_t result, int a2, char a3, uint64_t a4, int16x4_t *_X4, uint64_t a6, int16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x8_t v11 = vdupq_lane_s16(v10, 0);
  int16x8_t v12 = vdupq_lane_s16(v10, 3);
  int16x8_t v13 = vdupq_lane_s16(v10, 1);
  int16x8_t v14 = vdupq_lane_s16(v10, 2);
  int16x8_t v15 = (int8x16_t *)((char *)&_X4[-1] + 4);
  do
  {
    uint64_t v16 = a7;
    _X15 = v15;
    int v18 = a2 + 1;
    do
    {
      int8x16_t v19 = _X15[1];
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      int16x8_t v27 = (int16x8_t)vextq_s8(*_X15, v19, 8uLL);
      int16x8_t v28 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X15, v11), (int16x8_t)vextq_s8(*_X15, v19, 0xCuLL), v12);
      uint16x8_t v29 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X15, v19, 4uLL), v13);
      uint16x8_t v30 = (uint16x8_t)vmulq_s16(v27, v14);
      int32x4_t v31 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v29.i8);
      int32x4_t v32 = (int32x4_t)vaddl_high_u16(v29, v30);
      int32x4_t v33 = vaddw_s16(v31, *(int16x4_t *)v28.i8);
      int32x4_t v34 = vaddw_high_s16(v32, v28);
      *(int16x4_t *)v32.i8 = vadd_s16(vshrn_n_s32(v33, 2uLL), (int16x4_t)0xE000E000E000E000);
      v32.u64[1] = (unint64_t)vadd_s16(vshrn_n_s32(v34, 2uLL), (int16x4_t)0xE000E000E000E000);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *uint64_t v16 = v32;
      --v18;
      _X15 = (int8x16_t *)((char *)_X15 + v8);
      uint64_t v16 = (_OWORD *)((char *)v16 + v9);
    }
    while (v18 > 1);
    a7 += 2;
    _X4 += 2;
    int v36 = result - 8;
    ++v15;
    BOOL v37 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v37);
  if (v36)
  {
LABEL_9:
    int16x4_t v38 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v39 = a2 + 1;
    uint64_t v40 = v7 - 4;
    do
    {
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = (char *)_X4 + v40;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vadd_s16(vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X4, v38, 1), *(int16x4_t *)((char *)_X4 - 4), v38, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X4->i8, *(int8x16_t *)_X4->i8, 4uLL), v38, 2), *(int16x8_t *)_X4->i8, v38, 3), 2uLL), (int16x4_t)0xE000E000E000E000);
      --v39;
      _X4 = (int16x4_t *)((char *)_X4 + v8);
      a7 = (int16x4_t *)((char *)a7 + v9);
    }
    while (v39 > 1);
  }
  return result;
}

uint64_t sub_1D0CBDC70(uint64_t result, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    _X11 = a5;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x8_t v12 = vdupq_lane_s16(v10, 0);
  int16x8_t v13 = vdupq_lane_s16(v10, 3);
  int16x8_t v14 = vdupq_lane_s16(v10, 1);
  int16x8_t v15 = vdupq_lane_s16(v10, 2);
  uint64_t v16 = 12 * a4 - 4;
  uint64_t v17 = 4 * a4;
  _X11 = a5;
  do
  {
    _X7 = (_OWORD *)(_X11 + 2 * (-2 - a4));
    int16x8_t v20 = *(int16x8_t *)_X7;
    int8x16_t v21 = *((int8x16_t *)_X7 + 1);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = (char *)_X7 + 8 * a4;
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v30 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 4uLL);
    int16x8_t v31 = (int16x8_t)vextq_s8((int8x16_t)v20, v21, 8uLL);
    int16x8_t v32 = vmlaq_s16(vmulq_s16(v20, v12), (int16x8_t)vextq_s8((int8x16_t)v20, v21, 0xCuLL), v13);
    uint16x8_t v33 = (uint16x8_t)vmulq_s16(v30, v14);
    uint16x8_t v34 = (uint16x8_t)vmulq_s16(v31, v15);
    int32x4_t v35 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v33.i8);
    int32x4_t v36 = (int32x4_t)vaddl_high_u16(v33, v34);
    _X7 = _X11 - 4;
    int16x8_t v38 = *(int16x8_t *)(_X11 - 4);
    int16x8_t v39 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16(v35, *(int16x4_t *)v32.i8), 2uLL), vaddw_high_s16(v36, v32), 2uLL);
    int8x16_t v40 = *(int8x16_t *)(_X11 + 12);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X19 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X19]
      PRFUM           #0, [X19,#0x1E]
    }
    _X7 = (_OWORD *)(_X11 - 4 + 2 * a4);
    int16x8_t v46 = (int16x8_t)vextq_s8((int8x16_t)v38, v40, 4uLL);
    int16x8_t v47 = (int16x8_t)vextq_s8((int8x16_t)v38, v40, 8uLL);
    int16x8_t v48 = vmlaq_s16(vmulq_s16(v38, v12), (int16x8_t)vextq_s8((int8x16_t)v38, v40, 0xCuLL), v13);
    uint16x8_t v49 = (uint16x8_t)vmulq_s16(v46, v14);
    uint16x8_t v50 = (uint16x8_t)vmulq_s16(v47, v15);
    int16x8_t v51 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v50.i8, *(uint16x4_t *)v49.i8), *(int16x4_t *)v48.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v49, v50), v48), 2uLL);
    int16x8_t v52 = *(int16x8_t *)_X7;
    int8x16_t v53 = *((int8x16_t *)_X7 + 1);
    __asm { PRFUM           #0, [X7,#0x3E] }
    _X7 = (char *)_X7 + 8 * a4;
    __asm
    {
      PRFM            #0, [X7]
      PRFUM           #0, [X7,#0x1E]
    }
    int16x8_t v58 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 4uLL);
    int16x8_t v59 = (int16x8_t)vextq_s8((int8x16_t)v52, v53, 8uLL);
    int16x8_t v60 = vmlaq_s16(vmulq_s16(v52, v12), (int16x8_t)vextq_s8((int8x16_t)v52, v53, 0xCuLL), v13);
    uint16x8_t v61 = (uint16x8_t)vmulq_s16(v58, v14);
    uint16x8_t v62 = (uint16x8_t)vmulq_s16(v59, v15);
    int16x8_t v63 = vshrn_high_n_s32(vshrn_n_s32(vaddw_s16((int32x4_t)vaddl_u16(*(uint16x4_t *)v62.i8, *(uint16x4_t *)v61.i8), *(int16x4_t *)v60.i8), 2uLL), vaddw_high_s16((int32x4_t)vaddl_high_u16(v61, v62), v60), 2uLL);
    int32x4_t v64 = a7;
    uint64_t v65 = a5;
    int v66 = a2 + 1;
    do
    {
      int32x4_t v67 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v51.i8, v11, 1), *(int16x4_t *)v39.i8, v11, 0);
      int32x4_t v68 = vmlal_high_lane_s16(vmull_high_lane_s16(v51, v11, 1), v39, v11, 0);
      int16x8_t v39 = v51;
      int16x8_t v51 = v63;
      _X21 = v65 + v17;
      int16x8_t v70 = *(int16x8_t *)(v65 + v17 - 4);
      int8x16_t v71 = *(int8x16_t *)(v65 + v17 + 12);
      __asm { PRFUM           #0, [X21,#0x3A] }
      _X21 = v65 + v16;
      __asm
      {
        PRFM            #0, [X21]
        PRFUM           #0, [X21,#0x1E]
      }
      int16x8_t v76 = (int16x8_t)vextq_s8((int8x16_t)v70, v71, 4uLL);
      int16x8_t v77 = (int16x8_t)vextq_s8((int8x16_t)v70, v71, 8uLL);
      int16x8_t v78 = vmlaq_s16(vmulq_s16(v70, v12), (int16x8_t)vextq_s8((int8x16_t)v70, v71, 0xCuLL), v13);
      uint16x8_t v79 = (uint16x8_t)vmulq_s16(v76, v14);
      uint16x8_t v80 = (uint16x8_t)vmulq_s16(v77, v15);
      int32x4_t v81 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v80.i8, *(uint16x4_t *)v79.i8);
      int32x4_t v82 = vaddw_high_s16((int32x4_t)vaddl_high_u16(v79, v80), v78);
      *(int16x4_t *)v78.i8 = vshrn_n_s32(vaddw_s16(v81, *(int16x4_t *)v78.i8), 2uLL);
      *(uint16x4_t *)v67.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_lane_s16(v67, *(int16x4_t *)v51.i8, v11, 2), *(int16x4_t *)v78.i8, v11, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v67.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(v68, v51, v11, 2), vshrn_n_s32(v82, 2uLL), v11, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int16x8_t v63 = vshrn_high_n_s32(*(int16x4_t *)v78.i8, v82, 2uLL);
      *int32x4_t v64 = v67;
      --v66;
      v65 += v8;
      int32x4_t v64 = (_OWORD *)((char *)v64 + v9);
    }
    while (v66 > 1);
    a7 += 2;
    _X11 += 16;
    int v83 = result - 8;
    v16 += 16;
    v17 += 16;
    BOOL v84 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v84);
  if (v83)
  {
LABEL_9:
    int16x4_t v85 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int16x4_t v86 = qword_1D0D7FC20[2 * v7 - 2];
    _X13 = _X11 + 2 * (-2 - a4);
    int16x4_t v88 = *(int16x4_t *)_X13;
    int16x8_t v89 = *(int16x8_t *)(_X13 + 4);
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = _X13 + 8 * a4;
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v94 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v89.i8, v85, 1), v88, v85, 0), (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL), v85, 2), v89, v85, 3), 2uLL);
    __asm { PRFUM           #0, [X11,#0x1E] }
    _X14 = _X11 - 4 + 8 * a4;
    __asm
    {
      PRFM            #0, [X14]
      PRFUM           #0, [X14,#0x12]
    }
    _X13 = (uint64_t *)(_X11 - 4 + 2 * a4);
    int16x4_t v100 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)_X11, v85, 1), *(int16x4_t *)(_X11 - 4), v85, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X11, *(int8x16_t *)_X11, 4uLL), v85, 2), *(int16x8_t *)_X11, v85, 3), 2uLL);
    v89.i64[0] = *_X13;
    __asm { PRFUM           #0, [X13,#0x22] }
    _X13 = &_X13[a4];
    __asm
    {
      PRFM            #0, [X13]
      PRFUM           #0, [X13,#0x12]
    }
    int16x4_t v105 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(_X11 + 2 * a4), v85, 1), *(int16x4_t *)v89.i8, v85, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(_X11 + 2 * a4), *(int8x16_t *)(_X11 + 2 * a4), 4uLL), v85, 2), *(int16x8_t *)(_X11 + 2 * a4), v85, 3), 2uLL);
    int v106 = a2 + 1;
    do
    {
      _X14 = _X11 + 4 * a4;
      __asm { PRFUM           #0, [X14,#0x1E] }
      _X14 = _X11 + 12 * a4 - 4;
      __asm
      {
        PRFM            #0, [X14]
        PRFUM           #0, [X14,#0x12]
      }
      int32x4_t v112 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v100, v86, 1), v94, v86, 0), v105, v86, 2);
      int16x4_t v94 = v100;
      int16x4_t v100 = v105;
      int16x4_t v105 = vshrn_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(_X11 + 4 * a4), v85, 1), *(int16x4_t *)(_X11 + 4 * a4 - 4), v85, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(_X11 + 4 * a4), *(int8x16_t *)(_X11 + 4 * a4), 4uLL), v85, 2), *(int16x8_t *)(_X11 + 4 * a4), v85, 3), 2uLL);
      --v106;
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v112, v105, v86, 3), 0xAuLL), (uint16x4_t)0xFC00FC00FC00FC00);
      _X11 += v8;
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v106 > 1);
  }
  return result;
}

unint64_t sub_1D0CBDFF0(unint64_t result, int a2, unint64_t a3, uint64_t a4, int16x4_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = (a3 >> 16) & 7;
  uint64_t v8 = 4 * a4;
  uint64_t v9 = 4 * a6;
  if ((int)result < 8)
  {
    int16x8_t v20 = a7;
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v10 = 0;
  int16x4_t v11 = qword_1D0D7FC20[2 * v7 - 2];
  int16x8_t v12 = vdupq_lane_s16(v11, 0);
  int16x8_t v13 = vdupq_lane_s16(v11, 3);
  int16x8_t v14 = vdupq_lane_s16(v11, 1);
  int16x8_t v15 = vdupq_lane_s16(v11, 2);
  uint64_t v16 = &_X4[2 * a4];
  uint64_t v17 = (char *)_X4 + 4 * a4;
  int v18 = (char *)_X4 + 14 * a4;
  int8x16_t v19 = (char *)_X4 + 6 * a4;
  int16x8_t v20 = a7;
  do
  {
    _X20 = (_OWORD *)((char *)_X4 - 2 * a4);
    int16x8_t v22 = *(int16x8_t *)_X20;
    _X20 = (_OWORD *)((char *)_X20 + 30);
    int16x8_t v23 = v22;
    __asm { PRFM            #0, [X20] }
    _X23 = (_OWORD *)((char *)_X4 + 2 * a4);
    int16x8_t v30 = *(int16x8_t *)_X4->i8;
    __asm { PRFUM           #0, [X4,#0x1E] }
    int16x8_t v32 = *(int16x8_t *)_X23;
    _X23 = (_OWORD *)((char *)_X23 + 30);
    int16x8_t v33 = v32;
    uint16x8_t v34 = v19;
    int32x4_t v35 = v18;
    int32x4_t v36 = v17;
    __asm { PRFM            #0, [X23] }
    int16x8_t v38 = v16;
    int v39 = a2 + 2;
    int8x16_t v40 = a7;
    BOOL v41 = (char *)a7 + 2 * a6;
    do
    {
      int16x8_t v42 = vmulq_s16(v23, v12);
      int16x8_t v23 = v33;
      uint16x8_t v43 = (uint16x8_t)vmulq_s16(v30, v14);
      _X27 = (uint64_t)&v36[v10 + 30];
      int16x8_t v45 = *(int16x8_t *)&v36[v10];
      __asm { PRFM            #0, [X27] }
      uint16x8_t v47 = (uint16x8_t)vmulq_s16(v33, v15);
      uint16x8_t v48 = (uint16x8_t)vmulq_s16(v33, v14);
      _X27 = (uint64_t)&v34[v10 + 30];
      int16x8_t v33 = *(int16x8_t *)&v34[v10];
      __asm { PRFM            #0, [X27] }
      _X27 = &v35[v10];
      __asm { PRFM            #0, [X27] }
      _X28 = &v38[v10 / 8];
      __asm
      {
        PRFM            #0, [X28]
        PRFUM           #0, [X27,#0xE]
        PRFUM           #0, [X28,#0xE]
      }
      int16x8_t v57 = vmlaq_s16(v42, v45, v13);
      int32x4_t v58 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v47.i8);
      int32x4_t v59 = (int32x4_t)vaddl_high_u16(v43, v47);
      int32x4_t v60 = vaddw_s16(v58, *(int16x4_t *)v57.i8);
      int32x4_t v61 = vaddw_high_s16(v59, v57);
      int16x8_t v62 = vmlaq_s16(vmulq_s16(v30, v12), v33, v13);
      uint16x8_t v63 = (uint16x8_t)vmulq_s16(v45, v15);
      int32x4_t v64 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v63.i8, *(uint16x4_t *)v48.i8);
      int32x4_t v65 = (int32x4_t)vaddl_high_u16(v63, v48);
      int32x4_t v66 = vaddw_s16(v64, *(int16x4_t *)v62.i8);
      int32x4_t v67 = vaddw_high_s16(v65, v62);
      *(uint16x4_t *)v65.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v60, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v65.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v61, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int32x4_t *)v40[v10 / 8].i8 = v65;
      *(uint16x4_t *)v61.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v66, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v61.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v67, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(int32x4_t *)&v41[v10] = v61;
      v41 += v9;
      int8x16_t v40 = (uint16x4_t *)((char *)v40 + v9);
      v39 -= 2;
      int16x8_t v38 = (int16x4_t *)((char *)v38 + v8);
      v36 += v8;
      v35 += v8;
      v34 += v8;
      int16x8_t v30 = v45;
    }
    while (v39 > 2);
    v20 += 2;
    _X4 += 2;
    int v68 = result - 8;
    v10 += 16;
    BOOL v69 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v69);
  if (v68)
  {
LABEL_9:
    int16x4_t v70 = qword_1D0D7FC20[2 * v7 - 2];
    _X11 = (int16x4_t *)((char *)_X4 - 2 * a4);
    int16x4_t v72 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    int16x4_t v73 = v72;
    __asm { PRFM            #0, [X11] }
    int16x4_t v75 = *_X4;
    __asm { PRFUM           #0, [X4,#0xE] }
    _X11 = (int16x4_t *)((char *)_X4 + 2 * a4);
    int16x4_t v78 = *_X11;
    _X11 = (int16x4_t *)((char *)_X11 + 14);
    int16x4_t v79 = v78;
    __asm { PRFM            #0, [X11] }
    int v81 = a2 + 2;
    do
    {
      int32x4_t v82 = vmlal_lane_s16(vmull_lane_s16(v75, v70, 1), v73, v70, 0);
      _X17 = (int16x4_t *)((char *)_X4 + 6 * a4);
      __n128 result = (unint64_t)_X4 + 14 * a4;
      _X1 = &_X4[2 * a4];
      _X4 = (int16x4_t *)((char *)_X4 + v8);
      int32x4_t v85 = vmlal_lane_s16(vmull_lane_s16(v79, v70, 1), v75, v70, 0);
      _X16 = (char *)&_X4[1] + 6;
      int16x4_t v75 = *_X4;
      __asm { PRFM            #0, [X16] }
      int32x4_t v88 = vmlal_lane_s16(v82, v79, v70, 2);
      int16x4_t v73 = v79;
      int16x4_t v89 = *_X17;
      _X17 = (int16x4_t *)((char *)_X17 + 14);
      int16x4_t v79 = v89;
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
        PRFM            #0, [X1]
        PRFUM           #0, [X0,#6]
        PRFUM           #0, [X1,#6]
      }
      int32x4_t v95 = vmlal_lane_s16(vmlal_lane_s16(v85, *_X4, v70, 2), v89, v70, 3);
      *int16x8_t v20 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_lane_s16(v88, *_X4, v70, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      *(uint16x4_t *)((char *)v20 + 2 * a6) = vmin_u16((uint16x4_t)vqrshrun_n_s32(v95, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      int16x8_t v20 = (uint16x4_t *)((char *)v20 + v9);
      v81 -= 2;
    }
    while (v81 > 2);
  }
  return result;
}

uint64_t sub_1D0CBE27C(uint64_t result, int a2, char a3, uint64_t a4, int16x4_t *_X4, uint64_t a6, uint16x4_t *a7)
{
  uint64_t v7 = 8 * a4;
  uint64_t v8 = 2 * a4;
  uint64_t v9 = 2 * a6;
  if ((int)result < 8)
  {
    if (!result) {
      return result;
    }
    goto LABEL_9;
  }
  int16x4_t v10 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
  int16x8_t v11 = vdupq_lane_s16(v10, 0);
  int16x8_t v12 = vdupq_lane_s16(v10, 3);
  int16x8_t v13 = vdupq_lane_s16(v10, 1);
  int16x8_t v14 = vdupq_lane_s16(v10, 2);
  int16x8_t v15 = (int8x16_t *)((char *)&_X4[-1] + 4);
  do
  {
    uint64_t v16 = a7;
    _X15 = v15;
    int v18 = a2 + 1;
    do
    {
      int8x16_t v19 = _X15[1];
      __asm { PRFUM           #0, [X15,#0x3E] }
      _X17 = &_X15->i8[v7];
      __asm { PRFM            #0, [X17] }
      int16x8_t v27 = (int16x8_t)vextq_s8(*_X15, v19, 8uLL);
      int16x8_t v28 = vmlaq_s16(vmulq_s16(*(int16x8_t *)_X15, v11), (int16x8_t)vextq_s8(*_X15, v19, 0xCuLL), v12);
      uint16x8_t v29 = (uint16x8_t)vmulq_s16((int16x8_t)vextq_s8(*_X15, v19, 4uLL), v13);
      uint16x8_t v30 = (uint16x8_t)vmulq_s16(v27, v14);
      int32x4_t v31 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v29.i8);
      int32x4_t v32 = (int32x4_t)vaddl_high_u16(v29, v30);
      int32x4_t v33 = vaddw_s16(v31, *(int16x4_t *)v28.i8);
      int32x4_t v34 = vaddw_high_s16(v32, v28);
      *(uint16x4_t *)v32.i8 = vmin_u16((uint16x4_t)vqrshrun_n_s32(v33, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      v32.u64[1] = (unint64_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v34, 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      __asm { PRFUM           #0, [X17,#0x1E] }
      *uint64_t v16 = v32;
      --v18;
      _X15 = (int8x16_t *)((char *)_X15 + v8);
      uint64_t v16 = (_OWORD *)((char *)v16 + v9);
    }
    while (v18 > 1);
    a7 += 2;
    _X4 += 2;
    int v36 = result - 8;
    ++v15;
    BOOL v37 = result > 0xF;
    __n128 result = (result - 8);
  }
  while (v37);
  if (v36)
  {
LABEL_9:
    int16x4_t v38 = qword_1D0D7FC20[2 * (a3 & 7) - 2];
    int v39 = a2 + 1;
    uint64_t v40 = v7 - 4;
    do
    {
      __asm { PRFUM           #0, [X4,#0x1E] }
      _X12 = (char *)_X4 + v40;
      __asm
      {
        PRFM            #0, [X12]
        PRFUM           #0, [X12,#0x12]
      }
      *a7 = vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*_X4, v38, 1), *(int16x4_t *)((char *)_X4 - 4), v38, 0), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X4->i8, *(int8x16_t *)_X4->i8, 4uLL), v38, 2), *(int16x8_t *)_X4->i8, v38, 3), 6uLL), (uint16x4_t)0xFC00FC00FC00FC00);
      --v39;
      _X4 = (int16x4_t *)((char *)_X4 + v8);
      a7 = (uint16x4_t *)((char *)a7 + v9);
    }
    while (v39 > 1);
  }
  return result;
}

uint64_t sub_1D0CBE3CC(uint64_t result, FILE *__stream)
{
  uint64_t v3 = (unsigned __int8 *)result;
  int v4 = dword_1EB671A40;
  if (dword_1EB671A40 >= 6)
  {
    __n128 result = fprintf(__stream, "=========== Picture Parameter Set ID: %d ===========\n", *(unsigned __int8 *)result);
    int v4 = dword_1EB671A40;
    if (dword_1EB671A40 >= 6)
    {
      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_pic_parameter_set_id", *v3);
      int v4 = dword_1EB671A40;
      if (dword_1EB671A40 >= 6)
      {
        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_seq_parameter_set_id", v3[1]);
        int v4 = dword_1EB671A40;
        if (dword_1EB671A40 >= 6)
        {
          __n128 result = fprintf(__stream, "  %-44s : %lld\n", "dependent_slice_segments_enabled_flag", v3[2]);
          int v4 = dword_1EB671A40;
          if (dword_1EB671A40 >= 6)
          {
            __n128 result = fprintf(__stream, "  %-44s : %lld\n", "output_flag_present_flag", v3[3]);
            int v4 = dword_1EB671A40;
            if (dword_1EB671A40 >= 6)
            {
              __n128 result = fprintf(__stream, "  %-44s : %lld\n", "num_extra_slice_header_bits", v3[4]);
              int v4 = dword_1EB671A40;
              if (dword_1EB671A40 >= 6)
              {
                __n128 result = fprintf(__stream, "  %-44s : %lld\n", "sign_data_hiding_flag", v3[5]);
                int v4 = dword_1EB671A40;
                if (dword_1EB671A40 >= 6)
                {
                  __n128 result = fprintf(__stream, "  %-44s : %lld\n", "cabac_init_present_flag", v3[6]);
                  int v4 = dword_1EB671A40;
                  if (dword_1EB671A40 >= 6)
                  {
                    __n128 result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_l0_default_active_minus1", v3[7]);
                    int v4 = dword_1EB671A40;
                    if (dword_1EB671A40 >= 6)
                    {
                      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "num_ref_idx_l1_default_active_minus1", v3[8]);
                      int v4 = dword_1EB671A40;
                      if (dword_1EB671A40 >= 6)
                      {
                        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "init_qp_minus26", (char)v3[9]);
                        int v4 = dword_1EB671A40;
                        if (dword_1EB671A40 >= 6)
                        {
                          __n128 result = fprintf(__stream, "  %-44s : %lld\n", "constrained_intra_pred_flag", v3[10]);
                          int v4 = dword_1EB671A40;
                          if (dword_1EB671A40 >= 6)
                          {
                            __n128 result = fprintf(__stream, "  %-44s : %lld\n", "transform_skip_enabled_flag", v3[11]);
                            int v4 = dword_1EB671A40;
                            if (dword_1EB671A40 >= 6)
                            {
                              __n128 result = fprintf(__stream, "  %-44s : %lld\n", "cu_qp_delta_enabled_flag", v3[12]);
                              int v4 = dword_1EB671A40;
                              if (v3[12] && dword_1EB671A40 >= 6)
                              {
                                __n128 result = fprintf(__stream, "  %-44s : %lld\n", "diff_cu_qp_delta_depth", v3[13]);
                                int v4 = dword_1EB671A40;
                              }
                              if (v4 >= 6)
                              {
                                __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_cb_qp_offset", (char)v3[14]);
                                int v4 = dword_1EB671A40;
                                if (dword_1EB671A40 >= 6)
                                {
                                  __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_cr_qp_offset", (char)v3[15]);
                                  int v4 = dword_1EB671A40;
                                  if (dword_1EB671A40 >= 6)
                                  {
                                    __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_slice_chroma_qp_offsets_present_flag", v3[16]);
                                    int v4 = dword_1EB671A40;
                                    if (dword_1EB671A40 >= 6)
                                    {
                                      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "weighted_pred_flag", v3[17]);
                                      int v4 = dword_1EB671A40;
                                      if (dword_1EB671A40 >= 6)
                                      {
                                        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "weighted_bipred_flag", v3[18]);
                                        int v4 = dword_1EB671A40;
                                        if (dword_1EB671A40 >= 6)
                                        {
                                          __n128 result = fprintf(__stream, "  %-44s : %lld\n", "transquant_bypass_enabled_flag", v3[19]);
                                          int v4 = dword_1EB671A40;
                                          if (dword_1EB671A40 >= 6)
                                          {
                                            __n128 result = fprintf(__stream, "  %-44s : %lld\n", "tiles_enabled_flag", v3[20]);
                                            int v4 = dword_1EB671A40;
                                            if (dword_1EB671A40 >= 6)
                                            {
                                              __n128 result = fprintf(__stream, "  %-44s : %lld\n", "entropy_coding_sync_enabled_flag", v3[21]);
                                              int v4 = dword_1EB671A40;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!v3[20]) {
    goto LABEL_46;
  }
  if (v4 >= 6)
  {
    __n128 result = fprintf(__stream, "  %-44s : %lld\n", "num_tile_columns_minus1", *((unsigned __int16 *)v3 + 11));
    if (dword_1EB671A40 >= 6)
    {
      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "num_tile_rows_minus1", *((unsigned __int16 *)v3 + 12));
      if (dword_1EB671A40 >= 6) {
        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "uniform_spacing_flag", v3[26]);
      }
    }
  }
  if (v3[26])
  {
    int v4 = dword_1EB671A40;
  }
  else
  {
    unsigned int v5 = *((unsigned __int16 *)v3 + 11);
    int v4 = dword_1EB671A40;
    if (*((_WORD *)v3 + 11))
    {
      unint64_t v6 = 0;
      do
      {
        if (v4 >= 6)
        {
          __n128 result = fprintf(__stream, "      %-40s : %lld\n", "tiles_.column_width_minus1", *(unsigned __int16 *)(*((void *)v3 + 206) + 2 * v6));
          int v4 = dword_1EB671A40;
          unsigned int v5 = *((unsigned __int16 *)v3 + 11);
        }
        ++v6;
      }
      while (v6 < v5);
    }
    unsigned int v7 = *((unsigned __int16 *)v3 + 12);
    if (*((_WORD *)v3 + 12))
    {
      unint64_t v8 = 0;
      do
      {
        if (v4 >= 6)
        {
          __n128 result = fprintf(__stream, "      %-40s : %lld\n", "tiles_.row_height_minus1", *(unsigned __int16 *)(*((void *)v3 + 209) + 2 * v8));
          int v4 = dword_1EB671A40;
          unsigned int v7 = *((unsigned __int16 *)v3 + 12);
        }
        ++v8;
      }
      while (v8 < v7);
    }
  }
  if (v4 >= 6)
  {
    __n128 result = fprintf(__stream, "  %-44s : %lld\n", "loop_filter_across_tiles_enabled_flag", v3[27]);
    int v4 = dword_1EB671A40;
LABEL_46:
    if (v4 >= 6)
    {
      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "loop_filter_across_slices_enabled_flag", v3[28]);
      int v4 = dword_1EB671A40;
      if (dword_1EB671A40 >= 6)
      {
        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "deblocking_filter_control_present_flag", v3[29]);
        int v4 = dword_1EB671A40;
      }
    }
  }
  if (v3[29])
  {
    if (v4 >= 6)
    {
      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "deblocking_filter_override_enabled_flag", v3[30]);
      int v4 = dword_1EB671A40;
      if (dword_1EB671A40 >= 6)
      {
        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_deblocking_filter_disabled_flag", v3[31]);
        int v4 = dword_1EB671A40;
      }
    }
    if (!v3[31])
    {
      if (v4 < 6) {
        goto LABEL_59;
      }
      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_beta_offset_div2", (char)v3[32]);
      if (dword_1EB671A40 < 6) {
        goto LABEL_59;
      }
      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_tc_offset_div2", (char)v3[33]);
      int v4 = dword_1EB671A40;
    }
  }
  if (v4 >= 6) {
    __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_scaling_list_data_present_flag", v3[34]);
  }
LABEL_59:
  if (v3[34]) {
    __n128 result = sub_1D0C985DC((uint64_t)(v3 + 40), __stream);
  }
  if (dword_1EB671A40 >= 6)
  {
    __n128 result = fprintf(__stream, "  %-44s : %lld\n", "lists_modification_present_flag", v3[1608]);
    if (dword_1EB671A40 >= 6)
    {
      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "log2_parallel_merge_level_minus2", *((unsigned __int16 *)v3 + 805));
      if (dword_1EB671A40 >= 6)
      {
        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "slice_header_extension_present_flag", v3[1612]);
        if (dword_1EB671A40 >= 6) {
          __n128 result = fprintf(__stream, "  %-44s : %lld\n", "pps_extension_present_flag", v3[1613]);
        }
      }
    }
  }
  if (v3[1613])
  {
    int v9 = dword_1EB671A40;
    if (v3[11] && dword_1EB671A40 >= 6)
    {
      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "rext.log2_max_transform_skip_block_size_minus2", v3[1615]);
      int v9 = dword_1EB671A40;
    }
    if (v9 >= 6)
    {
      __n128 result = fprintf(__stream, "  %-44s : %lld\n", "rext.cross_component_prediction_enabled_flag", v3[1616]);
      if (dword_1EB671A40 >= 6) {
        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "rext.chroma_qp_offset_list_enabled_flag", v3[1617]);
      }
    }
    if (v3[1617])
    {
      int v10 = dword_1EB671A40;
      if (dword_1EB671A40 >= 6)
      {
        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "rext.diff_cu_chroma_qp_offset_depth", v3[1618]);
        int v10 = dword_1EB671A40;
        if (dword_1EB671A40 >= 6)
        {
          __n128 result = fprintf(__stream, "  %-44s : %lld\n", "rext.chroma_qp_offset_list_len_minus1", v3[1619]);
          int v10 = dword_1EB671A40;
        }
      }
      uint64_t v11 = 1626;
      do
      {
        if (v10 >= 6)
        {
          __n128 result = fprintf(__stream, "    %-42s : %lld\n", "rext.cb_qp_offset_list", (char)v3[v11 - 6]);
          int v10 = dword_1EB671A40;
          if (dword_1EB671A40 >= 6)
          {
            __n128 result = fprintf(__stream, "    %-42s : %lld\n", "rext.cr_qp_offset_list", (char)v3[v11]);
            int v10 = dword_1EB671A40;
          }
        }
        unint64_t v12 = v11 - 1626;
        ++v11;
      }
      while (v12 < v3[1619]);
      if (v10 > 5)
      {
        __n128 result = fprintf(__stream, "  %-44s : %lld\n", "rext.log2_sao_offset_scale_luma", v3[1632]);
        if (dword_1EB671A40 >= 6) {
          return fprintf(__stream, "  %-44s : %lld\n", "rext.log2_sao_offset_scale_chroma", v3[1633]);
        }
      }
    }
  }
  return result;
}

void *sub_1D0CBED40(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v1 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v1 = a1;
  }
  char v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    __n128 result = operator new(48 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

__n128 sub_1D0CBEDAC(__n128 *a1, __n128 *a2, unsigned int (**a3)(__n128 *, __n128 *), unint64_t a4, __n128 *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v9 = (uint64_t)a1;
    if (a4 == 2)
    {
      int v10 = a2 - 3;
      if ((*a3)(a2 - 3, a1))
      {
        __n128 result = *(__n128 *)v9;
        __n128 v11 = *(__n128 *)(v9 + 16);
        __n128 v12 = *(__n128 *)(v9 + 32);
        __n128 v14 = a2[-2];
        __n128 v13 = a2[-1];
        *(__n128 *)uint64_t v9 = *v10;
        *(__n128 *)(v9 + 16) = v14;
        *(__n128 *)(v9 + 32) = v13;
        a2[-2] = v11;
        a2[-1] = v12;
        *int v10 = result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      int16x8_t v27 = a5;
      unint64_t v28 = a4 >> 1;
      uint16x8_t v29 = &a1[3 * (a4 >> 1)];
      unint64_t v30 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        __n128 v31 = sub_1D0CBF08C(a1, v29, a3, v30, a5, result);
        int32x4_t v32 = &v27[3 * v28];
        __n128 result = sub_1D0CBF08C((__n128 *)(v9 + 48 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), v32, v31);
        int32x4_t v33 = &v27[3 * a4];
        int32x4_t v34 = v32;
        while (v34 != v33)
        {
          if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a3)(v34, v27, result))
          {
            __n128 result = *v34;
            __n128 v35 = v34[2];
            *(__n128 *)(v9 + 16) = v34[1];
            *(__n128 *)(v9 + 32) = v35;
            *(__n128 *)uint64_t v9 = result;
            v34 += 3;
          }
          else
          {
            __n128 result = *v27;
            __n128 v36 = v27[2];
            *(__n128 *)(v9 + 16) = v27[1];
            *(__n128 *)(v9 + 32) = v36;
            *(__n128 *)uint64_t v9 = result;
            v27 += 3;
          }
          v9 += 48;
          if (v27 == v32)
          {
            if (v34 != v33)
            {
              uint64_t v37 = 0;
              do
              {
                uint64_t v38 = v9 + v37 * 16;
                __n128 result = v34[v37];
                __n128 v39 = v34[v37 + 2];
                *(__n128 *)(v38 + 16) = v34[v37 + 1];
                *(__n128 *)(v38 + 32) = v39;
                *(__n128 *)uint64_t v38 = result;
                v37 += 3;
              }
              while (&v34[v37] != v33);
            }
            return result;
          }
        }
        if (v27 != v32)
        {
          uint64_t v40 = 0;
          do
          {
            uint64_t v41 = v9 + v40 * 16;
            __n128 result = v27[v40];
            __n128 v42 = v27[v40 + 2];
            *(__n128 *)(v41 + 16) = v27[v40 + 1];
            *(__n128 *)(v41 + 32) = v42;
            *(__n128 *)uint64_t v41 = result;
            v40 += 3;
          }
          while (&v27[v40] != v32);
        }
      }
      else
      {
        sub_1D0CBEDAC(a1, v29, a3, v30, a5, a6);
        sub_1D0CBEDAC(v9 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v27, a6);
        sub_1D0CBF338(v9, (_OWORD *)(v9 + 48 * (a4 >> 1)), a2, (uint64_t (**)(void, void))a3, a4 >> 1, a4 - (a4 >> 1), (char *)v27, a6);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v16 = a1 + 3;
      if (&a1[3] != a2)
      {
        uint64_t v17 = 0;
        int v18 = a1;
        do
        {
          int8x16_t v19 = v18;
          int v18 = v16;
          if ((*a3)(v16, v19))
          {
            __n128 v20 = v18[1];
            __n128 v43 = *v18;
            __n128 v44 = v20;
            __n128 v45 = v18[2];
            uint64_t v21 = v17;
            while (1)
            {
              int16x8_t v22 = (_OWORD *)(v9 + v21);
              long long v23 = *(_OWORD *)(v9 + v21 + 16);
              v22[3] = *(_OWORD *)(v9 + v21);
              v22[4] = v23;
              v22[5] = *(_OWORD *)(v9 + v21 + 32);
              if (!v21) {
                break;
              }
              v21 -= 48;
              if ((((uint64_t (*)(__n128 *, uint64_t))*a3)(&v43, v21 + v9) & 1) == 0)
              {
                uint64_t v24 = (_OWORD *)(v9 + v21 + 48);
                goto LABEL_15;
              }
            }
            uint64_t v24 = (_OWORD *)v9;
LABEL_15:
            __n128 v25 = v44;
            *uint64_t v24 = v43;
            v24[1] = v25;
            __n128 result = v45;
            v24[2] = v45;
          }
          uint64_t v16 = v18 + 3;
          v17 += 48;
        }
        while (&v18[3] != a2);
      }
    }
  }
  return result;
}

__n128 sub_1D0CBF08C(__n128 *a1, __n128 *a2, unsigned int (**a3)(__n128 *, __n128 *), unint64_t a4, __n128 *a5, __n128 result)
{
  if (a4)
  {
    unint64_t v6 = a5;
    int v10 = a1;
    if (a4 == 2)
    {
      __n128 v12 = a2 - 3;
      if ((*a3)(a2 - 3, a1))
      {
        __n128 v13 = *v12;
        __n128 v14 = v12[2];
        v6[1] = v12[1];
        v6[2] = v14;
        __n128 *v6 = v13;
        __n128 result = *v10;
        __n128 v15 = v10[1];
        __n128 v16 = v10[2];
      }
      else
      {
        __n128 v27 = *v10;
        __n128 v28 = v10[2];
        v6[1] = v10[1];
        v6[2] = v28;
        __n128 *v6 = v27;
        __n128 result = *v12;
        __n128 v15 = v12[1];
        __n128 v16 = v12[2];
      }
      v6[4] = v15;
      v6[5] = v16;
      v6[3] = result;
    }
    else if (a4 == 1)
    {
      __n128 result = *a1;
      __n128 v11 = a1[2];
      a5[1] = a1[1];
      a5[2] = v11;
      *a5 = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      uint16x8_t v29 = &a1[3 * (a4 >> 1)];
      sub_1D0CBEDAC(a1, v29, a3, a4 >> 1, a5, a4 >> 1);
      sub_1D0CBEDAC(&v10[3 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), &v6[3 * (a4 >> 1)], a4 - (a4 >> 1));
      unint64_t v30 = &v10[3 * (a4 >> 1)];
      while (v30 != a2)
      {
        if ((*a3)(v30, v10))
        {
          __n128 result = *v30;
          __n128 v31 = v30[2];
          v6[1] = v30[1];
          v6[2] = v31;
          __n128 *v6 = result;
          v30 += 3;
        }
        else
        {
          __n128 result = *v10;
          __n128 v32 = v10[2];
          v6[1] = v10[1];
          v6[2] = v32;
          __n128 *v6 = result;
          v10 += 3;
        }
        v6 += 3;
        if (v10 == v29)
        {
          if (v30 != a2)
          {
            unint64_t v33 = 0;
            do
            {
              int32x4_t v34 = &v6[v33];
              __n128 result = v30[v33];
              __n128 v35 = v30[v33 + 2];
              v34[1] = v30[v33 + 1];
              v34[2] = v35;
              *int32x4_t v34 = result;
              v33 += 3;
            }
            while (&v30[v33] != a2);
          }
          return result;
        }
      }
      if (v10 != v29)
      {
        unint64_t v36 = 0;
        do
        {
          uint64_t v37 = &v6[v36];
          __n128 result = v10[v36];
          __n128 v38 = v10[v36 + 2];
          v37[1] = v10[v36 + 1];
          v37[2] = v38;
          *uint64_t v37 = result;
          v36 += 3;
        }
        while (&v10[v36] != v29);
      }
    }
    else if (a1 != a2)
    {
      __n128 result = *a1;
      __n128 v17 = a1[2];
      a5[1] = a1[1];
      a5[2] = v17;
      *a5 = result;
      int v18 = a1 + 3;
      if (&a1[3] != a2)
      {
        uint64_t v19 = 0;
        __n128 v20 = a5;
        do
        {
          uint64_t v21 = v20;
          v20 += 3;
          int16x8_t v22 = v20;
          if ((*a3)(v18, v21))
          {
            __n128 v23 = v21[1];
            *__n128 v20 = *v21;
            v20[1] = v23;
            v20[2] = v21[2];
            int16x8_t v22 = v6;
            if (v21 != v6)
            {
              uint64_t v24 = v19;
              while (1)
              {
                int16x8_t v22 = (__n128 *)((char *)v6 + v24);
                if (!(*a3)(v18, (__n128 *)((char *)v6 + v24 - 48))) {
                  break;
                }
                __n128 v25 = *(__n128 *)((char *)v6 + v24 - 32);
                __n128 *v22 = *(__n128 *)((char *)v6 + v24 - 48);
                v22[1] = v25;
                v22[2] = *(__n128 *)((char *)v6 + v24 - 16);
                v24 -= 48;
                if (!v24)
                {
                  int16x8_t v22 = v6;
                  break;
                }
              }
            }
          }
          __n128 result = *v18;
          __n128 v26 = v18[2];
          v22[1] = v18[1];
          v22[2] = v26;
          __n128 *v22 = result;
          v18 += 3;
          v19 += 48;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1D0CBF338(uint64_t result, _OWORD *a2, _OWORD *a3, uint64_t (**a4)(void, void), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    __n128 v15 = (_OWORD *)result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      while (1)
      {
        __n128 result = (*a4)(a2, v15);
        if (result) {
          break;
        }
        v15 += 3;
        if (!--a5) {
          return result;
        }
      }
      int16x4_t v89 = a4;
      int16x4_t v90 = a7;
      uint64_t v87 = v10;
      int32x4_t v88 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          long long v99 = v15[1];
          long long v104 = v15[2];
          long long v95 = *v15;
          long long v78 = *a2;
          long long v79 = a2[2];
          v15[1] = a2[1];
          v15[2] = v79;
          *__n128 v15 = v78;
          a2[1] = v99;
          a2[2] = v104;
          *a2 = v95;
          return result;
        }
        if (a5 >= 0) {
          uint64_t v23 = a5;
        }
        else {
          uint64_t v23 = a5 + 1;
        }
        uint64_t v24 = v23 >> 1;
        uint64_t v21 = &v15[3 * (v23 >> 1)];
        if (a3 == a2)
        {
          int v18 = a3;
          uint16x8_t v29 = a3;
        }
        else
        {
          uint64_t v85 = v23 >> 1;
          uint64_t v86 = a8;
          __n128 v25 = *v89;
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
          int v18 = a2;
          do
          {
            __n128 v27 = &v18[3 * (v26 >> 1)];
            int v28 = v25(v27, v21);
            if (v28) {
              v26 += ~(v26 >> 1);
            }
            else {
              v26 >>= 1;
            }
            if (v28) {
              int v18 = v27 + 3;
            }
          }
          while (v26);
          uint16x8_t v29 = a2;
          uint64_t v24 = v85;
          a8 = v86;
        }
        uint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v18 - v29);
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = v10 + 1;
        }
        uint64_t v17 = v16 >> 1;
        int v18 = &a2[3 * (v16 >> 1)];
        if (a2 == v15)
        {
          uint64_t v21 = a2;
          int16x8_t v22 = a2;
        }
        else
        {
          uint64_t v84 = v16 >> 1;
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (a2 - v15);
          __n128 v20 = (unsigned int (**)(_OWORD *, uint64_t))a4;
          uint64_t v21 = v15;
          do
          {
            if ((*v20)(v18, (uint64_t)&v21[3 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v21 += 3 * (v19 >> 1) + 3;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          int16x8_t v22 = v15;
          uint64_t v17 = v84;
        }
        uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v21 - v22);
      }
      a3 = v18;
      if (v21 != a2)
      {
        a3 = v21;
        if (a2 != v18)
        {
          if (v21 + 3 == a2)
          {
            long long v97 = v21[1];
            long long v101 = v21[2];
            long long v92 = *v21;
            int64_t v36 = (char *)v18 - (char *)a2;
            uint64_t v37 = a2;
            size_t v38 = (char *)v18 - (char *)a2;
            uint64_t v39 = v17;
            memmove(v21, v37, v38);
            uint64_t v17 = v39;
            a3 = (_OWORD *)((char *)v21 + v36);
            *a3 = v92;
            a3[1] = v97;
            a3[2] = v101;
          }
          else if (a2 + 3 == v18)
          {
            a3 = v21 + 3;
            long long v98 = *(v18 - 2);
            long long v102 = *(v18 - 1);
            long long v93 = *(v18 - 3);
            if (v18 - 3 != v21)
            {
              uint64_t v40 = v17;
              memmove(v21 + 3, v21, (char *)(v18 - 3) - (char *)v21);
              uint64_t v17 = v40;
            }
            v21[1] = v98;
            v21[2] = v102;
            _OWORD *v21 = v93;
          }
          else
          {
            unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (a2 - v21);
            if (v30 == 0xAAAAAAAAAAAAAAABLL * (v18 - a2))
            {
              uint64_t v31 = 0;
              do
              {
                __n128 v32 = &a2[v31];
                unint64_t v33 = &v21[v31];
                long long v96 = v21[v31 + 1];
                long long v100 = v21[v31 + 2];
                long long v91 = v21[v31];
                long long v34 = a2[v31];
                long long v35 = a2[v31 + 2];
                v33[1] = a2[v31 + 1];
                v33[2] = v35;
                _OWORD *v33 = v34;
                v32[1] = v96;
                v32[2] = v100;
                *__n128 v32 = v91;
                if (&v21[v31 + 3] == a2) {
                  break;
                }
                v31 += 3;
              }
              while (v32 + 3 != v18);
              a3 = a2;
            }
            else
            {
              uint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (v18 - a2);
              unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (a2 - v21);
              do
              {
                uint64_t v43 = v42;
                unint64_t v42 = v41;
                uint64_t v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                __n128 v44 = &v21[3 * v42];
                do
                {
                  long long v45 = *(v44 - 3);
                  long long v46 = *(v44 - 2);
                  long long v47 = *(v44 - 1);
                  v44 -= 3;
                  long long v103 = v47;
                  long long v94 = v45;
                  uint16x8_t v48 = &v44[a2 - v21];
                  uint16x8_t v49 = v44;
                  do
                  {
                    uint16x8_t v50 = v49;
                    uint16x8_t v49 = v48;
                    long long v51 = *v48;
                    long long v52 = v48[2];
                    v50[1] = v48[1];
                    v50[2] = v52;
                    _OWORD *v50 = v51;
                    unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (v18 - v48);
                    BOOL v54 = __OFSUB__(v30, v53);
                    uint64_t v56 = v30 - v53;
                    char v55 = (v56 < 0) ^ v54;
                    uint16x8_t v48 = &v21[3 * v56];
                    if (v55) {
                      uint16x8_t v48 = &v49[a2 - v21];
                    }
                  }
                  while (v48 != v44);
                  v49[1] = v46;
                  v49[2] = v103;
                  _OWORD *v49 = v94;
                }
                while (v44 != v21);
              }
              a3 = &v21[v18 - a2];
            }
          }
        }
      }
      a5 -= v24;
      uint64_t v10 = v87 - v17;
      if (v24 + v17 >= a5 + v87 - v17)
      {
        uint64_t v58 = a5;
        uint64_t v59 = v17;
        __n128 result = sub_1D0CBF338(a3, v18, v88, v89, v58, v87 - v17, v90, a8);
        int v18 = v21;
        a4 = v89;
        uint64_t v10 = v59;
        a5 = v24;
      }
      else
      {
        int16x8_t v57 = v21;
        a4 = v89;
        __n128 result = sub_1D0CBF338(v15, v57, a3, v89, v24, v17, v90, a8);
        __n128 v15 = a3;
        a3 = v88;
      }
      a2 = v18;
      a7 = v90;
      if (!v10) {
        return result;
      }
    }
    if (a5 <= v10)
    {
      if (v15 != a2)
      {
        uint64_t v69 = 0;
        do
        {
          int16x4_t v70 = &a7[v69 * 16];
          long long v71 = v15[v69];
          long long v72 = v15[v69 + 2];
          *((_OWORD *)v70 + 1) = v15[v69 + 1];
          *((_OWORD *)v70 + 2) = v72;
          *(_OWORD *)int16x4_t v70 = v71;
          v69 += 3;
        }
        while (&v15[v69] != a2);
        int16x4_t v73 = &a7[v69 * 16];
        if (&a7[v69 * 16] != a7)
        {
          while (a2 != a3)
          {
            __n128 result = (*a4)(a2, a7);
            if (result)
            {
              long long v74 = *a2;
              long long v75 = a2[2];
              v15[1] = a2[1];
              v15[2] = v75;
              *__n128 v15 = v74;
              a2 += 3;
            }
            else
            {
              long long v76 = *(_OWORD *)a7;
              long long v77 = *((_OWORD *)a7 + 2);
              v15[1] = *((_OWORD *)a7 + 1);
              v15[2] = v77;
              *__n128 v15 = v76;
              a7 += 48;
            }
            v15 += 3;
            if (a7 == v73) {
              return result;
            }
          }
          return (uint64_t)memmove(v15, a7, v73 - a7);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v60 = 0;
      do
      {
        int32x4_t v61 = &a7[v60 * 16];
        long long v62 = a2[v60];
        long long v63 = a2[v60 + 2];
        *((_OWORD *)v61 + 1) = a2[v60 + 1];
        *((_OWORD *)v61 + 2) = v63;
        *(_OWORD *)int32x4_t v61 = v62;
        v60 += 3;
      }
      while (&a2[v60] != a3);
      int32x4_t v64 = &a7[v60 * 16];
      if (&a7[v60 * 16] != a7)
      {
        int32x4_t v65 = a3 - 3;
        while (a2 != v15)
        {
          __n128 result = (*a4)(v64 - 48, a2 - 3);
          if (result) {
            int32x4_t v66 = (char *)(a2 - 3);
          }
          else {
            int32x4_t v66 = v64 - 48;
          }
          if (result) {
            a2 -= 3;
          }
          else {
            v64 -= 48;
          }
          long long v68 = *((_OWORD *)v66 + 1);
          long long v67 = *((_OWORD *)v66 + 2);
          *int32x4_t v65 = *(_OWORD *)v66;
          v65[1] = v68;
          v65[2] = v67;
          v65 -= 3;
          if (v64 == a7) {
            return result;
          }
        }
        unint64_t v80 = 0;
        do
        {
          int v81 = &v65[v80 / 0x10];
          long long v82 = *(_OWORD *)&v64[v80 - 48];
          long long v83 = *(_OWORD *)&v64[v80 - 16];
          v81[1] = *(_OWORD *)&v64[v80 - 32];
          v81[2] = v83;
          *int v81 = v82;
          v80 -= 48;
        }
        while (&v64[v80] != a7);
      }
    }
  }
  return result;
}

BOOL sub_1D0CBF95C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2 < 0) {
    int v2 = -v2;
  }
  int v3 = *(_DWORD *)(a2 + 36);
  if (v3 < 0) {
    int v3 = -v3;
  }
  return v2 < v3;
}

BOOL sub_1D0CBF980(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 28) > *(_DWORD *)(a2 + 28);
}

BOOL sub_1D0CBF994(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) > *(_DWORD *)(a2 + 24);
}

uint64_t sub_1D0CBF9A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int8x8_t a6)
{
  unint64_t v6 = *(unint64_t **)(a1 + 40);
  unint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  uint64_t v10 = (unsigned int *)v6[3];
  uint64_t v9 = (unsigned int *)v6[4];
  uint64_t v11 = v6[2];
  uint64_t v12 = (int)a3 - 2;
  if (2 * (int)a3 < 2)
  {
    LODWORD(v13) = 0;
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    __n128 v14 = (char *)&unk_1D0DA76FD + 36 * (a5 > 0) + 9 * v12;
    __n128 v15 = (char *)v6 + 83;
    uint64_t v16 = (2 * a3 - 1);
    while (1)
    {
      uint64_t v17 = v14[v13];
      unint64_t v18 = v15[v17];
      uint64_t v19 = byte_1D0D7FCB3[(v8 & 0xC0) + (v18 >> 1)];
      LODWORD(v20) = v8 - v19;
      BOOL v21 = v7 >= (v8 - v19) << 55;
      if (v7 < (v8 - v19) << 55) {
        unint64_t v20 = v20;
      }
      else {
        unint64_t v20 = byte_1D0D7FCB3[(v8 & 0xC0) + (v18 >> 1)];
      }
      if (v7 < (v8 - v19) << 55)
      {
        uint64_t v22 = 0;
      }
      else
      {
        v7 -= (v8 - v19) << 55;
        uint64_t v22 = 1;
      }
      if (v21) {
        char v23 = v18 + 1;
      }
      else {
        char v23 = v15[v17];
      }
      int v24 = __clz(v20) - 55;
      v7 <<= v24;
      v15[v17] = byte_1D0D7FCB3[2 * v18 + 256 + v22];
      v11 += v24;
      if (v11 >= 0)
      {
        unsigned int v25 = *v10++;
        v7 += (unint64_t)bswap32(v25) << v11;
        v11 -= 32;
        if (v10 >= v9) {
          uint64_t v10 = v9;
        }
      }
      unint64_t v8 = v20 << v24;
      if ((v23 & 1) == 0) {
        break;
      }
      if (v16 == ++v13)
      {
        LODWORD(v13) = 2 * a3 - 1;
        break;
      }
    }
    uint64_t v26 = 0;
    uint64_t v27 = *(void *)(a1 + 40) + 101;
    while (1)
    {
      uint64_t v28 = v14[v26];
      unint64_t v29 = *(unsigned __int8 *)(v27 + v28);
      uint64_t v30 = byte_1D0D7FCB3[(v8 & 0xC0) + (v29 >> 1)];
      LODWORD(v31) = v8 - v30;
      BOOL v32 = v7 >= (v8 - v30) << 55;
      if (v7 < (v8 - v30) << 55) {
        unint64_t v31 = v31;
      }
      else {
        unint64_t v31 = byte_1D0D7FCB3[(v8 & 0xC0) + (v29 >> 1)];
      }
      if (v7 < (v8 - v30) << 55)
      {
        uint64_t v33 = 0;
      }
      else
      {
        v7 -= (v8 - v30) << 55;
        uint64_t v33 = 1;
      }
      if (v32) {
        char v34 = v29 + 1;
      }
      else {
        char v34 = *(unsigned char *)(v27 + v28);
      }
      int v35 = __clz(v31) - 55;
      v7 <<= v35;
      *(unsigned char *)(v27 + v28) = byte_1D0D7FCB3[2 * v29 + 256 + v33];
      v11 += v35;
      if (v11 >= 0)
      {
        unsigned int v36 = *v10++;
        v7 += (unint64_t)bswap32(v36) << v11;
        v11 -= 32;
        if (v10 >= v9) {
          uint64_t v10 = v9;
        }
      }
      unint64_t v8 = v31 << v35;
      if ((v34 & 1) == 0) {
        break;
      }
      if (v16 == ++v26) {
        goto LABEL_36;
      }
    }
    LODWORD(v16) = v26;
LABEL_36:
    unint64_t v37 = v8 << 54;
    if (v13 >= 4)
    {
      int v38 = 0;
      unsigned int v39 = v13 >> 1;
      signed int v40 = (v13 >> 1) - 1;
      do
      {
        BOOL v41 = v7 >= v37;
        if (v7 < v37) {
          unint64_t v42 = 0;
        }
        else {
          unint64_t v42 = v8 << 54;
        }
        unint64_t v7 = 2 * (v7 - v42);
        int v38 = v41 | (2 * v38);
        --v39;
      }
      while (v39 > 1);
      v11 += v40;
      if (v11 >= 0)
      {
        unsigned int v43 = *v10++;
        v7 += (unint64_t)bswap32(v43) << v11;
        v11 -= 32;
        if (v10 >= v9) {
          uint64_t v10 = v9;
        }
      }
      LODWORD(v13) = v38 + ((v13 & 1 | 2) << v40);
    }
    if (v16 >= 4)
    {
      int v44 = 0;
      unsigned int v45 = v16 >> 1;
      signed int v46 = (v16 >> 1) - 1;
      do
      {
        BOOL v47 = v7 >= v37;
        if (v7 < v37) {
          unint64_t v48 = 0;
        }
        else {
          unint64_t v48 = v8 << 54;
        }
        unint64_t v7 = 2 * (v7 - v48);
        int v44 = v47 | (2 * v44);
        --v45;
      }
      while (v45 > 1);
      v11 += v46;
      if (v11 >= 0)
      {
        unsigned int v49 = *v10++;
        v7 += (unint64_t)bswap32(v49) << v11;
        v11 -= 32;
        if (v10 >= v9) {
          uint64_t v10 = v9;
        }
      }
      LODWORD(v16) = v44 + ((v16 & 1 | 2) << v46);
    }
  }
  uint64_t v242 = (int)a3 - 2;
  v243 = (unsigned __int8 *)(a1 + 6426);
  if (a4 == 2) {
    int v50 = v16;
  }
  else {
    int v50 = v13;
  }
  if (a4 == 2) {
    int v51 = v13;
  }
  else {
    int v51 = v16;
  }
  if (a3 == 3) {
    int v52 = 4 * a4;
  }
  else {
    int v52 = 0;
  }
  __int16 v53 = **(_WORD **)(a1 + 48);
  int v54 = v53 >> 9;
  uint64_t v55 = *(void *)(a1 + 32);
  int32x4_t v229 = v6;
  if (a5)
  {
    v54 += *(char *)(v55 + a5 + 656) + *(char *)(*(void *)(a1 + 24) + a5 + 2);
    uint64_t v56 = *(unsigned __int8 **)(v55 + 16);
    int v57 = v56[2099];
    if (v54 <= -v57) {
      int v54 = -v57;
    }
    if (v56[2148] == 1)
    {
      if (v54 >= 57) {
        int v58 = 57;
      }
      else {
        int v58 = v54;
      }
      BOOL v59 = __OFSUB__(v58, 30);
      int v60 = v58 - 30;
      if (v60 < 0 == v59) {
        int v54 = byte_1D0DAE600[v60];
      }
    }
    else if (v54 >= 51)
    {
      int v54 = 51;
    }
    int32x4_t v61 = v56 + 223;
  }
  else
  {
    uint64_t v56 = *(unsigned __int8 **)(v55 + 16);
    LOWORD(v57) = v56[2097];
    int32x4_t v61 = v56 + 222;
  }
  int v62 = (v51 >> 2 << v12) + (v50 >> 2);
  int v63 = v50 & 3;
  char v64 = a3 + 3;
  if (v54 < 0)
  {
    LOWORD(v54) = v54 + v57;
    v64 += *v61;
  }
  uint64_t v263 = v9;
  BOOL v237 = 0;
  uint64_t v65 = *(void *)(a1 + 40) + 40;
  uint64_t v66 = (int)a3 - 2;
  unsigned int v67 = v63 & 0xFFFFFFF3 | (4 * (v51 & 3));
  uint64_t v241 = *((unsigned __int8 *)*(&off_1E6899B00 + v12) + v52 + v62);
  int v68 = *v243;
  int v69 = v53 & 0x100;
  if (v56[402]) {
    BOOL v70 = (v68 | v53 & 0x100) == 0;
  }
  else {
    BOOL v70 = 1;
  }
  int v71 = !v70;
  char v240 = v71;
  uint64_t v72 = *(void *)(v55 + 32);
  if (*(unsigned char *)(v72 + 5))
  {
    uint64_t v73 = a3;
    uint64_t v74 = a1;
    if (!v69) {
      BOOL v237 = *(unsigned char *)(a1 + 6427) == 0;
    }
  }
  else
  {
    uint64_t v73 = a3;
    uint64_t v74 = a1;
  }
  uint8x8_t v267 = (char *)&unk_1D0DAF020 + 64 * (uint64_t)a4 + 16 * v242;
  int v230 = byte_1D0DAFC60[16 * a4 + v67];
  int v75 = v56[274];
  BOOL v77 = (int)v73 > 2 && v68 != 0;
  uint64_t v250 = (char *)*(&off_1E689A008 + v242) + v52;
  char v78 = v71;
  if (!v75 || v77)
  {
    uint64_t v79 = v74;
    uint64_t v81 = 0;
    v64 -= 4;
  }
  else
  {
    uint64_t v79 = v74;
    if (*(_DWORD *)(v74 + 4) == 1) {
      uint64_t v80 = 0;
    }
    else {
      uint64_t v80 = 3;
    }
    uint64_t v81 = v72 + 390 * v242 + 65 * (v80 + a5) + 40;
  }
  uint64_t v82 = v241;
  uint64_t v262 = v81;
  uint64_t v239 = v65 + 2 * (a5 > 0) + 79;
  uint64_t v235 = v65 + 16 * (a5 > 0) + 127;
  uint64_t v231 = v65 + 4 * (a5 > 0) + 151;
  int v249 = (1 << v242) - 1;
  if (a5 < 1) {
    int v83 = 1;
  }
  else {
    int v83 = v71;
  }
  BOOL v70 = v83 == 0;
  uint64_t v84 = 27;
  if (!v70) {
    uint64_t v84 = 0;
  }
  uint64_t v247 = v84;
  int v85 = a39H[(__int16)v54 % 6] << ((__int16)v54 / 6);
  unint64_t v86 = (1 << v250[v241]) | (1 << *v250);
  int v87 = v230 & 0xF;
  uint64_t v88 = (1 << v87);
  if (a5) {
    int v89 = 43;
  }
  else {
    int v89 = 42;
  }
  int v245 = v89;
  int v246 = 4 << v73;
  if (a4) {
    int v90 = 15;
  }
  else {
    int v90 = 9;
  }
  char v256 = v73 - 3;
  if (v73 == 3) {
    int v91 = 9;
  }
  else {
    int v91 = 12;
  }
  int v259 = ~(-1 << v73);
  if (v73 == 3) {
    int v92 = v90;
  }
  else {
    int v92 = 21;
  }
  int v244 = v92;
  uint64_t v233 = 2 * (a5 == 0);
  uint64_t v257 = v85;
  char v260 = v64;
  uint64_t v261 = 1 << (v64 - 1);
  int32x4_t v232 = (char *)&unk_1D0DAF020 + 64 * (uint64_t)a4 + 16 * v242;
  uint64_t v93 = v241;
  int v94 = 1;
  int v236 = a5;
  int v234 = v91;
  long long v95 = v263;
  do
  {
    uint64_t v254 = v93;
    unsigned int v96 = v250[v93];
    int v97 = v96 >> v66;
    if ((int)(v249 & v96) >= v249) {
      int v98 = 0;
    }
    else {
      int v98 = (v86 >> v96) & 2;
    }
    uint64_t v99 = (v86 >> ((1 << v242) + v96)) & 1;
    if (v97 >= v249) {
      LODWORD(v99) = 0;
    }
    uint64_t v100 = v99 | v98;
    BOOL v101 = v93 == v82 || v93 == 0;
    int v102 = v101;
    if (!v101)
    {
      long long v103 = (char *)v239;
      if (v100) {
        long long v103 = (char *)(v239 + 1);
      }
      unint64_t v104 = *v103;
      uint64_t v105 = byte_1D0D7FCB3[(v8 & 0xC0) + (v104 >> 1)];
      LODWORD(v106) = v8 - v105;
      BOOL v107 = v7 >= (v8 - v105) << 55;
      if (v7 < (v8 - v105) << 55) {
        unint64_t v106 = v106;
      }
      else {
        unint64_t v106 = byte_1D0D7FCB3[(v8 & 0xC0) + (v104 >> 1)];
      }
      if (v7 < (v8 - v105) << 55)
      {
        uint64_t v108 = 0;
      }
      else
      {
        v7 -= (v8 - v105) << 55;
        uint64_t v108 = 1;
      }
      if (v107) {
        char v109 = v104 + 1;
      }
      else {
        char v109 = *v103;
      }
      int v110 = __clz(v106) - 55;
      v7 <<= v110;
      *long long v103 = byte_1D0D7FCB3[2 * v104 + 256 + v108];
      v11 += v110;
      if (v11 >= 0)
      {
        unsigned int v111 = *v10++;
        v7 += (unint64_t)bswap32(v111) << v11;
        v11 -= 32;
        if (v10 >= v95) {
          uint64_t v10 = v95;
        }
      }
      unint64_t v8 = v106 << v110;
      if ((v109 & 1) == 0)
      {
LABEL_323:
        uint64_t v127 = v254;
        goto LABEL_347;
      }
      v86 |= 1 << v96;
    }
    int v266 = v97 * v246 + 4 * (v96 & ~(-1 << v242));
    uint64_t v112 = *(void *)(v79 + 40) + v247 + 123;
    if (v87 <= (v102 ^ 1))
    {
      unsigned int v114 = v245;
      if ((v102 & 1) == 0) {
        goto LABEL_210;
      }
    }
    else
    {
      int16x8_t v113 = &v232[v87 - 1];
      unsigned int v114 = v245;
      do
      {
        if ((v78 & 1) == 0)
        {
          uint64_t v115 = *v113;
          uint64_t v116 = v115 + v266;
          if (v73 == 2)
          {
            unsigned int v114 = byte_1D0DAFCD0[v116 + 64];
          }
          else if ((int)v116 < 1)
          {
            unsigned int v114 = 0;
          }
          else
          {
            int v117 = byte_1D0DAFCD0[16 * v100 + (v115 & 3 | (4 * ((v116 >> v73) & 3)))];
            if (a5)
            {
              unsigned int v114 = v91 + v117;
            }
            else
            {
              if ((v116 >> v73 >> 2) + ((v116 & v259) >> 2)) {
                int v118 = v117 + 3;
              }
              else {
                int v118 = v117;
              }
              unsigned int v114 = v118 + v244;
            }
          }
        }
        unint64_t v119 = *(unsigned __int8 *)(v112 + v114);
        uint64_t v120 = byte_1D0D7FCB3[(v8 & 0xC0) + (v119 >> 1)];
        LODWORD(v121) = v8 - v120;
        BOOL v122 = v7 >= (v8 - v120) << 55;
        if (v7 < (v8 - v120) << 55) {
          unint64_t v121 = v121;
        }
        else {
          unint64_t v121 = byte_1D0D7FCB3[(v8 & 0xC0) + (v119 >> 1)];
        }
        if (v7 < (v8 - v120) << 55)
        {
          uint64_t v123 = 0;
        }
        else
        {
          v7 -= (v8 - v120) << 55;
          uint64_t v123 = 1;
        }
        if (v122) {
          char v124 = v119 + 1;
        }
        else {
          char v124 = *(unsigned char *)(v112 + v114);
        }
        int v125 = __clz(v121) - 55;
        v7 <<= v125;
        *(unsigned char *)(v112 + v114) = byte_1D0D7FCB3[2 * v119 + 256 + v123];
        v11 += v125;
        if (v11 >= 0)
        {
          unsigned int v126 = *v10++;
          v7 += (unint64_t)bswap32(v126) << v11;
          v11 -= 32;
          if (v10 >= v95) {
            uint64_t v10 = v95;
          }
        }
        --v87;
        unint64_t v8 = v121 << v125;
        uint64_t v88 = ((v124 & 1) << v87) | v88;
        --v113;
      }
      while (v87 > (v102 ^ 1));
      if ((v102 & 1) == 0)
      {
LABEL_210:
        uint64_t v127 = v254;
        if (v88)
        {
          if ((v78 & 1) == 0)
          {
            if (v73 == 2)
            {
              unsigned int v114 = byte_1D0DAFCD0[v266 + 64];
            }
            else if (v266 < 1)
            {
              unsigned int v114 = 0;
            }
            else
            {
              int v215 = byte_1D0DAFCD0[16 * v100 + 4 * ((v266 >> v73) & 3)];
              if (a5)
              {
                unsigned int v114 = v91 + v215;
              }
              else
              {
                if ((v266 >> v73 >> 2) + ((v266 & v259) >> 2)) {
                  v215 += 3;
                }
                unsigned int v114 = v215 + v244;
              }
            }
          }
          unint64_t v216 = *(unsigned __int8 *)(v112 + v114);
          uint64_t v217 = byte_1D0D7FCB3[(v8 & 0xC0) + (v216 >> 1)];
          LODWORD(v218) = v8 - v217;
          BOOL v219 = v7 >= (v8 - v217) << 55;
          if (v7 < (v8 - v217) << 55) {
            unint64_t v218 = v218;
          }
          else {
            unint64_t v218 = byte_1D0D7FCB3[(v8 & 0xC0) + (v216 >> 1)];
          }
          if (v7 < (v8 - v217) << 55)
          {
            uint64_t v220 = 0;
          }
          else
          {
            v7 -= (v8 - v217) << 55;
            uint64_t v220 = 1;
          }
          if (v219) {
            char v221 = v216 + 1;
          }
          else {
            char v221 = *(unsigned char *)(v112 + v114);
          }
          int v222 = __clz(v218);
          int v223 = v222 - 55;
          unint64_t v8 = v218 << (v222 - 55);
          v7 <<= v222 - 55;
          int v214 = v221 & 1;
          *(unsigned char *)(v112 + v114) = byte_1D0D7FCB3[2 * v216 + 256 + v220];
          v11 += v223;
          if (v11 >= 0)
          {
            unsigned int v224 = *v10++;
            v7 += (unint64_t)bswap32(v224) << v11;
            v11 -= 32;
            if (v10 >= v95) {
              uint64_t v10 = v95;
            }
          }
          uint64_t v127 = v254;
        }
        else
        {
          int v214 = 1;
        }
        uint64_t v88 = v214 | v88;
        if (v88)
        {
LABEL_177:
          unsigned int v128 = 0;
          int v129 = 0;
          if (v127) {
            BOOL v130 = a5 <= 0;
          }
          else {
            BOOL v130 = 0;
          }
          if (v130) {
            int v131 = 2;
          }
          else {
            int v131 = 0;
          }
          uint64_t v132 = v131 | (v94 == 0);
          uint64_t v133 = v235 + 4 * v132;
          a6.i32[0] = v88;
          a6 = vcnt_s8(a6);
          a6.i16[0] = vaddlv_u8((uint8x8_t)a6);
          if (a6.i32[0] >= 8u) {
            unsigned int v134 = 8;
          }
          else {
            unsigned int v134 = a6.i32[0];
          }
          if (v134 <= 1) {
            int v135 = 1;
          }
          else {
            int v135 = v134;
          }
          int v94 = 1;
          unint64_t v248 = v86;
          do
          {
            while (1)
            {
              unint64_t v136 = *(unsigned __int8 *)(v133 + v94);
              uint64_t v137 = byte_1D0D7FCB3[(v8 & 0xC0) + (v136 >> 1)];
              LODWORD(v138) = v8 - v137;
              BOOL v139 = v7 >= (v8 - v137) << 55;
              if (v7 < (v8 - v137) << 55) {
                unint64_t v138 = v138;
              }
              else {
                unint64_t v138 = byte_1D0D7FCB3[(v8 & 0xC0) + (v136 >> 1)];
              }
              if (v7 < (v8 - v137) << 55)
              {
                uint64_t v140 = 0;
              }
              else
              {
                v7 -= (v8 - v137) << 55;
                uint64_t v140 = 1;
              }
              if (v139) {
                char v141 = v136 + 1;
              }
              else {
                char v141 = *(unsigned char *)(v133 + v94);
              }
              int v142 = __clz(v138) - 55;
              v7 <<= v142;
              *(unsigned char *)(v133 + v94) = byte_1D0D7FCB3[2 * v136 + 256 + v140];
              v11 += v142;
              if (v11 >= 0)
              {
                unsigned int v143 = *v10++;
                v7 += (unint64_t)bswap32(v143) << v11;
                v11 -= 32;
                if (v10 >= v95) {
                  uint64_t v10 = v95;
                }
              }
              unint64_t v8 = v138 << v142;
              v128 |= (v141 & 1) << v129;
              if ((v141 & 1) == 0) {
                break;
              }
              int v94 = 0;
              if (++v129 == v135)
              {
                uint64_t v144 = a2 + 2 * v266;
                goto LABEL_216;
              }
            }
            if ((v94 - 1) < 2) {
              ++v94;
            }
            ++v129;
          }
          while (v129 != v135);
          uint64_t v144 = a2 + 2 * v266;
          BOOL v145 = a6.i32[0] > 8u;
          if (v94)
          {
            int v146 = 0;
            goto LABEL_229;
          }
LABEL_216:
          unint64_t v147 = *(unsigned __int8 *)(v231 + v132);
          uint64_t v148 = byte_1D0D7FCB3[((v138 << v142) & 0xC0) + (v147 >> 1)];
          LODWORD(v149) = v8 - v148;
          BOOL v150 = v7 >= (v8 - v148) << 55;
          if (v7 < (v8 - v148) << 55) {
            unint64_t v149 = v149;
          }
          else {
            unint64_t v149 = byte_1D0D7FCB3[((v138 << v142) & 0xC0) + (v147 >> 1)];
          }
          if (v7 < (v8 - v148) << 55)
          {
            uint64_t v151 = 0;
          }
          else
          {
            v7 -= (v8 - v148) << 55;
            uint64_t v151 = 1;
          }
          if (v150) {
            char v152 = v147 + 1;
          }
          else {
            char v152 = *(unsigned char *)(v231 + v132);
          }
          int v153 = __clz(v149) - 55;
          unint64_t v8 = v149 << v153;
          v7 <<= v153;
          int v146 = v152 & 1;
          *(unsigned char *)(v231 + v132) = byte_1D0D7FCB3[2 * v147 + 256 + v151];
          int v94 = 0;
          v11 += v153;
          if (v11 >= 0)
          {
            unsigned int v154 = *v10++;
            v7 += (unint64_t)bswap32(v154) << v11;
            v11 -= 32;
            if (v10 >= v95) {
              uint64_t v10 = v95;
            }
          }
          BOOL v145 = 1;
LABEL_229:
          uint64_t v155 = v257;
          uint64_t v156 = v79;
          int v157 = 0;
          unsigned int v158 = __clz(v88);
          int v159 = v158 ^ 0x1F;
          char v160 = v158 + 1;
          BOOL v161 = (int)((v158 ^ 0x1F) - __clz(__rbit32(v88))) > 3 && v237;
          unint64_t v162 = v8 << 54;
          int v163 = a6.i32[0] - v161 + 1;
          do
          {
            BOOL v164 = v7 >= v162;
            if (v7 < v162) {
              unint64_t v165 = 0;
            }
            else {
              unint64_t v165 = v8 << 54;
            }
            unint64_t v7 = 2 * (v7 - v165);
            int v157 = v164 | (2 * v157);
            --v163;
          }
          while (v163 > 1);
          v11 += a6.i32[0] - v161;
          if (v11 >= 0)
          {
            unsigned int v166 = *v10++;
            v7 += (unint64_t)bswap32(v166) << v11;
            v11 -= 32;
            if (v10 >= v95) {
              uint64_t v10 = v95;
            }
          }
          if (*v243) {
            unsigned int v167 = 1;
          }
          else {
            unsigned int v167 = HIBYTE(**(unsigned __int16 **)(v79 + 48)) & 1;
          }
          unsigned int v168 = 0;
          unsigned int v169 = 0;
          char v170 = 0;
          uint64_t v171 = v88 << v160;
          int v172 = v157 << (v161 - a6.i8[0]);
          unsigned int v265 = __clz(__rbit32(v128));
          uint64_t v173 = v233 | v167;
          uint64_t v174 = *(void *)(v79 + 40);
          uint64_t v252 = v173;
          uint64_t v175 = *(unsigned __int8 *)(v174 + v173 + 213) >> 2;
          unsigned int v253 = 3 << (*(unsigned char *)(v174 + v173 + 213) >> 2);
          if (a6.i32[0] <= 1u) {
            int v176 = 1;
          }
          else {
            int v176 = a6.i32[0];
          }
          int v177 = v176 - 1;
          char v264 = 1;
          char v251 = v175;
          unsigned int v178 = v128;
          while (2)
          {
            if (v178) {
              int v179 = v146 + 2;
            }
            else {
              int v179 = 1;
            }
            if (v178) {
              int v146 = 0;
            }
            if (!v145) {
              goto LABEL_267;
            }
            BOOL v180 = (v178 & 1) == 0;
            if (v265 != v169 || v128 == 0) {
              int v182 = 2;
            }
            else {
              int v182 = 3;
            }
            BOOL v183 = v182 == v179;
            if (v169 < 8) {
              BOOL v180 = v183;
            }
            if (v180)
            {
              BOOL v184 = v168 > 3 << v175;
              if (v184) {
                uint64_t v185 = (v175 + 1);
              }
              else {
                uint64_t v185 = v175;
              }
              if (v7 >= v162)
              {
                unsigned int v187 = 0;
                do
                {
                  unsigned int v186 = v187 + 1;
                  unint64_t v7 = 2 * (v7 - v162);
                }
                while (v7 >= v162 && v187++ < 0x11);
              }
              else
              {
                unsigned int v186 = 0;
              }
              v7 *= 2;
              v11 += v186 + 1;
              if (v11 >= 0)
              {
                unsigned int v189 = *v10++;
                v7 += (unint64_t)bswap32(v189) << v11;
                v11 -= 32;
                if (v10 >= v95) {
                  uint64_t v10 = v95;
                }
              }
              unsigned int v190 = v186 - 3;
              if (v186 <= 2)
              {
                unsigned int v191 = 0;
              }
              else
              {
                unsigned int v186 = (1 << (v186 - 3)) + 2;
                unsigned int v191 = v190;
              }
              unsigned int v192 = v186 << v185;
              int v193 = v191 + v185;
              if (v191 + v185)
              {
                int v194 = 0;
                int v195 = v191 + v175 + v184 + 1;
                do
                {
                  BOOL v196 = v7 >= v162;
                  if (v7 < v162) {
                    unint64_t v197 = 0;
                  }
                  else {
                    unint64_t v197 = v8 << 54;
                  }
                  unint64_t v7 = 2 * (v7 - v197);
                  int v194 = v196 | (2 * v194);
                  --v195;
                }
                while (v195 > 1);
                v11 += v193;
                if (v11 >= 0)
                {
                  unsigned int v198 = *v10++;
                  v7 += (unint64_t)bswap32(v198) << v11;
                  v11 -= 32;
                  if (v10 >= v95) {
                    uint64_t v10 = v95;
                  }
                }
                char v199 = v264;
                v192 += v194;
              }
              else
              {
                char v199 = v264;
              }
              unsigned int v168 = v192 + v179;
              uint64_t v156 = a1;
              if ((v199 & 1) == 0) {
                goto LABEL_294;
              }
              if (v192 >= v253)
              {
                char v264 = 0;
                ++*(unsigned char *)(*(void *)(a1 + 40) + v252 + 213);
                goto LABEL_296;
              }
              if ((2 * v192) >> v251
                || (uint64_t v210 = *(void *)(a1 + 40) + v252,
                    int v213 = *(unsigned __int8 *)(v210 + 213),
                    int16x4_t v211 = (unsigned char *)(v210 + 213),
                    char v212 = v213,
                    !v213))
              {
LABEL_294:
                char v264 = 0;
                goto LABEL_296;
              }
              char v264 = 0;
              *int16x4_t v211 = v212 - 1;
LABEL_296:
              v179 += v192;
            }
            else
            {
LABEL_267:
              uint64_t v185 = v175;
            }
            v170 += v179;
            char v200 = !v161;
            if (v169 != a6.i32[0] - 1) {
              char v200 = 1;
            }
            int v201 = (v179 ^ (v172 >> 31)) - (v172 >> 31);
            if (v170) {
              int v202 = -v179;
            }
            else {
              int v202 = v179;
            }
            if (v200)
            {
              v172 *= 2;
              int v202 = v201;
            }
            int v203 = v267[v159];
            if ((**(_WORD **)(v156 + 48) & 0x100) == 0)
            {
              uint64_t v204 = v155;
              if (v262)
              {
                int v205 = v266 + v203;
                uint64_t v155 = v257;
                unsigned int v206 = ((v205 & v259) >> v256) + 8 * (v205 >> a3 >> v256);
                if ((int)a3 < 4) {
                  unsigned int v206 = v266 + v203;
                }
                if (v205) {
                  signed int v207 = v206 + 1;
                }
                else {
                  signed int v207 = v206;
                }
                uint64_t v204 = *(unsigned __int8 *)(v262 + v207) * (uint64_t)(int)v257;
              }
              uint64_t v208 = (v261 + v204 * v202) >> v260;
              if (v208 >= 0x7FFF) {
                uint64_t v208 = 0x7FFFLL;
              }
              if (v208 <= -32768) {
                LOWORD(v202) = 0x8000;
              }
              else {
                LOWORD(v202) = v208;
              }
              long long v95 = v263;
            }
            *(_WORD *)(v144 + 2 * v267[v159]) = v202;
            if (v169 == v177)
            {
              uint64_t v79 = v156;
              uint64_t v88 = 0;
              int v87 = 16;
              a5 = v236;
              uint64_t v82 = v241;
              uint64_t v66 = v242;
              char v78 = v240;
              uint64_t v73 = a3;
              unint64_t v86 = v248;
              int v91 = v234;
              goto LABEL_323;
            }
            ++v169;
            v178 >>= 1;
            unsigned int v209 = __clz(v171) + 1;
            LODWORD(v171) = v171 << v209;
            v159 -= v209;
            uint64_t v175 = v185;
            continue;
          }
        }
        goto LABEL_346;
      }
    }
    uint64_t v127 = v254;
    if (v88) {
      goto LABEL_177;
    }
LABEL_346:
    int v87 = 16;
LABEL_347:
    uint64_t v93 = v127 - 1;
  }
  while (v127 > 0);
  uint64_t v225 = *(void *)(v79 + 32);
  if (*v243)
  {
    uint64_t v226 = *(void *)(v225 + 2280) + 552;
    BOOL v227 = a5 != 0;
    if (v243[1]) {
      (*(void (**)(uint64_t, uint64_t, void))(v226 + 8 * v227 + 384))(a2, v73, v243[1]);
    }
    else {
      (*(void (**)(uint64_t, uint64_t))(v226 + 32 * v227 + 8 * v66 + 176))(a2, v73);
    }
  }
  else if (v243[1])
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v225 + 2280) + 8 * (v243[1] - 1) + 920))(a2, v73);
  }
  *int32x4_t v229 = v7;
  v229[1] = v8;
  uint64_t result = (v230 + 16 * v82 + 1);
  v229[2] = v11;
  v229[3] = (unint64_t)v10;
  return result;
}

void sub_1D0CC0950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = v12;
  a10[1] = v13;
  a10[2] = v10;
  a10[3] = v11;
  _Unwind_Resume(a1);
}

uint64_t sub_1D0CC0960(uint64_t a1, uint64_t a2, int8x8_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v10 = (unsigned __int8 *)(a1 + 6426);
  uint64_t v11 = *(unint64_t **)(a1 + 40);
  unint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  __n128 v15 = (unsigned int *)v11[3];
  __n128 v14 = (unsigned int *)v11[4];
  unint64_t v16 = v11[2];
  uint64_t v17 = (char *)&unk_1D0DA76FD + 36 * (a6 > 0);
  int v177 = v11;
  unint64_t v18 = (char *)v11 + 83;
  do
  {
    uint64_t v19 = v17[v8];
    unint64_t v20 = v18[v19];
    uint64_t v21 = byte_1D0D7FCB3[(v13 & 0xC0) + (v20 >> 1)];
    LODWORD(v22) = v13 - v21;
    BOOL v23 = v12 >= (v13 - v21) << 55;
    if (v12 < (v13 - v21) << 55) {
      unint64_t v22 = v22;
    }
    else {
      unint64_t v22 = byte_1D0D7FCB3[(v13 & 0xC0) + (v20 >> 1)];
    }
    if (v12 < (v13 - v21) << 55)
    {
      uint64_t v24 = 0;
    }
    else
    {
      v12 -= (v13 - v21) << 55;
      uint64_t v24 = 1;
    }
    if (v23) {
      char v25 = v20 + 1;
    }
    else {
      char v25 = v18[v19];
    }
    int v26 = __clz(v22) - 55;
    unint64_t v13 = v22 << v26;
    v12 <<= v26;
    v9 += v26;
    v18[v19] = byte_1D0D7FCB3[2 * v20 + 256 + v24];
    if ((v25 & 1) == 0) {
      break;
    }
    ++v8;
  }
  while (v8 != 3);
  uint64_t v27 = v16 + v9;
  if (v27 >= 0)
  {
    unsigned int v28 = *v15++;
    v12 += (unint64_t)bswap32(v28) << v27;
    v27 -= 32;
    if (v15 >= v14) {
      __n128 v15 = v14;
    }
  }
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = *(void *)(a1 + 40) + 101;
  do
  {
    uint64_t v32 = v17[v29];
    unint64_t v33 = *(unsigned __int8 *)(v31 + v32);
    uint64_t v34 = byte_1D0D7FCB3[(v13 & 0xC0) + (v33 >> 1)];
    LODWORD(v35) = v13 - v34;
    BOOL v36 = v12 >= (v13 - v34) << 55;
    if (v12 < (v13 - v34) << 55) {
      unint64_t v35 = v35;
    }
    else {
      unint64_t v35 = byte_1D0D7FCB3[(v13 & 0xC0) + (v33 >> 1)];
    }
    if (v12 < (v13 - v34) << 55)
    {
      uint64_t v37 = 0;
    }
    else
    {
      v12 -= (v13 - v34) << 55;
      uint64_t v37 = 1;
    }
    if (v36) {
      char v38 = v33 + 1;
    }
    else {
      char v38 = *(unsigned char *)(v31 + v32);
    }
    int v39 = __clz(v35) - 55;
    unint64_t v13 = v35 << v39;
    v12 <<= v39;
    v30 += v39;
    *(unsigned char *)(v31 + v32) = byte_1D0D7FCB3[2 * v33 + 256 + v37];
    if ((v38 & 1) == 0) {
      break;
    }
    ++v29;
  }
  while (v29 != 3);
  uint64_t v40 = v27 + v30;
  if (v40 >= 0)
  {
    unsigned int v41 = *v15++;
    v12 += (unint64_t)bswap32(v41) << v40;
    v40 -= 32;
    if (v15 >= v14) {
      __n128 v15 = v14;
    }
  }
  if (a5 == 2) {
    int v42 = v29;
  }
  else {
    int v42 = v8;
  }
  if (a5 == 2) {
    int v43 = v8;
  }
  else {
    int v43 = v29;
  }
  __int16 v44 = **(_WORD **)(a1 + 48);
  int v45 = v44 >> 9;
  uint64_t v46 = *(void *)(a1 + 32);
  if (a6)
  {
    v45 += *(char *)(v46 + a6 + 656) + *(char *)(*(void *)(a1 + 24) + a6 + 2);
    BOOL v47 = *(unsigned __int8 **)(v46 + 16);
    int v48 = v47[2099];
    if (v45 <= -v48) {
      int v45 = -v48;
    }
    if (v47[2148] == 1)
    {
      if (v45 >= 57) {
        int v49 = 57;
      }
      else {
        int v49 = v45;
      }
      BOOL v50 = __OFSUB__(v49, 30);
      int v51 = v49 - 30;
      if (v51 < 0 == v50) {
        int v45 = byte_1D0DAE600[v51];
      }
    }
    else if (v45 >= 51)
    {
      int v45 = 51;
    }
    int v52 = v47 + 223;
  }
  else
  {
    BOOL v47 = *(unsigned __int8 **)(v46 + 16);
    LOWORD(v48) = v47[2097];
    int v52 = v47 + 222;
  }
  if (v45 < 0)
  {
    LOWORD(v45) = v45 + v48;
    char v53 = *v52 + 5;
  }
  else
  {
    char v53 = 5;
  }
  BOOL v54 = 0;
  uint64_t v55 = a5;
  int v56 = v42 + 4 * v43;
  int v57 = &byte_1D0DAFC60[16 * a5];
  int v58 = v44 & 0x100;
  int v59 = *v10 | v58;
  BOOL v176 = v59 != 0;
  if (v59) {
    BOOL v60 = v47[402] != 0;
  }
  else {
    BOOL v60 = 0;
  }
  uint64_t v61 = *(void *)(v46 + 32);
  if (*(unsigned char *)(v61 + 5) && !v58) {
    BOOL v54 = v10[1] == 0;
  }
  uint64_t v62 = *(void *)(a1 + 40);
  int v63 = v57[v56];
  int v64 = v47[274];
  uint64_t v65 = (char *)&unk_1D0DAF020 + 64 * v55;
  if (v64)
  {
    if (*(_DWORD *)(a1 + 4) == 1) {
      uint64_t v66 = 0;
    }
    else {
      uint64_t v66 = 3;
    }
    uint64_t v67 = v61 + 65 * (v66 + a6) + 40;
  }
  else
  {
    uint64_t v67 = 0;
    v53 -= 4;
  }
  uint64_t v184 = v67;
  uint64_t v186 = a1;
  unsigned int v68 = ((10923 * (__int16)v45) >> 16) + ((10923 * (__int16)v45) >> 31);
  int v69 = a39H[(__int16)v45 % 6];
  int v70 = a6 < 1 || v60;
  BOOL v141 = v70 == 0;
  uint64_t v71 = 27;
  if (!v141) {
    uint64_t v71 = 0;
  }
  uint64_t v72 = 1;
  int v175 = v63;
  if ((v63 & 0xF) != 0)
  {
    uint64_t v73 = v62 + v71 + 123;
    LODWORD(v72) = 1 << (v63 & 0xF);
    if (a6) {
      unsigned int v74 = 43;
    }
    else {
      unsigned int v74 = 42;
    }
    uint64_t v75 = (v63 & 0xF) - 1;
    do
    {
      if (!v60) {
        unsigned int v74 = byte_1D0DAFCD0[v65[v75] + 64];
      }
      unint64_t v76 = *(unsigned __int8 *)(v73 + v74);
      uint64_t v77 = byte_1D0D7FCB3[(v13 & 0xC0) + (v76 >> 1)];
      LODWORD(v78) = v13 - v77;
      BOOL v79 = v12 >= (v13 - v77) << 55;
      if (v12 < (v13 - v77) << 55) {
        unint64_t v78 = v78;
      }
      else {
        unint64_t v78 = byte_1D0D7FCB3[(v13 & 0xC0) + (v76 >> 1)];
      }
      if (v12 < (v13 - v77) << 55)
      {
        uint64_t v80 = 0;
      }
      else
      {
        v12 -= (v13 - v77) << 55;
        uint64_t v80 = 1;
      }
      if (v79) {
        char v81 = v76 + 1;
      }
      else {
        char v81 = *(unsigned char *)(v73 + v74);
      }
      int v82 = __clz(v78) - 55;
      v12 <<= v82;
      *(unsigned char *)(v73 + v74) = byte_1D0D7FCB3[2 * v76 + 256 + v80];
      v40 += v82;
      if (v40 >= 0)
      {
        unsigned int v83 = *v15++;
        v12 += (unint64_t)bswap32(v83) << v40;
        v40 -= 32;
        if (v15 >= v14) {
          __n128 v15 = v14;
        }
      }
      unint64_t v13 = v78 << v82;
      uint64_t v72 = ((v81 & 1) << v75) | v72;
      unint64_t v84 = v75-- + 1;
    }
    while (v84 > 1);
  }
  unsigned int v85 = 0;
  int v86 = 0;
  uint64_t v87 = v62 + 16 * (a6 > 0) + 167;
  uint64_t v88 = v62 + 191;
  int v89 = v69 << v68;
  a3.i32[0] = v72;
  uint8x8_t v90 = (uint8x8_t)vcnt_s8(a3);
  v90.i16[0] = vaddlv_u8(v90);
  int v91 = v90.i32[0];
  if (v90.i32[0] >= 8u) {
    unsigned int v92 = 8;
  }
  else {
    unsigned int v92 = v90.i32[0];
  }
  if (v92 <= 1) {
    unsigned int v92 = 1;
  }
  int v93 = 1;
  do
  {
    while (1)
    {
      unint64_t v94 = *(unsigned __int8 *)(v87 + v93);
      uint64_t v95 = byte_1D0D7FCB3[(v13 & 0xC0) + (v94 >> 1)];
      LODWORD(v96) = v13 - v95;
      BOOL v97 = v12 >= (v13 - v95) << 55;
      if (v12 < (v13 - v95) << 55) {
        unint64_t v96 = v96;
      }
      else {
        unint64_t v96 = byte_1D0D7FCB3[(v13 & 0xC0) + (v94 >> 1)];
      }
      if (v12 < (v13 - v95) << 55)
      {
        uint64_t v98 = 0;
      }
      else
      {
        v12 -= (v13 - v95) << 55;
        uint64_t v98 = 1;
      }
      if (v97) {
        char v99 = v94 + 1;
      }
      else {
        char v99 = *(unsigned char *)(v87 + v93);
      }
      int v100 = __clz(v96) - 55;
      v12 <<= v100;
      *(unsigned char *)(v87 + v93) = byte_1D0D7FCB3[2 * v94 + 256 + v98];
      v40 += v100;
      if (v40 >= 0)
      {
        unsigned int v101 = *v15++;
        v12 += (unint64_t)bswap32(v101) << v40;
        v40 -= 32;
        if (v15 >= v14) {
          __n128 v15 = v14;
        }
      }
      unint64_t v13 = v96 << v100;
      v85 |= (v99 & 1) << v86;
      if ((v99 & 1) == 0) {
        break;
      }
      int v93 = 0;
      if (++v86 == v92) {
        goto LABEL_117;
      }
    }
    if ((v93 - 1) < 2) {
      ++v93;
    }
    ++v86;
  }
  while (v86 != v92);
  BOOL v102 = v90.i32[0] > 8u;
  if (v93)
  {
    int v103 = 0;
    goto LABEL_130;
  }
LABEL_117:
  unint64_t v104 = *(unsigned __int8 *)(v88 + 4 * (a6 > 0));
  uint64_t v105 = byte_1D0D7FCB3[((v96 << v100) & 0xC0) + (v104 >> 1)];
  LODWORD(v106) = v13 - v105;
  BOOL v107 = v12 >= (v13 - v105) << 55;
  if (v12 < (v13 - v105) << 55) {
    unint64_t v106 = v106;
  }
  else {
    unint64_t v106 = byte_1D0D7FCB3[((v96 << v100) & 0xC0) + (v104 >> 1)];
  }
  if (v12 < (v13 - v105) << 55)
  {
    uint64_t v108 = 0;
  }
  else
  {
    v12 -= (v13 - v105) << 55;
    uint64_t v108 = 1;
  }
  if (v107) {
    char v109 = v104 + 1;
  }
  else {
    char v109 = *(unsigned char *)(v88 + 4 * (a6 > 0));
  }
  int v110 = __clz(v106);
  int v111 = v110 - 55;
  unint64_t v13 = v106 << (v110 - 55);
  v12 <<= v110 - 55;
  int v103 = v109 & 1;
  *(unsigned char *)(v88 + 4 * (a6 > 0)) = byte_1D0D7FCB3[2 * v104 + 256 + v108];
  v40 += v111;
  if (v40 >= 0)
  {
    unsigned int v112 = *v15++;
    v12 += (unint64_t)bswap32(v112) << v40;
    v40 -= 32;
    if (v15 >= v14) {
      __n128 v15 = v14;
    }
  }
  BOOL v102 = 1;
LABEL_130:
  char v113 = v53;
  int v114 = 0;
  unsigned int v115 = __clz(v72);
  int v116 = v115 ^ 0x1F;
  char v117 = v115 + 1;
  BOOL v118 = (int)(v116 - __clz(__rbit32(v72))) > 3 && v54;
  unint64_t v119 = v13 << 54;
  int v120 = v90.i32[0] - v118 + 1;
  do
  {
    BOOL v121 = v12 >= v119;
    if (v12 < v119) {
      unint64_t v122 = 0;
    }
    else {
      unint64_t v122 = v13 << 54;
    }
    unint64_t v12 = 2 * (v12 - v122);
    int v114 = v121 | (2 * v114);
    --v120;
  }
  while (v120 > 1);
  uint64_t v123 = v40 + v90.i32[0] - v118;
  if (v123 >= 0)
  {
    unsigned int v124 = *v15++;
    v12 += (unint64_t)bswap32(v124) << v123;
    v123 -= 32;
    if (v15 >= v14) {
      __n128 v15 = v14;
    }
  }
  uint64_t v125 = v72 << v117;
  int v126 = v114 << (v118 - v90.i8[0]);
  unsigned int v127 = __rbit32(v85);
  uint64_t v128 = 2 * (a6 == 0);
  int v174 = a6;
  if (*v10) {
    unint64_t v129 = 1;
  }
  else {
    unint64_t v129 = ((unint64_t)**(unsigned __int16 **)(v186 + 48) >> 8) & 1;
  }
  unsigned int v130 = 0;
  unsigned int v131 = 0;
  char v132 = 0;
  unsigned int v183 = __clz(v127);
  unint64_t v179 = v128 | v129;
  uint64_t v133 = *(unsigned __int8 *)(*(void *)(v186 + 40) + (v128 | v129) + 213) >> 2;
  unsigned int v180 = 3 << (*(unsigned char *)(*(void *)(v186 + 40) + (v128 | v129) + 213) >> 2);
  uint64_t v134 = v89;
  char v181 = v113;
  uint64_t v182 = 1 << (v113 - 1);
  if (v90.i32[0] <= 1u) {
    int v91 = 1;
  }
  int v135 = v91 - 1;
  char v136 = !v118;
  char v178 = *(unsigned char *)(*(void *)(v186 + 40) + (v128 | v129) + 213) >> 2;
  char v137 = 1;
  unsigned int v138 = v85;
  while (1)
  {
    if (v138) {
      int v139 = v103 + 2;
    }
    else {
      int v139 = 1;
    }
    if (v138) {
      int v103 = 0;
    }
    if (!v102) {
      goto LABEL_167;
    }
    BOOL v140 = (v138 & 1) == 0;
    BOOL v141 = v183 != v131 || v85 == 0;
    if (v141) {
      int v142 = 2;
    }
    else {
      int v142 = 3;
    }
    BOOL v143 = v142 == v139;
    if (v131 < 8) {
      BOOL v140 = v143;
    }
    if (!v140)
    {
LABEL_167:
      uint64_t v145 = v133;
      goto LABEL_196;
    }
    BOOL v144 = v130 > 3 << v133;
    if (v144) {
      uint64_t v145 = (v133 + 1);
    }
    else {
      uint64_t v145 = v133;
    }
    if (v12 >= v119)
    {
      unsigned int v147 = 0;
      do
      {
        unsigned int v146 = v147 + 1;
        unint64_t v12 = 2 * (v12 - v119);
      }
      while (v12 >= v119 && v147++ < 0x11);
    }
    else
    {
      unsigned int v146 = 0;
    }
    v12 *= 2;
    v123 += v146 + 1;
    if (v123 >= 0)
    {
      unsigned int v149 = *v15++;
      v12 += (unint64_t)bswap32(v149) << v123;
      v123 -= 32;
      if (v15 >= v14) {
        __n128 v15 = v14;
      }
    }
    unsigned int v150 = v146 - 3;
    if (v146 <= 2)
    {
      unsigned int v151 = 0;
    }
    else
    {
      unsigned int v146 = (1 << (v146 - 3)) + 2;
      unsigned int v151 = v150;
    }
    unsigned int v152 = v146 << v145;
    int v153 = v151 + v145;
    if (v151 + v145)
    {
      int v154 = 0;
      int v155 = v151 + v133 + v144 + 1;
      do
      {
        BOOL v156 = v12 >= v119;
        if (v12 < v119) {
          unint64_t v157 = 0;
        }
        else {
          unint64_t v157 = v13 << 54;
        }
        unint64_t v12 = 2 * (v12 - v157);
        int v154 = v156 | (2 * v154);
        --v155;
      }
      while (v155 > 1);
      v123 += v153;
      if (v123 >= 0)
      {
        unsigned int v158 = *v15++;
        v12 += (unint64_t)bswap32(v158) << v123;
        v123 -= 32;
        if (v15 >= v14) {
          __n128 v15 = v14;
        }
      }
      v152 += v154;
    }
    unsigned int v130 = v152 + v139;
    if (v137)
    {
      if (v152 >= v180)
      {
        char v137 = 0;
        ++*(unsigned char *)(*(void *)(v186 + 40) + v179 + 213);
        goto LABEL_195;
      }
      if (!((2 * v152) >> v178))
      {
        unint64_t v165 = *(void *)(v186 + 40) + v179;
        int v168 = *(unsigned __int8 *)(v165 + 213);
        unsigned int v166 = (unsigned char *)(v165 + 213);
        char v167 = v168;
        if (v168)
        {
          char v137 = 0;
          *unsigned int v166 = v167 - 1;
          goto LABEL_195;
        }
      }
    }
    char v137 = 0;
LABEL_195:
    v139 += v152;
LABEL_196:
    v132 += v139;
    if (v131 == v90.i32[0] - 1) {
      char v159 = v136;
    }
    else {
      char v159 = 1;
    }
    LODWORD(v160) = (v139 ^ (v126 >> 31)) - (v126 >> 31);
    if (v132) {
      int v139 = -v139;
    }
    if (v159) {
      v126 *= 2;
    }
    else {
      LODWORD(v160) = v139;
    }
    uint64_t v161 = v65[v116];
    if ((**(_WORD **)(v186 + 48) & 0x100) == 0)
    {
      uint64_t v162 = v134;
      if (v184)
      {
        if (v65[v116]) {
          uint64_t v163 = v161 + 1;
        }
        else {
          uint64_t v163 = v65[v116];
        }
        uint64_t v162 = *(unsigned __int8 *)(v184 + v163) * (uint64_t)(int)v134;
      }
      uint64_t v160 = (v182 + v162 * (int)v160) >> v181;
      if (v160 >= 0x7FFF) {
        uint64_t v160 = 0x7FFFLL;
      }
      if (v160 <= -32768) {
        LOWORD(v160) = 0x8000;
      }
    }
    *(_WORD *)(a2 + 2 * v161) = v160;
    if (v131 == v135) {
      break;
    }
    ++v131;
    v138 >>= 1;
    unsigned int v164 = __clz(v125) + 1;
    LODWORD(v125) = v125 << v164;
    v116 -= v164;
    uint64_t v133 = v145;
  }
  uint64_t v169 = *(void *)(v186 + 32);
  BOOL v170 = v176;
  if (!*(unsigned char *)(*(void *)(v169 + 16) + 401)) {
    BOOL v170 = 0;
  }
  if (v170 && *(_DWORD *)(v186 + 4) == 1) {
    (*(void (**)(uint64_t))(*(void *)(v169 + 2280) + 792))(a2);
  }
  if (*v10)
  {
    uint64_t v171 = *(void *)(v169 + 2280) + 552;
    BOOL v172 = v174 != 0;
    if (v10[1]) {
      (*(void (**)(uint64_t, uint64_t))(v171 + 8 * v172 + 384))(a2, 2);
    }
    else {
      (*(void (**)(uint64_t))(v171 + 32 * v172 + 176))(a2);
    }
  }
  else if (v10[1])
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v169 + 2280) + 8 * (v10[1] - 1) + 920))(a2, 2);
  }
  uint64_t result = (v175 + 1);
  *int v177 = v12;
  v177[1] = v13;
  v177[2] = v123;
  v177[3] = (unint64_t)v15;
  return result;
}

void sub_1D0CC1374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  *a13 = v14;
  a13[1] = v15;
  a13[2] = v16;
  a13[3] = v13;
  _Unwind_Resume(a1);
}

uint64_t sub_1D0CC1384(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int *a7, int32x2_t a8)
{
  uint64_t v8 = a5;
  uint64_t v238 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 32);
  int v13 = a7[1];
  uint64_t v14 = *a7;
  if (v13 == 1)
  {
    BOOL v16 = 0;
    *(_WORD *)(a1 + 6424) = *(_WORD *)(a1 + 2 * a4 + 6416);
  }
  else if (v13)
  {
    BOOL v16 = 0;
  }
  else
  {
    int v15 = *(_DWORD *)(a1 + 8);
    BOOL v16 = v15 != 0;
    if (*(_DWORD *)(a1 + 4) == 3)
    {
      if (*(unsigned char *)(*(void *)(v12 + 16) + 272)) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v15 == 0;
      }
      BOOL v16 = !v17;
    }
  }
  unint64_t v18 = (unsigned __int8 *)(a1 + 6424);
  uint64_t v19 = v13;
  uint64_t v20 = *(void *)(v12 + 16);
  if ((int)v14 <= *(unsigned __int8 *)(v20 + 2114)) {
    goto LABEL_33;
  }
  char v21 = (int)v14 > *(unsigned __int8 *)(v20 + 2115) || v16;
  if (v21)
  {
    char v22 = 1;
    goto LABEL_34;
  }
  if (v13 >= *(_DWORD *)(a1 + 12))
  {
LABEL_33:
    char v22 = 0;
    goto LABEL_34;
  }
  BOOL v23 = *(uint64_t **)(a1 + 40);
  unint64_t v24 = ((unsigned __int8 *)v23 - v14)[76];
  uint64_t v26 = *v23;
  uint64_t v25 = v23[1];
  uint64_t v27 = byte_1D0D7FCB3[(v25 & 0xC0) + (v24 >> 1)];
  LODWORD(v28) = v25 - v27;
  if (*v23 < (unint64_t)((v25 - v27) << 55)) {
    unint64_t v28 = v28;
  }
  else {
    unint64_t v28 = byte_1D0D7FCB3[(v25 & 0xC0) + (v24 >> 1)];
  }
  if (*v23 < (unint64_t)((v25 - v27) << 55))
  {
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v26 = *v23 - ((v25 - v27) << 55);
    uint64_t v29 = 1;
  }
  if (*v23 < (unint64_t)((v25 - v27) << 55)) {
    char v30 = ((unsigned char *)v23 - v14)[76];
  }
  else {
    char v30 = v24 + 1;
  }
  unsigned __int8 v31 = byte_1D0D7FCB3[2 * v24 + 256 + v29];
  int v32 = __clz(v28) - 55;
  uint64_t v33 = v26 << v32;
  v23[1] = v28 << v32;
  ((unsigned char *)v23 - v14)[76] = v31;
  uint64_t v34 = v23[2] + v32;
  if (v34 >= 0)
  {
    unint64_t v35 = (unsigned int *)v23[3];
    unsigned int v37 = *v35;
    BOOL v36 = v35 + 1;
    v33 += (unint64_t)bswap32(v37) << v34;
    v34 -= 32;
    if ((unint64_t)v36 >= v23[4]) {
      BOOL v36 = (unsigned int *)v23[4];
    }
    v23[3] = (uint64_t)v36;
  }
  v23[2] = v34;
  *BOOL v23 = v33;
  char v22 = v30 & 1;
LABEL_34:
  char v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = *(void *)(a1 + 40) + 76;
  char v41 = 1;
  do
  {
    char v42 = v41;
    if ((a6 >> v38))
    {
      int v43 = *(uint64_t **)(a1 + 40);
      unint64_t v44 = *(unsigned __int8 *)(v40 + v19);
      uint64_t v46 = *v43;
      uint64_t v45 = v43[1];
      uint64_t v47 = byte_1D0D7FCB3[(v45 & 0xC0) + (v44 >> 1)];
      LODWORD(v48) = v45 - v47;
      if (*v43 < (unint64_t)((v45 - v47) << 55)) {
        unint64_t v48 = v48;
      }
      else {
        unint64_t v48 = byte_1D0D7FCB3[(v45 & 0xC0) + (v44 >> 1)];
      }
      if (*v43 < (unint64_t)((v45 - v47) << 55))
      {
        uint64_t v49 = 0;
      }
      else
      {
        uint64_t v46 = *v43 - ((v45 - v47) << 55);
        uint64_t v49 = 1;
      }
      if (*v43 < (unint64_t)((v45 - v47) << 55)) {
        char v50 = *(unsigned char *)(v40 + v19);
      }
      else {
        char v50 = v44 + 1;
      }
      unsigned __int8 v51 = byte_1D0D7FCB3[2 * v44 + 256 + v49];
      int v52 = __clz(v48) - 55;
      uint64_t v53 = v46 << v52;
      v43[1] = v48 << v52;
      *(unsigned char *)(v40 + v19) = v51;
      uint64_t v54 = v43[2] + v52;
      if (v54 >= 0)
      {
        uint64_t v55 = (unsigned int *)v43[3];
        unsigned int v57 = *v55;
        int v56 = v55 + 1;
        v53 += (unint64_t)bswap32(v57) << v54;
        v54 -= 32;
        if ((unint64_t)v56 >= v43[4]) {
          int v56 = (unsigned int *)v43[4];
        }
        v43[3] = (uint64_t)v56;
      }
      v43[2] = v54;
      *int v43 = v53;
      uint64_t v39 = ((v50 & 1) << v38) | v39;
    }
    char v41 = 0;
    char v38 = 1;
  }
  while ((v42 & 1) != 0);
  if (v22)
  {
    int v58 = v14 - 1;
    uint64_t v59 = ((1 << v58) + a2);
    uint64_t v60 = ((1 << v58) + a3);
    int v235 = v58;
    int v236 = v19 + 1;
    int v237 = a5;
    int v61 = (a5 & 0xF0) != 0;
    if ((a5 & 0xF0) != 0) {
      int v62 = 15;
    }
    else {
      int v62 = 0;
    }
    int v63 = v62 | a5 & 0x1FF0;
    int v64 = (a5 & 0x1E00) != 0;
    if ((a5 & 0x1E00) != 0) {
      int v65 = 122880;
    }
    else {
      int v65 = 0;
    }
    sub_1D0CC1384(a1, a2, a3, 0, v63 | v65, v39, &v235);
    sub_1D0CC1384(a1, v59, a3, 1, v8 & 0x1FE00 | (v64 << 8) | 0xF0, v39, &v235);
    sub_1D0CC1384(a1, a2, v60, 2, v8 | (v61 << 8) | 0x1FE00u, v39, &v235);
    return sub_1D0CC1384(a1, v59, v60, 3, 8176, v39, &v235);
  }
  unsigned int v234 = a5;
  uint64_t v67 = *(void *)(a1 + 32);
  uint64_t v68 = *(void *)(v67 + 8);
  uint64_t v227 = *(void *)(v68 + 416);
  uint64_t v229 = (int)a3;
  uint64_t v225 = *(void *)(v68 + 400) + ((v227 * (int)a3 + (int)a2) << *(unsigned char *)(v68 + 531));
  int v69 = a7[1];
  LODWORD(v70) = 1;
  uint64_t v232 = *a7;
  int v71 = 1 << v232;
  uint64_t v222 = *(void *)(v67 + 2280);
  if (*(_DWORD *)(a1 + 4) != 1 && !(v69 | v39)) {
    goto LABEL_83;
  }
  BOOL v17 = v69 == 0;
  uint64_t v72 = *(uint64_t **)(a1 + 40);
  if (v17) {
    uint64_t v73 = (char *)v72 + 1;
  }
  else {
    uint64_t v73 = *(char **)(a1 + 40);
  }
  unint64_t v74 = v73[74];
  uint64_t v76 = *v72;
  uint64_t v75 = v72[1];
  uint64_t v77 = byte_1D0D7FCB3[(v75 & 0xC0) + (v74 >> 1)];
  LODWORD(v78) = v75 - v77;
  if (*v72 < (unint64_t)((v75 - v77) << 55)) {
    unint64_t v78 = v78;
  }
  else {
    unint64_t v78 = byte_1D0D7FCB3[(v75 & 0xC0) + (v74 >> 1)];
  }
  if (*v72 < (unint64_t)((v75 - v77) << 55))
  {
    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v76 = *v72 - ((v75 - v77) << 55);
    uint64_t v79 = 1;
  }
  if (*v72 < (unint64_t)((v75 - v77) << 55)) {
    char v80 = v73[74];
  }
  else {
    char v80 = v74 + 1;
  }
  unsigned __int8 v81 = byte_1D0D7FCB3[2 * v74 + 256 + v79];
  int v82 = __clz(v78) - 55;
  uint64_t v83 = v76 << v82;
  v72[1] = v78 << v82;
  v73[74] = v81;
  uint64_t v84 = v72[2] + v82;
  if (v84 >= 0)
  {
    unsigned int v85 = (unsigned int *)v72[3];
    unsigned int v87 = *v85;
    int v86 = v85 + 1;
    v83 += (unint64_t)bswap32(v87) << v84;
    v84 -= 32;
    if ((unint64_t)v86 >= v72[4]) {
      int v86 = (unsigned int *)v72[4];
    }
    v72[3] = (uint64_t)v86;
  }
  v72[2] = v84;
  *uint64_t v72 = v83;
  LODWORD(v70) = v80 & 1;
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    uint64_t v88 = *(void *)(a1 + 32);
    unsigned int v89 = sub_1D0C563C4(v88, a2, a3, v71, v71, &v234, a8);
    uint64_t v90 = *v18;
    if (v18[1] == 35) {
      uint64_t v91 = *v18;
    }
    else {
      uint64_t v91 = v18[1];
    }
    if ((int)v232 > 3)
    {
      unsigned int v215 = 0;
      unsigned int v231 = 0;
    }
    else
    {
      unsigned int v215 = byte_1D0DA7278[v90];
      unsigned int v231 = byte_1D0DA7278[v91];
    }
    BOOL v214 = v232 == 2;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      if (*(unsigned char *)(*(void *)(v88 + 16) + 403)) {
        BOOL v93 = (v90 & 0xFFFFFFEF) == 10;
      }
      else {
        BOOL v93 = 0;
      }
      unsigned int v92 = v93;
    }
    else
    {
      unsigned int v92 = 0;
    }
    uint64_t v8 = v234;
    unsigned int v217 = v89;
    sub_1D0C56A10(v222 + 8, v90, v232, v234, v89, v92, v227, v225);
    unint64_t v94 = *(void **)(*(void *)(a1 + 32) + 8);
    int8x8_t v95 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(void *)&vdup_n_s32((2 << v232) - 64));
    uint64_t v96 = v94[117];
    uint64_t v97 = (uint64_t)(int)a3 >> 2;
    uint64_t v98 = v94[121];
    uint64_t v99 = v94[116];
    uint64_t v100 = (uint64_t)(int)a2 >> 2;
    uint64_t v101 = v94[118];
    if (v71 >= 5)
    {
      uint64_t v102 = v100 + v99 * ((uint64_t)(int)a3 >> 3);
      int8x8_t v103 = vmax_s8(*(int8x8_t *)(v101 + v102), v95);
      *(int8x8_t *)(v98 + v97 + v96 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v98+ v97+ v96 * ((uint64_t)(int)a2 >> 3)), v95);
      *(int8x8_t *)(v101 + v102) = v103;
    }
    uint64_t v104 = v100 + v99 * ((uint64_t)(v71 + (int)a3) >> 3);
    uint64_t v105 = v97 + v96 * ((uint64_t)(v71 + (int)a2) >> 3);
    int8x8_t v106 = vmax_s8(*(int8x8_t *)(v98 + v105), v95);
    int8x8_t v107 = vmax_s8(*(int8x8_t *)(v101 + v104), v95);
    *(int8x8_t *)(v98 + v105) = v106;
    *(int8x8_t *)(v101 + v104) = v107;
  }
  else
  {
LABEL_83:
    unsigned int v215 = 0;
    unsigned int v231 = 0;
    unsigned int v217 = 0;
    BOOL v214 = 0;
    uint64_t v91 = 0;
  }
  uint64_t result = (uint64_t)sub_1D0C56BA8((void *)a1, a2, a3, v70, v39);
  uint64_t v108 = *(void *)(a1 + 32);
  uint64_t v109 = *(void *)(v108 + 32);
  int v110 = *(unsigned __int8 *)(v109 + 11);
  if (*(unsigned char *)(v109 + 11)) {
    int v110 = (**(_WORD **)(a1 + 48) & 0x100) == 0;
  }
  int v111 = *(unsigned __int8 *)(v109 + 1615) + 2;
  int v219 = v111;
  int v220 = v110;
  if (v70)
  {
    v18[2] = 0;
    if ((int)v232 <= v111) {
      int v112 = v110;
    }
    else {
      int v112 = 0;
    }
    if (v112 == 1)
    {
      char v113 = *(uint64_t **)(a1 + 40);
      unint64_t v114 = *((unsigned __int8 *)v113 + 81);
      uint64_t v116 = *v113;
      uint64_t v115 = v113[1];
      uint64_t v117 = byte_1D0D7FCB3[(v115 & 0xC0) + (v114 >> 1)];
      LODWORD(v118) = v115 - v117;
      if (*v113 < (unint64_t)((v115 - v117) << 55)) {
        unint64_t v118 = v118;
      }
      else {
        unint64_t v118 = byte_1D0D7FCB3[(v115 & 0xC0) + (v114 >> 1)];
      }
      if (*v113 < (unint64_t)((v115 - v117) << 55))
      {
        uint64_t v119 = 0;
      }
      else
      {
        uint64_t v116 = *v113 - ((v115 - v117) << 55);
        uint64_t v119 = 1;
      }
      if (*v113 < (unint64_t)((v115 - v117) << 55)) {
        char v120 = *((unsigned char *)v113 + 81);
      }
      else {
        char v120 = v114 + 1;
      }
      unsigned __int8 v121 = byte_1D0D7FCB3[2 * v114 + 256 + v119];
      int v122 = __clz(v118) - 55;
      uint64_t v123 = v116 << v122;
      v113[1] = v118 << v122;
      *((unsigned char *)v113 + 81) = v121;
      uint64_t v124 = v113[2] + v122;
      if (v124 >= 0)
      {
        uint64_t v125 = (unsigned int *)v113[3];
        unsigned int v127 = *v125;
        int v126 = v125 + 1;
        v123 += (unint64_t)bswap32(v127) << v124;
        v124 -= 32;
        if ((unint64_t)v126 >= v113[4]) {
          int v126 = (unsigned int *)v113[4];
        }
        v113[3] = (uint64_t)v126;
      }
      v113[2] = v124;
      *char v113 = v123;
      v18[2] = v120 & 1;
    }
    int v223 = 1 << v232;
    v18[3] = sub_1D0C56874(a1, 0, *v18);
    uint64_t v128 = a1 + 16 * ((int)v232 > 2);
    unint64_t v129 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(v128 + 6368);
    uint64_t v130 = *(void *)(v128 + 6376);
    unsigned int v131 = (void *)(a1 + (v130 >> 1));
    if (v130) {
      unint64_t v129 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(*v131 + v129);
    }
    uint64_t v132 = v129(v131, a1 + 64, v232, v215, 0);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 32) + 1616)) {
      BOOL v70 = *(_DWORD *)(a1 + 4) == 3 || v18[1] == 35;
    }
    else {
      BOOL v70 = 0;
    }
    uint64_t v133 = v222 + 552;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      uint64_t v134 = v232 - 2;
    }
    else
    {
      uint64_t v134 = v232 - 2;
      if (!v18[2])
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t))(v133 + 16 * v134 + 8 * v214))(v225, v227, a1 + 64, v70, v132);
        goto LABEL_129;
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t))(v133 + 8 * v134 + 248))(v225, v227, a1 + 64, v70, v132);
LABEL_129:
    uint64_t v108 = *(void *)(a1 + 32);
    if (*(_DWORD *)(a1 + 4) != 1)
    {
      int v135 = *(void **)(v108 + 8);
      int8x8_t v136 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(void *)&vdup_n_s32((2 << v232) - 64));
      uint64_t v137 = v135[117];
      uint64_t v138 = (uint64_t)(int)a3 >> 2;
      uint64_t v139 = v135[121];
      uint64_t v140 = v135[116];
      uint64_t v141 = (uint64_t)(int)a2 >> 2;
      uint64_t v142 = v135[118];
      if (v71 >= 5)
      {
        uint64_t v143 = v141 + v140 * ((uint64_t)(int)a3 >> 3);
        int8x8_t v144 = vmax_s8(*(int8x8_t *)(v142 + v143), v136);
        *(int8x8_t *)(v139 + v138 + v137 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v139+ v138+ v137 * ((uint64_t)(int)a2 >> 3)), v136);
        *(int8x8_t *)(v142 + v143) = v144;
      }
      uint64_t v145 = v141 + v140 * ((uint64_t)(v223 + (int)a3) >> 3);
      uint64_t v146 = v138 + v137 * ((uint64_t)(v223 + (int)a2) >> 3);
      int8x8_t v147 = vmax_s8(*(int8x8_t *)(v139 + v146), v136);
      int8x8_t v148 = vmax_s8(*(int8x8_t *)(v142 + v145), v136);
      *(int8x8_t *)(v139 + v146) = v147;
      *(int8x8_t *)(v142 + v145) = v148;
      uint64_t v108 = *(void *)(a1 + 32);
    }
  }
  uint64_t v149 = *(void *)(v108 + 8);
  uint64_t v150 = *(void *)(v149 + 424);
  uint64_t v151 = *(void *)(v149 + 408) + ((v150 * v229 + 2 * (int)a2) << *(unsigned char *)(v149 + 531));
  if (*(_DWORD *)(a1 + 4) == 1) {
    uint64_t result = sub_1D0C581BC(v222 + 8, v91, v232, v8, v217, v150, v151);
  }
  if (v39) {
    int v152 = 1;
  }
  else {
    int v152 = v70;
  }
  if (v152 == 1)
  {
    uint64_t v216 = v151;
    uint64_t v218 = v150;
    int v230 = v91;
    uint64_t v153 = 0;
    int v154 = 0;
    uint64_t v155 = v71 << v232;
    if (!v70) {
      uint64_t v155 = 0;
    }
    uint64_t v156 = a1 + 2 * v155 + 64;
    uint64_t v157 = v156 + 2 * (v71 << v232);
    int v233 = 0;
    int v158 = v220;
    if ((int)v232 > v219) {
      int v158 = 0;
    }
    int v228 = v158;
    uint64_t v159 = a1 + 16 * ((int)v232 > 2);
    uint64_t v226 = (uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t))(v159 + 6368);
    unsigned int v224 = (uint64_t *)(v159 + 6376);
    uint64_t v221 = a1 + 2 * v155 + 64;
    do
    {
      uint64_t v160 = v153;
      if (v70)
      {
        uint64_t v161 = *(unint64_t **)(a1 + 40);
        unint64_t v162 = *v161;
        uint64_t v163 = 4 * v153 + 203;
        unsigned int v164 = -1;
        do
        {
          unsigned int v165 = v164;
          unint64_t v166 = *((unsigned __int8 *)v161 + v163);
          unint64_t v167 = v161[1] - byte_1D0D7FCB3[(v161[1] & 0xC0) + (v166 >> 1)];
          BOOL v168 = v162 >= v167 << 55;
          unint64_t v169 = v162 - (v167 << 55);
          if (v162 < v167 << 55) {
            unint64_t v167 = v167;
          }
          else {
            unint64_t v167 = byte_1D0D7FCB3[(v161[1] & 0xC0) + (v166 >> 1)];
          }
          if (v168)
          {
            unint64_t v162 = v169;
            uint64_t v170 = 1;
          }
          else
          {
            uint64_t v170 = 0;
          }
          if (v168) {
            char v171 = v166 + 1;
          }
          else {
            char v171 = *((unsigned char *)v161 + v163);
          }
          unsigned __int8 v172 = byte_1D0D7FCB3[2 * v166 + 256 + v170];
          int v173 = __clz(v167) - 55;
          v162 <<= v173;
          v161[1] = v167 << v173;
          *((unsigned char *)v161 + v163) = v172;
          uint64_t v174 = v161[2] + v173;
          if (v174 >= 0)
          {
            int v175 = (unsigned int *)v161[3];
            unsigned int v177 = *v175;
            BOOL v176 = v175 + 1;
            v162 += (unint64_t)bswap32(v177) << v174;
            v174 -= 32;
            if ((unint64_t)v176 >= v161[4]) {
              BOOL v176 = (unsigned int *)v161[4];
            }
            v161[3] = (unint64_t)v176;
          }
          unsigned int v164 = v165 + 1;
          v161[2] = v174;
          *uint64_t v161 = v162;
          if ((v171 & 1) == 0) {
            break;
          }
          ++v163;
        }
        while (v164 < 3);
        int v178 = (v171 & 1) == 0;
        if (v165 + 2 == v178)
        {
          LOWORD(v179) = 0;
        }
        else
        {
          unint64_t v180 = *((unsigned __int8 *)v161 + v153 + 211);
          unint64_t v181 = v161[1];
          uint64_t v182 = byte_1D0D7FCB3[(v181 & 0xC0) + (v180 >> 1)];
          LODWORD(v183) = v181 - v182;
          BOOL v184 = v162 >= (v181 - v182) << 55;
          if (v162 < (v181 - v182) << 55) {
            unint64_t v183 = v183;
          }
          else {
            unint64_t v183 = byte_1D0D7FCB3[(v181 & 0xC0) + (v180 >> 1)];
          }
          if (v162 < (v181 - v182) << 55)
          {
            uint64_t v185 = 0;
          }
          else
          {
            v162 -= (v181 - v182) << 55;
            uint64_t v185 = 1;
          }
          if (v184) {
            char v186 = v180 + 1;
          }
          else {
            char v186 = *((unsigned char *)v161 + v153 + 211);
          }
          unsigned __int8 v187 = byte_1D0D7FCB3[2 * v180 + 256 + v185];
          int v188 = __clz(v183) - 55;
          unint64_t v189 = v162 << v188;
          v161[1] = v183 << v188;
          *((unsigned char *)v161 + v153 + 211) = v187;
          uint64_t v190 = v174 + v188;
          if (v190 >= 0)
          {
            unsigned int v191 = (unsigned int *)v161[3];
            unsigned int v193 = *v191;
            unsigned int v192 = v191 + 1;
            v189 += (unint64_t)bswap32(v193) << v190;
            v190 -= 32;
            if ((unint64_t)v192 >= v161[4]) {
              unsigned int v192 = (unsigned int *)v161[4];
            }
            v161[3] = (unint64_t)v192;
          }
          v161[2] = v190;
          *uint64_t v161 = v189;
          int v179 = 1 << (v164 + (v178 << 31 >> 31));
          if (v186) {
            int v179 = -v179;
          }
        }
        int v154 = &v235;
        *((_WORD *)&v235 + v153) = v179;
        LOWORD(v236) = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 16) + 2096);
      }
      if (v39)
      {
        v18[2] = 0;
        if (v228)
        {
          int v194 = *(uint64_t **)(a1 + 40);
          unint64_t v195 = *((unsigned __int8 *)v194 + 82);
          uint64_t v197 = *v194;
          uint64_t v196 = v194[1];
          uint64_t v198 = byte_1D0D7FCB3[(v196 & 0xC0) + (v195 >> 1)];
          LODWORD(v199) = v196 - v198;
          if (*v194 < (unint64_t)((v196 - v198) << 55)) {
            unint64_t v199 = v199;
          }
          else {
            unint64_t v199 = byte_1D0D7FCB3[(v196 & 0xC0) + (v195 >> 1)];
          }
          if (*v194 < (unint64_t)((v196 - v198) << 55))
          {
            uint64_t v200 = 0;
          }
          else
          {
            uint64_t v197 = *v194 - ((v196 - v198) << 55);
            uint64_t v200 = 1;
          }
          if (*v194 < (unint64_t)((v196 - v198) << 55)) {
            char v201 = *((unsigned char *)v194 + 82);
          }
          else {
            char v201 = v195 + 1;
          }
          unsigned __int8 v202 = byte_1D0D7FCB3[2 * v195 + 256 + v200];
          int v203 = __clz(v199) - 55;
          uint64_t v204 = v197 << v203;
          v194[1] = v199 << v203;
          *((unsigned char *)v194 + 82) = v202;
          uint64_t v205 = v194[2] + v203;
          if (v205 >= 0)
          {
            unsigned int v206 = (unsigned int *)v194[3];
            unsigned int v208 = *v206;
            signed int v207 = v206 + 1;
            v204 += (unint64_t)bswap32(v208) << v205;
            v205 -= 32;
            if ((unint64_t)v207 >= v194[4]) {
              signed int v207 = (unsigned int *)v194[4];
            }
            v194[3] = (uint64_t)v207;
          }
          v194[2] = v205;
          *int v194 = v204;
          v18[2] = v201 & 1;
        }
        v18[3] = sub_1D0C56874(a1, 1u, v230);
        unsigned int v209 = *v226;
        uint64_t v210 = (void *)(a1 + (*v224 >> 1));
        if (*v224) {
          unsigned int v209 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t))(*v210 + v209);
        }
        ++v153;
        __int16 v211 = v209(v210, v156, v232, v231, v160 + 1);
        if (v18[2]) {
          __int16 v212 = -1;
        }
        else {
          __int16 v212 = v211;
        }
        *((_WORD *)&v233 + v160) = v212;
      }
      else
      {
        ++v153;
      }
      LODWORD(v39) = v39 >> 1;
      uint64_t v156 = v157;
    }
    while (!v160);
    uint64_t v213 = v222 + 552 + 8 * (v232 - 2);
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(v213 + 280))(v216, v218, v221, v157, v154);
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, int *))(v213 + 128))(v216, v218, v221, v157, v154, &v233);
    }
  }
  return result;
}

void *sub_1D0CC2020(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, unsigned int *a7, int32x2_t a8)
{
  int v10 = a4;
  uint64_t v255 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(a1 + 32);
  int v15 = a7[1];
  uint64_t v16 = (int)*a7;
  if (v15 == 1)
  {
    BOOL v18 = 0;
    *(_WORD *)(a1 + 6424) = *(_WORD *)(a1 + 2 * a4 + 6416);
  }
  else if (v15)
  {
    BOOL v18 = 0;
  }
  else
  {
    int v17 = *(_DWORD *)(a1 + 8);
    BOOL v18 = v17 != 0;
    if (*(_DWORD *)(a1 + 4) == 3)
    {
      if (*(unsigned char *)(*(void *)(v14 + 16) + 272)) {
        BOOL v19 = 1;
      }
      else {
        BOOL v19 = v17 == 0;
      }
      BOOL v18 = !v19;
    }
  }
  uint64_t v20 = *(void *)(v14 + 16);
  if ((int)v16 <= *(unsigned __int8 *)(v20 + 2114)) {
    goto LABEL_33;
  }
  char v21 = (int)v16 > *(unsigned __int8 *)(v20 + 2115) || v18;
  if (v21)
  {
    int v22 = 1;
    goto LABEL_34;
  }
  if (v15 >= *(_DWORD *)(a1 + 12))
  {
LABEL_33:
    int v22 = 0;
  }
  else
  {
    BOOL v23 = *(uint64_t **)(a1 + 40);
    unint64_t v24 = ((unsigned __int8 *)v23 - v16)[76];
    uint64_t v26 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v27 = byte_1D0D7FCB3[(v25 & 0xC0) + (v24 >> 1)];
    LODWORD(v28) = v25 - v27;
    if (*v23 < (unint64_t)((v25 - v27) << 55)) {
      unint64_t v28 = v28;
    }
    else {
      unint64_t v28 = byte_1D0D7FCB3[(v25 & 0xC0) + (v24 >> 1)];
    }
    if (*v23 < (unint64_t)((v25 - v27) << 55))
    {
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v26 = *v23 - ((v25 - v27) << 55);
      uint64_t v29 = 1;
    }
    if (*v23 < (unint64_t)((v25 - v27) << 55)) {
      char v30 = ((unsigned char *)v23 - v16)[76];
    }
    else {
      char v30 = v24 + 1;
    }
    unsigned __int8 v31 = byte_1D0D7FCB3[2 * v24 + 256 + v29];
    int v32 = __clz(v28) - 55;
    uint64_t v33 = v26 << v32;
    v23[1] = v28 << v32;
    ((unsigned char *)v23 - v16)[76] = v31;
    uint64_t v34 = v23[2] + v32;
    if (v34 >= 0)
    {
      unint64_t v35 = (unsigned int *)v23[3];
      unsigned int v37 = *v35;
      BOOL v36 = v35 + 1;
      v33 += (unint64_t)bswap32(v37) << v34;
      v34 -= 32;
      if ((unint64_t)v36 >= v23[4]) {
        BOOL v36 = (unsigned int *)v23[4];
      }
      v23[3] = (uint64_t)v36;
    }
    v23[2] = v34;
    *BOOL v23 = v33;
    int v22 = v30 & 1;
  }
LABEL_34:
  if ((int)v16 < 3)
  {
    uint64_t v41 = a6;
  }
  else
  {
    uint64_t v38 = *(void *)(a1 + 40) + 76;
    if (v16 == 3) {
      char v39 = 0;
    }
    else {
      char v39 = v22;
    }
    if (v39)
    {
      char v40 = 0;
      uint64_t v41 = 0;
      char v42 = 1;
      do
      {
        char v43 = v42;
        if ((a6 >> v40))
        {
          unint64_t v44 = *(uint64_t **)(a1 + 40);
          unint64_t v45 = *(unsigned __int8 *)(v38 + v15);
          uint64_t v47 = *v44;
          uint64_t v46 = v44[1];
          uint64_t v48 = byte_1D0D7FCB3[(v46 & 0xC0) + (v45 >> 1)];
          LODWORD(v49) = v46 - v48;
          if (*v44 < (unint64_t)((v46 - v48) << 55)) {
            unint64_t v49 = v49;
          }
          else {
            unint64_t v49 = byte_1D0D7FCB3[(v46 & 0xC0) + (v45 >> 1)];
          }
          if (*v44 < (unint64_t)((v46 - v48) << 55))
          {
            uint64_t v50 = 0;
          }
          else
          {
            uint64_t v47 = *v44 - ((v46 - v48) << 55);
            uint64_t v50 = 1;
          }
          if (*v44 < (unint64_t)((v46 - v48) << 55)) {
            char v51 = *(unsigned char *)(v38 + v15);
          }
          else {
            char v51 = v45 + 1;
          }
          unsigned __int8 v52 = byte_1D0D7FCB3[2 * v45 + 256 + v50];
          int v53 = __clz(v49) - 55;
          uint64_t v54 = v47 << v53;
          v44[1] = v49 << v53;
          *(unsigned char *)(v38 + v15) = v52;
          uint64_t v55 = v44[2] + v53;
          if (v55 >= 0)
          {
            int v56 = (unsigned int *)v44[3];
            unsigned int v58 = *v56;
            unsigned int v57 = v56 + 1;
            v54 += (unint64_t)bswap32(v58) << v55;
            v55 -= 32;
            if ((unint64_t)v57 >= v44[4]) {
              unsigned int v57 = (unsigned int *)v44[4];
            }
            v44[3] = (uint64_t)v57;
          }
          v44[2] = v55;
          *unint64_t v44 = v54;
          uint64_t v41 = ((v51 & 1) << v40) | v41;
        }
        char v42 = 0;
        char v40 = 1;
      }
      while ((v43 & 1) != 0);
    }
    else
    {
      char v59 = 0;
      uint64_t v41 = 0;
      char v60 = 1;
      do
      {
        char v61 = v60;
        if ((a6 >> v59))
        {
          int v62 = *(uint64_t **)(a1 + 40);
          unint64_t v63 = *(unsigned __int8 *)(v38 + v15);
          uint64_t v65 = *v62;
          uint64_t v64 = v62[1];
          uint64_t v66 = byte_1D0D7FCB3[(v64 & 0xC0) + (v63 >> 1)];
          LODWORD(v67) = v64 - v66;
          if (*v62 < (unint64_t)((v64 - v66) << 55)) {
            unint64_t v67 = v67;
          }
          else {
            unint64_t v67 = byte_1D0D7FCB3[(v64 & 0xC0) + (v63 >> 1)];
          }
          if (*v62 < (unint64_t)((v64 - v66) << 55))
          {
            uint64_t v68 = 0;
          }
          else
          {
            uint64_t v65 = *v62 - ((v64 - v66) << 55);
            uint64_t v68 = 1;
          }
          if (*v62 < (unint64_t)((v64 - v66) << 55)) {
            char v69 = *(unsigned char *)(v38 + v15);
          }
          else {
            char v69 = v63 + 1;
          }
          unsigned __int8 v70 = byte_1D0D7FCB3[2 * v63 + 256 + v68];
          int v71 = __clz(v67) - 55;
          uint64_t v72 = v65 << v71;
          v62[1] = v67 << v71;
          *(unsigned char *)(v38 + v15) = v70;
          uint64_t v73 = v62[2] + v71;
          if (v73 >= 0)
          {
            unint64_t v74 = (unsigned int *)v62[3];
            unsigned int v76 = *v74;
            uint64_t v75 = v74 + 1;
            v72 += (unint64_t)bswap32(v76) << v73;
            v73 -= 32;
            if ((unint64_t)v75 >= v62[4]) {
              uint64_t v75 = (unsigned int *)v62[4];
            }
            v62[3] = (uint64_t)v75;
          }
          v62[2] = v73;
          *int v62 = v72;
          uint64_t v77 = *(uint64_t **)(a1 + 40);
          unint64_t v78 = *(unsigned __int8 *)(v38 + v15);
          uint64_t v79 = *v77;
          uint64_t v80 = v77[1];
          uint64_t v81 = byte_1D0D7FCB3[(v80 & 0xC0) + (v78 >> 1)];
          LODWORD(v82) = v80 - v81;
          if (*v77 < (unint64_t)((v80 - v81) << 55)) {
            unint64_t v82 = v82;
          }
          else {
            unint64_t v82 = byte_1D0D7FCB3[(v80 & 0xC0) + (v78 >> 1)];
          }
          if (*v77 < (unint64_t)((v80 - v81) << 55))
          {
            uint64_t v83 = 0;
          }
          else
          {
            uint64_t v79 = *v77 - ((v80 - v81) << 55);
            uint64_t v83 = 1;
          }
          if (*v77 < (unint64_t)((v80 - v81) << 55)) {
            char v84 = *(unsigned char *)(v38 + v15);
          }
          else {
            char v84 = v78 + 1;
          }
          unsigned __int8 v85 = byte_1D0D7FCB3[2 * v78 + 256 + v83];
          int v86 = __clz(v82) - 55;
          uint64_t v87 = v79 << v86;
          v77[1] = v82 << v86;
          *(unsigned char *)(v38 + v15) = v85;
          uint64_t v88 = v77[2] + v86;
          if (v88 >= 0)
          {
            unsigned int v89 = (unsigned int *)v77[3];
            unsigned int v91 = *v89;
            uint64_t v90 = v89 + 1;
            v87 += (unint64_t)bswap32(v91) << v88;
            v88 -= 32;
            if ((unint64_t)v90 >= v77[4]) {
              uint64_t v90 = (unsigned int *)v77[4];
            }
            v77[3] = (uint64_t)v90;
          }
          v77[2] = v88;
          *uint64_t v77 = v87;
          uint64_t v41 = ((v84 & 1) << ((2 * v59) | 1)) | ((v69 & 1) << (2 * v59)) | v41;
        }
        char v60 = 0;
        char v59 = 1;
      }
      while ((v61 & 1) != 0);
    }
  }
  if (v22)
  {
    int v92 = v16 - 1;
    uint64_t v93 = ((1 << v92) + a2);
    uint64_t v94 = ((1 << v92) + a3);
    LODWORD(v253) = v92;
    HIDWORD(v253) = v15 + 1;
    LODWORD(v254) = a5;
    if ((a5 & 0xF0) != 0) {
      int v95 = 15;
    }
    else {
      int v95 = 0;
    }
    int v96 = v95 | a5 & 0x1FF0;
    if ((a5 & 0x1E00) != 0) {
      int v97 = 122880;
    }
    else {
      int v97 = 0;
    }
    sub_1D0CC2020(a1, a2, a3, 0, v96 | v97, v41, &v253);
    sub_1D0CC2020(a1, v93, a3, 1, a5 & 0x1FE00 | (((a5 & 0x1E00) != 0) << 8) | 0xF0, v41, &v253);
    sub_1D0CC2020(a1, a2, v94, 2, a5 | (((a5 & 0xF0) != 0) << 8) | 0x1FE00u, v41, &v253);
    return (void *)sub_1D0CC2020(a1, v93, v94, 3, 8176, v41, &v253);
  }
  uint64_t v99 = (unsigned __int8 *)(a1 + 6416);
  unsigned int v251 = a5;
  uint64_t v100 = *(void *)(a1 + 32);
  uint64_t v101 = *(void *)(v100 + 8);
  uint64_t v248 = *(void *)(v101 + 416);
  uint64_t v246 = *(void *)(v101 + 400) + ((v248 * (int)a3 + (int)a2) << *(unsigned char *)(v101 + 531));
  int v102 = a7[1];
  int v103 = 1;
  uint64_t v104 = *a7;
  int v242 = 1 << v104;
  int v244 = (unsigned __int8 *)(a1 + 6416);
  uint64_t v233 = *(void *)(v100 + 2280);
  if (*(_DWORD *)(a1 + 4) != 1 && !(v102 | v41)) {
    goto LABEL_119;
  }
  BOOL v19 = v102 == 0;
  uint64_t v105 = *(uint64_t **)(a1 + 40);
  if (v19) {
    int8x8_t v106 = (char *)v105 + 1;
  }
  else {
    int8x8_t v106 = *(char **)(a1 + 40);
  }
  unint64_t v107 = v106[74];
  uint64_t v109 = *v105;
  uint64_t v108 = v105[1];
  uint64_t v110 = byte_1D0D7FCB3[(v108 & 0xC0) + (v107 >> 1)];
  LODWORD(v111) = v108 - v110;
  if (*v105 < (unint64_t)((v108 - v110) << 55)) {
    unint64_t v111 = v111;
  }
  else {
    unint64_t v111 = byte_1D0D7FCB3[(v108 & 0xC0) + (v107 >> 1)];
  }
  if (*v105 < (unint64_t)((v108 - v110) << 55))
  {
    uint64_t v112 = 0;
  }
  else
  {
    uint64_t v109 = *v105 - ((v108 - v110) << 55);
    uint64_t v112 = 1;
  }
  if (*v105 < (unint64_t)((v108 - v110) << 55)) {
    char v113 = v106[74];
  }
  else {
    char v113 = v107 + 1;
  }
  unsigned __int8 v114 = byte_1D0D7FCB3[2 * v107 + 256 + v112];
  int v115 = __clz(v111) - 55;
  uint64_t v116 = v109 << v115;
  v105[1] = v111 << v115;
  v106[74] = v114;
  uint64_t v117 = v105[2] + v115;
  if (v117 >= 0)
  {
    unint64_t v118 = (unsigned int *)v105[3];
    unsigned int v120 = *v118;
    uint64_t v119 = v118 + 1;
    v116 += (unint64_t)bswap32(v120) << v117;
    v117 -= 32;
    if ((unint64_t)v119 >= v105[4]) {
      uint64_t v119 = (unsigned int *)v105[4];
    }
    v105[3] = (uint64_t)v119;
  }
  v105[2] = v117;
  *uint64_t v105 = v116;
  int v103 = v113 & 1;
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    int v121 = v10;
    uint64_t v122 = *(void *)(a1 + 32);
    unsigned int v123 = sub_1D0C563C4(v122, a2, a3, v242, v242, &v251, a8);
    unsigned int v124 = *(unsigned __int8 *)(a1 + 6425);
    if (v124 == 35) {
      unsigned int v124 = *(unsigned __int8 *)(a1 + 6416);
    }
    uint64_t v125 = *(unsigned __int8 *)(a1 + 6424);
    if ((int)v104 > 3)
    {
      unsigned int v238 = 0;
      unsigned int v240 = 0;
    }
    else
    {
      unsigned int v238 = byte_1D0DA7278[v125];
      unsigned int v240 = byte_1D0DA7278[byte_1D0D7FC90[v124]];
    }
    BOOL v235 = v104 == 2;
    unsigned int v245 = byte_1D0D7FC90[v124];
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      if (*(unsigned char *)(*(void *)(v122 + 16) + 403)) {
        BOOL v127 = (v125 & 0xFFFFFFEF) == 10;
      }
      else {
        BOOL v127 = 0;
      }
      unsigned int v126 = v127;
    }
    else
    {
      unsigned int v126 = 0;
    }
    int v10 = v121;
    a5 = v251;
    sub_1D0C56A10(v233 + 8, v125, v104, v251, v123, v126, v248, v246);
    uint64_t v128 = *(void **)(*(void *)(a1 + 32) + 8);
    int8x8_t v129 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(void *)&vdup_n_s32((2 << v104) - 64));
    uint64_t v130 = v128[117];
    uint64_t v131 = (uint64_t)(int)a3 >> 2;
    uint64_t v132 = v128[121];
    uint64_t v133 = v128[116];
    uint64_t v134 = (uint64_t)(int)a2 >> 2;
    uint64_t v135 = v128[118];
    if (v242 >= 5)
    {
      uint64_t v136 = v134 + v133 * ((uint64_t)(int)a3 >> 3);
      int8x8_t v137 = vmax_s8(*(int8x8_t *)(v135 + v136), v129);
      *(int8x8_t *)(v132 + v131 + v130 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v132+ v131+ v130 * ((uint64_t)(int)a2 >> 3)), v129);
      *(int8x8_t *)(v135 + v136) = v137;
    }
    uint64_t v99 = (unsigned __int8 *)(a1 + 6416);
    uint64_t v138 = v134 + v133 * ((uint64_t)(v242 + (int)a3) >> 3);
    uint64_t v139 = v131 + v130 * ((uint64_t)(v242 + (int)a2) >> 3);
    int8x8_t v140 = vmax_s8(*(int8x8_t *)(v132 + v139), v129);
    int8x8_t v141 = vmax_s8(*(int8x8_t *)(v135 + v138), v129);
    *(int8x8_t *)(v132 + v139) = v140;
    *(int8x8_t *)(v135 + v138) = v141;
  }
  else
  {
LABEL_119:
    unsigned int v238 = 0;
    unsigned int v240 = 0;
    BOOL v235 = 0;
    unsigned int v245 = 0;
  }
  uint64_t result = sub_1D0C56BA8((void *)a1, a2, a3, v103, v41);
  uint64_t v142 = *(void *)(a1 + 32);
  uint64_t v143 = *(void *)(v142 + 32);
  if (*(unsigned char *)(v143 + 11)) {
    BOOL v144 = (**(_WORD **)(a1 + 48) & 0x100) == 0;
  }
  else {
    BOOL v144 = 0;
  }
  int v145 = *(unsigned __int8 *)(v143 + 1615) + 2;
  if (v103)
  {
    int v230 = v10;
    v99[10] = 0;
    int v228 = v145;
    BOOL v146 = v144;
    if ((int)v104 <= v145 && v144)
    {
      int8x8_t v148 = *(uint64_t **)(a1 + 40);
      unint64_t v149 = *((unsigned __int8 *)v148 + 81);
      uint64_t v151 = *v148;
      uint64_t v150 = v148[1];
      uint64_t v152 = byte_1D0D7FCB3[(v150 & 0xC0) + (v149 >> 1)];
      LODWORD(v153) = v150 - v152;
      if (*v148 < (unint64_t)((v150 - v152) << 55)) {
        unint64_t v153 = v153;
      }
      else {
        unint64_t v153 = byte_1D0D7FCB3[(v150 & 0xC0) + (v149 >> 1)];
      }
      if (*v148 < (unint64_t)((v150 - v152) << 55))
      {
        uint64_t v154 = 0;
      }
      else
      {
        uint64_t v151 = *v148 - ((v150 - v152) << 55);
        uint64_t v154 = 1;
      }
      if (*v148 < (unint64_t)((v150 - v152) << 55)) {
        char v155 = *((unsigned char *)v148 + 81);
      }
      else {
        char v155 = v149 + 1;
      }
      unsigned __int8 v156 = byte_1D0D7FCB3[2 * v149 + 256 + v154];
      int v157 = __clz(v153) - 55;
      uint64_t v158 = v151 << v157;
      v148[1] = v153 << v157;
      *((unsigned char *)v148 + 81) = v156;
      uint64_t v159 = v148[2] + v157;
      if (v159 >= 0)
      {
        uint64_t v160 = (unsigned int *)v148[3];
        unsigned int v162 = *v160;
        uint64_t v161 = v160 + 1;
        v158 += (unint64_t)bswap32(v162) << v159;
        v159 -= 32;
        if ((unint64_t)v161 >= v148[4]) {
          uint64_t v161 = (unsigned int *)v148[4];
        }
        v148[3] = (uint64_t)v161;
      }
      v148[2] = v159;
      *int8x8_t v148 = v158;
      v99[10] = v155 & 1;
    }
    v99[11] = sub_1D0C56874(a1, 0, v99[8]);
    uint64_t v163 = a1 + 16 * ((int)v104 > 2);
    unsigned int v164 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(v163 + 6368);
    uint64_t v165 = *(void *)(v163 + 6376);
    unint64_t v166 = (void *)(a1 + (v165 >> 1));
    if (v165) {
      unsigned int v164 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(*v166 + v164);
    }
    uint64_t v167 = v164(v166, a1 + 64, v104, v238, 0);
    uint64_t v168 = v233 + 552;
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      uint64_t v169 = (int)v104 - 2;
    }
    else
    {
      uint64_t v169 = (int)v104 - 2;
      if (!*(unsigned char *)(a1 + 6426))
      {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v168
                                                                                                 + 16 * v169
                                                                                                 + 8 * v235))(v246, v248, a1 + 64, 0, v167);
LABEL_161:
        uint64_t v142 = *(void *)(a1 + 32);
        uint64_t v99 = (unsigned __int8 *)(a1 + 6416);
        if (*(_DWORD *)(a1 + 4) != 1)
        {
          uint64_t v170 = *(void **)(v142 + 8);
          int8x8_t v171 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(void *)&vdup_n_s32((2 << v104) - 64));
          uint64_t v172 = v170[117];
          uint64_t v173 = (uint64_t)(int)a3 >> 2;
          uint64_t v174 = v170[121];
          uint64_t v175 = v170[116];
          uint64_t v176 = (uint64_t)(int)a2 >> 2;
          uint64_t v177 = v170[118];
          if (v242 >= 5)
          {
            uint64_t v178 = v176 + v175 * ((uint64_t)(int)a3 >> 3);
            int8x8_t v179 = vmax_s8(*(int8x8_t *)(v177 + v178), v171);
            *(int8x8_t *)(v174 + v173 + v172 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v174+ v173+ v172 * ((uint64_t)(int)a2 >> 3)), v171);
            *(int8x8_t *)(v177 + v178) = v179;
          }
          uint64_t v180 = v176 + v175 * ((uint64_t)(v242 + (int)a3) >> 3);
          uint64_t v181 = v173 + v172 * ((uint64_t)(v242 + (int)a2) >> 3);
          int8x8_t v182 = vmax_s8(*(int8x8_t *)(v174 + v181), v171);
          int8x8_t v183 = vmax_s8(*(int8x8_t *)(v177 + v180), v171);
          *(int8x8_t *)(v174 + v181) = v182;
          *(int8x8_t *)(v177 + v180) = v183;
          uint64_t v142 = *(void *)(a1 + 32);
        }
        BOOL v144 = v146;
        int v10 = v230;
        int v145 = v228;
        goto LABEL_166;
      }
    }
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v168 + 8 * v169 + 248))(v246, v248, a1 + 64, 0);
    goto LABEL_161;
  }
LABEL_166:
  uint64_t v249 = *(void *)(*(void *)(v142 + 8) + 424);
  uint64_t v184 = v104;
  if ((int)v104 < 3)
  {
    if (v10 != 3) {
      return result;
    }
    unsigned int v231 = a7[2];
    unsigned int v251 = v231;
    int v185 = 1 << v104;
    int v236 = a2 - v242;
    int v229 = a3 - v242;
  }
  else
  {
    unsigned int v231 = a5;
    int v236 = a2;
    int v229 = a3;
    uint64_t v184 = (v104 - 1);
    int v185 = v242 >> 1;
  }
  uint64_t v186 = 0;
  uint64_t v253 = 0;
  uint64_t v254 = 0;
  uint64_t v187 = a1 + 64;
  BOOL v188 = (int)v184 <= v145 && v144;
  BOOL v239 = v188;
  uint64_t v247 = a1;
  uint64_t v189 = a1 + 16 * ((int)v184 > 2);
  uint64_t v190 = (uint64_t (**)(void *, uint64_t, uint64_t, void, void))(v189 + 6368);
  unsigned int v191 = (uint64_t *)(v189 + 6376);
  int v243 = v185;
  uint64_t v227 = (v185 * v185);
  uint64_t v192 = v187;
  do
  {
    if (v41)
    {
      v99[10] = 0;
      if (v239)
      {
        unsigned int v193 = *(uint64_t **)(v247 + 40);
        unint64_t v194 = *((unsigned __int8 *)v193 + 82);
        uint64_t v196 = *v193;
        uint64_t v195 = v193[1];
        uint64_t v197 = byte_1D0D7FCB3[(v195 & 0xC0) + (v194 >> 1)];
        LODWORD(v198) = v195 - v197;
        if (*v193 < (unint64_t)((v195 - v197) << 55)) {
          unint64_t v198 = v198;
        }
        else {
          unint64_t v198 = byte_1D0D7FCB3[(v195 & 0xC0) + (v194 >> 1)];
        }
        if (*v193 < (unint64_t)((v195 - v197) << 55))
        {
          uint64_t v199 = 0;
        }
        else
        {
          uint64_t v196 = *v193 - ((v195 - v197) << 55);
          uint64_t v199 = 1;
        }
        if (*v193 < (unint64_t)((v195 - v197) << 55)) {
          char v200 = *((unsigned char *)v193 + 82);
        }
        else {
          char v200 = v194 + 1;
        }
        unsigned __int8 v201 = byte_1D0D7FCB3[2 * v194 + 256 + v199];
        int v202 = __clz(v198) - 55;
        uint64_t v203 = v196 << v202;
        v193[1] = v198 << v202;
        *((unsigned char *)v193 + 82) = v201;
        uint64_t v204 = v193[2] + v202;
        if (v204 >= 0)
        {
          uint64_t v205 = (unsigned int *)v193[3];
          unsigned int v207 = *v205;
          unsigned int v206 = v205 + 1;
          v203 += (unint64_t)bswap32(v207) << v204;
          v204 -= 32;
          if ((unint64_t)v206 >= v193[4]) {
            unsigned int v206 = (unsigned int *)v193[4];
          }
          v193[3] = (uint64_t)v206;
        }
        v193[2] = v204;
        *unsigned int v193 = v203;
        v99[10] = v200 & 1;
      }
      v99[11] = sub_1D0C56874(v247, 1u, v245);
      unsigned int v208 = *v190;
      unsigned int v209 = (void *)(v247 + (*v191 >> 1));
      if (*v191) {
        unsigned int v208 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(*v209 + v208);
      }
      int v210 = v208(v209, v192, v184, v240, (v186 >> 1) + 1);
      uint64_t v99 = v244;
      if (v244[10]) {
        int v211 = -1;
      }
      else {
        int v211 = v210;
      }
      *((_DWORD *)&v253 + v186) = v211;
    }
    ++v186;
    LODWORD(v41) = v41 >> 1;
    v192 += 2 * v227;
  }
  while (v186 != 4);
  uint64_t v212 = v184;
  uint64_t v213 = 0;
  int8x8_t v214 = vand_s8((int8x8_t)vdup_n_s32(v231), (int8x8_t)0xFFFE00FFFFFFFFF0);
  uint64_t v215 = (int)(v236 & 0xFFFFFFFE);
  uint64_t v237 = v233 + 8;
  int8x8_t v216 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((v231 & 0xF0) == 0), 0x1FuLL)), (int8x8_t)0x1E0000000000, (int8x8_t)0x1F000000000FLL);
  uint64_t v241 = v212;
  uint64_t v217 = v233 + 8 * (int)v212;
  uint64_t v232 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, _WORD *))(v217 + 664);
  unsigned int v234 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v217 + 816);
  int32x2_t v218 = (int32x2_t)vorr_s8(v216, v214);
  int32x2_t v252 = v218;
  char v219 = 1;
  uint64_t v220 = v247;
  do
  {
    char v221 = v219;
    uint64_t v222 = *(void *)(v220 + 32);
    uint64_t v223 = v229 + v213 * v243;
    uint64_t v224 = *(void *)(*(void *)(v222 + 8) + 408)
         + ((v215 + *(void *)(*(void *)(v222 + 8) + 424) * v223) << *(unsigned char *)(*(void *)(v222 + 8) + 531));
    if (*(_DWORD *)(v220 + 4) == 1)
    {
      unsigned int v225 = sub_1D0C563C4(v222, v215, v223, 2 * v243, v243, (unsigned int *)&v252 + v213, v218);
      uint64_t v220 = v247;
      sub_1D0C581BC(v237, v245, v241, v252.u32[v213], v225, v249, v224);
    }
    v250[0] = *((_DWORD *)&v253 + v213);
    v250[1] = *(_DWORD *)((char *)&v253 + ((4 * v213) | 8));
    uint64_t v226 = v187 + 4 * v227;
    if (*(unsigned char *)(*(void *)(v220 + 48) + 1)) {
      uint64_t result = (void *)(*v234)(v224, v249, v187, v226, 0);
    }
    else {
      uint64_t result = (void *)(*v232)(v224, v249, v187, v226, 0, v250);
    }
    char v219 = 0;
    v187 += 2 * v227;
    uint64_t v213 = 1;
  }
  while ((v221 & 1) != 0);
  return result;
}

int8x8_t sub_1D0CC2DC8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, int *a7, int32x2_t a8)
{
  int v13 = *(void **)(a1 + 32);
  int v14 = a7[1];
  uint64_t v15 = *a7;
  if (v14 == 1)
  {
    BOOL v17 = 0;
    *(_WORD *)(a1 + 6424) = *(_WORD *)(a1 + 2 * a4 + 6416);
  }
  else if (v14)
  {
    BOOL v17 = 0;
  }
  else
  {
    int v16 = *(_DWORD *)(a1 + 8);
    BOOL v17 = v16 != 0;
    if (*(_DWORD *)(a1 + 4) == 3)
    {
      if (*(unsigned char *)(v13[2] + 272)) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = v16 == 0;
      }
      BOOL v17 = !v18;
    }
  }
  uint64_t v19 = v13[2];
  if ((int)v15 > *(unsigned __int8 *)(v19 + 2114))
  {
    if ((int)v15 > *(unsigned __int8 *)(v19 + 2115)) {
      BOOL v17 = 1;
    }
    if (v17) {
      goto LABEL_54;
    }
    if (v14 >= *(_DWORD *)(a1 + 12)) {
      goto LABEL_32;
    }
    uint64_t v20 = *(uint64_t **)(a1 + 40);
    unint64_t v21 = ((unsigned __int8 *)v20 - v15)[76];
    uint64_t v23 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v24 = byte_1D0D7FCB3[(v22 & 0xC0) + (v21 >> 1)];
    LODWORD(v25) = v22 - v24;
    if (*v20 < (unint64_t)((v22 - v24) << 55)) {
      unint64_t v25 = v25;
    }
    else {
      unint64_t v25 = byte_1D0D7FCB3[(v22 & 0xC0) + (v21 >> 1)];
    }
    if (*v20 < (unint64_t)((v22 - v24) << 55))
    {
      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v23 = *v20 - ((v22 - v24) << 55);
      uint64_t v26 = 1;
    }
    if (*v20 < (unint64_t)((v22 - v24) << 55)) {
      char v27 = ((unsigned char *)v20 - v15)[76];
    }
    else {
      char v27 = v21 + 1;
    }
    unsigned __int8 v28 = byte_1D0D7FCB3[2 * v21 + 256 + v26];
    int v29 = __clz(v25) - 55;
    uint64_t v30 = v23 << v29;
    v20[1] = v25 << v29;
    ((unsigned char *)v20 - v15)[76] = v28;
    uint64_t v31 = v20[2] + v29;
    if (v31 >= 0)
    {
      int v32 = (unsigned int *)v20[3];
      unsigned int v34 = *v32;
      uint64_t v33 = v32 + 1;
      v30 += (unint64_t)bswap32(v34) << v31;
      v31 -= 32;
      if ((unint64_t)v33 >= v20[4]) {
        uint64_t v33 = (unsigned int *)v20[4];
      }
      v20[3] = (uint64_t)v33;
    }
    v20[2] = v31;
    *uint64_t v20 = v30;
    if (v27)
    {
LABEL_54:
      unsigned int v62 = v15 - 1;
      uint64_t v63 = ((1 << v62) + a2);
      uint64_t v64 = ((1 << v62) + a3);
      v129[0] = v62;
      v129[1] = v14 + 1;
      v129[2] = a5;
      int v65 = (a5 & 0xF0) != 0;
      if ((a5 & 0xF0) != 0) {
        int v66 = 15;
      }
      else {
        int v66 = 0;
      }
      int v67 = v66 | a5 & 0x1FF0;
      int v68 = (a5 & 0x1E00) != 0;
      if ((a5 & 0x1E00) != 0) {
        int v69 = 122880;
      }
      else {
        int v69 = 0;
      }
      sub_1D0CC2DC8(a1, a2, a3, 0, v67 | v69, a6, v129);
      sub_1D0CC2DC8(a1, v63, a3, 1, a5 & 0x1FE00 | (v68 << 8) | 0xF0, a6, v129);
      sub_1D0CC2DC8(a1, a2, v64, 2, a5 | (v65 << 8) | 0x1FE00u, a6, v129);
      sub_1D0CC2DC8(a1, v63, v64, 3, 8176, a6, v129);
      return result;
    }
    int v13 = *(void **)(a1 + 32);
  }
LABEL_32:
  unint64_t v35 = (unsigned __int8 *)(a1 + 6424);
  v129[0] = a5;
  uint64_t v36 = v13[1];
  uint64_t v37 = *(void *)(v36 + 416);
  uint64_t v127 = *(void *)(v36 + 400) + ((v37 * (int)a3 + (int)a2) << *(unsigned char *)(v36 + 531));
  int v38 = a7[1];
  uint64_t v39 = *a7;
  int v40 = 1;
  int v41 = 1 << v39;
  uint64_t v128 = v13[285];
  if (*(_DWORD *)(a1 + 4) != 1 && !(v38 | a6)) {
    goto LABEL_53;
  }
  BOOL v18 = v38 == 0;
  char v42 = *(uint64_t **)(a1 + 40);
  if (v18) {
    char v43 = (char *)v42 + 1;
  }
  else {
    char v43 = *(char **)(a1 + 40);
  }
  unint64_t v44 = v43[74];
  uint64_t v46 = *v42;
  uint64_t v45 = v42[1];
  uint64_t v47 = byte_1D0D7FCB3[(v45 & 0xC0) + (v44 >> 1)];
  LODWORD(v48) = v45 - v47;
  if (*v42 < (unint64_t)((v45 - v47) << 55)) {
    unint64_t v48 = v48;
  }
  else {
    unint64_t v48 = byte_1D0D7FCB3[(v45 & 0xC0) + (v44 >> 1)];
  }
  if (*v42 < (unint64_t)((v45 - v47) << 55))
  {
    uint64_t v49 = 0;
  }
  else
  {
    uint64_t v46 = *v42 - ((v45 - v47) << 55);
    uint64_t v49 = 1;
  }
  if (*v42 < (unint64_t)((v45 - v47) << 55)) {
    char v50 = v43[74];
  }
  else {
    char v50 = v44 + 1;
  }
  unsigned __int8 v51 = byte_1D0D7FCB3[2 * v44 + 256 + v49];
  int v52 = __clz(v48) - 55;
  uint64_t v53 = v46 << v52;
  v42[1] = v48 << v52;
  v43[74] = v51;
  uint64_t v54 = v42[2] + v52;
  if (v54 >= 0)
  {
    uint64_t v55 = (unsigned int *)v42[3];
    unsigned int v57 = *v55;
    int v56 = v55 + 1;
    v53 += (unint64_t)bswap32(v57) << v54;
    v54 -= 32;
    if ((unint64_t)v56 >= v42[4]) {
      int v56 = (unsigned int *)v42[4];
    }
    v42[3] = (uint64_t)v56;
  }
  v42[2] = v54;
  *char v42 = v53;
  int v40 = v50 & 1;
  if (*(_DWORD *)(a1 + 4) == 1)
  {
    uint64_t v58 = *(void *)(a1 + 32);
    unsigned int v59 = sub_1D0C563C4(v58, a2, a3, 1 << v39, 1 << v39, v129, a8);
    uint64_t v60 = *v35;
    if ((int)v39 > 3) {
      unsigned int v126 = 0;
    }
    else {
      unsigned int v126 = byte_1D0DA7278[v60];
    }
    if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
    {
      if (*(unsigned char *)(*(void *)(v58 + 16) + 403)) {
        BOOL v72 = (v60 & 0xFFFFFFEF) == 10;
      }
      else {
        BOOL v72 = 0;
      }
      unsigned int v71 = v72;
    }
    else
    {
      unsigned int v71 = 0;
    }
    sub_1D0C56A10(v128 + 8, v60, v39, v129[0], v59, v71, v37, v127);
    uint64_t v73 = *(void **)(*(void *)(a1 + 32) + 8);
    int8x8_t v74 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(void *)&vdup_n_s32((2 << v39) - 64));
    uint64_t v75 = v73[117];
    uint64_t v76 = (uint64_t)(int)a3 >> 2;
    uint64_t v77 = v73[121];
    uint64_t v78 = v73[116];
    uint64_t v79 = (uint64_t)(int)a2 >> 2;
    uint64_t v80 = v73[118];
    if (v41 >= 5)
    {
      uint64_t v81 = v79 + v78 * ((uint64_t)(int)a3 >> 3);
      int8x8_t v82 = vmax_s8(*(int8x8_t *)(v80 + v81), v74);
      *(int8x8_t *)(v77 + v76 + v75 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v77+ v76+ v75 * ((uint64_t)(int)a2 >> 3)), v74);
      *(int8x8_t *)(v80 + v81) = v82;
    }
    BOOL v61 = v39 == 2;
    uint64_t v83 = v79 + v78 * ((uint64_t)(v41 + (int)a3) >> 3);
    uint64_t v84 = v76 + v75 * ((uint64_t)(v41 + (int)a2) >> 3);
    int8x8_t v85 = vmax_s8(*(int8x8_t *)(v77 + v84), v74);
    int8x8_t v86 = vmax_s8(*(int8x8_t *)(v80 + v83), v74);
    *(int8x8_t *)(v77 + v84) = v85;
    *(int8x8_t *)(v80 + v83) = v86;
  }
  else
  {
LABEL_53:
    unsigned int v126 = 0;
    BOOL v61 = 0;
  }
  sub_1D0C56BA8((void *)a1, a2, a3, v40, a6);
  uint64_t v87 = *(void *)(*(void *)(a1 + 32) + 32);
  if (*(unsigned char *)(v87 + 11))
  {
    int v88 = HIBYTE(**(unsigned __int16 **)(a1 + 48)) & 1;
    if (!v40) {
      return result;
    }
  }
  else
  {
    LOBYTE(v88) = 1;
    if (!v40) {
      return result;
    }
  }
  int v89 = *(unsigned __int8 *)(v87 + 1615) + 2;
  *(unsigned char *)(a1 + 6426) = 0;
  if ((int)v39 > v89) {
    char v90 = 1;
  }
  else {
    char v90 = v88;
  }
  if ((v90 & 1) == 0)
  {
    unsigned int v91 = *(uint64_t **)(a1 + 40);
    unint64_t v92 = *((unsigned __int8 *)v91 + 81);
    uint64_t v94 = *v91;
    uint64_t v93 = v91[1];
    uint64_t v95 = byte_1D0D7FCB3[(v93 & 0xC0) + (v92 >> 1)];
    LODWORD(v96) = v93 - v95;
    if (*v91 < (unint64_t)((v93 - v95) << 55)) {
      unint64_t v96 = v96;
    }
    else {
      unint64_t v96 = byte_1D0D7FCB3[(v93 & 0xC0) + (v92 >> 1)];
    }
    if (*v91 < (unint64_t)((v93 - v95) << 55))
    {
      uint64_t v97 = 0;
    }
    else
    {
      uint64_t v94 = *v91 - ((v93 - v95) << 55);
      uint64_t v97 = 1;
    }
    if (*v91 < (unint64_t)((v93 - v95) << 55)) {
      char v98 = *((unsigned char *)v91 + 81);
    }
    else {
      char v98 = v92 + 1;
    }
    unsigned __int8 v99 = byte_1D0D7FCB3[2 * v92 + 256 + v97];
    int v100 = __clz(v96) - 55;
    uint64_t v101 = v94 << v100;
    v91[1] = v96 << v100;
    *((unsigned char *)v91 + 81) = v99;
    uint64_t v102 = v91[2] + v100;
    if (v102 >= 0)
    {
      int v103 = (unsigned int *)v91[3];
      unsigned int v105 = *v103;
      uint64_t v104 = v103 + 1;
      v101 += (unint64_t)bswap32(v105) << v102;
      v102 -= 32;
      if ((unint64_t)v104 >= v91[4]) {
        uint64_t v104 = (unsigned int *)v91[4];
      }
      v91[3] = (uint64_t)v104;
    }
    v91[2] = v102;
    *unsigned int v91 = v101;
    *(unsigned char *)(a1 + 6426) = v98 & 1;
  }
  *(unsigned char *)(a1 + 6427) = sub_1D0C56874(a1, 0, *v35);
  uint64_t v106 = a1 + 16 * ((int)v39 > 2);
  unint64_t v107 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(v106 + 6368);
  uint64_t v108 = *(void *)(v106 + 6376);
  uint64_t v109 = (void *)(a1 + (v108 >> 1));
  if (v108) {
    unint64_t v107 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, void))(*v109 + v107);
  }
  uint64_t v110 = v107(v109, a1 + 64, v39, v126, 0);
  uint64_t v111 = v128 + 552;
  if ((**(_WORD **)(a1 + 48) & 0x100) != 0)
  {
    uint64_t v112 = v39 - 2;
  }
  else
  {
    uint64_t v112 = v39 - 2;
    if (!*(unsigned char *)(a1 + 6426))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v111 + 16 * v112 + 8 * v61))(v127, v37, a1 + 64, 0, v110);
      goto LABEL_102;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v111 + 8 * v112 + 248))(v127, v37, a1 + 64, 0);
LABEL_102:
  if (*(_DWORD *)(a1 + 4) != 1)
  {
    char v113 = *(void **)(*(void *)(a1 + 32) + 8);
    int8x8_t v114 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(void *)&vdup_n_s32((2 << v39) - 64));
    uint64_t v115 = v113[117];
    uint64_t v116 = (uint64_t)(int)a3 >> 2;
    uint64_t v117 = v113[121];
    uint64_t v118 = v113[116];
    uint64_t v119 = (uint64_t)(int)a2 >> 2;
    uint64_t v120 = v113[118];
    if (v41 >= 5)
    {
      uint64_t v121 = v119 + v118 * ((uint64_t)(int)a3 >> 3);
      int8x8_t v122 = vmax_s8(*(int8x8_t *)(v120 + v121), v114);
      *(int8x8_t *)(v117 + v116 + v115 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v117+ v116+ v115 * ((uint64_t)(int)a2 >> 3)), v114);
      *(int8x8_t *)(v120 + v121) = v122;
    }
    uint64_t v123 = v119 + v118 * ((uint64_t)(v41 + (int)a3) >> 3);
    uint64_t v124 = v116 + v115 * ((uint64_t)(v41 + (int)a2) >> 3);
    int8x8_t v125 = vmax_s8(*(int8x8_t *)(v117 + v124), v114);
    int8x8_t result = vmax_s8(*(int8x8_t *)(v120 + v123), v114);
    *(int8x8_t *)(v117 + v124) = v125;
    *(int8x8_t *)(v120 + v123) = result;
  }
  return result;
}

void sub_1D0CC34E0(void *a1)
{
  *a1 = &unk_1F26F14E0;
  int v2 = (void *)a1[294];
  if (v2)
  {
    a1[295] = v2;
    operator delete(v2);
  }
  sub_1D0C93C24(a1);
  JUMPOUT(0x1D25F0230);
}

void *sub_1D0CC3554(void *a1)
{
  *a1 = &unk_1F26F14E0;
  int v2 = (void *)a1[294];
  if (v2)
  {
    a1[295] = v2;
    operator delete(v2);
  }
  return sub_1D0C93C24(a1);
}

uint64_t sub_1D0CC35B4(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 2280);
  return *(void *)(*(void *)(v3 + 2064) + 8 * (int)sub_1D0D59AF8(v3, a2, a3));
}

uint64_t sub_1D0CC35E4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(char *)(a1 + a2 + 516);
  if ((int)v2 < 1) {
    return 0;
  }
  unsigned int v5 = 0;
  int v6 = 0;
  uint64_t v7 = a1 + 1608;
  uint64_t v41 = a2;
  do
    v5 |= sub_1D0C51880(v7, 1) << v6++;
  while (v2 != v6);
  int v40 = a2;
  if (*(unsigned char *)(*(void *)(a1 + 16) + 201))
  {
    int v8 = 0;
    unsigned int v9 = 0;
    do
      v9 |= sub_1D0C51880(v7, 1) << v8++;
    while (v2 != v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    int v11 = 1 << *(unsigned char *)(a1 + 556);
    uint64_t v12 = a1 + (v41 << 8) + 16 * v10;
    int v13 = (_WORD *)(v12 + 672);
    if (v5)
    {
      int v14 = sub_1D0C4C8F0(v7);
      unsigned int v15 = (-((v14 + 1) & 1) ^ ((v14 + 1) >> 1)) + ((v14 + 1) & 1);
      int v16 = sub_1D0C4C8F0(v7);
      __int16 v17 = v15;
      if (v15 != (char)v15)
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "delta_luma_weight_l%d[%d] %d not in [-128, 127]!\n", v40, v10, v15);
          syslog(27, "delta_luma_weight_l%d[%d] %d not in [-128, 127]!\n");
        }
        return 4294954387;
      }
      signed int v18 = (-((v16 + 1) & 1) ^ ((v16 + 1) >> 1)) + ((v16 + 1) & 1);
      uint64_t v19 = *(void *)(a1 + 16);
      uint64_t v20 = *(__int16 *)(v19 + 2102);
      if (v20 <= v18 || v18 < -v20)
      {
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "luma_offset_l%d[%d] %d not in range! (%d)\n", v40, v10, v18, v20);
          syslog(27, "luma_offset_l%d[%d] %d not in range! (%d)\n");
        }
        return 4294954387;
      }
      LOWORD(v11) = v17 + v11;
      signed int v21 = v18 << *(unsigned char *)(v19 + 2100);
      *(_WORD *)(v12 + 678) = v21;
      *(_WORD *)(v12 + 676) = v21;
    }
    else
    {
      *(_DWORD *)(v12 + 676) = 0;
    }
    uint64_t v22 = (_WORD *)(v12 + 680);
    v13[1] = v11;
    *int v13 = v11;
    int v23 = 1 << *(unsigned char *)(a1 + 662);
    v22[1] = v23;
    _WORD *v22 = v23;
    if (v9) {
      break;
    }
    *(_DWORD *)(a1 + (v41 << 8) + 16 * v10 + 684) = 0;
LABEL_31:
    ++v10;
    v5 >>= 1;
    v9 >>= 1;
    if (v10 == v2) {
      return 0;
    }
  }
  uint64_t v24 = 0;
  char v25 = 1;
  while (1)
  {
    char v26 = v25;
    int v27 = sub_1D0C4C8F0(v7);
    unsigned int v28 = (-((v27 + 1) & 1) ^ ((v27 + 1) >> 1)) + ((v27 + 1) & 1);
    int v29 = sub_1D0C4C8F0(v7);
    if (v28 != (char)v28) {
      break;
    }
    uint64_t v30 = v10;
    signed int v31 = (-((v29 + 1) & 1) ^ ((v29 + 1) >> 1)) + ((v29 + 1) & 1);
    uint64_t v32 = *(void *)(a1 + 16);
    if (v31 >= 4 * *(__int16 *)(v32 + 2104) || -4 * *(__int16 *)(v32 + 2104) > v31)
    {
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "delta_chroma_offset_l%d %d not in range!\n", v40, v31);
        syslog(27, "delta_chroma_offset_l%d %d not in range!\n");
      }
      return 4294954387;
    }
    char v25 = 0;
    __int16 v34 = v22[v24] + v28;
    v22[v24] = v34;
    int v35 = *(__int16 *)(v32 + 2104);
    int v36 = v31 + v35 - ((v35 * v34) >> *(unsigned char *)(a1 + 662));
    int v37 = v35 - 1;
    if (v36 < v35 - 1) {
      int v37 = v36;
    }
    if (v36 <= -v35) {
      int v38 = -v35;
    }
    else {
      int v38 = v37;
    }
    uint64_t v10 = v30;
    *(_WORD *)(a1 + (v41 << 8) + 16 * v30 + 2 * v24 + 684) = v38 << *(unsigned char *)(v32 + 2101);
    uint64_t v24 = 1;
    if ((v26 & 1) == 0) {
      goto LABEL_31;
    }
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "delta_chroma_weight_l%d %d not in [-128, 127]!\n", v40, v28);
    syslog(27, "delta_chroma_weight_l%d %d not in [-128, 127]!\n");
  }
  return 4294954387;
}

void sub_1D0CC39B0(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1] - *a1;
  BOOL v3 = a2 >= v2;
  size_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1D0C4CCE0(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

uint64_t sub_1D0CC39D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19 = MEMORY[0x1F4188790](a1);
  uint64_t v25 = v24;
  uint64_t v26 = v23;
  int v27 = v22;
  int v28 = v21;
  int v29 = (unsigned int *)v20;
  uint64_t v30 = v19;
  STACK[0x40B8] = *MEMORY[0x1E4F143B8];
  unsigned int v31 = *((unsigned __int8 *)v20 + 8);
  if (v31 > 0xEF || (unsigned int v32 = *((unsigned __int8 *)v20 + 9), v32 > 0xEF))
  {
    BOOL v38 = v31 > 0xEF;
    uint64_t v39 = v31 > 0xEF;
    uint64_t v40 = *(void *)(v19 + 8);
    uint64_t v41 = *(void *)(v40 + 416);
    char v42 = *(unsigned char *)(v40 + 531);
    uint64_t v55 = *(void *)(v40 + 400) + ((v41 * v22 + v21) << v42);
    uint64_t v56 = *(void *)(v40 + 408) + ((*(void *)(v40 + 424) * v22 + 2 * v21) << v42);
    uint64_t v57 = *(void *)(v40 + 424);
    if (v38) {
      char v43 = (int *)((char *)v20 + 1);
    }
    else {
      char v43 = v20;
    }
    uint64_t v44 = v19 + (v39 << 8) + ((_BYTE)v43[2] & 0xF0);
    uint64_t v45 = *(void *)(v44 + 1672);
    a15 = 0;
    a17 = 0;
    sub_1D0CC3D94(v45, v20[v39], v21, v22, v23, v24, &a15, &a17, &a14);
    uint64_t v46 = *(void *)(v30 + 2280);
    unsigned int v47 = v29[v39];
    uint64_t v48 = *(unsigned int *)(v30 + 664);
    (*(void (**)(uint64_t, uint64_t))(v46
                                             + ((8 * ((v47 & 3) != 0)) | (16 * ((*(void *)&v47 & 0x30000) != 0)))
                                             + 1016))(v26, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(v46 + 1080))(v26, v25, v48, v44 + 672, (int)v26, &a18, v41, v55);
    uint64_t v49 = *(void *)(v30 + 2280);
    uint64_t v50 = *(unsigned int *)(v30 + 668);
    uint64_t v51 = (2 * v26);
    (*(void (**)(uint64_t, uint64_t))(v49
                                             + ((8 * ((a14 & 7) != 0)) | (16 * ((a14 & 0x70000) != 0)))
                                             + 1048))(v51, v25);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(v49 + 1088))(v51, v25, v50, v44 + 680, (int)v51, &a18, v57, v56);
  }
  else
  {
    uint64_t vars0 = *(void *)(*(void *)(v19 + 8) + 400)
          + ((*(void *)(*(void *)(v19 + 8) + 416) * v22 + v21) << *(unsigned char *)(*(void *)(v19 + 8) + 531));
    uint64_t v33 = v31 & 0xF0;
    uint64_t v34 = *(void *)(v19 + 1672 + v33);
    uint64_t v35 = v32 & 0xF0;
    uint64_t v36 = *(void *)(v19 + 1672 + v35 + 256);
    uint64_t vars8 = v19 + 672 + v33;
    uint64_t v54 = v19 + 672 + v35;
    a18 = 0;
    a19 = 0;
    a15 = 0;
    a16 = 0;
    sub_1D0CC3D94(v34, *v20, v21, v22, v23, v24, &a18, &a15, &a17);
    sub_1D0CC3D94(v36, v29[1], v28, v27, v26, v25, &a19, &a16, (_WORD *)&a17 + 2);
    sub_1D0CA6450(*(void *)(v30 + 2280) + 952, v26, v25, *(unsigned int *)(v30 + 664), vars8, *v29, *(void *)(v34 + 416), a18, v54 + 256, v29[1], *(void *)(v36 + 416), a19);
    return sub_1D0CA65C8(*(void *)(v30 + 2280) + 952, v26, v25, *(unsigned int *)(v30 + 668), vars8 + 8, a17, *(void *)(v34 + 424), a15, v54 + 264, HIDWORD(a17), *(void *)(v36 + 424), a16);
  }
}

uint64_t sub_1D0CC3D94(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, void *a7, void *a8, _WORD *a9)
{
  int v12 = -3 - a5;
  int v13 = *(_DWORD *)(a1 + 520) + 2;
  int v14 = a3 + ((__int16)a2 >> 2);
  if (v14 < v13) {
    int v13 = a3 + ((__int16)a2 >> 2);
  }
  if (v14 <= v12) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v13;
  }
  int v16 = -3 - a6;
  int v17 = *(_DWORD *)(a1 + 524) + 2;
  int v18 = a4 + (a2 >> 18);
  if (v18 < v17) {
    int v17 = a4 + (a2 >> 18);
  }
  if (v18 <= v16) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = v17;
  }
  *a7 = *(void *)(a1 + 400) + ((*(void *)(a1 + 416) * (int)v19 + (int)v15) << *(unsigned char *)(a1 + 531));
  *a9 = 2 * a2;
  a9[1] = (a2 >> 15) & 0xFFFE;
  int v20 = *(_DWORD *)(a1 + 520);
  if (v14 < v20) {
    int v20 = a3 + ((__int16)a2 >> 2);
  }
  if (v14 <= ~a5) {
    uint64_t v21 = ~a5;
  }
  else {
    uint64_t v21 = v20;
  }
  int v22 = *(_DWORD *)(a1 + 524);
  if (v18 < v22) {
    int v22 = a4 + (a2 >> 18);
  }
  if (v18 <= ~a6) {
    uint64_t v23 = ~a6;
  }
  else {
    uint64_t v23 = v22;
  }
  *a8 = *(void *)(a1 + 408) + ((*(void *)(a1 + 424) * (int)v23 + 2 * (int)v21) << *(unsigned char *)(a1 + 531));
  signed int v24 = a6 + v19 + 4;
  uint64_t v25 = (atomic_uint *)(a1 + 1032);
  if ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < v24)
  {
    v27.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    v27.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    if ((int)atomic_load_explicit(v25, memory_order_acquire) < v24)
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &v27);
      while ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < v24);
    }
    if (v27.__owns_) {
      std::mutex::unlock(v27.__m_);
    }
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1F26F1BE8[2 * *(unsigned __int8 *)(a1 + 532)]
                                                                                                 + *(unsigned __int8 *)(a1 + 531)))(v15, v19, v21, v23, a5, a6, a1);
}

uint64_t sub_1D0CC3F60(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = *((unsigned __int8 *)a2 + 8);
  if (v11 > 0xEF || (unsigned int v12 = *((unsigned __int8 *)a2 + 9), v12 > 0xEF))
  {
    uint64_t v19 = v11 > 0xEF;
    if (v11 <= 0xEF) {
      int v20 = a2;
    }
    else {
      int v20 = (int *)((char *)a2 + 1);
    }
    uint64_t v21 = *(void *)(a1 + (v19 << 8) + ((_BYTE)v20[2] & 0xF0) + 1672);
    uint64_t v31 = 0;
    uint64_t v29 = 0;
    sub_1D0CC3D94(v21, a2[v19], a3, a4, a5, a6, &v31, &v29, &v27);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 2280)
                                             + ((8 * ((a2[v19] & 3) != 0)) | (16
                                                                                              * ((a2[v19] & 0x30000) != 0)))
                                             + 952))(a5, a6);
    return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 2280)
                                                      + ((8 * ((v27 & 7) != 0)) | (16 * ((v27 & 0x70000) != 0)))
                                                      + 984))((2 * a5), a6);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v24 = *(void *)(v13 + 416);
    char v14 = *(unsigned char *)(v13 + 531);
    uint64_t v23 = *(void *)(v13 + 400) + ((v24 * a4 + a3) << v14);
    uint64_t v25 = *(void *)(v13 + 408) + ((*(void *)(v13 + 424) * a4 + 2 * a3) << v14);
    uint64_t v26 = *(void *)(v13 + 424);
    uint64_t v15 = *(void *)(a1 + 1672 + (v11 & 0xF0));
    uint64_t v16 = *(void *)(a1 + 1672 + (v12 & 0xF0) + 256);
    uint64_t v31 = 0;
    v32[0] = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    sub_1D0CC3D94(v15, *a2, a3, a4, a5, a6, &v31, &v29, &v27);
    sub_1D0CC3D94(v16, a2[1], a3, a4, a5, a6, v32, &v30, &v28);
    sub_1D0CA6198(*(void *)(a1 + 2280) + 952, a5, a6, *a2, *(void *)(v15 + 416), v31, a2[1], *(void *)(v16 + 416), v32[0], v24, v23);
    return sub_1D0CA62F0(*(void *)(a1 + 2280) + 952, a5, a6, v27, *(void *)(v15 + 424), v29, v28, *(void *)(v16 + 424), v30, v26, v25);
  }
}

uint64_t sub_1D0CC4254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19 = MEMORY[0x1F4188790](a1);
  uint64_t v25 = v24;
  uint64_t v26 = v23;
  int v27 = v22;
  int v28 = v21;
  uint64_t v29 = (unsigned int *)v20;
  uint64_t v30 = v19;
  STACK[0x40B8] = *MEMORY[0x1E4F143B8];
  unsigned int v31 = *((unsigned __int8 *)v20 + 8);
  if (v31 > 0xEF || (unsigned int v32 = *((unsigned __int8 *)v20 + 9), v32 > 0xEF))
  {
    BOOL v38 = v31 > 0xEF;
    uint64_t v39 = v31 > 0xEF;
    uint64_t v40 = *(void *)(v19 + 8);
    uint64_t v41 = *(void *)(v40 + 416);
    char v42 = *(unsigned char *)(v40 + 531);
    uint64_t v55 = *(void *)(v40 + 400) + ((v41 * v22 + v21) << v42);
    uint64_t v56 = *(void *)(v40 + 408) + ((*(void *)(v40 + 424) * v22 + (int)(v21 & 0xFFFFFFFE)) << v42);
    uint64_t v57 = *(void *)(v40 + 424);
    if (v38) {
      char v43 = (int *)((char *)v20 + 1);
    }
    else {
      char v43 = v20;
    }
    uint64_t v44 = v19 + (v39 << 8) + ((_BYTE)v43[2] & 0xF0);
    uint64_t v45 = *(void *)(v44 + 1672);
    a15 = 0;
    a17 = 0;
    sub_1D0CC4610(v45, v20[v39], v21, v22, v23, v24, &a15, &a17, &a14);
    uint64_t v46 = *(void *)(v30 + 2280);
    unsigned int v47 = v29[v39];
    uint64_t v48 = *(unsigned int *)(v30 + 664);
    (*(void (**)(uint64_t, uint64_t))(v46
                                             + ((8 * ((v47 & 3) != 0)) | (16 * ((*(void *)&v47 & 0x30000) != 0)))
                                             + 1016))(v26, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(v46 + 1080))(v26, v25, v48, v44 + 672, (int)v26, &a18, v41, v55);
    uint64_t v49 = *(void *)(v30 + 2280);
    uint64_t v50 = *(unsigned int *)(v30 + 668);
    uint64_t v51 = v26 & 0xFFFFFFFE;
    (*(void (**)(uint64_t, uint64_t))(v49
                                             + ((8 * ((a14 & 7) != 0)) | (16 * ((a14 & 0x70000) != 0)))
                                             + 1048))(v51, v25);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(v49 + 1088))(v51, v25, v50, v44 + 680, (int)v51, &a18, v57, v56);
  }
  else
  {
    uint64_t vars0 = *(void *)(*(void *)(v19 + 8) + 400)
          + ((*(void *)(*(void *)(v19 + 8) + 416) * v22 + v21) << *(unsigned char *)(*(void *)(v19 + 8) + 531));
    uint64_t v33 = v31 & 0xF0;
    uint64_t v34 = *(void *)(v19 + 1672 + v33);
    uint64_t v35 = v32 & 0xF0;
    uint64_t v36 = *(void *)(v19 + 1672 + v35 + 256);
    uint64_t vars8 = v19 + 672 + v33;
    uint64_t v54 = v19 + 672 + v35;
    a18 = 0;
    a19 = 0;
    a15 = 0;
    a16 = 0;
    sub_1D0CC4610(v34, *v20, v21, v22, v23, v24, &a18, &a15, &a17);
    sub_1D0CC4610(v36, v29[1], v28, v27, v26, v25, &a19, &a16, (_WORD *)&a17 + 2);
    sub_1D0CA6450(*(void *)(v30 + 2280) + 952, v26, v25, *(unsigned int *)(v30 + 664), vars8, *v29, *(void *)(v34 + 416), a18, v54 + 256, v29[1], *(void *)(v36 + 416), a19);
    return sub_1D0CA65C8(*(void *)(v30 + 2280) + 952, ((int)v26 >> 1), v25, *(unsigned int *)(v30 + 668), vars8 + 8, a17, *(void *)(v34 + 424), a15, v54 + 264, HIDWORD(a17), *(void *)(v36 + 424), a16);
  }
}

uint64_t sub_1D0CC4610(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, void *a7, void *a8, _WORD *a9)
{
  int v12 = -3 - a5;
  int v13 = *(_DWORD *)(a1 + 520) + 2;
  int v14 = a3 + ((__int16)a2 >> 2);
  if (v14 < v13) {
    int v13 = a3 + ((__int16)a2 >> 2);
  }
  if (v14 <= v12) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v13;
  }
  int v16 = -3 - a6;
  int v17 = *(_DWORD *)(a1 + 524) + 2;
  int v18 = a4 + (a2 >> 18);
  if (v18 < v17) {
    int v17 = a4 + (a2 >> 18);
  }
  if (v18 <= v16) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = v17;
  }
  *a7 = *(void *)(a1 + 400) + ((*(void *)(a1 + 416) * (int)v19 + (int)v15) << *(unsigned char *)(a1 + 531));
  *a9 = a2;
  a9[1] = (a2 >> 15) & 0xFFFE;
  int v20 = ((__int16)a2 >> 3) + (a3 >> 1);
  if (v20 >= *(int *)(a1 + 520) >> 1) {
    unsigned int v21 = *(int *)(a1 + 520) >> 1;
  }
  else {
    unsigned int v21 = ((__int16)a2 >> 3) + (a3 >> 1);
  }
  if (v20 <= ~((int)a5 >> 1)) {
    uint64_t v22 = ~((int)a5 >> 1);
  }
  else {
    uint64_t v22 = v21;
  }
  int v23 = *(_DWORD *)(a1 + 524);
  if (v18 < v23) {
    int v23 = a4 + (a2 >> 18);
  }
  if (v18 <= ~a6) {
    uint64_t v24 = ~a6;
  }
  else {
    uint64_t v24 = v23;
  }
  *a8 = *(void *)(a1 + 408) + ((*(void *)(a1 + 424) * (int)v24 + 2 * (int)v22) << *(unsigned char *)(a1 + 531));
  signed int v25 = a6 + v19 + 4;
  uint64_t v26 = (atomic_uint *)(a1 + 1032);
  if ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < v25)
  {
    v28.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    v28.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    if ((int)atomic_load_explicit(v26, memory_order_acquire) < v25)
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &v28);
      while ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < v25);
    }
    if (v28.__owns_) {
      std::mutex::unlock(v28.__m_);
    }
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1F26F1BE8[2 * *(unsigned __int8 *)(a1 + 532)]
                                                                                                 + *(unsigned __int8 *)(a1 + 531)))(v15, v19, v22, v24, a5, a6, a1);
}

uint64_t sub_1D0CC47EC(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = *((unsigned __int8 *)a2 + 8);
  if (v11 > 0xEF || (unsigned int v12 = *((unsigned __int8 *)a2 + 9), v12 > 0xEF))
  {
    uint64_t v19 = v11 > 0xEF;
    if (v11 <= 0xEF) {
      int v20 = a2;
    }
    else {
      int v20 = (int *)((char *)a2 + 1);
    }
    uint64_t v21 = *(void *)(a1 + (v19 << 8) + ((_BYTE)v20[2] & 0xF0) + 1672);
    uint64_t v31 = 0;
    uint64_t v29 = 0;
    sub_1D0CC4610(v21, a2[v19], a3, a4, a5, a6, &v31, &v29, &v27);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 2280)
                                             + ((8 * ((a2[v19] & 3) != 0)) | (16
                                                                                              * ((a2[v19] & 0x30000) != 0)))
                                             + 952))(a5, a6);
    return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 2280)
                                                      + ((8 * ((v27 & 7) != 0)) | (16 * ((v27 & 0x70000) != 0)))
                                                      + 984))(a5 & 0xFFFFFFFE, a6);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v24 = *(void *)(v13 + 416);
    char v14 = *(unsigned char *)(v13 + 531);
    uint64_t v23 = *(void *)(v13 + 400) + ((v24 * a4 + a3) << v14);
    uint64_t v25 = *(void *)(v13 + 408) + ((*(void *)(v13 + 424) * a4 + (int)(a3 & 0xFFFFFFFE)) << v14);
    uint64_t v26 = *(void *)(v13 + 424);
    uint64_t v15 = *(void *)(a1 + 1672 + (v11 & 0xF0));
    uint64_t v16 = *(void *)(a1 + 1672 + (v12 & 0xF0) + 256);
    uint64_t v31 = 0;
    v32[0] = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    sub_1D0CC4610(v15, *a2, a3, a4, a5, a6, &v31, &v29, &v27);
    sub_1D0CC4610(v16, a2[1], a3, a4, a5, a6, v32, &v30, &v28);
    sub_1D0CA6198(*(void *)(a1 + 2280) + 952, a5, a6, *a2, *(void *)(v15 + 416), v31, a2[1], *(void *)(v16 + 416), v32[0], v24, v23);
    return sub_1D0CA62F0(*(void *)(a1 + 2280) + 952, ((int)a5 >> 1), a6, v27, *(void *)(v15 + 424), v29, v28, *(void *)(v16 + 424), v30, v26, v25);
  }
}

uint64_t sub_1D0CC4AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19 = MEMORY[0x1F4188790](a1);
  uint64_t v25 = v24;
  uint64_t v26 = v23;
  int v27 = v22;
  int v28 = v21;
  uint64_t v29 = (unsigned int *)v20;
  uint64_t v30 = v19;
  STACK[0x40B8] = *MEMORY[0x1E4F143B8];
  unsigned int v31 = *((unsigned __int8 *)v20 + 8);
  if (v31 > 0xEF || (unsigned int v32 = *((unsigned __int8 *)v20 + 9), v32 > 0xEF))
  {
    BOOL v38 = v31 > 0xEF;
    uint64_t v39 = v31 > 0xEF;
    uint64_t v40 = *(void *)(v19 + 8);
    uint64_t v41 = *(void *)(v40 + 416);
    char v42 = *(unsigned char *)(v40 + 531);
    uint64_t v56 = *(void *)(v40 + 400) + ((v41 * v22 + v21) << v42);
    uint64_t v57 = *(void *)(v40 + 408) + ((*(void *)(v40 + 424) * ((uint64_t)v22 >> 1) + (int)(v21 & 0xFFFFFFFE)) << v42);
    uint64_t v58 = *(void *)(v40 + 424);
    if (v38) {
      char v43 = (int *)((char *)v20 + 1);
    }
    else {
      char v43 = v20;
    }
    uint64_t v44 = v19 + (v39 << 8) + ((_BYTE)v43[2] & 0xF0);
    uint64_t v45 = *(void *)(v44 + 1672);
    a15 = 0;
    a17 = 0;
    sub_1D0CC4EA8(v45, v20[v39], v21, v22, v23, v24, &a15, &a17, &a14);
    uint64_t v46 = *(void *)(v30 + 2280);
    unsigned int v47 = v29[v39];
    uint64_t v48 = *(unsigned int *)(v30 + 664);
    (*(void (**)(uint64_t, uint64_t))(v46
                                             + ((8 * ((v47 & 3) != 0)) | (16 * ((*(void *)&v47 & 0x30000) != 0)))
                                             + 1016))(v26, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(v46 + 1080))(v26, v25, v48, v44 + 672, (int)v26, &a18, v41, v56);
    uint64_t v49 = *(void *)(v30 + 2280);
    uint64_t v50 = ((int)v25 >> 1);
    uint64_t v51 = *(unsigned int *)(v30 + 668);
    uint64_t v52 = v26 & 0xFFFFFFFE;
    (*(void (**)(uint64_t, uint64_t))(v49
                                             + ((8 * ((a14 & 7) != 0)) | (16 * ((a14 & 0x70000) != 0)))
                                             + 1048))(v52, v50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(v49 + 1088))(v52, v50, v51, v44 + 680, (int)v52, &a18, v58, v57);
  }
  else
  {
    uint64_t vars0 = *(void *)(*(void *)(v19 + 8) + 400)
          + ((*(void *)(*(void *)(v19 + 8) + 416) * v22 + v21) << *(unsigned char *)(*(void *)(v19 + 8) + 531));
    uint64_t v33 = v31 & 0xF0;
    uint64_t v34 = *(void *)(v19 + 1672 + v33);
    uint64_t v35 = v32 & 0xF0;
    uint64_t v36 = *(void *)(v19 + 1672 + v35 + 256);
    uint64_t vars8 = v19 + 672 + v33;
    uint64_t v55 = v19 + 672 + v35;
    a18 = 0;
    a19 = 0;
    a15 = 0;
    a16 = 0;
    sub_1D0CC4EA8(v34, *v20, v21, v22, v23, v24, &a18, &a15, (int *)&a17);
    sub_1D0CC4EA8(v36, v29[1], v28, v27, v26, v25, &a19, &a16, (int *)&a17 + 1);
    sub_1D0CA6450(*(void *)(v30 + 2280) + 952, v26, v25, *(unsigned int *)(v30 + 664), vars8, *v29, *(void *)(v34 + 416), a18, v55 + 256, v29[1], *(void *)(v36 + 416), a19);
    return sub_1D0CA65C8(*(void *)(v30 + 2280) + 952, ((int)v26 >> 1), ((int)v25 >> 1), *(unsigned int *)(v30 + 668), vars8 + 8, a17, *(void *)(v34 + 424), a15, v55 + 264, HIDWORD(a17), *(void *)(v36 + 424), a16);
  }
}

uint64_t sub_1D0CC4EA8(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, void *a7, void *a8, int *a9)
{
  int v12 = -3 - a5;
  int v13 = *(_DWORD *)(a1 + 520) + 2;
  int v14 = a3 + ((__int16)a2 >> 2);
  if (v14 < v13) {
    int v13 = a3 + ((__int16)a2 >> 2);
  }
  if (v14 <= v12) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v13;
  }
  int v16 = -3 - a6;
  int v17 = *(_DWORD *)(a1 + 524) + 2;
  int v18 = a4 + (a2 >> 18);
  if (v18 < v17) {
    int v17 = a4 + (a2 >> 18);
  }
  if (v18 <= v16) {
    uint64_t v19 = v16;
  }
  else {
    uint64_t v19 = v17;
  }
  *a7 = *(void *)(a1 + 400) + ((*(void *)(a1 + 416) * (int)v19 + (int)v15) << *(unsigned char *)(a1 + 531));
  *a9 = a2;
  int v20 = ((__int16)a2 >> 3) + (a3 >> 1);
  if (v20 >= *(int *)(a1 + 520) >> 1) {
    unsigned int v21 = *(int *)(a1 + 520) >> 1;
  }
  else {
    unsigned int v21 = ((__int16)a2 >> 3) + (a3 >> 1);
  }
  if (v20 <= ~((int)a5 >> 1)) {
    uint64_t v22 = ~((int)a5 >> 1);
  }
  else {
    uint64_t v22 = v21;
  }
  int v23 = (a4 >> 1) + (a2 >> 19);
  if (v23 >= *(int *)(a1 + 524) >> 1) {
    unsigned int v24 = *(int *)(a1 + 524) >> 1;
  }
  else {
    unsigned int v24 = (a4 >> 1) + (a2 >> 19);
  }
  if (v23 <= ~((int)a6 >> 1)) {
    uint64_t v25 = ~((int)a6 >> 1);
  }
  else {
    uint64_t v25 = v24;
  }
  *a8 = *(void *)(a1 + 408) + ((*(void *)(a1 + 424) * (int)v25 + 2 * (int)v22) << *(unsigned char *)(a1 + 531));
  signed int v26 = a6 + v19 + 4;
  int v27 = (atomic_uint *)(a1 + 1032);
  if ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < v26)
  {
    v29.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    v29.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    if ((int)atomic_load_explicit(v27, memory_order_acquire) < v26)
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &v29);
      while ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < v26);
    }
    if (v29.__owns_) {
      std::mutex::unlock(v29.__m_);
    }
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1F26F1BE8[2 * *(unsigned __int8 *)(a1 + 532)]
                                                                                                 + *(unsigned __int8 *)(a1 + 531)))(v15, v19, v22, v25, a5, a6, a1);
}

uint64_t sub_1D0CC5090(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = *((unsigned __int8 *)a2 + 8);
  if (v11 > 0xEF || (unsigned int v12 = *((unsigned __int8 *)a2 + 9), v12 > 0xEF))
  {
    uint64_t v19 = v11 > 0xEF;
    if (v11 <= 0xEF) {
      int v20 = a2;
    }
    else {
      int v20 = (int *)((char *)a2 + 1);
    }
    uint64_t v21 = *(void *)(a1 + (v19 << 8) + ((_BYTE)v20[2] & 0xF0) + 1672);
    uint64_t v31 = 0;
    uint64_t v29 = 0;
    sub_1D0CC4EA8(v21, a2[v19], a3, a4, a5, a6, &v31, &v29, (int *)&v27);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 2280)
                                             + ((8 * ((a2[v19] & 3) != 0)) | (16
                                                                                              * ((a2[v19] & 0x30000) != 0)))
                                             + 952))(a5, a6);
    return (*(uint64_t (**)(void, void))(*(void *)(a1 + 2280)
                                                     + ((8 * ((v27 & 7) != 0)) | (16 * ((v27 & 0x70000) != 0)))
                                                     + 984))(a5 & 0xFFFFFFFE, ((int)a6 >> 1));
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v24 = *(void *)(v13 + 416);
    char v14 = *(unsigned char *)(v13 + 531);
    uint64_t v23 = *(void *)(v13 + 400) + ((v24 * a4 + a3) << v14);
    uint64_t v25 = *(void *)(v13 + 408) + ((*(void *)(v13 + 424) * ((uint64_t)a4 >> 1) + (int)(a3 & 0xFFFFFFFE)) << v14);
    uint64_t v26 = *(void *)(v13 + 424);
    uint64_t v15 = *(void *)(a1 + 1672 + (v11 & 0xF0));
    uint64_t v16 = *(void *)(a1 + 1672 + (v12 & 0xF0) + 256);
    uint64_t v31 = 0;
    v32[0] = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    sub_1D0CC4EA8(v15, *a2, a3, a4, a5, a6, &v31, &v29, (int *)&v27);
    sub_1D0CC4EA8(v16, a2[1], a3, a4, a5, a6, v32, &v30, (int *)&v28);
    sub_1D0CA6198(*(void *)(a1 + 2280) + 952, a5, a6, *a2, *(void *)(v15 + 416), v31, a2[1], *(void *)(v16 + 416), v32[0], v24, v23);
    return sub_1D0CA62F0(*(void *)(a1 + 2280) + 952, ((int)a5 >> 1), ((int)a6 >> 1), v27, *(void *)(v15 + 424), v29, v28, *(void *)(v16 + 424), v30, v26, v25);
  }
}

uint64_t sub_1D0CC538C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = v15;
  uint64_t v17 = v14;
  int v18 = v13;
  int v19 = v12;
  int v20 = (unsigned int *)v11;
  uint64_t v21 = v10;
  STACK[0x2078] = *MEMORY[0x1E4F143B8];
  unsigned int v22 = *((unsigned __int8 *)v11 + 8);
  if (v22 > 0xEF || (unsigned int v23 = *((unsigned __int8 *)v11 + 9), v23 > 0xEF))
  {
    BOOL v29 = v22 > 0xEF;
    uint64_t v30 = v22 > 0xEF;
    uint64_t v31 = *(void *)(v10 + 8);
    uint64_t v32 = *(void *)(v31 + 416);
    uint64_t v41 = *(void *)(v31 + 400) + ((v32 * v13 + v12) << *(unsigned char *)(v31 + 531));
    if (v29) {
      uint64_t v33 = (int *)((char *)v11 + 1);
    }
    else {
      uint64_t v33 = v11;
    }
    uint64_t v34 = v10 + (v30 << 8) + ((_BYTE)v33[2] & 0xF0);
    uint64_t v35 = *(void *)(v34 + 1672);
    uint64_t v36 = v34 + 672;
    uint64_t vars8 = 0;
    sub_1D0CC5628(v35, v11[v30], v12, v13, v14, v15, &vars8, (int *)&vars0 + 1);
    uint64_t v37 = *(void *)(v21 + 2280);
    uint64_t v38 = *(unsigned int *)(v21 + 664);
    (*(void (**)(uint64_t, uint64_t))(v37
                                             + ((8 * ((v20[v30] & 3) != 0)) | (16
                                                                                               * ((v20[v30] & 0x30000) != 0)))
                                             + 1016))(v17, v16);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(v37 + 1080))(v17, v16, v38, v36, (int)v17, &a9, v32, v41);
  }
  else
  {
    uint64_t v24 = v22 & 0xF0;
    uint64_t v25 = *(void *)(v10 + 1672 + v24);
    uint64_t v26 = v23 & 0xF0;
    uint64_t v27 = *(void *)(v10 + 1672 + v26 + 256);
    uint64_t v40 = v10 + 672 + v24;
    uint64_t v39 = v10 + 672 + v26 + 256;
    a9 = 0;
    a10 = 0;
    sub_1D0CC5628(v25, *v11, v12, v13, v14, v15, &a9, (int *)&vars8);
    sub_1D0CC5628(v27, v20[1], v19, v18, v17, v16, &a10, (int *)&vars8 + 1);
    return sub_1D0CA6450(*(void *)(v21 + 2280) + 952, v17, v16, *(unsigned int *)(v21 + 664), v40, *v20, *(void *)(v25 + 416), a9, v39, v20[1], *(void *)(v27 + 416), a10);
  }
}

uint64_t sub_1D0CC5628(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, void *a7, int *a8)
{
  int v13 = -3 - a5;
  int v14 = *(_DWORD *)(a1 + 520) + 2;
  int v15 = a2 << 16;
  int v16 = a3 + ((__int16)a2 >> 2);
  if (v16 < v14) {
    int v14 = a3 + ((__int16)a2 >> 2);
  }
  if (v16 <= v13) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = v14;
  }
  int v18 = -3 - a6;
  int v19 = *(_DWORD *)(a1 + 524) + 2;
  int v20 = a4 + (a2 >> 18);
  if (v20 < v19) {
    int v19 = a4 + (a2 >> 18);
  }
  if (v20 <= v18) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = v19;
  }
  *a7 = *(void *)(a1 + 400) + ((*(void *)(a1 + 416) * (int)v21 + (int)v17) << *(unsigned char *)(a1 + 531));
  *a8 = a2;
  int v22 = *(_DWORD *)(a1 + 520);
  int v23 = *(_DWORD *)(a1 + 524);
  signed int v24 = a6 + v21 + 4;
  if ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < v24)
  {
    int v32 = a2 << 16;
    int v33 = a3;
    unsigned int v34 = v17;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 1040);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 1040));
    while ((int)atomic_load_explicit((atomic_uint *volatile)(a1 + 1032), memory_order_acquire) < v24)
      std::condition_variable::wait((std::condition_variable *)(a1 + 1104), &__lk);
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    a3 = v33;
    uint64_t v17 = v34;
    int v15 = v32;
  }
  int v25 = (a4 >> 1) + (a2 >> 19);
  unsigned int v26 = v23 >> 1;
  if (v25 < v23 >> 1) {
    unsigned int v26 = (a4 >> 1) + (a2 >> 19);
  }
  if (v25 <= ~((int)a6 >> 1)) {
    uint64_t v27 = ~((int)a6 >> 1);
  }
  else {
    uint64_t v27 = v26;
  }
  int v28 = (v15 >> 19) + (a3 >> 1);
  unsigned int v29 = v22 >> 1;
  if (v28 < v22 >> 1) {
    unsigned int v29 = (v15 >> 19) + (a3 >> 1);
  }
  if (v28 <= ~((int)a5 >> 1)) {
    uint64_t v30 = ~((int)a5 >> 1);
  }
  else {
    uint64_t v30 = v29;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&off_1F26F1BE8[2 * *(unsigned __int8 *)(a1 + 532)]
                                                                                                 + *(unsigned __int8 *)(a1 + 531)))(v17, v21, v30, v27, a5, a6, a1);
}

uint64_t sub_1D0CC57F0(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  unsigned int v12 = *((unsigned __int8 *)a2 + 8);
  if (v12 > 0xEF || (unsigned int v13 = *((unsigned __int8 *)a2 + 9), v13 > 0xEF))
  {
    uint64_t v19 = v12 > 0xEF;
    if (v12 <= 0xEF) {
      int v20 = a2;
    }
    else {
      int v20 = (int *)((char *)a2 + 1);
    }
    uint64_t v21 = *(void *)(a1 + (v19 << 8) + ((_BYTE)v20[2] & 0xF0) + 1672);
    uint64_t v25 = 0;
    sub_1D0CC5628(v21, a2[v19], a3, a4, a5, a6, &v25, &v23);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 2280)
                                                       + ((8 * ((a2[v19] & 3) != 0)) | (16 * ((a2[v19] & 0x30000) != 0)))
                                                       + 952))(a5, a6);
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(v14 + 416);
    uint64_t v22 = *(void *)(v14 + 400) + ((v15 * a4 + a3) << *(unsigned char *)(v14 + 531));
    uint64_t v16 = *(void *)(a1 + 1672 + (v12 & 0xF0));
    uint64_t v17 = *(void *)(a1 + 1672 + (v13 & 0xF0) + 256);
    uint64_t v25 = 0;
    v26[0] = 0;
    sub_1D0CC5628(v16, *a2, a3, a4, a5, a6, &v25, &v23);
    sub_1D0CC5628(v17, a2[1], a3, a4, a5, a6, v26, &v24);
    return sub_1D0CA6198(*(void *)(a1 + 2280) + 952, a5, a6, *a2, *(void *)(v16 + 416), v25, a2[1], *(void *)(v17 + 416), v26[0], v15, v22);
  }
}

uint64_t sub_1D0CC5A30(uint64_t a1, uint64_t a2, long long *a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, int a9, int a10, char a11)
{
  unsigned int v11 = a3;
  int v201 = a10;
  v213[2] = *MEMORY[0x1E4F143B8];
  if (a11) {
    char v14 = 2;
  }
  else {
    char v14 = 3;
  }
  *((unsigned char *)a3 + 10) = v14;
  if (a11) {
    goto LABEL_49;
  }
  unint64_t v15 = *(unsigned __int8 *)(a2 + 58);
  unint64_t v17 = *(void *)a2;
  uint64_t v16 = *(void *)(a2 + 8);
  uint64_t v18 = byte_1D0D7FCB3[(v16 & 0xC0) + (v15 >> 1)];
  LODWORD(v19) = v16 - v18;
  if (*(void *)a2 < (unint64_t)((v16 - v18) << 55)) {
    unint64_t v19 = v19;
  }
  else {
    unint64_t v19 = byte_1D0D7FCB3[(v16 & 0xC0) + (v15 >> 1)];
  }
  if (*(void *)a2 < (unint64_t)((v16 - v18) << 55))
  {
    uint64_t v20 = 0;
  }
  else
  {
    unint64_t v17 = *(void *)a2 - ((v16 - v18) << 55);
    uint64_t v20 = 1;
  }
  if (*(void *)a2 < (unint64_t)((v16 - v18) << 55)) {
    char v21 = *(unsigned char *)(a2 + 58);
  }
  else {
    char v21 = v15 + 1;
  }
  unsigned __int8 v22 = byte_1D0D7FCB3[2 * v15 + 256 + v20];
  int v23 = __clz(v19) - 55;
  unint64_t v24 = v17 << v23;
  *(void *)(a2 + 8) = v19 << v23;
  *(unsigned char *)(a2 + 58) = v22;
  uint64_t v25 = *(void *)(a2 + 16) + v23;
  if (v25 >= 0)
  {
    unsigned int v26 = *(unsigned int **)(a2 + 24);
    unsigned int v28 = *v26;
    uint64_t v27 = v26 + 1;
    v24 += (unint64_t)bswap32(v28) << v25;
    v25 -= 32;
    if ((unint64_t)v27 >= *(void *)(a2 + 32)) {
      uint64_t v27 = *(unsigned int **)(a2 + 32);
    }
    *(void *)(a2 + 24) = v27;
  }
  *(void *)(a2 + 16) = v25;
  *(void *)a2 = v24;
  if (v21)
  {
LABEL_49:
    unsigned int v58 = *(unsigned __int8 *)(a1 + 652);
    unsigned int v59 = v58 - 2;
    if (v58 < 2)
    {
      int v75 = 0;
    }
    else
    {
      unint64_t v60 = *(void *)a2;
      BOOL v61 = *(unsigned int **)(a2 + 24);
      unsigned int v62 = *(unsigned int **)(a2 + 32);
      uint64_t v63 = *(void *)(a2 + 16);
      unint64_t v64 = *(unsigned __int8 *)(a2 + 59);
      unint64_t v65 = *(void *)(a2 + 8) - byte_1D0D7FCB3[(*(void *)(a2 + 8) & 0xC0) + (v64 >> 1)];
      BOOL v66 = *(void *)a2 >= v65 << 55;
      unint64_t v67 = *(void *)a2 - (v65 << 55);
      if (*(void *)a2 < v65 << 55) {
        unint64_t v65 = v65;
      }
      else {
        unint64_t v65 = byte_1D0D7FCB3[(*(void *)(a2 + 8) & 0xC0) + (v64 >> 1)];
      }
      if (v66)
      {
        unint64_t v60 = v67;
        uint64_t v68 = 1;
      }
      else
      {
        uint64_t v68 = 0;
      }
      if (v66) {
        char v69 = v64 + 1;
      }
      else {
        char v69 = *(unsigned char *)(a2 + 59);
      }
      unsigned __int8 v70 = byte_1D0D7FCB3[2 * v64 + 256 + v68];
      int v71 = __clz(v65);
      int v72 = v71 - 55;
      unint64_t v73 = v65 << (v71 - 55);
      unint64_t v74 = v60 << (v71 - 55);
      *(unsigned char *)(a2 + 59) = v70;
      if (v69)
      {
        if (v58 < 3)
        {
          int v75 = 1;
        }
        else
        {
          int v76 = 0;
          int v75 = v58 - 1;
          unint64_t v77 = v73 << 54;
          int v78 = v58 + v71 - 57;
          while (1)
          {
            int v79 = v76 + 1;
            if (v74 < v77) {
              break;
            }
            unint64_t v74 = 2 * (v74 - v77);
            ++v76;
            if (v59 == v79)
            {
              int v72 = v78;
              goto LABEL_69;
            }
          }
          v74 *= 2;
          v72 += v76 + 1;
          int v75 = v76 + 1;
        }
      }
      else
      {
        int v75 = 0;
      }
LABEL_69:
      uint64_t v80 = v63 + v72;
      if (v80 >= 0)
      {
        unsigned int v81 = *v61++;
        v74 += (unint64_t)bswap32(v81) << v80;
        v80 -= 32;
        if (v61 >= v62) {
          BOOL v61 = v62;
        }
      }
      *(void *)a2 = v74;
      *(void *)(a2 + 8) = v73;
      *(void *)(a2 + 16) = v80;
      *(void *)(a2 + 24) = v61;
    }
    if (*(_WORD *)(*(void *)(a1 + 32) + 1610) && *(unsigned __int8 *)(*(void *)(a1 + 16) + 2113) - a10 == 3) {
      sub_1D0C96330(a1, a4 & 0xFFFFFFF8, a5 & 0xFFFFFFF8, 8, 8, a9, (uint64_t)v211, v75 + 1);
    }
    else {
      sub_1D0C96330(a1, a4, a5, a6, a7, a8, (uint64_t)v211, v75 + 1);
    }
    int8x8_t v82 = &v211[3 * v75];
    char v83 = *(unsigned char *)v82;
    *((unsigned char *)v11 + 8) = 16 * *(unsigned char *)v82;
    char v84 = *((unsigned char *)v82 + 1);
    *((unsigned char *)v11 + 9) = 16 * v84;
    unsigned __int8 v85 = *(unsigned char *)(a1 + 520 + (v83 & 0xF)) + 16 * v83;
    *((unsigned char *)v11 + 8) = v85;
    *((unsigned char *)v11 + 9) = *(unsigned char *)(a1 + 520 + (v84 & 0xF) + 16) + 16 * v84;
    *(void *)unsigned int v11 = *(void *)(v82 + 1);
    uint64_t v86 = 1;
  }
  else
  {
    *((_WORD *)a3 + 4) = -1;
    *(void *)a3 = 0;
    uint64_t v29 = 1;
    if (!*(unsigned char *)(a1 + 58))
    {
      unint64_t v30 = *(void *)a2;
      if (a7 + a6 == 12) {
        goto LABEL_35;
      }
      uint64_t v31 = a2 + a10;
      unint64_t v32 = *(unsigned __int8 *)(v31 + 60);
      uint64_t v33 = *(void *)(a2 + 8);
      uint64_t v34 = byte_1D0D7FCB3[(v33 & 0xC0) + (v32 >> 1)];
      LODWORD(v35) = v33 - v34;
      BOOL v36 = v30 >= (v33 - v34) << 55;
      if (v30 < (v33 - v34) << 55) {
        unint64_t v35 = v35;
      }
      else {
        unint64_t v35 = byte_1D0D7FCB3[(v33 & 0xC0) + (v32 >> 1)];
      }
      if (v30 < (v33 - v34) << 55)
      {
        uint64_t v37 = 0;
      }
      else
      {
        v30 -= (v33 - v34) << 55;
        uint64_t v37 = 1;
      }
      if (v36) {
        char v38 = v32 + 1;
      }
      else {
        char v38 = *(unsigned char *)(v31 + 60);
      }
      unsigned __int8 v39 = byte_1D0D7FCB3[2 * v32 + 256 + v37];
      int v40 = __clz(v35) - 55;
      v30 <<= v40;
      *(void *)(a2 + 8) = v35 << v40;
      *(unsigned char *)(v31 + 60) = v39;
      uint64_t v41 = *(void *)(a2 + 16) + v40;
      if (v41 >= 0)
      {
        char v42 = *(unsigned int **)(a2 + 24);
        unsigned int v44 = *v42;
        char v43 = v42 + 1;
        v30 += (unint64_t)bswap32(v44) << v41;
        v41 -= 32;
        if ((unint64_t)v43 >= *(void *)(a2 + 32)) {
          char v43 = *(unsigned int **)(a2 + 32);
        }
        *(void *)(a2 + 24) = v43;
      }
      *(void *)(a2 + 16) = v41;
      *(void *)a2 = v30;
      if (v38)
      {
        uint64_t v29 = 3;
      }
      else
      {
LABEL_35:
        unint64_t v45 = *(unsigned __int8 *)(a2 + 64);
        unint64_t v46 = *(void *)(a2 + 8) - byte_1D0D7FCB3[(*(void *)(a2 + 8) & 0xC0) + (v45 >> 1)];
        BOOL v47 = v30 >= v46 << 55;
        unint64_t v48 = v30 - (v46 << 55);
        if (v30 < v46 << 55) {
          unint64_t v46 = v46;
        }
        else {
          unint64_t v46 = byte_1D0D7FCB3[(*(void *)(a2 + 8) & 0xC0) + (v45 >> 1)];
        }
        if (v47)
        {
          unint64_t v30 = v48;
          uint64_t v49 = 1;
        }
        else
        {
          uint64_t v49 = 0;
        }
        if (v47) {
          char v50 = v45 + 1;
        }
        else {
          char v50 = *(unsigned char *)(a2 + 64);
        }
        unsigned __int8 v51 = byte_1D0D7FCB3[2 * v45 + 256 + v49];
        int v52 = __clz(v46) - 55;
        unint64_t v53 = v30 << v52;
        *(void *)(a2 + 8) = v46 << v52;
        *(unsigned char *)(a2 + 64) = v51;
        uint64_t v54 = *(void *)(a2 + 16) + v52;
        if (v54 >= 0)
        {
          uint64_t v55 = *(unsigned int **)(a2 + 24);
          unsigned int v57 = *v55;
          uint64_t v56 = v55 + 1;
          v53 += (unint64_t)bswap32(v57) << v54;
          v54 -= 32;
          if ((unint64_t)v56 >= *(void *)(a2 + 32)) {
            uint64_t v56 = *(unsigned int **)(a2 + 32);
          }
          *(void *)(a2 + 24) = v56;
        }
        *(void *)(a2 + 16) = v54;
        *(void *)a2 = v53;
        uint64_t v29 = (v50 & 1u) + 1;
      }
    }
    BOOL v87 = 0;
    BOOL v88 = v29 == 2;
    do
    {
      if (*(char *)(a1 + v88 + 516) < 2)
      {
        signed int v90 = 0;
      }
      else
      {
        int v89 = 0;
        signed int v90 = 0;
        int v91 = *(unsigned __int8 *)(a1 + v88 + 516);
        unint64_t v92 = *(void *)a2;
        unint64_t v93 = *(void *)(a2 + 8);
        uint64_t v94 = *(unsigned int **)(a2 + 24);
        uint64_t v95 = *(unsigned int **)(a2 + 32);
        uint64_t v96 = *(void *)(a2 + 16);
        if (v91 == 2) {
          unsigned int v97 = 1;
        }
        else {
          unsigned int v97 = 2;
        }
        uint64_t v98 = 65;
        do
        {
          unint64_t v99 = *(unsigned __int8 *)(a2 + v98);
          uint64_t v100 = byte_1D0D7FCB3[(v93 & 0xC0) + (v99 >> 1)];
          unint64_t v101 = v93 - v100;
          BOOL v102 = v92 >= v101 << 55;
          unint64_t v103 = v92 - (v101 << 55);
          if (v92 < v101 << 55) {
            unint64_t v101 = v101;
          }
          else {
            unint64_t v101 = v100;
          }
          if (v102)
          {
            unint64_t v92 = v103;
            uint64_t v104 = 1;
          }
          else
          {
            uint64_t v104 = 0;
          }
          if (v102) {
            char v105 = v99 + 1;
          }
          else {
            char v105 = *(unsigned char *)(a2 + v98);
          }
          int v106 = __clz(v101) - 55;
          unint64_t v93 = v101 << v106;
          v92 <<= v106;
          v89 += v106;
          v90 += v105 & 1;
          *(unsigned char *)(a2 + v98) = byte_1D0D7FCB3[2 * v99 + 256 + v104];
          if ((v105 & 1) == 0) {
            break;
          }
          ++v98;
        }
        while (v90 < v97);
        uint64_t v107 = v96 + v89;
        if (v107 >= 0)
        {
          unsigned int v108 = *v94++;
          v92 += (unint64_t)bswap32(v108) << v107;
          v107 -= 32;
          if (v94 >= v95) {
            uint64_t v94 = v95;
          }
        }
        signed int v109 = v91 - 1;
        uint64_t v110 = 0;
        if ((v105 & 1) != 0 && v90 < v109)
        {
          unint64_t v112 = v93 << 54;
          do
          {
            if (v92 < v112) {
              unint64_t v113 = 0;
            }
            else {
              unint64_t v113 = v93 << 54;
            }
            ++v110;
            BOOL v36 = v92 >= v112;
            unint64_t v92 = 2 * (v92 - v113);
            if (!v36) {
              break;
            }
            ++v90;
          }
          while (v90 < v109);
        }
        uint64_t v114 = v107 + v110;
        if (v114 >= 0)
        {
          unsigned int v115 = *v94++;
          v92 += (unint64_t)bswap32(v115) << v114;
          v114 -= 32;
          if (v94 >= v95) {
            uint64_t v94 = v95;
          }
        }
        *(void *)a2 = v92;
        *(void *)(a2 + 8) = v93;
        *(void *)(a2 + 16) = v114;
        *(void *)(a2 + 24) = v94;
      }
      *((unsigned char *)v11 + v88 + 8) = *(unsigned char *)(a1 + 16 * v88 + v90 + 520) + 16 * v90;
      unint64_t v116 = *(void *)a2;
      unint64_t v117 = *(void *)(a2 + 8);
      if (!v87)
      {
        uint64_t v118 = 0;
        int v119 = 0;
        uint64_t v120 = *(unsigned int **)(a2 + 24);
        uint64_t v121 = *(unsigned int **)(a2 + 32);
        uint64_t v122 = *(void *)(a2 + 16);
        char v123 = 1;
        unint64_t v124 = *(unsigned __int8 *)(a2 + 67);
        do
        {
          char v125 = v123;
          uint64_t v126 = byte_1D0D7FCB3[(v117 & 0xC0) + (v124 >> 1)];
          unint64_t v127 = v117 - v126;
          BOOL v128 = v116 >= v127 << 55;
          unint64_t v129 = v116 - (v127 << 55);
          if (v116 < v127 << 55) {
            unint64_t v127 = v127;
          }
          else {
            unint64_t v127 = v126;
          }
          if (v128)
          {
            unint64_t v116 = v129;
            uint64_t v130 = 1;
          }
          else
          {
            uint64_t v130 = 0;
          }
          if (v128) {
            char v131 = v124 + 1;
          }
          else {
            char v131 = v124;
          }
          unint64_t v124 = byte_1D0D7FCB3[2 * v124 + 256 + v130];
          int v132 = __clz(v127) - 55;
          unint64_t v117 = v127 << v132;
          v116 <<= v132;
          v119 += v132;
          *((unsigned char *)v211 + v118) = v131 & 1;
          uint64_t v118 = 1;
          char v123 = 0;
        }
        while ((v125 & 1) != 0);
        uint64_t v133 = 0;
        *(unsigned char *)(a2 + 67) = v124;
        unint64_t v134 = *(unsigned __int8 *)(a2 + 68);
        char v135 = 1;
        do
        {
          char v136 = v135;
          if (*((unsigned char *)v211 + v133))
          {
            uint64_t v137 = byte_1D0D7FCB3[(v117 & 0xC0) + (v134 >> 1)];
            unint64_t v138 = v117 - v137;
            BOOL v139 = v116 >= v138 << 55;
            unint64_t v140 = v116 - (v138 << 55);
            if (v116 < v138 << 55) {
              unint64_t v138 = v138;
            }
            else {
              unint64_t v138 = v137;
            }
            if (v139)
            {
              unint64_t v116 = v140;
              uint64_t v141 = 1;
            }
            else
            {
              uint64_t v141 = 0;
            }
            if (v139) {
              char v142 = v134 + 1;
            }
            else {
              char v142 = v134;
            }
            unint64_t v134 = byte_1D0D7FCB3[2 * v134 + 256 + v141];
            int v143 = __clz(v138) - 55;
            unint64_t v117 = v138 << v143;
            v116 <<= v143;
            v119 += v143;
            *((unsigned char *)v212 + v133) = v142 & 1;
          }
          char v135 = 0;
          uint64_t v133 = 1;
        }
        while ((v136 & 1) != 0);
        *(unsigned char *)(a2 + 68) = v134;
        uint64_t v144 = v122 + v119;
        if (v144 >= 0)
        {
          unsigned int v145 = *v120++;
          v116 += (unint64_t)bswap32(v145) << v144;
          v144 -= 32;
          if (v120 >= v121) {
            uint64_t v120 = v121;
          }
        }
        uint64_t v146 = 0;
        unint64_t v147 = v117 << 54;
        char v148 = 1;
        do
        {
          char v149 = v148;
          if (*((unsigned char *)v211 + v146))
          {
            if (*((unsigned char *)v212 + v146))
            {
              unsigned int v150 = 0;
              int v151 = 0;
              do
              {
                unsigned int v152 = v150;
                if (v116 < v147) {
                  unint64_t v153 = 0;
                }
                else {
                  unint64_t v153 = v117 << 54;
                }
                unint64_t v154 = v116 - v153;
                unsigned int v150 = v152 + 1;
                BOOL v36 = v116 >= v147;
                int v155 = v116 >= v147;
                unint64_t v116 = 2 * v154;
                v151 += v155 << (v152 + 1);
              }
              while (v36 && v150 < 0x18);
              v144 += v150;
              if (v144 >= 0)
              {
                unsigned int v156 = *v120++;
                v116 += (unint64_t)bswap32(v156) << v144;
                v144 -= 32;
                if (v120 >= v121) {
                  uint64_t v120 = v121;
                }
              }
              int v157 = v152 + 2;
              int v158 = v151 + *((unsigned __int8 *)v212 + v146) + 1;
            }
            else
            {
              int v158 = 1;
              int v157 = 1;
            }
            int v159 = 0;
            unsigned int v160 = v157 + 1;
            do
            {
              int v161 = v159;
              unint64_t v162 = v116;
              BOOL v163 = v116 >= v147;
              if (v116 < v147) {
                unint64_t v164 = 0;
              }
              else {
                unint64_t v164 = v117 << 54;
              }
              unint64_t v116 = 2 * (v162 - v164);
              int v159 = v163 | (2 * v161);
              --v160;
            }
            while (v160 > 1);
            v144 += v157;
            if (v144 >= 0)
            {
              unsigned int v165 = *v120++;
              v116 += (unint64_t)bswap32(v165) << v144;
              v144 -= 32;
              if (v120 >= v121) {
                uint64_t v120 = v121;
              }
            }
            int v166 = (v161 & 0x7FFFFFFF) + v158;
            if (v162 >= v147) {
              int v166 = -v166;
            }
            *((_WORD *)v11 + 2 * v88 + v146) = v166;
          }
          char v148 = 0;
          uint64_t v146 = 1;
        }
        while ((v149 & 1) != 0);
        *(void *)a2 = v116;
        *(void *)(a2 + 16) = v144;
        *(void *)(a2 + 24) = v120;
      }
      unint64_t v167 = *(unsigned __int8 *)(a2 + 69);
      uint64_t v168 = byte_1D0D7FCB3[(v117 & 0xC0) + (v167 >> 1)];
      unint64_t v169 = v117 - v168;
      BOOL v170 = v116 >= v169 << 55;
      unint64_t v171 = v116 - (v169 << 55);
      if (v116 < v169 << 55) {
        unint64_t v169 = v169;
      }
      else {
        unint64_t v169 = v168;
      }
      if (v170)
      {
        unint64_t v116 = v171;
        uint64_t v172 = 1;
      }
      else
      {
        uint64_t v172 = 0;
      }
      if (v170) {
        char v173 = v167 + 1;
      }
      else {
        char v173 = *(unsigned char *)(a2 + 69);
      }
      unsigned __int8 v174 = byte_1D0D7FCB3[2 * v167 + 256 + v172];
      char v208 = v173;
      BOOL v209 = *(unsigned char *)(a1 + 552) != 0;
      int v175 = __clz(v169) - 55;
      unint64_t v176 = v116 << v175;
      *(void *)(a2 + 8) = v169 << v175;
      *(unsigned char *)(a2 + 69) = v174;
      uint64_t v177 = *(void *)(a2 + 16) + v175;
      BOOL v210 = v88;
      if (v177 >= 0)
      {
        uint64_t v178 = *(unsigned int **)(a2 + 24);
        unsigned int v180 = *v178;
        int8x8_t v179 = v178 + 1;
        v176 += (unint64_t)bswap32(v180) << v177;
        v177 -= 32;
        if ((unint64_t)v179 >= *(void *)(a2 + 32)) {
          int8x8_t v179 = *(unsigned int **)(a2 + 32);
        }
        *(void *)(a2 + 24) = v179;
      }
      uint64_t v181 = v29;
      BOOL v182 = v29 > 1;
      *(void *)(a2 + 16) = v177;
      *(void *)a2 = v176;
      int v183 = *((unsigned __int8 *)v11 + v88 + 8) >> 4;
      v213[0] = 0;
      v213[1] = 0;
      memset(v212, 0, sizeof(v212));
      sub_1D0C95154(a1, a4, a5, a6, a7, a8, v213, v212);
      sub_1D0C95660(a1, a4, a5, v210, v183, a6, a7, v211, v213, (uint64_t)v212, 0);
      unsigned int v11 = a3;
      BOOL v87 = v209;
      uint64_t v184 = &v211[v208 & 1];
      int v185 = (_WORD *)a3 + 2 * v210;
      *v185 += *(_WORD *)v184;
      v185[1] += *((_WORD *)v184 + 1);
      BOOL v186 = !v210 && v182;
      BOOL v88 = 1;
      uint64_t v29 = v181;
    }
    while (v186);
    uint64_t v86 = 0;
    unsigned __int8 v85 = *((unsigned char *)a3 + 8);
  }
  if (v85 > 0xEFu || *((unsigned __int8 *)v11 + 9) > 0xEFu)
  {
LABEL_195:
    if (a7 < 4) {
      goto LABEL_203;
    }
    goto LABEL_196;
  }
  if (a6 < 8 || a7 <= 7)
  {
    if (*(unsigned __int8 *)(*(void *)(a1 + 16) + 2113) - v201 == 3)
    {
      *((unsigned char *)v11 + 9) = -1;
      *((_DWORD *)v11 + 1) = 0;
    }
    goto LABEL_195;
  }
LABEL_196:
  int v187 = 0;
  long long v188 = *v11;
  unsigned int v189 = a6 >> 2;
  if (a6 >> 2 <= 1) {
    unsigned int v189 = 1;
  }
  uint64_t v190 = 12 * v189;
  uint64_t v191 = 12 * *(void *)(*(void *)(a1 + 8) + 848);
  uint64_t v192 = v11;
  do
  {
    if (a6 >= 4)
    {
      uint64_t v193 = 0;
      do
      {
        *(long long *)((char *)v192 + v193) = v188;
        v193 += 12;
      }
      while (v190 != v193);
    }
    ++v187;
    uint64_t v192 = (long long *)((char *)v192 + v191);
  }
  while (v187 != a7 >> 2);
LABEL_203:
  unint64_t v194 = *(void (**)(void *, long long *, void, void, void, void))(a1 + 2264);
  uint64_t v195 = *(void *)(a1 + 2272);
  uint64_t v196 = (void *)(a1 + (v195 >> 1));
  if (v195) {
    unint64_t v194 = *(void (**)(void *, long long *, void, void, void, void))(*v196 + v194);
  }
  v194(v196, v11, a4, a5, a6, a7);
  uint64_t v197 = *(void (**)(void *, long long *, void, void, void, void))(a1 + 2288);
  uint64_t v198 = *(void *)(a1 + 2296);
  uint64_t v199 = (void *)(a1 + (v198 >> 1));
  if (v198) {
    uint64_t v197 = *(void (**)(void *, long long *, void, void, void, void))(*v199 + v197);
  }
  v197(v199, v11, a4, a5, a6, a7);
  return v86;
}

uint64_t sub_1D0CC6524(uint64_t a1, uint64_t a2, void *a3, int *a4, int *a5)
{
  if (!*(unsigned char *)(a1 + 2332))
  {
    if (*a4 + *(_DWORD *)(*(void *)(a1 + 16) + 2120) * *a5 == *(_DWORD *)(a1 + 52))
    {
      sub_1D0C60948(a1, a2);
      if (!v10) {
        goto LABEL_2;
      }
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Error starting decode\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Error starting decode\n");
      }
      return 0;
    }
    else
    {
      uint64_t v11 = 1;
      if (dword_1EB671A40 >= 3)
      {
        fwrite("First TB decoded in slice is not start of slice!\n", 0x31uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "First TB decoded in slice is not start of slice!\n");
      }
    }
    return v11;
  }
LABEL_2:
  return sub_1D0C5281C(a1, a3, a4, a5);
}

uint64_t sub_1D0CC6654@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(result + 8);
  *(unsigned char *)(v5 + 2584) = 1;
  if (!*(void *)(v5 + 184))
  {
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  if (!*(void *)(v5 + 2576))
  {
    int v6 = dispatch_queue_attr_make_with_qos_class(0, (dispatch_qos_class_t)*(_DWORD *)(v5 + 324), 0);
    dispatch_queue_t v7 = dispatch_queue_create("com.apple.vcphevc.missingref", v6);
    int v8 = *(NSObject **)(v5 + 2576);
    if (v8) {
      dispatch_release(v8);
    }
    *(void *)(v5 + 2576) = v7;
  }
  unsigned int v9 = (uint64_t *)(v5 + 2560);
  int8x8_t result = *(void *)(v5 + 2560);
  if (!result)
  {
    uint64_t v11 = *(void *)(v5 + 184);
    goto LABEL_14;
  }
  if (*(_DWORD *)(result + 1024) == v4)
  {
    uint64_t v10 = *(void *)(v5 + 2568);
    *a3 = result;
LABEL_17:
    a3[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    return result;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  uint64_t v11 = *(void *)(v5 + 184);
  if (!v12)
  {
LABEL_14:
    int8x8_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 24))(v11, v4, v5 + 2560);
    if (*v9) {
      operator new();
    }
    uint64_t v10 = *(void *)(v5 + 2568);
    *a3 = 0;
    goto LABEL_17;
  }
  uint64_t v13 = *v9;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
  int8x8_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *))(*(void *)v11 + 32))(v11, v4, v14, 0, a3);
  if (*a3) {
    operator new();
  }
  return result;
}

void sub_1D0CC68C0(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1D0C4C984(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0CC68DC(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = (std::mutex *)(*a1 + 1040);
  char v5 = 1;
  std::mutex::lock(v4);
  atomic_store(0x7FFFFFFFu, (unsigned int *)(v2 + 1032));
  sub_1D0C615D8((uint64_t)&v4);
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 1104));
  if (v5) {
    std::mutex::unlock(v4);
  }
  BOOL v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    sub_1D0C4C984(v3);
  }
  JUMPOUT(0x1D25F0230);
}

void sub_1D0CC6978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0CC6994(void *a1)
{
  uint64_t v2 = *a1;
  if (*(unsigned char *)(*a1 + 531))
  {
    int v3 = 1 << (*(unsigned char *)(v2 + 528) - 1);
    if (*(unsigned char *)(v2 + 534)) {
      LOWORD(v3) = 0x8000;
    }
    int v4 = *(_DWORD *)(v2 + 524);
    if (v4 >= 1)
    {
      int v5 = 0;
      uint64_t v6 = *(void *)(v2 + 400);
      uint64_t v7 = *(void *)(v2 + 416);
      uint64_t v8 = 2 * v7;
      uint64_t v9 = *(unsigned int *)(v2 + 520);
      uint64_t v10 = 4 * v7;
      do
      {
        if ((int)v9 >= 1)
        {
          uint64_t v11 = 0;
          do
          {
            *(_WORD *)(v6 + v8 + v11) = v3;
            *(_WORD *)(v6 + v11) = v3;
            v11 += 2;
          }
          while (2 * v9 != v11);
        }
        v5 += 2;
        v6 += v10;
      }
      while (v5 < v4);
    }
  }
  else
  {
    memset(*(void **)(v2 + 400), 128, *(void *)(v2 + 416) * *(int *)(v2 + 524));
  }
  sub_1D0C8E058((unsigned int *)v2);
  uint64_t v12 = *a1;
  uint64_t v14 = (std::mutex *)(*a1 + 1040);
  char v15 = 1;
  std::mutex::lock(v14);
  atomic_store(0x7FFFFFFFu, (unsigned int *)(v12 + 1032));
  sub_1D0C615D8((uint64_t)&v14);
  std::condition_variable::notify_all((std::condition_variable *)(v12 + 1104));
  if (v15) {
    std::mutex::unlock(v14);
  }
  uint64_t v13 = (std::__shared_weak_count *)a1[1];
  if (v13) {
    sub_1D0C4C984(v13);
  }
  JUMPOUT(0x1D25F0230);
}

void sub_1D0CC6ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1D0CC6AFC(uint64_t a1)
{
  int8x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int8x8_t result = &unk_1F26F1560;
  result[1] = v3;
  return result;
}

void sub_1D0CC6B44()
{
}

uint64_t sub_1D0CC6B5C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 200))
  {
    if (*(int *)(a1 + 2392) >= 1)
    {
      int v2 = 0;
      do
      {
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 2400), 0xFFFFFFFFFFFFFFFFLL);
        ++v2;
      }
      while (v2 < *(_DWORD *)(a1 + 2392));
    }
    char v42 = (std::mutex *)(a1 + 2472);
    char v43 = 1;
    std::mutex::lock((std::mutex *)(a1 + 2472));
    sub_1D0C6161C(a1);
    sub_1D0C615D8((uint64_t)&v42);
    if (*(int *)(a1 + 2392) >= 1)
    {
      int v3 = 0;
      do
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 2400));
        ++v3;
      }
      while (v3 < *(_DWORD *)(a1 + 2392));
    }
    if (v43) {
      std::mutex::unlock(v42);
    }
    sub_1D0C4F230(a1);
  }
  uint64_t v4 = *(void *)(a1 + 184);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = *(FILE **)(a1 + 208);
  if (v5 && fclose(v5) && dword_1EB671A40 >= 3)
  {
    fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Unable to close file\n");
  }
  uint64_t v6 = *(FILE **)(a1 + 216);
  if (v6 && fclose(v6) && dword_1EB671A40 >= 3)
  {
    fwrite("Unable to close file\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Unable to close file\n");
  }
  uint64_t v7 = *(NSObject **)(a1 + 2400);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *(NSObject **)(a1 + 2576);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 2568);
  if (v9) {
    sub_1D0C4C984(v9);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 2472));
  uint64_t v10 = *(void ***)(a1 + 2432);
  uint64_t v11 = *(void ***)(a1 + 2440);
  if (v11 == v10)
  {
    uint64_t v16 = (void *)(a1 + 2464);
    uint64_t v11 = *(void ***)(a1 + 2432);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + 2456);
    uint64_t v13 = &v10[v12 >> 8];
    uint64_t v14 = (uint64_t)*v13;
    uint64_t v15 = (uint64_t)*v13 + 16 * v12;
    uint64_t v16 = (void *)(a1 + 2464);
    uint64_t v17 = *(uint64_t *)((char *)v10 + (((*(void *)(a1 + 2464) + v12) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(unsigned char *)(a1 + 2464) + v12);
    if (v15 != v17)
    {
      do
      {
        uint64_t v18 = *(std::__shared_weak_count **)(v15 + 8);
        if (v18)
        {
          sub_1D0C4C984(v18);
          uint64_t v14 = (uint64_t)*v13;
        }
        v15 += 16;
        if (v15 - v14 == 4096)
        {
          uint64_t v19 = (uint64_t)v13[1];
          ++v13;
          uint64_t v14 = v19;
          uint64_t v15 = v19;
        }
      }
      while (v15 != v17);
      uint64_t v11 = *(void ***)(a1 + 2440);
      uint64_t v10 = *(void ***)(a1 + 2432);
    }
  }
  *uint64_t v16 = 0;
  unint64_t v20 = (char *)v11 - (char *)v10;
  if ((unint64_t)((char *)v11 - (char *)v10) >= 0x11)
  {
    do
    {
      operator delete(*v10);
      uint64_t v10 = (void **)(*(void *)(a1 + 2432) + 8);
      *(void *)(a1 + 2432) = v10;
      uint64_t v11 = *(void ***)(a1 + 2440);
      unint64_t v20 = (char *)v11 - (char *)v10;
    }
    while ((unint64_t)((char *)v11 - (char *)v10) > 0x10);
  }
  unint64_t v21 = v20 >> 3;
  if (v21 == 1)
  {
    uint64_t v22 = 128;
    goto LABEL_42;
  }
  if (v21 == 2)
  {
    uint64_t v22 = 256;
LABEL_42:
    *(void *)(a1 + 2456) = v22;
  }
  if (v10 != v11)
  {
    do
    {
      int v23 = *v10++;
      operator delete(v23);
    }
    while (v10 != v11);
    uint64_t v24 = *(void *)(a1 + 2432);
    uint64_t v25 = *(void *)(a1 + 2440);
    if (v25 != v24) {
      *(void *)(a1 + 2440) = v25 + ((v24 - v25 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  unsigned int v26 = *(void **)(a1 + 2424);
  if (v26) {
    operator delete(v26);
  }
  for (uint64_t i = 2272; i != 2000; i -= 16)
  {
    unsigned int v28 = *(std::__shared_weak_count **)(a1 + i);
    if (v28) {
      sub_1D0C4C984(v28);
    }
  }
  sub_1D0C64604((void *)(a1 + 1976));
  uint64_t v29 = *(uint64_t **)(a1 + 1952);
  if (v29)
  {
    unint64_t v30 = *(uint64_t **)(a1 + 1960);
    uint64_t v31 = *(void **)(a1 + 1952);
    if (v30 != v29)
    {
      do
        sub_1D0C4703C(--v30, 0);
      while (v30 != v29);
      uint64_t v31 = *(void **)(a1 + 1952);
    }
    *(void *)(a1 + 1960) = v29;
    operator delete(v31);
  }
  unint64_t v32 = *(std::__shared_weak_count **)(a1 + 1944);
  if (v32) {
    sub_1D0C4C984(v32);
  }
  uint64_t v33 = *(std::__shared_weak_count **)(a1 + 1928);
  if (v33) {
    sub_1D0C4C984(v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(a1 + 1912);
  if (v34) {
    sub_1D0C4C984(v34);
  }
  for (uint64_t j = 1896; j != 872; j -= 16)
  {
    BOOL v36 = *(std::__shared_weak_count **)(a1 + j);
    if (v36) {
      sub_1D0C4C984(v36);
    }
  }
  do
  {
    uint64_t v37 = *(std::__shared_weak_count **)(a1 + j);
    if (v37) {
      sub_1D0C4C984(v37);
    }
    j -= 16;
  }
  while (j != 616);
  do
  {
    char v38 = *(std::__shared_weak_count **)(a1 + j);
    if (v38) {
      sub_1D0C4C984(v38);
    }
    j -= 16;
  }
  while (j != 360);
  sub_1D0CC7710((void *)(a1 + 248));
  unsigned __int8 v39 = *(std::__shared_weak_count **)(a1 + 232);
  if (v39) {
    sub_1D0C4C984(v39);
  }
  int v40 = *(std::__shared_weak_count **)(a1 + 176);
  if (v40) {
    sub_1D0C4C984(v40);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1D0CC6F58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  sub_1D0C72464(a1);
}

uint64_t sub_1D0CC6F80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1D0CC6FB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F0230);
}

uint64_t sub_1D0CC6FEC(uint64_t a1, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x10uLL, "%d", a2);
  char v4 = 0;
  return sub_1D0C636C0(a1 + 248, 0xC0AB56BF45863635, "max-threads", __str, 0xFFFFFFFFLL, (uint64_t)&v4);
}

void sub_1D0CC70AC(void *a1)
{
  sub_1D0CC7710(a1);
  JUMPOUT(0x1D25F0230);
}

void *sub_1D0CC70E8(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1D0CC716C(void *a1)
{
  int v2 = (const void *)a1[20];
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (const void *)a1[23];
  if (v3) {
    CFRelease(v3);
  }
  char v4 = (const void *)a1[11];
  if (v4) {
    CFRelease(v4);
  }
  int v5 = (const void *)a1[15];
  if (v5) {
    CFRelease(v5);
  }
  sub_1D0CC70E8(a1 + 16);
  return a1;
}

void *sub_1D0CC71CC(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    int v3 = result;
    char v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1D0CC742C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1D0C72464(a1);
}

uint64_t sub_1D0CC7438(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1D0CC7448(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F26F15F0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *sub_1D0CC7470(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F26F15F0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_1D0CC74BC()
{
}

uint64_t sub_1D0CC74D4(uint64_t a1, int *a2, int *a3, _DWORD *a4)
{
  LODWORD(v4) = *a4;
  if ((int)*a4 >= 6) {
    LODWORD(v4) = 6;
  }
  if ((int)v4 <= 3) {
    uint64_t v4 = 3;
  }
  else {
    uint64_t v4 = v4;
  }
  return *(char *)(*(void *)(a1 + 8)
                               + 88 * (*(_DWORD *)(a1 + 16) * (*a3 >> 6) + (*a2 >> 6))
                               + byte_1D0DA5308[6 - v4]
                               + ((*a3 & 0x3Fu) >> v4 << (6 - v4))
                               + (unint64_t)((*a2 & 0x3Fu) >> v4));
}

__n128 sub_1D0CC7550(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26F15A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_1D0CC7578(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1F26F15A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_1D0CC75C4()
{
}

uint64_t sub_1D0CC75DC(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t sub_1D0CC75E8()
{
  int v4 = 0;
  uint64_t v2 = 0;
  size_t v3 = 8;
  if (sysctlbyname("hw.cachelinesize", &v2, &v3, 0, 0)) {
    BOOL v0 = 0;
  }
  else {
    BOOL v0 = v3 == 8;
  }
  if (v0) {
    qword_1EB671A28 = v2;
  }
  size_t v3 = 4;
  if (!sysctlbyname("hw.physicalcpu", &v4, &v3, 0, 0) && v3 == 4) {
    dword_1EB671A24 = v4;
  }
  size_t v3 = 4;
  uint64_t result = sysctlbyname("hw.logicalcpu", &v4, &v3, 0, 0);
  if (!result && v3 == 4) {
    dword_1EB671A20 = v4;
  }
  dword_1EB671A60 |= 2u;
  return result;
}

void sub_1D0CC76D8(void *a1)
{
  sub_1D0CC7710(a1);
  JUMPOUT(0x1D25F0230);
}

void *sub_1D0CC7710(void *a1)
{
  *a1 = &unk_1F26F1250;
  uint64_t v2 = (void *)a1[1];
  size_t v3 = a1 + 2;
  if (v2 != a1 + 2)
  {
    do
    {
      uint64_t v4 = v2[6];
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      }
      int v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  sub_1D0CC77D4((void *)a1[2]);
  return a1;
}

void sub_1D0CC77D4(void *a1)
{
  if (a1)
  {
    sub_1D0CC77D4(*a1);
    sub_1D0CC77D4(a1[1]);
    operator delete(a1);
  }
}

void sub_1D0CC7824(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F1320;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x1D25F0230);
}

uint64_t sub_1D0CC7894(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F1320;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

uint64_t sub_1D0CC78E4(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t))(a1 + 64))(*(void *)(a1 + 56), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
    if (result) {
      return result;
    }
    MEMORY[0x1D25EFFB0](a1 + 32, a2);
  }
  return 0;
}

uint64_t sub_1D0CC7940(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  uint64_t v4 = (const char *)(result + 32);
  if (*(char *)(result + 55) < 0)
  {
    if (*(void *)(result + 40)) {
      BOOL v6 = dword_1EB671A40 <= 5;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v4 = *(const char **)v4;
      return fprintf(a2, "-%s %s\n", a4, v4);
    }
  }
  else
  {
    if (*(unsigned char *)(result + 55)) {
      BOOL v5 = dword_1EB671A40 <= 5;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      return fprintf(a2, "-%s %s\n", a4, v4);
    }
  }
  return result;
}

void sub_1D0CC79B4()
{
}

uint64_t sub_1D0CC79CC(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1EB671A40 >= 6)
  {
    BOOL v6 = (const char *)sub_1D0CC7A2C(*(void *)(result + 16), **(_DWORD **)(result + 24));
    return fprintf(a2, "-%s %s\n", a4, v6);
  }
  return result;
}

uint64_t sub_1D0CC7A2C(uint64_t a1, int a2)
{
  if (*(void *)a1)
  {
    while (*(_DWORD *)(a1 + 16) != a2)
    {
      uint64_t v2 = *(void *)(a1 + 24);
      a1 += 24;
      if (!v2) {
        goto LABEL_4;
      }
    }
    return *(void *)(a1 + 8);
  }
  else
  {
LABEL_4:
    if (dword_1EB671A40 >= 3)
    {
      fwrite("enum_val not found\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "enum_val not found\n");
    }
    return 0;
  }
}

void sub_1D0CC7AB0(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F10A0;
  free(**(void ***)(a1 + 16));
  **(void **)(a1 + 16) = 0;
  JUMPOUT(0x1D25F0230);
}

uint64_t sub_1D0CC7B24(uint64_t a1)
{
  *(void *)a1 = &unk_1F26F10A0;
  free(**(void ***)(a1 + 16));
  **(void **)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_1D0CC7B78(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (*(_DWORD *)(a1 + 8) == a3
    && (free(**(void ***)(a1 + 16)), **(void **)(a1 + 16) = 0, a2)
    && (**(void **)(a1 + 16) = strdup(a2)) == 0)
  {
    return 4294954392;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1D0CC7BF0(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (**(void **)(result + 16))
  {
    uint64_t v5 = result;
    int v6 = dword_1EB671A40;
    if (a3 && dword_1EB671A40 >= 6)
    {
      uint64_t result = fprintf(a2, "-%s ", a4);
      int v6 = dword_1EB671A40;
    }
    if (v6 >= 6) {
      return fprintf(a2, "%s\n", **(const char ***)(v5 + 16));
    }
  }
  return result;
}

size_t sub_1D0CC7C80(const char *a1)
{
  size_t result = strlen(a1);
  for (uint64_t i = &a1[result - 1]; i > a1; --i)
  {
    int v4 = *(unsigned __int8 *)i;
    if (v4 != 32 && v4 != 9) {
      break;
    }
    *uint64_t i = 0;
  }
  return result;
}

void sub_1D0CC7CCC()
{
}

uint64_t sub_1D0CC7CE4(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 8) != a3) {
    return 0;
  }
  __endptr = 0;
  *__error() = 0;
  uint64_t v6 = strtoll(a2, &__endptr, 10);
  if (*__error()) {
    return 4294954394;
  }
  BOOL v7 = *__endptr || v6 < (uint64_t)0xFFFFFFFF80000000;
  if (v7 || v6 >= 0x80000000) {
    return 4294954394;
  }
  uint64_t result = 0;
  **(_DWORD **)(a1 + 16) = v6;
  return result;
}

uint64_t sub_1D0CC7D90(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1EB671A40 >= 6) {
    return fprintf(a2, "-%s %lld\n", a4, **(int **)(result + 16));
  }
  return result;
}

void sub_1D0CC7DDC(uint64_t a1, unint64_t a2, const char *a3, _WORD *a4, __int16 a5)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  *a4 = a5;
  uint64_t v8 = *(void **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    uint64_t v11 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
    if (v11)
    {
      v11[2] = 0;
      *(void *)uint64_t v11 = &unk_1F26F11F0;
      *((void *)v11 + 2) = a4;
      sub_1D0C630E8((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    unint64_t v10 = v8[4];
    if (a2 >= v10) {
      break;
    }
LABEL_5:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_6;
    }
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

void sub_1D0CC7EDC()
{
}

uint64_t sub_1D0CC7EF4(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    uint64_t v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && v6 >= -32768 && v6 < 0x8000)
    {
      uint64_t result = 0;
      **(_WORD **)(a1 + 16) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

uint64_t sub_1D0CC7F9C(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1EB671A40 >= 6) {
    return fprintf(a2, "-%s %lld\n", a4, **(__int16 **)(result + 16));
  }
  return result;
}

void sub_1D0CC7FE8(uint64_t a1, unint64_t a2, const char *a3, unsigned char *a4, char a5)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  *a4 = a5;
  uint64_t v8 = *(void **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    uint64_t v11 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
    if (v11)
    {
      v11[2] = 0;
      *(void *)uint64_t v11 = &unk_1F26F10D0;
      *((void *)v11 + 2) = a4;
      sub_1D0C630E8((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    unint64_t v10 = v8[4];
    if (a2 >= v10) {
      break;
    }
LABEL_5:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_6;
    }
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

void sub_1D0CC80E8()
{
}

uint64_t sub_1D0CC8100(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    uint64_t v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && v6 >= -128 && v6 < 128)
    {
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

uint64_t sub_1D0CC81A8(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1EB671A40 >= 6) {
    return fprintf(a2, "-%s %lld\n", a4, **(char **)(result + 16));
  }
  return result;
}

void sub_1D0CC81F4()
{
}

uint64_t sub_1D0CC820C(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1EB671A40 >= 6) {
    return fprintf(a2, "-%s %lld\n", a4, **(unsigned __int8 **)(result + 16));
  }
  return result;
}

void sub_1D0CC8258(uint64_t a1, unint64_t a2, const char *a3, _DWORD *a4)
{
  *(void *)&long long v11 = a2;
  *((void *)&v11 + 1) = a3;
  *a4 = 0;
  BOOL v7 = *(void **)(a1 + 16);
  if (!v7)
  {
LABEL_6:
    unint64_t v10 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
    if (v10)
    {
      v10[2] = 0;
      *(void *)unint64_t v10 = &unk_1F26F11C0;
      *((void *)v10 + 2) = a4;
      sub_1D0C630E8((uint64_t **)(a1 + 8), a2, &v11)[6] = (uint64_t *)v10;
    }
    return;
  }
  while (1)
  {
    unint64_t v9 = v7[4];
    if (a2 >= v9) {
      break;
    }
LABEL_5:
    BOOL v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (v9 < a2)
  {
    ++v7;
    goto LABEL_5;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

void sub_1D0CC8358()
{
}

uint64_t sub_1D0CC8370(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    unint64_t v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && (v6 & 0x8000000000000000) == 0 && !HIDWORD(v6))
    {
      uint64_t result = 0;
      **(_DWORD **)(a1 + 16) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

uint64_t sub_1D0CC8414(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1EB671A40 >= 6) {
    return fprintf(a2, "-%s %lld\n", a4, **(unsigned int **)(result + 16));
  }
  return result;
}

void sub_1D0CC8460()
{
}

uint64_t sub_1D0CC8478(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 8) == a3)
  {
    __endptr = 0;
    *__error() = 0;
    unint64_t v6 = strtoll(a2, &__endptr, 10);
    if (!*__error() && !*__endptr && (v6 & 0x8000000000000000) == 0 && v6 < 0x10000)
    {
      uint64_t result = 0;
      **(_WORD **)(a1 + 16) = v6;
      return result;
    }
    return 4294954394;
  }
  return 0;
}

uint64_t sub_1D0CC851C(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1EB671A40 >= 6) {
    return fprintf(a2, "-%s %lld\n", a4, **(unsigned __int16 **)(result + 16));
  }
  return result;
}

void sub_1D0CC8568(uint64_t a1, unint64_t a2, const char *a3, float *a4, float a5)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  *a4 = a5;
  uint64_t v8 = *(void **)(a1 + 16);
  if (!v8)
  {
LABEL_6:
    long long v11 = operator new(0x18uLL, MEMORY[0x1E4FBA2D0]);
    if (v11)
    {
      v11[2] = 0;
      *(void *)long long v11 = &unk_1F26F1160;
      *((void *)v11 + 2) = a4;
      sub_1D0C630E8((uint64_t **)(a1 + 8), a2, &v12)[6] = (uint64_t *)v11;
    }
    return;
  }
  while (1)
  {
    unint64_t v10 = v8[4];
    if (a2 >= v10) {
      break;
    }
LABEL_5:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_6;
    }
  }
  if (v10 < a2)
  {
    ++v8;
    goto LABEL_5;
  }
  if (dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
    syslog(27, "Hash of option '%s' collides with previous a option! Change its name!\n", a3);
  }
}

void sub_1D0CC8668()
{
}

uint64_t sub_1D0CC8680(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 8) != a3) {
    return 0;
  }
  unint64_t v10 = 0;
  *__error() = 0;
  double v6 = strtod(a2, &v10);
  if (*__error()) {
    return 4294954394;
  }
  BOOL v8 = *v10 || v6 < 1.17549435e-38;
  if (v8 || v6 > 3.40282347e38) {
    return 4294954394;
  }
  uint64_t result = 0;
  float v9 = v6;
  **(float **)(a1 + 16) = v9;
  return result;
}

uint64_t sub_1D0CC8740(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1EB671A40 >= 6) {
    return fprintf(a2, "-%s %f\n", a4, **(float **)(result + 16));
  }
  return result;
}

void sub_1D0CC8794()
{
}

uint64_t sub_1D0CC87AC(uint64_t a1, const char *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (!a2) {
    return 4294954394;
  }
  if (*(_DWORD *)(a1 + 8) != a3) {
    return 0;
  }
  unint64_t v10 = 0;
  *__error() = 0;
  double v6 = strtod(a2, &v10);
  if (*__error()) {
    return 4294954394;
  }
  BOOL v7 = *v10 || v6 < 2.22507386e-308;
  if (v7 || v6 > 1.79769313e308) {
    return 4294954394;
  }
  uint64_t result = 0;
  **(double **)(a1 + 16) = v6;
  return result;
}

uint64_t sub_1D0CC8864(uint64_t result, FILE *a2, uint64_t a3, const char *a4)
{
  if (dword_1EB671A40 >= 6) {
    return fprintf(a2, "-%s %f\n", a4, **(double **)(result + 16));
  }
  return result;
}

uint64_t sub_1D0CC88B4(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 128);
  *(void *)(result + 112) = sub_1D0CC8EF0;
  *(void *)(result + 104) = sub_1D0CC8960;
  uint64_t v2 = sub_1D0D5FBC0;
  if (v1 >= 2) {
    size_t v3 = sub_1D0D5F9F4;
  }
  else {
    size_t v3 = sub_1D0D5FADC;
  }
  int v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1D0C5DCD8;
  if (v1 == 2) {
    int v4 = sub_1D0D5E730;
  }
  if (v1 < 3) {
    uint64_t v2 = sub_1D0D5FC5C;
  }
  *(void *)(result + 88) = v3;
  *(void *)(result + 96) = v2;
  if (v1 == 3) {
    uint64_t v5 = sub_1D0D5E200;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(result + 48) = v5;
  return result;
}

_WORD *sub_1D0CC8960(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    float v9 = result;
    int v10 = 0;
    uint64_t v11 = 8 * a2;
    do
    {
      sub_1D0CC89FC(v9, a2, 2, a3, a4);
      uint64_t result = sub_1D0CC89FC(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      float v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1D0CC89FC(_WORD *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    int v11 = (unsigned __int16)*result;
    int v6 = (unsigned __int16)result[-a3];
    int v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0) {
      int v8 = v12;
    }
    else {
      int v8 = -v12;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      int v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0) {
        int v13 = -v13;
      }
      uint64_t v14 = &result[3 * a2];
      int v15 = v14[-2 * a3];
      char v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    int v6 = (unsigned __int16)result[-a3];
    int v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = -v7;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    int v11 = (unsigned __int16)*result;
  }
  int v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0) {
    int v13 = -v13;
  }
  uint64_t v14 = &result[3 * a2];
  int v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    int v16 = v14[-a3];
    int v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0) {
      int v17 = -v17;
    }
    int v18 = v14[v9];
    int v19 = *v14;
    goto LABEL_24;
  }
  char v20 = 0;
LABEL_20:
  int v19 = *v14;
  int v16 = v14[-a3];
  int v17 = v19 + v15 - 2 * v16;
  if (v17 < 0) {
    int v17 = 2 * v16 - (v19 + v15);
  }
  int v18 = v14[v9];
  if (v20)
  {
    int v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  int v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0) {
    int v21 = -v21;
  }
  if (v21 + v17 + v13 + v8 < 16 * a4)
  {
    unsigned int v22 = 16 * a4;
    if (v22 >> 2 <= 2 * (v13 + v8)) {
      goto LABEL_37;
    }
    int v23 = (unsigned __int16)result[-4 * a3] - v6;
    if (v23 < 0) {
      int v23 = v6 - (unsigned __int16)result[-4 * a3];
    }
    int v24 = (unsigned __int16)result[3 * a3] - v11;
    if (v24 < 0) {
      int v24 = v11 - (unsigned __int16)result[3 * a3];
    }
    if (v23 + v24 >= v22 >> 3)
    {
LABEL_37:
      BOOL v26 = 1;
    }
    else
    {
      int v25 = v6 - v11;
      if (v25 < 0) {
        int v25 = -v25;
      }
      BOOL v26 = v25 >= (80 * a5) >> 1;
    }
    if (v22 >> 2 <= 2 * (v21 + v17)) {
      goto LABEL_49;
    }
    int v27 = v14[3 * a3];
    int v28 = v14[-4 * a3] - v16;
    if (v28 < 0) {
      int v28 = -v28;
    }
    int v29 = v27 - v19;
    if (v29 < 0) {
      int v29 = -v29;
    }
    if (v28 + v29 >= v22 >> 3) {
      goto LABEL_49;
    }
    int v30 = v16 - v19;
    if (v16 - v19 < 0) {
      int v30 = v19 - v16;
    }
    if (v30 >= (80 * a5) >> 1) {
      BOOL v26 = 1;
    }
    if (v26)
    {
LABEL_49:
      int v31 = 16 * a5;
      int v32 = v17 + v8;
      int v33 = v21 + v13;
      int v34 = (int)(v22 + (v22 >> 1)) >> 3;
      int v35 = 160 * a5;
      int v36 = -16 * a5;
      int v37 = (16 * a5) >> 1;
      int v38 = -v37;
      uint64_t v39 = 2 * a2;
      uint64_t v40 = 4;
      do
      {
        int v41 = (unsigned __int16)result[-2 * a3];
        int v42 = (unsigned __int16)result[-a3];
        int v43 = (unsigned __int16)*result;
        int v44 = (unsigned __int16)result[a3];
        int v45 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
        if (v45 >= 0) {
          int v46 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
        }
        else {
          int v46 = -v45;
        }
        if (v46 < v35)
        {
          if (v45 >= v31) {
            int v48 = v31;
          }
          else {
            int v48 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
          }
          if (v45 <= v36) {
            int v49 = v36;
          }
          else {
            int v49 = v48;
          }
          int v50 = (int)(v49 - v41 + (((unsigned __int16)result[-3 * a3] + v42 + 1) >> 1)) >> 1;
          if (v50 >= v37) {
            int v51 = v37;
          }
          else {
            int v51 = (int)(v49 - v41 + (((unsigned __int16)result[-3 * a3] + v42 + 1) >> 1)) >> 1;
          }
          if (v50 <= v38) {
            int v52 = -v37;
          }
          else {
            int v52 = v51;
          }
          int v53 = v52 + v41;
          if (v53 >= 4095) {
            int v53 = 4095;
          }
          int v54 = v53 & ~(v53 >> 31);
          if (v32 < v34) {
            LOWORD(v41) = v54;
          }
          int v47 = (unsigned __int16)result[v9];
          int v55 = (int)(((v43 + v47 + 1) >> 1) - v44 - v49) >> 1;
          if (v55 >= v37) {
            int v56 = v37;
          }
          else {
            int v56 = (int)(((v43 + v47 + 1) >> 1) - v44 - v49) >> 1;
          }
          if (v55 <= v38) {
            int v57 = -v37;
          }
          else {
            int v57 = v56;
          }
          int v58 = v57 + v44;
          if (v58 >= 4095) {
            int v58 = 4095;
          }
          int v59 = v58 & ~(v58 >> 31);
          if (v33 < v34) {
            LOWORD(v44) = v59;
          }
          int v60 = v49 + v42;
          if (v60 >= 4095) {
            int v60 = 4095;
          }
          int v61 = v60 & ~(v60 >> 31);
          int v62 = v43 - v49;
          if (v62 >= 4095) {
            int v62 = 4095;
          }
          result[-2 * a3] = v41;
          result[-a3] = v61;
          *uint64_t result = v62 & ~(unsigned __int16)(v62 >> 31);
          result[a3] = v44;
        }
        uint64_t result = (_WORD *)((char *)result + v39);
        --v40;
      }
      while (v40);
    }
    else
    {
      int v63 = 32 * a5;
      uint64_t v64 = 2 * a2;
      uint64_t v65 = 4;
      do
      {
        int v66 = (unsigned __int16)result[-3 * a3];
        int v67 = (unsigned __int16)result[-2 * a3];
        int v68 = (unsigned __int16)result[-a3];
        int v69 = (unsigned __int16)result[a3];
        int v70 = (unsigned __int16)result[v9];
        int v71 = (unsigned __int16)result[3 * a3];
        LOWORD(v72) = v63 + v66;
        int v73 = (unsigned __int16)*result;
        int v74 = v73 + v68;
        int v75 = v67 + 4;
        signed int v76 = (v67 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v66 + v73 + v68) >> 3;
        if (v76 < v63 + v66) {
          unsigned int v72 = (v67 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v66 + v73 + v68) >> 3;
        }
        if (v76 <= v66 - v63) {
          __int16 v77 = v66 - v63;
        }
        else {
          __int16 v77 = v72;
        }
        result[-3 * a3] = v77;
        signed int v78 = v67 - v63;
        LOWORD(v79) = v63 + v67;
        signed int v80 = (v74 + v67 + v66 + 2) >> 2;
        if (v80 < v63 + v67) {
          unsigned int v79 = (v74 + v67 + v66 + 2) >> 2;
        }
        if (v80 > v78) {
          LOWORD(v78) = v79;
        }
        result[-2 * a3] = v78;
        signed int v81 = v68 - v63;
        signed int v82 = (v66 + 2 * v68 + 2 * v67 + 2 * v73 + v69 + 4) >> 3;
        if (v82 >= v63 + v68) {
          __int16 v83 = v63 + v68;
        }
        else {
          __int16 v83 = v82;
        }
        if (v82 > v81) {
          LOWORD(v81) = v83;
        }
        result[-a3] = v81;
        signed int v84 = v73 - v63;
        LOWORD(v85) = v63 + v73;
        signed int v86 = (v75 + 2 * v68 + 2 * v73 + 2 * v69 + v70) >> 3;
        if (v86 < v63 + v73) {
          unsigned int v85 = (v75 + 2 * v68 + 2 * v73 + 2 * v69 + v70) >> 3;
        }
        if (v86 > v84) {
          LOWORD(v84) = v85;
        }
        *uint64_t result = v84;
        signed int v87 = v69 - v63;
        LOWORD(v88) = v63 + v69;
        int v89 = v70 + v69 + v74;
        signed int v90 = (v89 + 2) >> 2;
        if (v90 < v63 + v69) {
          unsigned int v88 = (v89 + 2) >> 2;
        }
        if (v90 > v87) {
          LOWORD(v87) = v88;
        }
        result[a3] = v87;
        signed int v91 = v70 - v63;
        signed int v92 = v63 + v70;
        signed int v93 = (v89 + 2 * v70 + 2 * v71 + 4) >> 3;
        if (v93 >= v92) {
          __int16 v94 = v92;
        }
        else {
          __int16 v94 = v93;
        }
        if (v93 <= v91) {
          __int16 v95 = v91;
        }
        else {
          __int16 v95 = v94;
        }
        result[v9] = v95;
        uint64_t result = (_WORD *)((char *)result + v64);
        --v65;
      }
      while (v65);
    }
  }
  return result;
}

_WORD *sub_1D0CC8EF0(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v9 = result;
    for (int i = 0; i < a5; i += 4)
    {
      sub_1D0CC89FC(v9, 2, a2, a3, a4);
      uint64_t result = sub_1D0CC89FC(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

uint64_t sub_1D0CC8F80(uint64_t result)
{
  *(void *)(result + 80) = sub_1D0D5CDE8;
  *(void *)(result + 72) = sub_1D0D5C8AC;
  return result;
}

uint64_t sub_1D0CC8FA4(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 128);
  *(void *)(result + 112) = sub_1D0CC95E8;
  *(void *)(result + 104) = sub_1D0CC9050;
  uint64_t v2 = sub_1D0D5F8C0;
  if (v1 >= 2) {
    size_t v3 = sub_1D0D5F6F4;
  }
  else {
    size_t v3 = sub_1D0D5F7DC;
  }
  int v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1D0C5DCD8;
  if (v1 == 2) {
    int v4 = sub_1D0D5E730;
  }
  if (v1 < 3) {
    uint64_t v2 = sub_1D0D5F95C;
  }
  *(void *)(result + 88) = v3;
  *(void *)(result + 96) = v2;
  if (v1 == 3) {
    int v5 = sub_1D0D5E200;
  }
  else {
    int v5 = v4;
  }
  *(void *)(result + 48) = v5;
  return result;
}

_WORD *sub_1D0CC9050(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = 8 * a2;
    do
    {
      sub_1D0CC90EC(v9, a2, 2, a3, a4);
      uint64_t result = sub_1D0CC90EC(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      uint64_t v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1D0CC90EC(_WORD *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    int v11 = (unsigned __int16)*result;
    int v6 = (unsigned __int16)result[-a3];
    int v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0) {
      int v8 = v12;
    }
    else {
      int v8 = -v12;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      int v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0) {
        int v13 = -v13;
      }
      uint64_t v14 = &result[3 * a2];
      int v15 = v14[-2 * a3];
      char v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    int v6 = (unsigned __int16)result[-a3];
    int v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = -v7;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    int v11 = (unsigned __int16)*result;
  }
  int v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0) {
    int v13 = -v13;
  }
  uint64_t v14 = &result[3 * a2];
  int v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    int v16 = v14[-a3];
    int v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0) {
      int v17 = -v17;
    }
    int v18 = v14[v9];
    int v19 = *v14;
    goto LABEL_24;
  }
  char v20 = 0;
LABEL_20:
  int v19 = *v14;
  int v16 = v14[-a3];
  int v17 = v19 + v15 - 2 * v16;
  if (v17 < 0) {
    int v17 = 2 * v16 - (v19 + v15);
  }
  int v18 = v14[v9];
  if (v20)
  {
    int v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  int v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0) {
    int v21 = -v21;
  }
  if (v21 + v17 + v13 + v8 < 8 * a4)
  {
    unsigned int v22 = (8 * a4) >> 2;
    if (v22 <= 2 * (v13 + v8)) {
      goto LABEL_37;
    }
    int v23 = (unsigned __int16)result[-4 * a3] - v6;
    if (v23 < 0) {
      int v23 = v6 - (unsigned __int16)result[-4 * a3];
    }
    int v24 = (unsigned __int16)result[3 * a3] - v11;
    if (v24 < 0) {
      int v24 = v11 - (unsigned __int16)result[3 * a3];
    }
    if (v23 + v24 >= (a4 & 0x1FFFFFFFu))
    {
LABEL_37:
      BOOL v26 = 1;
    }
    else
    {
      int v25 = v6 - v11;
      if (v25 < 0) {
        int v25 = -v25;
      }
      BOOL v26 = v25 >= (40 * a5) >> 1;
    }
    if (v22 <= 2 * (v21 + v17)) {
      goto LABEL_49;
    }
    int v27 = v14[3 * a3];
    int v28 = v14[-4 * a3] - v16;
    if (v28 < 0) {
      int v28 = -v28;
    }
    int v29 = v27 - v19;
    if (v29 < 0) {
      int v29 = -v29;
    }
    if (v28 + v29 >= (a4 & 0x1FFFFFFFu)) {
      goto LABEL_49;
    }
    int v30 = v16 - v19;
    if (v16 - v19 < 0) {
      int v30 = v19 - v16;
    }
    if (v30 >= (40 * a5) >> 1) {
      BOOL v26 = 1;
    }
    if (v26)
    {
LABEL_49:
      int v31 = 8 * a5;
      int v32 = v17 + v8;
      int v33 = v21 + v13;
      int v34 = (int)(8 * a4 + ((8 * a4) >> 1)) >> 3;
      int v35 = 80 * a5;
      int v36 = -8 * a5;
      int v37 = (8 * a5) >> 1;
      int v38 = -v37;
      uint64_t v39 = 2 * a2;
      uint64_t v40 = 4;
      do
      {
        int v41 = (unsigned __int16)result[-2 * a3];
        int v42 = (unsigned __int16)result[-a3];
        int v43 = (unsigned __int16)*result;
        int v44 = (unsigned __int16)result[a3];
        int v45 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
        if (v45 >= 0) {
          int v46 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
        }
        else {
          int v46 = -v45;
        }
        if (v46 < v35)
        {
          if (v45 >= v31) {
            int v48 = v31;
          }
          else {
            int v48 = (9 * (v43 - v42) - 3 * (v44 - v41) + 8) >> 4;
          }
          if (v45 <= v36) {
            int v49 = v36;
          }
          else {
            int v49 = v48;
          }
          int v50 = (int)(v49 - v41 + (((unsigned __int16)result[-3 * a3] + v42 + 1) >> 1)) >> 1;
          if (v50 >= v37) {
            int v51 = v37;
          }
          else {
            int v51 = (int)(v49 - v41 + (((unsigned __int16)result[-3 * a3] + v42 + 1) >> 1)) >> 1;
          }
          if (v50 <= v38) {
            int v52 = -v37;
          }
          else {
            int v52 = v51;
          }
          int v53 = v52 + v41;
          if (v53 >= 2047) {
            int v53 = 2047;
          }
          int v54 = v53 & ~(v53 >> 31);
          if (v32 < v34) {
            LOWORD(v41) = v54;
          }
          int v47 = (unsigned __int16)result[v9];
          int v55 = (int)(((v43 + v47 + 1) >> 1) - v44 - v49) >> 1;
          if (v55 >= v37) {
            int v56 = v37;
          }
          else {
            int v56 = (int)(((v43 + v47 + 1) >> 1) - v44 - v49) >> 1;
          }
          if (v55 <= v38) {
            int v57 = -v37;
          }
          else {
            int v57 = v56;
          }
          int v58 = v57 + v44;
          if (v58 >= 2047) {
            int v58 = 2047;
          }
          int v59 = v58 & ~(v58 >> 31);
          if (v33 < v34) {
            LOWORD(v44) = v59;
          }
          int v60 = v49 + v42;
          if (v60 >= 2047) {
            int v60 = 2047;
          }
          int v61 = v60 & ~(v60 >> 31);
          int v62 = v43 - v49;
          if (v62 >= 2047) {
            int v62 = 2047;
          }
          result[-2 * a3] = v41;
          result[-a3] = v61;
          *uint64_t result = v62 & ~(unsigned __int16)(v62 >> 31);
          result[a3] = v44;
        }
        uint64_t result = (_WORD *)((char *)result + v39);
        --v40;
      }
      while (v40);
    }
    else
    {
      int v63 = 16 * a5;
      uint64_t v64 = 2 * a2;
      uint64_t v65 = 4;
      do
      {
        int v66 = (unsigned __int16)result[-3 * a3];
        int v67 = (unsigned __int16)result[-2 * a3];
        int v68 = (unsigned __int16)result[-a3];
        int v69 = (unsigned __int16)result[a3];
        int v70 = (unsigned __int16)result[v9];
        int v71 = (unsigned __int16)result[3 * a3];
        LOWORD(v72) = v63 + v66;
        int v73 = (unsigned __int16)*result;
        int v74 = v73 + v68;
        int v75 = v67 + 4;
        signed int v76 = (v67 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v66 + v73 + v68) >> 3;
        if (v76 < v63 + v66) {
          unsigned int v72 = (v67 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v66 + v73 + v68) >> 3;
        }
        if (v76 <= v66 - v63) {
          __int16 v77 = v66 - v63;
        }
        else {
          __int16 v77 = v72;
        }
        result[-3 * a3] = v77;
        signed int v78 = v67 - v63;
        LOWORD(v79) = v63 + v67;
        signed int v80 = (v74 + v67 + v66 + 2) >> 2;
        if (v80 < v63 + v67) {
          unsigned int v79 = (v74 + v67 + v66 + 2) >> 2;
        }
        if (v80 > v78) {
          LOWORD(v78) = v79;
        }
        result[-2 * a3] = v78;
        signed int v81 = v68 - v63;
        signed int v82 = (v66 + 2 * v68 + 2 * v67 + 2 * v73 + v69 + 4) >> 3;
        if (v82 >= v63 + v68) {
          __int16 v83 = v63 + v68;
        }
        else {
          __int16 v83 = v82;
        }
        if (v82 > v81) {
          LOWORD(v81) = v83;
        }
        result[-a3] = v81;
        signed int v84 = v73 - v63;
        LOWORD(v85) = v63 + v73;
        signed int v86 = (v75 + 2 * v68 + 2 * v73 + 2 * v69 + v70) >> 3;
        if (v86 < v63 + v73) {
          unsigned int v85 = (v75 + 2 * v68 + 2 * v73 + 2 * v69 + v70) >> 3;
        }
        if (v86 > v84) {
          LOWORD(v84) = v85;
        }
        *uint64_t result = v84;
        signed int v87 = v69 - v63;
        LOWORD(v88) = v63 + v69;
        int v89 = v70 + v69 + v74;
        signed int v90 = (v89 + 2) >> 2;
        if (v90 < v63 + v69) {
          unsigned int v88 = (v89 + 2) >> 2;
        }
        if (v90 > v87) {
          LOWORD(v87) = v88;
        }
        result[a3] = v87;
        signed int v91 = v70 - v63;
        signed int v92 = v63 + v70;
        signed int v93 = (v89 + 2 * v70 + 2 * v71 + 4) >> 3;
        if (v93 >= v92) {
          __int16 v94 = v92;
        }
        else {
          __int16 v94 = v93;
        }
        if (v93 <= v91) {
          __int16 v95 = v91;
        }
        else {
          __int16 v95 = v94;
        }
        result[v9] = v95;
        uint64_t result = (_WORD *)((char *)result + v64);
        --v65;
      }
      while (v65);
    }
  }
  return result;
}

_WORD *sub_1D0CC95E8(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v9 = result;
    for (int i = 0; i < a5; i += 4)
    {
      sub_1D0CC90EC(v9, 2, a2, a3, a4);
      uint64_t result = sub_1D0CC90EC(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

uint64_t sub_1D0CC9678(uint64_t result)
{
  *(void *)(result + 80) = sub_1D0D5C430;
  *(void *)(result + 72) = sub_1D0D5BF20;
  return result;
}

uint64_t sub_1D0CC969C(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 128);
  *(void *)(result + 112) = sub_1D0CC9CD8;
  *(void *)(result + 104) = sub_1D0CC9748;
  uint64_t v2 = sub_1D0D5F5C0;
  if (v1 >= 2) {
    size_t v3 = sub_1D0D5F3F4;
  }
  else {
    size_t v3 = sub_1D0D5F4DC;
  }
  int v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1D0C5DCD8;
  if (v1 == 2) {
    int v4 = sub_1D0D5E730;
  }
  if (v1 < 3) {
    uint64_t v2 = sub_1D0D5F65C;
  }
  *(void *)(result + 88) = v3;
  *(void *)(result + 96) = v2;
  if (v1 == 3) {
    int v5 = sub_1D0D5E200;
  }
  else {
    int v5 = v4;
  }
  *(void *)(result + 48) = v5;
  return result;
}

_WORD *sub_1D0CC9748(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = 8 * a2;
    do
    {
      sub_1D0CC97E4(v9, a2, 2, a3, a4);
      uint64_t result = sub_1D0CC97E4(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      uint64_t v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1D0CC97E4(_WORD *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    int v11 = (unsigned __int16)*result;
    int v6 = (unsigned __int16)result[-a3];
    int v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0) {
      int v8 = v12;
    }
    else {
      int v8 = -v12;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      int v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0) {
        int v13 = -v13;
      }
      uint64_t v14 = &result[3 * a2];
      int v15 = v14[-2 * a3];
      char v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    int v6 = (unsigned __int16)result[-a3];
    int v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = -v7;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    int v11 = (unsigned __int16)*result;
  }
  int v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0) {
    int v13 = -v13;
  }
  uint64_t v14 = &result[3 * a2];
  int v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    int v16 = v14[-a3];
    int v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0) {
      int v17 = -v17;
    }
    int v18 = v14[v9];
    int v19 = *v14;
    goto LABEL_24;
  }
  char v20 = 0;
LABEL_20:
  int v19 = *v14;
  int v16 = v14[-a3];
  int v17 = v19 + v15 - 2 * v16;
  if (v17 < 0) {
    int v17 = 2 * v16 - (v19 + v15);
  }
  int v18 = v14[v9];
  if (v20)
  {
    int v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  int v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0) {
    int v21 = -v21;
  }
  if (v21 + v17 + v13 + v8 < 4 * a4)
  {
    unsigned int v22 = 4 * a4;
    unsigned int v23 = a4 & 0x3FFFFFFF;
    if (v23 <= 2 * (v13 + v8)) {
      goto LABEL_37;
    }
    int v24 = (unsigned __int16)result[-4 * a3] - v6;
    if (v24 < 0) {
      int v24 = v6 - (unsigned __int16)result[-4 * a3];
    }
    int v25 = (unsigned __int16)result[3 * a3] - v11;
    if (v25 < 0) {
      int v25 = v11 - (unsigned __int16)result[3 * a3];
    }
    if (v24 + v25 >= v22 >> 3)
    {
LABEL_37:
      BOOL v27 = 1;
    }
    else
    {
      int v26 = v6 - v11;
      if (v26 < 0) {
        int v26 = -v26;
      }
      BOOL v27 = v26 >= (20 * a5) >> 1;
    }
    if (v23 <= 2 * (v21 + v17)) {
      goto LABEL_49;
    }
    int v28 = v14[3 * a3];
    int v29 = v14[-4 * a3] - v16;
    if (v29 < 0) {
      int v29 = -v29;
    }
    int v30 = v28 - v19;
    if (v30 < 0) {
      int v30 = -v30;
    }
    if (v29 + v30 >= v22 >> 3) {
      goto LABEL_49;
    }
    int v31 = v16 - v19;
    if (v16 - v19 < 0) {
      int v31 = v19 - v16;
    }
    if (v31 >= (20 * a5) >> 1) {
      BOOL v27 = 1;
    }
    if (v27)
    {
LABEL_49:
      int v32 = 4 * a5;
      int v33 = v17 + v8;
      int v34 = v21 + v13;
      int v35 = (int)(v22 + (v22 >> 1)) >> 3;
      int v36 = 40 * a5;
      int v37 = -4 * a5;
      int v38 = (4 * a5) >> 1;
      int v39 = -v38;
      uint64_t v40 = 2 * a2;
      uint64_t v41 = 4;
      do
      {
        int v42 = (unsigned __int16)result[-2 * a3];
        int v43 = (unsigned __int16)result[-a3];
        int v44 = (unsigned __int16)*result;
        int v45 = (unsigned __int16)result[a3];
        int v46 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
        if (v46 >= 0) {
          int v47 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
        }
        else {
          int v47 = -v46;
        }
        if (v47 < v36)
        {
          if (v46 >= v32) {
            int v49 = v32;
          }
          else {
            int v49 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
          }
          if (v46 <= v37) {
            int v50 = v37;
          }
          else {
            int v50 = v49;
          }
          int v51 = (int)(v50 - v42 + (((unsigned __int16)result[-3 * a3] + v43 + 1) >> 1)) >> 1;
          if (v51 >= v38) {
            int v52 = v38;
          }
          else {
            int v52 = (int)(v50 - v42 + (((unsigned __int16)result[-3 * a3] + v43 + 1) >> 1)) >> 1;
          }
          if (v51 <= v39) {
            int v53 = -v38;
          }
          else {
            int v53 = v52;
          }
          int v54 = v53 + v42;
          if (v54 >= 1023) {
            int v54 = 1023;
          }
          int v55 = v54 & ~(v54 >> 31);
          if (v33 < v35) {
            LOWORD(v42) = v55;
          }
          int v48 = (unsigned __int16)result[v9];
          int v56 = (int)(((v44 + v48 + 1) >> 1) - v45 - v50) >> 1;
          if (v56 >= v38) {
            int v57 = v38;
          }
          else {
            int v57 = (int)(((v44 + v48 + 1) >> 1) - v45 - v50) >> 1;
          }
          if (v56 <= v39) {
            int v58 = -v38;
          }
          else {
            int v58 = v57;
          }
          int v59 = v58 + v45;
          if (v59 >= 1023) {
            int v59 = 1023;
          }
          int v60 = v59 & ~(v59 >> 31);
          if (v34 < v35) {
            LOWORD(v45) = v60;
          }
          int v61 = v50 + v43;
          if (v61 >= 1023) {
            int v61 = 1023;
          }
          int v62 = v61 & ~(v61 >> 31);
          int v63 = v44 - v50;
          if (v63 >= 1023) {
            int v63 = 1023;
          }
          result[-2 * a3] = v42;
          result[-a3] = v62;
          *uint64_t result = v63 & ~(unsigned __int16)(v63 >> 31);
          result[a3] = v45;
        }
        uint64_t result = (_WORD *)((char *)result + v40);
        --v41;
      }
      while (v41);
    }
    else
    {
      int v64 = 8 * a5;
      uint64_t v65 = 2 * a2;
      uint64_t v66 = 4;
      do
      {
        int v67 = (unsigned __int16)result[-3 * a3];
        int v68 = (unsigned __int16)result[-2 * a3];
        int v69 = (unsigned __int16)result[-a3];
        int v70 = (unsigned __int16)result[a3];
        int v71 = (unsigned __int16)result[v9];
        int v72 = (unsigned __int16)result[3 * a3];
        LOWORD(v73) = v64 + v67;
        int v74 = (unsigned __int16)*result;
        int v75 = v74 + v69;
        int v76 = v68 + 4;
        signed int v77 = (v68 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v67 + v74 + v69) >> 3;
        if (v77 < v64 + v67) {
          unsigned int v73 = (v68 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v67 + v74 + v69) >> 3;
        }
        if (v77 <= v67 - v64) {
          __int16 v78 = v67 - v64;
        }
        else {
          __int16 v78 = v73;
        }
        result[-3 * a3] = v78;
        signed int v79 = v68 - v64;
        LOWORD(v80) = v64 + v68;
        signed int v81 = (v75 + v68 + v67 + 2) >> 2;
        if (v81 < v64 + v68) {
          unsigned int v80 = (v75 + v68 + v67 + 2) >> 2;
        }
        if (v81 > v79) {
          LOWORD(v79) = v80;
        }
        result[-2 * a3] = v79;
        signed int v82 = v69 - v64;
        signed int v83 = (v67 + 2 * v69 + 2 * v68 + 2 * v74 + v70 + 4) >> 3;
        if (v83 >= v64 + v69) {
          __int16 v84 = v64 + v69;
        }
        else {
          __int16 v84 = v83;
        }
        if (v83 > v82) {
          LOWORD(v82) = v84;
        }
        result[-a3] = v82;
        signed int v85 = v74 - v64;
        LOWORD(v86) = v64 + v74;
        signed int v87 = (v76 + 2 * v69 + 2 * v74 + 2 * v70 + v71) >> 3;
        if (v87 < v64 + v74) {
          unsigned int v86 = (v76 + 2 * v69 + 2 * v74 + 2 * v70 + v71) >> 3;
        }
        if (v87 > v85) {
          LOWORD(v85) = v86;
        }
        *uint64_t result = v85;
        signed int v88 = v70 - v64;
        LOWORD(v89) = v64 + v70;
        int v90 = v71 + v70 + v75;
        signed int v91 = (v90 + 2) >> 2;
        if (v91 < v64 + v70) {
          unsigned int v89 = (v90 + 2) >> 2;
        }
        if (v91 > v88) {
          LOWORD(v88) = v89;
        }
        result[a3] = v88;
        signed int v92 = v71 - v64;
        signed int v93 = v64 + v71;
        signed int v94 = (v90 + 2 * v71 + 2 * v72 + 4) >> 3;
        if (v94 >= v93) {
          __int16 v95 = v93;
        }
        else {
          __int16 v95 = v94;
        }
        if (v94 <= v92) {
          __int16 v96 = v92;
        }
        else {
          __int16 v96 = v95;
        }
        result[v9] = v96;
        uint64_t result = (_WORD *)((char *)result + v65);
        --v66;
      }
      while (v66);
    }
  }
  return result;
}

_WORD *sub_1D0CC9CD8(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v9 = result;
    for (int i = 0; i < a5; i += 4)
    {
      sub_1D0CC97E4(v9, 2, a2, a3, a4);
      uint64_t result = sub_1D0CC97E4(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

uint64_t sub_1D0CC9D68(uint64_t result)
{
  *(void *)(result + 80) = sub_1D0D5BAA4;
  *(void *)(result + 72) = sub_1D0D5B594;
  return result;
}

uint64_t sub_1D0CC9D8C(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 128);
  *(void *)(result + 112) = sub_1D0CCA3CC;
  *(void *)(result + 104) = sub_1D0CC9E38;
  uint64_t v2 = sub_1D0D5F2C0;
  if (v1 >= 2) {
    size_t v3 = sub_1D0D5F0F4;
  }
  else {
    size_t v3 = sub_1D0D5F1DC;
  }
  int v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1D0C5DCD8;
  if (v1 == 2) {
    int v4 = sub_1D0D5E730;
  }
  if (v1 < 3) {
    uint64_t v2 = sub_1D0D5F35C;
  }
  *(void *)(result + 88) = v3;
  *(void *)(result + 96) = v2;
  if (v1 == 3) {
    int v5 = sub_1D0D5E200;
  }
  else {
    int v5 = v4;
  }
  *(void *)(result + 48) = v5;
  return result;
}

_WORD *sub_1D0CC9E38(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = 8 * a2;
    do
    {
      sub_1D0CC9ED4(v9, a2, 2, a3, a4);
      uint64_t result = sub_1D0CC9ED4(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      uint64_t v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1D0CC9ED4(_WORD *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    int v11 = (unsigned __int16)*result;
    int v6 = (unsigned __int16)result[-a3];
    int v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0) {
      int v8 = v12;
    }
    else {
      int v8 = -v12;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      int v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0) {
        int v13 = -v13;
      }
      uint64_t v14 = &result[3 * a2];
      int v15 = v14[-2 * a3];
      char v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    int v6 = (unsigned __int16)result[-a3];
    int v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = -v7;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    int v11 = (unsigned __int16)*result;
  }
  int v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0) {
    int v13 = -v13;
  }
  uint64_t v14 = &result[3 * a2];
  int v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    int v16 = v14[-a3];
    int v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0) {
      int v17 = -v17;
    }
    int v18 = v14[v9];
    int v19 = *v14;
    goto LABEL_24;
  }
  char v20 = 0;
LABEL_20:
  int v19 = *v14;
  int v16 = v14[-a3];
  int v17 = v19 + v15 - 2 * v16;
  if (v17 < 0) {
    int v17 = 2 * v16 - (v19 + v15);
  }
  int v18 = v14[v9];
  if (v20)
  {
    int v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  int v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0) {
    int v21 = -v21;
  }
  if (v21 + v17 + v13 + v8 < 2 * a4)
  {
    unsigned int v22 = 2 * a4;
    unsigned int v23 = (2 * a4) >> 2;
    if (v23 <= 2 * (v13 + v8)) {
      goto LABEL_37;
    }
    int v24 = (unsigned __int16)result[-4 * a3] - v6;
    if (v24 < 0) {
      int v24 = v6 - (unsigned __int16)result[-4 * a3];
    }
    int v25 = (unsigned __int16)result[3 * a3] - v11;
    if (v25 < 0) {
      int v25 = v11 - (unsigned __int16)result[3 * a3];
    }
    if (v24 + v25 >= v22 >> 3)
    {
LABEL_37:
      BOOL v27 = 1;
    }
    else
    {
      int v26 = v6 - v11;
      if (v26 < 0) {
        int v26 = -v26;
      }
      BOOL v27 = v26 >= (10 * a5) >> 1;
    }
    if (v23 <= 2 * (v21 + v17)) {
      goto LABEL_49;
    }
    int v28 = v14[3 * a3];
    int v29 = v14[-4 * a3] - v16;
    if (v29 < 0) {
      int v29 = -v29;
    }
    int v30 = v28 - v19;
    if (v30 < 0) {
      int v30 = -v30;
    }
    if (v29 + v30 >= v22 >> 3) {
      goto LABEL_49;
    }
    int v31 = v16 - v19;
    if (v16 - v19 < 0) {
      int v31 = v19 - v16;
    }
    if (v31 >= (10 * a5) >> 1) {
      BOOL v27 = 1;
    }
    if (v27)
    {
LABEL_49:
      int v32 = 2 * a5;
      int v33 = (int)((a4 & 0x7FFFFFFE) + v22) >> 3;
      int v34 = v17 + v8;
      int v35 = v21 + v13;
      int v36 = 20 * a5;
      int v37 = -2 * a5;
      int v38 = (2 * a5) >> 1;
      int v39 = -v38;
      uint64_t v40 = 2 * a2;
      uint64_t v41 = 4;
      do
      {
        int v42 = (unsigned __int16)result[-2 * a3];
        int v43 = (unsigned __int16)result[-a3];
        int v44 = (unsigned __int16)*result;
        int v45 = (unsigned __int16)result[a3];
        int v46 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
        if (v46 >= 0) {
          int v47 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
        }
        else {
          int v47 = -v46;
        }
        if (v47 < v36)
        {
          if (v46 >= v32) {
            int v49 = v32;
          }
          else {
            int v49 = (9 * (v44 - v43) - 3 * (v45 - v42) + 8) >> 4;
          }
          if (v46 <= v37) {
            int v50 = v37;
          }
          else {
            int v50 = v49;
          }
          int v51 = (int)(v50 - v42 + (((unsigned __int16)result[-3 * a3] + v43 + 1) >> 1)) >> 1;
          if (v51 >= v38) {
            int v52 = v38;
          }
          else {
            int v52 = (int)(v50 - v42 + (((unsigned __int16)result[-3 * a3] + v43 + 1) >> 1)) >> 1;
          }
          if (v51 <= v39) {
            int v53 = -v38;
          }
          else {
            int v53 = v52;
          }
          int v54 = v53 + v42;
          if (v54 >= 511) {
            int v54 = 511;
          }
          int v55 = v54 & ~(v54 >> 31);
          if (v34 < v33) {
            LOWORD(v42) = v55;
          }
          int v48 = (unsigned __int16)result[v9];
          int v56 = (int)(((v44 + v48 + 1) >> 1) - v45 - v50) >> 1;
          if (v56 >= v38) {
            int v57 = v38;
          }
          else {
            int v57 = (int)(((v44 + v48 + 1) >> 1) - v45 - v50) >> 1;
          }
          if (v56 <= v39) {
            int v58 = -v38;
          }
          else {
            int v58 = v57;
          }
          int v59 = v58 + v45;
          if (v59 >= 511) {
            int v59 = 511;
          }
          int v60 = v59 & ~(v59 >> 31);
          if (v35 < v33) {
            LOWORD(v45) = v60;
          }
          int v61 = v50 + v43;
          if (v61 >= 511) {
            int v61 = 511;
          }
          int v62 = v61 & ~(v61 >> 31);
          int v63 = v44 - v50;
          if (v63 >= 511) {
            int v63 = 511;
          }
          result[-2 * a3] = v42;
          result[-a3] = v62;
          *uint64_t result = v63 & ~(unsigned __int16)(v63 >> 31);
          result[a3] = v45;
        }
        uint64_t result = (_WORD *)((char *)result + v40);
        --v41;
      }
      while (v41);
    }
    else
    {
      int v64 = 4 * a5;
      uint64_t v65 = 2 * a2;
      uint64_t v66 = 4;
      do
      {
        int v67 = (unsigned __int16)result[-3 * a3];
        int v68 = (unsigned __int16)result[-2 * a3];
        int v69 = (unsigned __int16)result[-a3];
        int v70 = (unsigned __int16)result[a3];
        int v71 = (unsigned __int16)result[v9];
        int v72 = (unsigned __int16)result[3 * a3];
        LOWORD(v73) = v64 + v67;
        int v74 = (unsigned __int16)*result;
        int v75 = v74 + v69;
        int v76 = v68 + 4;
        signed int v77 = (v68 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v67 + v74 + v69) >> 3;
        if (v77 < v64 + v67) {
          unsigned int v73 = (v68 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v67 + v74 + v69) >> 3;
        }
        if (v77 <= v67 - v64) {
          __int16 v78 = v67 - v64;
        }
        else {
          __int16 v78 = v73;
        }
        result[-3 * a3] = v78;
        signed int v79 = v68 - v64;
        LOWORD(v80) = v64 + v68;
        signed int v81 = (v75 + v68 + v67 + 2) >> 2;
        if (v81 < v64 + v68) {
          unsigned int v80 = (v75 + v68 + v67 + 2) >> 2;
        }
        if (v81 > v79) {
          LOWORD(v79) = v80;
        }
        result[-2 * a3] = v79;
        signed int v82 = v69 - v64;
        signed int v83 = (v67 + 2 * v69 + 2 * v68 + 2 * v74 + v70 + 4) >> 3;
        if (v83 >= v64 + v69) {
          __int16 v84 = v64 + v69;
        }
        else {
          __int16 v84 = v83;
        }
        if (v83 > v82) {
          LOWORD(v82) = v84;
        }
        result[-a3] = v82;
        signed int v85 = v74 - v64;
        LOWORD(v86) = v64 + v74;
        signed int v87 = (v76 + 2 * v69 + 2 * v74 + 2 * v70 + v71) >> 3;
        if (v87 < v64 + v74) {
          unsigned int v86 = (v76 + 2 * v69 + 2 * v74 + 2 * v70 + v71) >> 3;
        }
        if (v87 > v85) {
          LOWORD(v85) = v86;
        }
        *uint64_t result = v85;
        signed int v88 = v70 - v64;
        LOWORD(v89) = v64 + v70;
        int v90 = v71 + v70 + v75;
        signed int v91 = (v90 + 2) >> 2;
        if (v91 < v64 + v70) {
          unsigned int v89 = (v90 + 2) >> 2;
        }
        if (v91 > v88) {
          LOWORD(v88) = v89;
        }
        result[a3] = v88;
        signed int v92 = v71 - v64;
        signed int v93 = v64 + v71;
        signed int v94 = (v90 + 2 * v71 + 2 * v72 + 4) >> 3;
        if (v94 >= v93) {
          __int16 v95 = v93;
        }
        else {
          __int16 v95 = v94;
        }
        if (v94 <= v92) {
          __int16 v96 = v92;
        }
        else {
          __int16 v96 = v95;
        }
        result[v9] = v96;
        uint64_t result = (_WORD *)((char *)result + v65);
        --v66;
      }
      while (v66);
    }
  }
  return result;
}

_WORD *sub_1D0CCA3CC(_WORD *result, uint64_t a2, int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v9 = result;
    for (int i = 0; i < a5; i += 4)
    {
      sub_1D0CC9ED4(v9, 2, a2, a3, a4);
      uint64_t result = sub_1D0CC9ED4(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

uint64_t sub_1D0CCA45C(uint64_t result)
{
  *(void *)(result + 80) = sub_1D0D5B118;
  *(void *)(result + 72) = sub_1D0D5AC08;
  return result;
}

uint64_t sub_1D0CCA480(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 128);
  *(void *)(result + 112) = sub_1D0CCAAB4;
  *(void *)(result + 104) = sub_1D0CCA52C;
  uint64_t v2 = sub_1D0D5EFC8;
  if (v1 >= 2) {
    size_t v3 = sub_1D0D5EE04;
  }
  else {
    size_t v3 = sub_1D0D5EEE8;
  }
  int v4 = (uint64_t (*)(uint64_t, int, int, uint64_t, int, uint64_t))sub_1D0C5DCD8;
  if (v1 == 2) {
    int v4 = sub_1D0D5E730;
  }
  if (v1 < 3) {
    uint64_t v2 = sub_1D0D5F060;
  }
  *(void *)(result + 88) = v3;
  *(void *)(result + 96) = v2;
  if (v1 == 3) {
    int v5 = sub_1D0D5E200;
  }
  else {
    int v5 = v4;
  }
  *(void *)(result + 48) = v5;
  return result;
}

_WORD *sub_1D0CCA52C(_WORD *result, uint64_t a2, unsigned int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = 8 * a2;
    do
    {
      sub_1D0CCA5C8(v9, a2, 2, a3, a4);
      uint64_t result = sub_1D0CCA5C8(v9 + 1, a2, 2, a3, a4);
      v10 += 4;
      uint64_t v9 = (_WORD *)((char *)v9 + v11);
    }
    while (v10 < a5);
  }
  return result;
}

_WORD *sub_1D0CCA5C8(_WORD *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5 = (unsigned __int16)result[-2 * a3];
  if (a3 < 1)
  {
    int v11 = (unsigned __int16)*result;
    int v6 = (unsigned __int16)result[-a3];
    int v12 = v11 + v5 - 2 * v6;
    if (v12 >= 0) {
      int v8 = v12;
    }
    else {
      int v8 = -v12;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    if (a3 < 0)
    {
      int v13 = (unsigned __int16)result[a3] - 2 * v10 + (unsigned __int16)result[3 * a3];
      if (v13 < 0) {
        int v13 = -v13;
      }
      uint64_t v14 = &result[3 * a2];
      int v15 = v14[-2 * a3];
      char v20 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    int v6 = (unsigned __int16)result[-a3];
    int v7 = v6 - 2 * v5 + (unsigned __int16)result[-3 * a3];
    if (v7 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = -v7;
    }
    uint64_t v9 = 2 * a3;
    int v10 = (unsigned __int16)result[2 * a3];
    int v11 = (unsigned __int16)*result;
  }
  int v13 = v11 + v10 - 2 * (unsigned __int16)result[a3];
  if (v13 < 0) {
    int v13 = -v13;
  }
  uint64_t v14 = &result[3 * a2];
  int v15 = v14[-2 * a3];
  if (a3 > 0)
  {
    int v16 = v14[-a3];
    int v17 = v16 - 2 * v15 + v14[-3 * a3];
    if (v17 < 0) {
      int v17 = -v17;
    }
    int v18 = v14[v9];
    int v19 = *v14;
    goto LABEL_24;
  }
  char v20 = 0;
LABEL_20:
  int v19 = *v14;
  int v16 = v14[-a3];
  int v17 = v19 + v15 - 2 * v16;
  if (v17 < 0) {
    int v17 = -v17;
  }
  int v18 = v14[v9];
  if (v20)
  {
    int v21 = v14[a3] - 2 * v18 + v14[3 * a3];
    goto LABEL_25;
  }
LABEL_24:
  int v21 = v19 + v18 - 2 * v14[a3];
LABEL_25:
  if (v21 < 0) {
    int v21 = -v21;
  }
  if (v21 + v17 + v13 + v8 < (int)a4)
  {
    if (a4 >> 2 <= 2 * (v13 + v8)) {
      goto LABEL_37;
    }
    int v22 = (unsigned __int16)result[-4 * a3] - v6;
    if (v22 < 0) {
      int v22 = v6 - (unsigned __int16)result[-4 * a3];
    }
    int v23 = (unsigned __int16)result[3 * a3] - v11;
    if (v23 < 0) {
      int v23 = v11 - (unsigned __int16)result[3 * a3];
    }
    if (v22 + v23 >= a4 >> 3)
    {
LABEL_37:
      BOOL v25 = 1;
    }
    else
    {
      int v24 = v6 - v11;
      if (v24 < 0) {
        int v24 = -v24;
      }
      BOOL v25 = v24 >= (5 * a5 + 1) >> 1;
    }
    if (a4 >> 2 <= 2 * (v21 + v17)) {
      goto LABEL_49;
    }
    int v26 = v14[3 * a3];
    int v27 = v14[-4 * a3] - v16;
    if (v27 < 0) {
      int v27 = -v27;
    }
    int v28 = v26 - v19;
    if (v28 < 0) {
      int v28 = -v28;
    }
    if (v27 + v28 >= a4 >> 3) {
      goto LABEL_49;
    }
    int v29 = v16 - v19;
    if (v16 - v19 < 0) {
      int v29 = v19 - v16;
    }
    if (v29 >= (5 * a5 + 1) >> 1) {
      BOOL v25 = 1;
    }
    if (v25)
    {
LABEL_49:
      int v30 = v17 + v8;
      int v31 = (int)(a4 + (a4 >> 1)) >> 3;
      int v32 = a5 >> 1;
      int v33 = -(a5 >> 1);
      uint64_t v34 = 4;
      do
      {
        int v35 = (unsigned __int16)result[-2 * a3];
        int v36 = (unsigned __int16)result[-a3];
        int v37 = (unsigned __int16)*result;
        int v38 = (unsigned __int16)result[a3];
        int v39 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        if (v39 >= 0) {
          int v40 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
        }
        else {
          int v40 = -v39;
        }
        if (v40 < 10 * a5)
        {
          if (v39 >= a5) {
            int v42 = a5;
          }
          else {
            int v42 = (9 * (v37 - v36) - 3 * (v38 - v35) + 8) >> 4;
          }
          if (v39 <= -a5) {
            int v43 = -a5;
          }
          else {
            int v43 = v42;
          }
          int v44 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          if (v44 >= v32) {
            int v45 = a5 >> 1;
          }
          else {
            int v45 = (int)(v43 - v35 + (((unsigned __int16)result[-3 * a3] + v36 + 1) >> 1)) >> 1;
          }
          if (v44 <= v33) {
            int v46 = -(a5 >> 1);
          }
          else {
            int v46 = v45;
          }
          int v47 = v46 + v35;
          if (v47 >= 255) {
            int v47 = 255;
          }
          int v48 = v47 & ~(v47 >> 31);
          if (v30 < v31) {
            LOWORD(v35) = v48;
          }
          int v41 = (unsigned __int16)result[v9];
          int v49 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          if (v49 >= v32) {
            int v50 = a5 >> 1;
          }
          else {
            int v50 = (int)(((v37 + v41 + 1) >> 1) - v38 - v43) >> 1;
          }
          if (v49 <= v33) {
            int v51 = -(a5 >> 1);
          }
          else {
            int v51 = v50;
          }
          int v52 = v51 + v38;
          if (v52 >= 255) {
            int v52 = 255;
          }
          int v53 = v52 & ~(v52 >> 31);
          if (v21 + v13 < v31) {
            LOWORD(v38) = v53;
          }
          int v54 = v43 + v36;
          if (v54 >= 255) {
            int v54 = 255;
          }
          int v55 = v54 & ~(v54 >> 31);
          int v56 = v37 - v43;
          if (v56 >= 255) {
            int v56 = 255;
          }
          result[-2 * a3] = v35;
          result[-a3] = v55;
          *uint64_t result = v56 & ~(unsigned __int16)(v56 >> 31);
          result[a3] = v38;
        }
        result += a2;
        --v34;
      }
      while (v34);
    }
    else
    {
      int v57 = 2 * a5;
      uint64_t v58 = 2 * a2;
      uint64_t v59 = 4;
      do
      {
        int v60 = (unsigned __int16)result[-3 * a3];
        int v61 = (unsigned __int16)result[-2 * a3];
        int v62 = (unsigned __int16)result[-a3];
        int v63 = (unsigned __int16)result[a3];
        int v64 = (unsigned __int16)result[v9];
        int v65 = (unsigned __int16)result[3 * a3];
        LOWORD(v66) = v57 + v60;
        int v67 = (unsigned __int16)*result;
        int v68 = v67 + v62;
        int v69 = v61 + 4;
        signed int v70 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        if (v70 < v57 + v60) {
          unsigned int v66 = (v61 + 4 + 2 * (unsigned __int16)result[-4 * a3] + 3 * v60 + v67 + v62) >> 3;
        }
        if (v70 <= v60 - v57) {
          __int16 v71 = v60 - v57;
        }
        else {
          __int16 v71 = v66;
        }
        result[-3 * a3] = v71;
        signed int v72 = v61 - v57;
        LOWORD(v73) = v57 + v61;
        signed int v74 = (v68 + v61 + v60 + 2) >> 2;
        if (v74 < v57 + v61) {
          unsigned int v73 = (v68 + v61 + v60 + 2) >> 2;
        }
        if (v74 > v72) {
          LOWORD(v72) = v73;
        }
        result[-2 * a3] = v72;
        signed int v75 = v62 - v57;
        signed int v76 = (v60 + 2 * v62 + 2 * v61 + 2 * v67 + v63 + 4) >> 3;
        if (v76 >= v57 + v62) {
          __int16 v77 = v57 + v62;
        }
        else {
          __int16 v77 = v76;
        }
        if (v76 > v75) {
          LOWORD(v75) = v77;
        }
        result[-a3] = v75;
        signed int v78 = v67 - v57;
        LOWORD(v79) = v57 + v67;
        signed int v80 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        if (v80 < v57 + v67) {
          unsigned int v79 = (v69 + 2 * v62 + 2 * v67 + 2 * v63 + v64) >> 3;
        }
        if (v80 > v78) {
          LOWORD(v78) = v79;
        }
        *uint64_t result = v78;
        signed int v81 = v63 - v57;
        LOWORD(v82) = v57 + v63;
        int v83 = v64 + v63 + v68;
        signed int v84 = (v83 + 2) >> 2;
        if (v84 < v57 + v63) {
          unsigned int v82 = (v83 + 2) >> 2;
        }
        if (v84 > v81) {
          LOWORD(v81) = v82;
        }
        result[a3] = v81;
        signed int v85 = v64 - v57;
        signed int v86 = v57 + v64;
        signed int v87 = (v83 + 2 * v64 + 2 * v65 + 4) >> 3;
        if (v87 >= v86) {
          __int16 v88 = v86;
        }
        else {
          __int16 v88 = v87;
        }
        if (v87 <= v85) {
          __int16 v89 = v85;
        }
        else {
          __int16 v89 = v88;
        }
        result[v9] = v89;
        uint64_t result = (_WORD *)((char *)result + v58);
        --v59;
      }
      while (v59);
    }
  }
  return result;
}

_WORD *sub_1D0CCAAB4(_WORD *result, uint64_t a2, unsigned int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v9 = result;
    for (int i = 0; i < a5; i += 4)
    {
      sub_1D0CCA5C8(v9, 2, a2, a3, a4);
      uint64_t result = sub_1D0CCA5C8(v9 + 1, 2, a2, a3, a4);
      v9 += 8;
    }
  }
  return result;
}

uint64_t sub_1D0CCAB44(uint64_t result)
{
  *(void *)(result + 80) = sub_1D0D5A794;
  *(void *)(result + 72) = sub_1D0D5A28C;
  return result;
}

void *sub_1D0CCAB68(void *result, uint64_t a2)
{
  uint64_t v2 = sub_1D0CCBC28;
  size_t v3 = sub_1D0CCC7B8;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    uint64_t v2 = sub_1D0CCBC28;
    size_t v3 = sub_1D0CCC7B8;
    if (!*(unsigned char *)(*(void *)(a2 + 16) + 283))
    {
      uint64_t v2 = sub_1D0CCC36C;
      size_t v3 = sub_1D0CCCD78;
    }
  }
  *uint64_t result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1D0CCBA58;
  result[5] = 0;
  result[8] = sub_1D0CCB318;
  result[6] = sub_1D0CCAC2C;
  result[7] = sub_1D0CCAC2C;
  return result;
}

void sub_1D0CCAC2C(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void **)(a1 + 8);
  bzero(a6, 0x380uLL);
  signed int v86 = v9;
  uint64_t v77 = v9[96];
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  memset(v97, 0, sizeof(v97));
  memset(v96, 0, sizeof(v96));
  uint64_t v84 = (a5 >> 3);
  int v78 = a5;
  int v79 = a4 >> 3;
  int v93 = 2 * v10;
  int v94 = 2 * v11;
  memset(v95, 0, sizeof(v95));
  int v87 = a4;
  if (a5 >= 8)
  {
    uint64_t v12 = 0;
    if (v79 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v79;
    }
    uint64_t v81 = v13;
    if ((int)v84 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v84;
    }
    uint64_t v83 = v14;
    __int16 v89 = v98;
    signed int v91 = a6 + 768;
    __int16 v88 = v99;
    do
    {
      if (a4 >= 8)
      {
        int v15 = a3 + 8 * v12;
        uint64_t v16 = v81;
        int v17 = (__int16 *)(v86[97] + 2 * (((uint64_t)a2 >> 3) + v86[96] * ((uint64_t)v15 >> 3)) + 2);
        int v18 = v88;
        int v19 = v89;
        char v20 = v91;
        int v21 = a2 + 8;
        do
        {
          uint64_t v22 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, (v21 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)), (v15 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)));
          int v23 = (*(v17 - 1) >> 9) + (*v17 >> 9) + 1;
          *int v18 = *(unsigned char *)(v22 + 661) + (v23 >> 1) - 2;
          v18 += 8;
          int v24 = *(char *)(v22 + 660) + (v23 >> 1);
          if (v24 >= 51) {
            int v24 = 51;
          }
          if (v24 <= 15) {
            int v24 = 15;
          }
          *char v20 = byte_1D0DAE593[v24 - 15];
          v20 += 8;
          char v25 = *(unsigned char *)(v22 + 661) + 2;
          int v26 = (v23 + v94) >> 1;
          if (v26 >= 51) {
            LOBYTE(v26) = 51;
          }
          *(v19 - 64) = v25 + v26;
          int v27 = (v23 + v93) >> 1;
          if (v27 >= 51) {
            LOBYTE(v27) = 51;
          }
          *int v19 = v25 + v27;
          v19 += 8;
          v21 += 8;
          ++v17;
          --v16;
        }
        while (v16);
      }
      __int16 v89 = (_OWORD *)((char *)v89 + 1);
      ++v91;
      __int16 v88 = (_OWORD *)((char *)v88 + 1);
      ++v12;
      a4 = v87;
    }
    while (v12 != v83);
  }
  uint64_t v29 = v84;
  int v28 = a3;
  int v30 = a3 == 0;
  if ((int)v84 > v30)
  {
    if (v79 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v79;
    }
    unint64_t v32 = (unint64_t)v95 | (8 * (a3 == 0));
    int v33 = &a6[8 * (a3 == 0) + 832];
    uint64_t v90 = a3 == 0;
    unint64_t v34 = (unint64_t)v96 & 0xFFFFFFFFFFFFFFF7 | (8 * v90);
    do
    {
      if (a4 >= 8)
      {
        uint64_t v35 = 0;
        int v92 = a3 + 8 * v90;
        uint64_t v36 = ((uint64_t)a2 >> 3) + v86[96] * ((uint64_t)v92 >> 3);
        uint64_t v37 = v86[97];
        uint64_t v38 = v37 + 2 * v36;
        uint64_t v39 = v37 - 2 * v77 + 2 * v36;
        int v40 = a2;
        do
        {
          unint64_t v41 = v34;
          uint64_t v42 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, (v40 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)), (v92 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)));
          unint64_t v34 = v41;
          int v43 = (*(__int16 *)(v39 + 2 * v35) >> 9) + (*(__int16 *)(v38 + 2 * v35) >> 9) + 1;
          *(unsigned char *)(v41 + v35) = *(unsigned char *)(v42 + 661) + (v43 >> 1) - 2;
          int v44 = *(char *)(v42 + 660) + (v43 >> 1);
          if (v44 >= 51) {
            int v44 = 51;
          }
          if (v44 <= 15) {
            int v44 = 15;
          }
          v33[v35] = byte_1D0DAE593[v44 - 15];
          char v45 = *(unsigned char *)(v42 + 661) + 2;
          int v46 = (v43 + v94) >> 1;
          if (v46 >= 51) {
            LOBYTE(v46) = 51;
          }
          *(unsigned char *)(v32 + v35) = v45 + v46;
          int v47 = (v43 + v93) >> 1;
          if (v47 >= 51) {
            LOBYTE(v47) = 51;
          }
          *(unsigned char *)(v32 + v35++ + 64) = v45 + v47;
          v40 += 8;
        }
        while (v31 != v35);
      }
      v32 += 8;
      v33 += 8;
      v34 += 8;
      uint64_t v29 = v84;
      ++v90;
      a4 = v87;
    }
    while (v90 != v84);
    int v28 = a3;
    int v30 = a3 == 0;
  }
  if (a4 >= 8)
  {
    uint64_t v48 = 0;
    LODWORD(v49) = v78 >> 2;
    if (v78 >> 2 <= 1) {
      uint64_t v49 = 1;
    }
    else {
      uint64_t v49 = v49;
    }
    if (v79 <= 1) {
      uint64_t v50 = 1;
    }
    else {
      uint64_t v50 = v79;
    }
    int v51 = a6;
    int v52 = (unsigned __int8 *)(a6 + 257);
    do
    {
      if (v78 >= 4)
      {
        uint64_t v53 = 0;
        uint64_t v54 = v86[121] + ((uint64_t)v28 >> 2) + v86[117] * ((uint64_t)(a2 + 8 + 8 * (int)v48) >> 3);
        do
        {
          if (*(unsigned char *)(v54 + v53))
          {
            int v55 = *((char *)v99 + 8 * v48 + (v53 >> 1)) + 2 * *(unsigned __int8 *)(v54 + v53);
            if (v55 >= 53) {
              int v55 = 53;
            }
            if (v55 <= 17) {
              int v55 = 17;
            }
            v51[v53] = byte_1D0DAE5C4[v55 - 17];
          }
          ++v53;
        }
        while (v49 != v53);
        uint64_t v56 = 0;
        int v57 = v52;
        do
        {
          if (*(unsigned __int8 *)(v54 + v56) >= 2u)
          {
            uint64_t v58 = (char *)v97 + 8 * v48 + (v56 >> 1);
            int v59 = *v58;
            if (v59 >= 53) {
              int v59 = 53;
            }
            if (v59 <= 17) {
              int v59 = 17;
            }
            unsigned __int8 v60 = byte_1D0DAE5C4[v59 - 17];
            int v61 = v58[64];
            if (v61 >= 53) {
              int v61 = 53;
            }
            if (v61 <= 17) {
              int v61 = 17;
            }
            unsigned __int8 v62 = byte_1D0DAE5C4[v61 - 17];
            *(v57 - 1) = v60;
            unsigned __int8 *v57 = v62;
          }
          ++v56;
          v57 += 2;
        }
        while (v49 != v56);
      }
      ++v48;
      v51 += 16;
      v52 += 32;
    }
    while (v48 != v50);
  }
  if ((int)v29 > v30)
  {
    uint64_t v63 = v28 == 0;
    LODWORD(v64) = a4 >> 2;
    if (a4 >> 2 <= 1) {
      uint64_t v64 = 1;
    }
    else {
      uint64_t v64 = v64;
    }
    int v65 = &a6[16 * (v28 == 0) + 128];
    unsigned int v66 = &a6[32 * v63 + 513];
    do
    {
      if (a4 >= 4)
      {
        uint64_t v67 = 0;
        uint64_t v68 = v86[118] + ((uint64_t)a2 >> 2) + v86[116] * ((uint64_t)(v28 + 8 * (int)v63) >> 3);
        do
        {
          if (*(unsigned char *)(v68 + v67))
          {
            int v69 = *((char *)v96 + 8 * v63 + (v67 >> 1)) + 2 * *(unsigned __int8 *)(v68 + v67);
            if (v69 >= 53) {
              int v69 = 53;
            }
            if (v69 <= 17) {
              int v69 = 17;
            }
            v65[v67] = byte_1D0DAE5C4[v69 - 17];
          }
          ++v67;
        }
        while (v64 != v67);
        uint64_t v70 = 0;
        __int16 v71 = (unsigned __int8 *)v66;
        do
        {
          if (*(unsigned __int8 *)(v68 + v70) >= 2u)
          {
            signed int v72 = (char *)v95 + 8 * v63 + (v70 >> 1);
            int v73 = *v72;
            if (v73 >= 53) {
              int v73 = 53;
            }
            if (v73 <= 17) {
              int v73 = 17;
            }
            unsigned __int8 v74 = byte_1D0DAE5C4[v73 - 17];
            int v75 = v72[64];
            if (v75 >= 53) {
              int v75 = 53;
            }
            if (v75 <= 17) {
              int v75 = 17;
            }
            unsigned __int8 v76 = byte_1D0DAE5C4[v75 - 17];
            *(v71 - 1) = v74;
            *__int16 v71 = v76;
          }
          ++v70;
          v71 += 2;
        }
        while (v64 != v70);
      }
      ++v63;
      v65 += 16;
      v66 += 32;
    }
    while (v63 != v29);
  }
}

void sub_1D0CCB318(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 8);
  char v98 = *(unsigned char *)(a1 + 661);
  char v13 = v98 + 2;
  int v14 = *(char *)(a1 + 660);
  bzero(a6, 0x2F0uLL);
  uint64_t v15 = *(void *)(v12 + 768);
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = *(char *)(v16 + 14);
  LODWORD(v16) = *(char *)(v16 + 15);
  v112[0] = v17;
  v112[1] = v16;
  uint64_t v111 = 0;
  memset(v110, 0, sizeof(v110));
  uint64_t v109 = 0;
  memset(v108, 0, sizeof(v108));
  memset(v107, 0, sizeof(v107));
  memset(&v106[6], 0, 48);
  if (a2) {
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v105 = v18;
  if (a3) {
    uint64_t v19 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v19 = 0;
  }
  int v102 = a3;
  int v103 = a2;
  int v96 = a5;
  BOOL v97 = a4 + a2 < *(_DWORD *)(v12 + 520);
  BOOL v95 = a5 + a3 < *(_DWORD *)(v12 + 524);
  uint64_t v20 = (a5 >> 3);
  int v100 = a4;
  uint64_t v21 = (a4 >> 3);
  memset(v106, 0, 96);
  int v104 = v19;
  if ((int)v20 > (int)v19)
  {
    BOOL v22 = a2 == 0;
    uint64_t v101 = (uint64_t)a2 >> 3;
    uint64_t v23 = v19 << 63 >> 63;
    do
    {
      uint64_t v24 = v23 + 1;
      if ((int)v21 > v22)
      {
        uint64_t v25 = *(void *)(v12 + 800) + 2 * (v101 + *(void *)(v12 + 768) * ((uint64_t)(v102 + 8 * (int)v23) >> 3));
        uint64_t v26 = v22;
        do
        {
          int v27 = (*(__int16 *)(v25 + 2 * v26) >> 9) + (*(__int16 *)(v25 + 2 * v26 - 2) >> 9);
          *((unsigned char *)v110 + 9 * v26 + v24) = v98 - 2 + ((v27 + 1) >> 1);
          int v28 = v14 + ((v27 + 1) >> 1);
          if (v28 >= 51) {
            int v28 = 51;
          }
          if (v28 <= 15) {
            int v28 = 15;
          }
          a6[10 * v26 + 592 + v24] = byte_1D0DAE593[v28 - 15];
          if ((v26 & 1) == 0)
          {
            uint64_t v29 = 0;
            char v30 = 1;
            do
            {
              char v31 = v30;
              int v32 = v27 + 2 * v112[v29];
              int v33 = (v32 + 1) >> 1;
              if (v32 >= 59)
              {
                if ((v32 + 1) < 0x74) {
                  LOBYTE(v33) = byte_1D0DAE600[v33 - 30];
                }
                else {
                  LOBYTE(v33) = v33 - 6;
                }
              }
              char v30 = 0;
              *((unsigned char *)v107 + 72 * v29 + 9 * (v26 >> 1) + v24) = v33 + v13;
              uint64_t v29 = 1;
            }
            while ((v31 & 1) != 0);
          }
          ++v26;
        }
        while (v26 != v21);
      }
      uint64_t v23 = v24;
    }
    while (v24 != v20);
  }
  int v99 = v102 == 0;
  if ((int)v20 > v99)
  {
    uint64_t v34 = v102 == 0;
    do
    {
      if ((int)v21 > (int)v105)
      {
        uint64_t v35 = *(void *)(v12 + 800)
            + 2 * (((uint64_t)v103 >> 3) + *(void *)(v12 + 768) * ((uint64_t)(v102 + 8 * (int)v34) >> 3));
        uint64_t v36 = v105 << 63 >> 63;
        do
        {
          int v37 = (*(__int16 *)(v35 + 2 * v36) >> 9) + (*(__int16 *)(v35 + 2 * (v36 - v15)) >> 9);
          ++v36;
          *((unsigned char *)v108 + 9 * v34 + v36) = v98 - 2 + ((v37 + 1) >> 1);
          int v38 = v14 + ((v37 + 1) >> 1);
          if (v38 >= 51) {
            int v38 = 51;
          }
          if (v38 <= 15) {
            int v38 = 15;
          }
          a6[10 * v34 + 672 + v36] = byte_1D0DAE593[v38 - 15];
          if ((v34 & 1) == 0)
          {
            uint64_t v39 = 0;
            char v40 = 1;
            do
            {
              char v41 = v40;
              int v42 = v37 + 2 * v112[v39];
              int v43 = (v42 + 1) >> 1;
              if (v42 >= 59)
              {
                if ((v42 + 1) < 0x74) {
                  LOBYTE(v43) = byte_1D0DAE600[v43 - 30];
                }
                else {
                  LOBYTE(v43) = v43 - 6;
                }
              }
              char v40 = 0;
              *((unsigned char *)v106 + 72 * v39 + 9 * (v34 >> 1) + v36) = v43 + v13;
              uint64_t v39 = 1;
            }
            while ((v41 & 1) != 0);
          }
        }
        while (v36 != (uint64_t)v100 >> 3);
      }
      ++v34;
    }
    while (v34 != v20);
  }
  if ((int)v21 > (v103 == 0))
  {
    int v44 = (v96 >> 2) - v95;
    uint64_t v45 = v103 == 0;
    int v46 = &a6[20 * v45];
    uint64_t v47 = ((uint64_t)v102 >> 2) - (v104 & 1);
    do
    {
      uint64_t v48 = *(void *)(v12 + 936) * ((uint64_t)(v103 + 8 * (int)v45) >> 3);
      uint64_t v49 = *(void *)(v12 + 968);
      if (v44 > v104)
      {
        uint64_t v50 = (unsigned __int8 *)(v49 + v47 + v48);
        uint64_t v51 = 2 - (v104 & 1);
        uint64_t v52 = (v104 & 1) + (uint64_t)v44;
        do
        {
          int v54 = *v50++;
          int v53 = v54;
          if (v54)
          {
            int v55 = *((char *)v110 + 9 * v45 + ((int)v51 >> 1)) + 2 * v53;
            if (v55 >= 53) {
              int v55 = 53;
            }
            if (v55 <= 17) {
              int v55 = 17;
            }
            v46[v51] = byte_1D0DAE5C4[v55 - 17];
          }
          ++v51;
          --v52;
        }
        while (v52);
      }
      if ((v45 & 1) == 0 && v44 > v104)
      {
        uint64_t v56 = v45 >> 1;
        int v57 = (unsigned __int8 *)(v49 + v47 + v48);
        int v58 = v104 + 2;
        int v59 = 2 * v104 + 3;
        uint64_t v60 = (v104 & 1) + (uint64_t)v44;
        do
        {
          unsigned int v61 = *v57++;
          if (v61 >= 2)
          {
            unsigned __int8 v62 = (char *)v107 + 9 * v56 + (v58 >> 1);
            int v63 = *v62;
            if (v63 >= 53) {
              int v63 = 53;
            }
            if (v63 <= 17) {
              int v63 = 17;
            }
            unsigned __int8 v64 = byte_1D0DAE5C4[v63 - 17];
            int v65 = v62[72];
            if (v65 >= 53) {
              int v65 = 53;
            }
            if (v65 <= 17) {
              int v65 = 17;
            }
            unsigned __int8 v66 = byte_1D0DAE5C4[v65 - 17];
            uint64_t v67 = &a6[34 * v56 + 320];
            v67[v59 - 1] = v64;
            v67[v59] = v66;
          }
          v59 += 2;
          ++v58;
          --v60;
        }
        while (v60);
      }
      ++v45;
      v46 += 20;
    }
    while (v45 != v21);
  }
  if ((int)v20 > v99)
  {
    int v68 = (v100 >> 2) - v97;
    uint64_t v69 = v102 == 0;
    uint64_t v70 = v105 & 1;
    uint64_t v71 = v70 + v68;
    signed int v72 = &a6[20 * v69 - v70 + 162];
    uint64_t v73 = ((uint64_t)v103 >> 2) - v70;
    do
    {
      uint64_t v74 = *(void *)(v12 + 928) * ((uint64_t)(v102 + 8 * (int)v69) >> 3);
      uint64_t v75 = *(void *)(v12 + 944);
      if (v68 > (int)v105)
      {
        unsigned __int8 v76 = (unsigned __int8 *)(v75 + v73 + v74);
        int v77 = v105 + 2;
        int v78 = v72;
        uint64_t v79 = v71;
        do
        {
          int v81 = *v76++;
          int v80 = v81;
          if (v81)
          {
            int v82 = *((char *)v108 + 9 * v69 + (v77 >> 1)) + 2 * v80;
            if (v82 >= 53) {
              int v82 = 53;
            }
            if (v82 <= 17) {
              int v82 = 17;
            }
            *int v78 = byte_1D0DAE5C4[v82 - 17];
          }
          ++v78;
          ++v77;
          --v79;
        }
        while (v79);
      }
      if ((v69 & 1) == 0 && v68 > (int)v105)
      {
        uint64_t v83 = v69 >> 1;
        uint64_t v84 = (unsigned __int8 *)(v75 + v73 + v74);
        int v85 = v105 + 2;
        int v86 = 2 * v105 + 3;
        uint64_t v87 = v71;
        do
        {
          unsigned int v88 = *v84++;
          if (v88 >= 2)
          {
            __int16 v89 = (char *)v106 + 9 * v83 + (v85 >> 1);
            int v90 = *v89;
            if (v90 >= 53) {
              int v90 = 53;
            }
            if (v90 <= 17) {
              int v90 = 17;
            }
            unsigned __int8 v91 = byte_1D0DAE5C4[v90 - 17];
            int v92 = v89[72];
            if (v92 >= 53) {
              int v92 = 53;
            }
            if (v92 <= 17) {
              int v92 = 17;
            }
            unsigned __int8 v93 = byte_1D0DAE5C4[v92 - 17];
            int v94 = &a6[34 * v83 + 456];
            v94[v86 - 1] = v91;
            v94[v86] = v93;
          }
          v86 += 2;
          ++v85;
          --v87;
        }
        while (v87);
      }
      ++v69;
      v72 += 20;
    }
    while (v69 != v20);
  }
}

uint64_t sub_1D0CCBA58(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(v6 + 520);
  int v8 = *(_DWORD *)(v6 + 524);
  unsigned int v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(unsigned char *)(v5 + 2113);
  uint64_t v10 = (a3 << v5);
  uint64_t v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7) {
    uint64_t v12 = (v7 - v10);
  }
  else {
    uint64_t v12 = v9;
  }
  if ((int)(v11 + v9) >= v8) {
    uint64_t v13 = (v8 - v11);
  }
  else {
    uint64_t v13 = v9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  uint64_t v15 = *(void *)(v6 + 416);
  uint64_t v28 = (v15 * (int)v11 + (int)v10) << *(unsigned char *)(v6 + 531);
  uint64_t v29 = *(void *)(v6 + 400);
  uint64_t v16 = ((int)v12 >> 3);
  if ((int)v16 > (v10 == 0))
  {
    uint64_t v17 = v16 - (v10 == 0);
    uint64_t v18 = &v30[10 * (v10 == 0)];
    uint64_t v19 = &v30[5 * (v10 == 0) + 296];
    uint64_t v20 = v29 + v28 + 16 * (v10 == 0) - 16 * v15;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 16;
      --v17;
    }
    while (v17);
  }
  uint64_t v21 = ((int)v13 >> 3);
  if ((int)v21 > (v11 == 0))
  {
    BOOL v22 = v11 == 0;
    uint64_t v23 = (v12 + 8);
    uint64_t v24 = v21 - v22;
    uint64_t v25 = &v30[10 * v22 + 80];
    uint64_t v26 = &v30[5 * v22 + 336];
    uint64_t v27 = v28 + 16 * v15 * v22 + v29 - 16;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 16 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

void (**sub_1D0CCBC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63))(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *)
{
  uint64_t result = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))MEMORY[0x1F4188790](a1);
  uint64_t v69 = result;
  uint64_t v70 = *(void *)(v66 + 8);
  uint64_t v71 = *(void *)(v66 + 16);
  int v72 = *(_DWORD *)(v70 + 520);
  int v73 = *(_DWORD *)(v70 + 524);
  uint64_t v74 = *(void *)(v70 + 416);
  uint64_t v75 = *(void *)(v70 + 424);
  uint64_t v138 = v70;
  uint64_t v139 = v66;
  int v76 = *(unsigned __int8 *)(v71 + 2117);
  LOBYTE(v70) = *(unsigned char *)(v71 + 2113);
  int v77 = v67 << v70;
  int v78 = v68 << v70;
  int v79 = v78 - 16;
  int v128 = v72;
  if (*(_DWORD *)(v71 + 2120) - 1 == v67)
  {
    BOOL v80 = v78 < 16;
    if (v78 >= 16) {
      int v81 = v78 - 16;
    }
    else {
      int v81 = 0;
    }
    if (v80) {
      int v82 = v79;
    }
    else {
      int v82 = 0;
    }
    int v83 = v82 + v76;
    if (v77 <= 63) {
      unsigned int v84 = 0;
    }
    else {
      unsigned int v84 = (v77 - 1) & 0xFFFFFFC0;
    }
    signed int v129 = v84;
    int v132 = v72 - v84;
    int v85 = v83 + v81 - 8;
    if (v83 + v81 < 8) {
      int v85 = 0;
    }
    *((_DWORD *)result + 30) = v85;
    if (*(_DWORD *)(*(void *)(v66 + 16) + 2124) - 1 == v68)
    {
      int v83 = v73 - v81;
      *((_DWORD *)result + 30) = v73;
    }
  }
  else
  {
    if (!v67 || (v77 & 0x3F) != 0) {
      return result;
    }
    BOOL v86 = v78 < 16;
    if (v78 >= 16) {
      int v81 = v78 - 16;
    }
    else {
      int v81 = 0;
    }
    if (!v86) {
      int v79 = 0;
    }
    int v83 = v79 + v76;
    if (v77 >= 64) {
      int v87 = v77 - 64;
    }
    else {
      int v87 = 0;
    }
    signed int v129 = v87;
    if (v77 >= 64) {
      int v77 = 64;
    }
    int v132 = v77;
    int v88 = v73 - v81;
    if (*(_DWORD *)(v71 + 2124) - 1 == v68) {
      int v83 = v88;
    }
  }
  if (v83 >= 1)
  {
    uint64_t v89 = 0;
    uint64_t vars8 = &STACK[0x420];
    uint64_t v120 = v81;
    uint64_t vars0 = &a65;
    uint64_t v131 = 16 * v74;
    uint64_t v90 = 16 * v75;
    unint64_t v119 = v83;
    int v121 = v83;
    do
    {
      if (v83 - (int)v89 >= 64) {
        uint64_t v91 = 64;
      }
      else {
        uint64_t v91 = (v83 - v89);
      }
      uint64_t v122 = v89;
      int v92 = v89 + v120 - 8;
      uint64_t v144 = v89 + v120;
      if (!(v89 + v120)) {
        int v92 = 0;
      }
      int v143 = v92;
      int v93 = v91 + 8;
      if (!(v89 + v120)) {
        int v93 = v91;
      }
      int v142 = v93;
      if (v132 >= 1)
      {
        uint64_t v94 = 0;
        BOOL v95 = v144 == 0;
        uint64_t v140 = ((int)v91 >> 3);
        int v141 = v144 == 0;
        uint64_t v130 = v140 - v95;
        uint64_t v126 = v90 * v95;
        uint64_t v127 = v131 * v95;
        char v125 = &STACK[0x320] + 4 * v95;
        do
        {
          if (v132 - (int)v94 >= 64) {
            uint64_t v96 = 64;
          }
          else {
            uint64_t v96 = (v132 - v94);
          }
          uint64_t v97 = v94 + v129;
          uint64_t v137 = v94;
          int v145 = v96 + v129 + v94;
          uint64_t v98 = *(void *)(v138 + 416);
          uint64_t v133 = *(void *)(v138 + 400);
          char v99 = *(unsigned char *)(v138 + 531);
          v69[6](v139, v97, v144, v96, v91, &a33);
          if (v145 >= v128) {
            int v100 = v96;
          }
          else {
            int v100 = v96 + 8;
          }
          uint64_t v101 = (v97 + v98 * v144) << v99;
          unsigned int v102 = (int)v96 >> 3;
          if (v145 >= v128) {
            uint64_t v103 = v102;
          }
          else {
            uint64_t v103 = v102 + 1;
          }
          int v136 = v97;
          int v135 = v100;
          sub_1D0CCC10C(&STACK[0x4A0], v139, v97, v143, v100, v142, 0);
          uint64_t v146 = v103;
          if ((int)v103 >= 2)
          {
            uint64_t v104 = v103 - 1;
            uint64_t v105 = v133 + v101 + 16;
            int v106 = &a33;
            uint64_t v107 = &STACK[0x420];
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v69[9])(v105, v74, v107, v106, v91);
              v106 += 16;
              ++v107;
              v105 += 16;
              --v104;
            }
            while (v104);
          }
          sub_1D0CCC1C0(&STACK[0x4A0]);
          if ((int)v140 > v141)
          {
            unsigned int v108 = &STACK[0x460] + (v144 == 0);
            uint64_t v109 = v133 + v127 + v101;
            uint64_t v110 = &a49 + 2 * (v144 == 0);
            uint64_t v111 = v130;
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v69[10])(v109, v74, v108, v110, v96);
              v110 += 2;
              ++v108;
              v109 += v131;
              --v111;
            }
            while (v111);
          }
          sub_1D0CCC1C0(&STACK[0x4A0]);
          uint64_t v134 = *(void *)(v138 + 408);
          uint64_t v112 = (*(void *)(v138 + 424) * v144 + 2 * v136) << *(unsigned char *)(v138 + 531);
          sub_1D0CCC10C(&STACK[0x4A0], v139, v136, v143, v135, v142, 1u);
          uint64_t v90 = 16 * v75;
          if ((int)v146 >= 2)
          {
            uint64_t v113 = v146 - 1;
            uint64_t v114 = v134 + v112 + 32;
            unsigned int v115 = &a65;
            do
            {
              ((void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))v69[11])(v114, v75, v115, v91);
              v115 += 4;
              v114 += 32;
              --v113;
            }
            while (v113);
          }
          sub_1D0CCC1C0(&STACK[0x4A0]);
          if ((int)v140 > v141)
          {
            unint64_t v116 = v125;
            uint64_t v117 = v134 + v126 + v112;
            uint64_t v118 = v130;
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t))v69[12])(v117, v75, v116, v96);
              v116 += 4;
              v117 += 16 * v75;
              --v118;
            }
            while (v118);
          }
          uint64_t result = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1D0CCC1C0(&STACK[0x4A0]);
          uint64_t v94 = v137 + 64;
        }
        while (v137 + 64 < v132);
      }
      uint64_t v89 = v122 + 64;
      int v83 = v121;
    }
    while (v122 + 64 < v119);
  }
  return result;
}

void *sub_1D0CCC10C(void *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  __dst[18432] = a2;
  *((_DWORD *)__dst + 36866) = a3;
  *((_DWORD *)__dst + 36867) = a4;
  *((_DWORD *)__dst + 36868) = a5;
  *((_DWORD *)__dst + 36869) = a6;
  *((_DWORD *)__dst + 36870) = a7;
  if (a6 >= 1)
  {
    int v7 = (char *)__dst;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = v8 + 8 * a7;
    uint64_t v10 = *(void *)(v9 + 416);
    uint64_t v11 = (char *)(*(void *)(v9 + 400) + ((v10 * a4 + (a3 << a7)) << *(unsigned char *)(v8 + 531)));
    size_t v12 = 2 * (a5 << (a7 != 0));
    uint64_t v13 = a6;
    uint64_t v14 = 2 * v10;
    do
    {
      __dst = memcpy(v7, v11, v12);
      v11 += v14;
      v7 += v12;
      --v13;
    }
    while (v13);
  }
  return __dst;
}

_DWORD *sub_1D0CCC1C0(_DWORD *result)
{
  unsigned int v1 = result + 36864;
  int v2 = result[36869];
  uint64_t v3 = (int)result[36870];
  char v21 = result[36870] != 0;
  if (v2 >= 1)
  {
    int v4 = result;
    uint64_t v5 = *(void *)(*(void *)v1 + 8);
    uint64_t v6 = v5 + 8 * v3;
    uint64_t v7 = *(void *)(v6 + 416);
    int v23 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 32) + 19);
    int v24 = 0;
    int v22 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 16) + 283);
    int v8 = result[36868];
    uint64_t v20 = 16 * (v8 << v21);
    uint64_t v9 = 2 * (v8 << v21);
    uint64_t v10 = *(void *)(v6 + 400) + ((v7 * (int)result[36867] + (int)(result[36866] << v3)) << *(unsigned char *)(v5 + 531));
    uint64_t v19 = 16 * v7;
    uint64_t v11 = 2 * v7;
    do
    {
      if (v8 >= 1)
      {
        for (int i = 0; i < v8; i += 8)
        {
          uint64_t v13 = *(void *)(*(void *)v1 + 8);
          uint64_t v14 = *(void *)(v13 + 768) * ((uint64_t)(v1[3] + v24) >> 3) + ((v1[2] + i) >> 3);
          uint64_t v15 = *(void *)(v13 + 776);
          if (v23 && (*(_WORD *)(v15 + 2 * v14) & 0x100) != 0 || v22 && (*(_WORD *)(v15 + 2 * v14) & 0xC) != 0)
          {
            uint64_t v16 = 2 * (i << v21);
            uint64_t v17 = v16;
            uint64_t v18 = 8;
            do
            {
              uint64_t result = memcpy((void *)(v10 + v16), (char *)v4 + v17, (16 << v21));
              v17 += v9;
              v16 += v11;
              --v18;
            }
            while (v18);
            int v8 = v1[4];
          }
        }
        int v2 = v1[5];
      }
      int v4 = (_DWORD *)((char *)v4 + v20);
      v10 += v19;
      v24 += 8;
    }
    while (v24 < v2);
  }
  return result;
}

uint64_t sub_1D0CCC36C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61 = result;
  uint64_t v62 = *(void *)(a2 + 8);
  uint64_t v63 = *(void *)(a2 + 16);
  int v64 = *(_DWORD *)(v62 + 520);
  int v65 = *(_DWORD *)(v62 + 524);
  uint64_t v66 = *(void *)(v62 + 416);
  uint64_t v67 = *(void *)(v62 + 424);
  uint64_t v127 = v62;
  int v68 = *(unsigned __int8 *)(v63 + 2117);
  LOBYTE(v62) = *(unsigned char *)(v63 + 2113);
  int v69 = a3 << v62;
  int v70 = a4 << v62;
  int v71 = v70 - 16;
  if (*(_DWORD *)(v63 + 2120) - 1 == a3)
  {
    BOOL v72 = v70 < 16;
    if (v70 >= 16) {
      int v73 = v70 - 16;
    }
    else {
      int v73 = 0;
    }
    if (v72) {
      int v74 = v71;
    }
    else {
      int v74 = 0;
    }
    int v75 = v74 + v68;
    if (v69 <= 63) {
      unsigned int v76 = 0;
    }
    else {
      unsigned int v76 = (v69 - 1) & 0xFFFFFFC0;
    }
    signed int v119 = v76;
    int v122 = v64 - v76;
    int v77 = v75 + v73 - 8;
    if (v75 + v73 < 8) {
      int v77 = 0;
    }
    *(_DWORD *)(result + 120) = v77;
    if (*(_DWORD *)(*(void *)(a2 + 16) + 2124) - 1 == a4)
    {
      int v75 = v65 - v73;
      *(_DWORD *)(result + 120) = v65;
    }
  }
  else
  {
    if (!a3 || (v69 & 0x3F) != 0) {
      return result;
    }
    BOOL v78 = v70 < 16;
    if (v70 >= 16) {
      int v73 = v70 - 16;
    }
    else {
      int v73 = 0;
    }
    if (!v78) {
      int v71 = 0;
    }
    int v75 = v71 + v68;
    if (v69 >= 64) {
      int v79 = v69 - 64;
    }
    else {
      int v79 = 0;
    }
    signed int v119 = v79;
    if (v69 >= 64) {
      int v69 = 64;
    }
    int v122 = v69;
    int v80 = v65 - v73;
    if (*(_DWORD *)(v63 + 2124) - 1 == a4) {
      int v75 = v80;
    }
  }
  if (v75 >= 1)
  {
    uint64_t v81 = 0;
    uint64_t v108 = v73;
    uint64_t v121 = 16 * v66;
    uint64_t v82 = 16 * v67;
    unint64_t v109 = v75;
    uint64_t v118 = a2;
    int v117 = v64;
    int v110 = v75;
    do
    {
      uint64_t v111 = v81;
      if (v75 - (int)v81 >= 64) {
        uint64_t v83 = 64;
      }
      else {
        uint64_t v83 = (v75 - v81);
      }
      if (v122 >= 1)
      {
        uint64_t v84 = 0;
        uint64_t v130 = v81 + v108;
        BOOL v85 = v81 + v108 == 0;
        uint64_t v128 = ((int)v83 >> 3);
        int v129 = v81 + v108 == 0;
        uint64_t v120 = v128 - v85;
        unsigned int v115 = &STACK[0x8C0] + v85;
        unint64_t v116 = &a45 + 2 * v85;
        uint64_t vars8 = &STACK[0x780] + 4 * v85;
        uint64_t v114 = v121 * v85;
        uint64_t vars0 = v82 * v85;
        do
        {
          if (v122 - (int)v84 >= 64) {
            uint64_t v86 = 64;
          }
          else {
            uint64_t v86 = (v122 - v84);
          }
          uint64_t v87 = v84 + v119;
          uint64_t v126 = v84;
          int v131 = v86 + v119 + v84;
          uint64_t v88 = *(void *)(v127 + 416);
          uint64_t v123 = *(void *)(v127 + 400);
          char v89 = *(unsigned char *)(v127 + 531);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v61 + 48))(a2, v87, v130, v86, v83, &a29);
          int v124 = v87;
          uint64_t v90 = (v87 + v88 * v130) << v89;
          LODWORD(v91) = (int)v86 >> 3;
          if (v131 >= v64) {
            uint64_t v91 = v91;
          }
          else {
            uint64_t v91 = (v91 + 1);
          }
          uint64_t v132 = v91;
          if ((int)v91 >= 2)
          {
            uint64_t v92 = v91 - 1;
            uint64_t v93 = v123 + v90 + 16;
            uint64_t v94 = &a29;
            BOOL v95 = &STACK[0x880];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 72))(v93, v66, v95, v94, v83);
              v94 += 16;
              ++v95;
              v93 += 16;
              --v92;
            }
            while (v92);
          }
          if ((int)v128 > v129)
          {
            uint64_t v96 = v115;
            uint64_t v97 = v123 + v114 + v90;
            uint64_t v98 = v116;
            uint64_t v99 = v120;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 80))(v97, v66, v96, v98, v86);
              v98 += 2;
              ++v96;
              v97 += v121;
              --v99;
            }
            while (v99);
          }
          uint64_t v100 = *(void *)(v127 + 424) * v130 + 2 * v124;
          uint64_t v125 = *(void *)(v127 + 408);
          uint64_t v101 = v100 << *(unsigned char *)(v127 + 531);
          uint64_t v82 = 16 * v67;
          if ((int)v132 >= 2)
          {
            uint64_t v102 = v132 - 1;
            uint64_t v103 = v125 + v101 + 32;
            uint64_t v104 = &a61;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v61 + 88))(v103, v67, v104, v83);
              v104 += 4;
              v103 += 32;
              --v102;
            }
            while (v102);
          }
          if ((int)v128 > v129)
          {
            uint64_t v105 = vars8;
            uint64_t v106 = v125 + vars0 + v101;
            uint64_t v107 = v120;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v61 + 96))(v106, v67, v105, v86);
              v105 += 4;
              v106 += 16 * v67;
              --v107;
            }
            while (v107);
          }
          uint64_t v84 = v126 + 64;
          a2 = v118;
          int v64 = v117;
        }
        while (v126 + 64 < v122);
      }
      uint64_t v81 = v111 + 64;
      int v75 = v110;
    }
    while (v111 + 64 < v109);
  }
  return result;
}

_DWORD *sub_1D0CCC7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t result = (_DWORD *)MEMORY[0x1F4188790](a1);
  uint64_t v52 = v51;
  uint64_t v53 = v50;
  int v54 = result;
  uint64_t v55 = *(void *)(v50 + 8);
  int v105 = *(_DWORD *)(v55 + 520);
  uint64_t v56 = *(void *)(v55 + 416);
  uint64_t v57 = *(void *)(v55 + 424);
  int v58 = *v51;
  uint64_t v106 = v55;
  if (*v51 < *(_DWORD *)(v55 + 524))
  {
    v58 &= 0xFFFFFFF0;
    int *v51 = v58;
  }
  uint64_t v59 = result[30];
  if ((int)v59 < v58)
  {
    signed int v110 = (v105 - 1) & 0xFFFFFFC0;
    uint64_t vars0 = v57;
    uint64_t vars8 = 16 * v57;
    uint64_t v111 = 16 * v56;
    uint64_t v112 = v50;
    uint64_t v104 = v52;
    do
    {
      char v60 = *(unsigned char *)(v106 + 531);
      uint64_t v61 = *(void *)(v106 + 400) + ((*(void *)(v106 + 416) * (int)v59) << v60);
      uint64_t v62 = *(void *)(v106 + 408) + ((*(void *)(v106 + 424) * (int)v59) << v60);
      int v63 = v58 - v59;
      if (v63 >= 64) {
        uint64_t v64 = 64;
      }
      else {
        uint64_t v64 = v63;
      }
      if (v59) {
        int v65 = v59 - 8;
      }
      else {
        int v65 = 0;
      }
      int v66 = v64 + 8;
      if (!v59) {
        int v66 = v64;
      }
      int v113 = v66;
      int v114 = v65;
      uint64_t v117 = ((int)v64 >> 3);
      if (v110 < 1)
      {
        uint64_t v67 = 0;
      }
      else
      {
        uint64_t v67 = 0;
        do
        {
          uint64_t v118 = v62;
          (*((void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))v54 + 6))(v53, v67, v54[30], 64, v64, &a17);
          int v115 = v67;
          sub_1D0CCC10C(&STACK[0x420], v53, v67, v114, 72, v113, 0);
          uint64_t v68 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v54 + 9))(v61 + i, v56, (char *)&STACK[0x3A0] + v68, (char *)&STACK[0x3A0] + i - 784, v64);
            v68 += 8;
          }
          sub_1D0CCC1C0(&STACK[0x420]);
          int v70 = v54[30];
          if ((int)v117 > (v70 == 0))
          {
            BOOL v71 = v70 == 0;
            uint64_t v72 = v117 - v71;
            int v73 = &a33 + 2 * v71;
            int v74 = &STACK[0x3E0] + v71;
            uint64_t v75 = v61 + v111 * v71;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v54 + 10))(v75, v56, v74, v73, 64);
              v73 += 2;
              ++v74;
              v75 += v111;
              --v72;
            }
            while (v72);
          }
          sub_1D0CCC1C0(&STACK[0x420]);
          sub_1D0CCC10C(&STACK[0x420], v112, v115, v114, 72, v113, 1u);
          uint64_t v76 = 0;
          uint64_t v57 = vars0;
          do
          {
            uint64_t v77 = v76 + 32;
            (*((void (**)(uint64_t, uint64_t, char *, uint64_t))v54 + 11))(v76 + 32 + v118, vars0, (char *)&a49 + v76, v64);
            uint64_t v76 = v77;
          }
          while (v77 != 256);
          sub_1D0CCC1C0(&STACK[0x420]);
          int v78 = v54[30];
          if ((int)v117 > (v78 == 0))
          {
            BOOL v79 = v78 == 0;
            uint64_t v80 = v117 - v79;
            uint64_t v81 = &STACK[0x2A0] + 4 * v79;
            uint64_t v82 = v118 + vars8 * v79;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v54 + 12))(v82, vars0, v81, 64);
              v81 += 4;
              v82 += vars8;
              --v80;
            }
            while (v80);
          }
          uint64_t result = sub_1D0CCC1C0(&STACK[0x420]);
          v61 += 128;
          uint64_t v62 = v118 + 256;
          uint64_t v67 = (v115 + 64);
          uint64_t v53 = v112;
        }
        while ((int)v67 < v110);
        uint64_t v59 = v54[30];
      }
      int v83 = v105 - v67;
      if (v105 == v67)
      {
        uint64_t v52 = v104;
      }
      else
      {
        uint64_t v119 = v62;
        (*((void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, char *))v54 + 6))(v53, v67, v59, (v105 - v67), v64, &a17);
        int v116 = v67;
        sub_1D0CCC10C(&STACK[0x420], v53, v67, v114, v83, v113, 0);
        int v103 = (v83 >> 3) - 1;
        int v107 = v105 - v67;
        if (v83 >= 16)
        {
          uint64_t v84 = v61 + 16;
          if (v103 <= 1) {
            uint64_t v85 = 1;
          }
          else {
            uint64_t v85 = v103;
          }
          uint64_t v86 = &a17;
          uint64_t v87 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v54 + 9))(v84, v56, v87, v86, v64);
            v86 += 16;
            ++v87;
            v84 += 16;
            --v85;
          }
          while (v85);
        }
        sub_1D0CCC1C0(&STACK[0x420]);
        int v88 = v54[30];
        if ((int)v117 > (v88 == 0))
        {
          BOOL v89 = v88 == 0;
          uint64_t v90 = v117 - v89;
          uint64_t v91 = &a33 + 2 * v89;
          uint64_t v92 = &STACK[0x3E0] + v89;
          uint64_t v93 = v61 + v111 * v89;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))v54 + 10))(v93, v56, v92, v91, v107);
            v91 += 2;
            ++v92;
            v93 += v111;
            --v90;
          }
          while (v90);
        }
        sub_1D0CCC1C0(&STACK[0x420]);
        sub_1D0CCC10C(&STACK[0x420], v112, v116, v114, v107, v113, 1u);
        uint64_t v94 = &a49;
        if (v107 >= 16)
        {
          uint64_t v95 = v119 + 32;
          if (v103 <= 1) {
            uint64_t v96 = 1;
          }
          else {
            uint64_t v96 = v103;
          }
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v54 + 11))(v95, v57, v94, v64);
            v94 += 4;
            v95 += 32;
            --v96;
          }
          while (v96);
        }
        sub_1D0CCC1C0(&STACK[0x420]);
        int v97 = v54[30];
        if ((int)v117 > (v97 == 0))
        {
          BOOL v98 = v97 == 0;
          uint64_t v99 = v117 - v98;
          uint64_t v100 = &STACK[0x2A0] + 4 * v98;
          uint64_t v101 = v119 + vars8 * v98;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, void))v54 + 12))(v101, v57, v100, v107);
            v100 += 4;
            v101 += vars8;
            --v99;
          }
          while (v99);
        }
        uint64_t result = sub_1D0CCC1C0(&STACK[0x420]);
        LODWORD(v59) = v54[30];
        uint64_t v52 = v104;
        uint64_t v53 = v112;
      }
      uint64_t v59 = (v59 + v64);
      v54[30] = v59;
      int v58 = *v52;
    }
    while ((int)v59 < *v52);
  }
  int v102 = *(_DWORD *)(v106 + 524);
  if (v102 >= (int)v59) {
    int v102 = v59;
  }
  int *v52 = v102;
  if (v54[30] < *(_DWORD *)(v106 + 524))
  {
    if (v102 <= 4) {
      int v102 = 4;
    }
    int *v52 = v102 - 4;
  }
  return result;
}

uint64_t sub_1D0CCCD78(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49 = a3;
  uint64_t v50 = result;
  uint64_t v51 = *(void *)(a2 + 8);
  int v101 = *(_DWORD *)(v51 + 520);
  uint64_t v52 = *(void *)(v51 + 416);
  uint64_t v53 = *(void *)(v51 + 424);
  int v54 = *a3;
  uint64_t v102 = v51;
  if (*a3 < *(_DWORD *)(v51 + 524))
  {
    v54 &= 0xFFFFFFF0;
    *a3 = v54;
  }
  int v55 = *(_DWORD *)(result + 120);
  if (v55 < v54)
  {
    signed int v107 = (v101 - 1) & 0xFFFFFFC0;
    uint64_t vars0 = &a33;
    uint64_t vars8 = v53;
    uint64_t v108 = 16 * v52;
    uint64_t v105 = 16 * v53;
    uint64_t v100 = v49;
    do
    {
      char v56 = *(unsigned char *)(v102 + 531);
      uint64_t v57 = *(void *)(v102 + 400) + ((*(void *)(v102 + 416) * v55) << v56);
      uint64_t v58 = *(void *)(v102 + 408) + ((*(void *)(v102 + 424) * v55) << v56);
      int v59 = v54 - v55;
      if (v59 >= 64) {
        uint64_t v60 = 64;
      }
      else {
        uint64_t v60 = v59;
      }
      int v61 = (int)v60 >> 3;
      uint64_t v111 = ((int)v60 >> 3);
      int v62 = 0;
      if (v107 >= 1)
      {
        do
        {
          uint64_t v112 = v58;
          int v109 = v62;
          (*(void (**)(uint64_t))(v50 + 48))(a2);
          uint64_t v63 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v50 + 72))(v57 + i, v52, (char *)&STACK[0x7C0] + v63, (char *)&STACK[0x7C0] + i - 784, v60);
            v63 += 8;
          }
          int v65 = *(_DWORD *)(v50 + 120);
          if (v61 > (v65 == 0))
          {
            BOOL v66 = v65 == 0;
            uint64_t v67 = v111 - v66;
            uint64_t v68 = &a33 + 2 * v66;
            int v69 = &STACK[0x800] + v66;
            uint64_t v70 = v57 + v108 * v66;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v70, v52, v69, v68, 64);
              v68 += 2;
              ++v69;
              v70 += v108;
              --v67;
            }
            while (v67);
          }
          uint64_t v71 = 0;
          uint64_t v53 = vars8;
          do
          {
            uint64_t v72 = v71 + 32;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v50 + 88))(v71 + 32 + v112, vars8, (char *)&a49 + v71, v60);
            uint64_t v71 = v72;
          }
          while (v72 != 256);
          int v73 = *(_DWORD *)(v50 + 120);
          if ((int)v111 > (v73 == 0))
          {
            BOOL v74 = v73 == 0;
            uint64_t v75 = v111 - v74;
            uint64_t v76 = &STACK[0x6C0] + 4 * v74;
            uint64_t v77 = v112 + v105 * v74;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v77, vars8, v76, 64);
              v76 += 4;
              v77 += v105;
              --v75;
            }
            while (v75);
          }
          v57 += 128;
          int v61 = (int)v60 >> 3;
          uint64_t v58 = v112 + 256;
          int v62 = v109 + 64;
        }
        while (v109 + 64 < v107);
        int v55 = *(_DWORD *)(v50 + 120);
      }
      int v78 = v101 - v62;
      if (v101 != v62)
      {
        uint64_t v113 = v58;
        uint64_t result = (*(uint64_t (**)(uint64_t))(v50 + 48))(a2);
        int v99 = (v78 >> 3) - 1;
        unsigned int v110 = v78;
        if (v78 >= 16)
        {
          uint64_t v79 = v57 + 16;
          if (v99 <= 1) {
            uint64_t v80 = 1;
          }
          else {
            uint64_t v80 = v99;
          }
          uint64_t v81 = &a17;
          uint64_t v82 = &STACK[0x7C0];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v50 + 72))(v79, v52, v82, v81, v60);
            v81 += 16;
            ++v82;
            v79 += 16;
            --v80;
          }
          while (v80);
        }
        int v83 = *(_DWORD *)(v50 + 120);
        uint64_t v84 = v110;
        if ((int)v111 > (v83 == 0))
        {
          BOOL v85 = v83 == 0;
          uint64_t v86 = v111 - v85;
          uint64_t v87 = &a33 + 2 * v85;
          int v88 = &STACK[0x800] + v85;
          uint64_t v89 = v57 + v108 * v85;
          do
          {
            uint64_t v90 = v84;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v89, v52, v88, v87, v84);
            uint64_t v84 = v90;
            v87 += 2;
            ++v88;
            v89 += v108;
            --v86;
          }
          while (v86);
        }
        uint64_t v91 = &a49;
        if ((int)v84 >= 16)
        {
          uint64_t v92 = v113 + 32;
          if (v99 <= 1) {
            uint64_t v93 = 1;
          }
          else {
            uint64_t v93 = v99;
          }
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v50 + 88))(v92, v53, v91, v60);
            v91 += 4;
            v92 += 32;
            --v93;
          }
          while (v93);
        }
        int v55 = *(_DWORD *)(v50 + 120);
        if ((int)v111 > (v55 == 0))
        {
          BOOL v94 = v55 == 0;
          uint64_t v95 = v111 - v94;
          uint64_t v96 = &STACK[0x6C0] + 4 * v94;
          uint64_t v97 = v113 + v105 * v94;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, void))(v50 + 96))(v97, v53, v96, v110);
            v96 += 4;
            v97 += v105;
            --v95;
          }
          while (v95);
          int v55 = *(_DWORD *)(v50 + 120);
        }
      }
      v55 += v60;
      *(_DWORD *)(v50 + 120) = v55;
      uint64_t v49 = v100;
      int v54 = *v100;
    }
    while (v55 < *v100);
  }
  int v98 = *(_DWORD *)(v102 + 524);
  if (v98 >= v55) {
    int v98 = v55;
  }
  int *v49 = v98;
  if (*(_DWORD *)(v50 + 120) < *(_DWORD *)(v102 + 524))
  {
    if (v98 <= 4) {
      int v98 = 4;
    }
    int *v49 = v98 - 4;
  }
  return result;
}

void *sub_1D0CCD230(void *result, uint64_t a2)
{
  int v2 = sub_1D0CCD4C4;
  uint64_t v3 = sub_1D0CCE084;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    int v2 = sub_1D0CCD4C4;
    uint64_t v3 = sub_1D0CCE084;
    if (!*(unsigned char *)(*(void *)(a2 + 16) + 283))
    {
      int v2 = sub_1D0CCDC38;
      uint64_t v3 = sub_1D0CCE670;
    }
  }
  *uint64_t result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1D0CCD2F4;
  result[5] = 0;
  result[8] = sub_1D0CCB318;
  result[6] = sub_1D0CCAC2C;
  result[7] = sub_1D0CCAC2C;
  return result;
}

uint64_t sub_1D0CCD2F4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(v6 + 520);
  int v8 = *(_DWORD *)(v6 + 524);
  unsigned int v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(unsigned char *)(v5 + 2113);
  uint64_t v10 = (a3 << v5);
  uint64_t v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7) {
    uint64_t v12 = (v7 - v10);
  }
  else {
    uint64_t v12 = v9;
  }
  if ((int)(v11 + v9) >= v8) {
    uint64_t v13 = (v8 - v11);
  }
  else {
    uint64_t v13 = v9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  uint64_t v15 = *(void *)(v6 + 416);
  uint64_t v28 = (v15 * (int)v11 + (int)v10) << *(unsigned char *)(v6 + 531);
  uint64_t v29 = *(void *)(v6 + 400);
  uint64_t v16 = ((int)v12 >> 3);
  if ((int)v16 > (v10 == 0))
  {
    uint64_t v17 = v16 - (v10 == 0);
    uint64_t v18 = &v30[10 * (v10 == 0)];
    uint64_t v19 = &v30[5 * (v10 == 0) + 296];
    uint64_t v20 = v29 + v28 + 8 * (v10 == 0) - 8 * v15;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 8;
      --v17;
    }
    while (v17);
  }
  uint64_t v21 = ((int)v13 >> 3);
  if ((int)v21 > (v11 == 0))
  {
    BOOL v22 = v11 == 0;
    uint64_t v23 = (v12 + 8);
    uint64_t v24 = v21 - v22;
    uint64_t v25 = &v30[10 * v22 + 80];
    uint64_t v26 = &v30[5 * v22 + 336];
    uint64_t v27 = v28 + 8 * v15 * v22 + v29 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 8 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

void (**sub_1D0CCD4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63))(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *)
{
  uint64_t result = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))MEMORY[0x1F4188790](a1);
  int v69 = result;
  STACK[0x124D8] = *MEMORY[0x1E4F143B8];
  uint64_t v70 = *(void *)(v66 + 8);
  uint64_t v71 = *(void *)(v66 + 16);
  int v72 = *(_DWORD *)(v70 + 520);
  int v73 = *(_DWORD *)(v70 + 524);
  uint64_t v74 = *(void *)(v70 + 416);
  uint64_t v75 = *(void *)(v70 + 424);
  uint64_t v138 = v70;
  uint64_t v139 = v66;
  int v76 = *(unsigned __int8 *)(v71 + 2117);
  LOBYTE(v70) = *(unsigned char *)(v71 + 2113);
  int v77 = v67 << v70;
  int v78 = v68 << v70;
  int v79 = v78 - 16;
  int v128 = v72;
  if (*(_DWORD *)(v71 + 2120) - 1 == v67)
  {
    BOOL v80 = v78 < 16;
    if (v78 >= 16) {
      int v81 = v78 - 16;
    }
    else {
      int v81 = 0;
    }
    if (v80) {
      int v82 = v79;
    }
    else {
      int v82 = 0;
    }
    int v83 = v82 + v76;
    if (v77 <= 63) {
      unsigned int v84 = 0;
    }
    else {
      unsigned int v84 = (v77 - 1) & 0xFFFFFFC0;
    }
    signed int v129 = v84;
    int v132 = v72 - v84;
    int v85 = v83 + v81 - 8;
    if (v83 + v81 < 8) {
      int v85 = 0;
    }
    *((_DWORD *)result + 30) = v85;
    if (*(_DWORD *)(*(void *)(v66 + 16) + 2124) - 1 == v68)
    {
      int v83 = v73 - v81;
      *((_DWORD *)result + 30) = v73;
    }
  }
  else
  {
    if (!v67 || (v77 & 0x3F) != 0) {
      return result;
    }
    BOOL v86 = v78 < 16;
    if (v78 >= 16) {
      int v81 = v78 - 16;
    }
    else {
      int v81 = 0;
    }
    if (!v86) {
      int v79 = 0;
    }
    int v83 = v79 + v76;
    if (v77 >= 64) {
      int v87 = v77 - 64;
    }
    else {
      int v87 = 0;
    }
    signed int v129 = v87;
    if (v77 >= 64) {
      int v77 = 64;
    }
    int v132 = v77;
    int v88 = v73 - v81;
    if (*(_DWORD *)(v71 + 2124) - 1 == v68) {
      int v83 = v88;
    }
  }
  if (v83 >= 1)
  {
    uint64_t v89 = 0;
    uint64_t vars8 = &STACK[0x420];
    uint64_t v120 = v81;
    uint64_t vars0 = &a65;
    uint64_t v131 = 8 * v74;
    uint64_t v90 = 8 * v75;
    unint64_t v119 = v83;
    int v121 = v83;
    do
    {
      if (v83 - (int)v89 >= 64) {
        uint64_t v91 = 64;
      }
      else {
        uint64_t v91 = (v83 - v89);
      }
      uint64_t v122 = v89;
      int v92 = v89 + v120 - 8;
      uint64_t v144 = v89 + v120;
      if (!(v89 + v120)) {
        int v92 = 0;
      }
      int v143 = v92;
      int v93 = v91 + 8;
      if (!(v89 + v120)) {
        int v93 = v91;
      }
      int v142 = v93;
      if (v132 >= 1)
      {
        uint64_t v94 = 0;
        BOOL v95 = v144 == 0;
        uint64_t v140 = ((int)v91 >> 3);
        int v141 = v144 == 0;
        uint64_t v130 = v140 - v95;
        uint64_t v126 = v90 * v95;
        uint64_t v127 = v131 * v95;
        uint64_t v125 = &STACK[0x320] + 4 * v95;
        do
        {
          if (v132 - (int)v94 >= 64) {
            uint64_t v96 = 64;
          }
          else {
            uint64_t v96 = (v132 - v94);
          }
          uint64_t v97 = v94 + v129;
          uint64_t v137 = v94;
          int v145 = v96 + v129 + v94;
          uint64_t v98 = *(void *)(v138 + 416);
          uint64_t v133 = *(void *)(v138 + 400);
          char v99 = *(unsigned char *)(v138 + 531);
          v69[6](v139, v97, v144, v96, v91, &a33);
          if (v145 >= v128) {
            int v100 = v96;
          }
          else {
            int v100 = v96 + 8;
          }
          uint64_t v101 = (v97 + v98 * v144) << v99;
          unsigned int v102 = (int)v96 >> 3;
          if (v145 >= v128) {
            uint64_t v103 = v102;
          }
          else {
            uint64_t v103 = v102 + 1;
          }
          int v136 = v97;
          int v135 = v100;
          sub_1D0CCD9E4(&STACK[0x4B0], v139, v97, v143, v100, v142, 0);
          uint64_t v146 = v103;
          if ((int)v103 >= 2)
          {
            uint64_t v104 = v103 - 1;
            uint64_t v105 = v133 + v101 + 8;
            uint64_t v106 = &a33;
            signed int v107 = &STACK[0x420];
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v69[9])(v105, v74, v107, v106, v91);
              v106 += 16;
              ++v107;
              v105 += 8;
              --v104;
            }
            while (v104);
          }
          sub_1D0CCDA90(&STACK[0x4B0]);
          if ((int)v140 > v141)
          {
            uint64_t v108 = &STACK[0x460] + (v144 == 0);
            uint64_t v109 = v133 + v127 + v101;
            unsigned int v110 = &a49 + 2 * (v144 == 0);
            uint64_t v111 = v130;
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v69[10])(v109, v74, v108, v110, v96);
              v110 += 2;
              ++v108;
              v109 += v131;
              --v111;
            }
            while (v111);
          }
          sub_1D0CCDA90(&STACK[0x4B0]);
          uint64_t v134 = *(void *)(v138 + 408);
          uint64_t v112 = (*(void *)(v138 + 424) * v144 + 2 * v136) << *(unsigned char *)(v138 + 531);
          sub_1D0CCD9E4(&STACK[0x4B0], v139, v136, v143, v135, v142, 1u);
          uint64_t v90 = 8 * v75;
          if ((int)v146 >= 2)
          {
            uint64_t v113 = v146 - 1;
            uint64_t v114 = v134 + v112 + 16;
            int v115 = &a65;
            do
            {
              ((void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))v69[11])(v114, v75, v115, v91);
              v115 += 4;
              v114 += 16;
              --v113;
            }
            while (v113);
          }
          sub_1D0CCDA90(&STACK[0x4B0]);
          if ((int)v140 > v141)
          {
            int v116 = v125;
            uint64_t v117 = v134 + v126 + v112;
            uint64_t v118 = v130;
            do
            {
              ((void (*)(uint64_t, uint64_t, unint64_t *, uint64_t))v69[12])(v117, v75, v116, v96);
              v116 += 4;
              v117 += 8 * v75;
              --v118;
            }
            while (v118);
          }
          uint64_t result = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1D0CCDA90(&STACK[0x4B0]);
          uint64_t v94 = v137 + 64;
        }
        while (v137 + 64 < v132);
      }
      uint64_t v89 = v122 + 64;
      int v83 = v121;
    }
    while (v122 + 64 < v119);
  }
  return result;
}

void *sub_1D0CCD9E4(void *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  __dst[9216] = a2;
  *((_DWORD *)__dst + 18434) = a3;
  *((_DWORD *)__dst + 18435) = a4;
  *((_DWORD *)__dst + 18436) = a5;
  *((_DWORD *)__dst + 18437) = a6;
  *((_DWORD *)__dst + 18438) = a7;
  if (a6 >= 1)
  {
    int v7 = (char *)__dst;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = v8 + 8 * a7;
    uint64_t v10 = *(void *)(v9 + 416);
    uint64_t v11 = (char *)(*(void *)(v9 + 400) + ((v10 * a4 + (a3 << a7)) << *(unsigned char *)(v8 + 531)));
    size_t v12 = a5 << (a7 != 0);
    uint64_t v13 = a6;
    do
    {
      __dst = memcpy(v7, v11, v12);
      v11 += v10;
      v7 += v12;
      --v13;
    }
    while (v13);
  }
  return __dst;
}

_DWORD *sub_1D0CCDA90(_DWORD *result)
{
  unsigned int v1 = result + 18432;
  int v2 = result[18437];
  uint64_t v3 = (int)result[18438];
  char v19 = result[18438] != 0;
  if (v2 >= 1)
  {
    int v4 = result;
    uint64_t v5 = *(void *)(*(void *)v1 + 8);
    uint64_t v6 = v5 + 8 * v3;
    uint64_t v7 = *(void *)(v6 + 416);
    int v21 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 32) + 19);
    int v22 = 0;
    int v20 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 16) + 283);
    int v8 = result[18436];
    uint64_t v9 = *(void *)(v6 + 400) + ((v7 * (int)result[18435] + (int)(result[18434] << v3)) << *(unsigned char *)(v5 + 531));
    uint64_t v18 = 8 * (v8 << v19);
    uint64_t v10 = v8 << v19;
    do
    {
      if (v8 >= 1)
      {
        for (int i = 0; i < v8; i += 8)
        {
          uint64_t v12 = *(void *)(*(void *)v1 + 8);
          uint64_t v13 = *(void *)(v12 + 768) * ((uint64_t)(v1[3] + v22) >> 3) + ((v1[2] + i) >> 3);
          uint64_t v14 = *(void *)(v12 + 776);
          if (v21 && (*(_WORD *)(v14 + 2 * v13) & 0x100) != 0 || v20 && (*(_WORD *)(v14 + 2 * v13) & 0xC) != 0)
          {
            uint64_t v15 = i << v19;
            uint64_t v16 = v15;
            uint64_t v17 = 8;
            do
            {
              uint64_t result = memcpy((void *)(v9 + v15), (char *)v4 + v16, (8 << v19));
              v16 += v10;
              v15 += v7;
              --v17;
            }
            while (v17);
            int v8 = v1[4];
          }
        }
        int v2 = v1[5];
      }
      v9 += 8 * v7;
      int v4 = (_DWORD *)((char *)v4 + v18);
      v22 += 8;
    }
    while (v22 < v2);
  }
  return result;
}

uint64_t sub_1D0CCDC38(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61 = result;
  uint64_t v62 = *(void *)(a2 + 8);
  uint64_t v63 = *(void *)(a2 + 16);
  int v64 = *(_DWORD *)(v62 + 520);
  int v65 = *(_DWORD *)(v62 + 524);
  uint64_t v66 = *(void *)(v62 + 416);
  uint64_t v67 = *(void *)(v62 + 424);
  uint64_t v127 = v62;
  int v68 = *(unsigned __int8 *)(v63 + 2117);
  LOBYTE(v62) = *(unsigned char *)(v63 + 2113);
  int v69 = a3 << v62;
  int v70 = a4 << v62;
  int v71 = v70 - 16;
  if (*(_DWORD *)(v63 + 2120) - 1 == a3)
  {
    BOOL v72 = v70 < 16;
    if (v70 >= 16) {
      int v73 = v70 - 16;
    }
    else {
      int v73 = 0;
    }
    if (v72) {
      int v74 = v71;
    }
    else {
      int v74 = 0;
    }
    int v75 = v74 + v68;
    if (v69 <= 63) {
      unsigned int v76 = 0;
    }
    else {
      unsigned int v76 = (v69 - 1) & 0xFFFFFFC0;
    }
    signed int v119 = v76;
    int v122 = v64 - v76;
    int v77 = v75 + v73 - 8;
    if (v75 + v73 < 8) {
      int v77 = 0;
    }
    *(_DWORD *)(result + 120) = v77;
    if (*(_DWORD *)(*(void *)(a2 + 16) + 2124) - 1 == a4)
    {
      int v75 = v65 - v73;
      *(_DWORD *)(result + 120) = v65;
    }
  }
  else
  {
    if (!a3 || (v69 & 0x3F) != 0) {
      return result;
    }
    BOOL v78 = v70 < 16;
    if (v70 >= 16) {
      int v73 = v70 - 16;
    }
    else {
      int v73 = 0;
    }
    if (!v78) {
      int v71 = 0;
    }
    int v75 = v71 + v68;
    if (v69 >= 64) {
      int v79 = v69 - 64;
    }
    else {
      int v79 = 0;
    }
    signed int v119 = v79;
    if (v69 >= 64) {
      int v69 = 64;
    }
    int v122 = v69;
    int v80 = v65 - v73;
    if (*(_DWORD *)(v63 + 2124) - 1 == a4) {
      int v75 = v80;
    }
  }
  if (v75 >= 1)
  {
    uint64_t v81 = 0;
    uint64_t v108 = v73;
    uint64_t v121 = 8 * v66;
    uint64_t v82 = 8 * v67;
    unint64_t v109 = v75;
    uint64_t v118 = a2;
    int v117 = v64;
    int v110 = v75;
    do
    {
      uint64_t v111 = v81;
      if (v75 - (int)v81 >= 64) {
        uint64_t v83 = 64;
      }
      else {
        uint64_t v83 = (v75 - v81);
      }
      if (v122 >= 1)
      {
        uint64_t v84 = 0;
        uint64_t v130 = v81 + v108;
        BOOL v85 = v81 + v108 == 0;
        uint64_t v128 = ((int)v83 >> 3);
        int v129 = v81 + v108 == 0;
        uint64_t v120 = v128 - v85;
        int v115 = &STACK[0x8C0] + v85;
        int v116 = &a45 + 2 * v85;
        uint64_t vars8 = &STACK[0x780] + 4 * v85;
        uint64_t v114 = v121 * v85;
        uint64_t vars0 = v82 * v85;
        do
        {
          if (v122 - (int)v84 >= 64) {
            uint64_t v86 = 64;
          }
          else {
            uint64_t v86 = (v122 - v84);
          }
          uint64_t v87 = v84 + v119;
          uint64_t v126 = v84;
          int v131 = v86 + v119 + v84;
          uint64_t v88 = *(void *)(v127 + 416);
          uint64_t v123 = *(void *)(v127 + 400);
          char v89 = *(unsigned char *)(v127 + 531);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v61 + 48))(a2, v87, v130, v86, v83, &a29);
          int v124 = v87;
          uint64_t v90 = (v87 + v88 * v130) << v89;
          LODWORD(v91) = (int)v86 >> 3;
          if (v131 >= v64) {
            uint64_t v91 = v91;
          }
          else {
            uint64_t v91 = (v91 + 1);
          }
          uint64_t v132 = v91;
          if ((int)v91 >= 2)
          {
            uint64_t v92 = v91 - 1;
            uint64_t v93 = v123 + v90 + 8;
            uint64_t v94 = &a29;
            BOOL v95 = &STACK[0x880];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 72))(v93, v66, v95, v94, v83);
              v94 += 16;
              ++v95;
              v93 += 8;
              --v92;
            }
            while (v92);
          }
          if ((int)v128 > v129)
          {
            uint64_t v96 = v115;
            uint64_t v97 = v123 + v114 + v90;
            uint64_t v98 = v116;
            uint64_t v99 = v120;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 80))(v97, v66, v96, v98, v86);
              v98 += 2;
              ++v96;
              v97 += v121;
              --v99;
            }
            while (v99);
          }
          uint64_t v100 = *(void *)(v127 + 424) * v130 + 2 * v124;
          uint64_t v125 = *(void *)(v127 + 408);
          uint64_t v101 = v100 << *(unsigned char *)(v127 + 531);
          uint64_t v82 = 8 * v67;
          if ((int)v132 >= 2)
          {
            uint64_t v102 = v132 - 1;
            uint64_t v103 = v125 + v101 + 16;
            uint64_t v104 = &a61;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v61 + 88))(v103, v67, v104, v83);
              v104 += 4;
              v103 += 16;
              --v102;
            }
            while (v102);
          }
          if ((int)v128 > v129)
          {
            uint64_t v105 = vars8;
            uint64_t v106 = v125 + vars0 + v101;
            uint64_t v107 = v120;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v61 + 96))(v106, v67, v105, v86);
              v105 += 4;
              v106 += 8 * v67;
              --v107;
            }
            while (v107);
          }
          uint64_t v84 = v126 + 64;
          a2 = v118;
          int v64 = v117;
        }
        while (v126 + 64 < v122);
      }
      uint64_t v81 = v111 + 64;
      int v75 = v110;
    }
    while (v111 + 64 < v109);
  }
  return result;
}

_DWORD *sub_1D0CCE084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t result = (_DWORD *)MEMORY[0x1F4188790](a1);
  uint64_t v51 = v50;
  uint64_t v52 = result;
  STACK[0x12458] = *MEMORY[0x1E4F143B8];
  uint64_t v118 = v53;
  uint64_t v54 = *(void *)(v53 + 8);
  int v109 = *(_DWORD *)(v54 + 520);
  uint64_t v55 = *(void *)(v54 + 416);
  uint64_t v56 = *(void *)(v54 + 424);
  int v57 = *v50;
  uint64_t v110 = v54;
  if (*v50 < *(_DWORD *)(v54 + 524))
  {
    v57 &= 0xFFFFFFF0;
    int *v50 = v57;
  }
  uint64_t v58 = result[30];
  if ((int)v58 < v57)
  {
    signed int v114 = (v109 - 1) & 0xFFFFFFC0;
    uint64_t vars8 = &a49;
    uint64_t v59 = 8 * v56;
    uint64_t v108 = v51;
    uint64_t v115 = 8 * v55;
    uint64_t vars0 = 8 * v56;
    do
    {
      char v60 = *(unsigned char *)(v110 + 531);
      uint64_t v61 = *(void *)(v110 + 400) + ((*(void *)(v110 + 416) * (int)v58) << v60);
      uint64_t v62 = *(void *)(v110 + 408) + ((*(void *)(v110 + 424) * (int)v58) << v60);
      int v63 = v57 - v58;
      if (v63 >= 64) {
        uint64_t v64 = 64;
      }
      else {
        uint64_t v64 = v63;
      }
      if (v58) {
        int v65 = v58 - 8;
      }
      else {
        int v65 = 0;
      }
      int v66 = v64 + 8;
      if (!v58) {
        int v66 = v64;
      }
      int v119 = v66;
      int v120 = v65;
      int v67 = (int)v64 >> 3;
      uint64_t v123 = ((int)v64 >> 3);
      uint64_t v68 = 0;
      if (v114 >= 1)
      {
        do
        {
          uint64_t v116 = v62;
          int v69 = &a17;
          int v70 = v68;
          (*((void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))v52 + 6))(v118, v68, v52[30], 64, v64, &a17);
          int v121 = v70;
          sub_1D0CCD9E4(&STACK[0x430], v118, v70, v120, 72, v119, 0);
          uint64_t v71 = 0;
          do
          {
            uint64_t v72 = v71 + 8;
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v52 + 9))(v71 + 8 + v61, v55, (char *)&STACK[0x3A0] + v71, v69, v64);
            v69 += 16;
            uint64_t v71 = v72;
          }
          while (v72 != 64);
          sub_1D0CCDA90(&STACK[0x430]);
          int v73 = v52[30];
          if (v67 > (v73 == 0))
          {
            BOOL v74 = v73 == 0;
            uint64_t v75 = v123 - v74;
            unsigned int v76 = &a33 + 2 * v74;
            int v77 = &STACK[0x3E0] + v74;
            uint64_t v78 = v61 + v115 * v74;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v52 + 10))(v78, v55, v77, v76, 64);
              v76 += 2;
              ++v77;
              v78 += v115;
              --v75;
            }
            while (v75);
          }
          sub_1D0CCDA90(&STACK[0x430]);
          sub_1D0CCD9E4(&STACK[0x430], v118, v70, v120, 72, v119, 1u);
          int v79 = &a49;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v116 + i, v56, v79, v64);
            v79 += 4;
          }
          sub_1D0CCDA90(&STACK[0x430]);
          int v81 = v52[30];
          uint64_t v59 = 8 * v56;
          if ((int)v123 > (v81 == 0))
          {
            BOOL v82 = v81 == 0;
            uint64_t v83 = v123 - v82;
            uint64_t v84 = &STACK[0x2A0] + 4 * v82;
            uint64_t v85 = v116 + vars0 * v82;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v52 + 12))(v85, v56, v84, 64);
              v84 += 4;
              v85 += vars0;
              --v83;
            }
            while (v83);
          }
          uint64_t result = sub_1D0CCDA90(&STACK[0x430]);
          v61 += 64;
          uint64_t v62 = v116 + 128;
          uint64_t v68 = (v121 + 64);
          int v67 = (int)v64 >> 3;
        }
        while ((int)v68 < v114);
        uint64_t v58 = v52[30];
      }
      int v86 = v109 - v68;
      if (v109 == v68)
      {
        uint64_t v51 = v108;
      }
      else
      {
        uint64_t v117 = v62;
        int v87 = v68;
        (*((void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, char *))v52 + 6))(v118, v68, v58, (v109 - v68), v64, &a17);
        int v122 = v87;
        sub_1D0CCD9E4(&STACK[0x430], v118, v87, v120, v86, v119, 0);
        int v107 = (v86 >> 3) - 1;
        int v111 = v86;
        if (v86 >= 16)
        {
          uint64_t v88 = v61 + 8;
          if (v107 <= 1) {
            uint64_t v89 = 1;
          }
          else {
            uint64_t v89 = v107;
          }
          uint64_t v90 = &a17;
          uint64_t v91 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v52 + 9))(v88, v55, v91, v90, v64);
            v90 += 16;
            ++v91;
            v88 += 8;
            --v89;
          }
          while (v89);
        }
        sub_1D0CCDA90(&STACK[0x430]);
        int v92 = v52[30];
        if ((int)v123 > (v92 == 0))
        {
          BOOL v93 = v92 == 0;
          uint64_t v94 = v123 - v93;
          BOOL v95 = &a33 + 2 * v93;
          uint64_t v96 = &STACK[0x3E0] + v93;
          uint64_t v97 = v61 + v115 * v93;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))v52 + 10))(v97, v55, v96, v95, v111);
            v95 += 2;
            ++v96;
            v97 += v115;
            --v94;
          }
          while (v94);
        }
        sub_1D0CCDA90(&STACK[0x430]);
        sub_1D0CCD9E4(&STACK[0x430], v118, v122, v120, v111, v119, 1u);
        if (v111 >= 16)
        {
          uint64_t v98 = v117 + 16;
          if (v107 <= 1) {
            uint64_t v99 = 1;
          }
          else {
            uint64_t v99 = v107;
          }
          uint64_t v100 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v98, v56, v100, v64);
            v100 += 4;
            v98 += 16;
            --v99;
          }
          while (v99);
        }
        sub_1D0CCDA90(&STACK[0x430]);
        int v101 = v52[30];
        if ((int)v123 > (v101 == 0))
        {
          BOOL v102 = v101 == 0;
          uint64_t v103 = v123 - v102;
          uint64_t v104 = &STACK[0x2A0] + 4 * v102;
          uint64_t v105 = v117 + v59 * v102;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, void))v52 + 12))(v105, v56, v104, v111);
            v104 += 4;
            v105 += v59;
            --v103;
          }
          while (v103);
        }
        uint64_t result = sub_1D0CCDA90(&STACK[0x430]);
        LODWORD(v58) = v52[30];
        uint64_t v51 = v108;
      }
      uint64_t v58 = (v58 + v64);
      v52[30] = v58;
      int v57 = *v51;
    }
    while ((int)v58 < *v51);
  }
  int v106 = *(_DWORD *)(v110 + 524);
  if (v106 >= (int)v58) {
    int v106 = v58;
  }
  int *v51 = v106;
  if (v52[30] < *(_DWORD *)(v110 + 524))
  {
    if (v106 <= 4) {
      int v106 = 4;
    }
    int *v51 = v106 - 4;
  }
  return result;
}

uint64_t sub_1D0CCE670(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49 = a3;
  uint64_t v50 = result;
  uint64_t v51 = *(void *)(a2 + 8);
  int v103 = *(_DWORD *)(v51 + 520);
  uint64_t v52 = *(void *)(v51 + 416);
  uint64_t v53 = *(void *)(v51 + 424);
  int v54 = *a3;
  uint64_t v104 = v51;
  if (*a3 < *(_DWORD *)(v51 + 524))
  {
    v54 &= 0xFFFFFFF0;
    *a3 = v54;
  }
  int v55 = *(_DWORD *)(result + 120);
  if (v55 < v54)
  {
    signed int v108 = (v103 - 1) & 0xFFFFFFC0;
    uint64_t vars0 = &a33;
    uint64_t v109 = 8 * v52;
    uint64_t v56 = 8 * v53;
    BOOL v102 = v49;
    uint64_t vars8 = 8 * v53;
    do
    {
      char v57 = *(unsigned char *)(v104 + 531);
      uint64_t v58 = *(void *)(v104 + 400) + ((*(void *)(v104 + 416) * v55) << v57);
      uint64_t v112 = *(void *)(v104 + 408) + ((*(void *)(v104 + 424) * v55) << v57);
      int v59 = v54 - v55;
      if (v59 >= 64) {
        uint64_t v60 = 64;
      }
      else {
        uint64_t v60 = v59;
      }
      int v61 = (int)v60 >> 3;
      uint64_t v113 = ((int)v60 >> 3);
      int v62 = 0;
      if (v108 >= 1)
      {
        do
        {
          int v63 = &a17;
          int v110 = v62;
          (*(void (**)(uint64_t))(v50 + 48))(a2);
          uint64_t v64 = 0;
          do
          {
            uint64_t v65 = v64 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v50 + 72))(v64 + 8 + v58, v52, (char *)&STACK[0x7C0] + v64, v63, v60);
            v63 += 16;
            uint64_t v64 = v65;
          }
          while (v65 != 64);
          int v66 = *(_DWORD *)(v50 + 120);
          if (v61 > (v66 == 0))
          {
            BOOL v67 = v66 == 0;
            uint64_t v68 = v113 - v67;
            int v69 = &a33 + 2 * v67;
            int v70 = &STACK[0x800] + v67;
            uint64_t v71 = v58 + v109 * v67;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v71, v52, v70, v69, 64);
              v69 += 2;
              ++v70;
              v71 += v109;
              --v68;
            }
            while (v68);
          }
          uint64_t v72 = &a49;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v50 + 88))(v112 + i, v53, v72, v60);
            v72 += 4;
          }
          int v74 = *(_DWORD *)(v50 + 120);
          uint64_t v56 = 8 * v53;
          if ((int)v113 > (v74 == 0))
          {
            BOOL v75 = v74 == 0;
            uint64_t v76 = v113 - v75;
            int v77 = &STACK[0x6C0] + 4 * v75;
            uint64_t v78 = v112 + vars8 * v75;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v78, v53, v77, 64);
              v77 += 4;
              v78 += vars8;
              --v76;
            }
            while (v76);
          }
          v58 += 64;
          v112 += 128;
          int v62 = v110 + 64;
          int v61 = (int)v60 >> 3;
        }
        while (v110 + 64 < v108);
        int v55 = *(_DWORD *)(v50 + 120);
      }
      int v79 = v103 - v62;
      if (v103 != v62)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v50 + 48))(a2);
        int v101 = (v79 >> 3) - 1;
        unsigned int v111 = v79;
        if (v79 >= 16)
        {
          uint64_t v80 = v58 + 8;
          if (v101 <= 1) {
            uint64_t v81 = 1;
          }
          else {
            uint64_t v81 = v101;
          }
          BOOL v82 = &a17;
          uint64_t v83 = &STACK[0x7C0];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v50 + 72))(v80, v52, v83, v82, v60);
            v82 += 16;
            ++v83;
            v80 += 8;
            --v81;
          }
          while (v81);
        }
        int v84 = *(_DWORD *)(v50 + 120);
        uint64_t v85 = v111;
        if ((int)v113 > (v84 == 0))
        {
          BOOL v86 = v84 == 0;
          uint64_t v87 = v113 - v86;
          uint64_t v88 = &a33 + 2 * v86;
          uint64_t v89 = &STACK[0x800] + v86;
          uint64_t v90 = v58 + v109 * v86;
          do
          {
            uint64_t v91 = v85;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v90, v52, v89, v88, v85);
            uint64_t v85 = v91;
            v88 += 2;
            ++v89;
            v90 += v109;
            --v87;
          }
          while (v87);
        }
        uint64_t v92 = v85;
        if ((int)v85 >= 16)
        {
          uint64_t v93 = v112 + 16;
          if (v101 <= 1) {
            uint64_t v94 = 1;
          }
          else {
            uint64_t v94 = v101;
          }
          BOOL v95 = &a49;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v50 + 88))(v93, v53, v95, v60);
            v95 += 4;
            v93 += 16;
            --v94;
          }
          while (v94);
        }
        int v55 = *(_DWORD *)(v50 + 120);
        if ((int)v113 > (v55 == 0))
        {
          BOOL v96 = v55 == 0;
          uint64_t v97 = v113 - v96;
          uint64_t v98 = &STACK[0x6C0] + 4 * v96;
          uint64_t v99 = v112 + v56 * v96;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v99, v53, v98, v92);
            v98 += 4;
            v99 += v56;
            --v97;
          }
          while (v97);
          int v55 = *(_DWORD *)(v50 + 120);
        }
      }
      v55 += v60;
      *(_DWORD *)(v50 + 120) = v55;
      uint64_t v49 = v102;
      int v54 = *v102;
    }
    while (v55 < *v102);
  }
  int v100 = *(_DWORD *)(v104 + 524);
  if (v100 >= v55) {
    int v100 = v55;
  }
  int *v49 = v100;
  if (*(_DWORD *)(v50 + 120) < *(_DWORD *)(v104 + 524))
  {
    if (v100 <= 4) {
      int v100 = 4;
    }
    int *v49 = v100 - 4;
  }
  return result;
}

void *sub_1D0CCEB2C(void *result, uint64_t a2)
{
  int v2 = sub_1D0CCF4C8;
  uint64_t v3 = sub_1D0CCFFE8;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    int v2 = sub_1D0CCF4C8;
    uint64_t v3 = sub_1D0CCFFE8;
    if (!*(unsigned char *)(*(void *)(a2 + 16) + 283))
    {
      int v2 = sub_1D0CCFB90;
      uint64_t v3 = sub_1D0CD0594;
    }
  }
  *uint64_t result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1D0CCF2F8;
  result[5] = 0;
  result[8] = sub_1D0CCB318;
  result[6] = sub_1D0CCEBF0;
  result[7] = sub_1D0CCEBF0;
  return result;
}

void sub_1D0CCEBF0(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void **)(a1 + 8);
  bzero(a6, 0x380uLL);
  BOOL v82 = v9;
  uint64_t v75 = v9[96];
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  memset(v95, 0, sizeof(v95));
  memset(v94, 0, sizeof(v94));
  memset(v93, 0, sizeof(v93));
  uint64_t v80 = (a5 >> 3);
  int v85 = a4;
  int v76 = a5;
  int v77 = a4 >> 3;
  int v90 = 2 * v10;
  int v91 = 2 * v11;
  memset(v92, 0, sizeof(v92));
  if (a5 >= 8)
  {
    uint64_t v12 = 0;
    if (v77 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v77;
    }
    if ((int)v80 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v80;
    }
    uint64_t v83 = v14;
    BOOL v86 = v95;
    uint64_t v88 = a6 + 768;
    do
    {
      if (v85 >= 8)
      {
        uint64_t v15 = 0;
        int v16 = a3 + 8 * v12;
        uint64_t v17 = (__int16 *)(v82[97] + 2 * (((uint64_t)a2 >> 3) + v82[96] * ((uint64_t)v16 >> 3)) + 2);
        int v18 = a2 + 8;
        int v20 = v86;
        char v19 = v88;
        do
        {
          uint64_t v21 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, (v18 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)), (v16 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)));
          int v22 = (*(v17 - 1) >> 9) + (*v17 >> 9) + 1;
          *int v20 = *(unsigned char *)(v21 + 661) + (v22 >> 1) - 2;
          int v23 = *(char *)(v21 + 660) + (v22 >> 1);
          if (v23 >= 51) {
            int v23 = 51;
          }
          if (v23 <= 15) {
            int v23 = 15;
          }
          *char v19 = byte_1D0DAE593[v23 - 15];
          if (v15)
          {
            char v24 = *(unsigned char *)(v21 + 661) + 2;
            int v25 = (v22 + v91) >> 1;
            if (v25 >= 51) {
              LOBYTE(v25) = 51;
            }
            uint64_t v26 = (char *)v94 + 8 * (v15 >> 1) + v12;
            char *v26 = v24 + v25;
            int v27 = (v22 + v90) >> 1;
            if (v27 >= 51) {
              LOBYTE(v27) = 51;
            }
            v26[64] = v24 + v27;
          }
          ++v15;
          ++v17;
          v19 += 8;
          v20 += 8;
          v18 += 8;
        }
        while (v13 != v15);
      }
      ++v12;
      BOOL v86 = (_OWORD *)((char *)v86 + 1);
      ++v88;
    }
    while (v12 != v83);
  }
  uint64_t v29 = v80;
  int v28 = a3;
  int v30 = a3 == 0;
  if ((int)v80 <= v30)
  {
    int v46 = v76;
  }
  else
  {
    if (v77 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v77;
    }
    unint64_t v32 = (unint64_t)v92 | (8 * (a3 == 0));
    int v33 = &a6[8 * (a3 == 0) + 832];
    uint64_t v84 = a3 == 0;
    unint64_t v34 = (unint64_t)v93 & 0xFFFFFFFFFFFFFFF7 | (8 * v84);
    do
    {
      if (v85 >= 8)
      {
        uint64_t v35 = 0;
        int v89 = a3 + 8 * v84;
        uint64_t v36 = ((uint64_t)a2 >> 3) + v82[96] * ((uint64_t)v89 >> 3);
        uint64_t v37 = v82[97];
        uint64_t v87 = v37 + 2 * v36;
        uint64_t v38 = v37 - 2 * v75 + 2 * v36;
        int v39 = a2;
        do
        {
          uint64_t v40 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, (v39 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)), (v89 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)));
          int v41 = (*(__int16 *)(v38 + 2 * v35) >> 9) + (*(__int16 *)(v87 + 2 * v35) >> 9) + 1;
          *(unsigned char *)(v34 + v35) = *(unsigned char *)(v40 + 661) + (v41 >> 1) - 2;
          int v42 = *(char *)(v40 + 660) + (v41 >> 1);
          if (v42 >= 51) {
            int v42 = 51;
          }
          if (v42 <= 15) {
            int v42 = 15;
          }
          v33[v35] = byte_1D0DAE593[v42 - 15];
          char v43 = *(unsigned char *)(v40 + 661) + 2;
          int v44 = (v41 + v91) >> 1;
          if (v44 >= 51) {
            LOBYTE(v44) = 51;
          }
          *(unsigned char *)(v32 + v35) = v43 + v44;
          int v45 = (v41 + v90) >> 1;
          if (v45 >= 51) {
            LOBYTE(v45) = 51;
          }
          *(unsigned char *)(v32 + v35++ + 64) = v43 + v45;
          v39 += 8;
        }
        while (v31 != v35);
      }
      v32 += 8;
      v33 += 8;
      v34 += 8;
      uint64_t v29 = v80;
      ++v84;
    }
    while (v84 != v80);
    int v28 = a3;
    int v46 = v76;
    int v30 = a3 == 0;
  }
  if (v85 >= 8)
  {
    unint64_t v47 = 0;
    LODWORD(v48) = v46 >> 2;
    if (v46 >> 2 <= 1) {
      uint64_t v48 = 1;
    }
    else {
      uint64_t v48 = v48;
    }
    if (v77 <= 1) {
      uint64_t v49 = 1;
    }
    else {
      uint64_t v49 = v77;
    }
    uint64_t v50 = a6;
    do
    {
      if (v46 >= 4)
      {
        uint64_t v51 = 0;
        uint64_t v52 = (unsigned __int8 *)&a6[32 * (v47 >> 1) + 257];
        uint64_t v53 = v82[121] + ((uint64_t)v28 >> 2) + v82[117] * ((uint64_t)(a2 + 8 + 8 * (int)v47) >> 3);
        do
        {
          if (*(unsigned char *)(v53 + v51))
          {
            int v54 = *((char *)v95 + 8 * v47 + (v51 >> 1)) + 2 * *(unsigned __int8 *)(v53 + v51);
            if (v54 >= 53) {
              int v54 = 53;
            }
            if (v54 <= 17) {
              int v54 = 17;
            }
            v50[v51] = byte_1D0DAE5C4[v54 - 17];
          }
          ++v51;
        }
        while (v48 != v51);
        if (v47)
        {
          uint64_t v55 = 0;
          do
          {
            if (*(unsigned __int8 *)(v53 + v55) >= 2u)
            {
              uint64_t v56 = (char *)v94 + 8 * (v47 >> 1) + (v55 >> 1);
              int v57 = *v56;
              if (v57 >= 53) {
                int v57 = 53;
              }
              if (v57 <= 17) {
                int v57 = 17;
              }
              unsigned __int8 v58 = byte_1D0DAE5C4[v57 - 17];
              int v59 = v56[64];
              if (v59 >= 53) {
                int v59 = 53;
              }
              if (v59 <= 17) {
                int v59 = 17;
              }
              unsigned __int8 v60 = byte_1D0DAE5C4[v59 - 17];
              *(v52 - 1) = v58;
              unsigned __int8 *v52 = v60;
            }
            ++v55;
            v52 += 2;
          }
          while (v48 != v55);
        }
      }
      ++v47;
      v50 += 16;
    }
    while (v47 != v49);
  }
  if ((int)v29 > v30)
  {
    uint64_t v61 = v28 == 0;
    LODWORD(v62) = v85 >> 2;
    if (v85 >> 2 <= 1) {
      uint64_t v62 = 1;
    }
    else {
      uint64_t v62 = v62;
    }
    int v63 = &a6[16 * (v28 == 0) + 128];
    uint64_t v64 = &a6[32 * v61 + 513];
    do
    {
      if (v85 >= 4)
      {
        uint64_t v65 = 0;
        uint64_t v66 = v82[118] + ((uint64_t)a2 >> 2) + v82[116] * ((uint64_t)(v28 + 8 * (int)v61) >> 3);
        do
        {
          if (*(unsigned char *)(v66 + v65))
          {
            int v67 = *((char *)v93 + 8 * v61 + (v65 >> 1)) + 2 * *(unsigned __int8 *)(v66 + v65);
            if (v67 >= 53) {
              int v67 = 53;
            }
            if (v67 <= 17) {
              int v67 = 17;
            }
            v63[v65] = byte_1D0DAE5C4[v67 - 17];
          }
          ++v65;
        }
        while (v62 != v65);
        uint64_t v68 = 0;
        int v69 = (unsigned __int8 *)v64;
        do
        {
          if (*(unsigned __int8 *)(v66 + v68) >= 2u)
          {
            int v70 = (char *)v92 + 8 * v61 + (v68 >> 1);
            int v71 = *v70;
            if (v71 >= 53) {
              int v71 = 53;
            }
            if (v71 <= 17) {
              int v71 = 17;
            }
            unsigned __int8 v72 = byte_1D0DAE5C4[v71 - 17];
            int v73 = v70[64];
            if (v73 >= 53) {
              int v73 = 53;
            }
            if (v73 <= 17) {
              int v73 = 17;
            }
            unsigned __int8 v74 = byte_1D0DAE5C4[v73 - 17];
            *(v69 - 1) = v72;
            *int v69 = v74;
          }
          ++v68;
          v69 += 2;
        }
        while (v62 != v68);
      }
      ++v61;
      v63 += 16;
      v64 += 32;
    }
    while (v61 != v29);
  }
}

uint64_t sub_1D0CCF2F8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(v6 + 520);
  int v8 = *(_DWORD *)(v6 + 524);
  unsigned int v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(unsigned char *)(v5 + 2113);
  uint64_t v10 = (a3 << v5);
  uint64_t v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7) {
    uint64_t v12 = (v7 - v10);
  }
  else {
    uint64_t v12 = v9;
  }
  if ((int)(v11 + v9) >= v8) {
    uint64_t v13 = (v8 - v11);
  }
  else {
    uint64_t v13 = v9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  uint64_t v15 = *(void *)(v6 + 416);
  uint64_t v28 = (v15 * (int)v11 + (int)v10) << *(unsigned char *)(v6 + 531);
  uint64_t v29 = *(void *)(v6 + 400);
  uint64_t v16 = ((int)v12 >> 3);
  if ((int)v16 > (v10 == 0))
  {
    uint64_t v17 = v16 - (v10 == 0);
    int v18 = &v30[10 * (v10 == 0)];
    char v19 = &v30[5 * (v10 == 0) + 296];
    uint64_t v20 = v29 + v28 + 16 * (v10 == 0) - 16 * v15;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 16;
      --v17;
    }
    while (v17);
  }
  uint64_t v21 = ((int)v13 >> 3);
  if ((int)v21 > (v11 == 0))
  {
    BOOL v22 = v11 == 0;
    uint64_t v23 = (v12 + 8);
    uint64_t v24 = v21 - v22;
    int v25 = &v30[10 * v22 + 80];
    uint64_t v26 = &v30[5 * v22 + 336];
    uint64_t v27 = v28 + 16 * v15 * v22 + v29 - 16;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 16 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

int *sub_1D0CCF4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  uint64_t v69 = v66;
  int v70 = result;
  uint64_t v71 = *(void *)(v66 + 8);
  uint64_t v72 = *(void *)(v66 + 16);
  int v73 = *(_DWORD *)(v71 + 520);
  int v74 = *(_DWORD *)(v71 + 524);
  uint64_t v75 = *(void *)(v71 + 416);
  uint64_t v76 = *(void *)(v71 + 424);
  uint64_t v143 = v71;
  int v77 = *(unsigned __int8 *)(v72 + 2117);
  LOBYTE(v71) = *(unsigned char *)(v72 + 2113);
  int v78 = v67 << v71;
  int v79 = v68 << v71;
  int v80 = v79 - 16;
  int v130 = v73;
  if (*(_DWORD *)(v72 + 2120) - 1 == v67)
  {
    BOOL v81 = v79 < 16;
    if (v79 >= 16) {
      int v82 = v79 - 16;
    }
    else {
      int v82 = 0;
    }
    if (v81) {
      int v83 = v80;
    }
    else {
      int v83 = 0;
    }
    int v84 = v83 + v77;
    if (v78 <= 63) {
      unsigned int v85 = 0;
    }
    else {
      unsigned int v85 = (v78 - 1) & 0xFFFFFFC0;
    }
    signed int v131 = v85;
    int v134 = v73 - v85;
    int v86 = v84 + v82 - 8;
    if (v84 + v82 < 8) {
      int v86 = 0;
    }
    result[30] = v86;
    if (*(_DWORD *)(*(void *)(v66 + 16) + 2124) - 1 == v68)
    {
      int v84 = v74 - v82;
      result[30] = v74;
    }
  }
  else
  {
    if (!v67 || (v78 & 0x3F) != 0) {
      return result;
    }
    BOOL v87 = v79 < 16;
    if (v79 >= 16) {
      int v82 = v79 - 16;
    }
    else {
      int v82 = 0;
    }
    if (!v87) {
      int v80 = 0;
    }
    int v84 = v80 + v77;
    if (v78 >= 64) {
      int v88 = v78 - 64;
    }
    else {
      int v88 = 0;
    }
    signed int v131 = v88;
    if (v78 >= 64) {
      int v78 = 64;
    }
    int v134 = v78;
    int v89 = v74 - v82;
    if (*(_DWORD *)(v72 + 2124) - 1 == v68) {
      int v84 = v89;
    }
  }
  if (v84 >= 1)
  {
    uint64_t v90 = 0;
    uint64_t vars8 = &STACK[0x420];
    uint64_t v122 = v82;
    uint64_t vars0 = &a65;
    uint64_t v133 = 16 * v75;
    uint64_t v91 = 16 * v76;
    unint64_t v121 = v84;
    uint64_t v142 = v66;
    int v123 = v84;
    do
    {
      if (v84 - (int)v90 >= 64) {
        uint64_t v92 = 64;
      }
      else {
        uint64_t v92 = (v84 - v90);
      }
      uint64_t v124 = v90;
      int v93 = v90 + v122 - 8;
      uint64_t v148 = v90 + v122;
      if (!(v90 + v122)) {
        int v93 = 0;
      }
      int v147 = v93;
      int v94 = v92 + 8;
      if (!(v90 + v122)) {
        int v94 = v92;
      }
      int v146 = v94;
      if (v134 >= 1)
      {
        uint64_t v95 = 0;
        BOOL v96 = v148 == 0;
        uint64_t v144 = ((int)v92 >> 3);
        int v145 = v148 == 0;
        uint64_t v132 = v144 - v96;
        uint64_t v128 = v91 * v96;
        uint64_t v129 = v133 * v96;
        uint64_t v127 = &STACK[0x320] + 4 * v96;
        do
        {
          if (v134 - (int)v95 >= 64) {
            uint64_t v97 = 64;
          }
          else {
            uint64_t v97 = (v134 - v95);
          }
          uint64_t v98 = v95 + v131;
          int v99 = v97 + v131 + v95;
          uint64_t v139 = *(void *)(v143 + 416);
          uint64_t v141 = v95;
          uint64_t v135 = *(void *)(v143 + 400);
          char v100 = *(unsigned char *)(v143 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v70 + 6))(v69, v98, v148, v97, v92, &a33);
          BOOL v138 = v99 < v130;
          if (v99 >= v130) {
            int v101 = v97;
          }
          else {
            int v101 = v97 + 8;
          }
          uint64_t v102 = (v98 + v139 * v148) << v100;
          unsigned int v103 = (int)v97 >> 3;
          if (v99 >= v130) {
            uint64_t v104 = v103;
          }
          else {
            uint64_t v104 = v103 + 1;
          }
          int v140 = v98;
          int v137 = v101;
          sub_1D0CCF9B0(&STACK[0x4A0], v69, v98, v147, v101, v146, 0);
          if ((int)v104 >= 2)
          {
            uint64_t v105 = v104 - 1;
            uint64_t v106 = v135 + v102 + 16;
            int v107 = &a33;
            signed int v108 = &STACK[0x420];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v70 + 9))(v106, v75, v108, v107, v92);
              v107 += 16;
              ++v108;
              v106 += 16;
              --v105;
            }
            while (v105);
          }
          sub_1D0CCFA64((int *)&STACK[0x4A0]);
          if ((int)v144 > v145)
          {
            uint64_t v109 = &STACK[0x460] + (v148 == 0);
            uint64_t v110 = v135 + v129 + v102;
            unsigned int v111 = &a49 + 2 * (v148 == 0);
            uint64_t v112 = v132;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v70 + 10))(v110, v75, v109, v111, v97);
              v111 += 2;
              ++v109;
              v110 += v133;
              --v112;
            }
            while (v112);
          }
          sub_1D0CCFA64((int *)&STACK[0x4A0]);
          uint64_t v136 = *(void *)(v143 + 408);
          unint64_t v113 = ((v140 & 0xFFFFFFFFFFFFFFFELL) + *(void *)(v143 + 424) * v148) << *(unsigned char *)(v143 + 531);
          sub_1D0CCF9B0(&STACK[0x4A0], v142, v140, v147, v137, v146, 1u);
          uint64_t v114 = (v138 + (((int)v97 + 8) >> 4));
          uint64_t v91 = 16 * v76;
          if ((int)v114 >= 2)
          {
            uint64_t v115 = v114 - 1;
            uint64_t v116 = v136 + v113 + 32;
            uint64_t v117 = &a65;
            do
            {
              (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v70 + 11))(v116, v76, v117, v92);
              v117 += 4;
              v116 += 32;
              --v115;
            }
            while (v115);
          }
          sub_1D0CCFA64((int *)&STACK[0x4A0]);
          if ((int)v144 > v145)
          {
            uint64_t v118 = v127;
            unint64_t v119 = v136 + v128 + v113;
            uint64_t v120 = v132;
            do
            {
              (*((void (**)(unint64_t, uint64_t, unint64_t *, void))v70 + 12))(v119, v76, v118, ((int)v97 >> 1));
              v118 += 4;
              v119 += 16 * v76;
              --v120;
            }
            while (v120);
          }
          uint64_t result = sub_1D0CCFA64((int *)&STACK[0x4A0]);
          uint64_t v69 = v142;
          uint64_t v95 = v141 + 64;
        }
        while (v141 + 64 < v134);
      }
      uint64_t v90 = v124 + 64;
      int v84 = v123;
    }
    while (v124 + 64 < v121);
  }
  return result;
}

void *sub_1D0CCF9B0(void *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  __dst[9216] = a2;
  *((_DWORD *)__dst + 18434) = a3;
  *((_DWORD *)__dst + 18435) = a4;
  *((_DWORD *)__dst + 18436) = a5;
  *((_DWORD *)__dst + 18437) = a6;
  *((_DWORD *)__dst + 18438) = a7;
  if (a6 >= 1)
  {
    int v7 = (char *)__dst;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = v8 + 8 * a7;
    uint64_t v10 = *(void *)(v9 + 416);
    uint64_t v11 = (char *)(*(void *)(v9 + 400) + ((v10 * a4 + (a3 >> (a7 != 0) << a7)) << *(unsigned char *)(v8 + 531)));
    size_t v12 = 2 * a5;
    uint64_t v13 = a6;
    uint64_t v14 = 2 * v10;
    do
    {
      __dst = memcpy(v7, v11, v12);
      v11 += v14;
      v7 += v12;
      --v13;
    }
    while (v13);
  }
  return __dst;
}

int *sub_1D0CCFA64(int *result)
{
  unsigned int v1 = result + 18432;
  int v2 = result[18437];
  if (v2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = result[18438];
    uint64_t v5 = *(void *)(*(void *)v1 + 8);
    uint64_t v6 = v5 + 8 * v4;
    uint64_t v7 = *(void *)(v6 + 416);
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 32) + 19);
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 16) + 283);
    uint64_t v10 = result[18436];
    uint64_t v11 = (v7 * result[18435] + (result[18434] >> (v4 != 0) << v4)) << *(unsigned char *)(v5 + 531);
    uint64_t v12 = 16 * v10;
    uint64_t v13 = 2 * v10;
    uint64_t v14 = (_OWORD *)(*(void *)(v6 + 400) + v11);
    uint64_t v15 = 16 * v7;
    uint64_t v16 = 2 * v7;
    do
    {
      if ((int)v10 >= 1)
      {
        uint64_t v17 = 0;
        int v18 = v14;
        char v19 = result;
        do
        {
          uint64_t v20 = *(void *)(*(void *)v1 + 8);
          uint64_t v21 = *(void *)(v20 + 768) * ((uint64_t)(v1[3] + v3) >> 3) + ((v1[2] + (int)v17) >> 3);
          uint64_t v22 = *(void *)(v20 + 776);
          if (v8 && (*(_WORD *)(v22 + 2 * v21) & 0x100) != 0 || v9 && (*(_WORD *)(v22 + 2 * v21) & 0xC) != 0)
          {
            uint64_t v23 = v18;
            uint64_t v24 = v19;
            uint64_t v25 = 8;
            do
            {
              *uint64_t v23 = *(_OWORD *)v24;
              uint64_t v24 = (int *)((char *)v24 + v13);
              uint64_t v23 = (_OWORD *)((char *)v23 + v16);
              --v25;
            }
            while (v25);
            LODWORD(v10) = v1[4];
          }
          v17 += 8;
          v19 += 4;
          ++v18;
        }
        while (v17 < (int)v10);
        int v2 = v1[5];
      }
      v3 += 8;
      uint64_t result = (int *)((char *)result + v12);
      uint64_t v14 = (_OWORD *)((char *)v14 + v15);
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t sub_1D0CCFB90(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61 = result;
  uint64_t v62 = *(void *)(a2 + 8);
  uint64_t v63 = *(void *)(a2 + 16);
  int v64 = *(_DWORD *)(v62 + 520);
  int v65 = *(_DWORD *)(v62 + 524);
  uint64_t v66 = *(void *)(v62 + 416);
  uint64_t v67 = *(void *)(v62 + 424);
  uint64_t v131 = v62;
  int v68 = *(unsigned __int8 *)(v63 + 2117);
  LOBYTE(v62) = *(unsigned char *)(v63 + 2113);
  int v69 = a3 << v62;
  int v70 = a4 << v62;
  int v71 = v70 - 16;
  if (*(_DWORD *)(v63 + 2120) - 1 == a3)
  {
    BOOL v72 = v70 < 16;
    if (v70 >= 16) {
      int v73 = v70 - 16;
    }
    else {
      int v73 = 0;
    }
    if (v72) {
      int v74 = v71;
    }
    else {
      int v74 = 0;
    }
    int v75 = v74 + v68;
    if (v69 <= 63) {
      unsigned int v76 = 0;
    }
    else {
      unsigned int v76 = (v69 - 1) & 0xFFFFFFC0;
    }
    signed int v121 = v76;
    int v124 = v64 - v76;
    int v77 = v75 + v73 - 8;
    if (v75 + v73 < 8) {
      int v77 = 0;
    }
    *(_DWORD *)(result + 120) = v77;
    if (*(_DWORD *)(*(void *)(a2 + 16) + 2124) - 1 == a4)
    {
      int v75 = v65 - v73;
      *(_DWORD *)(result + 120) = v65;
    }
  }
  else
  {
    if (!a3 || (v69 & 0x3F) != 0) {
      return result;
    }
    BOOL v78 = v70 < 16;
    if (v70 >= 16) {
      int v73 = v70 - 16;
    }
    else {
      int v73 = 0;
    }
    if (!v78) {
      int v71 = 0;
    }
    int v75 = v71 + v68;
    if (v69 >= 64) {
      int v79 = v69 - 64;
    }
    else {
      int v79 = 0;
    }
    signed int v121 = v79;
    if (v69 >= 64) {
      int v69 = 64;
    }
    int v124 = v69;
    int v80 = v65 - v73;
    if (*(_DWORD *)(v63 + 2124) - 1 == a4) {
      int v75 = v80;
    }
  }
  if (v75 >= 1)
  {
    uint64_t v81 = 0;
    uint64_t v110 = v73;
    uint64_t v123 = 16 * v66;
    uint64_t v82 = 16 * v67;
    unint64_t v111 = v75;
    uint64_t v120 = a2;
    int v119 = v64;
    int v112 = v75;
    do
    {
      uint64_t v113 = v81;
      if (v75 - (int)v81 >= 64) {
        uint64_t v83 = 64;
      }
      else {
        uint64_t v83 = (v75 - v81);
      }
      if (v124 >= 1)
      {
        uint64_t v84 = 0;
        uint64_t v134 = v81 + v110;
        BOOL v85 = v81 + v110 == 0;
        uint64_t v132 = ((int)v83 >> 3);
        int v133 = v81 + v110 == 0;
        uint64_t v122 = v132 - v85;
        uint64_t v117 = &STACK[0x8C0] + v85;
        uint64_t v118 = &a45 + 2 * v85;
        uint64_t vars8 = &STACK[0x780] + 4 * v85;
        uint64_t v116 = v123 * v85;
        uint64_t vars0 = v82 * v85;
        do
        {
          if (v124 - (int)v84 >= 64) {
            uint64_t v86 = 64;
          }
          else {
            uint64_t v86 = (v124 - v84);
          }
          uint64_t v87 = v84 + v121;
          uint64_t v130 = v84;
          int v127 = v86 + v121 + v84;
          uint64_t v88 = *(void *)(v131 + 416);
          uint64_t v125 = *(void *)(v131 + 400);
          char v89 = *(unsigned char *)(v131 + 531);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v61 + 48))(a2, v87, v134, v86, v83, &a29);
          BOOL v72 = v127 < v64;
          BOOL v126 = v127 < v64;
          int v128 = v87;
          uint64_t v90 = (v87 + v88 * v134) << v89;
          LODWORD(v91) = (int)v86 >> 3;
          if (v72) {
            uint64_t v91 = (v91 + 1);
          }
          else {
            uint64_t v91 = v91;
          }
          if ((int)v91 >= 2)
          {
            uint64_t v92 = v91 - 1;
            uint64_t v93 = v125 + v90 + 16;
            int v94 = &a29;
            uint64_t v95 = &STACK[0x880];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 72))(v93, v66, v95, v94, v83);
              v94 += 16;
              ++v95;
              v93 += 16;
              --v92;
            }
            while (v92);
          }
          if ((int)v132 > v133)
          {
            BOOL v96 = v117;
            uint64_t v97 = v125 + v116 + v90;
            uint64_t v98 = v118;
            uint64_t v99 = v122;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 80))(v97, v66, v96, v98, v86);
              v98 += 2;
              ++v96;
              v97 += v123;
              --v99;
            }
            while (v99);
          }
          unint64_t v100 = (v128 & 0xFFFFFFFFFFFFFFFELL) + *(void *)(v131 + 424) * v134;
          uint64_t v129 = *(void *)(v131 + 408);
          unint64_t v101 = v100 << *(unsigned char *)(v131 + 531);
          uint64_t v102 = (v126 + (((int)v86 + 8) >> 4));
          uint64_t v82 = 16 * v67;
          if ((int)v102 >= 2)
          {
            uint64_t v103 = v102 - 1;
            uint64_t v104 = v129 + v101 + 32;
            uint64_t v105 = &a61;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v61 + 88))(v104, v67, v105, v83);
              v105 += 4;
              v104 += 32;
              --v103;
            }
            while (v103);
          }
          if ((int)v132 > v133)
          {
            uint64_t v106 = ((int)v86 >> 1);
            int v107 = vars8;
            unint64_t v108 = v129 + vars0 + v101;
            uint64_t v109 = v122;
            do
            {
              uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t *, uint64_t))(v61 + 96))(v108, v67, v107, v106);
              v107 += 4;
              v108 += 16 * v67;
              --v109;
            }
            while (v109);
          }
          uint64_t v84 = v130 + 64;
          a2 = v120;
          int v64 = v119;
        }
        while (v130 + 64 < v124);
      }
      uint64_t v81 = v113 + 64;
      int v75 = v112;
    }
    while (v113 + 64 < v111);
  }
  return result;
}

int *sub_1D0CCFFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  uint64_t v52 = v51;
  uint64_t v53 = v50;
  int v54 = result;
  uint64_t v55 = *(void *)(v50 + 8);
  int v105 = *(_DWORD *)(v55 + 520);
  uint64_t v56 = *(void *)(v55 + 416);
  uint64_t v57 = *(void *)(v55 + 424);
  int v58 = *v51;
  uint64_t v106 = v55;
  if (*v51 < *(_DWORD *)(v55 + 524))
  {
    v58 &= 0xFFFFFFF0;
    int *v51 = v58;
  }
  uint64_t v59 = result[30];
  if ((int)v59 < v58)
  {
    signed int v110 = (v105 - 1) & 0xFFFFFFC0;
    uint64_t vars0 = v57;
    uint64_t vars8 = &a49;
    uint64_t v112 = 16 * v56;
    uint64_t v113 = v50;
    uint64_t v104 = v52;
    uint64_t v111 = 16 * v57;
    do
    {
      char v60 = *(unsigned char *)(v106 + 531);
      uint64_t v61 = *(void *)(v106 + 400) + ((*(void *)(v106 + 416) * (int)v59) << v60);
      uint64_t v62 = *(void *)(v106 + 408) + ((*(void *)(v106 + 424) * (int)v59) << v60);
      int v63 = v58 - v59;
      if (v63 >= 64) {
        uint64_t v64 = 64;
      }
      else {
        uint64_t v64 = v63;
      }
      if (v59) {
        int v65 = v59 - 8;
      }
      else {
        int v65 = 0;
      }
      int v66 = v64 + 8;
      if (!v59) {
        int v66 = v64;
      }
      int v114 = v66;
      int v115 = v65;
      int v67 = (int)v64 >> 3;
      uint64_t v118 = ((int)v64 >> 3);
      uint64_t v68 = 0;
      if (v110 >= 1)
      {
        do
        {
          uint64_t v119 = v62;
          (*((void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))v54 + 6))(v53, v68, v54[30], 64, v64, &a17);
          int v116 = v68;
          sub_1D0CCF9B0(&STACK[0x420], v53, v68, v115, 72, v114, 0);
          uint64_t v69 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v54 + 9))(v61 + i, v56, (char *)&STACK[0x3A0] + v69, (char *)&STACK[0x3A0] + i - 784, v64);
            v69 += 8;
          }
          sub_1D0CCFA64((int *)&STACK[0x420]);
          int v71 = v54[30];
          if (v67 > (v71 == 0))
          {
            BOOL v72 = v71 == 0;
            uint64_t v73 = v118 - v72;
            int v74 = &a33 + 2 * v72;
            int v75 = &STACK[0x3E0] + v72;
            uint64_t v76 = v61 + v112 * v72;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v54 + 10))(v76, v56, v75, v74, 64);
              v74 += 2;
              ++v75;
              v76 += v112;
              --v73;
            }
            while (v73);
          }
          sub_1D0CCFA64((int *)&STACK[0x420]);
          sub_1D0CCF9B0(&STACK[0x420], v113, v116, v115, 72, v114, 1u);
          uint64_t v77 = 0;
          uint64_t v57 = vars0;
          do
          {
            uint64_t v78 = v77 + 32;
            (*((void (**)(uint64_t, uint64_t, char *, uint64_t))v54 + 11))(v77 + 32 + v119, vars0, (char *)&a49 + v77, v64);
            uint64_t v77 = v78;
          }
          while (v78 != 128);
          sub_1D0CCFA64((int *)&STACK[0x420]);
          int v79 = v54[30];
          if ((int)v118 > (v79 == 0))
          {
            BOOL v80 = v79 == 0;
            uint64_t v81 = v118 - v80;
            uint64_t v82 = &STACK[0x2A0] + 4 * v80;
            uint64_t v83 = v119 + v111 * v80;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v54 + 12))(v83, vars0, v82, 32);
              v82 += 4;
              v83 += v111;
              --v81;
            }
            while (v81);
          }
          uint64_t result = sub_1D0CCFA64((int *)&STACK[0x420]);
          v61 += 128;
          int v67 = (int)v64 >> 3;
          uint64_t v62 = v119 + 128;
          uint64_t v68 = (v116 + 64);
          uint64_t v53 = v113;
        }
        while ((int)v68 < v110);
        uint64_t v59 = v54[30];
      }
      int v84 = v105 - v68;
      if (v105 == v68)
      {
        uint64_t v52 = v104;
      }
      else
      {
        uint64_t v120 = v62;
        (*((void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, char *))v54 + 6))(v53, v68, v59, (v105 - v68), v64, &a17);
        int v117 = v68;
        sub_1D0CCF9B0(&STACK[0x420], v53, v68, v115, v84, v114, 0);
        int v107 = v105 - v68;
        if (v84 >= 16)
        {
          uint64_t v85 = v61 + 16;
          uint64_t v86 = (v84 >> 3) - 1;
          uint64_t v87 = &a17;
          uint64_t v88 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v54 + 9))(v85, v56, v88, v87, v64);
            v87 += 16;
            ++v88;
            v85 += 16;
            --v86;
          }
          while (v86);
        }
        sub_1D0CCFA64((int *)&STACK[0x420]);
        int v89 = v54[30];
        if ((int)v118 > (v89 == 0))
        {
          BOOL v90 = v89 == 0;
          uint64_t v91 = v118 - v90;
          uint64_t v92 = &a33 + 2 * v90;
          uint64_t v93 = &STACK[0x3E0] + v90;
          uint64_t v94 = v61 + v112 * v90;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))v54 + 10))(v94, v56, v93, v92, v107);
            v92 += 2;
            ++v93;
            v94 += v112;
            --v91;
          }
          while (v91);
        }
        sub_1D0CCFA64((int *)&STACK[0x420]);
        sub_1D0CCF9B0(&STACK[0x420], v113, v117, v115, v107, v114, 1u);
        if (v107 >= 24)
        {
          uint64_t v95 = v120 + 32;
          uint64_t v96 = ((v107 + 8) >> 4) - 1;
          uint64_t v97 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v54 + 11))(v95, v57, v97, v64);
            v97 += 4;
            v95 += 32;
            --v96;
          }
          while (v96);
        }
        sub_1D0CCFA64((int *)&STACK[0x420]);
        int v98 = v54[30];
        if ((int)v118 > (v98 == 0))
        {
          BOOL v99 = v98 == 0;
          uint64_t v100 = v118 - v99;
          unint64_t v101 = &STACK[0x2A0] + 4 * v99;
          uint64_t v102 = v120 + v111 * v99;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, void))v54 + 12))(v102, v57, v101, (v107 >> 1));
            v101 += 4;
            v102 += v111;
            --v100;
          }
          while (v100);
        }
        uint64_t result = sub_1D0CCFA64((int *)&STACK[0x420]);
        LODWORD(v59) = v54[30];
        uint64_t v52 = v104;
        uint64_t v53 = v113;
      }
      uint64_t v59 = (v59 + v64);
      v54[30] = v59;
      int v58 = *v52;
    }
    while ((int)v59 < *v52);
  }
  int v103 = *(_DWORD *)(v106 + 524);
  if (v103 >= (int)v59) {
    int v103 = v59;
  }
  int *v52 = v103;
  if (v54[30] < *(_DWORD *)(v106 + 524))
  {
    if (v103 <= 4) {
      int v103 = 4;
    }
    int *v52 = v103 - 4;
  }
  return result;
}

uint64_t sub_1D0CD0594(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int v45 = a3;
  uint64_t v46 = result;
  uint64_t v47 = *(void *)(a2 + 8);
  int v98 = *(_DWORD *)(v47 + 520);
  uint64_t v48 = *(void *)(v47 + 416);
  uint64_t v49 = *(void *)(v47 + 424);
  int v50 = *a3;
  uint64_t v99 = v47;
  if (*a3 < *(_DWORD *)(v47 + 524))
  {
    v50 &= 0xFFFFFFF0;
    *a3 = v50;
  }
  int v51 = *(_DWORD *)(result + 120);
  if (v51 < v50)
  {
    signed int vars8_4 = (v98 - 1) & 0xFFFFFFC0;
    uint64_t v100 = v49;
    uint64_t v104 = 16 * v48;
    uint64_t v101 = 16 * v49;
    uint64_t v97 = v45;
    do
    {
      char v52 = *(unsigned char *)(v99 + 531);
      uint64_t v53 = *(void *)(v99 + 400) + ((*(void *)(v99 + 416) * v51) << v52);
      uint64_t v54 = *(void *)(v99 + 408) + ((*(void *)(v99 + 424) * v51) << v52);
      int v55 = v50 - v51;
      if (v55 >= 64) {
        uint64_t v56 = 64;
      }
      else {
        uint64_t v56 = v55;
      }
      int v57 = (int)v56 >> 3;
      uint64_t v107 = ((int)v56 >> 3);
      int v58 = 0;
      if (vars8_4 >= 1)
      {
        do
        {
          uint64_t v108 = v54;
          int v105 = v58;
          (*(void (**)(uint64_t))(v46 + 48))(a2);
          uint64_t v59 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v46 + 72))(v53 + i, v48, (char *)&STACK[0x780] + v59, (char *)&STACK[0x780] + i - 784, v56);
            v59 += 8;
          }
          int v61 = *(_DWORD *)(v46 + 120);
          if (v57 > (v61 == 0))
          {
            BOOL v62 = v61 == 0;
            uint64_t v63 = v107 - v62;
            uint64_t v64 = &a29 + 2 * v62;
            int v65 = &STACK[0x7C0] + v62;
            uint64_t v66 = v53 + v104 * v62;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v46 + 80))(v66, v48, v65, v64, 64);
              v64 += 2;
              ++v65;
              v66 += v104;
              --v63;
            }
            while (v63);
          }
          uint64_t v67 = 0;
          uint64_t v49 = v100;
          do
          {
            uint64_t v68 = v67 + 32;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v46 + 88))(v67 + 32 + v108, v100, (char *)&a45 + v67, v56);
            uint64_t v67 = v68;
          }
          while (v68 != 128);
          int v69 = *(_DWORD *)(v46 + 120);
          if ((int)v107 > (v69 == 0))
          {
            BOOL v70 = v69 == 0;
            uint64_t v71 = v107 - v70;
            BOOL v72 = &STACK[0x680] + 4 * v70;
            uint64_t v73 = v108 + v101 * v70;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v46 + 96))(v73, v100, v72, 32);
              v72 += 4;
              v73 += v101;
              --v71;
            }
            while (v71);
          }
          v53 += 128;
          int v57 = (int)v56 >> 3;
          uint64_t v54 = v108 + 128;
          int v58 = v105 + 64;
        }
        while (v105 + 64 < vars8_4);
        int v51 = *(_DWORD *)(v46 + 120);
      }
      int v74 = v98 - v58;
      if (v98 != v58)
      {
        uint64_t v109 = v54;
        uint64_t result = (*(uint64_t (**)(uint64_t))(v46 + 48))(a2);
        unsigned int v106 = v74;
        if (v74 >= 16)
        {
          uint64_t v75 = v53 + 16;
          uint64_t v76 = (v74 >> 3) - 1;
          uint64_t v77 = &a13;
          uint64_t v78 = &STACK[0x780];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v46 + 72))(v75, v48, v78, v77, v56);
            v77 += 16;
            ++v78;
            v75 += 16;
            --v76;
          }
          while (v76);
        }
        int v79 = *(_DWORD *)(v46 + 120);
        uint64_t v80 = v106;
        if ((int)v107 > (v79 == 0))
        {
          BOOL v81 = v79 == 0;
          uint64_t v82 = v107 - v81;
          uint64_t v83 = &a29 + 2 * v81;
          int v84 = &STACK[0x7C0] + v81;
          uint64_t v85 = v53 + v104 * v81;
          do
          {
            uint64_t v86 = v80;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v46 + 80))(v85, v48, v84, v83, v80);
            uint64_t v80 = v86;
            v83 += 2;
            ++v84;
            v85 += v104;
            --v82;
          }
          while (v82);
        }
        uint64_t v87 = &a45;
        int v88 = v80;
        if ((int)v80 >= 24)
        {
          uint64_t v89 = v109 + 32;
          uint64_t v90 = ((v80 + 8) >> 4) - 1;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v46 + 88))(v89, v49, v87, v56);
            v87 += 4;
            v89 += 32;
            --v90;
          }
          while (v90);
        }
        int v51 = *(_DWORD *)(v46 + 120);
        if ((int)v107 > (v51 == 0))
        {
          BOOL v91 = v51 == 0;
          uint64_t v92 = (v88 >> 1);
          uint64_t v93 = v107 - v91;
          uint64_t v94 = &STACK[0x680] + 4 * v91;
          uint64_t v95 = v109 + v101 * v91;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v46 + 96))(v95, v49, v94, v92);
            v94 += 4;
            v95 += v101;
            --v93;
          }
          while (v93);
          int v51 = *(_DWORD *)(v46 + 120);
        }
      }
      v51 += v56;
      *(_DWORD *)(v46 + 120) = v51;
      int v45 = v97;
      int v50 = *v97;
    }
    while (v51 < *v97);
  }
  int v96 = *(_DWORD *)(v99 + 524);
  if (v96 >= v51) {
    int v96 = v51;
  }
  *int v45 = v96;
  if (*(_DWORD *)(v46 + 120) < *(_DWORD *)(v99 + 524))
  {
    if (v96 <= 4) {
      int v96 = 4;
    }
    *int v45 = v96 - 4;
  }
  return result;
}

void *sub_1D0CD0A48(void *result, uint64_t a2)
{
  int v2 = sub_1D0CD0CDC;
  int v3 = sub_1D0CD1828;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    int v2 = sub_1D0CD0CDC;
    int v3 = sub_1D0CD1828;
    if (!*(unsigned char *)(*(void *)(a2 + 16) + 283))
    {
      int v2 = sub_1D0CD13D0;
      int v3 = sub_1D0CD1DFC;
    }
  }
  *uint64_t result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1D0CD0B0C;
  result[5] = 0;
  result[8] = sub_1D0CCB318;
  result[6] = sub_1D0CCEBF0;
  result[7] = sub_1D0CCEBF0;
  return result;
}

uint64_t sub_1D0CD0B0C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(v6 + 520);
  int v8 = *(_DWORD *)(v6 + 524);
  unsigned int v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(unsigned char *)(v5 + 2113);
  uint64_t v10 = (a3 << v5);
  uint64_t v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7) {
    uint64_t v12 = (v7 - v10);
  }
  else {
    uint64_t v12 = v9;
  }
  if ((int)(v11 + v9) >= v8) {
    uint64_t v13 = (v8 - v11);
  }
  else {
    uint64_t v13 = v9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  uint64_t v15 = *(void *)(v6 + 416);
  uint64_t v28 = (v15 * (int)v11 + (int)v10) << *(unsigned char *)(v6 + 531);
  uint64_t v29 = *(void *)(v6 + 400);
  uint64_t v16 = ((int)v12 >> 3);
  if ((int)v16 > (v10 == 0))
  {
    uint64_t v17 = v16 - (v10 == 0);
    int v18 = &v30[10 * (v10 == 0)];
    char v19 = &v30[5 * (v10 == 0) + 296];
    uint64_t v20 = v29 + v28 + 8 * (v10 == 0) - 8 * v15;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 8;
      --v17;
    }
    while (v17);
  }
  uint64_t v21 = ((int)v13 >> 3);
  if ((int)v21 > (v11 == 0))
  {
    BOOL v22 = v11 == 0;
    uint64_t v23 = (v12 + 8);
    uint64_t v24 = v21 - v22;
    uint64_t v25 = &v30[10 * v22 + 80];
    uint64_t v26 = &v30[5 * v22 + 336];
    uint64_t v27 = v28 + 8 * v15 * v22 + v29 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 8 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

int *sub_1D0CD0CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  uint64_t v69 = v66;
  BOOL v70 = result;
  STACK[0x94D8] = *MEMORY[0x1E4F143B8];
  uint64_t v71 = *(void *)(v66 + 8);
  uint64_t v72 = *(void *)(v66 + 16);
  int v73 = *(_DWORD *)(v71 + 520);
  int v74 = *(_DWORD *)(v71 + 524);
  uint64_t v75 = *(void *)(v71 + 416);
  uint64_t v76 = *(void *)(v71 + 424);
  uint64_t v143 = v71;
  int v77 = *(unsigned __int8 *)(v72 + 2117);
  LOBYTE(v71) = *(unsigned char *)(v72 + 2113);
  int v78 = v67 << v71;
  int v79 = v68 << v71;
  int v80 = v79 - 16;
  int v130 = v73;
  if (*(_DWORD *)(v72 + 2120) - 1 == v67)
  {
    BOOL v81 = v79 < 16;
    if (v79 >= 16) {
      int v82 = v79 - 16;
    }
    else {
      int v82 = 0;
    }
    if (v81) {
      int v83 = v80;
    }
    else {
      int v83 = 0;
    }
    int v84 = v83 + v77;
    if (v78 <= 63) {
      unsigned int v85 = 0;
    }
    else {
      unsigned int v85 = (v78 - 1) & 0xFFFFFFC0;
    }
    signed int v131 = v85;
    int v134 = v73 - v85;
    int v86 = v84 + v82 - 8;
    if (v84 + v82 < 8) {
      int v86 = 0;
    }
    result[30] = v86;
    if (*(_DWORD *)(*(void *)(v66 + 16) + 2124) - 1 == v68)
    {
      int v84 = v74 - v82;
      result[30] = v74;
    }
  }
  else
  {
    if (!v67 || (v78 & 0x3F) != 0) {
      return result;
    }
    BOOL v87 = v79 < 16;
    if (v79 >= 16) {
      int v82 = v79 - 16;
    }
    else {
      int v82 = 0;
    }
    if (!v87) {
      int v80 = 0;
    }
    int v84 = v80 + v77;
    if (v78 >= 64) {
      int v88 = v78 - 64;
    }
    else {
      int v88 = 0;
    }
    signed int v131 = v88;
    if (v78 >= 64) {
      int v78 = 64;
    }
    int v134 = v78;
    int v89 = v74 - v82;
    if (*(_DWORD *)(v72 + 2124) - 1 == v68) {
      int v84 = v89;
    }
  }
  if (v84 >= 1)
  {
    uint64_t v90 = 0;
    uint64_t vars8 = &STACK[0x420];
    uint64_t v122 = v82;
    uint64_t vars0 = &a65;
    uint64_t v133 = 8 * v75;
    uint64_t v91 = 8 * v76;
    unint64_t v121 = v84;
    uint64_t v142 = v66;
    int v123 = v84;
    do
    {
      if (v84 - (int)v90 >= 64) {
        uint64_t v92 = 64;
      }
      else {
        uint64_t v92 = (v84 - v90);
      }
      uint64_t v124 = v90;
      int v93 = v90 + v122 - 8;
      uint64_t v148 = v90 + v122;
      if (!(v90 + v122)) {
        int v93 = 0;
      }
      int v147 = v93;
      int v94 = v92 + 8;
      if (!(v90 + v122)) {
        int v94 = v92;
      }
      int v146 = v94;
      if (v134 >= 1)
      {
        uint64_t v95 = 0;
        BOOL v96 = v148 == 0;
        uint64_t v144 = ((int)v92 >> 3);
        int v145 = v148 == 0;
        uint64_t v132 = v144 - v96;
        uint64_t v128 = v91 * v96;
        uint64_t v129 = v133 * v96;
        int v127 = &STACK[0x320] + 4 * v96;
        do
        {
          if (v134 - (int)v95 >= 64) {
            uint64_t v97 = 64;
          }
          else {
            uint64_t v97 = (v134 - v95);
          }
          uint64_t v98 = v95 + v131;
          int v99 = v97 + v131 + v95;
          uint64_t v139 = *(void *)(v143 + 416);
          uint64_t v141 = v95;
          uint64_t v135 = *(void *)(v143 + 400);
          char v100 = *(unsigned char *)(v143 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v70 + 6))(v69, v98, v148, v97, v92, &a33);
          BOOL v138 = v99 < v130;
          if (v99 >= v130) {
            int v101 = v97;
          }
          else {
            int v101 = v97 + 8;
          }
          uint64_t v102 = (v98 + v139 * v148) << v100;
          unsigned int v103 = (int)v97 >> 3;
          if (v99 >= v130) {
            uint64_t v104 = v103;
          }
          else {
            uint64_t v104 = v103 + 1;
          }
          int v140 = v98;
          int v137 = v101;
          sub_1D0CD11FC(&STACK[0x4B0], v69, v98, v147, v101, v146, 0);
          if ((int)v104 >= 2)
          {
            uint64_t v105 = v104 - 1;
            uint64_t v106 = v135 + v102 + 8;
            uint64_t v107 = &a33;
            uint64_t v108 = &STACK[0x420];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v70 + 9))(v106, v75, v108, v107, v92);
              v107 += 16;
              ++v108;
              v106 += 8;
              --v105;
            }
            while (v105);
          }
          sub_1D0CD12A8((int *)&STACK[0x4B0]);
          if ((int)v144 > v145)
          {
            uint64_t v109 = &STACK[0x460] + (v148 == 0);
            uint64_t v110 = v135 + v129 + v102;
            uint64_t v111 = &a49 + 2 * (v148 == 0);
            uint64_t v112 = v132;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v70 + 10))(v110, v75, v109, v111, v97);
              v111 += 2;
              ++v109;
              v110 += v133;
              --v112;
            }
            while (v112);
          }
          sub_1D0CD12A8((int *)&STACK[0x4B0]);
          uint64_t v136 = *(void *)(v143 + 408);
          unint64_t v113 = ((v140 & 0xFFFFFFFFFFFFFFFELL) + *(void *)(v143 + 424) * v148) << *(unsigned char *)(v143 + 531);
          sub_1D0CD11FC(&STACK[0x4B0], v142, v140, v147, v137, v146, 1u);
          uint64_t v114 = (v138 + (((int)v97 + 8) >> 4));
          uint64_t v91 = 8 * v76;
          if ((int)v114 >= 2)
          {
            uint64_t v115 = v114 - 1;
            uint64_t v116 = v136 + v113 + 16;
            int v117 = &a65;
            do
            {
              (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v70 + 11))(v116, v76, v117, v92);
              v117 += 4;
              v116 += 16;
              --v115;
            }
            while (v115);
          }
          sub_1D0CD12A8((int *)&STACK[0x4B0]);
          if ((int)v144 > v145)
          {
            uint64_t v118 = v127;
            unint64_t v119 = v136 + v128 + v113;
            uint64_t v120 = v132;
            do
            {
              (*((void (**)(unint64_t, uint64_t, unint64_t *, void))v70 + 12))(v119, v76, v118, ((int)v97 >> 1));
              v118 += 4;
              v119 += 8 * v76;
              --v120;
            }
            while (v120);
          }
          uint64_t result = sub_1D0CD12A8((int *)&STACK[0x4B0]);
          uint64_t v69 = v142;
          uint64_t v95 = v141 + 64;
        }
        while (v141 + 64 < v134);
      }
      uint64_t v90 = v124 + 64;
      int v84 = v123;
    }
    while (v124 + 64 < v121);
  }
  return result;
}

void *sub_1D0CD11FC(void *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  __dst[4608] = a2;
  *((_DWORD *)__dst + 9218) = a3;
  *((_DWORD *)__dst + 9219) = a4;
  *((_DWORD *)__dst + 9220) = a5;
  *((_DWORD *)__dst + 9221) = a6;
  *((_DWORD *)__dst + 9222) = a7;
  if (a6 >= 1)
  {
    int v7 = (char *)__dst;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = v8 + 8 * a7;
    uint64_t v10 = *(void *)(v9 + 416);
    uint64_t v11 = (char *)(*(void *)(v9 + 400) + ((v10 * a4 + (a3 >> (a7 != 0) << a7)) << *(unsigned char *)(v8 + 531)));
    size_t v12 = a5;
    uint64_t v13 = a6;
    do
    {
      __dst = memcpy(v7, v11, v12);
      v11 += v10;
      v7 += v12;
      --v13;
    }
    while (v13);
  }
  return __dst;
}

int *sub_1D0CD12A8(int *result)
{
  unsigned int v1 = result + 9216;
  int v2 = result[9221];
  if (v2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = result[9222];
    uint64_t v5 = *(void *)(*(void *)v1 + 8);
    uint64_t v6 = v5 + 8 * v4;
    uint64_t v7 = *(void *)(v6 + 416);
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 32) + 19);
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 16) + 283);
    int v10 = result[9220];
    uint64_t v11 = v10;
    size_t v12 = (void *)(*(void *)(v6 + 400)
                   + ((v7 * result[9219] + (result[9218] >> (v4 != 0) << v4)) << *(unsigned char *)(v5 + 531)));
    uint64_t v13 = 8 * v10;
    do
    {
      if (v10 >= 1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v12;
        uint64_t v16 = result;
        do
        {
          uint64_t v17 = *(void *)(*(void *)v1 + 8);
          uint64_t v18 = *(void *)(v17 + 768) * ((uint64_t)(v1[3] + v3) >> 3) + ((v1[2] + (int)v14) >> 3);
          uint64_t v19 = *(void *)(v17 + 776);
          if (v8 && (*(_WORD *)(v19 + 2 * v18) & 0x100) != 0 || v9 && (*(_WORD *)(v19 + 2 * v18) & 0xC) != 0)
          {
            uint64_t v20 = v15;
            uint64_t v21 = v16;
            uint64_t v22 = 8;
            do
            {
              *uint64_t v20 = *(void *)v21;
              uint64_t v21 = (int *)((char *)v21 + v11);
              uint64_t v20 = (void *)((char *)v20 + v7);
              --v22;
            }
            while (v22);
            int v10 = v1[4];
          }
          v14 += 8;
          v16 += 2;
          ++v15;
        }
        while (v14 < v10);
        int v2 = v1[5];
      }
      v12 += v7;
      uint64_t result = (int *)((char *)result + v13);
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t sub_1D0CD13D0(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61 = result;
  uint64_t v62 = *(void *)(a2 + 8);
  uint64_t v63 = *(void *)(a2 + 16);
  int v64 = *(_DWORD *)(v62 + 520);
  int v65 = *(_DWORD *)(v62 + 524);
  uint64_t v66 = *(void *)(v62 + 416);
  uint64_t v67 = *(void *)(v62 + 424);
  uint64_t v131 = v62;
  int v68 = *(unsigned __int8 *)(v63 + 2117);
  LOBYTE(v62) = *(unsigned char *)(v63 + 2113);
  int v69 = a3 << v62;
  int v70 = a4 << v62;
  int v71 = v70 - 16;
  if (*(_DWORD *)(v63 + 2120) - 1 == a3)
  {
    BOOL v72 = v70 < 16;
    if (v70 >= 16) {
      int v73 = v70 - 16;
    }
    else {
      int v73 = 0;
    }
    if (v72) {
      int v74 = v71;
    }
    else {
      int v74 = 0;
    }
    int v75 = v74 + v68;
    if (v69 <= 63) {
      unsigned int v76 = 0;
    }
    else {
      unsigned int v76 = (v69 - 1) & 0xFFFFFFC0;
    }
    signed int v121 = v76;
    int v124 = v64 - v76;
    int v77 = v75 + v73 - 8;
    if (v75 + v73 < 8) {
      int v77 = 0;
    }
    *(_DWORD *)(result + 120) = v77;
    if (*(_DWORD *)(*(void *)(a2 + 16) + 2124) - 1 == a4)
    {
      int v75 = v65 - v73;
      *(_DWORD *)(result + 120) = v65;
    }
  }
  else
  {
    if (!a3 || (v69 & 0x3F) != 0) {
      return result;
    }
    BOOL v78 = v70 < 16;
    if (v70 >= 16) {
      int v73 = v70 - 16;
    }
    else {
      int v73 = 0;
    }
    if (!v78) {
      int v71 = 0;
    }
    int v75 = v71 + v68;
    if (v69 >= 64) {
      int v79 = v69 - 64;
    }
    else {
      int v79 = 0;
    }
    signed int v121 = v79;
    if (v69 >= 64) {
      int v69 = 64;
    }
    int v124 = v69;
    int v80 = v65 - v73;
    if (*(_DWORD *)(v63 + 2124) - 1 == a4) {
      int v75 = v80;
    }
  }
  if (v75 >= 1)
  {
    uint64_t v81 = 0;
    uint64_t v110 = v73;
    uint64_t v123 = 8 * v66;
    uint64_t v82 = 8 * v67;
    unint64_t v111 = v75;
    uint64_t v120 = a2;
    int v119 = v64;
    int v112 = v75;
    do
    {
      uint64_t v113 = v81;
      if (v75 - (int)v81 >= 64) {
        uint64_t v83 = 64;
      }
      else {
        uint64_t v83 = (v75 - v81);
      }
      if (v124 >= 1)
      {
        uint64_t v84 = 0;
        uint64_t v134 = v81 + v110;
        BOOL v85 = v81 + v110 == 0;
        uint64_t v132 = ((int)v83 >> 3);
        int v133 = v81 + v110 == 0;
        uint64_t v122 = v132 - v85;
        int v117 = &STACK[0x8C0] + v85;
        uint64_t v118 = &a45 + 2 * v85;
        uint64_t vars8 = &STACK[0x780] + 4 * v85;
        uint64_t v116 = v123 * v85;
        uint64_t vars0 = v82 * v85;
        do
        {
          if (v124 - (int)v84 >= 64) {
            uint64_t v86 = 64;
          }
          else {
            uint64_t v86 = (v124 - v84);
          }
          uint64_t v87 = v84 + v121;
          uint64_t v130 = v84;
          int v127 = v86 + v121 + v84;
          uint64_t v88 = *(void *)(v131 + 416);
          uint64_t v125 = *(void *)(v131 + 400);
          char v89 = *(unsigned char *)(v131 + 531);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v61 + 48))(a2, v87, v134, v86, v83, &a29);
          BOOL v72 = v127 < v64;
          BOOL v126 = v127 < v64;
          int v128 = v87;
          uint64_t v90 = (v87 + v88 * v134) << v89;
          LODWORD(v91) = (int)v86 >> 3;
          if (v72) {
            uint64_t v91 = (v91 + 1);
          }
          else {
            uint64_t v91 = v91;
          }
          if ((int)v91 >= 2)
          {
            uint64_t v92 = v91 - 1;
            uint64_t v93 = v125 + v90 + 8;
            int v94 = &a29;
            uint64_t v95 = &STACK[0x880];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v61 + 72))(v93, v66, v95, v94, v83);
              v94 += 16;
              ++v95;
              v93 += 8;
              --v92;
            }
            while (v92);
          }
          if ((int)v132 > v133)
          {
            BOOL v96 = v117;
            uint64_t v97 = v125 + v116 + v90;
            uint64_t v98 = v118;
            uint64_t v99 = v122;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v61 + 80))(v97, v66, v96, v98, v86);
              v98 += 2;
              ++v96;
              v97 += v123;
              --v99;
            }
            while (v99);
          }
          unint64_t v100 = (v128 & 0xFFFFFFFFFFFFFFFELL) + *(void *)(v131 + 424) * v134;
          uint64_t v129 = *(void *)(v131 + 408);
          unint64_t v101 = v100 << *(unsigned char *)(v131 + 531);
          uint64_t v102 = (v126 + (((int)v86 + 8) >> 4));
          uint64_t v82 = 8 * v67;
          if ((int)v102 >= 2)
          {
            uint64_t v103 = v102 - 1;
            uint64_t v104 = v129 + v101 + 16;
            uint64_t v105 = &a61;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v61 + 88))(v104, v67, v105, v83);
              v105 += 4;
              v104 += 16;
              --v103;
            }
            while (v103);
          }
          if ((int)v132 > v133)
          {
            uint64_t v106 = ((int)v86 >> 1);
            uint64_t v107 = vars8;
            unint64_t v108 = v129 + vars0 + v101;
            uint64_t v109 = v122;
            do
            {
              uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t *, uint64_t))(v61 + 96))(v108, v67, v107, v106);
              v107 += 4;
              v108 += 8 * v67;
              --v109;
            }
            while (v109);
          }
          uint64_t v84 = v130 + 64;
          a2 = v120;
          int v64 = v119;
        }
        while (v130 + 64 < v124);
      }
      uint64_t v81 = v113 + 64;
      int v75 = v112;
    }
    while (v113 + 64 < v111);
  }
  return result;
}

int *sub_1D0CD1828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  int v51 = v50;
  char v52 = result;
  STACK[0x9458] = *MEMORY[0x1E4F143B8];
  uint64_t v115 = v53;
  uint64_t v54 = *(void *)(v53 + 8);
  int v107 = *(_DWORD *)(v54 + 520);
  uint64_t v55 = *(void *)(v54 + 416);
  uint64_t v56 = *(void *)(v54 + 424);
  int v57 = *v50;
  uint64_t v108 = v54;
  if (*v50 < *(_DWORD *)(v54 + 524))
  {
    v57 &= 0xFFFFFFF0;
    int *v50 = v57;
  }
  uint64_t v58 = result[30];
  if ((int)v58 < v57)
  {
    signed int v111 = (v107 - 1) & 0xFFFFFFC0;
    uint64_t vars0 = &a49;
    uint64_t vars8 = 8 * v56;
    uint64_t v106 = v51;
    uint64_t v112 = 8 * v55;
    do
    {
      char v59 = *(unsigned char *)(v108 + 531);
      uint64_t v60 = *(void *)(v108 + 400) + ((*(void *)(v108 + 416) * (int)v58) << v59);
      uint64_t v61 = *(void *)(v108 + 408) + ((*(void *)(v108 + 424) * (int)v58) << v59);
      int v62 = v57 - v58;
      if (v62 >= 64) {
        uint64_t v63 = 64;
      }
      else {
        uint64_t v63 = v62;
      }
      if (v58) {
        int v64 = v58 - 8;
      }
      else {
        int v64 = 0;
      }
      int v65 = v63 + 8;
      if (!v58) {
        int v65 = v63;
      }
      int v116 = v65;
      int v117 = v64;
      int v66 = (int)v63 >> 3;
      uint64_t v120 = ((int)v63 >> 3);
      uint64_t v67 = 0;
      if (v111 >= 1)
      {
        do
        {
          uint64_t v113 = v61;
          int v68 = &a17;
          (*((void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))v52 + 6))(v115, v67, v52[30], 64, v63, &a17);
          int v118 = v67;
          sub_1D0CD11FC(&STACK[0x430], v115, v67, v117, 72, v116, 0);
          uint64_t v69 = 0;
          do
          {
            uint64_t v70 = v69 + 8;
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v52 + 9))(v69 + 8 + v60, v55, (char *)&STACK[0x3A0] + v69, v68, v63);
            v68 += 16;
            uint64_t v69 = v70;
          }
          while (v70 != 64);
          sub_1D0CD12A8((int *)&STACK[0x430]);
          int v71 = v52[30];
          if (v66 > (v71 == 0))
          {
            BOOL v72 = v71 == 0;
            uint64_t v73 = v120 - v72;
            int v74 = &a33 + 2 * v72;
            int v75 = &STACK[0x3E0] + v72;
            uint64_t v76 = v60 + v112 * v72;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v52 + 10))(v76, v55, v75, v74, 64);
              v74 += 2;
              ++v75;
              v76 += v112;
              --v73;
            }
            while (v73);
          }
          sub_1D0CD12A8((int *)&STACK[0x430]);
          sub_1D0CD11FC(&STACK[0x430], v115, v118, v117, 72, v116, 1u);
          int v77 = &a49;
          for (uint64_t i = 16; i != 80; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v113 + i, v56, v77, v63);
            v77 += 4;
          }
          sub_1D0CD12A8((int *)&STACK[0x430]);
          int v79 = v52[30];
          if ((int)v120 > (v79 == 0))
          {
            BOOL v80 = v79 == 0;
            uint64_t v81 = v120 - v80;
            uint64_t v82 = &STACK[0x2A0] + 4 * v80;
            uint64_t v83 = v113 + vars8 * v80;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v52 + 12))(v83, v56, v82, 32);
              v82 += 4;
              v83 += vars8;
              --v81;
            }
            while (v81);
          }
          uint64_t result = sub_1D0CD12A8((int *)&STACK[0x430]);
          v60 += 64;
          uint64_t v61 = v113 + 64;
          uint64_t v67 = (v118 + 64);
          int v66 = (int)v63 >> 3;
        }
        while ((int)v67 < v111);
        uint64_t v58 = v52[30];
      }
      int v84 = v107 - v67;
      if (v107 == v67)
      {
        int v51 = v106;
      }
      else
      {
        uint64_t v114 = v61;
        (*((void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, char *))v52 + 6))(v115, v67, v58, (v107 - v67), v63, &a17);
        int v119 = v67;
        sub_1D0CD11FC(&STACK[0x430], v115, v67, v117, v84, v116, 0);
        uint64_t v85 = (v107 - v67);
        if (v84 >= 16)
        {
          uint64_t v86 = v60 + 8;
          uint64_t v87 = (v85 >> 3) - 1;
          uint64_t v88 = &a17;
          char v89 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v52 + 9))(v86, v55, v89, v88, v63);
            v88 += 16;
            ++v89;
            v86 += 8;
            --v87;
          }
          while (v87);
        }
        sub_1D0CD12A8((int *)&STACK[0x430]);
        int v90 = v52[30];
        if ((int)v120 > (v90 == 0))
        {
          BOOL v91 = v90 == 0;
          uint64_t v92 = v120 - v91;
          uint64_t v93 = &a33 + 2 * v91;
          int v94 = &STACK[0x3E0] + v91;
          uint64_t v95 = v60 + v112 * v91;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v52 + 10))(v95, v55, v94, v93, v85);
            v93 += 2;
            ++v94;
            v95 += v112;
            --v92;
          }
          while (v92);
        }
        sub_1D0CD12A8((int *)&STACK[0x430]);
        sub_1D0CD11FC(&STACK[0x430], v115, v119, v117, v85, v116, 1u);
        if ((int)v85 >= 24)
        {
          uint64_t v96 = v114 + 16;
          uint64_t v97 = ((v85 + 8) >> 4) - 1;
          uint64_t v98 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v96, v56, v98, v63);
            v98 += 4;
            v96 += 16;
            --v97;
          }
          while (v97);
        }
        sub_1D0CD12A8((int *)&STACK[0x430]);
        int v99 = v52[30];
        if ((int)v120 > (v99 == 0))
        {
          BOOL v100 = v99 == 0;
          uint64_t v101 = ((int)v85 >> 1);
          uint64_t v102 = v120 - v100;
          uint64_t v103 = &STACK[0x2A0] + 4 * v100;
          uint64_t v104 = v114 + vars8 * v100;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v52 + 12))(v104, v56, v103, v101);
            v103 += 4;
            v104 += vars8;
            --v102;
          }
          while (v102);
        }
        uint64_t result = sub_1D0CD12A8((int *)&STACK[0x430]);
        LODWORD(v58) = v52[30];
        int v51 = v106;
      }
      uint64_t v58 = (v58 + v63);
      v52[30] = v58;
      int v57 = *v51;
    }
    while ((int)v58 < *v51);
  }
  int v105 = *(_DWORD *)(v108 + 524);
  if (v105 >= (int)v58) {
    int v105 = v58;
  }
  int *v51 = v105;
  if (v52[30] < *(_DWORD *)(v108 + 524))
  {
    if (v105 <= 4) {
      int v105 = 4;
    }
    int *v51 = v105 - 4;
  }
  return result;
}

uint64_t sub_1D0CD1DFC(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int v45 = a3;
  uint64_t v46 = result;
  uint64_t v47 = *(void *)(a2 + 8);
  int v99 = *(_DWORD *)(v47 + 520);
  uint64_t v48 = *(void *)(v47 + 416);
  uint64_t v49 = *(void *)(v47 + 424);
  int v50 = *a3;
  uint64_t v100 = v47;
  if (*a3 < *(_DWORD *)(v47 + 524))
  {
    v50 &= 0xFFFFFFF0;
    *a3 = v50;
  }
  int v51 = *(_DWORD *)(result + 120);
  if (v51 < v50)
  {
    signed int vars8_4 = (v99 - 1) & 0xFFFFFFC0;
    uint64_t v52 = 8 * v49;
    uint64_t vars0 = &STACK[0x780];
    uint64_t v98 = v45;
    uint64_t v105 = 8 * v48;
    uint64_t v101 = 8 * v49;
    do
    {
      char v53 = *(unsigned char *)(v100 + 531);
      uint64_t v54 = *(void *)(v100 + 400) + ((*(void *)(v100 + 416) * v51) << v53);
      uint64_t v108 = *(void *)(v100 + 408) + ((*(void *)(v100 + 424) * v51) << v53);
      int v55 = v50 - v51;
      if (v55 >= 64) {
        uint64_t v56 = 64;
      }
      else {
        uint64_t v56 = v55;
      }
      int v57 = (int)v56 >> 3;
      uint64_t v109 = ((int)v56 >> 3);
      int v58 = 0;
      if (vars8_4 >= 1)
      {
        do
        {
          char v59 = &a13;
          int v106 = v58;
          (*(void (**)(uint64_t))(v46 + 48))(a2);
          uint64_t v60 = 0;
          do
          {
            uint64_t v61 = v60 + 8;
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v46 + 72))(v60 + 8 + v54, v48, (char *)&STACK[0x780] + v60, v59, v56);
            v59 += 16;
            uint64_t v60 = v61;
          }
          while (v61 != 64);
          int v62 = *(_DWORD *)(v46 + 120);
          if (v57 > (v62 == 0))
          {
            BOOL v63 = v62 == 0;
            uint64_t v64 = v109 - v63;
            int v65 = &a29 + 2 * v63;
            int v66 = &STACK[0x7C0] + v63;
            uint64_t v67 = v54 + v105 * v63;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v46 + 80))(v67, v48, v66, v65, 64);
              v65 += 2;
              ++v66;
              v67 += v105;
              --v64;
            }
            while (v64);
          }
          int v68 = &a45;
          for (uint64_t i = 16; i != 80; i += 16)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v46 + 88))(v108 + i, v49, v68, v56);
            v68 += 4;
          }
          int v70 = *(_DWORD *)(v46 + 120);
          uint64_t v52 = 8 * v49;
          if ((int)v109 > (v70 == 0))
          {
            BOOL v71 = v70 == 0;
            uint64_t v72 = v109 - v71;
            uint64_t v73 = &STACK[0x680] + 4 * v71;
            uint64_t v74 = v108 + v101 * v71;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v46 + 96))(v74, v49, v73, 32);
              v73 += 4;
              v74 += v101;
              --v72;
            }
            while (v72);
          }
          v54 += 64;
          v108 += 64;
          int v58 = v106 + 64;
          int v57 = (int)v56 >> 3;
        }
        while (v106 + 64 < vars8_4);
        int v51 = *(_DWORD *)(v46 + 120);
      }
      int v75 = v99 - v58;
      if (v99 != v58)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v46 + 48))(a2);
        unsigned int v107 = v75;
        if (v75 >= 16)
        {
          uint64_t v76 = v54 + 8;
          uint64_t v77 = (v75 >> 3) - 1;
          BOOL v78 = &a13;
          int v79 = &STACK[0x780];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v46 + 72))(v76, v48, v79, v78, v56);
            v78 += 16;
            ++v79;
            v76 += 8;
            --v77;
          }
          while (v77);
        }
        int v80 = *(_DWORD *)(v46 + 120);
        uint64_t v81 = v107;
        if ((int)v109 > (v80 == 0))
        {
          BOOL v82 = v80 == 0;
          uint64_t v83 = v109 - v82;
          int v84 = &a29 + 2 * v82;
          uint64_t v85 = &STACK[0x7C0] + v82;
          uint64_t v86 = v54 + v105 * v82;
          do
          {
            uint64_t v87 = v81;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v46 + 80))(v86, v48, v85, v84, v81);
            uint64_t v81 = v87;
            v84 += 2;
            ++v85;
            v86 += v105;
            --v83;
          }
          while (v83);
        }
        int v88 = v81;
        if ((int)v81 >= 24)
        {
          uint64_t v89 = v108 + 16;
          uint64_t v90 = ((v81 + 8) >> 4) - 1;
          BOOL v91 = &a45;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v46 + 88))(v89, v49, v91, v56);
            v91 += 4;
            v89 += 16;
            --v90;
          }
          while (v90);
        }
        int v51 = *(_DWORD *)(v46 + 120);
        if ((int)v109 > (v51 == 0))
        {
          BOOL v92 = v51 == 0;
          uint64_t v93 = (v88 >> 1);
          uint64_t v94 = v109 - v92;
          uint64_t v95 = &STACK[0x680] + 4 * v92;
          uint64_t v96 = v108 + v52 * v92;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v46 + 96))(v96, v49, v95, v93);
            v95 += 4;
            v96 += v52;
            --v94;
          }
          while (v94);
          int v51 = *(_DWORD *)(v46 + 120);
        }
      }
      v51 += v56;
      *(_DWORD *)(v46 + 120) = v51;
      int v45 = v98;
      int v50 = *v98;
    }
    while (v51 < *v98);
  }
  int v97 = *(_DWORD *)(v100 + 524);
  if (v97 >= v51) {
    int v97 = v51;
  }
  *int v45 = v97;
  if (*(_DWORD *)(v46 + 120) < *(_DWORD *)(v100 + 524))
  {
    if (v97 <= 4) {
      int v97 = 4;
    }
    *int v45 = v97 - 4;
  }
  return result;
}

void *sub_1D0CD22B0(void *result, uint64_t a2)
{
  int v2 = sub_1D0CD2D68;
  int v3 = sub_1D0CD392C;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    int v2 = sub_1D0CD2D68;
    int v3 = sub_1D0CD392C;
    if (!*(unsigned char *)(*(void *)(a2 + 16) + 283))
    {
      int v2 = sub_1D0CD3490;
      int v3 = sub_1D0CD3EEC;
    }
  }
  *uint64_t result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1D0CD2A50;
  result[5] = 0;
  result[8] = sub_1D0CCB318;
  result[6] = sub_1D0CD2374;
  result[7] = sub_1D0CD2374;
  return result;
}

void sub_1D0CD2374(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  int v9 = *(void **)(a1 + 8);
  bzero(a6, 0x380uLL);
  BOOL v78 = v9;
  uint64_t v80 = v9[96];
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  v87[0] = v11;
  v87[1] = v10;
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  memset(v84, 0, sizeof(v84));
  uint64_t v76 = (a5 >> 3);
  int v79 = a4;
  int v73 = a5;
  int v74 = a4 >> 3;
  memset(v83, 0, sizeof(v83));
  if (a5 >= 8)
  {
    uint64_t v12 = 0;
    if (v74 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v74;
    }
    if ((int)v76 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v76;
    }
    uint64_t v75 = v14;
    do
    {
      if (a4 >= 8)
      {
        uint64_t v15 = 0;
        int v16 = a3 + 8 * v12;
        uint64_t v17 = v78[97] + 2 * (((uint64_t)a2 >> 3) + v78[96] * ((uint64_t)v16 >> 3));
        do
        {
          uint64_t v18 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, ((a2 + 8 + 8 * (int)v15) >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)), (v16 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)));
          uint64_t v19 = v15 + 1;
          int v20 = (*(__int16 *)(v17 + 2 * (v15 + 1)) >> 9) + (*(__int16 *)(v17 + 2 * v15) >> 9);
          *((unsigned char *)v86 + 8 * v15 + v12) = *(unsigned char *)(v18 + 661) + ((v20 + 1) >> 1) - 2;
          int v21 = *(char *)(v18 + 660) + ((v20 + 1) >> 1);
          if (v21 >= 51) {
            int v21 = 51;
          }
          if (v21 <= 15) {
            int v21 = 15;
          }
          a6[8 * v15 + 768 + v12] = byte_1D0DAE593[v21 - 15];
          if (v15)
          {
            uint64_t v22 = 0;
            char v23 = *(unsigned char *)(v18 + 661);
            char v24 = 1;
            do
            {
              char v25 = v24;
              int v26 = v20 + 2 * v87[v22];
              int v27 = (v26 + 1) >> 1;
              if (v26 >= 59)
              {
                if ((v26 + 1) < 0x74) {
                  LOBYTE(v27) = byte_1D0DAE600[v27 - 30];
                }
                else {
                  LOBYTE(v27) = v27 - 6;
                }
              }
              char v24 = 0;
              *((unsigned char *)&v85[4 * v22] + 8 * (v15 >> 1) + v12) = v27 + v23 + 2;
              uint64_t v22 = 1;
            }
            while ((v25 & 1) != 0);
          }
          ++v15;
        }
        while (v19 != v13);
      }
      ++v12;
    }
    while (v12 != v75);
  }
  uint64_t v29 = (a5 >> 3);
  int v28 = a3;
  int v30 = a3 == 0;
  if ((int)v76 > v30)
  {
    uint64_t v31 = a3 == 0;
    if (v74 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v74;
    }
    do
    {
      if (v79 >= 8)
      {
        uint64_t v33 = 0;
        int v34 = a3 + 8 * v31;
        uint64_t v35 = v78[97] + 2 * (((uint64_t)a2 >> 3) + v78[96] * ((uint64_t)v34 >> 3));
        do
        {
          uint64_t v36 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, ((a2 + 8 * (int)v33) >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)), (v34 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)));
          int v37 = (*(__int16 *)(v35 + 2 * v33) >> 9) + (*(__int16 *)(v35 + 2 * (v33 - v80)) >> 9);
          *((unsigned char *)v84 + 8 * v31 + v33) = *(unsigned char *)(v36 + 661) + ((v37 + 1) >> 1) - 2;
          int v38 = *(char *)(v36 + 660) + ((v37 + 1) >> 1);
          if (v38 >= 51) {
            int v38 = 51;
          }
          if (v38 <= 15) {
            int v38 = 15;
          }
          a6[8 * v31 + 832 + v33] = byte_1D0DAE593[v38 - 15];
          if ((v31 & 1) == 0)
          {
            uint64_t v39 = 0;
            char v40 = *(unsigned char *)(v36 + 661);
            char v41 = 1;
            do
            {
              char v42 = v41;
              int v43 = v37 + 2 * v87[v39];
              int v44 = (v43 + 1) >> 1;
              if (v43 >= 59)
              {
                if ((v43 + 1) < 0x74) {
                  LOBYTE(v44) = byte_1D0DAE600[v44 - 30];
                }
                else {
                  LOBYTE(v44) = v44 - 6;
                }
              }
              char v41 = 0;
              *((unsigned char *)&v83[4 * v39] + 8 * (v31 >> 1) + v33) = v44 + v40 + 2;
              uint64_t v39 = 1;
            }
            while ((v42 & 1) != 0);
          }
          ++v33;
        }
        while (v33 != v32);
      }
      ++v31;
      uint64_t v29 = v76;
    }
    while (v31 != v76);
    int v28 = a3;
    int v30 = a3 == 0;
  }
  if (v79 >= 8)
  {
    unint64_t v45 = 0;
    uint64_t v46 = a6;
    LODWORD(v47) = v73 >> 2;
    if (v73 >> 2 <= 1) {
      uint64_t v47 = 1;
    }
    else {
      uint64_t v47 = v47;
    }
    if (v74 <= 1) {
      uint64_t v48 = 1;
    }
    else {
      uint64_t v48 = v74;
    }
    do
    {
      if (v73 >= 4)
      {
        uint64_t v49 = 0;
        int v50 = (unsigned __int8 *)&a6[32 * (v45 >> 1) + 257];
        uint64_t v51 = v78[121] + ((uint64_t)v28 >> 2) + v78[117] * ((uint64_t)(a2 + 8 + 8 * (int)v45) >> 3);
        do
        {
          if (*(unsigned char *)(v51 + v49))
          {
            int v52 = *((char *)v86 + 8 * v45 + (v49 >> 1)) + 2 * *(unsigned __int8 *)(v51 + v49);
            if (v52 >= 53) {
              int v52 = 53;
            }
            if (v52 <= 17) {
              int v52 = 17;
            }
            v46[v49] = byte_1D0DAE5C4[v52 - 17];
          }
          ++v49;
        }
        while (v47 != v49);
        if (v45)
        {
          uint64_t v53 = 0;
          do
          {
            if (*(unsigned __int8 *)(v51 + v53) >= 2u)
            {
              uint64_t v54 = (char *)v85 + 8 * (v45 >> 1) + (v53 >> 1);
              int v55 = *v54;
              if (v55 >= 53) {
                int v55 = 53;
              }
              if (v55 <= 17) {
                int v55 = 17;
              }
              unsigned __int8 v56 = byte_1D0DAE5C4[v55 - 17];
              int v57 = v54[64];
              if (v57 >= 53) {
                int v57 = 53;
              }
              if (v57 <= 17) {
                int v57 = 17;
              }
              unsigned __int8 v58 = byte_1D0DAE5C4[v57 - 17];
              *(v50 - 1) = v56;
              unsigned __int8 *v50 = v58;
            }
            ++v53;
            v50 += 2;
          }
          while (v47 != v53);
        }
      }
      ++v45;
      v46 += 16;
    }
    while (v45 != v48);
  }
  if ((int)v29 > v30)
  {
    uint64_t v59 = v28 == 0;
    LODWORD(v60) = v79 >> 2;
    if (v79 >> 2 <= 1) {
      uint64_t v60 = 1;
    }
    else {
      uint64_t v60 = v60;
    }
    uint64_t v61 = &a6[16 * (v28 == 0) + 128];
    do
    {
      if (v79 >= 4)
      {
        uint64_t v62 = 0;
        uint64_t v63 = v59 >> 1;
        uint64_t v64 = (unsigned __int8 *)&a6[32 * v63 + 513];
        uint64_t v65 = v78[118] + ((uint64_t)a2 >> 2) + v78[116] * ((uint64_t)(v28 + 8 * (int)v59) >> 3);
        do
        {
          if (*(unsigned char *)(v65 + v62))
          {
            int v66 = *((char *)v84 + 8 * v59 + (v62 >> 1)) + 2 * *(unsigned __int8 *)(v65 + v62);
            if (v66 >= 53) {
              int v66 = 53;
            }
            if (v66 <= 17) {
              int v66 = 17;
            }
            v61[v62] = byte_1D0DAE5C4[v66 - 17];
          }
          ++v62;
        }
        while (v60 != v62);
        if ((v59 & 1) == 0)
        {
          uint64_t v67 = 0;
          do
          {
            if (*(unsigned __int8 *)(v65 + v67) >= 2u)
            {
              int v68 = (char *)v83 + 8 * v63 + (v67 >> 1);
              int v69 = *v68;
              if (v69 >= 53) {
                int v69 = 53;
              }
              if (v69 <= 17) {
                int v69 = 17;
              }
              unsigned __int8 v70 = byte_1D0DAE5C4[v69 - 17];
              int v71 = v68[64];
              if (v71 >= 53) {
                int v71 = 53;
              }
              if (v71 <= 17) {
                int v71 = 17;
              }
              unsigned __int8 v72 = byte_1D0DAE5C4[v71 - 17];
              *(v64 - 1) = v70;
              *uint64_t v64 = v72;
            }
            ++v67;
            v64 += 2;
          }
          while (v60 != v67);
        }
      }
      ++v59;
      v61 += 16;
    }
    while (v59 != v29);
  }
}

uint64_t sub_1D0CD2A50(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(v6 + 520);
  int v8 = *(_DWORD *)(v6 + 524);
  unsigned int v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(unsigned char *)(v5 + 2113);
  uint64_t v10 = (a3 << v5);
  uint64_t v11 = (a4 << v5);
  unsigned int v12 = v9 >> 1;
  if ((int)(v10 + v9) >= v7) {
    uint64_t v13 = (v7 - v10);
  }
  else {
    uint64_t v13 = v9;
  }
  if ((int)(v10 + v9) >= v7) {
    uint64_t v14 = (((v7 - (int)v10) >> 1) + 2);
  }
  else {
    uint64_t v14 = v12;
  }
  if ((int)(v11 + v9) >= v8) {
    int v15 = v8 - v11;
  }
  else {
    int v15 = v9;
  }
  if ((int)(v11 + v9) >= v8) {
    uint64_t v16 = (((v8 - (int)v11) >> 1) + 2);
  }
  else {
    uint64_t v16 = v12;
  }
  int v51 = v15;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 64))(a2, v10, v11, v13);
  uint64_t v18 = *(void *)(v6 + 416);
  uint64_t v48 = v6;
  uint64_t v45 = (v18 * (int)v11 + (int)v10) << *(unsigned char *)(v6 + 531);
  uint64_t v46 = *(void *)(v6 + 400);
  int v50 = v10;
  int v47 = v10 == 0;
  uint64_t v19 = ((int)v13 >> 3);
  if ((int)v19 > v47)
  {
    uint64_t v20 = v19 - (v10 == 0);
    int v21 = &v52[10 * (v10 == 0)];
    uint64_t v22 = &v52[5 * (v10 == 0) + 296];
    uint64_t v23 = v46 + v45 + 16 * (v50 == 0) - 16 * v18;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 72))(v23, v18, v22, v21, (v51 + 8));
      v21 += 10;
      v22 += 5;
      v23 += 16;
      --v20;
    }
    while (v20);
  }
  int v24 = v11 == 0;
  uint64_t v25 = (v51 >> 3);
  int v49 = v11;
  if ((int)v25 <= v24)
  {
    LODWORD(v27) = v13 + 8;
  }
  else
  {
    BOOL v26 = v11 == 0;
    uint64_t v27 = (v13 + 8);
    uint64_t v28 = v25 - v26;
    uint64_t v29 = &v52[10 * v26 + 80];
    int v30 = &v52[5 * v26 + 336];
    uint64_t v31 = v45 + 16 * v18 * v26 + v46 - 16;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v31, v18, v30, v29, v27);
      v29 += 10;
      v30 += 5;
      v31 += 16 * v18;
      --v28;
    }
    while (v28);
    int v24 = v11 == 0;
  }
  uint64_t v32 = *(void *)(v48 + 424);
  uint64_t v33 = *(void *)(v48 + 408);
  uint64_t v34 = (v32 * ((uint64_t)(int)v11 >> 1) + (int)(v50 & 0xFFFFFFFE)) << *(unsigned char *)(v48 + 531);
  uint64_t v35 = ((int)v27 >> 4);
  if ((int)v35 > v47)
  {
    BOOL v36 = v50 == 0;
    uint64_t v37 = v35 - v36;
    int v38 = &v52[17 * v36 + 160];
    uint64_t v39 = v33 + v34 + 32 * v36 - 4 * v32;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 88))(v39, v32, v38, v16);
      v38 += 17;
      v39 += 32;
      --v37;
    }
    while (v37);
  }
  uint64_t v40 = ((v51 + 8) >> 4);
  if ((int)v40 > v24)
  {
    BOOL v41 = v49 == 0;
    uint64_t v42 = v40 - v41;
    int v43 = &v52[17 * v41 + 228];
    uint64_t v44 = v34 + 16 * v32 * v41 + v33 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 96))(v44, v32, v43, v14);
      v43 += 17;
      v44 += 16 * v32;
      --v42;
    }
    while (v42);
  }
  return result;
}

int *sub_1D0CD2D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  uint64_t v73 = v70;
  int v74 = result;
  uint64_t v75 = *(void *)(v70 + 8);
  uint64_t v76 = *(void *)(v70 + 16);
  int v77 = *(_DWORD *)(v75 + 520);
  int v78 = *(_DWORD *)(v75 + 524);
  uint64_t v79 = *(void *)(v75 + 416);
  uint64_t v80 = *(void *)(v75 + 424);
  uint64_t v150 = v75;
  int v81 = *(unsigned __int8 *)(v76 + 2117);
  LOBYTE(v75) = *(unsigned char *)(v76 + 2113);
  int v82 = v71 << v75;
  int v83 = v72 << v75;
  int v84 = v83 - 16;
  int v134 = v77;
  if (*(_DWORD *)(v76 + 2120) - 1 == v71)
  {
    BOOL v85 = v83 < 16;
    if (v83 >= 16) {
      int v86 = v83 - 16;
    }
    else {
      int v86 = 0;
    }
    if (v85) {
      int v87 = v84;
    }
    else {
      int v87 = 0;
    }
    int v88 = v87 + v81;
    if (v82 <= 63) {
      unsigned int v89 = 0;
    }
    else {
      unsigned int v89 = (v82 - 1) & 0xFFFFFFC0;
    }
    signed int v135 = v89;
    int v139 = v77 - v89;
    int v90 = v88 + v86 - 8;
    if (v88 + v86 < 8) {
      int v90 = 0;
    }
    result[30] = v90;
    if (*(_DWORD *)(*(void *)(v70 + 16) + 2124) - 1 == v72)
    {
      int v88 = v78 - v86;
      result[30] = v78;
    }
  }
  else
  {
    if (!v71 || (v82 & 0x3F) != 0) {
      return result;
    }
    BOOL v91 = v83 < 16;
    if (v83 >= 16) {
      int v86 = v83 - 16;
    }
    else {
      int v86 = 0;
    }
    if (!v91) {
      int v84 = 0;
    }
    int v88 = v84 + v81;
    if (v82 >= 64) {
      int v92 = v82 - 64;
    }
    else {
      int v92 = 0;
    }
    signed int v135 = v92;
    if (v82 >= 64) {
      int v82 = 64;
    }
    int v139 = v82;
    int v93 = v78 - v86;
    if (*(_DWORD *)(v76 + 2124) - 1 == v72) {
      int v88 = v93;
    }
  }
  if (v88 >= 1)
  {
    uint64_t v94 = 0;
    uint64_t vars0 = &STACK[0x440];
    uint64_t v125 = v86;
    uint64_t v138 = 16 * v79;
    uint64_t v95 = 16 * v80;
    unint64_t v124 = v88;
    uint64_t v149 = v70;
    int v126 = v88;
    do
    {
      if (v88 - (int)v94 >= 64) {
        uint64_t v96 = 64;
      }
      else {
        uint64_t v96 = (v88 - v94);
      }
      uint64_t v127 = v94;
      int v97 = v94 + v125 - 8;
      uint64_t v140 = v94 + v125;
      if (!(v94 + v125)) {
        int v97 = 0;
      }
      int v153 = v97;
      if (v94 + v125) {
        int v98 = v96 + 8;
      }
      else {
        int v98 = v96;
      }
      int v152 = v98;
      if (v139 >= 1)
      {
        uint64_t v99 = 0;
        BOOL v100 = v140 == 0;
        uint64_t v137 = ((int)v96 >> 3);
        uint64_t v133 = v137 - v100;
        uint64_t v132 = v138 * v100;
        uint64_t v136 = (((int)v96 + 8) >> 4);
        uint64_t v131 = v136 - v100;
        uint64_t v130 = v95 * v100;
        int v151 = v140 == 0;
        uint64_t vars8 = &STACK[0x340] + 4 * v100;
        do
        {
          if (v139 - (int)v99 >= 64) {
            uint64_t v101 = 64;
          }
          else {
            uint64_t v101 = (v139 - v99);
          }
          uint64_t v102 = v99 + v135;
          int v103 = v101 + v135 + v99;
          uint64_t v146 = *(void *)(v150 + 416);
          uint64_t v148 = v99;
          uint64_t v142 = *(void *)(v150 + 400);
          char v104 = *(unsigned char *)(v150 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v74 + 6))(v73, v102, v140, v101, v96, &a37);
          BOOL v145 = v103 < v134;
          if (v103 >= v134) {
            int v105 = v101;
          }
          else {
            int v105 = v101 + 8;
          }
          uint64_t v106 = (v102 + v146 * v140) << v104;
          unsigned int v107 = (int)v101 >> 3;
          if (v103 >= v134) {
            uint64_t v108 = v107;
          }
          else {
            uint64_t v108 = v107 + 1;
          }
          int v147 = v102;
          int v144 = v105;
          sub_1D0CD3290(&STACK[0x4C0], v73, v102, v153, v105, v152, 0);
          if ((int)v108 >= 2)
          {
            uint64_t v109 = v108 - 1;
            uint64_t v110 = v142 + v106 + 16;
            signed int v111 = &a37;
            uint64_t v112 = &STACK[0x440];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v74 + 9))(v110, v79, v112, v111, v96);
              v111 += 16;
              ++v112;
              v110 += 16;
              --v109;
            }
            while (v109);
          }
          sub_1D0CD3348((int *)&STACK[0x4C0]);
          if ((int)v137 > v151)
          {
            uint64_t v113 = v142 + v132 + v106;
            uint64_t v114 = &STACK[0x480] + (v140 == 0);
            uint64_t v115 = &a53 + 2 * (v140 == 0);
            uint64_t v116 = v133;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v74 + 10))(v113, v79, v114, v115, v101);
              v115 += 2;
              ++v114;
              v113 += v138;
              --v116;
            }
            while (v116);
          }
          sub_1D0CD3348((int *)&STACK[0x4C0]);
          uint64_t v141 = ((v147 & 0xFFFFFFFFFFFFFFFELL) + *(void *)(v150 + 424) * ((uint64_t)(int)v140 >> 1)) << *(unsigned char *)(v150 + 531);
          uint64_t v143 = *(void *)(v150 + 408);
          sub_1D0CD3290(&STACK[0x4C0], v149, v147, v153, v144, v152, 1u);
          uint64_t v117 = (v145 + (((int)v101 + 8) >> 4));
          uint64_t v95 = 16 * v80;
          if ((int)v117 >= 2)
          {
            uint64_t v118 = v117 - 1;
            uint64_t v119 = v143 + v141 + 32;
            uint64_t v120 = &a69;
            do
            {
              (*((void (**)(uint64_t, uint64_t, uint64_t *, void))v74 + 11))(v119, v80, v120, ((int)v96 >> 1));
              v120 += 4;
              v119 += 32;
              --v118;
            }
            while (v118);
          }
          sub_1D0CD3348((int *)&STACK[0x4C0]);
          if ((int)v136 > v151)
          {
            uint64_t v121 = v143 + v130 + v141;
            uint64_t v122 = vars8;
            uint64_t v123 = v131;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, void))v74 + 12))(v121, v80, v122, ((int)v101 >> 1));
              v122 += 4;
              v121 += 16 * v80;
              --v123;
            }
            while (v123);
          }
          uint64_t result = sub_1D0CD3348((int *)&STACK[0x4C0]);
          uint64_t v73 = v149;
          uint64_t v99 = v148 + 64;
        }
        while (v148 + 64 < v139);
      }
      uint64_t v94 = v127 + 64;
      int v88 = v126;
    }
    while (v127 + 64 < v124);
  }
  return result;
}

void *sub_1D0CD3290(void *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  __dst[9216] = a2;
  *((_DWORD *)__dst + 18434) = a3;
  *((_DWORD *)__dst + 18435) = a4;
  *((_DWORD *)__dst + 18436) = a5;
  *((_DWORD *)__dst + 18437) = a6;
  *((_DWORD *)__dst + 18438) = a7;
  uint64_t v7 = (a6 >> (a7 != 0));
  if ((int)v7 >= 1)
  {
    int v8 = (char *)__dst;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = v9 + 8 * a7;
    uint64_t v11 = *(void *)(v10 + 416);
    unsigned int v12 = (char *)(*(void *)(v10 + 400) + ((v11 * (a4 >> (a7 != 0)) + (a3 >> (a7 != 0) << a7)) << *(unsigned char *)(v9 + 531)));
    size_t v13 = 2 * a5;
    uint64_t v14 = 2 * v11;
    do
    {
      __dst = memcpy(v8, v12, v13);
      v12 += v14;
      v8 += v13;
      --v7;
    }
    while (v7);
  }
  return __dst;
}

int *sub_1D0CD3348(int *result)
{
  unsigned int v1 = result + 18432;
  int v2 = result[18437];
  if (v2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = result[18438];
    uint64_t v5 = *(void *)(*(void *)v1 + 8);
    uint64_t v6 = v5 + 8 * v4;
    uint64_t v7 = *(void *)(v6 + 416);
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 32) + 19);
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 16) + 283);
    char v10 = v4 != 0;
    uint64_t v11 = result[18436];
    unsigned int v12 = (_OWORD *)(*(void *)(v6 + 400)
                   + ((v7 * (result[18435] >> v10) + (result[18434] >> v10 << v4)) << *(unsigned char *)(v5 + 531)));
    uint64_t v13 = 8u >> v10;
    uint64_t v14 = 2 * (int)v11 * (int)v13;
    uint64_t v15 = 2 * v11;
    uint64_t v16 = 2 * v7 * v13;
    uint64_t v17 = 2 * v7;
    do
    {
      if ((int)v11 >= 1)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v12;
        uint64_t v20 = result;
        do
        {
          uint64_t v21 = *(void *)(*(void *)v1 + 8);
          uint64_t v22 = *(void *)(v21 + 768) * ((uint64_t)(v1[3] + v3) >> 3) + ((v1[2] + (int)v18) >> 3);
          uint64_t v23 = *(void *)(v21 + 776);
          if (v8 && (*(_WORD *)(v23 + 2 * v22) & 0x100) != 0 || v9 && (*(_WORD *)(v23 + 2 * v22) & 0xC) != 0)
          {
            int v24 = v19;
            uint64_t v25 = v20;
            uint64_t v26 = v13;
            do
            {
              *int v24 = *(_OWORD *)v25;
              uint64_t v25 = (int *)((char *)v25 + v15);
              int v24 = (_OWORD *)((char *)v24 + v17);
              --v26;
            }
            while (v26);
            LODWORD(v11) = v1[4];
          }
          v18 += 8;
          v20 += 4;
          ++v19;
        }
        while (v18 < (int)v11);
        int v2 = v1[5];
      }
      v3 += 8;
      uint64_t result = (int *)((char *)result + v14);
      unsigned int v12 = (_OWORD *)((char *)v12 + v16);
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t sub_1D0CD3490(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v65 = result;
  uint64_t v66 = *(void *)(a2 + 8);
  uint64_t v67 = *(void *)(a2 + 16);
  int v68 = *(_DWORD *)(v66 + 520);
  int v69 = *(_DWORD *)(v66 + 524);
  uint64_t v70 = *(void *)(v66 + 416);
  uint64_t v71 = *(void *)(v66 + 424);
  uint64_t v137 = v66;
  int v72 = *(unsigned __int8 *)(v67 + 2117);
  LOBYTE(v66) = *(unsigned char *)(v67 + 2113);
  int v73 = a3 << v66;
  int v74 = a4 << v66;
  int v75 = v74 - 16;
  if (*(_DWORD *)(v67 + 2120) - 1 == a3)
  {
    BOOL v76 = v74 < 16;
    if (v74 >= 16) {
      int v77 = v74 - 16;
    }
    else {
      int v77 = 0;
    }
    if (v76) {
      int v78 = v75;
    }
    else {
      int v78 = 0;
    }
    int v79 = v78 + v72;
    if (v73 <= 63) {
      unsigned int v80 = 0;
    }
    else {
      unsigned int v80 = (v73 - 1) & 0xFFFFFFC0;
    }
    signed int v124 = v80;
    int v129 = v68 - v80;
    int v81 = v79 + v77 - 8;
    if (v79 + v77 < 8) {
      int v81 = 0;
    }
    *(_DWORD *)(result + 120) = v81;
    if (*(_DWORD *)(*(void *)(a2 + 16) + 2124) - 1 == a4)
    {
      int v79 = v69 - v77;
      *(_DWORD *)(result + 120) = v69;
    }
  }
  else
  {
    if (!a3 || (v73 & 0x3F) != 0) {
      return result;
    }
    BOOL v82 = v74 < 16;
    if (v74 >= 16) {
      int v77 = v74 - 16;
    }
    else {
      int v77 = 0;
    }
    if (!v82) {
      int v75 = 0;
    }
    int v79 = v75 + v72;
    if (v73 >= 64) {
      int v83 = v73 - 64;
    }
    else {
      int v83 = 0;
    }
    signed int v124 = v83;
    if (v73 >= 64) {
      int v73 = 64;
    }
    int v129 = v73;
    int v84 = v69 - v77;
    if (*(_DWORD *)(v67 + 2124) - 1 == a4) {
      int v79 = v84;
    }
  }
  if (v79 >= 1)
  {
    uint64_t v85 = 0;
    uint64_t v113 = v77;
    uint64_t v128 = 16 * v70;
    uint64_t v86 = 16 * v71;
    unint64_t v114 = v79;
    uint64_t v123 = a2;
    int v122 = v68;
    int v115 = v79;
    do
    {
      uint64_t v116 = v85;
      if (v79 - (int)v85 >= 64) {
        uint64_t v87 = 64;
      }
      else {
        uint64_t v87 = (v79 - v85);
      }
      if (v129 >= 1)
      {
        uint64_t v88 = 0;
        uint64_t v127 = v85 + v113;
        BOOL v89 = v85 + v113 == 0;
        uint64_t v126 = ((int)v87 >> 3);
        uint64_t v121 = v126 - v89;
        uint64_t v120 = v128 * v89;
        uint64_t v125 = (((int)v87 + 8) >> 4);
        uint64_t v119 = v125 - v89;
        uint64_t v118 = v86 * v89;
        int v138 = v116 + v113 == 0;
        uint64_t vars0 = &STACK[0x7C0] + 4 * v89;
        do
        {
          if (v129 - (int)v88 >= 64) {
            uint64_t v90 = 64;
          }
          else {
            uint64_t v90 = (v129 - v88);
          }
          uint64_t v91 = v88 + v124;
          uint64_t v136 = v88;
          int v133 = v90 + v124 + v88;
          uint64_t v92 = *(void *)(v137 + 416);
          uint64_t v130 = *(void *)(v137 + 400);
          char v93 = *(unsigned char *)(v137 + 531);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v65 + 48))(a2, v91, v127, v90, v87, &a33);
          BOOL v76 = v133 < v68;
          BOOL v132 = v133 < v68;
          int v134 = v91;
          uint64_t v94 = (v91 + v92 * v127) << v93;
          LODWORD(v95) = (int)v90 >> 3;
          if (v76) {
            uint64_t v95 = (v95 + 1);
          }
          else {
            uint64_t v95 = v95;
          }
          if ((int)v95 >= 2)
          {
            uint64_t v96 = v95 - 1;
            uint64_t v97 = v130 + v94 + 16;
            int v98 = &a33;
            uint64_t v99 = &STACK[0x8C0];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v65 + 72))(v97, v70, v99, v98, v87);
              v98 += 16;
              ++v99;
              v97 += 16;
              --v96;
            }
            while (v96);
          }
          if ((int)v126 > v138)
          {
            BOOL v100 = &a49 + 2 * (v116 + v113 == 0);
            uint64_t v101 = v130 + v120 + v94;
            uint64_t v102 = &STACK[0x900] + (v116 + v113 == 0);
            uint64_t v103 = v121;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v65 + 80))(v101, v70, v102, v100, v90);
              v100 += 2;
              ++v102;
              v101 += v128;
              --v103;
            }
            while (v103);
          }
          unint64_t v104 = (v134 & 0xFFFFFFFFFFFFFFFELL) + *(void *)(v137 + 424) * ((uint64_t)((int)v116 + (int)v113) >> 1);
          uint64_t v135 = *(void *)(v137 + 408);
          unint64_t v131 = v104 << *(unsigned char *)(v137 + 531);
          uint64_t v105 = (v132 + (((int)v90 + 8) >> 4));
          uint64_t v86 = 16 * v71;
          if ((int)v105 >= 2)
          {
            uint64_t v106 = v105 - 1;
            uint64_t v107 = v135 + v131 + 32;
            uint64_t v108 = &a65;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v65 + 88))(v107, v71, v108, ((int)v87 >> 1));
              v108 += 4;
              v107 += 32;
              --v106;
            }
            while (v106);
          }
          if ((int)v125 > v138)
          {
            uint64_t v109 = ((int)v90 >> 1);
            uint64_t v110 = v119;
            unint64_t v111 = v135 + v118 + v131;
            uint64_t v112 = vars0;
            do
            {
              uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t *, uint64_t))(v65 + 96))(v111, v71, v112, v109);
              v112 += 4;
              v111 += 16 * v71;
              --v110;
            }
            while (v110);
          }
          uint64_t v88 = v136 + 64;
          a2 = v123;
          int v68 = v122;
        }
        while (v136 + 64 < v129);
      }
      uint64_t v85 = v116 + 64;
      int v79 = v115;
    }
    while (v116 + 64 < v114);
  }
  return result;
}

int *sub_1D0CD392C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  int v52 = v51;
  uint64_t v53 = v50;
  uint64_t v54 = result;
  uint64_t v55 = *(void *)(v50 + 8);
  int v107 = *(_DWORD *)(v55 + 520);
  uint64_t v56 = *(void *)(v55 + 416);
  uint64_t v57 = *(void *)(v55 + 424);
  int v58 = *v51;
  uint64_t v108 = v55;
  if (*v51 < *(_DWORD *)(v55 + 524))
  {
    v58 &= 0xFFFFFFF0;
    int *v51 = v58;
  }
  uint64_t v59 = result[30];
  if ((int)v59 < v58)
  {
    signed int v114 = (v107 - 1) & 0xFFFFFFC0;
    uint64_t v110 = v57;
    uint64_t vars0 = &a49;
    uint64_t vars8 = 16 * v57;
    uint64_t v113 = 16 * v56;
    uint64_t v106 = v52;
    uint64_t v118 = v50;
    do
    {
      char v60 = *(unsigned char *)(v108 + 531);
      uint64_t v61 = *(void *)(v108 + 400) + ((*(void *)(v108 + 416) * (int)v59) << v60);
      uint64_t v62 = *(void *)(v108 + 408) + ((*(void *)(v108 + 424) * ((uint64_t)(int)v59 >> 1)) << v60);
      int v63 = v58 - v59;
      if (v63 >= 64) {
        uint64_t v64 = 64;
      }
      else {
        uint64_t v64 = v63;
      }
      if (v59) {
        int v65 = v59 - 8;
      }
      else {
        int v65 = 0;
      }
      if (v59) {
        int v66 = v64 + 8;
      }
      else {
        int v66 = v64;
      }
      int v119 = v66;
      int v120 = v65;
      int v67 = (int)v64 >> 3;
      uint64_t v116 = ((int)v64 >> 3);
      uint64_t v117 = (((int)v64 + 8) >> 4);
      int v115 = v64;
      uint64_t v68 = 0;
      if (v114 >= 1)
      {
        uint64_t v69 = ((int)v64 >> 1);
        do
        {
          uint64_t v123 = v62;
          (*((void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))v54 + 6))(v53, v68, v54[30], 64, v64, &a17);
          int v121 = v68;
          sub_1D0CD3290(&STACK[0x420], v53, v68, v120, 72, v119, 0);
          uint64_t v70 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v54 + 9))(v61 + i, v56, (char *)&STACK[0x3A0] + v70, (char *)&STACK[0x3A0] + i - 784, v64);
            v70 += 8;
          }
          sub_1D0CD3348((int *)&STACK[0x420]);
          int v72 = v54[30];
          if (v67 > (v72 == 0))
          {
            BOOL v73 = v72 == 0;
            uint64_t v74 = v116 - v73;
            int v75 = &a33 + 2 * v73;
            BOOL v76 = &STACK[0x3E0] + v73;
            uint64_t v77 = v61 + v113 * v73;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v54 + 10))(v77, v56, v76, v75, 64);
              v75 += 2;
              ++v76;
              v77 += v113;
              --v74;
            }
            while (v74);
          }
          sub_1D0CD3348((int *)&STACK[0x420]);
          sub_1D0CD3290(&STACK[0x420], v118, v121, v120, 72, v119, 1u);
          uint64_t v78 = 0;
          uint64_t v57 = v110;
          do
          {
            uint64_t v79 = v78 + 32;
            (*((void (**)(uint64_t, uint64_t, char *, uint64_t))v54 + 11))(v78 + 32 + v123, v110, (char *)&a49 + v78, v69);
            uint64_t v78 = v79;
          }
          while (v79 != 128);
          sub_1D0CD3348((int *)&STACK[0x420]);
          int v80 = v54[30];
          if ((int)v117 > (v80 == 0))
          {
            BOOL v81 = v80 == 0;
            uint64_t v82 = v117 - v81;
            int v83 = &STACK[0x2A0] + 4 * v81;
            uint64_t v84 = v123 + vars8 * v81;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v54 + 12))(v84, v110, v83, 32);
              v83 += 4;
              v84 += vars8;
              --v82;
            }
            while (v82);
          }
          uint64_t result = sub_1D0CD3348((int *)&STACK[0x420]);
          v61 += 128;
          uint64_t v62 = v123 + 128;
          uint64_t v68 = (v121 + 64);
          uint64_t v64 = v115;
          uint64_t v53 = v118;
          int v67 = v116;
        }
        while ((int)v68 < v114);
        uint64_t v59 = v54[30];
      }
      int v85 = v107 - v68;
      if (v107 == v68)
      {
        int v52 = v106;
      }
      else
      {
        uint64_t v124 = v62;
        (*((void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, char *))v54 + 6))(v53, v68, v59, (v107 - v68), v64, &a17);
        int v122 = v68;
        sub_1D0CD3290(&STACK[0x420], v53, v68, v120, v85, v119, 0);
        int v109 = v107 - v68;
        if (v85 >= 16)
        {
          uint64_t v86 = v64;
          uint64_t v87 = v61 + 16;
          uint64_t v88 = (v109 >> 3) - 1;
          BOOL v89 = &a17;
          uint64_t v90 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v54 + 9))(v87, v56, v90, v89, v86);
            v89 += 16;
            ++v90;
            v87 += 16;
            --v88;
          }
          while (v88);
        }
        sub_1D0CD3348((int *)&STACK[0x420]);
        int v91 = v54[30];
        if ((int)v116 > (v91 == 0))
        {
          BOOL v92 = v91 == 0;
          uint64_t v93 = v116 - v92;
          uint64_t v94 = &a33 + 2 * v92;
          uint64_t v95 = &STACK[0x3E0] + v92;
          uint64_t v96 = v61 + v113 * v92;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))v54 + 10))(v96, v56, v95, v94, v109);
            v94 += 2;
            ++v95;
            v96 += v113;
            --v93;
          }
          while (v93);
        }
        sub_1D0CD3348((int *)&STACK[0x420]);
        sub_1D0CD3290(&STACK[0x420], v118, v122, v120, v109, v119, 1u);
        LODWORD(v64) = v115;
        if (v109 >= 24)
        {
          uint64_t v97 = v124 + 32;
          uint64_t v98 = ((v109 + 8) >> 4) - 1;
          uint64_t v99 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, void))v54 + 11))(v97, v57, v99, (v115 >> 1));
            v99 += 4;
            v97 += 32;
            --v98;
          }
          while (v98);
        }
        sub_1D0CD3348((int *)&STACK[0x420]);
        int v100 = v54[30];
        if ((int)v117 > (v100 == 0))
        {
          BOOL v101 = v100 == 0;
          uint64_t v102 = v117 - v101;
          uint64_t v103 = &STACK[0x2A0] + 4 * v101;
          uint64_t v104 = v124 + vars8 * v101;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, void))v54 + 12))(v104, v57, v103, (v109 >> 1));
            v103 += 4;
            v104 += vars8;
            --v102;
          }
          while (v102);
        }
        uint64_t result = sub_1D0CD3348((int *)&STACK[0x420]);
        LODWORD(v59) = v54[30];
        int v52 = v106;
        uint64_t v53 = v118;
      }
      uint64_t v59 = (v59 + v64);
      v54[30] = v59;
      int v58 = *v52;
    }
    while ((int)v59 < *v52);
  }
  int v105 = *(_DWORD *)(v108 + 524);
  if (v105 >= (int)v59) {
    int v105 = v59;
  }
  int *v52 = v105;
  if (v54[30] < *(_DWORD *)(v108 + 524))
  {
    if (v105 <= 4) {
      int v105 = 4;
    }
    int *v52 = v105 - 4;
  }
  return result;
}

uint64_t sub_1D0CD3EEC(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int v49 = a3;
  uint64_t v50 = result;
  uint64_t v51 = *(void *)(a2 + 8);
  int v100 = *(_DWORD *)(v51 + 520);
  uint64_t v52 = *(void *)(v51 + 416);
  uint64_t v53 = *(void *)(v51 + 424);
  int v54 = *a3;
  uint64_t v101 = v51;
  if (*a3 < *(_DWORD *)(v51 + 524))
  {
    v54 &= 0xFFFFFFF0;
    *a3 = v54;
  }
  int v55 = *(_DWORD *)(result + 120);
  if (v55 < v54)
  {
    signed int v106 = (v100 - 1) & 0xFFFFFFC0;
    uint64_t vars0 = v53;
    uint64_t vars8 = &a49;
    uint64_t v108 = 16 * v52;
    uint64_t v104 = 16 * v53;
    uint64_t v99 = v49;
    do
    {
      char v56 = *(unsigned char *)(v101 + 531);
      uint64_t v57 = *(void *)(v101 + 400) + ((*(void *)(v101 + 416) * v55) << v56);
      uint64_t v58 = *(void *)(v101 + 408) + ((*(void *)(v101 + 424) * ((uint64_t)v55 >> 1)) << v56);
      int v59 = v54 - v55;
      if (v59 >= 64) {
        uint64_t v60 = 64;
      }
      else {
        uint64_t v60 = v59;
      }
      int v61 = (int)v60 >> 3;
      uint64_t v109 = ((int)v60 >> 3);
      uint64_t v110 = (((int)v60 + 8) >> 4);
      int v107 = v60;
      int v62 = 0;
      if (v106 >= 1)
      {
        uint64_t v63 = ((int)v60 >> 1);
        do
        {
          uint64_t v113 = v58;
          int v111 = v62;
          (*(void (**)(uint64_t))(v50 + 48))(a2);
          uint64_t v64 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v50 + 72))(v57 + i, v52, (char *)&STACK[0x7C0] + v64, (char *)&STACK[0x7C0] + i - 784, v60);
            v64 += 8;
          }
          int v66 = *(_DWORD *)(v50 + 120);
          if (v61 > (v66 == 0))
          {
            BOOL v67 = v66 == 0;
            uint64_t v68 = v109 - v67;
            uint64_t v69 = &a33 + 2 * v67;
            uint64_t v70 = &STACK[0x800] + v67;
            uint64_t v71 = v57 + v108 * v67;
            do
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v50 + 80))(v71, v52, v70, v69, 64);
              v69 += 2;
              ++v70;
              v71 += v108;
              --v68;
            }
            while (v68);
          }
          uint64_t v72 = 0;
          uint64_t v53 = vars0;
          do
          {
            uint64_t v73 = v72 + 32;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(v50 + 88))(v72 + 32 + v113, vars0, (char *)&a49 + v72, v63);
            uint64_t v72 = v73;
          }
          while (v73 != 128);
          int v74 = *(_DWORD *)(v50 + 120);
          if ((int)v110 > (v74 == 0))
          {
            BOOL v75 = v74 == 0;
            uint64_t v76 = v110 - v75;
            uint64_t v77 = &STACK[0x6C0] + 4 * v75;
            uint64_t v78 = v113 + v104 * v75;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v50 + 96))(v78, vars0, v77, 32);
              v77 += 4;
              v78 += v104;
              --v76;
            }
            while (v76);
          }
          v57 += 128;
          uint64_t v58 = v113 + 128;
          int v62 = v111 + 64;
          uint64_t v60 = v107;
          int v61 = v109;
        }
        while (v111 + 64 < v106);
        int v55 = *(_DWORD *)(v50 + 120);
      }
      int v79 = v100 - v62;
      if (v100 != v62)
      {
        uint64_t v114 = v58;
        uint64_t result = (*(uint64_t (**)(uint64_t))(v50 + 48))(a2);
        int v112 = v79;
        if (v79 >= 16)
        {
          uint64_t v80 = v60;
          uint64_t v81 = v57 + 16;
          uint64_t v82 = (v79 >> 3) - 1;
          int v83 = &a17;
          uint64_t v84 = &STACK[0x7C0];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v50 + 72))(v81, v52, v84, v83, v80);
            v83 += 16;
            ++v84;
            v81 += 16;
            --v82;
          }
          while (v82);
        }
        int v85 = *(_DWORD *)(v50 + 120);
        if ((int)v109 > (v85 == 0))
        {
          BOOL v86 = v85 == 0;
          uint64_t v87 = v109 - v86;
          uint64_t v88 = &a33 + 2 * v86;
          BOOL v89 = &STACK[0x800] + v86;
          uint64_t v90 = v57 + v108 * v86;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))(v50 + 80))(v90, v52, v89, v88, v112);
            v88 += 2;
            ++v89;
            v90 += v108;
            --v87;
          }
          while (v87);
        }
        if (v112 >= 24)
        {
          uint64_t v91 = v114 + 32;
          uint64_t v92 = ((v112 + 8) >> 4) - 1;
          uint64_t v93 = &a49;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v50 + 88))(v91, v53, v93, (v107 >> 1));
            v93 += 4;
            v91 += 32;
            --v92;
          }
          while (v92);
        }
        int v55 = *(_DWORD *)(v50 + 120);
        LODWORD(v60) = v107;
        if ((int)v110 > (v55 == 0))
        {
          BOOL v94 = v55 == 0;
          uint64_t v95 = v110 - v94;
          uint64_t v96 = &STACK[0x6C0] + 4 * v94;
          uint64_t v97 = v114 + v104 * v94;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, void))(v50 + 96))(v97, v53, v96, (v112 >> 1));
            v96 += 4;
            v97 += v104;
            --v95;
          }
          while (v95);
          int v55 = *(_DWORD *)(v50 + 120);
        }
      }
      v55 += v60;
      *(_DWORD *)(v50 + 120) = v55;
      int v49 = v99;
      int v54 = *v99;
    }
    while (v55 < *v99);
  }
  int v98 = *(_DWORD *)(v101 + 524);
  if (v98 >= v55) {
    int v98 = v55;
  }
  int *v49 = v98;
  if (*(_DWORD *)(v50 + 120) < *(_DWORD *)(v101 + 524))
  {
    if (v98 <= 4) {
      int v98 = 4;
    }
    int *v49 = v98 - 4;
  }
  return result;
}

uint64_t sub_1D0CD43B4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(v6 + 520);
  int v8 = *(_DWORD *)(v6 + 524);
  unsigned int v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(unsigned char *)(v5 + 2113);
  uint64_t v10 = (a3 << v5);
  uint64_t v11 = (a4 << v5);
  unsigned int v12 = v9 >> 1;
  if ((int)(v10 + v9) >= v7) {
    uint64_t v13 = (v7 - v10);
  }
  else {
    uint64_t v13 = v9;
  }
  if ((int)(v10 + v9) >= v7) {
    uint64_t v14 = (((v7 - (int)v10) >> 1) + 2);
  }
  else {
    uint64_t v14 = v12;
  }
  if ((int)(v11 + v9) >= v8) {
    int v15 = v8 - v11;
  }
  else {
    int v15 = v9;
  }
  if ((int)(v11 + v9) >= v8) {
    uint64_t v16 = (((v8 - (int)v11) >> 1) + 2);
  }
  else {
    uint64_t v16 = v12;
  }
  int v50 = v15;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 64))(a2, v10, v11, v13);
  uint64_t v18 = *(void *)(v6 + 416);
  uint64_t v47 = v6;
  uint64_t v44 = (v18 * (int)v11 + (int)v10) << *(unsigned char *)(v6 + 531);
  uint64_t v45 = *(void *)(v6 + 400);
  int v49 = v10;
  int v46 = v10 == 0;
  uint64_t v19 = ((int)v13 >> 3);
  if ((int)v19 > v46)
  {
    uint64_t v20 = v19 - (v10 == 0);
    uint64_t v21 = &v51[10 * (v10 == 0)];
    uint64_t v22 = &v51[5 * (v10 == 0) + 296];
    uint64_t v23 = v45 + v44 + 8 * (v49 == 0) - 8 * v18;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 72))(v23, v18, v22, v21, (v50 + 8));
      v21 += 10;
      v22 += 5;
      v23 += 8;
      --v20;
    }
    while (v20);
  }
  int v24 = v11 == 0;
  uint64_t v25 = (v50 >> 3);
  int v48 = v11;
  if ((int)v25 <= v24)
  {
    LODWORD(v27) = v13 + 8;
  }
  else
  {
    BOOL v26 = v11 == 0;
    uint64_t v27 = (v13 + 8);
    uint64_t v28 = v25 - v26;
    uint64_t v29 = &v51[10 * v26 + 80];
    int v30 = &v51[5 * v26 + 336];
    uint64_t v31 = v44 + 8 * v18 * v26 + v45 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v31, v18, v30, v29, v27);
      v29 += 10;
      v30 += 5;
      v31 += 8 * v18;
      --v28;
    }
    while (v28);
    int v24 = v11 == 0;
  }
  uint64_t v32 = *(void *)(v47 + 424);
  uint64_t v33 = *(void *)(v47 + 408);
  uint64_t v34 = (v32 * ((uint64_t)(int)v11 >> 1) + (int)(v49 & 0xFFFFFFFE)) << *(unsigned char *)(v47 + 531);
  uint64_t v35 = ((int)v27 >> 4);
  if ((int)v35 > v46)
  {
    uint64_t v36 = v35 - (v49 == 0);
    uint64_t v37 = &v51[17 * (v49 == 0) + 160];
    uint64_t v38 = v33 + v34 + 16 * (v49 == 0) - 2 * v32;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 88))(v38, v32, v37, v16);
      v37 += 17;
      v38 += 16;
      --v36;
    }
    while (v36);
  }
  uint64_t v39 = ((v50 + 8) >> 4);
  if ((int)v39 > v24)
  {
    BOOL v40 = v48 == 0;
    uint64_t v41 = v39 - v40;
    uint64_t v42 = &v51[17 * v40 + 228];
    uint64_t v43 = v34 + 8 * v32 * v40 + v33 - 4;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, uint64_t))(a1 + 96))(v43, v32, v42, v14);
      v42 += 17;
      v43 += 8 * v32;
      --v41;
    }
    while (v41);
  }
  return result;
}

int *sub_1D0CD46CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t result = (int *)MEMORY[0x1F4188790]();
  uint64_t v73 = v70;
  int v74 = result;
  STACK[0x94F8] = *MEMORY[0x1E4F143B8];
  uint64_t v75 = *(void *)(v70 + 8);
  uint64_t v76 = *(void *)(v70 + 16);
  int v77 = *(_DWORD *)(v75 + 520);
  int v78 = *(_DWORD *)(v75 + 524);
  uint64_t v79 = *(void *)(v75 + 416);
  uint64_t v80 = *(void *)(v75 + 424);
  uint64_t v150 = v75;
  int v81 = *(unsigned __int8 *)(v76 + 2117);
  LOBYTE(v75) = *(unsigned char *)(v76 + 2113);
  int v82 = v71 << v75;
  int v83 = v72 << v75;
  int v84 = v83 - 16;
  int v134 = v77;
  if (*(_DWORD *)(v76 + 2120) - 1 == v71)
  {
    BOOL v85 = v83 < 16;
    if (v83 >= 16) {
      int v86 = v83 - 16;
    }
    else {
      int v86 = 0;
    }
    if (v85) {
      int v87 = v84;
    }
    else {
      int v87 = 0;
    }
    int v88 = v87 + v81;
    if (v82 <= 63) {
      unsigned int v89 = 0;
    }
    else {
      unsigned int v89 = (v82 - 1) & 0xFFFFFFC0;
    }
    signed int v135 = v89;
    int v139 = v77 - v89;
    int v90 = v88 + v86 - 8;
    if (v88 + v86 < 8) {
      int v90 = 0;
    }
    result[30] = v90;
    if (*(_DWORD *)(*(void *)(v70 + 16) + 2124) - 1 == v72)
    {
      int v88 = v78 - v86;
      result[30] = v78;
    }
  }
  else
  {
    if (!v71 || (v82 & 0x3F) != 0) {
      return result;
    }
    BOOL v91 = v83 < 16;
    if (v83 >= 16) {
      int v86 = v83 - 16;
    }
    else {
      int v86 = 0;
    }
    if (!v91) {
      int v84 = 0;
    }
    int v88 = v84 + v81;
    if (v82 >= 64) {
      int v92 = v82 - 64;
    }
    else {
      int v92 = 0;
    }
    signed int v135 = v92;
    if (v82 >= 64) {
      int v82 = 64;
    }
    int v139 = v82;
    int v93 = v78 - v86;
    if (*(_DWORD *)(v76 + 2124) - 1 == v72) {
      int v88 = v93;
    }
  }
  if (v88 >= 1)
  {
    uint64_t v94 = 0;
    uint64_t vars0 = &STACK[0x440];
    uint64_t v125 = v86;
    uint64_t v138 = 8 * v79;
    uint64_t v95 = 8 * v80;
    unint64_t v124 = v88;
    uint64_t v149 = v70;
    int v126 = v88;
    do
    {
      if (v88 - (int)v94 >= 64) {
        uint64_t v96 = 64;
      }
      else {
        uint64_t v96 = (v88 - v94);
      }
      uint64_t v127 = v94;
      int v97 = v94 + v125 - 8;
      uint64_t v140 = v94 + v125;
      if (!(v94 + v125)) {
        int v97 = 0;
      }
      int v153 = v97;
      if (v94 + v125) {
        int v98 = v96 + 8;
      }
      else {
        int v98 = v96;
      }
      int v152 = v98;
      if (v139 >= 1)
      {
        uint64_t v99 = 0;
        BOOL v100 = v140 == 0;
        uint64_t v137 = ((int)v96 >> 3);
        uint64_t v133 = v137 - v100;
        uint64_t v132 = v138 * v100;
        uint64_t v136 = (((int)v96 + 8) >> 4);
        uint64_t v131 = v136 - v100;
        uint64_t v130 = v95 * v100;
        int v151 = v140 == 0;
        uint64_t vars8 = &STACK[0x340] + 4 * v100;
        do
        {
          if (v139 - (int)v99 >= 64) {
            uint64_t v101 = 64;
          }
          else {
            uint64_t v101 = (v139 - v99);
          }
          uint64_t v102 = v99 + v135;
          int v103 = v101 + v135 + v99;
          uint64_t v146 = *(void *)(v150 + 416);
          uint64_t v148 = v99;
          uint64_t v142 = *(void *)(v150 + 400);
          char v104 = *(unsigned char *)(v150 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v74 + 6))(v73, v102, v140, v101, v96, &a37);
          BOOL v145 = v103 < v134;
          if (v103 >= v134) {
            int v105 = v101;
          }
          else {
            int v105 = v101 + 8;
          }
          uint64_t v106 = (v102 + v146 * v140) << v104;
          unsigned int v107 = (int)v101 >> 3;
          if (v103 >= v134) {
            uint64_t v108 = v107;
          }
          else {
            uint64_t v108 = v107 + 1;
          }
          int v147 = v102;
          int v144 = v105;
          sub_1D0CD4C2C(&STACK[0x4D0], v73, v102, v153, v105, v152, 0);
          if ((int)v108 >= 2)
          {
            uint64_t v109 = v108 - 1;
            uint64_t v110 = v142 + v106 + 8;
            int v111 = &a37;
            int v112 = &STACK[0x440];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v74 + 9))(v110, v79, v112, v111, v96);
              v111 += 16;
              ++v112;
              v110 += 8;
              --v109;
            }
            while (v109);
          }
          sub_1D0CD4CDC((int *)&STACK[0x4D0]);
          if ((int)v137 > v151)
          {
            uint64_t v113 = v142 + v132 + v106;
            uint64_t v114 = &STACK[0x480] + (v140 == 0);
            int v115 = &a53 + 2 * (v140 == 0);
            uint64_t v116 = v133;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v74 + 10))(v113, v79, v114, v115, v101);
              v115 += 2;
              ++v114;
              v113 += v138;
              --v116;
            }
            while (v116);
          }
          sub_1D0CD4CDC((int *)&STACK[0x4D0]);
          uint64_t v141 = ((v147 & 0xFFFFFFFFFFFFFFFELL) + *(void *)(v150 + 424) * ((uint64_t)(int)v140 >> 1)) << *(unsigned char *)(v150 + 531);
          uint64_t v143 = *(void *)(v150 + 408);
          sub_1D0CD4C2C(&STACK[0x4D0], v149, v147, v153, v144, v152, 1u);
          uint64_t v117 = (v145 + (((int)v101 + 8) >> 4));
          uint64_t v95 = 8 * v80;
          if ((int)v117 >= 2)
          {
            uint64_t v118 = v117 - 1;
            uint64_t v119 = v143 + v141 + 16;
            int v120 = &a69;
            do
            {
              (*((void (**)(uint64_t, uint64_t, uint64_t *, void))v74 + 11))(v119, v80, v120, ((int)v96 >> 1));
              v120 += 4;
              v119 += 16;
              --v118;
            }
            while (v118);
          }
          sub_1D0CD4CDC((int *)&STACK[0x4D0]);
          if ((int)v136 > v151)
          {
            uint64_t v121 = v143 + v130 + v141;
            int v122 = vars8;
            uint64_t v123 = v131;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, void))v74 + 12))(v121, v80, v122, ((int)v101 >> 1));
              v122 += 4;
              v121 += 8 * v80;
              --v123;
            }
            while (v123);
          }
          uint64_t result = sub_1D0CD4CDC((int *)&STACK[0x4D0]);
          uint64_t v73 = v149;
          uint64_t v99 = v148 + 64;
        }
        while (v148 + 64 < v139);
      }
      uint64_t v94 = v127 + 64;
      int v88 = v126;
    }
    while (v127 + 64 < v124);
  }
  return result;
}

void *sub_1D0CD4C2C(void *__dst, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  __dst[4608] = a2;
  *((_DWORD *)__dst + 9218) = a3;
  *((_DWORD *)__dst + 9219) = a4;
  *((_DWORD *)__dst + 9220) = a5;
  *((_DWORD *)__dst + 9221) = a6;
  *((_DWORD *)__dst + 9222) = a7;
  uint64_t v7 = (a6 >> (a7 != 0));
  if ((int)v7 >= 1)
  {
    int v8 = (char *)__dst;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = v9 + 8 * a7;
    uint64_t v11 = *(void *)(v10 + 416);
    unsigned int v12 = (char *)(*(void *)(v10 + 400) + ((v11 * (a4 >> (a7 != 0)) + (a3 >> (a7 != 0) << a7)) << *(unsigned char *)(v9 + 531)));
    size_t v13 = a5;
    do
    {
      __dst = memcpy(v8, v12, v13);
      v12 += v11;
      v8 += v13;
      --v7;
    }
    while (v7);
  }
  return __dst;
}

int *sub_1D0CD4CDC(int *result)
{
  unsigned int v1 = result + 9216;
  int v2 = result[9221];
  if (v2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = result[9222];
    uint64_t v5 = *(void *)(*(void *)v1 + 8);
    uint64_t v6 = v5 + 8 * v4;
    uint64_t v7 = *(void *)(v6 + 416);
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 32) + 19);
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)v1 + 16) + 283);
    char v10 = v4 != 0;
    int v11 = result[9220];
    unsigned int v12 = (void *)(*(void *)(v6 + 400)
                   + ((v7 * (result[9219] >> v10) + (result[9218] >> v10 << v4)) << *(unsigned char *)(v5 + 531)));
    uint64_t v13 = 8u >> v10;
    uint64_t v14 = v11 * (int)v13;
    uint64_t v15 = v11;
    do
    {
      if (v11 >= 1)
      {
        uint64_t v16 = 0;
        uint64_t v17 = v12;
        uint64_t v18 = result;
        do
        {
          uint64_t v19 = *(void *)(*(void *)v1 + 8);
          uint64_t v20 = *(void *)(v19 + 768) * ((uint64_t)(v1[3] + v3) >> 3) + ((v1[2] + (int)v16) >> 3);
          uint64_t v21 = *(void *)(v19 + 776);
          if (v8 && (*(_WORD *)(v21 + 2 * v20) & 0x100) != 0 || v9 && (*(_WORD *)(v21 + 2 * v20) & 0xC) != 0)
          {
            uint64_t v22 = v17;
            uint64_t v23 = v18;
            uint64_t v24 = v13;
            do
            {
              void *v22 = *(void *)v23;
              uint64_t v23 = (int *)((char *)v23 + v15);
              uint64_t v22 = (void *)((char *)v22 + v7);
              --v24;
            }
            while (v24);
            int v11 = v1[4];
          }
          v16 += 8;
          v18 += 2;
          ++v17;
        }
        while (v16 < v11);
        int v2 = v1[5];
      }
      unsigned int v12 = (void *)((char *)v12 + v7 * v13);
      uint64_t result = (int *)((char *)result + v14);
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t sub_1D0CD4E1C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v65 = result;
  uint64_t v66 = *(void *)(a2 + 8);
  uint64_t v67 = *(void *)(a2 + 16);
  int v68 = *(_DWORD *)(v66 + 520);
  int v69 = *(_DWORD *)(v66 + 524);
  uint64_t v70 = *(void *)(v66 + 416);
  uint64_t v71 = *(void *)(v66 + 424);
  uint64_t v137 = v66;
  int v72 = *(unsigned __int8 *)(v67 + 2117);
  LOBYTE(v66) = *(unsigned char *)(v67 + 2113);
  int v73 = a3 << v66;
  int v74 = a4 << v66;
  int v75 = v74 - 16;
  if (*(_DWORD *)(v67 + 2120) - 1 == a3)
  {
    BOOL v76 = v74 < 16;
    if (v74 >= 16) {
      int v77 = v74 - 16;
    }
    else {
      int v77 = 0;
    }
    if (v76) {
      int v78 = v75;
    }
    else {
      int v78 = 0;
    }
    int v79 = v78 + v72;
    if (v73 <= 63) {
      unsigned int v80 = 0;
    }
    else {
      unsigned int v80 = (v73 - 1) & 0xFFFFFFC0;
    }
    signed int v124 = v80;
    int v129 = v68 - v80;
    int v81 = v79 + v77 - 8;
    if (v79 + v77 < 8) {
      int v81 = 0;
    }
    *(_DWORD *)(result + 120) = v81;
    if (*(_DWORD *)(*(void *)(a2 + 16) + 2124) - 1 == a4)
    {
      int v79 = v69 - v77;
      *(_DWORD *)(result + 120) = v69;
    }
  }
  else
  {
    if (!a3 || (v73 & 0x3F) != 0) {
      return result;
    }
    BOOL v82 = v74 < 16;
    if (v74 >= 16) {
      int v77 = v74 - 16;
    }
    else {
      int v77 = 0;
    }
    if (!v82) {
      int v75 = 0;
    }
    int v79 = v75 + v72;
    if (v73 >= 64) {
      int v83 = v73 - 64;
    }
    else {
      int v83 = 0;
    }
    signed int v124 = v83;
    if (v73 >= 64) {
      int v73 = 64;
    }
    int v129 = v73;
    int v84 = v69 - v77;
    if (*(_DWORD *)(v67 + 2124) - 1 == a4) {
      int v79 = v84;
    }
  }
  if (v79 >= 1)
  {
    uint64_t v85 = 0;
    uint64_t v113 = v77;
    uint64_t v128 = 8 * v70;
    uint64_t v86 = 8 * v71;
    unint64_t v114 = v79;
    uint64_t v123 = a2;
    int v122 = v68;
    int v115 = v79;
    do
    {
      uint64_t v116 = v85;
      if (v79 - (int)v85 >= 64) {
        uint64_t v87 = 64;
      }
      else {
        uint64_t v87 = (v79 - v85);
      }
      if (v129 >= 1)
      {
        uint64_t v88 = 0;
        uint64_t v127 = v85 + v113;
        BOOL v89 = v85 + v113 == 0;
        uint64_t v126 = ((int)v87 >> 3);
        uint64_t v121 = v126 - v89;
        uint64_t v120 = v128 * v89;
        uint64_t v125 = (((int)v87 + 8) >> 4);
        uint64_t v119 = v125 - v89;
        uint64_t v118 = v86 * v89;
        int v138 = v116 + v113 == 0;
        uint64_t vars0 = &STACK[0x7C0] + 4 * v89;
        do
        {
          if (v129 - (int)v88 >= 64) {
            uint64_t v90 = 64;
          }
          else {
            uint64_t v90 = (v129 - v88);
          }
          uint64_t v91 = v88 + v124;
          uint64_t v136 = v88;
          int v133 = v90 + v124 + v88;
          uint64_t v92 = *(void *)(v137 + 416);
          uint64_t v130 = *(void *)(v137 + 400);
          char v93 = *(unsigned char *)(v137 + 531);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v65 + 48))(a2, v91, v127, v90, v87, &a33);
          BOOL v76 = v133 < v68;
          BOOL v132 = v133 < v68;
          int v134 = v91;
          uint64_t v94 = (v91 + v92 * v127) << v93;
          LODWORD(v95) = (int)v90 >> 3;
          if (v76) {
            uint64_t v95 = (v95 + 1);
          }
          else {
            uint64_t v95 = v95;
          }
          if ((int)v95 >= 2)
          {
            uint64_t v96 = v95 - 1;
            uint64_t v97 = v130 + v94 + 8;
            int v98 = &a33;
            uint64_t v99 = &STACK[0x8C0];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v65 + 72))(v97, v70, v99, v98, v87);
              v98 += 16;
              ++v99;
              v97 += 8;
              --v96;
            }
            while (v96);
          }
          if ((int)v126 > v138)
          {
            BOOL v100 = &a49 + 2 * (v116 + v113 == 0);
            uint64_t v101 = v130 + v120 + v94;
            uint64_t v102 = &STACK[0x900] + (v116 + v113 == 0);
            uint64_t v103 = v121;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v65 + 80))(v101, v70, v102, v100, v90);
              v100 += 2;
              ++v102;
              v101 += v128;
              --v103;
            }
            while (v103);
          }
          unint64_t v104 = (v134 & 0xFFFFFFFFFFFFFFFELL) + *(void *)(v137 + 424) * ((uint64_t)((int)v116 + (int)v113) >> 1);
          uint64_t v135 = *(void *)(v137 + 408);
          unint64_t v131 = v104 << *(unsigned char *)(v137 + 531);
          uint64_t v105 = (v132 + (((int)v90 + 8) >> 4));
          uint64_t v86 = 8 * v71;
          if ((int)v105 >= 2)
          {
            uint64_t v106 = v105 - 1;
            uint64_t v107 = v135 + v131 + 16;
            uint64_t v108 = &a65;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v65 + 88))(v107, v71, v108, ((int)v87 >> 1));
              v108 += 4;
              v107 += 16;
              --v106;
            }
            while (v106);
          }
          if ((int)v125 > v138)
          {
            uint64_t v109 = ((int)v90 >> 1);
            uint64_t v110 = v119;
            unint64_t v111 = v135 + v118 + v131;
            int v112 = vars0;
            do
            {
              uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, unint64_t *, uint64_t))(v65 + 96))(v111, v71, v112, v109);
              v112 += 4;
              v111 += 8 * v71;
              --v110;
            }
            while (v110);
          }
          uint64_t v88 = v136 + 64;
          a2 = v123;
          int v68 = v122;
        }
        while (v136 + 64 < v129);
      }
      uint64_t v85 = v116 + 64;
      int v79 = v115;
    }
    while (v116 + 64 < v114);
  }
  return result;
}

int *sub_1D0CD52B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t result = (int *)MEMORY[0x1F4188790]();
  uint64_t v51 = v50;
  uint64_t v52 = result;
  STACK[0x9458] = *MEMORY[0x1E4F143B8];
  uint64_t v118 = v53;
  uint64_t v54 = *(void *)(v53 + 8);
  int v108 = *(_DWORD *)(v54 + 520);
  uint64_t v55 = *(void *)(v54 + 416);
  uint64_t v56 = *(void *)(v54 + 424);
  int v57 = *v50;
  uint64_t v109 = v54;
  if (*v50 < *(_DWORD *)(v54 + 524))
  {
    v57 &= 0xFFFFFFF0;
    int *v50 = v57;
  }
  uint64_t v58 = result[30];
  if ((int)v58 < v57)
  {
    signed int v114 = (v108 - 1) & 0xFFFFFFC0;
    uint64_t vars0 = &a49;
    uint64_t v59 = 8 * v56;
    uint64_t vars8 = 8 * v55;
    uint64_t v107 = v51;
    uint64_t v111 = 8 * v56;
    do
    {
      char v60 = *(unsigned char *)(v109 + 531);
      uint64_t v61 = *(void *)(v109 + 400) + ((*(void *)(v109 + 416) * (int)v58) << v60);
      uint64_t v123 = *(void *)(v109 + 408) + ((*(void *)(v109 + 424) * ((uint64_t)(int)v58 >> 1)) << v60);
      int v62 = v57 - v58;
      if (v62 >= 64) {
        uint64_t v63 = 64;
      }
      else {
        uint64_t v63 = v62;
      }
      if (v58) {
        int v64 = v58 - 8;
      }
      else {
        int v64 = 0;
      }
      if (v58) {
        int v65 = v63 + 8;
      }
      else {
        int v65 = v63;
      }
      int v119 = v65;
      int v120 = v64;
      uint64_t v116 = ((int)v63 >> 3);
      uint64_t v117 = (((int)v63 + 8) >> 4);
      int v115 = v63;
      uint64_t v66 = 0;
      if (v114 >= 1)
      {
        uint64_t v67 = ((int)v63 >> 1);
        do
        {
          int v68 = &a17;
          int v69 = v66;
          (*((void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))v52 + 6))(v118, v66, v52[30], 64, v63, &a17);
          int v121 = v69;
          sub_1D0CD4C2C(&STACK[0x430], v118, v69, v120, 72, v119, 0);
          uint64_t v70 = 0;
          do
          {
            uint64_t v71 = v70 + 8;
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v52 + 9))(v70 + 8 + v61, v55, (char *)&STACK[0x3A0] + v70, v68, v63);
            v68 += 16;
            uint64_t v70 = v71;
          }
          while (v71 != 64);
          sub_1D0CD4CDC((int *)&STACK[0x430]);
          int v72 = v52[30];
          if ((int)v116 > (v72 == 0))
          {
            BOOL v73 = v72 == 0;
            uint64_t v74 = v116 - v73;
            int v75 = &a33 + 2 * v73;
            BOOL v76 = &STACK[0x3E0] + v73;
            uint64_t v77 = v61 + vars8 * v73;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v52 + 10))(v77, v55, v76, v75, 64);
              v75 += 2;
              ++v76;
              v77 += vars8;
              --v74;
            }
            while (v74);
          }
          sub_1D0CD4CDC((int *)&STACK[0x430]);
          sub_1D0CD4C2C(&STACK[0x430], v118, v69, v120, 72, v119, 1u);
          int v78 = &a49;
          for (uint64_t i = 16; i != 80; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))v52 + 11))(v123 + i, v56, v78, v67);
            v78 += 4;
          }
          sub_1D0CD4CDC((int *)&STACK[0x430]);
          int v80 = v52[30];
          uint64_t v59 = 8 * v56;
          uint64_t v63 = v115;
          if ((int)v117 > (v80 == 0))
          {
            BOOL v81 = v80 == 0;
            uint64_t v82 = v117 - v81;
            int v83 = &STACK[0x2A0] + 4 * v81;
            uint64_t v84 = v123 + v111 * v81;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))v52 + 12))(v84, v56, v83, 32);
              v83 += 4;
              v84 += v111;
              --v82;
            }
            while (v82);
          }
          uint64_t result = sub_1D0CD4CDC((int *)&STACK[0x430]);
          v61 += 64;
          v123 += 64;
          uint64_t v66 = (v121 + 64);
        }
        while ((int)v66 < v114);
        uint64_t v58 = v52[30];
      }
      int v85 = v108 - v66;
      if (v108 == v66)
      {
        uint64_t v51 = v107;
      }
      else
      {
        int v86 = v66;
        (*((void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, char *))v52 + 6))(v118, v66, v58, (v108 - v66), v63, &a17);
        int v122 = v86;
        sub_1D0CD4C2C(&STACK[0x430], v118, v86, v120, v85, v119, 0);
        int v110 = v85;
        if (v85 >= 16)
        {
          uint64_t v87 = v63;
          uint64_t v88 = v61 + 8;
          uint64_t v89 = (v110 >> 3) - 1;
          uint64_t v90 = &a17;
          uint64_t v91 = &STACK[0x3A0];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v52 + 9))(v88, v55, v91, v90, v87);
            v90 += 16;
            ++v91;
            v88 += 8;
            --v89;
          }
          while (v89);
        }
        sub_1D0CD4CDC((int *)&STACK[0x430]);
        int v92 = v52[30];
        if ((int)v116 > (v92 == 0))
        {
          BOOL v93 = v92 == 0;
          uint64_t v94 = v116 - v93;
          uint64_t v95 = &a33 + 2 * v93;
          uint64_t v96 = &STACK[0x3E0] + v93;
          uint64_t v97 = v61 + vars8 * v93;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))v52 + 10))(v97, v55, v96, v95, v110);
            v95 += 2;
            ++v96;
            v97 += vars8;
            --v94;
          }
          while (v94);
        }
        sub_1D0CD4CDC((int *)&STACK[0x430]);
        sub_1D0CD4C2C(&STACK[0x430], v118, v122, v120, v110, v119, 1u);
        if (v110 >= 24)
        {
          uint64_t v98 = v123 + 16;
          uint64_t v99 = ((v110 + 8) >> 4) - 1;
          BOOL v100 = &a49;
          do
          {
            (*((void (**)(uint64_t, uint64_t, uint64_t *, void))v52 + 11))(v98, v56, v100, (v115 >> 1));
            v100 += 4;
            v98 += 16;
            --v99;
          }
          while (v99);
        }
        sub_1D0CD4CDC((int *)&STACK[0x430]);
        int v101 = v52[30];
        if ((int)v117 > (v101 == 0))
        {
          BOOL v102 = v101 == 0;
          uint64_t v103 = v117 - v102;
          unint64_t v104 = &STACK[0x2A0] + 4 * v102;
          uint64_t v105 = v123 + v59 * v102;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, void))v52 + 12))(v105, v56, v104, (v110 >> 1));
            v104 += 4;
            v105 += v59;
            --v103;
          }
          while (v103);
        }
        uint64_t result = sub_1D0CD4CDC((int *)&STACK[0x430]);
        LODWORD(v58) = v52[30];
        uint64_t v51 = v107;
        LODWORD(v63) = v115;
      }
      uint64_t v58 = (v58 + v63);
      v52[30] = v58;
      int v57 = *v51;
    }
    while ((int)v58 < *v51);
  }
  int v106 = *(_DWORD *)(v109 + 524);
  if (v106 >= (int)v58) {
    int v106 = v58;
  }
  int *v51 = v106;
  if (v52[30] < *(_DWORD *)(v109 + 524))
  {
    if (v106 <= 4) {
      int v106 = 4;
    }
    int *v51 = v106 - 4;
  }
  return result;
}

void *sub_1D0CD58C4(void *result, uint64_t a2)
{
  int v2 = sub_1D0CD6234;
  int v3 = sub_1D0CD69B4;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    int v2 = sub_1D0CD6234;
    int v3 = sub_1D0CD69B4;
    if (!*(unsigned char *)(*(void *)(a2 + 16) + 283))
    {
      int v2 = sub_1D0CD667C;
      int v3 = sub_1D0CD6D7C;
    }
  }
  *uint64_t result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1D0CD6064;
  result[5] = 0;
  result[8] = sub_1D0CCB318;
  result[6] = sub_1D0CD5988;
  result[7] = sub_1D0CD5988;
  return result;
}

void sub_1D0CD5988(uint64_t a1, int a2, int a3, int a4, int a5, char *a6)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  int v9 = *(void **)(a1 + 8);
  bzero(a6, 0x380uLL);
  int v78 = v9;
  uint64_t v80 = v9[96];
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(char *)(v10 + 14);
  LODWORD(v10) = *(char *)(v10 + 15);
  v87[0] = v11;
  v87[1] = v10;
  memset(v86, 0, sizeof(v86));
  memset(v85, 0, sizeof(v85));
  memset(v84, 0, sizeof(v84));
  uint64_t v76 = (a5 >> 3);
  int v79 = a4;
  int v73 = a5;
  int v74 = a4 >> 3;
  memset(v83, 0, sizeof(v83));
  if (a5 >= 8)
  {
    uint64_t v12 = 0;
    if (v74 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v74;
    }
    if ((int)v76 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v76;
    }
    uint64_t v75 = v14;
    do
    {
      if (a4 >= 8)
      {
        uint64_t v15 = 0;
        int v16 = a3 + 8 * v12;
        uint64_t v17 = v78[97] + 2 * (((uint64_t)a2 >> 3) + v78[96] * ((uint64_t)v16 >> 3));
        do
        {
          uint64_t v18 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, ((a2 + 8 + 8 * (int)v15) >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)), (v16 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)));
          uint64_t v19 = v15 + 1;
          int v20 = (*(__int16 *)(v17 + 2 * (v15 + 1)) >> 9) + (*(__int16 *)(v17 + 2 * v15) >> 9);
          *((unsigned char *)v86 + 8 * v15 + v12) = *(unsigned char *)(v18 + 661) + ((v20 + 1) >> 1) - 2;
          int v21 = *(char *)(v18 + 660) + ((v20 + 1) >> 1);
          if (v21 >= 51) {
            int v21 = 51;
          }
          if (v21 <= 15) {
            int v21 = 15;
          }
          a6[8 * v15 + 768 + v12] = byte_1D0DAE593[v21 - 15];
          if (v15)
          {
            uint64_t v22 = 0;
            char v23 = *(unsigned char *)(v18 + 661);
            char v24 = 1;
            do
            {
              char v25 = v24;
              int v26 = v20 + 2 * v87[v22];
              int v27 = (v26 + 1) >> 1;
              if (v26 >= 59)
              {
                if ((v26 + 1) < 0x74) {
                  LOBYTE(v27) = byte_1D0DAE600[v27 - 30];
                }
                else {
                  LOBYTE(v27) = v27 - 6;
                }
              }
              char v24 = 0;
              *((unsigned char *)&v85[4 * v22] + 8 * (v15 >> 1) + v12) = v27 + v23 + 2;
              uint64_t v22 = 1;
            }
            while ((v25 & 1) != 0);
          }
          ++v15;
        }
        while (v19 != v13);
      }
      ++v12;
    }
    while (v12 != v75);
  }
  uint64_t v29 = (a5 >> 3);
  int v28 = a3;
  int v30 = a3 == 0;
  if ((int)v76 > v30)
  {
    uint64_t v31 = a3 == 0;
    if (v74 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v74;
    }
    do
    {
      if (v79 >= 8)
      {
        uint64_t v33 = 0;
        int v34 = a3 + 8 * v31;
        uint64_t v35 = v78[97] + 2 * (((uint64_t)a2 >> 3) + v78[96] * ((uint64_t)v34 >> 3));
        do
        {
          uint64_t v36 = (**(uint64_t (***)(uint64_t, void, void))a1)(a1, ((a2 + 8 * (int)v33) >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)), (v34 >> *(unsigned char *)(*(void *)(a1 + 16) + 2113)));
          int v37 = (*(__int16 *)(v35 + 2 * v33) >> 9) + (*(__int16 *)(v35 + 2 * (v33 - v80)) >> 9);
          *((unsigned char *)v84 + 8 * v31 + v33) = *(unsigned char *)(v36 + 661) + ((v37 + 1) >> 1) - 2;
          int v38 = *(char *)(v36 + 660) + ((v37 + 1) >> 1);
          if (v38 >= 51) {
            int v38 = 51;
          }
          if (v38 <= 15) {
            int v38 = 15;
          }
          a6[8 * v31 + 832 + v33] = byte_1D0DAE593[v38 - 15];
          if ((v31 & 1) == 0)
          {
            uint64_t v39 = 0;
            char v40 = *(unsigned char *)(v36 + 661);
            char v41 = 1;
            do
            {
              char v42 = v41;
              int v43 = v37 + 2 * v87[v39];
              int v44 = (v43 + 1) >> 1;
              if (v43 >= 59)
              {
                if ((v43 + 1) < 0x74) {
                  LOBYTE(v44) = byte_1D0DAE600[v44 - 30];
                }
                else {
                  LOBYTE(v44) = v44 - 6;
                }
              }
              char v41 = 0;
              *((unsigned char *)&v83[4 * v39] + 8 * (v31 >> 1) + v33) = v44 + v40 + 2;
              uint64_t v39 = 1;
            }
            while ((v42 & 1) != 0);
          }
          ++v33;
        }
        while (v33 != v32);
      }
      ++v31;
      uint64_t v29 = v76;
    }
    while (v31 != v76);
    int v28 = a3;
    int v30 = a3 == 0;
  }
  if (v79 >= 8)
  {
    unint64_t v45 = 0;
    int v46 = a6;
    LODWORD(v47) = v73 >> 2;
    if (v73 >> 2 <= 1) {
      uint64_t v47 = 1;
    }
    else {
      uint64_t v47 = v47;
    }
    if (v74 <= 1) {
      uint64_t v48 = 1;
    }
    else {
      uint64_t v48 = v74;
    }
    do
    {
      if (v73 >= 4)
      {
        uint64_t v49 = 0;
        int v50 = (unsigned __int8 *)&a6[32 * (v45 >> 1) + 257];
        uint64_t v51 = v78[121] + ((uint64_t)v28 >> 2) + v78[117] * ((uint64_t)(a2 + 8 + 8 * (int)v45) >> 3);
        do
        {
          if (*(unsigned char *)(v51 + v49))
          {
            int v52 = *((char *)v86 + 8 * v45 + (v49 >> 1)) + 2 * *(unsigned __int8 *)(v51 + v49);
            if (v52 >= 53) {
              int v52 = 53;
            }
            if (v52 <= 17) {
              int v52 = 17;
            }
            v46[v49] = byte_1D0DAE5C4[v52 - 17];
          }
          ++v49;
        }
        while (v47 != v49);
        if (v45)
        {
          uint64_t v53 = 0;
          do
          {
            if (*(unsigned __int8 *)(v51 + v53) >= 2u)
            {
              uint64_t v54 = (char *)v85 + 8 * (v45 >> 1) + (v53 >> 1);
              int v55 = *v54;
              if (v55 >= 53) {
                int v55 = 53;
              }
              if (v55 <= 17) {
                int v55 = 17;
              }
              unsigned __int8 v56 = byte_1D0DAE5C4[v55 - 17];
              int v57 = v54[64];
              if (v57 >= 53) {
                int v57 = 53;
              }
              if (v57 <= 17) {
                int v57 = 17;
              }
              unsigned __int8 v58 = byte_1D0DAE5C4[v57 - 17];
              *(v50 - 1) = v56;
              unsigned __int8 *v50 = v58;
            }
            ++v53;
            v50 += 2;
          }
          while (v47 != v53);
        }
      }
      ++v45;
      v46 += 16;
    }
    while (v45 != v48);
  }
  if ((int)v29 > v30)
  {
    uint64_t v59 = v28 == 0;
    LODWORD(v60) = v79 >> 2;
    if (v79 >> 2 <= 1) {
      uint64_t v60 = 1;
    }
    else {
      uint64_t v60 = v60;
    }
    uint64_t v61 = &a6[16 * (v28 == 0) + 128];
    do
    {
      if (v79 >= 4)
      {
        uint64_t v62 = 0;
        uint64_t v63 = v59 >> 1;
        int v64 = (unsigned __int8 *)&a6[32 * v63 + 513];
        uint64_t v65 = v78[118] + ((uint64_t)a2 >> 2) + v78[116] * ((uint64_t)(v28 + 8 * (int)v59) >> 3);
        do
        {
          if (*(unsigned char *)(v65 + v62))
          {
            int v66 = *((char *)v84 + 8 * v59 + (v62 >> 1)) + 2 * *(unsigned __int8 *)(v65 + v62);
            if (v66 >= 53) {
              int v66 = 53;
            }
            if (v66 <= 17) {
              int v66 = 17;
            }
            v61[v62] = byte_1D0DAE5C4[v66 - 17];
          }
          ++v62;
        }
        while (v60 != v62);
        if ((v59 & 1) == 0)
        {
          uint64_t v67 = 0;
          do
          {
            if (*(unsigned __int8 *)(v65 + v67) >= 2u)
            {
              int v68 = (char *)v83 + 8 * v63 + (v67 >> 1);
              int v69 = *v68;
              if (v69 >= 53) {
                int v69 = 53;
              }
              if (v69 <= 17) {
                int v69 = 17;
              }
              unsigned __int8 v70 = byte_1D0DAE5C4[v69 - 17];
              int v71 = v68[64];
              if (v71 >= 53) {
                int v71 = 53;
              }
              if (v71 <= 17) {
                int v71 = 17;
              }
              unsigned __int8 v72 = byte_1D0DAE5C4[v71 - 17];
              *(v64 - 1) = v70;
              *int v64 = v72;
            }
            ++v67;
            v64 += 2;
          }
          while (v60 != v67);
        }
      }
      ++v59;
      v61 += 16;
    }
    while (v59 != v29);
  }
}

uint64_t sub_1D0CD6064(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(v6 + 520);
  int v8 = *(_DWORD *)(v6 + 524);
  unsigned int v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(unsigned char *)(v5 + 2113);
  uint64_t v10 = (a3 << v5);
  uint64_t v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7) {
    uint64_t v12 = (v7 - v10);
  }
  else {
    uint64_t v12 = v9;
  }
  if ((int)(v11 + v9) >= v8) {
    uint64_t v13 = (v8 - v11);
  }
  else {
    uint64_t v13 = v9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  uint64_t v15 = *(void *)(v6 + 416);
  uint64_t v28 = (v15 * (int)v11 + (int)v10) << *(unsigned char *)(v6 + 531);
  uint64_t v29 = *(void *)(v6 + 400);
  uint64_t v16 = ((int)v12 >> 3);
  if ((int)v16 > (v10 == 0))
  {
    uint64_t v17 = v16 - (v10 == 0);
    uint64_t v18 = &v30[10 * (v10 == 0)];
    uint64_t v19 = &v30[5 * (v10 == 0) + 296];
    uint64_t v20 = v29 + v28 + 16 * (v10 == 0) - 16 * v15;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 16;
      --v17;
    }
    while (v17);
  }
  uint64_t v21 = ((int)v13 >> 3);
  if ((int)v21 > (v11 == 0))
  {
    BOOL v22 = v11 == 0;
    uint64_t v23 = (v12 + 8);
    uint64_t v24 = v21 - v22;
    char v25 = &v30[10 * v22 + 80];
    int v26 = &v30[5 * v22 + 336];
    uint64_t v27 = v28 + 16 * v15 * v22 + v29 - 16;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 16 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

int *sub_1D0CD6234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  unint64_t v45 = result;
  uint64_t v46 = *(void *)(v42 + 8);
  uint64_t v47 = *(void *)(v42 + 16);
  int v48 = *(_DWORD *)(v46 + 520);
  int v49 = *(_DWORD *)(v46 + 524);
  uint64_t v94 = v46;
  uint64_t v95 = v42;
  uint64_t v50 = *(void *)(v46 + 416);
  int v51 = *(unsigned __int8 *)(v47 + 2117);
  LOBYTE(v46) = *(unsigned char *)(v47 + 2113);
  int v52 = v43 << v46;
  int v53 = v44 << v46;
  int v54 = v53 - 16;
  int v93 = v48;
  if (*(_DWORD *)(v47 + 2120) - 1 == v43)
  {
    BOOL v55 = v53 < 16;
    if (v53 >= 16) {
      int v56 = v53 - 16;
    }
    else {
      int v56 = 0;
    }
    if (v55) {
      int v57 = v54;
    }
    else {
      int v57 = 0;
    }
    int v58 = v57 + v51;
    if (v52 <= 63) {
      unsigned int v59 = 0;
    }
    else {
      unsigned int v59 = (v52 - 1) & 0xFFFFFFC0;
    }
    signed int v96 = v59;
    int v100 = v48 - v59;
    int v60 = v58 + v56 - 8;
    if (v58 + v56 < 8) {
      int v60 = 0;
    }
    result[30] = v60;
    if (*(_DWORD *)(*(void *)(v42 + 16) + 2124) - 1 == v44)
    {
      int v58 = v49 - v56;
      result[30] = v49;
    }
  }
  else
  {
    if (!v43 || (v52 & 0x3F) != 0) {
      return result;
    }
    BOOL v61 = v53 < 16;
    if (v53 >= 16) {
      int v56 = v53 - 16;
    }
    else {
      int v56 = 0;
    }
    if (!v61) {
      int v54 = 0;
    }
    int v58 = v54 + v51;
    if (v52 >= 64) {
      int v62 = v52 - 64;
    }
    else {
      int v62 = 0;
    }
    signed int v96 = v62;
    if (v52 >= 64) {
      int v52 = 64;
    }
    int v100 = v52;
    int v63 = v49 - v56;
    if (*(_DWORD *)(v47 + 2124) - 1 == v44) {
      int v58 = v63;
    }
  }
  if (v58 >= 1)
  {
    uint64_t v64 = 0;
    uint64_t v65 = 16 * v50;
    unint64_t v87 = v58;
    uint64_t v88 = v56;
    int v89 = v58;
    do
    {
      if (v58 - (int)v64 >= 64) {
        uint64_t v66 = 64;
      }
      else {
        uint64_t v66 = (v58 - v64);
      }
      uint64_t v90 = v64;
      uint64_t v101 = v64 + v88;
      BOOL v67 = v64 + v88 == 0;
      if (v64 + v88) {
        int v68 = v64 + v88 - 8;
      }
      else {
        int v68 = 0;
      }
      int v69 = v66 + 8;
      if (v67) {
        int v69 = v66;
      }
      int v98 = v69;
      int v99 = v68;
      if (v100 >= 1)
      {
        uint64_t v70 = 0;
        BOOL v71 = v101 == 0;
        uint64_t v97 = ((int)v66 >> 3);
        uint64_t v92 = v97 - v71;
        uint64_t v91 = v65 * v71;
        do
        {
          if (v100 - (int)v70 >= 64) {
            uint64_t v72 = 64;
          }
          else {
            uint64_t v72 = (v100 - v70);
          }
          uint64_t v73 = v70 + v96;
          int v103 = v72 + v96 + v70;
          uint64_t v102 = *(void *)(v94 + 416);
          uint64_t v105 = *(void *)(v94 + 400);
          char v74 = *(unsigned char *)(v94 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v45 + 6))(v95, v73, v101, v72, v66, &a25);
          BOOL v75 = v103 < v93;
          if (v103 >= v93) {
            int v76 = v72;
          }
          else {
            int v76 = v72 + 8;
          }
          uint64_t v104 = (v73 + v102 * v101) << v74;
          unsigned int v77 = (int)v72 >> 3;
          if (v75) {
            uint64_t v78 = v77 + 1;
          }
          else {
            uint64_t v78 = v77;
          }
          sub_1D0CD65DC(&STACK[0x460], v95, v73, v99, v76, v98);
          if ((int)v78 >= 2)
          {
            uint64_t v79 = v78 - 1;
            uint64_t v80 = v105 + v104 + 16;
            BOOL v81 = &a25;
            uint64_t v82 = &STACK[0x3E0];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v45 + 9))(v80, v50, v82, v81, v66);
              v81 += 16;
              ++v82;
              v80 += 16;
              --v79;
            }
            while (v79);
          }
          sub_1D0CD3348((int *)&STACK[0x460]);
          if ((int)v97 > (v101 == 0))
          {
            int v83 = &STACK[0x420] + (v101 == 0);
            uint64_t v84 = v105 + v91 + v104;
            int v86 = &a41 + 2 * (v101 == 0);
            uint64_t v85 = v92;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v45 + 10))(v84, v50, v83, v86, v72);
              v86 += 2;
              ++v83;
              v84 += v65;
              --v85;
            }
            while (v85);
          }
          uint64_t result = sub_1D0CD3348((int *)&STACK[0x460]);
          v70 += 64;
        }
        while (v70 < v100);
      }
      uint64_t v64 = v90 + 64;
      int v58 = v89;
    }
    while (v90 + 64 < v87);
  }
  return result;
}

void *sub_1D0CD65DC(void *__dst, uint64_t a2, int a3, int a4, int a5, int a6)
{
  __dst[9216] = a2;
  *((_DWORD *)__dst + 18434) = a3;
  *((_DWORD *)__dst + 18435) = a4;
  *((_DWORD *)__dst + 18436) = a5;
  *((_DWORD *)__dst + 18437) = a6;
  *((_DWORD *)__dst + 18438) = 0;
  if (a6 >= 1)
  {
    uint64_t v6 = (char *)__dst;
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(v7 + 416);
    unsigned int v9 = (char *)(*(void *)(v7 + 400) + ((v8 * a4 + a3) << *(unsigned char *)(v7 + 531)));
    size_t v10 = 2 * a5;
    uint64_t v11 = a6;
    uint64_t v12 = 2 * v8;
    do
    {
      __dst = memcpy(v6, v9, v10);
      v9 += v12;
      v6 += v10;
      --v11;
    }
    while (v11);
  }
  return __dst;
}

uint64_t sub_1D0CD667C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37 = result;
  uint64_t v38 = *(void *)(a2 + 8);
  uint64_t v39 = *(void *)(a2 + 16);
  int v40 = *(_DWORD *)(v38 + 520);
  int v41 = *(_DWORD *)(v38 + 524);
  uint64_t v83 = v38;
  uint64_t v42 = *(void *)(v38 + 416);
  int v43 = *(unsigned __int8 *)(v39 + 2117);
  LOBYTE(v38) = *(unsigned char *)(v39 + 2113);
  int v44 = a3 << v38;
  int v45 = a4 << v38;
  int v46 = v45 - 16;
  int v82 = v40;
  if (*(_DWORD *)(v39 + 2120) - 1 == a3)
  {
    BOOL v47 = v45 < 16;
    if (v45 >= 16) {
      int v48 = v45 - 16;
    }
    else {
      int v48 = 0;
    }
    if (v47) {
      int v49 = v46;
    }
    else {
      int v49 = 0;
    }
    int v50 = v49 + v43;
    if (v44 <= 63) {
      unsigned int v51 = 0;
    }
    else {
      unsigned int v51 = (v44 - 1) & 0xFFFFFFC0;
    }
    signed int v84 = v51;
    int v88 = v40 - v51;
    int v52 = v50 + v48 - 8;
    if (v50 + v48 < 8) {
      int v52 = 0;
    }
    *(_DWORD *)(result + 120) = v52;
    if (*(_DWORD *)(*(void *)(a2 + 16) + 2124) - 1 == a4)
    {
      int v50 = v41 - v48;
      *(_DWORD *)(result + 120) = v41;
    }
  }
  else
  {
    if (!a3 || (v44 & 0x3F) != 0) {
      return result;
    }
    BOOL v53 = v45 < 16;
    if (v45 >= 16) {
      int v48 = v45 - 16;
    }
    else {
      int v48 = 0;
    }
    if (!v53) {
      int v46 = 0;
    }
    int v50 = v46 + v43;
    if (v44 >= 64) {
      int v54 = v44 - 64;
    }
    else {
      int v54 = 0;
    }
    signed int v84 = v54;
    if (v44 >= 64) {
      int v44 = 64;
    }
    int v88 = v44;
    int v55 = v41 - v48;
    if (*(_DWORD *)(v39 + 2124) - 1 == a4) {
      int v50 = v55;
    }
  }
  if (v50 >= 1)
  {
    uint64_t v56 = 0;
    uint64_t v73 = v48;
    uint64_t v57 = 16 * v42;
    unint64_t v74 = v50;
    uint64_t v81 = a2;
    int v75 = v50;
    do
    {
      uint64_t v76 = v56;
      if (v50 - (int)v56 >= 64) {
        uint64_t v58 = 64;
      }
      else {
        uint64_t v58 = (v50 - v56);
      }
      if (v88 >= 1)
      {
        uint64_t v59 = 0;
        uint64_t v87 = v56 + v73;
        BOOL v60 = v56 + v73 == 0;
        uint64_t v85 = ((int)v58 >> 3);
        int v86 = v56 + v73 == 0;
        uint64_t vars8 = v85 - v60;
        uint64_t v78 = &STACK[0x840] + v60;
        uint64_t vars0 = &a37 + 2 * v60;
        uint64_t v77 = v57 * v60;
        do
        {
          if (v88 - (int)v59 >= 64) {
            uint64_t v61 = 64;
          }
          else {
            uint64_t v61 = (v88 - v59);
          }
          uint64_t v62 = *(void *)(v83 + 416);
          uint64_t v90 = *(void *)(v83 + 400);
          char v63 = *(unsigned char *)(v83 + 531);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v37 + 48))(a2, v59 + v84, v87, v61, v58, &a21);
          uint64_t v89 = (v59 + v84 + v62 * v87) << v63;
          LODWORD(v64) = (int)v61 >> 3;
          if ((int)v61 + v84 + (int)v59 >= v82) {
            uint64_t v64 = v64;
          }
          else {
            uint64_t v64 = (v64 + 1);
          }
          if ((int)v64 >= 2)
          {
            uint64_t v65 = v64 - 1;
            uint64_t v66 = v90 + v89 + 16;
            BOOL v67 = &a21;
            int v68 = &STACK[0x800];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v37 + 72))(v66, v42, v68, v67, v58);
              v67 += 16;
              ++v68;
              v66 += 16;
              --v65;
            }
            while (v65);
          }
          if ((int)v85 > v86)
          {
            int v69 = v78;
            uint64_t v70 = v90 + v77 + v89;
            uint64_t v72 = vars0;
            uint64_t v71 = vars8;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v37 + 80))(v70, v42, v69, v72, v61);
              v72 += 2;
              ++v69;
              v70 += v57;
              --v71;
            }
            while (v71);
          }
          v59 += 64;
          a2 = v81;
        }
        while (v59 < v88);
      }
      uint64_t v56 = v76 + 64;
      int v50 = v75;
    }
    while (v76 + 64 < v74);
  }
  return result;
}

int *sub_1D0CD69B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  uint64_t v27 = v26;
  uint64_t v28 = result;
  uint64_t v67 = v29;
  uint64_t v30 = *(void *)(v29 + 8);
  int v64 = *(_DWORD *)(v30 + 520);
  uint64_t v31 = *(void *)(v30 + 416);
  int v32 = *v26;
  uint64_t v65 = v30;
  if (*v26 < *(_DWORD *)(v30 + 524))
  {
    v32 &= 0xFFFFFFF0;
    int *v26 = v32;
  }
  uint64_t v33 = result[30];
  if ((int)v33 < v32)
  {
    signed int v68 = (v64 - 1) & 0xFFFFFFC0;
    uint64_t v66 = 16 * v31;
    char v63 = v27;
    do
    {
      uint64_t v34 = *(void *)(v65 + 400) + ((*(void *)(v65 + 416) * (int)v33) << *(unsigned char *)(v65 + 531));
      int v35 = v32 - v33;
      if (v35 >= 64) {
        uint64_t v36 = 64;
      }
      else {
        uint64_t v36 = v35;
      }
      if (v33) {
        int v37 = v33 - 8;
      }
      else {
        int v37 = 0;
      }
      int v38 = v36 + 8;
      if (!v33) {
        int v38 = v36;
      }
      int v69 = v38;
      int v70 = v37;
      uint64_t v39 = ((int)v36 >> 3);
      if (v68 < 1)
      {
        uint64_t v40 = 0;
      }
      else
      {
        uint64_t v40 = 0;
        do
        {
          (*((void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))v28 + 6))(v67, v40, v28[30], 64, v36, &a9);
          int vars8_4 = v40;
          sub_1D0CD65DC(&STACK[0x3E0], v67, v40, v70, 72, v69);
          uint64_t v41 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v28 + 9))(v34 + i, v31, (char *)&STACK[0x360] + v41, (char *)&STACK[0x360] + i - 784, v36);
            v41 += 8;
          }
          sub_1D0CD3348((int *)&STACK[0x3E0]);
          int v43 = v28[30];
          if ((int)v39 > (v43 == 0))
          {
            BOOL v44 = v43 == 0;
            uint64_t v45 = ((int)v36 >> 3) - v44;
            int v46 = &a25 + 2 * v44;
            BOOL v47 = &STACK[0x3A0] + v44;
            uint64_t v48 = v34 + v66 * v44;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v28 + 10))(v48, v31, v47, v46, 64);
              v46 += 2;
              ++v47;
              v48 += v66;
              --v45;
            }
            while (v45);
          }
          uint64_t result = sub_1D0CD3348((int *)&STACK[0x3E0]);
          v34 += 128;
          uint64_t v40 = (vars8_4 + 64);
          uint64_t v39 = ((int)v36 >> 3);
        }
        while ((int)v40 < v68);
        uint64_t v33 = v28[30];
      }
      int v49 = v64 - v40;
      if (v64 != v40)
      {
        (*((void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, char *))v28 + 6))(v67, v40, v33, (v64 - v40), v36, &a9);
        sub_1D0CD65DC(&STACK[0x3E0], v67, v40, v70, v49, v69);
        unsigned int vars8_4a = v64 - v40;
        if (v49 >= 16)
        {
          uint64_t v50 = v34 + 16;
          uint64_t v51 = (vars8_4a >> 3) - 1;
          int v52 = &a9;
          BOOL v53 = &STACK[0x360];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v28 + 9))(v50, v31, v53, v52, v36);
            v52 += 16;
            ++v53;
            v50 += 16;
            --v51;
          }
          while (v51);
        }
        sub_1D0CD3348((int *)&STACK[0x3E0]);
        int v54 = v28[30];
        uint64_t v55 = vars8_4a;
        if (__SPAIR64__(v39, v54) >= 1 && v39 != (v54 == 0))
        {
          BOOL v56 = v54 == 0;
          uint64_t v57 = v39 - v56;
          uint64_t v58 = &a25 + 2 * v56;
          uint64_t v59 = &STACK[0x3A0] + v56;
          uint64_t v60 = v34 + v66 * v56;
          do
          {
            uint64_t v61 = v55;
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v28 + 10))(v60, v31, v59, v58, v55);
            uint64_t v55 = v61;
            v58 += 2;
            ++v59;
            v60 += v66;
            --v57;
          }
          while (v57);
        }
        uint64_t result = sub_1D0CD3348((int *)&STACK[0x3E0]);
        LODWORD(v33) = v28[30];
      }
      uint64_t v27 = v63;
      uint64_t v33 = (v33 + v36);
      v28[30] = v33;
      int v32 = *v63;
    }
    while ((int)v33 < *v63);
  }
  int v62 = *(_DWORD *)(v65 + 524);
  if (v62 >= (int)v33) {
    int v62 = v33;
  }
  *uint64_t v27 = v62;
  if (v28[30] < *(_DWORD *)(v65 + 524))
  {
    if (v62 <= 4) {
      int v62 = 4;
    }
    *uint64_t v27 = v62 - 4;
  }
  return result;
}

uint64_t sub_1D0CD6D7C(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char v25 = a3;
  uint64_t v26 = result;
  uint64_t v27 = *(void *)(a2 + 8);
  int v57 = *(_DWORD *)(v27 + 520);
  uint64_t v28 = *(void *)(v27 + 416);
  int v29 = *a3;
  uint64_t v58 = v27;
  if (*a3 < *(_DWORD *)(v27 + 524))
  {
    v29 &= 0xFFFFFFF0;
    *a3 = v29;
  }
  int v30 = *(_DWORD *)(result + 120);
  if (v30 < v29)
  {
    signed int v60 = (v57 - 1) & 0xFFFFFFC0;
    uint64_t v31 = 16 * v28;
    BOOL v56 = v25;
    do
    {
      uint64_t v32 = *(void *)(v58 + 400) + ((*(void *)(v58 + 416) * v30) << *(unsigned char *)(v58 + 531));
      int v33 = v29 - v30;
      if (v33 >= 64) {
        uint64_t v34 = 64;
      }
      else {
        uint64_t v34 = v33;
      }
      int v35 = (int)v34 >> 3;
      uint64_t vars0 = ((int)v34 >> 3);
      int v36 = 0;
      if (v60 >= 1)
      {
        do
        {
          int vars8_4 = v36;
          (*(void (**)(uint64_t))(v26 + 48))(a2);
          uint64_t v37 = 0;
          for (uint64_t i = 16; i != 144; i += 16)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v26 + 72))(v32 + i, v28, (char *)&STACK[0x740] + v37, (char *)&STACK[0x740] + i - 784, v34);
            v37 += 8;
          }
          int v39 = *(_DWORD *)(v26 + 120);
          if (v35 > (v39 == 0))
          {
            BOOL v40 = v39 == 0;
            uint64_t v41 = vars0 - v40;
            uint64_t v42 = &a25 + 2 * v40;
            int v43 = &STACK[0x780] + v40;
            uint64_t v44 = v32 + v31 * v40;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 80))(v44, v28, v43, v42, 64);
              v42 += 2;
              ++v43;
              v44 += v31;
              --v41;
            }
            while (v41);
          }
          v32 += 128;
          int v36 = vars8_4 + 64;
          int v35 = (int)v34 >> 3;
        }
        while (vars8_4 + 64 < v60);
        int v30 = *(_DWORD *)(v26 + 120);
      }
      int v45 = v57 - v36;
      if (v57 != v36)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v26 + 48))(a2);
        unsigned int vars8_4a = v45;
        if (v45 >= 16)
        {
          uint64_t v46 = v32 + 16;
          uint64_t v47 = (vars8_4a >> 3) - 1;
          uint64_t v48 = &a9;
          int v49 = &STACK[0x740];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v26 + 72))(v46, v28, v49, v48, v34);
            v48 += 16;
            ++v49;
            v46 += 16;
            --v47;
          }
          while (v47);
        }
        int v30 = *(_DWORD *)(v26 + 120);
        if ((int)vars0 > (v30 == 0))
        {
          BOOL v50 = v30 == 0;
          uint64_t v51 = vars0 - v50;
          int v52 = &a25 + 2 * v50;
          BOOL v53 = &STACK[0x780] + v50;
          uint64_t v54 = v32 + v31 * v50;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))(v26 + 80))(v54, v28, v53, v52, vars8_4a);
            v52 += 2;
            ++v53;
            v54 += v31;
            --v51;
          }
          while (v51);
          int v30 = *(_DWORD *)(v26 + 120);
        }
      }
      v30 += v34;
      *(_DWORD *)(v26 + 120) = v30;
      char v25 = v56;
      int v29 = *v56;
    }
    while (v30 < *v56);
  }
  int v55 = *(_DWORD *)(v58 + 524);
  if (v55 >= v30) {
    int v55 = v30;
  }
  int *v25 = v55;
  if (*(_DWORD *)(v26 + 120) < *(_DWORD *)(v58 + 524))
  {
    if (v55 <= 4) {
      int v55 = 4;
    }
    int *v25 = v55 - 4;
  }
  return result;
}

void *sub_1D0CD7094(void *result, uint64_t a2)
{
  int v2 = sub_1D0CD7328;
  int v3 = sub_1D0CD7AD8;
  if (!*(unsigned char *)(*(void *)(a2 + 32) + 19))
  {
    int v2 = sub_1D0CD7328;
    int v3 = sub_1D0CD7AD8;
    if (!*(unsigned char *)(*(void *)(a2 + 16) + 283))
    {
      int v2 = sub_1D0CD77A0;
      int v3 = sub_1D0CD7EC4;
    }
  }
  *uint64_t result = v3;
  result[1] = 0;
  result[2] = v2;
  result[3] = 0;
  result[4] = sub_1D0CD7158;
  result[5] = 0;
  result[8] = sub_1D0CCB318;
  result[6] = sub_1D0CD5988;
  result[7] = sub_1D0CD5988;
  return result;
}

uint64_t sub_1D0CD7158(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(v6 + 520);
  int v8 = *(_DWORD *)(v6 + 524);
  unsigned int v9 = *(unsigned __int8 *)(v5 + 2117);
  LOBYTE(v5) = *(unsigned char *)(v5 + 2113);
  uint64_t v10 = (a3 << v5);
  uint64_t v11 = (a4 << v5);
  if ((int)(v10 + v9) >= v7) {
    uint64_t v12 = (v7 - v10);
  }
  else {
    uint64_t v12 = v9;
  }
  if ((int)(v11 + v9) >= v8) {
    uint64_t v13 = (v8 - v11);
  }
  else {
    uint64_t v13 = v9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *))(a1 + 64))(a2, v10, v11, v12, v13, v30);
  uint64_t v15 = *(void *)(v6 + 416);
  uint64_t v28 = (v15 * (int)v11 + (int)v10) << *(unsigned char *)(v6 + 531);
  uint64_t v29 = *(void *)(v6 + 400);
  uint64_t v16 = ((int)v12 >> 3);
  if ((int)v16 > (v10 == 0))
  {
    uint64_t v17 = v16 - (v10 == 0);
    uint64_t v18 = &v30[10 * (v10 == 0)];
    uint64_t v19 = &v30[5 * (v10 == 0) + 296];
    uint64_t v20 = v29 + v28 + 8 * (v10 == 0) - 8 * v15;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, void))(a1 + 72))(v20, v15, v19, v18, (v13 + 8));
      v18 += 10;
      v19 += 5;
      v20 += 8;
      --v17;
    }
    while (v17);
  }
  uint64_t v21 = ((int)v13 >> 3);
  if ((int)v21 > (v11 == 0))
  {
    BOOL v22 = v11 == 0;
    uint64_t v23 = (v12 + 8);
    uint64_t v24 = v21 - v22;
    char v25 = &v30[10 * v22 + 80];
    uint64_t v26 = &v30[5 * v22 + 336];
    uint64_t v27 = v28 + 8 * v15 * v22 + v29 - 8;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *, uint64_t))(a1 + 80))(v27, v15, v26, v25, v23);
      v25 += 10;
      v26 += 5;
      v27 += 8 * v15;
      --v24;
    }
    while (v24);
  }
  return result;
}

int *sub_1D0CD7328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  int v45 = result;
  STACK[0x9498] = *MEMORY[0x1E4F143B8];
  uint64_t v46 = *(void *)(v42 + 8);
  uint64_t v47 = *(void *)(v42 + 16);
  int v48 = *(_DWORD *)(v46 + 520);
  int v49 = *(_DWORD *)(v46 + 524);
  uint64_t v94 = v46;
  uint64_t v95 = v42;
  uint64_t v50 = *(void *)(v46 + 416);
  int v51 = *(unsigned __int8 *)(v47 + 2117);
  LOBYTE(v46) = *(unsigned char *)(v47 + 2113);
  int v52 = v43 << v46;
  int v53 = v44 << v46;
  int v54 = v53 - 16;
  int v93 = v48;
  if (*(_DWORD *)(v47 + 2120) - 1 == v43)
  {
    BOOL v55 = v53 < 16;
    if (v53 >= 16) {
      int v56 = v53 - 16;
    }
    else {
      int v56 = 0;
    }
    if (v55) {
      int v57 = v54;
    }
    else {
      int v57 = 0;
    }
    int v58 = v57 + v51;
    if (v52 <= 63) {
      unsigned int v59 = 0;
    }
    else {
      unsigned int v59 = (v52 - 1) & 0xFFFFFFC0;
    }
    signed int v96 = v59;
    int v100 = v48 - v59;
    int v60 = v58 + v56 - 8;
    if (v58 + v56 < 8) {
      int v60 = 0;
    }
    result[30] = v60;
    if (*(_DWORD *)(*(void *)(v42 + 16) + 2124) - 1 == v44)
    {
      int v58 = v49 - v56;
      result[30] = v49;
    }
  }
  else
  {
    if (!v43 || (v52 & 0x3F) != 0) {
      return result;
    }
    BOOL v61 = v53 < 16;
    if (v53 >= 16) {
      int v56 = v53 - 16;
    }
    else {
      int v56 = 0;
    }
    if (!v61) {
      int v54 = 0;
    }
    int v58 = v54 + v51;
    if (v52 >= 64) {
      int v62 = v52 - 64;
    }
    else {
      int v62 = 0;
    }
    signed int v96 = v62;
    if (v52 >= 64) {
      int v52 = 64;
    }
    int v100 = v52;
    int v63 = v49 - v56;
    if (*(_DWORD *)(v47 + 2124) - 1 == v44) {
      int v58 = v63;
    }
  }
  if (v58 >= 1)
  {
    uint64_t v64 = 0;
    uint64_t v65 = 8 * v50;
    unint64_t v87 = v58;
    uint64_t v88 = v56;
    int v89 = v58;
    do
    {
      if (v58 - (int)v64 >= 64) {
        uint64_t v66 = 64;
      }
      else {
        uint64_t v66 = (v58 - v64);
      }
      uint64_t v90 = v64;
      uint64_t v101 = v64 + v88;
      BOOL v67 = v64 + v88 == 0;
      if (v64 + v88) {
        int v68 = v64 + v88 - 8;
      }
      else {
        int v68 = 0;
      }
      int v69 = v66 + 8;
      if (v67) {
        int v69 = v66;
      }
      int v98 = v69;
      int v99 = v68;
      if (v100 >= 1)
      {
        uint64_t v70 = 0;
        BOOL v71 = v101 == 0;
        uint64_t v97 = ((int)v66 >> 3);
        uint64_t v92 = v97 - v71;
        uint64_t v91 = v65 * v71;
        do
        {
          if (v100 - (int)v70 >= 64) {
            uint64_t v72 = 64;
          }
          else {
            uint64_t v72 = (v100 - v70);
          }
          uint64_t v73 = v70 + v96;
          int v103 = v72 + v96 + v70;
          uint64_t v102 = *(void *)(v94 + 416);
          uint64_t v105 = *(void *)(v94 + 400);
          char v74 = *(unsigned char *)(v94 + 531);
          (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))v45 + 6))(v95, v73, v101, v72, v66, &a25);
          BOOL v75 = v103 < v93;
          if (v103 >= v93) {
            int v76 = v72;
          }
          else {
            int v76 = v72 + 8;
          }
          uint64_t v104 = (v73 + v102 * v101) << v74;
          unsigned int v77 = (int)v72 >> 3;
          if (v75) {
            uint64_t v78 = v77 + 1;
          }
          else {
            uint64_t v78 = v77;
          }
          sub_1D0CD7708(&STACK[0x470], v95, v73, v99, v76, v98);
          if ((int)v78 >= 2)
          {
            uint64_t v79 = v78 - 1;
            uint64_t v80 = v105 + v104 + 8;
            uint64_t v81 = &a25;
            int v82 = &STACK[0x3E0];
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v45 + 9))(v80, v50, v82, v81, v66);
              v81 += 16;
              ++v82;
              v80 += 8;
              --v79;
            }
            while (v79);
          }
          sub_1D0CD4CDC((int *)&STACK[0x470]);
          if ((int)v97 > (v101 == 0))
          {
            uint64_t v83 = &STACK[0x420] + (v101 == 0);
            uint64_t v84 = v105 + v91 + v104;
            int v86 = &a41 + 2 * (v101 == 0);
            uint64_t v85 = v92;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v45 + 10))(v84, v50, v83, v86, v72);
              v86 += 2;
              ++v83;
              v84 += v65;
              --v85;
            }
            while (v85);
          }
          uint64_t result = sub_1D0CD4CDC((int *)&STACK[0x470]);
          v70 += 64;
        }
        while (v70 < v100);
      }
      uint64_t v64 = v90 + 64;
      int v58 = v89;
    }
    while (v90 + 64 < v87);
  }
  return result;
}

void *sub_1D0CD7708(void *__dst, uint64_t a2, int a3, int a4, int a5, int a6)
{
  __dst[4608] = a2;
  *((_DWORD *)__dst + 9218) = a3;
  *((_DWORD *)__dst + 9219) = a4;
  *((_DWORD *)__dst + 9220) = a5;
  *((_DWORD *)__dst + 9221) = a6;
  *((_DWORD *)__dst + 9222) = 0;
  if (a6 >= 1)
  {
    uint64_t v6 = (char *)__dst;
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(v7 + 416);
    unsigned int v9 = (char *)(*(void *)(v7 + 400) + ((v8 * a4 + a3) << *(unsigned char *)(v7 + 531)));
    size_t v10 = a5;
    uint64_t v11 = a6;
    do
    {
      __dst = memcpy(v6, v9, v10);
      v9 += v8;
      v6 += v10;
      --v11;
    }
    while (v11);
  }
  return __dst;
}

uint64_t sub_1D0CD77A0(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37 = result;
  uint64_t v38 = *(void *)(a2 + 8);
  uint64_t v39 = *(void *)(a2 + 16);
  int v40 = *(_DWORD *)(v38 + 520);
  int v41 = *(_DWORD *)(v38 + 524);
  uint64_t v83 = v38;
  uint64_t v42 = *(void *)(v38 + 416);
  int v43 = *(unsigned __int8 *)(v39 + 2117);
  LOBYTE(v38) = *(unsigned char *)(v39 + 2113);
  int v44 = a3 << v38;
  int v45 = a4 << v38;
  int v46 = v45 - 16;
  int v82 = v40;
  if (*(_DWORD *)(v39 + 2120) - 1 == a3)
  {
    BOOL v47 = v45 < 16;
    if (v45 >= 16) {
      int v48 = v45 - 16;
    }
    else {
      int v48 = 0;
    }
    if (v47) {
      int v49 = v46;
    }
    else {
      int v49 = 0;
    }
    int v50 = v49 + v43;
    if (v44 <= 63) {
      unsigned int v51 = 0;
    }
    else {
      unsigned int v51 = (v44 - 1) & 0xFFFFFFC0;
    }
    signed int v84 = v51;
    int v88 = v40 - v51;
    int v52 = v50 + v48 - 8;
    if (v50 + v48 < 8) {
      int v52 = 0;
    }
    *(_DWORD *)(result + 120) = v52;
    if (*(_DWORD *)(*(void *)(a2 + 16) + 2124) - 1 == a4)
    {
      int v50 = v41 - v48;
      *(_DWORD *)(result + 120) = v41;
    }
  }
  else
  {
    if (!a3 || (v44 & 0x3F) != 0) {
      return result;
    }
    BOOL v53 = v45 < 16;
    if (v45 >= 16) {
      int v48 = v45 - 16;
    }
    else {
      int v48 = 0;
    }
    if (!v53) {
      int v46 = 0;
    }
    int v50 = v46 + v43;
    if (v44 >= 64) {
      int v54 = v44 - 64;
    }
    else {
      int v54 = 0;
    }
    signed int v84 = v54;
    if (v44 >= 64) {
      int v44 = 64;
    }
    int v88 = v44;
    int v55 = v41 - v48;
    if (*(_DWORD *)(v39 + 2124) - 1 == a4) {
      int v50 = v55;
    }
  }
  if (v50 >= 1)
  {
    uint64_t v56 = 0;
    uint64_t v73 = v48;
    uint64_t v57 = 8 * v42;
    unint64_t v74 = v50;
    uint64_t v81 = a2;
    int v75 = v50;
    do
    {
      uint64_t v76 = v56;
      if (v50 - (int)v56 >= 64) {
        uint64_t v58 = 64;
      }
      else {
        uint64_t v58 = (v50 - v56);
      }
      if (v88 >= 1)
      {
        uint64_t v59 = 0;
        uint64_t v87 = v56 + v73;
        BOOL v60 = v56 + v73 == 0;
        uint64_t v85 = ((int)v58 >> 3);
        int v86 = v56 + v73 == 0;
        uint64_t vars8 = v85 - v60;
        uint64_t v78 = &STACK[0x840] + v60;
        uint64_t vars0 = &a37 + 2 * v60;
        uint64_t v77 = v57 * v60;
        do
        {
          if (v88 - (int)v59 >= 64) {
            uint64_t v61 = 64;
          }
          else {
            uint64_t v61 = (v88 - v59);
          }
          uint64_t v62 = *(void *)(v83 + 416);
          uint64_t v90 = *(void *)(v83 + 400);
          char v63 = *(unsigned char *)(v83 + 531);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(v37 + 48))(a2, v59 + v84, v87, v61, v58, &a21);
          uint64_t v89 = (v59 + v84 + v62 * v87) << v63;
          LODWORD(v64) = (int)v61 >> 3;
          if ((int)v61 + v84 + (int)v59 >= v82) {
            uint64_t v64 = v64;
          }
          else {
            uint64_t v64 = (v64 + 1);
          }
          if ((int)v64 >= 2)
          {
            uint64_t v65 = v64 - 1;
            uint64_t v66 = v90 + v89 + 8;
            BOOL v67 = &a21;
            int v68 = &STACK[0x800];
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v37 + 72))(v66, v42, v68, v67, v58);
              v67 += 16;
              ++v68;
              v66 += 8;
              --v65;
            }
            while (v65);
          }
          if ((int)v85 > v86)
          {
            int v69 = v78;
            uint64_t v70 = v90 + v77 + v89;
            uint64_t v72 = vars0;
            uint64_t v71 = vars8;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v37 + 80))(v70, v42, v69, v72, v61);
              v72 += 2;
              ++v69;
              v70 += v57;
              --v71;
            }
            while (v71);
          }
          v59 += 64;
          a2 = v81;
        }
        while (v59 < v88);
      }
      uint64_t v56 = v76 + 64;
      int v50 = v75;
    }
    while (v76 + 64 < v74);
  }
  return result;
}

int *sub_1D0CD7AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t result = (int *)MEMORY[0x1F4188790](a1);
  uint64_t v27 = v26;
  uint64_t v28 = result;
  STACK[0x9418] = *MEMORY[0x1E4F143B8];
  uint64_t v66 = v29;
  uint64_t v30 = *(void *)(v29 + 8);
  int v64 = *(_DWORD *)(v30 + 520);
  uint64_t v31 = *(void *)(v30 + 416);
  int v32 = *v26;
  uint64_t v65 = v30;
  if (*v26 < *(_DWORD *)(v30 + 524))
  {
    v32 &= 0xFFFFFFF0;
    int *v26 = v32;
  }
  uint64_t v33 = result[30];
  if ((int)v33 < v32)
  {
    signed int v67 = (v64 - 1) & 0xFFFFFFC0;
    char v63 = v27;
    uint64_t v70 = 8 * v31;
    do
    {
      uint64_t v34 = *(void *)(v65 + 400) + ((*(void *)(v65 + 416) * (int)v33) << *(unsigned char *)(v65 + 531));
      int v35 = v32 - v33;
      if (v35 >= 64) {
        uint64_t v36 = 64;
      }
      else {
        uint64_t v36 = v35;
      }
      if (v33) {
        int v37 = v33 - 8;
      }
      else {
        int v37 = 0;
      }
      int v38 = v36 + 8;
      if (!v33) {
        int v38 = v36;
      }
      int v68 = v38;
      int v69 = v37;
      int v39 = (int)v36 >> 3;
      uint64_t vars0 = ((int)v36 >> 3);
      uint64_t v40 = 0;
      if (v67 >= 1)
      {
        do
        {
          int v41 = &a9;
          (*((void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *))v28 + 6))(v66, v40, v28[30], 64, v36, &a9);
          int vars8_4 = v40;
          sub_1D0CD7708(&STACK[0x3F0], v66, v40, v69, 72, v68);
          uint64_t v42 = 0;
          do
          {
            uint64_t v43 = v42 + 8;
            (*((void (**)(uint64_t, uint64_t, char *, char *, uint64_t))v28 + 9))(v42 + 8 + v34, v31, (char *)&STACK[0x360] + v42, v41, v36);
            v41 += 16;
            uint64_t v42 = v43;
          }
          while (v43 != 64);
          sub_1D0CD4CDC((int *)&STACK[0x3F0]);
          int v44 = v28[30];
          if (v39 > (v44 == 0))
          {
            BOOL v45 = v44 == 0;
            uint64_t v46 = vars0 - v45;
            BOOL v47 = &a25 + 2 * v45;
            int v48 = &STACK[0x3A0] + v45;
            uint64_t v49 = v34 + v70 * v45;
            do
            {
              (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v28 + 10))(v49, v31, v48, v47, 64);
              v47 += 2;
              ++v48;
              v49 += v70;
              --v46;
            }
            while (v46);
          }
          uint64_t result = sub_1D0CD4CDC((int *)&STACK[0x3F0]);
          v34 += 64;
          uint64_t v40 = (v40 + 64);
          int v39 = (int)v36 >> 3;
        }
        while ((int)v40 < v67);
        uint64_t v33 = v28[30];
      }
      int v50 = v64 - v40;
      if (v64 != v40)
      {
        (*((void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, char *))v28 + 6))(v66, v40, v33, (v64 - v40), v36, &a9);
        sub_1D0CD7708(&STACK[0x3F0], v66, v40, v69, v50, v68);
        uint64_t v51 = (v64 - v40);
        if (v50 >= 16)
        {
          uint64_t v52 = v34 + 8;
          uint64_t v53 = (v50 >> 3) - 1;
          int v54 = &a9;
          int v55 = &STACK[0x360];
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))v28 + 9))(v52, v31, v55, v54, v36);
            v54 += 16;
            ++v55;
            v52 += 8;
            --v53;
          }
          while (v53);
        }
        sub_1D0CD4CDC((int *)&STACK[0x3F0]);
        int v56 = v28[30];
        if ((int)vars0 > (v56 == 0))
        {
          BOOL v57 = v56 == 0;
          uint64_t v58 = vars0 - v57;
          uint64_t v59 = &a25 + 2 * v57;
          BOOL v60 = &STACK[0x3A0] + v57;
          uint64_t v61 = v34 + v70 * v57;
          do
          {
            (*((void (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))v28 + 10))(v61, v31, v60, v59, v51);
            v59 += 2;
            ++v60;
            v61 += v70;
            --v58;
          }
          while (v58);
        }
        uint64_t result = sub_1D0CD4CDC((int *)&STACK[0x3F0]);
        LODWORD(v33) = v28[30];
      }
      uint64_t v27 = v63;
      uint64_t v33 = (v33 + v36);
      v28[30] = v33;
      int v32 = *v63;
    }
    while ((int)v33 < *v63);
  }
  int v62 = *(_DWORD *)(v65 + 524);
  if (v62 >= (int)v33) {
    int v62 = v33;
  }
  *uint64_t v27 = v62;
  if (v28[30] < *(_DWORD *)(v65 + 524))
  {
    if (v62 <= 4) {
      int v62 = 4;
    }
    *uint64_t v27 = v62 - 4;
  }
  return result;
}

uint64_t sub_1D0CD7EC4(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char v25 = a3;
  uint64_t v26 = result;
  uint64_t v27 = *(void *)(a2 + 8);
  int v58 = *(_DWORD *)(v27 + 520);
  uint64_t v28 = *(void *)(v27 + 416);
  int v29 = *a3;
  uint64_t v59 = v27;
  if (*a3 < *(_DWORD *)(v27 + 524))
  {
    v29 &= 0xFFFFFFF0;
    *a3 = v29;
  }
  int v30 = *(_DWORD *)(result + 120);
  if (v30 < v29)
  {
    signed int v61 = (v58 - 1) & 0xFFFFFFC0;
    uint64_t v31 = 8 * v28;
    BOOL v57 = v25;
    do
    {
      uint64_t v32 = *(void *)(v59 + 400) + ((*(void *)(v59 + 416) * v30) << *(unsigned char *)(v59 + 531));
      int v33 = v29 - v30;
      if (v33 >= 64) {
        uint64_t v34 = 64;
      }
      else {
        uint64_t v34 = v33;
      }
      int v35 = (int)v34 >> 3;
      uint64_t vars0 = ((int)v34 >> 3);
      int v36 = 0;
      if (v61 >= 1)
      {
        do
        {
          int v37 = &a9;
          int vars8_4 = v36;
          (*(void (**)(uint64_t))(v26 + 48))(a2);
          uint64_t v38 = 0;
          do
          {
            uint64_t v39 = v38 + 8;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, uint64_t))(v26 + 72))(v38 + 8 + v32, v28, (char *)&STACK[0x740] + v38, v37, v34);
            v37 += 16;
            uint64_t v38 = v39;
          }
          while (v39 != 64);
          int v40 = *(_DWORD *)(v26 + 120);
          if (v35 > (v40 == 0))
          {
            BOOL v41 = v40 == 0;
            uint64_t v42 = vars0 - v41;
            uint64_t v43 = &a25 + 2 * v41;
            int v44 = &STACK[0x780] + v41;
            uint64_t v45 = v32 + v31 * v41;
            do
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, uint64_t))(v26 + 80))(v45, v28, v44, v43, 64);
              v43 += 2;
              ++v44;
              v45 += v31;
              --v42;
            }
            while (v42);
          }
          v32 += 64;
          int v36 = vars8_4 + 64;
          int v35 = (int)v34 >> 3;
        }
        while (vars8_4 + 64 < v61);
        int v30 = *(_DWORD *)(v26 + 120);
      }
      int v46 = v58 - v36;
      if (v58 != v36)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v26 + 48))(a2);
        unsigned int vars8_4a = v46;
        if (v46 >= 16)
        {
          uint64_t v47 = v32 + 8;
          uint64_t v48 = (vars8_4a >> 3) - 1;
          uint64_t v49 = &a9;
          int v50 = &STACK[0x740];
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, char *, uint64_t))(v26 + 72))(v47, v28, v50, v49, v34);
            v49 += 16;
            ++v50;
            v47 += 8;
            --v48;
          }
          while (v48);
        }
        int v30 = *(_DWORD *)(v26 + 120);
        if ((int)vars0 > (v30 == 0))
        {
          BOOL v51 = v30 == 0;
          uint64_t v52 = vars0 - v51;
          uint64_t v53 = &a25 + 2 * v51;
          int v54 = &STACK[0x780] + v51;
          uint64_t v55 = v32 + v31 * v51;
          do
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t *, void))(v26 + 80))(v55, v28, v54, v53, vars8_4a);
            v53 += 2;
            ++v54;
            v55 += v31;
            --v52;
          }
          while (v52);
          int v30 = *(_DWORD *)(v26 + 120);
        }
      }
      v30 += v34;
      *(_DWORD *)(v26 + 120) = v30;
      char v25 = v57;
      int v29 = *v57;
    }
    while (v30 < *v57);
  }
  int v56 = *(_DWORD *)(v59 + 524);
  if (v56 >= v30) {
    int v56 = v30;
  }
  int *v25 = v56;
  if (*(_DWORD *)(v26 + 120) < *(_DWORD *)(v59 + 524))
  {
    if (v56 <= 4) {
      int v56 = 4;
    }
    int *v25 = v56 - 4;
  }
  return result;
}

void sub_1D0CD81DC(uint64_t a1, uint64_t a2, char a3, int *a4)
{
  if (*(unsigned char *)(a2 + 531))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("unsupported sample type\n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "unsupported sample type\n");
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a2 + 520);
    int v6 = *(_DWORD *)(a2 + 524);
    int v7 = v6 >> 1;
    uint64_t v8 = *(void *)(a2 + 424);
    int v9 = *a4;
    if (v6 >> 1 >= *a4 >> 1) {
      int v7 = *a4 >> 1;
    }
    signed int v10 = 2 * (v7 & 0xFFFFFFF8);
    if (v10 <= 4) {
      signed int v10 = 4;
    }
    int v11 = v10 - 4;
    BOOL v12 = v9 < v6;
    if (v9 < v6) {
      int v13 = v11;
    }
    else {
      int v13 = 2 * v7;
    }
    if (v12) {
      unsigned int v14 = v7 & 0xFFFFFFF8;
    }
    else {
      unsigned int v14 = v7;
    }
    *a4 = v13;
    uint64_t v29 = *(int *)(a1 + 124);
    int v15 = a3;
    if (a3 >= 51) {
      int v15 = 51;
    }
    if (v15 <= 15) {
      int v15 = 15;
    }
    unsigned int v16 = v15 - 15;
    uint64_t v17 = byte_1D0DAE593[v16];
    uint64_t v18 = byte_1D0DAE5C4[v16];
    uint64_t v19 = *(void *)(a2 + 408);
    *(_DWORD *)(a1 + 124) = v14;
    if (v18) {
      BOOL v20 = v5 < 2;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20)
    {
      uint64_t v21 = 0;
      uint64_t v22 = v14 - v29;
      uint64_t v30 = v19 + v8 * v29;
      uint64_t v23 = v5 >> 1;
      uint64_t v24 = v19 + v8 * (v29 + 4);
      uint64_t v28 = v23;
      do
      {
        if ((v21 | 4) < v23) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 104))(v30 + 2 * (v21 | 4), v8, v17, v18, v22);
        }
        uint64_t v25 = v21 + 8;
        if (v21 + 8 < v23) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 104))(v30 + 2 * v25, v8, v17, v18, v22);
        }
        if (v29) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 112))(v30 + 2 * v21, v8, v17, v18, 8);
        }
        if ((int)v22 >= 5)
        {
          int v26 = 4;
          uint64_t v27 = v24;
          do
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 112))(v27, v8, v17, v18, 8);
            v26 += 4;
            v27 += 4 * v8;
          }
          while ((int)v22 > v26);
        }
        v24 += 16;
        uint64_t v21 = v25;
        uint64_t v23 = v28;
      }
      while (v25 < v28);
    }
  }
}

uint64_t sub_1D0CD840C(unsigned int a1, _OWORD *a2, uint64_t a3, double *a4)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  int v6 = byte_1D0D7FEBA[a1];
  int v7 = (char)v6;
  uint64_t v125 = 0;
  if (a1 >= 0x12)
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      int v15 = a2 + 8;
      uint64_t v8 = 15;
      uint64_t v9 = 14;
      uint64_t v10 = 13;
      uint64_t v11 = 12;
      uint64_t v12 = 11;
      uint64_t v13 = 10;
      uint64_t v14 = 9;
      goto LABEL_6;
    }
    int v29 = word_1D0D7FFE0[a1 - 11];
    uint64_t v30 = 2 * (char)v6;
    int v31 = ((2 * (char)v6) | 1) * v29 + 128;
    do
    {
      v116[v30++] = *((unsigned char *)a2 + (v31 >> 8) - 1);
      v31 += v29;
    }
    while (v30 != -1);
    HIBYTE(v115) = *((unsigned char *)a2 - 1);
    long long v117 = v112;
    long long v118 = v113;
    long long v119 = v114;
    long long v120 = v115;
    long long v25 = a2[8];
    long long v26 = a2[9];
    long long v27 = a2[10];
    long long v28 = a2[11];
  }
  else
  {
    if (((char)v6 & 0x80000000) == 0)
    {
      uint64_t v8 = 7;
      uint64_t v9 = 6;
      uint64_t v10 = 5;
      uint64_t v11 = 4;
      uint64_t v12 = 3;
      uint64_t v13 = 2;
      uint64_t v14 = 1;
      int v15 = a2;
LABEL_6:
      long long v16 = a2[v12];
      long long v17 = a2[v13];
      long long v18 = a2[v14];
      long long v117 = *v15;
      long long v118 = v18;
      long long v119 = v17;
      long long v120 = v16;
      long long v19 = a2[v10];
      long long v20 = a2[v9];
      long long v21 = a2[v8];
      long long v121 = a2[v11];
      long long v122 = v19;
      long long v123 = v20;
      long long v124 = v21;
      *(void *)&long long v112 = 8 * a3;
      *((void *)&v112 + 1) = 8;
      goto LABEL_15;
    }
    int v22 = word_1D0D7FFE0[a1 - 11];
    uint64_t v23 = 2 * (char)v6;
    int v24 = ((2 * (char)v6) | 1) * v22 + 128;
    do
    {
      v116[v23++] = *((unsigned char *)a2 + (v24 >> 8) + 127);
      v24 += v22;
    }
    while (v23 != -1);
    HIBYTE(v115) = *((unsigned char *)a2 - 1);
    long long v117 = v112;
    long long v118 = v113;
    long long v119 = v114;
    long long v120 = v115;
    long long v25 = *a2;
    long long v26 = a2[1];
    long long v27 = a2[2];
    long long v28 = a2[3];
  }
  long long v121 = v25;
  long long v122 = v26;
  long long v123 = v27;
  long long v124 = v28;
  *(void *)&long long v112 = 8 * a3;
  *((void *)&v112 + 1) = 8;
  if ((v6 & 0x80) != 0)
  {
    uint64_t v86 = *((void *)&v112 + (a1 > 0x11));
    int v111 = 8 * (char)v6;
    uint64_t v110 = *((void *)&v112 + (a1 < 0x12)) - 7 * v86;
    int v87 = 8;
    int v88 = (char)v6;
    while (1)
    {
      uint64_t v90 = (void *)&v120 + (v88 >> 8) + 1;
      int8x8_t v92 = (int8x8_t)v90[8];
      int8x8_t v91 = (int8x8_t)v90[9];
      uint64_t v93 = v88 | 0xFFFFFF00;
      int8x8_t v95 = (int8x8_t)v90[6];
      int8x8_t v94 = (int8x8_t)v90[7];
      int8x8_t v97 = (int8x8_t)v90[4];
      int8x8_t v96 = (int8x8_t)v90[5];
      int8x8_t v99 = (int8x8_t)v90[2];
      int8x8_t v98 = (int8x8_t)v90[3];
      int8x8_t v100 = (int8x8_t)v90[1];
      if (v93 <= 0xFFFFFFBF)
      {
        uint64_t v101 = *((void *)&v120 + ((uint64_t)v88 >> 8) + 1);
        if (v93 > 0xFFFFFF7F)
        {
          unsigned int v102 = v88 | 0xFFFFFF00;
        }
        else
        {
          int8x8_t v91 = vext_s8(v92, v91, 4uLL);
          int8x8_t v92 = vext_s8(v94, v92, 4uLL);
          int8x8_t v94 = vext_s8(v95, v94, 4uLL);
          int8x8_t v95 = vext_s8(v96, v95, 4uLL);
          int8x8_t v96 = vext_s8(v97, v96, 4uLL);
          int8x8_t v97 = vext_s8(v98, v97, 4uLL);
          int8x8_t v98 = vext_s8(v99, v98, 4uLL);
          int8x8_t v99 = vext_s8(v100, v99, 4uLL);
          unsigned int v102 = v93 + 128;
          int8x8_t v100 = vext_s8((int8x8_t)v101, v100, 4uLL);
          if (v93 > 0xFFFFFF3F)
          {
            uint64_t v93 = (v93 + 128);
            goto LABEL_58;
          }
          uint64_t v101 = vshld_n_s64(v101, 0x20uLL);
        }
        int8x8_t v91 = vext_s8(v92, v91, 6uLL);
        int8x8_t v92 = vext_s8(v94, v92, 6uLL);
        int8x8_t v94 = vext_s8(v95, v94, 6uLL);
        int8x8_t v95 = vext_s8(v96, v95, 6uLL);
        int8x8_t v96 = vext_s8(v97, v96, 6uLL);
        int8x8_t v97 = vext_s8(v98, v97, 6uLL);
        int8x8_t v98 = vext_s8(v99, v98, 6uLL);
        int8x8_t v99 = vext_s8(v100, v99, 6uLL);
        uint64_t v93 = v102 + 64;
        int8x8_t v100 = vext_s8((int8x8_t)v101, v100, 6uLL);
      }
LABEL_58:
      sub_1D0C5C5B8(v93, v7, a1 < 0x12, a3, a4, v100, v99);
      int v103 = (double *)((char *)a4 + v86);
      sub_1D0C5C5B8(v93, v7, a1 < 0x12, a3, v103, v99, v98);
      uint64_t v104 = (double *)((char *)v103 + v86);
      sub_1D0C5C5B8(v93, v7, a1 < 0x12, a3, v104, v98, v97);
      uint64_t v105 = (double *)((char *)v104 + v86);
      sub_1D0C5C5B8(v93, v7, a1 < 0x12, a3, v105, v97, v96);
      int v106 = (double *)((char *)v105 + v86);
      sub_1D0C5C5B8(v93, v7, a1 < 0x12, a3, v106, v96, v95);
      uint64_t v107 = (double *)((char *)v106 + v86);
      sub_1D0C5C5B8(v93, v7, a1 < 0x12, a3, v107, v95, v94);
      int v108 = (double *)((char *)v107 + v86);
      sub_1D0C5C5B8(v93, v7, a1 < 0x12, a3, v108, v94, v92);
      uint64_t v109 = (double *)((char *)v108 + v86);
      uint64_t result = sub_1D0C5C5B8(v93, v7, a1 < 0x12, a3, v109, v92, v91);
      v88 += v111;
      a4 = (double *)((char *)v109 + v110);
      if (!--v87) {
        return result;
      }
    }
  }
  int v6 = (char)v6;
LABEL_15:
  uint64_t v32 = *((void *)&v112 + (a1 > 0x11));
  uint64_t v33 = *((void *)&v112 + (a1 < 0x12)) - 7 * v32;
  int v34 = 8;
  int v35 = v6;
  do
  {
    int v37 = (char *)&v117 + 8 * (v35 >> 8);
    double v38 = *(double *)v37;
    double v39 = *((double *)v37 + 1);
    double v40 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)v37, *(int8x8_t *)&v39, 4uLL));
    double v41 = *((double *)v37 + 2);
    double v42 = *((double *)v37 + 3);
    double v43 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v39, *(int8x8_t *)&v41, 4uLL));
    double v44 = *((double *)v37 + 4);
    double v45 = *((double *)v37 + 5);
    double v46 = *((double *)v37 + 6);
    double v47 = *((double *)v37 + 7);
    double v48 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v41, *(int8x8_t *)&v42, 4uLL));
    double v49 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v42, *(int8x8_t *)&v44, 4uLL));
    double v50 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v44, *(int8x8_t *)&v45, 4uLL));
    double v51 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v46, 4uLL));
    double v52 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v47, 4uLL));
    double v53 = *((double *)v37 + 8);
    unint64_t v54 = *((unint64_t *)v37 + 9);
    double v55 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v47, *(int8x8_t *)&v53, 4uLL));
    double v56 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v53, (int8x8_t)v54, 4uLL));
    double v57 = COERCE_DOUBLE(vshrd_n_u64(v54, 0x20uLL));
    unsigned int v58 = v35;
    if (v35 < 0x80u)
    {
      int8x8_t v59 = (int8x8_t)v54;
    }
    else
    {
      double v53 = v56;
      double v47 = v55;
      double v46 = v52;
      double v45 = v51;
      double v44 = v50;
      double v42 = v49;
      double v41 = v48;
      double v39 = v43;
      double v38 = v40;
      *(double *)&int8x8_t v59 = v57;
    }
    if (v35 >= 0x80u) {
      unsigned int v58 = v35 - 128;
    }
    double v60 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v38, *(int8x8_t *)&v39, 2uLL));
    double v61 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v39, *(int8x8_t *)&v41, 2uLL));
    double v62 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v41, *(int8x8_t *)&v42, 2uLL));
    double v63 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v42, *(int8x8_t *)&v44, 2uLL));
    double v64 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v44, *(int8x8_t *)&v45, 2uLL));
    double v65 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v45, *(int8x8_t *)&v46, 2uLL));
    double v66 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v46, *(int8x8_t *)&v47, 2uLL));
    double v67 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v47, *(int8x8_t *)&v53, 2uLL));
    double v68 = COERCE_DOUBLE(vext_s8(*(int8x8_t *)&v53, v59, 2uLL));
    if (v58 >= 0x40) {
      *(double *)&int8x8_t v69 = v68;
    }
    else {
      *(double *)&int8x8_t v69 = v53;
    }
    if (v58 >= 0x40) {
      *(double *)&int8x8_t v70 = v67;
    }
    else {
      *(double *)&int8x8_t v70 = v47;
    }
    if (v58 >= 0x40) {
      *(double *)&int8x8_t v71 = v66;
    }
    else {
      *(double *)&int8x8_t v71 = v46;
    }
    if (v58 >= 0x40) {
      *(double *)&int8x8_t v72 = v65;
    }
    else {
      *(double *)&int8x8_t v72 = v45;
    }
    if (v58 >= 0x40) {
      *(double *)&int8x8_t v73 = v64;
    }
    else {
      *(double *)&int8x8_t v73 = v44;
    }
    if (v58 >= 0x40) {
      *(double *)&int8x8_t v74 = v63;
    }
    else {
      *(double *)&int8x8_t v74 = v42;
    }
    if (v58 >= 0x40) {
      *(double *)&int8x8_t v75 = v62;
    }
    else {
      *(double *)&int8x8_t v75 = v41;
    }
    if (v58 >= 0x40) {
      *(double *)&int8x8_t v76 = v61;
    }
    else {
      *(double *)&int8x8_t v76 = v39;
    }
    if (v58 < 0x40)
    {
      uint64_t v77 = v58;
    }
    else
    {
      double v38 = v60;
      uint64_t v77 = v58 - 64;
    }
    sub_1D0C59B38(v77, v6, a1 < 0x12, a3, a4, *(int8x8_t *)&v38, v76);
    uint64_t v78 = (double *)((char *)a4 + v32);
    sub_1D0C59B38(v77, v6, a1 < 0x12, a3, v78, v76, v75);
    uint64_t v79 = (double *)((char *)v78 + v32);
    sub_1D0C59B38(v77, v6, a1 < 0x12, a3, v79, v75, v74);
    uint64_t v80 = (double *)((char *)v79 + v32);
    sub_1D0C59B38(v77, v6, a1 < 0x12, a3, v80, v74, v73);
    uint64_t v81 = (double *)((char *)v80 + v32);
    sub_1D0C59B38(v77, v6, a1 < 0x12, a3, v81, v73, v72);
    int v82 = (double *)((char *)v81 + v32);
    sub_1D0C59B38(v77, v6, a1 < 0x12, a3, v82, v72, v71);
    uint64_t v83 = (double *)((char *)v82 + v32);
    sub_1D0C59B38(v77, v6, a1 < 0x12, a3, v83, v71, v70);
    signed int v84 = (double *)((char *)v83 + v32);
    uint64_t result = sub_1D0C59B38(v77, v6, a1 < 0x12, a3, v84, v70, v69);
    v35 += 8 * v6;
    a4 = (double *)((char *)v84 + v33);
    --v34;
  }
  while (v34);
  return result;
}

void sub_1D0CD8AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4 = (int16x8_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)a2), *(uint8x16_t *)a2), *(uint8x16_t *)(a2 + 16)), *(uint8x8_t *)(a2 + 16)), *(uint8x16_t *)(a2 + 32)), *(uint8x8_t *)(a2 + 32)), *(uint8x16_t *)(a2 + 48)),
                                    *(uint8x8_t *)(a2 + 48)),
                                  *(uint8x16_t *)(a2 + 128)),
                                *(uint8x8_t *)(a2 + 128)),
                              *(uint8x16_t *)(a2 + 144)),
                            *(uint8x8_t *)(a2 + 144)),
                          *(uint8x16_t *)(a2 + 160)),
                        *(uint8x8_t *)(a2 + 160)),
                      *(uint8x16_t *)(a2 + 176)),
                    *(uint8x8_t *)(a2 + 176));
  v4.i64[0] = vpaddq_s16(v4, v4).u64[0];
  *(int16x4_t *)v4.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vpadd_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v4.i8);
  v5.i64[1] = v5.i64[0];
  uint8x16_t v6 = vqrshrn_high_n_u16(vqrshrn_n_u16(v5, 7uLL), v5, 7uLL);
  int v7 = a4 + 2;
  int v8 = 64;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *int v7 = v6;
    v7[1] = v6;
    int v7 = (uint8x16_t *)((char *)v7 + a3);
    --v8;
  }
  while (v8);
}

int8x16_t sub_1D0CD8B5C(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  long long v6 = a2[2];
  long long v7 = a2[3];
  v24[0] = *a2;
  v24[1] = v5;
  v24[2] = v6;
  v24[3] = v7;
  do
  {
    int8x8_t v8 = *(int8x8_t *)((char *)v24 + v4);
    int8x16_t v9 = vdupq_lane_s8(v8, 0);
    int8x16_t v10 = vdupq_lane_s8(v8, 1);
    int8x16_t v11 = vdupq_lane_s8(v8, 2);
    int8x16_t v12 = vdupq_lane_s8(v8, 3);
    int8x16_t v13 = vdupq_lane_s8(v8, 4);
    int8x16_t v14 = vdupq_lane_s8(v8, 5);
    int8x16_t v15 = vdupq_lane_s8(v8, 6);
    int8x16_t result = vdupq_lane_s8(v8, 7);
    *a4 = v9;
    a4[1] = v9;
    a4[2] = v9;
    a4[3] = v9;
    long long v17 = (int8x16_t *)((char *)a4 + a3);
    *long long v17 = v10;
    v17[1] = v10;
    v17[2] = v10;
    v17[3] = v10;
    long long v18 = (int8x16_t *)((char *)a4 + a3 + a3);
    *long long v18 = v11;
    v18[1] = v11;
    v18[2] = v11;
    v18[3] = v11;
    long long v19 = (int8x16_t *)((char *)v18 + a3);
    *long long v19 = v12;
    v19[1] = v12;
    v19[2] = v12;
    v19[3] = v12;
    long long v20 = (int8x16_t *)((char *)v19 + a3);
    *long long v20 = v13;
    v20[1] = v13;
    v20[2] = v13;
    v20[3] = v13;
    long long v21 = (int8x16_t *)((char *)v20 + a3);
    int8x16_t *v21 = v14;
    v21[1] = v14;
    v21[2] = v14;
    v21[3] = v14;
    int v22 = (int8x16_t *)((char *)v21 + a3);
    int8x16_t *v22 = v15;
    v22[1] = v15;
    v22[2] = v15;
    v22[3] = v15;
    uint64_t v23 = (int8x16_t *)((char *)v22 + a3);
    *uint64_t v23 = result;
    v23[1] = result;
    v23[2] = result;
    v23[3] = result;
    a4 = (int8x16_t *)((char *)v23 + a3);
    v4 += 8;
  }
  while (v4 != 64);
  return result;
}

void sub_1D0CD8C54(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[8];
  long long v5 = a2[9];
  long long v6 = a2[10];
  long long v7 = a2[11];
  int8x8_t v8 = (_OWORD *)(a4 + 32);
  int v9 = 64;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *int8x8_t v8 = v6;
    v8[1] = v7;
    int8x8_t v8 = (_OWORD *)((char *)v8 + a3);
    --v9;
  }
  while (v9);
}

_OWORD *sub_1D0CD8C7C(uint64_t a1, uint8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  v81[0] = xmmword_1D0D7F270;
  v81[1] = xmmword_1D0D7F280;
  v81[2] = xmmword_1D0D7F290;
  v81[3] = xmmword_1D0D7F2A0;
  v81[4] = xmmword_1D0D7F2B0;
  v81[5] = xmmword_1D0D7F2C0;
  v81[6] = xmmword_1D0D7F2D0;
  v81[7] = xmmword_1D0D7F2E0;
  uint8x16_t v5 = a2[1];
  uint8x16_t v6 = a2[2];
  uint8x16_t v7 = a2[3];
  uint8x16_t v8 = a2[8];
  uint8x16_t v9 = a2[9];
  uint8x16_t v10 = a2[10];
  uint8x16_t v11 = a2[11];
  v80[0] = *a2;
  v80[1] = v5;
  v80[2] = v6;
  v80[3] = v7;
  int16x8_t v72 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8);
  i8 = a2[12].i8;
  uint8x8_t v13 = (uint8x8_t)vld1_dup_s8(i8);
  int8x16_t v14 = a2[4].i8;
  *(int8x8_t *)v5.i8 = vld1_dup_s8(v14);
  int16x8_t v77 = (int16x8_t)vmull_u8((uint8x8_t)0x807060504030201, v13);
  int16x8_t v78 = (int16x8_t)vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, v13);
  int16x8_t v76 = (int16x8_t)vmull_u8((uint8x8_t)0x1817161514131211, v13);
  int16x8_t v75 = (int16x8_t)vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, v13);
  int16x8_t v74 = (int16x8_t)vmull_u8((uint8x8_t)0x2827262524232221, v13);
  int16x8_t v73 = (int16x8_t)vmull_u8((uint8x8_t)0x302F2E2D2C2B2A29, v13);
  int16x8_t v71 = (int16x8_t)vmull_u8((uint8x8_t)0x403F3E3D3C3B3A39, v13);
  v79[0] = vmull_u8((uint8x8_t)0x807060504030201, *(uint8x8_t *)v5.i8);
  v79[1] = vmull_u8((uint8x8_t)0x100F0E0D0C0B0A09, *(uint8x8_t *)v5.i8);
  v79[2] = vmull_u8((uint8x8_t)0x1817161514131211, *(uint8x8_t *)v5.i8);
  v79[3] = vmull_u8((uint8x8_t)0x201F1E1D1C1B1A19, *(uint8x8_t *)v5.i8);
  v79[4] = vmull_u8((uint8x8_t)0x2827262524232221, *(uint8x8_t *)v5.i8);
  v79[5] = vmull_u8((uint8x8_t)0x302F2E2D2C2B2A29, *(uint8x8_t *)v5.i8);
  v79[6] = vmull_u8((uint8x8_t)0x3837363534333231, *(uint8x8_t *)v5.i8);
  v79[7] = vmull_u8((uint8x8_t)0x403F3E3D3C3B3A39, *(uint8x8_t *)v5.i8);
  uint64_t v15 = 4 * a3;
  uint64_t v16 = a3 + 48;
  uint64_t v17 = 2 * a3 + 48;
  uint64_t v18 = v17 + a3;
  uint64_t v19 = 5 * a3;
  uint64_t v20 = 6 * a3;
  uint64_t v21 = 7 * a3;
  int8x16_t result = v79;
  int16x8_t v23 = (int16x8_t)vmovl_high_u8(v8);
  int16x8_t v24 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v8.i8);
  int16x8_t v25 = (int16x8_t)vmovl_high_u8(v9);
  int16x8_t v26 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
  int16x8_t v27 = (int16x8_t)vmovl_high_u8(v10);
  int16x8_t v28 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
  int16x8_t v30 = (int16x8_t)vmull_u8((uint8x8_t)0x3837363534333231, v13);
  int16x8_t v29 = (int16x8_t)vmovl_high_u8(v11);
  do
  {
    int16x8_t v31 = (int16x8_t)v79[v4];
    int16x8_t v32 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 0);
    int16x8_t v33 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 1);
    int16x8_t v34 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 2);
    int16x8_t v35 = vdupq_lane_s16(*(int16x4_t *)v31.i8, 3);
    int16x8_t v36 = (int16x8_t)v81[v4];
    uint8x8_t v37 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)((char *)v80 + 8 * v4), 0);
    int8x8_t v38 = *(int8x8_t *)((char *)v80 + 8 * v4);
    int8x16_t v39 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v32, v77), v37, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 0), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v32, v78), v37, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 0), 7uLL);
    uint8x8_t v40 = (uint8x8_t)vdup_lane_s8(v38, 1);
    int16x8_t v41 = (int16x8_t)vmovl_u8(v37);
    int16x8_t v42 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v33, v77), v40, (uint8x8_t)0x38393A3B3C3D3E3FLL);
    int16x8_t v43 = (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v33, v78), v40, (uint8x8_t)0x3031323334353637);
    int16x8_t v44 = (int16x8_t)vmovl_u8(v40);
    int8x16_t v45 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16(v42, v24, *(int16x4_t *)v36.i8, 1), 7uLL), vmlaq_lane_s16(v43, v23, *(int16x4_t *)v36.i8, 1), 7uLL);
    uint8x8_t v46 = (uint8x8_t)vdup_lane_s8(v38, 2);
    int8x16_t v47 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v34, v77), v46, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 2), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v34, v78), v46, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 2), 7uLL);
    uint8x8_t v48 = (uint8x8_t)vdup_lane_s8(v38, 3);
    int16x8_t v49 = (int16x8_t)vmovl_u8(v46);
    int16x8_t v50 = (int16x8_t)vmovl_u8(v48);
    *a4 = v39;
    double v51 = (int8x16_t *)((char *)a4 + v16);
    v51[-3] = v45;
    double v52 = (int8x16_t *)((char *)a4 + v17);
    v52[-3] = v47;
    double v53 = (int8x16_t *)((char *)a4 + v18);
    v53[-3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v35, v77), v48, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, *(int16x4_t *)v36.i8, 3), 7uLL), vmlaq_lane_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v35, v78), v48, (uint8x8_t)0x3031323334353637), v23, *(int16x4_t *)v36.i8, 3), 7uLL);
    a4[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v76), v26, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1D0D7F290, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v75), v25, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1D0D7F2A0, v41), 7uLL);
    v51[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v76), v26, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1D0D7F290, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v75), v25, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1D0D7F2A0, v44), 7uLL);
    v52[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v76), v26, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1D0D7F290, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v75), v25, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1D0D7F2A0, v49), 7uLL);
    v53[-2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v76), v26, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1D0D7F290, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v75), v25, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1D0D7F2A0, v50), 7uLL);
    a4[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v74), v28, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1D0D7F2B0, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v73), v27, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1D0D7F2C0, v41), 7uLL);
    v51[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v74), v28, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1D0D7F2B0, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v73), v27, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1D0D7F2C0, v44), 7uLL);
    v52[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v74), v28, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1D0D7F2B0, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v73), v27, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1D0D7F2C0, v49), 7uLL);
    v53[-1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v74), v28, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1D0D7F2B0, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v73), v27, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1D0D7F2C0, v50), 7uLL);
    a4[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v30), v72, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1D0D7F2D0, v41), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v32, v71), v29, *(int16x4_t *)v36.i8, 0), (int16x8_t)xmmword_1D0D7F2E0, v41), 7uLL);
    int8x16_t *v51 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v30), v72, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1D0D7F2D0, v44), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v33, v71), v29, *(int16x4_t *)v36.i8, 1), (int16x8_t)xmmword_1D0D7F2E0, v44), 7uLL);
    int8x16_t *v52 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v30), v72, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1D0D7F2D0, v49), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v34, v71), v29, *(int16x4_t *)v36.i8, 2), (int16x8_t)xmmword_1D0D7F2E0, v49), 7uLL);
    *double v53 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v30), v72, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1D0D7F2D0, v50), 7uLL), vmlaq_s16(vmlaq_lane_s16(vaddq_s16(v35, v71), v29, *(int16x4_t *)v36.i8, 3), (int16x8_t)xmmword_1D0D7F2E0, v50), 7uLL);
    unint64_t v54 = (int8x16_t *)((char *)a4 + v15);
    int16x8_t v55 = vdupq_laneq_s16(v31, 4);
    int16x8_t v56 = vdupq_laneq_s16(v31, 5);
    int16x8_t v57 = vdupq_laneq_s16(v31, 6);
    int16x8_t v58 = vdupq_laneq_s16(v31, 7);
    uint8x8_t v59 = (uint8x8_t)vdup_lane_s8(v38, 4);
    uint8x8_t v60 = (uint8x8_t)vdup_lane_s8(v38, 5);
    int8x16_t v61 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v55, v77), v59, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 4), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v55, v78), v59, (uint8x8_t)0x3031323334353637), v23, v36, 4), 7uLL);
    *(int8x8_t *)v44.i8 = vdup_lane_s8(v38, 6);
    int8x16_t v62 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v57, v77), *(uint8x8_t *)v44.i8, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 6), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v57, v78), *(uint8x8_t *)v44.i8, (uint8x8_t)0x3031323334353637), v23, v36, 6), 7uLL);
    int16x8_t v63 = (int16x8_t)vmovl_u8(v59);
    int16x8_t v64 = (int16x8_t)vmovl_u8(v60);
    uint8x8_t v65 = (uint8x8_t)vdup_lane_s8(v38, 7);
    int16x8_t v66 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v44.i8);
    int16x8_t v67 = (int16x8_t)vmovl_u8(v65);
    *unint64_t v54 = v61;
    double v68 = (int8x16_t *)((char *)a4 + v19);
    *double v68 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v56, v77), v60, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 5), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v56, v78), v60, (uint8x8_t)0x3031323334353637), v23, v36, 5), 7uLL);
    int8x8_t v69 = (int8x16_t *)((char *)a4 + v20);
    *int8x8_t v69 = v62;
    int8x8_t v70 = (int8x16_t *)((char *)a4 + v21);
    *int8x8_t v70 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v58, v77), v65, (uint8x8_t)0x38393A3B3C3D3E3FLL), v24, v36, 7), 7uLL), vmlaq_laneq_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16(v58, v78), v65, (uint8x8_t)0x3031323334353637), v23, v36, 7), 7uLL);
    v54[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v76), v26, v36, 4), (int16x8_t)xmmword_1D0D7F290, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v75), v25, v36, 4), (int16x8_t)xmmword_1D0D7F2A0, v63), 7uLL);
    v68[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v76), v26, v36, 5), (int16x8_t)xmmword_1D0D7F290, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v75), v25, v36, 5), (int16x8_t)xmmword_1D0D7F2A0, v64), 7uLL);
    v69[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v76), v26, v36, 6), (int16x8_t)xmmword_1D0D7F290, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v75), v25, v36, 6), (int16x8_t)xmmword_1D0D7F2A0, v66), 7uLL);
    v70[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v76), v26, v36, 7), (int16x8_t)xmmword_1D0D7F290, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v75), v25, v36, 7), (int16x8_t)xmmword_1D0D7F2A0, v67), 7uLL);
    v54[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v74), v28, v36, 4), (int16x8_t)xmmword_1D0D7F2B0, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v73), v27, v36, 4), (int16x8_t)xmmword_1D0D7F2C0, v63), 7uLL);
    v68[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v74), v28, v36, 5), (int16x8_t)xmmword_1D0D7F2B0, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v73), v27, v36, 5), (int16x8_t)xmmword_1D0D7F2C0, v64), 7uLL);
    v69[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v74), v28, v36, 6), (int16x8_t)xmmword_1D0D7F2B0, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v73), v27, v36, 6), (int16x8_t)xmmword_1D0D7F2C0, v66), 7uLL);
    v70[2] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v74), v28, v36, 7), (int16x8_t)xmmword_1D0D7F2B0, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v73), v27, v36, 7), (int16x8_t)xmmword_1D0D7F2C0, v67), 7uLL);
    v54[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v30), v72, v36, 4), (int16x8_t)xmmword_1D0D7F2D0, v63), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v55, v71), v29, v36, 4), (int16x8_t)xmmword_1D0D7F2E0, v63), 7uLL);
    v68[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v30), v72, v36, 5), (int16x8_t)xmmword_1D0D7F2D0, v64), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v56, v71), v29, v36, 5), (int16x8_t)xmmword_1D0D7F2E0, v64), 7uLL);
    v69[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v30), v72, v36, 6), (int16x8_t)xmmword_1D0D7F2D0, v66), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v57, v71), v29, v36, 6), (int16x8_t)xmmword_1D0D7F2E0, v66), 7uLL);
    v70[3] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v30), v72, v36, 7), (int16x8_t)xmmword_1D0D7F2D0, v67), 7uLL), vmlaq_s16(vmlaq_laneq_s16(vaddq_s16(v58, v71), v29, v36, 7), (int16x8_t)xmmword_1D0D7F2E0, v67), 7uLL);
    ++v4;
    a4 = (int8x16_t *)((char *)a4 + v15 + v15);
  }
  while (v4 != 8);
  return result;
}

void sub_1D0CD945C(int8x16_t *a1, uint64_t a2)
{
  unsigned int v2 = a1[-1].u8[15];
  unsigned int v3 = a1[3].u8[15];
  int v4 = v3 + v2 - 2 * a1[1].u8[15];
  if (v4 < 0) {
    int v4 = 2 * a1[1].u8[15] - (v3 + v2);
  }
  if (v4 > 7) {
    goto LABEL_7;
  }
  unsigned int v5 = a1[7].u8[15];
  int v6 = v5 + v2 - 2 * a1[5].u8[15];
  if (v6 < 0) {
    int v6 = 2 * a1[5].u8[15] - (v5 + v2);
  }
  if (v6 < 8)
  {
    unint64_t v7 = 0;
    uint8x8_t v8 = (uint8x8_t)vdup_n_s8(v2);
    *(unsigned char *)(a2 - 1) = v2;
    int16x8_t v9 = (int16x8_t)vmovl_u8(v8);
    int16x8_t v10 = (int16x8_t)vsubl_u8((uint8x8_t)vdup_n_s8(v5), v8);
    int16x8_t v11 = (int16x8_t)vsubl_u8((uint8x8_t)vdup_n_s8(v3), v8);
    int16x8_t v12 = vmulq_s16(v10, (int16x8_t)xmmword_1D0D7F2F0);
    int16x8_t v13 = vmulq_s16(v11, (int16x8_t)xmmword_1D0D7F2F0);
    int16x8_t v14 = vshlq_n_s16(v10, 3uLL);
    int16x8_t v15 = vshlq_n_s16(v11, 3uLL);
    do
    {
      uint64_t v16 = (int8x8_t *)(a2 + v7);
      v16[8] = vqmovun_s16(vrsraq_n_s16(v9, v12, 6uLL));
      *uint64_t v16 = vqmovun_s16(vrsraq_n_s16(v9, v13, 6uLL));
      int16x8_t v12 = vaddq_s16(v12, v14);
      int16x8_t v13 = vaddq_s16(v13, v15);
      BOOL v17 = v7 >= 0x38;
      v7 += 8;
    }
    while (!v17);
  }
  else
  {
LABEL_7:
    sub_1D0C5F8FC(a1, a2);
  }
}

uint64_t sub_1D0CD951C(unsigned int a1, __n128 *a2, uint64_t a3, double *a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  int v9 = byte_1D0D7FEBA[a1];
  int v10 = byte_1D0D7FEBA[a1];
  if (a1 >= 0x12)
  {
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v18 = a2 + 8;
      uint64_t v11 = 15;
      uint64_t v12 = 14;
      uint64_t v13 = 13;
      uint64_t v14 = 12;
      uint64_t v15 = 11;
      uint64_t v16 = 10;
      uint64_t v17 = 9;
      goto LABEL_6;
    }
    if (v10 != 255)
    {
      int v29 = word_1D0D7FFE0[a1 - 11];
      int v30 = v29 + v29 * v9 + 128;
      uint64_t v31 = byte_1D0D7FEBA[a1];
      do
      {
        v90[v31] = a2->n128_u16[(v30 >> 8) - 1];
        v30 += v29;
        ++v31;
      }
      while (v31 != -1);
      a7 = v86;
      a6 = v87;
      a5 = v88;
    }
    v89.n128_u16[7] = a2[-1].n128_u16[7];
    __n128 v91 = a7;
    __n128 v92 = a6;
    __n128 v93 = a5;
    __n128 v94 = v89;
    __n128 v32 = a2[8];
    __n128 v33 = a2[9];
    __n128 v34 = a2[10];
    __n128 v35 = a2[11];
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v11 = 7;
      uint64_t v12 = 6;
      uint64_t v13 = 5;
      uint64_t v14 = 4;
      uint64_t v15 = 3;
      uint64_t v16 = 2;
      uint64_t v17 = 1;
      uint64_t v18 = a2;
LABEL_6:
      __n128 v19 = a2[v15];
      __n128 v20 = a2[v16];
      __n128 v21 = a2[v17];
      __n128 v22 = a2[v14];
      __n128 v91 = *v18;
      __n128 v92 = v21;
      __n128 v23 = a2[v13];
      __n128 v24 = a2[v12];
      __n128 v93 = v20;
      __n128 v94 = v19;
      __n128 v25 = a2[v11];
      __n128 v95 = v22;
      __n128 v96 = v23;
      __n128 v97 = v24;
      __n128 v98 = v25;
      int v9 = v10;
      v86.n128_u64[0] = 4 * a3;
      v86.n128_u64[1] = 8;
      goto LABEL_18;
    }
    if (v9 != -1)
    {
      int v26 = word_1D0D7FFE0[a1 - 11];
      int v27 = v26 + v26 * v9 + 128;
      uint64_t v28 = byte_1D0D7FEBA[a1];
      do
      {
        v90[v28] = a2[7].n128_u16[(v27 >> 8) + 7];
        v27 += v26;
        ++v28;
      }
      while (v28 != -1);
      a7 = v86;
      a6 = v87;
      a5 = v88;
    }
    v89.n128_u16[7] = a2[-1].n128_u16[7];
    __n128 v91 = a7;
    __n128 v92 = a6;
    __n128 v93 = a5;
    __n128 v94 = v89;
    __n128 v32 = *a2;
    __n128 v33 = a2[1];
    __n128 v34 = a2[2];
    __n128 v35 = a2[3];
  }
  __n128 v95 = v32;
  __n128 v96 = v33;
  __n128 v97 = v34;
  __n128 v98 = v35;
  v86.n128_u64[0] = 4 * a3;
  v86.n128_u64[1] = 8;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_18:
    unint64_t v36 = v86.n128_u64[a1 > 0x11];
    uint64_t v37 = v86.n128_u64[a1 < 0x12] - 7 * v36;
    int v38 = 8;
    int v39 = v9;
    do
    {
      uint64_t v40 = v39 & 0x7F;
      uint64_t v41 = (uint64_t)v39 >> 7;
      int16x8_t v42 = (int8x8_t *)&v91.n128_u64[v39 >> 7];
      int8x8_t v43 = *v42;
      int8x8_t v44 = v42[1];
      int8x8_t v46 = v42[2];
      int8x8_t v45 = v42[3];
      int8x8_t v48 = v42[4];
      int8x8_t v47 = v42[5];
      int8x8_t v50 = v42[6];
      int8x8_t v49 = v42[7];
      int8x8_t v51 = v42[8];
      if (v40 >= 0x40)
      {
        int8x8_t v43 = vext_s8(v43, v44, 4uLL);
        int8x8_t v44 = vext_s8(v44, v46, 4uLL);
        int8x8_t v46 = vext_s8(v46, v45, 4uLL);
        int8x8_t v45 = vext_s8(v45, v48, 4uLL);
        int8x8_t v48 = vext_s8(v48, v47, 4uLL);
        int8x8_t v47 = vext_s8(v47, v50, 4uLL);
        int8x8_t v50 = vext_s8(v50, v49, 4uLL);
        int8x8_t v49 = vext_s8(v49, v51, 4uLL);
        int8x8_t v51 = vext_s8(v51, *(int8x8_t *)&v95.n128_i8[8 * v41 + 8], 4uLL);
        uint64_t v40 = (v40 - 64);
      }
      if (v40 >= 0x20)
      {
        int8x8_t v43 = vext_s8(v43, v44, 2uLL);
        int8x8_t v44 = vext_s8(v44, v46, 2uLL);
        int8x8_t v46 = vext_s8(v46, v45, 2uLL);
        int8x8_t v45 = vext_s8(v45, v48, 2uLL);
        int8x8_t v48 = vext_s8(v48, v47, 2uLL);
        int8x8_t v47 = vext_s8(v47, v50, 2uLL);
        int8x8_t v50 = vext_s8(v50, v49, 2uLL);
        int8x8_t v49 = vext_s8(v49, v51, 2uLL);
        int8x8_t v51 = vext_s8(v51, *(int8x8_t *)&v95.n128_i8[8 * v41 + 8], 2uLL);
        uint64_t v40 = (v40 - 32);
      }
      BOOL v52 = a1 < 0x12;
      sub_1D0C5984C(v40, v9, v52, a3, a4, v43, v44);
      double v53 = (double *)((char *)a4 + v36);
      sub_1D0C5984C(v40, v9, v52, a3, v53, v44, v46);
      unint64_t v54 = (double *)((char *)v53 + v36);
      sub_1D0C5984C(v40, v9, v52, a3, v54, v46, v45);
      int16x8_t v55 = (double *)((char *)v54 + v36);
      sub_1D0C5984C(v40, v9, v52, a3, v55, v45, v48);
      int16x8_t v56 = (double *)((char *)v55 + v36);
      sub_1D0C5984C(v40, v9, v52, a3, v56, v48, v47);
      int16x8_t v57 = (double *)((char *)v56 + v36);
      sub_1D0C5984C(v40, v9, v52, a3, v57, v47, v50);
      int16x8_t v58 = (double *)((char *)v57 + v36);
      sub_1D0C5984C(v40, v9, v52, a3, v58, v50, v49);
      uint8x8_t v59 = (double *)((char *)v58 + v36);
      uint64_t result = sub_1D0C5984C(v40, v9, v52, a3, v59, v49, v51);
      v39 += 4 * v9;
      a4 = (double *)((char *)v59 + v37);
      --v38;
    }
    while (v38);
    return result;
  }
  unint64_t v61 = v86.n128_u64[a1 > 0x11];
  uint64_t v62 = v86.n128_u64[a1 < 0x12] - 7 * v61;
  int v63 = 8;
  int v64 = v9;
  do
  {
    uint8x8_t v65 = &v94.n128_u64[(v64 >> 7) + 1];
    int8x8_t v67 = (int8x8_t)v65[8];
    int8x8_t v66 = (int8x8_t)v65[9];
    uint64_t v68 = (uint64_t)v64 >> 7;
    uint64_t v69 = v64 | 0xFFFFFF80;
    int8x8_t v71 = (int8x8_t)v65[6];
    int8x8_t v70 = (int8x8_t)v65[7];
    int8x8_t v73 = (int8x8_t)v65[4];
    int8x8_t v72 = (int8x8_t)v65[5];
    int8x8_t v75 = (int8x8_t)v65[2];
    int8x8_t v74 = (int8x8_t)v65[3];
    int8x8_t v76 = (int8x8_t)v65[1];
    if (v69 <= 0xFFFFFFBF)
    {
      int8x8_t v66 = vext_s8(v67, v66, 4uLL);
      int8x8_t v67 = vext_s8(v70, v67, 4uLL);
      int8x8_t v70 = vext_s8(v71, v70, 4uLL);
      int8x8_t v71 = vext_s8(v72, v71, 4uLL);
      int8x8_t v72 = vext_s8(v73, v72, 4uLL);
      int8x8_t v73 = vext_s8(v74, v73, 4uLL);
      int8x8_t v74 = vext_s8(v75, v74, 4uLL);
      int8x8_t v75 = vext_s8(v76, v75, 4uLL);
      int8x8_t v76 = vext_s8(*(int8x8_t *)&v94.n128_i8[8 * v68 + 8], v76, 4uLL);
      uint64_t v69 = (v69 + 64);
    }
    if (v69 <= 0xFFFFFFDF)
    {
      int8x8_t v66 = vext_s8(v67, v66, 6uLL);
      int8x8_t v67 = vext_s8(v70, v67, 6uLL);
      int8x8_t v70 = vext_s8(v71, v70, 6uLL);
      int8x8_t v71 = vext_s8(v72, v71, 6uLL);
      int8x8_t v72 = vext_s8(v73, v72, 6uLL);
      int8x8_t v73 = vext_s8(v74, v73, 6uLL);
      int8x8_t v74 = vext_s8(v75, v74, 6uLL);
      int8x8_t v75 = vext_s8(v76, v75, 6uLL);
      int8x8_t v76 = vext_s8(*(int8x8_t *)&v94.n128_i8[8 * v68 + 8], v76, 6uLL);
      uint64_t v69 = (v69 + 32);
    }
    BOOL v77 = a1 < 0x12;
    sub_1D0C59E3C(v69, v9, v77, a3, a4, v76, v75);
    int16x8_t v78 = (double *)((char *)a4 + v61);
    sub_1D0C59E3C(v69, v9, v77, a3, v78, v75, v74);
    uint64_t v79 = (double *)((char *)v78 + v61);
    sub_1D0C59E3C(v69, v9, v77, a3, v79, v74, v73);
    uint64_t v80 = (double *)((char *)v79 + v61);
    sub_1D0C59E3C(v69, v9, v77, a3, v80, v73, v72);
    uint64_t v81 = (double *)((char *)v80 + v61);
    sub_1D0C59E3C(v69, v9, v77, a3, v81, v72, v71);
    uint64_t v82 = (double *)((char *)v81 + v61);
    sub_1D0C59E3C(v69, v9, v77, a3, v82, v71, v70);
    uint64_t v83 = (double *)((char *)v82 + v61);
    sub_1D0C59E3C(v69, v9, v77, a3, v83, v70, v67);
    signed int v84 = (double *)((char *)v83 + v61);
    uint64_t result = sub_1D0C59E3C(v69, v9, v77, a3, v84, v67, v66);
    v64 += 4 * v9;
    a4 = (double *)((char *)v84 + v62);
    --v63;
  }
  while (v63);
  return result;
}

void sub_1D0CD9BAC(uint64_t a1, const char *a2, uint64_t a3, uint8x16_t *a4)
{
  int v4 = a2;
  int8x16x2_t v11 = vld2q_s8(v4);
  v4 += 32;
  int8x16x2_t v12 = vld2q_s8(v4);
  unsigned int v5 = a2 + 128;
  int8x16x2_t v13 = vld2q_s8(v5);
  int v6 = a2 + 160;
  int8x16x2_t v14 = vld2q_s8(v6);
  int8x16_t v7 = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v11.val[0].i8), (uint8x16_t)v11.val[0]), (uint8x16_t)v12.val[0]), *(uint8x8_t *)v12.val[0].i8), (uint8x16_t)v13.val[0]), *(uint8x8_t *)v13.val[0].i8), (uint8x16_t)v14.val[0]), *(uint8x8_t *)v14.val[0].i8);
  v11.val[0] = (int8x16_t)vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_high_u8(vmovl_u8(*(uint8x8_t *)v11.val[1].i8), (uint8x16_t)v11.val[1]), (uint8x16_t)v12.val[1]), *(uint8x8_t *)v12.val[1].i8), (uint8x16_t)v13.val[1]), *(uint8x8_t *)v13.val[1].i8), (uint8x16_t)v14.val[1]), *(uint8x8_t *)v14.val[1].i8);
  *(int16x4_t *)v11.val[0].i8 = vpadd_s16(vadd_s16(*(int16x4_t *)v7.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), vadd_s16(*(int16x4_t *)v11.val[0].i8, (int16x4_t)*(_OWORD *)&vextq_s8(v11.val[0], v11.val[0], 8uLL)));
  *(int16x4_t *)v11.val[1].i8 = vpadd_s16(*(int16x4_t *)v11.val[0].i8, *(int16x4_t *)v11.val[0].i8);
  v11.val[1].i64[1] = v11.val[1].i64[0];
  uint8x16_t v8 = vqrshrn_high_n_u16(vqrshrn_n_u16((uint16x8_t)v11.val[1], 6uLL), (uint16x8_t)v11.val[1], 6uLL);
  int v9 = a4 + 2;
  int v10 = 32;
  do
  {
    v9[-2] = v8;
    v9[-1] = v8;
    *int v9 = v8;
    v9[1] = v8;
    int v9 = (uint8x16_t *)((char *)v9 + a3);
    --v10;
  }
  while (v10);
}

int16x8_t sub_1D0CD9C4C(uint64_t a1, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  v23[0] = *a2;
  v23[1] = v5;
  long long v6 = a2[3];
  v23[2] = a2[2];
  v23[3] = v6;
  do
  {
    int16x8_t v7 = (int16x8_t)v23[v4];
    int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 0);
    int16x8_t v9 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 1);
    int16x8_t v10 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 2);
    int16x8_t v11 = vdupq_lane_s16(*(int16x4_t *)v7.i8, 3);
    int16x8_t v12 = vdupq_laneq_s16(v7, 4);
    int16x8_t v13 = vdupq_laneq_s16(v7, 5);
    int16x8_t v14 = vdupq_laneq_s16(v7, 6);
    int16x8_t result = vdupq_laneq_s16(v7, 7);
    *a4 = v8;
    a4[1] = v8;
    a4[2] = v8;
    a4[3] = v8;
    uint64_t v16 = (int16x8_t *)((char *)a4 + a3);
    *uint64_t v16 = v9;
    v16[1] = v9;
    v16[2] = v9;
    v16[3] = v9;
    uint64_t v17 = (int16x8_t *)((char *)a4 + a3 + a3);
    *uint64_t v17 = v10;
    v17[1] = v10;
    v17[2] = v10;
    v17[3] = v10;
    uint64_t v18 = (int16x8_t *)((char *)v17 + a3);
    *uint64_t v18 = v11;
    v18[1] = v11;
    v18[2] = v11;
    v18[3] = v11;
    __n128 v19 = (int16x8_t *)((char *)v18 + a3);
    *__n128 v19 = v12;
    v19[1] = v12;
    v19[2] = v12;
    v19[3] = v12;
    __n128 v20 = (int16x8_t *)((char *)v19 + a3);
    *__n128 v20 = v13;
    v20[1] = v13;
    v20[2] = v13;
    v20[3] = v13;
    __n128 v21 = (int16x8_t *)((char *)v20 + a3);
    int16x8_t *v21 = v14;
    v21[1] = v14;
    v21[2] = v14;
    v21[3] = v14;
    __n128 v22 = (int16x8_t *)((char *)v21 + a3);
    int16x8_t *v22 = result;
    v22[1] = result;
    v22[2] = result;
    v22[3] = result;
    a4 = (int16x8_t *)((char *)v22 + a3);
    ++v4;
  }
  while (v4 != 4);
  return result;
}

void sub_1D0CD9D3C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[8];
  long long v5 = a2[9];
  long long v6 = a2[10];
  long long v7 = a2[11];
  int16x8_t v8 = (_OWORD *)(a4 + 32);
  int v9 = 32;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *int16x8_t v8 = v6;
    v8[1] = v7;
    int16x8_t v8 = (_OWORD *)((char *)v8 + a3);
    --v9;
  }
  while (v9);
}

int8x16_t *sub_1D0CD9D64(uint64_t a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4 = 0;
  v50[8] = *MEMORY[0x1E4F143B8];
  v50[0] = 0x1C1C1D1D1E1E1F1FLL;
  v50[1] = 0x181819191A1A1B1BLL;
  v50[2] = 0x1414151516161717;
  v50[3] = 0x1010111112121313;
  v50[4] = 0xC0C0D0D0E0E0F0FLL;
  v50[5] = 0x80809090A0A0B0BLL;
  int8x16_t v5 = a2[1];
  int8x16_t v6 = a2[2];
  int8x16_t v7 = a2[3];
  int8x16_t v8 = a2[8];
  int8x16_t v9 = a2[9];
  int8x16_t v10 = a2[10];
  int8x16_t v11 = a2[11];
  v48[0] = *a2;
  v48[1] = v5;
  v48[2] = v6;
  v48[3] = v7;
  i16 = a2[4].i16;
  uint8x8_t v13 = (uint8x8_t)vld1_dup_s16(i16);
  uint8x8_t v49 = v13;
  uint8x8_t v46 = *(uint8x8_t *)v9.i8;
  uint8x8_t v45 = (uint8x8_t)vextq_s8(v9, v9, 8uLL).u64[0];
  uint8x8_t v44 = (uint8x8_t)vextq_s8(v10, v10, 8uLL).u64[0];
  uint8x8_t v43 = (uint8x8_t)vextq_s8(v11, v11, 8uLL).u64[0];
  int16x8_t v14 = a2[12].i16;
  v47[0] = vmull_u8((uint8x8_t)0x404030302020101, v13);
  v47[1] = vmull_u8((uint8x8_t)0x808070706060505, v13);
  v47[2] = vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v13);
  v47[3] = vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v13);
  v47[4] = vmull_u8((uint8x8_t)0x1414131312121111, v13);
  v47[5] = vmull_u8((uint8x8_t)0x1818171716161515, v13);
  uint8x8_t v15 = (uint8x8_t)vld1_dup_s16(v14);
  int16x8_t v16 = (int16x8_t)vmull_u8((uint8x8_t)0x404030302020101, v15);
  int16x8_t v17 = (int16x8_t)vmull_u8((uint8x8_t)0x808070706060505, v15);
  v50[6] = 0x404050506060707;
  v50[7] = 0x10102020303;
  int16x8_t v41 = (int16x8_t)vmull_u8((uint8x8_t)0x10100F0F0E0E0D0DLL, v15);
  int16x8_t v42 = (int16x8_t)vmull_u8((uint8x8_t)0xC0C0B0B0A0A0909, v15);
  int16x8_t v18 = (int16x8_t)vmull_u8((uint8x8_t)0x1414131312121111, v15);
  int16x8_t v19 = (int16x8_t)vmull_u8((uint8x8_t)0x1818171716161515, v15);
  int16x8_t v20 = (int16x8_t)vmull_u8((uint8x8_t)0x1C1C1B1B1A1A1919, v15);
  int16x8_t v21 = (int16x8_t)vmull_u8((uint8x8_t)0x20201F1F1E1E1D1DLL, v15);
  v47[6] = vmull_u8((uint8x8_t)0x1C1C1B1B1A1A1919, v13);
  v47[7] = vmull_u8((uint8x8_t)0x20201F1F1E1E1D1DLL, v13);
  __n128 v22 = a4 + 2;
  uint8x8_t v23 = (uint8x8_t)vextq_s8(v8, v8, 8uLL).u64[0];
  do
  {
    int32x4_t v24 = (int32x4_t)v47[v4];
    int16x8_t v25 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
    int16x8_t v26 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
    int16x8_t v27 = (int16x8_t)vdupq_laneq_s32(v24, 2);
    int16x8_t v28 = (int16x8_t)vdupq_laneq_s32(v24, 3);
    int16x4_t v29 = *(int16x4_t *)((char *)v48 + 8 * v4);
    uint8x8_t v30 = (uint8x8_t)vdup_lane_s16(v29, 0);
    uint8x8_t v31 = (uint8x8_t)vdup_lane_s16(v29, 1);
    uint8x8_t v32 = (uint8x8_t)vdup_lane_s16(v29, 2);
    int16x4_t v33 = (int16x4_t)v50[v4];
    uint8x8_t v34 = (uint8x8_t)vdup_lane_s16(v33, 0);
    *(int16x4_t *)v24.i8 = vdup_lane_s16(v33, 1);
    uint8x8_t v35 = (uint8x8_t)vdup_lane_s16(v33, 2);
    uint8x8_t v36 = (uint8x8_t)vdup_lane_s16(v29, 3);
    uint8x8_t v37 = (uint8x8_t)vdup_lane_s16(v33, 3);
    v22[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v30), v25), *(uint8x8_t *)v8.i8, v34), 6uLL), (int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v17, (uint8x8_t)0x181819191A1A1B1BLL, v30), v25), v23, v34), 6uLL);
    int v38 = (int8x16_t *)((char *)v22 + a3);
    v38[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8((uint16x8_t)vaddq_s16((int16x8_t)vmlal_u8((uint16x8_t)v16, (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v31), v26), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v26), (uint8x8_t)0x181819191A1A1B1BLL, v31), v23, *(uint8x8_t *)v24.i8), 6uLL);
    int v39 = (int8x16_t *)((char *)v22 + 2 * a3);
    v39[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v27), (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v32), *(uint8x8_t *)v8.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v27), (uint8x8_t)0x181819191A1A1B1BLL, v32), v23, v35), 6uLL);
    int16x8_t result = (int8x16_t *)((char *)v22 + 3 * a3);
    result[-2] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v16, v28), (uint8x8_t)0x1C1C1D1D1E1E1F1FLL, v36), *(uint8x8_t *)v8.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v17, v28), (uint8x8_t)0x181819191A1A1B1BLL, v36), v23, v37), 6uLL);
    v22[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v25), (uint8x8_t)0x1414151516161717, v30), v46, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v25), (uint8x8_t)0x1010111112121313, v30), v45, v34), 6uLL);
    v38[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v26), (uint8x8_t)0x1414151516161717, v31), v46, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v26), (uint8x8_t)0x1010111112121313, v31), v45, *(uint8x8_t *)v24.i8), 6uLL);
    v39[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v27), (uint8x8_t)0x1414151516161717, v32), v46, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v27), (uint8x8_t)0x1010111112121313, v32), v45, v35), 6uLL);
    result[-1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v42, v28), (uint8x8_t)0x1414151516161717, v36), v46, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v41, v28), (uint8x8_t)0x1010111112121313, v36), v45, v37), 6uLL);
    int8x16_t *v22 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v25), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v30), *(uint8x8_t *)v10.i8, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v25), (uint8x8_t)0x80809090A0A0B0BLL, v30), v44, v34), 6uLL);
    *int v38 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v26), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v31), *(uint8x8_t *)v10.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v26), (uint8x8_t)0x80809090A0A0B0BLL, v31), v44, *(uint8x8_t *)v24.i8), 6uLL);
    int8x16_t *v39 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v27), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v32), *(uint8x8_t *)v10.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v27), (uint8x8_t)0x80809090A0A0B0BLL, v32), v44, v35), 6uLL);
    *int16x8_t result = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v18, v28), (uint8x8_t)0xC0C0D0D0E0E0F0FLL, v36), *(uint8x8_t *)v10.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v19, v28), (uint8x8_t)0x80809090A0A0B0BLL, v36), v44, v37), 6uLL);
    v22[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v25), (uint8x8_t)0x404050506060707, v30), *(uint8x8_t *)v11.i8, v34), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v25), (uint8x8_t)0x10102020303, v30), v43, v34), 6uLL);
    v38[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v26), (uint8x8_t)0x404050506060707, v31), *(uint8x8_t *)v11.i8, *(uint8x8_t *)v24.i8), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v26), (uint8x8_t)0x10102020303, v31), v43, *(uint8x8_t *)v24.i8), 6uLL);
    v39[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v27), (uint8x8_t)0x404050506060707, v32), *(uint8x8_t *)v11.i8, v35), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v27), (uint8x8_t)0x10102020303, v32), v43, v35), 6uLL);
    result[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v20, v28), (uint8x8_t)0x404050506060707, v36), *(uint8x8_t *)v11.i8, v37), 6uLL), (int16x8_t)vmlal_u8(vmlal_u8((uint16x8_t)vaddq_s16(v21, v28), (uint8x8_t)0x10102020303, v36), v43, v37), 6uLL);
    ++v4;
    __n128 v22 = (int8x16_t *)((char *)v22 + 4 * a3);
  }
  while (v4 != 8);
  return result;
}

void sub_1D0CDA214(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = 0;
  i16 = a2[4].i16;
  int16x8_t v6 = vld1q_dup_s16(i16);
  int8x16_t v7 = a2[12].i16;
  int16x8_t v8 = vld1q_dup_s16(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F2F0);
  int16x8_t v10 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F300);
  int16x8_t v11 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F310);
  int16x8_t v12 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F320);
  int16x8_t v13 = a2[8];
  int16x8_t v14 = a2[9];
  int16x8_t v15 = a2[10];
  int16x8_t v16 = a2[11];
  int16x8_t v17 = vshlq_n_s16(v13, 5uLL);
  int16x8_t v18 = vshlq_n_s16(v14, 5uLL);
  int16x8_t v19 = vshlq_n_s16(v15, 5uLL);
  int16x8_t v20 = vshlq_n_s16(v16, 5uLL);
  int16x8_t v21 = a4 + 2;
  int16x8_t v22 = v6;
  do
  {
    uint8x8_t v23 = &a2->i16[v4];
    int16x8_t v24 = vld1q_dup_s16(v23);
    int16x8_t v17 = vsubq_s16(v17, v13);
    int16x8_t v18 = vsubq_s16(v18, v14);
    v21[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v17, v9), v22), v24, (int16x8_t)xmmword_1D0D7F2B0), 6uLL);
    v21[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v18, v10), v22), v24, (int16x8_t)xmmword_1D0D7F2C0), 6uLL);
    int16x8_t v19 = vsubq_s16(v19, v15);
    int16x8_t v20 = vsubq_s16(v20, v16);
    uint16x8_t *v21 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v19, v11), v22), v24, (int16x8_t)xmmword_1D0D7F2D0), 6uLL);
    v21[1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v20, v12), v22), v24, (int16x8_t)xmmword_1D0D7F2E0), 6uLL);
    int16x8_t v22 = vaddq_s16(v22, v6);
    ++v4;
    int16x8_t v21 = (uint16x8_t *)((char *)v21 + 2 * a3);
  }
  while (v4 != 32);
}

void sub_1D0CDA314(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int16x8_t v4 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[8], *a2), vaddq_s16(a2[1], a2[9])), vaddq_s16(vaddq_s16(a2[2], a2[10]), a2[3])), a2[11]);
  int16x8_t v5 = vpaddq_s16(v4, v4);
  int16x8_t v6 = vpaddq_s16(v5, v5);
  uint16x8_t v7 = vrshrq_n_u16((uint16x8_t)vpaddq_s16(v6, v6), 6uLL);
  int16x8_t v8 = a4 + 2;
  uint64_t v9 = 32;
  do
  {
    v8[-2] = v7;
    v8[-1] = v7;
    *int16x8_t v8 = v7;
    v8[1] = v7;
    int16x8_t v8 = (uint16x8_t *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1D0CDA374(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = 0;
  i16 = a2[2].i16;
  int16x8_t v6 = vld1q_dup_s16(i16);
  uint16x8_t v7 = a2[6].i16;
  int16x8_t v8 = vld1q_dup_s16(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F2F0);
  int16x8_t v10 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F300);
  int16x8_t v11 = a2[4];
  int16x8_t v12 = a2[5];
  int16x8_t v13 = vshlq_n_s16(v11, 4uLL);
  int16x8_t v14 = vshlq_n_s16(v12, 4uLL);
  int16x8_t v15 = a4 + 1;
  int16x8_t v16 = v6;
  do
  {
    int16x8_t v17 = &a2->i16[v4];
    int16x8_t v18 = vld1q_dup_s16(v17);
    int16x8_t v13 = vsubq_s16(v13, v11);
    int16x8_t v14 = vsubq_s16(v14, v12);
    v15[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v13, v9), v16), v18, (int16x8_t)xmmword_1D0D7F2D0), 5uLL);
    *int16x8_t v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v14, v10), v16), v18, (int16x8_t)xmmword_1D0D7F2E0), 5uLL);
    int16x8_t v16 = vaddq_s16(v16, v6);
    ++v4;
    int16x8_t v15 = (uint16x8_t *)((char *)v15 + 2 * a3);
  }
  while (v4 != 16);
}

void sub_1D0CDA414(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[16], *a2), vaddq_s16(a2[1], a2[17])), vaddq_s16(vaddq_s16(a2[2], a2[18]), a2[3])), vaddq_s16(vaddq_s16(vaddq_s16(a2[19], a2[4]), a2[20]), a2[5])), vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[21], a2[6]), a2[22]), a2[7]), a2[23])));
  int32x4_t v5 = vpaddq_s32(v4, v4);
  int16x8_t v6 = (int16x8_t)vrshrq_n_u32((uint32x4_t)vpaddq_s32(v5, v5), 7uLL);
  int16x8_t v7 = vtrn1q_s16(v6, v6);
  int16x8_t v8 = a4 + 4;
  uint64_t v9 = 64;
  do
  {
    v8[-4] = v7;
    v8[-3] = v7;
    v8[-2] = v7;
    v8[-1] = v7;
    *int16x8_t v8 = v7;
    v8[1] = v7;
    v8[2] = v7;
    v8[3] = v7;
    int16x8_t v8 = (int16x8_t *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1D0CDA4B0(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  unint64_t v4 = 0;
  int16x8_t v5 = vaddq_s16(vaddq_s16(a2[4], *a2), vaddq_s16(a2[1], a2[5]));
  int16x8_t v6 = vpaddq_s16(v5, v5);
  int16x8_t v7 = vpaddq_s16(v6, v6);
  int16x8_t v8 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vpaddq_s16(v7, v7), 5uLL);
  uint64_t v9 = a4 + 1;
  *(int16x8_t *)((char *)v9 + 2 * a3) = v8;
  *(int16x8_t *)((char *)v9 + 4 * a3) = v8;
  *(int16x8_t *)((char *)v9 + 6 * a3) = v8;
  do
  {
    *(int16x8_t *)((char *)v9 + 8 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 10 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 12 * a3) = v8;
    *(int16x8_t *)((char *)v9 + 14 * a3) = v8;
    v4 += 4;
    uint64_t v9 = (uint16x8_t *)((char *)v9 + 8 * a3);
  }
  while (v4 < 0xC);
  uint64_t v10 = 0;
  int16x8_t v11 = vaddq_s16(v8, v8);
  int16x8_t v12 = vaddq_s16(*a2, v8);
  uint16x8_t v13 = (uint16x8_t)vaddq_s16(v12, v11);
  v11.i16[0] = v12.i16[0];
  int8x16_t v14 = (int8x16_t)vrshrq_n_u16(v13, 2uLL);
  v12.i64[0] = 0x3000300030003;
  v12.i64[1] = 0x3000300030003;
  int16x8_t v15 = vmulq_s16(v8, v12);
  uint16x8_t v16 = (uint16x8_t)vaddq_s16(v15, a2[5]);
  int8x16_t v17 = (int8x16_t)vrshrq_n_u16((uint16x8_t)vaddq_s16(v15, a2[1]), 2uLL);
  int16x8_t v18 = v8;
  v18.i16[0] = v17.i16[0];
  *a4 = vrshrq_n_u16((uint16x8_t)vaddq_s16(vaddq_s16(a2[4], v8), v11), 2uLL);
  a4[1] = vrshrq_n_u16(v16, 2uLL);
  *(int8x16_t *)((char *)a4 + 14 * a3) = vextq_s8(v14, (int8x16_t)v8, 0xEuLL);
  a4[a3] = (uint16x8_t)v18;
  *(int8x16_t *)((char *)a4 + 30 * a3) = vextq_s8(v17, (int8x16_t)v8, 0xEuLL);
  int8x16_t v19 = vextq_s8(v14, (int8x16_t)v8, 2uLL);
  int8x16_t v20 = vextq_s8(v17, (int8x16_t)v8, 2uLL);
  do
  {
    int16x8_t v21 = (int8x16_t *)((char *)&unk_1D0D80100 + 16 * v10);
    int8x16_t v22 = *v21;
    *(int8x16_t *)((char *)a4 + 2 * a3) = vqtbl1q_s8(v19, *v21);
    *(int8x16_t *)((char *)a4 + 18 * a3) = vqtbl1q_s8(v20, v22);
    int8x16_t v23 = v21[1];
    *(int8x16_t *)((char *)a4 + 4 * a3) = vqtbl1q_s8(v19, v23);
    *(int8x16_t *)((char *)a4 + 20 * a3) = vqtbl1q_s8(v20, v23);
    unint64_t v24 = v10 + 1;
    v10 += 2;
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
  }
  while (v24 < 5);
}

int16x8_t *sub_1D0CDA614(int16x8_t *result, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = v79;
  int v5 = byte_1D0D7FEBA[result];
  uint64_t v6 = a2 + 256;
  if (result <= 0x11) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = a2 + 256;
  }
  if (result > 0x11) {
    uint64_t v6 = a2;
  }
  if (v5 < 0)
  {
    int v9 = byte_1D0D7FEBA[(int)result];
    if (v9 < 0)
    {
      uint64_t v10 = 2 * byte_1D0D7FEBA[(int)result];
      int v11 = word_1D0D7FFE0[(int)result - 11];
      int v12 = 2 * v9 * v11 + 128;
      unint64_t v8 = 64;
      do
      {
        v79[v10 - 1] = *(_WORD *)(v6 + 2 * ((v12 >> 8) - 1));
        v12 += v11;
        BOOL v13 = __CFADD__(v10++, 1);
      }
      while (!v13);
    }
    else
    {
      unint64_t v8 = 64;
    }
  }
  else
  {
    unint64_t v8 = 128;
  }
  uint64_t v14 = 0;
  for (unint64_t i = 0; i < v8; i += 32)
  {
    uint16x8_t v16 = &v77[v14];
    long long v17 = *(_OWORD *)(v7 + v14 + 16);
    v16[9] = *(_OWORD *)(v7 + v14);
    v16[10] = v17;
    long long v18 = *(_OWORD *)(v7 + v14 + 48);
    v16[11] = *(_OWORD *)(v7 + v14 + 32);
    v16[12] = v18;
    v14 += 64;
  }
  __int16 v78 = *(_WORD *)(a2 - 2);
  if ((v5 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      unint64_t v40 = 0;
      v41.i64[0] = 0x20002000200020;
      v41.i64[1] = 0x20002000200020;
      int16x8_t result = a4;
      int v42 = v5;
      do
      {
        uint64_t v43 = 0;
        uint8x8_t v44 = &a4[v40];
        do
        {
          uint64_t v45 = 0;
          int16x8_t v46 = vdupq_n_s16(v42 & 0x1F);
          int16x8_t v47 = vsubq_s16(v41, v46);
          char v48 = 1;
          do
          {
            char v49 = v48;
            int8x8_t v50 = &v79[v45 + ((uint64_t)v42 >> 5)];
            uint64_t v51 = v45 + v43;
            *(uint16x8_t *)((char *)v44 + 2 * v51 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v50, v47), *(int16x8_t *)(v50 + 1), v46), 5uLL);
            *(uint16x8_t *)((char *)v44 + 2 * (v51 + 8) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v50 + 1), v47), *(int16x8_t *)(v50 + 9), v46), 5uLL);
            *(uint16x8_t *)((char *)v44 + 2 * (v51 + 16) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v50 + 2), v47), *(int16x8_t *)(v50 + 17), v46), 5uLL);
            *(uint16x8_t *)((char *)v44 + 2 * (v51 + 24) * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v50 + 3), v47), *(int16x8_t *)(v50 + 25), v46), 5uLL);
            uint64_t v45 = 32;
            char v48 = 0;
          }
          while ((v49 & 1) != 0);
          ++v43;
          v42 += v5;
        }
        while (v43 != 8);
        unint64_t v52 = -8;
        double v53 = result;
        do
        {
          int16x8_t v54 = *(int16x8_t *)((char *)v53 + 2 * a3);
          int16x8_t v55 = *(int16x8_t *)((char *)v53 + 4 * a3);
          int16x8_t v56 = *(int16x8_t *)((char *)v53 + 6 * a3);
          int16x8_t v57 = *(int16x8_t *)((char *)v53 + 8 * a3);
          int16x8_t v58 = *(int16x8_t *)((char *)v53 + 10 * a3);
          int16x8_t v59 = *(int16x8_t *)((char *)v53 + 12 * a3);
          int32x4_t v60 = (int32x4_t)vtrn1q_s16(*v53, v54);
          int32x4_t v61 = (int32x4_t)vtrn2q_s16(*v53, v54);
          int32x4_t v62 = (int32x4_t)vtrn1q_s16(v55, v56);
          int16x8_t v63 = *(int16x8_t *)((char *)v53 + 14 * a3);
          int32x4_t v64 = (int32x4_t)vtrn2q_s16(v55, v56);
          int64x2_t v65 = (int64x2_t)vtrn1q_s32(v60, v62);
          int64x2_t v66 = (int64x2_t)vtrn2q_s32(v60, v62);
          int64x2_t v67 = (int64x2_t)vtrn1q_s32(v61, v64);
          int64x2_t v68 = (int64x2_t)vtrn2q_s32(v61, v64);
          int32x4_t v69 = (int32x4_t)vtrn1q_s16(v57, v58);
          int32x4_t v70 = (int32x4_t)vtrn2q_s16(v57, v58);
          int32x4_t v71 = (int32x4_t)vtrn1q_s16(v59, v63);
          int32x4_t v72 = (int32x4_t)vtrn2q_s16(v59, v63);
          int64x2_t v73 = (int64x2_t)vtrn1q_s32(v69, v71);
          int64x2_t v74 = (int64x2_t)vtrn2q_s32(v69, v71);
          int64x2_t v75 = (int64x2_t)vtrn1q_s32(v70, v72);
          int64x2_t v76 = (int64x2_t)vtrn2q_s32(v70, v72);
          *(int64x2_t *)double v53 = vzip1q_s64(v65, v73);
          *(int64x2_t *)((char *)v53 + 2 * a3) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v53 + 4 * a3) = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v53 + 6 * a3) = vzip1q_s64(v68, v76);
          *(int64x2_t *)((char *)v53 + 8 * a3) = vzip2q_s64(v65, v73);
          *(int64x2_t *)((char *)v53 + 10 * a3) = vzip2q_s64(v67, v75);
          *(int64x2_t *)((char *)v53 + 12 * a3) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v53 + 14 * a3) = vzip2q_s64(v68, v76);
          v52 += 8;
          v53 += a3;
        }
        while (v52 < 0x38);
        ++result;
        BOOL v13 = v40++ >= 7;
      }
      while (!v13);
    }
    else
    {
      uint64_t v19 = 0;
      v20.i64[0] = 0x20002000200020;
      v20.i64[1] = 0x20002000200020;
      int v21 = v5;
      do
      {
        uint64_t v22 = 0;
        int16x8_t v23 = vdupq_n_s16(v21 & 0x1F);
        int16x8_t v24 = vsubq_s16(v20, v23);
        char v25 = 1;
        do
        {
          int16x8_t v26 = &v79[v22 * 8 + ((uint64_t)v21 >> 5)];
          uint64_t v27 = (uint64_t)a4[v22].i64 + 2 * v19 * a3;
          uint16x8_t v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v26 + 1), v24), *(int16x8_t *)(v26 + 9), v23), 5uLL);
          *(uint16x8_t *)uint64_t v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v26, v24), *(int16x8_t *)(v26 + 1), v23), 5uLL);
          *(uint16x8_t *)(v27 + 16) = v28;
          uint16x8_t v29 = (uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v26 + 2), v24), *(int16x8_t *)(v26 + 17), v23);
          uint16x8_t v30 = (uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v26 + 3), v24), *(int16x8_t *)(v26 + 25), v23);
          LOBYTE(v26) = v25;
          *(uint16x8_t *)(v27 + 32) = vrshrq_n_u16(v29, 5uLL);
          *(uint16x8_t *)(v27 + 48) = vrshrq_n_u16(v30, 5uLL);
          uint64_t v22 = 4;
          char v25 = 0;
        }
        while ((v26 & 1) != 0);
        ++v19;
        v21 += v5;
      }
      while (v19 != 64);
    }
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = (uint64_t)v5 >> 5;
    do
    {
      uint64_t v33 = 0;
      char v34 = 1;
      v4 += v32;
      do
      {
        uint8x8_t v35 = &v4[v33 * 8];
        long long v36 = v35[1];
        long long v37 = v35[2];
        long long v38 = v35[3];
        int v39 = &a4[v33].i8[2 * v31 * a3];
        *(_OWORD *)int v39 = *v35;
        *((_OWORD *)v39 + 1) = v36;
        LOBYTE(v35) = v34;
        *((_OWORD *)v39 + 2) = v37;
        *((_OWORD *)v39 + 3) = v38;
        uint64_t v33 = 4;
        char v34 = 0;
      }
      while ((v35 & 1) != 0);
      ++v31;
    }
    while (v31 != 64);
  }
  return result;
}

uint64_t sub_1D0CDAA30(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  int v5 = a2 + 8;
  if (result <= 0x11) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a2 + 8;
  }
  if (v4 < 0)
  {
    uint64_t v8 = 0;
    if (result > 0x11) {
      int v5 = a2;
    }
    long long v9 = a2[8 * (unint64_t)(result < 0x12)];
    long long v10 = v5[1];
    long long v11 = v5[2];
    long long v12 = v5[3];
    if ((int)result >= 18) {
      int v13 = result - 18;
    }
    else {
      int v13 = 18 - result;
    }
    uint64_t v14 = (char *)&unk_1D0D80280 + 64 * (uint64_t)v13;
    unint64_t v7 = 32;
    do
    {
      *(int8x16_t *)&v79[v8 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, *(int8x16_t *)&v14[v8]);
      v8 += 16;
    }
    while (v8 != 64);
  }
  else
  {
    unint64_t v7 = 64;
  }
  uint64_t v15 = 0;
  for (unint64_t i = 0; i < v7; i += 32)
  {
    long long v17 = &v79[v15 * 16];
    long long v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    long long v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    v17[8] = v19;
    v15 += 4;
  }
  __int16 v80 = *((_WORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      unint64_t v37 = 0;
      uint64_t v38 = 4 * a3;
      uint64_t v39 = 6 * a3;
      uint64_t v40 = 3 * a3;
      uint64_t v41 = 2 * a3;
      int16x8_t result = 32 * a3;
      uint64_t v42 = a3;
      uint64_t v43 = 12 * a3;
      uint64_t v44 = 10 * a3;
      uint64_t v45 = 8 * a3;
      v46.i64[0] = 0x20002000200020;
      v46.i64[1] = 0x20002000200020;
      int v47 = v4;
      uint64_t v48 = 14 * a3;
      do
      {
        char v49 = a4;
        uint64_t v50 = 8;
        do
        {
          int16x8_t v51 = vdupq_n_s16(v47 & 0x1F);
          int16x8_t v52 = vsubq_s16(v46, v51);
          uint16x8_t *v49 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[v47 >> 5], v52), *(int16x8_t *)&v81[(v47 >> 5) + 1], v51), 5uLL);
          v49[v42] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 8], v52), *(int16x8_t *)&v81[(v47 >> 5) + 9], v51), 5uLL);
          *(uint16x8_t *)((char *)v49 + result) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 16], v52), *(int16x8_t *)&v81[(v47 >> 5) + 17], v51), 5uLL);
          v49[v40] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v47 >> 5) + 24], v52), *(int16x8_t *)&v81[(v47 >> 5) + 25], v51), 5uLL);
          v47 += v4;
          char v49 = (uint16x8_t *)((char *)v49 + v41);
          --v50;
        }
        while (v50);
        unint64_t v53 = -8;
        int16x8_t v54 = (int16x8_t *)a4;
        do
        {
          int16x8_t v55 = *(int16x8_t *)((char *)v54 + v41);
          int16x8_t v56 = *(int16x8_t *)((char *)v54 + v38);
          int16x8_t v57 = *(int16x8_t *)((char *)v54 + v39);
          int16x8_t v58 = *(int16x8_t *)((char *)v54 + v45);
          int16x8_t v59 = *(int16x8_t *)((char *)v54 + v44);
          int16x8_t v60 = *(int16x8_t *)((char *)v54 + v43);
          int32x4_t v61 = (int32x4_t)vtrn1q_s16(*v54, v55);
          int32x4_t v62 = (int32x4_t)vtrn2q_s16(*v54, v55);
          int32x4_t v63 = (int32x4_t)vtrn1q_s16(v56, v57);
          int16x8_t v64 = *(int16x8_t *)((char *)v54 + v48);
          int32x4_t v65 = (int32x4_t)vtrn2q_s16(v56, v57);
          int64x2_t v66 = (int64x2_t)vtrn1q_s32(v61, v63);
          int64x2_t v67 = (int64x2_t)vtrn2q_s32(v61, v63);
          int64x2_t v68 = (int64x2_t)vtrn1q_s32(v62, v65);
          int64x2_t v69 = (int64x2_t)vtrn2q_s32(v62, v65);
          int32x4_t v70 = (int32x4_t)vtrn1q_s16(v58, v59);
          int32x4_t v71 = (int32x4_t)vtrn2q_s16(v58, v59);
          int32x4_t v72 = (int32x4_t)vtrn1q_s16(v60, v64);
          int32x4_t v73 = (int32x4_t)vtrn2q_s16(v60, v64);
          int64x2_t v74 = (int64x2_t)vtrn1q_s32(v70, v72);
          int64x2_t v75 = (int64x2_t)vtrn2q_s32(v70, v72);
          int64x2_t v76 = (int64x2_t)vtrn1q_s32(v71, v73);
          int64x2_t v77 = (int64x2_t)vtrn2q_s32(v71, v73);
          *(int64x2_t *)int16x8_t v54 = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v54 + v41) = vzip1q_s64(v68, v76);
          *(int64x2_t *)((char *)v54 + v38) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v54 + v39) = vzip1q_s64(v69, v77);
          *(int64x2_t *)((char *)v54 + v45) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v54 + v44) = vzip2q_s64(v68, v76);
          *(int64x2_t *)((char *)v54 + v43) = vzip2q_s64(v67, v75);
          *(int64x2_t *)((char *)v54 + v48) = vzip2q_s64(v69, v77);
          v53 += 8;
          int16x8_t v54 = (int16x8_t *)((char *)v54 + v42 * 16);
        }
        while (v53 < 0x18);
        ++a4;
        BOOL v78 = v37 >= 0x18;
        v37 += 8;
      }
      while (!v78);
    }
    else
    {
      int16x8_t v20 = a4 + 2;
      uint64_t v21 = 32;
      v22.i64[0] = 0x20002000200020;
      v22.i64[1] = 0x20002000200020;
      int v23 = v4;
      do
      {
        int16x8_t v24 = vdupq_n_s16(v23 & 0x1F);
        int16x8_t v25 = vsubq_s16(v22, v24);
        uint16x8_t v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v23 >> 5) + 8], v25), *(int16x8_t *)&v81[(v23 >> 5) + 9], v24), 5uLL);
        v20[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[v23 >> 5], v25), *(int16x8_t *)&v81[(v23 >> 5) + 1], v24), 5uLL);
        v20[-1] = v26;
        int16x8_t result = (uint64_t)&v81[(v23 >> 5) + 16];
        uint16x8_t v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)result, v25), *(int16x8_t *)(result + 2), v24), 5uLL);
        uint16x8_t v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)&v81[(v23 >> 5) + 24], v25), *(int16x8_t *)&v81[(v23 >> 5) + 25], v24), 5uLL);
        *int16x8_t v20 = v27;
        v20[1] = v28;
        v23 += v4;
        int16x8_t v20 = (uint16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    int v29 = v4 >> 5;
    uint16x8_t v30 = a4 + 2;
    uint64_t v31 = v29;
    uint64_t v32 = (uint16x8_t *)&v81[v31 + 24];
    uint64_t v33 = 32;
    do
    {
      uint16x8_t v34 = v32[-2];
      uint16x8_t v35 = v32[-1];
      uint16x8_t v36 = *v32;
      v30[-2] = v32[-3];
      v30[-1] = v34;
      *uint16x8_t v30 = v35;
      v30[1] = v36;
      uint64_t v32 = (uint16x8_t *)((char *)v32 + v31 * 2);
      uint16x8_t v30 = (uint16x8_t *)((char *)v30 + 2 * a3);
      --v33;
    }
    while (v33);
  }
  return result;
}

uint64_t sub_1D0CDAE08(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  int v5 = a2 + 4;
  if (result <= 0x11) {
    int v5 = a2;
  }
  long long v6 = v5[1];
  long long v7 = v5[2];
  long long v65 = a2[4 * (unint64_t)(result > 0x11)];
  v66[0] = v6;
  long long v8 = v5[3];
  v66[1] = v7;
  v66[2] = v8;
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      uint64_t v28 = 0;
      char v29 = 1;
      v30.i64[0] = 0x20002000200020;
      v30.i64[1] = 0x20002000200020;
      int v31 = v4;
      int16x8_t result = 14 * a3;
      do
      {
        char v32 = v29;
        uint64_t v33 = &a4[v28];
        uint16x8_t v34 = v33;
        uint64_t v35 = 8;
        do
        {
          int16x8_t v36 = vdupq_n_s16(v31 & 0x1F);
          int16x8_t v37 = vsubq_s16(v30, v36);
          *uint16x8_t v34 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v66[-1] + 2 * (v31 >> 5)), v37), *(int16x8_t *)((char *)&v66[-1] + 2 * (v31 >> 5) + 2), v36), 5uLL);
          v34[a3] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v66 + 2 * (v31 >> 5)), v37), *(int16x8_t *)((char *)v66 + 2 * (v31 >> 5) + 2), v36), 5uLL);
          v31 += v4;
          uint16x8_t v34 = (uint16x8_t *)((char *)v34 + 2 * a3);
          --v35;
        }
        while (v35);
        uint64_t v38 = 0;
        char v39 = 1;
        do
        {
          char v40 = v39;
          uint64_t v41 = (int16x8_t *)((char *)v33 + 2 * v38 * a3);
          int16x8_t v42 = *(int16x8_t *)((char *)v41 + 2 * a3);
          int16x8_t v43 = *(int16x8_t *)((char *)v41 + 4 * a3);
          int16x8_t v44 = *(int16x8_t *)((char *)v41 + 6 * a3);
          int16x8_t v45 = *(int16x8_t *)((char *)v41 + 8 * a3);
          int16x8_t v46 = *(int16x8_t *)((char *)v41 + 10 * a3);
          int16x8_t v47 = *(int16x8_t *)((char *)v41 + 12 * a3);
          int32x4_t v48 = (int32x4_t)vtrn1q_s16(*v41, v42);
          int32x4_t v49 = (int32x4_t)vtrn2q_s16(*v41, v42);
          int32x4_t v50 = (int32x4_t)vtrn1q_s16(v43, v44);
          int16x8_t v51 = *(int16x8_t *)((char *)v41 + 14 * a3);
          int32x4_t v52 = (int32x4_t)vtrn2q_s16(v43, v44);
          int64x2_t v53 = (int64x2_t)vtrn1q_s32(v48, v50);
          int64x2_t v54 = (int64x2_t)vtrn2q_s32(v48, v50);
          int64x2_t v55 = (int64x2_t)vtrn1q_s32(v49, v52);
          int64x2_t v56 = (int64x2_t)vtrn2q_s32(v49, v52);
          int32x4_t v57 = (int32x4_t)vtrn1q_s16(v45, v46);
          int32x4_t v58 = (int32x4_t)vtrn2q_s16(v45, v46);
          int32x4_t v59 = (int32x4_t)vtrn1q_s16(v47, v51);
          int32x4_t v60 = (int32x4_t)vtrn2q_s16(v47, v51);
          int64x2_t v61 = (int64x2_t)vtrn1q_s32(v57, v59);
          int64x2_t v62 = (int64x2_t)vtrn2q_s32(v57, v59);
          int64x2_t v63 = (int64x2_t)vtrn1q_s32(v58, v60);
          int64x2_t v64 = (int64x2_t)vtrn2q_s32(v58, v60);
          *(int64x2_t *)uint64_t v41 = vzip1q_s64(v53, v61);
          *(int64x2_t *)((char *)v41 + 2 * a3) = vzip1q_s64(v55, v63);
          *(int64x2_t *)((char *)v41 + 4 * a3) = vzip1q_s64(v54, v62);
          *(int64x2_t *)((char *)v41 + 6 * a3) = vzip1q_s64(v56, v64);
          *(int64x2_t *)((char *)v41 + 8 * a3) = vzip2q_s64(v53, v61);
          *(int64x2_t *)((char *)v41 + 10 * a3) = vzip2q_s64(v55, v63);
          *(int64x2_t *)((char *)v41 + 12 * a3) = vzip2q_s64(v54, v62);
          *(int64x2_t *)((char *)v41 + 14 * a3) = vzip2q_s64(v56, v64);
          uint64_t v38 = 8;
          char v39 = 0;
        }
        while ((v40 & 1) != 0);
        char v29 = 0;
        uint64_t v28 = 1;
      }
      while ((v32 & 1) != 0);
    }
    else
    {
      long long v9 = a4 + 1;
      uint64_t v10 = 16;
      v11.i64[0] = 0x20002000200020;
      v11.i64[1] = 0x20002000200020;
      int v12 = v4;
      do
      {
        int16x8_t v13 = vdupq_n_s16(v12 & 0x1F);
        int16x8_t v14 = vsubq_s16(v11, v13);
        uint16x8_t v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v66[-1] + 2 * (v12 >> 5)), v14), *(int16x8_t *)((char *)&v66[-1] + 2 * (v12 >> 5) + 2), v13), 5uLL);
        uint16x8_t v16 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v66 + 2 * (v12 >> 5)), v14), *(int16x8_t *)((char *)v66 + 2 * (v12 >> 5) + 2), v13), 5uLL);
        v9[-1] = v15;
        *long long v9 = v16;
        v12 += v4;
        long long v9 = (uint16x8_t *)((char *)v9 + 2 * a3);
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    int v17 = v4 >> 5;
    int v18 = 2 * v17;
    uint64_t v19 = 2 * v17;
    int16x8_t v20 = v66;
    uint64_t v21 = 2 * v18;
    unint64_t v22 = -2;
    do
    {
      uint16x8_t v23 = *(uint16x8_t *)((char *)v20 + v19 - 16);
      uint16x8_t v24 = *(uint16x8_t *)((char *)v20 + v19);
      int16x8_t v20 = (long long *)((char *)v20 + v21);
      long long v25 = *(v20 - 1);
      long long v26 = *v20;
      *a4 = v23;
      a4[1] = v24;
      uint16x8_t v27 = &a4->i8[2 * a3];
      *(_OWORD *)uint16x8_t v27 = v25;
      *((_OWORD *)v27 + 1) = v26;
      v22 += 2;
      a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
    }
    while (v22 < 0xE);
  }
  return result;
}

uint64_t sub_1D0CDB130(uint64_t result, int8x16_t *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  int v5 = a2 + 2;
  if (v4 < 0)
  {
    int v6 = 18 - result;
    if ((int)result >= 18) {
      int v6 = result - 18;
    }
    int8x16_t v44 = vqtbl1q_s8(a2[2 * (result < 0x12)], xmmword_1D0D80280[4 * (uint64_t)v6 + 3]);
  }
  if (result <= 0x11) {
    int v5 = a2;
  }
  int8x16_t v7 = a2[2 * (result > 0x11)];
  int8x16_t v8 = v5[1];
  v45[0] = v7;
  v45[1] = v8;
  v44.i16[7] = a2[-1].i16[7];
  if ((v4 & 0x1F) != 0)
  {
    uint64_t v9 = 8;
    v10.i64[0] = 0x20002000200020;
    v10.i64[1] = 0x20002000200020;
    int16x8_t v11 = (uint16x8_t *)a4;
    int v12 = v4;
    do
    {
      int16x8_t v13 = vdupq_n_s16(v12 & 0x1F);
      *int16x8_t v11 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v45 + 2 * (v12 >> 5)), vsubq_s16(v10, v13)), *(int16x8_t *)((char *)v45 + 2 * (v12 >> 5) + 2), v13), 5uLL);
      v12 += v4;
      int16x8_t v11 = (uint16x8_t *)((char *)v11 + 2 * a3);
      --v9;
    }
    while (v9);
    if (result < 0x12)
    {
      int16x8_t v14 = *(int16x8_t *)((char *)a4 + 2 * a3);
      int16x8_t v15 = *(int16x8_t *)((char *)a4 + 4 * a3);
      int16x8_t v16 = *(int16x8_t *)((char *)a4 + 6 * a3);
      int16x8_t v17 = *(int16x8_t *)((char *)a4 + 8 * a3);
      int16x8_t v18 = *(int16x8_t *)((char *)a4 + 10 * a3);
      int16x8_t v19 = *(int16x8_t *)((char *)a4 + 12 * a3);
      int32x4_t v20 = (int32x4_t)vtrn1q_s16(*a4, v14);
      int32x4_t v21 = (int32x4_t)vtrn2q_s16(*a4, v14);
      int32x4_t v22 = (int32x4_t)vtrn1q_s16(v15, v16);
      int16x8_t v23 = *(int16x8_t *)((char *)a4 + 14 * a3);
      int32x4_t v24 = (int32x4_t)vtrn2q_s16(v15, v16);
      int64x2_t v25 = (int64x2_t)vtrn1q_s32(v20, v22);
      int64x2_t v26 = (int64x2_t)vtrn2q_s32(v20, v22);
      int64x2_t v27 = (int64x2_t)vtrn1q_s32(v21, v24);
      int64x2_t v28 = (int64x2_t)vtrn2q_s32(v21, v24);
      int32x4_t v29 = (int32x4_t)vtrn1q_s16(v17, v18);
      int32x4_t v30 = (int32x4_t)vtrn2q_s16(v17, v18);
      int32x4_t v31 = (int32x4_t)vtrn1q_s16(v19, v23);
      int32x4_t v32 = (int32x4_t)vtrn2q_s16(v19, v23);
      int64x2_t v33 = (int64x2_t)vtrn1q_s32(v29, v31);
      int64x2_t v34 = (int64x2_t)vtrn2q_s32(v29, v31);
      int64x2_t v35 = (int64x2_t)vtrn1q_s32(v30, v32);
      int64x2_t v36 = (int64x2_t)vtrn2q_s32(v30, v32);
      *(int64x2_t *)a4 = vzip1q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 2 * a3) = vzip1q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 4 * a3) = vzip1q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 6 * a3) = vzip1q_s64(v28, v36);
      *(int64x2_t *)((char *)a4 + 8 * a3) = vzip2q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 10 * a3) = vzip2q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 12 * a3) = vzip2q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 14 * a3) = vzip2q_s64(v28, v36);
    }
  }
  else
  {
    if (v4 < 0)
    {
      int8x16_t v8 = v44;
      int8x16_t v37 = vextq_s8(v44, v7, 0xEuLL);
      int8x16_t v38 = vextq_s8(v44, v7, 0xCuLL);
      int8x16_t v39 = vextq_s8(v44, v7, 0xAuLL);
      int8x16_t v40 = vextq_s8(v44, v7, 8uLL);
      int8x16_t v41 = vextq_s8(v44, v7, 6uLL);
      int8x16_t v42 = vextq_s8(v44, v7, 4uLL);
      int8x16_t v43 = vextq_s8(v44, v7, 2uLL);
    }
    else
    {
      int8x16_t v37 = vextq_s8(v7, v8, 2uLL);
      int8x16_t v38 = vextq_s8(v7, v8, 4uLL);
      int8x16_t v39 = vextq_s8(v7, v8, 6uLL);
      int8x16_t v40 = vextq_s8(v7, v8, 8uLL);
      int8x16_t v41 = vextq_s8(v7, v8, 0xAuLL);
      int8x16_t v42 = vextq_s8(v7, v8, 0xCuLL);
      int8x16_t v43 = vextq_s8(v7, v8, 0xEuLL);
    }
    *a4 = (int16x8_t)v37;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v38;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v39;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v40;
    *(int8x16_t *)((char *)a4 + 8 * a3) = v41;
    *(int8x16_t *)((char *)a4 + 10 * a3) = v42;
    *(int8x16_t *)((char *)a4 + 12 * a3) = v43;
    *(int8x16_t *)((char *)a4 + 14 * a3) = v8;
  }
  return result;
}

uint64_t sub_1D0CDB3AC(uint64_t result, int8x16_t *a2, uint64_t a3, unint64_t *a4)
{
  int v4 = 18 - result;
  signed int v5 = byte_1D0D7FEBA[result];
  if ((int)result >= 18) {
    int v4 = result - 18;
  }
  int16x8_t v6 = (int16x8_t)a2[result > 0x11];
  if ((v5 & 0x1F) != 0)
  {
    if (v5 < 0)
    {
      int8x16_t v12 = a2[result < 0x12];
      v12.i64[1] = *(uint64_t *)((char *)&a2[-1].i64[1] + 6);
      int16x8_t v13 = (const double *)&xmmword_1D0D80280[4 * (uint64_t)v4 + 3].i64[1];
      int8x16_t v14 = (int8x16_t)vld1q_dup_f64(v13);
      int16x8_t v6 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(v12, v14), (int64x2_t)v6);
      unsigned int v7 = ~(v5 >> 4);
    }
    else
    {
      unsigned int v7 = (v5 >> 4) + 6;
    }
    int8x16_t v15 = *(int8x16_t *)((char *)&unk_1D0D80480 + 8 * v7);
    int8x16_t v16 = *(int8x16_t *)((char *)&unk_1D0D80480 + 8 * byte_1D0D804D8[v4 - 1]);
    v17.i64[0] = 0x202020202020202;
    v17.i64[1] = 0x202020202020202;
    int16x8_t v18 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v15, v17));
    int16x8_t v19 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v16, v17));
    int16x8_t v20 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, v15);
    int16x8_t v21 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, v16);
    v22.i64[0] = 0x1F001F001F001FLL;
    v22.i64[1] = 0x1F001F001F001FLL;
    int32x4_t v23 = (int32x4_t)vandq_s8((int8x16_t)vmull_s8(vdup_n_s8(v5), (int8x8_t)0x404030302020101), v22);
    int16x8_t v24 = (int16x8_t)vzip2q_s32(v23, v23);
    int16x8_t v25 = (int16x8_t)vzip1q_s32(v23, v23);
    v26.i64[0] = 0x20002000200020;
    v26.i64[1] = 0x20002000200020;
    int16x8_t v27 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v25, v18), vsubq_s16(v26, v25), v20), 5uLL);
    int16x8_t v6 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v24, v19), vsubq_s16(v26, v24), v21), 5uLL);
    if (result <= 0x11)
    {
      int16x8_t v28 = vzip1q_s16(v27, v6);
      int16x8_t v29 = vzip2q_s16(v27, v6);
      int16x8_t v27 = vzip1q_s16(v28, v29);
      int16x8_t v6 = vzip2q_s16(v28, v29);
    }
    *a4 = v27.i64[0];
    *(unint64_t *)((char *)a4 + 2 * a3) = v27.u64[1];
    *(unint64_t *)((char *)a4 + 4 * a3) = v6.i64[0];
  }
  else
  {
    if (result == 18)
    {
      int8x16_t v8 = a2[1];
      int16x8_t v6 = (int16x8_t)vqtbl1q_s8(*(int8x16_t *)((char *)a2 - 2), (int8x16_t)xmmword_1D0D7F330);
      unint64_t v9 = vextq_s8((int8x16_t)v6, v8, 0xEuLL).u64[0];
      unint64_t v10 = vextq_s8((int8x16_t)v6, v8, 0xCuLL).u64[0];
      unint64_t v11 = vextq_s8((int8x16_t)v6, v8, 0xAuLL).u64[0];
    }
    else
    {
      unint64_t v9 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 2uLL).u64[0];
      unint64_t v10 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL).u64[0];
      unint64_t v11 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 6uLL).u64[0];
    }
    *a4 = v9;
    *(unint64_t *)((char *)a4 + 2 * a3) = v10;
    *(unint64_t *)((char *)a4 + 4 * a3) = v11;
  }
  *(unint64_t *)((char *)a4 + 6 * a3) = v6.u64[1];
  return result;
}

int16x8_t sub_1D0CDB53C(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  signed int v5 = a4 + 4;
  do
  {
    int16x8_t v6 = (const __int16 *)(a2 + v4);
    int16x8_t result = vld1q_dup_s16(v6);
    v5[-4] = result;
    v5[-3] = result;
    v5[-2] = result;
    v5[-1] = result;
    *signed int v5 = result;
    v5[1] = result;
    v5[2] = result;
    v5[3] = result;
    v4 += 2;
    signed int v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 128);
  return result;
}

int16x8_t sub_1D0CDB574(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = 0;
  signed int v5 = a4 + 2;
  do
  {
    int16x8_t v6 = (const __int16 *)(a2 + v4);
    int16x8_t result = vld1q_dup_s16(v6);
    v5[-2] = result;
    v5[-1] = result;
    *signed int v5 = result;
    v5[1] = result;
    v4 += 2;
    signed int v5 = (int16x8_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 64);
  return result;
}

int16x8_t sub_1D0CDB5A4(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = vld1q_dup_s16(a2->i16);
  int16x8_t v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xFF00FF00FF00FFLL;
  v8.i64[1] = 0xFF00FF00FF00FFLL;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  unint64_t v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  unint64_t v10 = -1;
  unint64_t v11 = a4;
  do
  {
    int8x16_t v12 = v9 - 1;
    int16x8_t v13 = vld1q_dup_s16(v12);
    int16x8_t v14 = vld1q_dup_s16(v9);
    int8x16_t v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *int8x16_t v15 = v13;
    v15[1] = v13;
    unint64_t v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *unint64_t v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  int8x16_t v16 = &a2[1].i16[7];
  int16x8_t result = vld1q_dup_s16(v16);
  uint64_t v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

int16x8_t sub_1D0CDB648(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = *a2;
  v7.i64[0] = 0xFF00FF00FF00FFLL;
  v7.i64[1] = 0xFF00FF00FF00FFLL;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  int16x8_t result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x4_t sub_1D0CDB6E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x4_t v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xFF00FF00FF00FFLL;
  v7.i64[1] = 0xFF00FF00FF00FFLL;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  int16x4_t result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1D0CDB73C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[16];
  long long v5 = a2[17];
  long long v6 = a2[18];
  long long v7 = a2[19];
  long long v8 = a2[20];
  long long v9 = a2[21];
  unint64_t v10 = (_OWORD *)(a4 + 64);
  uint64_t v11 = 64;
  long long v12 = a2[22];
  long long v13 = a2[23];
  do
  {
    *(v10 - 4) = v4;
    *(v10 - 3) = v5;
    *(v10 - 2) = v6;
    *(v10 - 1) = v7;
    *unint64_t v10 = v8;
    v10[1] = v9;
    v10[2] = v12;
    v10[3] = v13;
    unint64_t v10 = (_OWORD *)((char *)v10 + 2 * a3);
    --v11;
  }
  while (v11);
}

void sub_1D0CDB778(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[8];
  long long v5 = a2[9];
  long long v6 = a2[10];
  long long v7 = a2[11];
  long long v8 = (_OWORD *)(a4 + 32);
  uint64_t v9 = 32;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *long long v8 = v6;
    v8[1] = v7;
    long long v8 = (_OWORD *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1D0CDB7A4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xFF00FF00FF00FFLL;
  v9.i64[1] = 0xFF00FF00FF00FFLL;
  int8x16_t v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  int8x16_t v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  long long v12 = v6;
  LOWORD(v12) = v10.i16[0];
  long long v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  uint64_t v14 = 7;
  do
  {
    int8x16_t v10 = vextq_s8(v10, v10, 2uLL);
    long long v15 = v6;
    LOWORD(v15) = v10.i16[0];
    int8x16_t v11 = vextq_s8(v11, v11, 2uLL);
    long long v16 = v6;
    LOWORD(v16) = v11.i16[0];
    int8x16_t v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *int8x16_t v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

double sub_1D0CDB854(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xFF00FF00FF00FFLL;
  v7.i64[1] = 0xFF00FF00FF00FFLL;
  int16x8_t v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  long long v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  long long v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  long long v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  long long v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  long long v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  long long v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  long long v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(void *)&double result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

int8x16_t sub_1D0CDB928(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xFF00FF00FF00FFLL;
  v6.i64[1] = 0xFF00FF00FF00FFLL;
  int8x16_t v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  int8x16_t v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F340);
  int8x16_t result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F350);
  *a4 = v8.i64[0];
  *(void *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(void *)((char *)a4 + 4 * a3) = result.i64[0];
  *(void *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

void sub_1D0CDB990(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  unint64_t v4 = 0;
  i16 = a2[1].i16;
  int16x8_t v6 = vld1q_dup_s16(i16);
  int8x16_t v7 = a2[3].i16;
  int16x8_t v8 = vld1q_dup_s16(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F2F0);
  int16x8_t v10 = a2[2];
  int16x8_t v11 = vshlq_n_s16(v10, 3uLL);
  int16x8_t v12 = v6;
  do
  {
    long long v13 = &a2->i16[v4];
    int16x8_t v14 = vld1q_dup_s16(v13++);
    int16x8_t v15 = vsubq_s16(v11, v10);
    *a4 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v15, v9), v12), v14, (int16x8_t)xmmword_1D0D7F2E0), 4uLL);
    int16x8_t v16 = vaddq_s16(v12, v6);
    int16x8_t v17 = vld1q_dup_s16(v13);
    int16x8_t v11 = vsubq_s16(v15, v10);
    *(uint16x8_t *)((char *)a4 + 2 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v11, v9), v16), v17, (int16x8_t)xmmword_1D0D7F2E0), 4uLL);
    int16x8_t v12 = vaddq_s16(v16, v6);
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
    BOOL v18 = v4 >= 6;
    v4 += 2;
  }
  while (!v18);
}

uint16x8_t sub_1D0CDBA28(uint64_t a1, int8x16x2_t *a2, uint64_t a3, void *a4)
{
  int8x16x2_t v9 = *a2;
  int64x2_t v4 = (int64x2_t)vmulq_s16((int16x8_t)vqtbl2q_s8(*a2, (int8x16_t)xmmword_1D0D7F360), (int16x8_t)xmmword_1D0D7F370);
  int16x8_t v5 = (int16x8_t)vdupq_laneq_s64(v4, 1);
  int16x8_t v6 = (int16x8_t)vdupq_lane_s64(v9.val[1].i64[0], 0);
  uint16x8_t v7 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1D0D7F380), (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_1D0D7F3A0, (int8x16_t)xmmword_1D0D7F380), v6), v5), (int16x8_t)vqtbl1q_s8(a2->val[0], (int8x16_t)xmmword_1D0D7F380), (int16x8_t)xmmword_1D0D7F3A0), 3uLL);
  uint16x8_t result = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16((int16x8_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1D0D7F390), (int16x8_t)vqtbl1q_s8((int8x16_t)xmmword_1D0D7F3A0, (int8x16_t)xmmword_1D0D7F390), v6), v5), (int16x8_t)vqtbl1q_s8(a2->val[0], (int8x16_t)xmmword_1D0D7F390), (int16x8_t)xmmword_1D0D7F3A0), 3uLL);
  *a4 = v7.i64[0];
  *(void *)((char *)a4 + 2 * a3) = v7.i64[1];
  *(void *)((char *)a4 + 4 * a3) = result.i64[0];
  *(void *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

int8x16_t sub_1D0CDBAC0(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int16x8_t v4 = a2[2];
  int16x8_t v5 = vaddq_s16(v4, *a2);
  int16x8_t v6 = vpaddq_s16(v5, v5);
  int16x8_t v7 = vpaddq_s16(v6, v6);
  uint16x8_t v8 = (uint16x8_t)vpaddq_s16(v7, v7);
  int16x8_t v9 = (int16x8_t)vrshrq_n_u16(v8, 4uLL);
  int16x8_t v10 = vaddq_s16(v9, v9);
  int16x8_t v11 = (int16x8_t)vrsraq_n_u16((uint16x8_t)v4, v8, 4uLL);
  int16x8_t v12 = (int16x8_t)vrsraq_n_u16(*(uint16x8_t *)a2, v8, 4uLL);
  uint16x8_t v13 = (uint16x8_t)vaddq_s16(v12, v10);
  v10.i16[0] = v12.i16[0];
  uint16x8_t v14 = vrshrq_n_u16((uint16x8_t)vaddq_s16(v11, v10), 2uLL);
  int8x16_t v15 = (int8x16_t)vrshrq_n_u16(v13, 2uLL);
  int8x16_t v16 = vextq_s8(v15, (int8x16_t)v9, 2uLL);
  *a4 = v14;
  *(int8x16_t *)((char *)a4 + 2 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1D0D7F3B0);
  *(int8x16_t *)((char *)a4 + 4 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1D0D7F3C0);
  *(int8x16_t *)((char *)a4 + 6 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1D0D7F3D0);
  *(int8x16_t *)((char *)a4 + 8 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1D0D7F3E0);
  *(int8x16_t *)((char *)a4 + 10 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1D0D7F3F0);
  int8x16_t result = vextq_s8(v15, (int8x16_t)v9, 0xEuLL);
  *(int8x16_t *)((char *)a4 + 12 * a3) = vqtbl1q_s8(v16, (int8x16_t)xmmword_1D0D7F400);
  *(int8x16_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

uint16x8_t sub_1D0CDBB9C(uint64_t a1, int16x8_t *a2, uint64_t a3, void *a4)
{
  int16x8_t v4 = a2[1];
  int16x8_t v5 = (int16x8_t)vdupq_lane_s64(vaddq_s16(v4, *a2).i64[0], 0);
  int16x8_t v6 = vpaddq_s16(v5, v5);
  uint16x8_t v7 = (uint16x8_t)vpaddq_s16(v6, v6);
  int16x8_t v8 = (int16x8_t)vrshrq_n_u16(v7, 3uLL);
  int16x8_t v9 = vaddq_s16(v8, v8);
  *(int16x4_t *)v4.i8 = vadd_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v4.i8);
  v4.i64[1] = v9.i64[0];
  int8x16_t v10 = (int8x16_t)vzip1q_s64((int64x2_t)vrsraq_n_u16(*(uint16x8_t *)a2, v7, 3uLL), (int64x2_t)v9);
  int16x8_t v11 = (int16x8_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_1D0D7F350);
  uint16x8_t result = vrshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_1D0D7F340), v4), 2uLL);
  uint16x8_t v13 = vrshrq_n_u16((uint16x8_t)vaddq_s16(v9, v11), 2uLL);
  *a4 = result.i64[0];
  *(void *)((char *)a4 + 2 * a3) = result.i64[1];
  *(void *)((char *)a4 + 4 * a3) = v13.i64[0];
  *(void *)((char *)a4 + 6 * a3) = v13.i64[1];
  return result;
}

int32x4_t sub_1D0CDBC14(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int v3 = a1[7].u16[7];
  int v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0) {
    int v4 = 2 * a1[3].u16[7] - (v3 + v2);
  }
  if (v4 > 7) {
    goto LABEL_7;
  }
  int v5 = a1[15].u16[7];
  int v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0) {
    int v6 = 2 * a1[11].u16[7] - (v5 + v2);
  }
  if (v6 < 8)
  {
    a2[-1].i16[7] = v2;
    int16x4_t v8 = vdup_n_s16(v5 - v2);
    int32x4_t result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    int32x4_t v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    int16x4_t v10 = vdup_n_s16(v3 - v2);
    int32x4_t v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    int32x4_t v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    int32x4_t v13 = vshll_n_s16(v8, 3uLL);
    int32x4_t v14 = vshll_n_s16(v10, 3uLL);
    int16x4_t v15 = vdup_n_s16(v2);
    int8x16_t v16 = a2 + 8;
    unint64_t v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *int8x16_t v16 = v18;
      v16[-8] = v19;
      int32x4_t result = vaddq_s32(result, v13);
      int32x4_t v9 = vaddq_s32(v9, v13);
      int32x4_t v11 = vaddq_s32(v11, v14);
      int32x4_t v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1D0CDBD08(a1, a2).u64[0];
  }
  return result;
}

uint16x8_t sub_1D0CDBD08(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int8x16_t v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[8].u16[0] + 2) >> 2;
  __int16 v4 = a1[7].i16[7];
  __int16 v5 = a1[15].i16[7];
  int8x16_t v6 = *a1;
  int8x16_t v7 = a1[8];
  int16x4_t v8 = a2 + 8;
  int32x4_t v9 = a1 + 9;
  unint64_t v10 = -8;
  int8x16_t v11 = v3;
  do
  {
    int8x16_t v12 = v7;
    int8x16_t v13 = v6;
    int8x16_t v6 = v9[-8];
    int8x16_t v14 = *v9++;
    int8x16_t v7 = v14;
    v8[-8] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v13, 0xEuLL), (uint16x8_t)vextq_s8(v13, v6, 2uLL)), (uint16x8_t)v13);
    v10 += 8;
    *v8++ = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v11, v12, 0xEuLL), (uint16x8_t)vextq_s8(v12, v14, 2uLL)), (uint16x8_t)v12);
    int8x16_t v3 = v13;
    int8x16_t v11 = v12;
  }
  while (v10 < 0x30);
  a2[7] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v13, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v6, 2uLL)), (uint16x8_t)v6);
  uint16x8_t result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v12, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[15] = result;
  a2[7].i16[7] = v4;
  a2[15].i16[7] = v5;
  return result;
}

uint16x8_t sub_1D0CDBDCC(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int8x16_t v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[4].u16[0] + 2) >> 2;
  __int16 v4 = a1[3].i16[7];
  __int16 v5 = a1[7].i16[7];
  int8x16_t v6 = *a1;
  int8x16_t v7 = a1[4];
  int16x4_t v8 = a2 + 4;
  int32x4_t v9 = a1 + 5;
  unint64_t v10 = -8;
  int8x16_t v11 = v3;
  do
  {
    int8x16_t v12 = v7;
    int8x16_t v13 = v6;
    int8x16_t v6 = v9[-4];
    int8x16_t v14 = *v9++;
    int8x16_t v7 = v14;
    v8[-4] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v13, 0xEuLL), (uint16x8_t)vextq_s8(v13, v6, 2uLL)), (uint16x8_t)v13);
    v10 += 8;
    *v8++ = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v11, v12, 0xEuLL), (uint16x8_t)vextq_s8(v12, v14, 2uLL)), (uint16x8_t)v12);
    int8x16_t v3 = v13;
    int8x16_t v11 = v12;
  }
  while (v10 < 0x10);
  a2[3] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v13, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v6, 2uLL)), (uint16x8_t)v6);
  uint16x8_t result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v12, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[7] = result;
  a2[3].i16[7] = v4;
  a2[7].i16[7] = v5;
  return result;
}

uint16x8_t sub_1D0CDBE90(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int8x16_t v3 = (int8x16_t)vdupq_n_s16(v2);
  a2[-1].i16[7] = (a1->u16[0] + 2 * v2 + a1[2].u16[0] + 2) >> 2;
  LOWORD(v2) = a1[1].i16[7];
  unsigned __int16 v4 = a1[3].u16[7];
  int8x16_t v5 = a1[1];
  int8x16_t v6 = a1[2];
  int8x16_t v7 = a1[3];
  uint16x8_t v8 = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, *a1, 0xEuLL), (uint16x8_t)vextq_s8(*a1, v5, 2uLL)), *(uint16x8_t *)a1);
  uint16x8_t result = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v3, v6, 0xEuLL), (uint16x8_t)vextq_s8(v6, v7, 2uLL)), (uint16x8_t)v6);
  uint16x8_t v10 = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(*a1, v5, 0xEuLL), (uint16x8_t)vextq_s8(v5, v5, 2uLL)), (uint16x8_t)v5);
  *a2 = v8;
  a2[1] = v10;
  a2[2] = result;
  a2[3] = vrhaddq_u16(vhaddq_u16((uint16x8_t)vextq_s8(v6, v7, 0xEuLL), (uint16x8_t)vextq_s8(v7, v7, 2uLL)), (uint16x8_t)v7);
  a2[1].i16[7] = v2;
  a2[3].i16[7] = v4;
  return result;
}

int16x8_t sub_1D0CDBF18(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  unsigned __int16 v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = vld1q_dup_s16(a2->i16);
  int16x8_t v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xFE00FE00FE00FE00;
  v8.i64[1] = 0xFE00FE00FE00FE00;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  int32x4_t v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  unint64_t v10 = -1;
  int8x16_t v11 = a4;
  do
  {
    int8x16_t v12 = v9 - 1;
    int16x8_t v13 = vld1q_dup_s16(v12);
    int16x8_t v14 = vld1q_dup_s16(v9);
    int16x4_t v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *int16x4_t v15 = v13;
    v15[1] = v13;
    int8x16_t v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *int8x16_t v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  int8x16_t v16 = &a2[1].i16[7];
  int16x8_t result = vld1q_dup_s16(v16);
  uint64_t v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

int16x8_t sub_1D0CDBFBC(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  unsigned __int16 v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = *a2;
  v7.i64[0] = 0xFE00FE00FE00FE00;
  v7.i64[1] = 0xFE00FE00FE00FE00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  int16x8_t result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x4_t sub_1D0CDC054(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned __int16 v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x4_t v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xFE00FE00FE00FE00;
  v7.i64[1] = 0xFE00FE00FE00FE00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  int16x4_t result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1D0CDC0B0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int16 v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xFE00FE00FE00FE00;
  v9.i64[1] = 0xFE00FE00FE00FE00;
  int8x16_t v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  int8x16_t v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  long long v12 = v6;
  LOWORD(v12) = v10.i16[0];
  long long v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  uint64_t v14 = 7;
  do
  {
    int8x16_t v10 = vextq_s8(v10, v10, 2uLL);
    long long v15 = v6;
    LOWORD(v15) = v10.i16[0];
    int8x16_t v11 = vextq_s8(v11, v11, 2uLL);
    long long v16 = v6;
    LOWORD(v16) = v11.i16[0];
    unint64_t v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *unint64_t v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

double sub_1D0CDC160(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int16 v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xFE00FE00FE00FE00;
  v7.i64[1] = 0xFE00FE00FE00FE00;
  int16x8_t v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  long long v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  long long v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  long long v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  long long v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  long long v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  long long v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  long long v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(void *)&double result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

int8x16_t sub_1D0CDC234(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned __int16 v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xFE00FE00FE00FE00;
  v6.i64[1] = 0xFE00FE00FE00FE00;
  int8x16_t v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  int8x16_t v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F340);
  int8x16_t result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F350);
  *a4 = v8.i64[0];
  *(void *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(void *)((char *)a4 + 4 * a3) = result.i64[0];
  *(void *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

int32x4_t sub_1D0CDC29C(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int v3 = a1[7].u16[7];
  int v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0) {
    int v4 = 2 * a1[3].u16[7] - (v3 + v2);
  }
  if (v4 > 0xF) {
    goto LABEL_7;
  }
  int v5 = a1[15].u16[7];
  int v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0) {
    int v6 = 2 * a1[11].u16[7] - (v5 + v2);
  }
  if (v6 < 0x10)
  {
    a2[-1].i16[7] = v2;
    int16x4_t v8 = vdup_n_s16(v5 - v2);
    int32x4_t result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    int32x4_t v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    int16x4_t v10 = vdup_n_s16(v3 - v2);
    int32x4_t v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    int32x4_t v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    int32x4_t v13 = vshll_n_s16(v8, 3uLL);
    int32x4_t v14 = vshll_n_s16(v10, 3uLL);
    int16x4_t v15 = vdup_n_s16(v2);
    long long v16 = a2 + 8;
    unint64_t v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *long long v16 = v18;
      v16[-8] = v19;
      int32x4_t result = vaddq_s32(result, v13);
      int32x4_t v9 = vaddq_s32(v9, v13);
      int32x4_t v11 = vaddq_s32(v11, v14);
      int32x4_t v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1D0CDBD08(a1, a2).u64[0];
  }
  return result;
}

int16x8_t sub_1D0CDC390(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = vld1q_dup_s16(a2->i16);
  int16x8_t v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xFC00FC00FC00FC00;
  v8.i64[1] = 0xFC00FC00FC00FC00;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  int32x4_t v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  unint64_t v10 = -1;
  int32x4_t v11 = a4;
  do
  {
    int32x4_t v12 = v9 - 1;
    int16x8_t v13 = vld1q_dup_s16(v12);
    int16x8_t v14 = vld1q_dup_s16(v9);
    int16x4_t v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *int16x4_t v15 = v13;
    v15[1] = v13;
    int32x4_t v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *int32x4_t v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  long long v16 = &a2[1].i16[7];
  int16x8_t result = vld1q_dup_s16(v16);
  uint64_t v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

int16x8_t sub_1D0CDC434(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = *a2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  int16x8_t result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x4_t sub_1D0CDC4CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x4_t v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  int16x4_t result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1D0CDC528(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xFC00FC00FC00FC00;
  v9.i64[1] = 0xFC00FC00FC00FC00;
  int8x16_t v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  int8x16_t v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  long long v12 = v6;
  LOWORD(v12) = v10.i16[0];
  long long v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  uint64_t v14 = 7;
  do
  {
    int8x16_t v10 = vextq_s8(v10, v10, 2uLL);
    long long v15 = v6;
    LOWORD(v15) = v10.i16[0];
    int8x16_t v11 = vextq_s8(v11, v11, 2uLL);
    long long v16 = v6;
    LOWORD(v16) = v11.i16[0];
    unint64_t v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *unint64_t v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

double sub_1D0CDC5D8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  int16x8_t v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  long long v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  long long v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  long long v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  long long v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  long long v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  long long v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  long long v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(void *)&double result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

int8x16_t sub_1D0CDC6AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xFC00FC00FC00FC00;
  v6.i64[1] = 0xFC00FC00FC00FC00;
  int8x16_t v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  int8x16_t v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F340);
  int8x16_t result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F350);
  *a4 = v8.i64[0];
  *(void *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(void *)((char *)a4 + 4 * a3) = result.i64[0];
  *(void *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

int32x4_t sub_1D0CDC714(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int v3 = a1[7].u16[7];
  int v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0) {
    int v4 = 2 * a1[3].u16[7] - (v3 + v2);
  }
  if (v4 > 0x1F) {
    goto LABEL_7;
  }
  int v5 = a1[15].u16[7];
  int v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0) {
    int v6 = 2 * a1[11].u16[7] - (v5 + v2);
  }
  if (v6 < 0x20)
  {
    a2[-1].i16[7] = v2;
    int16x4_t v8 = vdup_n_s16(v5 - v2);
    int32x4_t result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    int32x4_t v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    int16x4_t v10 = vdup_n_s16(v3 - v2);
    int32x4_t v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    int32x4_t v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    int32x4_t v13 = vshll_n_s16(v8, 3uLL);
    int32x4_t v14 = vshll_n_s16(v10, 3uLL);
    int16x4_t v15 = vdup_n_s16(v2);
    long long v16 = a2 + 8;
    unint64_t v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *long long v16 = v18;
      v16[-8] = v19;
      int32x4_t result = vaddq_s32(result, v13);
      int32x4_t v9 = vaddq_s32(v9, v13);
      int32x4_t v11 = vaddq_s32(v11, v14);
      int32x4_t v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1D0CDBD08(a1, a2).u64[0];
  }
  return result;
}

int16x8_t sub_1D0CDC808(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = vld1q_dup_s16(a2->i16);
  int16x8_t v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xF800F800F800F800;
  v8.i64[1] = 0xF800F800F800F800;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  int32x4_t v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  unint64_t v10 = -1;
  int32x4_t v11 = a4;
  do
  {
    int32x4_t v12 = v9 - 1;
    int16x8_t v13 = vld1q_dup_s16(v12);
    int16x8_t v14 = vld1q_dup_s16(v9);
    int16x4_t v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *int16x4_t v15 = v13;
    v15[1] = v13;
    int32x4_t v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *int32x4_t v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  long long v16 = &a2[1].i16[7];
  int16x8_t result = vld1q_dup_s16(v16);
  uint64_t v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

int16x8_t sub_1D0CDC8AC(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = *a2;
  v7.i64[0] = 0xF800F800F800F800;
  v7.i64[1] = 0xF800F800F800F800;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  int16x8_t result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x4_t sub_1D0CDC944(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x4_t v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xF800F800F800F800;
  v7.i64[1] = 0xF800F800F800F800;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  int16x4_t result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1D0CDC9A0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xF800F800F800F800;
  v9.i64[1] = 0xF800F800F800F800;
  int8x16_t v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  int8x16_t v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  long long v12 = v6;
  LOWORD(v12) = v10.i16[0];
  long long v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  uint64_t v14 = 7;
  do
  {
    int8x16_t v10 = vextq_s8(v10, v10, 2uLL);
    long long v15 = v6;
    LOWORD(v15) = v10.i16[0];
    int8x16_t v11 = vextq_s8(v11, v11, 2uLL);
    long long v16 = v6;
    LOWORD(v16) = v11.i16[0];
    unint64_t v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *unint64_t v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

double sub_1D0CDCA50(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xF800F800F800F800;
  v7.i64[1] = 0xF800F800F800F800;
  int16x8_t v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  long long v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  long long v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  long long v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  long long v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  long long v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  long long v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  long long v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(void *)&double result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

int8x16_t sub_1D0CDCB24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xF800F800F800F800;
  v6.i64[1] = 0xF800F800F800F800;
  int8x16_t v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  int8x16_t v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F340);
  int8x16_t result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F350);
  *a4 = v8.i64[0];
  *(void *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(void *)((char *)a4 + 4 * a3) = result.i64[0];
  *(void *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

int32x4_t sub_1D0CDCB8C(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int v3 = a1[7].u16[7];
  int v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0) {
    int v4 = 2 * a1[3].u16[7] - (v3 + v2);
  }
  if (v4 > 0x3F) {
    goto LABEL_7;
  }
  int v5 = a1[15].u16[7];
  int v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0) {
    int v6 = 2 * a1[11].u16[7] - (v5 + v2);
  }
  if (v6 < 0x40)
  {
    a2[-1].i16[7] = v2;
    int16x4_t v8 = vdup_n_s16(v5 - v2);
    int32x4_t result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    int32x4_t v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    int16x4_t v10 = vdup_n_s16(v3 - v2);
    int32x4_t v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    int32x4_t v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    int32x4_t v13 = vshll_n_s16(v8, 3uLL);
    int32x4_t v14 = vshll_n_s16(v10, 3uLL);
    int16x4_t v15 = vdup_n_s16(v2);
    long long v16 = a2 + 8;
    unint64_t v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *long long v16 = v18;
      v16[-8] = v19;
      int32x4_t result = vaddq_s32(result, v13);
      int32x4_t v9 = vaddq_s32(v9, v13);
      int32x4_t v11 = vaddq_s32(v11, v14);
      int32x4_t v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1D0CDBD08(a1, a2).u64[0];
  }
  return result;
}

uint64_t sub_1D0CDCC80(uint64_t result, uint64_t a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v4 = v81;
  int v5 = byte_1D0D7FEBA[result];
  uint64_t v6 = a2 + 256;
  if (result <= 0x11) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = a2 + 256;
  }
  if (result > 0x11) {
    uint64_t v6 = a2;
  }
  if (v5 < 0)
  {
    int v9 = byte_1D0D7FEBA[(int)result];
    if (v9 < 0)
    {
      uint64_t v10 = 2 * byte_1D0D7FEBA[(int)result];
      int v11 = word_1D0D7FFE0[(int)result - 11];
      int v12 = 2 * v9 * v11 + 128;
      unint64_t v8 = 64;
      do
      {
        v81[v10 - 1] = *(_WORD *)(v6 + 2 * ((v12 >> 8) - 1));
        v12 += v11;
        BOOL v13 = __CFADD__(v10++, 1);
      }
      while (!v13);
    }
    else
    {
      unint64_t v8 = 64;
    }
  }
  else
  {
    unint64_t v8 = 128;
  }
  uint64_t v14 = 0;
  for (unint64_t i = 0; i < v8; i += 32)
  {
    long long v16 = &v79[v14];
    long long v17 = *(_OWORD *)(v7 + v14 + 16);
    v16[9] = *(_OWORD *)(v7 + v14);
    v16[10] = v17;
    int64x2_t v18 = *(int64x2_t *)(v7 + v14 + 32);
    int64x2_t v19 = *(int64x2_t *)(v7 + v14 + 48);
    v16[11] = v18;
    v16[12] = v19;
    v14 += 64;
  }
  __int16 v80 = *(_WORD *)(a2 - 2);
  if ((v5 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      unint64_t v39 = 0;
      int32x4_t result = 32;
      int8x16_t v40 = a4;
      int v41 = v5;
      do
      {
        uint64_t v42 = 0;
        int8x16_t v43 = &a4[v39];
        do
        {
          uint64_t v44 = 0;
          v18.i32[0] = v41 & 0x1F;
          v19.i32[0] = 32 - v18.i32[0];
          char v45 = 1;
          do
          {
            uint64_t v46 = &v81[v44 + ((uint64_t)v41 >> 5)];
            uint64_t v47 = v44 + v42;
            *(int16x8_t *)((char *)v43 + 2 * v47 * a3) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v46 + 1), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)v46, *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v46 + 1), *(uint16x4_t *)v18.i8, 0), *(uint16x8_t *)v46, *(uint16x4_t *)v19.i8, 0), 5uLL);
            char v48 = v45;
            *(int16x8_t *)((char *)v43 + 2 * (v47 + 8) * a3) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v46 + 9), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v46 + 8), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v46 + 9), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v46 + 1), *(uint16x4_t *)v19.i8, 0), 5uLL);
            *(int16x8_t *)((char *)v43 + 2 * (v47 + 16) * a3) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v46 + 17), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v46 + 16), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v46 + 17), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v46 + 2), *(uint16x4_t *)v19.i8, 0), 5uLL);
            *(int16x8_t *)((char *)v43 + 2 * (v47 + 24) * a3) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v46 + 25), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v46 + 24), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v46 + 25), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v46 + 3), *(uint16x4_t *)v19.i8, 0), 5uLL);
            uint64_t v44 = 32;
            char v45 = 0;
          }
          while ((v48 & 1) != 0);
          ++v42;
          v41 += v5;
        }
        while (v42 != 8);
        unint64_t v49 = -8;
        int32x4_t v50 = v40;
        do
        {
          int16x8_t v51 = *(int16x8_t *)((char *)v50 + 2 * a3);
          int16x8_t v52 = *(int16x8_t *)((char *)v50 + 4 * a3);
          int16x8_t v53 = *(int16x8_t *)((char *)v50 + 6 * a3);
          int16x8_t v54 = *(int16x8_t *)((char *)v50 + 8 * a3);
          int16x8_t v55 = *(int16x8_t *)((char *)v50 + 10 * a3);
          int16x8_t v56 = *(int16x8_t *)((char *)v50 + 12 * a3);
          int32x4_t v57 = (int32x4_t)vtrn1q_s16(*v50, v51);
          int32x4_t v58 = (int32x4_t)vtrn2q_s16(*v50, v51);
          int32x4_t v59 = (int32x4_t)vtrn1q_s16(v52, v53);
          int16x8_t v60 = *(int16x8_t *)((char *)v50 + 14 * a3);
          int32x4_t v61 = (int32x4_t)vtrn2q_s16(v52, v53);
          int64x2_t v62 = (int64x2_t)vtrn1q_s32(v57, v59);
          int64x2_t v63 = (int64x2_t)vtrn2q_s32(v57, v59);
          int64x2_t v64 = (int64x2_t)vtrn1q_s32(v58, v61);
          int64x2_t v65 = (int64x2_t)vtrn2q_s32(v58, v61);
          int32x4_t v66 = (int32x4_t)vtrn1q_s16(v54, v55);
          int32x4_t v67 = (int32x4_t)vtrn2q_s16(v54, v55);
          int32x4_t v68 = (int32x4_t)vtrn1q_s16(v56, v60);
          int32x4_t v69 = (int32x4_t)vtrn2q_s16(v56, v60);
          int64x2_t v70 = (int64x2_t)vtrn1q_s32(v66, v68);
          int64x2_t v71 = (int64x2_t)vtrn2q_s32(v66, v68);
          int64x2_t v72 = (int64x2_t)vtrn1q_s32(v67, v69);
          int64x2_t v73 = (int64x2_t)vtrn2q_s32(v67, v69);
          int64x2_t v74 = vzip1q_s64(v62, v70);
          int64x2_t v75 = vzip2q_s64(v62, v70);
          int64x2_t v76 = vzip1q_s64(v64, v72);
          int64x2_t v77 = vzip2q_s64(v64, v72);
          int64x2_t v78 = vzip1q_s64(v63, v71);
          int16x8_t *v50 = (int16x8_t)v74;
          *(int64x2_t *)((char *)v50 + 2 * a3) = v76;
          int64x2_t v19 = vzip2q_s64(v63, v71);
          *(int64x2_t *)((char *)v50 + 4 * a3) = v78;
          *(int64x2_t *)((char *)v50 + 6 * a3) = vzip1q_s64(v65, v73);
          *(int64x2_t *)((char *)v50 + 8 * a3) = v75;
          *(int64x2_t *)((char *)v50 + 10 * a3) = v77;
          *(int64x2_t *)((char *)v50 + 12 * a3) = v19;
          int64x2_t v18 = vzip2q_s64(v65, v73);
          *(int64x2_t *)((char *)v50 + 14 * a3) = v18;
          v49 += 8;
          v50 += a3;
        }
        while (v49 < 0x38);
        ++v40;
        BOOL v13 = v39++ >= 7;
      }
      while (!v13);
    }
    else
    {
      uint64_t v20 = 0;
      int v21 = v5;
      do
      {
        uint64_t v22 = 0;
        v18.i32[0] = v21 & 0x1F;
        v19.i32[0] = 32 - v18.i32[0];
        char v23 = 1;
        do
        {
          int16x8_t v24 = &v81[v22 * 8 + ((uint64_t)v21 >> 5)];
          uint64_t v25 = (uint64_t)a4[v22].i64 + 2 * v20 * a3;
          int16x8_t v26 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v24 + 9), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v24 + 8), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v24 + 9), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v24 + 1), *(uint16x4_t *)v19.i8, 0), 5uLL);
          *(int16x8_t *)uint64_t v25 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v24 + 1), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)v24, *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v24 + 1), *(uint16x4_t *)v18.i8, 0), *(uint16x8_t *)v24, *(uint16x4_t *)v19.i8, 0), 5uLL);
          *(int16x8_t *)(v25 + 16) = v26;
          int16x8_t v27 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v24 + 17), *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)(v24 + 16), *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v24 + 17), *(uint16x4_t *)v18.i8, 0), *((uint16x8_t *)v24 + 2), *(uint16x4_t *)v19.i8, 0), 5uLL);
          uint16x8_t v28 = *((uint16x8_t *)v24 + 3);
          uint16x8_t v29 = *(uint16x8_t *)(v24 + 25);
          LOBYTE(v24) = v23;
          *(int16x8_t *)(v25 + 32) = v27;
          *(int16x8_t *)(v25 + 48) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v18.i8, 0), *(uint16x4_t *)v28.i8, *(uint16x4_t *)v19.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v29, *(uint16x4_t *)v18.i8, 0), v28, *(uint16x4_t *)v19.i8, 0), 5uLL);
          uint64_t v22 = 4;
          char v23 = 0;
        }
        while ((v24 & 1) != 0);
        ++v20;
        v21 += v5;
      }
      while (v20 != 64);
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (uint64_t)v5 >> 5;
    do
    {
      uint64_t v32 = 0;
      char v33 = 1;
      v4 += v31;
      do
      {
        int64x2_t v34 = &v4[v32 * 8];
        long long v35 = v34[1];
        long long v36 = v34[2];
        long long v37 = v34[3];
        int8x16_t v38 = &a4[v32].i8[2 * v30 * a3];
        *(_OWORD *)int8x16_t v38 = *v34;
        *((_OWORD *)v38 + 1) = v35;
        LOBYTE(v34) = v33;
        *((_OWORD *)v38 + 2) = v36;
        *((_OWORD *)v38 + 3) = v37;
        uint64_t v32 = 4;
        char v33 = 0;
      }
      while ((v34 & 1) != 0);
      ++v30;
    }
    while (v30 != 64);
  }
  return result;
}

uint64_t sub_1D0CDD104(uint64_t result, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  int v5 = a2 + 8;
  if (result <= 0x11) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a2 + 8;
  }
  if (v4 < 0)
  {
    uint64_t v8 = 0;
    if (result > 0x11) {
      int v5 = a2;
    }
    long long v9 = a2[8 * (unint64_t)(result < 0x12)];
    long long v10 = v5[1];
    long long v11 = v5[2];
    long long v12 = v5[3];
    if ((int)result >= 18) {
      int v13 = result - 18;
    }
    else {
      int v13 = 18 - result;
    }
    uint64_t v14 = &xmmword_1D0D80280[4 * (uint64_t)v13];
    unint64_t v7 = 32;
    do
    {
      *(int8x16_t *)&v77[v8 * 16 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, v14[v8]);
      ++v8;
    }
    while (v8 != 4);
  }
  else
  {
    unint64_t v7 = 64;
  }
  uint64_t v15 = 0;
  for (unint64_t i = 0; i < v7; i += 32)
  {
    long long v17 = &v77[v15 * 16];
    long long v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    long long v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    v17[8] = v19;
    v15 += 4;
  }
  __int16 v78 = *((_WORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      unint64_t v36 = 0;
      uint64_t v37 = 4 * a3;
      uint64_t v38 = 6 * a3;
      uint64_t v39 = 3 * a3;
      uint64_t v40 = 2 * a3;
      int32x4_t result = 32 * a3;
      uint64_t v41 = a3;
      uint64_t v42 = 12 * a3;
      uint64_t v43 = 10 * a3;
      uint64_t v44 = 8 * a3;
      int v45 = v4;
      uint64_t v46 = 14 * a3;
      do
      {
        uint64_t v47 = a4;
        uint64_t v48 = 8;
        do
        {
          uint16x8_t v49 = (uint16x8_t)vdupq_n_s16(32 - (v45 & 0x1Fu));
          uint16x8_t v50 = (uint16x8_t)vdupq_n_s16(v45 & 0x1F);
          *uint64_t v47 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v45 >> 5) + 1], *(uint16x4_t *)v50.i8), *(uint16x4_t *)&v79[v45 >> 5], *(uint16x4_t *)v49.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v45 >> 5) + 1], v50), *(uint16x8_t *)&v79[v45 >> 5], v49), 5uLL);
          v47[v41] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v45 >> 5) + 9], *(uint16x4_t *)v50.i8), *(uint16x4_t *)&v79[(v45 >> 5) + 8], *(uint16x4_t *)v49.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v45 >> 5) + 9], v50), *(uint16x8_t *)&v79[(v45 >> 5) + 8], v49), 5uLL);
          *(int16x8_t *)((char *)v47 + result) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v45 >> 5) + 17], *(uint16x4_t *)v50.i8), *(uint16x4_t *)&v79[(v45 >> 5) + 16], *(uint16x4_t *)v49.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v45 >> 5) + 17], v50), *(uint16x8_t *)&v79[(v45 >> 5) + 16], v49), 5uLL);
          v47[v39] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v45 >> 5) + 25], *(uint16x4_t *)v50.i8), *(uint16x4_t *)&v79[(v45 >> 5) + 24], *(uint16x4_t *)v49.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v45 >> 5) + 25], v50), *(uint16x8_t *)&v79[(v45 >> 5) + 24], v49), 5uLL);
          v45 += v4;
          uint64_t v47 = (int16x8_t *)((char *)v47 + v40);
          --v48;
        }
        while (v48);
        unint64_t v51 = -8;
        int16x8_t v52 = a4;
        do
        {
          int16x8_t v53 = *(int16x8_t *)((char *)v52 + v40);
          int16x8_t v54 = *(int16x8_t *)((char *)v52 + v37);
          int16x8_t v55 = *(int16x8_t *)((char *)v52 + v38);
          int16x8_t v56 = *(int16x8_t *)((char *)v52 + v44);
          int16x8_t v57 = *(int16x8_t *)((char *)v52 + v43);
          int16x8_t v58 = *(int16x8_t *)((char *)v52 + v42);
          int32x4_t v59 = (int32x4_t)vtrn1q_s16(*v52, v53);
          int32x4_t v60 = (int32x4_t)vtrn2q_s16(*v52, v53);
          int32x4_t v61 = (int32x4_t)vtrn1q_s16(v54, v55);
          int16x8_t v62 = *(int16x8_t *)((char *)v52 + v46);
          int32x4_t v63 = (int32x4_t)vtrn2q_s16(v54, v55);
          int64x2_t v64 = (int64x2_t)vtrn1q_s32(v59, v61);
          int64x2_t v65 = (int64x2_t)vtrn2q_s32(v59, v61);
          int64x2_t v66 = (int64x2_t)vtrn1q_s32(v60, v63);
          int64x2_t v67 = (int64x2_t)vtrn2q_s32(v60, v63);
          int32x4_t v68 = (int32x4_t)vtrn1q_s16(v56, v57);
          int32x4_t v69 = (int32x4_t)vtrn2q_s16(v56, v57);
          int32x4_t v70 = (int32x4_t)vtrn1q_s16(v58, v62);
          int32x4_t v71 = (int32x4_t)vtrn2q_s16(v58, v62);
          int64x2_t v72 = (int64x2_t)vtrn1q_s32(v68, v70);
          int64x2_t v73 = (int64x2_t)vtrn2q_s32(v68, v70);
          int64x2_t v74 = (int64x2_t)vtrn1q_s32(v69, v71);
          int64x2_t v75 = (int64x2_t)vtrn2q_s32(v69, v71);
          *(int64x2_t *)int16x8_t v52 = vzip1q_s64(v64, v72);
          *(int64x2_t *)((char *)v52 + v40) = vzip1q_s64(v66, v74);
          *(int64x2_t *)((char *)v52 + v37) = vzip1q_s64(v65, v73);
          *(int64x2_t *)((char *)v52 + v38) = vzip1q_s64(v67, v75);
          *(int64x2_t *)((char *)v52 + v44) = vzip2q_s64(v64, v72);
          *(int64x2_t *)((char *)v52 + v43) = vzip2q_s64(v66, v74);
          *(int64x2_t *)((char *)v52 + v42) = vzip2q_s64(v65, v73);
          *(int64x2_t *)((char *)v52 + v46) = vzip2q_s64(v67, v75);
          v51 += 8;
          int16x8_t v52 = (int16x8_t *)((char *)v52 + v41 * 16);
        }
        while (v51 < 0x18);
        ++a4;
        BOOL v76 = v36 >= 0x18;
        v36 += 8;
      }
      while (!v76);
    }
    else
    {
      uint64_t v20 = a4 + 2;
      uint64_t v21 = 32;
      int v22 = v4;
      do
      {
        uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(32 - (v22 & 0x1Fu));
        uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(v22 & 0x1F);
        int16x8_t v25 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v22 >> 5) + 9], *(uint16x4_t *)v24.i8), *(uint16x4_t *)&v79[(v22 >> 5) + 8], *(uint16x4_t *)v23.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v22 >> 5) + 9], v24), *(uint16x8_t *)&v79[(v22 >> 5) + 8], v23), 5uLL);
        v20[-2] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v22 >> 5) + 1], *(uint16x4_t *)v24.i8), *(uint16x4_t *)&v79[v22 >> 5], *(uint16x4_t *)v23.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v22 >> 5) + 1], v24), *(uint16x8_t *)&v79[v22 >> 5], v23), 5uLL);
        v20[-1] = v25;
        int16x8_t v26 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)&v79[(v22 >> 5) + 17], *(uint16x4_t *)v24.i8), *(uint16x4_t *)&v79[(v22 >> 5) + 16], *(uint16x4_t *)v23.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v79[(v22 >> 5) + 17], v24), *(uint16x8_t *)&v79[(v22 >> 5) + 16], v23), 5uLL);
        int32x4_t result = (uint64_t)&v79[(v22 >> 5) + 24];
        int16x8_t v27 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)(result + 2), *(uint16x4_t *)v24.i8), *(uint16x4_t *)result, *(uint16x4_t *)v23.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)(result + 2), v24), *(uint16x8_t *)result, v23), 5uLL);
        *uint64_t v20 = v26;
        v20[1] = v27;
        v22 += v4;
        uint64_t v20 = (int16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    int v28 = v4 >> 5;
    uint16x8_t v29 = a4 + 2;
    uint64_t v30 = v28;
    uint64_t v31 = (int16x8_t *)&v79[v30 + 24];
    uint64_t v32 = 32;
    do
    {
      int16x8_t v33 = v31[-2];
      int16x8_t v34 = v31[-1];
      int16x8_t v35 = *v31;
      v29[-2] = v31[-3];
      v29[-1] = v33;
      *uint16x8_t v29 = v34;
      v29[1] = v35;
      uint64_t v31 = (int16x8_t *)((char *)v31 + v30 * 2);
      uint16x8_t v29 = (int16x8_t *)((char *)v29 + 2 * a3);
      --v32;
    }
    while (v32);
  }
  return result;
}

uint64_t sub_1D0CDD54C(uint64_t result, _OWORD *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  if (result <= 0x11) {
    int v5 = a2;
  }
  else {
    int v5 = a2 + 4;
  }
  uint64_t v6 = v61;
  long long v7 = v5[1];
  long long v8 = v5[2];
  long long v60 = a2[4 * (unint64_t)(result > 0x11)];
  v61[0] = v7;
  long long v9 = v5[3];
  v61[1] = v8;
  v61[2] = v9;
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      uint64_t v25 = 0;
      char v26 = 1;
      LODWORD(result) = v4;
      do
      {
        char v27 = v26;
        int v28 = &a4[v25];
        uint16x8_t v29 = v28;
        uint64_t v30 = 8;
        do
        {
          uint16x8_t v31 = (uint16x8_t)vdupq_n_s16(32 - (result & 0x1F));
          uint16x8_t v32 = (uint16x8_t)vdupq_n_s16(result & 0x1F);
          *uint16x8_t v29 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v61[-1] + 2 * ((int)result >> 5) + 2), *(uint16x4_t *)v32.i8), *(uint16x4_t *)((char *)&v61[-1] + 2 * ((int)result >> 5)), *(uint16x4_t *)v31.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v61[-1] + 2 * ((int)result >> 5) + 2), v32), *(uint16x8_t *)((char *)&v61[-1] + 2 * ((int)result >> 5)), v31), 5uLL);
          v29[a3] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v61 + 2 * ((int)result >> 5) + 2), *(uint16x4_t *)v32.i8), *(uint16x4_t *)((char *)v61 + 2 * ((int)result >> 5)), *(uint16x4_t *)v31.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v61 + 2 * ((int)result >> 5) + 2), v32), *(uint16x8_t *)((char *)v61 + 2 * ((int)result >> 5)), v31), 5uLL);
          int32x4_t result = (result + v4);
          uint16x8_t v29 = (int16x8_t *)((char *)v29 + 2 * a3);
          --v30;
        }
        while (v30);
        uint64_t v33 = 0;
        char v34 = 1;
        do
        {
          char v35 = v34;
          unint64_t v36 = (int16x8_t *)((char *)v28 + 2 * v33 * a3);
          int16x8_t v37 = *(int16x8_t *)((char *)v36 + 2 * a3);
          int16x8_t v38 = *(int16x8_t *)((char *)v36 + 4 * a3);
          int16x8_t v39 = *(int16x8_t *)((char *)v36 + 6 * a3);
          int16x8_t v40 = *(int16x8_t *)((char *)v36 + 8 * a3);
          int16x8_t v41 = *(int16x8_t *)((char *)v36 + 10 * a3);
          int16x8_t v42 = *(int16x8_t *)((char *)v36 + 12 * a3);
          int32x4_t v43 = (int32x4_t)vtrn1q_s16(*v36, v37);
          int32x4_t v44 = (int32x4_t)vtrn2q_s16(*v36, v37);
          int32x4_t v45 = (int32x4_t)vtrn1q_s16(v38, v39);
          int16x8_t v46 = *(int16x8_t *)((char *)v36 + 14 * a3);
          int32x4_t v47 = (int32x4_t)vtrn2q_s16(v38, v39);
          int64x2_t v48 = (int64x2_t)vtrn1q_s32(v43, v45);
          int64x2_t v49 = (int64x2_t)vtrn2q_s32(v43, v45);
          int64x2_t v50 = (int64x2_t)vtrn1q_s32(v44, v47);
          int64x2_t v51 = (int64x2_t)vtrn2q_s32(v44, v47);
          int32x4_t v52 = (int32x4_t)vtrn1q_s16(v40, v41);
          int32x4_t v53 = (int32x4_t)vtrn2q_s16(v40, v41);
          int32x4_t v54 = (int32x4_t)vtrn1q_s16(v42, v46);
          int32x4_t v55 = (int32x4_t)vtrn2q_s16(v42, v46);
          int64x2_t v56 = (int64x2_t)vtrn1q_s32(v52, v54);
          int64x2_t v57 = (int64x2_t)vtrn2q_s32(v52, v54);
          int64x2_t v58 = (int64x2_t)vtrn1q_s32(v53, v55);
          int64x2_t v59 = (int64x2_t)vtrn2q_s32(v53, v55);
          *(int64x2_t *)unint64_t v36 = vzip1q_s64(v48, v56);
          *(int64x2_t *)((char *)v36 + 2 * a3) = vzip1q_s64(v50, v58);
          *(int64x2_t *)((char *)v36 + 4 * a3) = vzip1q_s64(v49, v57);
          *(int64x2_t *)((char *)v36 + 6 * a3) = vzip1q_s64(v51, v59);
          *(int64x2_t *)((char *)v36 + 8 * a3) = vzip2q_s64(v48, v56);
          *(int64x2_t *)((char *)v36 + 10 * a3) = vzip2q_s64(v50, v58);
          *(int64x2_t *)((char *)v36 + 12 * a3) = vzip2q_s64(v49, v57);
          *(int64x2_t *)((char *)v36 + 14 * a3) = vzip2q_s64(v51, v59);
          uint64_t v33 = 8;
          char v34 = 0;
        }
        while ((v35 & 1) != 0);
        char v26 = 0;
        uint64_t v25 = 1;
      }
      while ((v27 & 1) != 0);
    }
    else
    {
      long long v10 = a4 + 1;
      uint64_t v11 = 16;
      int v12 = v4;
      do
      {
        uint16x8_t v13 = (uint16x8_t)vdupq_n_s16(32 - (v12 & 0x1Fu));
        uint16x8_t v14 = (uint16x8_t)vdupq_n_s16(v12 & 0x1F);
        v10[-1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v61[-1] + 2 * (v12 >> 5) + 2), *(uint16x4_t *)v14.i8), *(uint16x4_t *)((char *)&v61[-1] + 2 * (v12 >> 5)), *(uint16x4_t *)v13.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v61[-1] + 2 * (v12 >> 5) + 2), v14), *(uint16x8_t *)((char *)&v61[-1] + 2 * (v12 >> 5)), v13), 5uLL);
        *long long v10 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v61 + 2 * (v12 >> 5) + 2), *(uint16x4_t *)v14.i8), *(uint16x4_t *)((char *)v61 + 2 * (v12 >> 5)), *(uint16x4_t *)v13.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v61 + 2 * (v12 >> 5) + 2), v14), *(uint16x8_t *)((char *)v61 + 2 * (v12 >> 5)), v13), 5uLL);
        v12 += v4;
        long long v10 = (int16x8_t *)((char *)v10 + 2 * a3);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int v15 = v4 >> 5;
    int v16 = 2 * v15;
    uint64_t v17 = 2 * v15;
    uint64_t v18 = 2 * v16;
    unint64_t v19 = -2;
    do
    {
      int16x8_t v20 = *(int16x8_t *)((char *)v6 + v17 - 16);
      int16x8_t v21 = *(int16x8_t *)((char *)v6 + v17);
      uint64_t v6 = (long long *)((char *)v6 + v18);
      long long v22 = *(v6 - 1);
      long long v23 = *v6;
      *a4 = v20;
      a4[1] = v21;
      uint16x8_t v24 = &a4->i8[2 * a3];
      *(_OWORD *)uint16x8_t v24 = v22;
      *((_OWORD *)v24 + 1) = v23;
      v19 += 2;
      a4 = (int16x8_t *)((char *)a4 + 4 * a3);
    }
    while (v19 < 0xE);
  }
  return result;
}

uint64_t sub_1D0CDD8B0(uint64_t result, int8x16_t *a2, uint64_t a3, int16x8_t *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  int v5 = a2 + 2;
  if (v4 < 0)
  {
    int v6 = 18 - result;
    if ((int)result >= 18) {
      int v6 = result - 18;
    }
    int8x16_t v44 = vqtbl1q_s8(a2[2 * (result < 0x12)], xmmword_1D0D80280[4 * (uint64_t)v6 + 3]);
  }
  if (result <= 0x11) {
    int v5 = a2;
  }
  int8x16_t v7 = a2[2 * (result > 0x11)];
  int8x16_t v8 = v5[1];
  v45[0] = v7;
  v45[1] = v8;
  v44.i16[7] = a2[-1].i16[7];
  if ((v4 & 0x1F) != 0)
  {
    uint64_t v9 = 8;
    long long v10 = a4;
    int v11 = v4;
    do
    {
      uint16x8_t v12 = (uint16x8_t)vdupq_n_s16(32 - (v11 & 0x1Fu));
      uint16x8_t v13 = (uint16x8_t)vdupq_n_s16(v11 & 0x1F);
      *long long v10 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v45 + 2 * (v11 >> 5) + 2), *(uint16x4_t *)v13.i8), *(uint16x4_t *)((char *)v45 + 2 * (v11 >> 5)), *(uint16x4_t *)v12.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v45 + 2 * (v11 >> 5) + 2), v13), *(uint16x8_t *)((char *)v45 + 2 * (v11 >> 5)), v12), 5uLL);
      v11 += v4;
      long long v10 = (int16x8_t *)((char *)v10 + 2 * a3);
      --v9;
    }
    while (v9);
    if (result < 0x12)
    {
      int16x8_t v14 = *(int16x8_t *)((char *)a4 + 2 * a3);
      int16x8_t v15 = *(int16x8_t *)((char *)a4 + 4 * a3);
      int16x8_t v16 = *(int16x8_t *)((char *)a4 + 6 * a3);
      int16x8_t v17 = *(int16x8_t *)((char *)a4 + 8 * a3);
      int16x8_t v18 = *(int16x8_t *)((char *)a4 + 10 * a3);
      int16x8_t v19 = *(int16x8_t *)((char *)a4 + 12 * a3);
      int32x4_t v20 = (int32x4_t)vtrn1q_s16(*a4, v14);
      int32x4_t v21 = (int32x4_t)vtrn2q_s16(*a4, v14);
      int32x4_t v22 = (int32x4_t)vtrn1q_s16(v15, v16);
      int16x8_t v23 = *(int16x8_t *)((char *)a4 + 14 * a3);
      int32x4_t v24 = (int32x4_t)vtrn2q_s16(v15, v16);
      int64x2_t v25 = (int64x2_t)vtrn1q_s32(v20, v22);
      int64x2_t v26 = (int64x2_t)vtrn2q_s32(v20, v22);
      int64x2_t v27 = (int64x2_t)vtrn1q_s32(v21, v24);
      int64x2_t v28 = (int64x2_t)vtrn2q_s32(v21, v24);
      int32x4_t v29 = (int32x4_t)vtrn1q_s16(v17, v18);
      int32x4_t v30 = (int32x4_t)vtrn2q_s16(v17, v18);
      int32x4_t v31 = (int32x4_t)vtrn1q_s16(v19, v23);
      int32x4_t v32 = (int32x4_t)vtrn2q_s16(v19, v23);
      int64x2_t v33 = (int64x2_t)vtrn1q_s32(v29, v31);
      int64x2_t v34 = (int64x2_t)vtrn2q_s32(v29, v31);
      int64x2_t v35 = (int64x2_t)vtrn1q_s32(v30, v32);
      int64x2_t v36 = (int64x2_t)vtrn2q_s32(v30, v32);
      *(int64x2_t *)a4 = vzip1q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 2 * a3) = vzip1q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 4 * a3) = vzip1q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 6 * a3) = vzip1q_s64(v28, v36);
      *(int64x2_t *)((char *)a4 + 8 * a3) = vzip2q_s64(v25, v33);
      *(int64x2_t *)((char *)a4 + 10 * a3) = vzip2q_s64(v27, v35);
      *(int64x2_t *)((char *)a4 + 12 * a3) = vzip2q_s64(v26, v34);
      *(int64x2_t *)((char *)a4 + 14 * a3) = vzip2q_s64(v28, v36);
    }
  }
  else
  {
    if (v4 < 0)
    {
      int8x16_t v8 = v44;
      int8x16_t v37 = vextq_s8(v44, v7, 0xEuLL);
      int8x16_t v38 = vextq_s8(v44, v7, 0xCuLL);
      int8x16_t v39 = vextq_s8(v44, v7, 0xAuLL);
      int8x16_t v40 = vextq_s8(v44, v7, 8uLL);
      int8x16_t v41 = vextq_s8(v44, v7, 6uLL);
      int8x16_t v42 = vextq_s8(v44, v7, 4uLL);
      int8x16_t v43 = vextq_s8(v44, v7, 2uLL);
    }
    else
    {
      int8x16_t v37 = vextq_s8(v7, v8, 2uLL);
      int8x16_t v38 = vextq_s8(v7, v8, 4uLL);
      int8x16_t v39 = vextq_s8(v7, v8, 6uLL);
      int8x16_t v40 = vextq_s8(v7, v8, 8uLL);
      int8x16_t v41 = vextq_s8(v7, v8, 0xAuLL);
      int8x16_t v42 = vextq_s8(v7, v8, 0xCuLL);
      int8x16_t v43 = vextq_s8(v7, v8, 0xEuLL);
    }
    *a4 = (int16x8_t)v37;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v38;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v39;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v40;
    *(int8x16_t *)((char *)a4 + 8 * a3) = v41;
    *(int8x16_t *)((char *)a4 + 10 * a3) = v42;
    *(int8x16_t *)((char *)a4 + 12 * a3) = v43;
    *(int8x16_t *)((char *)a4 + 14 * a3) = v8;
  }
  return result;
}

uint64_t sub_1D0CDDB3C(uint64_t result, int8x16_t *a2, uint64_t a3, unint64_t *a4)
{
  int v4 = 18 - result;
  signed int v5 = byte_1D0D7FEBA[result];
  if ((int)result >= 18) {
    int v4 = result - 18;
  }
  int16x8_t v6 = (int16x8_t)a2[result > 0x11];
  if ((v5 & 0x1F) != 0)
  {
    if (v5 < 0)
    {
      int8x16_t v12 = a2[result < 0x12];
      v12.i64[1] = *(uint64_t *)((char *)&a2[-1].i64[1] + 6);
      uint16x8_t v13 = (const double *)&xmmword_1D0D80280[4 * (uint64_t)v4 + 3].i64[1];
      int8x16_t v14 = (int8x16_t)vld1q_dup_f64(v13);
      int16x8_t v6 = (int16x8_t)vzip1q_s64((int64x2_t)vqtbl1q_s8(v12, v14), (int64x2_t)v6);
      unsigned int v7 = ~(v5 >> 4);
    }
    else
    {
      unsigned int v7 = (v5 >> 4) + 6;
    }
    int8x16_t v15 = *(int8x16_t *)((char *)&unk_1D0D80480 + 8 * v7);
    int8x16_t v16 = *(int8x16_t *)((char *)&unk_1D0D80480 + 8 * byte_1D0D804D8[v4 - 1]);
    v17.i64[0] = 0x202020202020202;
    v17.i64[1] = 0x202020202020202;
    uint16x8_t v18 = (uint16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v15, v17));
    uint16x8_t v19 = (uint16x8_t)vqtbl1q_s8((int8x16_t)v6, vaddq_s8(v16, v17));
    uint16x8_t v20 = (uint16x8_t)vqtbl1q_s8((int8x16_t)v6, v15);
    uint16x8_t v21 = (uint16x8_t)vqtbl1q_s8((int8x16_t)v6, v16);
    v22.i64[0] = 0x1F001F001F001FLL;
    v22.i64[1] = 0x1F001F001F001FLL;
    int32x4_t v23 = (int32x4_t)vandq_s8((int8x16_t)vmull_s8(vdup_n_s8(v5), (int8x8_t)0x404030302020101), v22);
    int16x8_t v24 = (int16x8_t)vzip2q_s32(v23, v23);
    int16x8_t v25 = (int16x8_t)vzip1q_s32(v23, v23);
    v26.i64[0] = 0x20002000200020;
    v26.i64[1] = 0x20002000200020;
    uint16x8_t v27 = (uint16x8_t)vsubq_s16(v26, v25);
    int16x8_t v28 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v18.i8, *(uint16x4_t *)v25.i8), *(uint16x4_t *)v20.i8, *(uint16x4_t *)v27.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v18, (uint16x8_t)v25), v20, v27), 5uLL);
    uint16x8_t v29 = (uint16x8_t)vsubq_s16(v26, v24);
    int16x8_t v6 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v19.i8, *(uint16x4_t *)v24.i8), *(uint16x4_t *)v21.i8, *(uint16x4_t *)v29.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v19, (uint16x8_t)v24), v21, v29), 5uLL);
    if (result <= 0x11)
    {
      int16x8_t v30 = vzip1q_s16(v28, v6);
      int16x8_t v31 = vzip2q_s16(v28, v6);
      int16x8_t v28 = vzip1q_s16(v30, v31);
      int16x8_t v6 = vzip2q_s16(v30, v31);
    }
    *a4 = v28.i64[0];
    *(unint64_t *)((char *)a4 + 2 * a3) = v28.u64[1];
    *(unint64_t *)((char *)a4 + 4 * a3) = v6.i64[0];
  }
  else
  {
    if (result == 18)
    {
      int8x16_t v8 = a2[1];
      int16x8_t v6 = (int16x8_t)vqtbl1q_s8(*(int8x16_t *)((char *)a2 - 2), (int8x16_t)xmmword_1D0D7F330);
      unint64_t v9 = vextq_s8((int8x16_t)v6, v8, 0xEuLL).u64[0];
      unint64_t v10 = vextq_s8((int8x16_t)v6, v8, 0xCuLL).u64[0];
      unint64_t v11 = vextq_s8((int8x16_t)v6, v8, 0xAuLL).u64[0];
    }
    else
    {
      unint64_t v9 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 2uLL).u64[0];
      unint64_t v10 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL).u64[0];
      unint64_t v11 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 6uLL).u64[0];
    }
    *a4 = v9;
    *(unint64_t *)((char *)a4 + 2 * a3) = v10;
    *(unint64_t *)((char *)a4 + 4 * a3) = v11;
  }
  *(unint64_t *)((char *)a4 + 6 * a3) = v6.u64[1];
  return result;
}

int16x8_t sub_1D0CDDCE4(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = vld1q_dup_s16(a2->i16);
  int16x8_t v7 = vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[4], v5), 1uLL), (int16x8_t)0);
  v8.i64[0] = 0xF000F000F000F000;
  v8.i64[1] = 0xF000F000F000F000;
  a4[1] = vminq_s16(vmaxq_s16(vsraq_n_s16(v6, vsubq_s16(a2[5], v5), 1uLL), (int16x8_t)0), v8);
  unint64_t v9 = &a2->i16[2];
  *a4 = vminq_s16(v7, v8);
  unint64_t v10 = -1;
  unint64_t v11 = a4;
  do
  {
    int8x16_t v12 = v9 - 1;
    int16x8_t v13 = vld1q_dup_s16(v12);
    int16x8_t v14 = vld1q_dup_s16(v9);
    int8x16_t v15 = (int16x8_t *)((char *)v11 + 2 * a3);
    *int8x16_t v15 = v13;
    v15[1] = v13;
    unint64_t v11 = (int16x8_t *)((char *)v11 + 4 * a3);
    *unint64_t v11 = v14;
    v11[1] = v14;
    v10 += 2;
    v9 += 2;
  }
  while (v10 < 0xD);
  int8x16_t v16 = &a2[1].i16[7];
  int16x8_t result = vld1q_dup_s16(v16);
  uint64_t v18 = 30 * a3;
  *(int16x8_t *)((char *)a4 + v18) = result;
  *(int16x8_t *)((char *)a4 + v18 + 16) = result;
  return result;
}

int16x8_t sub_1D0CDDD88(uint64_t a1, int16x8_t *a2, uint64_t a3, int16x8_t *a4)
{
  int v4 = &a2[-1].i16[7];
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x8_t v6 = *a2;
  v7.i64[0] = 0xF000F000F000F000;
  v7.i64[1] = 0xF000F000F000F000;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2->i8, 0), vsubq_s16(a2[2], v5), 1uLL), (int16x8_t)0), v7);
  *(int16x8_t *)((char *)a4 + 2 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *(int16x8_t *)((char *)a4 + 4 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  *(int16x8_t *)((char *)a4 + 6 * a3) = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *(int16x8_t *)((char *)a4 + 8 * a3) = vdupq_laneq_s16(v6, 4);
  *(int16x8_t *)((char *)a4 + 10 * a3) = vdupq_laneq_s16(v6, 5);
  *(int16x8_t *)((char *)a4 + 12 * a3) = vdupq_laneq_s16(v6, 6);
  int16x8_t result = vdupq_laneq_s16(v6, 7);
  *(int16x8_t *)((char *)a4 + 14 * a3) = result;
  return result;
}

int16x4_t sub_1D0CDDE20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  int16x4_t v6 = *(int16x4_t *)a2;
  v7.i64[0] = 0xF000F000F000F000;
  v7.i64[1] = 0xF000F000F000F000;
  *a4 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)a2, 0), vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v7).u64[0];
  *(int16x4_t *)((char *)a4 + 2 * a3) = vdup_lane_s16(v6, 1);
  *(int16x4_t *)((char *)a4 + 4 * a3) = vdup_lane_s16(v6, 2);
  int16x4_t result = vdup_lane_s16(v6, 3);
  *(int16x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1D0CDDE7C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  int16x8_t v8 = vdupq_lane_s16(*(int16x4_t *)&v6, 0);
  v9.i64[0] = 0xF000F000F000F000;
  v9.i64[1] = 0xF000F000F000F000;
  int8x16_t v10 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v9);
  int8x16_t v11 = (int8x16_t)vminq_s16(vmaxq_s16(vsraq_n_s16(v8, vsubq_s16(*(int16x8_t *)(a2 + 16), v5), 1uLL), (int16x8_t)0), v9);
  long long v12 = v6;
  LOWORD(v12) = v10.i16[0];
  long long v13 = v6;
  LOWORD(v13) = v11.i16[0];
  *a4 = v12;
  a4[a3] = v13;
  a4[1] = v7;
  a4[a3 + 1] = v7;
  uint64_t v14 = 7;
  do
  {
    int8x16_t v10 = vextq_s8(v10, v10, 2uLL);
    long long v15 = v6;
    LOWORD(v15) = v10.i16[0];
    int8x16_t v11 = vextq_s8(v11, v11, 2uLL);
    long long v16 = v6;
    LOWORD(v16) = v11.i16[0];
    int8x16_t v17 = (_OWORD *)((char *)a4 + 18 * a3);
    a4 = (_OWORD *)((char *)a4 + 2 * a3);
    *a4 = v15;
    *int8x16_t v17 = v16;
    a4[1] = v7;
    v17[1] = v7;
    --v14;
  }
  while (v14);
}

double sub_1D0CDDF2C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  long long v6 = *(_OWORD *)(a2 + 32);
  v7.i64[0] = 0xF000F000F000F000;
  v7.i64[1] = 0xF000F000F000F000;
  int16x8_t v8 = vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)&v6, 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v7);
  long long v9 = v6;
  LOWORD(v9) = v8.i16[0];
  *a4 = v9;
  long long v10 = v6;
  LOWORD(v10) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 1).u16[0];
  *(_OWORD *)((char *)a4 + 2 * a3) = v10;
  long long v11 = v6;
  LOWORD(v11) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 2).u16[0];
  *(_OWORD *)((char *)a4 + 4 * a3) = v11;
  long long v12 = v6;
  LOWORD(v12) = vdupq_lane_s16(*(int16x4_t *)v8.i8, 3).u16[0];
  *(_OWORD *)((char *)a4 + 6 * a3) = v12;
  long long v13 = v6;
  LOWORD(v13) = vdupq_laneq_s16(v8, 4).u16[0];
  *(_OWORD *)((char *)a4 + 8 * a3) = v13;
  long long v14 = v6;
  LOWORD(v14) = vdupq_laneq_s16(v8, 5).u16[0];
  *(_OWORD *)((char *)a4 + 10 * a3) = v14;
  long long v15 = v6;
  LOWORD(v15) = vdupq_laneq_s16(v8, 6).u16[0];
  *(_OWORD *)((char *)a4 + 12 * a3) = v15;
  *(void *)&double result = vdupq_laneq_s16(v8, 7).u64[0];
  LOWORD(v6) = LOWORD(result);
  *(_OWORD *)((char *)a4 + 14 * a3) = v6;
  return result;
}

int8x16_t sub_1D0CDE000(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (const __int16 *)(a2 - 2);
  int16x8_t v5 = vld1q_dup_s16(v4);
  v6.i64[0] = 0xF000F000F000F000;
  v6.i64[1] = 0xF000F000F000F000;
  int8x16_t v7 = (int8x16_t)vzip1q_s64((int64x2_t)vminq_s16(vmaxq_s16(vsraq_n_s16(vdupq_lane_s16(*(int16x4_t *)(a2 + 16), 0), vsubq_s16(*(int16x8_t *)a2, v5), 1uLL), (int16x8_t)0), v6), *(int64x2_t *)(a2 + 16));
  int8x16_t v8 = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F340);
  int8x16_t result = vqtbl1q_s8(v7, (int8x16_t)xmmword_1D0D7F350);
  *a4 = v8.i64[0];
  *(void *)((char *)a4 + 2 * a3) = v8.i64[1];
  *(void *)((char *)a4 + 4 * a3) = result.i64[0];
  *(void *)((char *)a4 + 6 * a3) = result.i64[1];
  return result;
}

int32x4_t sub_1D0CDE068(int8x16_t *a1, uint16x8_t *a2)
{
  unsigned int v2 = a1[-1].u16[7];
  int v3 = a1[7].u16[7];
  int v4 = v3 + v2 - 2 * a1[3].u16[7];
  if (v4 < 0) {
    int v4 = 2 * a1[3].u16[7] - (v3 + v2);
  }
  if (v4 > 0x7F) {
    goto LABEL_7;
  }
  int v5 = a1[15].u16[7];
  int v6 = v5 + v2 - 2 * a1[11].u16[7];
  if (v6 < 0) {
    int v6 = 2 * a1[11].u16[7] - (v5 + v2);
  }
  if (v6 < 0x80)
  {
    a2[-1].i16[7] = v2;
    int16x4_t v8 = vdup_n_s16(v5 - v2);
    int32x4_t result = vmull_s16(v8, (int16x4_t)0x4000300020001);
    int32x4_t v9 = vmull_s16(v8, (int16x4_t)0x8000700060005);
    int16x4_t v10 = vdup_n_s16(v3 - v2);
    int32x4_t v11 = vmull_s16(v10, (int16x4_t)0x4000300020001);
    int32x4_t v12 = vmull_s16(v10, (int16x4_t)0x8000700060005);
    int32x4_t v13 = vshll_n_s16(v8, 3uLL);
    int32x4_t v14 = vshll_n_s16(v10, 3uLL);
    int16x4_t v15 = vdup_n_s16(v2);
    long long v16 = a2 + 8;
    unint64_t v17 = -8;
    do
    {
      *(int16x4_t *)v18.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(result, 6uLL)));
      v18.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v9, 6uLL)));
      *(int16x4_t *)v19.i8 = vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v11, 6uLL)));
      v19.u64[1] = (unint64_t)vadd_s16(v15, vmovn_s32(vrshrq_n_s32(v12, 6uLL)));
      *long long v16 = v18;
      v16[-8] = v19;
      int32x4_t result = vaddq_s32(result, v13);
      int32x4_t v9 = vaddq_s32(v9, v13);
      int32x4_t v11 = vaddq_s32(v11, v14);
      int32x4_t v12 = vaddq_s32(v12, v14);
      v17 += 8;
      ++v16;
    }
    while (v17 < 0x38);
  }
  else
  {
LABEL_7:
    result.i64[0] = sub_1D0CDBD08(a1, a2).u64[0];
  }
  return result;
}

void sub_1D0CDE15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v5 = (const float *)(a2 + 128);
  int v6 = (const float *)(a2 + 384);
  int16x8_t v7 = (int16x8_t)vld1q_dup_f32(v6);
  v17[0] = vmulq_s16(v7, (int16x8_t)xmmword_1D0D7F410);
  v17[1] = vmulq_s16(v7, (int16x8_t)xmmword_1D0D7F420);
  v17[2] = vmulq_s16(v7, (int16x8_t)xmmword_1D0D7F430);
  v17[3] = vmulq_s16(v7, (int16x8_t)xmmword_1D0D7F440);
  v17[4] = vmulq_s16(v7, (int16x8_t)xmmword_1D0D7F450);
  v17[5] = vmulq_s16(v7, (int16x8_t)xmmword_1D0D7F460);
  int16x8_t v8 = vmulq_s16(v7, (int16x8_t)xmmword_1D0D7F470);
  int16x8_t v9 = vmulq_s16(v7, (int16x8_t)xmmword_1D0D7F480);
  int16x8_t v10 = (int16x8_t)vld1q_dup_f32(v5);
  v17[6] = v8;
  v17[7] = v9;
  int16x8_t v11 = v10;
  do
  {
    uint64_t v12 = 0;
    int32x4_t v13 = (const float *)xmmword_1D0D80180 + v4;
    int16x8_t v14 = (int16x8_t)vld1q_dup_f32(v13);
    int16x4_t v15 = (const float *)(a2 + 4 * v4);
    int16x8_t v16 = (int16x8_t)vld1q_dup_f32(v15);
    do
    {
      *(uint16x8_t *)(a4 + v12 * 16) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vmlaq_s16(v11, (int16x8_t)xmmword_1D0D80180[v12], v16), (int16x8_t)v17[v12]), *(int16x8_t *)(a2 + 256 + v12 * 16), v14), 6uLL);
      ++v12;
    }
    while (v12 != 8);
    int16x8_t v11 = vaddq_s16(v11, v10);
    ++v4;
    a4 += 2 * a3;
  }
  while (v4 != 32);
}

void sub_1D0CDE298(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[16], *a2), vaddq_s16(a2[1], a2[17])), vaddq_s16(vaddq_s16(a2[2], a2[18]), a2[3])), vaddq_s16(vaddq_s16(vaddq_s16(a2[19], a2[4]), a2[20]), a2[5])), vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[21], a2[6]), a2[22]), a2[7]), a2[23]));
  int32x4_t v5 = vpaddq_s32(v4, v4);
  uint16x8_t v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 6uLL);
  int16x8_t v7 = a4 + 4;
  uint64_t v8 = 32;
  do
  {
    v7[-4] = v6;
    v7[-3] = v6;
    v7[-2] = v6;
    v7[-1] = v6;
    *int16x8_t v7 = v6;
    v7[1] = v6;
    v7[2] = v6;
    v7[3] = v6;
    int16x8_t v7 = (uint16x8_t *)((char *)v7 + 2 * a3);
    --v8;
  }
  while (v8);
}

void sub_1D0CDE32C(uint64_t a1, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = 0;
  int32x4_t v5 = (const float *)(a2 + 4);
  int16x8_t v6 = (int16x8_t)vld1q_dup_f32(v5);
  int16x8_t v7 = (const float *)(a2 + 12);
  int16x8_t v8 = (int16x8_t)vld1q_dup_f32(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F410);
  int16x8_t v10 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F420);
  int16x8_t v11 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F430);
  int16x8_t v12 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F440);
  int16x8_t v13 = *((int16x8_t *)a2 + 8);
  int16x8_t v14 = *((int16x8_t *)a2 + 9);
  int16x8_t v15 = *((int16x8_t *)a2 + 10);
  int16x8_t v16 = *((int16x8_t *)a2 + 11);
  int16x8_t v17 = vshlq_n_s16(v13, 4uLL);
  int16x8_t v18 = vshlq_n_s16(v14, 4uLL);
  int16x8_t v19 = vshlq_n_s16(v15, 4uLL);
  int16x8_t v20 = vshlq_n_s16(v16, 4uLL);
  uint16x8_t v21 = a4 + 2;
  int16x8_t v22 = v6;
  do
  {
    int32x4_t v23 = (const float *)((char *)a2 + v4);
    int16x8_t v24 = (int16x8_t)vld1q_dup_f32(v23);
    int16x8_t v17 = vsubq_s16(v17, v13);
    int16x8_t v18 = vsubq_s16(v18, v14);
    v21[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v17, v9), v22), v24, (int16x8_t)xmmword_1D0D7F490), 5uLL);
    v21[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v18, v10), v22), v24, (int16x8_t)xmmword_1D0D7F4A0), 5uLL);
    int16x8_t v19 = vsubq_s16(v19, v15);
    int16x8_t v20 = vsubq_s16(v20, v16);
    uint16x8_t *v21 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v19, v11), v22), v24, (int16x8_t)xmmword_1D0D7F4B0), 5uLL);
    v21[1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v20, v12), v22), v24, (int16x8_t)xmmword_1D0D7F4C0), 5uLL);
    int16x8_t v22 = vaddq_s16(v22, v6);
    v4 += 4;
    uint16x8_t v21 = (uint16x8_t *)((char *)v21 + 2 * a3);
  }
  while (v4 != 64);
}

void sub_1D0CDE42C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(a2[8], *a2), vaddq_s16(a2[1], a2[9])), vaddq_s16(vaddq_s16(a2[2], a2[10]), a2[3])), a2[11]);
  int32x4_t v5 = vpaddq_s32(v4, v4);
  uint16x8_t v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 5uLL);
  int16x8_t v7 = a4 + 2;
  uint64_t v8 = 16;
  do
  {
    v7[-2] = v6;
    v7[-1] = v6;
    *int16x8_t v7 = v6;
    v7[1] = v6;
    int16x8_t v7 = (uint16x8_t *)((char *)v7 + 2 * a3);
    --v8;
  }
  while (v8);
}

uint64_t sub_1D0CDE488(uint64_t result, uint64_t a2, uint64_t a3, int64x2_t *a4)
{
  v78[33] = *MEMORY[0x1E4F143B8];
  int32x4_t v4 = v78;
  int v5 = byte_1D0D7FEBA[result];
  uint64_t v6 = a2 + 256;
  if (result <= 0x11) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = a2 + 256;
  }
  if (result > 0x11) {
    uint64_t v6 = a2;
  }
  if (v5 < 0)
  {
    uint64_t v9 = byte_1D0D7FEBA[(int)result];
    if (v9 < 0)
    {
      int v10 = word_1D0D7FFE0[(int)result - 11];
      int v11 = v9 * v10 + 128;
      unint64_t v8 = 32;
      do
      {
        v77[v9] = *(_DWORD *)(v6 + 4 * ((v11 >> 8) - 1));
        v11 += v10;
        BOOL v12 = __CFADD__(v9++, 1);
      }
      while (!v12);
    }
    else
    {
      unint64_t v8 = 32;
    }
  }
  else
  {
    unint64_t v8 = 64;
  }
  uint64_t v13 = 0;
  for (unint64_t i = 0; i < v8; i += 16)
  {
    int16x8_t v15 = &v76[v13];
    long long v16 = *(_OWORD *)(v7 + v13 + 16);
    v15[9] = *(_OWORD *)(v7 + v13);
    v15[10] = v16;
    long long v17 = *(_OWORD *)(v7 + v13 + 48);
    v15[11] = *(_OWORD *)(v7 + v13 + 32);
    v15[12] = v17;
    v13 += 64;
  }
  v77[0] = *(_DWORD *)(a2 - 4);
  if ((v5 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      unint64_t v38 = 0;
      int v39 = 2 * v5;
      uint64_t v40 = 6 * a3;
      uint64_t v41 = 8 * a3;
      uint64_t v42 = 4 * a3;
      uint64_t v43 = 2 * a3;
      v44.i64[0] = 0x20002000200020;
      v44.i64[1] = 0x20002000200020;
      int v45 = v5;
      int32x4_t result = (3 * v5);
      do
      {
        int16x8_t v46 = vdupq_n_s16(v45 & 0x1F);
        int16x8_t v47 = vsubq_s16(v44, v46);
        int16x8_t v48 = vdupq_n_s16((v45 + v5) & 0x1F);
        int16x8_t v49 = vsubq_s16(v44, v48);
        int16x8_t v50 = vdupq_n_s16((v45 + v39) & 0x1F);
        int64x2_t v51 = (int16x8_t *)((char *)v78 + 4 * (v45 >> 5) + 4);
        int16x8_t v52 = vdupq_n_s16((v45 + result) & 0x1F);
        int32x4_t v53 = (int16x8_t *)((char *)v78 + 4 * ((v45 + (int)result) >> 5) + 4);
        int16x8_t v54 = vsubq_s16(v44, v50);
        int16x8_t v55 = vsubq_s16(v44, v52);
        int64x2_t v56 = (int16x8_t *)((char *)v78 + 4 * ((v45 + v5) >> 5) + 4);
        int64x2_t v57 = (int16x8_t *)((char *)v78 + 4 * ((v45 + v39) >> 5) + 4);
        unint64_t v58 = -4;
        int64x2_t v59 = a4;
        do
        {
          int16x8_t v60 = *(int16x8_t *)((char *)v51 - 4);
          int16x8_t v61 = *v51++;
          int32x4_t v62 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v60, v47), v61, v46), 5uLL);
          int16x8_t v63 = *(int16x8_t *)((char *)v56 - 4);
          int16x8_t v64 = *v56++;
          int32x4_t v65 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v63, v49), v64, v48), 5uLL);
          int16x8_t v66 = *(int16x8_t *)((char *)v57 - 4);
          int16x8_t v67 = *v57++;
          int32x4_t v68 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v66, v54), v67, v50), 5uLL);
          int16x8_t v69 = *(int16x8_t *)((char *)v53 - 4);
          int16x8_t v70 = *v53++;
          int32x4_t v71 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v69, v55), v70, v52), 5uLL);
          int64x2_t v72 = (int64x2_t)vtrn1q_s32(v62, v65);
          int64x2_t v73 = (int64x2_t)vtrn2q_s32(v62, v65);
          int64x2_t v74 = (int64x2_t)vtrn1q_s32(v68, v71);
          int64x2_t v75 = (int64x2_t)vtrn2q_s32(v68, v71);
          int64x2_t *v59 = vzip1q_s64(v72, v74);
          *(int64x2_t *)((char *)v59 + v43) = vzip1q_s64(v73, v75);
          *(int64x2_t *)((char *)v59 + v42) = vzip2q_s64(v72, v74);
          *(int64x2_t *)((char *)v59 + v40) = vzip2q_s64(v73, v75);
          v58 += 4;
          int64x2_t v59 = (int64x2_t *)((char *)v59 + v41);
        }
        while (v58 < 0x1C);
        v45 += 4 * v5;
        ++a4;
        BOOL v12 = v38 >= 0x1C;
        v38 += 4;
      }
      while (!v12);
    }
    else
    {
      uint64_t v18 = 0;
      v19.i64[0] = 0x20002000200020;
      v19.i64[1] = 0x20002000200020;
      int v20 = v5;
      do
      {
        uint64_t v21 = 0;
        int16x8_t v22 = vdupq_n_s16(v20 & 0x1F);
        int16x8_t v23 = vsubq_s16(v19, v22);
        uint64_t v24 = (uint64_t)a4->i64 + 2 * v18 * a3;
        char v25 = 1;
        do
        {
          char v26 = v25;
          uint16x8_t v27 = &v78[v21];
          uint64_t v28 = 2 * v21;
          uint16x8_t v29 = (char *)v27 + 4 * ((uint64_t)v20 >> 5);
          *(uint16x8_t *)(v24 + v28) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v29, v23), *(int16x8_t *)(v29 + 4), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x10)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 1), v23), *(int16x8_t *)(v29 + 20), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x20)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 2), v23), *(int16x8_t *)(v29 + 36), v22), 5uLL);
          *(uint16x8_t *)(v24 + (v28 | 0x30)) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*((int16x8_t *)v29 + 3), v23), *(int16x8_t *)(v29 + 52), v22), 5uLL);
          uint64_t v21 = 8;
          char v25 = 0;
        }
        while ((v26 & 1) != 0);
        ++v18;
        v20 += v5;
      }
      while (v18 != 32);
    }
  }
  else
  {
    int v30 = 0;
    uint64_t v31 = (uint64_t)v5 >> 5;
    do
    {
      uint64_t v32 = 0;
      int32x4_t v4 = (void *)((char *)v4 + 4 * v31);
      char v33 = 1;
      do
      {
        int64x2_t v34 = (int64x2_t *)&v4[v32];
        uint64_t v35 = 2 * v32;
        int64x2_t v36 = v34[1];
        *(int64x2_t *)((char *)a4 + v35) = *v34;
        *(int64x2_t *)((char *)a4 + (v35 | 0x10)) = v36;
        int64x2_t v37 = v34[3];
        *(int64x2_t *)((char *)a4 + (v35 | 0x20)) = v34[2];
        LOBYTE(v34) = v33;
        *(int64x2_t *)((char *)a4 + (v35 | 0x30)) = v37;
        uint64_t v32 = 8;
        char v33 = 0;
      }
      while ((v34 & 1) != 0);
      a4 = (int64x2_t *)((char *)a4 + 2 * a3);
      ++v30;
    }
    while (v30 != 32);
  }
  return result;
}

unint64_t sub_1D0CDE810(unint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  v77[17] = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  int v5 = a2 + 8;
  if (result <= 0x11) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a2 + 8;
  }
  if (v4 < 0)
  {
    uint64_t v8 = 0;
    if (result > 0x11) {
      int v5 = a2;
    }
    long long v9 = a2[8 * (unint64_t)(result < 0x12)];
    long long v10 = v5[1];
    long long v11 = v5[2];
    long long v12 = v5[3];
    if ((int)result >= 18) {
      int v13 = result - 18;
    }
    else {
      int v13 = 18 - result;
    }
    int16x8_t v14 = (char *)&unk_1D0D80500 + 64 * (uint64_t)v13;
    unint64_t v7 = 16;
    do
    {
      *(int8x16_t *)&v75[v8 + 16] = vqtbl4q_s8(*(int8x16x4_t *)&v9, *(int8x16_t *)&v14[v8]);
      v8 += 16;
    }
    while (v8 != 64);
  }
  else
  {
    unint64_t v7 = 32;
  }
  uint64_t v15 = 0;
  for (unint64_t i = 0; i < v7; i += 16)
  {
    long long v17 = &v75[v15 * 16];
    long long v18 = v6[v15 + 1];
    v17[5] = v6[v15];
    v17[6] = v18;
    long long v19 = v6[v15 + 3];
    v17[7] = v6[v15 + 2];
    _OWORD v17[8] = v19;
    v15 += 4;
  }
  int v76 = *((_DWORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      unint64_t v36 = 0;
      int v37 = 2 * v4;
      uint64_t v38 = 6 * a3;
      uint64_t v39 = 8 * a3;
      uint64_t v40 = 4 * a3;
      uint64_t v41 = 2 * a3;
      v42.i64[0] = 0x20002000200020;
      v42.i64[1] = 0x20002000200020;
      int v43 = v4;
      int32x4_t result = (3 * v4);
      do
      {
        int16x8_t v44 = vdupq_n_s16(v43 & 0x1F);
        int16x8_t v45 = vsubq_s16(v42, v44);
        int16x8_t v46 = vdupq_n_s16((v43 + v4) & 0x1F);
        int16x8_t v47 = vsubq_s16(v42, v46);
        int16x8_t v48 = vdupq_n_s16((v43 + v37) & 0x1F);
        int16x8_t v49 = (int16x8_t *)((char *)v77 + 4 * (v43 >> 5) + 4);
        int16x8_t v50 = vdupq_n_s16((v43 + result) & 0x1F);
        int64x2_t v51 = (int16x8_t *)((char *)v77 + 4 * ((v43 + (int)result) >> 5) + 4);
        int16x8_t v52 = vsubq_s16(v42, v48);
        int16x8_t v53 = vsubq_s16(v42, v50);
        int16x8_t v54 = (int16x8_t *)((char *)v77 + 4 * ((v43 + v4) >> 5) + 4);
        int16x8_t v55 = (int16x8_t *)((char *)v77 + 4 * ((v43 + v37) >> 5) + 4);
        unint64_t v56 = -4;
        int64x2_t v57 = (int64x2_t *)a4;
        do
        {
          int16x8_t v58 = *(int16x8_t *)((char *)v49 - 4);
          int16x8_t v59 = *v49++;
          int32x4_t v60 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v58, v45), v59, v44), 5uLL);
          int16x8_t v61 = *(int16x8_t *)((char *)v54 - 4);
          int16x8_t v62 = *v54++;
          int32x4_t v63 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v61, v47), v62, v46), 5uLL);
          int16x8_t v64 = *(int16x8_t *)((char *)v55 - 4);
          int16x8_t v65 = *v55++;
          int32x4_t v66 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v64, v52), v65, v48), 5uLL);
          int16x8_t v67 = *(int16x8_t *)((char *)v51 - 4);
          int16x8_t v68 = *v51++;
          int32x4_t v69 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(v67, v53), v68, v50), 5uLL);
          int64x2_t v70 = (int64x2_t)vtrn1q_s32(v60, v63);
          int64x2_t v71 = (int64x2_t)vtrn2q_s32(v60, v63);
          int64x2_t v72 = (int64x2_t)vtrn1q_s32(v66, v69);
          int64x2_t v73 = (int64x2_t)vtrn2q_s32(v66, v69);
          int64x2_t *v57 = vzip1q_s64(v70, v72);
          *(int64x2_t *)((char *)v57 + v41) = vzip1q_s64(v71, v73);
          *(int64x2_t *)((char *)v57 + v40) = vzip2q_s64(v70, v72);
          *(int64x2_t *)((char *)v57 + v38) = vzip2q_s64(v71, v73);
          v56 += 4;
          int64x2_t v57 = (int64x2_t *)((char *)v57 + v39);
        }
        while (v56 < 0xC);
        v43 += 4 * v4;
        a4 += 16;
        BOOL v74 = v36 >= 0xC;
        v36 += 4;
      }
      while (!v74);
    }
    else
    {
      int v20 = (uint16x8_t *)(a4 + 32);
      uint64_t v21 = 16;
      v22.i64[0] = 0x20002000200020;
      v22.i64[1] = 0x20002000200020;
      int v23 = v4;
      do
      {
        int16x8_t v24 = vdupq_n_s16(v23 & 0x1F);
        int16x8_t v25 = vsubq_s16(v22, v24);
        uint16x8_t v26 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v77[2] + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)&v77[2] + 4 * (v23 >> 5) + 4), v24), 5uLL);
        v20[-2] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v77 + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)v77 + 4 * (v23 >> 5) + 4), v24), 5uLL);
        v20[-1] = v26;
        int32x4_t result = (unint64_t)&v77[4] + 4 * (v23 >> 5);
        uint16x8_t v27 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)result, v25), *(int16x8_t *)(result + 4), v24), 5uLL);
        uint16x8_t v28 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v77[6] + 4 * (v23 >> 5)), v25), *(int16x8_t *)((char *)&v77[6] + 4 * (v23 >> 5) + 4), v24), 5uLL);
        *int v20 = v27;
        v20[1] = v28;
        v23 += v4;
        int v20 = (uint16x8_t *)((char *)v20 + 2 * a3);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    int v29 = v4 >> 5;
    int v30 = (_OWORD *)(a4 + 32);
    uint64_t v31 = 4 * v29;
    uint64_t v32 = (long long *)((char *)&v77[6] + v31);
    int v33 = 16;
    do
    {
      long long v34 = *(v32 - 2);
      *(v30 - 2) = *(v32 - 3);
      *(v30 - 1) = v34;
      long long v35 = *v32;
      *int v30 = *(v32 - 1);
      v30[1] = v35;
      int v30 = (_OWORD *)((char *)v30 + 2 * a3);
      uint64_t v32 = (long long *)((char *)v32 + v31);
      --v33;
    }
    while (v33);
  }
  return result;
}

uint64_t sub_1D0CDEB60(uint64_t result, _OWORD *a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  int v5 = a2 + 4;
  if (v4 < 0)
  {
    if (result <= 0x11) {
      uint64_t v6 = a2 + 4;
    }
    else {
      uint64_t v6 = a2;
    }
    long long v7 = a2[4 * (unint64_t)(result < 0x12)];
    long long v8 = v6[1];
    if ((int)result >= 18) {
      int v9 = result - 18;
    }
    else {
      int v9 = 18 - result;
    }
    long long v10 = (int8x16_t *)((char *)&unk_1D0D80500 + 64 * (uint64_t)v9);
    int8x16_t v11 = vqtbl2q_s8(*(int8x16x2_t *)&v7, v10[2]);
    int8x16_t v12 = vqtbl2q_s8(*(int8x16x2_t *)&v7, v10[3]);
    v65[1] = v11;
    int8x16_t v66 = v12;
  }
  if (result <= 0x11) {
    int v5 = a2;
  }
  long long v13 = v5[1];
  long long v14 = v5[2];
  long long v67 = a2[4 * (unint64_t)(result > 0x11)];
  v68[0] = v13;
  long long v15 = v5[3];
  v68[1] = v14;
  v68[2] = v15;
  v66.i32[3] = *((_DWORD *)a2 - 1);
  if ((v4 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      uint64_t v35 = 0;
      int v36 = 2 * v4;
      char v37 = 1;
      v38.i64[0] = 0x20002000200020;
      v38.i64[1] = 0x20002000200020;
      int v39 = v4;
      int v40 = 3 * v4;
      do
      {
        unint64_t v41 = 0;
        char v42 = v37;
        int16x8_t v43 = vdupq_n_s16(v39 & 0x1F);
        int16x8_t v44 = vsubq_s16(v38, v43);
        int16x8_t v45 = vdupq_n_s16((v39 + v4) & 0x1F);
        int16x8_t v46 = vsubq_s16(v38, v45);
        int32x4_t result = (uint64_t)(v39 + v36) >> 5;
        int16x8_t v47 = vdupq_n_s16((v39 + v36) & 0x1F);
        int16x8_t v48 = vsubq_s16(v38, v47);
        int16x8_t v49 = vdupq_n_s16((v39 + v40) & 0x1F);
        int16x8_t v50 = vsubq_s16(v38, v49);
        int64x2_t v51 = &a4[v35];
        char v52 = 1;
        do
        {
          char v53 = v52;
          int16x8_t v54 = &v68[v41 / 4 - 1];
          int32x4_t v55 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v54 + 4 * ((uint64_t)v39 >> 5)), v44), *(int16x8_t *)((char *)v54 + 4 * ((uint64_t)v39 >> 5) + 4), v43), 5uLL);
          unint64_t v56 = (char *)v54 + 4 * ((uint64_t)(v39 + v4) >> 5);
          int32x4_t v57 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v56, v46), *(int16x8_t *)(v56 + 4), v45), 5uLL);
          int32x4_t v58 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v54 + 4 * result), v48), *(int16x8_t *)((char *)v54 + 4 * result + 4), v47), 5uLL);
          int16x8_t v59 = (char *)v54 + 4 * ((uint64_t)(v39 + v40) >> 5);
          int32x4_t v60 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v59, v50), *(int16x8_t *)(v59 + 4), v49), 5uLL);
          int64x2_t v61 = (int64x2_t)vtrn1q_s32(v55, v57);
          int64x2_t v62 = (int64x2_t)vtrn2q_s32(v55, v57);
          int64x2_t v63 = (int64x2_t)vtrn1q_s32(v58, v60);
          int64x2_t v64 = (int64x2_t)vtrn2q_s32(v58, v60);
          *(int64x2_t *)((char *)v51 + 2 * v41 * a3) = vzip1q_s64(v61, v63);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 1) * a3) = vzip1q_s64(v62, v64);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 2) * a3) = vzip2q_s64(v61, v63);
          *(int64x2_t *)((char *)v51 + 2 * (v41 | 3) * a3) = vzip2q_s64(v62, v64);
          unint64_t v41 = 4;
          char v52 = 0;
        }
        while ((v53 & 1) != 0);
        char v37 = 0;
        v39 += 4 * v4;
        uint64_t v35 = 1;
      }
      while ((v42 & 1) != 0);
    }
    else
    {
      long long v16 = a4 + 1;
      uint64_t v17 = 8;
      v18.i64[0] = 0x20002000200020;
      v18.i64[1] = 0x20002000200020;
      int v19 = v4;
      do
      {
        int16x8_t v20 = vdupq_n_s16(v19 & 0x1F);
        int16x8_t v21 = vsubq_s16(v18, v20);
        uint16x8_t v22 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)&v68[-1] + 4 * (v19 >> 5)), v21), *(int16x8_t *)((char *)&v68[-1] + 4 * (v19 >> 5) + 4), v20), 5uLL);
        uint16x8_t v23 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v68 + 4 * (v19 >> 5)), v21), *(int16x8_t *)((char *)v68 + 4 * (v19 >> 5) + 4), v20), 5uLL);
        v16[-1] = v22;
        *long long v16 = v23;
        v19 += v4;
        long long v16 = (uint16x8_t *)((char *)v16 + 2 * a3);
        --v17;
      }
      while (v17);
    }
  }
  else
  {
    int v24 = v4 >> 5;
    int v25 = v4 >> 4;
    uint64_t v26 = 2 * a3;
    uint64_t v27 = 4 * v25;
    uint64_t v28 = v27 + 64;
    uint64_t v29 = 4 * v24 + 48;
    unsigned int v30 = -2;
    uint64_t v31 = v65;
    do
    {
      uint16x8_t v32 = *(uint16x8_t *)((char *)v31 + v29 + 16);
      *a4 = *(uint16x8_t *)((char *)v31 + v29);
      a4[1] = v32;
      long long v33 = *(_OWORD *)((char *)v31 + v28);
      long long v34 = &a4->i8[v26];
      *(_OWORD *)long long v34 = *(_OWORD *)((char *)v31 + v28 - 16);
      *((_OWORD *)v34 + 1) = v33;
      v30 += 2;
      uint64_t v31 = (_OWORD *)((char *)v31 + v27);
      a4 = (uint16x8_t *)((char *)a4 + v26 + v26);
    }
    while (v30 < 6);
  }
  return result;
}

uint64_t sub_1D0CDEE68(uint64_t result, int8x16_t *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  int v5 = a2 + 2;
  if (v4 < 0)
  {
    int v6 = 18 - result;
    if ((int)result >= 18) {
      int v6 = result - 18;
    }
    int8x16_t v27 = vqtbl1q_s8(a2[2 * (result < 0x12)], xmmword_1D0D80500[4 * (uint64_t)v6 + 3]);
  }
  if (result <= 0x11) {
    int v5 = a2;
  }
  int8x16_t v7 = a2[2 * (result > 0x11)];
  int8x16_t v8 = v5[1];
  v28[0] = v7;
  v28[1] = v8;
  v27.i32[3] = a2[-1].i32[3];
  if ((v4 & 0x1F) != 0)
  {
    v9.i64[0] = 0x20002000200020;
    v9.i64[1] = 0x20002000200020;
    int16x8_t v10 = vdupq_n_s16((2 * v4) & 0x1E);
    int16x8_t v11 = vdupq_n_s16((3 * v4) & 0x1F);
    int v12 = v4 >> 3;
    int16x8_t v13 = vdupq_n_s16(4 * (v4 & 7u));
    int16x8_t v14 = vsubq_s16(v9, v13);
    int32x4_t v15 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * (v4 >> 5)), vsubq_s16(v9, vdupq_n_s16(v4 & 0x1F))), *(int16x8_t *)((char *)v28 + 4 * (v4 >> 5) + 4), (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v4 & 0x1F))), 5uLL);
    int32x4_t v16 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * (v4 >> 4)), vsubq_s16(v9, v10)), *(int16x8_t *)((char *)v28 + 4 * (v4 >> 4) + 4), v10), 5uLL);
    uint64_t v17 = (char *)v28 + 4 * ((3 * v4) >> 5);
    int32x4_t v18 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)v17, vsubq_s16(v9, v11)), *(int16x8_t *)(v17 + 4), v11), 5uLL);
    int32x4_t v19 = (int32x4_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)((char *)v28 + 4 * v12), v14), *(int16x8_t *)((char *)v28 + 4 * v12 + 4), v13), 5uLL);
    if (result < 0x12)
    {
      int64x2_t v20 = (int64x2_t)vtrn1q_s32(v15, v16);
      int64x2_t v21 = (int64x2_t)vtrn2q_s32(v15, v16);
      int64x2_t v22 = (int64x2_t)vtrn1q_s32(v18, v19);
      int64x2_t v23 = (int64x2_t)vtrn2q_s32(v18, v19);
      int32x4_t v15 = (int32x4_t)vzip1q_s64(v20, v22);
      int32x4_t v18 = (int32x4_t)vzip2q_s64(v20, v22);
      int32x4_t v16 = (int32x4_t)vzip1q_s64(v21, v23);
      int32x4_t v19 = (int32x4_t)vzip2q_s64(v21, v23);
    }
    *a4 = v15;
    *(int32x4_t *)((char *)a4 + 2 * a3) = v16;
    *(int32x4_t *)((char *)a4 + 4 * a3) = v18;
    *(int32x4_t *)((char *)a4 + 6 * a3) = v19;
  }
  else
  {
    if (v4 < 0)
    {
      int8x16_t v8 = v27;
      int8x16_t v24 = vextq_s8(v27, v7, 0xCuLL);
      int8x16_t v25 = vextq_s8(v27, v7, 8uLL);
      int8x16_t v26 = vextq_s8(v27, v7, 4uLL);
    }
    else
    {
      int8x16_t v24 = vextq_s8(v7, v8, 4uLL);
      int8x16_t v25 = vextq_s8(v7, v8, 8uLL);
      int8x16_t v26 = vextq_s8(v7, v8, 0xCuLL);
    }
    *a4 = v24;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v25;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v26;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v8;
  }
  return result;
}

float32x4_t sub_1D0CDF074(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4 = 0;
  int v5 = a4 + 4;
  do
  {
    int v6 = (const float *)(a2 + v4);
    float32x4_t result = vld1q_dup_f32(v6);
    v5[-4] = result;
    v5[-3] = result;
    v5[-2] = result;
    v5[-1] = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = result;
    v5[3] = result;
    v4 += 4;
    int v5 = (float32x4_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 128);
  return result;
}

float32x4_t sub_1D0CDF0AC(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4 = 0;
  int v5 = a4 + 2;
  do
  {
    int v6 = (const float *)(a2 + v4);
    float32x4_t result = vld1q_dup_f32(v6);
    v5[-2] = result;
    v5[-1] = result;
    *int v5 = result;
    v5[1] = result;
    v4 += 4;
    int v5 = (float32x4_t *)((char *)v5 + 2 * a3);
  }
  while (v4 != 64);
  return result;
}

float32x4_t sub_1D0CDF0DC(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4 = (const float *)(a2 + 4);
  unint64_t v5 = -2;
  do
  {
    int v6 = v4 - 1;
    float32x4_t result = vld1q_dup_f32(v6);
    float32x4_t v8 = vld1q_dup_f32(v4);
    *a4 = result;
    a4[1] = result;
    int16x8_t v9 = (float32x4_t *)((char *)a4 + 2 * a3);
    *int16x8_t v9 = v8;
    v9[1] = v8;
    v5 += 2;
    v4 += 2;
    a4 = (float32x4_t *)((char *)a4 + 4 * a3);
  }
  while (v5 < 6);
  return result;
}

float32x4_t sub_1D0CDF11C(uint64_t a1, const float *a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v4 = a2 + 2;
  unint64_t v5 = a2;
  float32x4_t v6 = vld1q_dup_f32(v5++);
  *a4 = v6;
  float32x4_t v7 = vld1q_dup_f32(v5);
  *(float32x4_t *)((char *)a4 + 2 * a3) = v7;
  float32x4_t v8 = a2 + 3;
  float32x4_t v9 = vld1q_dup_f32(v4);
  *(float32x4_t *)((char *)a4 + 4 * a3) = v9;
  float32x4_t result = vld1q_dup_f32(v8);
  *(float32x4_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1D0CDF15C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[16];
  long long v5 = a2[17];
  long long v6 = a2[18];
  long long v7 = a2[19];
  long long v8 = a2[20];
  long long v9 = a2[21];
  int16x8_t v10 = (_OWORD *)(a4 + 64);
  uint64_t v11 = 32;
  long long v12 = a2[22];
  long long v13 = a2[23];
  do
  {
    *(v10 - 4) = v4;
    *(v10 - 3) = v5;
    *(v10 - 2) = v6;
    *(v10 - 1) = v7;
    *int16x8_t v10 = v8;
    v10[1] = v9;
    v10[2] = v12;
    v10[3] = v13;
    int16x8_t v10 = (_OWORD *)((char *)v10 + 2 * a3);
    --v11;
  }
  while (v11);
}

void sub_1D0CDF198(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[8];
  long long v5 = a2[9];
  long long v6 = a2[10];
  long long v7 = a2[11];
  long long v8 = (_OWORD *)(a4 + 32);
  uint64_t v9 = 16;
  do
  {
    *(v8 - 2) = v4;
    *(v8 - 1) = v5;
    *long long v8 = v6;
    v8[1] = v7;
    long long v8 = (_OWORD *)((char *)v8 + 2 * a3);
    --v9;
  }
  while (v9);
}

void sub_1D0CDF1C4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  unint64_t v6 = -2;
  do
  {
    *a4 = v4;
    a4[1] = v5;
    long long v7 = (_OWORD *)((char *)a4 + 2 * a3);
    *long long v7 = v4;
    v7[1] = v5;
    v6 += 2;
    a4 = (_OWORD *)((char *)a4 + 4 * a3);
  }
  while (v6 < 6);
}

__n128 sub_1D0CDF1F4(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  __n128 result = a2[2];
  *a4 = result;
  *(__n128 *)((char *)a4 + 2 * a3) = result;
  *(__n128 *)((char *)a4 + 4 * a3) = result;
  *(__n128 *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1D0CDF21C(uint64_t a1, uint64_t a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = 0;
  long long v5 = (const float *)(a2 + 32);
  int16x8_t v6 = (int16x8_t)vld1q_dup_f32(v5);
  long long v7 = (const float *)(a2 + 96);
  int16x8_t v8 = (int16x8_t)vld1q_dup_f32(v7);
  int16x8_t v9 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F410);
  int16x8_t v10 = vmulq_s16(v8, (int16x8_t)xmmword_1D0D7F420);
  int16x8_t v11 = *(int16x8_t *)(a2 + 64);
  int16x8_t v12 = *(int16x8_t *)(a2 + 80);
  int16x8_t v13 = vshlq_n_s16(v11, 3uLL);
  int16x8_t v14 = vshlq_n_s16(v12, 3uLL);
  int32x4_t v15 = a4 + 1;
  int16x8_t v16 = v6;
  do
  {
    uint64_t v17 = (const float *)(a2 + v4);
    int16x8_t v18 = (int16x8_t)vld1q_dup_f32(v17);
    int16x8_t v13 = vsubq_s16(v13, v11);
    int16x8_t v14 = vsubq_s16(v14, v12);
    v15[-1] = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v13, v9), v16), v18, (int16x8_t)xmmword_1D0D7F4B0), 4uLL);
    *int32x4_t v15 = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vaddq_s16(vaddq_s16(v14, v10), v16), v18, (int16x8_t)xmmword_1D0D7F4C0), 4uLL);
    int16x8_t v16 = vaddq_s16(v16, v6);
    v4 += 4;
    int32x4_t v15 = (uint16x8_t *)((char *)v15 + 2 * a3);
  }
  while (v4 != 32);
}

uint16x8_t sub_1D0CDF2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint16x8_t *a4)
{
  uint64_t v4 = (const float *)(a2 + 48);
  int16x8_t v5 = (int16x8_t)vld1q_dup_f32(v4);
  int16x8_t v6 = vmulq_s16(v5, (int16x8_t)xmmword_1D0D7F410);
  int32x4_t v7 = *(int32x4_t *)a2;
  int16x8_t v8 = *(int16x8_t *)(a2 + 32);
  v9.i64[0] = 0x3000300030003;
  v9.i64[1] = 0x3000300030003;
  int16x8_t v10 = (const float *)(a2 + 16);
  int16x8_t v11 = (int16x8_t)vld1q_dup_f32(v10);
  *a4 = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(vmlaq_s16(v6, v8, v9), (int16x8_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), (int16x8_t)xmmword_1D0D7F4C0), v11), 3uLL);
  *(uint16x8_t *)((char *)a4 + 2 * a3) = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16(v8, v8), v6), (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v7.i8, 1), (int16x8_t)xmmword_1D0D7F4C0), vaddq_s16(v11, v11)), 3uLL);
  *(uint16x8_t *)((char *)a4 + 4 * a3) = vrshrq_n_u16((uint16x8_t)vmlaq_s16(vmlaq_s16(vaddq_s16(v6, v8), (int16x8_t)vdupq_laneq_s32(v7, 2), (int16x8_t)xmmword_1D0D7F4C0), v11, v9), 3uLL);
  uint16x8_t result = vrshrq_n_u16((uint16x8_t)vaddq_s16(vmlaq_s16(v6, (int16x8_t)vdupq_laneq_s32(v7, 3), (int16x8_t)xmmword_1D0D7F4C0), vshlq_n_s16(v11, 2uLL)), 3uLL);
  *(uint16x8_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

void sub_1D0CDF36C(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vaddq_s16(vaddq_s16(a2[4], *a2), vaddq_s16(a2[1], a2[5]));
  int32x4_t v5 = vpaddq_s32(v4, v4);
  uint16x8_t v6 = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 4uLL);
  unint64_t v7 = -2;
  do
  {
    *a4 = v6;
    a4[1] = v6;
    int16x8_t v8 = (uint16x8_t *)((char *)a4 + 2 * a3);
    *int16x8_t v8 = v6;
    v8[1] = v6;
    v7 += 2;
    a4 = (uint16x8_t *)((char *)a4 + 4 * a3);
  }
  while (v7 < 6);
}

uint16x8_t sub_1D0CDF3B8(uint64_t a1, int16x8_t *a2, uint64_t a3, uint16x8_t *a4)
{
  int32x4_t v4 = (int32x4_t)vaddq_s16(a2[2], *a2);
  int32x4_t v5 = vpaddq_s32(v4, v4);
  uint16x8_t result = vrshrq_n_u16((uint16x8_t)vpaddq_s32(v5, v5), 3uLL);
  *a4 = result;
  *(uint16x8_t *)((char *)a4 + 2 * a3) = result;
  *(uint16x8_t *)((char *)a4 + 4 * a3) = result;
  *(uint16x8_t *)((char *)a4 + 6 * a3) = result;
  return result;
}

uint64_t sub_1D0CDF3F4(uint64_t result, uint64_t a2, uint64_t a3, int64x2_t *a4, double a5, double a6, uint16x4_t a7, uint16x4_t a8, uint16x4_t a9, uint16x4_t a10, uint16x4_t a11, uint16x4_t a12)
{
  v74[33] = *MEMORY[0x1E4F143B8];
  int16x8_t v12 = v74;
  int v13 = byte_1D0D7FEBA[result];
  uint64_t v14 = a2 + 256;
  if (result <= 0x11) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = a2 + 256;
  }
  if (result > 0x11) {
    uint64_t v14 = a2;
  }
  if (v13 < 0)
  {
    uint64_t v17 = byte_1D0D7FEBA[(int)result];
    if (v17 < 0)
    {
      int v18 = word_1D0D7FFE0[(int)result - 11];
      int v19 = v17 * v18 + 128;
      unint64_t v16 = 32;
      do
      {
        v73[v17] = *(_DWORD *)(v14 + 4 * ((v19 >> 8) - 1));
        v19 += v18;
        BOOL v20 = __CFADD__(v17++, 1);
      }
      while (!v20);
    }
    else
    {
      unint64_t v16 = 32;
    }
  }
  else
  {
    unint64_t v16 = 64;
  }
  uint64_t v21 = 0;
  for (unint64_t i = 0; i < v16; i += 16)
  {
    int64x2_t v23 = &v72[v21];
    long long v24 = *(_OWORD *)(v15 + v21 + 16);
    v23[9] = *(_OWORD *)(v15 + v21);
    v23[10] = v24;
    long long v25 = *(_OWORD *)(v15 + v21 + 32);
    long long v26 = *(_OWORD *)(v15 + v21 + 48);
    v23[11] = v25;
    v23[12] = v26;
    v21 += 64;
  }
  v73[0] = *(_DWORD *)(a2 - 4);
  if ((v13 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      unint64_t v43 = 0;
      int v44 = 2 * v13;
      uint64_t v45 = 6 * a3;
      uint64_t v46 = 8 * a3;
      uint64_t v47 = 4 * a3;
      uint64_t v48 = 2 * a3;
      LODWORD(result) = v13;
      int v49 = 3 * v13;
      do
      {
        int16x8_t v50 = (uint16x8_t *)((char *)v74 + 4 * ((int)result >> 5) + 4);
        int64x2_t v51 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v49) >> 5) + 4);
        unint64_t v52 = -4;
        char v53 = a4;
        int16x8_t v54 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v13) >> 5) + 4);
        int32x4_t v55 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v44) >> 5) + 4);
        do
        {
          uint16x8_t v56 = *(uint16x8_t *)((char *)v50 - 4);
          uint16x8_t v57 = *v50++;
          LODWORD(v25) = result & 0x1F;
          LODWORD(v26) = 32 - v25;
          int32x4_t v58 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v57.i8, *(uint16x4_t *)&v25, 0), *(uint16x4_t *)v56.i8, *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v57, *(uint16x4_t *)&v25, 0), v56, *(uint16x4_t *)&v26, 0), 5uLL);
          uint16x8_t v59 = *(uint16x8_t *)((char *)v54 - 4);
          uint16x8_t v60 = *v54++;
          a7.i32[0] = (result + v13) & 0x1F;
          a8.i32[0] = 32 - a7.i32[0];
          int32x4_t v61 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v60.i8, a7, 0), *(uint16x4_t *)v59.i8, a8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v60, a7, 0), v59, a8, 0), 5uLL);
          uint16x8_t v62 = *(uint16x8_t *)((char *)v55 - 4);
          uint16x8_t v63 = *v55++;
          a9.i32[0] = (result + v44) & 0x1F;
          a10.i32[0] = 32 - a9.i32[0];
          int32x4_t v64 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v63.i8, a9, 0), *(uint16x4_t *)v62.i8, a10, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v63, a9, 0), v62, a10, 0), 5uLL);
          uint16x8_t v65 = *(uint16x8_t *)((char *)v51 - 4);
          uint16x8_t v66 = *v51++;
          a11.i32[0] = (result + v49) & 0x1F;
          a12.i32[0] = 32 - a11.i32[0];
          int32x4_t v67 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v66.i8, a11, 0), *(uint16x4_t *)v65.i8, a12, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v66, a11, 0), v65, a12, 0), 5uLL);
          int64x2_t v68 = (int64x2_t)vtrn1q_s32(v58, v61);
          int64x2_t v69 = (int64x2_t)vtrn2q_s32(v58, v61);
          int64x2_t v70 = (int64x2_t)vtrn1q_s32(v64, v67);
          int64x2_t v71 = (int64x2_t)vtrn2q_s32(v64, v67);
          *char v53 = vzip1q_s64(v68, v70);
          *(int64x2_t *)((char *)v53 + v48) = vzip1q_s64(v69, v71);
          *(int64x2_t *)((char *)v53 + v47) = vzip2q_s64(v68, v70);
          *(int64x2_t *)((char *)v53 + v45) = vzip2q_s64(v69, v71);
          v52 += 4;
          char v53 = (int64x2_t *)((char *)v53 + v46);
        }
        while (v52 < 0x1C);
        uint16x8_t result = (result + 4 * v13);
        ++a4;
        BOOL v20 = v43 >= 0x1C;
        v43 += 4;
      }
      while (!v20);
    }
    else
    {
      uint64_t v27 = 0;
      int v28 = v13;
      do
      {
        uint64_t v29 = 0;
        LODWORD(v25) = v28 & 0x1F;
        LODWORD(v26) = 32 - v25;
        uint64_t v30 = (uint64_t)a4->i64 + 2 * v27 * a3;
        uint64_t v31 = 1;
        do
        {
          uint16x8_t v32 = &v74[v29];
          uint64_t v33 = 2 * v29;
          long long v34 = (char *)v32 + 4 * ((uint64_t)v28 >> 5);
          *(int16x8_t *)(v30 + v33) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v34 + 4), *(uint16x4_t *)&v25, 0), *(uint16x4_t *)v34, *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v34 + 4), *(uint16x4_t *)&v25, 0), *(uint16x8_t *)v34, *(uint16x4_t *)&v26, 0), 5uLL);
          uint16x8_t result = v31;
          *(int16x8_t *)(v30 + (v33 | 0x10)) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v34 + 20), *(uint16x4_t *)&v25, 0), *(uint16x4_t *)(v34 + 16), *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v34 + 20), *(uint16x4_t *)&v25, 0), *((uint16x8_t *)v34 + 1), *(uint16x4_t *)&v26, 0), 5uLL);
          *(int16x8_t *)(v30 + (v33 | 0x20)) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v34 + 36), *(uint16x4_t *)&v25, 0), *(uint16x4_t *)(v34 + 32), *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v34 + 36), *(uint16x4_t *)&v25, 0), *((uint16x8_t *)v34 + 2), *(uint16x4_t *)&v26, 0), 5uLL);
          *(int16x8_t *)(v30 + (v33 | 0x30)) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v34 + 52), *(uint16x4_t *)&v25, 0), *(uint16x4_t *)(v34 + 48), *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v34 + 52), *(uint16x4_t *)&v25, 0), *((uint16x8_t *)v34 + 3), *(uint16x4_t *)&v26, 0), 5uLL);
          uint64_t v29 = 8;
          uint64_t v31 = 0;
        }
        while ((result & 1) != 0);
        ++v27;
        v28 += v13;
      }
      while (v27 != 32);
    }
  }
  else
  {
    int v35 = 0;
    uint64_t v36 = (uint64_t)v13 >> 5;
    do
    {
      uint64_t v37 = 0;
      int16x8_t v12 = (void *)((char *)v12 + 4 * v36);
      char v38 = 1;
      do
      {
        int v39 = (int64x2_t *)&v12[v37];
        uint64_t v40 = 2 * v37;
        int64x2_t v41 = v39[1];
        *(int64x2_t *)((char *)a4 + v40) = *v39;
        *(int64x2_t *)((char *)a4 + (v40 | 0x10)) = v41;
        int64x2_t v42 = v39[3];
        *(int64x2_t *)((char *)a4 + (v40 | 0x20)) = v39[2];
        LOBYTE(v39) = v38;
        *(int64x2_t *)((char *)a4 + (v40 | 0x30)) = v42;
        uint64_t v37 = 8;
        char v38 = 0;
      }
      while ((v39 & 1) != 0);
      a4 = (int64x2_t *)((char *)a4 + 2 * a3);
      ++v35;
    }
    while (v35 != 32);
  }
  return result;
}

unint64_t sub_1D0CDF7F0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, __n128 a7, __n128 a8, __n128 a9, uint16x4_t a10, uint16x4_t a11, uint16x4_t a12)
{
  v74[17] = *MEMORY[0x1E4F143B8];
  int v12 = byte_1D0D7FEBA[result];
  uint64_t v13 = a2 + 128;
  if (result <= 0x11) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = a2 + 128;
  }
  if (v12 < 0)
  {
    uint64_t v16 = 0;
    if (result > 0x11) {
      uint64_t v13 = a2;
    }
    long long v17 = *(_OWORD *)(a2 + ((unint64_t)(result < 0x12) << 7));
    long long v18 = *(_OWORD *)(v13 + 16);
    a7 = *(__n128 *)(v13 + 32);
    a8 = *(__n128 *)(v13 + 48);
    if ((int)result >= 18) {
      int v19 = result - 18;
    }
    else {
      int v19 = 18 - result;
    }
    BOOL v20 = &xmmword_1D0D80500[4 * (uint64_t)v19];
    unint64_t v15 = 16;
    do
    {
      a9 = (__n128)vqtbl4q_s8(*(int8x16x4_t *)(&a7 - 2), v20[v16]);
      *(__n128 *)&v72[v16 * 16 + 16] = a9;
      ++v16;
    }
    while (v16 != 4);
  }
  else
  {
    unint64_t v15 = 32;
  }
  uint64_t v21 = 0;
  for (unint64_t i = 0; i < v15; i += 16)
  {
    int64x2_t v23 = &v72[v21];
    long long v24 = *(_OWORD *)(v14 + v21 + 16);
    v23[5] = *(_OWORD *)(v14 + v21);
    v23[6] = v24;
    long long v25 = *(_OWORD *)(v14 + v21 + 32);
    long long v26 = *(_OWORD *)(v14 + v21 + 48);
    v23[7] = v25;
    v23[8] = v26;
    v21 += 64;
  }
  int v73 = *(_DWORD *)(a2 - 4);
  if ((v12 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      unint64_t v42 = 0;
      int v43 = 2 * v12;
      uint64_t v44 = 6 * a3;
      uint64_t v45 = 8 * a3;
      uint64_t v46 = 4 * a3;
      uint64_t v47 = 2 * a3;
      LODWORD(result) = v12;
      int v48 = 3 * v12;
      do
      {
        int v49 = (uint16x8_t *)((char *)v74 + 4 * ((int)result >> 5) + 4);
        int16x8_t v50 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v48) >> 5) + 4);
        unint64_t v51 = -4;
        unint64_t v52 = (int64x2_t *)a4;
        char v53 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v12) >> 5) + 4);
        int16x8_t v54 = (uint16x8_t *)((char *)v74 + 4 * (((int)result + v43) >> 5) + 4);
        do
        {
          uint16x8_t v55 = *(uint16x8_t *)((char *)v49 - 4);
          uint16x8_t v56 = *v49++;
          LODWORD(v25) = result & 0x1F;
          LODWORD(v26) = 32 - v25;
          int32x4_t v57 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v56.i8, *(uint16x4_t *)&v25, 0), *(uint16x4_t *)v55.i8, *(uint16x4_t *)&v26, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v56, *(uint16x4_t *)&v25, 0), v55, *(uint16x4_t *)&v26, 0), 5uLL);
          uint16x8_t v58 = *(uint16x8_t *)((char *)v53 - 4);
          uint16x8_t v59 = *v53++;
          a7.n128_u32[0] = (result + v12) & 0x1F;
          a8.n128_u32[0] = 32 - a7.n128_u32[0];
          int32x4_t v60 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v59.i8, (uint16x4_t)a7.n128_u64[0], 0), *(uint16x4_t *)v58.i8, (uint16x4_t)a8.n128_u64[0], 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v59, (uint16x4_t)a7.n128_u64[0], 0), v58, (uint16x4_t)a8.n128_u64[0], 0), 5uLL);
          uint16x8_t v61 = *(uint16x8_t *)((char *)v54 - 4);
          uint16x8_t v62 = *v54++;
          a9.n128_u32[0] = (result + v43) & 0x1F;
          a10.i32[0] = 32 - a9.n128_u32[0];
          int32x4_t v63 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v62.i8, (uint16x4_t)a9.n128_u64[0], 0), *(uint16x4_t *)v61.i8, a10, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v62, (uint16x4_t)a9.n128_u64[0], 0), v61, a10, 0), 5uLL);
          uint16x8_t v64 = *(uint16x8_t *)((char *)v50 - 4);
          uint16x8_t v65 = *v50++;
          a11.i32[0] = (result + v48) & 0x1F;
          a12.i32[0] = 32 - a11.i32[0];
          int32x4_t v66 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)v65.i8, a11, 0), *(uint16x4_t *)v64.i8, a12, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(v65, a11, 0), v64, a12, 0), 5uLL);
          int64x2_t v67 = (int64x2_t)vtrn1q_s32(v57, v60);
          int64x2_t v68 = (int64x2_t)vtrn2q_s32(v57, v60);
          int64x2_t v69 = (int64x2_t)vtrn1q_s32(v63, v66);
          int64x2_t v70 = (int64x2_t)vtrn2q_s32(v63, v66);
          int64x2_t *v52 = vzip1q_s64(v67, v69);
          *(int64x2_t *)((char *)v52 + v47) = vzip1q_s64(v68, v70);
          *(int64x2_t *)((char *)v52 + v46) = vzip2q_s64(v67, v69);
          *(int64x2_t *)((char *)v52 + v44) = vzip2q_s64(v68, v70);
          v51 += 4;
          unint64_t v52 = (int64x2_t *)((char *)v52 + v45);
        }
        while (v51 < 0xC);
        uint16x8_t result = (result + 4 * v12);
        a4 += 16;
        BOOL v71 = v42 >= 0xC;
        v42 += 4;
      }
      while (!v71);
    }
    else
    {
      uint64_t v27 = (int16x8_t *)(a4 + 32);
      uint64_t v28 = 16;
      int v29 = v12;
      do
      {
        uint16x8_t v30 = (uint16x8_t)vdupq_n_s16(32 - (v29 & 0x1Fu));
        uint16x8_t v31 = (uint16x8_t)vdupq_n_s16(v29 & 0x1F);
        int16x8_t v32 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v74[2] + 4 * (v29 >> 5) + 4), *(uint16x4_t *)v31.i8), *(uint16x4_t *)((char *)&v74[2] + 4 * (v29 >> 5)), *(uint16x4_t *)v30.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v74[2] + 4 * (v29 >> 5) + 4), v31), *(uint16x8_t *)((char *)&v74[2] + 4 * (v29 >> 5)), v30), 5uLL);
        v27[-2] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v74 + 4 * (v29 >> 5) + 4), *(uint16x4_t *)v31.i8), *(uint16x4_t *)((char *)v74 + 4 * (v29 >> 5)), *(uint16x4_t *)v30.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v74 + 4 * (v29 >> 5) + 4), v31), *(uint16x8_t *)((char *)v74 + 4 * (v29 >> 5)), v30), 5uLL);
        v27[-1] = v32;
        int16x8_t v33 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v74[4] + 4 * (v29 >> 5) + 4), *(uint16x4_t *)v31.i8), *(uint16x4_t *)((char *)&v74[4] + 4 * (v29 >> 5)), *(uint16x4_t *)v30.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v74[4] + 4 * (v29 >> 5) + 4), v31), *(uint16x8_t *)((char *)&v74[4] + 4 * (v29 >> 5)), v30), 5uLL);
        uint16x8_t result = (unint64_t)&v74[6] + 4 * (v29 >> 5);
        int16x8_t v34 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)(result + 4), *(uint16x4_t *)v31.i8), *(uint16x4_t *)result, *(uint16x4_t *)v30.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)(result + 4), v31), *(uint16x8_t *)result, v30), 5uLL);
        *uint64_t v27 = v33;
        v27[1] = v34;
        v29 += v12;
        uint64_t v27 = (int16x8_t *)((char *)v27 + 2 * a3);
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    int v35 = v12 >> 5;
    uint64_t v36 = (_OWORD *)(a4 + 32);
    uint64_t v37 = 4 * v35;
    char v38 = (long long *)((char *)&v74[6] + v37);
    int v39 = 16;
    do
    {
      long long v40 = *(v38 - 2);
      *(v36 - 2) = *(v38 - 3);
      *(v36 - 1) = v40;
      long long v41 = *v38;
      *uint64_t v36 = *(v38 - 1);
      v36[1] = v41;
      uint64_t v36 = (_OWORD *)((char *)v36 + 2 * a3);
      char v38 = (long long *)((char *)v38 + v37);
      --v39;
    }
    while (v39);
  }
  return result;
}

uint64_t sub_1D0CDFBBC(uint64_t result, _OWORD *a2, uint64_t a3, int16x8_t *a4, double a5, double a6, double a7, int8x16_t a8, uint16x4_t a9, uint16x4_t a10, uint16x4_t a11, uint16x4_t a12)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  int v12 = byte_1D0D7FEBA[result];
  uint64_t v13 = a2 + 4;
  if (v12 < 0)
  {
    if (result <= 0x11) {
      uint64_t v14 = a2 + 4;
    }
    else {
      uint64_t v14 = a2;
    }
    long long v15 = a2[4 * (unint64_t)(result < 0x12)];
    long long v16 = v14[1];
    if ((int)result >= 18) {
      int v17 = result - 18;
    }
    else {
      int v17 = 18 - result;
    }
    long long v18 = &xmmword_1D0D80500[4 * (uint64_t)v17];
    a8 = v18[3];
    v59[1] = vqtbl2q_s8(*(int8x16x2_t *)&v15, v18[2]);
    int8x16_t v60 = vqtbl2q_s8(*(int8x16x2_t *)&v15, a8);
  }
  if (result <= 0x11) {
    uint64_t v13 = a2;
  }
  long long v19 = v13[1];
  long long v20 = v13[2];
  long long v61 = a2[4 * (unint64_t)(result > 0x11)];
  v62[0] = v19;
  long long v21 = v13[3];
  v62[1] = v20;
  v62[2] = v21;
  v60.i32[3] = *((_DWORD *)a2 - 1);
  if ((v12 & 0x1F) != 0)
  {
    if (result < 0x12)
    {
      uint64_t v38 = 0;
      int v39 = 2 * v12;
      char v40 = 1;
      int v41 = v12;
      int v42 = 3 * v12;
      do
      {
        unint64_t v43 = 0;
        uint16x8_t result = (uint64_t)(v41 + v12) >> 5;
        char v44 = v40;
        char v46 = 1;
        uint64_t v47 = &a4[v38];
        do
        {
          char v48 = v46;
          int v49 = &v62[v43 / 4 - 1];
          LODWORD(v21) = v41 & 0x1F;
          LODWORD(v19) = 32 - v21;
          int32x4_t v50 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)((char *)v49 + 4 * ((uint64_t)v41 >> 5) + 4), *(uint16x4_t *)&v21, 0), *(uint16x4_t *)((char *)v49 + 4 * ((uint64_t)v41 >> 5)), *(uint16x4_t *)&v19, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)((char *)v49 + 4 * ((uint64_t)v41 >> 5) + 4), *(uint16x4_t *)&v21, 0), *(uint16x8_t *)((char *)v49 + 4 * ((uint64_t)v41 >> 5)), *(uint16x4_t *)&v19, 0), 5uLL);
          LODWORD(v20) = ((_BYTE)v41 + (_BYTE)v12) & 0x1F;
          a8.i32[0] = 32 - ((v41 + v12) & 0x1F);
          int32x4_t v51 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)((char *)v49 + 4 * result + 4), *(uint16x4_t *)&v20, 0), *(uint16x4_t *)((char *)v49 + 4 * result), *(uint16x4_t *)a8.i8, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)((char *)v49 + 4 * result + 4), *(uint16x4_t *)&v20, 0), *(uint16x8_t *)((char *)v49 + 4 * result), *(uint16x4_t *)a8.i8, 0), 5uLL);
          unint64_t v52 = (char *)v49 + 4 * ((uint64_t)(v41 + v39) >> 5);
          a9.i32[0] = ((_BYTE)v41 + (_BYTE)v39) & 0x1F;
          a10.i32[0] = 32 - ((v41 + v39) & 0x1F);
          int32x4_t v53 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)(v52 + 4), a9, 0), *(uint16x4_t *)v52, a10, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)(v52 + 4), a9, 0), *(uint16x8_t *)v52, a10, 0), 5uLL);
          uint64_t v45 = (uint64_t)(v41 + v42) >> 5;
          a11.i32[0] = (v41 + v42) & 0x1F;
          a12.i32[0] = 32 - a11.i32[0];
          int32x4_t v54 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_lane_u16(vmull_lane_u16(*(uint16x4_t *)((char *)v49 + 4 * v45 + 4), a11, 0), *(uint16x4_t *)((char *)v49 + 4 * v45), a12, 0), 5uLL), (int32x4_t)vmlal_high_lane_u16(vmull_high_lane_u16(*(uint16x8_t *)((char *)v49 + 4 * v45 + 4), a11, 0), *(uint16x8_t *)((char *)v49 + 4 * v45), a12, 0), 5uLL);
          int64x2_t v55 = (int64x2_t)vtrn1q_s32(v50, v51);
          int64x2_t v56 = (int64x2_t)vtrn2q_s32(v50, v51);
          int64x2_t v57 = (int64x2_t)vtrn1q_s32(v53, v54);
          int64x2_t v58 = (int64x2_t)vtrn2q_s32(v53, v54);
          *(int64x2_t *)((char *)v47 + 2 * v43 * a3) = vzip1q_s64(v55, v57);
          *(int64x2_t *)((char *)v47 + 2 * (v43 | 1) * a3) = vzip1q_s64(v56, v58);
          *(int64x2_t *)((char *)v47 + 2 * (v43 | 2) * a3) = vzip2q_s64(v55, v57);
          *(int64x2_t *)((char *)v47 + 2 * (v43 | 3) * a3) = vzip2q_s64(v56, v58);
          unint64_t v43 = 4;
          char v46 = 0;
        }
        while ((v48 & 1) != 0);
        char v40 = 0;
        v41 += 4 * v12;
        uint64_t v38 = 1;
      }
      while ((v44 & 1) != 0);
    }
    else
    {
      int64x2_t v22 = a4 + 1;
      uint64_t v23 = 8;
      int v24 = v12;
      do
      {
        uint16x8_t v25 = (uint16x8_t)vdupq_n_s16(32 - (v24 & 0x1Fu));
        uint16x8_t v26 = (uint16x8_t)vdupq_n_s16(v24 & 0x1F);
        v22[-1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)&v62[-1] + 4 * (v24 >> 5) + 4), *(uint16x4_t *)v26.i8), *(uint16x4_t *)((char *)&v62[-1] + 4 * (v24 >> 5)), *(uint16x4_t *)v25.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)&v62[-1] + 4 * (v24 >> 5) + 4), v26), *(uint16x8_t *)((char *)&v62[-1] + 4 * (v24 >> 5)), v25), 5uLL);
        int16x8_t *v22 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v62 + 4 * (v24 >> 5) + 4), *(uint16x4_t *)v26.i8), *(uint16x4_t *)((char *)v62 + 4 * (v24 >> 5)), *(uint16x4_t *)v25.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v62 + 4 * (v24 >> 5) + 4), v26), *(uint16x8_t *)((char *)v62 + 4 * (v24 >> 5)), v25), 5uLL);
        v24 += v12;
        int64x2_t v22 = (int16x8_t *)((char *)v22 + 2 * a3);
        --v23;
      }
      while (v23);
    }
  }
  else
  {
    int v27 = v12 >> 5;
    int v28 = v12 >> 4;
    uint64_t v29 = 2 * a3;
    uint64_t v30 = 4 * v28;
    uint64_t v31 = v30 + 64;
    uint64_t v32 = 4 * v27 + 48;
    unsigned int v33 = -2;
    int16x8_t v34 = v59;
    do
    {
      int16x8_t v35 = *(int16x8_t *)((char *)v34 + v32 + 16);
      *a4 = *(int16x8_t *)((char *)v34 + v32);
      a4[1] = v35;
      long long v36 = *(_OWORD *)((char *)v34 + v31);
      uint64_t v37 = &a4->i8[v29];
      *(_OWORD *)uint64_t v37 = *(_OWORD *)((char *)v34 + v31 - 16);
      *((_OWORD *)v37 + 1) = v36;
      v33 += 2;
      int16x8_t v34 = (_OWORD *)((char *)v34 + v30);
      a4 = (int16x8_t *)((char *)a4 + v29 + v29);
    }
    while (v33 < 6);
  }
  return result;
}

uint64_t sub_1D0CDFF2C(uint64_t result, int8x16_t *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v4 = byte_1D0D7FEBA[result];
  int32x4_t v5 = a2 + 2;
  if (v4 < 0)
  {
    int v6 = 18 - result;
    if ((int)result >= 18) {
      int v6 = result - 18;
    }
    int8x16_t v35 = vqtbl1q_s8(a2[2 * (result < 0x12)], xmmword_1D0D80500[4 * (uint64_t)v6 + 3]);
  }
  if (result <= 0x11) {
    int32x4_t v5 = a2;
  }
  int8x16_t v7 = a2[2 * (result > 0x11)];
  int8x16_t v8 = v5[1];
  v36[0] = v7;
  v36[1] = v8;
  v35.i32[3] = a2[-1].i32[3];
  if ((v4 & 0x1F) != 0)
  {
    int v9 = v4 >> 5;
    uint16x8_t v10 = (uint16x8_t)vdupq_n_s16(32 - (v4 & 0x1Fu));
    uint16x8_t v11 = (uint16x8_t)vdupq_n_s16(v4 & 0x1F);
    int v12 = v4 >> 4;
    unsigned int v13 = (2 * v4) & 0x1E;
    uint16x8_t v14 = (uint16x8_t)vdupq_n_s16(32 - v13);
    uint16x8_t v15 = (uint16x8_t)vdupq_n_s16(v13);
    int v16 = (3 * v4) >> 5;
    unsigned int v17 = (3 * v4) & 0x1F;
    uint16x8_t v18 = (uint16x8_t)vdupq_n_s16(32 - v17);
    uint16x8_t v19 = (uint16x8_t)vdupq_n_s16(v17);
    int v20 = v4 >> 3;
    unsigned int v21 = 4 * (v4 & 7);
    uint16x8_t v22 = (uint16x8_t)vdupq_n_s16(32 - v21);
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(v21);
    int32x4_t v24 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v36 + 4 * v9 + 4), *(uint16x4_t *)v11.i8), *(uint16x4_t *)((char *)v36 + 4 * v9), *(uint16x4_t *)v10.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v36 + 4 * v9 + 4), v11), *(uint16x8_t *)((char *)v36 + 4 * v9), v10), 5uLL);
    int32x4_t v25 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v36 + 4 * v12 + 4), *(uint16x4_t *)v15.i8), *(uint16x4_t *)((char *)v36 + 4 * v12), *(uint16x4_t *)v14.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v36 + 4 * v12 + 4), v15), *(uint16x8_t *)((char *)v36 + 4 * v12), v14), 5uLL);
    int32x4_t v26 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v36 + 4 * v16 + 4), *(uint16x4_t *)v19.i8), *(uint16x4_t *)((char *)v36 + 4 * v16), *(uint16x4_t *)v18.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v36 + 4 * v16 + 4), v19), *(uint16x8_t *)((char *)v36 + 4 * v16), v18), 5uLL);
    int32x4_t v27 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v36 + 4 * v20 + 4), *(uint16x4_t *)v23.i8), *(uint16x4_t *)((char *)v36 + 4 * v20), *(uint16x4_t *)v22.i8), 5uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)((char *)v36 + 4 * v20 + 4), v23), *(uint16x8_t *)((char *)v36 + 4 * v20), v22), 5uLL);
    if (result < 0x12)
    {
      int64x2_t v28 = (int64x2_t)vtrn1q_s32(v24, v25);
      int64x2_t v29 = (int64x2_t)vtrn2q_s32(v24, v25);
      int64x2_t v30 = (int64x2_t)vtrn1q_s32(v26, v27);
      int64x2_t v31 = (int64x2_t)vtrn2q_s32(v26, v27);
      int32x4_t v24 = (int32x4_t)vzip1q_s64(v28, v30);
      int32x4_t v26 = (int32x4_t)vzip2q_s64(v28, v30);
      int32x4_t v25 = (int32x4_t)vzip1q_s64(v29, v31);
      int32x4_t v27 = (int32x4_t)vzip2q_s64(v29, v31);
    }
    *a4 = v24;
    *(int32x4_t *)((char *)a4 + 2 * a3) = v25;
    *(int32x4_t *)((char *)a4 + 4 * a3) = v26;
    *(int32x4_t *)((char *)a4 + 6 * a3) = v27;
  }
  else
  {
    if (v4 < 0)
    {
      int8x16_t v8 = v35;
      int8x16_t v32 = vextq_s8(v35, v7, 0xCuLL);
      int8x16_t v33 = vextq_s8(v35, v7, 8uLL);
      int8x16_t v34 = vextq_s8(v35, v7, 4uLL);
    }
    else
    {
      int8x16_t v32 = vextq_s8(v7, v8, 4uLL);
      int8x16_t v33 = vextq_s8(v7, v8, 8uLL);
      int8x16_t v34 = vextq_s8(v7, v8, 0xCuLL);
    }
    *a4 = v32;
    *(int8x16_t *)((char *)a4 + 2 * a3) = v33;
    *(int8x16_t *)((char *)a4 + 4 * a3) = v34;
    *(int8x16_t *)((char *)a4 + 6 * a3) = v8;
  }
  return result;
}

uint64_t sub_1D0CE0170(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  int v3 = *a1;
  if (v3 != *a2) {
    return 0;
  }
  int v4 = a1[1];
  if (v4 != a2[1]) {
    return 0;
  }
  if (v3 == 15)
  {
    BOOL v5 = 1;
  }
  else
  {
    int v7 = *((__int16 *)a1 + 2) - *((__int16 *)a2 + 2);
    if (v7 < 0) {
      int v7 = *((__int16 *)a2 + 2) - *((__int16 *)a1 + 2);
    }
    if (v7 <= a3)
    {
      int v8 = *((__int16 *)a1 + 3) - *((__int16 *)a2 + 3);
      if (v8 < 0) {
        int v8 = *((__int16 *)a2 + 3) - *((__int16 *)a1 + 3);
      }
      BOOL v5 = v8 <= a3;
    }
    else
    {
      BOOL v5 = 0;
    }
  }
  if (v4 == 15)
  {
    BOOL v9 = 1;
  }
  else
  {
    int v10 = *((__int16 *)a1 + 4) - *((__int16 *)a2 + 4);
    if (v10 < 0) {
      int v10 = *((__int16 *)a2 + 4) - *((__int16 *)a1 + 4);
    }
    if (v10 <= a3)
    {
      int v11 = *((__int16 *)a1 + 5) - *((__int16 *)a2 + 5);
      if (v11 < 0) {
        int v11 = *((__int16 *)a2 + 5) - *((__int16 *)a1 + 5);
      }
      BOOL v9 = v11 <= a3;
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  return v9 & v5;
}

uint64_t sub_1D0CE0230(unsigned __int8 *a1, unsigned __int16 *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 8) >> 4;
  if (v2 != *a1) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 9) >> 4;
  if (v3 != a1[1]) {
    return 0;
  }
  if (v2 == 15) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *a2 == *((unsigned __int16 *)a1 + 2) && a2[1] == *((unsigned __int16 *)a1 + 3);
  }
  if (v3 == 15) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a2[2] == *((unsigned __int16 *)a1 + 4) && a2[3] == *((unsigned __int16 *)a1 + 5);
  }
  return v6 & v4;
}

uint64_t sub_1D0CE02D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v5 = a1 + 96;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = -1;
  *(_WORD *)(a1 + 124) = 1;
  uint64_t v6 = a1 + 8;
  while (1)
  {
    uint64_t result = *(void *)(v6 + v4);
    if (!result) {
      break;
    }
    uint64_t result = sub_1D0CE02D8(result, a2);
    uint64_t v8 = *(void *)(*(void *)(v6 + v4) + 128);
    int v9 = *(_DWORD *)(a1 + 120) + *(_DWORD *)(v8 + 24);
    *(_DWORD *)(a1 + 120) = v9;
    uint64_t v10 = *(void *)(a1 + 96) + *(void *)v8;
    *(void *)(a1 + 96) = v10;
    v4 += 8;
    if (v4 == 32)
    {
      unsigned int v11 = v9 + 12;
      *(_DWORD *)(a1 + 120) = v11;
      unint64_t v12 = ((*(unsigned __int16 *)(a2 + 2 * *(__int16 *)(a1 + 124) + 152) * (unint64_t)v11) >> (8 * (*(_WORD *)(a1 + 124) == 0)))
          + v10;
      *(void *)(a1 + 112) = v12;
      goto LABEL_6;
    }
  }
  unint64_t v12 = *(void *)(a1 + 112);
LABEL_6:
  uint64_t v13 = *(void *)(a1 + 88);
  BOOL v14 = *(void *)(v13 + 16) > v12;
  if (v14) {
    uint64_t v13 = v5;
  }
  *(unsigned char *)(a1 + 136) = v14;
  *(void *)(a1 + 128) = v13;
  return result;
}

uint64_t sub_1D0CE03C8(uint64_t result)
{
  unsigned int v1 = (unsigned char *)(result + 200);
  uint64_t v2 = 85;
  do
  {
    *((_DWORD *)v1 - 14) = 0;
    *((void *)v1 - 10) = 0;
    *((void *)v1 - 9) = 0;
    *((void *)v1 - 8) = -1;
    *((_WORD *)v1 - 26) = 1;
    *((void *)v1 - 6) = v1 - 80;
    *((void *)v1 - 1) = 0;
    *unsigned int v1 = 0;
    v1 += 144;
    --v2;
  }
  while (v2);
  *(_DWORD *)(result + 12656) = 0;
  return result;
}

uint64_t sub_1D0CE0408(uint64_t a1)
{
  uint64_t v2 = 0;
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(void *)(a1 + 52) = 0;
  do
  {
    uint64_t v3 = a1 + v2;
    *(void *)(v3 + 152) = 0;
    *(void *)(v3 + 192) = 0;
    *(unsigned char *)(v3 + 200) = 0;
    *(_OWORD *)(v3 + 64) = 0uLL;
    *(_OWORD *)(v3 + 80) = 0uLL;
    v2 += 144;
    *(void *)(v3 + 96) = 0;
  }
  while (v2 != 12240);
  *(void *)(a1 + 12648) = 0;
  *(_DWORD *)(a1 + 12656) = 0;
  *(void *)(a1 + 12664) = 0;
  sub_1D0CE03C8(a1);
  return a1;
}

uint64_t sub_1D0CE0484(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = a1 + 144 * a2;
  *(_DWORD *)(v5 + 64) = a3;
  *(_DWORD *)(v5 + 68) = a2;
  uint64_t v6 = (a2 + 1);
  if (a3 == 3)
  {
    uint64_t v7 = a1 + 144 * a2;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = a1 + 144 * a2 + 72;
    do
    {
      *(void *)(v9 + v8) = a1 + 144 * (int)v6 + 64;
      uint64_t v6 = sub_1D0CE0484(a1);
      v8 += 8;
    }
    while (v8 != 32);
  }
  return v6;
}

uint64_t sub_1D0CE0524(uint64_t a1, int a2, int a3, signed int a4)
{
  if (!*(unsigned char *)a1 || *(_DWORD *)(a1 + 32) == a2 && *(_DWORD *)(a1 + 36) == a3 && *(_DWORD *)(a1 + 40) == a4) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) > a4) {
    return 4294954394;
  }
  signed int v6 = *(_DWORD *)(a1 + 4);
  if (v6 < a4) {
    return 4294954394;
  }
  int v7 = *(_DWORD *)(a1 + 24);
  if (v7 > a2) {
    return 4294954394;
  }
  if (a4 + a2 > v7 + v6) {
    return 4294954394;
  }
  int v8 = *(_DWORD *)(a1 + 28);
  if (v8 > a3 || a4 + a3 > v8 + v6) {
    return 4294954394;
  }
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  unsigned int v9 = __clz(__rbit32(a4)) & 0x1F;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = v9;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 16) - v9;
  int v10 = sub_1D0CE0618(a1, a2, a3, a4, (int *)(a1 + 52));
  uint64_t result = 0;
  *(_DWORD *)(a1 + 56) = v10;
  *(void *)(a1 + 12648) = a1 + 4 * v10 + 12304;
  return result;
}

uint64_t sub_1D0CE0618(uint64_t result, int a2, int a3, int a4, int *a5)
{
  int v5 = 4 - *(_DWORD *)(result + 12);
  int v6 = *(int *)(result + 4) >> 1;
  BOOL v7 = v6 >= a4 && v5 <= 3;
  if (v7)
  {
    uint64_t v9 = result;
    LODWORD(result) = 0;
    int v10 = *(_DWORD *)(v9 + 24);
    int v11 = a3 - *(_DWORD *)(v9 + 28);
    int v12 = a2 - v10;
    uint64_t v13 = v5;
    do
    {
      int v8 = dword_1D0D80700[v13];
      uint64_t result = result + v8 * ((v12 >= v6) | (2 * (v11 >= v6))) + 1;
      if (v6 >> 1 < a4) {
        break;
      }
      v11 %= v6;
      v12 %= v6;
      v6 >>= 1;
      BOOL v7 = v13++ < 3;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    int v8 = 85;
  }
  if (a5) {
    *a5 = v8;
  }
  return result;
}

uint64_t sub_1D0CE06C0(uint64_t result, char *a2, unsigned int *a3)
{
  if (*(unsigned char *)result)
  {
    int v3 = *a2;
    if (v3 == 15)
    {
      char v4 = 0;
      int v5 = *((_DWORD *)a2 + 10);
      int v6 = a2[1];
    }
    else
    {
      int v6 = a2[1];
      int v7 = *((_DWORD *)a2 + 10);
      if (v6 != 15) {
        v7 += *(_DWORD *)(result + 12656);
      }
      char v4 = v6 != 15;
      if (v3 == 1) {
        int v8 = 1;
      }
      else {
        int v8 = v3 + 1;
      }
      int v5 = v8 + v7;
    }
    int v9 = (char)v6;
    if (v6 != 1) {
      int v9 = (char)v6 + 1;
    }
    if (v6 == 15) {
      int v9 = 0;
    }
    long long v20 = *(_OWORD *)a2;
    uint64_t v10 = *(unsigned int *)(result + 52);
    if ((int)v10 >= 1)
    {
      uint64_t v11 = 0;
      unsigned int v12 = v9 + v5;
      __int16 v13 = *((_WORD *)a2 + 23);
      uint64_t v14 = result + 144 * *(int *)(result + 56);
      uint64_t v15 = 144 * v10;
      do
      {
        unsigned int v16 = *a3++;
        uint64_t v17 = v16 >> v4;
        unint64_t v18 = v17 + *(unsigned __int16 *)(*(void *)(result + 12664) + 154) * (unint64_t)v12;
        uint64_t v19 = v14 + v11;
        if (v18 < *(void *)(v14 + v11 + 136))
        {
          *(_OWORD *)(v19 + 104) = v20;
          *(void *)(v19 + 120) = v17;
          *(void *)(v19 + 128) = 0;
          *(void *)(v19 + 136) = v18;
          *(_DWORD *)(v19 + 144) = v12;
          *(_WORD *)(v19 + 148) = 1;
          *(_WORD *)(v19 + 150) = v13;
        }
        v11 += 144;
      }
      while (v15 != v11);
    }
  }
  return result;
}

uint64_t sub_1D0CE07F0(uint64_t a1, int a2, int a3, int a4)
{
  if (!*(unsigned char *)a1) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) > a4) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 < a4) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 > a2) {
    return 0;
  }
  if (a4 + a2 > v5 + v4) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 28);
  if (v6 > a3 || a4 + a3 > v6 + v4) {
    return 0;
  }
  uint64_t v8 = a1 + 144 * (int)sub_1D0CE0618(a1, a2, a3, a4, 0);
  if (*(void *)(v8 + 192)) {
    return v8 + 64;
  }
  else {
    return 0;
  }
}

void sub_1D0CE0894(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, char a8)
{
  *(_WORD *)(a1 + 12690) = 0;
  *(void *)(a1 + 12692) = -1;
  *(void *)(a1 + 12700) = -1;
  *(void *)(a1 + 12708) = 0x4000000040;
  *(_DWORD *)(a1 + 12716) = a4;
  *(void *)(a1 + 12736) = 0x40FFC00040FFC0;
  *(_DWORD *)(a1 + 12720) = a5;
  *(int32x2_t *)(a1 + 12744) = vdup_n_s32(0x40FFC0u);
  *(unsigned char *)(a1 + 12850) = a6;
  *(unsigned char *)(a1 + 12849) = a7;
  *(unsigned char *)(a1 + 12848) = a8;
  *(void *)a1 = a1 + 12752;
  *(void *)(a1 + 8) = a1 + 12800;
  *(_OWORD *)(a1 + 12856) = 0u;
  *(void *)(a1 + 12944) = a2;
  *(void *)(a1 + 12952) = a3;
  uint64_t v11 = sub_1D0CE6374;
  *(void *)(a1 + 13072) = sub_1D0CE6374;
  *(void *)(a1 + 13080) = 0;
  if (*(unsigned char *)(*(void *)(a2 + 4760) + 221)) {
    unsigned int v12 = sub_1D0CE6084;
  }
  else {
    unsigned int v12 = sub_1D0CE6374;
  }
  *(void *)(a1 + 13056) = v12;
  *(void *)(a1 + 13064) = 0;
  if (*(unsigned char *)(*(void *)(a2 + 4760) + 222)) {
    uint64_t v11 = sub_1D0CE5E14;
  }
  *(void *)(a1 + 13040) = v11;
  *(void *)(a1 + 13048) = 0;
  __int16 v13 = *(_DWORD **)(a2 + 4760);
  int v14 = v13[19];
  uint64_t v15 = sub_1D0CE54BC;
  if (v14 == 1) {
    goto LABEL_10;
  }
  if (v14 != 3)
  {
    if (v14 != 2)
    {
LABEL_11:
      uint64_t v15 = sub_1D0CE57A0;
      goto LABEL_12;
    }
    *(_WORD *)(a1 + 12848) = 256;
LABEL_10:
    *(void *)(a1 + 13040) = sub_1D0CE5E14;
    *(void *)(a1 + 13048) = 0;
    __int16 v13 = *(_DWORD **)(a2 + 4760);
    goto LABEL_11;
  }
LABEL_12:
  *(void *)(a1 + 13168) = v15;
  *(void *)(a1 + 13176) = 0;
  unsigned int v16 = nullsub_23;
  switch(v13[18])
  {
    case 1:
      *(_DWORD *)(a1 + 12724) = 16;
      uint64_t v17 = 0x300000003;
      goto LABEL_16;
    case 2:
      *(_DWORD *)(a1 + 12724) = 5;
      uint64_t v17 = 0x2000000003;
LABEL_16:
      *(void *)(a1 + 12728) = v17;
      unint64_t v18 = (uint64_t (*)())sub_1D0CE4144;
      goto LABEL_18;
    case 3:
      *(void *)(a1 + 13168) = sub_1D0CE54BC;
      unint64_t v18 = (uint64_t (*)())sub_1D0CE48D0;
      goto LABEL_18;
    case 4:
      goto LABEL_19;
    default:
      unint64_t v18 = (uint64_t (*)())sub_1D0CE4D6C;
LABEL_18:
      unsigned int v16 = v18;
LABEL_19:
      *(void *)(a1 + 13184) = v16;
      *(void *)(a1 + 13192) = 0;
      int v19 = v13[20];
      long long v20 = sub_1D0CE2AE0;
      switch(v19)
      {
        case 0:
          goto LABEL_25;
        case 2:
          *(void *)(a1 + 12716) = 0x100000001;
          break;
        case 1:
          *(void *)(a1 + 12716) = 0x800000008;
          long long v20 = sub_1D0CE3338;
          goto LABEL_25;
      }
      long long v20 = sub_1D0CE48D0;
LABEL_25:
      *(void *)(a1 + 13200) = v20;
      *(void *)(a1 + 13208) = 0;
      *(unsigned char *)(a1 + 12688) = 0;
      uint64_t v21 = *(void *)(a2 + 16);
      int v22 = *(unsigned __int8 *)(v21 + 2096);
      *(unsigned char *)(a1 + 12689) = v22;
      int v23 = *(unsigned __int8 *)(v21 + 2117);
      if (v22 == 8)
      {
        *(void *)(a1 + 12960) = sub_1D0CE2A90;
        *(void *)(a1 + 12968) = sub_1D0CE2A40;
        *(void *)(a1 + 12976) = sub_1D0CE29F0;
        *(void *)(a1 + 12984) = sub_1D0CE29A0;
        *(void *)(a1 + 12992) = sub_1D0CE2950;
        *(void *)(a1 + 13000) = sub_1D0CE28E4;
        *(void *)(a1 + 13008) = sub_1D0CE2878;
        *(void *)(a1 + 13016) = sub_1D0CE280C;
        *(void *)(a1 + 13024) = sub_1D0CE27A0;
        *(void *)(a1 + 13032) = sub_1D0CE2734;
        *(void *)(a1 + 13088) = sub_1D0CE2690;
        *(void *)(a1 + 13096) = sub_1D0CE25EC;
        *(void *)(a1 + 13104) = sub_1D0CE2548;
        *(void *)(a1 + 13112) = sub_1D0CE24A4;
        *(void *)(a1 + 13120) = sub_1D0CE2400;
        *(void *)(a1 + 13128) = sub_1D0CE2334;
        *(void *)(a1 + 13136) = sub_1D0CE225C;
        *(void *)(a1 + 13144) = sub_1D0CE2184;
        *(void *)(a1 + 13152) = sub_1D0CE20AC;
        *(void *)(a1 + 13160) = sub_1D0CE1FD4;
        *(void *)(a1 + 13216) = sub_1D0CE1F78;
        *(void *)(a1 + 13224) = sub_1D0CE1F1C;
        *(void *)(a1 + 13232) = sub_1D0CE1EC0;
        *(void *)(a1 + 13240) = sub_1D0CE1E64;
        unint64_t v24 = (v23 * v23);
        uint64_t v25 = *(void *)(a1 + 12872);
        unint64_t v26 = *(void *)(a1 + 12880) - v25;
        if (v24 <= v26)
        {
          if (v24 < v26) {
            *(void *)(a1 + 12880) = v25 + v24;
          }
        }
        else
        {
          sub_1D0C4CCE0((unint64_t *)(a1 + 12872), v24 - v26);
        }
        uint64_t v30 = *(void *)(a1 + 12896);
        unint64_t v31 = *(void *)(a1 + 12904) - v30;
        if (v24 <= v31)
        {
          if (v24 < v31) {
            *(void *)(a1 + 12904) = v30 + v24;
          }
        }
        else
        {
          sub_1D0C4CCE0((unint64_t *)(a1 + 12896), v24 - v31);
        }
        uint64_t v34 = *(void *)(a1 + 12920);
        unint64_t v35 = *(void *)(a1 + 12928) - v34;
        if (v24 <= v35)
        {
          if (v24 < v35) {
            *(void *)(a1 + 12928) = v34 + v24;
          }
        }
        else
        {
          sub_1D0C4CCE0((unint64_t *)(a1 + 12920), v24 - v35);
        }
        *(void *)(a1 + 12960) = sub_1D0D78EB8;
        *(void *)(a1 + 12968) = sub_1D0D78E34;
        *(void *)(a1 + 12976) = sub_1D0D78DB0;
        *(void *)(a1 + 12984) = sub_1D0D78D5C;
        *(void *)(a1 + 12992) = sub_1D0D78D08;
        *(void *)(a1 + 13216) = sub_1D0D78C64;
        *(void *)(a1 + 13224) = sub_1D0D78B9C;
        *(void *)(a1 + 13232) = sub_1D0D78A7C;
        uint64_t v38 = sub_1D0D7895C;
      }
      else
      {
        *(void *)(a1 + 12960) = sub_1D0CE1E08;
        *(void *)(a1 + 12968) = sub_1D0CE1DAC;
        *(void *)(a1 + 12976) = sub_1D0CE1D50;
        *(void *)(a1 + 12984) = sub_1D0CE1CF4;
        *(void *)(a1 + 12992) = sub_1D0CE1C98;
        *(void *)(a1 + 13000) = sub_1D0CE1C20;
        *(void *)(a1 + 13008) = sub_1D0CE1BA8;
        *(void *)(a1 + 13016) = sub_1D0CE1B30;
        *(void *)(a1 + 13024) = sub_1D0CE1AB8;
        *(void *)(a1 + 13032) = sub_1D0CE1A40;
        *(void *)(a1 + 13088) = sub_1D0CE19A0;
        *(void *)(a1 + 13096) = sub_1D0CE18FC;
        *(void *)(a1 + 13104) = sub_1D0CE1858;
        *(void *)(a1 + 13112) = sub_1D0CE17B4;
        *(void *)(a1 + 13120) = sub_1D0CE1710;
        *(void *)(a1 + 13128) = sub_1D0CE1640;
        *(void *)(a1 + 13136) = sub_1D0CE1568;
        *(void *)(a1 + 13144) = sub_1D0CE1490;
        *(void *)(a1 + 13152) = sub_1D0CE13B8;
        *(void *)(a1 + 13160) = sub_1D0CE12E0;
        *(void *)(a1 + 13216) = sub_1D0CE1278;
        *(void *)(a1 + 13224) = sub_1D0CE1210;
        *(void *)(a1 + 13232) = sub_1D0CE11A8;
        *(void *)(a1 + 13240) = sub_1D0CE1140;
        unint64_t v27 = (2 * v23 * v23);
        uint64_t v28 = *(void *)(a1 + 12872);
        unint64_t v29 = *(void *)(a1 + 12880) - v28;
        if (v27 <= v29)
        {
          if (v27 < v29) {
            *(void *)(a1 + 12880) = v28 + v27;
          }
        }
        else
        {
          sub_1D0C4CCE0((unint64_t *)(a1 + 12872), v27 - v29);
        }
        uint64_t v32 = *(void *)(a1 + 12896);
        unint64_t v33 = *(void *)(a1 + 12904) - v32;
        if (v27 <= v33)
        {
          if (v27 < v33) {
            *(void *)(a1 + 12904) = v32 + v27;
          }
        }
        else
        {
          sub_1D0C4CCE0((unint64_t *)(a1 + 12896), v27 - v33);
        }
        uint64_t v36 = *(void *)(a1 + 12920);
        unint64_t v37 = *(void *)(a1 + 12928) - v36;
        if (v27 <= v37)
        {
          if (v27 < v37) {
            *(void *)(a1 + 12928) = v36 + v27;
          }
        }
        else
        {
          sub_1D0C4CCE0((unint64_t *)(a1 + 12920), v27 - v37);
        }
        *(void *)(a1 + 12960) = sub_1D0D79460;
        *(void *)(a1 + 12968) = sub_1D0D793D0;
        *(void *)(a1 + 12976) = sub_1D0D79370;
        *(void *)(a1 + 12984) = sub_1D0D79310;
        *(void *)(a1 + 12992) = sub_1D0D79288;
        *(void *)(a1 + 13216) = sub_1D0D791F0;
        *(void *)(a1 + 13224) = sub_1D0D7913C;
        *(void *)(a1 + 13232) = sub_1D0D7907C;
        uint64_t v38 = sub_1D0D78F18;
      }
      *(void *)(a1 + 13240) = v38;
      int v39 = *(unsigned __int8 **)(a2 + 4760);
      if (v39[530] || v39[528] || v39[532] || v39[531])
      {
        *(void *)(a1 + 12680) = a3;
        int v40 = v39[178];
        int v41 = v39[177];
        *(_DWORD *)(a1 + 32) = v40;
        *(_DWORD *)(a1 + 36) = v41;
        *(_DWORD *)(a1 + 20) = 1 << v40;
        *(_DWORD *)(a1 + 24) = 1 << v41;
        int v42 = v40 - v41;
        *(_DWORD *)(a1 + 28) = v42;
        if (v42 <= 3)
        {
          if (!*(unsigned char *)(a1 + 16)) {
            sub_1D0CE0484(a1 + 16, 0, 0);
          }
          *(unsigned char *)(a1 + 16) = 1;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 16) = 0;
      }
      *(_DWORD *)(a1 + 12852) = 5;
      return;
  }
}

uint64_t sub_1D0CE1140(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 128; i += 2)
      {
        int v9 = 2 * *(unsigned __int16 *)(a3 + i) - *(unsigned __int16 *)(a5 + i);
        if (v9 >= 1023) {
          int v9 = 1023;
        }
        *(_WORD *)(a7 + i) = v9 & ~(unsigned __int16)(v9 >> 31);
      }
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE11A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 64; i += 2)
      {
        int v9 = 2 * *(unsigned __int16 *)(a3 + i) - *(unsigned __int16 *)(a5 + i);
        if (v9 >= 1023) {
          int v9 = 1023;
        }
        *(_WORD *)(a7 + i) = v9 & ~(unsigned __int16)(v9 >> 31);
      }
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1210(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 32; i += 2)
      {
        int v9 = 2 * *(unsigned __int16 *)(a3 + i) - *(unsigned __int16 *)(a5 + i);
        if (v9 >= 1023) {
          int v9 = 1023;
        }
        *(_WORD *)(a7 + i) = v9 & ~(unsigned __int16)(v9 >> 31);
      }
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1278(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 16; i += 2)
      {
        int v9 = 2 * *(unsigned __int16 *)(a3 + i) - *(unsigned __int16 *)(a5 + i);
        if (v9 >= 1023) {
          int v9 = 1023;
        }
        *(_WORD *)(a7 + i) = v9 & ~(unsigned __int16)(v9 >> 31);
      }
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE12E0(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 4);
    char v13 = a2 - 3;
    int v14 = *a3;
    int v15 = a3[1];
    int v16 = *a6;
    int v17 = a6[1];
    int v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      uint64_t v19 = 0;
      unint64_t v20 = -2;
      do
      {
        int v21 = (v12 + v14 * *(unsigned __int16 *)(a5 + v19) + v16 * *(unsigned __int16 *)(a8 + v19)) >> v13;
        if (v21 >= 1023) {
          int v21 = 1023;
        }
        *(_WORD *)(a10 + v19) = v21 & ~(unsigned __int16)(v21 >> 31);
        int v22 = (v18 + v15 * *(unsigned __int16 *)(a5 + v19 + 2) + v17 * *(unsigned __int16 *)(a8 + v19 + 2)) >> v13;
        if (v22 >= 1023) {
          int v22 = 1023;
        }
        *(_WORD *)(a10 + v19 + 2) = v22 & ~(unsigned __int16)(v22 >> 31);
        v20 += 2;
        v19 += 4;
      }
      while (v20 < 0x3E);
      ++v10;
      a5 += 128;
      a8 += 128;
      a10 += 2 * a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE13B8(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 4);
    char v13 = a2 - 3;
    int v14 = *a3;
    int v15 = a3[1];
    int v16 = *a6;
    int v17 = a6[1];
    int v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      uint64_t v19 = 0;
      unint64_t v20 = -2;
      do
      {
        int v21 = (v12 + v14 * *(unsigned __int16 *)(a5 + v19) + v16 * *(unsigned __int16 *)(a8 + v19)) >> v13;
        if (v21 >= 1023) {
          int v21 = 1023;
        }
        *(_WORD *)(a10 + v19) = v21 & ~(unsigned __int16)(v21 >> 31);
        int v22 = (v18 + v15 * *(unsigned __int16 *)(a5 + v19 + 2) + v17 * *(unsigned __int16 *)(a8 + v19 + 2)) >> v13;
        if (v22 >= 1023) {
          int v22 = 1023;
        }
        *(_WORD *)(a10 + v19 + 2) = v22 & ~(unsigned __int16)(v22 >> 31);
        v20 += 2;
        v19 += 4;
      }
      while (v20 < 0x1E);
      ++v10;
      a5 += 64;
      a8 += 64;
      a10 += 2 * a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE1490(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 4);
    char v13 = a2 - 3;
    int v14 = *a3;
    int v15 = a3[1];
    int v16 = *a6;
    int v17 = a6[1];
    int v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      uint64_t v19 = 0;
      unint64_t v20 = -2;
      do
      {
        int v21 = (v12 + v14 * *(unsigned __int16 *)(a5 + v19) + v16 * *(unsigned __int16 *)(a8 + v19)) >> v13;
        if (v21 >= 1023) {
          int v21 = 1023;
        }
        *(_WORD *)(a10 + v19) = v21 & ~(unsigned __int16)(v21 >> 31);
        int v22 = (v18 + v15 * *(unsigned __int16 *)(a5 + v19 + 2) + v17 * *(unsigned __int16 *)(a8 + v19 + 2)) >> v13;
        if (v22 >= 1023) {
          int v22 = 1023;
        }
        *(_WORD *)(a10 + v19 + 2) = v22 & ~(unsigned __int16)(v22 >> 31);
        v20 += 2;
        v19 += 4;
      }
      while (v20 < 0xE);
      ++v10;
      a5 += 32;
      a8 += 32;
      a10 += 2 * a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE1568(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 4);
    char v13 = a2 - 3;
    int v14 = *a3;
    int v15 = a3[1];
    int v16 = *a6;
    int v17 = a6[1];
    int v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      uint64_t v19 = 0;
      unint64_t v20 = -2;
      do
      {
        int v21 = (v12 + v14 * *(unsigned __int16 *)(a5 + v19) + v16 * *(unsigned __int16 *)(a8 + v19)) >> v13;
        if (v21 >= 1023) {
          int v21 = 1023;
        }
        *(_WORD *)(a10 + v19) = v21 & ~(unsigned __int16)(v21 >> 31);
        int v22 = (v18 + v15 * *(unsigned __int16 *)(a5 + v19 + 2) + v17 * *(unsigned __int16 *)(a8 + v19 + 2)) >> v13;
        if (v22 >= 1023) {
          int v22 = 1023;
        }
        *(_WORD *)(a10 + v19 + 2) = v22 & ~(unsigned __int16)(v22 >> 31);
        v20 += 2;
        v19 += 4;
      }
      while (v20 < 6);
      ++v10;
      a5 += 16;
      a8 += 16;
      a10 += 2 * a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE1640(uint64_t result, char a2, int *a3, _DWORD *a4, uint64_t a5, int *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 4);
    char v13 = a2 - 3;
    int v14 = *a3;
    int v15 = a3[1];
    int v16 = *a6;
    int v17 = a6[1];
    int v18 = (a7[1] + a4[1] + 1) << (a2 - 4);
    do
    {
      uint64_t v19 = 0;
      char v20 = 1;
      do
      {
        char v21 = v20;
        uint64_t v22 = 2 * v19;
        int v23 = (v12 + v14 * *(unsigned __int16 *)(a5 + 2 * v19) + v16 * *(unsigned __int16 *)(a8 + 2 * v19)) >> v13;
        if (v23 >= 1023) {
          int v23 = 1023;
        }
        *(_WORD *)(a10 + 2 * v19) = v23 & ~(unsigned __int16)(v23 >> 31);
        int v24 = (v18 + v15 * *(unsigned __int16 *)(a5 + (v22 | 2)) + v17 * *(unsigned __int16 *)(a8 + (v22 | 2))) >> v13;
        if (v24 >= 1023) {
          int v24 = 1023;
        }
        *(_WORD *)(a10 + (v22 | 2)) = v24 & ~(unsigned __int16)(v24 >> 31);
        uint64_t v19 = 2;
        char v20 = 0;
      }
      while ((v21 & 1) != 0);
      ++v10;
      a5 += 8;
      a8 += 8;
      a10 += 2 * a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE1710(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 4;
    int v9 = 1 << (a2 - 4) >> 1;
    int v10 = *a3;
    int v11 = a3[1];
    int v12 = *a4;
    int v13 = a4[1];
    do
    {
      uint64_t v14 = 0;
      unint64_t v15 = -2;
      do
      {
        int v16 = ((v9 + v10 * *(unsigned __int16 *)(a5 + v14)) >> v8) + v12;
        if (v16 >= 1023) {
          int v16 = 1023;
        }
        *(_WORD *)(a7 + v14) = v16 & ~(unsigned __int16)(v16 >> 31);
        int v17 = ((v9 + v11 * *(unsigned __int16 *)(a5 + v14 + 2)) >> v8) + v13;
        if (v17 >= 1023) {
          int v17 = 1023;
        }
        *(_WORD *)(a7 + v14 + 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v15 += 2;
        v14 += 4;
      }
      while (v15 < 0x3E);
      ++v7;
      a5 += 128;
      a7 += 2 * a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE17B4(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 4;
    int v9 = 1 << (a2 - 4) >> 1;
    int v10 = *a3;
    int v11 = a3[1];
    int v12 = *a4;
    int v13 = a4[1];
    do
    {
      uint64_t v14 = 0;
      unint64_t v15 = -2;
      do
      {
        int v16 = ((v9 + v10 * *(unsigned __int16 *)(a5 + v14)) >> v8) + v12;
        if (v16 >= 1023) {
          int v16 = 1023;
        }
        *(_WORD *)(a7 + v14) = v16 & ~(unsigned __int16)(v16 >> 31);
        int v17 = ((v9 + v11 * *(unsigned __int16 *)(a5 + v14 + 2)) >> v8) + v13;
        if (v17 >= 1023) {
          int v17 = 1023;
        }
        *(_WORD *)(a7 + v14 + 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v15 += 2;
        v14 += 4;
      }
      while (v15 < 0x1E);
      ++v7;
      a5 += 64;
      a7 += 2 * a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1858(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 4;
    int v9 = 1 << (a2 - 4) >> 1;
    int v10 = *a3;
    int v11 = a3[1];
    int v12 = *a4;
    int v13 = a4[1];
    do
    {
      uint64_t v14 = 0;
      unint64_t v15 = -2;
      do
      {
        int v16 = ((v9 + v10 * *(unsigned __int16 *)(a5 + v14)) >> v8) + v12;
        if (v16 >= 1023) {
          int v16 = 1023;
        }
        *(_WORD *)(a7 + v14) = v16 & ~(unsigned __int16)(v16 >> 31);
        int v17 = ((v9 + v11 * *(unsigned __int16 *)(a5 + v14 + 2)) >> v8) + v13;
        if (v17 >= 1023) {
          int v17 = 1023;
        }
        *(_WORD *)(a7 + v14 + 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v15 += 2;
        v14 += 4;
      }
      while (v15 < 0xE);
      ++v7;
      a5 += 32;
      a7 += 2 * a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE18FC(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 4;
    int v9 = 1 << (a2 - 4) >> 1;
    int v10 = *a3;
    int v11 = a3[1];
    int v12 = *a4;
    int v13 = a4[1];
    do
    {
      uint64_t v14 = 0;
      unint64_t v15 = -2;
      do
      {
        int v16 = ((v9 + v10 * *(unsigned __int16 *)(a5 + v14)) >> v8) + v12;
        if (v16 >= 1023) {
          int v16 = 1023;
        }
        *(_WORD *)(a7 + v14) = v16 & ~(unsigned __int16)(v16 >> 31);
        int v17 = ((v9 + v11 * *(unsigned __int16 *)(a5 + v14 + 2)) >> v8) + v13;
        if (v17 >= 1023) {
          int v17 = 1023;
        }
        *(_WORD *)(a7 + v14 + 2) = v17 & ~(unsigned __int16)(v17 >> 31);
        v15 += 2;
        v14 += 4;
      }
      while (v15 < 6);
      ++v7;
      a5 += 16;
      a7 += 2 * a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE19A0(uint64_t result, char a2, int *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 4;
    int v9 = 1 << (a2 - 4) >> 1;
    int v10 = *a3;
    int v11 = a3[1];
    int v12 = *a4;
    int v13 = a4[1];
    do
    {
      uint64_t v14 = 0;
      char v15 = 1;
      do
      {
        char v16 = v15;
        uint64_t v17 = 2 * v14;
        int v18 = ((v9 + v10 * *(unsigned __int16 *)(a5 + 2 * v14)) >> v8) + v12;
        if (v18 >= 1023) {
          int v18 = 1023;
        }
        *(_WORD *)(a7 + 2 * v14) = v18 & ~(unsigned __int16)(v18 >> 31);
        uint64_t v19 = v17 | 2;
        int v20 = ((v9 + v11 * *(unsigned __int16 *)(a5 + (v17 | 2))) >> v8) + v13;
        if (v20 >= 1023) {
          int v20 = 1023;
        }
        *(_WORD *)(a7 + v19) = v20 & ~(unsigned __int16)(v20 >> 31);
        uint64_t v14 = 2;
        char v15 = 0;
      }
      while ((v16 & 1) != 0);
      ++v7;
      a5 += 8;
      a7 += 2 * a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1A40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 128; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE1AB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 64; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE1B30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 32; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE1BA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 16; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE1C20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 8; i += 2)
        *(_WORD *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int16 *)(a5 + i) + *(unsigned __int16 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE1C98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 128; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1CF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 64; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1D50(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 32; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1DAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 16; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1E08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 8; i += 2)
        *(_WORD *)(a7 + i) = (*(unsigned __int16 *)(a3 + i) + *(unsigned __int16 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += 2 * a6;
      a5 += 2 * a4;
      a3 += 2 * a2;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1E64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 64; ++i)
      {
        int v9 = 2 * *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(a5 + i);
        if (v9 >= 255) {
          int v9 = 255;
        }
        *(unsigned char *)(a7 + i) = v9 & ~(v9 >> 31);
      }
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1EC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 32; ++i)
      {
        int v9 = 2 * *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(a5 + i);
        if (v9 >= 255) {
          int v9 = 255;
        }
        *(unsigned char *)(a7 + i) = v9 & ~(v9 >> 31);
      }
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1F1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 16; ++i)
      {
        int v9 = 2 * *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(a5 + i);
        if (v9 >= 255) {
          int v9 = 255;
        }
        *(unsigned char *)(a7 + i) = v9 & ~(v9 >> 31);
      }
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1F78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 8; ++i)
      {
        int v9 = 2 * *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(a5 + i);
        if (v9 >= 255) {
          int v9 = 255;
        }
        *(unsigned char *)(a7 + i) = v9 & ~(v9 >> 31);
      }
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE1FD4(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 6);
    char v13 = a2 - 5;
    int v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      uint64_t v15 = 1;
      do
      {
        int v16 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15 - 1) + *a6 * *(unsigned __int8 *)(a8 + v15 - 1)) >> v13;
        if (v16 >= 255) {
          int v16 = 255;
        }
        *(unsigned char *)(a10 + v15 - 1) = v16 & ~(v16 >> 31);
        int v17 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v15) + a6[1] * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255) {
          int v17 = 255;
        }
        *(unsigned char *)(a10 + v15) = v17 & ~(v17 >> 31);
        unint64_t v18 = v15 - 1;
        v15 += 2;
      }
      while (v18 < 0x3E);
      ++v10;
      a5 += 64;
      a8 += 64;
      a10 += a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE20AC(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 6);
    char v13 = a2 - 5;
    int v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      uint64_t v15 = 1;
      do
      {
        int v16 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15 - 1) + *a6 * *(unsigned __int8 *)(a8 + v15 - 1)) >> v13;
        if (v16 >= 255) {
          int v16 = 255;
        }
        *(unsigned char *)(a10 + v15 - 1) = v16 & ~(v16 >> 31);
        int v17 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v15) + a6[1] * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255) {
          int v17 = 255;
        }
        *(unsigned char *)(a10 + v15) = v17 & ~(v17 >> 31);
        unint64_t v18 = v15 - 1;
        v15 += 2;
      }
      while (v18 < 0x1E);
      ++v10;
      a5 += 32;
      a8 += 32;
      a10 += a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE2184(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 6);
    char v13 = a2 - 5;
    int v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      uint64_t v15 = 1;
      do
      {
        int v16 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15 - 1) + *a6 * *(unsigned __int8 *)(a8 + v15 - 1)) >> v13;
        if (v16 >= 255) {
          int v16 = 255;
        }
        *(unsigned char *)(a10 + v15 - 1) = v16 & ~(v16 >> 31);
        int v17 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v15) + a6[1] * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255) {
          int v17 = 255;
        }
        *(unsigned char *)(a10 + v15) = v17 & ~(v17 >> 31);
        unint64_t v18 = v15 - 1;
        v15 += 2;
      }
      while (v18 < 0xE);
      ++v10;
      a5 += 16;
      a8 += 16;
      a10 += a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE225C(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 6);
    char v13 = a2 - 5;
    int v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      uint64_t v15 = 1;
      do
      {
        int v16 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15 - 1) + *a6 * *(unsigned __int8 *)(a8 + v15 - 1)) >> v13;
        if (v16 >= 255) {
          int v16 = 255;
        }
        *(unsigned char *)(a10 + v15 - 1) = v16 & ~(v16 >> 31);
        int v17 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v15) + a6[1] * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255) {
          int v17 = 255;
        }
        *(unsigned char *)(a10 + v15) = v17 & ~(v17 >> 31);
        unint64_t v18 = v15 - 1;
        v15 += 2;
      }
      while (v18 < 6);
      ++v10;
      a5 += 8;
      a8 += 8;
      a10 += a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE2334(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((int)result >= 1)
  {
    int v10 = 0;
    int v12 = (*a7 + *a4 + 1) << (a2 - 6);
    char v13 = a2 - 5;
    int v14 = (a7[1] + a4[1] + 1) << (a2 - 6);
    do
    {
      uint64_t v15 = 0;
      char v16 = 1;
      do
      {
        int v17 = (v12 + *a3 * *(unsigned __int8 *)(a5 + v15) + *a6 * *(unsigned __int8 *)(a8 + v15)) >> v13;
        if (v17 >= 255) {
          int v17 = 255;
        }
        *(unsigned char *)(a10 + v15) = v17 & ~(v17 >> 31);
        char v18 = v16;
        uint64_t v19 = v15 | 1;
        int v20 = (v14 + a3[1] * *(unsigned __int8 *)(a5 + v19) + a6[1] * *(unsigned __int8 *)(a8 + v19)) >> v13;
        if (v20 >= 255) {
          int v20 = 255;
        }
        *(unsigned char *)(a10 + v19) = v20 & ~(v20 >> 31);
        uint64_t v15 = 2;
        char v16 = 0;
      }
      while ((v18 & 1) != 0);
      ++v10;
      a5 += 4;
      a8 += 4;
      a10 += a9;
    }
    while (v10 != result);
  }
  return result;
}

uint64_t sub_1D0CE2400(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 6;
    int v9 = 1 << (a2 - 6) >> 1;
    do
    {
      uint64_t v10 = 1;
      do
      {
        int v11 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10 - 1)) >> v8) + *a4;
        if (v11 >= 255) {
          int v11 = 255;
        }
        *(unsigned char *)(a7 + v10 - 1) = v11 & ~(v11 >> 31);
        int v12 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v10)) >> v8) + a4[1];
        if (v12 >= 255) {
          int v12 = 255;
        }
        *(unsigned char *)(a7 + v10) = v12 & ~(v12 >> 31);
        unint64_t v13 = v10 - 1;
        v10 += 2;
      }
      while (v13 < 0x3E);
      ++v7;
      a5 += 64;
      a7 += a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE24A4(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 6;
    int v9 = 1 << (a2 - 6) >> 1;
    do
    {
      uint64_t v10 = 1;
      do
      {
        int v11 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10 - 1)) >> v8) + *a4;
        if (v11 >= 255) {
          int v11 = 255;
        }
        *(unsigned char *)(a7 + v10 - 1) = v11 & ~(v11 >> 31);
        int v12 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v10)) >> v8) + a4[1];
        if (v12 >= 255) {
          int v12 = 255;
        }
        *(unsigned char *)(a7 + v10) = v12 & ~(v12 >> 31);
        unint64_t v13 = v10 - 1;
        v10 += 2;
      }
      while (v13 < 0x1E);
      ++v7;
      a5 += 32;
      a7 += a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE2548(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 6;
    int v9 = 1 << (a2 - 6) >> 1;
    do
    {
      uint64_t v10 = 1;
      do
      {
        int v11 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10 - 1)) >> v8) + *a4;
        if (v11 >= 255) {
          int v11 = 255;
        }
        *(unsigned char *)(a7 + v10 - 1) = v11 & ~(v11 >> 31);
        int v12 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v10)) >> v8) + a4[1];
        if (v12 >= 255) {
          int v12 = 255;
        }
        *(unsigned char *)(a7 + v10) = v12 & ~(v12 >> 31);
        unint64_t v13 = v10 - 1;
        v10 += 2;
      }
      while (v13 < 0xE);
      ++v7;
      a5 += 16;
      a7 += a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE25EC(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 6;
    int v9 = 1 << (a2 - 6) >> 1;
    do
    {
      uint64_t v10 = 1;
      do
      {
        int v11 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10 - 1)) >> v8) + *a4;
        if (v11 >= 255) {
          int v11 = 255;
        }
        *(unsigned char *)(a7 + v10 - 1) = v11 & ~(v11 >> 31);
        int v12 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v10)) >> v8) + a4[1];
        if (v12 >= 255) {
          int v12 = 255;
        }
        *(unsigned char *)(a7 + v10) = v12 & ~(v12 >> 31);
        unint64_t v13 = v10 - 1;
        v10 += 2;
      }
      while (v13 < 6);
      ++v7;
      a5 += 8;
      a7 += a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE2690(uint64_t result, char a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    char v8 = a2 - 6;
    int v9 = 1 << (a2 - 6) >> 1;
    do
    {
      uint64_t v10 = 0;
      char v11 = 1;
      do
      {
        char v12 = v11;
        int v13 = ((v9 + *a3 * *(unsigned __int8 *)(a5 + v10)) >> v8) + *a4;
        if (v13 >= 255) {
          int v13 = 255;
        }
        *(unsigned char *)(a7 + v10) = v13 & ~(v13 >> 31);
        uint64_t v14 = v10 | 1;
        int v15 = ((v9 + a3[1] * *(unsigned __int8 *)(a5 + v14)) >> v8) + a4[1];
        if (v15 >= 255) {
          int v15 = 255;
        }
        *(unsigned char *)(a7 + v14) = v15 & ~(v15 >> 31);
        uint64_t v10 = 2;
        char v11 = 0;
      }
      while ((v12 & 1) != 0);
      ++v7;
      a5 += 4;
      a7 += a6;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE2734(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 64; ++i)
        *(unsigned char *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE27A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 32; ++i)
        *(unsigned char *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE280C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 16; ++i)
        *(unsigned char *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE2878(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 8; ++i)
        *(unsigned char *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE28E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, __int16 a10, char a11)
{
  if ((int)result >= 1)
  {
    int v11 = 0;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        *(unsigned char *)(a7 + i) = ((a9 << (a11 + 1))
                            + (1 << a11)
                            + (*(unsigned __int8 *)(a5 + i) + *(unsigned __int8 *)(a3 + i)) * a8) >> (a11 + 1);
      ++v11;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v11 != result);
  }
  return result;
}

uint64_t sub_1D0CE2950(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 64; ++i)
        *(unsigned char *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE29A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 32; ++i)
        *(unsigned char *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE29F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 16; ++i)
        *(unsigned char *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE2A40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 8; ++i)
        *(unsigned char *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE2A90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((int)result >= 1)
  {
    int v7 = 0;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        *(unsigned char *)(a7 + i) = (*(unsigned __int8 *)(a3 + i) + *(unsigned __int8 *)(a5 + i) + 1) >> 1;
      ++v7;
      a7 += a6;
      a3 += a2;
      a5 += a4;
    }
    while (v7 != result);
  }
  return result;
}

uint64_t sub_1D0CE2AE0(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, signed int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v15 = (int)a6;
  int v16 = *(_DWORD *)(a1[1] + 4 * (int)a6 + 4);
  uint64_t v17 = a1[1619];
  uint64_t v18 = a1[1607];
  uint64_t v19 = a1[1608];
  v50[0] = a4;
  v50[1] = a5;
  v50[2] = 1;
  uint64_t v51 = v18;
  uint64_t v52 = v19;
  uint64_t v53 = a8;
  uint64_t v20 = v17 + 8 * __clz(__rbit32(a4));
  char v21 = *(unsigned int (**)(void, void, void, void, void, void))(v20 + 200);
  int32x4_t v54 = v21;
  char v46 = *(uint64_t (**)(void, void, void, void, void))(v20 + 512);
  int64x2_t v55 = v46;
  sub_1D0CE2E2C((uint64_t)a1, a2, a3, a4, a5, a6, v16, a10);
  uint64_t v22 = a1[1];
  *(_DWORD *)(v22 + 40) = 0;
  *(void *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = -1;
  *(_WORD *)(v22 + 44) = 1;
  int v23 = (void (*)(void *, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))a1[1634];
  uint64_t v24 = a1[1635];
  uint64_t v25 = (uint64_t *)((char *)a1 + (v24 >> 1));
  if (v24) {
    int v23 = *(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))(*v25 + v23);
  }
  uint64_t v26 = a3;
  v23(v25, a1[1], a2, a3, a4, a5, a8, a9, a6);
  uint64_t v27 = a1[1];
  uint64_t v28 = v27 + 4 * v15;
  int v29 = *(__int16 *)(v28 + 4) - (__int16)a7;
  int v30 = *(__int16 *)(v28 + 6) - (a7 >> 16);
  if ((v29 + 64) >= 0x80)
  {
    if (v29 >= 0) {
      int v32 = v29;
    }
    else {
      int v32 = -v29;
    }
    unsigned int v31 = 63 - 2 * __clz((v29 < 1) | (2 * v32));
  }
  else
  {
    unsigned int v31 = byte_1D0DA5D08[v29 + 64];
  }
  if ((v30 + 64) >= 0x80)
  {
    if (v30 >= 0) {
      int v34 = v30;
    }
    else {
      int v34 = -v30;
    }
    unsigned int v33 = 63 - 2 * __clz((v30 < 1) | (2 * v34));
  }
  else
  {
    unsigned int v33 = byte_1D0DA5D08[v30 + 64];
  }
  *(_DWORD *)(v27 + 40) = v33 + v31;
  if ((int)a4 >= 5 && a4 == a5)
  {
    if (a1[1583]) {
      unint64_t v35 = (uint64_t *)a1[1583];
    }
    else {
      unint64_t v35 = a1 + 1540;
    }
    unsigned int v36 = v46(v18, v19, a9, a8, v35);
    uint64_t v37 = a1[1];
    *(void *)(v37 + 16) = v36;
    if (a1[1583]) {
      uint64_t v38 = (unsigned int *)a1[1583];
    }
    else {
      uint64_t v38 = (unsigned int *)(a1 + 1540);
    }
    uint64_t v26 = a3;
    sub_1D0CE06C0((uint64_t)(a1 + 2), (char *)v37, v38);
    uint64_t v39 = a1[1];
    uint64_t v40 = *(void *)(v39 + 16);
  }
  else
  {
    uint64_t v40 = v21(a4, a5, v18, v19, a9, a8);
    uint64_t v39 = a1[1];
    *(void *)(v39 + 16) = v40;
  }
  unint64_t v41 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v39 + 44) + 152)
        * (unint64_t)*(unsigned int *)(v39 + 40)) >> (8 * (*(_WORD *)(v39 + 44) == 0)))
      + v40;
  *(void *)(v39 + 32) = v41;
  uint64_t v42 = *a1;
  if (v41 < *(void *)(*a1 + 32))
  {
    *(unsigned char *)(v42 + v15) = *(unsigned char *)(v39 + v15);
    *(_DWORD *)(v42 + 4 * v15 + 4) = *(_DWORD *)(v39 + 4 * v15 + 4);
    *(void *)(v42 + 16) = *(void *)(v39 + 16);
    *(_DWORD *)(v42 + 40) = *(_DWORD *)(v39 + 40);
    *(void *)(v42 + 32) = *(void *)(v39 + 32);
  }
  uint64_t result = sub_1D0CE2F94(a1, a2, v26, a4, a5, a6, a7, a8, a9, v50, a10);
  if (a10)
  {
    uint64_t v44 = *a1;
    unint64_t v45 = *(void *)(*a1 + 16) + 1;
    *(void *)(v44 + 16) = v45 >> 1;
    *(void *)(v44 + 32) = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v44 + 44) + 152)
                            * (unint64_t)*(unsigned int *)(v44 + 40)) >> (8 * (*(_WORD *)(v44 + 44) == 0)))
                          + (v45 >> 1);
  }
  return result;
}

uint64_t sub_1D0CE2E2C(uint64_t result, __int16 a2, __int16 a3, int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v8 = (__int16)a7 >> 2;
  if (a7 << 16 <= -65536) {
    unsigned int v8 = -(-(__int16)a7 >> 2);
  }
  unsigned int v9 = (a7 >> 16) >> 2;
  if (a7 < 0) {
    unsigned int v9 = -(-(a7 >> 16) >> 2);
  }
  uint64_t v10 = 12708;
  if (a8) {
    uint64_t v10 = 12716;
  }
  int v11 = *(_DWORD *)(result + v10);
  uint64_t v12 = 12712;
  if (a8) {
    uint64_t v12 = 12720;
  }
  int v13 = *(_DWORD *)(result + v12);
  if (*(unsigned char *)(*(void *)(*(void *)(result + 12944) + 4760) + 232)) {
    int v14 = 0;
  }
  else {
    int v14 = -3 - a5;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(result + 12944) + 4760) + 232)) {
    int v15 = 0;
  }
  else {
    int v15 = -3 - a4;
  }
  __int16 v16 = v9 + a3;
  __int16 v17 = v16 - v13;
  __int16 v18 = v13 + v16;
  __int16 v19 = v8 + a2;
  __int16 v20 = v19 - v11;
  __int16 v21 = v11 + v19;
  uint64_t v22 = result + 4 * a6;
  int v23 = *(_DWORD *)(v22 + 12700) + 2;
  if (v17 >= v23) {
    int v24 = *(_DWORD *)(v22 + 12700) + 2;
  }
  else {
    LOWORD(v24) = v17;
  }
  if (v17 <= v14) {
    __int16 v25 = v14;
  }
  else {
    __int16 v25 = v24;
  }
  __int16 v26 = 4 * (v25 - a3);
  if (v18 < v23) {
    LOWORD(v23) = v18;
  }
  if (v18 > v14) {
    LOWORD(v14) = v23;
  }
  __int16 v27 = 4 * (v14 - a3);
  int v28 = *(_DWORD *)(v22 + 12692) + 2;
  int v29 = v20;
  if (v20 >= v28) {
    __int16 v20 = v28;
  }
  if (v29 <= v15) {
    __int16 v30 = v15;
  }
  else {
    __int16 v30 = v20;
  }
  __int16 v31 = 4 * (v30 - a2);
  if (v21 < v28) {
    LOWORD(v28) = v21;
  }
  if (v21 > v15) {
    LOWORD(v15) = v28;
  }
  unsigned int v32 = v27 - v26;
  __int16 v33 = v15 - a2;
  unsigned int v34 = (__int16)(4 * v33) - v31;
  v33 *= 4;
  *(_WORD *)(result + 12740) = v26;
  *(_WORD *)(result + 12742) = v27;
  *(_WORD *)(result + 12736) = v31;
  *(_WORD *)(result + 12738) = v33;
  *(_WORD *)(result + 12748) = v26 + (v32 >> 3);
  *(_WORD *)(result + 12750) = v27 - (v32 >> 3);
  *(_WORD *)(result + 12744) = v31 + (v34 >> 3);
  *(_WORD *)(result + 12746) = v33 - (v34 >> 3);
  return result;
}

uint64_t sub_1D0CE2F94(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, unsigned int *a10, char a11)
{
  int v16 = *(unsigned __int8 *)(*(void *)(a1[1618] + 4760) + 207);
  uint64_t v17 = a1[1619];
  uint64_t v18 = a1[1607];
  uint64_t v19 = a1[1608];
  *a10 = a4;
  a10[1] = a5;
  *((void *)a10 + 2) = v18;
  if ((int)a5 >= (int)a4) {
    unsigned int v20 = a4;
  }
  else {
    unsigned int v20 = a5;
  }
  uint64_t v21 = v17 + 176;
  if ((int)a5 >= 9 && (int)a4 >= 9 && v16 == 1)
  {
    unsigned int v55 = a6;
    a10[2] = 3;
    *((void *)a10 + 3) = v19;
    *((void *)a10 + 4) = a8;
    uint64_t v22 = __clz(__rbit32(v20)) - 2;
    *((void *)a10 + 5) = *(void *)(v21 + 8 * v22 + 120);
    uint64_t v54 = v22;
    *((void *)a10 + 6) = *(void *)(v17 + 8 * v22 + 528);
    uint64_t v23 = *a1;
    *(_DWORD *)(v23 + 40) = 0;
    *(void *)(v23 + 16) = 0;
    *(void *)(v23 + 24) = 0;
    *(void *)(v23 + 32) = -1;
    *(_WORD *)(v23 + 44) = 3;
    int v24 = (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, unsigned int *, char))a1[1646];
    uint64_t v25 = a1[1647];
    __int16 v26 = (uint64_t *)((char *)a1 + (v25 >> 1));
    if (v25) {
      int v24 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, unsigned int *, char))(*v26 + v24);
    }
    uint64_t v32 = a7;
    v24(v26, a2, a3, a4, a5, a6, a7, 1, a8, a9, a10, a11);
    unint64_t v35 = (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, unsigned int *, int))a1[1646];
    uint64_t v36 = a1[1647];
    uint64_t v37 = (uint64_t *)((char *)a1 + (v36 >> 1));
    if (v36) {
      unint64_t v35 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, unsigned int *, int))(*v37 + v35);
    }
    LOBYTE(v52) = a11;
    v35(v37, a2, a3, a4, a5, v55, v32, 0, a8, a9, a10, v52);
    uint64_t v44 = a1[1619];
    uint64_t v45 = a1[1607];
    uint64_t v46 = a1[1608];
    *a10 = a4;
    a10[1] = a5;
    a10[2] = 2;
    *((void *)a10 + 2) = v45;
    *((void *)a10 + 3) = v46;
    uint64_t v47 = v44 + 8 * v54;
    uint64_t v48 = *(void *)(v47 + 256);
    *((void *)a10 + 4) = a8;
    *((void *)a10 + 5) = v48;
    *((void *)a10 + 6) = *(void *)(v47 + 528);
    uint64_t v49 = *a1;
    *(_WORD *)(v49 + 44) = 2;
    sub_1D0CE32EC((uint64_t)a1, v49, a2, a3, a4, a5, a8, a9, v55);
    uint64_t result = (*((uint64_t (**)(void, void, void, void, uint64_t, void))a10 + 5))(*a10, a10[1], *((void *)a10 + 2), *((void *)a10 + 3), a9, *((void *)a10 + 4));
    uint64_t v51 = *a1;
    *(void *)(v51 + 16) = result;
    *(void *)(v51 + 32) = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v51 + 44) + 152)
                            * (unint64_t)*(unsigned int *)(v51 + 40)) >> (8 * (*(_WORD *)(v51 + 44) == 0)))
                          + result;
  }
  else
  {
    a10[2] = 2;
    *((void *)a10 + 3) = v19;
    *((void *)a10 + 4) = a8;
    uint64_t v27 = 8 * __clz(__rbit32(v20)) - 16;
    *((void *)a10 + 5) = *(void *)(v21 + v27 + 80);
    *((void *)a10 + 6) = *(void *)(v17 + v27 + 528);
    uint64_t v28 = *a1;
    *(_DWORD *)(v28 + 40) = 0;
    *(void *)(v28 + 16) = 0;
    *(void *)(v28 + 24) = 0;
    *(void *)(v28 + 32) = -1;
    *(_WORD *)(v28 + 44) = 2;
    int v29 = (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, unsigned int *, char))a1[1646];
    uint64_t v30 = a1[1647];
    __int16 v31 = (uint64_t *)((char *)a1 + (v30 >> 1));
    if (v30) {
      int v29 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, unsigned int *, char))(*v31 + v29);
    }
    uint64_t v38 = a7;
    v29(v31, a2, a3, a4, a5, a6, a7, 1, a8, a9, a10, a11);
    unint64_t v41 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int))a1[1646];
    uint64_t v42 = a1[1647];
    unint64_t v43 = (uint64_t *)((char *)a1 + (v42 >> 1));
    if (v42) {
      unint64_t v41 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int))(*v43 + v41);
    }
    LOBYTE(v53) = a11;
    return v41(v43, a2, a3, a4, a5, a6, v38, 0, a8, a9, a10, v53);
  }
  return result;
}

uint64_t sub_1D0CE32EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9 = a1 + 16 * (((*(_WORD *)(a2 + 4 * a9 + 6) | *(_WORD *)(a2 + 4 * a9 + 4)) & 1) == 0);
  uint64_t v10 = *(uint64_t (**)(void *))(v9 + 13040);
  uint64_t v11 = *(void *)(v9 + 13048);
  uint64_t v12 = (void *)(a1 + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(uint64_t (**)(void *))(*v12 + v10);
  }
  return v10(v12);
}

uint64_t sub_1D0CE3338(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v17 = (int)a6;
  uint64_t v18 = *(unsigned int *)(a1[1] + 4 * (int)a6 + 4);
  uint64_t v19 = a1[1619];
  uint64_t v20 = a1[1607];
  uint64_t v21 = a1[1608];
  v46[0] = a4;
  v46[1] = a5;
  v46[2] = 1;
  uint64_t v47 = v20;
  uint64_t v48 = v21;
  uint64_t v49 = a8;
  uint64_t v22 = v19 + 8 * __clz(__rbit32(a4));
  uint64_t v50 = *(void *)(v22 + 200);
  uint64_t v51 = *(void *)(v22 + 512);
  uint64_t v44 = v18;
  sub_1D0CE2E2C((uint64_t)a1, a2, a3, a4, a5, a6, v18, a10);
  uint64_t v23 = a1[1];
  *(_DWORD *)(v23 + 40) = 0;
  *(void *)(v23 + 16) = 0;
  *(void *)(v23 + 24) = 0;
  *(void *)(v23 + 32) = -1;
  *(_WORD *)(v23 + 44) = 1;
  int v24 = (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))a1[1634];
  uint64_t v25 = a1[1635];
  __int16 v26 = (uint64_t *)((char *)a1 + (v25 >> 1));
  if (v25) {
    int v24 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))(*v26 + v24);
  }
  v24(v26, a1[1], a2, a3, a4, a5, a8, a9, a6);
  uint64_t v27 = a1[1];
  uint64_t v28 = v27 + 4 * v17;
  int v29 = *(__int16 *)(v28 + 4) - (__int16)a7;
  int v30 = *(__int16 *)(v28 + 6) - (a7 >> 16);
  if ((v29 + 64) >= 0x80)
  {
    if (v29 >= 0) {
      int v32 = v29;
    }
    else {
      int v32 = -v29;
    }
    unsigned int v31 = 63 - 2 * __clz((v29 < 1) | (2 * v32));
  }
  else
  {
    unsigned int v31 = byte_1D0DA5D08[v29 + 64];
  }
  if ((v30 + 64) >= 0x80)
  {
    if (v30 >= 0) {
      int v34 = v30;
    }
    else {
      int v34 = -v30;
    }
    unsigned int v33 = 63 - 2 * __clz((v30 < 1) | (2 * v34));
  }
  else
  {
    unsigned int v33 = byte_1D0DA5D08[v30 + 64];
  }
  *(_DWORD *)(v27 + 40) = v33 + v31;
  unint64_t v35 = (void (*)(void *))a1[1656];
  uint64_t v36 = a1[1657];
  uint64_t v37 = (uint64_t *)((char *)a1 + (v36 >> 1));
  if (v36) {
    unint64_t v35 = *(void (**)(void *))(*v37 + v35);
  }
  v35(v37);
  uint64_t v38 = a1[1];
  unint64_t v39 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v38 + 44) + 152)
        * (unint64_t)*(unsigned int *)(v38 + 40)) >> (8 * (*(_WORD *)(v38 + 44) == 0)))
      + *(void *)(v38 + 16);
  *(void *)(v38 + 32) = v39;
  uint64_t v40 = *a1;
  if (v39 < *(void *)(*a1 + 32))
  {
    *(unsigned char *)(v40 + v17) = *(unsigned char *)(v38 + v17);
    *(_DWORD *)(v40 + 4 * v17 + 4) = *(_DWORD *)(v38 + 4 * v17 + 4);
    *(void *)(v40 + 16) = *(void *)(v38 + 16);
    *(_DWORD *)(v40 + 40) = *(_DWORD *)(v38 + 40);
    *(void *)(v40 + 32) = *(void *)(v38 + 32);
  }
  sub_1D0CE3674(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)v46, v44, SHIDWORD(v44), 1);
  uint64_t result = sub_1D0CE2F94(a1, a2, a3, a4, a5, a6, a7, a8, a9, v46, a10);
  if (a10)
  {
    uint64_t v42 = *a1;
    unint64_t v43 = *(void *)(*a1 + 16) + 1;
    *(void *)(v42 + 16) = v43 >> 1;
    *(void *)(v42 + 32) = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v42 + 44) + 152)
                            * (unint64_t)*(unsigned int *)(v42 + 40)) >> (8 * (*(_WORD *)(v42 + 44) == 0)))
                          + (v43 >> 1);
  }
  return result;
}

uint64_t sub_1D0CE3674(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  v68[0] = 0;
  BOOL v62 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFF0000uLL, v68);
  BOOL v57 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFFuLL, v68);
  BOOL v51 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x10000uLL, v68);
  int v66 = a6;
  unsigned int v67 = a5;
  BOOL v20 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 1uLL, v68);
  int v37 = 0;
  if (!v62 && !v57 && !v51 && !v20)
  {
    if (a13 <= 1) {
      return v68[0];
    }
    int v37 = 1;
  }
  uint64_t v21 = 0;
  while (1)
  {
    uint64_t v47 = v21;
    uint64_t v22 = (unsigned int *)((char *)&unk_1D0D8076C + v21);
    BOOL v58 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, *(unsigned int *)((char *)&unk_1D0D8076C + v21 + 16), v68);
    int v59 = v58 | sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[5], v68);
    BOOL v52 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[6], v68);
    int v23 = v59 | v52 | sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[7], v68);
    if (a13 == 1 && (v23 & 1) == 0) {
      break;
    }
    int v60 = v23;
    BOOL v53 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[8], v68);
    int v54 = v53 | sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[9], v68);
    BOOL v44 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[10], v68);
    if ((v60 | v54 | v44 | sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v22[11], v68)))
    {
      uint64_t v24 = v47;
    }
    else
    {
      ++v37;
      uint64_t v24 = v47;
      if (v37 >= a13) {
        return v68[0];
      }
    }
    uint64_t v21 = v24 + 32;
    if (v21 == 96)
    {
      char v25 = 0;
      uint64_t v70 = 0x10000000100;
      uint64_t v71 = 0;
      memset(v72, 0, sizeof(v72));
      __int16 v69 = 257;
      uint64_t v26 = 4;
      do
      {
        char v36 = v25;
        uint64_t v27 = (int *)((char *)&unk_1D0D8076C + 32 * v26);
        int v61 = *v27;
        uint64_t v63 = 1 << v26;
        BOOL v48 = sub_1D0CE3F1C(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, *v27, v68);
        unsigned int v55 = v27[1];
        int v49 = v48 | sub_1D0CE3F1C(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, v55, v68);
        int v45 = v27[2];
        BOOL v42 = sub_1D0CE3F1C(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, v45, v68);
        unsigned int v38 = v27[3];
        BOOL v28 = sub_1D0CE3F1C(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, v38, v68);
        *((unsigned char *)&v68[1] + v63 + 3) = 1;
        int v29 = v49 | (v42 || v28);
        uint64_t v30 = v63 >> 2;
        int v41 = (__int16)v55 >> 2;
        int v40 = v45 >> 18;
        int v39 = (__int16)v38 >> 2;
        uint64_t v31 = -3;
        uint64_t v32 = v30;
        uint64_t v43 = v30;
        do
        {
          if (!*((unsigned char *)&v68[1] + v32 + 3))
          {
            int v64 = v29;
            BOOL v46 = sub_1D0CE3F1C(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, (unint64_t)(unsigned __int16)((v61 >> 18) * (v31 + 4)) << 16, v68);
            int v50 = v46 | sub_1D0CE3F1C(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, (unsigned __int16)(v41 * (v31 + 4)), v68);
            BOOL v56 = sub_1D0CE3F1C(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, (unint64_t)(unsigned __int16)(v40 * (v31 + 4)) << 16, v68);
            BOOL v33 = sub_1D0CE3F1C(a1, a2, a3, a4, v67, v66, a7, a8, a9, a10, a11, (unsigned __int16)(v39 * (v31 + 4)), v68);
            uint64_t v30 = v43;
            int v29 = v64 | v50 | (v56 || v33);
          }
          v32 += v30;
        }
        while (!__CFADD__(v31++, 1));
        if ((v29 & 1) == 0 && ++v37 >= a13) {
          break;
        }
        char v25 = 1;
        uint64_t v26 = 5;
      }
      while ((v36 & 1) == 0);
      return v68[0];
    }
  }
  return v68[0];
}

BOOL sub_1D0CE3F1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unint64_t a12, _DWORD *a13)
{
  uint64_t v15 = a6;
  *(_DWORD *)(a1[1] + 4 * a6 + 4) = ((a11 & 0xFFFF0000) + ((a12 >> 16) << 18)) & 0xFFFF0000 | (unsigned __int16)(a11 + 4 * a12);
  int v16 = (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))a1[1634];
  uint64_t v17 = a1[1635];
  uint64_t v18 = (uint64_t *)((char *)a1 + (v17 >> 1));
  if (v17) {
    int v16 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*v18 + v16);
  }
  v16(v18, a1[1], a2, a3, a4, a5, a8, a9, a6);
  uint64_t v19 = a1[1];
  uint64_t v20 = v19 + 4 * v15;
  int v21 = *(__int16 *)(v20 + 4) - (__int16)a7;
  int v22 = *(__int16 *)(v20 + 6) - (a7 >> 16);
  if ((v21 + 64) >= 0x80)
  {
    if (v21 >= 0) {
      int v24 = v21;
    }
    else {
      int v24 = -v21;
    }
    unsigned int v23 = 63 - 2 * __clz((v21 < 1) | (2 * v24));
  }
  else
  {
    unsigned int v23 = byte_1D0DA5D08[v21 + 64];
  }
  if ((v22 + 64) >= 0x80)
  {
    if (v22 >= 0) {
      int v26 = v22;
    }
    else {
      int v26 = -v22;
    }
    unsigned int v25 = 63 - 2 * __clz((v22 < 1) | (2 * v26));
  }
  else
  {
    unsigned int v25 = byte_1D0DA5D08[v22 + 64];
  }
  *(_DWORD *)(v19 + 40) = v25 + v23;
  uint64_t v27 = (void (*)(void *))a1[1656];
  uint64_t v28 = a1[1657];
  int v29 = (uint64_t *)((char *)a1 + (v28 >> 1));
  if (v28) {
    uint64_t v27 = *(void (**)(void *))(*v29 + v27);
  }
  v27(v29);
  uint64_t v31 = *a1;
  uint64_t v30 = a1[1];
  unint64_t v32 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v30 + 44) + 152)
        * (unint64_t)*(unsigned int *)(v30 + 40)) >> (8 * (*(_WORD *)(v30 + 44) == 0)))
      + *(void *)(v30 + 16);
  *(void *)(v30 + 32) = v32;
  unint64_t v33 = *(void *)(v31 + 32);
  if (v32 < v33)
  {
    *(unsigned char *)(v31 + v15) = *(unsigned char *)(v30 + v15);
    *(_DWORD *)(v31 + 4 * v15 + 4) = *(_DWORD *)(v30 + 4 * v15 + 4);
    *(void *)(v31 + 16) = *(void *)(v30 + 16);
    *(_DWORD *)(v31 + 40) = *(_DWORD *)(v30 + 40);
    *(void *)(v31 + 32) = *(void *)(v30 + 32);
    LOWORD(v30) = a12;
    if ((a12 & 0x8000u) != 0) {
      LODWORD(v30) = -(__int16)a12;
    }
    LODWORD(v30) = (unsigned __int16)v30;
    LOWORD(v34) = WORD1(a12);
    if ((a12 & 0x80000000) != 0) {
      int v34 = -SWORD1(a12);
    }
    if ((unsigned __int16)v30 <= (unsigned __int16)v34) {
      LODWORD(v30) = (unsigned __int16)v34;
    }
    *a13 = v30;
  }
  return v32 < v33;
}

uint64_t sub_1D0CE4144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v12 = a6;
  uint64_t v14 = a4;
  uint64_t v18 = *(void *)(a1 + 12952);
  uint64_t v19 = *(void *)(a1 + 12856);
  uint64_t v20 = *(void *)(a1 + 12864);
  v61[0] = a4;
  v61[1] = a5;
  v61[2] = 1;
  uint64_t v62 = v19;
  uint64_t v63 = v20;
  uint64_t v64 = a8;
  uint64_t v21 = v18 + 8 * __clz(__rbit32(a4));
  uint64_t v65 = *(void *)(v21 + 200);
  uint64_t v66 = *(void *)(v21 + 512);
  sub_1D0CE2E2C(a1, a2, a3, a4, a5, a6, *(_DWORD *)(*(void *)a1 + 4 * (int)a6 + 4), a10);
  uint64_t v22 = *(void *)(a1 + 8);
  unint64_t v23 = *(unsigned int *)(v22 + 4 * (int)v12 + 4);
  *(_DWORD *)(v22 + 40) = 0;
  *(void *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = -1;
  *(_WORD *)(v22 + 44) = 1;
  uint64_t v24 = a3;
  uint64_t v25 = a8;
  int v26 = sub_1D0CE3674((uint64_t *)a1, a2, v24, v14, a5, v12, a7, a8, a9, (uint64_t)v61, v23, SHIDWORD(v23), *(_DWORD *)(a1 + 12728));
  int v27 = v26;
  unsigned int v57 = a2;
  if (v26 == 1)
  {
    int v28 = sub_1D0CE4500((uint64_t *)a1, a2, v24, v14, a5, v12, a7, a8, a9, (uint64_t)v61, v23);
    int v27 = 1;
    uint64_t v29 = a1;
    goto LABEL_13;
  }
  int v53 = v23;
  int v30 = *(_DWORD *)(a1 + 12724);
  uint64_t v29 = a1;
  if (v26 <= v30)
  {
    int v28 = 1;
LABEL_13:
    uint64_t v32 = a5;
    uint64_t v33 = a7;
    uint64_t v34 = v24;
    if (!v28) {
      return sub_1D0CE2F94((uint64_t *)v29, v57, v34, v14, v32, v12, v33, v25, a9, v61, a10);
    }
    goto LABEL_14;
  }
  int v52 = v26;
  int v31 = *(_DWORD *)(a1 + 12708);
  uint64_t v32 = a5;
  uint64_t v33 = a7;
  uint64_t v34 = v24;
  if (v31 >= 1)
  {
    int v35 = -v31;
    int v36 = *(_DWORD *)(a1 + 12712);
    unsigned int v59 = v14;
    unsigned int v60 = v24;
    uint64_t v58 = v12;
    do
    {
      if (v36 >= 1)
      {
        int v54 = v35;
        int v37 = -v36;
        unsigned int v38 = (unsigned __int16)v35 - (v36 << 16);
        do
        {
          uint64_t v39 = v29;
          sub_1D0CE3F1C((uint64_t *)v29, v57, v60, v59, a5, v58, a7, v25, a9, (uint64_t)v61, v53, v38, v67);
          uint64_t v29 = v39;
          v37 += v30;
          int v36 = *(_DWORD *)(v39 + 12712);
          v38 += v30 << 16;
        }
        while (v37 < v36);
        uint64_t v33 = a7;
        int v31 = *(_DWORD *)(v39 + 12708);
        uint64_t v12 = v58;
        uint64_t v32 = a5;
        uint64_t v14 = v59;
        uint64_t v34 = v60;
        int v35 = v54;
      }
      v35 += v30;
    }
    while (v35 < v31);
  }
  int v27 = v52;
LABEL_14:
  if (v27 >= 1)
  {
    uint64_t v55 = (int)v12;
    uint64_t v56 = v25;
    do
    {
      unint64_t v40 = *(unsigned int *)(*(void *)v29 + 4 * v55 + 4);
      uint64_t v41 = v14;
      int v42 = v12;
      uint64_t v43 = v33;
      uint64_t v44 = v25;
      uint64_t v45 = v14;
      uint64_t v46 = v12;
      uint64_t v47 = v32;
      BOOL v48 = (uint64_t *)v29;
      int v49 = sub_1D0CE3674((uint64_t *)v29, v57, v34, v41, v32, v42, v33, v44, a9, (uint64_t)v61, v40, SHIDWORD(v40), *(_DWORD *)(v29 + 12732));
      if (v49 == 1) {
        int v50 = sub_1D0CE4500(v48, v57, v34, v45, v47, v46, v43, v56, a9, (uint64_t)v61, v40);
      }
      else {
        int v50 = 1;
      }
      uint64_t v29 = (uint64_t)v48;
      uint64_t v32 = v47;
      uint64_t v12 = v46;
      uint64_t v14 = v45;
      uint64_t v33 = v43;
      uint64_t v25 = v56;
    }
    while (v50 && v49 > 0);
  }
  return sub_1D0CE2F94((uint64_t *)v29, v57, v34, v14, v32, v12, v33, v25, a9, v61, a10);
}

uint64_t sub_1D0CE4500(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  unsigned int v12 = *(_DWORD *)(*a1 + 4 * a6 + 4);
  int v13 = (int)((v12 - a11) << 16) >> 18;
  uint64_t result = 1;
  if ((v13 - 2) >= 0xFFFFFFFD)
  {
    int v15 = HIWORD(v12) - (a11 >> 16);
    if ((unsigned __int16)(v15 - 8) >= 0xFFF4u)
    {
      uint64_t result = 0;
      int v22 = (unsigned __int16)v13 | ((unsigned __int16)((__int16)v15 >> 2) << 16);
      if (v22 <= 65534)
      {
        if (v22 > -2)
        {
          if (v22 == -1)
          {
            BOOL v33 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFEFFFFuLL, &v34);
            BOOL v23 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFFFFFEuLL, &v34);
          }
          else
          {
            if (v22 != 1) {
              return result;
            }
            BOOL v33 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFF0002uLL, &v34);
            BOOL v23 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x10002uLL, &v34);
          }
        }
        else if (v22 == -65536)
        {
          BOOL v33 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFEFFFFuLL, &v34);
          BOOL v23 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFE0001uLL, &v34);
        }
        else
        {
          if (v22 != -65535) {
            return result;
          }
          BOOL v33 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFE0001uLL, &v34);
          BOOL v23 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFF0002uLL, &v34);
        }
        return v33 | v23;
      }
      if (v22 > 0x10000)
      {
        if (v22 != 65537)
        {
          if (v22 != 0x1FFFF) {
            return result;
          }
          BOOL v33 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x1FFFEuLL, &v34);
          BOOL v23 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x2FFFFuLL, &v34);
          return v33 | v23;
        }
        int v27 = a7;
        int v24 = a11;
        BOOL v25 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x10002uLL, &v34);
      }
      else
      {
        if (v22 == 0xFFFF)
        {
          BOOL v33 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0xFFFFFFFEuLL, &v34);
          BOOL v23 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x1FFFEuLL, &v34);
          return v33 | v23;
        }
        int v27 = a7;
        int v24 = a11;
        BOOL v25 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0x2FFFFuLL, &v34);
      }
      BOOL v33 = v25;
      BOOL v23 = sub_1D0CE3F1C(a1, a2, a3, a4, a5, a6, v27, a8, a9, a10, v24, 0x20001uLL, &v34);
      return v33 | v23;
    }
  }
  return result;
}

uint64_t sub_1D0CE48D0(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, signed int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v12 = a4;
  uint64_t v14 = (__int16 *)(a1 + 1586);
  uint64_t v15 = a1[1619];
  uint64_t v16 = a1[1607];
  uint64_t v17 = a1[1608];
  v76[0] = a4;
  v76[1] = a5;
  v76[2] = 1;
  uint64_t v71 = v17;
  uint64_t v72 = v16;
  uint64_t v77 = v16;
  uint64_t v78 = v17;
  uint64_t v79 = a8;
  uint64_t v18 = v15 + 8 * __clz(__rbit32(a4));
  uint64_t v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 200);
  int64x2_t v68 = *(uint64_t (**)(void, void, void, void, void))(v18 + 512);
  __int16 v69 = v80;
  uint64_t v81 = v68;
  uint64_t v19 = (int)a6;
  sub_1D0CE2E2C((uint64_t)a1, a2, a3, a4, a5, a6, *(_DWORD *)(a1[1] + 4 * (int)a6 + 4), a10);
  uint64_t v20 = v14;
  uint64_t v21 = a5;
  uint64_t v22 = a1[1];
  *(_DWORD *)(v22 + 40) = 0;
  *(void *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = -1;
  *(_WORD *)(v22 + 44) = 1;
  int v23 = v14[26];
  if (v23 <= v14[27])
  {
    BOOL v25 = (int)v12 > 4 && v12 == a5;
    BOOL v70 = v25;
    uint64_t v26 = a5;
    uint64_t v27 = v12;
    do
    {
      int v67 = v23;
      *(_WORD *)(a1[1] + 4 * v19 + 6) = v23;
      int v28 = v20[24];
      if (v28 <= v20[25])
      {
        do
        {
          *(_WORD *)(a1[1] + 4 * v19 + 4) = v28;
          uint64_t v29 = a1[1];
          *(_DWORD *)(v29 + 40) = 0;
          *(void *)(v29 + 16) = 0;
          *(void *)(v29 + 24) = 0;
          *(void *)(v29 + 32) = -1;
          *(_WORD *)(v29 + 44) = 1;
          uint64_t v30 = a1[1];
          uint64_t v31 = v30 + 4 * v19;
          int v32 = *(__int16 *)(v31 + 4) - (__int16)a7;
          if ((v32 + 64) >= 0x80)
          {
            if (v32 >= 0) {
              int v34 = *(__int16 *)(v31 + 4) - (__int16)a7;
            }
            else {
              int v34 = (__int16)a7 - *(__int16 *)(v31 + 4);
            }
            unsigned int v33 = 63 - 2 * __clz((v32 < 1) | (2 * v34));
          }
          else
          {
            unsigned int v33 = byte_1D0DA5D08[v32 + 64];
          }
          int v35 = *(__int16 *)(v31 + 6) - (a7 >> 16);
          if ((v35 + 64) >= 0x80)
          {
            if (v35 >= 0) {
              int v37 = v35;
            }
            else {
              int v37 = -v35;
            }
            unsigned int v36 = 63 - 2 * __clz((v35 < 1) | (2 * v37));
          }
          else
          {
            unsigned int v36 = byte_1D0DA5D08[v35 + 64];
          }
          *(_DWORD *)(v30 + 40) = v36 + v33;
          unsigned int v38 = (void (*)(void *))a1[1634];
          uint64_t v39 = a1[1635];
          unint64_t v40 = (uint64_t *)((char *)a1 + (v39 >> 1));
          if (v39) {
            unsigned int v38 = *(void (**)(void *))(*v40 + v38);
          }
          uint64_t v41 = v12;
          uint64_t v42 = v21;
          v38(v40);
          if (v70)
          {
            if (a1[1583]) {
              uint64_t v43 = (uint64_t *)a1[1583];
            }
            else {
              uint64_t v43 = a1 + 1540;
            }
            unsigned int v44 = v68(v72, v71, a9, a8, v43);
            uint64_t v45 = a1[1];
            *(void *)(v45 + 16) = v44;
            if (a1[1583]) {
              uint64_t v46 = (unsigned int *)a1[1583];
            }
            else {
              uint64_t v46 = (unsigned int *)(a1 + 1540);
            }
            sub_1D0CE06C0((uint64_t)(a1 + 2), (char *)v45, v46);
            uint64_t v47 = a1[1];
            uint64_t v48 = *(void *)(v47 + 16);
          }
          else
          {
            uint64_t v48 = v69(v41, v42, v72, v71, a9, a8);
            uint64_t v47 = a1[1];
            *(void *)(v47 + 16) = v48;
          }
          unint64_t v49 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v47 + 44) + 152)
                * (unint64_t)*(unsigned int *)(v47 + 40)) >> (8 * (*(_WORD *)(v47 + 44) == 0)))
              + v48;
          *(void *)(v47 + 32) = v49;
          uint64_t v50 = *a1;
          uint64_t v20 = v14;
          if (v49 < *(void *)(*a1 + 32))
          {
            *(unsigned char *)(v50 + v19) = *(unsigned char *)(v47 + v19);
            *(_DWORD *)(v50 + 4 * v19 + 4) = *(_DWORD *)(v47 + 4 * v19 + 4);
            *(void *)(v50 + 16) = *(void *)(v47 + 16);
            *(_DWORD *)(v50 + 40) = *(_DWORD *)(v47 + 40);
            *(void *)(v50 + 32) = *(void *)(v47 + 32);
          }
          v28 += 4;
          uint64_t v21 = v26;
          uint64_t v12 = v27;
        }
        while (v28 <= v14[25]);
      }
      int v23 = v67 + 4;
    }
    while (v67 + 4 <= v20[27]);
  }
  BOOL v51 = 0;
  uint64_t v52 = *a1 + 4 * v19;
  __int16 v53 = *(_WORD *)(v52 + 4);
  int v54 = *((_DWORD *)a1 + 3184);
  int v55 = v54 >> 16;
  if (v54 >> 16 >= (__int16)(v53 + 3))
  {
    int v56 = (__int16)v54;
    if ((__int16)v54 <= (__int16)(v53 + 3))
    {
      BOOL v51 = 0;
      __int16 v57 = *(_WORD *)(v52 + 6);
      int v58 = *((_DWORD *)v20 + 13);
      int v59 = (__int16)v58;
      if ((__int16)v58 <= (__int16)(v57 + 3))
      {
        int v60 = v58 >> 16;
        if (v60 >= (__int16)(v57 + 3))
        {
          BOOL v51 = 0;
          __int16 v61 = v53 - 3;
          if (v55 >= v61 && v56 <= v61) {
            BOOL v51 = v59 <= (__int16)(v57 - 3) && v60 >= (__int16)(v57 - 3);
          }
        }
      }
    }
  }
  *(unsigned char *)uint64_t v20 = v51;
  uint64_t result = sub_1D0CE2F94(a1, a2, a3, v12, v21, a6, a7, a8, a9, v76, a10);
  if (a10)
  {
    uint64_t v64 = *a1;
    unint64_t v65 = *(void *)(*a1 + 16) + 1;
    *(void *)(v64 + 16) = v65 >> 1;
    *(void *)(v64 + 32) = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v64 + 44) + 152)
                            * (unint64_t)*(unsigned int *)(v64 + 40)) >> (8 * (*(_WORD *)(v64 + 44) == 0)))
                          + (v65 >> 1);
  }
  return result;
}

uint64_t sub_1D0CE4D6C(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  long long v121 = (BOOL *)(a1 + 1586);
  uint64_t v13 = a1[1619];
  uint64_t v14 = a1[1607];
  uint64_t v15 = a1[1608];
  v131[0] = a4;
  v131[1] = a5;
  v131[2] = 1;
  uint64_t v132 = v14;
  uint64_t v133 = v15;
  uint64_t v134 = a8;
  uint64_t v16 = v13 + 8 * __clz(__rbit32(a4));
  uint64_t v135 = *(void *)(v16 + 200);
  uint64_t v136 = *(void *)(v16 + 512);
  uint64_t v17 = (int)a6;
  sub_1D0CE2E2C((uint64_t)a1, a2, a3, a4, a5, a6, *(_DWORD *)(*a1 + 4 * (int)a6 + 4), a10);
  uint64_t v18 = a1[1];
  uint64_t v129 = a6;
  uint64_t v19 = v18 + 4 * (int)a6;
  __int16 v20 = *(_WORD *)(v19 + 4);
  __int16 v21 = *(_WORD *)(v19 + 6);
  int v22 = *((_DWORD *)a1 + 3184);
  int v23 = (__int16)v22;
  int v24 = v22 >> 16;
  BOOL v25 = v24 >= (__int16)(v20 + 8) && v23 <= (__int16)(v20 + 8);
  if (!v25
    || ((v26 = *((_DWORD *)a1 + 3185), int v27 = (__int16)v26, v28 = v26 >> 16, v27 <= (__int16)(v21 + 8))
      ? (BOOL v29 = v28 < (__int16)(v21 + 8))
      : (BOOL v29 = 1),
        v29))
  {
    BOOL v30 = 0;
  }
  else
  {
    BOOL v32 = v27 <= (__int16)(v21 - 8) && v28 >= (__int16)(v21 - 8);
    BOOL v30 = v24 >= (__int16)(v20 - 8) && v23 <= (__int16)(v20 - 8) && v32;
  }
  int v34 = 0;
  *(_DWORD *)(v18 + 40) = 0;
  int v120 = a7;
  int v123 = a7 >> 16;
  int v124 = (__int16)a7;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  int v35 = &byte_1D0D80749;
  uint64_t v36 = -6;
  *(void *)(v18 + 32) = -1;
  *(_WORD *)(v18 + 44) = 1;
  __int16 v37 = v21;
  do
  {
    *(_WORD *)(a1[1] + 4 * v17 + 4) = v20 + *(v35 - 1);
    *(_WORD *)(a1[1] + 4 * v17 + 6) = v21 + *v35;
    uint64_t v38 = a1[1];
    if (v30
      || ((int v39 = *(_DWORD *)(v38 + 4 * v17 + 4), v40 = *((_DWORD *)a1 + 3184), (__int16)v39 <= v40 >> 16)
        ? (BOOL v41 = (__int16)v39 < (__int16)v40)
        : (BOOL v41 = 1),
          !v41
       && ((int v42 = *((_DWORD *)a1 + 3185), v43 = v39 >> 16, v43 >= (__int16)v42) ? (v44 = v43 <= v42 >> 16) : (v44 = 0),
           v44)))
    {
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 16) = 0;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = -1;
      *(_WORD *)(v38 + 44) = 1;
      uint64_t v45 = (void (*)(void *, void, void, void, void, void, uint64_t, uint64_t, _DWORD))a1[1634];
      uint64_t v46 = a1[1635];
      uint64_t v47 = (void *)((char *)a1 + (v46 >> 1));
      if (v46) {
        uint64_t v45 = *(void (**)(void *, void, void, void, void, void, uint64_t, uint64_t, _DWORD))(*v47 + v45);
      }
      v45(v47, a1[1], a2, a3, a4, a5, a8, a9, v129);
      uint64_t v48 = (void (*)(void *, void, unsigned int *, uint64_t))a1[1656];
      uint64_t v49 = a1[1657];
      uint64_t v50 = (void *)((char *)a1 + (v49 >> 1));
      if (v49) {
        uint64_t v48 = *(void (**)(void *, void, unsigned int *, uint64_t))(*v50 + v48);
      }
      v48(v50, a1[1], v131, a9);
      uint64_t v51 = a1[1];
      uint64_t v52 = v51 + 4 * v17;
      int v54 = *(__int16 *)(v52 + 4);
      uint64_t v53 = v52 + 4;
      int v55 = v54 - v124;
      unsigned int v56 = v54 - v124 + 64;
      if (v56 >= 0x80)
      {
        if (v55 >= 0) {
          int v58 = v55;
        }
        else {
          int v58 = -v55;
        }
        unsigned int v57 = 63 - 2 * __clz((v55 < 1) | (2 * v58));
      }
      else
      {
        unsigned int v57 = byte_1D0DA5D08[v56];
      }
      __int16 v21 = v37;
      int v59 = *(__int16 *)(v53 + 2) - v123;
      if ((v59 + 64) >= 0x80)
      {
        if (v59 >= 0) {
          int v61 = *(__int16 *)(v53 + 2) - v123;
        }
        else {
          int v61 = v123 - *(__int16 *)(v53 + 2);
        }
        unsigned int v60 = 63 - 2 * __clz((v59 < 1) | (2 * v61));
      }
      else
      {
        unsigned int v60 = byte_1D0DA5D08[v59 + 64];
      }
      unsigned int v62 = v60 + v57;
      *(_DWORD *)(v51 + 40) = v62;
      unint64_t v63 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v51 + 44) + 152) * (unint64_t)v62) >> (8 * (*(_WORD *)(v51 + 44) == 0)))
          + *(void *)(v51 + 16);
      *(void *)(v51 + 32) = v63;
      uint64_t v64 = *a1;
      if (v63 < *(void *)(*a1 + 32))
      {
        *(unsigned char *)(v64 + v17) = *(unsigned char *)(v51 + v17);
        *(_DWORD *)(v64 + 4 * v17 + 4) = *(_DWORD *)v53;
        *(void *)(v64 + 16) = *(void *)(v51 + 16);
        *(_DWORD *)(v64 + 40) = *(_DWORD *)(v51 + 40);
        *(void *)(v64 + 32) = *(void *)(v51 + 32);
        int v34 = v36 + 7;
      }
    }
    v35 += 2;
  }
  while (!__CFADD__(v36++, 1));
  if (v34 && v121[162])
  {
    unsigned int v66 = 0;
    do
    {
      uint64_t v67 = 0;
      uint64_t v68 = *a1 + 4 * v17;
      __int16 v69 = *(_WORD *)(v68 + 6);
      __int16 v70 = *(_WORD *)(v68 + 4);
      uint64_t v122 = v34;
      uint64_t v71 = &byte_1D0D80754[3 * v34];
      int v72 = -1;
      do
      {
        uint64_t v73 = (char *)&unk_1D0D80746 + 2 * v71[v67];
        *(_WORD *)(a1[1] + 4 * v17 + 4) = v70 + *v73;
        *(_WORD *)(a1[1] + 4 * v17 + 6) = v69 + v73[1];
        uint64_t v74 = a1[1];
        int v75 = *(_DWORD *)(v74 + 4 * v17 + 4);
        int v76 = *((_DWORD *)a1 + 3184);
        if ((__int16)v75 <= v76 >> 16 && (__int16)v75 >= (__int16)v76)
        {
          int v78 = *((_DWORD *)a1 + 3185);
          int v79 = v75 >> 16;
          if (v79 >= (__int16)v78 && v79 <= v78 >> 16)
          {
            *(_DWORD *)(v74 + 40) = 0;
            *(void *)(v74 + 16) = 0;
            *(void *)(v74 + 24) = 0;
            *(void *)(v74 + 32) = -1;
            *(_WORD *)(v74 + 44) = 1;
            uint64_t v81 = (void (*)(void *, void, void, void, void, void, uint64_t, uint64_t, _DWORD))a1[1634];
            uint64_t v82 = a1[1635];
            uint64_t v83 = (void *)((char *)a1 + (v82 >> 1));
            if (v82) {
              uint64_t v81 = *(void (**)(void *, void, void, void, void, void, uint64_t, uint64_t, _DWORD))(*v83 + v81);
            }
            v81(v83, a1[1], a2, a3, a4, a5, a8, a9, v129);
            signed int v84 = (void (*)(void *, void, unsigned int *, uint64_t))a1[1656];
            uint64_t v85 = a1[1657];
            __n128 v86 = (void *)((char *)a1 + (v85 >> 1));
            if (v85) {
              signed int v84 = *(void (**)(void *, void, unsigned int *, uint64_t))(*v86 + v84);
            }
            v84(v86, a1[1], v131, a9);
            uint64_t v87 = a1[1];
            uint64_t v88 = v87 + 4 * v17;
            int v90 = *(__int16 *)(v88 + 4);
            uint64_t v89 = v88 + 4;
            int v91 = v90 - v124;
            unsigned int v92 = v90 - v124 + 64;
            if (v92 >= 0x80)
            {
              if (v91 >= 0) {
                int v94 = v91;
              }
              else {
                int v94 = -v91;
              }
              unsigned int v93 = 63 - 2 * __clz((v91 < 1) | (2 * v94));
            }
            else
            {
              unsigned int v93 = byte_1D0DA5D08[v92];
            }
            int v95 = *(__int16 *)(v89 + 2) - v123;
            if ((v95 + 64) >= 0x80)
            {
              if (v95 >= 0) {
                int v97 = *(__int16 *)(v89 + 2) - v123;
              }
              else {
                int v97 = v123 - *(__int16 *)(v89 + 2);
              }
              unsigned int v96 = 63 - 2 * __clz((v95 < 1) | (2 * v97));
            }
            else
            {
              unsigned int v96 = byte_1D0DA5D08[v95 + 64];
            }
            unsigned int v98 = v96 + v93;
            *(_DWORD *)(v87 + 40) = v98;
            unint64_t v99 = ((*(unsigned __int16 *)(a1[1619] + 2 * *(__int16 *)(v87 + 44) + 152) * (unint64_t)v98) >> (8 * (*(_WORD *)(v87 + 44) == 0)))
                + *(void *)(v87 + 16);
            *(void *)(v87 + 32) = v99;
            uint64_t v100 = *a1;
            if (v99 < *(void *)(*a1 + 32))
            {
              *(unsigned char *)(v100 + v17) = *(unsigned char *)(v87 + v17);
              *(_DWORD *)(v100 + 4 * v17 + 4) = *(_DWORD *)v89;
              *(void *)(v100 + 16) = *(void *)(v87 + 16);
              *(_DWORD *)(v100 + 40) = *(_DWORD *)(v87 + 40);
              *(void *)(v100 + 32) = *(void *)(v87 + 32);
              int v72 = v67;
            }
          }
        }
        ++v67;
      }
      while (v67 != 3);
      if (v72 == -1) {
        break;
      }
      int v34 = byte_1D0D80754[3 * v122 + v72];
      ++v66;
    }
    while (v66 < v121[162]);
  }
  __int16 v101 = v121[160] + 2 * v121[161] + 7;
  uint64_t v102 = *a1 + 4 * v17;
  __int16 v103 = *(_WORD *)(v102 + 4);
  int v104 = *((_DWORD *)a1 + 3184);
  int v105 = (__int16)v104;
  int v106 = v104 >> 16;
  BOOL v107 = v104 >> 16 >= (__int16)(v101 + v103) && (__int16)v104 <= (__int16)(v121[160] + 2 * v121[161] + 7 + v103);
  if (!v107
    || ((__int16 v108 = *(_WORD *)(v102 + 6),
         int v109 = *((_DWORD *)a1 + 3185),
         int v110 = (__int16)v109,
         int v111 = v109 >> 16,
         (__int16)v109 <= (__int16)(v108 + v101))
      ? (BOOL v112 = v111 < (__int16)(v108 + v101))
      : (BOOL v112 = 1),
        v112))
  {
    BOOL v113 = 0;
LABEL_100:
    int v114 = v120;
    goto LABEL_101;
  }
  BOOL v113 = 0;
  __int16 v117 = v103 - v101;
  if (v106 < v117) {
    goto LABEL_100;
  }
  BOOL v25 = v105 <= v117;
  int v114 = v120;
  if (v25)
  {
    int v118 = (__int16)(v108 - v101);
    BOOL v113 = v110 <= v118 && v111 >= v118;
  }
LABEL_101:
  BOOL *v121 = v113;
  unsigned int v115 = v114;
  sub_1D0CE54BC(a1, a2, a3, a4, a5, v129, v114, 2, a8, a9, v131);
  return sub_1D0CE2F94(a1, a2, a3, a4, a5, v129, v115, a8, a9, v131, a10);
}

void *sub_1D0CE54BC(void *result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  uint64_t v11 = (int *)result;
  uint64_t v12 = a6;
  uint64_t v13 = result[1];
  uint64_t v14 = *result + 4 * a6;
  __int16 v15 = *(_WORD *)(v14 + 4);
  __int16 v16 = *(_WORD *)(v14 + 6);
  *(_DWORD *)(v13 + 40) = 0;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = -1;
  if (a8 == 2) {
    __int16 v17 = 1;
  }
  else {
    __int16 v17 = 2;
  }
  __int16 v49 = v17;
  *(_WORD *)(v13 + 44) = v17;
  uint64_t v18 = result + 1586;
  uint64_t v19 = &result[2 * a8];
  uint64_t v48 = (void (**)(void *, void, void, void, void, void, uint64_t, uint64_t, uint64_t))(v19 + 1630);
  uint64_t v47 = v19 + 1631;
  HIDWORD(v46) = (__int16)a7;
  int v20 = a7 >> 16;
  uint64_t v21 = 2 * (a8 != 1);
  int v22 = (char *)&unk_1D0D80710 + 18 * a8;
  do
  {
    *(_WORD *)(*((void *)v11 + 1) + 4 * v12 + 4) = v15 + v22[v21];
    *(_WORD *)(*((void *)v11 + 1) + 4 * v12 + 6) = v16 + v22[v21 + 1];
    uint64_t v23 = *((void *)v11 + 1);
    if (*v18
      || ((v26 = *(_DWORD *)(v23 + 4 * v12 + 4), int v27 = v11[3184], (__int16)v26 <= v27 >> 16)
        ? (BOOL v28 = (__int16)v26 < (__int16)v27)
        : (BOOL v28 = 1),
          !v28 && ((int v29 = v11[3185], v30 = v26 >> 16, v30 >= (__int16)v29) ? (v31 = v30 <= v29 >> 16) : (v31 = 0), v31)))
    {
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 16) = 0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = -1;
      *(_WORD *)(v23 + 44) = v49;
      int v24 = *v48;
      BOOL v25 = (void *)((char *)v11 + (*v47 >> 1));
      if (*v47) {
        int v24 = *(void (**)(void *, void, void, void, void, void, uint64_t, uint64_t, uint64_t))(*v25 + v24);
      }
      LODWORD(v46) = a6;
      v24(v25, *((void *)v11 + 1), a2, a3, a4, a5, a9, a10, v46);
      uint64_t result = (void *)(*((uint64_t (**)(void, void, void, void, uint64_t, void))a11 + 5))(*a11, a11[1], *((void *)a11 + 2), *((void *)a11 + 3), a10, *((void *)a11 + 4));
      uint64_t v32 = *((void *)v11 + 1);
      *(void *)(v32 + 16) = result;
      uint64_t v33 = v32 + 4 * v12;
      int v35 = *(__int16 *)(v33 + 4);
      uint64_t v34 = v33 + 4;
      int v36 = v35 - HIDWORD(v46);
      unsigned int v37 = v35 - HIDWORD(v46) + 64;
      if (v37 >= 0x80)
      {
        if (v36 >= 0) {
          int v39 = v36;
        }
        else {
          int v39 = -v36;
        }
        unsigned int v38 = 63 - 2 * __clz((v36 < 1) | (2 * v39));
      }
      else
      {
        unsigned int v38 = byte_1D0DA5D08[v37];
      }
      int v40 = *(__int16 *)(v34 + 2) - v20;
      if ((v40 + 64) >= 0x80)
      {
        if (v40 >= 0) {
          int v42 = *(__int16 *)(v34 + 2) - v20;
        }
        else {
          int v42 = v20 - *(__int16 *)(v34 + 2);
        }
        unsigned int v41 = 63 - 2 * __clz((v40 < 1) | (2 * v42));
      }
      else
      {
        unsigned int v41 = byte_1D0DA5D08[v40 + 64];
      }
      unsigned int v43 = v41 + v38;
      *(_DWORD *)(v32 + 40) = v43;
      unint64_t v44 = ((*(unsigned __int16 *)(*((void *)v11 + 1619) + 2 * *(__int16 *)(v32 + 44) + 152) * (unint64_t)v43) >> (8 * (*(_WORD *)(v32 + 44) == 0)))
          + result;
      *(void *)(v32 + 32) = v44;
      uint64_t v45 = *(void *)v11;
      if (v44 < *(void *)(*(void *)v11 + 32))
      {
        *(unsigned char *)(v45 + v12) = *(unsigned char *)(v32 + v12);
        *(_DWORD *)(v45 + 4 * v12 + 4) = *(_DWORD *)v34;
        *(void *)(v45 + 16) = *(void *)(v32 + 16);
        *(_DWORD *)(v45 + 40) = *(_DWORD *)(v32 + 40);
        *(void *)(v45 + 32) = *(void *)(v32 + 32);
      }
    }
    v21 += 2;
  }
  while (v21 != 18);
  return result;
}

void *sub_1D0CE57A0(void *result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  uint64_t v11 = (int *)result;
  int v12 = 0;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a6;
  uint64_t v14 = *result + 4 * a6;
  __int16 v15 = *(_WORD *)(v14 + 4);
  __int16 v16 = *(_WORD *)(v14 + 6);
  uint64_t v17 = a8 != 1;
  HIDWORD(v79) = *((unsigned __int8 *)result + a8 + 12848);
  LOWORD(v14) = *(_WORD *)(*result + 44);
  *(unsigned char *)(result[1] + a6) = *(unsigned char *)(*result + a6);
  uint64_t v18 = result[1];
  *(_DWORD *)(v18 + 40) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  *(void *)(v18 + 32) = -1;
  __int16 v93 = v14;
  *(_WORD *)(v18 + 44) = v14;
  int v94 = result + 1586;
  uint64_t v19 = &result[2 * a8];
  uint64_t v87 = (void (**)(void *, void, void, void, void, void, uint64_t, uint64_t, uint64_t))(v19 + 1630);
  __n128 v86 = v19 + 1631;
  int v84 = a7 >> 16;
  int v85 = (__int16)a7;
  int v20 = (char *)&unk_1D0D8082C + 10 * a8 + 2 * v17 + 1;
  do
  {
    *(_WORD *)(*((void *)v11 + 1) + 4 * v13 + 4) = v15 + *(v20 - 1);
    *(_WORD *)(*((void *)v11 + 1) + 4 * v13 + 6) = v16 + *v20;
    uint64_t v21 = *((void *)v11 + 1);
    if (!v17
      || *v94
      || ((v22 = *(_DWORD *)(v21 + 4 * v13 + 4), int v23 = v11[3184], (__int16)v22 <= v23 >> 16)
        ? (BOOL v24 = (__int16)v22 < (__int16)v23)
        : (BOOL v24 = 1),
          !v24 && ((v25 = v11[3185], v26 = v22 >> 16, v26 >= (__int16)v25) ? (BOOL v27 = v26 <= v25 >> 16) : (BOOL v27 = 0), v27)))
    {
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 16) = 0;
      *(void *)(v21 + 24) = 0;
      *(void *)(v21 + 32) = -1;
      *(_WORD *)(v21 + 44) = v93;
      BOOL v28 = *v87;
      int v29 = (void *)((char *)v11 + (*v86 >> 1));
      if (*v86) {
        BOOL v28 = *(void (**)(void *, void, void, void, void, void, uint64_t, uint64_t, uint64_t))(*v29 + v28);
      }
      LODWORD(v79) = a6;
      v28(v29, *((void *)v11 + 1), a2, a3, a4, a5, a9, a10, v79);
      uint64_t result = (void *)(*((uint64_t (**)(void, void, void, void, uint64_t, void))a11 + 5))(*a11, a11[1], *((void *)a11 + 2), *((void *)a11 + 3), a10, *((void *)a11 + 4));
      uint64_t v30 = *((void *)v11 + 1);
      *(void *)(v30 + 16) = result;
      uint64_t v31 = v30 + 4 * v13;
      int v33 = *(__int16 *)(v31 + 4);
      uint64_t v32 = v31 + 4;
      int v34 = v33 - v85;
      unsigned int v35 = v33 - v85 + 64;
      if (v35 >= 0x80)
      {
        if (v34 >= 0) {
          int v37 = v34;
        }
        else {
          int v37 = -v34;
        }
        unsigned int v36 = 63 - 2 * __clz((v34 < 1) | (2 * v37));
      }
      else
      {
        unsigned int v36 = byte_1D0DA5D08[v35];
      }
      int v38 = *(__int16 *)(v32 + 2) - v84;
      if ((v38 + 64) >= 0x80)
      {
        if (v38 >= 0) {
          int v40 = *(__int16 *)(v32 + 2) - v84;
        }
        else {
          int v40 = v84 - *(__int16 *)(v32 + 2);
        }
        unsigned int v39 = 63 - 2 * __clz((v38 < 1) | (2 * v40));
      }
      else
      {
        unsigned int v39 = byte_1D0DA5D08[v38 + 64];
      }
      unsigned int v41 = v39 + v36;
      *(_DWORD *)(v30 + 40) = v41;
      unint64_t v42 = ((*(unsigned __int16 *)(*((void *)v11 + 1619) + 2 * *(__int16 *)(v30 + 44) + 152) * (unint64_t)v41) >> (8 * (*(_WORD *)(v30 + 44) == 0)))
          + result;
      *(void *)(v30 + 32) = v42;
      uint64_t v43 = *(void *)v11;
      if (v42 < *(void *)(*(void *)v11 + 32))
      {
        *(unsigned char *)(v43 + v13) = *(unsigned char *)(v30 + v13);
        *(_DWORD *)(v43 + 4 * v13 + 4) = *(_DWORD *)v32;
        *(void *)(v43 + 16) = *(void *)(v30 + 16);
        *(_DWORD *)(v43 + 40) = *(_DWORD *)(v30 + 40);
        *(void *)(v43 + 32) = *(void *)(v30 + 32);
        int v12 = v17;
      }
    }
    v20 += 2;
    ++v17;
  }
  while (v17 != 5);
  if (v12)
  {
    uint64_t v44 = 0;
    uint64_t v45 = *(void *)v11 + 4 * v13;
    __int16 v46 = *(_WORD *)(v45 + 4);
    __int16 v47 = *(_WORD *)(v45 + 6);
    do
    {
      *(&v95 + v44) = byte_1D0D80840[3 * v12 + v44];
      ++v44;
    }
    while (v44 != 3);
    uint64_t v48 = *((void *)v11 + 1);
    *(_DWORD *)(v48 + 40) = 0;
    *(void *)(v48 + 16) = 0;
    *(void *)(v48 + 24) = 0;
    *(void *)(v48 + 32) = -1;
    *(_WORD *)(v48 + 44) = v93;
    if (HIDWORD(v79))
    {
      int v81 = 0;
      uint64_t v49 = 3;
      uint64_t v50 = (char *)&unk_1D0D8082C + 10 * a8;
      do
      {
        uint64_t v51 = 0;
        __int32 v80 = v12;
        uint64_t v52 = 4 * v49;
        int v83 = -1;
        do
        {
          uint64_t v53 = *(int *)((char *)&v95 + v51);
          int v54 = &v50[2 * v53];
          *(_WORD *)(*((void *)v11 + 1) + 4 * v13 + 4) = v46 + *v54;
          *(_WORD *)(*((void *)v11 + 1) + 4 * v13 + 6) = v47 + v54[1];
          uint64_t v55 = *((void *)v11 + 1);
          if (*v94
            || ((int v58 = *(_DWORD *)(v55 + 4 * v13 + 4), v59 = v11[3184], (__int16)v58 <= v59 >> 16)
              ? (BOOL v60 = (__int16)v58 < (__int16)v59)
              : (BOOL v60 = 1),
                !v60
             && ((v61 = v11[3185], int v62 = v58 >> 16, v62 >= (__int16)v61) ? (v63 = v62 <= v61 >> 16) : (v63 = 0), v63)))
          {
            *(_DWORD *)(v55 + 40) = 0;
            *(void *)(v55 + 16) = 0;
            *(void *)(v55 + 24) = 0;
            *(void *)(v55 + 32) = -1;
            *(_WORD *)(v55 + 44) = v93;
            unsigned int v56 = *v87;
            unsigned int v57 = (void *)((char *)v11 + (*v86 >> 1));
            if (*v86) {
              unsigned int v56 = *(void (**)(void *, void, void, void, void, void, uint64_t, uint64_t, uint64_t))(*v57 + v56);
            }
            LODWORD(v79) = a6;
            v56(v57, *((void *)v11 + 1), a2, a3, a4, a5, a9, a10, v79);
            uint64_t result = (void *)(*((uint64_t (**)(void, void, void, void, uint64_t, void))a11 + 5))(*a11, a11[1], *((void *)a11 + 2), *((void *)a11 + 3), a10, *((void *)a11 + 4));
            uint64_t v64 = *((void *)v11 + 1);
            *(void *)(v64 + 16) = result;
            uint64_t v65 = v64 + 4 * v13;
            int v67 = *(__int16 *)(v65 + 4);
            uint64_t v66 = v65 + 4;
            int v68 = v67 - v85;
            unsigned int v69 = v67 - v85 + 64;
            if (v69 >= 0x80)
            {
              if (v68 >= 0) {
                int v71 = v68;
              }
              else {
                int v71 = -v68;
              }
              unsigned int v70 = 63 - 2 * __clz((v68 < 1) | (2 * v71));
            }
            else
            {
              unsigned int v70 = byte_1D0DA5D08[v69];
            }
            int v72 = *(__int16 *)(v66 + 2) - v84;
            if ((v72 + 64) >= 0x80)
            {
              if (v72 >= 0) {
                int v74 = *(__int16 *)(v66 + 2) - v84;
              }
              else {
                int v74 = v84 - *(__int16 *)(v66 + 2);
              }
              unsigned int v73 = 63 - 2 * __clz((v72 < 1) | (2 * v74));
            }
            else
            {
              unsigned int v73 = byte_1D0DA5D08[v72 + 64];
            }
            unsigned int v75 = v73 + v70;
            *(_DWORD *)(v64 + 40) = v75;
            unint64_t v76 = ((*(unsigned __int16 *)(*((void *)v11 + 1619) + 2 * *(__int16 *)(v64 + 44) + 152)
                  * (unint64_t)v75) >> (8 * (*(_WORD *)(v64 + 44) == 0)))
                + result;
            *(void *)(v64 + 32) = v76;
            uint64_t v77 = *(void *)v11;
            if (v76 < *(void *)(*(void *)v11 + 32))
            {
              *(unsigned char *)(v77 + v13) = *(unsigned char *)(v64 + v13);
              *(_DWORD *)(v77 + 4 * v13 + 4) = *(_DWORD *)v66;
              *(void *)(v77 + 16) = *(void *)(v64 + 16);
              *(_DWORD *)(v77 + 40) = *(_DWORD *)(v64 + 40);
              *(void *)(v77 + 32) = *(void *)(v64 + 32);
              int v83 = v53;
            }
          }
          v51 += 4;
        }
        while (v52 != v51);
        int v12 = v83;
        if (v83 == -1) {
          break;
        }
        int v95 = v83;
        if (((v83 - 1) ^ (v80 - 1)) > 1)
        {
          v96.i32[0] = v80;
          uint64_t v49 = 2;
        }
        else
        {
          int32x2_t v96 = vsub_s32((int32x2_t)0x400000003, vdup_n_s32((v83 - 1) & 0xFFFFFFFE));
          uint64_t v49 = 3;
        }
        uint64_t v78 = *(void *)v11 + 4 * v13;
        __int16 v46 = *(_WORD *)(v78 + 4);
        __int16 v47 = *(_WORD *)(v78 + 6);
        ++v81;
      }
      while (v81 != HIDWORD(v79));
    }
  }
  return result;
}

uint64_t sub_1D0CE5E14(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  unsigned int v10 = a5;
  uint64_t v13 = a2 + 4 * a9;
  int v14 = *(unsigned __int16 *)(v13 + 4);
  int v15 = *(unsigned __int16 *)(v13 + 6);
  if ((v14 | v15))
  {
    int v17 = v15 & 3;
    uint64_t v18 = *(void *)(*(void *)(a1 + 12944) + ((uint64_t)a9 << 8) + 16 * *(char *)(a2 + a9) + 1672);
    int v19 = a4 + ((__int16)v15 >> 2);
    int v20 = -3 - a6;
    int v21 = *(_DWORD *)(v18 + 524) + 2;
    if (v19 >= v21) {
      int v22 = *(_DWORD *)(v18 + 524) + 2;
    }
    else {
      int v22 = v19;
    }
    if (v19 <= v20) {
      int v23 = -3 - a6;
    }
    else {
      int v23 = v22;
    }
    if (v17 == 3) {
      ++v19;
    }
    if (v19 >= v21) {
      int v24 = *(_DWORD *)(v18 + 524) + 2;
    }
    else {
      int v24 = v19;
    }
    if (v19 <= v20) {
      int v25 = -3 - a6;
    }
    else {
      int v25 = v24;
    }
    if (v23 <= v25) {
      int v26 = v25;
    }
    else {
      int v26 = v23;
    }
    sub_1D0C94F44(v18, v26 + a6);
    unsigned int v27 = __clz(__rbit32(v10));
    if (*(unsigned char *)(*(void *)(a1 + 12944) + 32 * a9 + 2 * *(char *)(a2 + a9) + 5120))
    {
      return (*(uint64_t (**)(uint64_t))(a1 + 8 * v27 + 12984))(a6);
    }
    else
    {
      BOOL v28 = *(uint64_t (**)(uint64_t))(a1 + 8 * v27 + 12944);
      return v28(a6);
    }
  }
  else
  {
    return sub_1D0CE6084(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1D0CE6084(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v14 = *(void *)(*(void *)(a1 + 12944) + ((uint64_t)a9 << 8) + 16 * *(char *)(a2 + a9) + 1672);
  int v15 = *(_DWORD *)(v14 + 520) + 2;
  uint64_t v16 = a2 + 4 * a9;
  int v17 = a3 + (*(__int16 *)(v16 + 4) >> 2);
  if (v17 < v15) {
    int v15 = a3 + (*(__int16 *)(v16 + 4) >> 2);
  }
  if (v17 <= -3 - (int)a5) {
    int v18 = -3 - a5;
  }
  else {
    int v18 = v15;
  }
  int v19 = *(_DWORD *)(v14 + 524) + 2;
  int v20 = a4 + (*(__int16 *)(v16 + 6) >> 2);
  if (v20 < v19) {
    int v19 = a4 + (*(__int16 *)(v16 + 6) >> 2);
  }
  if (v20 <= -3 - (int)a6) {
    int v21 = -3 - a6;
  }
  else {
    int v21 = v19;
  }
  sub_1D0C94F44(v14, v21 + a6);
  unsigned int v22 = *(_DWORD *)(v16 + 4);
  uint64_t v23 = v14 + 8 * (HIWORD(v22) & 2 | (v22 >> 1) & 1);
  uint64_t v24 = *(void *)(v23 + 120);
  uint64_t v25 = *(void *)(v23 + 88) + ((v24 * v21 + v18) << *(unsigned char *)(v14 + 156));
  unint64_t v26 = 2 * (v22 & 3);
  uint64_t v27 = (v22 >> 15) & 6;
  uint64_t v28 = *(char *)(a2 + a9);
  uint64_t v29 = *(void *)(a1 + 12944);
  if (*(unsigned char *)(v29 + 32 * a9 + 2 * v28 + 5120)) {
    return sub_1D0CE6240(a1, a5, a6, *(unsigned int *)(v29 + 664), *(__int16 *)(v29 + ((uint64_t)a9 << 8) + 16 * v28 + 672), *(__int16 *)(v29 + ((uint64_t)a9 << 8) + 16 * v28 + 676), v26 | (v27 << 16), v24, v25, a7, a8);
  }
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (v27 & 2 | (v26 >> 1) & 1) + 3224);
  return v31(a5, a6, v26 | (v27 << 16), v24, v25, a7, a8);
}

uint64_t sub_1D0CE6240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = MEMORY[0x1F4188790]();
  int v13 = v12;
  int v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  unsigned int v21 = v20;
  uint64_t v22 = v11;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, unsigned char *))(*(void *)(v11 + 12944)
                                                                                      + ((8 * ((v23 & 3) != 0)) | (16 * ((*(void *)&v23 & 0x30000) != 0)))
                                                                                      + 3224))(v20, v18, v23, v24, a9, (int)v20, v29);
  v28[0] = v15;
  v28[1] = v15;
  v27[0] = v13;
  v27[1] = v13;
  signed int v25 = __clz(__rbit32(v21)) - 2;
  if (!v21) {
    signed int v25 = -2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, _DWORD *, unsigned char *, uint64_t, uint64_t))(v22 + 8 * v25 + 13088))(v19, v17, v28, v27, v29, a10, a11);
}

uint64_t sub_1D0CE6374(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v13 = *(void *)(*(void *)(a1 + 12944) + ((uint64_t)a9 << 8) + 16 * *(char *)(a2 + a9) + 1672);
  uint64_t v14 = *(void *)(v13 + 416);
  int v15 = *(_DWORD *)(v13 + 520) + 2;
  uint64_t v16 = a2 + 4 * a9;
  int v18 = *(__int16 *)(v16 + 4);
  uint64_t v17 = (unsigned int *)(v16 + 4);
  int v19 = a3 + (v18 >> 2);
  if (v19 < v15) {
    int v15 = v19;
  }
  if (v19 <= -3 - (int)a5) {
    int v20 = -3 - a5;
  }
  else {
    int v20 = v15;
  }
  int v21 = *(_DWORD *)(v13 + 524) + 2;
  int v22 = a4 + (*((__int16 *)v17 + 1) >> 2);
  if (v22 < v21) {
    int v21 = a4 + (*((__int16 *)v17 + 1) >> 2);
  }
  if (v22 <= -3 - (int)a6) {
    int v23 = -3 - a6;
  }
  else {
    int v23 = v21;
  }
  sub_1D0C94F44(v13, v23 + a6);
  uint64_t v24 = *(char *)(a2 + a9);
  uint64_t v25 = *(void *)(a1 + 12944);
  if (*(unsigned char *)(v25 + 32 * a9 + 2 * v24 + 5120)) {
    return sub_1D0CE6240(a1, a5, a6, *(unsigned int *)(v25 + 664), *(__int16 *)(v25 + ((uint64_t)a9 << 8) + 16 * v24 + 672), *(__int16 *)(v25 + ((uint64_t)a9 << 8) + 16 * v24 + 676), *v17, v14, *(void *)(v13 + 400) + ((*(void *)(v13 + 416) * v23 + v20) << *(unsigned char *)(v13 + 531)), a7, a8);
  }
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25
                                                   + ((8 * ((*v17 & 3) != 0)) | (16 * ((*v17 & 0x30000) != 0)))
                                                   + 3224);
  return v27(a5, a6);
}

uint64_t sub_1D0CE6524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1 + 16;
  int v7 = (unsigned int *)(a1 + 12320);
  if (*(void *)(a1 + 12664)) {
    uint64_t v8 = *(void *)(a1 + 12664);
  }
  else {
    uint64_t v8 = a1 + 12320;
  }
  *(void *)(a2 + 16) = (*(unsigned int (**)(void, void, uint64_t, void, uint64_t))(a3 + 48))(*(void *)(a3 + 16), *(void *)(a3 + 24), a4, *(void *)(a3 + 32), v8);
  if (*(void *)(a1 + 12664)) {
    uint64_t v9 = *(unsigned int **)(a1 + 12664);
  }
  else {
    uint64_t v9 = v7;
  }
  return sub_1D0CE06C0(v6, (char *)a2, v9);
}

uint64_t sub_1D0CE65AC(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result = (*((uint64_t (**)(void, void, void, void, uint64_t, void))a3 + 5))(*a3, a3[1], *((void *)a3 + 2), *((void *)a3 + 3), a4, *((void *)a3 + 4));
  *(void *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1D0CE65EC(uint64_t result, int a2, int a3, int a4, int a5, unsigned int a6, __int16 *a7)
{
  uint64_t v7 = result + 4 * a6;
  int v8 = 4 * *(_DWORD *)(v7 + 12700) + 8;
  int v9 = a7[1] + 4 * a3;
  if (v9 < v8) {
    LOWORD(v8) = a7[1] + 4 * a3;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(result + 12944) + 4760) + 232)) {
    int v10 = 0;
  }
  else {
    int v10 = -12 - 4 * a5;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(result + 12944) + 4760) + 232)) {
    int v11 = 0;
  }
  else {
    int v11 = -12 - 4 * a4;
  }
  if (v9 > v10) {
    LOWORD(v10) = v8;
  }
  a7[1] = v10 - 4 * a3;
  int v12 = 4 * *(_DWORD *)(v7 + 12692) + 8;
  int v13 = *a7 + 4 * a2;
  if (v13 < v12) {
    LOWORD(v12) = *a7 + 4 * a2;
  }
  if (v13 <= v11) {
    LOWORD(v12) = v11;
  }
  *a7 = v12 - 4 * a2;
  return result;
}

void *sub_1D0CE6670(void *result, unsigned int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13)
{
  v64[a6] = *(unsigned char *)(a11 + a6);
  uint64_t v13 = 1 - a6;
  v64[v13] = *(unsigned char *)(a11 + v13);
  *(_DWORD *)&v64[4 * v13 + 4] = *(_DWORD *)(a11 + 4 * v13 + 4);
  uint64_t v56 = result[1608];
  uint64_t v57 = result[1607];
  uint64_t v14 = result[1619] + 8 * __clz(__rbit32(a4));
  uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v14 + 512);
  uint64_t v51 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 200);
  unsigned int v68 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v67 = -1;
  __int16 v69 = 1;
  if (*(unsigned char *)(a7 + 48))
  {
    unsigned int v16 = a6;
    uint64_t v17 = (uint64_t)result;
    unint64_t v18 = 0;
    int v59 = (__int16 *)&v64[4 * a6 + 4];
    BOOL v20 = a4 > 4 && a4 == a5;
    BOOL v53 = v20;
    __int16 v47 = (unsigned int *)(result + 1540);
    uint64_t v48 = (uint64_t)(result + 2);
    uint64_t v49 = a6;
    __int16 v46 = (int *)(a11 + 4 * a6 + 4);
    int v54 = result;
    uint64_t v52 = a7;
    unsigned int v60 = a4;
    do
    {
      int v21 = *(_DWORD *)(a7 + 4 * v18);
      *(_DWORD *)int v59 = v21;
      sub_1D0CE65EC(v17, a2, a3, a4, a5, v16, v59);
      int v22 = (__int16)v21;
      int v23 = (__int16)v21 - (__int16)*(_DWORD *)a8;
      if ((v23 + 64) >= 0x80)
      {
        if (v23 >= 0) {
          int v25 = (__int16)v21 - (__int16)*(_DWORD *)a8;
        }
        else {
          int v25 = (__int16)*(_DWORD *)a8 - (__int16)v21;
        }
        unsigned int v24 = 63 - 2 * __clz((v23 < 1) | (2 * v25));
      }
      else
      {
        unsigned int v24 = byte_1D0DA5D08[v23 + 64];
      }
      int v26 = v21 >> 16;
      int v27 = (v21 >> 16) - (*(int *)a8 >> 16);
      if ((v27 + 64) >= 0x80)
      {
        if (v27 >= 0) {
          int v29 = (v21 >> 16) - (*(int *)a8 >> 16);
        }
        else {
          int v29 = (*(int *)a8 >> 16) - (v21 >> 16);
        }
        unsigned int v28 = 63 - 2 * __clz((v27 < 1) | (2 * v29));
      }
      else
      {
        unsigned int v28 = byte_1D0DA5D08[v27 + 64];
      }
      unsigned int v30 = v28 + v24;
      unsigned int v68 = v30;
      unint64_t v31 = *(unsigned __int8 *)(a8 + 48);
      int v58 = v21;
      int v32 = 0;
      if (v31 >= 2)
      {
        for (uint64_t i = 1; i != v31; ++i)
        {
          int v34 = *(_DWORD *)(a8 + 4 * i);
          int v35 = v22 - (__int16)v34;
          if ((v35 + 64) >= 0x80)
          {
            if (v35 >= 0) {
              int v37 = v22 - (__int16)v34;
            }
            else {
              int v37 = (__int16)v34 - v22;
            }
            unsigned int v36 = 63 - 2 * __clz((v35 < 1) | (2 * v37));
          }
          else
          {
            unsigned int v36 = byte_1D0DA5D08[v35 + 64];
          }
          int v38 = v26 - (v34 >> 16);
          if ((v38 + 64) >= 0x80)
          {
            if (v38 >= 0) {
              int v40 = v38;
            }
            else {
              int v40 = -v38;
            }
            unsigned int v39 = 63 - 2 * __clz((v38 < 1) | (2 * v40));
          }
          else
          {
            unsigned int v39 = byte_1D0DA5D08[v38 + 64];
          }
          unsigned int v41 = v39 + v36;
          if (v41 < v30)
          {
            unsigned int v68 = v41;
            unsigned int v30 = v41;
            int v32 = i;
          }
        }
      }
      sub_1D0CE32EC(v17, (uint64_t)v64, a2, a3, v60, a5, a9, a10, v16);
      if (v53)
      {
        if (*(void *)(v17 + 12664)) {
          unint64_t v42 = *(unsigned int **)(v17 + 12664);
        }
        else {
          unint64_t v42 = v47;
        }
        uint64_t v43 = v50(v57, v56, a10, a9, v42);
        uint64_t v65 = v43;
        if (*(void *)(v17 + 12664)) {
          uint64_t v44 = *(unsigned int **)(v17 + 12664);
        }
        else {
          uint64_t v44 = v47;
        }
        uint64_t result = (void *)sub_1D0CE06C0(v48, v64, v44);
      }
      else
      {
        uint64_t result = (void *)v51(v60, a5, v57, v56, a10, a9);
        uint64_t v43 = result;
        uint64_t v65 = result;
      }
      a7 = v52;
      if (a13) {
        *(void *)(a13 + 8 * v18) = v43;
      }
      uint64_t v17 = (uint64_t)v54;
      unint64_t v67 = ((*(unsigned __int16 *)(v54[1619] + 2 * v69 + 152) * (unint64_t)v68) >> (8 * (v69 == 0))) + v43;
      a4 = v60;
      if (v67 < *(void *)(a11 + 32))
      {
        *(_DWORD *)int v59 = v58;
        *(unsigned char *)(a11 + v49) = v64[v49];
        *__int16 v46 = v58;
        unint64_t v45 = v67;
        *(void *)(a11 + 16) = v65;
        *(_DWORD *)(a11 + 40) = v68;
        *(void *)(a11 + 32) = v45;
        *a12 = v32;
      }
      ++v18;
      unsigned int v16 = a6;
    }
    while (v18 < *(unsigned __int8 *)(v52 + 48));
  }
  return result;
}

uint64_t sub_1D0CE6A5C(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int a5)
{
  int v5 = *(_DWORD *)(a3 + 4 * a5 + 4);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(__int16 *)(a3 + 44);
  BOOL v8 = *(_WORD *)(a3 + 44) == 0;
  unsigned int v9 = *a4;
  unsigned int v10 = *(_DWORD *)(a3 + 40) + 1;
  *(_DWORD *)(a3 + 40) = v10;
  char v11 = 8 * v8;
  unsigned int v12 = *(unsigned __int16 *)(result + 2 * v7 + 152);
  unint64_t v13 = ((v12 * (unint64_t)v10) >> v11) + v6;
  *(void *)(a3 + 32) = v13;
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v15 = 0;
    int v16 = (__int16)v5;
    int v17 = v5 >> 16;
    uint64_t result = *a4;
    do
    {
      if (v15 != result)
      {
        int v18 = *(_DWORD *)(a2 + 4 * v15);
        int v19 = v16 - (__int16)v18;
        if ((v19 + 64) >= 0x80)
        {
          if (v19 >= 0) {
            int v21 = v16 - (__int16)v18;
          }
          else {
            int v21 = (__int16)v18 - v16;
          }
          unsigned int v20 = 63 - 2 * __clz((v19 < 1) | (2 * v21));
        }
        else
        {
          unsigned int v20 = byte_1D0DA5D08[v19 + 64];
        }
        int v22 = v17 - (v18 >> 16);
        if ((v22 + 64) >= 0x80)
        {
          if (v22 >= 0) {
            int v24 = v22;
          }
          else {
            int v24 = -v22;
          }
          unsigned int v23 = 63 - 2 * __clz((v22 < 1) | (2 * v24));
        }
        else
        {
          unsigned int v23 = byte_1D0DA5D08[v22 + 64];
        }
        unsigned int v25 = v20 + v23 + 1;
        unint64_t v26 = ((v12 * (unint64_t)v25) >> v11) + v6;
        if (v26 < v13)
        {
          *(_DWORD *)(a3 + 40) = v25;
          *(void *)(a3 + 32) = v26;
          uint64_t result = *a4;
          unint64_t v13 = ((v12 * (unint64_t)v25) >> v11) + v6;
          unsigned int v9 = v15;
        }
      }
      ++v15;
    }
    while (v14 != v15);
  }
  *a4 = v9;
  return result;
}

uint64_t sub_1D0CE6B7C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a2 + 4 * a3 + 4);
  int v5 = (__int16)v4;
  int v6 = v4 >> 16;
  if ((a4 & 0x80000000) != 0)
  {
    uint64_t v10 = 0;
    unsigned int v11 = -1;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 4 * a4);
    int v8 = (__int16)v4 - (__int16)v7;
    if ((v8 + 64) >= 0x80)
    {
      if (v8 >= 0) {
        int v12 = v5 - (__int16)v7;
      }
      else {
        int v12 = (__int16)v7 - v5;
      }
      unsigned int v9 = 63 - 2 * __clz((v8 < 1) | (2 * v12));
    }
    else
    {
      unsigned int v9 = byte_1D0DA5D08[v8 + 64];
    }
    int v13 = v6 - (v7 >> 16);
    if ((v13 + 64) >= 0x80)
    {
      if (v13 >= 0) {
        int v15 = v13;
      }
      else {
        int v15 = -v13;
      }
      unsigned int v14 = 63 - 2 * __clz((v13 < 1) | (2 * v15));
    }
    else
    {
      unsigned int v14 = byte_1D0DA5D08[v13 + 64];
    }
    unsigned int v11 = v9 + v14 + 1;
    uint64_t v10 = a4;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v16 = 0;
    uint64_t v17 = a4;
    do
    {
      if (v17 != v16)
      {
        int v18 = *(_DWORD *)(a1 + 4 * v16);
        int v19 = v5 - (__int16)v18;
        if ((v19 + 64) >= 0x80)
        {
          if (v19 >= 0) {
            int v21 = v5 - (__int16)v18;
          }
          else {
            int v21 = (__int16)v18 - v5;
          }
          unsigned int v20 = 63 - 2 * __clz((v19 < 1) | (2 * v21));
        }
        else
        {
          unsigned int v20 = byte_1D0DA5D08[v19 + 64];
        }
        int v22 = v6 - (v18 >> 16);
        if ((v22 + 64) >= 0x80)
        {
          if (v22 >= 0) {
            int v24 = v22;
          }
          else {
            int v24 = -v22;
          }
          unsigned int v23 = 63 - 2 * __clz((v22 < 1) | (2 * v24));
        }
        else
        {
          unsigned int v23 = byte_1D0DA5D08[v22 + 64];
        }
        unsigned int v25 = v20 + v23;
        if (v25 + 1 >= v11) {
          uint64_t v10 = v10;
        }
        else {
          uint64_t v10 = v16;
        }
        if (v25 + 1 < v11) {
          unsigned int v11 = v25 + 1;
        }
      }
      ++v16;
    }
    while (*(unsigned __int8 *)(a1 + 48) != v16);
  }
  *(_DWORD *)(a2 + 40) += v11;
  return v10;
}

uint64_t sub_1D0CE6CF0(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = a2[1];
  if (v16 == 15) {
    return sub_1D0CE32EC((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 0);
  }
  uint64_t v17 = *a2;
  if (v17 == 15) {
    return sub_1D0CE32EC((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 1);
  }
  if (*(_DWORD *)(*(void *)(a1[1618] + 1672 + 16 * v17) + 1024) == *(_DWORD *)(*(void *)(a1[1618]
                                                                                                + 1672
                                                                                                + 16 * v16
                                                                                                + 256)
                                                                                    + 1024)
    && *((_DWORD *)a2 + 1) == *((_DWORD *)a2 + 2))
  {
    return sub_1D0CE32EC((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, 0);
  }
  unsigned int v24 = __clz(__rbit32(a5)) - 2;
  uint64_t v23 = a1[1615];
  uint64_t v20 = a1[1612];
  sub_1D0CE32EC((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, (int)a5, v20, 0);
  sub_1D0CE32EC((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, (int)a5, v23, 1);
  if (a5) {
    int v21 = v24;
  }
  else {
    int v21 = -2;
  }
  int v22 = (uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t))a1[v21 + 1620];
  return v22(a6, (int)a5, v20, (int)a5, v23, a7, a8);
}

uint64_t sub_1D0CE6EAC(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 152);
  if ((v2 - 7) < 0xFFFFFFFA)
  {
    if (v2 == 8)
    {
      int v3 = *(unsigned __int8 *)(a1 + 159);
      if (v3 == 5 || dword_1EB671A40 <= 2) {
        return 255;
      }
      goto LABEL_12;
    }
LABEL_10:
    if (dword_1EB671A40 < 3) {
      return 255;
    }
    int v3 = *(unsigned __int8 *)(a1 + 159);
LABEL_12:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unknown level %d.%d requested, writing level 8.5 instead!\n", v2, v3);
    syslog(27, "Unknown level %d.%d requested, writing level 8.5 instead!\n", *(unsigned __int8 *)(a1 + 152), *(unsigned __int8 *)(a1 + 159));
    return 255;
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 159);
  if (v5 > byte_1D0D809F8[v2 - 1]) {
    goto LABEL_10;
  }
  return word_1D0D80944[3 * *(unsigned __int8 *)(a1 + 152) - 3 + v5];
}

uint64_t sub_1D0CE6F94(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 96);
  if ((v4 - 33) < 5 || v4 == 1)
  {
    int v6 = *(char *)(a2 + 290);
    if (v6 <= *(char *)(a2 + 291)) {
      LOBYTE(v6) = *(unsigned char *)(a2 + 291);
    }
    unsigned int v7 = (v6 - 9);
    if (v7 >= 2) {
      int v8 = 1;
    }
    else {
      int v8 = 2;
    }
    *(unsigned char *)(a1 + 8) = v8;
    int v9 = 1 << *(unsigned char *)(a2 + 177);
    *(_DWORD *)(a1 + 168) = v8;
    unsigned int v10 = ((v9 - 1 + *(__int16 *)(a2 + 106)) & -v9) * ((v9 - 1 + *(__int16 *)(a2 + 108)) & -v9);
    unsigned int v11 = (*(double *)(a2 + 112) * (double)v10);
    if (v7 >= 2 && v10 <= 0x220000 && v11 <= 0x3FC0000)
    {
      *(unsigned char *)(a1 + 152) = 4;
      *(unsigned char *)(a1 + 159) = 0;
LABEL_18:
      char v12 = *(unsigned char *)(a1 + 7) & 0xFE;
LABEL_41:
      *(unsigned char *)(a1 + 7) = v12;
      goto LABEL_42;
    }
    if (v10 <= 0x220000 && v11 <= 0x7F80000)
    {
      *(unsigned char *)(a1 + 152) = 4;
      *(unsigned char *)(a1 + 159) = 1;
      goto LABEL_18;
    }
    if (v10 > 0x880000) {
      goto LABEL_22;
    }
    if (v11 <= 0xFF00000)
    {
      *(unsigned char *)(a1 + 152) = 5;
      *(unsigned char *)(a1 + 159) = 0;
      goto LABEL_40;
    }
    if (v11 > 0x1FE00000)
    {
LABEL_22:
      if (dword_1EB671A40 >= 7)
      {
        fwrite("Set to L5.1 high tier, but it is not enough for this encode!\n", 0x3DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(31, "Set to L5.1 high tier, but it is not enough for this encode!\n");
      }
    }
    *(unsigned char *)(a1 + 152) = 5;
    *(unsigned char *)(a1 + 159) = 1;
LABEL_40:
    char v12 = *(unsigned char *)(a1 + 7) | 1;
    goto LABEL_41;
  }
  if (*(char *)(a2 + 290) <= *(char *)(a2 + 291)) {
    int v13 = *(char *)(a2 + 291);
  }
  else {
    int v13 = *(char *)(a2 + 290);
  }
  if (v13 >= 11)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "bit depth %d not supported\n", v13);
      syslog(27, "bit depth %d not supported\n");
    }
    return 4294954394;
  }
  int v14 = *(char *)(a2 + 169) + *(char *)(a2 + 168);
  *(_DWORD *)(a1 + 168) = 0;
  int v15 = *(_DWORD *)(a2 + 296);
  if (v15)
  {
    if (v15 != 1)
    {
      if (dword_1EB671A40 >= 3)
      {
        int v35 = (FILE *)*MEMORY[0x1E4F143C8];
        unsigned int v36 = "Unable to determine a profile\n";
        int v37 = "Unable to determine a profile\n";
        size_t v38 = 30;
        goto LABEL_89;
      }
      return 4294954394;
    }
    if (v14) {
      int v16 = 1;
    }
    else {
      int v16 = 3;
    }
    if (v13 == 8) {
      int v17 = v16;
    }
    else {
      int v17 = 2;
    }
  }
  else if (v13 == 8)
  {
    int v17 = 2020;
  }
  else
  {
    int v17 = 1892;
  }
  *(_DWORD *)(a1 + 168) = v17;
  int v28 = 1 << *(unsigned char *)(a2 + 177);
  int v29 = v28 - 1;
  int v30 = -v28;
  int v31 = (v28 - 1 + *(__int16 *)(a2 + 106)) & -v28;
  int v32 = (v29 + *(__int16 *)(a2 + 108)) & v30;
  if (v31 <= v32) {
    unsigned int v33 = (v29 + *(__int16 *)(a2 + 108)) & v30;
  }
  else {
    unsigned int v33 = v31;
  }
  double v34 = *(double *)(a2 + 112);
  if (v34 == 0.0)
  {
    if (dword_1EB671A40 >= 3)
    {
      int v35 = (FILE *)*MEMORY[0x1E4F143C8];
      unsigned int v36 = "fps cannot be 0\n";
      int v37 = "fps cannot be 0\n";
      size_t v38 = 16;
LABEL_89:
      fwrite(v37, v38, 1uLL, v35);
      syslog(27, v36);
      return 4294954394;
    }
    return 4294954394;
  }
  unsigned int v39 = v31 * v32;
  double v40 = v34 * (double)(v31 * v32);
  unsigned int v41 = *(_DWORD *)(a2 + 188);
  if (!v41 && !*(unsigned char *)(a2 + 69) && dword_1EB671A40 >= 7)
  {
    fwrite("requested bitrate is 0, ignoring level bitrate limits\n", 0x36uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(31, "requested bitrate is 0, ignoring level bitrate limits\n");
  }
  uint64_t v42 = 0;
  uint64_t v43 = dword_1D0D808D8;
  uint64_t v44 = dword_1D0D80968;
  *(unsigned char *)(a1 + 152) = 0;
  unint64_t v45 = &unk_1D0D80890;
  __int16 v46 = word_1D0D80920;
  while (2)
  {
    uint64_t v47 = 0;
    uint64_t v48 = v44;
    do
    {
      unsigned int v49 = v43[v47];
      if (v49) {
        BOOL v50 = v49 >= v39;
      }
      else {
        BOOL v50 = 0;
      }
      if (v50 && v46[v47] && v33 <= v46[v47])
      {
        unsigned int v52 = v45[v47];
        if (v52 && v52 >= v40)
        {
          unsigned int v54 = v48[18];
          if (*v48 > v54) {
            unsigned int v54 = *v48;
          }
          if (1000 * v54 >= v41)
          {
            *(unsigned char *)(a1 + 7) |= *v48 < v41;
            *(unsigned char *)(a1 + 152) = v42 + 1;
            int v55 = *(_DWORD *)(a1 + 168);
            goto LABEL_120;
          }
        }
      }
      ++v47;
      ++v48;
    }
    while (v47 != 3);
    ++v42;
    v43 += 3;
    v44 += 3;
    v45 += 3;
    v46 += 3;
    if (v42 != 6) {
      continue;
    }
    break;
  }
  if (v14)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "luma(picture_size/picture_dim/sample_rate)/bit_rate is too big to fit in any level: (%d/%d/%d)/%d\n", v39, v33, v40, v41);
      syslog(27, "luma(picture_size/picture_dim/sample_rate)/bit_rate is too big to fit in any level: (%d/%d/%d)/%d\n");
    }
    return 4294954394;
  }
  if (*(_DWORD *)(a2 + 296) == 1) {
    int v67 = 3;
  }
  else {
    int v67 = 6372;
  }
  if (v13 == 8) {
    int v55 = v67;
  }
  else {
    int v55 = 6148;
  }
  *(_DWORD *)(a1 + 168) = v55;
  *(unsigned char *)(a1 + 152) = 8;
  LOBYTE(v47) = 5;
LABEL_120:
  *(unsigned char *)(a1 + 159) = v47;
  *(unsigned char *)(a1 + 8) = v55 & 0x1F;
  unsigned int v56 = *(_DWORD *)(a2 + 100);
  if (v56 && v56 != v55)
  {
    if (v56 > 3)
    {
      if (!*(unsigned char *)(a2 + 69)
        || *(_DWORD *)(a2 + 296)
        || (v55 != 3044 || v56 != 2020) && (v56 != 1892 || ((v55 - 2916) & 0xFFFFFF7F) != 0))
      {
LABEL_153:
        if (dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "input profile %d is not applicable, suggesting %d\n", *(_DWORD *)(a2 + 100), v55);
          syslog(27, "input profile %d is not applicable, suggesting %d\n");
        }
        return 4294954394;
      }
    }
    else if (((dword_1D0D80A04[v56 - 1] >> v55) & 1) == 0)
    {
      goto LABEL_153;
    }
  }
  if (!*(_WORD *)(a2 + 104)) {
    goto LABEL_42;
  }
  unsigned int v57 = *(unsigned __int16 *)(a2 + 104);
  if (v57 < sub_1D0CE6EAC(a1))
  {
    if (dword_1EB671A40 >= 3)
    {
      int v58 = (FILE *)*MEMORY[0x1E4F143C8];
      int v59 = *(unsigned __int16 *)(a2 + 104);
      int v60 = sub_1D0CE6EAC(a1);
      fprintf(v58, "input level %d is not applicable, suggesting %d\n", v59, v60);
      sub_1D0CE6EAC(a1);
      syslog(27, "input level %d is not applicable, suggesting %d\n");
    }
    return 4294954394;
  }
  unsigned int v61 = *(unsigned __int16 *)(a2 + 104);
  if (v61 > sub_1D0CE6EAC(a1))
  {
    uint64_t v62 = 0;
    int v63 = *(unsigned __int16 *)(a2 + 104);
    *(unsigned char *)(a1 + 159) = 0;
    uint64_t v64 = word_1D0D80944;
    *(unsigned char *)(a1 + 152) = 0;
    while (2)
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        if (v64[i]) {
          BOOL v66 = v64[i] == v63;
        }
        else {
          BOOL v66 = 0;
        }
        if (v66)
        {
          *(unsigned char *)(a1 + 152) = v62 + 1;
          *(unsigned char *)(a1 + 159) = i;
          goto LABEL_42;
        }
      }
      ++v62;
      v64 += 3;
      if (v62 != 6) {
        continue;
      }
      break;
    }
  }
LABEL_42:
  int v18 = *(unsigned __int8 *)(a1 + 8);
  if ((v18 - 1) >= 3) {
    int v19 = 1 << v18;
  }
  else {
    int v19 = dword_1D0D80A04[(v18 - 1)];
  }
  *(_DWORD *)(a1 + 16) = v19;
  unsigned __int8 v20 = sub_1D0CE6EAC(a1);
  *(unsigned char *)(a1 + 57) = v20;
  if (v20 == 255)
  {
    *(void *)(a1 + 68) = 0x8000000080000000;
LABEL_57:
    char v25 = 16;
    goto LABEL_58;
  }
  int v21 = *(unsigned __int8 *)(a1 + 152);
  if ((v21 - 7) <= 0xFFFFFFF9)
  {
    LODWORD(v22) = *(unsigned __int8 *)(a1 + 159);
LABEL_50:
    unsigned int v23 = 0x7FFFFFFF;
    goto LABEL_52;
  }
  uint64_t v22 = *(unsigned __int8 *)(a1 + 159);
  if (v22 > byte_1D0D809F8[v21 - 1]) {
    goto LABEL_50;
  }
  unsigned int v23 = dword_1D0D808D8[3 * *(unsigned __int8 *)(a1 + 152) - 3 + v22];
LABEL_52:
  *(_DWORD *)(a1 + 68) = v23;
  *(_DWORD *)(a1 + 72) = dword_1D0D80968[18 * (*(unsigned char *)(a1 + 7) & 1) - 3 + 3 * v21 + v22];
  unsigned int v24 = (((1 << *(unsigned char *)(a2 + 177)) - 1 + *(__int16 *)(a2 + 106)) & -(1 << *(unsigned char *)(a2 + 177)))
      * (((1 << *(unsigned char *)(a2 + 177)) - 1 + *(__int16 *)(a2 + 108)) & -(1 << *(unsigned char *)(a2 + 177)));
  if (v24 <= v23 >> 2) {
    goto LABEL_57;
  }
  if (v24 <= v23 >> 1)
  {
    char v25 = 12;
  }
  else if (v24 <= (3 * v23) >> 2)
  {
    char v25 = 8;
  }
  else
  {
    char v25 = 6;
  }
LABEL_58:
  *(unsigned char *)(a1 + 76) = v25;
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 44) |= 1u;
  *(unsigned char *)(a1 + 46) |= 1u;
  *(unsigned char *)(a1 + 47) |= 1u;
  *(unsigned char *)(a1 + 56) |= 1u;
  int v26 = *(_DWORD *)(a1 + 168);
  if ((v26 & 0x20) != 0)
  {
    *(unsigned char *)(a1 + 48) |= 1u;
    if ((v26 & 0x40) == 0)
    {
LABEL_60:
      if ((v26 & 0x80) == 0) {
        goto LABEL_61;
      }
      goto LABEL_72;
    }
  }
  else if ((v26 & 0x40) == 0)
  {
    goto LABEL_60;
  }
  *(unsigned char *)(a1 + 49) |= 1u;
  if ((v26 & 0x80) == 0)
  {
LABEL_61:
    if ((v26 & 0x100) == 0) {
      goto LABEL_62;
    }
    goto LABEL_73;
  }
LABEL_72:
  *(unsigned char *)(a1 + 50) |= 1u;
  if ((v26 & 0x100) == 0)
  {
LABEL_62:
    if ((v26 & 0x200) == 0) {
      goto LABEL_63;
    }
    goto LABEL_74;
  }
LABEL_73:
  *(unsigned char *)(a1 + 51) |= 1u;
  if ((v26 & 0x200) == 0)
  {
LABEL_63:
    if ((v26 & 0x400) == 0) {
      goto LABEL_64;
    }
    goto LABEL_75;
  }
LABEL_74:
  *(unsigned char *)(a1 + 52) |= 1u;
  if ((v26 & 0x400) == 0)
  {
LABEL_64:
    if ((v26 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
LABEL_75:
  *(unsigned char *)(a1 + 53) |= 1u;
  if ((v26 & 0x800) != 0) {
LABEL_65:
  }
    *(unsigned char *)(a1 + 54) |= 1u;
LABEL_66:
  if (v26 == 6372 || v26 == 6148) {
    *(unsigned char *)(a1 + 55) |= 1u;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_1D0CE7824(unsigned __int8 *a1, int a2, uint64_t a3)
{
  int v6 = &a1[a2];
  sub_1D0C9775C(a3, *v6, 2);
  sub_1D0C9775C(a3, (a1[7] >> a2) & 1, 1);
  int v8 = v6[8];
  unsigned int v7 = v6 + 8;
  sub_1D0C9775C(a3, v8, 5);
  int v9 = 0;
  unsigned int v10 = &a1[4 * a2 + 16];
  do
    sub_1D0C9775C(a3, (*(_DWORD *)v10 >> v9++) & 1, 1);
  while (v9 != 32);
  sub_1D0C9775C(a3, (a1[44] >> a2) & 1, 1);
  sub_1D0C9775C(a3, (a1[45] >> a2) & 1, 1);
  sub_1D0C9775C(a3, (a1[46] >> a2) & 1, 1);
  sub_1D0C9775C(a3, (a1[47] >> a2) & 1, 1);
  if (*v7 > 3u || (*v10 & 0x10) != 0)
  {
    sub_1D0C9775C(a3, (a1[48] >> a2) & 1, 1);
    sub_1D0C9775C(a3, (a1[49] >> a2) & 1, 1);
    sub_1D0C9775C(a3, (a1[50] >> a2) & 1, 1);
    sub_1D0C9775C(a3, (a1[51] >> a2) & 1, 1);
    sub_1D0C9775C(a3, (a1[52] >> a2) & 1, 1);
    sub_1D0C9775C(a3, (a1[53] >> a2) & 1, 1);
    sub_1D0C9775C(a3, (a1[54] >> a2) & 1, 1);
    sub_1D0C9775C(a3, (a1[55] >> a2) & 1, 1);
    sub_1D0C9775C(a3, (a1[56] >> a2) & 1, 1);
    int v11 = 13;
  }
  else
  {
    int v11 = 22;
  }
  sub_1D0C9775C(a3, 0, v11);
  return sub_1D0C9775C(a3, 0, 22);
}

uint64_t sub_1D0CE7A48(unsigned __int8 *a1, int a2, int a3, uint64_t a4)
{
  if (a2) {
    sub_1D0CE7824(a1, 0, a4);
  }
  uint64_t result = sub_1D0C9775C(a4, a1[57], 8);
  if (a3 >= 1)
  {
    int v8 = 0;
    do
    {
      sub_1D0C9775C(a4, (a1[64] >> ++v8) & 1, 1);
      uint64_t result = sub_1D0C9775C(a4, (a1[65] >> v8) & 1, 1);
    }
    while (a3 != v8);
    if (a3 <= 7)
    {
      int v9 = a3 - 8;
      do
        uint64_t result = sub_1D0C9775C(a4, 0, 2);
      while (!__CFADD__(v9++, 1));
    }
    uint64_t v11 = 0;
    uint64_t v12 = (a3 + 1) - 1;
    do
    {
      int v13 = 1 << (v11 + 1);
      if ((v13 & a1[64]) != 0) {
        uint64_t result = sub_1D0CE7824(a1, (int)v11 + 2, a4);
      }
      if ((v13 & a1[65]) != 0) {
        uint64_t result = sub_1D0C9775C(a4, a1[v11 + 58], 8);
      }
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

uint64_t sub_1D0CE7B70(uint64_t result, int a2, FILE *__stream)
{
  uint64_t v5 = (unsigned __int8 *)result;
  if (dword_1EB671A40 >= 6)
  {
    uint64_t result = fwrite("  ------ ProfileTierLevel ------\n", 0x21uLL, 1uLL, __stream);
    if (dword_1EB671A40 >= 6)
    {
      uint64_t result = fwrite("    ----- General -----\n", 0x18uLL, 1uLL, __stream);
      if (dword_1EB671A40 >= 6)
      {
        uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "profile_space", *v5);
        if (dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "tier_flag", v5[7] & 1);
          if (dword_1EB671A40 >= 6)
          {
            uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "profile_idc", v5[8]);
            if (dword_1EB671A40 >= 6)
            {
              uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "profile_compatibility_flag", *((unsigned int *)v5 + 4));
              if (dword_1EB671A40 >= 6)
              {
                uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "progressive_source_flag", v5[44] & 1);
                if (dword_1EB671A40 >= 6)
                {
                  uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "interlaced_source_flag", v5[45] & 1);
                  if (dword_1EB671A40 >= 6)
                  {
                    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "non_packed_constraint_flag", v5[46] & 1);
                    if (dword_1EB671A40 >= 6) {
                      uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "frame_only_constraint_flag", v5[47] & 1);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v5[8] > 3u || (v5[16] & 0x10) != 0)
  {
    if (dword_1EB671A40 < 6) {
      goto LABEL_26;
    }
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "general_max_12bit_constraint_flag", v5[48] & 1);
    if (dword_1EB671A40 < 6) {
      goto LABEL_26;
    }
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "general_max_10bit_constraint_flag", v5[49] & 1);
    if (dword_1EB671A40 < 6) {
      goto LABEL_26;
    }
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "general_max_8bit_constraint_flag", v5[50] & 1);
    if (dword_1EB671A40 < 6) {
      goto LABEL_26;
    }
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "general_max_422chroma_constraint_flag", v5[51] & 1);
    if (dword_1EB671A40 < 6) {
      goto LABEL_26;
    }
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "general_max_420chroma_constraint_flag", v5[52] & 1);
    if (dword_1EB671A40 < 6) {
      goto LABEL_26;
    }
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "general_max_monochrome_constraint_flag", v5[53] & 1);
    if (dword_1EB671A40 < 6) {
      goto LABEL_26;
    }
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "general_intra_constraint_flag", v5[54] & 1);
    if (dword_1EB671A40 < 6) {
      goto LABEL_26;
    }
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "general_one_picture_only_constraint_flag", v5[55] & 1);
    if (dword_1EB671A40 < 6) {
      goto LABEL_26;
    }
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "general_lower_bit_rate_constraint_flag", v5[56] & 1);
  }
  if (dword_1EB671A40 >= 6) {
    uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "level_idc", v5[57]);
  }
LABEL_26:
  if (a2 >= 1)
  {
    uint64_t v6 = (a2 + 1);
    int v7 = dword_1EB671A40;
    uint64_t v8 = 1;
    do
    {
      if (v7 >= 6)
      {
        uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "sub_layer_profile_present_flag", ((unint64_t)v5[64] >> v8) & 1);
        int v7 = dword_1EB671A40;
        if (dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "sub_layer_level_present_flag", ((unint64_t)v5[65] >> v8) & 1);
          int v7 = dword_1EB671A40;
        }
      }
      ++v8;
    }
    while (v6 != v8);
    int v9 = "    %-42s : %lld\n";
    for (uint64_t i = 1; i != v6; ++i)
    {
      if (v7 >= 6)
      {
        uint64_t result = fprintf(__stream, "    --- Sublayer %d ---\n", i);
        int v7 = dword_1EB671A40;
      }
      if (((1 << i) & v5[64]) == 0) {
        goto LABEL_64;
      }
      if (v7 >= 6)
      {
        uint64_t result = fprintf(__stream, v9, "profile_space", v5[i]);
        int v7 = dword_1EB671A40;
        if (dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, v9, "tier_flag", ((unint64_t)v5[7] >> i) & 1);
          int v7 = dword_1EB671A40;
          if (dword_1EB671A40 >= 6)
          {
            uint64_t result = fprintf(__stream, v9, "profile_idc", v5[i + 8]);
            int v7 = dword_1EB671A40;
          }
        }
      }
      uint64_t v11 = v9;
      uint64_t v12 = 0;
      int v13 = &v5[4 * i + 16];
      do
      {
        if (v7 >= 6)
        {
          uint64_t result = fprintf(__stream, "      %-40s : %lld\n", "profile_compatibility_flag", ((unint64_t)*(unsigned int *)v13 >> v12) & 1);
          int v7 = dword_1EB671A40;
        }
        ++v12;
      }
      while (v12 != 32);
      int v9 = v11;
      if (v7 > 5)
      {
        uint64_t result = fprintf(__stream, v11, "progressive_source_flag", ((unint64_t)v5[44] >> i) & 1);
        if (dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, v11, "interlaced_source_flag", ((unint64_t)v5[45] >> i) & 1);
          if (dword_1EB671A40 >= 6)
          {
            uint64_t result = fprintf(__stream, v11, "non_packed_constraint_flag", ((unint64_t)v5[46] >> i) & 1);
            if (dword_1EB671A40 >= 6) {
              uint64_t result = fprintf(__stream, v11, "frame_only_constraint_flag", ((unint64_t)v5[47] >> i) & 1);
            }
          }
        }
      }
      if (v5[i + 8] <= 3u)
      {
        int v7 = dword_1EB671A40;
        if ((*v13 & 0x10) == 0)
        {
          uint64_t v6 = (a2 + 1);
          goto LABEL_64;
        }
        uint64_t v6 = (a2 + 1);
        if (dword_1EB671A40 <= 5) {
          goto LABEL_64;
        }
      }
      else
      {
        int v7 = dword_1EB671A40;
        uint64_t v6 = (a2 + 1);
        if (dword_1EB671A40 < 6) {
          continue;
        }
      }
      uint64_t result = fprintf(__stream, v9, "general_max_12bit_constraint_flag", ((unint64_t)v5[48] >> i) & 1);
      int v7 = dword_1EB671A40;
      if (dword_1EB671A40 >= 6)
      {
        uint64_t result = fprintf(__stream, v9, "general_max_10bit_constraint_flag", ((unint64_t)v5[49] >> i) & 1);
        int v7 = dword_1EB671A40;
        if (dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, v9, "general_max_8bit_constraint_flag", ((unint64_t)v5[50] >> i) & 1);
          int v7 = dword_1EB671A40;
          if (dword_1EB671A40 >= 6)
          {
            uint64_t result = fprintf(__stream, v9, "general_max_422chroma_constraint_flag", ((unint64_t)v5[51] >> i) & 1);
            int v7 = dword_1EB671A40;
            if (dword_1EB671A40 >= 6)
            {
              uint64_t result = fprintf(__stream, v9, "general_max_420chroma_constraint_flag", ((unint64_t)v5[52] >> i) & 1);
              int v7 = dword_1EB671A40;
              if (dword_1EB671A40 >= 6)
              {
                uint64_t result = fprintf(__stream, v9, "general_max_monochrome_constraint_flag", ((unint64_t)v5[53] >> i) & 1);
                int v7 = dword_1EB671A40;
                if (dword_1EB671A40 >= 6)
                {
                  uint64_t result = fprintf(__stream, v9, "general_intra_constraint_flag", ((unint64_t)v5[54] >> i) & 1);
                  int v7 = dword_1EB671A40;
                  if (dword_1EB671A40 >= 6)
                  {
                    uint64_t result = fprintf(__stream, v9, "general_one_picture_only_constraint_flag", ((unint64_t)v5[55] >> i) & 1);
                    int v7 = dword_1EB671A40;
                    if (dword_1EB671A40 >= 6)
                    {
                      uint64_t result = fprintf(__stream, v9, "general_lower_bit_rate_constraint_flag", ((unint64_t)v5[56] >> i) & 1);
                      int v7 = dword_1EB671A40;
LABEL_64:
                      if (((1 << i) & v5[65]) != 0 && v7 >= 6)
                      {
                        uint64_t result = fprintf(__stream, v9, "level_idc", v5[i + 57]);
                        int v7 = dword_1EB671A40;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D0CE841C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a3)
  {
    LODWORD(v4) = a4;
    *(unsigned char *)a1 = sub_1D0C51880(a2, 1) != 0;
    int v7 = sub_1D0C51880(a2, 1);
    *(unsigned char *)(a1 + 1) = v7 != 0;
    if (*(unsigned char *)a1) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = v7 == 0;
    }
    if (!v8)
    {
      int v9 = sub_1D0C51880(a2, 1);
      *(unsigned char *)(a1 + 2) = v9 != 0;
      if (v9)
      {
        *(unsigned char *)(a1 + 3) = sub_1D0C51880(a2, 8);
        *(unsigned char *)(a1 + 4) = sub_1D0C51880(a2, 5);
        *(unsigned char *)(a1 + 5) = sub_1D0C51880(a2, 1) != 0;
        *(unsigned char *)(a1 + 6) = sub_1D0C51880(a2, 5);
      }
      *(unsigned char *)(a1 + 7) = sub_1D0C51880(a2, 4);
      *(unsigned char *)(a1 + 8) = sub_1D0C51880(a2, 4);
      if (*(unsigned char *)(a1 + 2)) {
        *(unsigned char *)(a1 + 9) = sub_1D0C51880(a2, 4);
      }
      *(unsigned char *)(a1 + 10) = sub_1D0C51880(a2, 5);
      *(unsigned char *)(a1 + 11) = sub_1D0C51880(a2, 5);
      *(unsigned char *)(a1 + 12) = sub_1D0C51880(a2, 5);
    }
    unsigned int v10 = (uint64_t *)(a1 + 16);
    uint64_t v4 = v4;
    sub_1D0CE875C((char **)(a1 + 16), v4);
    for (uint64_t i = 48; ; i += 56)
    {
      uint64_t v12 = *v10;
      uint64_t v13 = *v10 + i;
      *(unsigned char *)(v13 - 47) = 1;
      *(unsigned char *)(v13 - 44) = 0;
      *(_WORD *)(v13 - 42) = 0;
      int v14 = sub_1D0C51880(a2, 1);
      *(unsigned char *)(v13 - 48) = v14 != 0;
      if (v14)
      {
        int v15 = *(unsigned __int8 *)(v13 - 47);
      }
      else
      {
        int v15 = sub_1D0C51880(a2, 1) != 0;
        *(unsigned char *)(v13 - 47) = v15;
      }
      if (v15)
      {
        *(_WORD *)(v12 + i - 46) = sub_1D0C4C8F0(a2);
        if (*(unsigned char *)(v13 - 44)) {
          goto LABEL_17;
        }
      }
      else
      {
        BOOL v17 = sub_1D0C51880(a2, 1) != 0;
        *(unsigned char *)(v13 - 44) = v17;
        if (v17)
        {
LABEL_17:
          unsigned __int16 v16 = *(_WORD *)(v13 - 42);
          goto LABEL_20;
        }
      }
      unsigned __int16 v16 = sub_1D0C4C8F0(a2);
      *(_WORD *)(v13 - 42) = v16;
LABEL_20:
      if (v16 >= 0x20u)
      {
        if (dword_1EB671A40 < 3) {
          return 4294954387;
        }
        unsigned int v23 = "Invalid cpb_cnt_minus1\n";
        fwrite("Invalid cpb_cnt_minus1\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        uint64_t v22 = 4294954387;
LABEL_35:
        syslog(27, v23);
        return v22;
      }
      if (*(unsigned char *)a1)
      {
        sub_1D0CE89B0((char **)&v25, v16, a2, a1);
        uint64_t v18 = v12 + i;
        int v19 = *(void **)(v12 + i - 40);
        if (v19)
        {
          *(void *)(v18 - 32) = v19;
          operator delete(v19);
        }
        *(_OWORD *)(v18 - 40) = v25;
        *(void *)(v18 - 24) = v26;
      }
      if (*(unsigned char *)(a1 + 1))
      {
        uint64_t v20 = v12 + i;
        sub_1D0CE89B0((char **)&v25, *(_WORD *)(v12 + i - 42), a2, a1);
        int v21 = *(void **)(v12 + i - 16);
        if (v21)
        {
          *(void *)(v20 - 8) = v21;
          operator delete(v21);
        }
        *(_OWORD *)(v20 - 16) = v25;
        *(void *)(v12 + i) = v26;
      }
      if (!--v4) {
        return 0;
      }
    }
  }
  if (dword_1EB671A40 >= 3)
  {
    unsigned int v23 = "Need to implement inferrence of common HRD info\n";
    fwrite("Need to implement inferrence of common HRD info\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    uint64_t v22 = 4294954386;
    goto LABEL_35;
  }
  return 4294954386;
}

void sub_1D0CE875C(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 > v6)
  {
    BOOL v8 = a1[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v8 - v5) >> 3) >= v7)
    {
      unsigned int v24 = &v5[56 * v7];
      do
      {
        v5[4] = 0;
        *(_DWORD *)uint64_t v5 = 0;
        *(_OWORD *)(v5 + 6) = 0uLL;
        *(_OWORD *)(v5 + 22) = 0uLL;
        *(_OWORD *)(v5 + 38) = 0uLL;
        *((_WORD *)v5 + 27) = 0;
        v5 += 56;
      }
      while (v5 != v24);
      a1[1] = v24;
      return;
    }
    if (a2 > 0x492492492492492) {
      sub_1D0C8D71C();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 > 0x492492492492492) {
      sub_1D0C6AC2C();
    }
    uint64_t v12 = (char *)operator new(56 * v11);
    uint64_t v13 = &v12[56 * v6];
    int v14 = &v12[56 * a2];
    int v15 = v13;
    do
    {
      v15[4] = 0;
      *(_DWORD *)int v15 = 0;
      *(_OWORD *)(v15 + 6) = 0uLL;
      *(_OWORD *)(v15 + 22) = 0uLL;
      *(_OWORD *)(v15 + 38) = 0uLL;
      *((_WORD *)v15 + 27) = 0;
      v15 += 56;
    }
    while (v15 != v14);
    unsigned __int16 v16 = &v12[56 * v11];
    BOOL v17 = *a1;
    uint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v16;
      if (!v18) {
        return;
      }
    }
    else
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = &v13[v19];
        int v21 = &v18[v19];
        *((void *)v20 - 7) = *(void *)&v18[v19 - 56];
        *((void *)v20 - 6) = 0;
        *((void *)v20 - 5) = 0;
        *((void *)v20 - 4) = 0;
        *((_OWORD *)v20 - 3) = *(_OWORD *)&v18[v19 - 48];
        *((void *)v20 - 4) = *(void *)&v18[v19 - 32];
        *((void *)v21 - 6) = 0;
        *((void *)v21 - 5) = 0;
        *((void *)v21 - 4) = 0;
        *((void *)v20 - 3) = 0;
        *((void *)v20 - 2) = 0;
        *((void *)v20 - 1) = 0;
        *(_OWORD *)(v20 - 24) = *(_OWORD *)&v18[v19 - 24];
        *((void *)v20 - 1) = *(void *)&v18[v19 - 8];
        *((void *)v21 - 3) = 0;
        *((void *)v21 - 2) = 0;
        *((void *)v21 - 1) = 0;
        v19 -= 56;
      }
      while (&v18[v19] != v17);
      uint64_t v22 = *a1;
      uint64_t v18 = a1[1];
      *a1 = &v13[v19];
      a1[1] = v14;
      a1[2] = v16;
      if (v18 != v22)
      {
        do
        {
          v18 -= 56;
          sub_1D0C8D8BC(v18);
        }
        while (v18 != v22);
        uint64_t v18 = v22;
      }
      if (!v18) {
        return;
      }
    }
    operator delete(v18);
    return;
  }
  if (a2 < v6)
  {
    unsigned int v23 = &v4[56 * a2];
    while (v5 != v23)
    {
      v5 -= 56;
      sub_1D0C8D8BC(v5);
    }
    a1[1] = v23;
  }
}

uint64_t sub_1D0CE89B0(char **a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = a2 + 1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  BOOL v8 = (char *)sub_1D0CE8AAC(a2 + 1);
  *a1 = v8;
  a1[2] = &v8[20 * v9];
  size_t v10 = 20 * ((20 * (unint64_t)v7 - 20) / 0x14) + 20;
  bzero(v8, v10);
  unint64_t v11 = &v8[v10];
  a1[1] = v11;
  uint64_t v12 = v8 + 12;
  do
  {
    *((_DWORD *)v12 - 3) = sub_1D0C5108C(a3);
    uint64_t v13 = v12 - 12;
    *((_DWORD *)v12 - 2) = sub_1D0C5108C(a3);
    if (*(unsigned char *)(a4 + 2))
    {
      *((_DWORD *)v12 - 1) = sub_1D0C5108C(a3);
      *(_DWORD *)uint64_t v12 = sub_1D0C5108C(a3);
    }
    uint64_t result = sub_1D0C51880(a3, 1);
    v12[4] = result != 0;
    v12 += 20;
  }
  while (v13 + 20 != v11);
  return result;
}

void *sub_1D0CE8AAC(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_1D0C6AC2C();
  }
  return operator new(20 * a1);
}

uint64_t sub_1D0CE8AF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[1] - *a4) >> 2) != *(unsigned __int16 *)(a1 + 6) + 1) {
    return 1;
  }
  uint64_t v8 = 0;
  unint64_t v9 = -1;
  do
  {
    sub_1D0C97824(a2, *(_DWORD *)(*a4 + v8));
    sub_1D0C97824(a2, *(_DWORD *)(*a4 + v8 + 4));
    if (*(unsigned char *)(a3 + 2))
    {
      sub_1D0C97824(a2, *(_DWORD *)(*a4 + v8 + 8));
      sub_1D0C97824(a2, *(_DWORD *)(*a4 + v8 + 12));
    }
    sub_1D0C9775C(a2, *(unsigned __int8 *)(*a4 + v8 + 16), 1);
    ++v9;
    v8 += 20;
  }
  while (v9 < *(unsigned __int16 *)(a1 + 6));
  return 0;
}

void sub_1D0CE8BEC(char **a1, unint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unsigned __int16 v16 = &v3[8 * a2];
    goto LABEL_16;
  }
  unint64_t v6 = a2 - v5;
  unsigned int v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    unsigned __int16 v16 = &v4[8 * v6];
LABEL_16:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61) {
    sub_1D0C8D71C();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 61) {
    sub_1D0C6AC2C();
  }
  unint64_t v11 = (char *)operator new(8 * v10);
  uint64_t v12 = &v11[8 * v5];
  uint64_t v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  int v14 = &v12[8 * v6];
  while (v4 != v3)
  {
    uint64_t v15 = *((void *)v4 - 1);
    v4 -= 8;
    *((void *)v12 - 1) = v15;
    v12 -= 8;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

void sub_1D0CE8D08(char **a1, unint64_t a2)
{
  unint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      uint64_t v26 = &v4[40 * v7];
      uint64_t v27 = 40 * a2 - 8 * ((v4 - *a1) >> 3);
      int v28 = v4 + 16;
      do
      {
        *int v28 = 0;
        v28[1] = 0;
        _DWORD v28[2] = 0;
        *(v28 - 2) = 0;
        *(void *)((char *)v28 - 11) = 0;
        v28 += 5;
        v27 -= 40;
      }
      while (v27);
      a1[1] = v26;
      return;
    }
    if (a2 > 0x666666666666666) {
      sub_1D0C8D71C();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 > 0x666666666666666) {
      sub_1D0C6AC2C();
    }
    uint64_t v12 = (char *)operator new(40 * v11);
    uint64_t v13 = &v12[40 * v6];
    int v14 = &v12[40 * a2];
    uint64_t v15 = v13 + 16;
    uint64_t v16 = 40 * a2 - 40 * v6;
    do
    {
      *uint64_t v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      *(v15 - 2) = 0;
      *(void *)((char *)v15 - 11) = 0;
      v15 += 5;
      v16 -= 40;
    }
    while (v16);
    BOOL v17 = &v12[40 * v11];
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v17;
      if (!v18) {
        return;
      }
    }
    else
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 5);
        v18 -= 40;
        uint64_t v21 = *(void *)(v18 + 5);
        *((void *)v13 - 5) = v20;
        v13 -= 40;
        *(void *)(v13 + 5) = v21;
        *((void *)v13 + 3) = 0;
        *((void *)v13 + 4) = 0;
        *((void *)v13 + 2) = 0;
        *((_OWORD *)v13 + 1) = *((_OWORD *)v18 + 1);
        *((void *)v13 + 4) = *((void *)v18 + 4);
        *((void *)v18 + 2) = 0;
        *((void *)v18 + 3) = 0;
        *((void *)v18 + 4) = 0;
      }
      while (v18 != v19);
      uint64_t v22 = *a1;
      uint64_t v18 = a1[1];
      *a1 = v13;
      a1[1] = v14;
      a1[2] = v17;
      if (v18 != v22)
      {
        do
        {
          unsigned int v23 = v18 - 40;
          int v29 = (void **)(v18 - 24);
          sub_1D0C8D838(&v29);
          uint64_t v18 = v23;
        }
        while (v23 != v22);
        uint64_t v18 = v22;
      }
      if (!v18) {
        return;
      }
    }
    operator delete(v18);
    return;
  }
  if (a2 < v6)
  {
    unsigned int v24 = &v5[40 * a2];
    if (v4 != v24)
    {
      do
      {
        long long v25 = v4 - 40;
        int v29 = (void **)(v4 - 24);
        sub_1D0C8D838(&v29);
        uint64_t v4 = v25;
      }
      while (v25 != v24);
    }
    a1[1] = v24;
  }
}

uint64_t sub_1D0CE8F34(uint64_t a1, FILE *__stream)
{
  if (dword_1EB671A40 >= 6)
  {
    fprintf(__stream, "=========== Video Parameter Set ID: %d ===========\n", *(unsigned __int8 *)(a1 + 196));
    if (dword_1EB671A40 >= 6)
    {
      fprintf(__stream, "  %-44s : %lld\n", "vps_video_parameter_set_id", *(unsigned __int8 *)(a1 + 196));
      if (dword_1EB671A40 >= 6)
      {
        fprintf(__stream, "  %-44s : %lld\n", "vps_max_sub_layers_minus1", *(unsigned __int8 *)(a1 + 200));
        if (dword_1EB671A40 >= 6) {
          fprintf(__stream, "  %-44s : %lld\n", "vps_temporal_id_nesting_flag", *(unsigned __int8 *)(a1 + 201));
        }
      }
    }
  }
  uint64_t result = sub_1D0CE7B70(a1, *(unsigned __int8 *)(a1 + 200), __stream);
  int v6 = dword_1EB671A40;
  if (dword_1EB671A40 >= 6)
  {
    uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_sub_layer_ordering_info_present_flag", *(unsigned __int8 *)(a1 + 202));
    int v6 = dword_1EB671A40;
  }
  unsigned __int8 v7 = *(unsigned char *)(a1 + 200);
  if (*(unsigned char *)(a1 + 202)) {
    unsigned __int8 v7 = 0;
  }
  unint64_t v8 = v7;
  do
  {
    if (v6 >= 6)
    {
      uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "vps_max_dec_pic_buffering_minus1", *(unsigned __int8 *)(a1 + v8 + 203));
      int v6 = dword_1EB671A40;
      if (dword_1EB671A40 >= 6)
      {
        uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "vps_max_num_reorder_pics", *(unsigned __int8 *)(a1 + v8 + 210));
        int v6 = dword_1EB671A40;
        if (dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "vps_max_latency_increase_plus1", *(unsigned int *)(a1 + 4 * v8 + 220));
          int v6 = dword_1EB671A40;
        }
      }
    }
    BOOL v9 = v8++ >= *(unsigned __int8 *)(a1 + 200);
  }
  while (!v9);
  if (v6 >= 6)
  {
    uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_max_layer_id", *(unsigned __int8 *)(a1 + 248));
    int v6 = dword_1EB671A40;
    if (dword_1EB671A40 >= 6)
    {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_num_layer_sets_minus1", *(unsigned __int16 *)(a1 + 250));
      int v6 = dword_1EB671A40;
    }
  }
  if (*(_WORD *)(a1 + 250))
  {
    unint64_t v10 = 1;
    do
    {
      unint64_t v11 = -1;
      do
      {
        ++v11;
        if (v6 >= 6)
        {
          uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "layer_id_included_flag", (*(void *)(*(void *)(a1 + 256) + 8 * v10) >> v11) & 1);
          int v6 = dword_1EB671A40;
        }
      }
      while (v11 < *(unsigned __int8 *)(a1 + 248));
      BOOL v9 = v10++ >= *(unsigned __int16 *)(a1 + 250);
    }
    while (!v9);
  }
  if (!*(unsigned char *)(a1 + 280)) {
    goto LABEL_37;
  }
  if (v6 >= 6)
  {
    uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_num_units_in_tick", *(unsigned int *)(a1 + 284));
    if (dword_1EB671A40 >= 6)
    {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_time_scale", *(unsigned int *)(a1 + 288));
      if (dword_1EB671A40 >= 6)
      {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_poc_proportional_to_timing_flag", *(unsigned __int8 *)(a1 + 292));
        int v12 = dword_1EB671A40;
        if (*(unsigned char *)(a1 + 292) && dword_1EB671A40 >= 6)
        {
          uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_num_ticks_poc_diff_one_minus1", *(unsigned int *)(a1 + 296));
          int v12 = dword_1EB671A40;
        }
        if (v12 >= 6)
        {
          uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_num_hrd_parameters", *(unsigned __int16 *)(a1 + 300));
          int v6 = dword_1EB671A40;
LABEL_37:
          if (v6 >= 6) {
            uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_extension_flag", *(unsigned __int8 *)(a1 + 302));
          }
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 302))
  {
    int v13 = dword_1EB671A40;
    if (dword_1EB671A40 >= 6)
    {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "splitting_flag", *(unsigned __int8 *)(a1 + 304));
      int v13 = dword_1EB671A40;
      if (dword_1EB671A40 >= 6)
      {
        uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "scalability_mask_flag", *(unsigned __int16 *)(a1 + 306));
        int v13 = dword_1EB671A40;
      }
    }
    __int32 v14 = *(unsigned __int16 *)(a1 + 306);
    v5.i32[0] = v14;
    uint8x8_t v15 = (uint8x8_t)vcnt_s8(v5);
    v15.i16[0] = vaddlv_u8(v15);
    unsigned int v16 = v15.i32[0];
    int v17 = *(unsigned __int8 *)(a1 + 304);
    if (v15.i32[0] != v17)
    {
      unint64_t v18 = 0;
      uint64_t v19 = a1 + 324;
      do
      {
        if (v13 >= 6)
        {
          uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "dimension_id", v19);
          int v13 = dword_1EB671A40;
          int v17 = *(unsigned __int8 *)(a1 + 304);
        }
        ++v18;
        v19 += 16;
      }
      while (v18 < v16 - v17);
    }
    if (v13 > 5) {
      uint64_t result = fprintf(__stream, "  %-44s : %lld\n", "vps_nuh_layer_id_present_flag", *(unsigned __int8 *)(a1 + 356));
    }
    if (*(unsigned char *)(a1 + 199))
    {
      if (v16 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = v16;
      }
      uint64_t v28 = v20;
      int v21 = dword_1EB671A40;
      uint64_t v22 = (unsigned __int8 *)(a1 + 340);
      unint64_t v23 = 1;
      do
      {
        if (*(unsigned char *)(a1 + 356)) {
          BOOL v24 = v21 < 6;
        }
        else {
          BOOL v24 = 1;
        }
        if (!v24)
        {
          uint64_t result = fprintf(__stream, "    %-42s : %lld\n", "layer_id_in_nuh", a1 + 357);
          int v21 = dword_1EB671A40;
        }
        if (*(unsigned char *)(a1 + 304)) {
          BOOL v25 = 1;
        }
        else {
          BOOL v25 = v14 == 0;
        }
        if (!v25)
        {
          uint64_t v26 = v28;
          uint64_t v27 = v22;
          do
          {
            if (v21 >= 6)
            {
              uint64_t result = fprintf(__stream, "      %-40s : %lld\n", "dimension_id", *v27);
              int v21 = dword_1EB671A40;
            }
            ++v27;
            --v26;
          }
          while (v26);
        }
        v22 += 16;
        BOOL v9 = v23++ >= *(unsigned __int8 *)(a1 + 199);
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_1D0CE94AC(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 8);
  int v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    int v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    int v6 = &v2[v5 >> 7];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(void *)(a1 + 40) + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          sub_1D0C4C984(v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      int v2 = *(void ***)(a1 + 8);
      int v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = *(void ***)(a1 + 16);
      int v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 64;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 128;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      uint8x8_t v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1D0CE960C(void ***a1)
{
  unsigned int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_1D0CE98F4(--v4, 0);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_1D0CE9694(void *a1)
{
  *a1 = &unk_1F26F1290;
  uint64_t v2 = a1[972];
  a1[972] = 0;
  if (v2) {
    sub_1D0CE981C(v2);
  }
  return sub_1D0CC7710(a1);
}

void sub_1D0CE96F4(void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 32;
        uint64_t v7 = (void **)(v4 - 24);
        sub_1D0CE9790(&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D0CE9790(void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 41) < 0) {
          operator delete(*(v4 - 8));
        }
        v4 -= 9;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D0CE981C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0;
  if (v2) {
    MEMORY[0x1D25F01F0](v2, 0x1000C8052888210);
  }
  JUMPOUT(0x1D25F0230);
}

void sub_1D0CE9880(void *a1)
{
  *a1 = &unk_1F26F1290;
  uint64_t v2 = a1[972];
  a1[972] = 0;
  if (v2) {
    sub_1D0CE981C(v2);
  }
  sub_1D0CC7710(a1);
  JUMPOUT(0x1D25F0230);
}

void *sub_1D0CE98F4(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    int v3 = (std::__shared_weak_count *)v2[849];
    if (v3) {
      sub_1D0C4C984(v3);
    }
    uint64_t v4 = (void *)v2[845];
    if (v4)
    {
      v2[846] = v4;
      operator delete(v4);
    }
    unint64_t v5 = (void *)v2[804];
    if (v5)
    {
      int v6 = (void *)v2[805];
      uint64_t v7 = (void *)v2[804];
      if (v6 != v5)
      {
        do
        {
          uint64_t v9 = *--v6;
          uint64_t v8 = v9;
          void *v6 = 0;
          if (v9) {
            (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
          }
        }
        while (v6 != v5);
        uint64_t v7 = (void *)v2[804];
      }
      v2[805] = v5;
      operator delete(v7);
    }
    unint64_t v10 = (void *)v2[789];
    if (v10)
    {
      v2[790] = v10;
      operator delete(v10);
    }
    uint64_t v11 = (void *)v2[779];
    if (v11)
    {
      v2[780] = v11;
      operator delete(v11);
    }
    unint64_t v12 = (void *)v2[774];
    if (v12)
    {
      v2[775] = v12;
      operator delete(v12);
    }
    unint64_t v13 = (void *)v2[771];
    if (v13)
    {
      v2[772] = v13;
      operator delete(v13);
    }
    uint64_t v14 = (void *)v2[764];
    if (v14)
    {
      v2[765] = v14;
      operator delete(v14);
    }
    uint8x8_t v15 = (void *)v2[761];
    if (v15)
    {
      v2[762] = v15;
      operator delete(v15);
    }
    uint64_t v16 = (void *)v2[758];
    if (v16)
    {
      v2[759] = v16;
      operator delete(v16);
    }
    uint64_t v17 = (void *)v2[755];
    if (v17)
    {
      v2[756] = v17;
      operator delete(v17);
    }
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = (void *)v2[v18 + 752];
      if (v19)
      {
        v2[v18 + 753] = v19;
        operator delete(v19);
      }
      v18 -= 3;
      if (v18 == -6)
      {
        uint64_t v20 = 0;
        while (1)
        {
          int v21 = (void *)v2[v20 + 746];
          if (v21)
          {
            v2[v20 + 747] = v21;
            operator delete(v21);
          }
          v20 -= 3;
          if (v20 == -9)
          {
            uint64_t v22 = (void *)v2[737];
            if (v22)
            {
              v2[738] = v22;
              operator delete(v22);
            }
            unint64_t v23 = (void *)v2[734];
            if (v23)
            {
              v2[735] = v23;
              operator delete(v23);
            }
            BOOL v24 = (void *)v2[731];
            if (v24)
            {
              v2[732] = v24;
              operator delete(v24);
            }
            BOOL v25 = (void *)v2[728];
            if (v25)
            {
              v2[729] = v25;
              operator delete(v25);
            }
            uint64_t v26 = (void *)v2[725];
            if (v26)
            {
              v2[726] = v26;
              operator delete(v26);
            }
            uint64_t v27 = (void *)v2[722];
            if (v27)
            {
              v2[723] = v27;
              operator delete(v27);
            }
            uint64_t v28 = (void *)v2[719];
            if (v28)
            {
              v2[720] = v28;
              operator delete(v28);
            }
            int v29 = (void *)v2[716];
            if (v29)
            {
              v2[717] = v29;
              operator delete(v29);
            }
            int v30 = (void *)v2[712];
            if (v30)
            {
              v2[713] = v30;
              operator delete(v30);
            }
            int v31 = (void *)v2[709];
            if (v31)
            {
              v2[710] = v31;
              operator delete(v31);
            }
            int v32 = (void *)v2[706];
            if (v32)
            {
              v2[707] = v32;
              operator delete(v32);
            }
            unsigned int v33 = (void *)v2[697];
            if (v33)
            {
              v2[698] = v33;
              operator delete(v33);
            }
            double v34 = (void *)v2[694];
            if (v34)
            {
              v2[695] = v34;
              operator delete(v34);
            }
            int v35 = (void *)v2[688];
            if (v35)
            {
              v2[689] = v35;
              operator delete(v35);
            }
            unsigned int v36 = (void *)v2[685];
            if (v36)
            {
              v2[686] = v36;
              operator delete(v36);
            }
            int v37 = (void *)v2[682];
            if (v37)
            {
              v2[683] = v37;
              operator delete(v37);
            }
            size_t v38 = (void *)v2[679];
            if (v38)
            {
              v2[680] = v38;
              operator delete(v38);
            }
            unsigned int v39 = (void *)v2[676];
            if (v39)
            {
              v2[677] = v39;
              operator delete(v39);
            }
            uint64_t v64 = v2 + 672;
            sub_1D0CE9D84(&v64);
            double v40 = (void *)v2[615];
            if (v40)
            {
              v2[616] = v40;
              operator delete(v40);
            }
            unsigned int v41 = (void *)v2[612];
            if (v41)
            {
              v2[613] = v41;
              operator delete(v41);
            }
            uint64_t v42 = (void *)v2[609];
            if (v42)
            {
              v2[610] = v42;
              operator delete(v42);
            }
            uint64_t v43 = 544;
            while (1)
            {
              uint64_t v44 = (std::__shared_weak_count *)v2[v43];
              if (v44) {
                sub_1D0C4C984(v44);
              }
              v43 -= 2;
              if (v43 == 512)
              {
                while (1)
                {
                  unint64_t v45 = (std::__shared_weak_count *)v2[v43];
                  if (v45) {
                    sub_1D0C4C984(v45);
                  }
                  v43 -= 2;
                  if (v43 == 480)
                  {
                    while (1)
                    {
                      __int16 v46 = (std::__shared_weak_count *)v2[v43];
                      if (v46) {
                        sub_1D0C4C984(v46);
                      }
                      v43 -= 2;
                      if (v43 == 448)
                      {
                        while (1)
                        {
                          uint64_t v47 = (std::__shared_weak_count *)v2[v43];
                          if (v47) {
                            sub_1D0C4C984(v47);
                          }
                          v43 -= 2;
                          if (v43 == 416)
                          {
                            while (1)
                            {
                              uint64_t v48 = (std::__shared_weak_count *)v2[v43];
                              if (v48) {
                                sub_1D0C4C984(v48);
                              }
                              v43 -= 2;
                              if (v43 == 384)
                              {
                                uint64_t v49 = v2[381];
                                v2[381] = 0;
                                if (v49) {
                                  (*(void (**)(uint64_t))(*(void *)v49 + 16))(v49);
                                }
                                BOOL v50 = (std::__shared_weak_count *)v2[378];
                                if (v50) {
                                  sub_1D0C4C984(v50);
                                }
                                uint64_t v51 = (std::__shared_weak_count *)v2[374];
                                if (v51) {
                                  sub_1D0C4C984(v51);
                                }
                                unsigned int v52 = (void *)v2[316];
                                if (v52)
                                {
                                  v2[317] = v52;
                                  operator delete(v52);
                                }
                                BOOL v53 = (void *)v2[313];
                                if (v53)
                                {
                                  v2[314] = v53;
                                  operator delete(v53);
                                }
                                unsigned int v54 = (void *)v2[310];
                                if (v54)
                                {
                                  v2[311] = v54;
                                  operator delete(v54);
                                }
                                uint64_t v55 = 0;
                                while (1)
                                {
                                  unsigned int v56 = (void *)v2[v55 + 198];
                                  if (v56)
                                  {
                                    v2[v55 + 199] = v56;
                                    operator delete(v56);
                                  }
                                  v55 -= 3;
                                  if (v55 == -48)
                                  {
                                    unsigned int v57 = (void *)v2[128];
                                    if (v57)
                                    {
                                      v2[129] = v57;
                                      operator delete(v57);
                                    }
                                    int v58 = (void *)v2[103];
                                    if (v58)
                                    {
                                      v2[104] = v58;
                                      operator delete(v58);
                                    }
                                    int v59 = (std::__shared_weak_count *)v2[80];
                                    if (v59) {
                                      sub_1D0C4C984(v59);
                                    }
                                    int v60 = (std::__shared_weak_count *)v2[78];
                                    if (v60) {
                                      sub_1D0C4C984(v60);
                                    }
                                    sub_1D0CC70E8(v2 + 64);
                                    unsigned int v61 = (std::__shared_weak_count *)v2[8];
                                    if (v61) {
                                      sub_1D0C4C984(v61);
                                    }
                                    uint64_t v62 = (std::__shared_weak_count *)v2[6];
                                    if (v62) {
                                      sub_1D0C4C984(v62);
                                    }
                                    int v63 = (std::__shared_weak_count *)v2[4];
                                    if (v63) {
                                      sub_1D0C4C984(v63);
                                    }
                                    JUMPOUT(0x1D25F0230);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t **sub_1D0CE9D84(uint64_t **result)
{
  unsigned int v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    for (uint64_t i = v1[1]; i != v2; sub_1D0CE9E1C(i))
      i -= 13312;
    v1[1] = v2;
    JUMPOUT(0x1D25F0220);
  }
  return result;
}

void sub_1D0CE9E1C(uint64_t a1)
{
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    int v3 = *(void **)(a1 + i + 12920);
    if (v3)
    {
      *(void *)(a1 + i + 12928) = v3;
      operator delete(v3);
    }
  }
  uint64_t v4 = *(void **)(a1 + 12872);
  if (v4)
  {
    *(void *)(a1 + 12880) = v4;
    operator delete(v4);
  }
}

void sub_1D0CE9E88(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 9961);
  int v3 = (std::mutex *)(a1 + 10808);
  std::mutex::lock((std::mutex *)(a1 + 10808));
  while (*(void *)(a1 + 10912))
  {
    if (sub_1D0CE9F8C(a1)) {
      goto LABEL_16;
    }
  }
  int v4 = *v2;
  if (*v2)
  {
    while (v4 >= 1)
    {
      sub_1D0CEACC4(a1);
      int v4 = *v2;
    }
    *uint64_t v2 = 0;
    *((_WORD *)v2 + 1) = 0;
  }
  if (*(void *)(a1 + 9824))
  {
    if (*(int *)(a1 + 9816) >= 1)
    {
      int v5 = 0;
      do
      {
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 9824), 0xFFFFFFFFFFFFFFFFLL);
        ++v5;
        int v6 = *(_DWORD *)(a1 + 9816);
      }
      while (v5 < v6);
      if (v6 >= 1)
      {
        int v7 = 0;
        do
        {
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 9824));
          ++v7;
        }
        while (v7 < *(_DWORD *)(a1 + 9816));
      }
    }
  }
LABEL_16:
  std::mutex::unlock(v3);
}

void sub_1D0CE9F74(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0CE9F8C(uint64_t a1)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(a1 + 10904);
  uint64_t v3 = *(void *)(*(void *)(a1 + 10880) + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8));
  uint64_t v4 = v2 & 0x7F;
  int v5 = (uint64_t *)(v3 + 32 * v4);
  uint64_t v7 = *v5;
  int v6 = (std::__shared_weak_count *)v5[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v5[2];
    uint64_t v9 = v5[3];
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v2 = *(void *)(a1 + 10904);
    uint64_t v4 = v2 & 0x7F;
    uint64_t v3 = *(void *)(*(void *)(a1 + 10880) + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8));
    unint64_t v10 = v6;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v8 = v5[2];
    uint64_t v9 = v5[3];
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v3 + 32 * v4 + 8);
  if (v11)
  {
    sub_1D0C4C984(v11);
    unint64_t v2 = *(void *)(a1 + 10904);
  }
  --*(void *)(a1 + 10912);
  unint64_t v12 = v2 + 1;
  *(void *)(a1 + 10904) = v12;
  if (v12 >= 0x100)
  {
    operator delete(**(void ***)(a1 + 10880));
    *(void *)(a1 + 10880) += 8;
    *(void *)(a1 + 10904) -= 128;
  }
  if (!v7) {
    goto LABEL_140;
  }
  char v13 = *(unsigned char *)(v9 + 60);
  if (v13)
  {
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 + 64);
    *(_DWORD *)(a1 + 9948) = 0;
    *(_DWORD *)(a1 + 9952) = 0;
    char v13 = 1;
    int v14 = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 9952) = 0;
    int v14 = *(_DWORD *)(a1 + 608) << *(unsigned char *)(a1 + 536);
  }
  *(unsigned char *)(a1 + 9944) = v13;
  *(_DWORD *)(a1 + 9956) = v14;
  if (v14 <= *(char *)(a1 + 9961))
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Frame %d: Gop-structure errors\n", *(_DWORD *)(v7 + 8));
      syslog(27, "Frame %d: Gop-structure errors\n", *(_DWORD *)(v7 + 8));
    }
    goto LABEL_27;
  }
  if (!*(unsigned char *)(v9 + 96) || (char v15 = *(unsigned char *)(v9 + 97)) != 0) {
    char v15 = 1;
  }
  *(unsigned char *)(v7 + 40) = v15;
  *(void *)(v7 + 536) = v8;
  if (!*(unsigned char *)(v9 + 708))
  {
    if (!*(void *)sub_1D0C9A200(a1 + 9968, 2u))
    {
      int v16 = *(_DWORD *)(v9 + 340);
      if (v16 >= 0x10000)
      {
        signed int v17 = HIWORD(v16);
        if (v17 <= *(_DWORD *)(a1 + 10424)) {
          signed int v17 = *(_DWORD *)(a1 + 10424);
        }
        *(_DWORD *)(a1 + 10424) = v17;
      }
    }
    if (!*(unsigned char *)(a1 + 585)) {
      goto LABEL_55;
    }
    unsigned int v18 = *(_DWORD *)(v9 + 272);
    if (v18 < 0x11)
    {
      if (!v18)
      {
LABEL_42:
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA6433C0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EA6433C0))
        {
          __cxa_atexit((void (*)(void *))sub_1D0C99904, &unk_1EA6433B0, &dword_1D0C3F000);
          __cxa_guard_release(&qword_1EA6433C0);
        }
        uint64_t v31 = 0;
        int v32 = (uint64_t *)(a1 + 10000);
        int v33 = 0x7FFFFFFF;
        int v34 = 0x7FFFFFFF;
        do
        {
          uint64_t v35 = *v32;
          if (*v32 && *(_DWORD *)(v35 + 1024) < v34 && *(_DWORD *)(v35 + 36) == 1)
          {
            int v34 = *(_DWORD *)(v35 + 1024);
            int v33 = v31;
          }
          ++v31;
          v32 += 2;
        }
        while (v31 != 17);
        if (v33 == 0x7FFFFFFF) {
          unsigned int v36 = (uint64_t *)&unk_1EA6433B0;
        }
        else {
          unsigned int v36 = (uint64_t *)(a1 + 16 * v33 + 10000);
        }
        uint64_t v37 = *v36;
        if (v37
          && (int)(float)((float)((float)((float)*(uint64_t *)(v7 + 16) * 1000.0) / (float)*(int *)(v7 + 32))
                        - (float)((float)((float)*(uint64_t *)(v37 + 16) * 1000.0) / (float)*(int *)(v37 + 32))) > 2 * *(_DWORD *)(a1 + 10424))
        {
          *(_DWORD *)(v37 + 36) = 0;
        }
LABEL_55:
        *(unsigned char *)(v9 + 266) |= *(unsigned char *)(a1 + 10432);
        *(_DWORD *)(v9 + 40) |= *(unsigned __int8 *)(a1 + 10433);
        *(int32x2_t *)(v9 + 356) = vadd_s32(*(int32x2_t *)(v9 + 356), *(int32x2_t *)(a1 + 10436));
        goto LABEL_56;
      }
    }
    else
    {
      *(_DWORD *)(v9 + 272) = 16;
    }
    unint64_t v20 = 0;
    uint64_t v21 = a1 + 10000;
    uint64_t v22 = (__guard *)&unk_1EA643390;
    unint64_t v23 = 0x1EA643000uLL;
    do
    {
      int v24 = *(_DWORD *)(v9 + 4 * v20 + 276);
      if ((atomic_load_explicit((atomic_uchar *volatile)v22, memory_order_acquire) & 1) == 0)
      {
        uint64_t v28 = v22;
        unint64_t v98 = v20;
        uint64_t v29 = v21;
        int v99 = v24;
        int v30 = __cxa_guard_acquire(v22);
        int v24 = v99;
        unint64_t v23 = 0x1EA643000;
        uint64_t v21 = v29;
        unint64_t v20 = v98;
        uint64_t v22 = v28;
        if (v30)
        {
          __cxa_atexit((void (*)(void *))sub_1D0C99904, &qword_1EA643380, &dword_1D0C3F000);
          __cxa_guard_release(v28);
          int v24 = v99;
          unint64_t v23 = 0x1EA643000;
          uint64_t v21 = v29;
          unint64_t v20 = v98;
          uint64_t v22 = v28;
        }
      }
      uint64_t v25 = 0;
      while (1)
      {
        uint64_t v26 = *(void *)(v21 + v25);
        if (v26)
        {
          if (*(_DWORD *)(v26 + 8) == v24) {
            break;
          }
        }
        v25 += 16;
        if (v25 == 272)
        {
          uint64_t v26 = *(void *)(v23 + 896);
          if (!v26) {
            goto LABEL_38;
          }
          break;
        }
      }
      *(_DWORD *)(v26 + 36) = 2;
      unint64_t v27 = 1717986919
          * (9 * *(_DWORD *)(a1 + 10424)
           + (int)(float)((float)((float)((float)*(uint64_t *)(v7 + 16) * 1000.0) / (float)*(int *)(v7 + 32))
                        - (float)((float)((float)*(uint64_t *)(v26 + 16) * 1000.0) / (float)*(int *)(v26 + 32))));
      *(_DWORD *)(a1 + 10424) = (v27 >> 63) + (SHIDWORD(v27) >> 2);
LABEL_38:
      ++v20;
    }
    while (v20 < *(unsigned int *)(v9 + 272));
    goto LABEL_42;
  }
LABEL_56:
  if (*(void *)(a1 + 720))
  {
    size_t v38 = *(FILE **)(a1 + 184);
    if (v38 || (size_t v38 = fopen(*(const char **)(a1 + 720), "r"), (*(void *)(a1 + 184) = v38) != 0))
    {
      int v100 = 0;
      v101[0] = 0;
      fscanf(v38, "ISP: framenum= %d capture_timestamp= %lf T= %lf AGC= %d sensorDGain= %d ispDGain= %d ", &v100, v101, v9 + 632, v9 + 640, v9 + 644, v9 + 648);
      fscanf(*(FILE **)(a1 + 184), "AEAverage= %d AWBRGain= %d AWBGGain= %d AWBBGain= %d normalSNR= %lf\n", v9 + 652, v9 + 656, v9 + 660, v9 + 664, v9 + 672);
    }
  }
  if (*(void *)(a1 + 728))
  {
    unsigned int v39 = *(FILE **)(a1 + 184);
    if (v39 || (unsigned int v39 = fopen(*(const char **)(a1 + 728), "r"), (*(void *)(a1 + 184) = v39) != 0))
    {
      int v100 = 0;
      v101[0] = 0;
      fscanf(v39, "Face: framenum= %d capture_timestamp= %lf x= %f y= %f w= %f h= %f, ", &v100, v101, v9 + 416, v9 + 420, v9 + 424, v9 + 428);
      fscanf(*(FILE **)(a1 + 184), "face_roll= %d, face_yaw= %d\n", v9 + 432, v9 + 436);
      BOOL v40 = *(float *)(v9 + 424) != 0.0 && *(float *)(v9 + 428) != 0.0;
      *(_DWORD *)(v9 + 552) = v40;
    }
  }
  int v41 = *(_DWORD *)(v7 + 8);
  if (!v41) {
    *(unsigned char *)(v7 + 1172) = 1;
  }
  int v42 = *(_DWORD *)(a1 + 876);
  if (v42 >= 1) {
    --*(_DWORD *)(a1 + 232);
  }
  float v43 = *(float *)(a1 + 880);
  if (v43 <= 0.0)
  {
    float v45 = 0.0;
    float v46 = -0.0;
    if (!v41) {
      goto LABEL_85;
    }
    goto LABEL_77;
  }
  int v44 = *(_DWORD *)(v7 + 32);
  if (!v44)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Invalid timescale\n", 0x12uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Invalid timescale\n");
    }
LABEL_27:
    uint64_t v19 = 4294954394;
LABEL_28:
    sub_1D0CEDF7C(a1, v19, 0, v8);
    goto LABEL_149;
  }
  float v45 = (float)*(uint64_t *)(v7 + 24) / (float)v44;
  *(float *)(a1 + 236) = *(float *)(a1 + 236) - v45;
  float v46 = v45 * -0.0001;
  if (!v41) {
    goto LABEL_85;
  }
LABEL_77:
  if ((v42 < 1 || (*(_DWORD *)(a1 + 232) & 0x80000000) == 0) && (v43 <= 0.0 || *(float *)(a1 + 236) >= v46))
  {
    if (!*(unsigned char *)(a1 + 884) || !*(unsigned char *)(v7 + 1172)) {
      goto LABEL_86;
    }
    if (dword_1EB671A40 >= 7)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "\nscene change IDR inserted, frame %3d\n", v41);
      syslog(31, "\nscene change IDR inserted, frame %3d\n", *(_DWORD *)(v7 + 8));
    }
  }
LABEL_85:
  *(_DWORD *)(v9 + 40) = 1;
LABEL_86:
  if (*(_DWORD *)(v9 + 40))
  {
    int v47 = *(_DWORD *)(a1 + 876);
    BOOL v48 = __OFSUB__(v47, 1);
    int v49 = v47 - 1;
    if (v49 < 0 == v48) {
      *(_DWORD *)(a1 + 232) = v49;
    }
    float v50 = *(float *)(a1 + 880);
    if (v50 > 0.0) {
      *(float *)(a1 + 236) = v50 - v45;
    }
    if (*(unsigned char *)(a1 + 9961))
    {
      if (!*(unsigned char *)(a1 + 536))
      {
        int v71 = sub_1D0CEACC4(a1);
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 9961) = 0;
        if (v71) {
          goto LABEL_28;
        }
      }
    }
  }
  uint64_t v51 = *(void *)(*(void *)(a1 + 9920) + 8 * *(char *)(a1 + 9964));
  uint64_t v52 = *(void *)(v51 + 576);
  atomic_store(1u, (unsigned int *)(v51 + 588));
  *(_DWORD *)(v51 + 652) = *(_DWORD *)(v7 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v51 + 616) = v7;
  BOOL v53 = *(std::__shared_weak_count **)(v51 + 624);
  *(void *)(v51 + 624) = v10;
  if (v53) {
    sub_1D0C4C984(v53);
  }
  *(unsigned char *)uint64_t v51 = 0;
  *(void *)(v51 + 128) = 0;
  *(void *)(v51 + 136) = *(int *)(v9 + 364);
  *(void *)(v51 + 144) = *(int *)(v9 + 56);
  *(unsigned char *)(v51 + 6457) = 0;
  if (*(unsigned char *)(v9 + 98)) {
    BOOL v54 = 1;
  }
  else {
    BOOL v54 = *(unsigned char *)(v52 + 451) != 0;
  }
  *(unsigned char *)(v51 + 216) = v54;
  *(_WORD *)(v51 + 660) = *(_DWORD *)(v9 + 196);
  *(unsigned char *)(v51 + 464) = *(unsigned char *)(v9 + 99);
  *(_DWORD *)(v51 + 668) = *(_DWORD *)(v9 + 200);
  if (*(unsigned char *)(v9 + 708))
  {
    char v55 = 0;
    BOOL v56 = 0;
  }
  else
  {
    char v55 = *(unsigned char *)(v9 + 266);
    BOOL v56 = *(_DWORD *)(v9 + 40) != 0;
  }
  *(unsigned char *)(v51 + 6752) = v55;
  *(unsigned char *)(v51 + 6753) = v56;
  if (!*(unsigned char *)(*(void *)(v51 + 40) + *(unsigned __int8 *)(*(void *)(v51 + 40) + 1) + 226)) {
    *(unsigned char *)(v51 + 6753) = 1;
  }
  *(unsigned char *)(v51 + 6472) = *(unsigned char *)(v9 + 48);
  *(float *)(v51 + 6476) = (float)*(int *)(v9 + 52);
  *(void *)(v51 + 496) = *(void *)(v9 + 168);
  *(_DWORD *)(v51 + 504) = *(_DWORD *)(v9 + 176);
  *(_DWORD *)(v51 + 508) = *(_DWORD *)(v9 + 192);
  uint64_t v57 = *(void *)(v9 + 152);
  if (!v57) {
    goto LABEL_108;
  }
  if (v57 != v9 + 128)
  {
    uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 16))(v57);
LABEL_108:
    uint64_t v102 = (void *)v57;
    goto LABEL_112;
  }
  uint64_t v102 = v101;
  (*(void (**)(uint64_t, void *))(*(void *)v57 + 24))(v57, v101);
LABEL_112:
  sub_1D0CC71CC(v101, (void *)(v51 + 512));
  sub_1D0CC70E8(v101);
  uint64_t v58 = *(void *)(v51 + 576);
  if (*(unsigned char *)(v58 + 753)) {
    BOOL v59 = *(unsigned char *)(v9 + 100) != 0;
  }
  else {
    BOOL v59 = 0;
  }
  int v60 = 0;
  int v61 = 0;
  *(unsigned char *)(v51 + 465) = v59;
  *(void *)(v51 + 468) = *(void *)(v9 + 104);
  *(void *)(v51 + 480) = *(void *)(v9 + 112);
  *(unsigned char *)(v51 + 6456) = 0;
  *(void *)(v51 + 6492) = 0x2000000000000000;
  if (!*(unsigned char *)(v9 + 708))
  {
    int v60 = *(_DWORD *)(v9 + 356);
    int v61 = *(_DWORD *)(v9 + 360);
    *(_DWORD *)(v51 + 6480) = *(_DWORD *)(v9 + 4);
    float v62 = *(double *)(v9 + 32);
    *(float *)(v51 + 6488) = v62;
  }
  *(_DWORD *)(v51 + 6500) = v60;
  *(_DWORD *)(v51 + 6504) = v61;
  *(_DWORD *)(v51 + 6508) = *(_DWORD *)(v9 + 552);
  long long v63 = *(_OWORD *)(v9 + 492);
  long long v64 = *(_OWORD *)(v9 + 508);
  long long v65 = *(_OWORD *)(v9 + 524);
  *(_OWORD *)(v51 + 6636) = *(_OWORD *)(v9 + 536);
  long long v66 = *(_OWORD *)(v9 + 428);
  long long v67 = *(_OWORD *)(v9 + 444);
  long long v68 = *(_OWORD *)(v9 + 460);
  *(_OWORD *)(v51 + 6576) = *(_OWORD *)(v9 + 476);
  *(_OWORD *)(v51 + 6560) = v68;
  *(_OWORD *)(v51 + 6544) = v67;
  *(_OWORD *)(v51 + 6528) = v66;
  *(_OWORD *)(v51 + 6624) = v65;
  *(_OWORD *)(v51 + 6608) = v64;
  *(_OWORD *)(v51 + 6592) = v63;
  *(_OWORD *)(v51 + 6512) = *(_OWORD *)(v9 + 412);
  *(_DWORD *)(v51 + 6652) = *(_DWORD *)(v9 + 608);
  if (!*(_DWORD *)(v7 + 32))
  {
    uint64_t v69 = *(void *)(v51 + 6464);
    if (v69 && !*(unsigned char *)(v69 + 1776)) {
      unsigned int v70 = (double *)(v69 + 520);
    }
    else {
      unsigned int v70 = (double *)(v58 + 472);
    }
    double v72 = 3000.0 / *v70;
    *(void *)&long long v65 = 0.5;
    int v73 = (int)(*v70 * (double)(uint64_t)(v72 + 0.5) + 0.5);
    int v74 = *(_DWORD *)(v7 + 8);
    uint64_t v75 = (uint64_t)(v72 * (double)v74);
    *(void *)(v7 + 16) = v75;
    *(void *)(v7 + 24) = (uint64_t)(v72 * (double)(v74 + 1)) - v75;
    *(_DWORD *)(v7 + 32) = v73;
  }
  uint64_t v76 = *(void *)(v51 + 616);
  float v77 = *(double *)(v9 + 632);
  *(float *)(v76 + 192) = v77;
  unsigned int v78 = *(_DWORD *)(v9 + 640);
  *(_DWORD *)(v76 + 200) = v78;
  *(void *)(v76 + 220) = *(void *)(v9 + 660);
  float v79 = *(double *)(v9 + 672);
  *(float *)(v76 + 196) = v79;
  long long v80 = *(_OWORD *)(v9 + 644);
  *(_OWORD *)(v76 + 204) = v80;
  *(float *)&long long v65 = (float)DWORD1(v80);
  *(float *)&long long v80 = (float)v80;
  *(float *)(v76 + 228) = (float)((float)(v77 * (float)v78) * (float)DWORD1(v80)) * *(float *)&v80;
  long long v81 = *(_OWORD *)(v9 + 368);
  *(_OWORD *)(*(void *)(v51 + 16) + 20) = v81;
  if (*(unsigned char *)(v9 + 68)) {
    *(_DWORD *)(v51 + 656) = *(_DWORD *)(v9 + 72);
  }
  int v82 = *(unsigned __int8 *)(v9 + 76);
  *(unsigned char *)(v51 + 246) = v82;
  if (v82)
  {
    int v83 = *(long long **)(v9 + 80);
    if (v83)
    {
      long long v81 = *v83;
      *(void *)(v51 + 238) = *(void *)((char *)v83 + 14);
      *(_OWORD *)(v51 + 224) = v81;
    }
  }
  *(void *)(v51 + 456) = 0;
  if (!*(_DWORD *)(a1 + 456) && dword_1EB671A40 >= 7)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "=== hooked up frame %d at index %d ===\n", *(_DWORD *)(v7 + 8), *(char *)(a1 + 9961));
    syslog(31, "=== hooked up frame %d at index %d ===\n", *(_DWORD *)(v7 + 8), *(char *)(a1 + 9961));
  }
  uint64_t v84 = *(void *)(*(void *)(a1 + 9920) + 8 * *(char *)(a1 + 9964));
  int v85 = *(FILE **)(*(void *)(v84 + 576) + 256);
  if (v85) {
    sub_1D0C8E29C(*(void *)(v84 + 616), v85, 0, 0);
  }
  char v86 = *(unsigned char *)(a1 + 9964);
  char v87 = *(unsigned char *)(a1 + 9961) + 1;
  *(unsigned char *)(a1 + 9961) = v87;
  int v88 = *(_DWORD *)(a1 + 9956);
  *(unsigned char *)(a1 + 9964) = (v86 + 1) % v88;
  int v89 = *(_DWORD *)(v7 + 8);
  int v90 = *(_DWORD *)(v9 + 40);
  if (!v89)
  {
    if (!v90) {
      goto LABEL_143;
    }
LABEL_142:
    *(_DWORD *)(a1 + 9948) = v89;
    goto LABEL_143;
  }
  if (v90) {
    goto LABEL_142;
  }
  if (v88 != v87 && (!*(unsigned char *)(v9 + 708) || v89 != *(_DWORD *)(a1 + 512) - 1))
  {
LABEL_140:
    uint64_t v19 = 0;
    goto LABEL_149;
  }
LABEL_143:
  int v91 = v87;
  int v92 = *(_DWORD *)(a1 + 4 * *(int *)(a1 + 9952) + 608);
  int v93 = v91 - v92;
  if (v93 < 1 || (int v94 = v93 & ~(v93 >> 31), v94 >= v92))
  {
LABEL_148:
    uint64_t v19 = sub_1D0CEACC4(a1);
  }
  else
  {
    LOBYTE(v95) = *(unsigned char *)(a1 + 9963);
    int v96 = v94 + 1;
    while (1)
    {
      *(unsigned char *)(a1 + 9962) = v95;
      uint64_t v19 = sub_1D0CEAE2C(a1, 0, 0, 1, *(double *)&v81, *(double *)&v80, *(double *)&v65);
      int v95 = (*(char *)(a1 + 9963) + 1) % *(_DWORD *)(a1 + 9956);
      *(unsigned char *)(a1 + 9963) = v95;
      --*(unsigned char *)(a1 + 9961);
      if (v19) {
        break;
      }
      if (--v96 < 2) {
        goto LABEL_148;
      }
    }
  }
LABEL_149:
  if (v10) {
    sub_1D0C4C984(v10);
  }
  if (v6) {
    sub_1D0C4C984(v6);
  }
  return v19;
}

void sub_1D0CEAC8C(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_1D0C4C984(v2);
  }
  if (v1) {
    sub_1D0C4C984(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D0CEACC4(uint64_t a1)
{
  unint64_t v2 = (char *)(a1 + 9961);
  int v3 = *(_DWORD *)(a1 + 9952);
  if (v3 < 1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    LODWORD(v4) = 0;
    int v5 = (int *)(a1 + 608);
    uint64_t v6 = *(unsigned int *)(a1 + 9952);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v4 = v7 + (int)v4;
      --v6;
    }
    while (v6);
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 4 * v3 + 608);
  double v9 = log2((double)(int)v8);
  if ((int)v9 <= 1) {
    int v12 = 1;
  }
  else {
    int v12 = (int)v9;
  }
  if ((int)v8 < 1)
  {
    uint64_t result = 0;
    int v14 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = 0;
    uint64_t v15 = 108 * v4 + 959;
    do
    {
      int v16 = *(unsigned __int8 *)(a1 + v15);
      if (v16 <= *v2)
      {
        if (*v2 == 1) {
          LOBYTE(v17) = v2[2];
        }
        else {
          int v17 = ((v16 - 1) % (int)v8 + v2[2]) % *(_DWORD *)(a1 + 9956);
        }
        v2[1] = v17;
        ++v14;
        uint64_t result = sub_1D0CEAE2C(a1, (int)v4 + (int)v13, v3, v12, v9, v10, v11);
        if (result) {
          goto LABEL_20;
        }
        int v3 = *(_DWORD *)(a1 + 9952);
      }
      ++v13;
      uint64_t v8 = *(int *)(a1 + 4 * v3 + 608);
      v15 += 108;
    }
    while (v13 < v8);
    uint64_t result = 0;
  }
LABEL_20:
  *v2 -= v14;
  v2[2] = (v14 + v2[2]) % *(_DWORD *)(a1 + 9956);
  return result;
}

uint64_t sub_1D0CEAE2C(uint64_t a1, int a2, int a3, int a4, double a5, double a6, double a7)
{
  uint64_t v10 = a1;
  uint64_t v479 = *MEMORY[0x1E4F143B8];
  double v11 = (unsigned char *)(a1 + 9944);
  uint64_t v12 = *(char *)(a1 + 9962);
  char v13 = *(unsigned char *)(a1 + 9962);
  uint64_t v14 = *(void *)(a1 + 9920);
  uint64_t v15 = *(void *)(a1 + 10400);
  if (!v15) {
    goto LABEL_26;
  }
  uint64_t v16 = *(void *)(v14 + 8 * v12);
  if (!v16) {
    goto LABEL_26;
  }
  if (*(_DWORD *)(v15 + 1752) != 1) {
    goto LABEL_20;
  }
  int v17 = *(_DWORD *)(v16 + 6652);
  if (*(int *)(v16 + 6508) <= 0) {
    int v18 = *(_DWORD *)(v15 + 1680) + 1;
  }
  else {
    int v18 = 0;
  }
  *(_DWORD *)(v15 + 1680) = v18;
  if (v17 != *(_DWORD *)(v15 + 40))
  {
    int v21 = *(_DWORD *)(v15 + 1660);
    unsigned int v22 = v21 & 0xFFFFFFFE;
    if (v17)
    {
      if (v22 != 2) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v22 != 4)
      {
LABEL_19:
        *(_DWORD *)(v15 + 40) = v17;
        goto LABEL_20;
      }
      unsigned int v22 = -2;
    }
    sub_1D0D3A6A8(v15, v21 + v22);
    goto LABEL_19;
  }
  if (v17) {
    goto LABEL_20;
  }
  if (v18)
  {
    if (v18 < 16) {
      goto LABEL_20;
    }
    int v19 = *(_DWORD *)(v15 + 1660);
    if ((v19 & 0xFFFFFFFE) != 2) {
      goto LABEL_20;
    }
    int v20 = v19 + 2;
  }
  else
  {
    int v164 = *(_DWORD *)(v15 + 1660);
    if ((v164 & 0xFFFFFFFE) != 4) {
      goto LABEL_20;
    }
    int v20 = v164 - 2;
  }
  sub_1D0D3A6A8(v15, v20);
LABEL_20:
  uint64_t v23 = *(int *)(v15 + 1608);
  int v24 = *(_DWORD *)(v15 + 1648);
  if ((int)v23 >= 1)
  {
    if (*(unsigned char *)(v15 + 1749))
    {
      if (v24 % *((__int16 *)&unk_1D0DA5488 + 2 * v23 + 1) < *((__int16 *)&unk_1D0DA5488 + 2 * v23 + 1)
                                                            - *((__int16 *)&unk_1D0DA5488 + 2 * v23))
      {
        **(unsigned char **)(v14 + 8 * v12) = 1;
        if (dword_1EB671A40 >= 7)
        {
          fwrite("Dropped before encoding.\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(31, "Dropped before encoding.\n");
          int v24 = *(_DWORD *)(v15 + 1648);
        }
      }
    }
  }
  *(_DWORD *)(v15 + 1648) = v24 + 1;
  uint64_t v12 = (char)v11[18];
  char v13 = v11[18];
  uint64_t v14 = *(void *)(v10 + 9920);
LABEL_26:
  v456 = v11;
  uint64_t v25 = *(void *)(v14 + 8 * v12);
  uint64_t v26 = (unsigned char *)(v25 + 6472);
  if (*v11)
  {
    uint64_t v27 = *(void *)(v25 + 576);
    if (*(_DWORD *)(v25 + 652) && !*(unsigned char *)(v25 + 6753))
    {
      *(unsigned char *)(v25 + 648) = 5;
      *(void *)(v25 + 684) = 0x400000004;
      if (*v26)
      {
LABEL_51:
        *(_DWORD *)(v25 + 692) = -1;
        *(unsigned char *)(v25 + 756) = 1;
        float v45 = (unsigned char *)(v25 + 676);
LABEL_91:
        *float v45 = 0;
        sub_1D0CF9980(v25);
        goto LABEL_92;
      }
      int v32 = (char *)(v27 + 489);
    }
    else
    {
      *(unsigned char *)(v25 + 648) = 0;
      *(void *)(v25 + 684) = 0;
      if (*(unsigned char *)(v27 + 584))
      {
        unint64_t v28 = 0;
        uint64_t v29 = (uint64_t *)(v27 + 10000);
        BOOL v30 = 1;
        do
        {
          uint64_t v31 = *v29;
          if (*v29 && *(int *)(v31 + 1024) >= 1 && *(int *)(v31 + 12) < 1) {
            break;
          }
          BOOL v30 = v28 < 0x10;
          v29 += 2;
          ++v28;
        }
        while (v28 != 17);
        if (v30 && !*(unsigned char *)(v25 + 464)) {
          *(void *)(v25 + 684) = 0x400000004;
        }
      }
      if (*v26) {
        goto LABEL_51;
      }
      int v32 = (char *)(v27 + 488);
    }
    *(float *)(v25 + 6476) = (float)*v32;
    goto LABEL_51;
  }
  int v33 = *(_DWORD *)(v10 + 9948);
  *(unsigned char *)(v25 + 676) = 0;
  *(_DWORD *)(v25 + 672) = a2;
  uint64_t v34 = *(void *)(v25 + 576);
  int v35 = *(_DWORD *)(v34 + 7872);
  if (a3 >= 1)
  {
    uint64_t v36 = a3;
    uint64_t v37 = (int *)(v34 + 7876);
    do
    {
      int v38 = *v37++;
      v35 += v38;
      --v36;
    }
    while (v36);
  }
  int v39 = *(_DWORD *)(v34 + 4 * a3 + 7876);
  if (v39 >= 1)
  {
    int v40 = v39 + v35;
    int v41 = *(_DWORD *)(v25 + 652) - v33;
    uint64_t v42 = v35;
    float v43 = (unsigned __int8 *)(v34 + 108 * v35 + 959);
    while (1)
    {
      int v44 = *v43;
      v43 += 108;
      if (v41 == v44) {
        break;
      }
      if (++v42 >= v40) {
        goto LABEL_53;
      }
    }
    *(_DWORD *)(v25 + 672) = v42;
    a2 = v42;
  }
LABEL_53:
  int v46 = *(__int16 *)(v34 + 874);
  if (v46 <= 0) {
    *(_DWORD *)(v34 + 228) = -9999;
  }
  if (*(unsigned char *)(v34 + 429))
  {
    *(unsigned char *)(v25 + 648) = 0;
    if (!*v26) {
      *(float *)(v25 + 6476) = (float)*(char *)(v34 + 488);
    }
    unsigned int v47 = 0;
    a4 = 0;
    *(_DWORD *)(v34 + 228) = 0;
LABEL_59:
    int v48 = *(_DWORD *)(v34 + 456);
    if (v48 == 40 || v48 == 0)
    {
      int v50 = v47 >= 3 ? *(char *)(v34 + 108 * a2 + 958) : 0;
      *(_DWORD *)(v25 + 656) = v50;
      if (v50 == a4) {
        *(unsigned char *)(*(void *)(v25 + 616) + 40) = 0;
      }
    }
    float v45 = (unsigned char *)(v25 + 756);
    goto LABEL_91;
  }
  int v51 = (unsigned __int16)v46;
  int v52 = *(_DWORD *)(v25 + 652);
  if (!v52 || *(unsigned char *)(v25 + 6753))
  {
    unsigned int v47 = v52 > 0 && *(unsigned char *)(v34 + 536) != 0;
    *(unsigned char *)(v25 + 648) = v47;
    if ((__int16)v51 >= 1) {
      *(_DWORD *)(v34 + 228) = v51 - 1;
    }
    if (!*v26) {
      *(float *)(v25 + 6476) = (float)*(char *)(v34 + 488);
    }
    if ((v47 & 1) == 0 && *(unsigned char *)(v34 + 584))
    {
      unint64_t v54 = 0;
      char v55 = (uint64_t *)(v34 + 10000);
      BOOL v56 = 1;
      do
      {
        uint64_t v57 = *v55;
        if (*v55 && *(int *)(v57 + 1024) >= 1 && *(int *)(v57 + 12) < 1) {
          break;
        }
        BOOL v56 = v54 < 0x10;
        v55 += 2;
        ++v54;
      }
      while (v54 != 17);
      if (v56) {
        *(_DWORD *)(v25 + 684) = *(unsigned __int8 *)(v34 + 962);
      }
    }
    goto LABEL_59;
  }
  int v158 = *(char *)(v34 + 108 * a2 + 957);
  switch(v158)
  {
    case 'R':
      unsigned int v47 = 5;
      *(unsigned char *)(v25 + 648) = 5;
      unsigned int v206 = (_DWORD *)(v34 + 228);
      int v207 = *(_DWORD *)(v34 + 228);
      goto LABEL_285;
    case 'P':
      unsigned int v47 = 3;
LABEL_284:
      *(unsigned char *)(v25 + 648) = v47;
      unsigned int v206 = (_DWORD *)(v34 + 228);
      int v207 = *(_DWORD *)(v34 + 228);
      if (!v207)
      {
        unsigned int v47 = 2;
        *(unsigned char *)(v25 + 648) = 2;
        int v207 = (__int16)v51;
        _DWORD *v206 = (__int16)v51;
        if (!*v26) {
          *(float *)(v25 + 6476) = (float)*(char *)(v34 + 488);
        }
        goto LABEL_304;
      }
LABEL_285:
      if (*v26)
      {
        int v208 = *(char *)(v34 + 108 * a2 + 960);
      }
      else
      {
        int v208 = *(char *)(v34 + 108 * a2 + 960);
        *(float *)(v25 + 6476) = (float)(v208 + *(char *)(v34 + 488));
      }
      *(_DWORD *)(v25 + 680) = v208;
      *(_DWORD *)(v25 + 684) = *(unsigned __int8 *)(v34 + 108 * a2 + 962);
LABEL_304:
      if (v207 >= 1) {
        _DWORD *v206 = v207 - 1;
      }
      goto LABEL_59;
    case 'L':
      unsigned int v47 = 4;
      goto LABEL_284;
  }
LABEL_92:
  if (!*(void *)(v14 + 8 * v12))
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("No frame to encode.\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "No frame to encode.\n");
    }
    return 4294954385;
  }
  uint64_t v58 = *(void *)(*(void *)(v10 + 9920) + 8 * v12);
  int v59 = *(_DWORD *)(v10 + 544);
  int v60 = *(_DWORD *)(v10 + 11016);
  *(_DWORD *)(v10 + 11016) = v60 + 1;
  *(_DWORD *)(v58 + 584) = v60;
  long long v470 = *(_OWORD *)(v10 + 10384);
  double v61 = 0.0;
  *(_OWORD *)(v10 + 10384) = 0u;
  uint64_t v62 = *(void *)(v58 + 616);
  uint64_t v63 = *(void *)(v58 + 624);
  if (v63)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
    long long v64 = *(std::__shared_weak_count **)(v10 + 10392);
    *(void *)(v10 + 10384) = v62;
    *(void *)(v10 + 10392) = v63;
    if (v64) {
      sub_1D0C4C984(v64);
    }
  }
  else
  {
    *(void *)(v10 + 10384) = v62;
    *(void *)(v10 + 10392) = 0;
  }
  int v66 = v13;
  uint64_t v67 = v58 + 6680;
  if ((v59 & 2) != 0) {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v10 + 9824), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v457 = v10;
  context = (unsigned __int8 *)v58;
  if (*(unsigned char *)v58) {
    goto LABEL_103;
  }
  if (*(unsigned char *)(*(void *)(v58 + 8) + 33))
  {
    uint64_t v69 = *(void *)(v58 + 16);
    *(unsigned char *)(v69 + 4) = -1;
    *(_DWORD *)uint64_t v69 = -1;
    *(unsigned char *)(v69 + 52) = 0;
    uint64_t v70 = *(void *)(v58 + 16);
    *(_OWORD *)(v70 + 104) = 0u;
    *(_OWORD *)(v70 + 88) = 0u;
    *(_OWORD *)(v70 + 72) = 0u;
    *(_OWORD *)(v70 + 56) = 0u;
    double v72 = *(unsigned __int8 **)(v58 + 8);
    uint64_t v71 = *(void *)(v58 + 16);
    int v73 = v72[34];
    *(unsigned char *)uint64_t v71 = v73;
    int v74 = v72[39];
    *(unsigned char *)(v71 + 4) = v74;
    *(unsigned char *)(v71 + 2) = v72[36];
    if (v73 != 255)
    {
      uint64_t v75 = *(void *)(v58 + 6464);
      int v76 = *(unsigned __int8 *)(v75 + 504);
      uint64_t v77 = v75 + 8 * *(int *)(v75 + 44);
      unsigned int v78 = (__int16 *)(v77 + 54);
      float v79 = (__int16 *)(v77 + 52);
      BOOL v80 = v76 == 0;
      if (v76) {
        long long v81 = v78;
      }
      else {
        long long v81 = v79;
      }
      *(_DWORD *)(v71 + 8) = *v81;
      if (v80) {
        float v79 = v78;
      }
      *(_DWORD *)(v71 + 12) = *v79;
    }
    int v82 = v72[38];
    *(unsigned char *)(v71 + 3) = v82;
    uint64_t v83 = *(void *)(v58 + 616);
    int v84 = *(_DWORD *)(v83 + 520);
    int v85 = *(_DWORD *)(v83 + 524);
    *(_DWORD *)(v71 + 36) = 0;
    *(_DWORD *)(v71 + 44) = 0;
    if (v73 == 255)
    {
      *(_DWORD *)(v71 + 40) = v84 - 1;
      int v89 = v85 - 1;
    }
    else
    {
      int v87 = *(_DWORD *)(v71 + 8);
      int v86 = *(_DWORD *)(v71 + 12);
      int v88 = v87 - 1;
      *(_DWORD *)(v71 + 40) = v87 - 1;
      int v89 = v86 - 1;
      *(_DWORD *)(v71 + 48) = v86 - 1;
      if (v82 == 255) {
        goto LABEL_149;
      }
      int v90 = *(_DWORD *)(v71 + 20);
      if (v90 < 1) {
        goto LABEL_149;
      }
      int v91 = *(_DWORD *)(v71 + 24);
      if (v91 < 1 || *(_DWORD *)(v71 + 28) || *(_DWORD *)(v71 + 32)) {
        goto LABEL_149;
      }
      int v92 = (v84 + v87 * v90 - 1) / v84;
      int v93 = (v85 + v86 * v91 - 1) / v85;
      BOOL v94 = __OFSUB__(v87, v92);
      int v95 = v87 - v92;
      if (v95 < 0 != v94) {
        ++v95;
      }
      int v96 = v95 >> 1;
      int v97 = (v88 + v92) / 2;
      BOOL v94 = __OFSUB__(v86, v93);
      int v98 = v86 - v93;
      if (v98 < 0 != v94) {
        ++v98;
      }
      int v99 = v98 >> 1;
      int v100 = (v89 + v93) / 2;
      if (v96 <= 4) {
        int v96 = 4;
      }
      int v101 = v96 - 4;
      int v102 = v97 + 4;
      if (v102 < v88) {
        int v88 = v102;
      }
      *(_DWORD *)(v71 + 36) = v101;
      *(_DWORD *)(v71 + 40) = v88;
      if (v99 <= 4) {
        int v103 = 4;
      }
      else {
        int v103 = v99;
      }
      int v104 = v103 - 4;
      int v105 = v100 + 4;
      if (v105 < v89) {
        int v89 = v105;
      }
      *(_DWORD *)(v71 + 44) = v104;
    }
    *(_DWORD *)(v71 + 48) = v89;
LABEL_149:
    if (v74 != 255) {
      *(unsigned char *)(v71 + 52) = 1;
    }
    sub_1D0D3A7D0((char *)v71);
  }
  uint64_t v454 = v58 + 6680;
  char v455 = v59;
  int v453 = v13;
  uint64_t v110 = *(void *)(v58 + 576);
  if (*(unsigned char *)(v110 + 448))
  {
    if (*(unsigned __int8 *)(*(void *)(v58 + 8) + 34) != 255)
    {
      uint64_t v111 = *(void *)(v58 + 6464);
      if (v111)
      {
        uint64_t v112 = *(void *)(v58 + 616);
        uint64_t v113 = *(void *)(v112 + 520);
        *(void *)(v112 + 504) = v113;
        int v114 = *(unsigned __int8 *)(v111 + 504);
        uint64_t v115 = v111 + 8 * *(int *)(v111 + 44);
        uint64_t v116 = (unsigned __int16 *)(v115 + 54);
        __int16 v117 = (unsigned __int16 *)(v115 + 52);
        BOOL v118 = v114 == 0;
        if (v114) {
          long long v119 = (unsigned __int16 *)(v115 + 54);
        }
        else {
          long long v119 = (unsigned __int16 *)(v115 + 52);
        }
        int v120 = *v119;
        *(_DWORD *)(v112 + 512) = (__int16)v120;
        if (!v118) {
          uint64_t v116 = v117;
        }
        int v121 = *v116;
        *(_DWORD *)(v112 + 516) = (__int16)v121;
        if (!*(unsigned char *)(v112 + 432)
          || (v120 ? (BOOL v122 = v121 == 0) : (BOOL v122 = 1),
              v122 || (v113 == (__int16)v120 ? (BOOL v123 = HIDWORD(v113) == (__int16)v121) : (BOOL v123 = 0), v123)))
        {
          *(void *)(v112 + 512) = 0;
        }
        else
        {
          uint64_t v124 = *(void *)(v110 + 10408);
          if (HIDWORD(v113))
          {
            uint64_t v125 = *(void *)(v112 + 488);
            size_t v126 = (int)v113;
            uint64_t v127 = SHIDWORD(v113);
            uint64_t v128 = *(char **)(v112 + 472);
            do
            {
              --v127;
              memset(v128, 128, v126);
              v128 += v125;
            }
            while (v127);
            uint64_t v112 = *((void *)context + 77);
            unsigned int v129 = *(_DWORD *)(v112 + 524);
            if (v129 >= 2)
            {
              size_t v130 = *(int *)(v112 + 520);
              uint64_t v131 = *(void *)(v112 + 496);
              uint64_t v132 = (uint64_t)(int)v129 >> 1;
              uint64_t v133 = *(char **)(v112 + 480);
              do
              {
                --v132;
                memset(v133, 128, v130);
                v133 += v131;
              }
              while (v132);
              uint64_t v112 = *((void *)context + 77);
            }
          }
          uint64_t v134 = *(void *)(v124 + 24);
          uint64_t v135 = *(unsigned int *)(v112 + 504);
          uint64_t v136 = *(unsigned int *)(v112 + 508);
          uint64_t v137 = *(unsigned int *)(v112 + 512);
          uint64_t v138 = *(unsigned int *)(v112 + 516);
          uint64_t v139 = (*(uint64_t (**)(uint64_t))(*(void *)v112 + 24))(v112);
          uint64_t v140 = (*(uint64_t (**)(void))(**((void **)context + 77) + 32))(*((void *)context + 77));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v134 + 32))(v134, v135, v136, v137, v138, v139, v140);
          uint64_t v141 = 0;
          uint64_t v58 = (uint64_t)context;
          uint64_t v142 = *((void *)context + 77);
          char v143 = 1;
          do
          {
            char v144 = v143;
            *(void *)(v142 + 8 * v141 + 400) = *(void *)(v142 + 8 * v141 + 472);
            uint64_t v142 = *((void *)context + 77);
            *(void *)(v142 + 8 * v141 + 416) = *(void *)(v142 + 8 * v141 + 488);
            uint64_t v141 = 1;
            char v143 = 0;
          }
          while ((v144 & 1) != 0);
        }
      }
    }
  }
  uint64_t v65 = sub_1D0CF99F4(v58);
  if (v65)
  {
    uint64_t v58 = (uint64_t)context;
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Frame %d: Precompress failed\n", *((_DWORD *)context + 163));
      syslog(27, "Frame %d: Precompress failed\n", *((_DWORD *)context + 163));
    }
    goto LABEL_681;
  }
  BOOL v145 = context;
  unsigned int v146 = context[648];
  if (v146 == 1)
  {
    int v147 = *((_DWORD *)context + 163);
    *(_DWORD *)(v10 + 324) = v147;
  }
  else
  {
    int v147 = *(_DWORD *)(v10 + 324);
  }
  uint64_t v148 = (char *)(context + 6292);
  *((_DWORD *)context + 152) = v147;
  char v149 = v455;
  if (*(unsigned char *)(v10 + 584))
  {
    unint64_t v150 = 0;
    uint64_t v151 = *((void *)context + 72);
    int v152 = (uint64_t *)(v151 + 10000);
    BOOL v153 = 1;
    do
    {
      uint64_t v154 = *v152;
      if (*v152 && *(int *)(v154 + 1024) >= 1 && *(int *)(v154 + 12) < 1) {
        break;
      }
      BOOL v153 = v150 < 0x10;
      v152 += 2;
      ++v150;
    }
    while (v150 != 17);
    if (v153)
    {
      int v155 = *(_DWORD *)(v151 + 456);
      if (v155 == 34)
      {
        int v156 = context[464];
        goto LABEL_220;
      }
      if (!v155)
      {
        int v156 = *(unsigned __int8 *)(*((void *)context + 77) + 1172);
LABEL_220:
        BOOL v157 = v156 == 0;
        goto LABEL_221;
      }
    }
    BOOL v157 = 0;
LABEL_221:
    context[757] = v157;
  }
  uint64_t v165 = *(void *)(v10 + 10400);
  v452 = context + 6292;
  if (v165 && *(unsigned char *)(v165 + 1776) && !*((_DWORD *)context + 163))
  {
    int v464 = 0;
    v451 = context + 596;
    context[596] = 0;
    unint64_t v167 = (unsigned int *)(context + 652);
    unint64_t v169 = (char *)(context + 632);
    int v462 = *(_DWORD *)(*((void *)context + 79) + 1024);
    uint64_t v168 = (unsigned char *)(v165 + 1776);
  }
  else
  {
    if (v146) {
      BOOL v166 = 1;
    }
    else {
      BOOL v166 = context[757] == 0;
    }
    v451 = context + 596;
    context[596] = v166;
    if (!v165) {
      goto LABEL_571;
    }
    unint64_t v167 = (unsigned int *)(context + 652);
    int v464 = *((_DWORD *)context + 163);
    uint64_t v168 = (unsigned char *)(v165 + 1776);
    unint64_t v169 = (char *)(context + 632);
    int v462 = *(_DWORD *)(*((void *)context + 79) + 1024);
    if (!*(unsigned char *)(v165 + 1776)) {
      goto LABEL_244;
    }
  }
  int v170 = *(_DWORD *)(v165 + 1784);
  if (v146 >= 5)
  {
    *((_DWORD *)context + 150) = v170;
    int v176 = *(_DWORD *)(v165 + 1788) + 1;
    *(_DWORD *)(v165 + 1788) = v176;
  }
  else
  {
    v466 = v168;
    int v171 = v170 + 1;
    *(_DWORD *)(v165 + 1784) = v170 + 1;
    if (v170 < -1
      || (uint64_t v172 = *(unsigned int **)(*(void *)(v165 + 1800) + 8 * (v171 % *(_DWORD *)(v165 + 1780)))) == 0)
    {
      if (dword_1EB671A40 < 3) {
        goto LABEL_549;
      }
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: Failed to find gop stats buffer for gop_id %d\n", v171);
      syslog(27, "mpt_rc: Failed to find gop stats buffer for gop_id %d\n", *(_DWORD *)(v165 + 1784));
      goto LABEL_279;
    }
    *(void *)std::unique_lock<std::mutex> __lk = v172 + 10;
    __lk[8] = 1;
    std::mutex::lock((std::mutex *)(v172 + 10));
    if (!v172[8]) {
      goto LABEL_238;
    }
    do
      std::condition_variable::wait((std::condition_variable *)(v172 + 26), (std::unique_lock<std::mutex> *)__lk);
    while (v172[8]);
    if (__lk[8]) {
LABEL_238:
    }
      std::mutex::unlock(*(std::mutex **)__lk);
    int v173 = *(_DWORD *)(v165 + 1784);
    int v174 = *(_DWORD *)(v165 + 1780);
    BOOL v94 = __OFSUB__(v173, v174);
    int v175 = v173 - v174;
    uint64_t v148 = (char *)(context + 6292);
    if (v175 < 0 == v94)
    {
      uint64_t v247 = *v172;
      if ((int)v247 >= 1 && v247 <= *(_DWORD *)(v165 + 496))
      {
        v458 = v167;
        uint64_t v270 = 0;
        uint64_t v271 = 0;
        uint64_t v272 = 56 * v247;
        while (1)
        {
          uint64_t v273 = *((void *)v172 + 1);
          int v274 = *(_DWORD *)(v273 + v270);
          if (v274 != 2) {
            break;
          }
          uint64_t v275 = v273 + v270;
          unsigned int v276 = *(unsigned __int8 *)(v273 + v270 + 32);
          char v277 = *(unsigned char *)(v273 + v270 + 32);
          if (v276 <= 4)
          {
            *(void *)(v165 + 400) = 0;
            *(_OWORD *)(v165 + 368) = 0u;
            *(_OWORD *)(v165 + 384) = 0u;
            *(_OWORD *)(v165 + 336) = 0u;
            *(_OWORD *)(v165 + 352) = 0u;
            char v277 = *(unsigned char *)(v275 + 32);
          }
          unint64_t v278 = *(void *)(v275 + 40);
          *(void *)(v165 + 328 + 8 * v277 + 8) += (int)(v278 >> 3);
          ++*(_DWORD *)(v165 + 328 + 4 * v277 + 56);
          uint64_t v279 = *(void *)(v275 + 48);
          *(void *)(v165 + 640) += (int)v278 - (int)*(double *)(v275 + 16);
          ++*(_DWORD *)(v165 + 656);
          if (*(unsigned char *)(v165 + 654))
          {
            double v280 = *(double *)(v165 + 544) * 0.95 + 1.0;
            *(double *)(v165 + 544) = v280;
            double v281 = *(double *)(v165 + 552) * 0.95 + (double)(v278 - v279);
            *(double *)(v165 + 552) = v281;
            *(double *)(v165 + 560) = v281 / v280;
            unint64_t v278 = v279;
          }
          uint64_t v282 = v273 + v270;
          double v283 = exp2((*(float *)(v282 + 4) + -12.0) / 6.0) * 0.850000024;
          if (v276 >= 5) {
            double v283 = v283 / *(float *)(*(void *)(v165 + 608) + 4 * *(int *)(v282 + 24));
          }
          uint64_t v148 = (char *)(context + 6292);
          sub_1D0D38948(v165 + 720, v278, v283, *(double *)(v282 + 8));
          ++v271;
          v270 += 56;
          if (v272 == v270)
          {
            int v173 = *(_DWORD *)(v165 + 1784);
            unint64_t v167 = v458;
            goto LABEL_241;
          }
        }
        if (dword_1EB671A40 < 3)
        {
          unint64_t v167 = v458;
          goto LABEL_549;
        }
        uint64_t v285 = v273 + 56 * v271;
        uint64_t v248 = "mpt_rc: frame %d Invalid state %d\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: frame %d Invalid state %d\n", *(_DWORD *)(v285 + 28), v274);
        uint64_t v249 = *(unsigned int *)(v285 + 28);
        uint64_t v247 = *(unsigned int *)(v273 + v270);
        unint64_t v167 = v458;
      }
      else
      {
        if (dword_1EB671A40 < 3) {
          goto LABEL_549;
        }
        uint64_t v248 = "mpt_rc: gop %d Invalid size %d\n";
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: gop %d Invalid size %d\n", v175, v247);
        uint64_t v249 = (*(_DWORD *)(v165 + 1784) - *(_DWORD *)(v165 + 1780));
      }
      syslog(27, v248, v249, v247);
LABEL_279:
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Frame %d: Failed in MptRcAquireGopStatsUpdateModel\n", v464);
        syslog(27, "Frame %d: Failed in MptRcAquireGopStatsUpdateModel\n", v464);
      }
      goto LABEL_549;
    }
LABEL_241:
    int v176 = 0;
    *uint64_t v172 = 0;
    uint64_t v168 = v466;
    BOOL v145 = context;
    *((_DWORD *)context + 150) = v173;
    *(_DWORD *)(v165 + 1788) = 0;
    uint64_t v10 = v457;
    char v149 = v455;
  }
  *((_DWORD *)v145 + 151) = v176;
LABEL_244:
  int v177 = *(unsigned __int8 *)(v165 + 1696);
  if (*(unsigned char *)(v165 + 1696)
    || *v168 && *(_DWORD *)(v165 + 1784) < *(_DWORD *)(v165 + 1780)
    || v145[648] > 4u
    || (int)*v167 < 1)
  {
    goto LABEL_245;
  }
  uint64_t v193 = 0;
  unint64_t v194 = 0;
  unsigned int v195 = 0;
  unint64_t v196 = 0;
  do
  {
    uint64_t v197 = *(void *)(v165 + 8 * v193 + 336);
    int v198 = *(_DWORD *)(v165 + 384 + 4 * v193);
    if (v193 != 5)
    {
      if (v197)
      {
        if (v194 || (unint64_t v194 = *(void *)(v165 + 8 * v193 + 336), v198 != 1))
        {
          if (dword_1EB671A40 < 3) {
            goto LABEL_549;
          }
          int v266 = (FILE *)*MEMORY[0x1E4F143C8];
          uint8x8_t v267 = "more than 1 RC frame in prev GOP\n";
          uint8x8_t v268 = "more than 1 RC frame in prev GOP\n";
          size_t v269 = 33;
LABEL_417:
          fwrite(v268, v269, 1uLL, v266);
          syslog(27, v267);
          goto LABEL_549;
        }
      }
    }
    v196 += v197;
    v195 += v198;
    ++v193;
  }
  while (v193 != 6);
  if (!v194)
  {
    if (dword_1EB671A40 < 3) {
      goto LABEL_549;
    }
    int v266 = (FILE *)*MEMORY[0x1E4F143C8];
    uint8x8_t v267 = "no RC frame found in prev GOP\n";
    uint8x8_t v268 = "no RC frame found in prev GOP\n";
    size_t v269 = 30;
    goto LABEL_417;
  }
  unsigned int v199 = *(_DWORD *)(v165 + 328);
  if (v195 > v199) {
    goto LABEL_549;
  }
  uint64_t v10 = v457;
  if (v195 >= v199)
  {
    uint64_t v200 = 0;
    int v201 = (*(_DWORD *)(v165 + 432) + 1) % 3;
    *(_DWORD *)(v165 + 432) = v201;
    *(double *)(v165 + 8 * v201 + 408) = (double)v194 / (double)v196;
    int v202 = v201 + 3;
    double v203 = 0.0;
    while (1)
    {
      double v204 = *(double *)(v165 + 8 * (v202 % 3) + 408);
      if (v204 == -1.0) {
        break;
      }
      double v203 = v203 + v204 * *(double *)&qword_1D0DA5410[v200++];
      --v202;
      if (v200 == 3)
      {
        *(double *)(v165 + 440) = v203;
        break;
      }
    }
  }
LABEL_245:
  v467 = v168;
  uint64_t v178 = *((unsigned int *)v145 + 1620);
  unsigned int v179 = *((_DWORD *)v145 + 1621);
  float v180 = *((float *)v145 + 1622);
  unsigned int v181 = *((_DWORD *)v145 + 1623);
  int v182 = *((_DWORD *)v145 + 1624);
  uint64_t v183 = *((void *)v148 + 26);
  double v184 = (double)v178;
  *(double *)(v165 + 512) = (double)v178;
  if (!*(unsigned char *)(*(void *)(v165 + 1688) + 447))
  {
    *(double *)(v165 + 520) = v180;
    *(double *)(v165 + 760) = v184 / v180;
  }
  if (v177 == 1)
  {
    double v185 = *(double *)(v165 + 520);
    int v186 = 250;
    if (*(unsigned char *)(v165 + 1749))
    {
      if ((int)(3000.0 / v185) <= 250) {
        int v186 = 250;
      }
      else {
        int v186 = (int)(3000.0 / v185);
      }
    }
    uint64_t v187 = *(void *)(v165 + 1760);
    uint64_t v188 = *(void *)(*(void *)v169 + 16);
    if (*(_DWORD *)(v187 + 48) == 2)
    {
      if (v188 < 1
        || (uint64_t v189 = *(int *)(*(void *)v169 + 32), (int)v189 < 1)
        || (uint64_t v190 = *(void *)(v187 + 40), v190 < 1)
        || (uint64_t v191 = v188 - v190, v191 >= 20 * v189))
      {
        int v192 = *(_DWORD *)(v187 + 12) - (int)(v184 / v185);
      }
      else
      {
        int v192 = *(_DWORD *)(v187 + 12) - v191 * v178 / *(unsigned int *)(*(void *)v169 + 32);
      }
      int v205 = v192 & ~(v192 >> 31);
      *(_DWORD *)(v187 + 12) = v205;
    }
    else
    {
      int v205 = *(_DWORD *)(v187 + 12);
    }
    *(void *)(v187 + 40) = v188;
    int v209 = (int)(v184 * (double)v186 / 1000.0) - v205;
    int v182 = v209 & ~(v209 >> 31);
    *(_DWORD *)(v187 + 16) = v182;
    *(_DWORD *)(v187 + 20) = v186;
LABEL_290:
    unsigned int v181 = *(_DWORD *)(v187 + 12);
  }
  else
  {
    uint64_t v187 = *(void *)(v165 + 1760);
    if (v187)
    {
      int v182 = *(_DWORD *)(v187 + 16);
      goto LABEL_290;
    }
  }
  *(void *)&long long v473 = __PAIR64__(v179, v178);
  *((void *)&v473 + 1) = __PAIR64__(v181, LODWORD(v180));
  int v474 = v182;
  uint64_t v460 = v183;
  uint64_t v475 = v183;
  sub_1D0D39884(v165, (uint64_t)&v473);
  int v211 = (char)context[648];
  unsigned int v212 = context[648];
  int v213 = *(unsigned __int8 *)(v165 + 1776);
  if (!*(unsigned char *)(v165 + 1776))
  {
    int v219 = *(_DWORD *)(v165 + 656);
    if (context[6456])
    {
      if (v219)
      {
LABEL_310:
        if (*(unsigned char *)(v165 + 1696))
        {
          long double v220 = exp2((*(double *)(v165 + 576) + -12.0) / 6.0);
          a6 = 0.850000024;
          long double v221 = v220 * 0.850000024;
          *(long double *)(v165 + 632) = v221;
          LOWORD(v221) = word_1D0DA54E4[v211];
          double v61 = (double)*(unint64_t *)&v221;
          *(double *)(v165 + 576) = v61;
        }
        else
        {
          sub_1D0D39F94((double *)v165, *((double *)context + 787));
          double v61 = *(double *)(v165 + 576);
        }
        context[6456] = 1;
        goto LABEL_489;
      }
LABEL_309:
      *(unsigned char *)(v165 + 652) = v212;
      *(unsigned char *)(v165 + 650) = 1;
      goto LABEL_310;
    }
    if (!v219) {
      goto LABEL_309;
    }
LABEL_293:
    int8x8_t v214 = v167;
    *(unsigned char *)(v165 + 652) = v212;
    int v215 = *v452;
    *(unsigned char *)(v165 + 653) = v215;
    if (v212 <= 2)
    {
      int8x8_t v216 = (unsigned char *)(v165 + 650);
      BOOL v217 = 1;
      *(unsigned char *)(v165 + 650) = 1;
      double v218 = *((double *)context + 787);
LABEL_321:
      int v227 = *(_DWORD *)(v165 + 712);
      *int8x8_t v216 = v217;
      if (v213 && *(_DWORD *)(v165 + 1784) < *(_DWORD *)(v165 + 1780))
      {
        if (v212 > 4)
        {
          uint64_t v65 = sub_1D0D3A034(v165, (uint64_t)context);
          unint64_t v167 = v214;
          if (v65) {
            goto LABEL_550;
          }
          double v231 = *(double *)(v165 + 576);
          uint64_t v10 = v457;
          char v149 = v455;
          int v229 = (char *)(context + 6292);
        }
        else
        {
          float v228 = *(float *)(v165 + 1792);
          int v229 = (char *)(context + 6292);
          unint64_t v167 = v214;
          if (v212 > 2)
          {
            int v230 = *((_DWORD *)context + 170);
            if (v230 <= 3) {
              int v230 = 3;
            }
            float v228 = v228 + (float)v230;
          }
          double v231 = v228;
          uint64_t v10 = v457;
        }
LABEL_483:
        a6 = 51.0;
        if (v231 < 51.0) {
          a6 = v231;
        }
        a7 = 12.0;
        if (v231 <= 12.0) {
          double v61 = 12.0;
        }
        else {
          double v61 = a6;
        }
        *(double *)(v165 + 576) = v61;
        v229[164] = 1;
        goto LABEL_489;
      }
      if (v227 == 1)
      {
        BOOL v217 = 0;
        *int8x8_t v216 = 0;
      }
      int v232 = *(_DWORD *)(v165 + 656);
      double v233 = *(double *)(v165 + 536);
      double v234 = v233 * (double)(v232 + 1);
      double v235 = (double)*(uint64_t *)(v165 + 640);
      if (v212 > 4)
      {
        *((double *)context + 71) = v235 / v234;
      }
      else
      {
        double v236 = *(double *)(v165 + 1768);
        if (v236 > v233)
        {
          double v235 = v233 - v236 + v235;
          *(double *)(v165 + 1768) = v236 + v233 * -0.5;
        }
        double v237 = v235 / v234;
        *((double *)context + 71) = v235 / v234;
        unsigned int v238 = *(_DWORD *)(v165 + 496);
        if (v238 <= *(char *)(*(void *)(v165 + 1688) + 9961) || *(unsigned char *)(v454 + 73))
        {
          if (v227 != 1) {
            double v233 = v234 / (double)v232;
          }
          if (v238)
          {
            int v239 = *(_DWORD *)(v165 + 328);
            double v240 = -1.0;
            if (v239 >= 2)
            {
              double v241 = *(double *)(v165 + 440);
              if (v241 != -1.0) {
                double v240 = v241 / ((1.0 - v241) / (double)(v239 - 1));
              }
            }
            if (v240 == -1.0) {
              double v240 = 3.0;
            }
            double v242 = 0.9;
            if (context[757]) {
              double v242 = 1.0;
            }
            double v233 = sub_1D0D3A30C(v165, v217, 0, v233, v242, v240);
          }
          if (*(unsigned char *)(v165 + 654))
          {
            double v243 = *(double *)(v165 + 560);
            double v244 = 10.0;
            if (v233 > v243) {
              double v244 = v233 - v243;
            }
          }
          else
          {
            double v244 = v233;
          }
          if (*(_DWORD *)(v165 + 712))
          {
            if (*v452) {
              BOOL v256 = 1;
            }
            else {
              BOOL v256 = context[6293] != 0;
            }
            unint64_t v167 = v214;
            int v260 = *(_DWORD *)(v165 + 676);
            if (v260 >= 1)
            {
              double v261 = (double)v260 / 10.0;
              if (v244 * 0.25 < v261) {
                double v261 = v244 * 0.25;
              }
              double v262 = v244 - v261;
              int v263 = *(_DWORD *)(v165 + 680);
              if (v262 <= (double)v263) {
                double v244 = v262;
              }
              else {
                double v244 = (double)v263;
              }
            }
            BOOL v264 = v212 < 3 || *(unsigned char *)(v165 + 649) == 0;
            BOOL v259 = v264;
            if (v264) {
              double v257 = sub_1D0D38620(v165 + 720, v256, v227 == 1, v218, v237, v244);
            }
            else {
              double v257 = exp2((*(double *)(v165 + 584) + 3.0 + -12.0) / 6.0) * 0.850000024;
            }
            if (!v256 || *(unsigned char *)(v165 + 1600)) {
              goto LABEL_450;
            }
            *(void *)(v165 + 744) = 0;
            *(void *)(v165 + 728) = 0;
            int v265 = *(_DWORD *)(v165 + 780);
            if (v265 < 1) {
              goto LABEL_449;
            }
            goto LABEL_448;
          }
          if (*v216)
          {
            unint64_t v167 = v214;
            if (dword_1EB671A40 >= 7)
            {
              fwrite("mode: intra\n", 0xCuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              syslog(31, "mode: intra\n");
            }
            double v257 = sub_1D0D38620(v165 + 720, 0, 0, v218, v237, v244);
            if (*(_DWORD *)(v165 + 616) >= 2u)
            {
              double v258 = 1.39999998;
              if (context[757]) {
                double v258 = 1.0;
              }
              double v257 = v257 / v258;
            }
            if (*(unsigned char *)(v454 + 73))
            {
              BOOL v259 = 0;
LABEL_450:
              if (v257 >= 0.850000024) {
                double v246 = v257;
              }
              else {
                double v246 = 0.850000024;
              }
              int v245 = *(_DWORD *)(v165 + 712);
              double v288 = 1.0;
              if (!v245)
              {
                int v289 = *(_DWORD *)(v165 + 656);
                if (v289 >= 5)
                {
                  double v290 = (double)*(uint64_t *)(v165 + 640)
                       / (fmax(sqrt((double)(v289 / 0x19u)), 1.0)
                        * (*(double *)(v165 + 512) + *(double *)(v165 + 512)))
                       + 1.0;
                  double v291 = 2.0;
                  if (v290 < 2.0) {
                    double v291 = v290;
                  }
                  if (v290 <= 0.5) {
                    double v288 = 0.5;
                  }
                  else {
                    double v288 = v291;
                  }
                  double v246 = v246 * v288;
                }
              }
              if (v259)
              {
                double v292 = *(double *)(v165 + 584);
                if (*(unsigned char *)(v165 + 649)) {
                  double v292 = v292 + 2.91256094;
                }
                long double v293 = exp2((v292 + -12.0) / 6.0) * 0.850000024;
                double v294 = v293 * 1.51452804;
                double v295 = v293 / 1.51452804;
                if (v288 <= 1.05)
                {
                  if (v288 < 0.95) {
                    double v295 = v295 / 1.51452804;
                  }
                }
                else
                {
                  double v294 = v294 * 1.51452804;
                }
                if (v294 > v246) {
                  double v294 = v246;
                }
                if (v295 >= v246) {
                  double v246 = v295;
                }
                else {
                  double v246 = v294;
                }
              }
              double v231 = log(v246 / 0.850000024) * 6.0 / 0.693147181 + 12.0;
              *(double *)(v165 + 576) = v231;
LABEL_474:
              if (v245 == 1)
              {
                double v296 = *(double *)(v165 + 624);
                uint64_t v10 = v457;
                char v149 = v455;
                int v229 = (char *)(context + 6292);
                if (v231 < v296)
                {
                  double v297 = v296 + -6.0;
                  if (v231 < v297) {
                    double v231 = v297;
                  }
                  if (v231 < 22.0) {
                    double v231 = 22.0;
                  }
                }
              }
              else
              {
                uint64_t v10 = v457;
                char v149 = v455;
                int v229 = (char *)(context + 6292);
              }
              *(double *)(v165 + 632) = v246;
              goto LABEL_483;
            }
            BOOL v259 = 0;
          }
          else
          {
            unint64_t v167 = v214;
            if ((v211 - 3) > 2)
            {
              BOOL v259 = 0;
              double v257 = 0.0;
              goto LABEL_450;
            }
            if (*v452)
            {
              BOOL v284 = 1;
            }
            else if (context[6293])
            {
              BOOL v284 = *(_DWORD *)(*(void *)(v165 + 1688) + 456) != 0;
            }
            else
            {
              BOOL v284 = 0;
            }
            BOOL v259 = (v211 & 0xFFFFFFFD) == 0 || v212 == 1 || *(unsigned char *)(v165 + 649) == 0;
            if (*(unsigned char *)(v165 + 649) && v212 >= 3)
            {
              if (dword_1EB671A40 >= 7)
              {
                fwrite("mode: inter, prev_frame_as_intra_rc_\n", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                syslog(31, "mode: inter, prev_frame_as_intra_rc_\n");
              }
              double v257 = exp2((*(double *)(v165 + 584) + 2.0 + -12.0) / 6.0) * 0.850000024;
            }
            else
            {
              if (dword_1EB671A40 >= 7)
              {
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "mode: inter, other, force_long_term_stats=%d\n", v284);
                syslog(31, "mode: inter, other, force_long_term_stats=%d\n", v284);
              }
              double v257 = sub_1D0D38620(v165 + 720, v284, v227 == 1, v218, v237, v244);
            }
            if (!v284) {
              goto LABEL_450;
            }
          }
          *(void *)(v165 + 744) = 0;
          *(void *)(v165 + 728) = 0;
          int v265 = *(_DWORD *)(v165 + 780);
          if (v265 <= 0)
          {
LABEL_449:
            *(_DWORD *)(v165 + 780) = -1;
            *(void *)(v165 + 784) = 0;
            goto LABEL_450;
          }
LABEL_448:
          *(double *)(v165 + 792) = (double)*(int *)(v165 + 788) / (double)v265;
          goto LABEL_449;
        }
      }
      uint64_t v65 = sub_1D0D3A034(v165, (uint64_t)context);
      unint64_t v167 = v214;
      if (v65) {
        goto LABEL_550;
      }
      int v245 = *(_DWORD *)(v165 + 712);
      double v231 = *(double *)(v165 + 576);
      double v246 = 0.0;
      goto LABEL_474;
    }
    int8x8_t v216 = (unsigned char *)(v165 + 650);
    if (v212 - 3 >= 3)
    {
      *int8x8_t v216 = 0;
      double v218 = *((double *)context + 787);
    }
    else
    {
      *int8x8_t v216 = v215;
      double v218 = *((double *)context + 787);
      if (v215)
      {
        BOOL v217 = 1;
        goto LABEL_321;
      }
    }
    BOOL v217 = v215 != 0;
    goto LABEL_321;
  }
  if (*v167) {
    goto LABEL_293;
  }
  *(unsigned char *)(v165 + 652) = v212;
  *(unsigned char *)(v165 + 650) = 1;
  sub_1D0D39F94((double *)v165, *((double *)context + 787));
  context[6456] = 1;
  double v61 = *(double *)(v165 + 576);
LABEL_489:
  float v298 = v61;
  if (*(unsigned char *)(*(void *)(v165 + 1688) + 447))
  {
    double v299 = v180;
    if (vabdd_f64(*(double *)(v165 + 1616), v180) > 0.5) {
      *(double *)(v165 + 1616) = v299;
    }
    int v300 = *(_DWORD *)(v165 + 1668);
    float v301 = (float)v300;
    int v302 = *(_DWORD *)(v165 + 44);
    if (v298 > (float)v300 && v302 <= 30)
    {
      BOOL v304 = roundf(v298) > v301;
      float v305 = (float)v300;
    }
    else
    {
      BOOL v304 = 0;
      float v305 = v61;
    }
    if (v302 >= *(_DWORD *)(v165 + 1624)) {
      int v306 = 2;
    }
    else {
      int v306 = 4;
    }
    *(_DWORD *)(v165 + 1656) = 0;
    if (v464 >= 1)
    {
      int v307 = *(_DWORD *)(v165 + 1644);
      if (v307 >= 5) {
        int v308 = 5;
      }
      else {
        int v308 = *(_DWORD *)(v165 + 1644);
      }
      float v309 = 0.0;
      if (v308 >= 2)
      {
        int v310 = v308 - 1;
        int v311 = v462 - 1;
        do
        {
          LOBYTE(v210) = *(unsigned char *)(v165 + v311 % 5 + 1601);
          float v210 = (float)LODWORD(v210);
          float v309 = v309 + v210;
          --v311;
          --v310;
        }
        while (v310);
      }
      if (*(__int16 *)(v165 + 1640) < 2)
      {
        float v313 = (float)(v309 + v298) / (float)v308;
        if (v307 >= v306 && *(unsigned char *)(v165 + 1628) && *(unsigned char *)(v165 + 1652) && v313 >= (float)(v300 - 1))
        {
          if (v302 >= 31)
          {
            float v305 = (float)v300;
            goto LABEL_522;
          }
          int v312 = 1;
          float v305 = v301;
        }
        else
        {
          if (v307 < 2) {
            goto LABEL_522;
          }
          if (v313 > (float)((float)*(int *)(v165 + 1664) + 0.4999) || v302 < 1) {
            goto LABEL_522;
          }
          int v312 = -1;
        }
LABEL_521:
        *(_DWORD *)(v165 + 1644) = 0;
        *(_DWORD *)(v165 + 1624) = v302;
        v302 += v312;
        *(_DWORD *)(v165 + 44) = v302;
        *(_DWORD *)(v165 + 1656) = v312;
        goto LABEL_522;
      }
      if (v302 < 31)
      {
        int v312 = 1;
        goto LABEL_521;
      }
    }
LABEL_522:
    if (*(unsigned char *)(v165 + 1748))
    {
      float v315 = *(float *)(v165 + 8 * v302 + 48);
      if (v315 <= 10.1)
      {
        if (v315 <= 5.1)
        {
          *(_DWORD *)(v165 + 1664) = 34;
          int v316 = 36;
        }
        else
        {
          *(_DWORD *)(v165 + 1664) = 33;
          int v316 = 35;
        }
      }
      else
      {
        *(_DWORD *)(v165 + 1664) = 32;
        int v316 = 34;
      }
      *(_DWORD *)(v165 + 1668) = v316;
    }
    int v317 = *(_DWORD *)(v165 + 1672);
    if (v317 != -1)
    {
      *(_DWORD *)(v165 + 44) = v317;
      int v302 = v317;
    }
    int v318 = *(_DWORD *)(v165 + 1676);
    if (v318 == -1) {
      float v319 = v305;
    }
    else {
      float v319 = (float)v318;
    }
    int v320 = sub_1D0D39F2C(v165, v302);
    *(_DWORD *)(v165 + 1608) = v320;
    *(unsigned char *)(v165 + 1628) = v304;
    *(unsigned char *)(v165 + 1652) = 0;
    v321 = (__int16 *)((char *)&unk_1D0DA5488 + 4 * v320);
    a6 = (double)v321[1];
    double v61 = v299 * (double)*v321 / a6;
    *(double *)(v165 + 520) = v61;
    if (v319 != v298)
    {
      v471[0] = v178;
      v471[1] = v179;
      *(float *)&v471[2] = v180;
      v471[3] = v181;
      v471[4] = v182;
      uint64_t v472 = v460;
      double v61 = sub_1D0D39884(v165, (uint64_t)v471);
      float v298 = v319;
    }
  }
  BOOL v145 = context;
  *((float *)context + 1619) = v298;
  if (*(unsigned char *)(v165 + 1696) == 1)
  {
    v322 = *(_DWORD **)(v165 + 1760);
    double v61 = *(double *)(v165 + 536);
    int v323 = 3 * (int)v61;
    int v324 = v322[4];
    if (v324 >= v323) {
      int v324 = 3 * (int)v61;
    }
    int v325 = v322[8] + v324;
    v322[6] = v323;
    v322[7] = v325;
  }
  if (!*v467) {
    goto LABEL_571;
  }
  uint64_t v326 = *(void *)(*(void *)(v165 + 1800)
                   + 8 * (*((_DWORD *)context + 150) % *(_DWORD *)(v165 + 1780)));
  signed int v327 = *((_DWORD *)context + 151);
  uint64_t v328 = *(void *)(v326 + 8);
  if (v327 >= (int)(-1227133513 * ((unint64_t)(*(void *)(v326 + 16) - v328) >> 3)))
  {
    if (dword_1EB671A40 < 3) {
      goto LABEL_549;
    }
    v330 = "mpt_rc: frame_stats_array size exceeding gop_size for frame %d\n";
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: frame_stats_array size exceeding gop_size for frame %d\n");
    goto LABEL_548;
  }
  unsigned int v329 = context[648];
  if (v329 > 4)
  {
    if (v327) {
      goto LABEL_553;
    }
    if (dword_1EB671A40 <= 2) {
      goto LABEL_549;
    }
    v330 = "mpt_rc: Empty frame_stats_array for non-RC frame %d\n";
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: Empty frame_stats_array for non-RC frame %d\n");
LABEL_548:
    syslog(27, v330, *v167);
    goto LABEL_549;
  }
  if (v327)
  {
    if (dword_1EB671A40 > 2)
    {
      v330 = "mpt_rc: Non-empty frame_stats_array for RC frame %d\n";
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "mpt_rc: Non-empty frame_stats_array for RC frame %d\n");
      goto LABEL_548;
    }
LABEL_549:
    uint64_t v65 = 4294954385;
LABEL_550:
    uint64_t v58 = (uint64_t)context;
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Frame %d: RateControlBeforeEncoding failed\n", *v167);
      syslog(27, "Frame %d: RateControlBeforeEncoding failed\n", *v167);
    }
    goto LABEL_681;
  }
LABEL_553:
  *(void *)&__lk[15] = 0;
  *(void *)&__lk[7] = 0;
  int v331 = *((_DWORD *)context + 163);
  int v332 = *((_DWORD *)context + 164);
  uint64_t v333 = *((void *)context + 787);
  uint64_t v334 = *(void *)(v165 + 536);
  uint64_t v335 = v328 + 56 * v327;
  *(_DWORD *)uint64_t v335 = 1;
  *(float *)(v335 + 4) = v298;
  *(void *)(v335 + 8) = v333;
  *(void *)(v335 + 16) = v334;
  *(_DWORD *)(v335 + 24) = v332;
  *(_DWORD *)(v335 + 28) = v331;
  *(unsigned char *)(v335 + 32) = v329;
  *(_OWORD *)(v335 + 33) = *(_OWORD *)__lk;
  *(void *)(v335 + 48) = 0;
  ++*(_DWORD *)v326;
  std::mutex::lock((std::mutex *)(v326 + 40));
  ++*(_DWORD *)(v326 + 32);
  std::mutex::unlock((std::mutex *)(v326 + 40));
  if (v329 <= 4)
  {
    BOOL v336 = v329 < 3 || *(unsigned char *)(v165 + 653) != 0;
    *(unsigned char *)(v165 + 649) = v336;
    int v337 = *(char *)(*((void *)context + 7) + 9);
    int v338 = *(unsigned __int8 *)(*((void *)context + 5) + 2097);
    int v339 = v337 + (char)((int)(*((float *)context + 1619) + 0.5) - v337 - 26) + 26;
    if (v339 >= 51) {
      int v340 = 51;
    }
    else {
      int v340 = v337 + (char)((int)(*((float *)context + 1619) + 0.5) - v337 - 26) + 26;
    }
    if (v339 <= -v338) {
      int v341 = -v338;
    }
    else {
      int v341 = v340;
    }
    *(double *)(v165 + 584) = (double)v341;
    if (!v331) {
      *(float *)(v165 + 1792) = (float)v341;
    }
    *(float *)&uint64_t v476 = (float)v341;
    HIDWORD(v476) = v331;
    char v477 = v329;
    if (*(void *)(v165 + 488) == 2)
    {
      ++*(void *)(v165 + 480);
      *(void *)(v165 + 488) = 1;
      sub_1D0D39920(v165 + 448);
    }
    sub_1D0D39970((void *)(v165 + 448), &v476);
  }
  uint64_t v10 = v457;
  BOOL v145 = context;
  char v149 = v455;
LABEL_571:
  if (!v145[817]) {
    goto LABEL_641;
  }
  uint64_t v342 = *((void *)context + 379);
  uint64_t v343 = *((void *)context + 380);
  int v344 = *(unsigned __int8 *)(v343 + 504);
  uint64_t v345 = v343 + 8 * *(int *)(v343 + 44);
  v346 = (__int16 *)(v345 + 54);
  v347 = (__int16 *)(v345 + 52);
  BOOL v348 = v344 == 0;
  if (v344) {
    v349 = v346;
  }
  else {
    v349 = v347;
  }
  int v350 = *v349;
  if (v348) {
    v347 = v346;
  }
  int v351 = *v347;
  int v352 = *(_DWORD *)(v342 + 6508);
  int v353 = *((_DWORD *)context + 1586) >= 0x14u ? 40 : 38;
  unsigned int v354 = *((_DWORD *)context + 1584);
  if (v354 && (unsigned int v355 = *((_DWORD *)context + 1585)) != 0)
  {
    double v356 = 0.5;
    int v357 = (int)(*(float *)(v342 + 6476) + 0.5);
    int v358 = v353 - v357;
    if (v358 >= 5) {
      int v358 = 5;
    }
    int v359 = v358 & ~(v358 >> 31);
    *((_DWORD *)context + 1577) = v359;
    double v360 = (double)v355;
    double v361 = (double)v354;
    float v362 = (double)-v359 / 6.0;
    double v363 = (double)v355 / (double)v354 * (float)(1.0 - exp2f(v362));
    if (v363 > 0.0) {
      double v356 = -0.5;
    }
    float v364 = v363 + 1.0;
    float v365 = log2f(v364);
    int v366 = (int)(v356 + (float)(v365 * -6.0)) & ((int)(v356 + (float)(v365 * -6.0)) >> 31);
    if (v366 <= -5) {
      int v366 = -5;
    }
    *((_DWORD *)context + 1576) = v366;
    char v149 = v455;
    if (v366 + v357 <= 21)
    {
      if (v357 < 23)
      {
        *((void *)context + 788) = 0;
      }
      else
      {
        int v367 = 22 - v357;
        if (v357 == 27 || (22 - v357) < 0xFFFFFFFB) {
          int v367 = -5;
        }
        *((_DWORD *)context + 1576) = v367;
        float v368 = (double)-v367 / 6.0;
        double v369 = v361 / v360 * (float)(1.0 - exp2f(v368));
        if (v369 <= 0.0) {
          double v370 = 0.5;
        }
        else {
          double v370 = -0.5;
        }
        float v371 = v369 + 1.0;
        int v372 = (int)(v370 + (float)(log2f(v371) * -6.0));
        if (v372 >= 5) {
          int v372 = 5;
        }
        *((_DWORD *)context + 1577) = v372 & ~(v372 >> 31);
      }
    }
  }
  else
  {
    *((void *)context + 788) = 0;
    char v149 = v455;
  }
  if (v352 < 1 || v351 < 1) {
    goto LABEL_641;
  }
  int v373 = 0;
  int v374 = 0;
  int v375 = (int)(float)(*(float *)(v342 + 6528) * (float)v351);
  float v376 = (float)(int)(float)(*(float *)(v342 + 6524) * (float)v350);
  int v377 = (int)(float)(*(float *)(v342 + 6516) * (float)v350) - (int)(float)((float)(v376 * 0.4) * 0.5);
  unsigned int v378 = v377 & ~(v377 >> 31);
  int v379 = (int)(float)(*(float *)(v342 + 6520) * (float)v351) - (int)(float)((float)((float)v375 * 0.0) * 0.5);
  unsigned int v380 = v379 & ~(v379 >> 31);
  signed int v381 = v378 + (int)(float)(v376 * 1.4);
  int v382 = v380 + v375;
  while (2)
  {
    if (v350 < 1) {
      goto LABEL_640;
    }
    int v383 = v373 | 4;
    int v384 = (v373 | 4u) > v380;
    if ((int)((v373 | 4) - v380) >= 0) {
      unsigned int v385 = (v373 | 4) - v380;
    }
    else {
      unsigned int v385 = v380 - (v373 | 4);
    }
    int v386 = (v373 | 4) - v380 - v375;
    if (v386 < 0) {
      int v386 = v375 - ((v373 | 4) - v380);
    }
    if (v386 >= v385) {
      int v386 = v385;
    }
    if (v383 > v382) {
      ++v384;
    }
    int v387 = 3 * v384;
    uint64_t v388 = *((void *)context + 789);
    uint64_t v389 = v374;
    int v390 = 4;
    while (2)
    {
      double v391 = 1.0;
      if (v390 <= v378 || v390 >= v381 || v383 <= v380 || v383 >= v382)
      {
        int v392 = v390 - v378;
        if ((int)(v390 - v378) < 0) {
          int v392 = v378 - v390;
        }
        unsigned int v393 = v390 - v381;
        if (v390 - v381 < 0) {
          unsigned int v393 = v381 - v390;
        }
        if (v393 < v392) {
          int v392 = v393;
        }
        if (v390 <= v378) {
          unsigned int v394 = v387;
        }
        else {
          unsigned int v394 = v387 + 1;
        }
        if (v390 > v381) {
          ++v394;
        }
        if (v394 <= 8)
        {
          int v395 = 1 << v394;
          if ((v395 & 0x145) != 0)
          {
            int v392 = (int)sqrt((double)(v386 * v386 + v392 * v392));
          }
          else if ((v395 & 0x28) == 0)
          {
            int v392 = v386;
            if ((v395 & 0x82) == 0) {
              goto LABEL_636;
            }
          }
          double v391 = (double)(16 - v392) * 0.0625;
          if (v392 > 16) {
            double v391 = 0.0;
          }
        }
      }
LABEL_636:
      float v396 = v391;
      float v397 = (float)*((int *)context + 1576);
      if (v396 < 1.0) {
        float v397 = (float)(v396 * v397) + (float)((float)(1.0 - v396) * (float)*((int *)context + 1577));
      }
      *(_DWORD *)(v388 + 4 * v389) = (int)v397;
      int v398 = v389 + 1;
      int v399 = v390 + 4;
      v390 += 8;
      ++v389;
      if (v399 < v350) {
        continue;
      }
      break;
    }
    int v374 = v398;
    char v149 = v455;
LABEL_640:
    v373 += 8;
    if (v373 < v351) {
      continue;
    }
    break;
  }
LABEL_641:
  uint64_t v400 = (uint64_t)context;
  if (*(char *)(v10 + 492) >= 1)
  {
    int v468 = *((_DWORD *)context + 1410);
    if (v468)
    {
      int v401 = *((_DWORD *)context + 1383);
      if (v401 < 1) {
        goto LABEL_663;
      }
      int v402 = 0;
      int v403 = 0;
      v404 = (int *)(context + 800);
      uint64_t v405 = *((void *)context + 379);
      uint64_t v406 = *(void *)(v405 + 576);
      uint64_t v463 = v406 + 360;
      int v465 = *(char *)(v406 + 493);
      int v461 = (int)(*(float *)(v405 + 6476) + 0.5);
      signed int v407 = -6 * *(char *)(v406 + 650) + 48;
      int v408 = *(unsigned __int8 *)(v406 + 484);
      uint64_t v459 = v406;
      int v409 = *((_DWORD *)context + 201);
      int v410 = *(unsigned __int8 *)(v406 + 538) - v409;
      int v411 = 1 << v409;
      uint64_t v412 = *((void *)context + 737);
      int v413 = *((_DWORD *)context + 1382);
      do
      {
        if (v413 >= 1)
        {
          int v414 = 0;
          do
          {
            int v415 = sub_1D0D252CC(v404, v414, v402, *(_DWORD *)(v400 + 804), v413, *(_DWORD *)(v400 + 5532), v465);
            if (context[817]) {
              int v403 = sub_1D0D2597C((uint64_t)v404, v414, v402, *((_DWORD *)context + 201));
            }
            int v416 = sub_1D0D25A48(v414, v402, v410, (v403 + v461), v415, v468, v463, (uint64_t)v404);
            char v417 = v416;
            if (v408)
            {
              uint64_t v400 = (uint64_t)context;
              int v418 = *((_DWORD *)context + 201);
              int v419 = v416
                   + *(char *)(*(void *)(*(void *)(*((void *)context + 379) + 576) + 10784)
                             + *(int *)(*(void *)&context[8 * v418 + 6112]
                                      + 4
                                      * ((*((_DWORD *)context + 1382) + (1 << v418) - 1) >> v418)
                                      * (uint64_t)(v402 >> v418)
                                      + 4 * (v414 >> v418)));
              if (v419 >= 51) {
                char v420 = 51;
              }
              else {
                char v420 = v416
              }
                     + *(unsigned char *)(*(void *)(*(void *)(*((void *)context + 379) + 576) + 10784)
                                + *(int *)(*(void *)&context[8 * v418 + 6112]
                                         + 4
                                         * ((*((_DWORD *)context + 1382) + (1 << v418) - 1) >> v418)
                                         * (uint64_t)(v402 >> v418)
                                         + 4 * (v414 >> v418)));
              if (v419 <= v407) {
                char v417 = v407;
              }
              else {
                char v417 = v420;
              }
            }
            else
            {
              uint64_t v400 = (uint64_t)context;
              int v418 = *((_DWORD *)context + 201);
              if (*(unsigned char *)(v459 + 487) && v418 == 4)
              {
                char v417 = sub_1D0D256E0((uint64_t)v404, v414, v402, v416, *((_DWORD *)context + 1382), *(unsigned char *)(*(void *)(*((void *)context + 379) + 40) + 2096), *(unsigned __int8 *)(*(void *)(*((void *)context + 379) + 40) + 2097), v407);
                LOBYTE(v418) = 4;
              }
            }
            *(unsigned char *)(v412 + (v414 >> v418)) = v417;
            v414 += v411;
            int v413 = *(_DWORD *)(v400 + 5528);
          }
          while (v414 < v413);
          int v401 = *(_DWORD *)(v400 + 5532);
        }
        v412 += *(void *)(v400 + 808);
        v402 += v411;
      }
      while (v402 < v401);
      uint64_t v10 = v457;
      char v149 = v455;
      if (*(_DWORD *)(v400 + 5640))
      {
LABEL_663:
        uint64_t v421 = 0;
        char v422 = *(_DWORD *)(v400 + 804);
        int v423 = ~(-1 << v422);
        uint64_t v424 = ((*(_DWORD *)(v400 + 5528) + v423) >> v422);
        int v425 = (*(_DWORD *)(v400 + 5532) + v423) >> v422;
        uint64_t v426 = *(void *)(v400 + 808);
        uint64_t v427 = *(void *)(v400 + 5896);
        int v428 = 1;
        do
        {
          char v429 = v428;
          if (v421 < v425)
          {
            uint64_t v430 = *(void *)(v400 + 24 * v421 + 5992) + 2 * v426 * v421;
            uint64_t v431 = v427 + v426 * v421;
            if (v428) {
              uint64_t v432 = -1;
            }
            else {
              uint64_t v432 = -v426;
            }
            uint64_t v433 = v432 + (v428 & 1);
            do
            {
              uint64_t v434 = v433;
              uint64_t v435 = v428 & 1;
              if ((int)v424 > v428)
              {
                do
                {
                  *(_WORD *)(v430 + 2 * v435) = *(unsigned __int8 *)(v431 + v435) - *(unsigned __int8 *)(v431 + v434);
                  ++v435;
                  ++v434;
                }
                while (v424 != v435);
              }
              v431 += v426;
              LODWORD(v421) = v421 + 1;
              v430 += 2 * v426;
            }
            while (v421 != v425);
          }
          int v428 = 0;
          uint64_t v421 = 1;
        }
        while ((v429 & 1) != 0);
      }
    }
  }
  if ((v149 & 2) == 0 || !*v451)
  {
    uint64_t v65 = sub_1D0CFDDA0((unsigned __int8 *)v400);
    if (v65)
    {
      uint64_t v58 = (uint64_t)context;
      if (dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Frame %d: Compress failed\n", *((_DWORD *)context + 163));
        syslog(27, "Frame %d: Compress failed\n", *((_DWORD *)context + 163));
      }
      goto LABEL_681;
    }
    uint64_t v10 = v457;
    uint64_t v437 = *(void *)(v457 + 10400);
    uint64_t v58 = (uint64_t)context;
    int v66 = v453;
    LOBYTE(v59) = v455;
    uint64_t v67 = v454;
    if (!v437 || *(unsigned char *)(v437 + 1776)) {
      goto LABEL_103;
    }
    v438 = context;
    uint64_t v439 = *(void *)(v437 + 1688);
    unsigned int v440 = context[648];
    if (v440 <= 4)
    {
      *(void *)(v437 + 400) = 0;
      *(_OWORD *)(v437 + 368) = 0u;
      *(_OWORD *)(v437 + 384) = 0u;
      *(_OWORD *)(v437 + 336) = 0u;
      *(_OWORD *)(v437 + 352) = 0u;
      LODWORD(v473) = *((_DWORD *)context + 1619);
      DWORD1(v473) = *((_DWORD *)context + 163);
      BYTE8(v473) = context[648];
      if (*(void *)(v437 + 488) == 2)
      {
        ++*(void *)(v437 + 480);
        *(void *)(v437 + 488) = 1;
        sub_1D0D39920(v437 + 448);
      }
      sub_1D0D39970((void *)(v437 + 448), (uint64_t *)&v473);
      v438 = context;
      LOBYTE(v440) = context[648];
      uint64_t v10 = v457;
      int v66 = v453;
      LOBYTE(v59) = v455;
      uint64_t v67 = v454;
    }
    *(void *)(v437 + 328 + 8 * (char)v440 + 8) += *((void *)v438 + 16);
    ++*(_DWORD *)(v437 + 328 + 4 * (char)v440 + 56);
    if (*(unsigned char *)v437 == 1)
    {
      if (*(unsigned char *)(v437 + 1696) == 1 && context[6457] >= 2u)
      {
        long long v473 = *(_OWORD *)v67;
        uint64_t v441 = (uint64_t)context;
        int v474 = *((_DWORD *)context + 1674);
        v442 = &v473;
        uint64_t v443 = v437;
      }
      else
      {
        uint64_t v443 = v437;
        uint64_t v441 = (uint64_t)context;
        v442 = 0;
      }
      sub_1D0D3A40C(v443, v441, (uint64_t)v442);
    }
    if (*(unsigned char *)(v437 + 1696) == 1)
    {
      v444 = *(_DWORD **)(v437 + 1760);
      if (v444)
      {
        if (*context)
        {
          a6 = *(double *)(v437 + 512);
          double v61 = a6 / *(double *)(v437 + 520);
          v444[8] += (int)v61;
        }
        else
        {
          if (v444[12] == 2) {
            v444[3] += *((_DWORD *)context + 1626) + *((void *)context + 833) + *((_DWORD *)context + 1625);
          }
          v444[8] = 0;
        }
      }
    }
    int v445 = *(unsigned __int8 *)(v439 + 447);
    uint64_t v58 = (uint64_t)context;
    if (!v445) {
      goto LABEL_103;
    }
    if (*context)
    {
      *(unsigned char *)(v437 + 1628) = *(unsigned char *)(v437 + 1629);
      uint64_t v446 = *(void *)(v437 + 1760);
      a7 = 1000.0;
      double v61 = *(double *)(v437 + 512) * (double)*(int *)(v446 + 20) / 1000.0;
      *(float *)&double v61 = v61;
      *(float *)&double v61 = (float)*(int *)(v446 + 12) / *(float *)&v61;
      LODWORD(a6) = 2.0;
      if (*(float *)&v61 > 2.0 || *(unsigned char *)(v437 + 1653)) {
        ++*(_WORD *)(v437 + 1640);
      }
      if (*(_DWORD *)(v437 + 1656))
      {
        int v447 = *((__int16 *)&unk_1D0DA5488 + 2 * *(int *)(v437 + 1608) + 1);
      }
      else
      {
        int v447 = *(_DWORD *)(v437 + 1648);
        if (v447 <= 1) {
          int v447 = 1;
        }
      }
      int v449 = v447 - 1;
    }
    else
    {
      LODWORD(v61) = *((_DWORD *)context + 1619);
      *(unsigned char *)(v437 + *(_DWORD *)(*((void *)context + 79) + 1024) % 5 + 1601) = (int)*(float *)&v61;
      ++*(_DWORD *)(v437 + 1644);
      *(_WORD *)(v437 + 1640) = 0;
      int v448 = *(_DWORD *)(v437 + 1656);
      if (v448 >= 1)
      {
        *(_DWORD *)(v437 + 1648) = 0;
        goto LABEL_103;
      }
      if ((v448 & 0x80000000) == 0)
      {
LABEL_103:
        if ((v59 & 2) != 0)
        {
          if (!*(unsigned char *)(v58 + 596))
          {
            uint64_t v65 = (uint64_t)sub_1D0CEDD30(v10, v58);
            if (v65)
            {
              if (dword_1EB671A40 < 3) {
                goto LABEL_677;
              }
              goto LABEL_146;
            }
            uint64_t v65 = sub_1D0CEDE3C(v457, v66);
            if (!v65) {
              goto LABEL_677;
            }
            uint64_t v58 = (uint64_t)context;
            if (dword_1EB671A40 >= 3)
            {
LABEL_213:
              fwrite("Unable to find free FrameEnc for MPT encode!!\n", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              syslog(27, "Unable to find free FrameEnc for MPT encode!!\n");
            }
LABEL_681:
            sub_1D0D005F8(v58, v65, v61, a6, *(uint8x8_t *)&a7);
            goto LABEL_682;
          }
LABEL_137:
          uint64_t v65 = 0;
          goto LABEL_681;
        }
        if (*(unsigned char *)v58)
        {
          ++*(_DWORD *)(v10 + 10380);
          *((_WORD *)v456 + 244) = *(_WORD *)(v67 + 72);
          *(_DWORD *)(v10 + 10436) = *(_DWORD *)(v58 + 6500);
          int v68 = *(_DWORD *)(v58 + 6504);
          goto LABEL_106;
        }
        uint64_t v106 = *(void *)(v58 + 632);
        uint64_t v107 = *(void *)(v58 + 616);
        long long v108 = *(_OWORD *)(v107 + 192);
        long long v109 = *(_OWORD *)(v107 + 208);
        *(void *)(v106 + 224) = *(void *)(v107 + 224);
        *(_OWORD *)(v106 + 192) = v108;
        *(_OWORD *)(v106 + 208) = v109;
        if (*(char *)(v10 + 529) >= 1 && !*(unsigned char *)(v58 + 648)) {
          *(unsigned char *)(*(void *)(v58 + 632) + 40) = 2;
        }
        uint64_t v65 = (uint64_t)sub_1D0CEDD30(v10, v58);
        if (v65)
        {
          uint64_t v58 = (uint64_t)context;
          if (dword_1EB671A40 >= 3)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Frame %d: ManageDPB failed\n", *((_DWORD *)context + 163));
            syslog(27, "Frame %d: ManageDPB failed\n", *((_DWORD *)context + 163));
          }
          goto LABEL_681;
        }
        uint64_t v10 = v457;
        uint64_t v58 = (uint64_t)context;
        if (!*(unsigned char *)(v457 + 585))
        {
          *(_DWORD *)(*((void *)context + 79) + 36) = 0;
LABEL_218:
          int v68 = 0;
          *((_WORD *)v456 + 244) = 0;
          *(_DWORD *)(v457 + 10436) = 0;
LABEL_106:
          *(_DWORD *)(v10 + 10440) = v68;
          if (*(unsigned __int8 *)(v58 + 648) <= 2u)
          {
            uint64_t v65 = 0;
            *(_DWORD *)(v58 + 848) = *(_DWORD *)(v58 + 652);
            goto LABEL_681;
          }
          goto LABEL_137;
        }
        int v159 = (uint64_t *)sub_1D0C9A200(v457 + 9968, 1u);
        uint64_t v160 = *v159;
        int v161 = (std::__shared_weak_count *)v159[1];
        if (v161) {
          atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(unsigned char *)(v457 + 447)
          || *(unsigned char *)(v457 + 871)
          || (uint64_t v255 = *(void *)(v457 + 10400)) == 0
          || !*(unsigned char *)(v255 + 1776))
        {
          unint64_t v162 = (double *)(v457 + 472);
          if (!v160) {
            goto LABEL_208;
          }
        }
        else
        {
          unint64_t v162 = (double *)(v255 + 520);
          if (!v160) {
            goto LABEL_208;
          }
        }
        double v61 = *v162;
        *(float *)&double v61 = *v162;
        int v163 = *(_DWORD *)(v457 + 10424);
        *(float *)&a6 = (float)v163;
        LODWORD(a7) = 1169915904;
        *(float *)&double v61 = 6000.0 / *(float *)&v61;
        if (*(float *)&v61 <= (float)v163)
        {
          int v222 = *(char *)(v457 + 528);
          if (v222 < 5)
          {
            int v250 = 5 - v222;
            uint64_t v58 = (uint64_t)context;
            uint64_t v251 = *((void *)context + 79);
            uint64_t v252 = 1000 * *(void *)(v251 + 16) / *(int *)(v251 + 32)
                 - 1000 * *(void *)(v160 + 16) / *(int *)(v160 + 32);
            uint64_t v253 = *(int *)(v457 + 10428);
            int v254 = v163 / v250;
            if (v252 + v253 <= v254)
            {
              *(_DWORD *)(v251 + 36) = 0;
            }
            else
            {
              *(_DWORD *)(v251 + 36) = 1;
              *(_DWORD *)(v457 + 10428) = v253 - v254 + v252;
            }
          }
          else
          {
            if (dword_1EB671A40 >= 4)
            {
              uint64_t v223 = (FILE **)MEMORY[0x1E4F143C8];
              fwrite("Warning, frame acknowledgement not working properly!!!\n", 0x37uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              syslog(28, "Warning, frame acknowledgement not working properly!!!\n");
              if (dword_1EB671A40 >= 4)
              {
                fprintf(*v223, "Max # of references: %d, # of most recent STRs for prediction: %d.\n", 6, *(char *)(v457 + 528));
                syslog(28, "Max # of references: %d, # of most recent STRs for prediction: %d.\n", 6, *(char *)(v457 + 528));
                if (dword_1EB671A40 >= 4)
                {
                  int v224 = 6 - v222;
                  fprintf(*v223, "Only %d extra refs left for acknowledgement, too few (minimal 2 are needed)\n", v224);
                  syslog(28, "Only %d extra refs left for acknowledgement, too few (minimal 2 are needed)\n", v224);
                }
              }
            }
            unsigned int v225 = sub_1D0C9A200(v457 + 9968, 1u);
            uint64_t v58 = (uint64_t)context;
            uint64_t v226 = *((void *)context + 79);
            if (*v225) {
              *(_DWORD *)(v226 + 36) = 0;
            }
            else {
              *(_DWORD *)(v226 + 36) = 1;
            }
          }
          goto LABEL_209;
        }
LABEL_208:
        *(_DWORD *)(*((void *)context + 79) + 36) = 1;
LABEL_209:
        if (v161) {
          sub_1D0C4C984(v161);
        }
        goto LABEL_218;
      }
      v450 = (__int16 *)((char *)&unk_1D0DA5488 + 4 * *(int *)(v437 + 1608));
      int v449 = v450[1] - *v450;
    }
    *(_DWORD *)(v437 + 1648) = v449;
    goto LABEL_103;
  }
  uint64_t v65 = (uint64_t)sub_1D0CEDD30(v10, v400);
  if (v65)
  {
    if (dword_1EB671A40 < 3)
    {
LABEL_677:
      uint64_t v58 = (uint64_t)context;
      goto LABEL_681;
    }
LABEL_146:
    uint64_t v58 = (uint64_t)context;
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Frame %d: ManageDPB failed\n", *((_DWORD *)context + 163));
    syslog(27, "Frame %d: ManageDPB failed\n", *((_DWORD *)context + 163));
    goto LABEL_681;
  }
  uint64_t v65 = sub_1D0CEDE3C(v457, v453);
  if (v65)
  {
    uint64_t v58 = (uint64_t)context;
    if (dword_1EB671A40 >= 3) {
      goto LABEL_213;
    }
    goto LABEL_681;
  }
  dispatch_group_async_f(*(dispatch_group_t *)(v457 + 9912), *(dispatch_queue_t *)(v457 + 9840), context, (dispatch_function_t)sub_1D0CEDEE0);
LABEL_682:
  if (*((void *)&v470 + 1)) {
    sub_1D0C4C984(*((std::__shared_weak_count **)&v470 + 1));
  }
  if (!v65) {
    *(unsigned char *)(v457 + 224) = 0;
  }
  return v65;
}

void sub_1D0CEDCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    sub_1D0C4C984(a26);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_1D0CEDD30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 9968;
  if (*(unsigned char *)(a2 + 648))
  {
    sub_1D0C9A2F0(a1 + 9968, (_DWORD *)(a2 + 3056));
    sub_1D0C4C9F8(v4);
  }
  else
  {
    uint64_t v5 = -272;
    do
    {
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + v5 + 10280);
      *(_OWORD *)(a1 + v5 + 10272) = 0u;
      if (v6) {
        sub_1D0C4C984(v6);
      }
      v5 += 16;
    }
    while (v5);
    *(void *)(a1 + 10376) = *(unsigned int *)(a2 + 652);
    *(_DWORD *)(a1 + 10428) = 0;
  }
  uint64_t v7 = *(void *)(a2 + 632);
  *(unsigned char *)(v7 + 43) = 1;
  if (!*(unsigned char *)(v7 + 40)) {
    return 0;
  }
  uint64_t result = sub_1D0C4DE34(v4, *(void *)(a2 + 632), *(void *)(a2 + 640));
  if (result) {
    return result;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)(a2 + 632);
  int v11 = *(_DWORD *)(v10 + 1024);
  char v12 = *(unsigned char *)(v10 + 40);
  for (uint64_t i = a1 + 10000; !*(void *)i || *(_DWORD *)(*(void *)i + 1024) != v11; i += 16)
  {
    if (++v9 == 17) {
      return 0;
    }
  }
  if ((v9 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + v9 + 10272) = v12;
  return result;
}

uint64_t sub_1D0CEDE3C(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 9920);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 9832), 0xFFFFFFFFFFFFFFFFLL);
  std::mutex::lock((std::mutex *)(a1 + 9848));
  uint64_t v5 = *(void *)(a1 + 9792);
  uint64_t v6 = *(void *)(a1 + 9800);
  if (v5 == v6)
  {
LABEL_5:
    uint64_t v9 = 4294954385;
  }
  else
  {
    uint64_t v7 = a2;
    while (atomic_load((unsigned int *)(*(void *)v5 + 588)))
    {
      v5 += 8;
      if (v5 == v6) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(v4 + 8 * v7);
    *(void *)(v4 + 8 * v7) = *(void *)v5;
    *(void *)uint64_t v5 = v10;
  }
  std::mutex::unlock((std::mutex *)(a1 + 9848));
  return v9;
}

void sub_1D0CEDEE0(uint64_t a1)
{
  uint64_t v2 = sub_1D0CFDDA0((unsigned __int8 *)a1);
  if (v2 && dword_1EB671A40 >= 3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Frame %d: Compress failed\n", *(_DWORD *)(a1 + 652));
    syslog(27, "Frame %d: Compress failed\n", *(_DWORD *)(a1 + 652));
  }
  sub_1D0D005F8(a1, v2, v3, v4, v5);
}

void sub_1D0CEDF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 9848);
  std::mutex::lock((std::mutex *)(a1 + 9848));
  if (a3)
  {
    atomic_store(3u, (unsigned int *)(a3 + 588));
    *(_DWORD *)(a3 + 592) = a2;
    if (*(void *)(a1 + 9824))
    {
      uint64_t v9 = *(void *)(a1 + 9792);
      uint64_t v10 = *(void *)(a1 + 9800);
      if (v9 != v10)
      {
        int v11 = 0x7FFFFFFF;
        do
        {
          int v12 = atomic_load((unsigned int *)(*(void *)v9 + 588));
          if (v12 >= 2 && *(_DWORD *)(*(void *)v9 + 584) < v11) {
            int v11 = *(_DWORD *)(*(void *)v9 + 584);
          }
          v9 += 8;
        }
        while (v9 != v10);
LABEL_9:
        for (uint64_t i = *(unsigned __int8 ***)(a1 + 9792); i != *(unsigned __int8 ***)(a1 + 9800); ++i)
        {
          unsigned int v14 = atomic_load((unsigned int *)*i + 147);
          if (v14 == 3 && *((_DWORD *)*i + 146) == v11)
          {
            sub_1D0D00E00(*i, *(void (**)(void, void, void, void, void, void, void))(a1 + 10448), *(void *)(a1 + 10456));
            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 9832));
            ++v11;
            goto LABEL_9;
          }
        }
      }
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 9824));
    }
    else
    {
      sub_1D0D00E00((unsigned __int8 *)a3, *(void (**)(void, void, void, void, void, void, void))(a1 + 10448), *(void *)(a1 + 10456));
    }
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void, void, uint64_t *))(a1 + 10448);
    uint64_t v16 = *(void *)(a1 + 10456);
    uint64_t v17 = 0;
    int v18 = 0;
    v15(v16, a4, a2, 0, 0, 0, &v17);
    if (v18) {
      sub_1D0C4C984(v18);
    }
  }
  std::mutex::unlock(v8);
}

void sub_1D0CEE0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0CEE110(uint64_t a1, unint64_t a2, const char *a3, int a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x10uLL, "%d", a4);
  char v8 = 0;
  return sub_1D0C636C0(a1 + 360, a2, a3, __str, 0xFFFFFFFFLL, (uint64_t)&v8);
}

uint64_t sub_1D0CEE1AC(uint64_t a1, unint64_t a2, const char *a3, double a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x10uLL, "%f", a4);
  char v8 = 0;
  return sub_1D0C636C0(a1 + 360, a2, a3, __str, 0xFFFFFFFFLL, (uint64_t)&v8);
}

uint64_t sub_1D0CEE248(uint64_t a1, uint64_t a2, char a3)
{
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = 1;
  uint64_t result = sub_1D0CE6F94(a2 + 4, a1 + 360);
  if (result) {
    return result;
  }
  *(unsigned char *)(a2 + 200) = a3;
  int v7 = *(unsigned __int8 *)(a1 + 656);
  *(_WORD *)(a2 + 201) = v7;
  *(unsigned char *)(a2 + 222) = *(unsigned char *)(a1 + 650) - 8;
  *(unsigned char *)(a2 + 223) = *(unsigned char *)(a1 + 651) - 8;
  if (*(char *)(a1 + 529) <= 0) {
    char v8 = 6;
  }
  else {
    char v8 = 12;
  }
  *(unsigned char *)(a2 + 224) = v8;
  *(unsigned char *)(a2 + 225) = 0;
  uint64_t v9 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v10 = a2 + v9;
  *(unsigned char *)(v10 + 226) = *(unsigned char *)(*(void *)(a1 + 9736) + v9 + 203);
  *(unsigned char *)(v10 + 233) = *(unsigned char *)(*(void *)(a1 + 9736) + v9 + 210);
  *(_DWORD *)(a2 + 4 * v9 + 240) = 0;
  LOBYTE(v10) = *(unsigned char *)(a1 + 537);
  char v11 = v10 - 3;
  *(unsigned char *)(a2 + 268) = v10 - 3;
  *(unsigned char *)(a2 + 269) = *(unsigned char *)(a1 + 538) - v10;
  LOBYTE(v10) = *(unsigned char *)(a1 + 539);
  *(unsigned char *)(a2 + 270) = v10 - 2;
  *(unsigned char *)(a2 + 271) = *(unsigned char *)(a1 + 540) - v10;
  *(unsigned char *)(a2 + 272) = *(unsigned char *)(a1 + 542);
  *(unsigned char *)(a2 + 273) = *(unsigned char *)(a1 + 541);
  *(unsigned char *)(a2 + 274) = *(void *)(a1 + 8136) != 0;
  *(unsigned char *)(a2 + 276) = 0;
  *(unsigned char *)(a2 + 277) = *(unsigned char *)(a1 + 572) != 0;
  *(unsigned char *)(a2 + 278) = 0;
  if (*(unsigned char *)(a1 + 952)) {
    int v12 = *(_DWORD *)(a1 + 7868) + *(_DWORD *)(a1 + 7872);
  }
  else {
    int v12 = *(char *)(a1 + 528);
  }
  *(_DWORD *)(a2 + 288) = v12;
  *(unsigned char *)(a2 + 320) = *(char *)(a1 + 529) > 0;
  *(unsigned char *)(a2 + 396) = *(unsigned char *)(a1 + 583);
  *(unsigned char *)(a2 + 397) = 0;
  unsigned __int16 v13 = *(_WORD *)(a1 + 772);
  *(_WORD *)(a2 + 1984) = v13;
  unsigned __int16 v14 = *(_WORD *)(a1 + 776);
  *(_WORD *)(a2 + 1986) = v14;
  int v15 = *(unsigned __int8 *)(a1 + 760);
  *(unsigned char *)(a2 + 1991) = v15;
  __int16 v16 = *(_WORD *)(a1 + 764);
  *(unsigned char *)(a2 + 1992) = v16;
  __int16 v17 = *(_WORD *)(a1 + 766);
  *(unsigned char *)(a2 + 1993) = v17;
  __int16 v18 = *(_WORD *)(a1 + 768);
  *(unsigned char *)(a2 + 1994) = v18;
  __int16 v19 = *(_WORD *)(a1 + 762);
  *(unsigned char *)(a2 + 1995) = v19;
  *(unsigned char *)(a2 + 1996) = v19;
  if (v13 | v14 || *(unsigned char *)(a2 + 1988) || *(unsigned char *)(a2 + 1989)) {
    goto LABEL_11;
  }
  BOOL v20 = 1;
  if (*(unsigned char *)(a2 + 1990) != 5
    || v15
    || v16 != 2
    || v17 != 2
    || v18 != 2
    || (_BYTE)v19)
  {
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 1997)
    || *(unsigned char *)(a2 + 1998)
    || *(unsigned char *)(a2 + 1999)
    || *(_WORD *)(a2 + 2000)
    || *(_WORD *)(a2 + 2002)
    || *(_WORD *)(a2 + 2004)
    || *(_WORD *)(a2 + 2006)
    || *(unsigned char *)(a2 + 2008)
    || *(_DWORD *)(a2 + 2012)
    || *(_DWORD *)(a2 + 2016)
    || *(unsigned char *)(a2 + 2020)
    || *(_DWORD *)(a2 + 2024)
    || *(unsigned char *)(a2 + 2028)
    || *(unsigned char *)(a2 + 2072)
    || *(unsigned char *)(a2 + 2073)
    || *(unsigned char *)(a2 + 2074)
    || *(unsigned char *)(a2 + 2075)
    || *(_DWORD *)(a2 + 2076)
    || *(_DWORD *)(a2 + 2080)
    || *(_DWORD *)(a2 + 2084)
    || *(_DWORD *)(a2 + 2088))
  {
LABEL_11:
    BOOL v20 = 1;
  }
  else
  {
    BOOL v20 = *(_DWORD *)(a2 + 2092) != 0;
  }
LABEL_12:
  *(unsigned char *)(a2 + 398) = v20;
  *(unsigned char *)(a2 + 399) = 0;
  if (*(unsigned __int8 *)(a1 + 481) > 1u) {
    goto LABEL_37;
  }
  int v21 = *(_DWORD *)(a1 + 928);
  double v22 = *(double *)(a1 + 472) * (double)v21 + 0.5;
  unsigned int v23 = *(_DWORD *)(a1 + 548);
  *(unsigned char *)(a2 + 2008) = 1;
  *(unsigned char *)(a2 + 2028) = 1;
  *(_DWORD *)(a2 + 2012) = v21;
  *(_DWORD *)(a2 + 2016) = (int)v22;
  *(unsigned char *)(a2 + 2032) = 1;
  *(_WORD *)(a2 + 2039) = 0;
  *(_WORD *)(a2 + 2042) = 5911;
  *(unsigned char *)(a2 + 2044) = 23;
  if (v9)
  {
    if (dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "DoVi supports only 1 sublayer. But it requres %d.\n", v9 + 1);
      syslog(27, "DoVi supports only 1 sublayer. But it requres %d.\n", *(unsigned __int8 *)(a2 + 1) + 1);
    }
    return 4294954387;
  }
  int32x2_t v24 = vmul_s32(vdup_n_s32(v23), (int32x2_t)0x2800000004);
  sub_1D0CE875C((char **)(a2 + 2048), 1uLL);
  unint64_t v25 = 0;
  uint64_t v26 = *(void *)(a2 + 2048);
  do
  {
    uint64_t v27 = v26 + 56 * v25;
    *(_WORD *)uint64_t v27 = 257;
    *(_WORD *)(v27 + 6) = 0;
    uint64_t v29 = (void **)(v27 + 8);
    uint64_t v28 = *(void *)(v27 + 8);
    uint64_t v32 = *(void *)(v27 + 16);
    uint64_t v31 = (void **)(v27 + 16);
    uint64_t v30 = v32;
    uint64_t v33 = v32 - v28;
    if (v32 != v28)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v33 >> 2) < 2) {
        goto LABEL_24;
      }
      uint64_t v34 = (void *)(v28 + 20);
      goto LABEL_23;
    }
    uint64_t v35 = v26 + 56 * v25;
    uint64_t v37 = *(void *)(v35 + 24);
    uint64_t v36 = (void *)(v35 + 24);
    uint64_t v38 = v37 - v30;
    if (v37 != v30)
    {
      *(void *)uint64_t v30 = 0;
      *(void *)(v30 + 8) = 0;
      *(_DWORD *)(v30 + 16) = 0;
      uint64_t v34 = (void *)(v30 + 20);
LABEL_23:
      *uint64_t v31 = v34;
      goto LABEL_24;
    }
    unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * (v38 >> 2);
    uint64_t v42 = 2 * v41;
    if (2 * v41 <= 1) {
      uint64_t v42 = 1;
    }
    if (v41 >= 0x666666666666666) {
      unint64_t v43 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v43 = v42;
    }
    int v44 = sub_1D0CE8AAC(v43);
    *int v44 = 0;
    v44[1] = 0;
    *((_DWORD *)v44 + 4) = 0;
    int v46 = (char *)*v31;
    unsigned int v47 = (char *)*v29;
    int v48 = v44;
    if (*v31 != *v29)
    {
      do
      {
        long long v49 = *(_OWORD *)(v46 - 20);
        *((_DWORD *)v48 - 1) = *((_DWORD *)v46 - 1);
        *(_OWORD *)((char *)v48 - 20) = v49;
        int v48 = (void *)((char *)v48 - 20);
        v46 -= 20;
      }
      while (v46 != v47);
      int v46 = (char *)*v29;
    }
    *uint64_t v29 = v48;
    *uint64_t v31 = (char *)v44 + 20;
    *uint64_t v36 = (char *)v44 + 20 * v45;
    if (v46) {
      operator delete(v46);
    }
LABEL_24:
    uint64_t v26 = *(void *)(a2 + 2048);
    int v39 = *(int32x2_t **)(v26 + 56 * v25 + 8);
    int32x2_t v24 = vmin_s32(vdup_n_s32(1100 * dword_1D0D80968[3 * *(unsigned __int8 *)(a2 + 156) - 3 + *(unsigned __int8 *)(a2 + 163)]), v24);
    int32x2_t *v39 = vadd_s32(vshl_s32(v24, (int32x2_t)0xFFFFFFFCFFFFFFFALL), (int32x2_t)-1);
    v39[1] = 0;
    v39[2].i8[0] = 0;
  }
  while (v25++ < *(unsigned __int8 *)(a2 + 1));
  char v11 = *(unsigned char *)(a2 + 268);
  int v7 = *(unsigned __int8 *)(a2 + 201);
LABEL_37:
  *(unsigned char *)(a2 + 212) = 0;
  *(void *)(a2 + 214) = 0;
  int v50 = 1 << *(unsigned char *)(a1 + 537);
  int v51 = *(__int16 *)(a1 + 466);
  int v52 = v50 - 1;
  int v53 = -v50;
  int v54 = (v50 - 1 + v51) & -v50;
  *(_DWORD *)(a2 + 204) = v54;
  int v55 = *(__int16 *)(a1 + 468);
  int v56 = (v52 + v55) & v53;
  *(_DWORD *)(a2 + 208) = v56;
  int v57 = ((8 << v11) & 0xFFF8) - 1;
  if ((v57 & v51) != 0)
  {
    if ((v7 - 1) >= 2) {
      int v58 = 1;
    }
    else {
      int v58 = 2;
    }
    *(_WORD *)(a2 + 216) = (v54 - v51) / v58;
    *(unsigned char *)(a2 + 212) = 1;
  }
  if ((v57 & v55) != 0)
  {
    if (v7 == 1) {
      int v59 = 2;
    }
    else {
      int v59 = 1;
    }
    *(_WORD *)(a2 + 220) = (v56 - v55) / v59;
    *(unsigned char *)(a2 + 212) = 1;
  }
  char v60 = *(unsigned char *)(a2 + 222);
  *(unsigned char *)(a2 + 2096) = v60 + 8;
  *(unsigned char *)(a2 + 2097) = 6 * v60;
  char v61 = *(unsigned char *)(a2 + 223);
  *(unsigned char *)(a2 + 2098) = v61 + 8;
  *(unsigned char *)(a2 + 2099) = 6 * v61;
  *(_DWORD *)(a2 + 2108) = 16 << *(unsigned char *)(a2 + 224);
  char v62 = v11 + 3;
  *(unsigned char *)(a2 + 2112) = v62;
  char v63 = *(unsigned char *)(a2 + 269) + v62;
  *(unsigned char *)(a2 + 2113) = v63;
  int v64 = 1 << v63;
  *(unsigned char *)(a2 + 2117) = 1 << v63;
  unsigned __int8 v65 = *(unsigned char *)(a2 + 270) + 2;
  *(unsigned char *)(a2 + 2114) = v65;
  *(unsigned char *)(a2 + 2115) = *(unsigned char *)(a2 + 271) + v65;
  unsigned int v66 = v7 - 1;
  char v67 = v65;
  if (v65 <= 3u) {
    char v67 = 3;
  }
  unsigned __int8 v68 = v67 - 1;
  if (v66 >= 2) {
    unsigned __int8 v69 = v65;
  }
  else {
    unsigned __int8 v69 = v68;
  }
  *(unsigned char *)(a2 + 2116) = v69;
  *(_DWORD *)(a2 + 2120) = (v54 + v64 - 1) >> v63;
  *(_DWORD *)(a2 + 2124) = (v56 + v64 - 1) >> v63;
  if (*(unsigned char *)(a2 + 278))
  {
    *(unsigned char *)(a2 + 284) = *(unsigned char *)(a2 + 279) + 1;
    *(unsigned char *)(a2 + 285) = *(unsigned char *)(a2 + 280) + 1;
    char v70 = *(unsigned char *)(a2 + 281) + 3;
    *(unsigned char *)(a2 + 286) = v70;
    *(unsigned char *)(a2 + 287) = *(unsigned char *)(a2 + 282) + v70;
  }
  unint64_t v71 = *(unsigned int *)(a2 + 288);
  if (v71)
  {
    double v72 = (uint64_t *)(a2 + 296);
    sub_1D0C63C90((void **)(a2 + 296), v71);
    if (*(_DWORD *)(a2 + 288))
    {
      unint64_t v73 = 0;
      uint64_t v74 = a1 + 964;
      do
      {
        uint64_t v75 = *v72;
        uint64_t v76 = *v72 + 248 * v73;
        memset(v123, 0, 41);
        memset(v122, 0, sizeof(v122));
        *(_OWORD *)((char *)&v123[2] + 10) = 0u;
        *(_OWORD *)((char *)&v123[3] + 10) = 0u;
        *(_OWORD *)((char *)&v123[4] + 10) = 0u;
        memset((char *)&v123[5] + 10, 0, 28);
        int v77 = *(unsigned __int8 *)(a1 + 108 * (int)v73 + 1044);
        *(unsigned char *)(v76 + 163) = v77;
        if (v77)
        {
          uint64_t v78 = v75 + 248 * v73;
          *(_DWORD *)(v78 + 172) = 0;
          float v79 = (_WORD *)(v78 + 172);
          *((_DWORD *)v79 - 2) = 0;
          uint64_t v80 = a1 + 108 * (int)v73;
          int v81 = *(char *)(v80 + 1045);
          *((unsigned char *)v79 - 4) = v81 < 1;
          if (v81 < 0) {
            int v81 = -v81;
          }
          *(v79 - 1) = v81 - 1;
          uint64_t v82 = *(unsigned __int8 *)(v80 + 1046);
          BYTE2(v123[2]) = v82;
          if (v82)
          {
            int v83 = 0;
            uint64_t v84 = 0;
            int v85 = 0;
            uint64_t v86 = a1 + 1047 + 108 * (int)v73;
            do
            {
              char v87 = *(unsigned char *)(v86 + v84);
              v85 |= (v87 & 1) << v84;
              *float v79 = v85;
              if ((v87 & 1) == 0)
              {
                v83 |= ((*(unsigned __int8 *)(v86 + v84) >> 1) & 1) << v84;
                v79[1] = v83;
              }
              if (v82 - 1 == v84) {
                LOWORD(v88) = 0;
              }
              else {
                int v88 = *(_DWORD *)(v74 + 108 * (int)(((v73 << 32) - 0x100000000) >> 32) + 4 * v84);
              }
              *((_WORD *)v123 + v84++) = v88;
            }
            while (v82 != v84);
          }
        }
        else
        {
          uint64_t v89 = v75 + 248 * v73;
          *(_WORD *)(v89 + 176) = 0;
          uint64_t v90 = v89 + 176;
          *(_DWORD *)(v90 + 66) = 0;
          int v91 = (_WORD *)(v90 + 66);
          uint64_t v92 = *(unsigned __int8 *)(a1 + 108 * (int)v73 + 961);
          if (*(unsigned char *)(a1 + 108 * (int)v73 + 961))
          {
            unsigned __int8 v93 = 0;
            unsigned __int8 v94 = 0;
            int v95 = (int *)(v74 + 108 * (int)v73);
            int v96 = (_WORD *)(v90 + 68);
            uint64_t v97 = *(unsigned __int8 *)(a1 + 108 * (int)v73 + 961);
            int v98 = v95;
            do
            {
              int v99 = *v98++;
              if (v99 < 0) {
                *(unsigned char *)uint64_t v90 = ++v93;
              }
              else {
                *(unsigned char *)(v90 + 1) = ++v94;
              }
              --v97;
            }
            while (v97);
            if (v93)
            {
              uint64_t v100 = 0;
              int v101 = 0;
              __int16 v102 = 0;
              do
              {
                uint64_t v103 = 0;
                int v104 = 0x7FFFFFFF;
                int v105 = -1;
                do
                {
                  int v106 = v95[v103];
                  if (v106 < 0 && v101 < -v106 && v104 > -v106)
                  {
                    int v104 = -v106;
                    int v105 = v103;
                  }
                  ++v103;
                }
                while (v92 != v103);
                uint64_t v107 = a1 + 108 * (int)v73 + 956;
                int v108 = *(_DWORD *)(v107 + 4 * v105 + 8);
                *(_WORD *)(v75 + 248 * v73 + 2 * v100 + 178) = v102 + ~(_WORD)v108;
                *v91 |= *(unsigned __int8 *)(v107 + v105 + 72) << v100;
                int v101 = -v108;
                ++v100;
                __int16 v102 = v108;
              }
              while (v100 != v93);
            }
            if (v94)
            {
              uint64_t v109 = 0;
              int v110 = 0;
              do
              {
                uint64_t v111 = 0;
                int v112 = 0x7FFFFFFF;
                int v113 = -1;
                do
                {
                  int v114 = v95[v111];
                  BOOL v115 = v114 > v110;
                  BOOL v116 = v114 < v112;
                  BOOL v117 = !v115 || !v116;
                  if (v115 && v116) {
                    int v118 = v95[v111];
                  }
                  else {
                    int v118 = v112;
                  }
                  if (v117) {
                    int v119 = v113;
                  }
                  else {
                    int v119 = v111;
                  }
                  if (v114 >= 1)
                  {
                    int v112 = v118;
                    int v113 = v119;
                  }
                  ++v111;
                }
                while (v92 != v111);
                uint64_t v120 = a1 + 108 * (int)v73 + 956;
                int v121 = *(_DWORD *)(v120 + 4 * v113 + 8);
                *(_WORD *)(v75 + 248 * v73 + 2 * v109 + 210) = v121 + ~(_WORD)v110;
                *v96 |= *(unsigned __int8 *)(v120 + v113 + 72) << v109++;
                int v110 = v121;
              }
              while (v109 != v94);
            }
          }
        }
        sub_1D0C64A10(v76, (uint64_t)v122);
        ++v73;
      }
      while (v73 < *(unsigned int *)(a2 + 288));
    }
  }
  return 0;
}

uint64_t sub_1D0CEEC2C(uint64_t result, uint64_t a2, char a3)
{
  *(unsigned char *)a2 = a3;
  *(unsigned char *)(a2 + 1) = *(unsigned char *)(*(void *)(result + 9752) + 200);
  *(_WORD *)(a2 + 2) = 0;
  *(unsigned char *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(result + 508);
  *(unsigned char *)(a2 + 6) = 0;
  int v4 = *(char *)(result + 530);
  if (v4 <= 1) {
    LOBYTE(v4) = 1;
  }
  char v5 = v4 - 1;
  *(unsigned char *)(a2 + 7) = v5;
  *(unsigned char *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 9) = *(unsigned char *)(result + 488) - 26;
  *(_WORD *)(a2 + 10) = 0;
  int v6 = *(char *)(result + 492);
  *(unsigned char *)(a2 + 12) = v6 > 0;
  if (v6 < 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(unsigned __int8 *)(result + 496);
  }
  *(unsigned char *)(a2 + 13) = v7;
  *(_WORD *)(a2 + 14) = *(_WORD *)(result + 490);
  *(unsigned char *)(a2 + 16) = *(unsigned __int8 *)(result + 481) < 4u;
  int v8 = *(unsigned __int8 *)(result + 713);
  *(unsigned char *)(a2 + 17) = *(unsigned char *)(result + 712) | v8;
  if (v8) {
    BOOL v9 = *(unsigned char *)(result + 594) != 0;
  }
  else {
    BOOL v9 = 0;
  }
  *(unsigned char *)(a2 + 18) = v9;
  *(unsigned char *)(a2 + 19) = *(unsigned char *)(result + 430);
  BOOL v10 = (*(unsigned char *)(result + 544) & 4) != 0;
  *(unsigned char *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 21) = v10;
  *(_WORD *)(a2 + 28) = 256;
  if (*(unsigned char *)(result + 696)) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = *(unsigned char *)(result + 482) != 0;
  }
  *(unsigned char *)(a2 + 30) = v11;
  int v12 = *(unsigned __int8 *)(result + 561);
  *(unsigned char *)(a2 + 31) = *(unsigned char *)(result + 561) == 0;
  if (v12) {
    *(_WORD *)(a2 + 32) = 0;
  }
  if (*(unsigned char *)(result + 648)) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = *(unsigned char *)(result + 649) != 0;
  }
  *(unsigned char *)(a2 + 1608) = v13;
  unsigned __int16 v14 = *(const void **)(result + 8136);
  *(unsigned char *)(a2 + 34) = v14 != 0;
  if (v14)
  {
    memcpy((void *)(a2 + 40), v14, 0x618uLL);
    operator new[]();
  }
  *(_DWORD *)(a2 + 1610) = 0;
  *(_DWORD *)(a2 + 1636) = *(unsigned __int8 *)(*(void *)(result + 9752) + 2113) - v7;
  return result;
}

__n128 sub_1D0CEEF10(void *a1, unint64_t a2, unint64_t a3)
{
  int v6 = (__n128 *)operator new(0x50uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1F26F1660;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  result.n128_u64[0] = a2;
  result.n128_u64[1] = a3;
  v6[4].n128_u64[0] = (unint64_t)sub_1D0D027DC;
  v6[4].n128_u64[1] = (unint64_t)nullsub_24;
  v6[1].n128_u8[8] = 0;
  v6[3] = result;
  *a1 = (char *)v6 + 24;
  a1[1] = v6;
  return result;
}

void *sub_1D0CEEFB0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v4) {
    sub_1D0C4C984(v4);
  }
  return a1;
}

void sub_1D0CEEFF4(long long *a1, unint64_t a2)
{
  int v4 = *(void **)a1;
  double v3 = (void *)*((void *)a1 + 1);
  unint64_t v5 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      __int16 v16 = &v4[a2];
      while (v3 != v16)
        sub_1D0CE98F4(--v3, 0);
      *((void *)a1 + 1) = v16;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    uint64_t v7 = *((void *)a1 + 2);
    if (a2 - v5 <= (v7 - (uint64_t)v3) >> 3)
    {
      bzero(*((void **)a1 + 1), 8 * v6);
      *((void *)a1 + 1) = &v3[v6];
    }
    else
    {
      if (a2 >> 61) {
        sub_1D0C8D71C();
      }
      uint64_t v8 = v7 - (void)v4;
      uint64_t v9 = v8 >> 2;
      if (v8 >> 2 <= a2) {
        uint64_t v9 = a2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >> 61) {
        sub_1D0C6AC2C();
      }
      BOOL v11 = (char *)operator new(8 * v10);
      int v12 = &v11[8 * v5];
      BOOL v13 = &v11[8 * v10];
      bzero(v12, 8 * v6);
      unsigned __int16 v14 = &v12[8 * v6];
      while (v3 != v4)
      {
        uint64_t v15 = *--v3;
        void *v3 = 0;
        *((void *)v12 - 1) = v15;
        v12 -= 8;
      }
      long long v17 = *a1;
      *(void *)a1 = v12;
      *((void *)a1 + 1) = v14;
      *((void *)a1 + 2) = v13;
      __int16 v18 = (void *)*((void *)&v17 + 1);
      __int16 v19 = (void *)v17;
      while (v18 != v19)
        sub_1D0CE98F4(--v18, 0);
      if (v19)
      {
        operator delete(v19);
      }
    }
  }
}

void sub_1D0CEF160()
{
}

void sub_1D0CEF4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void *a14, _Unwind_Exception *exception_object, uint64_t a16)
{
  unint64_t v25 = *v17;
  if (*v17)
  {
    v16[780] = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)v16[774];
  if (v26)
  {
    v16[775] = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v24;
  if (*v24)
  {
    v16[772] = v27;
    operator delete(v27);
  }
  uint64_t v28 = (void *)v16[764];
  if (v28)
  {
    v16[765] = v28;
    operator delete(v28);
  }
  uint64_t v29 = (void *)v16[761];
  if (v29)
  {
    v16[762] = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)v16[758];
  if (v30)
  {
    v16[759] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)v16[755];
  if (v31)
  {
    v16[756] = v31;
    operator delete(v31);
  }
  uint64_t v32 = 0;
  while (1)
  {
    uint64_t v33 = (void *)v16[v32 + 752];
    if (v33)
    {
      v16[v32 + 753] = v33;
      operator delete(v33);
    }
    v32 -= 3;
    if (v32 == -6)
    {
      uint64_t v34 = 0;
      while (1)
      {
        uint64_t v35 = (void *)v16[v34 + 746];
        if (v35)
        {
          v16[v34 + 747] = v35;
          operator delete(v35);
        }
        v34 -= 3;
        if (v34 == -9)
        {
          uint64_t v36 = (void *)v16[737];
          if (v36)
          {
            v16[738] = v36;
            operator delete(v36);
          }
          uint64_t v37 = (void *)v16[734];
          if (v37)
          {
            v16[735] = v37;
            operator delete(v37);
          }
          uint64_t v38 = (void *)v16[731];
          if (v38)
          {
            v16[732] = v38;
            operator delete(v38);
          }
          int v39 = (void *)v16[728];
          if (v39)
          {
            v16[729] = v39;
            operator delete(v39);
          }
          int v40 = (void *)v16[725];
          if (v40)
          {
            v16[726] = v40;
            operator delete(v40);
          }
          unint64_t v41 = (void *)v16[722];
          if (v41)
          {
            v16[723] = v41;
            operator delete(v41);
          }
          uint64_t v42 = (void *)v16[719];
          if (v42)
          {
            v16[720] = v42;
            operator delete(v42);
          }
          unint64_t v43 = *v18;
          if (*v18)
          {
            v16[717] = v43;
            operator delete(v43);
          }
          int v44 = (void *)v16[712];
          if (v44)
          {
            v16[713] = v44;
            operator delete(v44);
          }
          uint64_t v45 = (void *)v16[709];
          if (v45)
          {
            v16[710] = v45;
            operator delete(v45);
          }
          int v46 = *v22;
          if (*v22)
          {
            v16[707] = v46;
            operator delete(v46);
          }
          unsigned int v47 = (void *)v16[697];
          if (v47)
          {
            v16[698] = v47;
            operator delete(v47);
          }
          int v48 = *v21;
          if (*v21)
          {
            v16[695] = v48;
            operator delete(v48);
          }
          long long v49 = (void *)v16[688];
          if (v49)
          {
            v16[689] = v49;
            operator delete(v49);
          }
          int v50 = (void *)v16[685];
          if (v50)
          {
            v16[686] = v50;
            operator delete(v50);
          }
          int v51 = (void *)v16[682];
          if (v51)
          {
            v16[683] = v51;
            operator delete(v51);
          }
          int v52 = (void *)v16[679];
          if (v52)
          {
            v16[680] = v52;
            operator delete(v52);
          }
          int v53 = *v20;
          if (*v20)
          {
            v16[677] = v53;
            operator delete(v53);
          }
          a16 = a10;
          sub_1D0CE9D84((uint64_t **)&a16);
          int v54 = (void *)v16[615];
          if (v54)
          {
            v16[616] = v54;
            operator delete(v54);
          }
          int v55 = (void *)v16[612];
          if (v55)
          {
            v16[613] = v55;
            operator delete(v55);
          }
          int v56 = *v23;
          if (*v23)
          {
            v16[610] = v56;
            operator delete(v56);
          }
          uint64_t v57 = 544;
          while (1)
          {
            int v58 = (std::__shared_weak_count *)v16[v57];
            if (v58) {
              sub_1D0C4C984(v58);
            }
            v57 -= 2;
            if (v57 == 512)
            {
              while (1)
              {
                int v59 = (std::__shared_weak_count *)v16[v57];
                if (v59) {
                  sub_1D0C4C984(v59);
                }
                v57 -= 2;
                if (v57 == 480)
                {
                  while (1)
                  {
                    char v60 = (std::__shared_weak_count *)v16[v57];
                    if (v60) {
                      sub_1D0C4C984(v60);
                    }
                    v57 -= 2;
                    if (v57 == 448)
                    {
                      while (1)
                      {
                        char v61 = (std::__shared_weak_count *)v16[v57];
                        if (v61) {
                          sub_1D0C4C984(v61);
                        }
                        v57 -= 2;
                        if (v57 == 416)
                        {
                          while (1)
                          {
                            char v62 = (std::__shared_weak_count *)v16[v57];
                            if (v62) {
                              sub_1D0C4C984(v62);
                            }
                            v57 -= 2;
                            if (v57 == 384)
                            {
                              uint64_t v63 = *v19;
                              *__int16 v19 = 0;
                              if (v63) {
                                (*(void (**)(uint64_t))(*(void *)v63 + 16))(v63);
                              }
                              int v64 = (std::__shared_weak_count *)v16[378];
                              if (v64) {
                                sub_1D0C4C984(v64);
                              }
                              unsigned __int8 v65 = (std::__shared_weak_count *)v16[374];
                              if (v65) {
                                sub_1D0C4C984(v65);
                              }
                              unsigned int v66 = (void *)v16[316];
                              if (v66)
                              {
                                v16[317] = v66;
                                operator delete(v66);
                              }
                              char v67 = (void *)v16[313];
                              if (v67)
                              {
                                v16[314] = v67;
                                operator delete(v67);
                              }
                              unsigned __int8 v68 = *a11;
                              if (*a11)
                              {
                                v16[311] = v68;
                                operator delete(v68);
                              }
                              uint64_t v69 = 0;
                              while (1)
                              {
                                char v70 = (void *)v16[v69 + 198];
                                if (v70)
                                {
                                  v16[v69 + 199] = v70;
                                  operator delete(v70);
                                }
                                v69 -= 3;
                                if (v69 == -48)
                                {
                                  unint64_t v71 = *a12;
                                  if (*a12)
                                  {
                                    v16[129] = v71;
                                    operator delete(v71);
                                  }
                                  double v72 = *a13;
                                  if (*a13)
                                  {
                                    v16[104] = v72;
                                    operator delete(v72);
                                  }
                                  unint64_t v73 = (std::__shared_weak_count *)v16[80];
                                  if (v73) {
                                    sub_1D0C4C984(v73);
                                  }
                                  uint64_t v74 = (std::__shared_weak_count *)v16[78];
                                  if (v74) {
                                    sub_1D0C4C984(v74);
                                  }
                                  sub_1D0CC70E8(a14);
                                  uint64_t v75 = (std::__shared_weak_count *)v16[8];
                                  if (v75) {
                                    sub_1D0C4C984(v75);
                                  }
                                  uint64_t v76 = (std::__shared_weak_count *)v16[6];
                                  if (v76) {
                                    sub_1D0C4C984(v76);
                                  }
                                  int v77 = (std::__shared_weak_count *)v16[4];
                                  if (v77) {
                                    sub_1D0C4C984(v77);
                                  }
                                  MEMORY[0x1D25F0230](v16, 0x10F0C40ED279F69);
                                  _Unwind_Resume(a1);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1D0CEF890(uint64_t a1)
{
  int v2 = 0;
  uint64_t v3 = *(void *)(a1 + 9752);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 269) + 1;
  unint64_t v5 = &byte_1D0DA1660;
  do
  {
    int v6 = *v5++;
    v2 += v6;
    --v4;
  }
  while (v4);
  unint64_t v7 = (*(_DWORD *)(v3 + 2120) * v2 * *(_DWORD *)(v3 + 2124));
  *(_DWORD *)(a1 + 216) = v2;
  *(_DWORD *)(a1 + 220) = v7;
  uint64_t v9 = *(unsigned char **)(a1 + 192);
  uint64_t v8 = *(char **)(a1 + 200);
  unint64_t v10 = (v8 - v9) >> 5;
  if (v7 <= v10)
  {
    if (v7 >= v10) {
      return;
    }
    BOOL v20 = &v9[32 * v7];
    goto LABEL_21;
  }
  unint64_t v11 = v7 - v10;
  uint64_t v12 = *(void *)(a1 + 208);
  if (v7 - v10 <= (v12 - (uint64_t)v8) >> 5)
  {
    bzero(*(void **)(a1 + 200), 32 * v11);
    BOOL v20 = &v8[32 * v11];
LABEL_21:
    *(void *)(a1 + 200) = v20;
    return;
  }
  uint64_t v13 = v12 - (void)v9;
  if (v13 >> 4 > v7) {
    unint64_t v7 = v13 >> 4;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v7;
  }
  if (v14 >> 59) {
    sub_1D0C6AC2C();
  }
  uint64_t v15 = (char *)operator new(32 * v14);
  __int16 v16 = &v15[32 * v10];
  long long v17 = &v15[32 * v14];
  bzero(v16, 32 * v11);
  __int16 v18 = &v16[32 * v11];
  if (v8 != v9)
  {
    do
    {
      long long v19 = *((_OWORD *)v8 - 1);
      *((_OWORD *)v16 - 2) = *((_OWORD *)v8 - 2);
      *((_OWORD *)v16 - 1) = v19;
      v16 -= 32;
      v8 -= 32;
    }
    while (v8 != v9);
    uint64_t v8 = *(char **)(a1 + 192);
  }
  *(void *)(a1 + 192) = v16;
  *(void *)(a1 + 200) = v18;
  *(void *)(a1 + 208) = v17;
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_1D0CEF9EC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 756))
  {
    v11[0] = 0;
    setlocale(0, (const char *)&unk_1D0DB7035);
    time(v11);
    localtime_r(v11, (tm *)v12);
    strftime(v13, 0x14uLL, "%m%d%g_%H%M%S", (const tm *)v12);
    strcpy((char *)v11, "/private/var/logs/mediaserverd/VideoProcessing");
    if (stat((const char *)v11, v12)) {
      mkdir((const char *)v11, 0x1FFu);
    }
    snprintf((char *)v12, 0x200uLL, "%s/LrpEnc_%s_FrameStats.txt", (const char *)v11, v13);
    char v10 = 0;
    sub_1D0C636C0(a1 + 360, 0xFE98FF5FC68FF9F7, "logfile", (char *)v12, 0xFFFFFFFFLL, (uint64_t)&v10);
    snprintf((char *)v12, 0x200uLL, "%s/LrpEnc_%s_Bitstream.hevc", (const char *)v11, v13);
    char v10 = 0;
    sub_1D0C636C0(a1 + 360, 0xAF63E24C8601F6BELL, "o", (char *)v12, 0xFFFFFFFFLL, (uint64_t)&v10);
    if (*(int *)(a1 + 756) >= 2)
    {
      snprintf((char *)v12, 0x200uLL, "%s/LrpEnc_%s_SrcYuv.yuv", (const char *)v11, v13);
      int v2 = fopen((const char *)v12, "wb");
      if (!v2 && dword_1EB671A40 >= 3)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open file '%s'\n", (const char *)v12);
        syslog(27, "Unable to open file '%s'\n", (const char *)v12);
      }
      *(void *)(a1 + 256) = v2;
      if (*(int *)(a1 + 756) >= 3)
      {
        snprintf((char *)v12, 0x200uLL, "%s/LrpEnc_%s_ReconYuv.yuv", (const char *)v11, v13);
        char v10 = 0;
        sub_1D0C636C0(a1 + 360, 0xAF63EF4C86020CD5, "r", (char *)v12, 0xFFFFFFFFLL, (uint64_t)&v10);
      }
    }
  }
  uint64_t v3 = *(const char **)(a1 + 408);
  if (v3)
  {
    uint64_t v4 = strrchr(*(char **)(a1 + 408), 46);
    if (strcmp(v4, ".heic"))
    {
      if (strcmp(v4, ".heif"))
      {
        unint64_t v5 = fopen(v3, "wb");
        if (!v5 && dword_1EB671A40 >= 3)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open file '%s'\n", v3);
          syslog(27, "Unable to open file '%s'\n", v3);
        }
        *(void *)(a1 + 240) = v5;
      }
    }
  }
  int v6 = *(const char **)(a1 + 744);
  if (v6)
  {
    unint64_t v7 = fopen(*(const char **)(a1 + 744), "wt");
    if (!v7 && dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open file '%s'\n", v6);
      syslog(27, "Unable to open file '%s'\n", v6);
    }
    *(void *)(a1 + 248) = v7;
  }
  uint64_t v8 = *(const char **)(a1 + 416);
  if (v8)
  {
    uint64_t v9 = fopen(*(const char **)(a1 + 416), "wb");
    if (!v9 && dword_1EB671A40 >= 3)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open file '%s'\n", v8);
      syslog(27, "Unable to open file '%s'\n", v8);
    }
    *(void *)(a1 + 264) = v9;
  }
}

void sub_1D0CEFDB0(unint64_t *a1, unint64_t a2)
{
  unint64_t v5 = *a1;
  uint64_t v4 = (char *)a1[1];
  int v6 = &v4[-*a1];
  size_t v7 = a2 - (void)v6;
  if (a2 <= (unint64_t)v6)
  {
    if (a2 < (unint64_t)v6) {
      a1[1] = v5 + a2;
    }
  }
  else
  {
    uint64_t v8 = (char *)a1[2];
    if (v8 - v4 >= v7)
    {
      bzero((void *)a1[1], a2 - (void)v6);
      a1[1] = (unint64_t)&v4[v7];
    }
    else
    {
      if ((a2 & 0x8000000000000000) != 0) {
        sub_1D0C8D71C();
      }
      unint64_t v9 = (unint64_t)&v8[-v5];
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v11 = v10;
      }
      unint64_t v12 = (unint64_t)operator new(v11);
      uint64_t v13 = &v6[v12];
      uint64_t v14 = (char *)(v12 + v11);
      uint64_t v15 = (char *)(v12 + a2);
      bzero(v13, v7);
      if (v4 == (char *)v5)
      {
        unint64_t v12 = (unint64_t)v13;
      }
      else
      {
        __int16 v16 = &v4[~v5];
        do
        {
          char v17 = *--v4;
          (v16--)[v12] = v17;
        }
        while (v4 != (char *)v5);
        uint64_t v4 = (char *)*a1;
      }
      *a1 = v12;
      a1[1] = (unint64_t)v15;
      a1[2] = (unint64_t)v14;
      if (v4)
      {
        operator delete(v4);
      }
    }
  }
}

uint64_t sub_1D0CEFEE8(uint64_t result, char a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  do
  {
    int v4 = word_1D0DA15D4[v2] >> (10 - a2);
    if (v3 <= v4)
    {
      __int16 v5 = word_1D0DA160C[v2];
      char v6 = byte_1D0DA1644[v2];
      uint64_t v7 = v3;
      int v3 = v4 + 1;
      do
      {
        *(_WORD *)(*(void *)(result + 10760) + 2 * v7) = v5;
        *(unsigned char *)(*(void *)(result + 10784) + v7++) = v6;
      }
      while (v3 != v7);
    }
    else
    {
      int v3 = v4 + 1;
    }
    ++v2;
  }
  while (v2 != 28);
  return result;
}

uint64_t sub_1D0CEFF68(int64x2_t *a1)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  sub_1D0CF1508(&v151, "FrameType");
  LODWORD(v152.__r_.__value_.__r.__words[2]) = 0;
  sub_1D0CF1508(&v153, "CuDepth");
  DWORD2(v154) = 1;
  sub_1D0CF1508(&v155, "FullQp");
  LODWORD(__p.__r_.__value_.__l.__data_) = 2;
  sub_1D0CF1508(&__p.__r_.__value_.__l.__size_, "MeanSpatial");
  int v157 = 3;
  sub_1D0CF1508(v158, "VarSpatial");
  int v159 = 4;
  sub_1D0CF1508(v160, "MeanTemporal");
  int v161 = 5;
  sub_1D0CF1508(v162, "VarTemporal");
  int v163 = 6;
  sub_1D0CF1508(v164, "MeanMv");
  int v165 = 7;
  sub_1D0CF1508(v166, "VarMv");
  unsigned int v1 = 0;
  uint64_t v2 = 0;
  int v167 = 8;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  int v110 = &v111;
  while (1)
  {
    int v3 = &v151 + 4 * v2;
    int v4 = &v111;
    if (v110 == &v111) {
      goto LABEL_8;
    }
    __int16 v5 = v1;
    char v6 = &v111;
    if (v1)
    {
      do
      {
        int v4 = (uint64_t **)v5;
        __int16 v5 = (uint64_t *)v5[1];
      }
      while (v5);
    }
    else
    {
      do
      {
        int v4 = (uint64_t **)v6[2];
        BOOL v24 = *v4 == (uint64_t *)v6;
        char v6 = v4;
      }
      while (v24);
    }
    if (sub_1D0CF16B0(v4 + 4, (void *)&v151.__locale_ + 4 * v2))
    {
LABEL_8:
      uint64_t v7 = &v111;
      uint64_t v8 = &v111;
      if (v1)
      {
        uint64_t v8 = v4 + 1;
        if (v4[1]) {
          goto LABEL_24;
        }
        uint64_t v7 = v4;
      }
LABEL_18:
      size_t v11 = (char *)operator new(0x40uLL);
      unint64_t v12 = v11 + 32;
      if (SHIBYTE(v3[2].__locale_) < 0)
      {
        sub_1D0CF1614(v12, v3->__locale_, (unint64_t)v3[1].__locale_);
      }
      else
      {
        *(_OWORD *)unint64_t v12 = *(_OWORD *)&v3->__locale_;
        *((std::locale *)v11 + 6) = v3[2];
      }
      *((_DWORD *)v11 + 14) = v152.__r_.__value_.__r.__words[4 * v2 + 2];
      *(void *)size_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v7;
      *uint64_t v8 = (uint64_t *)v11;
      if (*v110)
      {
        int v110 = (uint64_t **)*v110;
        size_t v11 = (char *)*v8;
      }
      sub_1D0C631B8(v111, (uint64_t *)v11);
      ++v112;
      goto LABEL_24;
    }
    uint64_t v7 = &v111;
    uint64_t v8 = &v111;
    if (!v1) {
      goto LABEL_18;
    }
    unint64_t v9 = v1;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v9;
        uint64_t v10 = v9 + 4;
        if (!sub_1D0CF16B0((void *)&v151.__locale_ + 4 * v2, v9 + 4)) {
          break;
        }
        unint64_t v9 = *v7;
        uint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_18;
        }
      }
      if (!sub_1D0CF16B0(v10, (void *)&v151.__locale_ + 4 * v2)) {
        break;
      }
      uint64_t v8 = v7 + 1;
      unint64_t v9 = v7[1];
      if (!v9) {
        goto LABEL_18;
      }
    }
LABEL_24:
    if (++v2 == 9) {
      break;
    }
    unsigned int v1 = v111;
  }
  uint64_t v13 = 36;
  do
  {
    if (SHIBYTE(v150[v13]) < 0) {
      operator delete((void *)v149.i64[v13]);
    }
    v13 -= 4;
  }
  while (v13 * 8);
  sub_1D0CF1508(&v109, aBooster00Cudep);
  int v145 = -1;
  uint64_t v143 = 0;
  uint64_t v142 = 0;
  uint64_t v144 = 0;
  sub_1D0D03278((uint64_t)v138, &v109);
  int v14 = 0;
  int v105 = 0;
  int v98 = a1 + 21;
  memset(&v137, 0, sizeof(v137));
  int v106 = (std::locale::__imp *)*MEMORY[0x1E4FBA408];
  uint64_t v107 = *(std::locale::__imp **)(MEMORY[0x1E4FBA408] + 64);
  std::string::size_type v108 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v138 + *(void *)(v138[0] - 24)));
    uint64_t v15 = std::locale::use_facet(&v151, MEMORY[0x1E4FBA258]);
    unsigned __int8 v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v151);
    sub_1D0D0358C(v138, (uint64_t)&v137, v16);
    if ((*((unsigned char *)&v138[4] + *(void *)(v138[0] - 24)) & 5) != 0) {
      break;
    }
    sub_1D0D03278((uint64_t)&v151, &v137);
    uint64_t v130 = 0;
    unsigned int v129 = 0;
    int64_t v131 = 0;
    sub_1D0D0377C((uint64_t *)&v151, (uint64_t)&v129);
    uint64_t v17 = HIBYTE(v131);
    int v18 = SHIBYTE(v131);
    long long v19 = v129;
    if (v131 >= 0)
    {
      BOOL v20 = &v129;
    }
    else
    {
      uint64_t v17 = v130;
      BOOL v20 = (std::locale::__imp **)v129;
    }
    if (v17 >= 7)
    {
      int v21 = (char *)v20 + v17;
      double v22 = v20;
      do
      {
        unsigned int v23 = (std::locale::__imp **)memchr(v22, 98, v17 - 6);
        if (!v23) {
          break;
        }
        BOOL v24 = *(_DWORD *)v23 == 1936682850 && *(_DWORD *)((char *)v23 + 3) == 1919251571;
        if (v24)
        {
          if (v23 == (std::locale::__imp **)v21 || v23 != v20) {
            break;
          }
          int v25 = v105;
          if (v14 > v105 && v14 != 0) {
            int v25 = v14;
          }
          int v105 = v25;
          int v14 = 0;
          if ((v18 & 0x80000000) == 0) {
            goto LABEL_55;
          }
          goto LABEL_54;
        }
        double v22 = (std::locale::__imp **)((char *)v23 + 1);
        uint64_t v17 = v21 - (char *)v22;
      }
      while (v21 - (char *)v22 >= 7);
    }
    ++v14;
    if (v18 < 0) {
LABEL_54:
    }
      operator delete(v19);
LABEL_55:
    v151.__locale_ = v106;
    *(std::locale::__imp **)((char *)&v151.__locale_ + *((void *)v106 - 3)) = v107;
    v152.__r_.__value_.__l.__size_ = v108;
    v152.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1D25F01B0](v158);
  }
  sub_1D0D03278((uint64_t)&v129, &v109);
  int v27 = v105;
  if (v14 > v105 && v14 != 0) {
    int v27 = v14;
  }
  unint64_t v99 = v27;
  int v104 = 0;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v129 + *((void *)v129 - 3)));
    uint64_t v29 = std::locale::use_facet(&v151, MEMORY[0x1E4FBA258]);
    unsigned __int8 v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale(&v151);
    sub_1D0D0358C(&v129, (uint64_t)&v137, v30);
    if ((v133[*((void *)v129 - 3)] & 5) != 0) {
      break;
    }
    sub_1D0D03278((uint64_t)v126, &v137);
    memset(&v125, 0, sizeof(v125));
    sub_1D0D0377C(v126, (uint64_t)&v125);
    char v31 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
    std::string::size_type v32 = v125.__r_.__value_.__r.__words[0];
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(v125.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = v125.__r_.__value_.__l.__size_;
    }
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = &v125;
    }
    else {
      uint64_t v34 = (std::string *)v125.__r_.__value_.__r.__words[0];
    }
    uint64_t v35 = (std::string *)((char *)v34 + size);
    if (size >= 7)
    {
      int64_t v36 = size;
      uint64_t v37 = v34;
      do
      {
        uint64_t v38 = (std::string *)memchr(v37, 98, v36 - 6);
        if (!v38) {
          break;
        }
        if (LODWORD(v38->__r_.__value_.__l.__data_) == 1936682850
          && *(_DWORD *)((char *)v38->__r_.__value_.__r.__words + 3) == 1919251571)
        {
          if (v38 == v35 || v38 != v34) {
            break;
          }
          if (v104)
          {
            sub_1D0D03A4C(&v142, v104);
            unint64_t v40 = a1[21].u64[1];
            if (v40 >= a1[22].i64[0])
            {
              uint64_t v41 = sub_1D0D03CFC(v98, (uint64_t)&v141);
            }
            else
            {
              sub_1D0D03C8C((uint64_t)v98, (uint64_t)&v141);
              uint64_t v41 = v40 + 32;
            }
            a1[21].i64[1] = v41;
            char v31 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
            std::string::size_type v32 = v125.__r_.__value_.__r.__words[0];
          }
          if (v31 >= 0) {
            int v91 = &v125;
          }
          else {
            int v91 = (std::string *)v32;
          }
          sscanf((const char *)v91, "booster[%d", &v145);
          int v141 = -1;
          uint64_t v92 = v142;
          for (uint64_t i = v143; i != v92; i -= 72)
          {
            if (*(char *)(i - 41) < 0) {
              operator delete(*(void **)(i - 64));
            }
          }
          uint64_t v143 = v92;
          int v141 = v145;
          sub_1D0D03A4C(&v142, v99);
          int v104 = 0;
          char v90 = 1;
          goto LABEL_157;
        }
        uint64_t v37 = (std::string *)((char *)&v38->__r_.__value_.__l.__data_ + 1);
        int64_t v36 = (char *)v35 - (char *)v37;
      }
      while ((char *)v35 - (char *)v37 >= 7);
    }
    unsigned int v124 = 0;
    uint64_t v123 = 0;
    uint64_t v122 = 0;
    uint64_t v121 = 0;
    int v120 = 0;
    if (size >= 4)
    {
      uint64_t v42 = v34;
      do
      {
        unint64_t v43 = (char *)memchr(v42, 108, size - 3);
        if (!v43) {
          break;
        }
        if (*(_DWORD *)v43 == 1717658988)
        {
          if (v43 == (char *)v35 || v43 - (char *)v34 == -1) {
            break;
          }
          if (!sscanf((const char *)v34, "%d:leaf=%lf", &v124, &v122)) {
            goto LABEL_156;
          }
          uint64_t v44 = v122;
          unsigned int v45 = v124;
          sub_1D0D04084((uint64_t)&v151);
          *(void *)&long long v154 = v44;
          BYTE8(v154) = 1;
          HIDWORD(v155) = v45;
          unsigned int v46 = v124;
          uint64_t v47 = v142;
          uint64_t v48 = v142 + 72 * (int)v124;
          *(_DWORD *)uint64_t v48 = v151.__locale_;
          std::string::operator=((std::string *)(v48 + 8), &v152);
          uint64_t v49 = v47 + 72 * (int)v46;
          long long v50 = v153;
          long long v51 = v154;
          *(void *)(v49 + 64) = v155;
          *(_OWORD *)(v49 + 32) = v50;
          *(_OWORD *)(v49 + 48) = v51;
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v152.__r_.__value_.__l.__data_);
          }
          ++v104;
          goto LABEL_155;
        }
        uint64_t v42 = (std::string *)(v43 + 1);
        int64_t size = (char *)v35 - (char *)v42;
      }
      while ((char *)v35 - (char *)v42 >= 4);
    }
    sub_1D0D03278((uint64_t)v117, &v125);
    __int16 v116 = 0;
    memset(&v115, 0, sizeof(v115));
    int v52 = (void *)MEMORY[0x1D25F0040](v117, &v124);
    int v53 = sub_1D0D03E8C(v52, (unsigned char *)&v116 + 1);
    int v54 = sub_1D0D03E8C(v53, &v116);
    sub_1D0D0377C(v54, (uint64_t)&v115);
    long long v113 = 0uLL;
    unint64_t v114 = 0;
    sub_1D0C71D34((uint64_t)&v151);
    std::string::operator=(&__p, &v115);
    sub_1D0D04114((uint64_t)&v152.__r_.__value_.__r.__words[2]);
    long long __src = 0uLL;
    uint64_t v147 = 0;
    while (1)
    {
      sub_1D0D0358C(&v151, (uint64_t)&__src, 0x3Cu);
      if ((*((unsigned char *)&v153 + *((void *)v151.__locale_ - 3)) & 5) != 0) {
        break;
      }
      int v55 = (_OWORD *)*((void *)&v113 + 1);
      if (*((void *)&v113 + 1) >= v114)
      {
        unint64_t v57 = v113;
        unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v113 + 1) - v113) >> 3);
        unint64_t v59 = v58 + 1;
        if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1D0C8D71C();
        }
        if (0x5555555555555556 * ((uint64_t)(v114 - v113) >> 3) > v59) {
          unint64_t v59 = 0x5555555555555556 * ((uint64_t)(v114 - v113) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - v113) >> 3) >= 0x555555555555555) {
          unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v60 = v59;
        }
        v150[1] = &v114;
        if (v60)
        {
          if (v60 > 0xAAAAAAAAAAAAAAALL) {
            sub_1D0C6AC2C();
          }
          char v61 = (char *)operator new(24 * v60);
        }
        else
        {
          char v61 = 0;
        }
        uint64_t v63 = &v61[24 * v58];
        uint64_t v148 = v61;
        v149.i64[0] = (uint64_t)v63;
        v149.i64[1] = (uint64_t)v63;
        v150[0] = &v61[24 * v60];
        if (SHIBYTE(v147) < 0)
        {
          sub_1D0CF1614(v63, (void *)__src, *((unint64_t *)&__src + 1));
          int v55 = (_OWORD *)*((void *)&v113 + 1);
          unint64_t v57 = v113;
          int v64 = (char *)v149.i64[1];
          uint64_t v63 = (char *)v149.i64[0];
        }
        else
        {
          *(_OWORD *)uint64_t v63 = __src;
          *((void *)v63 + 2) = v147;
          int v64 = &v61[24 * v58];
        }
        char v62 = v64 + 24;
        v149.i64[1] = (uint64_t)(v64 + 24);
        if (v55 == (_OWORD *)v57)
        {
          int64x2_t v66 = vdupq_n_s64(v57);
        }
        else
        {
          do
          {
            long long v65 = *(_OWORD *)((char *)v55 - 24);
            *((void *)v63 - 1) = *((void *)v55 - 1);
            *(_OWORD *)(v63 - 24) = v65;
            v63 -= 24;
            *((void *)v55 - 2) = 0;
            *((void *)v55 - 1) = 0;
            *((void *)v55 - 3) = 0;
            int v55 = (_OWORD *)((char *)v55 - 24);
          }
          while (v55 != (_OWORD *)v57);
          int64x2_t v66 = (int64x2_t)v113;
          char v62 = (char *)v149.i64[1];
        }
        *(void *)&long long v113 = v63;
        *((void *)&v113 + 1) = v62;
        int64x2_t v149 = v66;
        unint64_t v67 = v114;
        unint64_t v114 = v150[0];
        v150[0] = v67;
        uint64_t v148 = (char *)v66.i64[0];
        sub_1D0D04228((uint64_t)&v148);
      }
      else
      {
        if (SHIBYTE(v147) < 0)
        {
          sub_1D0CF1614(*((unsigned char **)&v113 + 1), (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v56 = __src;
          *(void *)(*((void *)&v113 + 1) + 16) = v147;
          *int v55 = v56;
        }
        char v62 = (char *)v55 + 24;
      }
      *((void *)&v113 + 1) = v62;
    }
    if (SHIBYTE(v147) < 0) {
      operator delete((void *)__src);
    }
    unsigned __int8 v68 = v106;
    v151.__locale_ = v106;
    uint64_t v69 = v107;
    *(std::locale::__imp **)((char *)&v151.__locale_ + *((void *)v106 - 3)) = v107;
    v152.__r_.__value_.__l.__size_ = v108;
    v152.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1D25F01B0](v158);
    char v70 = (const char *)(v113 + 24);
    if (*(char *)(v113 + 47) < 0) {
      char v70 = *(const char **)v70;
    }
    if (sscanf(v70, "%lf", &v123)
      && ((sub_1D0D0377C(v126, (uint64_t)&v125), (v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        ? (unint64_t v71 = &v125)
        : (unint64_t v71 = (std::string *)v125.__r_.__value_.__r.__words[0]),
          sscanf((const char *)v71, "yes=%d,no=%d,missing=%d", (char *)&v121 + 4, &v121, &v120) && (double v72 = v111) != 0))
    {
      BOOL v101 = SHIDWORD(v121) >= (int)v121;
      uint64_t v102 = v121;
      int v100 = v120;
      unint64_t v73 = (std::string *)v113;
      uint64_t v74 = &v111;
      do
      {
        uint64_t v75 = v74;
        uint64_t v76 = v72 + 4;
        BOOL v77 = sub_1D0CF16B0(v72 + 4, v73);
        uint64_t v78 = v72 + 1;
        if (!v77)
        {
          uint64_t v78 = v72;
          uint64_t v74 = (uint64_t **)v72;
        }
        double v72 = (uint64_t *)*v78;
      }
      while (*v78);
      if (v74 == &v111 || (!v77 ? (float v79 = v76) : (float v79 = (uint64_t *)(v75 + 4)), sub_1D0CF16B0(v73, v79)))
      {
        char v80 = 0;
      }
      else
      {
        int v81 = *((_DWORD *)v74 + 14);
        uint64_t v82 = v123;
        unsigned int v83 = v124;
        sub_1D0D04084((uint64_t)&v151);
        std::string::operator=(&v152, v73);
        LODWORD(v151.__locale_) = v81;
        LOBYTE(v153) = SHIDWORD(v102) < (int)v102;
        BYTE1(v153) = v101;
        BYTE2(v153) = v100 == HIDWORD(v102);
        *((void *)&v153 + 1) = v82;
        BYTE8(v154) = 0;
        HIDWORD(v154) = HIDWORD(v102);
        unint64_t v155 = __PAIR64__(v83, v102);
        unsigned int v84 = v124;
        uint64_t v85 = v142;
        uint64_t v86 = v142 + 72 * (int)v124;
        *(_DWORD *)uint64_t v86 = v81;
        std::string::operator=((std::string *)(v86 + 8), &v152);
        uint64_t v87 = v85 + 72 * (int)v84;
        long long v88 = v153;
        long long v89 = v154;
        *(void *)(v87 + 64) = v155;
        *(_OWORD *)(v87 + 32) = v88;
        *(_OWORD *)(v87 + 48) = v89;
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v152.__r_.__value_.__l.__data_);
        }
        ++v104;
        char v80 = 1;
      }
      unsigned __int8 v68 = v106;
      uint64_t v69 = v107;
    }
    else
    {
      char v80 = 0;
    }
    v151.__locale_ = (std::locale::__imp *)&v113;
    sub_1D0D03FF8((void ***)&v151);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v115.__r_.__value_.__l.__data_);
    }
    v117[0] = v68;
    *(void *)((char *)v117 + *((void *)v68 - 3)) = v69;
    v117[2] = v108;
    v117[3] = MEMORY[0x1E4FBA470] + 16;
    if (v118 < 0) {
      operator delete((void *)v117[11]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1D25F01B0](&v119);
    if (v80) {
LABEL_155:
    }
      char v90 = 1;
    else {
LABEL_156:
    }
      char v90 = 0;
LABEL_157:
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v125.__r_.__value_.__l.__data_);
    }
    v126[0] = (uint64_t)v106;
    *(uint64_t *)((char *)v126 + *((void *)v106 - 3)) = (uint64_t)v107;
    v126[2] = v108;
    v126[3] = MEMORY[0x1E4FBA470] + 16;
    if (v127 < 0) {
      operator delete((void *)v126[11]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1D25F01B0](&v128);
    if ((v90 & 1) == 0)
    {
      uint64_t v96 = 4294954385;
      goto LABEL_180;
    }
  }
  if (v104)
  {
    sub_1D0D03A4C(&v142, v104);
    unint64_t v94 = a1[21].u64[1];
    if (v94 >= a1[22].i64[0])
    {
      uint64_t v95 = sub_1D0D03CFC(v98, (uint64_t)&v141);
    }
    else
    {
      sub_1D0D03C8C((uint64_t)v98, (uint64_t)&v141);
      uint64_t v95 = v94 + 32;
    }
    uint64_t v96 = 0;
    a1[21].i64[1] = v95;
  }
  else
  {
    uint64_t v96 = 0;
  }
LABEL_180:
  unsigned int v129 = v106;
  *(std::locale::__imp **)((char *)&v129 + *((void *)v106 - 3)) = v107;
  int64_t v131 = v108;
  uint64_t v132 = MEMORY[0x1E4FBA470] + 16;
  if (v135 < 0) {
    operator delete(v134);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D25F01B0](&v136);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  v138[0] = v106;
  *(void *)((char *)v138 + *((void *)v106 - 3)) = v107;
  v138[2] = v108;
  v138[3] = MEMORY[0x1E4FBA470] + 16;
  if (v139 < 0) {
    operator delete((void *)v138[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D25F01B0](&v140);
  v151.__locale_ = (std::locale::__imp *)&v142;
  sub_1D0CE9790((void ***)&v151);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  sub_1D0CF15B8((char *)v111);
  return v96;
}

void sub_1D0CF12D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char *a46)
{
  if (SLOBYTE(STACK[0x4F7]) < 0) {
    operator delete((void *)STACK[0x4E0]);
  }
  sub_1D0C7232C((uint64_t)&STACK[0x4F8]);
  STACK[0x4F8] = a18;
  sub_1D0CE9790((void ***)&STACK[0x4F8]);
  if (a44 < 0) {
    operator delete(a39);
  }
  sub_1D0CF15B8(a46);
  _Unwind_Resume(a1);
}

void *sub_1D0CF1508(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1D0C72478();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    char v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_1D0CF15B8(char *a1)
{
  if (a1)
  {
    sub_1D0CF15B8(*(void *)a1);
    sub_1D0CF15B8(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void *sub_1D0CF1614(unsigned char *__dst, void *__src, unint64_t a3)
{
  size_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1D0C72478();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *size_t v5 = v8;
    size_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

BOOL sub_1D0CF16B0(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void sub_1D0CF1720(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    sub_1D0C4C984(v1);
  }
}

void sub_1D0CF1730(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F1660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F0230);
}

void sub_1D0CF1784(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F26F1660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1D0CF17A4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 570))
  {
    *(unsigned char *)(a1 + 288) = 0;
    *(void *)(a1 + 272) = 0;
    if (qword_1EA6433C8 || !mach_timebase_info((mach_timebase_info_t)&qword_1EA6433C8))
    {
      *(unsigned char *)(a1 + 288) = 1;
      *(void *)(a1 + 280) = mach_absolute_time();
    }
  }
  uint64_t v2 = *(void *)(a1 + 9784);
  if (!v2) {
    return 4294954385;
  }
  int v3 = *(uint64_t (**)(void))(*(void *)v2 + 16);
  return v3();
}

void sub_1D0CF1890(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 10808);
  std::mutex::lock((std::mutex *)(a1 + 10808));
  long long v117 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v9 = *(char **)(a1 + 10888);
  uint64_t v10 = *(char **)(a1 + 10880);
  uint64_t v11 = v9 - v10;
  if (v9 == v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = 16 * (v9 - v10) - 1;
  }
  unint64_t v13 = *(void *)(a1 + 10904);
  unint64_t v14 = *(void *)(a1 + 10912) + v13;
  if (v12 == v14)
  {
    uint64_t v112 = a3;
    uint64_t v113 = a4;
    uint64_t v15 = (void **)(a1 + 10872);
    if (v13 < 0x80)
    {
      uint64_t v29 = v11 >> 3;
      unsigned __int8 v30 = *(char **)(a1 + 10896);
      char v31 = *(char **)(a1 + 10872);
      uint64_t v32 = v30 - v31;
      if (v11 >> 3 >= (unint64_t)((v30 - v31) >> 3))
      {
        if (v30 == v31) {
          unint64_t v33 = 1;
        }
        else {
          unint64_t v33 = v32 >> 2;
        }
        uint64_t v34 = (char *)sub_1D0C3FC20(v33);
        uint64_t v36 = v35;
        uint64_t v37 = &v34[8 * v29];
        *(void *)&long long v38 = v34;
        *((void *)&v38 + 1) = v37;
        long long v118 = v38;
        int v39 = operator new(0x1000uLL);
        *(void *)&long long v40 = v37;
        *((void *)&v40 + 1) = &v34[8 * v36];
        if (v29 == v36)
        {
          uint64_t v41 = 8 * v29;
          *(void *)&long long v42 = v118;
          if (v11 < 1)
          {
            BOOL v77 = v39;
            uint64_t v78 = v41 >> 2;
            if (v9 == v10) {
              unint64_t v79 = 1;
            }
            else {
              unint64_t v79 = v78;
            }
            char v80 = (char *)sub_1D0C3FC20(v79);
            uint64_t v37 = &v80[8 * (v79 >> 2)];
            *(void *)&long long v42 = v80;
            *((void *)&v42 + 1) = v37;
            *(void *)&long long v40 = v37;
            *((void *)&v40 + 1) = &v80[8 * v81];
            if (v34)
            {
              long long v119 = v42;
              long long v114 = v40;
              operator delete(v34);
              long long v40 = v114;
              long long v42 = v119;
            }
            int v39 = v77;
          }
          else
          {
            uint64_t v43 = v41 >> 3;
            if (v43 >= -1) {
              unint64_t v44 = v43 + 1;
            }
            else {
              unint64_t v44 = v43 + 2;
            }
            v37 -= 8 * (v44 >> 1);
            *(void *)&long long v40 = v37;
            *((void *)&v42 + 1) = v37;
          }
        }
        else
        {
          long long v42 = v118;
        }
        *(void *)uint64_t v37 = v39;
        *(void *)&long long v40 = v40 + 8;
        for (uint64_t i = *(void *)(a1 + 10888); i != *(void *)(a1 + 10880); i -= 8)
        {
          unsigned int v83 = (void *)*((void *)&v42 + 1);
          if (*((void *)&v42 + 1) == (void)v42)
          {
            uint64_t v85 = (unsigned char *)v40;
            if ((unint64_t)v40 >= *((void *)&v40 + 1))
            {
              if (*((void *)&v40 + 1) == *((void *)&v42 + 1)) {
                unint64_t v90 = 1;
              }
              else {
                unint64_t v90 = (uint64_t)(*((void *)&v40 + 1) - *((void *)&v42 + 1)) >> 2;
              }
              int v91 = (char *)sub_1D0C3FC20(v90);
              unsigned int v84 = &v91[(2 * v90 + 6) & 0xFFFFFFFFFFFFFFF8];
              unsigned __int8 v93 = v84;
              uint64_t v94 = v85 - (unsigned char *)v83;
              if (v85 != (unsigned char *)v83)
              {
                unsigned __int8 v93 = &v84[v94 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v95 = 8 * (v94 >> 3);
                uint64_t v96 = v84;
                uint64_t v97 = v83;
                do
                {
                  uint64_t v98 = *v97++;
                  *(void *)uint64_t v96 = v98;
                  v96 += 8;
                  v95 -= 8;
                }
                while (v95);
              }
              *(void *)&long long v42 = v91;
              *((void *)&v42 + 1) = v84;
              *(void *)&long long v40 = v93;
              *((void *)&v40 + 1) = &v91[8 * v92];
              if (v83)
              {
                long long v121 = v42;
                long long v115 = v40;
                operator delete(v83);
                long long v40 = v115;
                long long v42 = v121;
              }
            }
            else
            {
              uint64_t v86 = (uint64_t)(*((void *)&v40 + 1) - v40) >> 3;
              if (v86 >= -1) {
                uint64_t v87 = v86 + 1;
              }
              else {
                uint64_t v87 = v86 + 2;
              }
              uint64_t v88 = v87 >> 1;
              uint64_t v89 = v40 + 8 * (v87 >> 1);
              unsigned int v84 = (char *)(v89 - (v40 - *((void *)&v42 + 1)));
              if ((void)v40 == *((void *)&v42 + 1))
              {
                uint64_t v85 = (unsigned char *)*((void *)&v42 + 1);
              }
              else
              {
                uint64_t v120 = v42;
                uint64_t v116 = *((void *)&v40 + 1);
                memmove((void *)(v89 - (v40 - *((void *)&v42 + 1))), *((const void **)&v42 + 1), v40 - *((void *)&v42 + 1));
                *((void *)&v40 + 1) = v116;
                *(void *)&long long v42 = v120;
              }
              *((void *)&v42 + 1) = v84;
              *(void *)&long long v40 = &v85[8 * v88];
            }
          }
          else
          {
            unsigned int v84 = (char *)*((void *)&v42 + 1);
          }
          uint64_t v99 = *(void *)(i - 8);
          *((void *)v84 - 1) = v99;
          *((void *)&v42 + 1) -= 8;
        }
        int v100 = *v15;
        *(_OWORD *)uint64_t v15 = v42;
        *(_OWORD *)(a1 + 10888) = v40;
        if (v100) {
          operator delete(v100);
        }
        goto LABEL_84;
      }
      if (v30 == v9)
      {
        int v55 = operator new(0x1000uLL);
        if (v31 == v10)
        {
          if (v9 == v10) {
            unint64_t v56 = 1;
          }
          else {
            unint64_t v56 = v32 >> 2;
          }
          unint64_t v57 = (char *)sub_1D0C3FC20(v56);
          uint64_t v10 = &v57[(2 * v56 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v59 = *(uint64_t **)(a1 + 10880);
          unint64_t v60 = v10;
          uint64_t v61 = *(void *)(a1 + 10888) - (void)v59;
          if (v61)
          {
            unint64_t v60 = &v10[v61 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v62 = 8 * (v61 >> 3);
            uint64_t v63 = v10;
            do
            {
              uint64_t v64 = *v59++;
              *(void *)uint64_t v63 = v64;
              v63 += 8;
              v62 -= 8;
            }
            while (v62);
          }
          long long v65 = *(void **)(a1 + 10872);
          *(void *)(a1 + 10872) = v57;
          *(void *)(a1 + 10880) = v10;
          *(void *)(a1 + 10888) = v60;
          *(void *)(a1 + 10896) = &v57[8 * v58];
          if (v65)
          {
            operator delete(v65);
            uint64_t v10 = *(char **)(a1 + 10880);
          }
        }
        *((void *)v10 - 1) = v55;
        int64x2_t v66 = *(char **)(a1 + 10880);
        *(void *)(a1 + 10880) = v66 - 8;
        uint64_t v67 = *((void *)v66 - 1);
        *(void *)(a1 + 10880) = v66;
        unsigned __int8 v68 = *(char **)(a1 + 10888);
        if (v68 == *(char **)(a1 + 10896))
        {
          uint64_t v69 = v66 - (unsigned char *)*v15;
          if (v66 <= *v15)
          {
            if (v68 == *v15) {
              unint64_t v102 = 1;
            }
            else {
              unint64_t v102 = (v68 - (unsigned char *)*v15) >> 2;
            }
            uint64_t v103 = (char *)sub_1D0C3FC20(v102);
            int v105 = &v103[8 * (v102 >> 2)];
            int v106 = *(uint64_t **)(a1 + 10880);
            unsigned __int8 v68 = v105;
            uint64_t v107 = *(void *)(a1 + 10888) - (void)v106;
            if (v107)
            {
              unsigned __int8 v68 = &v105[v107 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v108 = 8 * (v107 >> 3);
              std::string v109 = &v103[8 * (v102 >> 2)];
              do
              {
                uint64_t v110 = *v106++;
                *(void *)std::string v109 = v110;
                v109 += 8;
                v108 -= 8;
              }
              while (v108);
            }
            uint64_t v111 = *(void **)(a1 + 10872);
            *(void *)(a1 + 10872) = v103;
            *(void *)(a1 + 10880) = v105;
            *(void *)(a1 + 10888) = v68;
            *(void *)(a1 + 10896) = &v103[8 * v104];
            if (v111)
            {
              operator delete(v111);
              unsigned __int8 v68 = *(char **)(a1 + 10888);
            }
          }
          else
          {
            uint64_t v70 = v69 >> 3;
            BOOL v21 = v69 >> 3 < -1;
            uint64_t v71 = (v69 >> 3) + 2;
            if (v21) {
              uint64_t v72 = v71;
            }
            else {
              uint64_t v72 = v70 + 1;
            }
            uint64_t v73 = -(v72 >> 1);
            uint64_t v74 = v72 >> 1;
            uint64_t v75 = &v66[-8 * v74];
            int64_t v76 = v68 - v66;
            if (v68 != v66)
            {
              memmove(&v66[-8 * v74], v66, v68 - v66);
              int64x2_t v66 = *(char **)(a1 + 10880);
            }
            unsigned __int8 v68 = &v75[v76];
            *(void *)(a1 + 10888) = &v75[v76];
            *(void *)(a1 + 10880) = &v66[8 * v73];
          }
        }
        *(void *)unsigned __int8 v68 = v67;
      }
      else
      {
        *(void *)unint64_t v9 = operator new(0x1000uLL);
      }
    }
    else
    {
      *(void *)(a1 + 10904) = v13 - 128;
      uint64_t v18 = *(void *)v10;
      unsigned __int8 v16 = v10 + 8;
      uint64_t v17 = v18;
      *(void *)(a1 + 10880) = v16;
      if (*(char **)(a1 + 10896) == v9)
      {
        uint64_t v19 = v16 - (unsigned char *)*v15;
        if (v16 <= *v15)
        {
          if (v9 == *v15) {
            unint64_t v45 = 1;
          }
          else {
            unint64_t v45 = (v9 - (unsigned char *)*v15) >> 2;
          }
          unsigned int v46 = (char *)sub_1D0C3FC20(v45);
          uint64_t v48 = &v46[8 * (v45 >> 2)];
          uint64_t v49 = *(uint64_t **)(a1 + 10880);
          unint64_t v9 = v48;
          uint64_t v50 = *(void *)(a1 + 10888) - (void)v49;
          if (v50)
          {
            unint64_t v9 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v51 = 8 * (v50 >> 3);
            int v52 = &v46[8 * (v45 >> 2)];
            do
            {
              uint64_t v53 = *v49++;
              *(void *)int v52 = v53;
              v52 += 8;
              v51 -= 8;
            }
            while (v51);
          }
          int v54 = *(void **)(a1 + 10872);
          *(void *)(a1 + 10872) = v46;
          *(void *)(a1 + 10880) = v48;
          *(void *)(a1 + 10888) = v9;
          *(void *)(a1 + 10896) = &v46[8 * v47];
          if (v54)
          {
            operator delete(v54);
            unint64_t v9 = *(char **)(a1 + 10888);
          }
        }
        else
        {
          uint64_t v20 = v19 >> 3;
          BOOL v21 = v19 >> 3 < -1;
          uint64_t v22 = (v19 >> 3) + 2;
          if (v21) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = v20 + 1;
          }
          uint64_t v24 = -(v23 >> 1);
          uint64_t v25 = v23 >> 1;
          uint64_t v26 = &v16[-8 * v25];
          int64_t v27 = v9 - v16;
          if (v9 == v16)
          {
            uint64_t v28 = v9;
          }
          else
          {
            memmove(&v16[-8 * v25], v16, v9 - v16);
            uint64_t v28 = *(char **)(a1 + 10880);
          }
          unint64_t v9 = &v26[v27];
          *(void *)(a1 + 10888) = &v26[v27];
          *(void *)(a1 + 10880) = &v28[8 * v24];
        }
      }
      *(void *)unint64_t v9 = v17;
    }
    *(void *)(a1 + 10888) += 8;
LABEL_84:
    uint64_t v10 = *(char **)(a1 + 10880);
    unint64_t v14 = *(void *)(a1 + 10912) + *(void *)(a1 + 10904);
    a3 = v112;
    a4 = v113;
  }
  uint64_t v101 = *(void *)&v10[(v14 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v14 & 0x7F);
  *(_OWORD *)uint64_t v101 = v117;
  *(void *)(v101 + 16) = a3;
  *(void *)(v101 + 24) = a4;
  ++*(void *)(a1 + 10912);
  sub_1D0CE9F8C(a1);
  std::mutex::unlock(v8);
}

void sub_1D0CF1EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14)
{
  operator delete(v15);
  if ((void)a14) {
    operator delete((void *)a14);
  }
  if (*((void *)&a13 + 1)) {
    sub_1D0C4C984(*((std::__shared_weak_count **)&a13 + 1));
  }
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0CF1EFC(uint64_t a1, CFDataRef *a2)
{
  uint64_t v750 = *MEMORY[0x1E4F143B8];
  size_t v4 = *(const char **)(a1 + 680);
  if (v4) {
    size_t v5 = strnlen(v4, 0x3E9uLL);
  }
  else {
    size_t v5 = 0;
  }
  size_t v696 = 0;
  size_t v697 = 0;
  size_t v695 = 0;
  v720 = v728;
  v721 = (unsigned __int8 *)&v726;
  size_t v6 = __dst;
  v722 = __dst;
  v723 = 0;
  v714 = &v697;
  v715 = &v696;
  v716 = &v695;
  v717 = v731;
  v718 = 0;
  v719 = (unsigned __int8 *)&v730;
  unint64_t v7 = 0x1EB671000uLL;
  if (*(unsigned char *)(a1 + 780))
  {
    long long v745 = 0u;
    long long v744 = 0u;
    uint64_t v698 = 32;
    sub_1D0D65738(a1 + 784, (uint64_t)&v744, &v698);
    size_t v8 = off_1EB671A48(&v732) - 3;
    v731[0] = v8;
    memcpy(__dst, (char *)&v732 + 3, v8);
    size_t v6 = &__dst[v8];
    int v9 = 1;
  }
  else
  {
    size_t v8 = 0;
    int v9 = 0;
  }
  if (*(unsigned char *)(a1 + 812))
  {
    DWORD2(v744) = 0;
    *(void *)&long long v744 = 0;
    uint64_t v698 = 12;
    sub_1D0D655D0(a1 + 816, (uint64_t)&v744, &v698);
    size_t v10 = off_1EB671A48(&v732) - 3;
    v731[v9] = v10;
    memcpy(v6, (char *)&v732 + 3, v10);
    v6 += v10;
    v8 += v10;
    ++v9;
  }
  if (*(unsigned char *)(a1 + 824))
  {
    long long v744 = 0uLL;
    v733 = 0;
    v732 = 0;
    uint64_t v734 = 0;
    v736 = 0;
    uint64_t v738 = 0;
    v737 = 0;
    if (*(_DWORD *)(a1 + 832))
    {
      if (*(unsigned __int16 *)(a1 + 836) <= 0xC350u && *(unsigned __int16 *)(a1 + 838) <= 0xC350u)
      {
        LOWORD(v744) = 334;
        BYTE2(v744) = -108;
        if (!sub_1D0C4CAD0((uint64_t)&v732, (unsigned int *)&v744 + 1, 12))
        {
          uint64_t v560 = SHIDWORD(v738);
          unsigned int v561 = (*(_DWORD *)(a1 + 832) << -BYTE4(v738)) | v738;
          v562 = v736;
          _DWORD *v736 = bswap32(v561);
          unsigned int v563 = v561 << ((v560 + 32) & 0xF8);
          v564 = (_DWORD *)((char *)v562 + ((unint64_t)(v560 + 32) >> 3));
          int v565 = v560 & 7;
          unint64_t v566 = (unint64_t)v737;
          if (v564 >= v737)
          {
            char v739 = 1;
            v564 = v737;
          }
          unsigned int v567 = (*(unsigned __int16 *)(a1 + 836) << (16 - v565)) | v563;
          _DWORD *v564 = bswap32(v567);
          v568 = (_DWORD *)((char *)v564 + 2);
          unsigned int v569 = v567 << 16;
          if ((unint64_t)v568 >= v566)
          {
            char v739 = 1;
            v568 = (_DWORD *)v566;
          }
          int v570 = *(unsigned __int16 *)(a1 + 838) << (16 - v565);
          _DWORD *v568 = bswap32(v570 | v569);
          LODWORD(v738) = v570 << 16;
          v736 = (_DWORD *)((char *)v568 + 2);
          HIDWORD(v738) = v565;
          if ((unint64_t)v568 + 2 >= v566)
          {
            char v739 = 1;
            v736 = (_DWORD *)v566;
          }
          sub_1D0C9798C((uint64_t)&v732);
          BYTE3(v744) = (_BYTE)v736 - v735 - 1;
        }
      }
    }
    if (v732) {
      operator delete(v732);
    }
    uint64_t v11 = off_1EB671A48(&v732);
    v731[v9] = v11 - 3;
    memcpy(v6, (char *)&v732 + 3, v11 - 3);
    v8 += v731[v9];
    LOBYTE(v9) = v9 + 1;
  }
  __int16 v691 = 257;
  unsigned __int8 v692 = 1;
  char v693 = v9;
  char v694 = 0;
  uint64_t v12 = *(FILE **)(a1 + 240);
  if (v12)
  {
    unint64_t v13 = *(const char **)(a1 + 680);
    if (v13)
    {
      if (strncmp(*(const char **)(a1 + 680), "FLS;", 4uLL))
      {
        fwrite("FLS;", 1uLL, 4uLL, v12);
        unint64_t v13 = *(const char **)(a1 + 680);
      }
      size_t v14 = strnlen(v13, 0x63uLL);
      fwrite(v13, 1uLL, v14 + 1, v12);
    }
  }
  v733 = 0;
  v732 = 0;
  uint64_t v734 = 0;
  v736 = 0;
  uint64_t v738 = 0;
  v737 = 0;
  int v15 = sub_1D0C976F4((uint64_t)&v732, 0x400u);
  if (v15)
  {
    size_t v16 = v15;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 9736);
    _DWORD *v736 = bswap32(v738);
    unint64_t v18 = SHIDWORD(v738) + 1;
    int v19 = v738 << (v18 & 0xF8);
    uint64_t v20 = (_DWORD *)((char *)v736 + (v18 >> 3));
    v736 = v20;
    int v21 = v18 & 7;
    HIDWORD(v738) = v21;
    if (v20 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      uint64_t v20 = v737;
    }
    LODWORD(v738) = (32 << (26 - v21)) | v19;
    *uint64_t v20 = bswap32(v738);
    unint64_t v22 = SHIDWORD(v738) + 6;
    unsigned int v23 = v738 << (v22 & 0xF8);
    LODWORD(v738) = v23;
    uint64_t v24 = (_DWORD *)((char *)v736 + (v22 >> 3));
    v736 = v24;
    HIDWORD(v738) = v22 & 7;
    if (v24 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      uint64_t v24 = v737;
    }
    *uint64_t v24 = bswap32(v23);
    unint64_t v25 = SHIDWORD(v738) + 6;
    int v26 = v738 << (v25 & 0xF8);
    int64_t v27 = (_DWORD *)((char *)v736 + (v25 >> 3));
    v736 = v27;
    int v28 = v25 & 7;
    HIDWORD(v738) = v28;
    if (v27 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      int64_t v27 = v737;
    }
    LODWORD(v738) = (1 << (29 - v28)) | v26;
    *int64_t v27 = bswap32(v738);
    unint64_t v29 = SHIDWORD(v738) + 3;
    int v30 = v738 << (v29 & 0xF8);
    char v31 = (_DWORD *)((char *)v736 + (v29 >> 3));
    v736 = v31;
    int v32 = v29 & 7;
    HIDWORD(v738) = v32;
    if (v31 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      char v31 = v737;
    }
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 196) << (28 - v32)) | v30;
    *char v31 = bswap32(v738);
    unint64_t v33 = SHIDWORD(v738) + 4;
    int v34 = v738 << (v33 & 0xF8);
    uint64_t v35 = (_DWORD *)((char *)v736 + (v33 >> 3));
    v736 = v35;
    int v36 = v33 & 7;
    HIDWORD(v738) = v36;
    if (v35 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      uint64_t v35 = v737;
    }
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 197) << (v36 ^ 0x1F)) | v34;
    *uint64_t v35 = bswap32(v738);
    unint64_t v37 = SHIDWORD(v738) + 1;
    int v38 = v738 << (v37 & 0xF8);
    int v39 = (_DWORD *)((char *)v736 + (v37 >> 3));
    v736 = v39;
    int v40 = v37 & 7;
    HIDWORD(v738) = v40;
    if (v39 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      int v39 = v737;
    }
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 198) << (v40 ^ 0x1F)) | v38;
    _DWORD *v39 = bswap32(v738);
    unint64_t v41 = SHIDWORD(v738) + 1;
    int v42 = v738 << (v41 & 0xF8);
    uint64_t v43 = (_DWORD *)((char *)v736 + (v41 >> 3));
    v736 = v43;
    int v44 = v41 & 7;
    HIDWORD(v738) = v44;
    if (v43 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      uint64_t v43 = v737;
    }
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 199) << (26 - v44)) | v42;
    *uint64_t v43 = bswap32(v738);
    unint64_t v45 = SHIDWORD(v738) + 6;
    int v46 = v738 << (v45 & 0xF8);
    uint64_t v47 = (_DWORD *)((char *)v736 + (v45 >> 3));
    v736 = v47;
    int v48 = v45 & 7;
    HIDWORD(v738) = v48;
    if (v47 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      uint64_t v47 = v737;
    }
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 200) << (29 - v48)) | v46;
    *uint64_t v47 = bswap32(v738);
    unint64_t v49 = SHIDWORD(v738) + 3;
    int v50 = v738 << (v49 & 0xF8);
    uint64_t v51 = (_DWORD *)((char *)v736 + (v49 >> 3));
    v736 = v51;
    int v52 = v49 & 7;
    HIDWORD(v738) = v52;
    if (v51 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      uint64_t v51 = v737;
    }
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 201) << (v52 ^ 0x1F)) | v50;
    _DWORD *v51 = bswap32(v738);
    unint64_t v53 = SHIDWORD(v738) + 1;
    int v54 = v738 << (v53 & 0xF8);
    int v55 = (_DWORD *)((char *)v736 + (v53 >> 3));
    v736 = v55;
    int v56 = v53 & 7;
    HIDWORD(v738) = v56;
    if (v55 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      int v55 = v737;
    }
    LODWORD(v738) = (0xFFFF << (16 - v56)) | v54;
    *int v55 = bswap32(v738);
    LODWORD(v738) = v738 << ((BYTE4(v738) + 16) & 0xF8);
    v736 = (_DWORD *)((char *)v736 + ((unint64_t)(SHIDWORD(v738) + 16) >> 3));
    HIDWORD(v738) = BYTE4(v738) & 7;
    if (v736 >= v737)
    {
      char v739 = 1;
      v736 = v737;
    }
    sub_1D0CE7A48((unsigned __int8 *)v17, 1, *(unsigned __int8 *)(v17 + 200), (uint64_t)&v732);
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 202) << ~BYTE4(v738)) | v738;
    _DWORD *v736 = bswap32(v738);
    unint64_t v57 = SHIDWORD(v738) + 1;
    int v58 = v738 << (v57 & 0xF8);
    LODWORD(v738) = v58;
    unint64_t v59 = (_DWORD *)((char *)v736 + (v57 >> 3));
    v736 = v59;
    LOBYTE(v60) = v57 & 7;
    HIDWORD(v738) = v57 & 7;
    if (v59 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      unint64_t v59 = v737;
    }
    if (*(unsigned char *)(v17 + 202)) {
      unsigned __int8 v61 = 0;
    }
    else {
      unsigned __int8 v61 = *(unsigned char *)(v17 + 200);
    }
    unint64_t v62 = v61;
    do
    {
      unsigned int v63 = *(unsigned __int8 *)(v17 + v62 + 203) + 1;
      unsigned int v64 = __clz(v63);
      unsigned int v65 = 0x80000000 >> v64;
      uint64_t v66 = (2 * v64) ^ 0x3F;
      LODWORD(v738) = (((v63 - v65) | v65) << (-(char)v60 - v66)) | v58;
      _DWORD *v59 = bswap32(v738);
      unint64_t v67 = SHIDWORD(v738) + v66;
      int v68 = v738 << (v67 & 0xF8);
      LODWORD(v738) = v68;
      uint64_t v69 = (_DWORD *)((char *)v736 + (v67 >> 3));
      v736 = v69;
      int v70 = v67 & 7;
      HIDWORD(v738) = v70;
      if (v69 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        uint64_t v69 = v737;
      }
      unsigned int v71 = *(unsigned __int8 *)(v17 + v62 + 210) + 1;
      unsigned int v72 = __clz(v71);
      unsigned int v73 = (v71 - (0x80000000 >> v72)) | (0x80000000 >> v72);
      uint64_t v74 = (2 * v72) ^ 0x3F;
      LODWORD(v738) = (v73 << (-(char)v74 - v70)) | v68;
      *uint64_t v69 = bswap32(v738);
      unint64_t v75 = SHIDWORD(v738) + v74;
      int v76 = v738 << (v75 & 0xF8);
      LODWORD(v738) = v76;
      BOOL v77 = (_DWORD *)((char *)v736 + (v75 >> 3));
      v736 = v77;
      int v78 = v75 & 7;
      HIDWORD(v738) = v78;
      if (v77 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        BOOL v77 = v737;
      }
      unsigned int v79 = *(_DWORD *)(v17 + 220 + 4 * v62) + 1;
      unsigned int v80 = __clz(v79);
      unsigned int v81 = (v79 - (0x80000000 >> v80)) | (0x80000000 >> v80);
      uint64_t v82 = 63 - 2 * v80;
      LODWORD(v738) = (v81 << (-(char)v82 - v78)) | v76;
      *BOOL v77 = bswap32(v738);
      unint64_t v83 = SHIDWORD(v738) + v82;
      int v58 = v738 << (v83 & 0xF8);
      LODWORD(v738) = v58;
      unint64_t v59 = (_DWORD *)((char *)v736 + (v83 >> 3));
      v736 = v59;
      int v60 = v83 & 7;
      HIDWORD(v738) = v60;
      if (v59 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        unint64_t v59 = v737;
      }
      BOOL v84 = v62++ >= *(unsigned __int8 *)(v17 + 200);
    }
    while (!v84);
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 248) << (26 - v60)) | v58;
    _DWORD *v59 = bswap32(v738);
    unint64_t v85 = SHIDWORD(v738) + 6;
    int v86 = v738 << (v85 & 0xF8);
    uint64_t v87 = (_DWORD *)((char *)v736 + (v85 >> 3));
    v736 = v87;
    int v88 = v85 & 7;
    HIDWORD(v738) = v88;
    if (v87 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      uint64_t v87 = v737;
    }
    unsigned int v89 = *(unsigned __int16 *)(v17 + 250) + 1;
    unsigned int v90 = __clz(v89);
    unsigned int v91 = 0x80000000 >> v90;
    uint64_t v92 = (2 * v90) ^ 0x3F;
    LODWORD(v738) = (((v89 - v91) | v91) << (-(char)v88 - v92)) | v86;
    *uint64_t v87 = bswap32(v738);
    unint64_t v93 = SHIDWORD(v738) + v92;
    int v94 = v738 << (v93 & 0xF8);
    uint64_t v95 = (_DWORD *)((char *)v736 + (v93 >> 3));
    v736 = v95;
    int v96 = v93 & 7;
    HIDWORD(v738) = v96;
    if (v95 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      uint64_t v95 = v737;
    }
    if (*(_WORD *)(v17 + 250))
    {
      unint64_t v97 = 1;
      do
      {
        unint64_t v98 = -1;
        do
        {
          LODWORD(v738) = (((*(void *)(*(void *)(v17 + 256) + 8 * v97) >> ++v98) & 1) << ~(_BYTE)v96) | v94;
          _DWORD *v95 = bswap32(v738);
          unint64_t v99 = SHIDWORD(v738) + 1;
          int v94 = v738 << (v99 & 0xF8);
          LODWORD(v738) = v94;
          uint64_t v95 = (_DWORD *)((char *)v736 + (v99 >> 3));
          v736 = v95;
          int v96 = v99 & 7;
          HIDWORD(v738) = v96;
          if (v95 >= v737)
          {
            char v739 = 1;
            v736 = v737;
            uint64_t v95 = v737;
          }
        }
        while (v98 < *(unsigned __int8 *)(v17 + 248));
        BOOL v84 = v97++ >= *(unsigned __int16 *)(v17 + 250);
      }
      while (!v84);
    }
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 280) << (v96 ^ 0x1F)) | v94;
    _DWORD *v95 = bswap32(v738);
    unint64_t v100 = SHIDWORD(v738) + 1;
    char v101 = v100 & 0xF8;
    unint64_t v102 = (_DWORD *)((char *)v736 + (v100 >> 3));
    v736 = v102;
    int v103 = v100 & 7;
    HIDWORD(v738) = v103;
    if (v102 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      unint64_t v102 = v737;
    }
    int v104 = v738 << v101;
    if (*(unsigned char *)(v17 + 280))
    {
      unsigned int v105 = *(_DWORD *)(v17 + 284);
      LODWORD(v738) = (HIWORD(v105) << (16 - v103)) | v104;
      *unint64_t v102 = bswap32(v738);
      int v106 = v738 << ((BYTE4(v738) + 16) & 0xF8);
      uint64_t v107 = (_DWORD *)((char *)v736 + ((unint64_t)(SHIDWORD(v738) + 16) >> 3));
      v736 = v107;
      char v108 = BYTE4(v738) & 7;
      HIDWORD(v738) = BYTE4(v738) & 7;
      if (v107 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        uint64_t v107 = v737;
      }
      LODWORD(v738) = ((unsigned __int16)v105 << (16 - v108)) | v106;
      *uint64_t v107 = bswap32(v738);
      int v109 = v738 << ((BYTE4(v738) + 16) & 0xF8);
      uint64_t v110 = (_DWORD *)((char *)v736 + ((unint64_t)(SHIDWORD(v738) + 16) >> 3));
      v736 = v110;
      char v111 = BYTE4(v738) & 7;
      HIDWORD(v738) = BYTE4(v738) & 7;
      if (v110 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        uint64_t v110 = v737;
      }
      unsigned int v112 = *(_DWORD *)(v17 + 288);
      LODWORD(v738) = (HIWORD(v112) << (16 - v111)) | v109;
      *uint64_t v110 = bswap32(v738);
      int v113 = v738 << ((BYTE4(v738) + 16) & 0xF8);
      long long v114 = (_DWORD *)((char *)v736 + ((unint64_t)(SHIDWORD(v738) + 16) >> 3));
      v736 = v114;
      char v115 = BYTE4(v738) & 7;
      HIDWORD(v738) = BYTE4(v738) & 7;
      if (v114 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        long long v114 = v737;
      }
      LODWORD(v738) = ((unsigned __int16)v112 << (16 - v115)) | v113;
      *long long v114 = bswap32(v738);
      int v116 = v738 << ((BYTE4(v738) + 16) & 0xF8);
      long long v117 = (_DWORD *)((char *)v736 + ((unint64_t)(SHIDWORD(v738) + 16) >> 3));
      v736 = v117;
      char v118 = BYTE4(v738) & 7;
      HIDWORD(v738) = BYTE4(v738) & 7;
      if (v117 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        long long v117 = v737;
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 292) << (v118 ^ 0x1F)) | v116;
      *long long v117 = bswap32(v738);
      unint64_t v119 = SHIDWORD(v738) + 1;
      char v120 = v119 & 0xF8;
      long long v121 = (_DWORD *)((char *)v736 + (v119 >> 3));
      v736 = v121;
      int v122 = v119 & 7;
      HIDWORD(v738) = v122;
      if (v121 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        long long v121 = v737;
      }
      int v123 = v738 << v120;
      if (*(unsigned char *)(v17 + 292))
      {
        unsigned int v124 = *(_DWORD *)(v17 + 296) + 1;
        unsigned int v125 = __clz(v124);
        unsigned int v126 = (v124 - (0x80000000 >> v125)) | (0x80000000 >> v125);
        uint64_t v127 = 63 - 2 * v125;
        LODWORD(v738) = (v126 << (-(char)v122 - v127)) | v123;
        _DWORD *v121 = bswap32(v738);
        unint64_t v128 = SHIDWORD(v738) + v127;
        int v123 = v738 << (v128 & 0xF8);
        long long v121 = (_DWORD *)((char *)v736 + (v128 >> 3));
        v736 = v121;
        int v122 = v128 & 7;
        HIDWORD(v738) = v122;
        if (v121 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          long long v121 = v737;
        }
      }
      unsigned int v129 = *(unsigned __int16 *)(v17 + 300) + 1;
      unsigned int v130 = __clz(v129);
      unsigned int v131 = 0x80000000 >> v130;
      uint64_t v132 = (2 * v130) ^ 0x3F;
      LODWORD(v738) = (((v129 - v131) | v131) << (-(char)v122 - v132)) | v123;
      _DWORD *v121 = bswap32(v738);
      unint64_t v133 = SHIDWORD(v738) + v132;
      int v104 = v738 << (v133 & 0xF8);
      unint64_t v102 = (_DWORD *)((char *)v736 + (v133 >> 3));
      v736 = v102;
      int v103 = v133 & 7;
      HIDWORD(v738) = v103;
      if (v102 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        unint64_t v102 = v737;
      }
    }
    LODWORD(v738) = (*(unsigned __int8 *)(v17 + 302) << (v103 ^ 0x1F)) | v104;
    *unint64_t v102 = bswap32(v738);
    unint64_t v134 = SHIDWORD(v738) + 1;
    int v135 = v738 << (v134 & 0xF8);
    LODWORD(v738) = v135;
    uint64_t v136 = (_DWORD *)((char *)v736 + (v134 >> 3));
    v736 = v136;
    int v137 = v134 & 7;
    HIDWORD(v738) = v137;
    if (v136 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      uint64_t v136 = v737;
    }
    if (*(unsigned char *)(v17 + 302))
    {
      while (v137)
      {
        LODWORD(v738) = (0x80000000 >> v137) | v135;
        *uint64_t v136 = bswap32(v738);
        unint64_t v138 = SHIDWORD(v738) + 1;
        int v135 = v738 << (v138 & 0xF8);
        LODWORD(v738) = v135;
        uint64_t v136 = (_DWORD *)((char *)v736 + (v138 >> 3));
        v736 = v136;
        int v137 = v138 & 7;
        HIDWORD(v738) = v137;
        if (v136 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          uint64_t v136 = v737;
        }
      }
      char v139 = *(unsigned char *)(v17 + 199);
      if (v139)
      {
        char v139 = *(unsigned char *)(v17 + 197);
        if (v139)
        {
          sub_1D0CE7A48((unsigned __int8 *)v17, 0, *(unsigned __int8 *)(v17 + 200), (uint64_t)&v732);
          char v139 = BYTE4(v738);
          int v135 = v738;
          uint64_t v136 = v736;
        }
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 304) << ~v139) | v135;
      *uint64_t v136 = bswap32(v738);
      unint64_t v140 = SHIDWORD(v738) + 1;
      int v141 = v738 << (v140 & 0xF8);
      uint64_t v142 = (_DWORD *)((char *)v736 + (v140 >> 3));
      v736 = v142;
      LOBYTE(v143) = v140 & 7;
      HIDWORD(v738) = v140 & 7;
      if (v142 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        uint64_t v142 = v737;
      }
      LODWORD(v144) = 0;
      for (int i = 0; i != 16; ++i)
      {
        int v146 = (*(unsigned __int16 *)(v17 + 306) >> i) & 1;
        LODWORD(v738) = (v146 << (v143 ^ 0x1F)) | v141;
        *uint64_t v142 = bswap32(v738);
        unint64_t v147 = SHIDWORD(v738) + 1;
        int v141 = v738 << (v147 & 0xF8);
        LODWORD(v738) = v141;
        uint64_t v142 = (_DWORD *)((char *)v736 + (v147 >> 3));
        v736 = v142;
        int v143 = v147 & 7;
        HIDWORD(v738) = v143;
        if (v142 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          uint64_t v142 = v737;
        }
        uint64_t v144 = (v146 + v144);
      }
      if (v144 > *(unsigned __int8 *)(v17 + 304))
      {
        int64_t v148 = 0;
        do
        {
          LODWORD(v738) = (*(unsigned __int8 *)(v17 + 308 + v148) << (29 - v143)) | v141;
          *uint64_t v142 = bswap32(v738);
          unint64_t v149 = SHIDWORD(v738) + 3;
          int v141 = v738 << (v149 & 0xF8);
          LODWORD(v738) = v141;
          uint64_t v142 = (_DWORD *)((char *)v736 + (v149 >> 3));
          v736 = v142;
          int v143 = v149 & 7;
          HIDWORD(v738) = v143;
          if (v142 >= v737)
          {
            char v739 = 1;
            v736 = v737;
            uint64_t v142 = v737;
          }
          ++v148;
        }
        while (v148 < (uint64_t)((int)v144 - (unint64_t)*(unsigned __int8 *)(v17 + 304)));
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 356) << (v143 ^ 0x1F)) | v141;
      *uint64_t v142 = bswap32(v738);
      unint64_t v150 = SHIDWORD(v738) + 1;
      int v151 = v738 << (v150 & 0xF8);
      LODWORD(v738) = v151;
      std::string v152 = (_DWORD *)((char *)v736 + (v150 >> 3));
      v736 = v152;
      LOBYTE(v153) = v150 & 7;
      HIDWORD(v738) = v150 & 7;
      if (v152 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        std::string v152 = v737;
      }
      if (*(unsigned char *)(v17 + 199))
      {
        uint64_t v154 = 0;
        unint64_t v155 = 1;
        do
        {
          if (*(unsigned char *)(v17 + 356))
          {
            LODWORD(v738) = (*(unsigned __int8 *)(v17 + v155 + 357) << (26 - v153)) | v151;
            *std::string v152 = bswap32(v738);
            unint64_t v156 = SHIDWORD(v738) + 6;
            int v151 = v738 << (v156 & 0xF8);
            LODWORD(v738) = v151;
            std::string v152 = (_DWORD *)((char *)v736 + (v156 >> 3));
            v736 = v152;
            int v153 = v156 & 7;
            HIDWORD(v738) = v153;
            if (v152 >= v737)
            {
              char v739 = 1;
              v736 = v737;
              std::string v152 = v737;
            }
          }
          if (*(unsigned char *)(v17 + 304)) {
            BOOL v157 = 1;
          }
          else {
            BOOL v157 = v144 == 0;
          }
          if (!v157)
          {
            uint64_t v158 = v144;
            uint64_t v159 = v17 + 340;
            do
            {
              uint64_t v160 = *(unsigned __int8 *)(v159 - 32) + 1;
              LODWORD(v738) = (*(unsigned __int8 *)(v159 + v154) << (-(char)v153 - v160)) | v151;
              *std::string v152 = bswap32(v738);
              unint64_t v161 = SHIDWORD(v738) + v160;
              int v151 = v738 << (v161 & 0xF8);
              LODWORD(v738) = v151;
              std::string v152 = (_DWORD *)((char *)v736 + (v161 >> 3));
              v736 = v152;
              int v153 = v161 & 7;
              HIDWORD(v738) = v153;
              if (v152 >= v737)
              {
                char v739 = 1;
                v736 = v737;
                std::string v152 = v737;
              }
              ++v159;
              --v158;
            }
            while (v158);
          }
          v154 += 16;
          BOOL v84 = v155++ >= *(unsigned __int8 *)(v17 + 199);
        }
        while (!v84);
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 359) << (28 - v153)) | v151;
      *std::string v152 = bswap32(v738);
      unint64_t v162 = SHIDWORD(v738) + 4;
      int v163 = v738 << (v162 & 0xF8);
      LODWORD(v738) = v163;
      int v164 = (_DWORD *)((char *)v736 + (v162 >> 3));
      v736 = v164;
      int v165 = v162 & 7;
      HIDWORD(v738) = v165;
      if (v164 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v164 = v737;
      }
      if (*(unsigned char *)(v17 + 199))
      {
        uint64_t v166 = v17 + 362;
        unint64_t v167 = 1;
        do
        {
          uint64_t v168 = 0;
          do
          {
            LODWORD(v738) = (*(unsigned __int8 *)(v166 + v168) << ~(_BYTE)v165) | v163;
            *int v164 = bswap32(v738);
            unint64_t v169 = SHIDWORD(v738) + 1;
            int v163 = v738 << (v169 & 0xF8);
            LODWORD(v738) = v163;
            int v164 = (_DWORD *)((char *)v736 + (v169 >> 3));
            v736 = v164;
            int v165 = v169 & 7;
            HIDWORD(v738) = v165;
            if (v164 >= v737)
            {
              char v739 = 1;
              v736 = v737;
              int v164 = v737;
            }
            ++v168;
          }
          while (v167 != v168);
          unint64_t v170 = *(unsigned __int8 *)(v17 + 199);
          v166 += 2;
          BOOL v84 = v167++ >= v170;
        }
        while (!v84);
      }
      else
      {
        LODWORD(v170) = 0;
      }
      uint64_t v171 = 0;
      v708[0] = 0;
      uint64_t v172 = v17 + 360;
      long long v744 = 0uLL;
      uint64_t v173 = v170;
      do
      {
        uint64_t v174 = 0;
        int v175 = &v744;
        do
        {
          int v176 = (_DWORD *)&v744 + 2 * v171 + v174;
          *int v176 = *(unsigned __int8 *)(v17 + 2 * v171 + v174 + 360);
          if (v171)
          {
            uint64_t v177 = 0;
            uint64_t v178 = v175;
            do
            {
              if (*(unsigned char *)(v172 + v177) && *(_DWORD *)v178) {
                *int v176 = 1;
              }
              ++v177;
              uint64_t v178 = (long long *)((char *)v178 + 8);
            }
            while (v171 != v177);
          }
          int v175 = (long long *)((char *)v175 + 4);
          BOOL v157 = v174++ == v173;
        }
        while (!v157);
        v172 += 2;
        BOOL v157 = v171++ == v173;
      }
      while (!v157);
      uint64_t v179 = 0;
      unsigned int v180 = 0;
      char v181 = 0;
      LODWORD(v698) = 0;
      v712[0] = 0;
      int v182 = (unsigned __int8 *)(v17 + 360);
      uint64_t v183 = &v744;
      do
      {
        uint64_t v184 = *(unsigned __int8 *)(v17 + v179 + 357);
        double v185 = (int *)v183;
        int v186 = v182;
        uint64_t v187 = v173 + 1;
        do
        {
          if (*v186++) {
            ++v181;
          }
          int v189 = *v185;
          v185 += 2;
          if (v189) {
            *((unsigned char *)&v698 + 2 * v184 + v180++) = 0;
          }
          --v187;
        }
        while (v187);
        *((unsigned char *)v708 + v184) = v181;
        *((unsigned char *)v712 + v184) = v180;
        v182 += 2;
        uint64_t v183 = (long long *)((char *)v183 + 4);
        BOOL v157 = v179++ == v173;
      }
      while (!v157);
      uint64_t v190 = 0;
      unsigned int v191 = 0;
      uint64_t v192 = 0;
      v710[0] = 0;
      char v193 = 1;
      do
      {
        uint64_t v194 = *(unsigned __int8 *)(v17 + v190 + 357);
        if (!*((unsigned char *)v708 + v194))
        {
          uint64_t v195 = *((unsigned __int8 *)v712 + v194);
          if (*((unsigned char *)v712 + v194))
          {
            unint64_t v196 = (char *)&v698 + 2 * v194;
            do
            {
              char v197 = *v196++;
              uint64_t v198 = 1 << v197;
              BOOL v199 = (v192 & v198) == 0;
              if ((v192 & v198) != 0) {
                uint64_t v198 = 0;
              }
              v192 |= v198;
              if (v199) {
                ++v193;
              }
              --v195;
            }
            while (v195);
          }
          uint64_t v200 = (int)v191++;
          *((unsigned char *)v710 + v200) = v193;
        }
        BOOL v157 = v190++ == v173;
      }
      while (!v157);
      if (v191 > 1)
      {
        unsigned int v201 = *(unsigned __int8 *)(v17 + 364) + 1;
        unsigned int v202 = __clz(v201);
        unsigned int v203 = (v201 - (0x80000000 >> v202)) | (0x80000000 >> v202);
        uint64_t v204 = (2 * v202) ^ 0x3F;
        LODWORD(v738) = (v203 << (-(char)v165 - v204)) | v163;
        *int v164 = bswap32(v738);
        unint64_t v205 = SHIDWORD(v738) + v204;
        LODWORD(v738) = v738 << (v205 & 0xF8);
        v736 = (_DWORD *)((char *)v736 + (v205 >> 3));
        HIDWORD(v738) = v205 & 7;
        if (v736 >= v737)
        {
          char v739 = 1;
          v736 = v737;
        }
      }
      unsigned int v206 = *(unsigned __int8 *)(v17 + 364);
      if (*(unsigned char *)(v17 + 364))
      {
        unint64_t v207 = 0;
        int v208 = (unsigned __int8 *)(v17 + 366);
        do
        {
          if (v191 >= 2)
          {
            LOBYTE(v209) = BYTE4(v738);
            int v210 = v738;
            int v211 = (unsigned __int8 *)v710 + 1;
            uint64_t v212 = v191 - 1;
            int v213 = v208;
            int8x8_t v214 = v736;
            do
            {
              int v215 = *v211++;
              unsigned int v216 = __clz(v215 + 1) ^ 0x1F;
              if (((v215 + 1) & v215) != 0) {
                uint64_t v217 = v216 + 1;
              }
              else {
                uint64_t v217 = v216;
              }
              int v218 = *v213++;
              LODWORD(v738) = (v218 << (-(char)v209 - v217)) | v210;
              *int8x8_t v214 = bswap32(v738);
              unint64_t v219 = SHIDWORD(v738) + v217;
              int v210 = v738 << (v219 & 0xF8);
              LODWORD(v738) = v210;
              int8x8_t v214 = (_DWORD *)((char *)v736 + (v219 >> 3));
              v736 = v214;
              int v209 = v219 & 7;
              HIDWORD(v738) = v209;
              if (v214 >= v737)
              {
                char v739 = 1;
                v736 = v737;
                int8x8_t v214 = v737;
              }
              --v212;
            }
            while (v212);
            unsigned int v206 = *(unsigned __int8 *)(v17 + 364);
          }
          ++v207;
          v208 += 2;
        }
        while (v207 < v206);
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 369) << ~BYTE4(v738)) | v738;
      _DWORD *v736 = bswap32(v738);
      unint64_t v220 = SHIDWORD(v738) + 1;
      int v221 = v738 << (v220 & 0xF8);
      int v222 = (_DWORD *)((char *)v736 + (v220 >> 3));
      v736 = v222;
      int v223 = v220 & 7;
      HIDWORD(v738) = v223;
      if (v222 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v222 = v737;
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 370) << (v223 ^ 0x1F)) | v221;
      *int v222 = bswap32(v738);
      unint64_t v224 = SHIDWORD(v738) + 1;
      int v225 = v738 << (v224 & 0xF8);
      uint64_t v226 = (_DWORD *)((char *)v736 + (v224 >> 3));
      v736 = v226;
      int v227 = v224 & 7;
      HIDWORD(v738) = v227;
      if (v226 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        uint64_t v226 = v737;
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 371) << (v227 ^ 0x1F)) | v225;
      *uint64_t v226 = bswap32(v738);
      unint64_t v228 = SHIDWORD(v738) + 1;
      int v229 = v738 << (v228 & 0xF8);
      int v230 = (_DWORD *)((char *)v736 + (v228 >> 3));
      v736 = v230;
      int v231 = v228 & 7;
      HIDWORD(v738) = v231;
      if (v230 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v230 = v737;
      }
      unsigned int v232 = *(unsigned __int8 *)(v17 + 372) + 1;
      unsigned int v233 = __clz(v232);
      unsigned int v234 = 0x80000000 >> v233;
      uint64_t v235 = (2 * v233) ^ 0x3F;
      LODWORD(v738) = (((v232 - v234) | v234) << (-(char)v231 - v235)) | v229;
      *int v230 = bswap32(v738);
      unint64_t v236 = SHIDWORD(v738) + v235;
      char v237 = v236 & 0xF8;
      unsigned int v238 = (_DWORD *)((char *)v736 + (v236 >> 3));
      v736 = v238;
      int v239 = v236 & 7;
      HIDWORD(v738) = v239;
      if (v238 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        unsigned int v238 = v737;
      }
      int v240 = v738 << v237;
      unsigned int v241 = *(unsigned __int16 *)(v17 + 250) + *(unsigned __int8 *)(v17 + 364) + 1;
      int v683 = *(unsigned __int8 *)(v17 + 364);
      int v685 = *(unsigned __int16 *)(v17 + 250);
      if (v241 > 1)
      {
        unsigned int v242 = *(unsigned __int8 *)(v17 + 373) + 1;
        unsigned int v243 = __clz(v242);
        unsigned int v244 = (v242 - (0x80000000 >> v243)) | (0x80000000 >> v243);
        uint64_t v245 = (2 * v243) ^ 0x3F;
        LODWORD(v738) = (v244 << (-(char)v245 - v239)) | v240;
        *unsigned int v238 = bswap32(v738);
        unint64_t v246 = SHIDWORD(v738) + v245;
        int v247 = v738 << (v246 & 0xF8);
        uint64_t v248 = (_DWORD *)((char *)v736 + (v246 >> 3));
        v736 = v248;
        int v249 = v246 & 7;
        HIDWORD(v738) = v249;
        if (v248 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          uint64_t v248 = v737;
        }
        LODWORD(v738) = (*(unsigned __int8 *)(v17 + 374) << (30 - v249)) | v247;
        *uint64_t v248 = bswap32(v738);
        unint64_t v250 = SHIDWORD(v738) + 2;
        int v240 = v738 << (v250 & 0xF8);
        unsigned int v238 = (_DWORD *)((char *)v736 + (v250 >> 3));
        v736 = v238;
        int v239 = v250 & 7;
        HIDWORD(v738) = v239;
        if (v238 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          unsigned int v238 = v737;
        }
      }
      int v687 = *(unsigned __int8 *)(v17 + 373);
      unsigned int v251 = *(unsigned __int8 *)(v17 + 375) + 1;
      unsigned int v252 = __clz(v251);
      unsigned int v253 = (v251 - (0x80000000 >> v252)) | (0x80000000 >> v252);
      uint64_t v254 = (2 * v252) ^ 0x3F;
      LODWORD(v738) = (v253 << (-(char)v239 - v254)) | v240;
      *unsigned int v238 = bswap32(v738);
      unint64_t v255 = SHIDWORD(v738) + v254;
      LODWORD(v738) = v738 << (v255 & 0xF8);
      v736 = (_DWORD *)((char *)v736 + (v255 >> 3));
      HIDWORD(v738) = v255 & 7;
      if (v736 >= v737)
      {
        char v739 = 1;
        v736 = v737;
      }
      unsigned int v256 = -1;
      do
      {
        LODWORD(v738) = (*(__int16 *)(v17 + 386) << (16 - BYTE4(v738))) | v738;
        _DWORD *v736 = bswap32(v738);
        char v257 = BYTE4(v738) + 16;
        double v258 = (_DWORD *)((char *)v736 + ((unint64_t)(SHIDWORD(v738) + 16) >> 3));
        v736 = v258;
        char v259 = BYTE4(v738) & 7;
        HIDWORD(v738) = BYTE4(v738) & 7;
        if (v258 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          double v258 = v737;
        }
        LODWORD(v738) = (*(__int16 *)(v17 + 388) << (16 - v259)) | (v738 << (v257 & 0xF8));
        *double v258 = bswap32(v738);
        char v260 = BYTE4(v738) + 16;
        double v261 = (_DWORD *)((char *)v736 + ((unint64_t)(SHIDWORD(v738) + 16) >> 3));
        v736 = v261;
        char v262 = BYTE4(v738) & 7;
        HIDWORD(v738) = BYTE4(v738) & 7;
        if (v261 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          double v261 = v737;
        }
        LODWORD(v738) = (*(unsigned __int8 *)(v17 + 390) << (v262 ^ 0x1F)) | (v738 << (v260 & 0xF8));
        *double v261 = bswap32(v738);
        unint64_t v263 = SHIDWORD(v738) + 1;
        BOOL v264 = (_DWORD *)((char *)v736 + (v263 >> 3));
        v736 = v264;
        LOBYTE(v265) = v263 & 7;
        HIDWORD(v738) = v263 & 7;
        if (v264 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          BOOL v264 = v737;
        }
        int v266 = v738 << (v263 & 0xF8);
        if (*(unsigned char *)(v17 + 390))
        {
          LODWORD(v738) = (*(unsigned __int8 *)(v17 + 391) << (30 - v265)) | v266;
          *BOOL v264 = bswap32(v738);
          unint64_t v267 = SHIDWORD(v738) + 2;
          uint8x8_t v268 = (_DWORD *)((char *)v736 + (v267 >> 3));
          v736 = v268;
          LOBYTE(v265) = v267 & 7;
          HIDWORD(v738) = v267 & 7;
          if (v268 >= v737)
          {
            char v739 = 1;
            v736 = v737;
            uint8x8_t v268 = v737;
          }
          int v269 = v738 << (v267 & 0xF8);
          if (*(unsigned char *)(v17 + 391) == 3)
          {
            LODWORD(v738) = (*(unsigned __int8 *)(v17 + 392) << (v265 ^ 0x1F)) | v269;
            *uint8x8_t v268 = bswap32(v738);
            unint64_t v270 = SHIDWORD(v738) + 1;
            int v269 = v738 << (v270 & 0xF8);
            uint8x8_t v268 = (_DWORD *)((char *)v736 + (v270 >> 3));
            v736 = v268;
            int v265 = v270 & 7;
            HIDWORD(v738) = v265;
            if (v268 >= v737)
            {
              char v739 = 1;
              v736 = v737;
              uint8x8_t v268 = v737;
            }
          }
          LODWORD(v738) = (*(unsigned __int8 *)(v17 + 393) << (28 - v265)) | v269;
          *uint8x8_t v268 = bswap32(v738);
          unint64_t v271 = SHIDWORD(v738) + 4;
          uint64_t v272 = (_DWORD *)((char *)v736 + (v271 >> 3));
          v736 = v272;
          HIDWORD(v738) = v271 & 7;
          if (v272 >= v737)
          {
            char v739 = 1;
            v736 = v737;
            uint64_t v272 = v737;
          }
          LODWORD(v738) = (*(unsigned __int8 *)(v17 + 394) << (28 - (v271 & 7))) | (v738 << (v271 & 0xF8));
          *uint64_t v272 = bswap32(v738);
          unint64_t v273 = SHIDWORD(v738) + 4;
          int v266 = v738 << (v273 & 0xF8);
          BOOL v264 = (_DWORD *)((char *)v736 + (v273 >> 3));
          v736 = v264;
          int v265 = v273 & 7;
          HIDWORD(v738) = v265;
          if (v264 >= v737)
          {
            char v739 = 1;
            v736 = v737;
            BOOL v264 = v737;
          }
        }
        LODWORD(v738) = (*(unsigned __int8 *)(v17 + 395) << (v265 ^ 0x1F)) | v266;
        *BOOL v264 = bswap32(v738);
        unint64_t v274 = SHIDWORD(v738) + 1;
        LODWORD(v738) = v738 << (v274 & 0xF8);
        v736 = (_DWORD *)((char *)v736 + (v274 >> 3));
        HIDWORD(v738) = v274 & 7;
        if (v736 >= v737)
        {
          char v739 = 1;
          v736 = v737;
        }
        if (*(unsigned char *)(v17 + 395))
        {
          sub_1D0C97824((uint64_t)&v732, *(unsigned __int16 *)(v17 + 396));
          sub_1D0C97824((uint64_t)&v732, *(unsigned __int16 *)(v17 + 398));
          sub_1D0C97824((uint64_t)&v732, *(unsigned __int16 *)(v17 + 400));
          sub_1D0C97824((uint64_t)&v732, *(unsigned __int16 *)(v17 + 402));
        }
        ++v256;
      }
      while (v256 < *(unsigned __int8 *)(v17 + 375));
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 376) << ~BYTE4(v738)) | v738;
      _DWORD *v736 = bswap32(v738);
      unint64_t v275 = SHIDWORD(v738) + 1;
      int v276 = v738 << (v275 & 0xF8);
      char v277 = (_DWORD *)((char *)v736 + (v275 >> 3));
      v736 = v277;
      int v278 = v275 & 7;
      HIDWORD(v738) = v278;
      if (v277 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        char v277 = v737;
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 377) << (v278 ^ 0x1F)) | v276;
      *char v277 = bswap32(v738);
      unint64_t v279 = SHIDWORD(v738) + 1;
      int v280 = v738 << (v279 & 0xF8);
      LODWORD(v738) = v280;
      double v281 = (_DWORD *)((char *)v736 + (v279 >> 3));
      v736 = v281;
      int v282 = v279 & 7;
      HIDWORD(v738) = v282;
      if (v281 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        double v281 = v737;
      }
      unsigned int v283 = *(unsigned __int8 *)(v17 + 199);
      if (*(unsigned char *)(v17 + 199))
      {
        unint64_t v284 = 0;
        do
        {
          if (!*((unsigned char *)v708 + *(unsigned __int8 *)(v17 + v284 + 358)))
          {
            LODWORD(v738) = (*(unsigned __int8 *)(v17 + v284 + 379) << ~(_BYTE)v282) | v280;
            *double v281 = bswap32(v738);
            unint64_t v285 = SHIDWORD(v738) + 1;
            int v280 = v738 << (v285 & 0xF8);
            LODWORD(v738) = v280;
            double v281 = (_DWORD *)((char *)v736 + (v285 >> 3));
            v736 = v281;
            int v282 = v285 & 7;
            HIDWORD(v738) = v282;
            if (v281 >= v737)
            {
              char v739 = 1;
              v736 = v737;
              double v281 = v737;
            }
            unsigned int v283 = *(unsigned __int8 *)(v17 + 199);
          }
          ++v284;
        }
        while (v284 < v283);
      }
      if (v241 + v687 < 2)
      {
        unint64_t v7 = 0x1EB671000uLL;
      }
      else
      {
        int v286 = 0;
        unint64_t v7 = 0x1EB671000;
        do
        {
          LODWORD(v738) = (((*(unsigned __int16 *)(v17 + 380) >> ++v286) & 1) << ~(_BYTE)v282) | v280;
          *double v281 = bswap32(v738);
          unint64_t v287 = SHIDWORD(v738) + 1;
          int v280 = v738 << (v287 & 0xF8);
          LODWORD(v738) = v280;
          double v281 = (_DWORD *)((char *)v736 + (v287 >> 3));
          v736 = v281;
          int v282 = v287 & 7;
          HIDWORD(v738) = v282;
          if (v281 >= v737)
          {
            char v739 = 1;
            v736 = v737;
            double v281 = v737;
          }
        }
        while (v683 + v687 + v685 != v286);
      }
      unsigned int v288 = *(unsigned __int8 *)(v17 + 382) + 1;
      unsigned int v289 = __clz(v288);
      unsigned int v290 = 0x80000000 >> v289;
      uint64_t v291 = (2 * v289) ^ 0x3F;
      LODWORD(v738) = (((v288 - v290) | v290) << (-(char)v282 - v291)) | v280;
      *double v281 = bswap32(v738);
      unint64_t v292 = SHIDWORD(v738) + v291;
      int v293 = v738 << (v292 & 0xF8);
      double v294 = (_DWORD *)((char *)v736 + (v292 >> 3));
      v736 = v294;
      int v295 = v292 & 7;
      HIDWORD(v738) = v295;
      if (v294 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        double v294 = v737;
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 383) << (v295 ^ 0x1F)) | v293;
      *double v294 = bswap32(v738);
      unint64_t v296 = SHIDWORD(v738) + 1;
      int v297 = v738 << (v296 & 0xF8);
      float v298 = (_DWORD *)((char *)v736 + (v296 >> 3));
      v736 = v298;
      int v299 = v296 & 7;
      HIDWORD(v738) = v299;
      if (v298 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        float v298 = v737;
      }
      unsigned int v300 = *(unsigned __int8 *)(v17 + 384) + 1;
      unsigned int v301 = __clz(v300);
      unsigned int v302 = 0x80000000 >> v301;
      uint64_t v303 = (2 * v301) ^ 0x3F;
      LODWORD(v738) = (((v300 - v302) | v302) << (-(char)v299 - v303)) | v297;
      *float v298 = bswap32(v738);
      unint64_t v304 = SHIDWORD(v738) + v303;
      int v305 = v738 << (v304 & 0xF8);
      int v306 = (_DWORD *)((char *)v736 + (v304 >> 3));
      v736 = v306;
      int v307 = v304 & 7;
      HIDWORD(v738) = v307;
      if (v306 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v306 = v737;
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 385) << (v307 ^ 0x1F)) | v305;
      *int v306 = bswap32(v738);
      unint64_t v308 = SHIDWORD(v738) + 1;
      int v309 = v738 << (v308 & 0xF8);
      int v310 = (_DWORD *)((char *)v736 + (v308 >> 3));
      v736 = v310;
      int v311 = v308 & 7;
      HIDWORD(v738) = v311;
      if (v310 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v310 = v737;
      }
      LODWORD(v738) = (*(unsigned __int8 *)(v17 + 404) << (v311 ^ 0x1F)) | v309;
      *int v310 = bswap32(v738);
      unint64_t v312 = SHIDWORD(v738) + 1;
      LODWORD(v738) = v738 << (v312 & 0xF8);
      v736 = (_DWORD *)((char *)v736 + (v312 >> 3));
      HIDWORD(v738) = v312 & 7;
      if (v736 >= v737)
      {
        char v739 = 1;
        v736 = v737;
      }
    }
    sub_1D0C9798C((uint64_t)&v732);
    size_t v16 = (*(uint64_t (**)(unsigned char *, void, uint64_t, char *, void))(v7 + 2632))(__ptr, 0, v735, (char *)v736 - v735, 0);
    *(_DWORD *)(a1 + 10664) += v16;
    float v313 = *(FILE **)(a1 + 240);
    if (v313) {
      fwrite(__ptr, 1uLL, v16, v313);
    }
    if (*(unsigned char *)(a1 + 428)) {
      sub_1D0CE8F34(*(void *)(a1 + 9736), (FILE *)*MEMORY[0x1E4F143C8]);
    }
  }
  if (v732)
  {
    v733 = v732;
    operator delete(v732);
  }
  size_t v697 = v16;
  size_t v696 = sub_1D0CF68A4(a1, v727);
  v733 = 0;
  v732 = 0;
  uint64_t v734 = 0;
  v736 = 0;
  uint64_t v738 = 0;
  v737 = 0;
  int v314 = sub_1D0C976F4((uint64_t)&v732, 0x400u);
  if (v314)
  {
    size_t v315 = v314;
  }
  else
  {
    int v337 = *(unsigned __int8 **)(a1 + 9768);
    _DWORD *v736 = bswap32(v738);
    unint64_t v338 = SHIDWORD(v738) + 1;
    int v339 = v738 << (v338 & 0xF8);
    int v340 = (_DWORD *)((char *)v736 + (v338 >> 3));
    v736 = v340;
    int v341 = v338 & 7;
    HIDWORD(v738) = v341;
    if (v340 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      int v340 = v737;
    }
    LODWORD(v738) = (34 << (26 - v341)) | v339;
    *int v340 = bswap32(v738);
    unint64_t v342 = SHIDWORD(v738) + 6;
    unsigned int v343 = v738 << (v342 & 0xF8);
    LODWORD(v738) = v343;
    int v344 = (_DWORD *)((char *)v736 + (v342 >> 3));
    v736 = v344;
    HIDWORD(v738) = v342 & 7;
    if (v344 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      int v344 = v737;
    }
    *int v344 = bswap32(v343);
    unint64_t v345 = SHIDWORD(v738) + 6;
    int v346 = v738 << (v345 & 0xF8);
    v347 = (_DWORD *)((char *)v736 + (v345 >> 3));
    v736 = v347;
    int v348 = v345 & 7;
    HIDWORD(v738) = v348;
    if (v347 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      v347 = v737;
    }
    LODWORD(v738) = (1 << (29 - v348)) | v346;
    _DWORD *v347 = bswap32(v738);
    unint64_t v349 = SHIDWORD(v738) + 3;
    int v350 = (_DWORD *)((char *)v736 + (v349 >> 3));
    v736 = v350;
    HIDWORD(v738) = v349 & 7;
    if (v350 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      int v350 = v737;
    }
    unsigned int v351 = *v337 + 1;
    unsigned int v352 = __clz(v351);
    unsigned int v353 = 0x80000000 >> v352;
    uint64_t v354 = (2 * v352) ^ 0x3F;
    LODWORD(v738) = (((v351 - v353) | v353) << (-(v349 & 7) - v354)) | (v738 << (v349 & 0xF8));
    *int v350 = bswap32(v738);
    unint64_t v355 = SHIDWORD(v738) + v354;
    int v356 = v738 << (v355 & 0xF8);
    int v357 = (_DWORD *)((char *)v736 + (v355 >> 3));
    v736 = v357;
    int v358 = v355 & 7;
    HIDWORD(v738) = v358;
    if (v357 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      int v357 = v737;
    }
    unsigned int v359 = v337[1] + 1;
    unsigned int v360 = __clz(v359);
    LODWORD(v738) = (((v359 - (0x80000000 >> v360)) | (0x80000000 >> v360)) << (-((2 * v360) ^ 0x3F) - v358)) | v356;
    *int v357 = bswap32(v738);
    int v361 = v738 << ((BYTE4(v738) + ((2 * v360) ^ 0x3F)) & 0xF8);
    LODWORD(v738) = v361;
    float v362 = (_DWORD *)((char *)v736 + ((SHIDWORD(v738) + ((2 * v360) ^ 0x3FuLL)) >> 3));
    v736 = v362;
    char v363 = (BYTE4(v738) + ((2 * v360) ^ 0x3F)) & 7;
    HIDWORD(v738) = (HIDWORD(v738) + ((2 * v360) ^ 0x3F)) & 7;
    if (v362 >= v737)
    {
      char v739 = 1;
      v736 = v737;
      float v362 = v737;
    }
    uint64_t v364 = *((void *)v337 + 221);
    uint64_t v365 = v337[1];
    int v366 = (void *)(v364 + 1552);
    int v367 = (void *)(v364 + 16 * v365 + 256);
    if (v365 > 0xF) {
      int v367 = v366;
    }
    if (*v367)
    {
      LODWORD(v738) = (v337[2] << (v363 ^ 0x1F)) | v361;
      *float v362 = bswap32(v738);
      unint64_t v368 = SHIDWORD(v738) + 1;
      int v369 = v738 << (v368 & 0xF8);
      double v370 = (_DWORD *)((char *)v736 + (v368 >> 3));
      v736 = v370;
      int v371 = v368 & 7;
      HIDWORD(v738) = v371;
      if (v370 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        double v370 = v737;
      }
      LODWORD(v738) = (v337[3] << (v371 ^ 0x1F)) | v369;
      *double v370 = bswap32(v738);
      unint64_t v372 = SHIDWORD(v738) + 1;
      int v373 = v738 << (v372 & 0xF8);
      int v374 = (_DWORD *)((char *)v736 + (v372 >> 3));
      v736 = v374;
      int v375 = v372 & 7;
      HIDWORD(v738) = v375;
      if (v374 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v374 = v737;
      }
      LODWORD(v738) = (v337[4] << (29 - v375)) | v373;
      *int v374 = bswap32(v738);
      unint64_t v376 = SHIDWORD(v738) + 3;
      int v377 = v738 << (v376 & 0xF8);
      unsigned int v378 = (_DWORD *)((char *)v736 + (v376 >> 3));
      v736 = v378;
      int v379 = v376 & 7;
      HIDWORD(v738) = v379;
      if (v378 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        unsigned int v378 = v737;
      }
      LODWORD(v738) = (v337[5] << (v379 ^ 0x1F)) | v377;
      *unsigned int v378 = bswap32(v738);
      unint64_t v380 = SHIDWORD(v738) + 1;
      int v381 = v738 << (v380 & 0xF8);
      int v382 = (_DWORD *)((char *)v736 + (v380 >> 3));
      v736 = v382;
      int v383 = v380 & 7;
      HIDWORD(v738) = v383;
      if (v382 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v382 = v737;
      }
      LODWORD(v738) = (v337[6] << (v383 ^ 0x1F)) | v381;
      *int v382 = bswap32(v738);
      unint64_t v384 = SHIDWORD(v738) + 1;
      unsigned int v385 = (_DWORD *)((char *)v736 + (v384 >> 3));
      v736 = v385;
      HIDWORD(v738) = v384 & 7;
      if (v385 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        unsigned int v385 = v737;
      }
      unsigned int v386 = v337[7] + 1;
      unsigned int v387 = __clz(v386);
      unsigned int v388 = 0x80000000 >> v387;
      uint64_t v389 = (2 * v387) ^ 0x3F;
      LODWORD(v738) = (((v386 - v388) | v388) << (-(v384 & 7) - v389)) | (v738 << (v384 & 0xF8));
      *unsigned int v385 = bswap32(v738);
      unint64_t v390 = SHIDWORD(v738) + v389;
      int v391 = v738 << (v390 & 0xF8);
      int v392 = (_DWORD *)((char *)v736 + (v390 >> 3));
      v736 = v392;
      int v393 = v390 & 7;
      HIDWORD(v738) = v393;
      if (v392 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v392 = v737;
      }
      unsigned int v394 = v337[8] + 1;
      unsigned int v395 = __clz(v394);
      LODWORD(v738) = (((v394 - (0x80000000 >> v395)) | (0x80000000 >> v395)) << (-((2 * v395) ^ 0x3F) - v393)) | v391;
      *int v392 = bswap32(v738);
      int v396 = v738 << ((BYTE4(v738) + ((2 * v395) ^ 0x3F)) & 0xF8);
      float v397 = (_DWORD *)((char *)v736 + ((SHIDWORD(v738) + ((2 * v395) ^ 0x3FuLL)) >> 3));
      v736 = v397;
      char v398 = (BYTE4(v738) + ((2 * v395) ^ 0x3F)) & 7;
      HIDWORD(v738) = (HIDWORD(v738) + ((2 * v395) ^ 0x3F)) & 7;
      if (v397 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        float v397 = v737;
      }
      int v399 = (char)v337[9];
      if (v399 <= 0) {
        int v400 = -2 * v399;
      }
      else {
        int v400 = 2 * v399 - 1;
      }
      unsigned int v401 = v400 + 1;
      unsigned int v402 = __clz(v401);
      unsigned int v403 = (v401 - (0x80000000 >> v402)) | (0x80000000 >> v402);
      uint64_t v404 = 63 - 2 * v402;
      LODWORD(v738) = (v403 << (-v398 - v404)) | v396;
      *float v397 = bswap32(v738);
      unint64_t v405 = SHIDWORD(v738) + v404;
      int v406 = v738 << (v405 & 0xF8);
      signed int v407 = (_DWORD *)((char *)v736 + (v405 >> 3));
      v736 = v407;
      int v408 = v405 & 7;
      HIDWORD(v738) = v408;
      if (v407 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        signed int v407 = v737;
      }
      LODWORD(v738) = (v337[10] << (v408 ^ 0x1F)) | v406;
      *signed int v407 = bswap32(v738);
      unint64_t v409 = SHIDWORD(v738) + 1;
      int v410 = v738 << (v409 & 0xF8);
      int v411 = (_DWORD *)((char *)v736 + (v409 >> 3));
      v736 = v411;
      int v412 = v409 & 7;
      HIDWORD(v738) = v412;
      if (v411 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v411 = v737;
      }
      LODWORD(v738) = (v337[11] << (v412 ^ 0x1F)) | v410;
      *int v411 = bswap32(v738);
      unint64_t v413 = SHIDWORD(v738) + 1;
      int v414 = v738 << (v413 & 0xF8);
      int v415 = (_DWORD *)((char *)v736 + (v413 >> 3));
      v736 = v415;
      int v416 = v413 & 7;
      HIDWORD(v738) = v416;
      if (v415 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v415 = v737;
      }
      LODWORD(v738) = (v337[12] << (v416 ^ 0x1F)) | v414;
      *int v415 = bswap32(v738);
      unint64_t v417 = SHIDWORD(v738) + 1;
      char v418 = v417 & 0xF8;
      int v419 = (_DWORD *)((char *)v736 + (v417 >> 3));
      v736 = v419;
      int v420 = v417 & 7;
      HIDWORD(v738) = v420;
      if (v419 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v419 = v737;
      }
      int v421 = v738 << v418;
      if (v337[12])
      {
        unsigned int v422 = v337[13] + 1;
        unsigned int v423 = __clz(v422);
        unsigned int v424 = 0x80000000 >> v423;
        uint64_t v425 = (2 * v423) ^ 0x3F;
        LODWORD(v738) = (((v422 - v424) | v424) << (-(char)v420 - v425)) | v421;
        *int v419 = bswap32(v738);
        unint64_t v426 = SHIDWORD(v738) + v425;
        int v421 = v738 << (v426 & 0xF8);
        int v419 = (_DWORD *)((char *)v736 + (v426 >> 3));
        v736 = v419;
        int v420 = v426 & 7;
        HIDWORD(v738) = v420;
        if (v419 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          int v419 = v737;
        }
      }
      int v427 = (char)v337[14];
      if (v427 <= 0) {
        int v428 = -2 * v427;
      }
      else {
        int v428 = 2 * v427 - 1;
      }
      unsigned int v429 = __clz(v428 + 1);
      unsigned int v430 = (v428 + 1 - (0x80000000 >> v429)) | (0x80000000 >> v429);
      uint64_t v431 = 63 - 2 * v429;
      LODWORD(v738) = (v430 << (-(char)v420 - v431)) | v421;
      *int v419 = bswap32(v738);
      unint64_t v432 = SHIDWORD(v738) + v431;
      int v433 = v738 << (v432 & 0xF8);
      uint64_t v434 = (_DWORD *)((char *)v736 + (v432 >> 3));
      v736 = v434;
      int v435 = v432 & 7;
      HIDWORD(v738) = v435;
      if (v434 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        uint64_t v434 = v737;
      }
      int v436 = (char)v337[15];
      if (v436 <= 0) {
        int v437 = -2 * v436;
      }
      else {
        int v437 = 2 * v436 - 1;
      }
      unsigned int v438 = v437 + 1;
      unsigned int v439 = __clz(v438);
      LODWORD(v738) = (((v438 - (0x80000000 >> v439)) | (0x80000000 >> v439)) << (2 * v439 - 63 - v435)) | v433;
      *uint64_t v434 = bswap32(v738);
      unint64_t v440 = SHIDWORD(v738) + 63 - 2 * v439;
      int v441 = v738 << (v440 & 0xF8);
      v442 = (_DWORD *)((char *)v736 + (v440 >> 3));
      v736 = v442;
      int v443 = v440 & 7;
      HIDWORD(v738) = v443;
      if (v442 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v442 = v737;
      }
      LODWORD(v738) = (v337[16] << (v443 ^ 0x1F)) | v441;
      _DWORD *v442 = bswap32(v738);
      unint64_t v444 = SHIDWORD(v738) + 1;
      int v445 = v738 << (v444 & 0xF8);
      uint64_t v446 = (_DWORD *)((char *)v736 + (v444 >> 3));
      v736 = v446;
      int v447 = v444 & 7;
      HIDWORD(v738) = v447;
      if (v446 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        uint64_t v446 = v737;
      }
      LODWORD(v738) = (v337[17] << (v447 ^ 0x1F)) | v445;
      *uint64_t v446 = bswap32(v738);
      unint64_t v448 = SHIDWORD(v738) + 1;
      int v449 = v738 << (v448 & 0xF8);
      v450 = (_DWORD *)((char *)v736 + (v448 >> 3));
      v736 = v450;
      int v451 = v448 & 7;
      HIDWORD(v738) = v451;
      if (v450 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v450 = v737;
      }
      LODWORD(v738) = (v337[18] << (v451 ^ 0x1F)) | v449;
      _DWORD *v450 = bswap32(v738);
      unint64_t v452 = SHIDWORD(v738) + 1;
      int v453 = v738 << (v452 & 0xF8);
      uint64_t v454 = (_DWORD *)((char *)v736 + (v452 >> 3));
      v736 = v454;
      int v455 = v452 & 7;
      HIDWORD(v738) = v455;
      if (v454 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        uint64_t v454 = v737;
      }
      LODWORD(v738) = (v337[19] << (v455 ^ 0x1F)) | v453;
      *uint64_t v454 = bswap32(v738);
      unint64_t v456 = SHIDWORD(v738) + 1;
      int v457 = v738 << (v456 & 0xF8);
      v458 = (_DWORD *)((char *)v736 + (v456 >> 3));
      v736 = v458;
      int v459 = v456 & 7;
      HIDWORD(v738) = v459;
      if (v458 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v458 = v737;
      }
      LODWORD(v738) = (v337[20] << (v459 ^ 0x1F)) | v457;
      _DWORD *v458 = bswap32(v738);
      unint64_t v460 = SHIDWORD(v738) + 1;
      int v461 = v738 << (v460 & 0xF8);
      int v462 = (_DWORD *)((char *)v736 + (v460 >> 3));
      v736 = v462;
      int v463 = v460 & 7;
      HIDWORD(v738) = v463;
      if (v462 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        int v462 = v737;
      }
      LODWORD(v738) = (v337[21] << (v463 ^ 0x1F)) | v461;
      *int v462 = bswap32(v738);
      unint64_t v464 = SHIDWORD(v738) + 1;
      char v465 = v464 & 0xF8;
      v466 = (_DWORD *)((char *)v736 + (v464 >> 3));
      v736 = v466;
      int v467 = v464 & 7;
      HIDWORD(v738) = v467;
      if (v466 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v466 = v737;
      }
      int v468 = v738 << v465;
      if (v337[20])
      {
        unsigned int v469 = *((unsigned __int16 *)v337 + 11) + 1;
        unsigned int v470 = __clz(v469);
        unsigned int v471 = 0x80000000 >> v470;
        uint64_t v472 = (2 * v470) ^ 0x3F;
        LODWORD(v738) = (((v469 - v471) | v471) << (-(char)v467 - v472)) | v468;
        _DWORD *v466 = bswap32(v738);
        unint64_t v473 = SHIDWORD(v738) + v472;
        int v474 = v738 << (v473 & 0xF8);
        uint64_t v475 = (_DWORD *)((char *)v736 + (v473 >> 3));
        v736 = v475;
        int v476 = v473 & 7;
        HIDWORD(v738) = v476;
        if (v475 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          uint64_t v475 = v737;
        }
        unsigned int v477 = *((unsigned __int16 *)v337 + 12) + 1;
        unsigned int v478 = __clz(v477);
        LODWORD(v738) = (((v477 - (0x80000000 >> v478)) | (0x80000000 >> v478)) << (-((2 * v478) ^ 0x3F) - v476)) | v474;
        *uint64_t v475 = bswap32(v738);
        int v479 = v738 << ((BYTE4(v738) + ((2 * v478) ^ 0x3F)) & 0xF8);
        v480 = (_DWORD *)((char *)v736 + ((SHIDWORD(v738) + ((2 * v478) ^ 0x3FuLL)) >> 3));
        v736 = v480;
        char v481 = (BYTE4(v738) + ((2 * v478) ^ 0x3F)) & 7;
        HIDWORD(v738) = (HIDWORD(v738) + ((2 * v478) ^ 0x3F)) & 7;
        if (v480 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          v480 = v737;
        }
        LODWORD(v738) = (v337[26] << (v481 ^ 0x1F)) | v479;
        _DWORD *v480 = bswap32(v738);
        unint64_t v482 = SHIDWORD(v738) + 1;
        int v483 = v738 << (v482 & 0xF8);
        v484 = (_DWORD *)((char *)v736 + (v482 >> 3));
        v736 = v484;
        int v485 = v482 & 7;
        HIDWORD(v738) = v485;
        if (v484 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          v484 = v737;
        }
        if (!v337[26])
        {
          if (*((_WORD *)v337 + 11))
          {
            unint64_t v486 = 0;
            do
            {
              unsigned int v487 = *(unsigned __int16 *)(*((void *)v337 + 206) + 2 * v486) + 1;
              unsigned int v488 = __clz(v487);
              unsigned int v489 = 0x80000000 >> v488;
              uint64_t v490 = (2 * v488) ^ 0x3F;
              LODWORD(v738) = (((v487 - v489) | v489) << (-(char)v485 - v490)) | v483;
              _DWORD *v484 = bswap32(v738);
              unint64_t v491 = SHIDWORD(v738) + v490;
              int v483 = v738 << (v491 & 0xF8);
              LODWORD(v738) = v483;
              v484 = (_DWORD *)((char *)v736 + (v491 >> 3));
              v736 = v484;
              int v485 = v491 & 7;
              HIDWORD(v738) = v485;
              if (v484 >= v737)
              {
                char v739 = 1;
                v736 = v737;
                v484 = v737;
              }
              ++v486;
            }
            while (v486 < *((unsigned __int16 *)v337 + 11));
          }
          if (*((_WORD *)v337 + 12))
          {
            unint64_t v492 = 0;
            do
            {
              unsigned int v493 = *(unsigned __int16 *)(*((void *)v337 + 209) + 2 * v492) + 1;
              unsigned int v494 = __clz(v493);
              unsigned int v495 = 0x80000000 >> v494;
              uint64_t v496 = (2 * v494) ^ 0x3F;
              LODWORD(v738) = (((v493 - v495) | v495) << (-(char)v485 - v496)) | v483;
              _DWORD *v484 = bswap32(v738);
              unint64_t v497 = SHIDWORD(v738) + v496;
              int v483 = v738 << (v497 & 0xF8);
              LODWORD(v738) = v483;
              v484 = (_DWORD *)((char *)v736 + (v497 >> 3));
              v736 = v484;
              int v485 = v497 & 7;
              HIDWORD(v738) = v485;
              if (v484 >= v737)
              {
                char v739 = 1;
                v736 = v737;
                v484 = v737;
              }
              ++v492;
            }
            while (v492 < *((unsigned __int16 *)v337 + 12));
          }
        }
        LODWORD(v738) = (v337[27] << (v485 ^ 0x1F)) | v483;
        _DWORD *v484 = bswap32(v738);
        unint64_t v498 = SHIDWORD(v738) + 1;
        int v468 = v738 << (v498 & 0xF8);
        v466 = (_DWORD *)((char *)v736 + (v498 >> 3));
        v736 = v466;
        int v467 = v498 & 7;
        HIDWORD(v738) = v467;
        if (v466 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          v466 = v737;
        }
      }
      LODWORD(v738) = (v337[28] << (v467 ^ 0x1F)) | v468;
      _DWORD *v466 = bswap32(v738);
      unint64_t v499 = SHIDWORD(v738) + 1;
      int v500 = v738 << (v499 & 0xF8);
      v501 = (_DWORD *)((char *)v736 + (v499 >> 3));
      v736 = v501;
      int v502 = v499 & 7;
      HIDWORD(v738) = v502;
      if (v501 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v501 = v737;
      }
      LODWORD(v738) = (v337[29] << (v502 ^ 0x1F)) | v500;
      _DWORD *v501 = bswap32(v738);
      unint64_t v503 = SHIDWORD(v738) + 1;
      char v504 = v503 & 0xF8;
      v505 = (_DWORD *)((char *)v736 + (v503 >> 3));
      v736 = v505;
      int v506 = v503 & 7;
      HIDWORD(v738) = v506;
      if (v505 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v505 = v737;
      }
      int v507 = v738 << v504;
      if (v337[29])
      {
        LODWORD(v738) = (v337[30] << (v506 ^ 0x1F)) | v507;
        _DWORD *v505 = bswap32(v738);
        unint64_t v508 = SHIDWORD(v738) + 1;
        int v509 = v738 << (v508 & 0xF8);
        v510 = (_DWORD *)((char *)v736 + (v508 >> 3));
        v736 = v510;
        int v511 = v508 & 7;
        HIDWORD(v738) = v511;
        if (v510 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          v510 = v737;
        }
        LODWORD(v738) = (v337[31] << (v511 ^ 0x1F)) | v509;
        _DWORD *v510 = bswap32(v738);
        unint64_t v512 = SHIDWORD(v738) + 1;
        char v513 = v512 & 0xF8;
        v505 = (_DWORD *)((char *)v736 + (v512 >> 3));
        v736 = v505;
        int v506 = v512 & 7;
        HIDWORD(v738) = v506;
        if (v505 >= v737)
        {
          char v739 = 1;
          v736 = v737;
          v505 = v737;
        }
        int v507 = v738 << v513;
        if (!v337[31])
        {
          int v514 = (char)v337[32];
          if (v514 <= 0) {
            int v515 = -2 * v514;
          }
          else {
            int v515 = 2 * v514 - 1;
          }
          unsigned int v516 = __clz(v515 + 1);
          unsigned int v517 = (v515 + 1 - (0x80000000 >> v516)) | (0x80000000 >> v516);
          uint64_t v518 = 63 - 2 * v516;
          LODWORD(v738) = (v517 << (-(char)v506 - v518)) | v507;
          _DWORD *v505 = bswap32(v738);
          unint64_t v519 = SHIDWORD(v738) + v518;
          int v520 = v738 << (v519 & 0xF8);
          v521 = (_DWORD *)((char *)v736 + (v519 >> 3));
          v736 = v521;
          int v522 = v519 & 7;
          HIDWORD(v738) = v522;
          if (v521 >= v737)
          {
            char v739 = 1;
            v736 = v737;
            v521 = v737;
          }
          int v523 = (char)v337[33];
          if (v523 <= 0) {
            int v524 = -2 * v523;
          }
          else {
            int v524 = 2 * v523 - 1;
          }
          unsigned int v525 = v524 + 1;
          unsigned int v526 = __clz(v525);
          LODWORD(v738) = (((v525 - (0x80000000 >> v526)) | (0x80000000 >> v526)) << (2 * v526 - 63 - v522)) | v520;
          _DWORD *v521 = bswap32(v738);
          unint64_t v527 = SHIDWORD(v738) + 63 - 2 * v526;
          int v507 = v738 << (v527 & 0xF8);
          v505 = (_DWORD *)((char *)v736 + (v527 >> 3));
          v736 = v505;
          int v506 = v527 & 7;
          HIDWORD(v738) = v506;
          if (v505 >= v737)
          {
            char v739 = 1;
            v736 = v737;
            v505 = v737;
          }
        }
      }
      LODWORD(v738) = (v337[34] << (v506 ^ 0x1F)) | v507;
      _DWORD *v505 = bswap32(v738);
      unint64_t v528 = SHIDWORD(v738) + 1;
      int v529 = v738 << (v528 & 0xF8);
      LODWORD(v738) = v529;
      v530 = (_DWORD *)((char *)v736 + (v528 >> 3));
      v736 = v530;
      int v531 = v528 & 7;
      HIDWORD(v738) = v531;
      if (v530 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v530 = v737;
      }
      if (v337[34])
      {
        sub_1D0C97B54((uint64_t)(v337 + 40), (uint64_t)&v732);
        LOBYTE(v531) = BYTE4(v738);
        int v529 = v738;
        v530 = v736;
      }
      LODWORD(v738) = (v337[1608] << ~(_BYTE)v531) | v529;
      _DWORD *v530 = bswap32(v738);
      unint64_t v532 = SHIDWORD(v738) + 1;
      int v533 = v738 << (v532 & 0xF8);
      v534 = (_DWORD *)((char *)v736 + (v532 >> 3));
      v736 = v534;
      int v535 = v532 & 7;
      HIDWORD(v738) = v535;
      if (v534 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v534 = v737;
      }
      if (*((_WORD *)v337 + 805)) {
        unsigned int v536 = 2 * *((unsigned __int16 *)v337 + 805);
      }
      else {
        unsigned int v536 = 1;
      }
      unsigned int v537 = __clz(v536);
      unsigned int v538 = (v536 - (0x80000000 >> v537)) | (0x80000000 >> v537);
      uint64_t v539 = 63 - 2 * v537;
      LODWORD(v738) = (v538 << (-(char)v535 - v539)) | v533;
      _DWORD *v534 = bswap32(v738);
      unint64_t v540 = SHIDWORD(v738) + v539;
      int v541 = v738 << (v540 & 0xF8);
      v542 = (_DWORD *)((char *)v736 + (v540 >> 3));
      v736 = v542;
      int v543 = v540 & 7;
      HIDWORD(v738) = v543;
      if (v542 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v542 = v737;
      }
      LODWORD(v738) = (v337[1612] << (v543 ^ 0x1F)) | v541;
      _DWORD *v542 = bswap32(v738);
      unint64_t v544 = SHIDWORD(v738) + 1;
      int v545 = v738 << (v544 & 0xF8);
      v546 = (_DWORD *)((char *)v736 + (v544 >> 3));
      v736 = v546;
      int v547 = v544 & 7;
      HIDWORD(v738) = v547;
      if (v546 >= v737)
      {
        char v739 = 1;
        v736 = v737;
        v546 = v737;
      }
      LODWORD(v738) = (v337[1613] << (v547 ^ 0x1F)) | v545;
      _DWORD *v546 = bswap32(v738);
      unint64_t v548 = SHIDWORD(v738) + 1;
      LODWORD(v738) = v738 << (v548 & 0xF8);
      v736 = (_DWORD *)((char *)v736 + (v548 >> 3));
      HIDWORD(v738) = v548 & 7;
      if (v736 >= v737)
      {
        char v739 = 1;
        v736 = v737;
      }
      if (v337[1613])
      {
        if (dword_1EB671A40 >= 3)
        {
          fwrite("Implement PPS extension parsing\n", 0x20uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "Implement PPS extension parsing\n");
        }
        size_t v315 = -12910;
      }
      else
      {
        sub_1D0C9798C((uint64_t)&v732);
        size_t v315 = (*(uint64_t (**)(unsigned char *, void, uint64_t, char *, void))(v7 + 2632))(v725, 0, v735, (char *)v736 - v735, 0);
        *(_DWORD *)(a1 + 10664) += v315;
        v559 = *(FILE **)(a1 + 240);
        if (v559) {
          fwrite(v725, 1uLL, v315, v559);
        }
        if (*(unsigned char *)(a1 + 428)) {
          sub_1D0CBE3CC(*(void *)(a1 + 9768), (FILE *)*MEMORY[0x1E4F143C8]);
        }
      }
    }
    else
    {
      size_t v315 = -12909;
    }
  }
  if (v732)
  {
    v733 = v732;
    operator delete(v732);
  }
  size_t v695 = v315;
  size_t v316 = v697;
  if (!v697 || (size_t v317 = v696) == 0 || !v315)
  {
    if (dword_1EB671A40 < 3)
    {
      float v319 = 0;
      uint64_t v334 = 4294954394;
    }
    else
    {
      fwrite("Parameter sets generation failed\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      float v319 = 0;
      uint64_t v334 = 4294954394;
      syslog(27, "Parameter sets generation failed\n");
    }
    goto LABEL_458;
  }
  v696 -= 3;
  v697 -= 3;
  size_t v695 = v315 - 3;
  unint64_t v318 = v5 + v316 - 3 + v317 - 3 + v315 - 3 + v8 + 148;
  float v319 = (char *)malloc_type_calloc(v318, 1uLL, 0x100004077774924uLL);
  if (!v319)
  {
    if (dword_1EB671A40 >= 3)
    {
      v553 = "config record buffer allocation failed";
      fwrite("config record buffer allocation failed", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      float v319 = 0;
LABEL_448:
      uint64_t v334 = 4294954392;
LABEL_457:
      syslog(27, v553);
      goto LABEL_458;
    }
    float v319 = 0;
LABEL_468:
    uint64_t v334 = 4294954392;
    goto LABEL_458;
  }
  *(void *)v701 = 0x1000000;
  uint64_t v698 = 0;
  uint64_t v699 = 0;
  char v700 = 0;
  *(_DWORD *)&v701[7] = 0;
  __int16 v702 = 3;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)__n = 0u;
  sub_1D0C46C7C((uint64_t)v712);
  sub_1D0C46C7C((uint64_t)v710);
  sub_1D0C46C7C((uint64_t)v708);
  sub_1D0C46C7C((uint64_t)v707);
  sub_1D0C46C7C((uint64_t)v706);
  long long v744 = 0uLL;
  *(void *)&long long v745 = 0;
  v746 = 0;
  uint64_t v748 = 0;
  v747 = 0;
  bzero(&v732, 0x630uLL);
  __n[1] = 0;
  size_t v689 = v5;
  v690 = a2;
  if (!(HIBYTE(v691) * v691 * v692)
    || (v321 = v714, int v320 = v715, v322 = *v714, v323 = v716, !(*v715 * *v714 * *v716))
    || (int v324 = v719) == 0
    || (int v325 = v720) == 0
    || (uint64_t v326 = v721) == 0)
  {
    uint64_t v334 = 4294954394;
    goto LABEL_424;
  }
  LOBYTE(v327) = 0;
  int v328 = 0;
  uint64_t v329 = 0;
  size_t v330 = 23;
  do
  {
    uint64_t v331 = *((unsigned __int8 *)&v691 + v329);
    if (*((unsigned char *)&v691 + v329))
    {
      int v327 = v328 + 1;
      v330 += 3;
      int v332 = (&v714)[v329];
      do
      {
        uint64_t v333 = *v332++;
        v330 += v333 + 2;
        --v331;
      }
      while (v331);
      int v328 = v327;
    }
    ++v329;
  }
  while (v329 != 5);
  HIBYTE(v702) = v327;
  if (v330)
  {
    sub_1D0C4CCE0((unint64_t *)__p, v330);
    unint64_t v322 = *v321;
  }
  uint64_t v334 = sub_1D0C46D20((uint64_t)v712, v324, v322);
  if (!v334)
  {
    uint64_t v334 = sub_1D0C46D20((uint64_t)v710, v325, *v320);
    if (!v334)
    {
      uint64_t v334 = sub_1D0C46D20((uint64_t)v708, v326, *v323);
      if (!v334)
      {
        if (!v693 || !v722 || !*v717 || (uint64_t v334 = sub_1D0C46D20((uint64_t)v707, v722, *v717), !v334))
        {
          if (!v694 || !v723 || !*v718 || (uint64_t v334 = sub_1D0C46D20((uint64_t)v706, v723, *v718), !v334))
          {
            v705[0] = v713;
            v705[1] = v711;
            v705[2] = v709;
            v705[3] = v707[16];
            v705[4] = v706[16];
            uint64_t v334 = sub_1D0C47924((uint64_t)&v732, (uint64_t)v712, 0);
            if (!v334)
            {
              uint64_t v334 = sub_1D0C47924((uint64_t)&v732, (uint64_t)v710, 0);
              if (!v334)
              {
                uint64_t v335 = 32;
                while (!(&v732)[v335])
                {
                  v335 += 2;
                  if (v335 == 64)
                  {
                    BOOL v336 = (unsigned __int8 **)&v741;
                    goto LABEL_485;
                  }
                }
                BOOL v336 = (unsigned __int8 **)&(&v732)[v335];
LABEL_485:
                char v571 = 8 * *((unsigned char *)v732 + 44);
                int v572 = 4 * (*((unsigned char *)v732 + 45) & 1);
                int v573 = 2 * (*((unsigned char *)v732 + 46) & 1);
                int v574 = *((unsigned char *)v732 + 47) & 1;
                LOBYTE(v698) = 1;
                int v575 = *(unsigned __int8 *)v732;
                BYTE1(v698) = *(unsigned char *)v732;
                int v576 = *((unsigned char *)v732 + 7) & 1;
                BYTE2(v698) = *((unsigned char *)v732 + 7) & 1;
                int v577 = *((unsigned __int8 *)v732 + 8);
                BYTE3(v698) = *((unsigned char *)v732 + 8);
                v578 = v732 + 4;
                uint32x4_t v579 = (uint32x4_t)vld1q_dup_f32(v578);
                int32x4_t v580 = (int32x4_t)xmmword_1D0D7F240;
                int8x16_t v581 = 0uLL;
                int v582 = 32;
                v583.i64[0] = 0x100000001;
                v583.i64[1] = 0x100000001;
                v584.i64[0] = 0x1F0000001FLL;
                v584.i64[1] = 0x1F0000001FLL;
                v585.i64[0] = 0x400000004;
                v585.i64[1] = 0x400000004;
                do
                {
                  int8x16_t v581 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v579, (uint32x4_t)vnegq_s32(v580)), v583), (uint32x4_t)vsubq_s32(v584, v580)), v581);
                  int32x4_t v580 = vaddq_s32(v580, v585);
                  v582 -= 4;
                }
                while (v582);
                int8x8_t v586 = vorr_s8(*(int8x8_t *)v581.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v581, v581, 8uLL));
                unsigned int v587 = v586.i32[0] | v586.i32[1];
                HIDWORD(v698) = v586.i32[0] | v586.i32[1];
                uint64_t v588 = v572 | v573 | v571 & 8 | v574;
                uint64_t v699 = v588 << 44;
                int v680 = *((unsigned __int8 *)v732 + 57);
                char v700 = *((unsigned char *)v732 + 57);
                *(_WORD *)v701 = 0;
                v701[2] = 0;
                v589 = *v336;
                int v681 = v589[201];
                v701[3] = v589[201];
                v701[4] = v589[222];
                int v682 = v701[4];
                int v684 = v589[223];
                v701[5] = v589[223];
                *(_WORD *)&v701[6] = 0;
                v701[8] = 0;
                unsigned __int8 v686 = *((unsigned char *)v732 + 200) + 1;
                v701[9] = v686;
                LODWORD(v589) = *((unsigned __int8 *)v732 + 201);
                LOBYTE(v702) = 3;
                int v688 = (int)v589;
                v701[10] = (_BYTE)v589;
                uint64_t v334 = sub_1D0C4CAD0((uint64_t)&v744, (unsigned int *)__p[0], (char *)__p[1] - (char *)__p[0]);
                if (v334) {
                  goto LABEL_424;
                }
                v590 = v746;
                if (HIDWORD(v748) && v746 < v747)
                {
                  v590 = (_DWORD *)((char *)v746 + 1);
                  v746 = (_DWORD *)((char *)v746 + 1);
                }
                uint64_t v748 = 0x1000000;
                _DWORD *v590 = 1;
                int v591 = v748 << ((BYTE4(v748) + 8) & 0xF8);
                v592 = (_DWORD *)((char *)v746 + ((unint64_t)(SHIDWORD(v748) + 8) >> 3));
                v746 = v592;
                char v593 = BYTE4(v748) & 7;
                HIDWORD(v748) = BYTE4(v748) & 7;
                if (v592 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v592 = v747;
                }
                LODWORD(v748) = (v575 << (30 - v593)) | v591;
                _DWORD *v592 = bswap32(v748);
                unint64_t v594 = SHIDWORD(v748) + 2;
                int v595 = v748 << (v594 & 0xF8);
                v596 = (_DWORD *)((char *)v746 + (v594 >> 3));
                v746 = v596;
                int v597 = v594 & 7;
                HIDWORD(v748) = v597;
                if (v596 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v596 = v747;
                }
                LODWORD(v748) = (v576 << (v597 ^ 0x1F)) | v595;
                _DWORD *v596 = bswap32(v748);
                unint64_t v598 = SHIDWORD(v748) + 1;
                int v599 = v748 << (v598 & 0xF8);
                v600 = (_DWORD *)((char *)v746 + (v598 >> 3));
                v746 = v600;
                int v601 = v598 & 7;
                HIDWORD(v748) = v601;
                if (v600 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v600 = v747;
                }
                LODWORD(v748) = (v577 << (27 - v601)) | v599;
                _DWORD *v600 = bswap32(v748);
                unint64_t v602 = SHIDWORD(v748) + 5;
                LODWORD(v748) = v748 << (v602 & 0xF8);
                v746 = (_DWORD *)((char *)v746 + (v602 >> 3));
                HIDWORD(v748) = v602 & 7;
                if (v746 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                }
                sub_1D0C977C0((uint64_t)&v744, v587, 32);
                LODWORD(v748) = (v588 << 12 << (16 - BYTE4(v748))) | v748;
                _DWORD *v746 = bswap32(v748);
                LODWORD(v748) = v748 << ((BYTE4(v748) + 16) & 0xF8);
                v746 = (_DWORD *)((char *)v746 + ((unint64_t)(SHIDWORD(v748) + 16) >> 3));
                HIDWORD(v748) = BYTE4(v748) & 7;
                if (v746 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                }
                sub_1D0C977C0((uint64_t)&v744, 0, 32);
                LODWORD(v748) = (v680 << (24 - BYTE4(v748))) | v748;
                _DWORD *v746 = bswap32(v748);
                int v603 = v748 << ((BYTE4(v748) + 8) & 0xF8);
                v604 = (_DWORD *)((char *)v746 + ((unint64_t)(SHIDWORD(v748) + 8) >> 3));
                v746 = v604;
                char v605 = BYTE4(v748) & 7;
                HIDWORD(v748) = BYTE4(v748) & 7;
                if (v604 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v604 = v747;
                }
                LODWORD(v748) = (15 << (28 - v605)) | v603;
                _DWORD *v604 = bswap32(v748);
                unint64_t v606 = SHIDWORD(v748) + 4;
                unsigned int v607 = v748 << (v606 & 0xF8);
                v608 = (_DWORD *)((char *)v746 + (v606 >> 3));
                v746 = v608;
                HIDWORD(v748) = v606 & 7;
                if (v608 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v608 = v747;
                }
                LODWORD(v748) = v748 << (v606 & 0xF8);
                _DWORD *v608 = bswap32(v607);
                unint64_t v609 = SHIDWORD(v748) + 12;
                int v610 = v748 << (v609 & 0xF8);
                v611 = (_DWORD *)((char *)v746 + (v609 >> 3));
                v746 = v611;
                int v612 = v609 & 7;
                HIDWORD(v748) = v612;
                if (v611 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v611 = v747;
                }
                LODWORD(v748) = (63 << (26 - v612)) | v610;
                _DWORD *v611 = bswap32(v748);
                unint64_t v613 = SHIDWORD(v748) + 6;
                unsigned int v614 = v748 << (v613 & 0xF8);
                v615 = (_DWORD *)((char *)v746 + (v613 >> 3));
                v746 = v615;
                HIDWORD(v748) = v613 & 7;
                if (v615 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v615 = v747;
                }
                LODWORD(v748) = v748 << (v613 & 0xF8);
                _DWORD *v615 = bswap32(v614);
                unint64_t v616 = SHIDWORD(v748) + 2;
                int v617 = v748 << (v616 & 0xF8);
                v618 = (_DWORD *)((char *)v746 + (v616 >> 3));
                v746 = v618;
                int v619 = v616 & 7;
                HIDWORD(v748) = v619;
                if (v618 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v618 = v747;
                }
                LODWORD(v748) = (63 << (26 - v619)) | v617;
                _DWORD *v618 = bswap32(v748);
                unint64_t v620 = SHIDWORD(v748) + 6;
                int v621 = v748 << (v620 & 0xF8);
                v622 = (_DWORD *)((char *)v746 + (v620 >> 3));
                v746 = v622;
                int v623 = v620 & 7;
                HIDWORD(v748) = v623;
                if (v622 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v622 = v747;
                }
                LODWORD(v748) = (v681 << (30 - v623)) | v621;
                _DWORD *v622 = bswap32(v748);
                unint64_t v624 = SHIDWORD(v748) + 2;
                int v625 = v748 << (v624 & 0xF8);
                v626 = (_DWORD *)((char *)v746 + (v624 >> 3));
                v746 = v626;
                int v627 = v624 & 7;
                HIDWORD(v748) = v627;
                if (v626 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v626 = v747;
                }
                LODWORD(v748) = (31 << (27 - v627)) | v625;
                _DWORD *v626 = bswap32(v748);
                unint64_t v628 = SHIDWORD(v748) + 5;
                int v629 = v748 << (v628 & 0xF8);
                v630 = (_DWORD *)((char *)v746 + (v628 >> 3));
                v746 = v630;
                int v631 = v628 & 7;
                HIDWORD(v748) = v631;
                if (v630 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v630 = v747;
                }
                LODWORD(v748) = (v682 << (29 - v631)) | v629;
                _DWORD *v630 = bswap32(v748);
                unint64_t v632 = SHIDWORD(v748) + 3;
                int v633 = v748 << (v632 & 0xF8);
                v634 = (_DWORD *)((char *)v746 + (v632 >> 3));
                v746 = v634;
                int v635 = v632 & 7;
                HIDWORD(v748) = v635;
                if (v634 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v634 = v747;
                }
                LODWORD(v748) = (31 << (27 - v635)) | v633;
                _DWORD *v634 = bswap32(v748);
                unint64_t v636 = SHIDWORD(v748) + 5;
                int v637 = v748 << (v636 & 0xF8);
                v638 = (_DWORD *)((char *)v746 + (v636 >> 3));
                v746 = v638;
                int v639 = v636 & 7;
                HIDWORD(v748) = v639;
                if (v638 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v638 = v747;
                }
                LODWORD(v748) = (v684 << (29 - v639)) | v637;
                _DWORD *v638 = bswap32(v748);
                unint64_t v640 = SHIDWORD(v748) + 3;
                unsigned int v641 = v748 << (v640 & 0xF8);
                v642 = (_DWORD *)((char *)v746 + (v640 >> 3));
                v746 = v642;
                HIDWORD(v748) = v640 & 7;
                if (v642 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v642 = v747;
                }
                LODWORD(v748) = v748 << (v640 & 0xF8);
                _DWORD *v642 = bswap32(v641);
                unsigned int v643 = v748 << ((BYTE4(v748) + 16) & 0xF8);
                v644 = (_DWORD *)((char *)v746 + ((unint64_t)(SHIDWORD(v748) + 16) >> 3));
                v746 = v644;
                HIDWORD(v748) = BYTE4(v748) & 7;
                if (v644 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v644 = v747;
                }
                LODWORD(v748) = v643;
                _DWORD *v644 = bswap32(v643);
                unint64_t v645 = SHIDWORD(v748) + 2;
                int v646 = v748 << (v645 & 0xF8);
                v647 = (_DWORD *)((char *)v746 + (v645 >> 3));
                v746 = v647;
                int v648 = v645 & 7;
                HIDWORD(v748) = v648;
                if (v647 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v647 = v747;
                }
                LODWORD(v748) = (v686 << (29 - v648)) | v646;
                _DWORD *v647 = bswap32(v748);
                unint64_t v649 = SHIDWORD(v748) + 3;
                int v650 = v748 << (v649 & 0xF8);
                v651 = (_DWORD *)((char *)v746 + (v649 >> 3));
                v746 = v651;
                int v652 = v649 & 7;
                HIDWORD(v748) = v652;
                if (v651 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v651 = v747;
                }
                LODWORD(v748) = (v688 << (v652 ^ 0x1F)) | v650;
                _DWORD *v651 = bswap32(v748);
                unint64_t v653 = SHIDWORD(v748) + 1;
                int v654 = v748 << (v653 & 0xF8);
                v655 = (_DWORD *)((char *)v746 + (v653 >> 3));
                v746 = v655;
                int v656 = v653 & 7;
                HIDWORD(v748) = v656;
                if (v655 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v655 = v747;
                }
                LODWORD(v748) = (3 << (30 - v656)) | v654;
                _DWORD *v655 = bswap32(v748);
                unint64_t v657 = SHIDWORD(v748) + 2;
                int v658 = v748 << (v657 & 0xF8);
                v659 = (_DWORD *)((char *)v746 + (v657 >> 3));
                v746 = v659;
                int v660 = v657 & 7;
                HIDWORD(v748) = v660;
                if (v659 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v659 = v747;
                }
                LODWORD(v748) = (HIBYTE(v702) << (24 - v660)) | v658;
                _DWORD *v659 = bswap32(v748);
                int v661 = v748 << ((BYTE4(v748) + 8) & 0xF8);
                LODWORD(v748) = v661;
                v662 = (_DWORD *)((char *)v746 + ((unint64_t)(SHIDWORD(v748) + 8) >> 3));
                v746 = v662;
                char v663 = BYTE4(v748) & 7;
                HIDWORD(v748) = BYTE4(v748) & 7;
                if (v662 >= v747)
                {
                  char v749 = 1;
                  v746 = v747;
                  v662 = v747;
                }
                uint64_t v664 = 0;
                while (1)
                {
                  if (*((unsigned char *)&v691 + v664))
                  {
                    LODWORD(v748) = (0x80000000 >> v663) | v661;
                    _DWORD *v662 = bswap32(v748);
                    unint64_t v665 = SHIDWORD(v748) + 1;
                    unsigned int v666 = v748 << (v665 & 0xF8);
                    LODWORD(v748) = v666;
                    v667 = (_DWORD *)((char *)v746 + (v665 >> 3));
                    v746 = v667;
                    HIDWORD(v748) = v665 & 7;
                    if (v667 >= v747)
                    {
                      char v749 = 1;
                      v746 = v747;
                      v667 = v747;
                    }
                    _DWORD *v667 = bswap32(v666);
                    unint64_t v668 = SHIDWORD(v748) + 1;
                    v669 = (_DWORD *)((char *)v746 + (v668 >> 3));
                    v746 = v669;
                    HIDWORD(v748) = v668 & 7;
                    if (v669 >= v747)
                    {
                      char v749 = 1;
                      v746 = v747;
                      v669 = v747;
                    }
                    LODWORD(v748) = (v705[v664] << (26 - (v668 & 7))) | (v748 << (v668 & 0xF8));
                    _DWORD *v669 = bswap32(v748);
                    unint64_t v670 = SHIDWORD(v748) + 6;
                    v671 = (_DWORD *)((char *)v746 + (v670 >> 3));
                    v746 = v671;
                    HIDWORD(v748) = v670 & 7;
                    if (v671 >= v747)
                    {
                      char v749 = 1;
                      v746 = v747;
                      v671 = v747;
                    }
                    uint64_t v672 = *((unsigned __int8 *)&v691 + v664);
                    LODWORD(v748) = (v672 << (16 - (v670 & 7))) | (v748 << (v670 & 0xF8));
                    _DWORD *v671 = bswap32(v748);
                    int v673 = v748 << ((BYTE4(v748) + 16) & 0xF8);
                    LODWORD(v748) = v673;
                    v662 = (_DWORD *)((char *)v746 + ((unint64_t)(SHIDWORD(v748) + 16) >> 3));
                    v746 = v662;
                    char v663 = BYTE4(v748) & 7;
                    HIDWORD(v748) = BYTE4(v748) & 7;
                    if (v662 >= v747)
                    {
                      char v749 = 1;
                      v746 = v747;
                      v662 = v747;
                    }
                    if (v672)
                    {
                      v674 = (&v719)[v664];
                      v675 = (&v714)[v664];
                      while (1)
                      {
                        uint64_t v677 = *v675++;
                        int v676 = v677;
                        LODWORD(v748) = (v677 << (16 - v663)) | v673;
                        _DWORD *v662 = bswap32(v748);
                        LODWORD(v748) = v748 << ((BYTE4(v748) + 16) & 0xF8);
                        v678 = (_DWORD *)((char *)v746 + ((unint64_t)(SHIDWORD(v748) + 16) >> 3));
                        v746 = v678;
                        HIDWORD(v748) = BYTE4(v748) & 7;
                        if (v678 >= v747)
                        {
                          char v749 = 1;
                          v746 = v747;
                          v678 = v747;
                        }
                        if ((char *)v747 - (char *)v678 < (unint64_t)v676) {
                          break;
                        }
                        uint64_t v679 = v676;
                        memcpy(v678, v674, v676);
                        char v663 = BYTE4(v748);
                        v662 = (_DWORD *)((char *)v746 + v679 + (SHIDWORD(v748) >> 3));
                        v746 = v662;
                        if (v662 >= v747)
                        {
                          char v749 = 1;
                          v746 = v747;
                          v662 = v747;
                        }
                        int v673 = 0;
                        int v661 = 0;
                        LODWORD(v748) = 0;
                        v674 += v679;
                        if (!--v672) {
                          goto LABEL_555;
                        }
                      }
                      uint64_t v334 = 4294940770;
                      break;
                    }
                    int v661 = v673;
                  }
LABEL_555:
                  if (++v664 == 5)
                  {
                    uint64_t v334 = 0;
                    __n[1] = (size_t)v662 - *((void *)&v745 + 1);
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_424:
  if (v743) {
    sub_1D0C4C984(v743);
  }
  if (v742) {
    sub_1D0C4C984(v742);
  }
  if (v740) {
    sub_1D0C4C984(v740);
  }
  uint64_t v549 = 191;
  a2 = v690;
  do
  {
    v550 = (std::__shared_weak_count *)(&v732)[v549];
    if (v550) {
      sub_1D0C4C984(v550);
    }
    v549 -= 2;
  }
  while (v549 != 63);
  do
  {
    v551 = (std::__shared_weak_count *)(&v732)[v549];
    if (v551) {
      sub_1D0C4C984(v551);
    }
    v549 -= 2;
  }
  while (v549 != 31);
  do
  {
    v552 = (std::__shared_weak_count *)(&v732)[v549];
    if (v552) {
      sub_1D0C4C984(v552);
    }
    v549 -= 2;
  }
  while (v549 != -1);
  if ((void)v744)
  {
    *((void *)&v744 + 1) = v744;
    operator delete((void *)v744);
  }
  if (v334)
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Configuration record creation from parameter sets failed\n", 0x39uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Configuration record creation from parameter sets failed\n");
    }
LABEL_452:
    v555 = __p[0];
    if (!__p[0]) {
      goto LABEL_454;
    }
    goto LABEL_453;
  }
  size_t v554 = __n[1];
  if (v318 < __n[1])
  {
    uint64_t v334 = 4294954394;
    a2 = v690;
    goto LABEL_452;
  }
  v555 = __p[0];
  memcpy(v319, __p[0], __n[1]);
  uint64_t v334 = 0;
  unint64_t v318 = v554;
  a2 = v690;
  if (v555) {
LABEL_453:
  }
    operator delete(v555);
LABEL_454:
  if (!v334)
  {
    if (*(unsigned char *)(a1 + 424)) {
      *(unsigned char *)(a1 + 11012) &= CC_MD5_Update((CC_MD5_CTX *)(a1 + 10920), v319, v318);
    }
    if (*(_DWORD *)(a1 + 456) == 1)
    {
      v558 = *(const void **)(a1 + 680);
      if (v558)
      {
        memcpy(&v319[v318], v558, v689 + 1);
        v318 += v689 + 1;
      }
    }
    CFDataRef v556 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v319, v318);
    if (v556)
    {
      free(v319);
      uint64_t v334 = 0;
      goto LABEL_459;
    }
    if (dword_1EB671A40 >= 3)
    {
      v553 = "Creating hvcCData failed\n";
      fwrite("Creating hvcCData failed\n", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      goto LABEL_448;
    }
    goto LABEL_468;
  }
  if (dword_1EB671A40 >= 3)
  {
    v553 = "LRPParameterSetsToConfigurationRecord failed";
    fwrite("LRPParameterSetsToConfigurationRecord failed", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    goto LABEL_457;
  }
LABEL_458:
  free(v319);
  CFDataRef v556 = 0;
LABEL_459:
  *a2 = v556;
  return v334;
}

void sub_1D0CF6810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  sub_1D0C97AC0(&STACK[0x910]);
  uint64_t v24 = *(void **)(v22 + 3696);
  if (v24)
  {
    *(void *)(v22 + 3704) = v24;
    operator delete(v24);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

size_t sub_1D0CF68A4(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  memset(__p, 0, sizeof(__p));
  uint64_t v475 = 0;
  int v476 = 0;
  unint64_t v477 = 0;
  int v4 = sub_1D0C976F4((uint64_t)__p, 0x400u);
  if (v4) {
    goto LABEL_3;
  }
  size_t v8 = *(unsigned __int8 **)(a1 + 9752);
  *uint64_t v475 = bswap32(v477);
  unint64_t v9 = SHIDWORD(v477) + 1;
  int v10 = v477 << (v9 & 0xF8);
  uint64_t v11 = (_DWORD *)((char *)v475 + (v9 >> 3));
  uint64_t v475 = v11;
  int v12 = v9 & 7;
  HIDWORD(v477) = v12;
  if (v11 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    uint64_t v11 = v476;
  }
  LODWORD(v477) = (33 << (26 - v12)) | v10;
  *uint64_t v11 = bswap32(v477);
  unint64_t v13 = SHIDWORD(v477) + 6;
  unsigned int v14 = v477 << (v13 & 0xF8);
  int v15 = (_DWORD *)((char *)v475 + (v13 >> 3));
  uint64_t v475 = v15;
  LODWORD(v477) = v14;
  HIDWORD(v477) = v13 & 7;
  if (v15 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v15 = v476;
  }
  *int v15 = bswap32(v14);
  unint64_t v16 = SHIDWORD(v477) + 6;
  uint64_t v17 = (_DWORD *)((char *)v475 + (v16 >> 3));
  uint64_t v475 = v17;
  HIDWORD(v477) = v16 & 7;
  if (v17 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    uint64_t v17 = v476;
  }
  LODWORD(v477) = (1 << (29 - (v16 & 7))) | (v477 << (v16 & 0xF8));
  *uint64_t v17 = bswap32(v477);
  unint64_t v18 = SHIDWORD(v477) + 3;
  int v19 = v477 << (v18 & 0xF8);
  uint64_t v20 = (_DWORD *)((char *)v475 + (v18 >> 3));
  uint64_t v475 = v20;
  int v21 = v18 & 7;
  HIDWORD(v477) = v21;
  if (v20 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    uint64_t v20 = v476;
  }
  LODWORD(v477) = (*v8 << (28 - v21)) | v19;
  *uint64_t v20 = bswap32(v477);
  unint64_t v22 = SHIDWORD(v477) + 4;
  int v23 = v477 << (v22 & 0xF8);
  uint64_t v24 = (_DWORD *)((char *)v475 + (v22 >> 3));
  uint64_t v475 = v24;
  int v25 = v22 & 7;
  HIDWORD(v477) = v25;
  if (v24 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    uint64_t v24 = v476;
  }
  LODWORD(v477) = (v8[1] << (29 - v25)) | v23;
  *uint64_t v24 = bswap32(v477);
  unint64_t v26 = SHIDWORD(v477) + 3;
  int v27 = v477 << (v26 & 0xF8);
  int v28 = (_DWORD *)((char *)v475 + (v26 >> 3));
  uint64_t v475 = v28;
  int v29 = v26 & 7;
  HIDWORD(v477) = v29;
  if (v28 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v28 = v476;
  }
  LODWORD(v477) = (v8[2] << (v29 ^ 0x1F)) | v27;
  *int v28 = bswap32(v477);
  unint64_t v30 = SHIDWORD(v477) + 1;
  uint64_t v475 = (_DWORD *)((char *)v475 + (v30 >> 3));
  LODWORD(v477) = v477 << (v30 & 0xF8);
  HIDWORD(v477) = v30 & 7;
  if (v475 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
  }
  sub_1D0CE7A48(v8 + 4, 1, v8[1], (uint64_t)__p);
  unsigned int v31 = v8[200] + 1;
  unsigned int v32 = __clz(v31);
  unsigned int v33 = (v31 - (0x80000000 >> v32)) | (0x80000000 >> v32);
  uint64_t v34 = (2 * v32) ^ 0x3F;
  LODWORD(v477) = (v33 << (-BYTE4(v477) - v34)) | v477;
  *uint64_t v475 = bswap32(v477);
  unint64_t v35 = SHIDWORD(v477) + v34;
  int v36 = v477 << (v35 & 0xF8);
  unint64_t v37 = (_DWORD *)((char *)v475 + (v35 >> 3));
  uint64_t v475 = v37;
  char v38 = v35 & 7;
  HIDWORD(v477) = v35 & 7;
  if (v37 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    unint64_t v37 = v476;
  }
  unsigned int v39 = v8[201] + 1;
  unsigned int v40 = __clz(v39);
  LODWORD(v477) = (((v39 - (0x80000000 >> v40)) | (0x80000000 >> v40)) << (-((2 * v40) ^ 0x3F) - v38)) | v36;
  *unint64_t v37 = bswap32(v477);
  int v41 = v477 << ((BYTE4(v477) + ((2 * v40) ^ 0x3F)) & 0xF8);
  int v42 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v40) ^ 0x3FuLL)) >> 3));
  uint64_t v475 = v42;
  char v43 = (BYTE4(v477) + ((2 * v40) ^ 0x3F)) & 7;
  LODWORD(v477) = v41;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v40) ^ 0x3F)) & 7;
  if (v42 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v42 = v476;
  }
  if (v8[201] == 3)
  {
    LODWORD(v477) = (v8[202] << (v43 ^ 0x1F)) | v41;
    *int v42 = bswap32(v477);
    unint64_t v44 = SHIDWORD(v477) + 1;
    uint64_t v475 = (_DWORD *)((char *)v475 + (v44 >> 3));
    LODWORD(v477) = v477 << (v44 & 0xF8);
    HIDWORD(v477) = v44 & 7;
    if (v475 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
    }
  }
  sub_1D0C97824((uint64_t)__p, *((_DWORD *)v8 + 51));
  sub_1D0C97824((uint64_t)__p, *((_DWORD *)v8 + 52));
  LODWORD(v477) = (v8[212] << ~BYTE4(v477)) | v477;
  *uint64_t v475 = bswap32(v477);
  unint64_t v45 = SHIDWORD(v477) + 1;
  int v46 = v477 << (v45 & 0xF8);
  uint64_t v47 = (_DWORD *)((char *)v475 + (v45 >> 3));
  uint64_t v475 = v47;
  char v48 = v45 & 7;
  LODWORD(v477) = v46;
  HIDWORD(v477) = v45 & 7;
  if (v47 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    uint64_t v47 = v476;
  }
  if (v8[212])
  {
    sub_1D0C97824((uint64_t)__p, *((unsigned __int16 *)v8 + 107));
    sub_1D0C97824((uint64_t)__p, *((unsigned __int16 *)v8 + 108));
    sub_1D0C97824((uint64_t)__p, *((unsigned __int16 *)v8 + 109));
    sub_1D0C97824((uint64_t)__p, *((unsigned __int16 *)v8 + 110));
    int v46 = v477;
    char v48 = BYTE4(v477);
    uint64_t v47 = v475;
  }
  unsigned int v49 = v8[222] + 1;
  unsigned int v50 = __clz(v49);
  unsigned int v51 = 0x80000000 >> v50;
  uint64_t v52 = (2 * v50) ^ 0x3F;
  LODWORD(v477) = (((v49 - v51) | v51) << (-v48 - v52)) | v46;
  *uint64_t v47 = bswap32(v477);
  unint64_t v53 = SHIDWORD(v477) + v52;
  int v54 = v477 << (v53 & 0xF8);
  int v55 = (_DWORD *)((char *)v475 + (v53 >> 3));
  uint64_t v475 = v55;
  int v56 = v53 & 7;
  HIDWORD(v477) = v56;
  if (v55 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v55 = v476;
  }
  unsigned int v57 = v8[223] + 1;
  unsigned int v58 = __clz(v57);
  LODWORD(v477) = (((v57 - (0x80000000 >> v58)) | (0x80000000 >> v58)) << (-((2 * v58) ^ 0x3F) - v56)) | v54;
  *int v55 = bswap32(v477);
  int v59 = v477 << ((BYTE4(v477) + ((2 * v58) ^ 0x3F)) & 0xF8);
  int v60 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v58) ^ 0x3FuLL)) >> 3));
  uint64_t v475 = v60;
  char v61 = (BYTE4(v477) + ((2 * v58) ^ 0x3F)) & 7;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v58) ^ 0x3F)) & 7;
  if (v60 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v60 = v476;
  }
  unsigned int v62 = v8[224] + 1;
  unsigned int v63 = __clz(v62);
  unsigned int v64 = (v62 - (0x80000000 >> v63)) | (0x80000000 >> v63);
  uint64_t v65 = (2 * v63) ^ 0x3F;
  LODWORD(v477) = (v64 << (-(char)v65 - v61)) | v59;
  _DWORD *v60 = bswap32(v477);
  unint64_t v66 = SHIDWORD(v477) + v65;
  int v67 = v477 << (v66 & 0xF8);
  int v68 = (_DWORD *)((char *)v475 + (v66 >> 3));
  uint64_t v475 = v68;
  int v69 = v66 & 7;
  HIDWORD(v477) = v69;
  if (v68 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v68 = v476;
  }
  LODWORD(v477) = (v8[225] << (v69 ^ 0x1F)) | v67;
  *int v68 = bswap32(v477);
  unint64_t v70 = SHIDWORD(v477) + 1;
  unsigned int v71 = v477 << (v70 & 0xF8);
  unsigned int v72 = (_DWORD *)((char *)v475 + (v70 >> 3));
  uint64_t v475 = v72;
  LOBYTE(v73) = v70 & 7;
  LODWORD(v477) = v71;
  HIDWORD(v477) = v70 & 7;
  if (v72 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    unsigned int v72 = v476;
  }
  if (v8[225]) {
    unsigned __int8 v74 = 0;
  }
  else {
    unsigned __int8 v74 = v8[1];
  }
  unint64_t v75 = v74;
  do
  {
    unsigned int v76 = v8[v75 + 226] + 1;
    unsigned int v77 = __clz(v76);
    unsigned int v78 = 0x80000000 >> v77;
    uint64_t v79 = (2 * v77) ^ 0x3F;
    LODWORD(v477) = (((v76 - v78) | v78) << (-(char)v73 - v79)) | v71;
    *unsigned int v72 = bswap32(v477);
    unint64_t v80 = SHIDWORD(v477) + v79;
    unsigned int v81 = v477 << (v80 & 0xF8);
    uint64_t v82 = (_DWORD *)((char *)v475 + (v80 >> 3));
    uint64_t v475 = v82;
    unsigned int v83 = v80 & 7;
    unint64_t v477 = __PAIR64__(v83, v81);
    if (v82 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      uint64_t v82 = v476;
    }
    unsigned int v84 = v8[v75 + 233] + 1;
    unsigned int v85 = __clz(v84);
    unsigned int v86 = (v84 - (0x80000000 >> v85)) | (0x80000000 >> v85);
    uint64_t v87 = (2 * v85) ^ 0x3F;
    LODWORD(v477) = (v86 << (-(char)v87 - v83)) | v81;
    *uint64_t v82 = bswap32(v477);
    unint64_t v88 = SHIDWORD(v477) + v87;
    unsigned int v89 = v477 << (v88 & 0xF8);
    unsigned int v90 = (_DWORD *)((char *)v475 + (v88 >> 3));
    uint64_t v475 = v90;
    unsigned int v91 = v88 & 7;
    unint64_t v477 = __PAIR64__(v91, v89);
    if (v90 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      unsigned int v90 = v476;
    }
    unsigned int v92 = *(_DWORD *)&v8[4 * v75 + 240] + 1;
    unsigned int v93 = __clz(v92);
    unsigned int v94 = (v92 - (0x80000000 >> v93)) | (0x80000000 >> v93);
    uint64_t v95 = 63 - 2 * v93;
    LODWORD(v477) = (v94 << (-(char)v95 - v91)) | v89;
    *unsigned int v90 = bswap32(v477);
    unint64_t v96 = SHIDWORD(v477) + v95;
    unsigned int v71 = v477 << (v96 & 0xF8);
    unsigned int v72 = (_DWORD *)((char *)v475 + (v96 >> 3));
    uint64_t v475 = v72;
    unsigned int v73 = v96 & 7;
    unint64_t v477 = __PAIR64__(v73, v71);
    if (v72 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      unsigned int v72 = v476;
    }
  }
  while (v75++ < v8[1]);
  unsigned int v98 = v8[268] + 1;
  unsigned int v99 = __clz(v98);
  unsigned int v100 = (v98 - (0x80000000 >> v99)) | (0x80000000 >> v99);
  uint64_t v101 = (2 * v99) ^ 0x3F;
  LODWORD(v477) = (v100 << (-(char)v101 - v73)) | v71;
  *unsigned int v72 = bswap32(v477);
  unint64_t v102 = SHIDWORD(v477) + v101;
  int v103 = v477 << (v102 & 0xF8);
  int v104 = (_DWORD *)((char *)v475 + (v102 >> 3));
  uint64_t v475 = v104;
  char v105 = v102 & 7;
  HIDWORD(v477) = v102 & 7;
  if (v104 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v104 = v476;
  }
  unsigned int v106 = v8[269] + 1;
  unsigned int v107 = __clz(v106);
  LODWORD(v477) = (((v106 - (0x80000000 >> v107)) | (0x80000000 >> v107)) << (-((2 * v107) ^ 0x3F) - v105)) | v103;
  *int v104 = bswap32(v477);
  int v108 = v477 << ((BYTE4(v477) + ((2 * v107) ^ 0x3F)) & 0xF8);
  int v109 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v107) ^ 0x3FuLL)) >> 3));
  uint64_t v475 = v109;
  char v110 = (BYTE4(v477) + ((2 * v107) ^ 0x3F)) & 7;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v107) ^ 0x3F)) & 7;
  if (v109 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v109 = v476;
  }
  unsigned int v111 = v8[270] + 1;
  unsigned int v112 = __clz(v111);
  unsigned int v113 = (v111 - (0x80000000 >> v112)) | (0x80000000 >> v112);
  uint64_t v114 = (2 * v112) ^ 0x3F;
  LODWORD(v477) = (v113 << (-(char)v114 - v110)) | v108;
  *int v109 = bswap32(v477);
  unint64_t v115 = SHIDWORD(v477) + v114;
  int v116 = v477 << (v115 & 0xF8);
  long long v117 = (_DWORD *)((char *)v475 + (v115 >> 3));
  uint64_t v475 = v117;
  int v118 = v115 & 7;
  HIDWORD(v477) = v118;
  if (v117 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    long long v117 = v476;
  }
  unsigned int v119 = v8[271] + 1;
  unsigned int v120 = __clz(v119);
  LODWORD(v477) = (((v119 - (0x80000000 >> v120)) | (0x80000000 >> v120)) << (-((2 * v120) ^ 0x3F) - v118)) | v116;
  *long long v117 = bswap32(v477);
  int v121 = v477 << ((BYTE4(v477) + ((2 * v120) ^ 0x3F)) & 0xF8);
  int v122 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v120) ^ 0x3FuLL)) >> 3));
  uint64_t v475 = v122;
  char v123 = (BYTE4(v477) + ((2 * v120) ^ 0x3F)) & 7;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v120) ^ 0x3F)) & 7;
  if (v122 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v122 = v476;
  }
  unsigned int v124 = v8[272] + 1;
  unsigned int v125 = __clz(v124);
  unsigned int v126 = (v124 - (0x80000000 >> v125)) | (0x80000000 >> v125);
  uint64_t v127 = (2 * v125) ^ 0x3F;
  LODWORD(v477) = (v126 << (-(char)v127 - v123)) | v121;
  *int v122 = bswap32(v477);
  unint64_t v128 = SHIDWORD(v477) + v127;
  int v129 = v477 << (v128 & 0xF8);
  unsigned int v130 = (_DWORD *)((char *)v475 + (v128 >> 3));
  uint64_t v475 = v130;
  int v131 = v128 & 7;
  HIDWORD(v477) = v131;
  if (v130 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    unsigned int v130 = v476;
  }
  unsigned int v132 = v8[273] + 1;
  unsigned int v133 = __clz(v132);
  LODWORD(v477) = (((v132 - (0x80000000 >> v133)) | (0x80000000 >> v133)) << (-((2 * v133) ^ 0x3F) - v131)) | v129;
  *unsigned int v130 = bswap32(v477);
  int v134 = v477 << ((BYTE4(v477) + ((2 * v133) ^ 0x3F)) & 0xF8);
  int v135 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v133) ^ 0x3FuLL)) >> 3));
  uint64_t v475 = v135;
  char v136 = (BYTE4(v477) + ((2 * v133) ^ 0x3F)) & 7;
  HIDWORD(v477) = (HIDWORD(v477) + ((2 * v133) ^ 0x3F)) & 7;
  if (v135 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v135 = v476;
  }
  LODWORD(v477) = (v8[274] << (v136 ^ 0x1F)) | v134;
  *int v135 = bswap32(v477);
  unint64_t v137 = SHIDWORD(v477) + 1;
  char v138 = v137 & 0xF8;
  char v139 = (_DWORD *)((char *)v475 + (v137 >> 3));
  uint64_t v475 = v139;
  unsigned int v140 = v137 & 7;
  HIDWORD(v477) = v140;
  if (v139 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    char v139 = v476;
  }
  unsigned int v141 = v477 << v138;
  if (v8[274])
  {
    LODWORD(v477) = (v8[275] << (v140 ^ 0x1F)) | v141;
    *char v139 = bswap32(v477);
    unint64_t v142 = SHIDWORD(v477) + 1;
    unsigned int v141 = v477 << (v142 & 0xF8);
    char v139 = (_DWORD *)((char *)v475 + (v142 >> 3));
    uint64_t v475 = v139;
    unsigned int v140 = v142 & 7;
    unint64_t v477 = __PAIR64__(v140, v141);
    if (v139 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      char v139 = v476;
    }
    if (v8[275])
    {
      sub_1D0C97B54((uint64_t)(v8 + 416), (uint64_t)__p);
      unsigned int v141 = v477;
      LOBYTE(v140) = BYTE4(v477);
      char v139 = v475;
    }
  }
  LODWORD(v477) = (v8[276] << ~(_BYTE)v140) | v141;
  *char v139 = bswap32(v477);
  unint64_t v143 = SHIDWORD(v477) + 1;
  int v144 = v477 << (v143 & 0xF8);
  int v145 = (_DWORD *)((char *)v475 + (v143 >> 3));
  uint64_t v475 = v145;
  int v146 = v143 & 7;
  HIDWORD(v477) = v146;
  if (v145 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v145 = v476;
  }
  LODWORD(v477) = (v8[277] << (v146 ^ 0x1F)) | v144;
  *int v145 = bswap32(v477);
  unint64_t v147 = SHIDWORD(v477) + 1;
  int v148 = v477 << (v147 & 0xF8);
  unint64_t v149 = (_DWORD *)((char *)v475 + (v147 >> 3));
  uint64_t v475 = v149;
  int v150 = v147 & 7;
  HIDWORD(v477) = v150;
  if (v149 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    unint64_t v149 = v476;
  }
  LODWORD(v477) = (v8[278] << (v150 ^ 0x1F)) | v148;
  *unint64_t v149 = bswap32(v477);
  unint64_t v151 = SHIDWORD(v477) + 1;
  char v152 = v151 & 0xF8;
  int v153 = (_DWORD *)((char *)v475 + (v151 >> 3));
  uint64_t v475 = v153;
  int v154 = v151 & 7;
  HIDWORD(v477) = v154;
  if (v153 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v153 = v476;
  }
  int v155 = v477 << v152;
  if (v8[278])
  {
    LODWORD(v477) = (v8[279] << (28 - v154)) | v155;
    *int v153 = bswap32(v477);
    unint64_t v156 = SHIDWORD(v477) + 4;
    int v157 = v477 << (v156 & 0xF8);
    uint64_t v158 = (_DWORD *)((char *)v475 + (v156 >> 3));
    uint64_t v475 = v158;
    int v159 = v156 & 7;
    HIDWORD(v477) = v159;
    if (v158 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      uint64_t v158 = v476;
    }
    LODWORD(v477) = (v8[280] << (28 - v159)) | v157;
    *uint64_t v158 = bswap32(v477);
    unint64_t v160 = SHIDWORD(v477) + 4;
    int v161 = v477 << (v160 & 0xF8);
    unint64_t v162 = (_DWORD *)((char *)v475 + (v160 >> 3));
    uint64_t v475 = v162;
    int v163 = v160 & 7;
    HIDWORD(v477) = v163;
    if (v162 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      unint64_t v162 = v476;
    }
    unsigned int v164 = v8[281] + 1;
    unsigned int v165 = __clz(v164);
    unsigned int v166 = 0x80000000 >> v165;
    uint64_t v167 = (2 * v165) ^ 0x3F;
    LODWORD(v477) = (((v164 - v166) | v166) << (-(char)v163 - v167)) | v161;
    *unint64_t v162 = bswap32(v477);
    unint64_t v168 = SHIDWORD(v477) + v167;
    int v169 = v477 << (v168 & 0xF8);
    unint64_t v170 = (_DWORD *)((char *)v475 + (v168 >> 3));
    uint64_t v475 = v170;
    int v171 = v168 & 7;
    HIDWORD(v477) = v171;
    if (v170 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      unint64_t v170 = v476;
    }
    unsigned int v172 = v8[282] + 1;
    unsigned int v173 = __clz(v172);
    LODWORD(v477) = (((v172 - (0x80000000 >> v173)) | (0x80000000 >> v173)) << (-((2 * v173) ^ 0x3F) - v171)) | v169;
    *unint64_t v170 = bswap32(v477);
    int v174 = v477 << ((BYTE4(v477) + ((2 * v173) ^ 0x3F)) & 0xF8);
    int v175 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v173) ^ 0x3FuLL)) >> 3));
    uint64_t v475 = v175;
    char v176 = (BYTE4(v477) + ((2 * v173) ^ 0x3F)) & 7;
    HIDWORD(v477) = (HIDWORD(v477) + ((2 * v173) ^ 0x3F)) & 7;
    if (v175 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      int v175 = v476;
    }
    LODWORD(v477) = (v8[283] << (v176 ^ 0x1F)) | v174;
    *int v175 = bswap32(v477);
    unint64_t v177 = SHIDWORD(v477) + 1;
    int v155 = v477 << (v177 & 0xF8);
    int v153 = (_DWORD *)((char *)v475 + (v177 >> 3));
    uint64_t v475 = v153;
    int v154 = v177 & 7;
    HIDWORD(v477) = v154;
    if (v153 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      int v153 = v476;
    }
  }
  unsigned int v178 = *((_DWORD *)v8 + 72) + 1;
  unsigned int v179 = __clz(v178);
  unsigned int v180 = (v178 - (0x80000000 >> v179)) | (0x80000000 >> v179);
  uint64_t v181 = 63 - 2 * v179;
  LODWORD(v477) = (v180 << (-(char)v154 - v181)) | v155;
  *int v153 = bswap32(v477);
  unint64_t v182 = SHIDWORD(v477) + v181;
  int v183 = v477 << (v182 & 0xF8);
  uint64_t v184 = (_DWORD *)((char *)v475 + (v182 >> 3));
  uint64_t v475 = v184;
  char v185 = v182 & 7;
  LODWORD(v477) = v183;
  HIDWORD(v477) = v182 & 7;
  if (v184 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    uint64_t v184 = v476;
  }
  if (*((_DWORD *)v8 + 72))
  {
    uint64_t v186 = 0;
    unint64_t v187 = 0;
    while (1)
    {
      int v4 = sub_1D0D7BAF0(*((void *)v8 + 37) + v186, (uint64_t)__p, (uint64_t)v8, v187);
      if (v4) {
        goto LABEL_3;
      }
      ++v187;
      v186 += 248;
      if (v187 >= *((unsigned int *)v8 + 72))
      {
        int v183 = v477;
        char v185 = BYTE4(v477);
        uint64_t v184 = v475;
        break;
      }
    }
  }
  LODWORD(v477) = (v8[320] << ~v185) | v183;
  *uint64_t v184 = bswap32(v477);
  unint64_t v188 = SHIDWORD(v477) + 1;
  char v189 = v188 & 0xF8;
  uint64_t v190 = (_DWORD *)((char *)v475 + (v188 >> 3));
  uint64_t v475 = v190;
  unsigned int v191 = v188 & 7;
  HIDWORD(v477) = v191;
  if (v190 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    uint64_t v190 = v476;
  }
  unsigned int v192 = v477 << v189;
  if (v8[320])
  {
    unsigned int v193 = *((_DWORD *)v8 + 81) + 1;
    unsigned int v194 = __clz(v193);
    unsigned int v195 = (v193 - (0x80000000 >> v194)) | (0x80000000 >> v194);
    uint64_t v196 = 63 - 2 * v194;
    LODWORD(v477) = (v195 << (-(char)v191 - v196)) | v192;
    *uint64_t v190 = bswap32(v477);
    unint64_t v197 = SHIDWORD(v477) + v196;
    unsigned int v192 = v477 << (v197 & 0xF8);
    uint64_t v190 = (_DWORD *)((char *)v475 + (v197 >> 3));
    uint64_t v475 = v190;
    unsigned int v191 = v197 & 7;
    HIDWORD(v477) = v191;
    if (v190 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      uint64_t v190 = v476;
    }
    if (*((_DWORD *)v8 + 81))
    {
      unint64_t v198 = 0;
      do
      {
        unsigned int v199 = *(unsigned __int16 *)&v8[2 * v198 + 328] + 1;
        unsigned int v200 = __clz(v199);
        unsigned int v201 = 0x80000000 >> v200;
        uint64_t v202 = (2 * v200) ^ 0x3F;
        LODWORD(v477) = (((v199 - v201) | v201) << (-(char)v191 - v202)) | v192;
        *uint64_t v190 = bswap32(v477);
        unint64_t v203 = SHIDWORD(v477) + v202;
        uint64_t v204 = (_DWORD *)((char *)v475 + (v203 >> 3));
        uint64_t v475 = v204;
        HIDWORD(v477) = v203 & 7;
        if (v204 >= v476)
        {
          char v478 = 1;
          uint64_t v475 = v476;
          uint64_t v204 = v476;
        }
        LODWORD(v477) = (((*((_DWORD *)v8 + 98) >> v198) & 1) << (v203 & 7 ^ 0x1F)) | (v477 << (v203 & 0xF8));
        *uint64_t v204 = bswap32(v477);
        unint64_t v205 = SHIDWORD(v477) + 1;
        unsigned int v192 = v477 << (v205 & 0xF8);
        uint64_t v190 = (_DWORD *)((char *)v475 + (v205 >> 3));
        uint64_t v475 = v190;
        unsigned int v191 = v205 & 7;
        unint64_t v477 = __PAIR64__(v191, v192);
        if (v190 >= v476)
        {
          char v478 = 1;
          uint64_t v475 = v476;
          uint64_t v190 = v476;
        }
        ++v198;
      }
      while (v198 < *((unsigned int *)v8 + 81));
    }
  }
  LODWORD(v477) = (v8[396] << (v191 ^ 0x1F)) | v192;
  *uint64_t v190 = bswap32(v477);
  unint64_t v206 = SHIDWORD(v477) + 1;
  int v207 = v477 << (v206 & 0xF8);
  int v208 = (_DWORD *)((char *)v475 + (v206 >> 3));
  uint64_t v475 = v208;
  int v209 = v206 & 7;
  HIDWORD(v477) = v209;
  if (v208 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v208 = v476;
  }
  LODWORD(v477) = (v8[397] << (v209 ^ 0x1F)) | v207;
  *int v208 = bswap32(v477);
  unint64_t v210 = SHIDWORD(v477) + 1;
  int v211 = v477 << (v210 & 0xF8);
  uint64_t v212 = (_DWORD *)((char *)v475 + (v210 >> 3));
  uint64_t v475 = v212;
  int v213 = v210 & 7;
  HIDWORD(v477) = v213;
  if (v212 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    uint64_t v212 = v476;
  }
  LODWORD(v477) = (v8[398] << (v213 ^ 0x1F)) | v211;
  *uint64_t v212 = bswap32(v477);
  unint64_t v214 = SHIDWORD(v477) + 1;
  int v215 = (_DWORD *)((char *)v475 + (v214 >> 3));
  uint64_t v475 = v215;
  char v216 = v214 & 7;
  HIDWORD(v477) = v214 & 7;
  if (v215 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
    int v215 = v476;
  }
  int v217 = v477 << (v214 & 0xF8);
  if (v8[398])
  {
    if (*((_WORD *)v8 + 992)) {
      int v218 = 1;
    }
    else {
      int v218 = *((_WORD *)v8 + 993) != 0;
    }
    if (v8[1992] == 2 && v8[1993] == 2)
    {
      int v219 = v8[1994];
      int v220 = v219 != 2;
      int v221 = v8 + 1991;
      int v222 = 1;
      if (!v8[1991] && v219 == 2)
      {
        int v220 = 0;
        int v222 = v8[1990] != 5;
      }
    }
    else
    {
      int v221 = v8 + 1991;
      int v220 = 1;
      int v222 = 1;
    }
    if (v8[1995]) {
      int v223 = 1;
    }
    else {
      int v223 = v8[1996] != 0;
    }
    int v224 = *((_WORD *)v8 + 1000) || *((_WORD *)v8 + 1001) || *((_WORD *)v8 + 1002) || *((_WORD *)v8 + 1003) != 0;
    LODWORD(v477) = (v218 << (v216 ^ 0x1F)) | v217;
    *int v215 = bswap32(v477);
    unint64_t v227 = SHIDWORD(v477) + 1;
    char v225 = v227 & 0xF8;
    uint64_t v226 = (_DWORD *)((char *)v475 + (v227 >> 3));
    uint64_t v475 = v226;
    LODWORD(v227) = v227 & 7;
    HIDWORD(v477) = v227;
    if (v226 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      uint64_t v226 = v476;
    }
    int v228 = v477 << v225;
    if (v218)
    {
      LODWORD(v477) = (255 << (24 - v227)) | v228;
      *uint64_t v226 = bswap32(v477);
      unint64_t v229 = SHIDWORD(v477) + 8;
      int v230 = v477 << (v229 & 0xF8);
      int v231 = (_DWORD *)((char *)v475 + (v229 >> 3));
      uint64_t v475 = v231;
      char v232 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v231 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v231 = v476;
      }
      LODWORD(v477) = (*((unsigned __int16 *)v8 + 992) << (16 - v232)) | v230;
      *int v231 = bswap32(v477);
      unint64_t v233 = SHIDWORD(v477) + 16;
      int v234 = v477 << (v233 & 0xF8);
      unint64_t v227 = (unint64_t)v475 + (v233 >> 3);
      uint64_t v475 = (_DWORD *)v227;
      char v235 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v227 >= (unint64_t)v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        unint64_t v227 = (unint64_t)v476;
      }
      LODWORD(v477) = (*((unsigned __int16 *)v8 + 993) << (16 - v235)) | v234;
      *(_DWORD *)unint64_t v227 = bswap32(v477);
      unint64_t v236 = SHIDWORD(v477) + 16;
      int v228 = v477 << (v236 & 0xF8);
      uint64_t v226 = (_DWORD *)((char *)v475 + (v236 >> 3));
      uint64_t v475 = v226;
      LOBYTE(v227) = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v226 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        uint64_t v226 = v476;
      }
    }
    LODWORD(v477) = (v8[1988] << (v227 ^ 0x1F)) | v228;
    *uint64_t v226 = bswap32(v477);
    unint64_t v237 = SHIDWORD(v477) + 1;
    char v238 = v237 & 0xF8;
    int v239 = (_DWORD *)((char *)v475 + (v237 >> 3));
    uint64_t v475 = v239;
    int v240 = v237 & 7;
    HIDWORD(v477) = v240;
    if (v239 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      int v239 = v476;
    }
    int v241 = v477 << v238;
    if (v8[1988])
    {
      LODWORD(v477) = (v8[1989] << (v240 ^ 0x1F)) | v241;
      *int v239 = bswap32(v477);
      unint64_t v242 = SHIDWORD(v477) + 1;
      int v241 = v477 << (v242 & 0xF8);
      int v239 = (_DWORD *)((char *)v475 + (v242 >> 3));
      uint64_t v475 = v239;
      int v240 = v242 & 7;
      HIDWORD(v477) = v240;
      if (v239 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v239 = v476;
      }
    }
    LODWORD(v477) = (v222 << (v240 ^ 0x1F)) | v241;
    *int v239 = bswap32(v477);
    unint64_t v243 = SHIDWORD(v477) + 1;
    char v244 = v243 & 0xF8;
    uint64_t v245 = (_DWORD *)((char *)v475 + (v243 >> 3));
    uint64_t v475 = v245;
    int v246 = v243 & 7;
    HIDWORD(v477) = v246;
    if (v245 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      uint64_t v245 = v476;
    }
    int v247 = v477 << v244;
    if (v222)
    {
      LODWORD(v477) = (v8[1990] << (29 - v246)) | v247;
      *uint64_t v245 = bswap32(v477);
      unint64_t v248 = SHIDWORD(v477) + 3;
      int v249 = v477 << (v248 & 0xF8);
      unint64_t v250 = (_DWORD *)((char *)v475 + (v248 >> 3));
      uint64_t v475 = v250;
      int v251 = v248 & 7;
      HIDWORD(v477) = v251;
      if (v250 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        unint64_t v250 = v476;
      }
      LODWORD(v477) = (*v221 << (v251 ^ 0x1F)) | v249;
      *unint64_t v250 = bswap32(v477);
      unint64_t v252 = SHIDWORD(v477) + 1;
      int v253 = v477 << (v252 & 0xF8);
      uint64_t v254 = (_DWORD *)((char *)v475 + (v252 >> 3));
      uint64_t v475 = v254;
      int v255 = v252 & 7;
      HIDWORD(v477) = v255;
      if (v254 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        uint64_t v254 = v476;
      }
      LODWORD(v477) = (v220 << (v255 ^ 0x1F)) | v253;
      *uint64_t v254 = bswap32(v477);
      unint64_t v256 = SHIDWORD(v477) + 1;
      char v257 = v256 & 0xF8;
      uint64_t v245 = (_DWORD *)((char *)v475 + (v256 >> 3));
      uint64_t v475 = v245;
      int v246 = v256 & 7;
      HIDWORD(v477) = v246;
      if (v245 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        uint64_t v245 = v476;
      }
      int v247 = v477 << v257;
      if (v220)
      {
        LODWORD(v477) = (v8[1992] << (24 - v246)) | v247;
        *uint64_t v245 = bswap32(v477);
        unint64_t v258 = SHIDWORD(v477) + 8;
        int v259 = v477 << (v258 & 0xF8);
        char v260 = (_DWORD *)((char *)v475 + (v258 >> 3));
        uint64_t v475 = v260;
        char v261 = BYTE4(v477) & 7;
        HIDWORD(v477) = BYTE4(v477) & 7;
        if (v260 >= v476)
        {
          char v478 = 1;
          uint64_t v475 = v476;
          char v260 = v476;
        }
        LODWORD(v477) = (v8[1993] << (24 - v261)) | v259;
        *char v260 = bswap32(v477);
        unint64_t v262 = SHIDWORD(v477) + 8;
        int v263 = v477 << (v262 & 0xF8);
        BOOL v264 = (_DWORD *)((char *)v475 + (v262 >> 3));
        uint64_t v475 = v264;
        char v265 = BYTE4(v477) & 7;
        HIDWORD(v477) = BYTE4(v477) & 7;
        if (v264 >= v476)
        {
          char v478 = 1;
          uint64_t v475 = v476;
          BOOL v264 = v476;
        }
        LODWORD(v477) = (v8[1994] << (24 - v265)) | v263;
        *BOOL v264 = bswap32(v477);
        unint64_t v266 = SHIDWORD(v477) + 8;
        int v247 = v477 << (v266 & 0xF8);
        uint64_t v245 = (_DWORD *)((char *)v475 + (v266 >> 3));
        uint64_t v475 = v245;
        LOBYTE(v246) = BYTE4(v477) & 7;
        HIDWORD(v477) = BYTE4(v477) & 7;
        if (v245 >= v476)
        {
          char v478 = 1;
          uint64_t v475 = v476;
          uint64_t v245 = v476;
        }
      }
    }
    LODWORD(v477) = (v223 << (v246 ^ 0x1F)) | v247;
    *uint64_t v245 = bswap32(v477);
    unint64_t v267 = SHIDWORD(v477) + 1;
    char v268 = v267 & 0xF8;
    int v269 = (_DWORD *)((char *)v475 + (v267 >> 3));
    uint64_t v475 = v269;
    int v270 = v267 & 7;
    HIDWORD(v477) = v270;
    if (v269 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      int v269 = v476;
    }
    int v271 = v477 << v268;
    if (v223)
    {
      unsigned int v272 = v8[1995] + 1;
      unsigned int v273 = __clz(v272);
      unsigned int v274 = 0x80000000 >> v273;
      uint64_t v275 = (2 * v273) ^ 0x3F;
      LODWORD(v477) = (((v272 - v274) | v274) << (-(char)v270 - v275)) | v271;
      *int v269 = bswap32(v477);
      unint64_t v276 = SHIDWORD(v477) + v275;
      int v277 = v477 << (v276 & 0xF8);
      int v278 = (_DWORD *)((char *)v475 + (v276 >> 3));
      uint64_t v475 = v278;
      int v270 = v276 & 7;
      HIDWORD(v477) = v270;
      if (v278 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v278 = v476;
      }
      unsigned int v279 = v8[1996] + 1;
      unsigned int v280 = __clz(v279);
      LODWORD(v477) = (((v279 - (0x80000000 >> v280)) | (0x80000000 >> v280)) << (-((2 * v280) ^ 0x3F) - v270)) | v277;
      *int v278 = bswap32(v477);
      int v271 = v477 << ((BYTE4(v477) + ((2 * v280) ^ 0x3F)) & 0xF8);
      int v269 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v280) ^ 0x3FuLL)) >> 3));
      uint64_t v475 = v269;
      LOBYTE(v270) = (BYTE4(v477) + ((2 * v280) ^ 0x3F)) & 7;
      HIDWORD(v477) = (HIDWORD(v477) + ((2 * v280) ^ 0x3F)) & 7;
      if (v269 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v269 = v476;
      }
    }
    LODWORD(v477) = (v8[1997] << (v270 ^ 0x1F)) | v271;
    *int v269 = bswap32(v477);
    unint64_t v281 = SHIDWORD(v477) + 1;
    int v282 = v477 << (v281 & 0xF8);
    unsigned int v283 = (_DWORD *)((char *)v475 + (v281 >> 3));
    uint64_t v475 = v283;
    int v284 = v281 & 7;
    HIDWORD(v477) = v284;
    if (v283 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      unsigned int v283 = v476;
    }
    LODWORD(v477) = (v8[1998] << (v284 ^ 0x1F)) | v282;
    *unsigned int v283 = bswap32(v477);
    unint64_t v285 = SHIDWORD(v477) + 1;
    int v286 = v477 << (v285 & 0xF8);
    unint64_t v287 = (_DWORD *)((char *)v475 + (v285 >> 3));
    uint64_t v475 = v287;
    int v288 = v285 & 7;
    HIDWORD(v477) = v288;
    if (v287 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      unint64_t v287 = v476;
    }
    LODWORD(v477) = (v8[1999] << (v288 ^ 0x1F)) | v286;
    *unint64_t v287 = bswap32(v477);
    unint64_t v289 = SHIDWORD(v477) + 1;
    int v290 = v477 << (v289 & 0xF8);
    uint64_t v291 = (_DWORD *)((char *)v475 + (v289 >> 3));
    uint64_t v475 = v291;
    int v292 = v289 & 7;
    HIDWORD(v477) = v292;
    if (v291 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      uint64_t v291 = v476;
    }
    LODWORD(v477) = (v224 << (v292 ^ 0x1F)) | v290;
    *uint64_t v291 = bswap32(v477);
    unint64_t v293 = SHIDWORD(v477) + 1;
    char v294 = v293 & 0xF8;
    int v295 = (_DWORD *)((char *)v475 + (v293 >> 3));
    uint64_t v475 = v295;
    int v296 = v293 & 7;
    HIDWORD(v477) = v296;
    if (v295 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      int v295 = v476;
    }
    int v297 = v477 << v294;
    if (v224)
    {
      unsigned int v298 = *((unsigned __int16 *)v8 + 1000) + 1;
      unsigned int v299 = __clz(v298);
      unsigned int v300 = 0x80000000 >> v299;
      uint64_t v301 = (2 * v299) ^ 0x3F;
      LODWORD(v477) = (((v298 - v300) | v300) << (-(char)v296 - v301)) | v297;
      *int v295 = bswap32(v477);
      unint64_t v302 = SHIDWORD(v477) + v301;
      int v303 = v477 << (v302 & 0xF8);
      unint64_t v304 = (_DWORD *)((char *)v475 + (v302 >> 3));
      uint64_t v475 = v304;
      int v305 = v302 & 7;
      HIDWORD(v477) = v305;
      if (v304 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        unint64_t v304 = v476;
      }
      unsigned int v306 = *((unsigned __int16 *)v8 + 1001) + 1;
      unsigned int v307 = __clz(v306);
      LODWORD(v477) = (((v306 - (0x80000000 >> v307)) | (0x80000000 >> v307)) << (-((2 * v307) ^ 0x3F) - v305)) | v303;
      _DWORD *v304 = bswap32(v477);
      int v308 = v477 << ((BYTE4(v477) + ((2 * v307) ^ 0x3F)) & 0xF8);
      int v309 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v307) ^ 0x3FuLL)) >> 3));
      uint64_t v475 = v309;
      char v310 = (BYTE4(v477) + ((2 * v307) ^ 0x3F)) & 7;
      HIDWORD(v477) = (HIDWORD(v477) + ((2 * v307) ^ 0x3F)) & 7;
      if (v309 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v309 = v476;
      }
      unsigned int v311 = *((unsigned __int16 *)v8 + 1002) + 1;
      unsigned int v312 = __clz(v311);
      unsigned int v313 = (v311 - (0x80000000 >> v312)) | (0x80000000 >> v312);
      uint64_t v314 = (2 * v312) ^ 0x3F;
      LODWORD(v477) = (v313 << (-(char)v314 - v310)) | v308;
      *int v309 = bswap32(v477);
      unint64_t v315 = SHIDWORD(v477) + v314;
      int v316 = v477 << (v315 & 0xF8);
      size_t v317 = (_DWORD *)((char *)v475 + (v315 >> 3));
      uint64_t v475 = v317;
      int v296 = v315 & 7;
      HIDWORD(v477) = v296;
      if (v317 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        size_t v317 = v476;
      }
      unsigned int v318 = *((unsigned __int16 *)v8 + 1003) + 1;
      unsigned int v319 = __clz(v318);
      LODWORD(v477) = (((v318 - (0x80000000 >> v319)) | (0x80000000 >> v319)) << (-((2 * v319) ^ 0x3F) - v296)) | v316;
      *size_t v317 = bswap32(v477);
      int v297 = v477 << ((BYTE4(v477) + ((2 * v319) ^ 0x3F)) & 0xF8);
      int v295 = (_DWORD *)((char *)v475 + ((SHIDWORD(v477) + ((2 * v319) ^ 0x3FuLL)) >> 3));
      uint64_t v475 = v295;
      LOBYTE(v296) = (BYTE4(v477) + ((2 * v319) ^ 0x3F)) & 7;
      HIDWORD(v477) = (HIDWORD(v477) + ((2 * v319) ^ 0x3F)) & 7;
      if (v295 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v295 = v476;
      }
    }
    LODWORD(v477) = (v8[2008] << (v296 ^ 0x1F)) | v297;
    *int v295 = bswap32(v477);
    unint64_t v320 = SHIDWORD(v477) + 1;
    char v321 = v320 & 0xF8;
    unint64_t v322 = (_DWORD *)((char *)v475 + (v320 >> 3));
    uint64_t v475 = v322;
    int v323 = v320 & 7;
    HIDWORD(v477) = v323;
    if (v322 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      unint64_t v322 = v476;
    }
    int v324 = v477 << v321;
    if (v8[2008])
    {
      unsigned int v325 = *((_DWORD *)v8 + 503);
      LODWORD(v477) = (HIWORD(v325) << (16 - v323)) | v324;
      _DWORD *v322 = bswap32(v477);
      unint64_t v326 = SHIDWORD(v477) + 16;
      int v327 = v477 << (v326 & 0xF8);
      int v328 = (_DWORD *)((char *)v475 + (v326 >> 3));
      uint64_t v475 = v328;
      char v329 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v328 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v328 = v476;
      }
      LODWORD(v477) = ((unsigned __int16)v325 << (16 - v329)) | v327;
      *int v328 = bswap32(v477);
      unint64_t v330 = SHIDWORD(v477) + 16;
      int v331 = v477 << (v330 & 0xF8);
      int v332 = (_DWORD *)((char *)v475 + (v330 >> 3));
      uint64_t v475 = v332;
      char v333 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v332 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v332 = v476;
      }
      unsigned int v334 = *((_DWORD *)v8 + 504);
      LODWORD(v477) = (HIWORD(v334) << (16 - v333)) | v331;
      *int v332 = bswap32(v477);
      unint64_t v335 = SHIDWORD(v477) + 16;
      int v336 = v477 << (v335 & 0xF8);
      int v337 = (_DWORD *)((char *)v475 + (v335 >> 3));
      uint64_t v475 = v337;
      char v338 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v337 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v337 = v476;
      }
      LODWORD(v477) = ((unsigned __int16)v334 << (16 - v338)) | v336;
      *int v337 = bswap32(v477);
      unint64_t v339 = SHIDWORD(v477) + 16;
      int v340 = v477 << (v339 & 0xF8);
      int v341 = (_DWORD *)((char *)v475 + (v339 >> 3));
      uint64_t v475 = v341;
      char v342 = BYTE4(v477) & 7;
      HIDWORD(v477) = BYTE4(v477) & 7;
      if (v341 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v341 = v476;
      }
      LODWORD(v477) = (v8[2020] << (v342 ^ 0x1F)) | v340;
      *int v341 = bswap32(v477);
      unint64_t v343 = SHIDWORD(v477) + 1;
      char v344 = v343 & 0xF8;
      unint64_t v345 = (_DWORD *)((char *)v475 + (v343 >> 3));
      uint64_t v475 = v345;
      int v346 = v343 & 7;
      HIDWORD(v477) = v346;
      if (v345 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        unint64_t v345 = v476;
      }
      int v347 = v477 << v344;
      if (v8[2020])
      {
        unsigned int v348 = *((_DWORD *)v8 + 506) + 1;
        unsigned int v349 = __clz(v348);
        unsigned int v350 = (v348 - (0x80000000 >> v349)) | (0x80000000 >> v349);
        uint64_t v351 = 63 - 2 * v349;
        LODWORD(v477) = (v350 << (-(char)v346 - v351)) | v347;
        *unint64_t v345 = bswap32(v477);
        unint64_t v352 = SHIDWORD(v477) + v351;
        int v347 = v477 << (v352 & 0xF8);
        unint64_t v345 = (_DWORD *)((char *)v475 + (v352 >> 3));
        uint64_t v475 = v345;
        int v346 = v352 & 7;
        HIDWORD(v477) = v346;
        if (v345 >= v476)
        {
          char v478 = 1;
          uint64_t v475 = v476;
          unint64_t v345 = v476;
        }
      }
      LODWORD(v477) = (v8[2028] << (v346 ^ 0x1F)) | v347;
      *unint64_t v345 = bswap32(v477);
      unint64_t v353 = SHIDWORD(v477) + 1;
      char v354 = v353 & 0xF8;
      unint64_t v322 = (_DWORD *)((char *)v475 + (v353 >> 3));
      uint64_t v475 = v322;
      int v323 = v353 & 7;
      HIDWORD(v477) = v323;
      if (v322 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        unint64_t v322 = v476;
      }
      int v324 = v477 << v354;
      if (v8[2028])
      {
        uint64_t v355 = v8[1];
        LODWORD(v477) = (v8[2032] << (v323 ^ 0x1F)) | v324;
        _DWORD *v322 = bswap32(v477);
        unint64_t v356 = SHIDWORD(v477) + 1;
        int v357 = v477 << (v356 & 0xF8);
        int v358 = (_DWORD *)((char *)v475 + (v356 >> 3));
        uint64_t v475 = v358;
        int v359 = v356 & 7;
        HIDWORD(v477) = v359;
        if (v358 >= v476)
        {
          char v478 = 1;
          uint64_t v475 = v476;
          int v358 = v476;
        }
        unsigned int v360 = v8 + 2032;
        LODWORD(v477) = (v8[2033] << (v359 ^ 0x1F)) | v357;
        *int v358 = bswap32(v477);
        unint64_t v361 = SHIDWORD(v477) + 1;
        unsigned int v362 = v477 << (v361 & 0xF8);
        char v363 = (_DWORD *)((char *)v475 + (v361 >> 3));
        uint64_t v475 = v363;
        unsigned int v364 = v361 & 7;
        unint64_t v477 = __PAIR64__(v364, v362);
        if (v363 >= v476)
        {
          char v478 = 1;
          uint64_t v475 = v476;
          char v363 = v476;
        }
        uint64_t v365 = v355 + 1;
        if (*v360 || v8[2033])
        {
          LODWORD(v477) = (v8[2034] << (v364 ^ 0x1F)) | v362;
          *char v363 = bswap32(v477);
          unint64_t v366 = SHIDWORD(v477) + 1;
          char v367 = v366 & 0xF8;
          unint64_t v368 = (_DWORD *)((char *)v475 + (v366 >> 3));
          uint64_t v475 = v368;
          int v369 = v366 & 7;
          HIDWORD(v477) = v369;
          if (v368 >= v476)
          {
            char v478 = 1;
            uint64_t v475 = v476;
            unint64_t v368 = v476;
          }
          int v370 = v477 << v367;
          if (v8[2034])
          {
            LODWORD(v477) = (v8[2035] << (24 - v369)) | v370;
            *unint64_t v368 = bswap32(v477);
            unint64_t v371 = SHIDWORD(v477) + 8;
            int v372 = v477 << (v371 & 0xF8);
            int v373 = (_DWORD *)((char *)v475 + (v371 >> 3));
            uint64_t v475 = v373;
            char v374 = BYTE4(v477) & 7;
            HIDWORD(v477) = BYTE4(v477) & 7;
            if (v373 >= v476)
            {
              char v478 = 1;
              uint64_t v475 = v476;
              int v373 = v476;
            }
            LODWORD(v477) = (v8[2036] << (27 - v374)) | v372;
            *int v373 = bswap32(v477);
            unint64_t v375 = SHIDWORD(v477) + 5;
            int v376 = v477 << (v375 & 0xF8);
            int v377 = (_DWORD *)((char *)v475 + (v375 >> 3));
            uint64_t v475 = v377;
            int v378 = v375 & 7;
            HIDWORD(v477) = v378;
            if (v377 >= v476)
            {
              char v478 = 1;
              uint64_t v475 = v476;
              int v377 = v476;
            }
            LODWORD(v477) = (v8[2037] << (v378 ^ 0x1F)) | v376;
            *int v377 = bswap32(v477);
            unint64_t v379 = SHIDWORD(v477) + 1;
            int v380 = v477 << (v379 & 0xF8);
            int v381 = (_DWORD *)((char *)v475 + (v379 >> 3));
            uint64_t v475 = v381;
            int v382 = v379 & 7;
            HIDWORD(v477) = v382;
            if (v381 >= v476)
            {
              char v478 = 1;
              uint64_t v475 = v476;
              int v381 = v476;
            }
            LODWORD(v477) = (v8[2038] << (27 - v382)) | v380;
            *int v381 = bswap32(v477);
            unint64_t v383 = SHIDWORD(v477) + 5;
            int v370 = v477 << (v383 & 0xF8);
            unint64_t v368 = (_DWORD *)((char *)v475 + (v383 >> 3));
            uint64_t v475 = v368;
            int v369 = v383 & 7;
            HIDWORD(v477) = v369;
            if (v368 >= v476)
            {
              char v478 = 1;
              uint64_t v475 = v476;
              unint64_t v368 = v476;
            }
          }
          LODWORD(v477) = (v8[2039] << (28 - v369)) | v370;
          *unint64_t v368 = bswap32(v477);
          unint64_t v384 = SHIDWORD(v477) + 4;
          int v385 = v477 << (v384 & 0xF8);
          unsigned int v386 = (_DWORD *)((char *)v475 + (v384 >> 3));
          uint64_t v475 = v386;
          int v387 = v384 & 7;
          HIDWORD(v477) = v387;
          if (v386 >= v476)
          {
            char v478 = 1;
            uint64_t v475 = v476;
            unsigned int v386 = v476;
          }
          LODWORD(v477) = (v8[2040] << (28 - v387)) | v385;
          *unsigned int v386 = bswap32(v477);
          unint64_t v388 = SHIDWORD(v477) + 4;
          char v389 = v388 & 0xF8;
          unint64_t v390 = (_DWORD *)((char *)v475 + (v388 >> 3));
          uint64_t v475 = v390;
          int v391 = v388 & 7;
          HIDWORD(v477) = v391;
          if (v390 >= v476)
          {
            char v478 = 1;
            uint64_t v475 = v476;
            unint64_t v390 = v476;
          }
          int v392 = v477 << v389;
          if (v8[2034])
          {
            LODWORD(v477) = (v8[2041] << (28 - v391)) | v392;
            *unint64_t v390 = bswap32(v477);
            unint64_t v393 = SHIDWORD(v477) + 4;
            int v392 = v477 << (v393 & 0xF8);
            unint64_t v390 = (_DWORD *)((char *)v475 + (v393 >> 3));
            uint64_t v475 = v390;
            int v391 = v393 & 7;
            HIDWORD(v477) = v391;
            if (v390 >= v476)
            {
              char v478 = 1;
              uint64_t v475 = v476;
              unint64_t v390 = v476;
            }
          }
          LODWORD(v477) = (v8[2042] << (27 - v391)) | v392;
          *unint64_t v390 = bswap32(v477);
          unint64_t v394 = SHIDWORD(v477) + 5;
          int v395 = v477 << (v394 & 0xF8);
          int v396 = (_DWORD *)((char *)v475 + (v394 >> 3));
          uint64_t v475 = v396;
          int v397 = v394 & 7;
          HIDWORD(v477) = v397;
          if (v396 >= v476)
          {
            char v478 = 1;
            uint64_t v475 = v476;
            int v396 = v476;
          }
          LODWORD(v477) = (v8[2043] << (27 - v397)) | v395;
          *int v396 = bswap32(v477);
          unint64_t v398 = SHIDWORD(v477) + 5;
          int v399 = v477 << (v398 & 0xF8);
          int v400 = (_DWORD *)((char *)v475 + (v398 >> 3));
          uint64_t v475 = v400;
          int v401 = v398 & 7;
          HIDWORD(v477) = v401;
          if (v400 >= v476)
          {
            char v478 = 1;
            uint64_t v475 = v476;
            int v400 = v476;
          }
          LODWORD(v477) = (v8[2044] << (27 - v401)) | v399;
          *int v400 = bswap32(v477);
          unint64_t v402 = SHIDWORD(v477) + 5;
          uint64_t v475 = (_DWORD *)((char *)v475 + (v402 >> 3));
          LODWORD(v477) = v477 << (v402 & 0xF8);
          HIDWORD(v477) = v402 & 7;
          if (v475 >= v476)
          {
            char v478 = 1;
            uint64_t v475 = v476;
          }
        }
        uint64_t v403 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)v8 + 257) - *((void *)v8 + 256)) >> 3);
        if (v403 == v365)
        {
          uint64_t v404 = 0;
          while (1)
          {
            uint64_t v405 = *((void *)v8 + 256);
            LODWORD(v477) = (*(unsigned __int8 *)(v405 + v404) << ~BYTE4(v477)) | v477;
            *uint64_t v475 = bswap32(v477);
            unint64_t v406 = SHIDWORD(v477) + 1;
            signed int v407 = (_DWORD *)((char *)v475 + (v406 >> 3));
            uint64_t v475 = v407;
            LOBYTE(v408) = v406 & 7;
            HIDWORD(v477) = v406 & 7;
            if (v407 >= v476)
            {
              char v478 = 1;
              uint64_t v475 = v476;
              signed int v407 = v476;
            }
            int v409 = v477 << (v406 & 0xF8);
            if (!*(unsigned char *)(v405 + v404))
            {
              LODWORD(v477) = (*(unsigned __int8 *)(v405 + v404 + 1) << (v408 ^ 0x1F)) | v409;
              *signed int v407 = bswap32(v477);
              unint64_t v410 = SHIDWORD(v477) + 1;
              int v409 = v477 << (v410 & 0xF8);
              signed int v407 = (_DWORD *)((char *)v475 + (v410 >> 3));
              uint64_t v475 = v407;
              int v408 = v410 & 7;
              HIDWORD(v477) = v408;
              if (v407 >= v476)
              {
                char v478 = 1;
                uint64_t v475 = v476;
                signed int v407 = v476;
              }
            }
            uint64_t v411 = v405 + v404;
            if (*(unsigned char *)(v405 + v404 + 1))
            {
              unsigned int v412 = *(unsigned __int16 *)(v411 + 2) + 1;
              unsigned int v413 = __clz(v412);
              unsigned int v414 = (v412 - (0x80000000 >> v413)) | (0x80000000 >> v413);
              uint64_t v415 = (2 * v413) ^ 0x3F;
              LODWORD(v477) = (v414 << (-(char)v408 - v415)) | v409;
              *signed int v407 = bswap32(v477);
              int v416 = v477;
              unint64_t v417 = SHIDWORD(v477) + v415;
            }
            else
            {
              LODWORD(v477) = (*(unsigned __int8 *)(v411 + 4) << (v408 ^ 0x1F)) | v409;
              *signed int v407 = bswap32(v477);
              int v416 = v477;
              unint64_t v417 = SHIDWORD(v477) + 1;
            }
            unsigned int v418 = v416 << (v417 & 0xF8);
            int v419 = (_DWORD *)((char *)v475 + (v417 >> 3));
            uint64_t v475 = v419;
            unsigned int v420 = v417 & 7;
            unint64_t v477 = __PAIR64__(v420, v418);
            if (v419 >= v476)
            {
              char v478 = 1;
              uint64_t v475 = v476;
              int v419 = v476;
            }
            if (!*(unsigned char *)(v405 + v404 + 4))
            {
              unsigned int v421 = *(unsigned __int16 *)(v405 + v404 + 6) + 1;
              unsigned int v422 = __clz(v421);
              unsigned int v423 = 0x80000000 >> v422;
              uint64_t v424 = (2 * v422) ^ 0x3F;
              LODWORD(v477) = (((v421 - v423) | v423) << (-(char)v420 - v424)) | v418;
              *int v419 = bswap32(v477);
              unint64_t v425 = SHIDWORD(v477) + v424;
              uint64_t v475 = (_DWORD *)((char *)v475 + (v425 >> 3));
              LODWORD(v477) = v477 << (v425 & 0xF8);
              HIDWORD(v477) = v425 & 7;
              if (v475 >= v476)
              {
                char v478 = 1;
                uint64_t v475 = v476;
              }
            }
            if (*v360)
            {
              int v4 = sub_1D0CE8AF4(v405 + v404, (uint64_t)__p, (uint64_t)(v8 + 2032), (void *)(v405 + v404 + 8));
              if (v4) {
                break;
              }
            }
            if (v8[2033]
              && sub_1D0CE8AF4(v405 + v404, (uint64_t)__p, (uint64_t)(v8 + 2032), (void *)(v405 + v404 + 32)))
            {
              int v4 = 1;
              goto LABEL_3;
            }
            v404 += 56;
            if (!--v403)
            {
              int v324 = v477;
              LOBYTE(v323) = BYTE4(v477);
              unint64_t v322 = v475;
              goto LABEL_258;
            }
          }
        }
        else
        {
          int v4 = -12911;
        }
        goto LABEL_3;
      }
    }
LABEL_258:
    LODWORD(v477) = (v8[2072] << ~(_BYTE)v323) | v324;
    _DWORD *v322 = bswap32(v477);
    unint64_t v426 = SHIDWORD(v477) + 1;
    int v215 = (_DWORD *)((char *)v475 + (v426 >> 3));
    uint64_t v475 = v215;
    char v216 = v426 & 7;
    HIDWORD(v477) = v426 & 7;
    if (v215 >= v476)
    {
      char v478 = 1;
      uint64_t v475 = v476;
      int v215 = v476;
    }
    int v217 = v477 << (v426 & 0xF8);
    if (v8[2072])
    {
      LODWORD(v477) = (v8[2073] << (v216 ^ 0x1F)) | v217;
      *int v215 = bswap32(v477);
      unint64_t v427 = SHIDWORD(v477) + 1;
      int v428 = v477 << (v427 & 0xF8);
      unsigned int v429 = (_DWORD *)((char *)v475 + (v427 >> 3));
      uint64_t v475 = v429;
      int v430 = v427 & 7;
      HIDWORD(v477) = v430;
      if (v429 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        unsigned int v429 = v476;
      }
      LODWORD(v477) = (v8[2074] << (v430 ^ 0x1F)) | v428;
      *unsigned int v429 = bswap32(v477);
      unint64_t v431 = SHIDWORD(v477) + 1;
      int v432 = v477 << (v431 & 0xF8);
      int v433 = (_DWORD *)((char *)v475 + (v431 >> 3));
      uint64_t v475 = v433;
      int v434 = v431 & 7;
      HIDWORD(v477) = v434;
      if (v433 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v433 = v476;
      }
      LODWORD(v477) = (v8[2075] << (v434 ^ 0x1F)) | v432;
      *int v433 = bswap32(v477);
      unint64_t v435 = SHIDWORD(v477) + 1;
      int v436 = v477 << (v435 & 0xF8);
      int v437 = (_DWORD *)((char *)v475 + (v435 >> 3));
      uint64_t v475 = v437;
      int v438 = v435 & 7;
      HIDWORD(v477) = v438;
      if (v437 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v437 = v476;
      }
      unsigned int v439 = *((_DWORD *)v8 + 519) + 1;
      unsigned int v440 = __clz(v439);
      unsigned int v441 = (v439 - (0x80000000 >> v440)) | (0x80000000 >> v440);
      uint64_t v442 = 63 - 2 * v440;
      LODWORD(v477) = (v441 << (-(char)v438 - v442)) | v436;
      *int v437 = bswap32(v477);
      unint64_t v443 = SHIDWORD(v477) + v442;
      int v444 = v477 << (v443 & 0xF8);
      int v445 = (_DWORD *)((char *)v475 + (v443 >> 3));
      uint64_t v475 = v445;
      int v446 = v443 & 7;
      HIDWORD(v477) = v446;
      if (v445 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v445 = v476;
      }
      unsigned int v447 = *((_DWORD *)v8 + 520) + 1;
      unsigned int v448 = __clz(v447);
      LODWORD(v477) = (((v447 - (0x80000000 >> v448)) | (0x80000000 >> v448)) << (2 * v448 - 63 - v446)) | v444;
      *int v445 = bswap32(v477);
      unint64_t v449 = SHIDWORD(v477) + 63 - 2 * v448;
      int v450 = v477 << (v449 & 0xF8);
      int v451 = (_DWORD *)((char *)v475 + (v449 >> 3));
      uint64_t v475 = v451;
      int v452 = v449 & 7;
      HIDWORD(v477) = v452;
      if (v451 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v451 = v476;
      }
      unsigned int v453 = *((_DWORD *)v8 + 521) + 1;
      unsigned int v454 = __clz(v453);
      unsigned int v455 = (v453 - (0x80000000 >> v454)) | (0x80000000 >> v454);
      uint64_t v456 = 63 - 2 * v454;
      LODWORD(v477) = (v455 << (-(char)v456 - v452)) | v450;
      _DWORD *v451 = bswap32(v477);
      unint64_t v457 = SHIDWORD(v477) + v456;
      int v458 = v477 << (v457 & 0xF8);
      int v459 = (_DWORD *)((char *)v475 + (v457 >> 3));
      uint64_t v475 = v459;
      int v460 = v457 & 7;
      HIDWORD(v477) = v460;
      if (v459 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v459 = v476;
      }
      unsigned int v461 = *((_DWORD *)v8 + 522) + 1;
      unsigned int v462 = __clz(v461);
      LODWORD(v477) = (((v461 - (0x80000000 >> v462)) | (0x80000000 >> v462)) << (2 * v462 - 63 - v460)) | v458;
      *int v459 = bswap32(v477);
      unint64_t v463 = SHIDWORD(v477) + 63 - 2 * v462;
      int v464 = v477 << (v463 & 0xF8);
      char v465 = (_DWORD *)((char *)v475 + (v463 >> 3));
      uint64_t v475 = v465;
      int v466 = v463 & 7;
      HIDWORD(v477) = v466;
      if (v465 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        char v465 = v476;
      }
      unsigned int v467 = *((_DWORD *)v8 + 523) + 1;
      unsigned int v468 = __clz(v467);
      unsigned int v469 = (v467 - (0x80000000 >> v468)) | (0x80000000 >> v468);
      uint64_t v470 = 63 - 2 * v468;
      LODWORD(v477) = (v469 << (-(char)v470 - v466)) | v464;
      *char v465 = bswap32(v477);
      unint64_t v471 = SHIDWORD(v477) + v470;
      int v217 = v477 << (v471 & 0xF8);
      int v215 = (_DWORD *)((char *)v475 + (v471 >> 3));
      uint64_t v475 = v215;
      char v216 = v471 & 7;
      HIDWORD(v477) = v471 & 7;
      if (v215 >= v476)
      {
        char v478 = 1;
        uint64_t v475 = v476;
        int v215 = v476;
      }
    }
  }
  LODWORD(v477) = (v8[399] << (v216 ^ 0x1F)) | v217;
  *int v215 = bswap32(v477);
  unint64_t v472 = SHIDWORD(v477) + 1;
  uint64_t v475 = (_DWORD *)((char *)v475 + (v472 >> 3));
  LODWORD(v477) = v477 << (v472 & 0xF8);
  HIDWORD(v477) = v472 & 7;
  if (v475 >= v476)
  {
    char v478 = 1;
    uint64_t v475 = v476;
  }
  if (v8[399])
  {
    if (dword_1EB671A40 >= 3)
    {
      fwrite("SPS extension encoding not implemented!\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "SPS extension encoding not implemented!\n");
    }
    int v4 = -12910;
LABEL_3:
    size_t v5 = 0;
    char v6 = 0;
    a1 = v4;
    goto LABEL_4;
  }
  sub_1D0C9798C((uint64_t)__p);
  size_t v5 = off_1EB671A48(a2);
  *(_DWORD *)(a1 + 10664) += v5;
  unint64_t v473 = *(FILE **)(a1 + 240);
  if (v473) {
    fwrite(a2, 1uLL, v5, v473);
  }
  if (*(unsigned char *)(a1 + 428)) {
    sub_1D0D7C4A8(*(unsigned __int8 **)(a1 + 9752), (FILE *)*MEMORY[0x1E4F143C8]);
  }
  char v6 = 1;
LABEL_4:
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v6) {
    return v5;
  }
  return a1;
}

void sub_1D0CF9634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D0CF9654(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  int v8 = *(_DWORD *)(a2 + 548);
  *(void *)(a1 + 576) = a2;
  *(void *)(a1 + 6464) = *(void *)(a2 + 10400);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2 + 48;
  uint64_t v10 = *(void *)(a2 + 168);
  uint64_t v9 = *(void *)(a2 + 176);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v9;
  if (v11) {
    sub_1D0C4C984(v11);
  }
  uint64_t v13 = *a3;
  uint64_t v12 = a3[1];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v12;
  if (v14) {
    sub_1D0C4C984(v14);
  }
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v15;
  if (v17) {
    sub_1D0C4C984(v17);
  }
  uint64_t v18 = *(void *)(a1 + 6464);
  if (!v18
    || (*(_DWORD *)(a1 + 6480) = *(_DWORD *)(v18 + 1712),
        double result = *(double *)(v18 + 1704),
        *(float *)&double result = result,
        *(_DWORD *)(a1 + 6488) = LODWORD(result),
        *(_DWORD *)(a1 + 6484) = LODWORD(result),
        *(float *)&result > 0.0))
  {
    *(void *)(a1 + 1008) = a2 + 360;
    LODWORD(v20) = *(char *)(a2 + 530);
    *(_DWORD *)(a1 + 3000) = v20;
    *(_DWORD *)(a1 + 3008) = -1;
    if ((int)v20 < 0) {
      LODWORD(v20) = -1;
    }
    uint64_t v20 = (int)v20;
    int v21 = *(char **)(a1 + 1032);
    unint64_t v22 = *(unsigned char **)(a1 + 1024);
    unint64_t v23 = (v21 - v22) >> 4;
    if ((int)v20 <= v23)
    {
      if ((int)v20 >= v23) {
        goto LABEL_38;
      }
      unsigned int v32 = &v22[16 * (int)v20];
    }
    else
    {
      unint64_t v24 = (int)v20 - v23;
      uint64_t v25 = *(void *)(a1 + 1040);
      if (v24 > (v25 - (uint64_t)v21) >> 4)
      {
        if ((v20 & 0x80) != 0) {
          sub_1D0C8D71C();
        }
        uint64_t v26 = v25 - (void)v22;
        if (v26 >> 3 > (unint64_t)(int)v20) {
          uint64_t v20 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v20;
        }
        if (v27 >> 60) {
          sub_1D0C6AC2C();
        }
        int v28 = (char *)operator new(16 * v27);
        int v29 = &v28[16 * v23];
        unint64_t v30 = &v28[16 * v27];
        bzero(v29, 16 * v24);
        unsigned int v31 = &v29[16 * v24];
        if (v21 != v22)
        {
          do
          {
            *((_OWORD *)v29 - 1) = *((_OWORD *)v21 - 1);
            v29 -= 16;
            v21 -= 16;
          }
          while (v21 != v22);
          int v21 = *(char **)(a1 + 1024);
        }
        *(void *)(a1 + 1024) = v29;
        *(void *)(a1 + 1032) = v31;
        *(void *)(a1 + 1040) = v30;
        if (v21) {
          operator delete(v21);
        }
LABEL_38:
        *(_DWORD *)(a1 + 2400) = 0;
        *(_OWORD *)(a1 + 2384) = 0u;
        *(void *)(a1 + 3040) = *(void *)(a2 + 10400);
        sub_1D0C60FFC((char **)(a1 + 6312), (uint64_t)(*(_DWORD *)(*(void *)(a2 + 9752) + 208) * *(_DWORD *)(*(void *)(a2 + 9752) + 204)) >> 6);
        *(_DWORD *)(a1 + 848) = 0;
        if (*(unsigned __int8 *)(a2 + 481) <= 1u && (uint64_t v33 = *a3, *(unsigned char *)(*a3 + 2028)) && *(unsigned char *)(v33 + 2032))
        {
          char v34 = *(unsigned char *)(v33 + 2039) + 6;
          char v35 = *(unsigned char *)(v33 + 2040) + 4;
          int v36 = *(_DWORD **)(*(void *)(v33 + 2048) + 8);
          int v8 = (*v36 + 1) << v34;
          int v37 = (v36[1] + 1) << v35;
          *(_DWORD *)(a1 + 792) = 1092616192;
          if (v37)
          {
LABEL_45:
            *(_DWORD *)(a1 + 776) = v37;
            *(_DWORD *)(a1 + 780) = v37;
            *(_DWORD *)(a1 + 788) = (int)((double)v8 / *(double *)(a2 + 472));
            double result = 0.0;
            *(_OWORD *)(a1 + 200) = 0u;
            *(_OWORD *)(a1 + 184) = 0u;
            *(_OWORD *)(a1 + 168) = 0u;
            *(_OWORD *)(a1 + 152) = 0u;
            *(unsigned char *)(a1 + 757) = 0;
            return result;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 792) = 1092616192;
        }
        int v37 = (int)(float)((float)v8 * 10.0);
        goto LABEL_45;
      }
      bzero(*(void **)(a1 + 1032), 16 * v24);
      unsigned int v32 = &v21[16 * v24];
    }
    *(void *)(a1 + 1032) = v32;
    goto LABEL_38;
  }
  if (dword_1EB671A40 >= 3)
  {
    fwrite("fps MUST be positive\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "fps MUST be positive\n");
  }
  return result;
}

uint64_t sub_1D0CF9980(uint64_t result)
{
  if (!*(_WORD *)(*(void *)(result + 576) + 454))
  {
    *(_WORD *)(result + 660) = 0;
    goto LABEL_11;
  }
  int v1 = *(unsigned __int16 *)(result + 660);
  if (v1 == 0xFFFF)
  {
    if (*(unsigned char *)(result + 648) == 5) {
      LOWORD(v1) = 2;
    }
    else {
      LOWORD(v1) = 1;
    }
    *(_WORD *)(result + 660) = v1;
  }
  if ((unsigned __int16)v1 == 2)
  {
    uint64_t v2 = (int *)(result + 662);
    int v3 = 1;
    goto LABEL_13;
  }
  if ((__int16)v1 != 1)
  {
LABEL_11:
    *(_DWORD *)(result + 662) = 0;
    return result;
  }
  uint64_t v2 = (int *)(result + 662);
  int v3 = 65537;
LABEL_13:
  *uint64_t v2 = v3;
  return result;
}

uint64_t sub_1D0CF99F4(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v3 = v2;
  int v4 = (int32x2_t *)v1;
  v776[808] = *(unsigned int (**)(__n128 *, __n128 *))MEMORY[0x1E4F143B8];
  size_t v5 = (unsigned __int8 *)(v1 + 4536);
  uint64_t v6 = *(void *)(v1 + 576);
  atomic_store(2u, (unsigned int *)(v1 + 588));
  LODWORD(v7) = *(unsigned __int8 *)(v1 + 648);
  if (*(unsigned char *)(v1 + 648) && *(unsigned char *)(v1 + 6752))
  {
    uint64_t v7 = *(void *)sub_1D0C9A200(v6 + 9968, 2u);
    if (v7) {
      LODWORD(v7) = v4[81].u8[0];
    }
    else {
      v4[81].i8[0] = 0;
    }
  }
  int v8 = (int32x2_t **)&v4[79];
  int32x2_t v9 = v4[72];
  if ((*(unsigned char *)(v6 + 544) & 2) != 0)
  {
    v4[106].i32[0] = *(_DWORD *)(*(void *)&v9 + 328);
    if (v7 > 2)
    {
LABEL_10:
      uint64_t v10 = (v4[81].i32[1]
                         - (*(_DWORD *)(*(void *)&v9 + 10376)
                          + *(_DWORD *)(*(void *)&v9 + 10380)));
      goto LABEL_12;
    }
    *(_DWORD *)(*(void *)&v9 + 328) = v4[81].i32[1];
  }
  if (v7) {
    goto LABEL_10;
  }
  uint64_t v10 = 0;
LABEL_12:
  uint64_t v11 = (std::__shared_weak_count *)v4[80];
  *int v8 = 0;
  v4[80] = 0;
  if (v11) {
    sub_1D0C4C984(v11);
  }
  uint64_t v12 = *(void *)(*(void *)&v9 + 9784);
  if (!v12)
  {
    uint64_t v13 = 4294954385;
LABEL_19:
    if (dword_1EB671A40 >= 3)
    {
      fwrite("Recon frame creation failed\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Recon frame creation failed\n");
    }
    return v13;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)v12 + 24))(v12, v10, v4 + 79);
  if (v13) {
    goto LABEL_19;
  }
  unsigned int v14 = (int32x2_t *)v4[79];
  v14[1] = *(int32x2_t *)((char *)v4 + 652);
  int32x2_t v15 = v4[77];
  *(_OWORD *)v14[2].i8 = *(_OWORD *)(*(void *)&v15 + 16);
  v14[4].i32[0] = *(_DWORD *)(*(void *)&v15 + 32);
  v14[5].i8[0] = *(unsigned char *)(*(void *)&v15 + 40);
  if (v4[81].i8[0]) {
    BOOL v16 = v5[2216] != 0;
  }
  else {
    BOOL v16 = 1;
  }
  v14[5].i8[1] = v16;
  if (*(unsigned char *)(v6 + 870))
  {
    *(_OWORD *)v14[144].i8 = 0u;
    unsigned int v14 = *v8;
  }
  v14[146].i32[0] = -1;
  int32x2_t v18 = v4[77];
  int v19 = (int32x2_t *)v4[79];
  v19[54].i8[0] = *(unsigned char *)(*(void *)&v18 + 432);
  v754 = v5;
  v771 = v3;
  if (*(unsigned char *)(*(void *)&v18 + 432))
  {
    int v20 = *(_DWORD *)(*(void *)&v18 + 512);
    if (v20 < 1)
    {
      int v20 = *(_DWORD *)(*(void *)&v18 + 504);
      int v21 = (__int32 *)(*(void *)&v18 + 508);
    }
    else
    {
      int v21 = (__int32 *)(*(void *)&v18 + 516);
    }
    __int32 v22 = *v21;
    v19[63].i32[0] = v20;
    v19[63].i32[1] = v22;
    v19[64] = 0;
    int v19 = *v8;
  }
  int32x2_t v23 = v4[5];
  unsigned int v24 = *(unsigned __int8 *)(*(void *)&v23 + 2096);
  __int32 v25 = *(_DWORD *)(*(void *)&v23 + 204);
  v4[691].i32[0] = v25;
  __int32 v26 = *(_DWORD *)(*(void *)&v23 + 208);
  v4[691].i32[1] = v26;
  v4[692] = vshl_s32(vadd_s32(v19[65], vdup_n_s32(~(-1 << *(unsigned char *)(*(void *)&v23 + 2113)))), vneg_s32(vdup_n_s32(*(unsigned __int8 *)(*(void *)&v23 + 2113))));
  int32x2_t v27 = v4[72];
  uint64_t v750 = v4 + 79;
  BOOL v28 = *(char *)(*(void *)&v27 + 444) > 1
     || *(char *)(*(void *)&v27 + 492) >= 1 && *(char *)(*(void *)&v27 + 493) > 1;
  v4[102].i8[0] = v28;
  if (*(unsigned char *)(*(void *)&v27 + 483)) {
    int v29 = 640;
  }
  else {
    int v29 = 400;
  }
  v4[700].i32[0] = v29;
  unint64_t v30 = v4;
  int v31 = (v26 * v25) >> 13;
  if (v31 <= 256) {
    int v31 = 256;
  }
  v4[700].i32[1] = v31;
  v4[701].i32[0] = v31 - 1;
  if (*(_WORD *)(*(void *)&v27 + 454)
    || *(unsigned char *)(*(void *)&v27 + 910)
    || !*(_DWORD *)(*(void *)&v27 + 456)
    || *(unsigned char *)(*(void *)&v27 + 912))
  {
    v4[102].i8[0] = 1;
  }
  v751 = (int *)&v4[100];
  __int32 v32 = *(unsigned __int8 *)(*(void *)&v23 + 2112);
  v30[100].i32[0] = v32;
  __int32 v33 = *(_DWORD *)(*(void *)&v30[7] + 1636);
  v30[100].i32[1] = v33;
  int v34 = 1 << v32;
  __int32 v35 = v25 - 1;
  v30[704] = (int32x2_t)((v25 - 1 + (1 << v32)) >> v32);
  int32x2_t v36 = (int32x2_t)((v25 - 1 + (1 << v33)) >> v33);
  v30[101] = v36;
  v30[782].i32[0] = 3;
  int32x2_t v37 = (int32x2_t)((v25 + 7) >> 3);
  int v38 = (v26 + 7) >> 3;
  v30[777] = v37;
  v30[778].i32[0] = v37.i32[0];
  v30[778].i32[1] = v38;
  v30[693].i32[0] = v30[58].i32[1];
  if ((v32 - 5) <= 0xFFFFFFFC)
  {
    if (dword_1EB671A40 < 3) {
      return 4294954386;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unsupported log2_unit_size_ %d (update SpatialSumSad)\n", v32);
    syslog(27, "Unsupported log2_unit_size_ %d (update SpatialSumSad)\n", *v751);
    goto LABEL_64;
  }
  v767 = v30;
  if (v24 == 8)
  {
    int v755 = (v35 + v34) >> v32;
    int v758 = 1 << v32;
    unint64_t v763 = v30[59].i32[0];
    int v39 = *(unsigned __int8 *)(*(void *)&v27 + 484);
    unsigned int v40 = sub_1D0D22BA8;
    if (!*(unsigned char *)(*(void *)&v27 + 484)) {
      unsigned int v40 = sub_1D0D22D0C;
    }
    v30[108] = (int32x2_t)v40;
    if (v39) {
      int v41 = sub_1D0D229C8;
    }
    else {
      int v41 = sub_1D0D22AC4;
    }
    int v42 = sub_1D0D2110C;
    char v43 = sub_1D0D2130C;
    unint64_t v44 = sub_1D0D2150C;
    unint64_t v45 = sub_1D0D21694;
    int v46 = sub_1D0D21778;
    uint64_t v47 = sub_1D0D21830;
    char v48 = sub_1D0D21A34;
    unsigned int v49 = sub_1D0D21C24;
    unsigned int v50 = sub_1D0D21D9C;
    unsigned int v51 = sub_1D0D21EA4;
    uint64_t v52 = sub_1D0D21F94;
    unint64_t v53 = sub_1D0D222E4;
  }
  else
  {
    if (v24 > 0xF)
    {
LABEL_64:
      uint64_t v13 = 4294954386;
LABEL_145:
      if (dword_1EB671A40 >= 3)
      {
        fwrite("Pre-comp init failed\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        syslog(27, "Pre-comp init failed\n");
      }
      return v13;
    }
    int v755 = (v35 + v34) >> v32;
    int v758 = 1 << v32;
    unint64_t v763 = v30[59].i32[0];
    int v39 = *(unsigned __int8 *)(*(void *)&v27 + 484);
    int v54 = sub_1D0D22730;
    if (!*(unsigned char *)(*(void *)&v27 + 484)) {
      int v54 = sub_1D0D22890;
    }
    v30[108] = (int32x2_t)v54;
    if (v39) {
      int v41 = sub_1D0D22554;
    }
    else {
      int v41 = sub_1D0D2264C;
    }
    int v42 = sub_1D0D21240;
    char v43 = sub_1D0D21440;
    unint64_t v44 = sub_1D0D215C8;
    unint64_t v45 = sub_1D0D216EC;
    int v46 = sub_1D0D217D0;
    uint64_t v47 = sub_1D0D21960;
    char v48 = sub_1D0D21B50;
    unsigned int v49 = sub_1D0D21CDC;
    unsigned int v50 = sub_1D0D21E18;
    unsigned int v51 = sub_1D0D21F1C;
    uint64_t v52 = sub_1D0D22134;
    unint64_t v53 = sub_1D0D22418;
  }
  v30[109] = (int32x2_t)v41;
  v30[110] = (int32x2_t)v53;
  v30[111] = (int32x2_t)v52;
  v30[112] = (int32x2_t)v51;
  v30[113] = (int32x2_t)v50;
  v30[114] = (int32x2_t)v49;
  v30[115] = (int32x2_t)v48;
  v30[116] = (int32x2_t)v47;
  v30[117] = (int32x2_t)v46;
  v30[118] = (int32x2_t)v45;
  v30[119] = (int32x2_t)v44;
  v30[120] = (int32x2_t)v43;
  v30[121] = (int32x2_t)v42;
  v30[124] = (int32x2_t)sub_1D0D20F28;
  v30[125] = (int32x2_t)sub_1D0D20D90;
  v30[123] = (int32x2_t)sub_1D0D20D34;
  v30[122] = (int32x2_t)sub_1D0D20C80;
  if (v24 != 10)
  {
    if (v24 != 8) {
      goto LABEL_71;
    }
    int v55 = sub_1D0D7815C;
    int v56 = sub_1D0D785B8;
    unsigned int v57 = sub_1D0D78834;
    if (!v39) {
      goto LABEL_63;
    }
LABEL_69:
    unsigned int v58 = v30;
    goto LABEL_70;
  }
  int v55 = sub_1D0D77E78;
  int v56 = sub_1D0D78440;
  unsigned int v57 = sub_1D0D78724;
  if (v39) {
    goto LABEL_69;
  }
LABEL_63:
  unsigned int v58 = v30;
  v30[108] = (int32x2_t)v57;
LABEL_70:
  v58[110] = (int32x2_t)v56;
  v58[111] = (int32x2_t)v55;
LABEL_71:
  int v59 = (char **)v30;
  v30[125] = (int32x2_t)sub_1D0D77BE4;
  v30[123] = (int32x2_t)sub_1D0D77AAC;
  v30[122] = (int32x2_t)sub_1D0D779A8;
  v30[379] = (int32x2_t)v30;
  v30[701].i32[1] = 0;
  v30[702] = 0;
  v30[787] = 0;
  v30[783] = 0;
  v30[785] = 0;
  v30[784] = 0;
  *(int32x2_t *)((char *)&v30[785] + 6) = 0;
  v754[1758] = *(_DWORD *)(*(void *)&v27 + 456) == 1;
  v30[107].i32[1] = 0;
  int v60 = *(unsigned __int8 *)(*(void *)&v27 + 590);
  int v61 = *(unsigned __int8 *)(*(void *)&v23 + 2113) - v60;
  v30[102].i8[1] = 0;
  v30[792] = 0;
  v30[793].i32[0] = 0;
  int v62 = v61 - 3;
  v30[782].i32[1] = v62;
  if (v62 < 0)
  {
    if (!v60 || v62 != -1)
    {
      if (dword_1EB671A40 < 3) {
        return 4294954394;
      }
      fwrite("Motion block size is larger than LCU size!\n", 0x2BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(27, "Motion block size is larger than LCU size!\n");
      uint64_t v13 = 4294954394;
      goto LABEL_145;
    }
    int v59 = (char **)v30;
    v30[782].i32[1] = 0;
    if (dword_1EB671A40 >= 4)
    {
      fwrite("Cannot do fast pre-comp since motion block size is equal to LCU size!\n", 0x46uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      syslog(28, "Cannot do fast pre-comp since motion block size is equal to LCU size!\n");
      int v59 = (char **)v767;
    }
  }
  int v768 = v25 + 15;
  unint64_t v63 = (((v26 * v25) >> 6) + 7);
  unint64_t v64 = (v38 * v37.i32[0] + 7);
  sub_1D0C60FFC(v59 + 706, v63);
  bzero(v59[706], 4 * v63);
  uint64_t v65 = (int32x2_t *)(v59 + 709);
  sub_1D0C60FFC(v59 + 709, v63);
  bzero(v59[709], 4 * v63);
  sub_1D0C60FFC(v59 + 771, v64);
  bzero(v59[771], 4 * v64);
  if (*(unsigned char *)(*(void *)&v27 + 752) || *(unsigned char *)(*(void *)&v27 + 937)) {
    sub_1D0C60FFC((char **)&v767[779], v64);
  }
  if (*(unsigned char *)(*(void *)&v27 + 913)) {
    sub_1D0C60FFC((char **)&v767[774], v64);
  }
  unint64_t v66 = (((v26 + 15) >> 4) * (v768 >> 4));
  if (*(unsigned char *)(*(void *)&v27 + 484) || *(unsigned char *)(*(void *)&v27 + 487))
  {
    int v67 = v767;
    sub_1D0C60FFC((char **)&v767[712], v63);
    sub_1D0C60FFC((char **)&v767[755], v63);
    sub_1D0C60FFC((char **)&v767[758], v66);
    sub_1D0C60FFC((char **)&v67[761], (((v67[691].i32[1] + 31) >> 5) * ((v67[691].i32[0] + 31) >> 5)));
    sub_1D0C60FFC((char **)&v67[764], (((v67[691].i32[1] + 63) >> 6) * ((v67[691].i32[0] + 63) >> 6)));
    v767[767] = v767[755];
    v767[768] = v767[758];
    v767[769] = v767[761];
    v767[770] = v767[764];
    if (*(unsigned char *)(*(void *)&v27 + 484)) {
      uint64_t v65 = v767 + 712;
    }
  }
  else
  {
    int v67 = v767;
  }
  __int32 v68 = v26 - 1;
  v67[715] = *v65;
  sub_1D0C60FFC((char **)&v67[716], v63);
  if (v67[102].i8[0])
  {
    sub_1D0C60FFC((char **)&v67[722], (v755 * ((v68 + v758) >> v32) + 7));
    sub_1D0CE8BEC((char **)&v67[725], (v755 * ((v68 + v758) >> v32) + 7));
  }
  int32x2_t v69 = v67[72];
  if (*(unsigned char *)(*(void *)&v69 + 482) || *(unsigned char *)(*(void *)&v69 + 450) || *(unsigned char *)(*(void *)&v27 + 912))
  {
    sub_1D0C60FFC((char **)&v767[719], v63);
    sub_1D0C60FFC((char **)&v767[728], v66);
    sub_1D0CE8BEC((char **)&v767[731], v66);
  }
  if (*(char *)(*(void *)&v27 + 492) >= 1)
  {
    unint64_t v70 = (v36.i32[0] * ((v68 + (1 << v33)) >> v33));
    int32x2_t v71 = v767[737];
    unint64_t v72 = *(void *)&v767[738] - *(void *)&v71;
    if (v70 <= v72)
    {
      if (v70 < v72) {
        v767[738] = (int32x2_t)(*(void *)&v71 + v70);
      }
    }
    else
    {
      sub_1D0C4CCE0((unint64_t *)&v767[737], v70 - v72);
    }
    sub_1D0D088B8((char **)&v767[749], v70);
    sub_1D0D088B8((char **)&v767[752], v70);
    bzero(*(void **)&v767[749], 2 * v70);
    bzero(*(void **)&v767[752], 2 * v70);
  }
  if (*(unsigned char *)(*(void *)&v27 + 452))
  {
    sub_1D0C60FFC((char **)&v767[103], v66);
    sub_1D0C60FFC((char **)&v767[676], v66);
    sub_1D0C60FFC((char **)&v767[679], v66);
    sub_1D0C60FFC((char **)&v767[682], v66);
    sub_1D0C60FFC((char **)&v767[685], v66);
    sub_1D0C60FFC((char **)&v767[688], v66);
    sub_1D0C60FFC((char **)&v767[694], v767[700].i32[1]);
    sub_1D0C60FFC((char **)&v767[697], v767[700].i32[1]);
  }
  if (v767[58].i8[1])
  {
    sub_1D0C8E930((char **)&v767[734], v763);
    memcpy(*(void **)&v767[734], *(const void **)&v767[60], 2 * v763);
  }
  if (*(char *)(*(void *)&v27 + 444) >= 2)
  {
    LODWORD(v73) = *(unsigned __int8 *)(*(void *)&v27 + 538) - *v751;
    if (v73)
    {
      uint64_t v74 = 0;
      if (v73 <= 1) {
        uint64_t v73 = 1;
      }
      else {
        uint64_t v73 = v73;
      }
      unint64_t v75 = (char **)&v767[740];
      uint64_t v76 = -v73;
      do
      {
        sub_1D0C60FFC(v75, (((v767[691].i32[0] + ~(-1 << (v74 + *(unsigned char *)(*(void *)&v27 + 538)))) >> (v74 + *(unsigned char *)(*(void *)&v27 + 538)))* ((v767[691].i32[1] + ~(-1 << (v74 + *(unsigned char *)(*(void *)&v27 + 538)))) >> (v74 + *(unsigned char *)(*(void *)&v27 + 538)))));
        v75 += 3;
        --v74;
      }
      while (v76 != v74);
    }
  }
  LOWORD(v776[0]) = 0;
  int32x2_t v77 = v767[129];
  int32x2_t v78 = v767[128];
  uint64_t v79 = *(void *)&v77 - *(void *)&v78;
  if (*(void *)&v77 != *(void *)&v78)
  {
    uint64_t v80 = 0;
    unint64_t v81 = v79 >> 4;
    if (v81 <= 1) {
      unint64_t v81 = 1;
    }
    uint64_t v82 = (void *)(*(void *)&v78 + 8);
    do
    {
      *((_DWORD *)v82 - 1) = v80;
      *uint64_t v82 = -1;
      v82 += 2;
      ++v80;
    }
    while (v81 != v80);
  }
  v767[127] = (int32x2_t)v767;
  int32x2_t v84 = v767[3];
  int32x2_t v83 = v767[4];
  if (v83) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v83 + 8), 1uLL, memory_order_relaxed);
  }
  v767[373] = v84;
  unsigned int v85 = (std::__shared_weak_count *)v767[374];
  v767[374] = v83;
  if (v85) {
    sub_1D0C4C984(v85);
  }
  int32x2_t v86 = v767[127];
  if (*(unsigned char *)(*(void *)&v767[126] + 510))
  {
    uint64_t v87 = *(void *)(*(void *)&v86 + 40);
    int v88 = *(_DWORD *)(v87 + 204);
    int v89 = *(_DWORD *)(v87 + 208) * v88;
    sub_1D0C50C50(&v767[131], *(unsigned __int8 *)(v87 + 2096), *(unsigned __int8 *)(v87 + 2098), 0);
    bzero(&v767[202], 0x300uLL);
    for (unint64_t i = 0; ; ++i)
    {
      uint64_t v91 = 0;
      unsigned int v92 = 0;
      int32x2_t v86 = v767[127];
      uint64_t v93 = *(void *)(*(void *)&v86 + 576);
      do
      {
        if (*(void *)(v93 + 10000 + v91)) {
          ++v92;
        }
        v91 += 16;
      }
      while (v91 != 272);
      if (i >= v92) {
        break;
      }
      sub_1D0C60FFC((char **)&v767[3 * i + 153], (uint64_t)v89 >> 6);
    }
    v767[201] = (int32x2_t)((uint64_t)v88 >> 3);
    v767[300].i32[1] = 0;
  }
  else
  {
    uint64_t v93 = *(void *)(*(void *)&v86 + 576);
  }
  uint64_t v94 = sub_1D0D3A8F0((uint64_t)&v767[301], *(_DWORD *)(v93 + 576), *(unsigned char *)(v93 + 580), *(unsigned __int8 *)(*(void *)(*(void *)&v86 + 40) + 2096), *(_DWORD *)(v93 + 456), *(unsigned __int8 *)(*(void *)(*(void *)&v86 + 40) + 2099), *(char *)(*(void *)&v86 + 648), 0, (uint64_t)v776);
  uint64_t v13 = v94;
  int v96 = dword_1EB671A40;
  if (v94) {
    BOOL v97 = dword_1EB671A40 < 3;
  }
  else {
    BOOL v97 = 1;
  }
  if (!v97)
  {
    fwrite("Initialize rdcost_ failed\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Initialize rdcost_ failed\n");
    int v96 = dword_1EB671A40;
LABEL_141:
    if (v96 < 3) {
      return v13;
    }
    fwrite("Reference selector init failed\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    syslog(27, "Reference selector init failed\n");
    goto LABEL_145;
  }
  if (v94) {
    goto LABEL_141;
  }
  unsigned int v98 = v767;
  uint64_t v99 = *(void *)(*(void *)&v767[379] + 576);
  v767[106].i32[1] = *(_DWORD *)(v99 + 316);
  if (*(unsigned char *)(*(void *)&v27 + 937))
  {
    unint64_t v100 = 0;
    uint64_t v101 = (uint64_t *)(v99 + 10000);
    BOOL v102 = 1;
    do
    {
      uint64_t v103 = *v101;
      if (*v101 && *(int *)(v103 + 1024) >= 1 && *(int *)(v103 + 12) < 1) {
        break;
      }
      BOOL v102 = v100 < 0x10;
      v101 += 2;
      ++v100;
    }
    while (v100 != 17);
    int v104 = v754;
    if (v102)
    {
      v95.i32[0] = *(_DWORD *)(v99 + 312);
      BOOL v105 = *(float *)v95.i32 > 1.0;
    }
    else
    {
      BOOL v105 = 0;
    }
  }
  else
  {
    BOOL v105 = 0;
    int v104 = v754;
  }
  v767[107].i8[0] = v105;
  int32x2_t v107 = *v771;
  int32x2_t v106 = v771[1];
  if (v106) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v106 + 8), 1uLL, memory_order_relaxed);
  }
  v767[377] = v107;
  int v108 = (std::__shared_weak_count *)v767[378];
  v767[378] = v106;
  if (v108) {
    sub_1D0C4C984(v108);
  }
  int32x2_t v109 = v767[379];
  uint64_t v110 = *(void *)(*(void *)&v109 + 576);
  int32x2_t v111 = v767[380];
  if (v111)
  {
    if (*(unsigned char *)(v110 + 714))
    {
      uint64_t v112 = *(unsigned int *)(*(void *)&v109 + 6508);
      v767[793].i32[1] = v112;
      v767[102].i8[1] = (int)v112 > 0;
      if ((int)v112 >= 1)
      {
        int v113 = *(unsigned __int8 *)(*(void *)&v111 + 504);
        uint64_t v114 = *(void *)&v111 + 8 * *(int *)(*(void *)&v111 + 44);
        unint64_t v115 = (__int16 *)(v114 + 54);
        int v116 = (__int16 *)(v114 + 52);
        BOOL v117 = v113 == 0;
        if (v113) {
          int v118 = v115;
        }
        else {
          int v118 = v116;
        }
        if (v117) {
          int v116 = v115;
        }
        v95.i16[2] = *v116;
        v95.i16[0] = *v118;
        *(float32x2_t *)v119.f32 = vcvt_f32_s32(vshr_n_s32(vshl_n_s32(v95, 0x10uLL), 0x10uLL));
        v119.i64[1] = v119.i64[0];
        unsigned int v120 = (int32x4_t *)&v767[794];
        int v121 = (_OWORD *)(*(void *)&v109 + 6516);
        do
        {
          float32x4_t v122 = *(float32x4_t *)v121;
          int v121 = (_OWORD *)((char *)v121 + 28);
          *v120++ = vcvtq_s32_f32(vmulq_f32(v122, v119));
          --v112;
        }
        while (v112);
      }
    }
  }
  sub_1D0C6183C(&v767[382]);
  if (*(unsigned char *)(v110 + 870)) {
    sub_1D0D22E44(v751, *(void *)&v767[379] + 616);
  }
  int32x2_t v124 = v767[379];
  unsigned int v125 = *(unsigned __int8 *)(*(void *)&v124 + 648);
  unsigned int v126 = *(char **)(*(void *)&v124 + 576);
  uint64_t v736 = v110;
  if (!*(unsigned char *)(*(void *)&v124 + 648))
  {
    unint64_t v131 = 0;
    unsigned int v132 = (uint64_t *)(v126 + 10000);
    BOOL v133 = 1;
    do
    {
      uint64_t v134 = *v132;
      if (*v132 && *(int *)(v134 + 1024) >= 1 && *(int *)(v134 + 12) < 1) {
        break;
      }
      BOOL v133 = v131 < 0x10;
      v132 += 2;
      ++v131;
    }
    while (v131 != 17);
    if (!v133 || !*(unsigned char *)(v110 + 936) && !*(unsigned char *)(v110 + 584))
    {
      unsigned int v135 = 0;
      goto LABEL_597;
    }
  }
  int v747 = *(_DWORD *)(*(void *)(*(void *)&v124 + 632) + 1024);
  uint64_t v744 = (uint64_t)&v767[545];
  uint64_t v735 = *(char **)(*(void *)&v124 + 576);
  if (!v126[585])
  {
    if (v126[870])
    {
      uint64_t v136 = 0;
      LODWORD(v137) = 0;
      v750[486].i8[3] = 0;
      *(_WORD *)int v104 = 0;
      char v138 = (void *)v767[127];
      uint64_t v139 = v138[72];
      uint64_t v741 = v139 + 9968;
      uint64_t v742 = v139;
      uint64_t v140 = v138[79];
      int v743 = *(_DWORD *)(v140 + 1024);
      do
      {
        if (*(void *)(v139 + 10000 + v136)) {
          unint64_t v137 = (v137 + 1);
        }
        else {
          unint64_t v137 = v137;
        }
        v136 += 16;
      }
      while (v136 != 272);
      uint64_t v739 = (uint64_t)(v138 + 545);
      if (*(unsigned char *)(v140 + 432))
      {
        uint64_t v141 = v138[808];
        if (v141)
        {
          int v142 = *(unsigned __int8 *)(v141 + 504);
          uint64_t v143 = v141 + 8 * *(int *)(v141 + 44);
          int v144 = (__int16 *)(v143 + 54);
          int v145 = (__int16 *)(v143 + 52);
          BOOL v146 = v142 == 0;
          if (v142) {
            unint64_t v147 = v144;
          }
          else {
            unint64_t v147 = v145;
          }
          int v737 = *v147;
          if (v146) {
            int v148 = v144;
          }
          else {
            int v148 = v145;
          }
          int v149 = *v148;
        }
        else
        {
          uint64_t v191 = v138[77];
          int v737 = *(_DWORD *)(v191 + 520);
          int v149 = *(_DWORD *)(v191 + 524);
        }
      }
      else
      {
        uint64_t v189 = v138[5];
        int v190 = *(_DWORD *)(v189 + 204);
        int v149 = *(_DWORD *)(v189 + 208);
        int v737 = v190;
      }
      int v740 = v149;
      int v746 = *(char *)(v139 + 530);
      int v734 = *(char *)(v139 + 528);
      sub_1D0C9A58C(v741);
      unint64_t v738 = v137;
      if (v137)
      {
        uint64_t v193 = 0;
        do
        {
          int v194 = *(_DWORD *)(v742 + 4 * v193 + 10292);
          unsigned int v195 = (uint64_t *)sub_1D0C99620(v741, v194);
          uint64_t v197 = *v195;
          uint64_t v196 = (std::__shared_weak_count *)v195[1];
          if (v196) {
            atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v748 = v196;
          uint64_t v749 = v193;
          uint64_t v198 = (uint64_t)&v98[6 * v193 + 126];
          *(_DWORD *)(v198 + 640) = v194;
          int v199 = v194 - v743;
          *(_DWORD *)(v198 + 644) = v199;
          *(_DWORD *)(v198 + 652) = *(_DWORD *)(v197 + 12);
          *(_DWORD *)(v198 + 648) = 1;
          *(void *)(v198 + 632) = 0;
          *(int32x2_t *)(v198 + 624) = v98[3 * v193 + 153];
          __n128 v192 = *(__n128 *)(v197 + 1152);
          *(__n128 *)(v198 + 608) = v192;
          if ((int)v137 <= v746)
          {
            sub_1D0D7B3B0(v739, v199);
            int v200 = v199 >= 0 ? v199 : -v199;
            if (v200 != 1) {
              goto LABEL_308;
            }
          }
          int v201 = v193;
          if (*(unsigned char *)(*(void *)(*(void *)&v98[127] + 632) + 432))
          {
            if (*(_DWORD *)(v197 + 512) == v737 && *(_DWORD *)(v197 + 516) == v740)
            {
              if (*(void *)(v197 + 400) != *(void *)(v197 + 472)) {
                *(unsigned char *)(v197 + 48) = 1;
              }
              __n128 v192 = *(__n128 *)(v197 + 472);
              long long v202 = *(_OWORD *)(v197 + 488);
            }
            else
            {
              if (*(_DWORD *)(v197 + 504) != v737 || *(_DWORD *)(v197 + 508) != v740)
              {
                int v203 = *(_DWORD *)(v197 + 1024) - v743;
                if (v203 < 0) {
                  int v203 = v743 - *(_DWORD *)(v197 + 1024);
                }
                if (v203 <= 2)
                {
                  uint64_t v204 = *(int *)(v197 + 524);
                  if (v204)
                  {
                    uint64_t v205 = *(void *)(v197 + 488);
                    size_t v206 = *(int *)(v197 + 520);
                    int v207 = *(char **)(v197 + 472);
                    do
                    {
                      --v204;
                      memset(v207, 128, v206);
                      v207 += v205;
                    }
                    while (v204);
                    unsigned int v208 = *(_DWORD *)(v197 + 524);
                    if (v208 >= 2)
                    {
                      size_t v209 = *(int *)(v197 + 520);
                      uint64_t v210 = *(void *)(v197 + 496);
                      uint64_t v211 = (uint64_t)(int)v208 >> 1;
                      uint64_t v212 = *(char **)(v197 + 480);
                      do
                      {
                        --v211;
                        memset(v212, 128, v209);
                        v212 += v210;
                      }
                      while (v211);
                    }
                  }
                  uint64_t v213 = 0;
                  int32x2_t v214 = v98[373];
                  char v215 = 1;
                  do
                  {
                    char v216 = v215;
                    int v217 = (void *)(v197 + 8 * v213);
                    *(void *)(*(void *)&v214 + 8 * v213 + 8) = v217[55];
                    *(void *)(*(void *)&v98[373] + 8 * v213 + 24) = v217[59];
                    int32x2_t v214 = v98[373];
                    uint64_t v218 = *(void *)&v214 + 8 * v213;
                    *(void *)(v218 + 40) = v217[57];
                    *(void *)(v218 + 56) = v217[61];
                    uint64_t v213 = 1;
                    char v215 = 0;
                  }
                  while ((v216 & 1) != 0);
                  *(void *)(*(void *)&v214 + 72) = *(void *)(v197 + 504);
                  *(_DWORD *)(*(void *)&v214 + 80) = v737;
                  *(_DWORD *)(*(void *)&v214 + 84) = v740;
                  (*(void (**)(int32x2_t))(**(void **)&v214 + 24))(v214);
                  long long v219 = *(_OWORD *)(v197 + 488);
                  *(_OWORD *)(v197 + 400) = *(_OWORD *)(v197 + 472);
                  *(_OWORD *)(v197 + 416) = v219;
                  *(_DWORD *)(v197 + 512) = v737;
                  *(_DWORD *)(v197 + 516) = v740;
                  (*(void (**)(uint64_t, void, void, void))(*(void *)v197 + 16))(v197, 0, *(unsigned int *)(v197 + 524), 0);
                  *(unsigned char *)(v197 + 48) = 1;
                  int v201 = v749;
                }
                goto LABEL_284;
              }
              if (*(void *)(v197 + 400) != *(void *)(v197 + 440)) {
                *(unsigned char *)(v197 + 48) = 1;
              }
              __n128 v192 = *(__n128 *)(v197 + 440);
              long long v202 = *(_OWORD *)(v197 + 456);
            }
            *(__n128 *)(v197 + 400) = v192;
            *(_OWORD *)(v197 + 416) = v202;
          }
LABEL_284:
          int v220 = (void *)v98[127];
          uint64_t v221 = v220[79];
          int v222 = *(_DWORD *)(v197 + 1024) - *(_DWORD *)(v221 + 1024);
          if (v222 < 0) {
            int v222 = *(_DWORD *)(v221 + 1024) - *(_DWORD *)(v197 + 1024);
          }
          int v745 = v222;
          uint64_t v223 = v220[77];
          uint64_t v761 = *(void *)(v223 + 416);
          uint64_t v764 = *(void *)(v197 + 416);
          uint64_t v224 = *(void *)(v221 + 416);
          v769 = (char *)v98[3 * v201 + 153];
          int32x2_t v225 = v98[201];
          if (*(unsigned char *)(v221 + 432))
          {
            uint64_t v226 = v220[808];
            if (v226)
            {
              int v227 = *(unsigned __int8 *)(v226 + 504);
              uint64_t v228 = v226 + 8 * *(int *)(v226 + 44);
              unint64_t v229 = (__int16 *)(v228 + 54);
              int v230 = (__int16 *)(v228 + 52);
              BOOL v231 = v227 == 0;
              if (v227) {
                char v232 = v229;
              }
              else {
                char v232 = v230;
              }
              int v766 = *v232;
              if (v231) {
                unint64_t v233 = v229;
              }
              else {
                unint64_t v233 = v230;
              }
              int v234 = *v233;
            }
            else
            {
              int v766 = *(_DWORD *)(v223 + 520);
              int v234 = *(_DWORD *)(v223 + 524);
            }
          }
          else
          {
            uint64_t v235 = v220[5];
            int v236 = *(_DWORD *)(v235 + 204);
            int v234 = *(_DWORD *)(v235 + 208);
            int v766 = v236;
          }
          if (v234 < 1)
          {
            int v239 = 0;
            unsigned int v238 = 0;
          }
          else
          {
            uint64_t v237 = 0;
            unsigned int v238 = 0;
            int v239 = 0;
            uint64_t v753 = 4 * *(void *)&v225;
            int v752 = v234;
            uint64_t v759 = v197;
            do
            {
              if (v766 >= 1)
              {
                unsigned int v756 = v238;
                uint64_t v240 = 0;
                uint64_t v241 = 0;
                do
                {
                  int v772 = v239;
                  uint64_t v242 = v220[77];
                  uint64_t v243 = *(void *)(v242 + 416);
                  uint64_t v244 = *(void *)(v242 + 400);
                  char v245 = *(unsigned char *)(v242 + 531);
                  int v246 = v220;
                  uint64_t v247 = *(void *)(v220[79] + 400)
                       + ((v241 + v237 * *(void *)(v220[79] + 416)) << *(unsigned char *)(v220[79] + 531));
                  ((void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v767[131])(8, 8, 0, v764, *(void *)(v197 + 400) + ((v241 + v237 * *(void *)(v197 + 416)) << *(unsigned char *)(v197 + 531)), v224, v247);
                  int v248 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v767[329])(8, 8, v244 + ((v241 + v237 * v243) << v245), v761, v247, v224);
                  *(_DWORD *)&v769[4 * v240] = v248;
                  int v239 = v248 + v772;
                  v241 += 8;
                  ++v240;
                  uint64_t v197 = v759;
                  int v220 = v246;
                }
                while (v766 > (int)v241);
                unsigned int v238 = v756 + v240;
                int v104 = v754;
                int v234 = v752;
              }
              v237 += 8;
              v769 += v753;
            }
            while (v234 > (int)v237);
          }
          unsigned int v98 = v767;
          unint64_t v137 = v738;
          if (v745 == 1)
          {
            unsigned int v249 = (v239 + (v238 >> 1)) / v238;
            v767[300].i32[1] = v249;
            *(_DWORD *)(v220[79] + 1156) = v249;
          }
LABEL_308:
          if (v748) {
            sub_1D0C4C984(v748);
          }
          uint64_t v193 = v749 + 1;
        }
        while (v749 + 1 != v137);
      }
      int32x2_t v250 = v98[127];
      if (*(unsigned char *)(*(void *)&v250 + 648))
      {
        int v251 = *(_DWORD **)(*(void *)&v250 + 632);
        int v252 = v251[288];
        int v253 = v98[298].i32[0];
        int v254 = v734;
        if (25 * v252 >= (22 * v253)) {
          int v255 = 0;
        }
        else {
          int v255 = 2 * (20 * v251[289] > (23 * v98[299].i32[1]));
        }
        unsigned int v256 = v98[300].u32[0];
        if (v256 - 2 < 2)
        {
          if (50 * v252 > (47 * v253)) {
            int v257 = 1;
          }
          else {
            int v257 = 3;
          }
          v251[290] = v257;
        }
        else if (v256 <= 1)
        {
          v251[290] = v255;
        }
      }
      else
      {
        __n128 v192 = 0uLL;
        *(_OWORD *)v98[298].i8 = 0u;
        int v254 = v734;
      }
      if ((int)v137 <= v746) {
        goto LABEL_528;
      }
      int32x2_t v258 = v98[127];
      if ((*(_DWORD *)(*(void *)&v258 + 656) & 0x80000000) != 0)
      {
        uint64_t v279 = 0;
        LODWORD(v280) = 0;
        uint64_t v281 = *(void *)(*(void *)&v258 + 40);
        int v282 = *(_DWORD *)(v281 + 204);
        int v283 = *(_DWORD *)(v281 + 208);
        int32x2_t v284 = v98[201];
        uint64_t v285 = *(void *)(*(void *)&v258 + 576);
        do
        {
          if (*(void *)(v285 + 10000 + v279)) {
            uint64_t v280 = (v280 + 1);
          }
          else {
            uint64_t v280 = v280;
          }
          v279 += 16;
        }
        while (v279 != 272);
        uint64_t v286 = *(void *)(*(void *)&v258 + 632);
        if (*(unsigned char *)(v286 + 432))
        {
          uint64_t v287 = *(void *)(*(void *)&v258 + 6464);
          if (v287)
          {
            int v288 = *(unsigned __int8 *)(v287 + 504);
            uint64_t v289 = v287 + 8 * *(int *)(v287 + 44);
            int v290 = (__int16 *)(v289 + 54);
            uint64_t v291 = (__int16 *)(v289 + 52);
            if (v288) {
              int v292 = (__int16 *)(v289 + 54);
            }
            else {
              int v292 = (__int16 *)(v289 + 52);
            }
            int v282 = *v292;
            if (v288) {
              unint64_t v293 = v291;
            }
            else {
              unint64_t v293 = v290;
            }
            int v283 = *v293;
          }
          else
          {
            uint64_t v329 = *(void *)(*(void *)&v258 + 616);
            int v282 = *(_DWORD *)(v329 + 520);
            int v283 = *(_DWORD *)(v329 + 524);
          }
        }
        if (v283 > 0)
        {
          for (unint64_t j = 0; j < v283; j += 8)
          {
            if (v282 >= 1)
            {
              for (unint64_t k = 0; (uint64_t)k < v282; k += 8)
              {
                if (v280)
                {
                  uint64_t v332 = 0;
                  int v333 = 0;
                  unsigned int v334 = -1;
                  unint64_t v335 = (uint64_t *)&v98[204];
                  do
                  {
                    uint64_t v336 = *v335;
                    v335 += 6;
                    unsigned int v337 = *(_DWORD *)(v336 + 4 * ((j >> 3) * v284.i32[0] + (k >> 3)));
                    if (v337 < v334)
                    {
                      unsigned int v334 = v337;
                      int v333 = v332;
                    }
                    ++v332;
                  }
                  while (v280 != v332);
                }
                else
                {
                  int v333 = 0;
                }
                ++v98[6 * v333 + 205].i32[0];
              }
            }
          }
        }
        uint64_t v338 = 0;
        LODWORD(v339) = 0;
        uint64_t v340 = v285 + 10000;
        do
        {
          if (*(void *)(v340 + v338)) {
            unint64_t v339 = (v339 + 1);
          }
          else {
            unint64_t v339 = v339;
          }
          v338 += 16;
        }
        while (v338 != 272);
        int v341 = *(char *)(*(void *)&v98[126] + 168);
        int v342 = *(_DWORD *)(v286 + 1024);
        unint64_t v343 = (__n128 *)&v98[202];
        v776[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1D0CBF994;
        if (v339 < 0x81)
        {
          char v344 = 0;
          uint64_t v346 = 0;
        }
        else
        {
          char v344 = (__n128 *)sub_1D0CBED40(v339);
          uint64_t v346 = v345;
        }
        __n128 v347 = sub_1D0CBEDAC((__n128 *)&v98[202], (__n128 *)&v98[6 * v339 + 202], v776, v339, v344, v346, v192);
        if (v344) {
          operator delete(v344);
        }
        if (v339)
        {
          uint64_t v349 = 0;
          unsigned int v350 = 0;
          unsigned int v351 = 0;
          unint64_t v352 = v98 + 205;
          do
          {
            int v354 = v352->i32[0];
            v352 += 6;
            int v353 = v354;
            if (v349 >= (uint64_t)(v341 + 3) >> 2) {
              int v355 = 0;
            }
            else {
              int v355 = v353;
            }
            v351 += v355;
            v350 += v353;
            ++v349;
          }
          while (v339 != v349);
          v347.n128_f64[0] = (double)v351 / (double)v350;
          unint64_t v356 = v98 + 206;
          unint64_t v357 = v339;
          do
          {
            int v358 = v356->i32[0] - v342;
            LODWORD(v348) = v356[-1].i32[0];
            double v359 = v347.n128_f64[0] * (double)*(unint64_t *)&v348;
            if (v358 < 0) {
              int v358 = v342 - v356->i32[0];
            }
            double v348 = v359 + (1.0 - v347.n128_f64[0]) * 32.0 / (double)v358 + 0.5;
            v356[-1].i32[1] = (int)v348;
            v356 += 6;
            --v357;
          }
          while (v357);
          v776[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1D0CBF980;
          unint64_t v259 = v738;
          if (v339 < 0x81)
          {
            unsigned int v360 = 0;
            uint64_t v362 = 0;
          }
          else
          {
            unsigned int v360 = (__n128 *)sub_1D0CBED40(v339);
            uint64_t v362 = v361;
          }
        }
        else
        {
          unsigned int v360 = 0;
          uint64_t v362 = 0;
          v776[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1D0CBF980;
          unint64_t v259 = v738;
        }
        __n128 v192 = sub_1D0CBEDAC((__n128 *)&v98[202], (__n128 *)&v98[6 * v339 + 202], v776, v339, v360, v362, v347);
        if (v360) {
          operator delete(v360);
        }
        v98[207].i32[0] = 2;
        int v363 = 1;
        if (v259 >= 2 && v746 >= 2)
        {
          unsigned int v364 = (unsigned int *)&v98[209];
          for (uint64_t m = 1; m != v259; ++m)
          {
            unsigned int v367 = *v364;
            v364 += 12;
            unsigned int v366 = v367;
            if (*(int *)(*(void *)(*(void *)&v98[127] + 632) + 1160) > 1)
            {
              if (v366 > 1)
              {
LABEL_455:
                unint64_t v368 = &v98[6 * m];
                int v363 = 2;
                v368[207].i32[0] = 2;
                goto LABEL_456;
              }
            }
            else if (v366 < 2)
            {
              goto LABEL_455;
            }
          }
          int v363 = 1;
        }
LABEL_456:
        if (v259 >= 2 && v363 < v746)
        {
          int v369 = v98 + 213;
          unint64_t v370 = 2;
          do
          {
            if (v369->i32[0] != 2)
            {
              v369->i32[0] = 2;
              ++v363;
            }
            if (v370 >= v259) {
              break;
            }
            v369 += 6;
            ++v370;
          }
          while (v363 < v746);
        }
        if (v259 < 2)
        {
          unint64_t v375 = 0;
          uint64_t v377 = 0;
          char v374 = &v343[3 * v259];
          v776[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1D0CBF95C;
          goto LABEL_472;
        }
        unint64_t v371 = (BOOL *)&v98[213];
        unint64_t v372 = v259 - 1;
        do
        {
          if (*v371 != 2)
          {
            BOOL v373 = v363++ < v254;
            *unint64_t v371 = v373;
          }
          v371 += 12;
          --v372;
        }
        while (v372);
      }
      else
      {
        unint64_t v259 = v738;
      }
      unint64_t v343 = (__n128 *)&v98[202];
      char v374 = (__n128 *)&v98[6 * v259 + 202];
      v776[0] = (unsigned int (*)(__n128 *, __n128 *))sub_1D0CBF95C;
      if (v259 < 0x81)
      {
        unint64_t v375 = 0;
        uint64_t v377 = 0;
      }
      else
      {
        unint64_t v375 = (__n128 *)sub_1D0CBED40(v259);
        uint64_t v377 = v376;
      }
LABEL_472:
      sub_1D0CBEDAC(v343, v374, v776, v259, v375, v377, v192);
      if (v375) {
        operator delete(v375);
      }
      int32x2_t v378 = v98[127];
      int v379 = *(_DWORD *)(*(void *)&v378 + 656);
      if (v379 < 0) {
        goto LABEL_521;
      }
      int v380 = 0;
      if (v259 && v746 >= 1)
      {
        int v380 = 0;
        int v381 = (int *)&v98[207] + 1;
        unint64_t v382 = 1;
        do
        {
          if (*v381 <= v379)
          {
            *(v381 - 1) = 2;
            ++v380;
          }
          if (v382 >= v259) {
            break;
          }
          v381 += 12;
          ++v382;
        }
        while (v380 < v746);
      }
      if (!v259)
      {
        if (v379 > 0)
        {
          LODWORD(v392) = 0;
          goto LABEL_515;
        }
        goto LABEL_528;
      }
      uint64_t v383 = 0;
      char v384 = 0;
LABEL_484:
      int v385 = &v98[6 * v383 + 207];
      while (1)
      {
        if (v385->i32[0] != 2)
        {
          if (v380 >= v254)
          {
            ++v380;
            ++v383;
            char v384 = 1;
            if (v383 == v259) {
              goto LABEL_493;
            }
            goto LABEL_484;
          }
          v385->i32[0] = 1;
          ++v380;
        }
        ++v383;
        v385 += 6;
        if (v259 == v383)
        {
          if (v384)
          {
LABEL_493:
            int v386 = 0;
            int v387 = (int *)&v98[207] + 1;
            int v388 = -1;
            unint64_t v389 = v259;
            do
            {
              if (*(v387 - 1) != 2)
              {
                if (*v387 > v388) {
                  int v388 = *v387;
                }
                if (*(v387 - 3) > v386) {
                  int v386 = *(v387 - 3);
                }
              }
              v387 += 12;
              --v389;
            }
            while (v389);
            unint64_t v390 = (_DWORD *)&v98[207] + 1;
            int v391 = -1;
            do
            {
              if (*(v390 - 1) != 2 && *v390 == v388 && v386 > *(v390 - 3)) {
                int v391 = v389;
              }
              ++v389;
              v390 += 12;
            }
            while (v259 != v389);
            v98[6 * v391 + 207].i32[0] = 0;
          }
          if (v379 >= 1)
          {
            uint64_t v392 = 0;
            unint64_t v393 = (_DWORD *)&v98[207] + 1;
            do
            {
              if ((*(v393 - 2) & 0x80000000) != 0 && !*v393) {
                goto LABEL_515;
              }
              ++v392;
              v393 += 12;
            }
            while (v259 != v392);
            LODWORD(v392) = v259;
LABEL_515:
            int v394 = v392 + 1;
            if ((int)v392 + 1 < (int)v259)
            {
              int v395 = &v98[6 * v392];
              int v396 = v395[206].i32[0];
              int v397 = v395 + 213;
              do
              {
                if (v397[-1].i32[0] < v396 && v397->i32[0] == 1) {
                  v397->i32[0] = 0;
                }
                v397 += 6;
                ++v394;
              }
              while ((int)v259 > v394);
            }
          }
LABEL_521:
          if (v259)
          {
            unint64_t v398 = v259;
            int v399 = *(_DWORD *)(*(void *)(*(void *)&v378 + 632) + 1024);
            int v400 = (int *)&v98[207];
            do
            {
              int v401 = *(v400 - 2);
              if (*v400 < 2)
              {
                if (*v400 == 1) {
                  sub_1D0D7B2E8(v739, v401 - v399);
                }
              }
              else
              {
                sub_1D0D7B3B0(v739, v401 - v399);
              }
              v400 += 12;
              --v398;
            }
            while (v398);
          }
LABEL_528:
          uint64_t v278 = (uint64_t)&v767[545];
          goto LABEL_529;
        }
      }
    }
    if (*(unsigned char *)(*(void *)&v124 + 756))
    {
      uint64_t v161 = *(unsigned int *)(*(void *)&v124 + 688);
      v750[486].i8[3] = 0;
      *(__int32 *)((char *)v767[575].i32 + 2) = 0;
      *(_WORD *)int v104 = 0;
      if ((int)v161 >= 1)
      {
        uint64_t v162 = (uint64_t)(v126 + 9968);
        uint64_t v163 = *(void *)&v124 + 692;
        unsigned int v164 = (_DWORD *)(*(void *)&v124 + 692);
        uint64_t v165 = v161;
        do
        {
          int v166 = *v164 + v747;
          if (v166 >= 0)
          {
            if (*(void *)sub_1D0C99620(v162, v166))
            {
              if ((*v164 & 0x80000000) != 0) {
                ++*v104;
              }
              else {
                ++v104[1];
              }
            }
            else
            {
              *unsigned int v164 = 0x7FFFFFFF;
            }
          }
          ++v164;
          --v165;
        }
        while (v165);
        uint64_t v167 = *v104;
        if (*v104)
        {
          uint64_t v168 = 0;
          __int16 v169 = 0;
          int v170 = 0;
          do
          {
            uint64_t v171 = 0;
            int v172 = 0x7FFFFFFF;
            int v173 = -1;
            do
            {
              int v174 = *(_DWORD *)(v163 + 4 * v171);
              if (v174 < 0 && v170 < -v174 && v172 > -v174)
              {
                int v172 = -v174;
                int v173 = v171;
              }
              ++v171;
            }
            while (v161 != v171);
            int v175 = *(_DWORD *)(v163 + 4 * v173);
            v767[567].i16[v168 + 1] = v169 + ~(_WORD)v175;
            v767[575].i16[1] |= 1 << v168;
            int v170 = -v175;
            ++v168;
            __int16 v169 = v175;
          }
          while (v168 != v167);
        }
        uint64_t v176 = v104[1];
        if (v104[1])
        {
          uint64_t v177 = 0;
          int v178 = 0;
          do
          {
            uint64_t v179 = 0;
            int v180 = 0x7FFFFFFF;
            int v181 = -1;
            do
            {
              int v182 = *(_DWORD *)(v163 + 4 * v179);
              BOOL v183 = v182 > v178;
              BOOL v184 = v182 < v180;
              BOOL v185 = !v183 || !v184;
              if (v183 && v184) {
                int v186 = *(_DWORD *)(v163 + 4 * v179);
              }
              else {
                int v186 = v180;
              }
              if (v185) {
                int v187 = v181;
              }
              else {
                int v187 = v179;
              }
              if (v182 >= 1)
              {
                int v180 = v186;
                int v181 = v187;
              }
              ++v179;
            }
            while (v161 != v179);
            int v188 = *(_DWORD *)(v163 + 4 * v181);
            v767[571].i16[v177 + 1] = v188 + ~(_WORD)v178;
            v767[575].i16[2] |= 1 << v177++;
            int v178 = v188;
          }
          while (v177 != v176);
        }
      }
      sub_1D0C64A10(v744, 0);
LABEL_394:
      *(unsigned char *)(*(void *)&v98[379] + 676) = 1;
      goto LABEL_530;
    }
    if (v126[936] && v125 < 3 || v126[584] && !*(unsigned char *)(*(void *)&v124 + 648))
    {
      __int32 v260 = 0;
      v767[599].i32[1] = 0;
      int v261 = v747;
      unint64_t v262 = v126;
      int v263 = v767;
    }
    else
    {
      __int32 v313 = *(_DWORD *)(*(void *)&v124 + 672);
      v767[599].i32[1] = v313;
      uint64_t v314 = *(void *)(*(void *)(*(void *)&v124 + 40) + 296);
      uint64_t v315 = v314 + 248 * v313;
      uint64_t v316 = (uint64_t)(v126 + 9968);
      int v317 = *(_DWORD *)(*(void *)&v124 + 656);
      if (*(unsigned char *)(v315 + 160))
      {
        uint64_t v318 = 0;
        unsigned int v319 = (__int16 *)(v314 + 248 * v313);
        while (1)
        {
          int v320 = *v319;
          v319 += 2;
          char v321 = sub_1D0C99620(v316, v747 + v320);
          if (!*(void *)v321 || *(_DWORD *)(*(void *)v321 + 12) > v317) {
            break;
          }
          if (++v318 >= (unint64_t)*(unsigned __int8 *)(v315 + 160)) {
            goto LABEL_400;
          }
        }
      }
      else
      {
LABEL_400:
        uint64_t v322 = v314 + 248 * v313;
        int v324 = *(unsigned __int8 *)(v322 + 161);
        int v323 = (unsigned __int8 *)(v322 + 161);
        if (!v324)
        {
LABEL_405:
          uint64_t v744 = v315;
          unsigned int v98 = v767;
          goto LABEL_530;
        }
        uint64_t v325 = 0;
        unint64_t v326 = (__int16 *)(v314 + 248 * v313 + 64);
        while (1)
        {
          int v327 = *v326;
          v326 += 2;
          int v328 = sub_1D0C99620(v316, v747 + v327);
          if (!*(void *)v328 || *(_DWORD *)(*(void *)v328 + 12) > v317) {
            break;
          }
          if (++v325 >= (unint64_t)*v323) {
            goto LABEL_405;
          }
        }
      }
      int v263 = v767;
      int32x2_t v124 = v767[379];
      unint64_t v262 = *(char **)(*(void *)&v124 + 576);
      int v261 = *(_DWORD *)(*(void *)(*(void *)&v124 + 632) + 1024);
      __int32 v260 = v767[599].i32[1];
      unsigned int v125 = *(unsigned __int8 *)(*(void *)&v124 + 648);
      unsigned int v126 = v735;
    }
    uint64_t v264 = (uint64_t)(v262 + 9968);
    int v265 = *(_DWORD *)(*(void *)&v124 + 656);
    *(__int32 *)((char *)v263[575].i32 + 2) = 0;
    v750[486].i8[3] = 0;
    *(_WORD *)int v104 = 0;
    if (v125) {
      unint64_t v266 = sub_1D0D7BD54;
    }
    else {
      unint64_t v266 = sub_1D0D7BDE8;
    }
    int v267 = v260;
    char v268 = &v126[108 * v260];
    int v269 = v268[961];
    if (v268[961])
    {
      unint64_t v270 = 0;
      uint64_t v271 = 0;
      unsigned int v272 = (unsigned __int8 *)(v268 + 961);
      int v773 = v267;
      uint64_t v273 = (uint64_t)&v126[108 * v267 + 964];
      do
      {
        int v274 = *(_DWORD *)(v273 + 4 * v270) + v261;
        if (v261 < 0 || (v274 & 0x80000000) == 0)
        {
          uint64_t v275 = sub_1D0C99620(v264, v274);
          if (*(void *)v275)
          {
            if (*(_DWORD *)(*(void *)v275 + 12) <= v265)
            {
              int v276 = *(_DWORD *)(v273 + 4 * v270);
              if (v276 < 0) {
                ++*v754;
              }
              else {
                ++v754[1];
              }
              *((_DWORD *)v776 + (int)v271) = v276;
              uint64_t v271 = (v271 + 1);
            }
          }
        }
        ++v270;
      }
      while (v270 < *v272);
      int v104 = v754;
      LODWORD(v277) = *v754;
      int v269 = v754[1];
      int v267 = v773;
    }
    else
    {
      LODWORD(v277) = 0;
      uint64_t v271 = 0;
    }
    unsigned int v294 = v269 + v277;
    int v295 = &v735[108 * v267];
    if (v294 >= v295[962])
    {
LABEL_381:
      if (v125) {
        uint64_t v305 = 0;
      }
      else {
        uint64_t v305 = 0x7FFFFFFFLL;
      }
      unsigned int v98 = v767;
      if (v277)
      {
        unint64_t v306 = 0;
        __int16 v307 = 0;
        uint64_t v308 = v305;
        int v104 = v754;
        do
        {
          int v309 = *((_DWORD *)v776 + (int)v266((uint64_t)v776, v271, v308, 1));
          v767[567].i16[v306 + 1] = v307 + ~(_WORD)v309;
          v767[575].i16[1] |= 1 << v306;
          uint64_t v308 = -v309;
          ++v306;
          unint64_t v277 = *v754;
          __int16 v307 = v309;
        }
        while (v306 < v277);
        unsigned int v98 = v767;
      }
      LODWORD(v310) = v104[1];
      if (v104[1])
      {
        unint64_t v311 = 0;
        __int16 v312 = 0;
        int v104 = v754;
        do
        {
          LODWORD(v305) = *((_DWORD *)v776 + (int)v266((uint64_t)v776, v271, v305, 0));
          v98[571].i16[v311 + 1] = v305 + ~v312;
          v767[575].i16[2] |= 1 << v311++;
          unint64_t v310 = v754[1];
          __int16 v312 = v305;
        }
        while (v311 < v310);
        LODWORD(v277) = *v754;
        unsigned int v98 = v767;
      }
      if (v277 + v310)
      {
        sub_1D0C64A10(v744, 0);
        unsigned int v98 = v767;
        int v104 = v754;
      }
      goto LABEL_394;
    }
    int v296 = (unsigned __int8 *)(v295 + 962);
    uint64_t v297 = sub_1D0C9A58C(v264);
    uint64_t v298 = 0;
    while (1)
    {
      uint64_t v299 = *(void *)sub_1D0C99620(v264, *(_DWORD *)(v297 + 4 * v298));
      if (!v299) {
        goto LABEL_379;
      }
      int v300 = *(_DWORD *)(v299 + 1024);
      if (v300 < 0 || *(_DWORD *)(v299 + 12) > v265) {
        goto LABEL_379;
      }
      int v301 = v300 - v261;
      if ((int)v271 < 1)
      {
LABEL_373:
        if (v301 < 0)
        {
          ++*v754;
        }
        else
        {
          if (v300 == v261) {
            goto LABEL_379;
          }
          ++v754[1];
        }
        *((_DWORD *)v776 + (int)v271) = v301;
        uint64_t v271 = (v271 + 1);
      }
      else
      {
        uint64_t v302 = v271;
        int v303 = v776;
        while (1)
        {
          int v304 = *(_DWORD *)v303;
          int v303 = (unsigned int (**)(__n128 *, __n128 *))((char *)v303 + 4);
          if (v301 == v304) {
            break;
          }
          if (!--v302) {
            goto LABEL_373;
          }
        }
      }
      LODWORD(v277) = *v754;
      if (v754[1] + v277 >= *v296)
      {
        int v104 = v754;
        goto LABEL_381;
      }
LABEL_379:
      if (++v298 == 17)
      {
        int v104 = v754;
        LODWORD(v277) = *v754;
        goto LABEL_381;
      }
    }
  }
  int v127 = v126[528];
  v750[486].i8[3] = 0;
  *(_WORD *)int v104 = 0;
  uint64_t v128 = (uint64_t)(v126 + 9968);
  if (*(unsigned char *)(*(void *)&v124 + 6752))
  {
    int v129 = sub_1D0C9A200(v128, 2u);
    uint64_t v130 = (uint64_t)&v767[545];
    sub_1D0D7B3B0(v744, *(_DWORD *)(*(void *)v129 + 1024) - v747);
    goto LABEL_348;
  }
  uint64_t v150 = sub_1D0C9A58C(v128);
  unint64_t v151 = 0;
  int v152 = 0;
  char v153 = 0;
  int v154 = -1;
  while (1)
  {
    uint64_t v155 = 0;
    unsigned int v156 = 0;
    uint64_t v157 = *(void *)(*(void *)&v767[379] + 576);
    do
    {
      if (*(void *)(v157 + 10000 + v155)) {
        ++v156;
      }
      v155 += 16;
    }
    while (v155 != 272);
    if (v151 >= v156) {
      break;
    }
    int v158 = *(_DWORD *)(*(void *)sub_1D0C99620(v157 + 9968, *(_DWORD *)(v150 + 4 * v151)) + 36);
    if (v152 < v127)
    {
      sub_1D0D7B3B0(v744, *(_DWORD *)(v150 + 4 * v151) - v747);
      v153 |= v158 == 2;
LABEL_203:
      ++v152;
      goto LABEL_213;
    }
    if (v153) {
      break;
    }
    if ((v158 - 1) <= 1)
    {
      char v153 = v158 == 2;
      sub_1D0D7B2E8(v744, *(_DWORD *)(v150 + 4 * v151) - v747);
      if (v158 == 1 && v154 == -1) {
        int v154 = *(_DWORD *)(v150 + 4 * v151);
      }
      goto LABEL_203;
    }
    char v153 = 0;
LABEL_213:
    ++v151;
  }
  unsigned int v98 = v767;
  uint64_t v130 = (uint64_t)&v767[545];
  if (v152 == 7)
  {
    if (v154 == -1) {
      int v160 = *(_DWORD *)(v150 + ((uint64_t)((v151 << 32) - 0x100000000) >> 30)) - v747;
    }
    else {
      int v160 = v154 - v747;
    }
    sub_1D0D7B478(v744, v160);
  }
LABEL_348:
  uint64_t v278 = v130;
LABEL_529:
  sub_1D0C64A10(v278, 0);
LABEL_530:
  unint64_t v402 = (void *)v98[379];
  uint64_t v403 = v402[5];
  if (*(unsigned char *)(v403 + 320))
  {
    uint64_t v404 = 0;
    int v405 = 0;
    int v406 = *(unsigned __int8 *)(v403 + 224);
    int v407 = v406 + 4;
    uint64_t v408 = v402[72];
    int v409 = -16 << v406;
    int v410 = ~(-16 << v406);
    int v411 = v409 & v747;
    do
    {
      uint64_t v412 = *(void *)(v408 + 16 * v404 + 10000);
      if (v412 && (*(unsigned char *)(v408 + v404 + 10272) & 2) != 0)
      {
        unint64_t v413 = 0;
        int v414 = *(_DWORD *)(v412 + 1024);
        int v415 = v414 & v410;
        int v416 = (uint64_t *)(v408 + 10000);
        do
        {
          if (v404 == v413)
          {
            LOBYTE(v417) = 0;
          }
          else
          {
            uint64_t v417 = *v416;
            if (*v416) {
              LOBYTE(v417) = (*(_DWORD *)(v417 + 1024) & v410) == v415;
            }
          }
          if (v413 > 0xF) {
            break;
          }
          ++v413;
          v416 += 2;
        }
        while ((v417 & 1) == 0);
        uint64_t v418 = (uint64_t)v98 + 2 * v405;
        *(_WORD *)(v418 + 4632) = v415;
        v98[599].i16[0] |= 1 << v405;
        if (v417)
        {
          v98[599].i16[1] |= 1 << v405;
          v98[591].i32[v405] = (v411 - v414 + *(unsigned __int16 *)(v418 + 4632)) / v407;
        }
        ++v405;
      }
      ++v404;
    }
    while (v404 != 17);
    v98[576].i32[1] = v405;
    int v419 = (unsigned __int16 *)&v98[579];
    unint64_t v420 = v405;
    unsigned int v421 = (unsigned __int16 *)&v98[579] + v405;
    if (v405 < 129)
    {
LABEL_549:
      sub_1D0C99990(v419, v421, v420, 0, 0);
    }
    else
    {
      unsigned int v422 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      unint64_t v423 = v405;
      while (1)
      {
        uint64_t v424 = (unsigned __int16 *)operator new(2 * v423, v422);
        if (v424) {
          break;
        }
        BOOL v97 = v423 > 1;
        v423 >>= 1;
        if (!v97) {
          goto LABEL_549;
        }
      }
      unint64_t v425 = v424;
      sub_1D0C99990(v419, v421, v420, v424, v423);
      operator delete(v425);
    }
    unsigned int v98 = v767;
    unsigned int v426 = v767[576].u32[1];
    unsigned int v427 = v735[529];
    if (v426 > v427)
    {
      if (dword_1EB671A40 >= 4)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Number of LTRs in DPB is %d, more than specified (%d)!\n", v767[576].i32[1], v427);
        syslog(28, "Number of LTRs in DPB is %d, more than specified (%d)!\n", v767[576].i32[1], v735[529]);
        unsigned int v427 = v735[529];
        unsigned int v98 = v767;
      }
      v98[576].i32[1] = v427;
      unsigned int v426 = v427;
    }
    if (v426)
    {
      if (dword_1EB671A40 >= 3)
      {
        int v428 = "LTR encoding is broken\n";
        fwrite("LTR encoding is broken\n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        uint64_t v13 = 4294954386;
        goto LABEL_618;
      }
      return 4294954386;
    }
    unint64_t v402 = (void *)v98[379];
    int v104 = v754;
  }
  else
  {
    v98[576].i32[1] = 0;
  }
  uint64_t v13 = sub_1D0C9906C(&v767[382], v402[72] + 9968, (uint64_t)(v402 + 5), (unsigned char *)v744, (uint64_t)&v98[576], *(_DWORD *)(v402[79] + 1024));
  if (v13) {
    goto LABEL_620;
  }
  int32x2_t v124 = v98[379];
  unsigned int v135 = *(unsigned __int8 *)(*(void *)&v124 + 648);
  if (v135 == 5)
  {
    uint64_t v110 = v736;
    if (v98[383].i32[0] || v98[383].i32[1])
    {
      unsigned int v135 = 5;
    }
    else
    {
      unsigned int v135 = 4;
      *(unsigned char *)(*(void *)&v124 + 648) = 4;
    }
  }
  else
  {
    uint64_t v110 = v736;
    if (v135 == 1)
    {
      *(_WORD *)(v744 + 172) = 0;
      *(_DWORD *)(v744 + 242) = 0;
      uint64_t v429 = *(unsigned __int8 *)(v744 + 160);
      if (*(unsigned char *)(v744 + 160))
      {
        int v430 = (unsigned char *)(v744 + 2);
        do
        {
          *int v430 = 0;
          v430 += 4;
          --v429;
        }
        while (v429);
      }
      uint64_t v431 = *(unsigned __int8 *)(v744 + 161);
      if (*(unsigned char *)(v744 + 161))
      {
        int v432 = (unsigned char *)(v744 + 66);
        do
        {
          *int v432 = 0;
          v432 += 4;
          --v431;
        }
        while (v431);
      }
      *(unsigned char *)(*(void *)&v124 + 676) = 1;
    }
  }
  int v433 = (uint64_t *)v98[127];
  LODWORD(v434) = *((_DWORD *)v433 + 171);
  int v435 = *((_DWORD *)v433 + 764);
  if ((int)v434 >= v435) {
    uint64_t v434 = v435;
  }
  else {
    uint64_t v434 = v434;
  }
  v98[375].i32[1] = v434;
  if ((int)v434 >= 1)
  {
    LODWORD(v436) = 0;
    uint64_t v437 = *((int *)v433 + 765);
    uint64_t v438 = *((int *)v433 + 766);
    unsigned int v439 = v433 + 385;
    unsigned int v440 = v433 + 417;
    unsigned int v441 = v433 + 449;
    uint64_t v442 = *((int *)v433 + 767);
    do
    {
      if ((int)v437 >= 1)
      {
        uint64_t v443 = 0;
        uint64_t v444 = (int)v436;
        int v445 = v436;
        int v446 = (_DWORD *)(*(void *)&v98[128] + 16 * (int)v436 + 4);
        unsigned int v447 = v439;
        do
        {
          uint64_t v448 = *v447;
          v447 += 2;
          *(v446 - 1) = *(_DWORD *)(v448 + 1024);
          *int v446 = v445 + v443++;
          uint64_t v436 = v444 + v443;
          if (v443 >= v437) {
            break;
          }
          v446 += 4;
        }
        while (v436 < v434);
      }
      if ((int)v438 >= 1 && (int)v436 < (int)v434)
      {
        uint64_t v449 = 0;
        uint64_t v450 = (int)v436;
        int v451 = v436;
        int v452 = (_DWORD *)(*(void *)&v98[128] + 16 * (int)v436 + 4);
        unsigned int v453 = v440;
        do
        {
          uint64_t v454 = *v453;
          v453 += 2;
          *(v452 - 1) = *(_DWORD *)(v454 + 1024);
          _DWORD *v452 = v451 + v449++;
          if (v449 >= v438) {
            break;
          }
          v452 += 4;
        }
        while (v450 + v449 < v434);
        LODWORD(v436) = v450 + v449;
      }
      if ((int)v442 >= 1 && (int)v436 < (int)v434)
      {
        uint64_t v455 = 0;
        uint64_t v456 = (int)v436;
        int v457 = v436;
        int v458 = (_DWORD *)(*(void *)&v98[128] + 16 * (int)v436 + 4);
        int v459 = v441;
        do
        {
          uint64_t v460 = *v459;
          v459 += 2;
          *(v458 - 1) = *(_DWORD *)(v460 + 1024);
          _DWORD *v458 = v457 + v455++;
          if (v455 >= v442) {
            break;
          }
          v458 += 4;
        }
        while (v456 + v455 < v434);
        LODWORD(v436) = v456 + v455;
      }
      LODWORD(v436) = v436 + 1;
    }
    while ((int)v436 < (int)v434);
  }
LABEL_597:
  if (*(unsigned char *)(v110 + 552)
    || *(unsigned char *)(v110 + 562) == 1
    || *(unsigned char *)(*(void *)(*(void *)&v124 + 56) + 12)
    || *(char *)(v110 + 444) > 1
    || *(unsigned char *)(v110 + 894)
    || *(unsigned char *)(v110 + 752))
  {
    int v461 = *(_DWORD *)(v110 + 456);
    uint64_t v462 = *(void *)(*(void *)&v124 + 576);
    if (!*(unsigned char *)(v462 + 870)) {
      sub_1D0D22E44(v751, *(void *)&v124 + 616);
    }
    if (v135 > 2)
    {
      sub_1D0D4E620(*(void **)&v98[381], *(void *)&v98[379], 0, 1);
      if (v469) {
        goto LABEL_616;
      }
LABEL_619:
      uint64_t v13 = sub_1D0D2381C((uint64_t)v751);
      if (v13)
      {
LABEL_620:
        if (dword_1EB671A40 >= 3)
        {
          fwrite("Precompress failed\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          syslog(27, "Precompress failed\n");
        }
        return v13;
      }
    }
    else
    {
      LODWORD(v123) = v98[701].i32[1];
      v98[784].i32[0] = fabs(sqrt((double)v123));
      if (*(unsigned char *)(v462 + 936))
      {
        unint64_t v463 = 0;
        uint64_t v464 = (uint64_t)v98[379];
        char v465 = (uint64_t *)(*(void *)(v464 + 576) + 10000);
        BOOL v466 = 1;
        do
        {
          uint64_t v467 = *v465;
          if (*v465 && *(int *)(v467 + 1024) >= 1 && *(int *)(v467 + 12) < 1) {
            break;
          }
          BOOL v466 = v463 < 0x10;
          v465 += 2;
          ++v463;
        }
        while (v463 != 17);
        if (v466)
        {
          char v468 = *(unsigned char *)(v464 + 648);
          *(unsigned char *)(v464 + 648) = 4;
          sub_1D0D4E620(*(void **)&v98[381], v464, 0, 1);
          if (!v469)
          {
            *(unsigned char *)(*(void *)&v98[379] + 648) = v468;
            goto LABEL_619;
          }
LABEL_616:
          uint64_t v13 = v469;
          if (dword_1EB671A40 < 3) {
            return v13;
          }
          int v428 = "SliceEnc initialization failed\n";
          fwrite("SliceEnc initialization failed\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
LABEL_618:
          syslog(27, v428);
          goto LABEL_620;
        }
      }
    }
    if (*(unsigned char *)(v462 + 552))
    {
      int32x2_t v470 = v98[380];
      if (v470)
      {
        *((_WORD *)v104 + 878) = 0;
        int32x2_t v471 = v98[379];
        double v472 = 0.0;
        if (*(unsigned char *)(*(void *)&v471 + 648) != 5)
        {
          unsigned int v473 = v98[784].u32[0];
          if (v135 > 2)
          {
            if (v473 < 0xB || (float)((float)v473 * 3.1623) >= (float)v98[784].u32[1])
            {
              unsigned int v473 = v98[783].u32[1];
              if (v473 <= 0xA) {
                unsigned int v473 = 10;
              }
            }
            else
            {
              v104[1756] = 1;
            }
            v98[783].i32[1] = v473;
            int v474 = *(_DWORD *)(*(void *)&v471 + 652) - *(_DWORD *)(*(void *)(*(void *)&v98[381] + 1672) + 8);
            if (v474 < 0) {
              int v474 = -v474;
            }
            double v472 = (double)(v474 - 1) * 0.1;
          }
          else
          {
            v104[1756] = 1;
            if (v473 <= 0xA) {
              unsigned int v473 = 10;
            }
            v98[783].i32[1] = v473;
          }
          if (!*(_DWORD *)(v462 + 456))
          {
            float v475 = 1.0 - v472;
            unsigned int v473 = (float)((float)v473 * v475);
          }
          double v476 = *(double *)(*(void *)&v470 + 32);
          if (v476 <= 0.0)
          {
            double v472 = (double)v473;
          }
          else
          {
            double v477 = (double)v473;
            if (v476 * 0.85 <= (double)v473)
            {
              double v472 = (v476 * 7.0 + v477) * 0.125;
            }
            else
            {
              double v472 = (v476 + v477) * 0.5;
              v104[1757] = 1;
            }
          }
          *(double *)(*(void *)&v470 + 32) = v472;
        }
        double v478 = v472;
        if (v104[1758])
        {
          LODWORD(v478) = v98[783].i32[1];
          double v478 = (double)*(unint64_t *)&v478;
        }
        *(double *)&v98[787] = v478;
        if (v461 == 1)
        {
          unint64_t v479 = 0.75;
          double v480 = v472 * 0.75;
          LODWORD(v479) = v98[783].i32[1];
          double v481 = (double)v479;
          if (v472 * 0.75 > v481) {
            goto LABEL_651;
          }
          if (v472 * 1.25 < v481)
          {
            double v480 = (v472 * 1.25 + v481) * 0.5;
LABEL_651:
            *(double *)&v98[787] = v480;
          }
        }
        *(double *)(*(void *)&v470 + 24) = v472;
      }
    }
  }
  else
  {
    uint64_t v733 = *(void *)(*(void *)&v124 + 576);
    if (*(unsigned char *)(v733 + 482) || *(unsigned char *)(v733 + 450) || v98[102].i8[0]) {
      sub_1D0D23080(v751, *(void *)&v124 + 616);
    }
  }
  unint64_t v482 = (void *)v98[379];
  int v483 = (unsigned char *)v482[72];
  if (v483[482] || v483[450])
  {
    uint64_t v484 = v482[77];
    uint64_t v485 = *(void *)(v484 + 400);
    uint64_t v486 = *(void *)(v484 + 416);
    int32x2_t v487 = v98[706];
    uint64_t v488 = v98[691].u32[1];
    if (*(unsigned char *)(v482[5] + 2096) == 10) {
      char v489 = 8;
    }
    else {
      char v489 = 6;
    }
    uint64_t v490 = v98[691].u32[0];
    if ((int)v488 >= 8)
    {
      int v491 = 0;
      LODWORD(v492) = 0;
      int32x2_t v493 = v98[719];
      int v494 = (int)v490 >> 3;
      if ((int)v490 >> 3 <= 1) {
        int v494 = 1;
      }
      do
      {
        if ((int)v490 >= 8)
        {
          uint64_t v492 = (int)v492;
          int v495 = v494;
          do
          {
            *(_DWORD *)(*(void *)&v493 + 4 * v492) = (*(_DWORD *)(*(void *)&v487 + 4 * v492)
                                                                    + (1 << (v489 - 1))) >> v489 >> 4;
            ++v492;
            --v495;
          }
          while (v495);
        }
        ++v491;
      }
      while (v491 != v488 >> 3);
      uint64_t v490 = v98[691].u32[0];
      uint64_t v488 = v98[691].u32[1];
    }
    unsigned int v496 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))v98[111])(v485, v486, v490, v488, *(void *)&v487, *(void *)&v98[728], *(void *)&v98[731]);
    v98[702].i32[0] = v496;
    int v497 = *(unsigned __int8 *)(v482[77] + 531);
    int v498 = v98[691].i32[0];
    int v499 = v98[691].i32[1];
    int v500 = (unsigned int *)v98[728];
    v501 = (void *)v98[731];
    if (v497)
    {
      bzero(v776, 0x1940uLL);
      bzero(v775, 0x1940uLL);
      if (v499 >= 1)
      {
        for (int n = 0; n < v499; n += 16)
        {
          if (v498 >= 1)
          {
            for (iunint64_t i = 0; ii < v498; ii += 16)
            {
              uint64_t v504 = *v500;
              unint64_t v505 = *v501 - ((v504 * (unint64_t)v504) >> 8) + 128;
              if (v505 < 0x3E300)
              {
                unint64_t v506 = v505 >> 8;
                uint64_t v507 = ((v506 + 5) * (unsigned __int128)0x199999999999999AuLL) >> 64;
                unint64_t v508 = (unint64_t)(v504 + 512) >> 14;
                if (v506 <= v496) {
                  int v509 = (unsigned int (**)(__n128 *, __n128 *))v775;
                }
                else {
                  int v509 = v776;
                }
                uint64_t v510 = (uint64_t)v509 + 404 * v508 + 4 * v507;
                ++*(_DWORD *)(v510 + 4);
              }
              ++v500;
              ++v501;
            }
          }
        }
      }
      uint64_t v511 = 0;
      unint64_t v482 = (void *)v767[379];
      uint64_t v512 = 4;
      do
      {
        int v513 = 0;
        int v514 = 0;
        int v515 = 0;
        int v516 = 0;
        uint64_t v517 = -100;
        uint64_t v518 = v512;
        do
        {
          if (*(_DWORD *)((char *)v776 + v518) > v516)
          {
            int v516 = *(_DWORD *)((char *)v776 + v518);
            int v515 = v517 + 101;
          }
          if (*(_DWORD *)&v775[v518] > v514)
          {
            int v514 = *(_DWORD *)&v775[v518];
            int v513 = v517 + 101;
          }
          v518 += 4;
          BOOL v519 = __CFADD__(v517++, 1);
        }
        while (!v519);
        if (v515 >= 2) {
          int v520 = v515 - 1;
        }
        else {
          int v520 = 0;
        }
        if (v513 >= 2) {
          int v521 = v513 - 1;
        }
        else {
          int v521 = 0;
        }
        unsigned int v522 = v520 - v521;
        if (v520 - v521 < 0) {
          unsigned int v522 = v521 - v520;
        }
        int v523 = 10 * v521;
        int v524 = 5 * (v521 + v520);
        if (v522 >= 2) {
          int v524 = v523;
        }
        *((_DWORD *)v482 + v511++ + 38) = (int)sqrt((double)v524);
        v512 += 404;
      }
      while (v511 != 16);
    }
    else
    {
      bzero(v776, 0x1940uLL);
      bzero(v775, 0x1940uLL);
      if (v499 >= 1)
      {
        for (junint64_t j = 0; jj < v499; jj += 16)
        {
          if (v498 >= 1)
          {
            for (kunint64_t k = 0; kk < v498; kk += 16)
            {
              uint64_t v527 = *v500;
              unint64_t v528 = *v501 - ((v527 * (unint64_t)v527) >> 8) + 128;
              if (v528 < 0x3E300)
              {
                unint64_t v529 = v528 >> 8;
                uint64_t v530 = ((v529 + 5) * (unsigned __int128)0x199999999999999AuLL) >> 64;
                unint64_t v531 = (unint64_t)(v527 + 128) >> 12;
                if (v529 <= v496) {
                  unint64_t v532 = (unsigned int (**)(__n128 *, __n128 *))v775;
                }
                else {
                  unint64_t v532 = v776;
                }
                uint64_t v533 = (uint64_t)v532 + 404 * v531 + 4 * v530;
                ++*(_DWORD *)(v533 + 4);
              }
              ++v500;
              ++v501;
            }
          }
        }
      }
      uint64_t v534 = 0;
      unint64_t v482 = (void *)v767[379];
      uint64_t v535 = 4;
      do
      {
        int v536 = 0;
        int v537 = 0;
        int v538 = 0;
        int v539 = 0;
        uint64_t v540 = -100;
        uint64_t v541 = v535;
        do
        {
          if (*(_DWORD *)((char *)v776 + v541) > v539)
          {
            int v539 = *(_DWORD *)((char *)v776 + v541);
            int v538 = v540 + 101;
          }
          if (*(_DWORD *)&v775[v541] > v537)
          {
            int v537 = *(_DWORD *)&v775[v541];
            int v536 = v540 + 101;
          }
          v541 += 4;
          BOOL v519 = __CFADD__(v540++, 1);
        }
        while (!v519);
        if (v538 >= 2) {
          int v542 = v538 - 1;
        }
        else {
          int v542 = 0;
        }
        if (v536 >= 2) {
          int v543 = v536 - 1;
        }
        else {
          int v543 = 0;
        }
        unsigned int v544 = v542 - v543;
        if (v542 - v543 < 0) {
          unsigned int v544 = v543 - v542;
        }
        int v545 = 10 * v543;
        int v546 = 5 * (v543 + v542);
        if (v544 >= 2) {
          int v546 = v545;
        }
        *((_DWORD *)v482 + v534++ + 38) = (int)sqrt((double)v546);
        v535 += 404;
      }
      while (v534 != 16);
    }
    int v483 = (unsigned char *)v482[72];
    unsigned int v98 = v767;
  }
  if (!v483[452])
  {
    uint64_t v584 = v736;
    goto LABEL_922;
  }
  uint64_t v547 = v482[77];
  unint64_t v548 = *(uint8x16_t **)(v547 + 400);
  uint64_t v549 = *(void *)(v547 + 416);
  int v550 = v98[691].i32[0];
  uint64_t v757 = 4 * ((v98[691].i32[1] + 15) >> 4) * ((v550 + 15) >> 4);
  uint64_t v760 = ((v550 + 15) >> 4);
  bzero(*(void **)&v98[103], v757);
  int32x2_t v551 = v98[676];
  int32x2_t v552 = v98[679];
  LODWORD(v553) = v98[691].i32[0];
  int v554 = ((int)v553 + 15) >> 4;
  int v555 = v98[691].i32[1];
  if (*(unsigned char *)(v482[77] + 528) != 10)
  {
    if (v555 < 1) {
      goto LABEL_781;
    }
    int v585 = 0;
    LODWORD(v586) = 0;
    while (1)
    {
      v585 += 16;
      if ((int)v553 >= 1) {
        break;
      }
LABEL_780:
      v548 += v549;
      if (v585 >= v555) {
        goto LABEL_781;
      }
    }
    uint64_t v587 = 0;
    uint64_t v586 = (int)v586;
    uint64_t v588 = v548;
    while (1)
    {
      v587 += 16;
      int v589 = v98[691].i32[1];
      if (v587 <= (int)v553 && v585 <= v589)
      {
        unsigned int v594 = 0;
        int v595 = v588;
        uint64_t v596 = 16;
        do
        {
          uint16x8_t v597 = vmovl_high_u8(*v595);
          uint16x8_t v598 = vmovl_u8(*(uint8x8_t *)v595->i8);
          unsigned int v594 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v594, *(uint16x4_t *)v598.i8), *(uint16x4_t *)v597.i8), (int32x4_t)vaddl_high_u16(v598, v597)));
          int v595 = (uint8x16_t *)((char *)v595 + v549);
          --v596;
        }
        while (v596);
        uint64_t v599 = 0;
        int v600 = 4 * v594;
        *(_DWORD *)(*(void *)&v551 + 4 * v586) = 4 * v594;
        int v601 = v588;
        uint64_t v602 = 16;
        do
        {
          uint16x8_t v603 = vmovl_high_u8(*v601);
          uint16x8_t v604 = vmovl_u8(*(uint8x8_t *)v601->i8);
          uint32x4_t v605 = vmull_u16(*(uint16x4_t *)v604.i8, *(uint16x4_t *)v604.i8);
          uint32x4_t v606 = vmull_high_u16(v604, v604);
          uint32x4_t v607 = vmull_high_u16(v603, v603);
          uint32x4_t v608 = vmull_u16(*(uint16x4_t *)v603.i8, *(uint16x4_t *)v603.i8);
          uint64_t v609 = vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddw_u32(vaddw_u32((uint64x2_t)(unint64_t)v599, *(uint32x2_t *)v605.i8), *(uint32x2_t *)v608.i8), (int64x2_t)vaddl_u32(*(uint32x2_t *)v606.i8, *(uint32x2_t *)v607.i8)), vaddq_s64((int64x2_t)vaddl_high_u32(v605, v608), (int64x2_t)vaddl_high_u32(v606, v607))));
          uint64_t v599 = v609;
          int v601 = (uint8x16_t *)((char *)v601 + v549);
          --v602;
        }
        while (v602);
        *(_DWORD *)(*(void *)&v552 + 4 * v586) = (16 * v609 - ((unint64_t)(v600 * (uint64_t)v600) >> 8) + 128) >> 8;
        int v593 = (*(_DWORD *)(*(void *)&v551 + 4 * v586) + 128) >> 8;
      }
      else
      {
        if (v585 <= v589) {
          int v591 = 1;
        }
        else {
          int v591 = v554;
        }
        if (v586 <= v591)
        {
          *(_DWORD *)(*(void *)&v552 + 4 * v586) = 0;
          *(_DWORD *)(*(void *)&v551 + 4 * v586) = 0;
          goto LABEL_778;
        }
        uint64_t v592 = v586 - v591;
        *(_DWORD *)(*(void *)&v552 + 4 * v586) = *(_DWORD *)(*(void *)&v552 + 4 * v592);
        int v593 = *(_DWORD *)(*(void *)&v551 + 4 * v592);
      }
      *(_DWORD *)(*(void *)&v551 + 4 * v586) = v593;
LABEL_778:
      ++v586;
      uint64_t v553 = v98[691].i32[0];
      ++v588;
      if (v587 >= v553)
      {
        int v555 = v98[691].i32[1];
        goto LABEL_780;
      }
    }
  }
  if (v555 < 1) {
    goto LABEL_781;
  }
  int v556 = 0;
  LODWORD(v557) = 0;
  v558 = (uint16x4_t *)&v548[1];
  uint64_t v559 = 32 * v549;
  uint64_t v560 = 2 * v549;
  while (2)
  {
    v556 += 16;
    if ((int)v553 < 1) {
      goto LABEL_755;
    }
    uint64_t v561 = 0;
    uint64_t v557 = (int)v557;
    v562 = v548;
    unsigned int v563 = v558;
    while (2)
    {
      v561 += 16;
      int v564 = v98[691].i32[1];
      if (v561 <= (int)v553 && v556 <= v564)
      {
        int v569 = 0;
        int v570 = v563;
        uint64_t v571 = 16;
        do
        {
          int v569 = vaddvq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v569, v570[-2]), *v570), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)v570[-2].i8, *(uint16x8_t *)v570->i8)));
          int v570 = (uint16x4_t *)((char *)v570 + v560);
          --v571;
        }
        while (v571);
        uint64_t v572 = 0;
        uint64_t v573 = 0;
        *(_DWORD *)(*(void *)&v551 + 4 * v557) = v569;
        int v574 = v562;
        do
        {
          uint64_t v575 = 0;
          int64x2_t v576 = 0uLL;
          int64x2_t v577 = (int64x2_t)(unint64_t)v573;
          int64x2_t v578 = 0uLL;
          int64x2_t v579 = 0uLL;
          do
          {
            uint16x8_t v580 = (uint16x8_t)v574[v575];
            uint32x4_t v581 = vmull_high_u16(v580, v580);
            uint32x4_t v582 = vmull_u16(*(uint16x4_t *)v580.i8, *(uint16x4_t *)v580.i8);
            int64x2_t v579 = (int64x2_t)vaddw_high_u32((uint64x2_t)v579, v581);
            int64x2_t v578 = (int64x2_t)vaddw_u32((uint64x2_t)v578, *(uint32x2_t *)v581.i8);
            int64x2_t v576 = (int64x2_t)vaddw_high_u32((uint64x2_t)v576, v582);
            int64x2_t v577 = (int64x2_t)vaddw_u32((uint64x2_t)v577, *(uint32x2_t *)v582.i8);
            ++v575;
          }
          while (v575 != 2);
          uint64_t v583 = vaddvq_s64(vaddq_s64(vaddq_s64(v577, v578), vaddq_s64(v576, v579)));
          uint64_t v573 = v583;
          ++v572;
          int v574 = (uint8x16_t *)((char *)v574 + v560);
        }
        while (v572 != 16);
        *(_DWORD *)(*(void *)&v552 + 4 * v557) = (v583 - ((unint64_t)(v569 * (uint64_t)v569) >> 8) + 128) >> 8;
        int v568 = (*(_DWORD *)(*(void *)&v551 + 4 * v557) + 128) >> 8;
LABEL_751:
        *(_DWORD *)(*(void *)&v551 + 4 * v557) = v568;
      }
      else
      {
        if (v556 <= v564) {
          int v566 = 1;
        }
        else {
          int v566 = v554;
        }
        if (v557 > v566)
        {
          uint64_t v567 = v557 - v566;
          *(_DWORD *)(*(void *)&v552 + 4 * v557) = *(_DWORD *)(*(void *)&v552 + 4 * v567);
          int v568 = *(_DWORD *)(*(void *)&v551 + 4 * v567);
          goto LABEL_751;
        }
        *(_DWORD *)(*(void *)&v552 + 4 * v557) = 0;
        *(_DWORD *)(*(void *)&v551 + 4 * v557) = 0;
      }
      ++v557;
      uint64_t v553 = v98[691].i32[0];
      v563 += 4;
      v562 += 2;
      if (v561 < v553) {
        continue;
      }
      break;
    }
    int v555 = v98[691].i32[1];
LABEL_755:
    v558 = (uint16x4_t *)((char *)v558 + v559);
    unint64_t v548 = (uint8x16_t *)((char *)v548 + v559);
    if (v556 < v555) {
      continue;
    }
    break;
  }
LABEL_781:
  bzero(*(void **)&v98[694], 4 * v98[700].i32[1]);
  bzero(*(void **)&v98[697], 4 * v98[700].i32[1]);
  int v610 = v98[691].i32[1];
  if (v610 < 17) {
    goto LABEL_841;
  }
  int32x2_t v611 = v98[676];
  int32x2_t v612 = v98[682];
  int32x2_t v613 = v98[685];
  int v614 = v98[691].i32[0];
  int v615 = (v550 + 15) >> 4;
  uint64_t v616 = *(void *)&v611 - 4 * (int)v760;
  for (muint64_t m = 16; mm < v610; mm += 16)
  {
    LODWORD(v618) = v615 + 1;
    if (v614 >= 17)
    {
      uint64_t v618 = (int)v618;
      int v619 = 16;
      do
      {
        *(_DWORD *)(*(void *)&v612 + 4 * v618) = *(_DWORD *)(*(void *)&v611 + 4 * v618)
                                                 - *(_DWORD *)(*(void *)&v611 + 4 * v615);
        *(_DWORD *)(*(void *)&v613 + 4 * v618) = *(_DWORD *)(*(void *)&v611 + 4 * v618)
                                                 - *(_DWORD *)(v616 + 4 * v618);
        v619 += 16;
        ++v618;
        int v614 = v98[691].i32[0];
        ++v615;
      }
      while (v619 < v614);
      int v610 = v98[691].i32[1];
    }
    int v615 = v618;
  }
  if (v610 < 33)
  {
LABEL_841:
    v634 = (int *)v98[103];
  }
  else
  {
    int v620 = (v550 + 15) >> 4;
    int v621 = v98[691].i32[0];
    uint64_t v622 = v616 + 4;
    uint64_t v623 = *(void *)&v98[688] + 4;
    unsigned int v624 = 16;
    do
    {
      if (v621 <= 32)
      {
        int v626 = v624 + 16;
      }
      else
      {
        int v625 = v621 - 16;
        int v626 = v624 + 16;
        uint64_t v627 = v620;
        int v628 = 32;
        int v629 = (int *)(*(void *)&v611 + 4 + 4 * v620);
        do
        {
          if ((v628 - 16) < 0x11)
          {
            int v630 = 0;
            int v631 = 0;
          }
          else
          {
            int v630 = *(v629 - 1);
            int v631 = 1;
          }
          if (v628 < v625)
          {
            ++v631;
            v630 += v629[1];
          }
          if (v626 < v98[691].i32[1] - 16)
          {
            ++v631;
            v630 += *(_DWORD *)(*(void *)&v611 + 4 + 4 * (int)v760 + 4 * v627);
          }
          if (v624 >= 0x11)
          {
            ++v631;
            v630 += *(_DWORD *)(v622 + 4 * v627);
          }
          int v632 = *v629++;
          int v633 = v632 * v631 - v630;
          if (v633 < 0) {
            int v633 = -v633;
          }
          *(_DWORD *)(v623 + 4 * v627) = v633;
          int v621 = v98[691].i32[0];
          int v625 = v621 - 16;
          ++v627;
          BOOL v97 = v628 < v621 - 16;
          v628 += 16;
        }
        while (v97);
        int v610 = v98[691].i32[1];
        int v620 = v627;
      }
      v620 += 2;
      unsigned int v624 = v626;
    }
    while (v626 < v610 - 16);
    v634 = (int *)v98[103];
    if (v610 >= 33)
    {
      int v635 = (v550 + 15) >> 4;
      uint64_t v636 = *(void *)&v611 + 4;
      int v637 = v98[691].i32[0];
      uint64_t v638 = *(void *)&v613 + 4;
      uint64_t v639 = *(void *)&v612 + 4;
      uint64_t v640 = *(void *)&v98[679] + 4;
      int v641 = 16;
      do
      {
        if (v637 >= 33)
        {
          unint64_t v642 = 0;
          int v643 = v635;
          v644 = &v634[v635];
          uint64_t v645 = v636 + 4 * v635;
          uint64_t v646 = (uint64_t)&v634[v635 + 1 - (int)v760];
          uint64_t v647 = (int)v760 + (uint64_t)v635;
          uint64_t v648 = (uint64_t)&v634[v647 + 1];
          uint64_t v649 = v638 + 4 * v647;
          uint64_t v650 = v638 + 4 * v635;
          uint64_t v651 = v639 + 4 * v635;
          int v652 = 16;
          uint64_t v653 = v640 + 4 * v635;
          do
          {
            int v654 = *(_DWORD *)(v645 + v642);
            BOOL v655 = v654 >= 65 && v654 < v98[700].i32[0];
            if (v655 && (*(_DWORD *)(v653 + v642) - 1) <= 0xA)
            {
              int v657 = *(_DWORD *)(v651 + v642);
              int v656 = *(_DWORD *)(v651 + v642 + 4);
              if ((v656 * v657) < 0x5B) {
                goto LABEL_827;
              }
              if ((v656 * v657) >= 0xFFFFFFA6)
              {
                if (v657 < 0) {
                  int v657 = -v657;
                }
                if (v656 < 0) {
                  int v656 = -v656;
                }
                if (v657 < 0x14 || v656 <= 0x13)
                {
LABEL_827:
                  v659 = &v644[v642 / 4];
                  *(void *)v659 = 0x100000001;
                  v659[2] = 1;
                }
              }
              int v660 = *(_DWORD *)(v650 + v642);
              int v661 = *(_DWORD *)(v649 + v642);
              if ((v661 * v660) < 0x5B) {
                goto LABEL_829;
              }
              if ((v661 * v660) >= 0xFFFFFFA6)
              {
                if (v660 < 0) {
                  int v660 = -v660;
                }
                if (v661 < 0) {
                  int v661 = -v661;
                }
                if (v660 < 0x14 || v661 <= 0x13)
                {
LABEL_829:
                  v644[v642 / 4 + 1] = 1;
                  *(_DWORD *)(v646 + v642) = 1;
                  *(_DWORD *)(v648 + v642) = 1;
                }
              }
            }
            v652 += 16;
            unsigned int v98 = v767;
            int v637 = v767[691].i32[0];
            v642 += 4;
            ++v643;
          }
          while (v652 < v637 - 16);
          int v610 = v767[691].i32[1];
          int v635 = v643;
        }
        v635 += 2;
        v641 += 16;
      }
      while (v641 < v610 - 16);
    }
  }
  v770 = (void *)v98[694];
  if (*v634 < 1)
  {
    int v774 = 0;
  }
  else
  {
    int v774 = 1;
    int *v634 = 1;
  }
  if (v550 >= 17)
  {
    v662 = v634 + 1;
    for (nint n = v760 - 1; nn; --nn)
    {
      if (*v662 >= 1)
      {
        int v664 = *(v662 - 1);
        if (v664 < 1)
        {
          int *v662 = ++v774;
          if (v774 == v98[701].i32[0])
          {
LABEL_884:
            bzero(v770, 4 * v98[700].i32[1]);
            int v774 = v98[701].i32[0];
            goto LABEL_885;
          }
        }
        else
        {
          int *v662 = v664;
        }
      }
      ++v662;
    }
  }
  BOOL v762 = v550 > 16;
  if (v98[691].i32[1] >= 33)
  {
    int v665 = (v550 + 15) >> 4;
    unsigned int v666 = &v634[-(int)v760];
    int v667 = 16;
    while (1)
    {
      int v765 = v667;
      if (v634[v665] >= 1)
      {
        int v668 = v634[v665 - (int)v760];
        if (v668 < 1)
        {
          v634[v665] = ++v774;
          if (v774 == v98[701].i32[0]) {
            goto LABEL_884;
          }
        }
        else
        {
          v634[v665] = v668;
        }
      }
      LODWORD(v669) = v665 + 1;
      if (v98[691].i32[0] >= 33) {
        break;
      }
LABEL_882:
      int v665 = v669 + v762;
      int v667 = v765 + 16;
      uint64_t v584 = v736;
      if (v765 + 16 >= v98[691].i32[1] - 16) {
        goto LABEL_886;
      }
    }
    uint64_t v669 = (int)v669;
    int v670 = 16;
    while (2)
    {
      if (v634[v669] >= 1)
      {
        uint64_t v671 = v634[v665];
        uint64_t v672 = v666[v669];
        if ((int)v671 < 1 || (int)v672 < 1)
        {
          if ((int)v671 >= 1 && v672 == 0) {
            goto LABEL_880;
          }
          BOOL v675 = v671 || (int)v672 <= 0;
          LODWORD(v671) = v666[v669];
          if (!v675) {
            goto LABEL_880;
          }
          v634[v669] = v774 + 1;
          unsigned int v98 = v767;
          if (++v774 == v767[701].i32[0]) {
            goto LABEL_884;
          }
        }
        else
        {
          int v676 = sub_1D0D23668((uint64_t)v751, (uint64_t)v770, v671);
          int v677 = sub_1D0D23668((uint64_t)v751, (uint64_t)v770, v672);
          if (v677 < v676) {
            int v676 = v677;
          }
          sub_1D0D236F4((uint64_t)v751, (uint64_t)v770, v774, v676, v671);
          sub_1D0D236F4((uint64_t)v751, (uint64_t)v770, v774, v676, v672);
          unsigned int v666 = &v634[-(int)v760];
          LODWORD(v671) = v676;
LABEL_880:
          v634[v669] = v671;
          unsigned int v98 = v767;
        }
      }
      v670 += 16;
      ++v669;
      ++v665;
      if (v670 >= v98[691].i32[0] - 16) {
        goto LABEL_882;
      }
      continue;
    }
  }
LABEL_885:
  uint64_t v584 = v736;
LABEL_886:
  v678 = v98;
  uint64_t v679 = (int *)v98[103];
  int v680 = (char *)v678[694];
  if (v774 < 0 || v678[701].i32[0] <= v774)
  {
LABEL_909:
    size_t v696 = v767;
    bzero(v680, 4 * v767[700].i32[1]);
    int v693 = 1;
  }
  else
  {
    int v681 = (void *)v678[697];
    bzero(v681, 4 * v678[700].i32[1]);
    int v682 = v678[691].i32[1];
    if (v682 >= 1)
    {
      int v683 = 0;
      LODWORD(v684) = 0;
      int v685 = v767[691].i32[0];
      while (v685 < 1)
      {
LABEL_897:
        v683 += 16;
        if (v683 >= v682) {
          goto LABEL_898;
        }
      }
      int v686 = 0;
      uint64_t v684 = (int)v684;
      while (1)
      {
        uint64_t v687 = v679[v684];
        int v688 = *(_DWORD *)&v680[4 * v687];
        if (v688 >= 1)
        {
          v679[v684] = v688;
          LODWORD(v687) = v688;
        }
        if ((int)v687 > v774) {
          break;
        }
        ++*((_DWORD *)v681 + (int)v687);
        ++v684;
        v686 += 16;
        int v685 = v767[691].i32[0];
        if (v686 >= v685)
        {
          int v682 = v767[691].i32[1];
          goto LABEL_897;
        }
      }
      bzero(v681, 4 * v767[700].i32[1]);
      bzero(v680, 4 * v767[700].i32[1]);
      uint64_t v679 = (int *)v767[103];
      int v680 = (char *)v767[694];
      goto LABEL_909;
    }
LABEL_898:
    uint64_t v679 = (int *)v767[103];
    int v680 = (char *)v767[694];
    if (v774 < 1) {
      goto LABEL_909;
    }
    int32x2_t v689 = v767[697];
    uint64_t v690 = (v774 + 1);
    uint64_t v691 = v690 - 1;
    unsigned __int8 v692 = (int *)(*(void *)&v689 + 4);
    do
    {
      if (*v692 <= 3) {
        *unsigned __int8 v692 = 0;
      }
      ++v692;
      --v691;
    }
    while (v691);
    bzero(v680, 4 * v767[700].i32[1]);
    int v693 = 1;
    uint64_t v694 = 4;
    do
    {
      int v695 = *(_DWORD *)(*(void *)&v689 + v694);
      if (v695 >= 1)
      {
        *(_DWORD *)(*(void *)&v689 + 4 * v693) = v695;
        *(_DWORD *)&v680[v694] = v693++;
      }
      v694 += 4;
    }
    while (4 * v690 != v694);
    size_t v696 = v767;
    uint64_t v584 = v736;
  }
  int v697 = v696[691].i32[1];
  if (v697 < 1)
  {
LABEL_918:
    unsigned int v98 = v767;
    v703 = (_DWORD *)v767[103];
    if (v693 <= 1)
    {
      size_t v704 = v757;
      goto LABEL_921;
    }
    if (v697 >= 1)
    {
      int v725 = 0;
      LODWORD(v726) = 0;
      int32x2_t v727 = v767[676];
      int v728 = v767[691].i32[0];
      do
      {
        if (v728 >= 1)
        {
          int v729 = 0;
          uint64_t v726 = (int)v726;
          do
          {
            if ((int)v703[v726] >= 1)
            {
              __int32 v730 = *(_DWORD *)(*(void *)&v727 + 4 * v726);
              if (v730 >= v767[700].i32[0])
              {
LABEL_950:
                LODWORD(v732) = 4;
              }
              else
              {
                uint64_t v731 = 0;
                while (1)
                {
                  uint64_t v732 = v731 + 1;
                  if (v730 < dword_1D0DA53B4[v731]) {
                    break;
                  }
                  ++v731;
                  if (v732 == 3) {
                    goto LABEL_950;
                  }
                }
              }
              v703[v726] = v732;
              int v728 = v767[691].i32[0];
            }
            ++v726;
            v729 += 16;
          }
          while (v729 < v728);
          int v697 = v767[691].i32[1];
        }
        v725 += 16;
      }
      while (v725 < v697);
    }
  }
  else
  {
    int v698 = 0;
    LODWORD(v699) = 0;
    int v700 = v696[691].i32[0];
    while (v700 < 1)
    {
LABEL_917:
      v698 += 16;
      if (v698 >= v697) {
        goto LABEL_918;
      }
    }
    int v701 = 0;
    uint64_t v699 = (int)v699;
    while (1)
    {
      int v702 = *(_DWORD *)&v680[4 * v679[v699]];
      v679[v699] = v702;
      if (v702 >= v693) {
        break;
      }
      ++v699;
      v701 += 16;
      int v700 = v767[691].i32[0];
      if (v701 >= v700)
      {
        int v697 = v767[691].i32[1];
        goto LABEL_917;
      }
    }
    bzero(v680, 4 * v767[700].i32[1]);
    v705 = v679;
    unsigned int v98 = v767;
    size_t v704 = v757;
    bzero(v705, v757);
    v703 = (_DWORD *)v767[103];
LABEL_921:
    bzero(v703, v704);
  }
LABEL_922:
  sub_1D0D23384((uint64_t)v751);
  int32x2_t v706 = v98[379];
  if (*(unsigned char *)(*(void *)&v706 + 465))
  {
    unsigned int v707 = *(unsigned __int8 *)(*(void *)(*(void *)&v706 + 40) + 2096);
    if (*(unsigned char *)(v584 + 484))
    {
      unint64_t v708 = v98[691].u32[1];
      if ((int)v708 >= 1)
      {
        unint64_t v709 = 0;
        char v710 = v707 - 8;
        uint64_t v711 = *(void *)(*(void *)(*(void *)&v706 + 576) + 10760);
        uint64_t v712 = v98[693].u32[0];
        int32x2_t v713 = v98[734];
        do
        {
          if ((int)v712 >= 1)
          {
            uint64_t v714 = 0;
            uint64_t v715 = 0;
            uint64_t v716 = *(void *)&v98[767] + 4 * (v709 >> 3) * ((uint64_t)(v98[691].i32[0] + 7) >> 3);
            do
            {
              *(_WORD *)(*(void *)&v713 + v715) = ((*(unsigned __int16 *)(*(void *)&v713 + v715) << v710)
                                                   * *(unsigned __int16 *)(v711
                                                                                       + 2
                                                                                       * *(unsigned int *)(v716 + (v714 >> 33)))) >> 8;
              v715 += 2;
              v714 += 0x800000000;
            }
            while (2 * v712 != v715);
          }
          v709 += 8;
          *(void *)&v713 += 2 * (int)v712;
        }
        while (v709 < v708);
      }
    }
    else if (v707 >= 9)
    {
      int v717 = v98[691].i32[1];
      if (v717 >= 1)
      {
        int v718 = 0;
        char v719 = v707 - 8;
        uint64_t v720 = v98[693].u32[0];
        int32x2_t v721 = v98[734];
        do
        {
          if ((int)v720 >= 1)
          {
            uint64_t v722 = 0;
            do
            {
              *(_WORD *)(*(void *)&v721 + v722) = *(unsigned __int16 *)(*(void *)&v721 + v722) << v719;
              v722 += 2;
            }
            while (2 * v720 != v722);
          }
          v718 += 8;
          *(void *)&v721 += 2 * (int)v720;
        }
        while (v718 < v717);
      }
    }
  }
  v723 = (std::__shared_weak_count *)v98[378];
  v98[377] = 0;
  v98[378] = 0;
  if (v723) {
    sub_1D0C4C984(v723);
  }
  int32x2_t v724 = *v750;
  bzero(*(void **)(*(void *)v750 + 944), *(void *)(*(void *)v750 + 928) * *(void *)(*(void *)v750 + 760));
  bzero(*(void **)(*(void *)&v724 + 968), *(void *)(*(void *)&v724 + 936) * *(void *)(*(void *)&v724 + 752));
  bzero(*(void **)(*(void *)&v724 + 800), 2 * *(void *)(*(void *)&v724 + 760) * *(void *)(*(void *)&v724 + 768));
  bzero(*(void **)(*(void *)&v724 + 880), 16 * *(void *)(*(void *)&v724 + 840) * *(void *)(*(void *)&v724 + 848));
  return 0;
}